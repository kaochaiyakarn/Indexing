modeling interaction sheaves geometric logic karel max planck institut ur informatik saarbr germany institut ur salzburg austria email mpi sb mpg de cosy ac 
show family interacting systems notions important expressing properties systems modeled sheaves suitable topological space 
contexts geometric logic test local properties lifted global level 
develop way method study interacting systems illustrated examples 
properties systems expressed assertions states actions transitions behavior time 
show family interacting systems certain circumstances notions modeled sheaves suitable topological space topology expresses interacting systems share information 
main advantage allows geometric logic order study links properties systems obtained interconnecting families interacting systems components 
opens way possibility verifying certain properties complex systems modular way increasing eciency 
existing approaches concurrency sheaf presheaf theory mention mp pfa gog lil mal win cw :10.1.1.52.4296
starting point research pfa ideas goguen gog monteiro pereira mp :10.1.1.52.4296
idea modeling states actions transitions sheaves respect topological space geometric logic studying link properties components properties systems arises interconnection best knowledge new 
preliminary results theoretically involved framework appear sof 
results simplify considerably extend sof 
structured follows 
section basic notions sheaf theory geometric logic 
section discusses systems communication subsystems want model 
section describes sheaf theoretic model geometric logic test local properties lifted global level 
preliminaries results sheaf theory geometric logic 
de nitions refer joh 
notions category theory sorted logic assumed known 
categories sheaves usually denoted sans serif style set sh 
sheaf theory 
topological space topology presheaf functor op set 
open sets 
corresponding morphism 
restriction denoted sheaf presheaf op set satisfying property open cover family elements unique stalk sheaf point colimit lim ranges open neighborhoods morphisms sheaves natural transformations functors 
sh denote category sheaves assignment 
de nes stalk functor stalk sh set 
interpreting sorted rst order languages sh 
rst order language consisting collection sorts collections function relation symbols 
terms atomic formulae de ned standard way compound formulae constructed connectives quanti ers sort interpretation sh constructed associating sheaf sort 
relation symbol arity 
xn arrow 
sh function symbol arity 
xn term xn sort inductively interpreted arrow 
formula xn free variables fv fx xn sort gives rise xn xn 
details refer ch 
geometric formulae axioms 
geometric formula formula built atomic formulae connectives quanti er 
geometric axiom formula form xn geometric formulae 
geometric axiom xn satis ed interpretation sh xn subobject xn sh 
geometric morphisms preservation properties 
continuous map topological spaces 
direct image functor sh sh corresponding associates sh sheaf op set de ned inverse image functor sh sh associated de ned follows sh bundle associated sh sheaf associated bundle obtained constructing pullback preserves nite limits arbitrary colimits left adjoint preserves interpretation geometric formula 
preserves interpretation geometric axioms 
right adjoint preserves limits unions images general 
preserves extent existential quanti cation follows 
theory language variable called provably unique value model uniquely determined values remaining free variables 
cartesian formula relative formula built atomic formulae connective quanti er provably unique variables 
cartesian axiom relative formula form cartesian formulae relative cartesian theory theory axioms ordered cartesian relative preceding ones 
direct image functors preserve models cartesian theories 
systems aim modeling interconnected systems hardware software 
assume system described set control variables system set constraints set atomic actions set constraints way describing systems uenced fact practical applications state system determined values certain control variables dependencies may exist 
example detailed motivation sof 
de nition 
sort signature consisting set sort sorts set operation symbols set predicate symbols structure structure sort ffm frm gr arity fm sn arity rm sn class structures denoted str sorted set variables fx sort fma set formulae 
str sort preserving assignment fma abbreviated follows de ned usual way cf 
ck ch 

de nition 
system tuple sort fx sort form language ls system fma set constraints variables closed respect semantical consequence relation str set actions set variables depends transition relation sat sat sat fs jx relation de ned assignment values variables 
set constraints actions expressed boolean equations fb free boolean algebra generated stating actions executed parallel contain boolean equations deduced follows may refer components system adding subscript signature 
denote minimal set variables depends transition relation associated de nition states parallel actions 
system 
state assignment satisfying formulae set states system st fs admissible parallel actions sets actions represented maps satisfy constraints set admissible parallel actions set pa ff satis es cg 
restrict attention nite systems systems signatures sets control variables sets actions nite suces practical applications avoids modeling undesirable case nitely actions occurring parallel 
transitions 
system 
st jx jx order extend notion transition parallel actions non equivalent properties transitions express compatibility actions admissible parallel action disj indep 
disj pa st st jx jx new local states agree intersections 
transition induced st jx jx 
indep assume identi ed action parallel execution pa st 
identify elements 
fa fb arbitrary subset 
assume de ned fb pa ii 
bm bm implies permutation mg exist states 
nal state 
transition induced st exist st ng 
easy see 
property disj applies parallel action admissible components consume common resources 
happens example disjoint 
property indep re ects transitions parallel actions interpreted actions performed parallel consume common resources 
speci cally applies state reached executing action uniquely determined 
case fact components parallel action applied state necessary condition applicable state general sucient addition sure resources perform actions 
condition indep holds instance set consequences set consisting formulae form 
condition indep ii states order actions executed relevant determining nal state 
communication subsystems systems usually related systems 
assume order systems able communicate need dictionary 
elements equal dictionary identi ed communicating systems supposed share common control variables common actions 
assume values common control variables sensed simultaneously systems 
essential model systems common subsystems communication handled dictionaries translations focus aspect 
de nition 
systems 
say subsystem denoted 
xs constraints resp 
cs consequences constraints resp 
ms str str forgetful functor 

regard transition perspective variables may change values apparent cause action performed depends variables xs case call subsystem 
transition connected 
formally de nition 
de nition 
transition connected subsystem denoted 

conditions hold xs xs st jx jx jx jx easy see relation 
partial order systems 
de ne category objects systems morphism 
subsystem theorem 
pullbacks respect order subsystems system denote operation colimits diagrams subsystems system 
concrete applications tend interested subcategory containing systems relevant application 
assume family insys interacting systems speci ed ful lling insys subsystems system nite 
insys closed pullbacks subsystems insys meet semilattice 
rst condition enforces compatibility models common sorts niteness insys second third condition sure systems communication handled taken account 
system obtained interconnecting elements insys seen set elements insys interaction arises subset insys downwards closed respect 
colimit family elements 
de ne insys consisting families elements insys closed subsystems 
topology insys 
modeling sheaves show notions states parallel actions behavior time represented sheaves topological space insys insys previously de ned 
fact notions expressed sheaves respect appropriate grothendieck topology category systems noticed sof 
show framework simpli ed 
main advantage simpli cation express properties systems internal logic topos sheaves insys 
geometric logic study properties preserved interconnecting systems interpretations corresponding individual systems obtained stalk functors interpretations corresponding interconnection obtained global section functors colimits 
de nition states parallel actions 
st st insys op set de ned objects st st 
jx st st st de ned st 
pa pa insys op set de ned objects pa pa 
ja pa pa pa pa theorem 
functors st pa sheaves insys 
insys stalk bijection st resp 
pa 
insys st resp 
pa bijection st su resp 
pa su su colimit diagram de ned proof sketch fact st pa sheaves follows immediately de nition sheaf 
fact exists bijection st resp 
pa st su resp 
pa su su colimit diagram de ned insys follows de nition colimit account subsystem formula state satis es restriction satis es ii insys family fs gs states compatible common variables glued unique state colimit su diagram de ned shown stalk st st 
colimit diagram de ned fs insys 
st bijection st 
results hold pa insys pa transition relation associated explained section 
de nition transition 
tr tr insys op set de ned objects tr pa st ug tr tr tr de ned tr pa st st 
theorem 
functor tr insys op set pa st st insys stalk bijection transitions obey disj indep insys tr bijection su su su colimit diagram de ned proof idea fact tr pa st st follows immediately 
careful analysis shows transitions obey disj indep insys family local compatible transitions systems glued global transition su su colimit diagram de ned ii restrictions transition su transition fact stalk bijection proved theorem 
de ne behavior time complex system 
ideas uenced gog objects modeled functors op set base observation behavior described componentwise :10.1.1.52.4296
propose slightly di erent way modeling behavior 
follows time assumed discrete actions take constant unit amount time 
assume basis topology consisting sets ng behavior interval complex system modeled successions pairs state action component subsystems observed show behavior arbitrary xed time interval modeled sheaf 
may interesting combine sheaf conditions respect time respect structure system planned 
de nition behavior 
arbitrary xed 
behavior time interval modeled insys op set de ned insys fh st pa st pa st pa st pa st pa 
expresses fact 
fh st pa ks ks expresses fact 
theorem 
insys op set sheaf 
insys stalk bijection 
transitions obey disj indep insys bijection su su colimit diagram de ned proof idea fact sheaf follows de nition fact st pa tr sheaves 
existence bijection su follows results theorems proving su bijection fst rg 
order reason evolution systems time may useful express time internally category sh insys 
de nition time 
time modeled shea cation constant presheaf insys op set de ned abuse notation denote 
de ne functors st pa encode information states resp 
actions 
various sheaves natural transformations de ned standard categorical constructions sh insys 
de ne natural transformation bn st pa components bn au st pa de ned au insys 
theorem 
insys stalk isomorphism map st pa de ned 
proof sketch follows immediately way stalk functors de ned morphisms fact theorems fs fst pa fact ns alternative way describe behavior traces execution 
obtained results extend mp give sheaf theoretic formalization results die 
due space limitations results details cf 
ss 
denoted shown insys fi locally 
natural number object sh insys maps subobject de ned 
geometric logic express properties systems xed sorted language including sorts st ate pa action ime constants st initial state initial moment time function symbols appl st pa st pa st st pa pa relation symbols tr pa st st sort interpretation sh insys st st pa pa bn appl canonical projections tr tr 
sort interpret usual 
stalk functors 
insys insys de ned inverse image functor corresponding stalk functor stalk sh insys set associates sheaf sh insys stalk fs insys preserves validity geometric axioms 
stalk functors sh insys set collectively faithful re ect validity geometric axioms 
global section functor 
consider unique map insys corresponding direct image functor sh insys set global section functor insys sh insys 
global section functor preserves interpretation cartesian axiom 
theorem 
sh insys satis es geometric axiom interpretation set satis es interpretations 
sh insys satis es cartesian axiom true set interpretation interpret sort resp 

theorems know insys st st st pa pas pa system obtained interconnecting elements insys st st insys st pa pa insys pa 
holds tr insys theorem appl bn st pa 
statements states actions transitions sh insys translated resp 
corresponding statements states actions transitions resp 

illustrate ideas examples 
consider classes properties systems adapted kr express language instance possible behavior moment time expressed appl state expressed appl appl st pa st 
safety properties form formulae examples mention partial correctness final global invariance 
liveness properties form denoting initial nal state examples total correctness termination final accessibility 
precedence properties form theorem 
assume conditions ful lled nal states form st st interpreting sort st 
happens de nition system nal states speci ed additional constraints de ning colimits information 
properties expressed sorts constants function relation symbols mentioned section interpreted sh insys set express insys corresponding property 
formulae considered safety liveness precedence properties preserved inverse image functors de nitions property conjunction disjunction existential quanti cation occur 
additionally preserved direct image functors conjunction unique existential quanti cation occur 
proof sketch assume holds st subsort st st st inclusion 
final expressed st exists unique 
hold formulae expressed language follows formulae geometric resp 
cartesian unique existential quanti cation occurs 
examples 

st pa tr tr express determinism 
cartesian axiom systems insys satisfy true internally sh insys 
follows true system obtained interconnecting systems insys 

pa st tr appl appl express fairness execution 
geometric axiom preserved re ected stalk functors 
existential quanti er occurs may preserved global section functor 
part cartesian theory existence provably unique validity part preserved validity preserved systems insys independent insys nite stone space cf 


st pa st tr express deadlock freedom 
contains negation sign geometric may preserved direct inverse geometric morphisms particular global section stalk functors 

empty system excluded consideration follows 
insys family subsets closed subsystems 
element insys colimit elements insys insys free frame freely generated insys constraint empty family systems covers empty system 
considerations remain valid insys replaced insys 
space insys totally disconnected insys largest common subsystem empty space compact additionally insys nite 
situation larger class axioms preserved global section functor uniqueness existential quanti cation required cf 
joh ch 

de nition time sheaf expresses fact independent systems may independent clocks 
showed family insys interacting systems closed pullbacks endowed topology models way systems interact 
states parallel actions transitions behavior described sheaves topological space 
geometric logic determine kind properties systems insys preserved interconnecting systems 
results uenced results goguen gog framework modeling concurrent interaction :10.1.1.52.4296
objects taken sheaves behavior systems diagrams framework corresponds constructing limit interconnecting systems amounts colimits 
goguen suggests look elaborate framework topos theory see kind reasoning achieved internal logic topos sheaves 
direction explored 
main advantage approach opens possibility verify properties complex systems modular way 
papers model checking decomposition systems avoid state explosion problem 
refer instance cgl systems modeled nite kripke structures 
context shown formulae universal computation tree logics actl checked modular way certain fairness assumptions ii may necessary additional assumptions environment verifying properties individual components 
formulae actl geometric cartesian formulae de ned restrictions imposed existential quanti cation negation 
gain better understanding possible links results methods model checking mentioned 
plan continue research directions 
consider categories special morphisms conservative extensions de nitional extensions 
second consider general morphisms expressing translations languages di erent systems 
theory institutions may suitable theoretical framework 
third showed transitions de ne tr pa st st associate generic transition system category systems states actions sheaves 
results ad amek de ning automata category applied concrete category sh insys allow carry general constructions minimal realization 
ad amek automata algebras categories 
kluwer academic publishers 
cgl clarke grumberg long 
model checking 
nato asi series volume new york heidelberg berlin 
springer verlag 
ck chang keisler 
model theory 
north holland amsterdam rd edition 
cw cattani winskel 
presheaf models concurrency 
van dalen bezem editors proceedings computer science logic lncs pages 
springer verlag berlin 
die 
combinatorics traces 
lncs 
springer verlag 
gog goguen :10.1.1.52.4296
sheaf semantics concurrent interacting objects 
mathematical structures computer science 
joh johnstone 
stone spaces 
cambridge studies advanced mathematics 
cambridge university press 
kr kr 
temporal logic programs volume eatcs monographs theoretical computer science 
springer verlag 
lil lilius 
sheaf semantics petri nets 
technical report dept computer science helsinki university technology 
mal malcolm 
interconnections object speci cations 
wieringa editors working papers international workshop information systems correctness reusability 
appeared internal report ir vrije universiteit amsterdam 
mac lane moerdijk 
sheaves geometry logic 

springer verlag 
mp monteiro pereira 
sheaf theoretic model concurrency 
proc 
logic computer science lics 
pfa 
logical systems 
kelemen editors proc 
fundamentals arti cial intelligence research volume lncs subseries lnai pages 
springer verlag 
sof 
sheaf theoretic approach cooperating agents scenarios 
campbell editors proceedings arti cial intelligence symbolic mathematical computation international conference lncs pages 
springerverlag 
ss 
structures applications automated theorem proving certain classes finitely valued logics modeling interacting systems 
phd thesis risc linz kepler university linz 
win winskel 
presheaf semantics value passing 
montanari sassone editors concurrency theory th international conference concur proceedings lncs pages 
