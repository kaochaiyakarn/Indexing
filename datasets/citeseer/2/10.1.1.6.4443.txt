xray views understanding internals classes ar st phane ducasse oscar nierstrasz software composition group university bern switzerland ducasse oscar iam unibe ch understanding internal workings classes key prerequisite maintaining object oriented software system 
unfortunately classical editing browsing tools offer mainly linear textual views classes implementation 
views fail expose semantic relationships internal parts class 
propose xray views technique concept analysis reveal internal relationships groups methods attributes class 
xray views composed elementary collaborations attributes methods help engineer build mental model class works internally 
xray views illustrate approach applying smalltalk class 
keywords class understanding concept analysis logical views understanding source code key activity maintenance software systems 
specific case object oriented systems reading code harder procedural systems maintenance higher 
due reasons 
issue contrary procedural languages method definition order file important 
simple apparent top call decomposition languages propose visibility notion private protected public 
furthermore run time architecture apparent source code exposes class hierarchy 
important problem presence late binding leads yoyo effects walking hierarchy trying follow call flow 
focusing classes considered cornerstones object oriented systems propose technique support software engineers task understanding complex object oriented system 
requiring engineer read code line line understand class works provide logically connected xray views classes give engineer impression relationships methods attributes invocation access patterns class 
way support opportunistic understanding engineer understands class iteratively exploring patterns reading code 
account class sole unit able provide answers questions class methods access attribute directly indirectly groups methods access directly indirectly attributes subset attributes methods called internally methods attributes heavily accessed methods attributes collaborate 
aspects important understanding inner workings class unfortunately dispersed source code easily straightforward reading source 
reason generate graph representation source code run tool applies concept analysis detect different collaborations compose xray views 
concept analysis ca branch lattice theory allows identify meaningful groupings objects common attributes groupings known concepts form partial order known concept lattice 
algorithms computing concepts concept lattice context 
details interested reader refer ganter wille 
apply technique limit approach understanding single class account relationships subclasses superclasses peer classes 
short version approach introduced structured follows section introduces definition elements properties collaborations defined build xray views 
section introduces detail specific view validation avoid confusion object oriented terminology refer elements having common properties smalltalk class 
sections summarizes briefly related main 
applying concept analysis class understanding complex software systems composed entities classes methods modules subsystems different kinds relationships hold 
ca help detect patterns relationships encode software information hand terms elements properties 
depending exactly kinds patterns interested may apply ca radically different ways 
apply ca identify concepts correspond collaborations single class 
choose elements methods attributes class properties access invocation relationships 
note term collaboration express relationship set methods set attributes 
elements properties classes suppose class set methods set attributes basic properties extracted source code follows reads means method directly reads value attribute writes means method directly updates value attribute calls means method calls method explicitly self call 
define number derived properties accesses reads writes accesses reads writes see graphical representation class methods attributes 
calls calls accesses 
properties express direct relationships entities 
interested indirect relationships example accesses indirectly write accesses 
indirect relationships important revealing collaborations methods attributes helpful assessing impact changes 
define derived properties calls calls calls calls calls calls calls directly calls indirectly accesses directly accesses indirectly 
attribute accesses method invocations groups form 
methods attributes reads calls calls reads reads calls reads writes calls calls writes writes calls writes accesses reads writes accesses reads writes example see calls reads consequently reads apply ca example class reveal concepts 
accesses accesses collaborations interested collaborations occurring sets methods attributes extend properties sets obvious way 
suppose arbitrary subsets set elements define means entity related means entities related exclusively conversely interpretation introduce collaborations xray views built 
note case interested participants collaboration 
list 
complete list collaborations listed 
direct accessors direct accessors readers writers attribute defined relationship accesses 
collaboration provides simple classification methods attributes 
example accesses 
exclusive direct accessors method exclusive direct accessor method access directly 
express accesses 
example see accesses 
exclusive indirect accessors consider method exclusive indirect accessor calls direct accessor method specific attribute 
represented exclusive relationship accesses 
collaboration helps distinguish methods define behaviour class state state class 
example accesses 
collaborating attributes collaboration expresses attributes exclusively set methods express accesses example sets attributes accessed exclusively sets methods size reads accesses 
stateful core methods collaboration special case collaborating attributes expresses methods access state class 
express accesses collaboration interesting provides guideline attributes collaborating core class providing functionality class set methods 
example methods accessing entire state class 
xray views xray view group collaborations exposes specific aspects class 
collaborations specified defined xray views state usage external internal calls skeleton 
views address different logically related aspects behaviour class 
limited space provide small explanation detail definitions case study view state usage 
views explained detail 
state usage focuses way state class accessed methods exposes example cohesive class external internal calls categorizes methods internally externally behavioural skeleton focuses way methods invoke internally 
order illustrate approach analysis class visualworks framework 
complex class build user interfaces windows subcomponents declarative specifications provided clients 
chose class complex terms number instance variables methods communication methods helps show characteristic results xray view application 
name shows builder design patterns 
view ran analysis tool chosen class examined resulting view looking combining groups shown collaborations section view definition validated findings reading source code opportunistically 
xray view state usage description clusters attributes methods way methods access attributes 
shown collaborations exclusive direct accessors exclusive indirect accessors collaborating attributes stateful core methods 
rationale objects bundle public private behaviour state 
order understand design class important gain insight behaviour accesses state dependencies exist groups methods attributes 
validation firstly find attribute 
consider methods access directly attributes classify attributes groups attributes accessed getter policy stack cache decorator attributes accessed getter additional method labels values attributes accessed methods 
view external internal calls helps refine understanding differences 
learned accessors readers writers 
writer methods 
means attributes initialized instances created initialized modified outside class scope 
consider collaborations attributes account direct accessors find groups collaborating attributes wrapper component bindings window stack composite policy window source bindings component decorator wrapper 
methods access groups attributes reading 
attributes ones 
means attributes different methods fact reveals class grouping functionalities split set non collaborating collaborating attributes 
kind hypothesis refined behavioural skeleton view 
look indirect accesses attributes obtain new groups collaborating attributes new groups include new attributes identified direct access attribute groups 
observation learn group core attributes group methods 
specific case stateful core methods surprising class lot attributes 
related ca application understand software systems find approaches 
dekel uses ca visualize structure classes select effective order reading methods 
godin mili applied concept analysis maintain understand detect inconsistencies smalltalk collection hierarchy 
java snelting tip analysed class hierarchy making relationship methods variables explicit 
similarly applied concept analysis improve generalization specialization classes hierarchy 
applied concept analysis help understanding object oriented classes 
identified concepts collaborations groups methods attributes single class 
introduced view state usage helps understand state class 
views defined introduced 
expose specific aspects class terms groups collaborations 
limited validation smalltalk class classes scanner analyzed 
tool developed automatically generate collaborations compose xray views 
experiences observe xray view clear focus identifies set methods exhibiting key properties views stand complement reinforce generation collaborations views fully automatic interpretation entails iterative application views opportunistic code reading current approach take inheritance account limitation understanding steps explore definitions new kinds views apply larger classes 
intend explore ways analysing classes context class hierarchies considering possible relationships collaborations class necessarily class hierarchies 
acknowledgments gratefully acknowledge financial support swiss national science foundation project tools techniques decomposing composing software snf project recast evolution object oriented applications snf 
michele lanza reviews 
alpert brown woolf 
design patterns smalltalk companion 
addison wesley 
ar 
understanding classes ray views 
proceedings nd 
ase 
basili 
evolving packaging reading technologies 
journal systems software 
dekel 
applications concept lattices code inspection review 
technical report department computer science technion 
demeyer ducasse nierstrasz 
object oriented reengineering patterns 
morgan kaufmann 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
godin mili mineau missaoui 
chau 
design class hierarchies concept galois lattices 
theory application object systems 
leblanc 
galois lattice framework specify algorithms building class hierarchies 
theoretical informatics applications 
ob 
comparing performance algorithms generating concept lattices 
proc 
int 
workshop concept lattices kdd 
lanza ducasse 
categorization classes visualization internal structure class blueprint 
proceedings oopsla pages 
littman pinto letovsky soloway 
mental models software maintenance 
soloway iyengar editors empirical studies programmers workshop pages 
snelting tip 
reengineering class hierarchies concept analysis 
acm trans 
programming languages systems 
wilde 
maintenance support objectoriented programs 
ieee transactions software engineering se dec 
