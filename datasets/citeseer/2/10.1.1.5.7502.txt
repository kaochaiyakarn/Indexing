bloomier filter efficient data structure static support lookup tables bernard chazelle joe kilian rubinfeld tal oh boy david nelson ticket agent los angeles airport source bbc news introduce bloomier filter data structure compactly encoding function static support order support approximate evaluation queries 
construction generalizes classical bloom filter ingenious hashing scheme heavily networks databases main attribute space efficiency achieved expense tiny false positive rate 
bloom filters handle set membership queries bloomier filters deal arbitrary functions 
give designs varying simplicity optimality provide lower bounds prove near optimality constructions 
widely reported news story describes current facing air passengers name david nelson flagged extra security checks airports united states think security airports tight imagine name popping airline computers red flag possible terrorist 
happening david country problem bad david stopped flying altogether 
name david nelson raises red flag security officials won say terror suspect name 
transportation security administration spokesman nico said supported part nsf ccr daah nec laboratories america 
princeton university nec laboratories america chazelle cs princeton edu nec laboratories america joe nec labs com technion princeton university ee technion ac il news bbc uk hi americas stm www com story asp 
news problem due name matching technology airlines story illustrates common problem arises tries balance false negatives false positives unwilling accept false negatives whatsoever pays high false positive rate 
ideally adjust system fix particularly troublesome false positives avoiding possibility false negative life easier david world making life easier osama bin laden 
consider issues example bloom filters described 
historical background bloom filters yield extremely compact data structure supports membership queries set :10.1.1.20.2080
space requirements fall significantly information theoretic lower bounds error free data structures 
achieve efficiency cost small false positive rate items set small constant probability listed set false negatives items set recognized set 
bloom filters widely practice storage premium occasional false positive tolerable 
uses networks collaborating overlay peer peer networks resource routing packet routing measurement infrastructures 
bloom filters distributed databases support iceberg queries differential files access compute joins 
bloom filters approximating membership checking password data structures web caching spell checking 
variants bloom filters proposed 
attenuated bloom filters arrays bloom filters store shortest path distance information 
spectral bloom filters extend data structure support estimates frequencies 
counting bloom filters entry filter need single bit small counter 
insertions deletions filter increment decrement counters respectively 
filter intended passed message compressed bloom filters may parameters adjusted desired tradeoff size false positive rate 
note standard technique eliminating small number troublesome false positives just keep exception list 
solution scale lookup time storage list grows large say comparable number actual positives 
bloom filter lossy encoding scheme set equivalently boolean characteristic function set 
bloom filters allow membership queries set generalize scheme data structure bloomier filter encode arbitrary functions 
bloomier filters allow associate values subset domain elements 
method performs situation function defined small portion domain common occurrence 
terrorist detection example suspicious names map suspect popular non suspicious names david nelson map sounds suspicious really ok tiny fraction names map ok third category source error 
bloomier filters generalize bloom filters functions maintaining economical storage 
addition allow dynamic updates function provided support function remains unchanged 
application bloomier filters building meta database directory union small collection databases 
bloomier filter keeps track database contains information entry allowing user jump directly relevant databases bypass relation specified entry 
meta databases exist web example computer science bibliography mediator integrates general specific search engines debriefing meta search engine uses results search engines meta site zip codes postal codes world bloomier filters maintain local copies directory situation data code maintained multiple locations 
results function 

outside fixed arbitrary subset size 
symbol denote case function support indicate defined outside 
bloomier filters allow query point correctly point correctly specifically random output returns probability arbitrarily close 
bloomier filters shine especially size dwarfs large 
query time constant space requirement nr compares favorably naive bound nr bound nr log achieved merely listing values elements set case log bound achieved perfect hashing method munro 
course methods errs 
bloomier filters generalized handle dynamic updates 
query update function values constant time keeping space requirement nr matching trivial lower bound constant factor 
specifically change value change prove various lower bounds show results essentially optimal 
show randomization essential large domains linear space deterministic bloomier filters 
prove randomized case ability perform dynamic updates changing support adding removing requires data structure superlinear space 
techniques approach implementing bloomier filters compose assortment bloom filters cascading pipeline 
yields practical solution theoretically nearoptimal 
optimize data structure change tack pursue spirit algebraic approach expander properties random hash functions 
bloom filters assume ideal hash functions 
analyze algorithms model heuristically practical hash functions 
warmup bloom filter cascade describe simple near optimal design bloomier filtering cascading pipeline bloom filters 
illustrative purposes restrict case 
resp 
subset mapping resp 

note obvious solution consists running search key bloom filters outputs contradict 
possible fix run key sequence bloom filter pairs ai bi 
suitable parameter 
pair corresponds assignment ideally key pass test membership provided count 
need second pair bloom filters third fourth 
idea multiple bloom filters appears different context 
generally define ai set keys ai pass test bi symmetry bi set keys bi pass test ai 
words ai ai bi bi set false positives ai bi respectively 
arbitrary key run test respect 
test fails succeeds output accordingly 
tests fail output 
tests succeed conclude 
may faced false positives single false positive resolve cases call procedure recursively respect 
note resp 
plays role resp 
new universe recursively computed outputs form translated simply removing subscript 
notational convenience assume ni random variable max ai bi 
filters number hash functions large constant storage allocated filters depends ranks sequence 
provide bloom filters ai bi array size 
number bloom filter pairs smallest ni 
key ai ends ai produces false positive bi 
happens probability bi ki 
implies key belongs ai probability ki ni ki log log log probability search key runs th filter ki expected search time constant 
expected storage equal ki kn ki km 
note polynomial recursion ni log perfect hashing 
requires constant time bits extra storage 
summarize high probability random set hash functions provides bloomier filter characteristics storage kn bits ii fraction produces false positives iii search time log log worst case constant averaged optimal bloomier filter domain 
range 
subset 
tn consider problem encoding function ti vi note function entirely specified assignment 
tn vn 
purpose constructing data structure assume function values encoded elements additive group addition defined bitwise mod 
shall see false positive rate proportional chosen sufficiently large 
encoded bit binary expansion encode 
conversely define decode corresponding number 
notation log 
assignment denote value assigns ti vi 
total ordering write mean comes 
define ith element obviously 
triple assume ability select random hash function hash 
allows access random locations bloomier filter table size definition 
hash hash 
hk 
say 
hk neighborhood denoted 
bloomier filter tables store assignment created calling procedure create denotes assignment parameters chosen optimize implementation 
notational convenience omit mention parameters ambiguity 
ultimate goal create sided error linear space measured bits data structure supporting constant bit table lookups 
specifically need implement operations create assignment 
tn vn create sets data structure table 
subdomain 
tn specified denoted set value table set value table associates value domain element table 
required lookup table lookup table returns value associated fraction lookup table returns certifies 
remaining elements lookup table returns arbitrary element data structure supports create lookup referred immutable data structure 
note re assignments elements set value changes allowed 
lower bounds show allow modified linear size measured bits impossible achieve regardless query time 
words bloomier filters provably rule fully dynamic operations 
parameters interest constructions runtime operation space requirements false positive rate 
create operation runs expected log time time depending model uses log space 
set value lookup operations run time 
overview describe immutable data structure show principles construct mutable version 
table consists bit elements implementation parameters 
denote table ith bit value table 
look value associated hash function hash compute locations 
hk hi bit masking value reducing false positives 
compute table hi denotes bit wise exclusive operation 
main issues address 
set values table 
decode operations yield correct values need show high probability random solution works appropriate parameter settings furthermore wish compute assignment efficiently simple greedy algorithm 
second ensure expected fraction computed image decodes 
set table values key technique 
suitable choice show high probability ordering order respecting matching defined follows definition 
set neighborhood defined complete ordering elements say matching respects ii ti tj ti tj 
function hash understood context say respects 
set value associated setting table 
order respecting nature assignment affect previously set values 
show existence notion lossless expanders 
analysis implies high probability hash find nearly linear time greedy algorithm 
limit number false positives random mask produced hash 
distributed uniformly independently values stored table look resulting value uniformly independently distributed size small compared size high probability value encode legal value detect mutable structure table construction 
table table encode note values may computed hash compactly represented number 

follows definitions 
simply store value associated table locations collide 
finding ordering matching give greedy algorithm hash computes pair respects consider compactly represent recall hash defines neighbors 
hk hash represent element 

define 

tn shorthand ti 

algorithm abundance easy matches definition 
hash fixed defining say location 
singleton exactly define tweak hash smallest value hj singleton 
hk tweak hash exists 
tweak hash defined sets value easy match 
note choice interfere neighborhood different denote subset easy matches sort recursively find extend follows 
put elements ordering elements ordering elements arbitrary 
define union matchings immediate respects give algorithm 
note clear algorithm find match succeed 
show suitably large hash chosen random find match succeed high probability 
creating mutable bloomier filter ordering matching respects neighborhoods defined hash store values associated follows 
gives location neighborhood appears 
furthermore hash compact description element 

value construct immutable table follows :10.1.1.20.2080
compute neighborhood 
hk mask hash 
obtain properties 
set table table hi encodes value associated properties altering table affect associated values put table 
retrieve value associated simply compute table hi see correct encoding value declare random valid encoding probability order mutable table fact distinct matching value succinct representation 
hash 
technique immutable table stores value recover distinct matching value store value associated lth location second table 
give final algorithms figures 
analysis algorithm technically demanding aspect analysis showing random hash sufficiently large find match routine high probability find respects analysis algorithms straightforward 
lemma 
assuming find match succeeded create value returned lookup table assigned create set value proof 
assignment stored table generates location concise representation 

construction table set table valid representation 
claim value recovered lookup set value commands input routines recover formula remains verify operations causes value change 
observe lookup set value commands alter table 
indices table subsequently altered create form ts processed 
properties follows changes table affect recovered value observe distinct suppose 
assume loss generality 

follows table altered create set value associate value desired 
lemma 
suppose table created assignment support pr lookup table probability taken coins create assuming hash truly random hash function 
proof 
data structures generated completely independent values 
hk hash 
particular uniformly distributed independent 
value table find match hash find hash 
ti tweak ti hash defined tweak ti hash ti return failure 
recursively compute find match hash 
find match hash failure return failure 
ti add ti ti largest element far return 
determined ti step ti step 
hash find match finds ordering matching respects create 
tn vn create mutable table 
uniformly choose hash 

tn create table array elements create table array elements 
initial values tables arbitrary put hash header table assume values may recovered table 
find match hash find match hash failure goto step 
:10.1.1.20.2080
value assigned 
hk hash table encode table hi table 
return table table table assignment parameters create creates mutable data structure corresponding lookup table table table 
get hash table 
hk hash decode table hi 
defined return table return set value table table table 
get hash table 
hk hash decode table hi 
defined table return success return failure lookup looks table table table 
set value sets value associated table table table 
note set value element determined original create invocation 
uniformly distributed values encoding legitimate values 

ideal setting hash truly random suffices set lg achieve false positive rate 
course hash generated heuristically best pseudorandom analysis taken context 
note hash cryptographically strong pseudorandom function behavior data structure hash computationally indistinguishable truly random hash functions provable pseudorandomness properties complicated practice 
analyzing find match remains show reasonable probability constant probability suffices purposes find match find pair respects recall find match works finding easy set solving problem recursively combining solutions get solution show find match terminates suffices show subset find match find nonempty easy set ea implying find match progress 
bipartite graph defined follows left side vertices 
ln corresponding elements right side vertices 
rm corresponding 

recall hash defines ti set values 
hk 
contains edge li property crucial analysis definition 

say singleton property nonempty exists vertex ri ri adjacent exactly vertex claim singleton property find match get stuck 
find match called subset resulting easy set contain ri nonempty 
reduce singleton property lossless expansion property 
set neighbors vertex set elements definition 

say lossless expansion property nonempty 
lemma 
lossless expansion property singleton property 
proof 
assume contrary node degree 
graph edges 
lossless expansion property greater edges contradiction 
choosing hash random corresponds choosing distribution selects replacement random vertices 
rk adjacent 
random graphs studied lemma follows standard counting argument 
lemma 
chosen fixed 
constant sufficiently large lossless expansion probability probability 
proof 
sketch probability counterexample ks ks ks en ks ecn ks cn ks cn 
lower bounds consider case 
set splits subsets map respectively 
natural wonder single set hash functions sufficient pairs words deterministic bloomier filtering possible bits storage 
provide negative answer question 
lower bound holds nonuniform algorithms words may arbitrary large amount storage bloomier filter tables long encoding depends lemma 
chromatic number log ln 
proof 
consider minimum coloring vector sequence indices exists color zc 
zc 
see consider choice matches coordinates positions 

turn minus ones zeroes resulting set vectors universal meaning restrictions vectors choice coordinate positions produce possible patterns 
kleitman spencer number vectors known log 
upper bound existence universal set vectors size log established turn zeroes minus ones 
alternatively razborov bound size separating sets 
node colored picking vector universal set matches ones minus ones vector associated node 
going back randomized model bloomier filtering consider happens attempt modify set 
give negative answer time universe size need polynomially larger scheme break 
intuitively shows information lost linear bit size encoding function allow changes set theorem 
number storage bits satisfies log log cn large constant bloomier filtering support dynamic updates set theorem 
deterministic bloomier filtering requires log log bits storage 
proof 
graph nodes corresponding distinct vector proof 
consider disjoint union set resp 
mapping resp 

fix original consider assignments exactly coordinates equal equal 
nodes adjacent exists coordinate position corresponding vectors 
xn 
yn satisfy 
intuitively node corresponds choice coordinates coordinates 
nodes joined edge set node intersects set 
table source information adjacent nodes correspond table assignment size array log chromatic number theorem follows directly lemma 
table corresponding various choices assignment associated certain family element sets largest family obviously integer lk set elements belong sets 
easy see lk small 
fk denote subfamily consisting sets subsets lk 
obviously fk assumptions theorem imply cn choice ensures fk lk fk follows lk expected number sets random element intersects 
element denote subfamily sets intersect random 
lk 
lk intersects sets lk kn lk new choice revealed table gets updated 
information encoded previous table assignment 
algorithm distinguish sets summarize random algorithm answer search key lb furthermore prob lk partition family element sets assignment corresponds 
gives subfamilies gi gi mi denotes union lk gi new choice gi algorithm answer search key mi 
previous imperative mi disjoint lb show small random choice sets intersect high probability 
fix parameter lk cm 
denote index gj lk 
random chernoff bound probability lk 
hand conditional probability mi lk max lk lk lk 
probability mi 
follows probability mi intersects lb algorithm fails 
bloom space time tradeoffs hash coding allowable errors cacm :10.1.1.20.2080
broder mitzenmacher network applications bloom filters survey allerton 
munro membership constant time minimum space siam comput 

buhrman radhakrishnan venkatesh optimal 
proc 
th stoc 
byers considine mitzenmacher informed content delivery adaptive overlay networks proc 
acm sigcomm vol 
computer communication review 
reingold wigderson randomness conductors constant degree expansion degree barrier proc 
th stoc 
cohen matias spectral bloom filters sigmod 
acuna martin nguyen planetp gossiping build content addressable peer peer information sharing communities rutgers technical report dcs tr 
estan varghese new directions traffic measurement accounting proc 
acm sigcomm vol computer communication review 
fan cao 
almeida broder summary cache scalable wide area web cache sharing protocol ieee acm transactions networking 
fang shivakumar garcia molina motwani ullman 
computing iceberg queries efficiently proc 
th int 
conf 
vldb 
feng shin kandlur saha stochastic fair blue queue management algorithm enforcing fairness infocom 
fredman storing sparse table worst case access time acm 
designing bloom filter differential file access comm 
acm 
hsiao geographical region summary service geographical routing mobile computing communications review 
kleitman spencer families independent sets discrete math 
taylor seltzer selforganization peer peer systems proc 
th european sigops workshop september 
li ross perf join alternative twoway semijoin cikm proc 
ternational conference information knowledge management november 
luby lt codes proc 
rd annu 
ieee symp 

comput 
sci 
lohman optimizer validation performance distributed queries proc 
int conf 
vldb 
manber wu algorithm approximate membership checking application password security information processing letters 
mcilroy development spelling list ieee trans 
communications com 
mitzenmacher compressed bloom filters ieee transactions networking 
mullin optimal distributed database systems ieee transactions software engineering 
razborov applications matrix methods theory lower bounds computational complexity combinatorica 
rhea kubiatowicz probabilistic location routing proceedings infocom 
wessels cache digests computer networks isdn systems 
sipser spielman expander codes ieee trans 
inform 
theory 
snoeren partridge sanchez jones kent strayer ip traceback proc 
acm sigcomm vol 
computer communication review august 
whitaker wetherall forwarding loops proc 
th 
