wing woodcock davies 
eds fm formal methods 
proceedings vol 
ii 
lecture notes computer science 
springer uniform workbench universal development environment formal methods bernd krieg jan ernst olderog alexander baer bremen institute safe systems university bremen bremen informatik uni bremen de jp informatik uni bremen de university oldenburg oldenburg olderog informatik uni oldenburg de 
berlin com 
uniform workbench supports combination formal methods solid logical foundation provides tools development hybrid real time reactive systems transformation verification validation testing 
comprises universal framework integration methods tools common development environment 
industrial case studies described 
uniform workbench universal formal methods workbench cf 
kri developed universities bremen oldenburg berlin funded german ministry education research bmbf 
formal methods modelling mathematically founded specification language proving properties specification supporting correct development 
need arises aspects properties software generally systems physical environment hybrid hardware software system timing behaviour real time constraints embedded system hazards safety requirements safety critical system concurrent interactions reactive system deadlock livelock prevention performance dependability analysis architectural resource requirements stages software development process requirements design specifications implementation single module 
unrealistic expect unique standard formalism cover needs listed 
solution variety formalisms complement adapted task hand specification languages development methodologies specific development methods proof techniques spectrum tool support 
challenge cater correct combination formalisms ensure correct transition concrete specifications switching formalisms development process vertical composition ensure correct combination formalisms heterogeneous situation combining concurrent sequential fragments horizontal composition enable verification particular properties adherence security model absence deadlocks satisfaction performance requirements 
issue correct combination integration tools support formal methods 
tools invariably differ exact language semantics support tool combination realize correct combination resp 
methods 
combination methods integration software life cycle integration formal methods existing process models important success industry 
software life cycle process model model originally german development standard internationally recognised 
standards loads heavy burden developer prescribing multitude documents produced 
tool support essential tailor model needs particular enterprise tailor model special project hand fixing methods tools support enactment guiding controlling methods tools provide automatically generated development documents 
tool support working model provided stand project management components facilitating document production process project manager 
uniform project adopted different approach model utilisation formally speaking model generic specification system development process 
tailoring model particular enterprise means instantiating development process specification determining products specifications code hardware tests proofs created activities people responsible product methods development step tools application methods 
convinced instantiation process best performed development environment tailoring process project management documents output simultaneously configure workbench specific configuration development project 
approach presently implemented bw pur graphical development process assistant adapting model formal methods development quality assurance intimately related 
model heavily interwoven hypertext document generated common database tool support items cf 
fig 
integration development environment uniform workbench allows coordination methods tools item 
tools generate development documents conformance model cf 
item development history fig 

fig 

example model process graph supported uniform workbench combination conventional semi formal formal techniques arises naturally interfacing methods context model 
safety considerations employment formal methods restricted parts system 
ideally graphical interfaces give illusion working informal method underlying formal semantics provides hooks formal methods cf 
plc automata section 
time advisable flip back forth informal techniques high level abstraction requirements analysis formal methods detail required complete formalisation premature burden formal methods useful early stage support analysis 
example specialisation fault trees hazard analysis develop safety requirements safety mechanisms 
combination formal methods combinations formal methods means easy achieve 
need research recognised requires demanding mathematical foundations advanced methods category theory 
lead languages institution independent heterogeneous composition modules large see ac tar dia approaches reasoning correct composition logics capturing semantics small see mos mos mtp mtp ssc introduce notions embedding translating formalism combination formalisms projecting combination 
csp csp hol correct transformation rule proof correctness meta level object level encoding fig 

semantic representation uniform semantic representation 
approach uniform represent semantics underlying particular formalism language higher order logic hol realized logical framework isabelle pau 
fig 
shows tiny logic graph csp projections combination csp plus logic encoding hol meta level 
specifications languages represented theories isabelle theorem proving verification system top isabelle cf 
section basis transformational development cf 
section proving correctness transformation rules 
hol hol csp hol casl 
hol logic represented cf 
kol mathematical tool kit proved correct operation project resulted ca 
theorems line proof script ca 
person years effort 
hol csp represents logic csp small pervasive error year old theory csp corrected tw 
process algebra proved correct resulted ca 
theorems line proof script ca 
person years effort 
example shows endeavour means trivial pays 
proof correctness transformation rules particular easier 
statistics includes effort familiar intricacies isabelle effort went proof process algebra csp 
subsequent representation logics static semantics casl basic specifications including intricate overloading resolution required person year effort 
reactive real time systems 
instantiation uniform csp considered mature successfully applied industrial cases 
moment working methods structural transformations project csp object cf 
fis fs csp csp real time constraints csp constraints hand simple timer processes cf 
fig 

specialised methods projected domains 
breakdown successfully testing real time hybrid systems cf 
section 
combination csp object 
csp suited description communicating processes object object specification method data states state transformations 
motivated previous oldenburg esprit basic research action provably correct systems combination methods specification language csp oz proposed fis fs 
csp oz process aspects described csp data aspects object 
specific achievement simple semantics combination ideas embedding object standard semantic model csp called failures divergences model ros semantic definition combination synchronous parallel composition csp part object part csp oz specification 
csp oz specification semantics failures divergences model assigned 
consequence concept refinement model applicable csp oz 
shown process refinement csp part data refinement object part yield refinement csp oz specification hal 
fdr failures divergences refinement commercially available model checker csp fdr applied csp oz specifications 
target code plc code dc normal form translation transformation isabelle hol csp timer csp timer csp csp csp csp csp code code interpreter hybrid systems real time systems fig 

method combination uniform combination duration calculus 
specification time critical aspects computer systems duration calculus dc short cf 
chosen start uniform project 
dc intended formalization high level requirements 
lowest level programmable logic controllers short considered simple devices widespread control automation technology 
plc interacts sensors actuators cyclic manner 
cycle consists phases input phase sensor values read stored local variables state transformation phase local variables updated stored program output phase values local variables output actuators 
real time constraints implemented help timers set reset state transformation phase 
reaction time plc depends cycle time 
challenges uniform project bridge gap duration calculus way correctness plc software proven requirements formalised dc 
discoveries uniform project behaviour modelled novel type automaton called plc automaton die cf 
fig 

semantics plc automata describes cyclic behaviour plc defined terms duration calculus 
plc automata represent combination concept plc dc 
enables integrate plc automata general methodology design real time systems dc old 
fig 
plc automaton cofi standard family specification languages 
standard formalism aspects formal methods pragmatically undesirable impossible projection restricted supposedly simpler formalism allows easier reasoning specialised tools 
standardisation aimed welldefined areas 
ifip wg foundations system specification years experience esprit wg compass cf 
kri started common framework initiative algebraic specification development cofi 
cofi international effort primarily european groups developing family specification languages methodology guide associated tools 
major language family common algebraic specification language casl just completed basis sublanguages extensions family 
complete formal semantics 
casl powerful general specification language order logic specifications partial total functions predicates subsorting generalized overloading cofi mos 
sublanguages casl connection planned extensions higher order objectoriented concurrent aspects allow interfacing specialised tools mapping specification languages mos aspect crucial intended impact 
various parsers exist prototype implementation uniform workbench comprises static semantic analysis basic specifications theorem proving isabelle basis transformational development 
fig 
moby plc tool development plc automata tools development development plc software university oldenburg tool called moby plc designed implemented supports plc automata dt see fig 

tool comprises components graphical editor drawing plc automata simulator networks plc automata compiler generating plc code st structured text dedicated programming language algorithm static analysis real time constraints compilers generating input real time model checkers uppaal kronos synthesis algorithm generating plc automata specifications written subset duration calculus called dc 
tools csp oz combined specification language csp oz graphical editor called moby oz developed 
class library moby plc tool 
editor enables user perform type checking object type checker wizard 
verification formal methods meant development dependable systems apart safety security aspects availability reliability fault tolerance general adherence functionality requirements important 
correctness aspect obviously heart matter 
particular safety critical domains application developers increasingly aware importance methods guaranteeing correctness formal specification requirements invent verify paradigm synthesis transformation 
abstraction verify special properties 
bps technique abstracting existing program verify absence deadlocks livelocks developed 
applied successfully lines occam implementing safety layer fault tolerant computer international space station alpha developed ri bremen scalable applicable realistic applications 
concrete program abstracted formal specification csp containing essential communication behaviour approach guarantees proof program implies proved property concrete 
proof fails property hold abstraction fine 
task split manageable subtasks modularisation process structure set generic composition theories developed application 
modules model checked tool fdr fdr 
abstraction done hand research focus implementing formal abstraction transformations uniform workbench support process 
model checking important technique practice 
fdr tool fdr useful csp validating specifications proving properties deadlock freeness development proving correctness refinement invent verify paradigm 
transition graph generates interpreted run time technique safety layer computer board train see section 
abstraction modularisation method applied international space station described preceding paragraphs shows things model checking extremely useful resp 
data types essentially enumeration types systems small 
large systems properties violated reasoning modularisation composition properties necessary proof tools desirable 
model checking interactive proofs go hand hand 
uniform workbench fdr tool interactive proof tool 
experience hp solving train control problem general cf 
section reasoning algebraic properties high level abstraction necessary subsequent refinements model oriented specifications model checking practical problem general solution far 
fig 

isabelle proof assistant uniform window isabelle 
uniform workbench extensive generic theorem prover isabelle pau heavily relies possibilities interaction tactic definition 
graphical user interface window isabelle constructed hides unnecessary details user lw 
objects theories substitutions proof rules simplification sets theorems proofs typed cf 
fig 
icons dragged manipulation window achieve various effects 
graphical approach major advance cryptic textual interface 
example set rewrite rules simplification dragged ongoing proof goal manipulation 
development transformation architecture uniform transformation verification system 
fact theorem proving transformation form deduction analogous uniform verification system shares substantial part implementation transformation system tas cf 
fig 
see lw 
isabelle implemented standard ml sml tk typed interface sml tcl tk top generic user interface gui provides appearance fig 
fig 

basic system parametrized functor sml terminology facilities theorem proving transformation tas 
addition share focussing manipulation scripts proofs development histories 
tcl tk wish logics standard ml isabelle hol sml tk generic gui transformation system tas transformation rules fig 

architecture tas uniform transformation system synthesis transformation 
invent verify paradigm supported definitely prefer synthesis transformation invent pragmatically powerful paradigm 
implemented transformation rule generates necessary verification condition applicability condition 
secondly automatic generation required verification conditions precisely advantages transformational approach 
developer concentrate development steps viz 
applications transformation rules verification conditions generated side tabled treatment 
single transformation rules automated transformation methods embody development knowledge compact accessible form design patterns 
transformation rules preserve correctness proved correct uniform semantics object language level logic representation hol cf 
fig 

tas uniform transformation system 
tas may parametrized logic semantic representation csp casl isabelle level transformation rules level tas cf 
fig 
lt 
top basic architecture shares tas provides icons program specification texts transformation rules possibly parametrized transformational developments progress analogy proofs cf 
shaded icon manipulation window fig 

example parametrized transformation rule applied highlighted fragment denoted focussing window editing parameters opened 
input parameters completed rule applied proof obligation possibly generated 
proof obligation may discharged development transferring verification system model checker presently fdr 
example shows development communication protocol send receive buffers sequence transformations csp 
functionality tas subsumes system hk 
basis isabelle allows compact flexible powerful realisation parametrization additional transformation rules matter minutes instantiation functor recompilation system static semantic analysis mapped type checking isabelle proof tactics defined sml programs allow automation applicability conditions fewer residual verification conditions need interactively proved user 
fig 

application parametrized transformation rule development history 
note history button allows navigation development history particular partial undo continuation different way 
development documented automatically inspected www browser initial current specification proof obligations development history 
reusability developments 
development history formal object partial replay possible 
development turned new transformation rule command generated verification conditions combined new applicability condition 
combined abstraction developments reusable new situations just products 
validation verification test environment reactive real time systems real world large scale systems complete formal development unrealistic amount code implementing application operating system drivers firmware simply large admit complete formal treatment 
furthermore correctness aspects reactive systems depend interaction software hardware number different hardware components high allow creation formal behavioural models components 
consequence recommendation formal methods practitioner follows try develop logical concepts communication flow control algorithms data transformation algorithms formal way order avoid logical flaws system design implementation 
perform formal code development far possible emphasis critical modules system testing inspection techniques 
automated testing check proper integration software hardware 
support approach rt verification validation test real time systems tool kit currently integrated uniform workbench verification validation testing 
methodology tool kit rt pel ps ps allows automatic testing verification validation test specifications 
test cases generated real time specification drive completed hardware software system black box hardware loop configuration separate computer containing test drivers simulating normal faulty environment 
testing theory ensures test actual contribution approximating converging complete verification 
important automatic test evaluation component tool kit practice execution real time tests lead thousands lines timed traces recording occurrence interleaved inputs outputs time 
manual inspection traces quite impossible 
rt performs automatic evaluation timed traces binary graph representation formal specification 
approach cost effective 
applied successfully case studies uniform control computer board train railway control see section electric power control component satellite developed bremen mey 
universal development environment uniform workbench open ended tool integration framework developing formal software development environments basis pre fabricated theshelf development tools 
workbench uses concurrent haskell central integration language extended higher order approach event handling akin process algebras 
integration done high level abstraction combines merits functional programming state art concurrent programming languages 
workbench provides support data control presentation integration utilities wrapping haskell interfaces existing development tools 
views integrated workbench reactive event driven system events amounting database change notifications operating system events user interactions individual tool events 
unique feature workbench provides uniform higher order approach event handling improves traditional approaches callbacks treating events composable class values 
subsystem interaction manager development manager repository manager netscape user user interaction manager tcl tk wish user forest transformation proof system isabelle tool user forest tcl tk wish tcl tk wish fig 
system architecture uniform workbench integration tools uniform workbench described detail kar see kar cf 
fig 

control integration provided subsystem interaction manager uniform concurrency toolkit tools interact fine grained network communicating concurrent agents general loosely coupled intermittent adaptors cf 
kar kar 
repository manager kw takes care data integration interface public domain version industry standard portable common tool environment pcte provides version configuration control graphical interface cf 
fig 

user interaction manager provides presentation integration incorporating interfaces see fw fr cf 
fig 
fig 
extension forest www browser tcl tk window management 
particular manageable homogeneous encapsulation typed high level interface haskell 
haskell internal integration language higher order objects processes transmitted objects 
external tools wrapped haskell interface working adaptation interface definition language industry standard corba haskell shortly open possibilities integrate tools say java 
architectures development tools avoid self containment allow integration 
possibility control data integration tool data type important obvious tool may allow remote control insist call backs integration persistent data storage common repository may require export import local storage presentation integration user interface fact tool graphical user interface 
interactive posix tools usually line oriented interface easily adapted kar 
way graphical interface hugs developed matter weeks 
isabelle tas integrated workbench various tools instantiated uniform workbench cf 
fig 

die eps keine 
die wird auf einem postscript drucker 
eps eps pm fig 
workbench increase productivity functional languages 
quite obvious formal methods eventually produce tools realistic moment really large systems 
experience best functional programming languages far estimate increase productivity say factor number lines backed empirical evidence 
development large non trivial tools period years impossible academic environment 
tas extensions isabelle comprise lines sml graph visualisation system developed werner fw fr period years comprising lines functional language developed bremen plus lines interfacing tool integration framework uniform workbench developed entirely karlsen kar lines haskell 
case studies control single track segment close cooperation industrial partner case study control single track segment defined 
problem concerns safety tram traffic segment single track available see fig 

bottle neck occur example repair 
task control traffic lights way collisions driving opposite direction avoided certain general traffic rules obeyed 
real time requirements occur locally sensor components es cs ls es cs ls near track 
methodology plc automata applied case study 
starting informal requirements customer case berlin traffic network consisting plc automata constructed moby plc tool part uniform workbench dt die 
moby plc network simulated tap 
essential safety properties proven example direction single track segment green traffic light 
network plc automata compiled lines plc code programming language st structured text distributed indicated fig 

fig 
tram control control jena successful experiment moby plc oldenburg group challenged attack demanding case study allowed drive single track segment different ways 
control implemented city jena name 
complexity case study due fact signalling traffic lights critically depends history tram movements 
case study modelled moby plc network consisting plc automata 
simulation worked attempts perform automatic verification properties translating plc automata input real time model checkers uppaal kronos failed far due complexity resulting timed automata 
complexity caused fact plc automata take cycle times explicitly account order detect problems communicating different cycle times 
safety layer tf interface layer system interface layer watchdog tf monitor mf daten os bc config bc fig 
architecture board computer board computer railway control case study development control computer board train railway control ad 
part distributed train switching control system developed berlin decentralised track side safety units control local points communicate trains mobile phones 
system single tracks deviations modelled specified csp student project bremen cf 
hp solution general train control problem 
board computer layered architecture see fig 

tf interface layer communicates driver system interface layer localization subsystem gps mobile phone subsystem train 
safety layer contains safety relevant modules determining local state train requirements decentralized units track answers leading decision permission continue driver alternatively forced braking command train 
design abstracts away physical data formats concrete interfaces 
formal specification csp transition system directly executable program calls functions interfaces ad pel 
mobile phone communication board computer units system interface layer example combination csp oz fis fs cf 
sections 
case studies done uniform project industrial applications uniform workbench cf 
verification absence deadlocks livelocks international space station bps see section automatic testing electric power control component satellite mey see section 
ad dick test eines fr ein unter verwendung des rt 

software entwicklung methoden der software und ihre technische akademie 
ac astesiano cerioli multiparadigm specification languages attempt foundations andrews groote eds semantics specification languages workshops computing springer 
bw blank graphical development process assistant formal methods 
proc 
visual short papers etaps lisbon 
www tzi de uniform bengtsson larsen larsson pettersson yi uppaal tool suite automatic verification real time systems 
proc 
th dimacs workshop verification control hybrid systems 
new brunswick new jersey 
shi deadlock analysis fault tolerant system 
johnson 
ed algebraic methodology software technology amast 
lncs 
springer 
bps shi combining methods livelock analysis fault tolerant system 

ed algebraic methodology software technology amast 
lncs 
springer 
cerioli krieg mossakowski permissive subsorted partial logic casl 
johnson 
ed algebraic methodology software technology amast lncs springer 
cofi cofi common framework initiative algebraic specification development 
www brics dk projects cofi dia diaconescu extra theory morphisms institutions logical semantics multi paradigm languages 
applied categorical structures 
die plc automata new class implementable real time automata 
proc 
arts lncs springer 
dt tool supported hierarchical design distributed realtime systems 
euromicro workshop real time systems ieee 
olivero tripakis yovine tool kronos 
alur henzinger sontag eds hybrids systems iii control 
lncs springer 
fdr formal systems failures divergence refinement 
user manual tutorial version 
formal systems europe 

fis fischer csp oz combination object csp 
derrick eds formal methods open object distributed systems volume hall 
fs fischer smith combining csp object finite infinite proc 
forte hall 
fr im 
dissertation 

monographs bremen institute safe systems isbn shaker 
fw werner interactive graph visualization system user interface applications 
informatik bericht nr 
universitt bremen 
updated doc www tzi de hal die von csp 
diplomarbeit universitt oldenburg 
pcte crew pcte vs pcte version universitt siegen 
hp formal development verification distributed railway control system 
proc 
st workshop utrecht 
hk hoffmann krieg 
eds program development specification transformation methodology language family system 
lncs 
springer 
www tzi de kar karlsen uniform concurrency toolkit extensions concurrent haskell 

ed glasgow workshop functional programming 
kar karlsen integrating interactive tools concurrent haskell synchronous events 
nd latin american conference functional programming la argentina 
kar karlsen uniform workbench higher order tool integration framework 
int workshop current trends applied formal methods 
lncs 
springer appear 
kar karlsen tool integration functional setting 
dissertation 
universitt bremen pp appear kw karlsen concurrent haskell develop user interfaces active repository 
ifl implementation functional languages st andrew scotland 
lncs 
springer 
kol hol integrated formal support environment isabelle hol 
dissertation 
monographs bremen institute safe systems isbn shaker 
santen wolff structure preserving encoding isabelle hol 
proc 
int conf 
theorem proving higher order logic 
lncs 
springer 
www tzi de kol hol santen wolff correct user friendly implementations transformation systems 
gaudel woodcock 
eds fme industrial benefit advances formal methods 
lncs 
kri krieg years compass 
haveraaen owe dahl 
eds trends data type specification lncs 
kri krieg uniform perspectives formal methods 
int workshop current trends applied formal methods 
lncs 
springer appear 
krieg olderog balzer baer 
uniform universal formal methods workbench 
grote wolf 
eds des bmbf 
deutsche fr und berlin 
www tzi de uniform lth meyer wolff tas generic interfaces transformational program development theorem proving 
bidoit dauchet 
eds theory practice software development 
lncs 
springer 
krieg olderog balzer baer uniform workbench fr formale methoden bericht 

monographs bremen institute safe systems 
isbn 
shaker 
meyer krieg safety robotics bremen autonomous wheelchair 
proc 
amc th int 
workshop advanced motion control coimbra portugal 
isbn pp 

lt lth transformational program development uniform workbench 
selected papers th nordic workshop programming theory oslo dec 
oslo university technical report may 
lw lth wolff functional design implementation graphical user interfaces theorem provers 
functional programming appear 
lth karlsen wolff hol uniform workbench case study tool integration bowen hinchey eds proc 
zum th international conference users lncs springer 
lth krieg tas tools transformational program development theorem proving 

finance ed fundamental approaches software engineering fase etaps 
lncs 
springer 
www tzi de lth wolff sml tk functional programming graphical user interfaces 
informatik bericht nr 
universitt bremen 
www tzi de sml tk mey meyer automated test power thermal controller satellite 
test automation reactive systems theory practice 
dagstuhl seminar schloss dagstuhl 
mos mossakowski limits parchments systematically construct institutions partial algebras 
haveraaen owe 
dahl eds trends data type specification lncs springer 
mos mosses cofi common framework initiative algebraic specification development 
bidoit dauchet 
eds theory practice software development 
lncs springer 
mos mossakowski translating obj casl institution level 
fiadeiro ed trends algebraic development techniques 
th int workshop wadt lisbon selected papers 
lncs 
mos mossakowski representation hierarchies graphs institutions 
dissertation universitt bremen 
revised version 
monographs bremen institute safe systems isbn shaker 
mossakowski krieg static semantic analysis theorem proving casl 
parisi 
ed trends algebraic development techniques 
wadt lncs springer 
mtp mossakowski tarlecki pawlowski combining representing logical systems moggi rosolini 
eds category theory computer science th int 
conf 
lncs springer 
mtp mossakowski tarlecki pawlowski combining representing logical systems model theoretic parchments 
parisi 
ed trends algebraic development techniques 
wadt lncs springer 
old olderog formal methods real time systems 
proc 
th euromicro workshop real time systems 
ieee computer 
pau paulson isabelle generic theorem prover 
lncs 
pcte european computer manufacturers association portable common tool environment pcte specification rd ed ecma 
geneva 
pel formal methods development dependable systems 
bericht universitt bremen fachbereich mathematik und informatik 
www tzi de jp papers depend ps gz pel test automation safety critical systems industrial application developments 

gaudel woodcock eds fme industrial benefit advances formal methods 
lncs 
hoare mller olderog hansen ravn rischel provably correct systems 
langmaack de roever eds formal techniques real time fault tolerant systems 
lncs springer 
ps siegel testing theory test driver implementation 
gaudel woodcock eds fme industrial benefit advances formal methods 
lncs 
ps siegel test automation safety critical reactive systems 
south african computer 
www tzi de jp papers ps gz pur process web center 
proc 
nd workshop software engineering internet icse los angeles 
cpsc ucalgary ca maurer icse ws program htm pur environment support flexibility process standards 
proc 
st ieee conf 
standardization innovation information technology 
aachen appear 
ros roscoe theory practice concurrency 
prentice hall 
meyer th correctness analysis embedded controller 
data systems aerospace may 
ssc sernadas sernadas caleiro fibring logics categorial construction 
journal logic computation 
sernadas sernadas caleiro mossakowski categorical fibring logics terms binding operators 
gabbay van rijke 
eds frontiers combining systems 
research studies press appear 
tap interactive simulation plc automata 
hahn lehmann 
eds simulation industry ess 
society computer simulation 
tap moby plc design tool hierarchical real time automata 
astesiano 
ed fundamental approaches software engineering fase etaps lisbon 
lncs springer 
td moby plc graphical development plc automata 
ravn rischel 
eds lncs springer 
tar tarlecki moving logical systems 
haveraaen owe 
dahl eds trends data type specifications lncs 
springer 

hol csp mechanised formal development concurrent processes 
dissertation 
forthcoming tw wolff corrected failure divergence model csp isabelle hol 
formal methods europe fme 
lncs springer 
urban survivable avionics system space applications 
proc 
ftcs th annual symposium fault tolerant computing munich germany 
model development standard systems federal republic germany 
general directives process lifecycle methods allocation functional tool requirements 

zhou hoare ravn calculus durations 
information processing letters 
