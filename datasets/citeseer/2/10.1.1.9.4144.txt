automating daml web services composition shop dan wu parsia sirin james hendler dana nau university maryland computer science department college park md usa hendler nau cs umd edu university maryland mind lab baltimore ave college park md usa isr umd edu 
daml process model designed support application ai planning techniques automated composition web services 
shop hierarchical task network htn planner suited working process model 
proven correspondence semantics shop situation calculus semantics process model 
implemented system soundly completely plans sets daml descriptions shop planner executes resulting plans web 
discuss challenges difficulties shop information rich human oriented context web services 
web services programs devices accessible standard web protocols proliferate difficult find specific service perform task hand 
difficult single service capable performing task combinations existing services 
sufficiently rich machine readable descriptions web services allow creation novel compound web services little direct human intervention 
semantic web languages web ontology language owl daml oil provide foundations sufficiently rich descriptions 
may darpa agent markup language daml program released version daml set ontologies describing properties capabilities web services 
purpose daml markup web services support effective automation various web services related activities including service discovery composition execution 
motivated issues related automated web services composition 
part daml process ontology provides standard language describing composition web services 
metaphors developing semantic markup web services including viewing web services primitive complex actions preconditions effects 
representation services actions exploit ai planning techniques automatic service composition treating service composition planning problem 
ideally user objective set web services planner find collection web services requests achieves objective 
believe htn planning especially promising purpose concept task decomposition htn planning similar concept composite process decomposition daml process ontology 
explore shop htn planning system automatic composition daml web services 
organized manner 
section describe sample scenario research 
section give background knowledge daml process ontology shop 
section approach automatic web services composition 
section describe implementation 
section summarize related 
section conclude research directions 
example described section illustrate approach 
designed domain independent restricted example 
motivating example example describe loosely scenario described scientific american article semantic web 
suppose bill joan mother goes physician pain legs physician proposes sequence activities prescription anti inflammatory drug mri scan diagnostic tests try determine possible causes symptoms follow appointment physician discuss results diagnostic tests 
bill joan need things mother fill prescription pharmacy appointments take mother treatments appointment doctor follow meeting 
appointment times preferences constraints treatments bill joan prefer appointment times close scheduled nearby places person needs drive person drives 
prefer appointment times different days person needs drive 
appointment time doctor follow check appointment times treatments 
appointment time fit schedule person drive appointment 
assume requisite web services finding appointment times making appointments relevant clinics bill joan services schedule mother appointments 
difficult bill joan finish task optimal plan consulting web services manually may try available pair close appointment times nearby treatment centers order find fits schedules 
furthermore choose appointment time treatment find time treatment reschedule appointment 
suppose daml process ontology encode description compose web services tasks faced bill joan 
agent technology find execution path predefined task decompositions perform bill joan web services composition task automatically 
background daml daml process ontology services modelled processes 
kinds processes atomic processes composite processes simple processes 
daml atomic process model single step point view client web service directly executed accomplish task 
executing atomic process consists calling corresponding web accessible program input parameters bound particular values 
composite process represents compound web service decomposed atomic composite processes 
decomposition composite process specified control constructs 
set control constructs includes sequence unordered choice iterate repeat repeat split split join 
simple process abstraction atomic composite process possibly empty set 
considered directly executable provides view action 
atomic processes simple processes atomic processes possible peek internal structure simple process available replace simple process expansion 
process ontology process properties including optional inputs preconditions conditional outputs conditional effects 
preconditions specify things true world order agent execute service 
effects characterize physical side effects execution web service world 
inputs outputs correspond knowledge preconditions effects 
necessary states knowledge base execution modifications knowledge base result execution 
note services physical side effects particular services strictly information providing 
part daml definition atomic process called treatment scheduling example daml class rdf id rdfs subclassof rdf resource www daml org services daml process daml atomicprocess daml class rdf property rdf id rdfs subpropertyof rdf resource www daml org services daml process daml input rdfs domain rdf resource rdfs range rdf resource www mindswap org services shop concepts daml rdf property process model compound web service includes designation top level composite process corresponding service plus decomposition composite process structured collection decomposed subprocesses 
web services composition thought process generating potentially structured composite process description subsequently executed 
model composite processes output composition 
take composite processes input planner descriptions compose sequence single step actions 
goal automated web services composition find collection atomic processes instances form execution path top level composite process 
shop shop domain independent htn planning system won top awards planners competed international assume compound web service complete decomposition atomic processes 
composite process 
planning competition 
htn planning ai planning methodology creates plan task decomposition 
process planning system decomposes tasks smaller smaller subtasks primitive tasks performed directly 
difference shop htn planning systems shop plans tasks order executed 
planning tasks order task performed possible know current state world step planning process possible shop precondition evaluation mechanism incorporate significant inferencing reasoning power including ability call external programs 
shop ideal basis integrating planning external information sources including web ones 
order planning planning domain shop needs knowledge domain 
shop knowledge base consists operators methods plus various non action related facts axioms 
operator description needs done accomplish primitive task method tells decompose compound task partially ordered subtasks 
definition operator shop operator expression form pre del add represents primitive task list input parameters pre represents operator preconditions del represents operator delete list includes list things false operator execution 
add represents operator add list includes list things true operator execution 
definition method shop method expression form pre represents compound task list input parameters pre represents method preconditions represents partially ordered list subtasks consist decomposition 
addition usual logical atoms preconditions shop methods operators may contain calls external programs assignments variables 
useful integrating planning queries information sources web 
example expression assign call 
tn bind variable symbol result calling external procedure arguments 
tn 
definition planning problem planning problem shop triple initial state task list domain description 
input shop return plan pn sequence instantiated operators achieve daml shop execution atomic process call corresponding web accessible program input parameters instantiated 
execution composite process ultimately consists execution collection specific atomic processes 
directly executing composite process program daml interpreter treat composite process specification compose sequence atomic process executions 
section show encode composite process composition problem shop planning problem shop daml web services descriptions automatically generate composition web services calls 
encoding daml process models shop domains section introduce algorithm translating collection daml process models shop domain translation assumption assumption collection daml process models 
kn assume atomic processes defined effects outputs 
situation calculus semantics daml outputs characterize knowledge effects executing web services effects characterize physical effects executing web services 
atomic process outputs models strictly information providing web service 
atomic process effects models world altering web service 
general don want affect world planning 
want gather certain information information providing web services entails executing plan time 
enable information gathering web services planning time require atomic processes exclusively information providing exclusively 
composite process daml split split join control constructs 
shop currently doesn handle concurrency 
translation consider daml process models composite process split split join control construct 
assume non concurrent interpretation unordered permitted assume execution atomic process preconditions executing atomic process satisfied 
daml 
intend address extend shop handle concurrency 
encode collection daml process definitions shop domain follows atomic process effects encode shop operator simulates effects world altering web service 
atomic process output encode shop operator precondition include call information providing web service 
simple composite process encode shop methods 
methods tell decompose htn task represents simple composite process 
algorithm shows translate daml definition atomic process effects shop operator 
translate atomic process effect input daml definition atomic process effects 
output shop operator procedure 
list input parameters defined 
pre conjunct preconditions defined 
add collection positive effects defined 
del collection negative effects defined 
return pre del add algorithm translates atomic daml definition shop operator simulate effects world altering web service changing local state operator 
web services executed planning time obvious reasons 
algorithm shows translate daml definition atomic process outputs shop operator 
translate atomic process output input daml definition atomic process outputs 
output shop operator procedure 
list input parameters defined aas 
pre conjunct preconditions defined plus precondition form assign call monitor monitor procedure handle shop call web services 
add 
del conditional effects easily encoded shop operators 
simplicity assume effects outputs conditional 

return pre del add algorithm translates atomic daml definition shop operator call information providing web service precondition 
way information providing web service executed planning process 
operator atomic processes entirely bookkeeping operators appear final plan 
algorithm shows translate daml definition simple process shop method 
translate simple process input daml definition simple process output collection shop methods procedure 
list input parameters defined sas 
pre conjunct preconditions defined 

bm list atomic composite processes realizes collapse defined 

mi pre bi 
return 
mm algorithm shows translates daml definition composite process sequence control construct shop method 
translate sequence process input daml definition composite process sequence control construct 
output shop method procedure 
list input parameters defined cas 
pre conjunct preconditions defined 
sequence control construct defined 

bm sequence component processes defined 
ordered task list 
bm 
return pre algorithms translating composite processes control constructs unordered choice iterate repeat repeat control constructs similar sequence omit details 
keep pseudocode simple specify recursive translations composite process 
happens sequence nestings 
way handling problem treat control construct composite process composite process 
example translation shop method composite process sequence construct construct method nested control construct 
explicitly describe algorithm handles composite processes outputs 
daml specify output composite process equal output subprocesses composite process instantiated 
composite process sequence control construct specify output subprocess input subprocesses 
shop concept output handle problem assigning unique number instance shop domain methods operators 
predicate indicates method operator instance instance value value particular output output 
encoding daml web services composition problem shop planning problem formal semantics daml service description terms action theory situation calculus 
definition daml service composition problem follows naturally semantics 
definition daml service composition 
km collection daml process models satisfying assumption section top level composite process defined list input parameters instance initial state 
pn sequence atomic processes defined input parameters instance 
cn respectively 
composition respect iff action theory prove 
pn cn instance axiomatization defined action theory 
complex action defined action theory input parameters instance 
pn cn primitive actions defined atomic processes 
pn action theory input parameters instances 
cn 
additional extralogical symbol defined situation calculus action theory 
intuitively macro expand situation calculus formula says possible reach situation situation executing sequence actions specified 
state theorem special case 
theorem 
kn collection daml process models satisfying assumption atomic processes outputs top level composite process defined list input parameters instances initial state 

pn sequence atomic processes defined input parameters instance 
cn respectively 
translate process model 
composition respect iff plan planning problem 
outline proof 
proven service composition problem corresponding shop planning problem map theorem proving problem action theory 
generalize theorem remove restriction atomic processes outputs 
shown translate atomic process output procedure earlier precondition operator translated atomic process output shop call monitor procedure handle shop call external information providing web services 
monitor monitor current state shop information added current state changed planner 
assume information changed agents shop planning time address problem 
soundness completeness proofs classical planners assume preconditions evaluated relative current state 
precondition involves call external program longer case 
guarantee programs calls executable parameters grounded finite computation repeatable result call ensure planner sound complete 
dataflow model daml atomic process fact executed necessary inputs bound know call information providing service parameters grounded 
assume information provided web services change shop planning time web services invocations establish soundness completeness proof shop 
theorem kn collection daml process models satisfying assumption section top level composite process defined list input parameters instance initial state 
ka atomic processes outputs sequence atomic processes defined input parameters instance 
cn respectively 
translate process model 
da translate process model ka 
execution web services defined guaranteed terminate plan planning problem iff plan planning problem da 
outline proof 
calls information providing services information available needed 
shop planning process problems 
implementation realize agent technology started implementation daml shop translator 
translator java program reads collection daml process definitions files outputs shop domain file 
shown translation algorithm section planning problem domain shop call information providing web services collect information maintaining ability backtrack merely simulating effect world altering web services 
output shop sequence world altering web services calls subsequently executed 
built monitor handles shop calls external web services planning 
wrote daml web services executor communicates soap web services described daml wsdl descriptions web services 
shop request monitor call daml web services executor execute corresponding web service 
information providing services defined atomic processes service executed invoking wsdl service grounding 
monitor caches responses web services avoid invoking web service parameters planning 
save network communication times improve planning efficiency establishes repeatability condition required proving shop soundness completeness 
information added current state changed planner 
assume cached information changed agents planning generalize 
built shop daml plan converter convert plan produced shop daml format directly executed daml executor 
ran scenario section system 
doing system communicated real web services 
unfortunately current web services available web wsdl descriptions semantic markup 
created daml markup wsdl online services services necessary create wsdl descriptions service offered filling form web page cvs online pharmacy store 
possible real services services available web services doctor agent providing patient prescription infeasible real web service demo making appointment doctor time program executed 
services implemented web services simulate functionalities 
built web services allow access user personal information sources 
example necessary learn user schedule able generate plan example task demo 
possible get information sources available user machine personal information manager microsoft outlook 
implemented local soap services retrieve kind information 
wsdl daml descriptions generated local services composed executed way remotely available services 
information gathering services implemented direct java calls shop java shop bridge 
example service asks user acceptable distances treatment center popping window user client accept input 
changing data entered point possibly yield different plan generated allowing planner produce custom plans depending personal preferences 
encoded description compose web services tasks faced bill joan section daml 
description daml composite process composed composite processes defined sequence choice unordered processes 
daml description constitutes top level composite process described section translated shop domain planning 
encode constraints mentioned section web service preconditions 
right standard process modelling language specifying web service preconditions 
directly encode web services preconditions shop format 
test effectiveness approach run shop instances problem described section 
problem instances varied cases easy schedule satisfactory appointments case nearby treatment centers treatment time slots close bill joan drive mom treatments separate days 
cases shop easily able find best possible solution 
fig 
shows snapshot information collected shop planning process plan produced shop 
related son proposed approach building agent technology notion generic procedures customizing user constraints 
argue augmented version logic programming language golog provides natural formalism programming web services 
contributions realized development congolog interpreter communicates web services open agent architecture oaa service procedure ontologies written order logic 
system directly supports existing web services able ground directly fig 
example running result existing wsdl services creating separate execution system semantically described services 
suspect approach efficient htn planner 
mao applies software synthesis composition methods web services composition 
similarities web service composition component system development software engineering 
daml service descriptions adopt structural synthesis program ssp method automated service composition 
service composition input output information services components requires little domain knowledge 
approach treats service atomic entity inspecting internal process model lacks ability reason different decompositions composite process 
retsina open multi agent system provides infrastructure different types deliberative goal directed agents 
retsina system includes planner htn planning paradigm 
retsina planner extends htn planning adding interleaving planning execution basically allows execute plan completely formed similar approach 
paolucci describes retsina planner context creating autonomous web services automatically interact 
authors give details htn planning employed system 
clear daml process model planning domain priori planner agent 
reason comparison approach 
defined translation daml process models shop domains daml composition tasks shop planning problems 
described implemented system performs translation uses extended shop implementation plan translated domain executes resulting plans 
process defining translation building system observed current approach planner executes output producing actions plans 
fine situations may appropriate 
example execution web services may take long time 
better planner continue plan waiting information 
assume effects physical 
complex situations may changes mental states agents involved modelled 
explore problem 
fundamental difference exclusively information providing possibly world altering atomic processes 
typically want execute information providing atomic processes various points planning process want execute world altering ones 
composition execution time primary interest execution world altering processes 
system include information providing processes compositions 
furthermore currently permit world altering processes information providing sense outputs 
simplification system fairly easy implement substantial modification shop 
mapping information gathering processes called book keeping operators may somewhat 
possible encode directly external code calls preconditions processes receive information input generally part axiomatic inferential structure planner state probably require substantial dataflow analysis 
information providing exclusively significant fraction available salient web services 
web contexts information rich action poor 
environments want reconsider strict partition services exclusively information providing output free 
example world altering services outputs supply information needed decide subsequent courses action 
clearly service shouldn executed planning time suggests need investigate generating conditional plans shop style htn planning 
conditional plans help eliminate constraint information change planning 
currently theoretical practical reasons execute information providing process planning input subsequently retrieve cached result 
shops speed unreasonable restriction cases conditional plans permit planning various contingencies 
considerations raise host issues regarding plan time vs composition execution time execution information providing processes including deciding processes execute planning plan execution 
furthermore complex long running planning sessions sense refresh monitors cache certain services intervals 
presumably daml descriptions enriched help support requisite analysis 
intend explore issues 
compared complexities raised composite processes raise additional special problems encoding shop methods correct straightforward modulo need extend shop handle concurrency 
simple processes odd duck lot 
various members daml coalition suggested conversation simple processes intended support htn planning necessary convenient useful 
part lack clear semantics particularly regard relationship inputs preconditions effects corresponding atomic composite processes 
furthermore language technical overview suggests simple process view atomic process composite process langauge ontology require restriction 
speculated simple processes useful specifying range alternative composition paths wasn clear really convenient purposes choice control construct 
acknowledgments supported part air force research laboratory 

dean connolly van harmelen hendler horrocks mcguinness patel schneider stein web ontology language owl version 
trends developments 
working draft november www org tr wd owl ref 
horrocks van harmelen patel schneider berners lee brickley dean decker fensel hayes heflin hendler lassila mcguinness stein daml oil 
www daml org daml oil index html 
daml services coalition daml semantic markup web services 
technical overview 
www daml org services daml daml html 
daml services coalition ankolekar burstein hobbs lassila martin mcdermott mcilraith narayanan paolucci payne sycara daml web service description semantic web 
proceedings international semantic web conference 
nau munoz avila cao lotem mitchell total order planning partially ordered subtasks 
proceedings seventeenth international joint conference artificial intelligence 
nau au murdock wu shop htn planning environment 
appear journal artificial intelligence research 
berners lee hendler lassila semantic web 
scientific american 
narayanan mcilraith simulation verification automated composition web services 
proceedings eleventh international world wide web conference honolulu hawaii 
reiter knowledge action logical foundations specifying implementing dynamical systems mit press 
mcilraith son adapting golog composition semantic web services 
proceedings eighth international conference knowledge representation reasoning toulouse france 
rao value added web services composition automatic program synthesis 
web services business semantic web caise international workshop wes toronto canada 
paolucci shehory sycara interleaving planning execution multiagent team planning environment 
electronic transactions artificial intelligence 
paolucci sycara kawamura delivering semantic web services 
technical report cmu ri tr robotics institute carnegie mellon university pittsburgh pa december 
