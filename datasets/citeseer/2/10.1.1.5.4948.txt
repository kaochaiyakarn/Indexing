coordination middleware location aware computing lime case study amy murphy gian pietro picco dipartimento di elettronica informazione politecnico di milano italy mail picco polimi department computer science university rochester ny usa mail murphy cs rochester edu 
decoupling behavior communication fostered coordination paramount importance mobile computing 
scenario coordination technology typically deal application data necessary orchestrate process activities 
argue coordination abstractions effectively deal information coming physical context fundamental aspect mobile computing applications 
cast considerations lime coordination model middleware designed mobile computing 
support arguments concrete examples report development concept application enabling tracking mobile users 
lessons learned development enable assess feasibility approach identify new research opportunities 
mobile computing defines challenging environment software development 
communication enabled wireless links reliable intrinsically dependent relative positions mobile parties communication 
similarly location affects context perceived mobile unit constraining available communication parties data available computation set accessible services general resources available component 
observed software development mobile environment tackled successfully exploiting coordination perspective 
decoupling behavior communication fostered coordination enables separate applicative behavior components continuously changing context immersed 
examples systems applied intuition deal physical mobility hosts logical mobility agents include klaim xmiddle tucson mars lime 
systems shared data structure typically tuple space store data available mobile units represent naturally context available 
systems focus amy murphy gian pietro picco providing support coordination context consisting essentially application data 
little support provided constraining application behavior physical context 
clearly limitation 
dealing changing physical context fundamental mobile applications 
physical context information diverse include local system information battery level signal noise ratio environmental information light intensity temperature ambient noise 
location possibly relevant context element qualifies values 
example temperature reading meaningful accompanied identity room sensed 
point actions application component mobile environment may depend context information values modeling physical context necessity 
opposite extreme coordination approaches middleware systems proposed explicitly tackle problem managing dynamically changing context 
relevant examples include context toolkit odyssey aura gaia owl 
focus systems allowing applications retrieve information context proactively directly querying context representation reactively subscribing changes context information 
middleware takes care properly disseminating context information involved parties greatly simplifies management physical context mobile applications 
hand systems provide little support representing managing data context coordinating behavior application components 
argue gap aforementioned perspectives reduced eliminated exploiting coordination abstractions management physical context 
acquired appropriate sensors context information essentially data treated data centric coordination approach 
primitives manipulate retrieve react available data sake coordination dealing physical context information 
traditionally separate dimensions unified common set abstractions simplifying considerably design implementation mobile applications 
considerations principle applicable data centric coordination approach cast lime coordination model middleware expressly designed mobile computing 
concise overview lime provided section 
section illustrates premise approach describes coordination middleware disseminate physical context information 
implications design approach understood assessed reality check provided application development 
support arguments concrete examples section report design implementation proof concept application providing location tracking mobile users 
lessons learned ex coordination middleware location aware computing enable assess section feasibility approach identify new research opportunities 
section ends brief concluding remarks 
lime linda mobile environment lime model defines coordination layer applications exhibit logical physical mobility embodied middleware available open source lime sourceforge net 
lime borrows adapts communication model popular linda 
linda processes communicate shared tuple space multiset tuples accessed concurrently processes 
tuple sequence typed parameters foo contains actual information communicated 
tuples added tuple space performing operation 
tuples anonymous removal read rd takes place pattern matching tuple content 
argument called template fields contain actuals formals 
actuals values parameters previous tuple actuals parameters foo integer float formals 
formals act wild cards matched actuals selecting tuple tuple space 
instance template matches tuple defined earlier 
multiple tuples match template selection non deterministic 
linda characteristics resonate mobile setting 
communication implicit decoupled time space 
decoupling paramount importance mobile setting parties involved communication change dynamically due migration global context operations continuously redefined 
lime accomplishes shift fixed context dynamically changing breaking linda tuple space tuple spaces permanently associated mobile unit introducing rules transient sharing individual tuple spaces connectivity 
transiently shared tuple spaces 
lime mobile unit accesses global data context called interface tuple space permanently exclusively attached unit 
accessed linda primitives contains tuples physically located unit defines data available lone unit 
tuple space transiently shared belonging mobile units currently accessible 
arrival new unit tuples merged shared belonging mobile units result accessible units 
sequence operations called engagement performed single atomic operation 
similarly departure mobile unit results corresponding tuple space tuples longer available units 
transient sharing powerful abstraction providing mobile unit illusion local tuple space containing tuples coming amy murphy gian pietro picco units currently accessible need know explicitly 
content perceived tuple space changes dynamically changes system configuration 
lime notion transiently shared tuple space applicable mobile unit regardless nature long notion connectivity ruling engagement properly defined 
shows transient sharing may take place mobile agents located host hosts communication range 
mobile agents active components ones carrying concrete tuple space mobile hosts just roaming containers providing connectivity execution support agents 
operations transiently shared tuple space lime include mentioned linda rd probing operations rdp inp semantics return matching tuple return null matching tuple exists time query issued 
convenience lime provides bulk operations rdg ing return set tuples match pattern 
matching tuples exist set empty 
restricting operation scope 
idea transiently shared tuple space reduces details distribution mobility changes perceived local tuple space 
view powerful relieves designer specifically addressing configuration changes applications may need address explicitly distributed nature data performance optimization reasons 
reason lime extends linda operations scoping parameters expressed terms agent host identifiers restrict operations projection transiently shared tuple space 
operation extends allowing programmer specify tuple placed tuple space agent 
way default policy keeping tuple caller context withdrawn overridden elaborate schemes transient communication developed 
location parameters annotate operations allow access slice current context 
instance rd looks tuples matching currently located destined 
lime allows host agent enabling entire host level mobile host mobile agents migrate host level tuple space interface tuple space federated tuple space fig 

transiently shared tuple spaces encompass physical logical mobility 
coordination middleware location aware computing tuple space queried subset host level tuple space containing tuples specific named agent 
reacting changes 
dynamic environment defined mobility reacting changes constitutes large fraction application design 
lime extends basic linda tuple space notion reaction 
reaction defined code fragment specifying actions performed tuple matching pattern tuple space 
notion mode provided control extent reaction allowed execute 
reaction registered mode allowed fire time execution automatically 
reaction registered mode allowed fire arbitrary number times twice tuple 
details semantics reactions formal semantics available 
sufficient note kinds reactions provided 
strong reactions couple single atomic step detection tuple matching execution weak reactions decouple allowing execution take place eventually detection 
strong reactions useful react locally host weak reactions suitable hosts entire transiently shared tuple space 
exposing system configuration 
perspective far applications aware changes portion context concerned application data 
mobile applications knowing hosts connected plays key role 
instance typical problem react departure mobile unit determine set units currently belonging lime community 
lime provides form awareness system configuration abstractions discussed transiently shared tuple space conventionally named agents permanently bound 
tuples tuple space contain information mobile units relationship tuple spaces sharing mobile agents host reside 
insertion withdrawal tuples runtime support 
applications read tuples register reactions respond changes configuration system 
representing physical context lime applications written mobile environment access data data components range 
providing access ignoring details communication primary goal lime coordination systems targeting mobile environment 
addition application data mobile applications characterized need respond environment find adapting application behavior location bandwidth environmental parameters change 
words able react changes physical context 
amy murphy gian pietro picco tuple space described previously shows transiently shared tuple space style coordination promoted lime successfully provide mobile applications access form context identity accessible hosts agents 
goal show lime similarly represent share interact aspects context 
show placing context information transiently shared tuple space applications obtain easy access refer distributed context context components range 
core idea simple insert context information transiently shared tuple space allowing connected components access proactive reactive constructs lime 
section describe representation context information tuple space primary access mechanisms benefits provided application programmer 
making context accessible 
focuses sharing interaction context data tuple spaces intentionally leaving aside issues related detecting context information format information 
focus specific sensing technologies specific type context information 
provide general infrastructure exploit disseminate context easily adapted needs system 
key component infrastructure providing isolation context agent interacts sensors lime 
context information available represented tuples identical respects traditional application data tuples 
interestingly exploited represent single values sequences temporally related values maintain history aggregation context information 
principle possible mix data context tuples single tuple space 
leads cumbersome design imposes restrictions applications requiring application tuple pattern context tuple mixes interaction types data 
ideally kinds data insulated 
lime supports separation mechanism creating multiple tuple spaces uniquely identified name contents independent 
creating separate context tuple space named context application tuple formats remain unrestricted interaction context information explicit issuing operations context tuple space 
applications residing host context agent context information accessible locally issuing normal lime operations context tuple space 
interaction enables application query current context attach generated data 
example video player adjust buffer size currently available local memory 
memory level information retrieved local context tuple space 
lime tuple spaces transiently shared information context tuple space available connected components yielding refer distributed context 
example spread temperature sensors forest fire annotate map coordination middleware location aware computing temperature gradient information available distributed context 
limited number sensors range connected provide context area immediately surrounding generating map 
interacting context 
middleware general systems targeted mobile environment evidenced access context information proactive reactive meaning program able pull information demand pushed changes 
representing context information inside lime tuple space styles operation available 
proactive operations map query operations lime rdp reactive mechanisms enabled strong weak lime reactive statements 
furthermore lime extensions control scope enable operations entire distributed context projection context tuple space tailoring operations apply hosts range single host 
applications video player described previously query operation rdp restricted scope application host level tuple space returns needed current available memory 
operation retrieve context remote host simply changing scope parameters 
lime bulk operations rdg especially useful retrieve historical context 
example application validating functioning air conditioning building query history temperatures room 
previous lime programming efforts query operations useful core application functionality utilizes reactive constructs 
respect context information reactions useful monitoring immediately adapting changes 
example reaction host context tuple space notify application battery power low 
changing scope reaction monitor remote host battery trigger modification mode interaction hosts 
alternately keep map temperatures date reaction distributed context registered fire time sensor temperature value changes 
distributed context easily searched providing dimension accessibility context systems 
example query formed find components specific location space 
powerful operation uses lime primitives rdp case require kind server support solution common context aware systems 
serverless operation solution managing context amenable mobile ad hoc networks highly dynamic scenarios 
benefits application 
ideas variety context information represented context tuple space accessed connected components usual lime primitives 
approach main benefits 
management context decoupled applications 
implies context maintenance mechanisms amy murphy gian pietro picco easily substituted extended context information additional sensors 
example application designed location information build map connected users location context information changed gps indoor infrared tracking system changes application long tuple format change 
second placing context information tuple space unifies management application data exploited coordination physical context perceived application 
allows programmers deal interface evident benefits terms ease development understanding resulting implementation 
tracking users lime gps explore validate ideas representing context lime chose focus single aspect context location physical space 
choice motivated observation location critical mobile applications 
context information dependent particular location sensed 
location value se provides direct intuitive way express mobility users 
section discuss design implementation application collaborative exploration space 
discussed main idea representing interacting context lime elaboration ideas real application fully appreciated report ease incorporating location context application 
intended multiple individuals moving common environment equipped gps wireless enabled pda 
immediate goal application provide proof concept approach envision functionality provided useful realworld scenarios coordination rescue team deployed disaster scenario 
major portion display user seen left representation user current location space sequence dots indicates past movement itinerary 
new user comes range name displayed box top right display 
allow users coordinate actions move user specify monitoring mode viewing movement selecting user pressing buttons top right 
pressing monitor button user movements marked screen long connected 
user disconnects name disappears list dots remain screen 
monitor mode user displayed location kept date possible itinerary connection tracked 
retrieve history movement occurred connection user press button 
continuous operation monitoring time operation displays entire history movement moment selected user 
time operation coordination middleware location aware computing display current location user pressing button 
final mode simply ignore user 
addition monitoring modes provides apply globally users come range 
modes available menu options designed retrieve history users actively monitor movement user range 
modes active user display shows entire itinerary user encountered including movements occurred connection 
disaster recovery scenario mode useful supervisor monitor movements members team 
allows users add annotations textual note digital photograph current location 
instance earthquake fig 

screenshot users tom top image ema disconnection 
users disconnected monitoring location ema retrieved history tom 
disconnection movements users visible 
amy murphy gian pietro picco annotations take form photographs damaged walls descriptions completed location 
annotations indicated display special icon clicking icon annotation viewed long user connected 
noted useful disaster recovery scenarios allowing workers coordinate actions 
example workers monitoring current movements area avoid order explore different territory gather discuss face face findings 
annotations created survey workers evaluated aid workers direct supplies specific areas 
benefits include ability users interact requiring line sight enabling impromptu sharing information required support central server variety monitoring modes adjust communication overhead battery requirements user basis 
proof concept application demonstrates operations available lime natural sufficient provide range interaction necessary exploiting context illustrate remainder section 
representing updating location context 
combined requirements monitor current location user display previous itinerary require provide access current location previous locations user 
current location represented single tuple containing gps coordinates timestamp 
update tuple insert new location tuple remove old 
motivation sequence operations ensure location accessible probe operation 
true old value may returned new values significantly different furthermore timestamp examined freshness 
host single current location needed separate tuple representation location history user itinerary 
explored idea having tuple previous location simply changing pattern include new field label history 
solution turns unreasonable overhead necessary retrieve entire history user proportional number tuples retrieved 
opted grouping multiple locations single stride tuple contains sequence number list locations 
number locations stride list tunable 
chose value balances overhead retrieving stride tuples build history overhead updating stride tuple new location 
words keep entire history tuple space time new location generated stride tuple identified sequence number removed updated reinserted choice making annotations inaccessible users disconnected motivated performance considerations discussed 
needed application choice easily reversed accompanied increase overhead 
coordination middleware location aware computing tuple space 
solution opens opportunities implementing garbage collection old stride tuples 
worth noting updating current stride tuples operations entirely local agent performing 
executed low cost generate low system overhead 
accessing location context 
uses combination reactions probe operations federated tuple space specifically scoped implement functionality buttons top right display alternate modes monitor retrieve histories users 
surprise continued integral part operation 
example display name user range employs reaction tuple space 
exploiting fact lime keeps list date users able select monitoring modes user basis see glance users connected 
mentioned monitor mode allows user tracked connected 
essentially involves reacting change user location updating display operation naturally calls lime reaction 
tracking functionality implemented installation weak reaction restricted projection tuple space selected user 
pattern reaction current location tuples 
functionality buttons implemented probe operations projection tuple space selected user 
exploits rdg operation stride tuples retrieve tuples itinerary 
uses similarly scoped rdp retrieving current location tuple 
explicitly selected modes offer ability tailor monitoring basis constructing view environment controlling amount system resources dedicated monitoring user 
tight controls necessary options monitoring users automatically downloading histories users enabled 
monitoring users lime accomplished single weak reaction registered transiently shared tuple space pattern current location tuples 
reaction fires time user location changes updating display accordingly 
case specific user itinerary retrieving itinerary information uses bulk operation rdg query specific user projection tuple space stride tuples 
accomplish users registers reaction tuple space fire time host arrives 
turn causes rdg invoked part reaction code 
exploiting location 
previously described functionality designed show context information shared visualized annotation feature demonstrates applications attach location context application data 
amy murphy gian pietro picco annotations simple text file containing example image 
annotation created associates user location 
find queries local context tuple space probing read rdp 
returns tuple containing timestamp current location coordinate 
pieces information annotation combined single annotation tuple inserted regular lime tuple space making accessible users 
requirements display existence annotation icon top normal location icon 
implementation annotations just described way query actual annotation tuples time itinerary tuples retrieved react annotations host monitored 
annotations large creates unreasonable amount overhead especially wasteful annotations viewed eventually user 
modified representation annotations tuple space effectively creating tuples information original tuple 
tuple contains location annotation identifier 
tuple retrieved monitored cases reducing overhead identifier small comparison typical annotation 
second tuple contains annotation identifier actual annotation 
tuple retrieved demand user opts view annotation 
result restriction annotations viewed users connected reasonable compromise effectively managing overhead 
discussion lessons learned experience provides evidence support argument placing context information tuple space 
section discuss relationship discuss extensions lime better support context 
related 
unification access data context factor distinguishes systems accessing context 
example context toolkit wraps context providers standard interface provides query notification access 
lime modes interaction naturally provided query reaction operations operations application data access 
furthermore context toolkit provides separate service discovery server identifies context providers programmer explicitly bind receive context information 
lime type centralized service discovery necessary 
currently available components identified fully distributed tuple space accessed tuple space operations 
lime possible access specific context providers limiting scope operations possible access entire distributed context lime primitives coordination middleware location aware computing possible systems require additional non trivial programming effort 
placing context information lime tuple space simplifies access reaction context remote components 
fundamentally different context reaction mechanisms provided odyssey 
odyssey component register notified local context changes allowing example server detect bandwidth reduction 
odyssey designed servers monitor context changes mobile client 
lime registering remote changes straightforward registering local changes 
furthermore implementation weak reactions ensures reasonable performance 
related coordination approaches designed address concerns mobile environment 
chose lime foundation familiar suited needs interacting context 
principle possible apply idea representing context data coordination systems aware coordination community direction 
lime extensions 
current implementation serves proof concept development process illuminated directions extending lime better support interaction context information application data 
include ability atomically change contents tuple sequentially order set tuples replicate data search tuples range 
features initially left lime effort strive minimal expressive application programming interface 
light relevance improving handling physical context currently reconsidering decision planning include features release middleware 
explained section updating current location field accomplished outputting new tuple removing old tuple 
result short interval operations component current locations probe operation rdp just return old tuple actual current tuple 
reversing operations leaves interval component location rdp may return null 
conditions avoided lime provided atomic change operation performing atomic step generic transaction construct grouping arbitrary lime operations 
retrieves itinerary tuples display history movement user lime bulk operation rdg returns set stride tuples 
set inherent ordering lime linda semantics order implied stride sequence number 
currently application uses value sort stride tuples visualizing 
convenient lime bulk operations extended allow specification field ordering automatically imposed releasing programmer burden coding ordering explicitly 
amy murphy gian pietro picco feature consider adding lime replication 
previous locations components effectively replicated application level enable visualization 
location information duplicated tuple space 
copies history meets information outside tuple space accessible efforts mobile ad hoc community looked issue replication solutions immediately applicable tuple space environment 
useful operation add support query find components radius point query requires range search inside tuple space lime provides value matching 
supporting functionality requires change tuple space implementation underlying lime change interface tuple space 
provide great improvement expressiveness system 
user monitor area request information area away current position 
evaluation far focused location context 
location useful applications aspects context direct mobile applications 
example providing available bandwidth applications adjust tuple space querying large tuples bandwidth plentiful 
exposing context available storage space applications control data moved particular tuple space 
belief effort provide extra context information collection data presentation data context lime 
location provides model transformation solutions issues large histories 
requirements presenting accessing context information coordination mechanisms description application demonstrates location context available lime 
goal provide evidence support coordination middleware enabling local remote components share interact context information 
fills gap coordination systems focus providing access application data context aware toolkits concentrate enabling interactions context 
furthermore effectively demonstrates context information application data treated unified manner accessed coordination operations 
result significant reduction programming effort develop mobile applications require access physical context 

described partially supported projects manet funded italian government 
coordination middleware location aware computing authors wish thomas implementation 


middleware service mobile ad hoc data sharing enhancing data availability 
proceedings acm ifip usenix international middleware conference rio de janeiro brazil june 

leonardi zambonelli 
reactive tuple spaces mobile agent coordination 
proc 
nd int 
workshop mobile agents lncs 
springer 

dey salber abowd 
conceptual framework toolkit supporting rapid prototyping context aware applications 
human computer interaction hci journal special issue context aware computing 

ebling hunt lei 
issues context services pervasive computing 
proceedings workshop middleware mobile computing 
ifip acm 

garlan siewiorek steenkiste 
project aura distraction free pervasive computing 
ieee pervasive computing april june 

gelernter 
generative communication linda 
acm computing surveys jan 

mascolo capra emmerich 
xmiddle data sharing middleware mobile computing 
kluwer personal wireless communications journal april 

murphy picco 
roman 
lime middleware physical logical mobility 
dasgupta zhao editors proc 
st int 
conf 
distributed computing systems icdcs pages may 

murphy picco 

lime coordination middleware supporting mobility hosts agents 
technical report washington university department computer science st louis mo usa 

de nicola ferrari pugliese 
klaim kernel language agents interaction mobility 
ieee trans 
software engineering 

noble satyanarayanan 
experience adaptive mobile applications odyssey 
mobile networks applications 

omicini zambonelli 
tuple centres coordination internet agents 
proc 
acm symp 
applied computing sac february 


roman murphy picco 
coordination mobility 
omicini zambonelli klusch tolksdorf editors coordination internet agents models technologies applications pages 
springer 

hess ranganathan campbell nahrstedt 
gaia middleware platform active spaces 
acm mobile computing communications review 

terry theimer petersen demers spreitzer hauser 
managing update conflicts bayou weakly connected replicated storage system 
operating systems review 
