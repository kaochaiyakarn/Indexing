essence principal typings wells heriot watt university www hw ac uk 
type system 
typing typable term collection information appears final judgement proof derivation showing typable 
example suppose derivation judgement meaning result type assuming types free variables typing principal typing term typing represents possible typings important confuse notion weaker notion principal type mentioned connection hindley milner type system 
previous definitions principal typings specific type systems involved various syntactic operations typings substitution types type variables expansion lifting presents new general definition principal typings depend details particular type system 
shows new general definition correctly generalizes previous system dependent definitions 
explains new definition right 
furthermore new definition prove certain polymorphic type systems quantifiers system hindley milner system principal typings 
background motivation principal typings 
term represents fragment program system represented calculus 
examples drawn calculus discussion seen independent 
typing term specific type system calculus principal typings term derived set semantically sensible operations 
important confuse principal typings property type system principal types property discussed context hindley milner system ml programming partly supported nsf ccr eia epsrc gr sun microsystems equipment 
language 
described jim principal types term typable type assumptions exists type representing possible types principal typings typable term exists judgement representing possible typings principal typings allow compositional type inference procedure finding types term uses analysis results immediate analyzed independently order 
compositionality helps things performing separate analysis program modules helps separate compilation helps making complete terminating type inference algorithm 
system lacking principal typings type inference algorithm incomplete finding typing exists typings system represent intermediate results 
example type inference algorithm algorithm damas milner hindley milner hm type system programming languages haskell standard ml sml 
sml program fragment form val algorithm analyzes uses result analyzing 
automated type inference 
principal typings help automated type inference general 
higher order languages necessary types quite complex requiring types supplied advance burdensome 
desirable implicit typing possible types omitted humans write terms 
type inference compiler takes untyped partially typed term completes typing term reports error term untypable 
widely type inference algorithm algorithm hm 
hm system supports polymorphism quite restricted uses quantifiers 
practice limitations hm system polymorphic types kinds code reuse difficult 
result programmers forced provide code compiler find typings 
motivated long search flexible type systems type inference algorithms 
popular candidates extensions hm system system 
search great number negative results 
quite time hm system system get complete terminating type inference algorithm 
systems typability untyped program fragment type proven undecidable means type inference algorithm complete terminating program fragments 
wells proved system finite rank restrictions :10.1.1.6.6483
urzyczyn proved pottinger proved unrestricted intersection types pierce proved subtyping relation undecidable 
worse system hard find amount type information total obtain terminating type inference algorithm 
way positive results extensions hm system interestingly restricted intersection types cf 
intersection types arbitrarily high finite ranks kfoury mairson turbak wells 
new principal typing definition vs quantifiers years known type systems quantifiers principal typings 
difficulty simply finding sufficiently general definition principal typings 
definition 
typing defined pair set type assumptions result type 
meaning terms typing particular type system defined set program fragments provable system meaning typed result type type assumptions 
typing defined stronger typing terms terms 
stronger stronger predicate terms provides information terms allowing contexts 
phrase general literature stronger stronger cause confusion 
typing defined principal system program fragment strong typings system 
comparison prior notions principal typing various type systems reveals new definition exactly matches old definitions slightly liberal admits additional principal typings program fragments 
new definition best system independent definition obtained 
important benefit new definition show various systems quantifiers principal typings 
definition proof system principal typings 
definition liberal failure system principal typings definition taken mean reasonable definition principal typings system 
similar proof hm system 
proof system adapted related systems system finite rank restrictions 
polymorphism quantifiers clear design type system principal typings property 
systems extremely restricted uses quantifiers hm system principal typings 
lack principal typings manifested diffi culty making type systems flexible restrictive hm system convenient type inference algorithms 
difficulty appears due quantifier supporting type polymorphism type systems intersection types principal typings 
summary contributions 
explanation motivations notion principal typing affected type inference widely type systems simply typed calculus hm 

new system independent definition principal typings 
shown definition correctly generalizes existing definitions 

new definition prove hm system principal typings 
proving impossible due lack system independent definition 
definitions restricts attention pure calculus extended constant ground type 
notation generally follows 
common features type systems discussed follows 
type systems considered restricted deriving judgements form 
interesting type systems derive judgements information effect systems deriving judgements form information side effects evaluating 
extend machinery type systems extra information considered part typing defined 
types type system set types types 
range types 
included set types infinite set type variables ranged 
ground type added help illustrate certain typing issues 
type system considered set types subset set types types pseudo grammar free type variables ftv type variables bound 
types identified differ conversion 
range type substitutions finite maps set type variables types 
typings pair type assumption 
finite set type assumptions type environment 
range type environments 
type environments required mention term variable 
type environment may seen finite map set term variables types 
undefined mentioned unique type ax 
ftv ftv 

typing judgement triple type environment term result type meaning typed result type type assumptions 
traditional notation writes judgements form 
slight change notation simplify notation real importance new perspective provides help widespread misunderstanding principal typings research community 
pair called typing 
range typings 
ftv ftv ftv 
type system statement hold iff judgement derivable typing rules type system assigns typing term iff typings 
ordering typings introduces new ordering typings type system information provide terms assigned typings lower order providing information 
iff 

suppose 
typing viewed providing information terms 
viewed predicates terms implies practice known term assigned knowing terms represents increase knowledge knowing terms 
increased knowledge enlarges set contexts known safe 
necessary point case system defined relation different type containment relations defined literature 
example mitchell defines relations denoted symbol referred 
relations defined types typings possibly provide definition principal typings 
extended typings order comparison 
way comes close making sense define iff tj 
xn 
fn means quantify free type variables 
course extended handle record subtyping obvious way 
definition turns exhibit pair pair follows opinion difference caused fact relations defined model obtaining meaning term requires assigning meanings free variables 
second class treatment free variables truly compatible obtaining principal typings 
specific type systems formulation simply typed lambda calculus stlc curry style meaning type information assigned pure terms 
set types stlc subset types containing types mention 
typing rules stlc con var app abs con var app mn abs ax hindley milner type system hm extension stlc introduced milner ml programming language 
hm system introduces syntactic form allowing definitions polymorphic types 
set types hm subset types containing types mention mention inside argument function type constructor 
typing type mention 
typing rules hm con app abs stlc new typing rules dom ftv ftv ax girard formulated system independently invented reynolds church style explicitly typed terms 
curry style presentation published leivant 
set types subset types containing types mention 
typing rules con var app abs stlc new typing rules inst gen inst gen ftv history principal typings basic motivations stlc notions principal type principal typing called principal pair occurred context type assignment systems calculus combinatory logic simple types 
motivation determining term typable finding types term typable 
key idea define typing algorithm structural recursion terms 
means calculating types term algorithm invoke recursively immediate subterms result returned recursive invocations sufficiently informative 
example 
example illustrates need sort general typing process inferring type information 
consider terms np wz yx type inference algorithm inf stlc defined structural recursion generate call tree inf cmb inf np cmb cmb inf inf algorithm inf uses cmb cmb combine results recursively processing subterms 
suppose recursive call inf return typing derivable stlc typing unfortunately way cmb combine result typing yield typing np application wz inside needs type shape 
solved typing thing cmb knows subterm typing imply typing 
seen example term terms terms xy wx see precisely terms type annotated version wx clear terms types forced applications wx wy prevents having result type shape 

problem result inf returned general result 
useful returned result 
fact certain sense best possible result checked typings 
avoid kind problems mentioned example type inference algorithms designed intermediate results subterms sense general 
different ways characterizing needed notions general 
hindley gives definitions intended stlc 
definition hindley principal type 
principal type system term type 
exists type environment 
exists 
hindley name principal pair called principal typing 
definition hindley principal typing 
principal typing system term typing 

typing exists 
clearly principal typing term result type principal type 
key property satisfied stlc definitions 
see history discovery 
theorem stlc 
term typable stlc principal typing principal type 
algorithm decides term typable stlc answer outputs principal typing 
hindley gave definition principal derivation called hindley deduction needed discussion 
definitions hindley essentially represent earlier approaches curry feys morris 
important aspects approach 
notion general tied substitution weakening 
stlc exactly captures needed fails sophisticated type systems 

literature definitions freely switches principal type principal typing principal pair 
algorithms stlc described having goal calculating principal type fact designed calculate principal typings 
stlc term principal typing principal type people pay attention difference 
sophisticated type systems difference important 
type polymorphism hm stlc behaved practice quite insufficient programming languages 
overcome limitations stlc various approaches adding type polymorphism explored approach efforts directed problem type inference 
approach adding type polymorphism system discovered early 
decade people thinking curry style presentations perform type inference 
mid proved typability undecidable complete terminating type inference algorithm 
result principal typings proven 
far successful widely approach adding type polymorphism hindley milner hm system extension stlc restriction approach type inference hm differs stlc hindley notion principal typing needed type inference algorithms stlc quite clearly hold hm 
example 
example illustrates definition useful hm 
consider terms xx 
term typable hm 
example judgement derived hm 
derivation typing intermediate step assignment typing subterm stand stand new abbreviation 
subterm fact assigned typing ti 
distinct substitution ti tj 
furthermore hard check typing assignable substitution ti 
principal typing definition 
contrast term principal typing definition hm typable terms principal typings definition turns hm typable term free variables 
known simply clever conceive set operations yield hm typings hypothetical hm principal typings 
shown reasonable replacement definition principal typing hm 
milner cleverness finding way problem 
key lies definition clear statement 
definition typable principal 

term typable hm iff mentioning monotypes types occurrence type derivable hm 

typing principal term hm iff mentions monotypes derivable hm mentioning monotypes derivable substitution behaves ftv 
property hm satisfies definition due damas milner 
theorem hm 
term typable hm principal typing hm 
algorithm decides term typable hm answer outputs principal typing 
hard see closed term free variables typable iff typable 
theorem implies typability decidable closed programs closed programs principal typings 
type inference algorithm programming language implementation hm type system widely result 
drawbacks noticed 
order take advantage notion polymorphic types term determined analyzing analyzing subterm shape subterm completely analyzed result analyzing analyzing behavior milner algorithm 

notion requires fixing part type environment containing arbitrarily chosen hm typable term hm typing represents possible typings term 
shown fact mere appearance individual hm typings represent possible hm typings term 
difficult hm type system approaches involve incremental separate computation type information 
hm may right applications 
principal typings intersection types time type system support type polymorphism principal typings promising approaches rely intersection types 
room go detail intersection types discussion gives highlights 
system intersection types principal typings proved coppo dezani version 
general approach followed ronchi della rocca van bakel systems intersection types 
approach finding principal typing algorithm term involves finding normal form approximate normal form assigning typing proving typing normal form typing original term proving typing normal form obtained sequence operations expansion called duplication lifting implementing subtyping called rise substitution 
general approach summarized nicely 
intrinsically impractical method primarily theoretical interest 
definitions operations typings quite complicated discussed 
unification approach principal typing intersection types ronchi della rocca 
terminating restriction pre sented bounds height types 
unfortunately approach uses complicated approach expansion quite difficult understand 
potentially practical approaches principal typing intersection types subsequent unification methods focused rank restriction intersection types 
van bakel unification algorithm principal typing rank system 
independent jim attacks problem emphasis handling practical programming language issues recursive definitions separate compilation accurate error messages 
successors jim method include banerjee integrates flow analysis jensen integrates strictness analysis 
approaches principal typings type inference intersection types include 
development area notion expansion variables 
key idea expansion variables earlier notions expansion substitution integrated single notion substitution called substitution 
results great simplification earlier approaches rank restriction 
technical issues needing overcome ready general 
observation previous definitions holds system principal typings know 
typable term assigned typing principal sense typing assignable exist operations operations sound sense term ti ti oi systems stronger statement soundness operations holds term oi 
stlc operations substitution weakening sound stronger sense provided weakening defined typings mentioning term variable question 
various systems intersection types operations expansion lifting rise substitution weakening 
systems intersection types operations sound stronger sense sound weaker sense 
observation system principal typings 
new definition principal typing designing general definition principal typing important issue principal typing term typing represents possible typings introduced new technical machinery necessary capture notion information order typings 
suggests new definition right 
definition principal typing 
typing principal system term iff implies positive results thing check new definition existing definitions specific type systems instances new definition 
cases typing principal old definitions principal new 
justified observation 
remains considered typing system principal new definition principal old stlc new definition corresponds exactly old definition 
theorem 
typing principal stlc definition iff principal stlc definition 
proofs appendix 
type systems new definition slightly liberal accepting additional typings principal 
example consider term xx 
usual principal typing system intersection types 
new definition principal typing systems intersection types term assigned iff assigned 
merely harmless quirk 
old definitions ruled unneeded intersections type variables inconvenient 
type systems principal typings new definition principal typings prove certain type systems principal typings 
results significant clarified statement jim best previous knowledge imprecision definition principal typings impossible prove type system lacks principal type property theorem 
hm system principal typings terms 
quite important research community aware theorem jim points number authors published claims ml possesses principal typings property 
theorem 
system principal typings terms 
banerjee 
modular polyvariant type closure analysis 
proc 
int conf 
functional programming 
acm press 
barendregt 
lambda calculus syntax semantics 
north holland revised edition 
coppo dezani ciancaglini 
principal type schemes calculus semantics 
hindley seldin 
coppo dezani ciancaglini 
functional characters solvable terms 
math 
logik 
math 
coppo giannini 
complete type inference algorithm simple intersection types 
th colloq 
trees algebra programming vol 
lncs 
springer verlag 
curry feys 
combinatory logic studies logic foundations mathematics 
north holland amsterdam 
damas milner 
principal type schemes functional programs 
conf 
rec 
th ann 
acm symp 
princ 
prog 
langs 

girard 
interpr tation elimination des coupures de arithm ordre sup 
th se etat universit de paris vii 
harper mitchell 
type structure standard ml 
acm trans 
prog 
langs 

hindley 
basic simple type theory vol 
cambridge tracts theoretical computer science 
cambridge university press 
hindley seldin eds 
curry essays combinatory logic lambda calculus formalism 
academic press 
jacobs margaria 
filter models polymorphic types 
theoret 
comp 
sci 
jensen 
inference polymorphic conditional strictness properties 
popl 
jim 
principal typings 
tech 
memo 
mit lcs tm mit 
jim 
principal typings 
conf 
rec 
popl rd acm symp 
princ 
prog 
langs 
jouvelot gifford 
algebraic reconstruction types effects 
conf 
rec 
th ann 
acm symp 
princ 
prog 
langs 
kfoury mairson turbak wells 
relating typability expressibility finite rank intersection type systems 
proc 
int conf 
functional programming 
acm press 
kfoury wells 
direct algorithm type inference rank fragment second order calculus 
proc 
acm conf 
lisp funct 
program 
kfoury wells 
decidable type inference finite rank intersection types 
conf 
rec 
popl th acm symp 
princ 
prog 
langs 
leivant 
polymorphic type inference 
conf 
rec 
th ann 
acm symp 
princ 
prog 
langs 
milner 
theory type polymorphism programming 
comput 
system sci 
milner tofte harper macqueen 
definition standard ml revised 
mit press 
mitchell 
polymorphic type inference containment 
huet ed logical foundations functional programming chapter 
addison wesley 
morris 
lambda calculus models programming languages 
phd thesis massachusetts institute technology cambridge mass 
pierce 
bounded quantification undecidable 
inform 
comput 
conf 
rec 
popl th acm symp 
princ 
prog 
langs 
pottinger 
type assignment strongly normalizable terms 
hindley seldin 
reynolds 
theory type structure 
colloque sur la programmation vol 
lncs paris france 
springer verlag 
ronchi della rocca 
principal type schemes unification intersection type discipline 
theoret 
comp 
sci 
ronchi della rocca 
principal type schemes extended type theory 
theoret 
comp 
sci 
schubert 
second order unification type inference church style polymorphism 
popl 

talpin jouvelot 
type effect discipline 
inform 
comput 
urzyczyn 
type reconstruction 
math 
structures comput 
sci 
van bakel 
intersection type disciplines lambda calculus applicative term rewriting systems 
phd thesis catholic university nijmegen 
van bakel 
intersection type assignment systems 
theoret 
comp 
sci 
wells 
typability type checking second order calculus equivalent undecidable 
proc 
th ann 
ieee symp 
logic comp 
sci 
superseded 
wells 
typability undecidable eta 
tech 
rep comp 
sci 
dept boston univ 
wells 
type inference system eta rule 
ph thesis boston univ 
wells 
typability type checking system equivalent undecidable 
ann 
pure appl 
logic 
supersedes 
appendix proofs properties stlc analysis new definition vs old definition stlc proceeds parts 
lemma 
stlc typing derivable 

stlc type substitution 
stlc type environment dom dom 
proof 

ii stlc stlc 

stlc stlc 
theorem 
principal stlc definition 
principal stlc definition 
proof 

definition stlc suppose typing 
definition exists 
lemma stlc 
lemma stlc stlc theorem shows new definition principal typing liberal old stlc 
stronger statement possible case stlc new old definitions principal typing match exactly 
lemma 
principal stlc definition 
typing stlc principal definition 
stlc proof 

definition stlc exists 
principal exist 

suppose 
dom dom 
fv 

suppose 
define function follows yw yz yx yw xy ftv xw 
suppose type variable ftv 
suppose ftv 
ii 
suppose ftv fv 
fv 
xz 
suppose distinct ftv 
assume ftv wi wi fv 
pi wi wi 
zu 
xy mp 
stlc proof theorem 
theorem 
suppose principal stlc definition 
lemma follows principal stlc definition 
properties hm proof theorem 
sufficient find term principal typing 
term xx proven principal typing 
typing xx proven principal 
typing assignable xx hm 
hm xx 
proven principal 
strategy find hm xx hm hm monotype 
length leftmost path viewed tree 
observe leaf path fresh type variable 
notation shorthand quantifying free type variables 

arbitrarily chosen type 
clear hm xx 
xy 
unify xy xn xn fresh 
ni unify ni yi distinct 
observe derived type ni leftmost path length ground type path 
xx 
yk 
hard check hm 
impossible derive hm leftmost branch big instantiation allows typing subterm 
principal typing xx 
properties proof theorem 
sufficient find term principal typing 
term xx proven principal typing 
typing xx proven principal 
strategy suppose principal typing term xx derive contradiction proving xx principal typing 
type resulting erasing occurrences type replacing bound type variables fresh distinct free type variables 
new set type assumptions freshly chosen type variable 
notation shorthand quantifying free type variables 
typing arbitrarily chosen type 
supposed fact xx hard check xx methods build program fragment xx contradicting claim principal xx 
fragment sense tests size type fails type big specifically form yx captures variable forced shape type fresh type variable 
embedded quantifiers root type stretch big application yx typed 
