automatic generation implied induced constraints simon colton ian miguel division informatics university edinburgh south bridge edinburgh eh hn united kingdom dai ed ac uk department computer science university york york yo dd united kingdom cs york ac uk 
improving basic model constraint satisfaction problem csp reformulation lead large reduction search 
ways reformulate problem including addition extra constraints implied problem speci cation ii nding symmetry breaking constraints iii specialising problem sub problems 
currently reformulation typically performed hand 
hr theory formation program automate discovery additional constraints help reformulate csp ways 
solutions small instances class csps hr invents concepts nds theorems interpreted additional constraints may enable csp solver nd solutions larger instances eciently 
demonstrate ectiveness approach highlighting gain eciency applied nding groups quasigroups balanced incomplete block designs 
reformulating initial model constraint satisfaction problem adding implied symmetry breaking constraints basic representation lead signi cant reductions search discussed 
interest generating symmetry breaking constraints automatically comparatively little automatically generate implied constraints 
describe approach generating implied symmetry breaking constraints nding special cases problem order decrease search 
apply technique problems constructing groups quasigroups balanced incomplete block designs 
class problems related parameters controlling size structure start basic model solve small instances choco constraint programming language 
hr theory formation program described detail detect types constraint call implied induced constraints discussed 
properly interpreted additional constraints enable reformulate model lead reduction search 
combined cost running hr interpreting results solving csp outweighs simply solving problem basic model small instances 
larger instances considered gains produced better model typically far outweigh cost deriving model 
describe approach surveying related area provide overview hr program 
section scheme hr choco improve model csps general 
experiments approach conclude discussing automated reformulation constraint satisfaction models general 
background implied constraints logical consequences initial problem speci cation 
added problem representation lead signi cant reductions search 
shown true variety domains golomb ruler quasigroup existence problems 
generation process usually performed ad hoc manner hand little research undertaken implied constraints generated automatically 
exception proof planning adapted deduce useful implied constraints initial model problem 
approach complementary considered 
mcs conjecture searching program step process produce theorems nite algebraic domains 
approach successful nding results qg quasigroup theory see author stated generally believed helpful solving csp details improved model 
ort focused coping problems posed symmetry 
common approach involves posting new constraints prior search remove symmetries preserve non symmetric solutions 
second approach exploits knowledge symmetries disallowing solver exploring symmetrical branches search posting new constraints heuristically 
implied constraints assumption symmetries problem known 
automatic detection symmetries problem potentially expensive process graph isomorphism complete see 
symmetries known may complex lengthy process state symmetry breaking constraints 
usually subset symmetries problem identi ed broken 
hr program hr theory formation program designed undertake discovery tasks domains pure mathematics group graph number theory 
hr objects interest domain example graphs integers groups small set initial concepts supplied de nition examples 
hr constructs theory inventing new concepts general production rules build old concepts 
new concepts produced correct examples predicate de nition describes relation objects examples 
hr uses examples concepts conjectures empirically 
instance nds examples new concept exactly examples old conjecture de nitions concepts logically equivalent 
nite algebraic systems group theory hr uses otter theorem prover prove conjectures 
domains hr applied otter ective nite algebraic systems designed concepts numerical nature 
otter fails prove conjecture hr invokes mace model generator attempt nd counterexample 
counterexamples incorporated theory reducing number false conjectures hr 
experiments described choco constraint solver mace nd examples described 
hr breaks equivalence conjectures implication conjectures extracts prime implicates 
prime implicate conjunction premises imply single goal proper subset premises implies goal 
prime implicates general easier understand prove parent equivalence conjecture 
hr performs heuristic search new concepts built interesting old concepts interesting ones 
estimate interestingness concept obtained weighted sum various measures interestingness weights set user 
instance applicability concept calculated proportion objects interest theory non empty set examples concept 
case concepts specialisation object interest example concept abelian groups applicability calculated proportion objects interest specialised class 
instance isomorphism groups size size taken number elements contain 
abelian concept abelian groups scores applicability 
working certain domains objects interest naturally categorised terms size 
instance nite algebras number elements provides natural categorisation size 
hr coverage measure concept calculated number categories size categorisation contain object interest concept non empty set examples proviso applicability concepts specialisations 
example size categorisation groups size cx cyclic group order dx dihedral group order explained 
non abelian concept abelian groups scores coverage categories contains abelian group 
put simply abelian group size concept scores full marks coverage 
general measure extended categorisation supplied user just size objects interest 
nite algebraic systems categorisation size automatically calculated hr user doesn 
reason applicability coverage useful measures driving heuristic search pruning output context csps outlined section 
making hr sort concepts produces user choose order hr employs production rules 
production rules follows compose conjugates de nitions old concepts exists introduces existential quanti cation forall introduces universal quanti cation match specialises predicates matching variables negate nds concepts size counts number examples satisfying de nition split instantiates variables ground instances hr employ tiered search user chooses tiers production rules placed production rule steps involving rules tier exhausted involving rules tier 
extension unary rst search employed 
choices rules put tiers explained 
fact abelian group size proved chapter 
choco hr phase phase interpretation phase pruning solutions theory concepts theorems induced implied reformulations improved models phase problem class basic model fig 

system architecture automatic generation additional constraints csps system architecture approach consists phases shown gure 
rst phase class problems basic model run choco successively larger instances class look solutions instance order extract maximum information input hr 
cuto backtracks imposed phase terminates reasonable time 
second phase solutions basic model supplied input hr initial concepts domain 
hr run speci ed period order invent concepts relevant problem nd theorems concepts 
phase hr results interpreted terms original csp 
aspect theory hr produces typically prime implicates provides interpreted additional constraints 
prime implicates proved otter additional constraints interpret implied original problem speci cation added model loss solutions 
concepts hr produces suggest case splits 
concepts specialisations solutions groups specialised abelian non abelian groups 
problems interested nding solutions specialisations interpreted induced constraints split csp sub problems 
sub problems may introduce symmetry breaking constraints nding solutions sub problems may produce decrease search 
reason phase generally employ tiered search hr forall production rule top tier 
rule produces specialisations elements particular property 
interpreted stronger constraints case split specialisations say existence element particular property 
similarly exhaustive forall increases strength implied constraints 
put compose rule lower tier rest rules tends produce complicated concepts theorems harder interpret constraints 
problems interested existence solution case considered hope nding solution sub problem course solution original problem 
explains coverage measure described useful hr application constraint generation specialisation coverage example specialised solution size far suggests may solution size 
concepts high coverage worthwhile specialisations interested nding single solution 
similarly concepts high applicability may worthy consideration case split 
phase ends making reformulations model csp adding combinations implied induced constraints combinations interpreted hr results 
nal phase test new models reduce search running small instances problem 
analysis choose best reformulations attempt solve larger instances problem class 
theory solutions larger problem classes supplied hr cycle started 
experiments described complete cycle process 
experiments experiments described hr suggest additional constraints basic model csps 
tested reformulations suggested reduced number backtracks number nodes cpu time solve csp problems instances increasing size 
groups group theory important area pure mathematics groups domains diverse galois theory general relativity 
groups nite algebra detail way mapping variables elements third 
axiomatised groups standard way terms group operation pairs elements third associative manner 
constraints unique identity element id id id element inverse element id interested nding groups size isomorphism 
groups operation respectively said isomorphic mapping 
means multiplication place groups essentially 
basic csp model nd groups size choco variables variable having domain ng 
unique identity element chosen rst element helps break symmetry 
meant set variables ng know associativity constraint written implication constraints form ng 
inverse constraint written set disjunctions form basic model choco groups fewer elements took backtracks nd solutions size phase experiment ended groups size supplied hr 
improve eciency hr automatically removes isomorphic copies groups purposes conjectures hr set non isomorphic groups left true groups general 
ran hr minutes tiered rst searched described 
decided heuristic search little ect short session breadth rst search tiers 
production rule steps carried 
hr produced equivalence conjectures extracted prime implicates 
implied existence unique identity element useful implying constraints 
prime implicates interesting state element appears row column ect groups quasigroups known result 
interpreted di erent constraint rows columns 
think constraints single quasigroup constraint call prime implicate interesting id states identity element idempotent elements groups 
remove value domain variables diagonal multiplication table potentially useful constraint 
called constraint hr prime implicate inv inv states symmetry inverse function 
interpreted constraint 
hr di erent concepts specialisations 
took interest concept groups property true known self inverse groups property identity element appears diagonal multiplication table 
know multiplying sides see id interpreting concept case split divided problem nding groups nding self inverse groups element chose identity nding groups element id element identity element identity self inverse 
non self element chosen element loss non isomorphic solutions 
needed choose elements condition imposed prime implicate 
simply chose second element third element loss non isomorphic solutions stipulated 
took interest concept groups abelian groups known type group 
interpreted case split divided problem nding abelian groups groups elements non commutative 
identity element chose second third elements added constraint concepts provided case splits produced forall production rule justifying tiered search 
additional constraints reformulated problem ways basic model basic model basic model basic model abelian case split basic model self inverse case split 
di erentiated wanted see quasigroup constraint subsumed constraint adding gave improvement wasn seemingly stronger quasigroup constraint 
phase ran reformulated models problems size determine degraded model 
produced exactly results pruned 
re ection obsolete presence di erent xed rst row column table choosing identity 
provide improvement results table see encouraging example number backtracks nd solutions size reduced addition quasigroup constraint reduced self inverse case split 
abelian case split degrade size producing backtracks 
degradation signi cant reduce number solutions size symmetry breaking ect decided prune reformulation 
variable orderings strategies choco lexicographic column wise ordering smallest domain heuristic 
domain results similar record strategy table 
dash indicates solution backtracks 
table see size basic model took minutes nd solutions reformulated models took seconds exhaust search 
eciency gain marked size best model reformulation size backtracks size backtracks node node time time sols sols size backtracks size backtracks node node time time sols sols size backtracks size backtracks node node time time sols sols size backtracks size backtracks node node time time sols sols table 
group results smallest domain variable ordering ran seconds quicker basic model 
speed roughly covers time spent running hr interpreting results implementing new model 
note abelian case split reduce search somewhat sizes removing isomorphic solutions 
ective self inverse case split 
ective sizes self inverse groups symmetry breaking appears ective cases 
note nally reformulations able nd groups size fastest reformulation took hours nd groups size 
quasigroup classes quasigroups nite algebras element appears row column latin squares 
quasigroup size certain specialised classes quasigroups open questions existence examples 
classes include termed qg qg quasigroups additional axioms qg qg qg qg qg 
constraint satisfaction approaches existence questions successful 
instance finder program slaney settled question idempotent qg quasigroups size nding reported 
basic csp model quasigroup class taken web page www cs york ac uk tw prob prob groups 
problem nding quasigroup size variables domain ng 
constraints di erent row column constraints imposed particular quasigroup type implemented implications associativity constraint group theory model 
experimented see implied induced constraints improve basic model quasigroup classes terms nding single solution solutions 
looked implied constraints constraints sub problem attack looking solution subproblem solution problem 
class ran choco increasing sizes ort required nd solution unreasonable imposed limit backtracks 
groups small orders looked examples size hr removed isomorphic copies produced choco 
class ran hr minutes examples choco just concepts quasigroups elements quasigroups multiplication operation 
minutes hr tiered search group theory experiment heuristic search 
otter prove theorems extract prime implicates 
minutes turned theorem proving abilities hr formed concepts coverage measure best rst search tiers 
exact nature hr output largely immaterial average theory formed prime implicates concepts specialisations suitable case splits 
hr measures interestingness explore results 
instance coverage applicability measures sort specialisations identify high coverage sub problem search 
results took interpretation process reformulation group theory experiment 
classes summarise reformulations 
qg quasigroups choco supplied hr quasigroups isomorphism hr formed theory 
rst noticed prime implicate means element appear diagonal multiplication table interpreted constraint di erent diagonal 
noticed prime implicate 
quasigroup see elements commutes 
means qg quasigroups anti abelian pair distinct elements commute interpreted constraint pair hr prime implicate highlights symmetry diagonal set constraint 
constraints added basic qg model produce reformulations implied constraints hr specialisations including quasigroups symmetry left identities coverage applicability ii idempotent qg quasigroups coverage 
produced forall production rule turned induced constraints looking quasigroup quasigroups reformulate case split just added constraint narrow search 
induced constraints provide reformulations idempotent quasigroups implied constraints diagonal elements ect diagonal elements xed start included reformulations 
specialisation reformulations implied reformulations long nd examples size reformulation successful nding qg quasigroup size 
order test relative ectiveness reformulations di erent search strategies ran choco lexicographic column wise variable ordering top left hand corner smallest domain rst heuristic 
results table dash indicating solutions backtracks 
qg quasigroups hr similar theory qg quasigroups theorems held 
better results exactly reformulations qg qg results table 
immediately apparent results implied constraints bene cial solver 
speci ed limits choco able solve instances order basic model 
adding implied constraints allowed choco solve instances orders classes 
variable ordering heuristic marked ect utility implied constraints 
example reformulations anti abelian ective reformulated models lexicographic ordering ective informed smallest domain heuristic 
heuristic ords solver freedom jump quasigroup table full advantage extra pruning anti abelian constraint 
reformulated models containing implied constraints solve order problem speci ed number backtracks 
induced models solve problem relatively short amount time 
quasigroup class reformulation symmetry left identities allowed instance order just seconds 
similarly reformulation idempotency instance quasigroup class size 
shows value induced constraints searching speci types quasigroup amount ort required reduced level solution obtained relatively easily 
quasigroup classes analysis hr output reformulation 
qg theorem additional constraint giving reformulation results reformulation table dash indicating solution backtracks 
reformulated model signi cantly outperforms basic model measures 
speci ed limits reformulation able solve instance order basic model 
basic model solve problem times slower reformulated model 
qg results lexicographic column wise variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results smallest domain variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results lexicographic column wise variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results smallest domain variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time table 
quasigroup class results trend increases size problem justifying time spent reformulation 
smallest domain heuristic bene cial model advantage extra pruning power limited value basic model 
qg hr re discovered theorem stated cases quasigroups idempotent added additional constraint produce reformulations respectively recording results table 
smallest domain heuristic basic model qg solvable orders respectively matching abilities reformulated idempotent models 
class decrease search ered reformulated models signi cant increases size problem 
models smallest domain heuristic substantial saving suggesting structure problem classes solver allowed focus constrained areas quasigroup table successful 
qg results reformulation lex smallest domain lex smallest domain size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results reformulation lex smallest domain lex smallest domain size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes times qg results reformulation lex smallest domain lex smallest domain size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time table 
quasigroup class results balanced incomplete block designs balanced incomplete block designs bibds class combinatorial objects introduced experiment planning early th century 
studied csps interesting highly symmetric models break symmetry perform eciently 
bibd de ned parameters 
rst dimensions matrix binary variables 
parameters de ne appear row column respectively 
scalar product pair rows equal 
symmetry problem stems fact rows columns permuted operations change sums rows columns set scalar products pair rows 
detecting breaking large amount symmetry crucial solving related problems 
basic choco model problem variables domains occurrence constraints row column ensure number entries exactly respectively specialised daemon enforce scalar product constraints 
daemon ranges pair rows performs forward checking style pruning current maximum possible number pairs 
bibd bibd backtracks backtracks nodes nodes time time backtracks backtracks nodes nodes time time backtracks backtracks nodes nodes time time backtracks backtracks nodes nodes time time backtracks backtracks nodes nodes time time backtracks backtracks nodes nodes time time table 
balanced incomplete block designs results contrast nite algebras hr bibds production rules ective domain suggest improvements section 
hr results running choco square bibds size equal 
hr otter nite algebras theory bibds hr produced conjectures proved 
looked induced constraints help break symmetry problem 
hr came concepts coverage particular concept bibds leftmost column rst second rows 
concept extrapolated rows permuted group entries leftmost column 
similarly permute columns group entries 
order break symmetries set st row column number entries governed reformulated model 



experimental results variety parameter settings table 
case lexicographic column wise ordering binary variables smallest domain heuristic di erentiate variables instantiated automatically skipped choco anyway 
results clear showing dramatic reduction search hardest problems reformulated model 
setting variables prior search removes large amount symmetry basic model explore 
demonstrated hr nd implied induced constraints csps 
furthermore shown reformulating model include additional constraints gives clear improvement eciency account time taken run hr interpret results re formulate csp 
group quasigroup experiments implied constraints produced signi cant speed board implied induced constraints able nd solutions larger problems 
hr relatively poor performance bibds highlights areas improvement 
firstly hr designed nd internal properties objects interest nd maps objects interest 
nding maps set objects interest hr suggest ways think objects equal interpret symmetry breaking constraints 
possible improvement apply hr specialised problems nd implied constraints case splits nd theorems idempotent qg quasigroups true general qg quasigroups add case split reformulation 
approach interactive interpret hr results reformulate csp 
details di erent interpretations hr results see automation phase dicult 
suggestions fully automating reformulation csps implied induced constraints 
note combining implied constraints lead improvements constraint may subsumed 
furthermore choice heuristic csp solver ects comparative utility additional constraints 
pruning phase extensively experiments may important fully automated approach may constraints improve search combinations constraint subsumed powerful 
addition useful consider specialising problem induced constraints nd example general problem 
question reformulate csps automatically general needs research 
system described applied problem classes tournament scheduling shed light automate process 
hope added evidence reformulating csps particular adding implied constraints dramatically increase eciency shown automating certain aspects process certainly possible worthy area research 
supported epsrc gr gr rst author department computer science university york 
toby walsh alan bundy continued input project 

arai 
nd symmetries hidden combinatorial problems 
kerber editors proceedings eighth symposium integration symbolic computation mechanized reasoning pages 

bundy 
science reasoning 
computational logic essays honor alan robinson pages 
mit press 

colton 
automated theory formation pure mathematics 
phd thesis division informatics university edinburgh 

colton bundy walsh 
hr automatic concept formation pure mathematics 
proceedings th international joint conference arti cial intelligence pages 

colton bundy walsh 
automatic identi cation mathematical concepts 
machine learning proceedings th international conference pages 

crawford 
theoretical analysis reasoning symmetry rst order logic 
proceedings workshop tractable reasoning tenth national conference arti cial intelligence aaai 

frisch miguel walsh 
extensions proof planning generating implied constraints 
proceedings forthcoming 

jaumard morales 
constraint approach golomb ruler problem 
proceedings third international workshop integration ai techniques 

gent smith 
symmetry breaking search constraint programming 
proceedings ecai pages 

haralick elliot 
increasing tree search eciency constraint satisfaction problems 
arti cial intelligence 

humphreys 
course group theory 
oup 

laburthe group 
choco implementing cp kernel 
cp post conference workshop techniques implementing constraint programming systems 

mccune 
otter user guide 
technical report anl argonne national laboratories 

mccune 
davis putnam program application nite rst order model search 
technical report anl mcs tm argonne national laboratories 

meseguer 
exploiting symmetries constraint satisfaction search 
arti cial intelligence appear 

puget 
satis ability symmetrical constrained satisfaction 
proceedings ismis pages 

schaerf 
scheduling sport tournaments constraint logic programming 
constraints 

slaney fujita stickel 
automated reasoning exhaustive search quasigroup existence problems 
computers mathematics applications 

smith walsh 
variables implied constraints model non binary problems 
proceedings th national conference arti cial intelligence pages 

zhang 
mcs model conjecture searching 
proceedings cade lnai pages 
springer verlag 
