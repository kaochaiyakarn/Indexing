parallel virtual machine bulk synchronous parallel ml fr ric fr ric laboratory algorithms complexity logic university paris val de avenue du ral de cr teil cedex france frederic fr univ paris fr tr bulk synchronous parallel ml extension ml programming direct mode parallel bulk synchronous parallel algorithms functional programs 
bulk synchronous parallel bsp computing parallel programming model introduced valiant offer high degree abstraction pram models allow portable predictable performance wide variety architectures 
bsp algorithm said direct mode physical process structure explicit 
algorithms offer predictable scalable performances expresses small set primitives taken confluent bs calculus constructor parallel vectors asynchronous parallel function application synchronous global communications synchronous global conditional 
library implements primitives objective caml mpi 
efficient performance follows curves predicted bsp cost model cost model estimates parallel execution times :10.1.1.2.6744
library basis project aims objective caml grid computing example applications parallel databases molecular simulation 
context security important issue order obtain security safety achieved 
machine implementation caml particular easy prove correct dynamic semantics 
order simple implementation cost model follows bsp model nesting parallel vectors allowed 
library programmer responsible absence nesting 
breaks safety environment 
polymorphic type system type inference designed proved correct small steps semantics 
parallel machine execution programs designed proved correct bs calculus intermediate semantics 
machine designed machines adapted grid computing security compilation schemes need static number processes possible grid computing instructions realistic real code real implementation 
novelty presentation machine drawbacks 
machine extension zinc machine zam virtual machine implementations objective caml caml light languages efficient 
bsp model give informal presentation programming library section 
zam section extend bulk synchronous parallel machine define compilation machine section 
functional bulk synchronous parallelism bulk synchronous parallelism bulk synchronous parallel bsp model describes parallel computer model execution cost model 
bsp computer components set pairs communication network allowing inter processor delivery messages global synchronization unit executes collective requests synchronization barrier 
performance bsp computer characterized parameters expressed multiples local processing speed number processor memory pairs time required global synchronization time collectively delivering relation communication phase processor receives sends word 
network deliver relation communication phase processor receives sends words time bsp program executed sequence super steps divided successive logically disjoint phases bsp processor uses local data perform sequential computations request data transfers nodes network delivers requested data transfers global synchronization barrier occurs making transferred data available super step 
execution time super step sum maximal local processing time data delivery time global synchronization time resp 
time max processor max processor local processing time processor super step max hi number words transmitted resp 
received processor super step 
synchronization barrier synchronization barrier 
bsp super step execution time program sum execution time super steps 
execution time time bsp program composed super steps sum terms maxi maxi general functions size data complex parameters data skew 
minimize execution time bsp algorithm design jointly minimize number super steps total volume imbalance communication total volume imbalance local computation 
library currently implementation full bulk synchronous parallel ml language partial implementation library objective caml 
called library elements 
gives access bsp parameters architecture 
particular offers function bsp unit int value bsp static number processes parallel machine 
value change execution 
polymorphic type par represents type wide parallel vectors objects type process 
nesting types prohibited 
type system enforces restriction 
parallel constructs operates parallel vectors created time int par stores process usually write fun pid show expression may different processor 
expression said local 
expression parallel object said global 
bsp algorithm expressed combination asynchronous local computations phase super step phases global communication second phase super step global synchronization third phase super step 
asynchronous phases programmed apply par par par apply stores process implementation semantics prescribe synchronization barrier successive uses apply 
ignore distinction communication request realization barrier 
communication synchronization phases expressed put int option par int option par option defined type option consider expression put fun fs send value process process function fs process fs evaluates send value fs evaluate 
expression evaluates parallel vector containing function fdi delivered messages process 
process fdi evaluates process sent message process evaluates 
full language contain synchronous conditional operation bool par int evaluate depending value process objective caml eager language synchronous conditional operation defined function 
contains function bool par int bool construction vec pid vec bool par pid int 
global conditional necessary express algorithms repeat parallel iteration max local errors epsilon framework tradeoff parallel programming defined confluent calculus designed purely functional parallel language 
side effects programs easier prove re 
eager language allows performances calculus bsp operations programs easy port costs predicted portable parametrized bsp parameters target architecture 
zinc machine machines calculus calculate values calculus lot machines designed 
secd machine implementation lisp language 
uses environment list values closure stacks calculus 
old optimized machine 
spirit functional machine fam 
fam optimizes access environment arrays constant cost access 
machine designed functional languages call name strategy 
eager language techniques suitable 
interesting machines cam categorical machine introduced curien cousineau implement caml language variant standard ml 
extension machine bsp computing done 
introduced powerful machine zam zinc machine zinc zinc cam underlies bytecode interpreter objective caml caml light 
machine derived krivine machine calculus explicit substitution 
machine interesting instructions easily translated efficient bytecode optimizations threaded code native code 
terminology peyton jones zam environment closure machine push enter model cam secd eval apply models call value evaluation strategy arguments evaluated pushed function number arguments return closure evaluation code function arguments 
method optimizes allocation arguments evaluation expressions 
zam machine state components 
code pointer representing code executed sequence instruction 
environment sequence machine value vn associating value vi variable having de bruijn indices transform identifier number abstraction included identifier abstraction binds method solve problem binding variables 
stack sequence machine values return contexts holding function arguments intermediate results function return contexts 

integer counting number function arguments available stack 
manipulated machine level values pointer heap blocks written vn tag attached block integer vn values contained block 
tags encode constructor inductive types supposed declared distinct tag function closures 
values language represented heap blocks constant follow function value closure compiled code function body environment associating variables free body 
inductive type heap block representations values tuple tag number associated constructor transition machine halting configurations show lines execution instruction 
code environment stack number arguments access quote closure push apply grab grab return return cons vm vm vm vm switch cm vp ct vp branch true branch false add equal true false proj vi vi halting configuration code environment stack number arguments result value return grab sequential zam instructions bsp zinc machine machines bs calculus bs calculus modified secd 
new machine problems original slowness difficulty real instruction machine optimize notably exchange closures 
remedy problems introduced modification cam bs calculus 
machine problems number processors machine execute program known compilation phase adapted eases portability grid computing example instruction exchange values difficult translate real code instruction adds instructions code execution 
problem specific second problem shared bsp secd machine 
give machine extension zam suitable bsp computing drawbacks 
furthermore machine basis complete implementation language 
bsp zam bsp zam kinds instructions sequential parallel ones 
corresponds structures original calculus bs calculus 
bsp zam obtained duplicating sequential zam process 
allows machine execute asynchronous computations phases bsp super steps 
express phases bsp super steps need set instructions synchronous ones 
phase bsp model asynchronous computations need number processes names process spirit programming pid give respectively name process number processes 
pid instruction needed construction parallel vectors giving name process 
express synchronization communication phases bsp super step need add special instructions bsp zam send 
instructions need bsp synchronization sequential zam process 
branch instruction global conditional 
send instruction primitive synchronous put operator exchange values processes zam machines 
instructions bsp zam processors machine codes stacks environment number arguments change 
compilation order concrete shall consider problem compiling core language machine 
language uses real identifiers de bruijn indices codings 
index variable needed 
compilation scheme zam function expression instruction sequence representing continuation returns instruction sequence evaluates leaves value top stack continues sequence executing code suppose expressions codes stacks cp tp sp cp tn tn sp pid send send cp tp sp cp sp name process number processes 
bsp zam instructions typed nested parallel vectors rejected type checker language 
sequential mini expressions variable compiled access instruction carrying de bruijn index variable 
execution access looks th entry machine environment pushes stack 
spirit constants trivially compiled quote instruction 
primitive operators extra function inst gives instruction operator example inst op add equal op 
curried function compiles closure instruction run time builds closure arguments current environment pushes closure stack 
arguments closure code body function preceded grab instructions followed return instruction 
code multiple application ee em pushes return frame containing code executed applied function returns current environment argument count instruction push 
arguments function evaluated right left values pushed stack 
apply instruction branches code closure obtained evaluating setting argument count conditional compiled branch instruction top stack true false executed code 
inductive types compilation execution constructor applications straightforward arguments constructor evaluated instruction creates representation constructed terms tagged constructor number 
case statement return frame continuation pushed 
switch instruction discriminates tag matched value branches code corresponding cases arm adding fields matched value environment binding pattern variables 
return instruction code arm restores original environment branches back continuation recursive function instruction constructs recursive closure 
simplified presentation cyclic closure slot environment corresponding recursive variable source term point back closure usual implementation uses scheme described cyclic closures 
give compilation sequential zam 
access de index const quote const nproc op closure grab access inst op return fun xm closure times grab grab return ee em push em apply em em en en cons times grab grab return xx xn push closure push closure grab return apply push branch return return times grab grab return rec fx xn push case cn xn bn push switch return bn return parallel operators compilation sequential zam primitive operations semantics suggests parallel operator compiled application expression pid name processes apply simply application value supposed closure recursive abstraction operator closure grab push return pid access apply apply closure grab grab push return access access apply global conditional compiled traditional conditional argument adding instructions branch synchronous communication running bsp model push branch return return compilation put operator real difficulty 
compile put operator way compiling scheme static number processes special instructions added adds codes running time calculate values send second exchanges values generated code read 
clearly real implementation real machine codes easy generate lot machine codes essentially number processes large 
remedy problem calculate values send read things 
trick generate zam codes calculate read values iteration 
add special closure name put function iterate calculus 
write functional language extended syntax directly code generated compiler fun rec create create fun fun fun value fun value rec read liste match liste fun case process 
hd tl fun pid pid hd read tl hd read create bsp bsp create recursively computes value send 
read construct build recursively code return put operator 
completely compile primitive operator compiling function add manually send instructions code generated put function construction call read function put send put bulk synchronous parallel zinc machine provides detailed portable model parallel environments management bulk synchronous parallel ml 
advantages respect bsp secd machine bsp cam number processes parallel machine known compilation improving portability communication operation add instructions execution making implementation simpler classic 
phases project proof correctness machine respect semantics parallel implementation machine 
bsp zam implementation basis parallel programming environment developed language environment 
include type inference provide safe parallel programming environment 
acknowledgments supported aci grid program french ministry research project www org 
appel 
compiling continuations 
cambridge university press 
cardelli 
compiling functional language 
conference record acm symposium lisp functional programming pages austin texas august 
acm 
cousineau huet 
caml primer 
technical report inria 

synth se de types pour bulk synchronous parallel ml 
journ es des langages january 
valiant 
direct bulk synchronous parallel algorithms 
journal parallel distributed computing 
hardin 
functional runtime systems lambda sigma calculus 
journal functional programming 
landin 
mechanical evaluation expressions 
computer journal 
leroy 
zinc experiment economical implementation ml language 
rapport technique 
leroy 
caml special light system modules efficient compilation caml 
technical report inria 
xavier leroy 
objective caml system 
web pages www ocaml org 
:10.1.1.2.6744
implementation functional bulk synchronous parallel programming library 
th iasted international conference parallel distributed computing systems pages 
acta press 

calculus functional bsp programs 
science computer programming 
mccoll 
scalability portability predictability bsp approach parallel programming 
generation computer systems 
merlin 
la machine cat bsp 
journ es des langages 
inria 
merlin 
spmd environment machine functional bsp programs 
proceedings third scottish functional programming workshop august 
milner tofte harper 
definition standard ml 
mit press 
peyton jones 
implementation functional programming languages 
prentice hall 
skillicorn hill mccoll 
questions answers bsp 
scientific programming 
snir gropp 
mpi complete 
mit press 
leslie valiant 
bridging model parallel computation 
communications acm august 

