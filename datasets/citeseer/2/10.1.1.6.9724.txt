electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages monadic semantics core curry andrew tolmach sergio antoy dept computer science portland state university box portland usa give deterministic big step operational semantics essential core curry language including higher order functions call need evaluation nondeterminism narrowing residuation 
semantics structured modular monadic style form executable interpreter written haskell 
uses monadic formulations state non determinism concurrency 
key words curry functional logic languages narrowing residuation non determinism monads resumptions 
functional logic language curry combines lazy functional programming logic programming features narrowing residuation 
describing semantics features interaction common framework non trivial task especially functional logic programming different semantic traditions 
official semantics curry largely hanus operational semantics definitional trees narrowing steps 
fairly low level semantics says sharing behavior 
functional languages typically denotational natural big step operational semantics 
albert hanus huch oliver vidal propose natural semantics incorporating sharing order functional narrowing aspects curry order collect solutions nondeterministic programs incorporate residuation fall back small step semantics 
small step semantics advantage supported part national science foundation ccr ccr email apt antoy cs edu published elsevier science tolmach antoy data exp var var type var string int int type constr string abs var exp type prim string app exp exp type pattern constr var constr exp prim exp exp case exp pattern exp letrec var exp exp fig 

expressions 
closer usable machines tend lower level big step models harder reason 
describe variant semantics albert remains big step delivers solutions non deterministic programs handles residuation 
fully higher order 
treatment especially original attempted apply variety existing techniques produce simple executable semantic interpreter 
particular follow spivey hoare recording multiple solutions non deterministic programs lazily constructed forest traversed variety orders ensure fair access solutions 
resumptions ch 
model concurrency needed support residuation 
organize interpreter monads style popularized wadler allows modular presentation non determinism concurrency 
believe resulting semantics useful understanding curry exploring language design alternatives 
may prove useful stepping stone new practical implementations language 
semantics defined executable interpreter written haskell core subset curry 
interpreter phases 
section describes evaluation functional subset language 
section introduces non determinism logic variables narrowing 
section adds residuation 
section offers brief 
reader assumed familiar haskell monads 
functional language interpreter syntax functional part core expression language haskell data type definition 
language explicitly typed assume dealing typeable expressions 
function abstractions abs exactly argument functions treated nested abstractions 
functions need lambda lifted top level 
simplicity primitive type integers int primitive operators binary limitations easily lifted 
primitive operators named strings act con tolmach antoy head normal forms 
constructor named string assumed fixed arity ar 
constructors invented freely needed assume nullary constructors true false success available 
constructor applications patterns case expressions primitive applications fully applied 
partially applied constructors primitives source program expanded 
case expressions analyze constructed values 
patterns shallow consist constructor name list ar variables 
patterns single case assumed mutually exclusive necessarily exhaustive 
complicated pattern matching source language mapped nested case expressions 
nested case expressions encode definitional trees 
letrec expressions introduce sets potentially mutually recursive bindings 
curry intended lazy properly call need evaluation opposed simple call name evaluation sharing 
results call name call need distinguished purely functional computations time space behavior strategies different 
essentially non determinism section difference strategies observable 
model call need evaluation explicitly mutable heap represent shared values 
heap represent recursion recourse combinator 
approach corresponds behavior real implementations call need languages formal semantics introduced launchbury elaborated sestoft adopted albert :10.1.1.50.4314
old tradition interpret expressions context environment maps variables heap locations performing substitution expressions 
expression body abstraction evaluate different values depending values free variables abstraction parameter 
approach view program immutable code term rewriting system 
main evaluation function eval env exp value evaluates expression specified environment returns corresponding constructor head normal form hnf value embedded monadic computation 
monad newtype heap heap represents stateful computations heaps 
type monad representing answers involving type key type definitions shown mutually recursive 
values correspond expressions 
constructed values correspond tolmach antoy type int data value constr vint int env var exp type env map var data heap heap free bindings map data value env exp fig 

key data types evaluation 
data map map map map eq map map lookup map map map map fig 

specification map adt 
note ordering list guarantees key supersedes previous key 
efficient implementation sorted tree hash table put stronger demands class 
constructor applications components value described pointers heap 
closures correspond abstraction expressions tagged explicit environment resolve variable abstraction body 
environments values defined conjunction particular heap contains bindings heap pointers mention 
heap map bindings heap pointers heap entries supply free available heap pointers 
heap entries hnf values unevaluated expressions black holes 
expect thunk entries overwritten value entries evaluation proceeds 
black holes temporarily overwrite heap entry thunk entry computed attempting read black hole value signals kind infinite recursion thunk definition :10.1.1.50.4314
env heap rely underlying data type map applicative finite maps supporting simple get set operations see 
note returns new map modifying existing 
assumed succeeds 
map operations lifted bindings component heaps 
tolmach antoy newtype heap heap instance monad return return instance monadplus mzero mzero mplus mplus fresh fresh return store store return fetch fetch return run heap run function heap heap fig 

evaluation monad 
picks returns fresh heap pointer 
evaluation progresses heap grow form garbage collection 
don perform environment trimming easy add :10.1.1.50.4314
evaluation function returns monadic computation value turn uses answer monad monads allows keep code eval simple supporting increasingly sophisticated semantic domains 
initial definition 
note essentially just function type represent computations heaps 
current heap passed function argument possibly updated copy returned part function result 
usual bind operations represent sequencing computations return injects value monad changing heap mzero represents failed evaluation mplus represents alternative evaluations section 
monad specific operations include fresh returns fresh heap location fetch returns value bound pointer assumed valid current heap store extends updates current heap binding 
function run executes computation starting empty heap 
type monad representing answers 
note uses bind return mzero mplus bodies functions defined monad operators recursive calls monad operators 
section equate exception monad introduce newtype wrapper data constructor instance monad class allows haskell notation sequences bind operations 
tolmach antoy instance monad instance monadplus just mzero return just fig 

type monad 
answer just pair hnf value heap representing failure failure occurs required arm missing non exhaustive case expression attempt fetch black heap location 
gets instance definitions return mzero standard library 
note propagates failure 
machinery place actual eval function quite short 
evaluation expressions hnf trivial constructor applications argument expression allocated separate thunk shared 
evaluation applications simple 
assuming program typed operator expression evaluate abstraction 
argument expression allocated thunk bound formal parameter abstraction body abstraction evaluated resulting environment 
letrec bindings just result thunk allocations right hand sides 
bindings properly recursive thunks share environment bound variables added 
key memoization step required call need occurs evaluating var expression 
typed program variable domain current environment 
corresponding heap entry fetched hnf simply returned 
thunk recursively evaluated hnf resulting value written thunk returned 
case expression evaluated recursively evaluating expression cased hnf 
typed program type case patterns 
constructor matches patterns pattern variables bound corresponding operands represented heap pointers corresponding right hand side evaluated resulting environment 
pattern matches evaluation fails indicated returning mzero 
evaluate primitive application arguments evaluated hnf left right order resulting values passed auxiliary function defines behavior primitive operator 
interpret program expression define interp exp value heap interp run eval executes monadic computation produced evaluating program empty initial environment 
interested head con tolmach antoy eval env exp value eval env int return vint eval env abs return env eval env es ps mapm const fresh es store ps map env es return ps eval env app env eval env fresh store env eval env eval env letrec xes xs es unzip xes ps mapm const fresh xes env foldl env zip xs ps store ps map env es eval env eval env var env fetch case env store eval env store return return mzero eval env case pes ps eval env mzero xs pes return xs pes xs pes env foldl env zip xs ps eval env eval env eval env eval env return fig 

call need eval function 
tolmach antoy prim value value value eq vint vint true false add vint vint vint xor true true false xor true false true 
fig 

auxiliary function 
result value project value component ignore heap 
non determinism logic variables narrowing revise extend interpreter incorporate key logic programming features curry 
record multiple possible results evaluation redefining monadic type answers 
changing implicitly changes code defining functions doesn change 
choosing monad appropriately add non deterministic features existing interpreter making changes deterministic fragment hidden plumbing bind operation take care threading multiple alternatives 
deterministic choices injected monad return non deterministic choice represented mplus failure non deterministic alternative represented mzero 
definition addressed section 
logic variables narrowing show add logic variables narrowing language interpreter 
requires surprisingly little additional machinery shown 
add new expression form logic declare scoped logic variables curry expression free encoded logic 
add corresponding hnf essentially heap 
logic declarations evaluated allocating fresh heap location initially set contain binding logic variable location executing body resulting environment 
consider handle values eval function 
important change case cased expression bound value evaluator performs narrowing 
temporarily assume cases flexible done considering provided case arm turn 
pattern constructor argument parameters 
xn evaluator allocates fresh logic variable 
pn overwrites cased logic variable heap tolmach antoy lift lift data exp logic var exp data value eval env var lift eval env logic eval env eval env case pes eval env case ps 
foldr mplus mzero map pes xs ps mapm const xs store ps env foldl env zip xs ps eval env eval env eval env eval env return fresh store return value mzero return fig 

evaluating logic features 
tolmach antoy 
pn extends environment bindings xi pi recursively evaluates corresponding case arm environment 
resulting monadic computations combined mplus place mplus interpreter sole source non determinism 
note possible non deterministic operators encoded case mccarthy amb operator usually called curry encoded amb logic dummy case var dummy adding non determinism sharing semantics call need evaluation observable example consider definitions coin letrec amb int int add var var coin add amb int int amb int int coin evaluates coin evaluates 
need small change eval code adding calls guard appearance value operand position case eval return mzero 
note possibility failure left right evaluation semantics observed 
example evaluation logic xor var case var true false fails succeed true order arguments reversed 
characteristic may undesirable consider alternatives section 
important component curry strict equational unification operator specify constraints 
capture behavior operator case 
example shows type specific instances operator 
similar instances generated statically uniform data types ch 
involving just constructors separate mechanism needed handle primitive types non uniform data types 
admittedly encodings efficient unifying logic variable term creates copy term 
applying recursive operator logic variables produces infinite set answers semantically acceptable provided handle non determinism fairly section wasteful 
efficient approach treat new kind core language expression implementation test value logic variable perform direct unification variables 
adding sup tolmach antoy case true case true success false case false success letrec ebl abs abs case var nil case var nil success cons case var cons case var var success app app var ebl var var app app var ebl fig 

instances booleans lists booleans 
operator returns success unification succeeds fails 
port features noticeably complicate interpreter introducing chains pointers heap noteworthy essential obtaining desired semantics cases 
monads non determinism remains define type way record multiple nondeterministic answers 
standard choice monad purpose lists 
scheme non deterministic choice value represented list values return produces singleton list mplus concatenation applies element concatenates resulting lists elements mzero empty list 
want execute interpreter inspect answers list monad significant problem mplus operation model fair non deterministic choice 
essentially evaluating forces evaluation full spine mplus 
left alternative leads infinite computation right alternative evaluated 
example evaluating letrec amb var int var produce answer infinitely times 
represent answers lists interpreter compute roughly speaking tolmach antoy eval var mplus return vint eval var vint attempt inspect answer immediately cause recursive evaluation produces thing see part answer 
effect monad amounts performing depth search tree non deterministic choices incomplete respect intuitively expected semantics 
avoid problem adopt idea spivey hoare represent non determinism lazy forest trees values 
set type forest represent choices list mplus implemented lists trees values 
obtain values traverse trees ordering particular breadth depth traversal interp exp value heap interp bfs run eval approach relies fundamentally laziness forest structure 
non trivial tree structures built operator converts arbitrary forest singleton making trees branches single new tree 
applying value concatenating forest mplus delay point encountered breadth traversal allow argument mplus explored 
example forest answer form eval var mplus return vint forest fork eval var mplus forest leaf vint forest fork eval var leaf vint forest fork eval var leaf vint applying bfs answer produce vint head infinite result forces recursive evaluation need add new lift operator defined 
flexibility place calls lift interpreter code 
fairness sure lift infinite cycle computations interpreter 
simplest way guarantee apply lift call eval 
clear parallel evaluation answer structure behavior small step semantics 
parsimonious placement lifts example cyclic computation involve heap suffices lift evaluation var expressions shown 
tolmach antoy newtype forest forest tree data tree leaf fork forest instance monad forest return forest leaf instance monadplus forest mzero forest forest mplus forest forest forest forest forest fork forest forest forest forest ts forest concat map join ts join tree forest tree join leaf forest ts ts join fork xff fork xff treemap tree tree treemap leaf leaf treemap fork xf fork xf forest forest forest ts forest map treemap ts bfs forest bfs forest ts concat bfs ts bfs tree bfs ts combine map levels ts levels tree levels leaf levels fork forest xf bfs xf combine combine foldr merge merge merge xs ys merge xs ys merge xs xs merge ys ys fig 

monad forests useful traversal functions adapted 
residuation real curry appearance logic variable rigid position causes evaluation suspend logic variable instantiated constructor rooted expression 
residuation sense possibility concurrent computation suspended computation hope restarted 
plausible place add concurrency tolmach antoy type flex bool type concurrent bool type prim string concurrent data exp case flex exp pattern exp eval env case flex pes eval env case ps 
flex store yield 
mzero eval env concurrent concurrent conc eval env eval env eval env eval env return success success success fig 

interpreter changes support residuation 
existing core language evaluation arguments primitives 
interleavings semantics concurrency result semantically simple practically efficient number interleavings easily grow exponentially 
add residuation support core language making minor changes interpreter shown 
extend core language syntax adding boolean flag primitive operator indicating arguments evaluated concurrently 
obvious candidate evaluation mode parallel operator normally curry connect pairs constraints 
add flag case expressions distinguish flexible rigid cases 
evaluator relies significant changes underlying monad modified describe concurrent computations resumptions ch 
standard method denotational semantics 
monadic computation modeled stream partial computations 
conc operator takes streams produces computation nondeterministically realizes possible interleavings streams 
atom tolmach antoy interleaving controlled uses yield placing yield computation indicates possible interleaving point 
monadic support place approach residuation simple requires changes eval function 
attempts perform rigid case unresolved logic variable simply fail just strict contexts 
arguments concurrent primitives evaluated conc operator possible evaluation sequences resolve logic variable cased sequences tried potentially sequences lead failure 
approach permit interleaving possible causal interactions argument evaluation sequences captured 
brute force approach yield recursive call eval 
logic variable heap locations updated store operation interpreter code flexible case expressions suffices yield store 
illustrate interleaving works define canonical code sequences reading writing logic variables wr case true var true rd case false var true wr writes true logic variable assumed set continues evaluating expression conversely rd attempts read contents logic variable assumed contain true successful continues evaluating fails 
consider expression logic logic true rd wr success wr rd success application concurrent primitive causes evaluation argument expressions interleaved 
wr induces yield immediately store variable possible interleavings shown columns 
third fail point marked second succeeds 
execution left arg right arg left arg right arg left arg right arg order rd wr wr wr rd rd wr wr rd rd rd wr essential black holing described section providing different kind atomicity thunk evaluations interleavings cause thunk heap location updated twice different values 
tolmach antoy note perfectly possible label ordinary primitives add xor concurrent 
result independent argument evaluation order removing drawbacks noted narrowing semantics section 
fact hard see concurrency achieve order independence 
words making primitive applications independent argument order easier adding residuation 
remains describe implementation resumptions entirely monad revised shown 
computation returns states done producing value running carrying new computation describing remainder original computation 
case computation returns updated heap 
simple computations primitive fresh store fetch operations just return done states 
computations returning running states generated yield operator 
conc operator non deterministically tries orders evaluating arguments stage partial computation 
support non determinism monad change 
proof version obeys monad laws 
simple executable semantics core curry 
full code interpreter versions described available www cs edu apt curry monads 
structure semantics sheds light basic components language interact 
particular see addition non determinism logic variables narrowing accomplished just making suitable shift interpretation monad 
emphasize modularity presenting relevant monads compositions monad transformers 
extend existing transformers structure interpreter simple logic programming language 
number important curry features missing account 
mentioned need efficient implementation operator direct variable variable unification 
curry includes encapsulated search facility reflects multiple results nested non deterministic computation back language list unclear achieve framework 
think semantics attractive right obviously useful give formal characterization relationship various existing semantics curry attempted 
additional plan pursue systematic transformation semantics small step form suitable basis realistic interpreters compilers 
tolmach antoy data state done running newtype heap state heap instance monad case done running return running return return done instance monadplus mzero mzero mplus mplus fresh fresh return done store fetch modified similarly yield yield return running run heap run run run heap heap run case done return running run conc conc thn mplus liftm swap thn thn thn case done return running return running conc swap swap fig 

monad changes supporting residuation 
tolmach antoy albert hanus huch oliver vidal operational semantics functional logic languages electronic notes theoretical computer science 
antoy definitional trees proc 
rd international conference algebraic logic programming alp pp 

claessen typed logical variables haskell electronic notes theoretical computer science 
hanus editor curry integrated functional logic language available www informatik uni kiel de mh curry 
hanus unified computation model declarative programming proc 
joint conference declarative programming pp 

hanus unified computation model functional logic programming proc 
popl st acm symp 
principles programming languages pp 

hinze features functional setting axioms implementations sato toyama editors third fuji international symp 
functional logic programming flops pp 

jones tail recursion space leaks journal functional programming pp 

ez del specification logic programming languages reusable semantic building blocks proc 
international workshop functional constraint logic programming 
landin mechanical evaluation expressions computer pp 

launchbury natural semantics lazy evaluation proc 
popl th annual acm symp 
principles programming languages pp 

liang hudak jones monad transformers modular interpreters proc 
nd acm symp 
principles programming languages pp 

mccarthy basis mathematical theory computations hirschberg editors computer programming formal systems north holland pp 

okasaki purely functional data structures cambridge university press 
tolmach antoy resumption monad transformer applications semantics concurrency proc 
rd logic symposium 
schmidt denotational semantics methodology language development allyn bacon 
spivey hoare algebra logic programming proc 
international conference logic programming iclp pp 

sestoft deriving lazy machine journal functional programming pp :10.1.1.50.4314

wadler essence functional programming proc 
popl nineteenth annual acm symp 
principles programming languages pp 


