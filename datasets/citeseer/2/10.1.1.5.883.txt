unu iist international institute software technology unu iist report integrating temporal logics chen zhiming liu february unu iist unu iist reports unu iist united nations university international institute software technology research training centre united nations university unu 
macau founded 
started operations july 
unu iist jointly funded governor macau governments people republic china portugal contribution unu fund 
providing thirds fund macau authorities supply unu iist office premises furniture fellow accommodation 
mission unu iist assist developing countries application development software technology 
unu iist contributes programmatic activities 
advanced development projects software techniques supported tools applied 
research projects new techniques software development investigated 
curriculum development projects courses software technology universities developing countries developed 
university development projects complement curriculum development projects aiming strengthen aspects computer science teaching universities developing countries 
schools courses typically teach advanced software development techniques 
events conferences workshops organised supported unu iist 
dissemination unu iist regularly distributes developing countries information international progress software technology 
fellows young scientists engineers developing countries invited actively participate projects 
doing projects trained 
technical focus unu iist formal methods software development 
unu iist internationally recognised center area formal methods 
software technique universally applicable 
prepared choose complementary techniques projects necessary 
unu iist produces report series 
reports research technical administrative records unu iist activities research development achievements 
reports published conference proceedings journals 
please write unu iist box macau visit unu iist home page www iist unu edu know unu iist report series 
armando director unu iist international institute software technology box macau integrating temporal logics chen zhiming liu study predicative semantics different temporal logics relationships 
notation called generic composition simplify manipulation predicates 
modalities possibility necessity generic composition inverse converse respectively 
relationships different temporal logics characterised modalities 
formal reasoning carried level predicative semantics supported higher level laws generic composition inverse 
various temporal domains unified notion called resource cumulation 
temporal logics temporal domains readily defined axioms identified 
formalism provides framework human experience system development formalised refinement laws 
approach demonstrated transformation duration calculus temporal logic actions 
number common design patterns studied 
refinement laws identified applied case study water pump controlling 
published proceedings ifm lecture notes computer science april kent uk 
chen lecturer department computer science university leicester 
research interest includes logics computer science programming specification language designs formal specification verification 
mail yc mcs le ac uk 
zhiming liu research fellow unu iist leave department computer science university england lecture computer science 
research interests include theory computing systems including sound methods specification verification refinement faulttolerant real time concurrent systems formal techniques oo development 
teaching interests communication concurrency concurrent distributed programming internet security software engineering formal specification design computer systems 
mail liu iis unu edu 
copyright unu iist chen zhiming liu contents contents predicative semantics modal logics temporal logic resource cumulation examples temporal logics linking temporal logics case study water pump controlling report february unu iist box macau propositional modal logic consists pair operators describing possibility necessity addition propositional logic 
collection axioms determines axiomatic system 
temporal logics special modal logics additional axioms axiom transitivity 
traditional studies tend focus theoretical properties individual axiomatic systems single pair pairs modalities 
increasingly inadequate sophisticated applications emerged years 
important application area development hybrid systems 
hybrid system consists continuous components observe continuous physical laws discrete components execute digital instructions 
hybrid systems inevitably involve time naturally specified temporal logics 
different temporal logics tend emphasise different aspects hybrid system 
example interval logics duration calculus dc emphasising properties interval suitable describing high level continuous properties closer continuous aspects hybrid systems 
hand linear temporal logics ltl emphasising properties states discrete time points suitable modelling discrete aspects hybrid systems easily verified timed automata 
straightforward specification logic may intuitive logic 
past aspects hybrid system normally specified logic 
traditional method combining logics collect syntactical constructs identify axioms system 
usually results complicated axiomatic system difficult handle 
example design hybrid system may start specification requirements dc refined concrete ltl specification describes system behaviour implementation 
existing design techniques support refinement 
natural solution interpret different logics common semantic level relationships logics systematically studied 
predicative interpretation standard technique modal logic 
proposition modal operators interpreted predicate 
modality possibility necessity represented existential universal quantifier 
predicates semantic modelling programming languages 
approach known predicative semantics 
program represented predicate 
combinators programs operators predicates 
interpret modal temporal logics predicative semantics reason relationships level 
predicative semantics observation 
predicate interpreted set possible observations observables logical variables 
common combinators relational observation semantics distribute universal disjunction 
order manipulate predicates operators flexibly higher level abstraction notation called generic composition 
generic composition relational composition designated interface consisting logical variables 
specification real applications may involve complicated constraints temporal logics 
temporal logic emphasises particular observable aspect system 
generic composition restricted interface convenient simple relational composition 
generic composition inverse operator 
help operators longer need existential universal quantifiers 
modality possibility generic composition modality necessity inverse converse 
modality defined combination generic composition inverse 
temporal logics characterised algebraically galois connections 
approach accessibility relation modal logics directly parameterised 
possible study logics report february unu iist box macau predicative semantics modal logics different temporal domains semantic framework 
link specifications different temporal logics characterised pointwise relation possible observations specifications 
pointwise relation determines pair modalities defined generic composition inverse 
purpose unification model different temporal domains real time traces timed traces forests branching time intervals notion called resource cumulator 
cumulator quintuple compromising monoid corresponding partial order volume function measures amount resources 
cumulator provides type logical variable particular temporal domain 
integration different temporal logics useful provide knowledge specifications logic approximated refined specifications logic 
knowledge formalised refinement laws modalities 
identifying laws design process systematic 
demonstrate studying refinement dc specifications tla implementations 
explained dc natural describing high level duration properties continuous part hybrid system 
olderog studied direct refinement transformation dc language similar csp 
gap dc tla specifications smaller dc real programming language approach yields stronger algebraic properties 
result tla implementations verified model checking tools 
section studies predicative semantics modal logic notation generic composition inverse 
section unifies different temporal domains notion resource cumulator defines predicative semantics temporal logic general 
section discusses known temporal logics 
relationships studied section 
refinement laws identified section applied case study section 
predicative semantics modal logics manipulating predicates assume types logical variables non variables variables associate corresponding logical variables syntactically 
notation called generic composition manipulate predicates 
generic composition relational composition designated interface non variables 
def fresh variable connect hidden existential quantifier 
generic composition restricted form relational composition 
relates predicates logical variables 
example composition relates predicates 
report february unu iist box macau predicative semantics modal logics existential quantifier simply represented true variable substitution interface may split variables 
example generic composition true predicate vector empty generic composition conjunction generic composition inverse operator denoted weakest predicate defined galois connection def iff predicate generic composition inverse satisfy property converse variable universal quantifier written true negation false interface empty 
implication empty interface 
disjunction trivial combination negation implication 
connectives substitution quantifiers special cases generic composition inverse 
theorem generic composition inverse complete sense predicate contain free variables written terms generic composition inverse constant predicates predicate letters 
theorem shows expressiveness generic composition predicate manipulation 
generic composition inverse form galois connection satisfy algebraic laws strictness distributivity associativity 
law false false true true notation especially useful interfaces operators predicate identical 
laws assume different logical variables independence variable independence variable 
law report february unu iist box macau predicative semantics modal logics generic composition inverse define modalities 
properties composition useful technical tool linking temporal logics 
generic composition applied define variety conditions parallel compositions 
laws series laws 
interpreting modalities kripke semantics modal logics logical systems relations called accessibility relations 
represent specification predicate modal variable auxiliary variable 
modal variable records observable aspect related accessibility modalities auxiliary variable records unrelated observable aspect 
variables left untyped 
logical variables typed temporal logics 
logical variable may split ones type product types 
semantic space set specifications denoted 
accessibility relation denoted predicate variables modal variable modal variable variables appear accessibility relations 
accessibility relation determines pair modalities 
def ap operator informally means predicate may true defined generic composition specification converse relation dual modality ap informally means predicate true defined inverse operator 
replace accessibility relation converse obtain pair converse modalities 
def generic composition inverse regarded parameterised modal operators 
designated interface convenient traditional relational composition context reasons 
firstly aspects described auxiliary variable unrelated accessibility relation excluded interface relational composition 
secondly predicate left hand side generic composition inverse specification variables accessibility relation variables 
operators directly represent composition accessibility relations composition modalities 
converse inverse relationships modalities illustrated diagram see 
modalities form galois connections 
law iff iff important modal operator 
ua informally means may true hold happening 
report february unu iist box macau predicative semantics modal logics inverse converse converse ap diagram converse inverse relationships def ua assume accessibility relation transitive variable fresh free naming conflict 
transformer modalities transformation temporal logics modalities 
semantic space specifications predicate modal variable auxiliary variable 
transformation characterised transformation predicate variables 
predicate determines transformer modality corresponding inverse transformer definition assume def note form just pair transformers predicate transformers logics denoted transformers 
composition transformer composition inverses 
identify laws case studies 
laws routinely proved 
transformer inverse form galois connection satisfies laws 
law iff transformer predicate determined possibly partial surjective functions modalities form galois embedding transformer distributes conjunction 
report february unu iist box macau temporal logic resource cumulation law accessibility relations satisfy additional condition monotonicity ra transformer modalities necessity commutative 
law modal variable auxiliary variable untyped predicative semantics contained predicate calculus complete sense formed formula true proved laws generic composition inverse equivalently axioms predicate calculus 
temporal logic resource cumulation resource cumulation aspects computing modelled cumulation resources 
real time computing time kind resource 
process consumes non negative amount time 
computation may produce resources 
example reactive process generates increasingly longer sequence intermediate states called trace 
resource cumulation formalized quintuple called cumulator consists parts founded partial order element called cumulation greatest lower bound exists non empty subset monoid zero cumulation cumulation monotonic associative binary operation concatenation corresponds addition monotonic strict volume function assume partial order monoid consistent unusual part cumulator volume function 
volume function measures amount resource cumulated 
additional information reason dynamics resource cumulation 
example resource exhausted volume reaches infinity volume functions substantially simplify reasoning limit points continuity topological properties 
complete account resource cumulation please refer 
example amount time computation consumes modelled cumulator id addition 
id identity function 
example applications interested temporal properties period time need reason temporal intervals 
intervals form cumulator interval report february unu iist box macau temporal logic resource cumulation denotes set intervals convex subset real domain implies 
example empty set intervals 
denote set intervals 
volume non empty interval length denote lub glb interval respectively 
volume empty set zero orders means right hand extension example finite infinite traces form typical cumulator trace type element set sequences elements including infinite ones 
sequences denotes concatenation 
infinite sequence iff prefix pre cumulation denotes length length empty sequence 
denotes th element sequence example timed trace trace non decreasing time stamps 
sequence example 
general timed trace trace pairs form timed traces form cumulator tr tr example forest set labeled traces tuple consisting trace start label label 
labeled traces connected label equals start label forests form cumulator forest set forests set elements set labels 
concatenation forests pointwise concatenations connected traces labeled traces 
partial order derived concatenation operation 
height forest maximum length labeled traces 
height empty forest 
temporal logic resource cumulation temporal logic resource cumulation modal logic 
cumulator 
general cumulative specification predicate modal variable type cumulator untyped auxiliary variable denote semantic space specifications 
general cumulator report february unu iist box macau examples temporal logics gives rise number accessibility relations determines pairs modalities 
common accessibility relation corresponds left hand contractions modality informally means predicate true pre cumulation resources 
precisely behaviours behaviours extended arbitrary left hand side 
modality rp means predicate true left hand extensions behaviours pair converse modalities corresponding past tense modalities 
properties general modalities inherited 
exists dual accessibility relation right hand contractions determines pairs modalities modalities left hand right hand extensions contractions commute respectively 
respective compositions bi directional contractions extensions 
volume function define variety restricted modalities 
condition real numbers 
condition simple example 
restricted left hand contraction relation defined shall denote modality accessibility relation similar modalities 
informally means predicate eventually true pre cumulation resources volume satisfies condition 
example specification means predicate eventually true steps 
operator commonly temporal operator ltl means predicate eventually true finite steps 
dual operator means predicate true finite steps 
correspond respectively cumulator trace 
general temporal logic resource cumulation complete temporal domain cumulator modal variable may complete axiomatic characterisation 
possible reason temporal specifications manually semantic properties underlying temporal domain 
examples temporal logics real time amount time computation consumes corresponds cumulator real time specification predicate typed modal variable denotes time untyped auxiliary variable report february unu iist box macau examples temporal logics denotes system state time 
denote space specifications 
addition commutative difference time extended left hand side right hand side 
state variable specify various interesting things 
example device temperature grows exponentially time specified predicate different interpretations specification may interpret absolute time point corresponding temperature alternatively may treat lapse time state associated time lapse 
real time logic concrete distinguish interpretations 
real time intervals intervals time domain form cumulator interval specification intervals predicate variable denotes interval auxiliary variable denotes system feature related interval 
denote space temporal specifications intervals 
interval extended left hand side right hand side 
traces timed traces branching time traces elements form cumulator trace trace specification predicate single variable tr denote space trace specifications 
example specification tr states element suffix state 
introduce dependent variable tr specification simplified semantic notation directly corresponds ltl non standard notation allow finite traces 
dependent variable tr denote second element trace specify actions 
example set natural numbers 
specification describes trace increasing numbers 
temporal logic actions tla logic stuttering closed specifications actions 
stuttering closure specification disjunction 
example specification describes trace non decreasing natural numbers 
link original variables dependent variables characterized transformer 
example specification current state state corresponds specification tr tr traces 
timed traces form cumulator denote space specifications timed traces 
tla timed traces introduce dependent variables assume stuttering closure defined example specification requires state change seconds seconds 
forests form cumulator forest temporal logic forests logic branching time 
similar ltl normally finitely restricted modalities describe safety liveness properties report february unu iist box macau linking temporal logics branches 
hand volume function minimum length labeled traces forest infinite branches reaches infinity 
obtain modalities safety liveness properties branches 
duration calculus duration calculus dc special interval logic 
duration specification predicate variable denotes interval auxiliary variable denotes real time boolean function 
space duration specifications denoted may introduce dependent variables 
example specifying relation predicate interval real time function may specify relation length interval integral real function interval 
computation specified restricted way expressive applications covers common design patterns 
shall denote length interval dt denote integral function interval 
example gas burner problem includes requirement gas leak bounded interval shorter 
formalised specification dependent variables 
concrete dc specifications form common design implements specification real time function records gas leak time point specification describes period gas leak time points period describes period leak 
specification requires leaking period bounded seconds second specification states interval period non leak periods leak seconds 
sequential composition known chop operation pointwise concatenation intervals specifications linking temporal logics examples section showed different temporal logics describing different aspects system different levels abstraction 
requirement naturally specified dc 
report february unu iist box macau linking temporal logics dc design described controller switching particular time points state remains unchanged consecutive time points 
controlling described dc essentially equivalent tla specification arguably intuitive 
challenge link theoretical framework implementation tla obtained specification dc refinement laws 
laws formal representation experience development hybrid systems 
real time real time intervals section identified distinct informal interpretations real time specification 
turns correspond different transformers real time specification absolute time points transformed interval specification left ends intervals 
transformers satisfy laws 
def 
example specification absolute time temperature transformed interval specification independent right interval informally means temperature grows exponentially start interval 
practical systems independent absolute starting time 
example cash machine respond cash withdrawal time day timeout restrictions operation 
service depends lapse time 
specified real time logic transformed interval logic 
def 
example real time specification transformed interval specification independent absolute starting time 
specification informally means temperature grown exponentially interval 
informally different interpretations real time specifications formally distinguishable interval logic 
real time intervals duration calculus dc special kind real time interval logic 
link characterised transformer 
report february unu iist box macau linking temporal logics def dt dt represents integral accumulated interval assume may view dependent variable transformer forms embedding satisfies laws 
real time duration calculus section discussed typical pattern duration specifications predicate dependent variables 
link dependent variables original variables characterized transformer 
transformation real time specifications duration specifications composition transformation real time specifications interval specifications transformation interval specifications duration specifications 
def second interpretation real time length interval 
length interval monotonic sense law commutativity holds 
requirement gas burner section formalised 
real time boolean function satisfies specification interval integral interval length interval satisfy example corresponds general specification pattern constant parameters pattern specification requires system stay boolean state longer period longer dual pattern requires system stay state long stay state long patterns illustrated figures sets coordinates note assume monotonically nondecreasing function specification generalisation pattern report february unu iist box macau linking temporal logics basic patterns dc function sets upper bound monotonic non decreasing naturally assume longer interval upper bound allowed greater 
general pattern dual function monotonic non decreasing satisfies laws show general patterns decomposed conjunction basic patterns 
law tla duration calculus study technique refine dc specifications tla designs 
timed trace determines real time boolean function example timed trace corresponds boolean real function value time time value time state consecutive time points constant 
example dc specification implemented tla specification timed traces 
tla design arguably intuitive dc 
interpretation timed trace directly corresponds timed automata 
link timed trace tla duration calculus characterised predicate timed trace tr interval real time boolean function interval real time boolean function consistent timed trace integral function interval equal sum subintervals timed trace state tr dt def tr tr report february unu iist box macau linking temporal logics basic pattern refined law denotes refinement order high low law provides similar refinement dual pattern 
refinement laws proved algebraic laws generic composition inverse mathematical properties underlying interval trace domains 
law high low high low 
laws allow frequency switching multiply integer number times general example tla refinement 
replace integer parameter real parameter laws result refinement 
example may replace right hand side law real number parameters constant parameters 
means tla refinement describes controller runs internal timer depend input environment 
illustrates refinement basic patterns 
grey areas indicate requirements dark areas contained grey areas illustrate tla designs 
refinement basic patterns refinement general patterns refinement basic patterns see 
law high low sup law high sup low report february unu iist box macau case study water pump controlling inf refinement general patterns refinement laws restricted trace implementation input 
incorporate input information environment assume controller internal timer equipped sensor detect changes environment periodically 
reading sensor higher particular level switch turned reading lower level switch level switch 
monotonic functions regard controller periodically checks input 
non zero cycle sampling small possible bounded constant controller may able react time 
law refines specifications target system 
law functions linear determine parameters accurately 
upper bound determined assuming particular chosen ranges derived 
law case study water pump controlling demonstrate refinement laws section consider example simple water pump 
hybrid system consists water pool inflow rate imin report february unu iist box macau case study water pump controlling water pump 
water pump water drains rate imin draining caused pump 
requirement period water level drops 
assume controller sensor detect change inflow water level 
worst case constantly lowest rate imin requirement specified formally follows imin implicit bounded obtain specification chosen maximum vo imin determine sup value reaches maximum approaches left hand side 
sup imin obtained tla implementation high low law illustrated 
controlling simple water pump example generalised ways 
firstly may require water level drop certain level intervals shorter constant interval 
refine weaker requirement need revise upper bound function slightly 
secondly water level required rise certain level law refinement 
modalities distribute conjunction 
tla refinements combined conjunction compositionally 
assumed imin constant law 
inflow random fits report february unu iist box macau model average inflow imin function related interval length example minimum sin average interval 
function imin known law applicable 
generalised know relation amount water pumped length corresponding interval pumped water drains pool study water level controlling pool refinement laws 
predicative interpretation modal logics 
accessibility relation kripke semantics parameterised predicate 
introducing new pair modalities introducing new accessibility relation 
transformers modal logics modalities 
formal reasoning conducted level predicate calculus assisted higher level laws generic composition inverse 
completeness semantic interpretation relies completeness predicate calculus variables untyped 
reasoning predicative semantics typed variables depends formalisation underlying state space auxiliary variable cumulator modal variable may complete 
framework allows formalise knowledge relationships different temporal logics form algebraic refinement laws 
case study dc tla identified refinement laws design patterns 
laws general cover types refinement particular target implementation 
specific laws introduced common patterns parameters readily determined 
technique applied design water pump controlling system 
trivial task identify general time practically useful laws 
laws identified genuinely design process systematic especially determination parameters 
blackburn de rijke venema 
modal logic 
cambridge university press 
chen 
generic composition 
formal aspects computing 
chen 
cumulative computing 
th conference mathematical foundations programming semantics entcs 
elsevier 
emerson clarke 
correctness properties parallel programs fixpoints 
icalp volume lncs pages 
springer verlag 

predicative programming ii 
communications acm 
hoare 
communicating sequential processes 
prentice hall 
hoare 
unifying theories programming 
prentice hall 
lamport 
hybrid systems tla 
hybrid systems volume lncs pages 
springer verlag 
report february unu iist box macau lamport 
temporal logic actions 
acm programming languages systems 
pnueli 
temporal semantics concurrent programs 
theoretical computer science 
pnueli harel 
applications temporal logic specification real time systems 
joseph editor formal techniques real time fault tolerant systems lecture notes computer science pages 
springer verlag 
ravn rischel hansen 
specifying verifying requirements real time systems 
ieee transactions software engineering 
olderog 
transformational design real time systems part requirements program specifications 
acta informatica 

completeness correspondence second order semantics modal logic 
proceedings third scandinavian logic symposium pages 
north holland 
von karger 
calculational approach reactive systems 
science computer programming 
zhou hoare ravn 
calculus durations 
information processing letters 
zhou ravn hansen 
extended duration calculus hybrid real time systems 
grossman nerode ravn rischel editors hybrid systems lecture notes computer science pages 
springer verlag 
report february unu iist box macau 
