idi informative summarization di erences multidimensional aggregates sunita sarawagi indian institute technology bombay sunita iitb ernet multidimensional olap products provide excellent opportunity integrating mining functionality widespread acceptance decision support tool existing heavy reliance manual user driven analysis 
olap products simplistic rely heavily user intuition manually drive discovery process 
ad hoc exploration gets tedious error prone data dimensionality size increases 
goal automate manual discovery processes 
example automation idi operator single step returns summarized reasons drops increases observed aggregated level 
formulate problem summarizing di erence multidimensional arrays real numbers 
develop general framework summarization propose speci formulation case olap aggregates 
design ecient dynamic programming algorithm requires pass data uses small amount memory independent data size 
allows easy integration existing olap products 
prototype tested microsoft olap server db udb oracle 
experiments olap benchmark demonstrate scalability algorithm size dimensionality cube increases feasibility getting interactive answers modest hardware resources 
keywords multidimensional databases olap olap mining integration di erence mining data summarization advanced aggregates 
online analytical processing olap cod cd products arb sof developed help analysts decision support historic transactional data 
logically expose multidimensional view data categorical attributes products stores forming dimensions numeric attributes sales revenue forming measures cells multidimensional cube 
dimensions usually associated hierarchies specify aggregation levels 
instance store name city state hierarchy store dimension upc code type category hierarchy product dimension 
measure attributes aggregated various levels detail combination dimension attributes functions sum average max min count variance 
exploring multidimensional data cube abridged version appeared sar navigational operators select drill roll pivot conforming multidimensional view data 
past ort spent simple operations user interactively invoke sequences operations 
typical analysis sequence proceeds follows user starts aggregated level inspects entries visually aided graphical tools selects subsets inspect intuitive hypothesis needs drills detail inspects entries rolls detailed view drills 
form manual exploration get tedious error prone large datasets commonly appear real life 
instance typical olap dataset dimensions average levels hierarchy dimension aggregates rows cou 
analyst potentially overlook signi cant discoveries due heavy reliance intuition visual inspection 
part continued olap stage interactive analysis automate manual ort spent analysis 
mining technology play tting role improving state products 
huge size data rich star structure dimensions hierarchies possible integrate mining tools useful innovative ways 
existing tools classi cation clustering association rules time series analysis starting deployed albeit sparingly ida tho han ger dbm 
direction attempt enhance olap products known mining primitives 
instance information discovery dis cor white papers discuss classi ers understand factors ecting measures pro pro gures divided xed number categories low medium high classi ed function attributes dimensions hierarchies information associated dimensions 
similarly clustering useful applications olap domain 
corporate data cubes individual customer names lead high sparsity 
normally customer names aggregated higher level customer location 
customer location little buying patterns customers 
meaningful hierarchies de ned applying hierarchical clustering algorithm customers buying patterns attributes associated customer 
han hf discuss association rules multiple levels aggregation nd progressively detailed correlation members dimension 
time critical dimension olap data cubes time series analysis methods directly relevant 
vendors support querying patterns spikes gradients periodicity outliers time 
olap products provide support traditional time series analysis functions forecasting 
cases approach take existing mining algorithms integrate olap products 
approach di erent rst investigate analysts currently explore data cube automate new previously known operators 
batch processing existing mining algorithms wish enable interactive invocation analyst seamlessly existing simple operations 
developing suite operators context eye cube project ss 
idi operator described 
goal operator automate area analysts spend signi cant manual ort exploring data exploring reasons certain aggregated quantity lower higher cell compared 
example busy executive looking annual sales reports quickly wish nd main reasons sales dropped third fourth quarter region 
digging heaps data manually invoke new idi operator single step digging return main reasons compact form easily assimilate 
product platform geography year product name platform name geography year prod category plat type prod group plat user dimensions hierarchies software revenue data 
number brackets indicate size level dimension 
platform product sum revenue year geography asia pacific rest world united states western europe total revenue geography year 
boxes dark boundaries rest world year indicate values compared 
explore techniques de ning answer form queries algorithms eciently answering ad hoc setting system issue integrating capability existing olap products 
contents rst demonstrate new idi operator real life dataset 
section discuss ways formulating answers 
section algorithms eciently nding best answer formulation 
section describe system architecture experimental results 
illustration consider dataset shown dimensions product platform geography time level hierarchy product platform dimension 
real life dataset obtained international data idc cor total yearly revenue millions dollars di erent software products 
dataset running example 
suppose user exploring cube geography year plane shown 
notices steady increase revenue cases going rest world 
existing tools user nd reason drop manually drilling numerous di erent planes underneath inspecting entries big drops drilling 
process get tedious especially typically larger real life datasets 
propose new operator nding answer question step 
user simply highlights cells invokes idi operator 
result shown list rows number con gurable user concisely explain reasons drop 
gure rst row shows discounting rows explicitly mentioned product plat year year ratio error operating systems multi operating systems multi multiuser mainframe ibm operating systems single wn middleware oth multiuser mainframe ibm eda multi unix 
eda single unix 
eda single wn reasons drop revenue marked 
geography plat user prod group soln sum revenue year prod category cross ind apps home software apps vertical apps total revenue di erent categories product group soln 
comparing revenues year product category vertical apps 
indicated symbol revenue increased 
rows rows second fth identify entries largely responsible large drop 
instance operating systems multiuser mainframe ibm revenue decreased factor reduction operating systems platforms type wn total revenue dropped 
rows show cases revenue showed signi cantly increase indicated rst row 
role ratio error columns explained section 
similarly user interested exploring reasons sudden increases 
show total revenue di erent categories product group soln 
user wants understand reason sudden increase revenue vertical apps factor increase 
answer invoke idi operator doing multiple drill downs selection steps huge amount product type platform year year ratio error manufacturing process vertical apps vertical apps united states unix 
vertical apps western 
manufacturing discrete health care health care united states multiuser mainframe ibm banking finance united states 
mechanical cad united states reasons increase revenue marked 
product geography platform year year ratio vertical apps western europe multiuser vertical apps asia pacific single user mac os vertical apps rest world multiuser mainframe ibm vertical apps western europe single user unix vertical apps united states multiuser vertical apps united states multiuser os vertical apps asia pacific multiuser os eda western europe multiuser unix manufacturing states multiuser mainframe ibm health care united states multiuser top rows approach 
detailed data 
result set rows shown 
rst row answer understand revenue increased modest discounting rows underneath 
set rows indicate main increase due product categories manufacturing process vertical apps manufacturing discrete health care various platforms 
rows indicate cases drop signi cant compared increase indicated rst row 
form answers helps user quickly grasp major ndings detail data simply glancing rows returned 
problem formulation section discuss di erent formulations summarizing answer observed difference 
user poses question pointing aggregated quantities data cube wishes know greater smaller 
formed aggregating values dimensions 
denote subcubes formed expanding common aggregated dimensions example denotes revenue cell platforms products rest world denotes total revenue cell platforms products rest world denotes dimensional subcube dimension platform product year geography rest world denotes dimensional subcube set dimensions year geography rest world 
example cells di er dimension 
equally handle cases cells di er dimension long common dimensions cells aggregated 
answer consists set rows best explains observed increase decrease aggregated level simple approach show large changes detailed data sorted magnitude change approach 
obvious problem simple solution user left large number entries eye ball 
show rst rows obtained method di erence query 
approach explains total di erence 
contrast answer explain total di erence 
compaction achieved summarizing rows similar changes 
row detailed level rest summarized levels 
aggregating platforms geography similar change product manufacturing process geography sum revenue year plat type unix unix wn wn summarizing rows similar change 
compact representation change obtained 
instance show details di erent platforms second row answer manufacturing process 
notice di erent platform types show similar exact increase going 
listing separately answer list common parent rows 
parent ratio shown ratio column figures assumed hold children 
error incurred making assumption indicated column gures 
experiments error calculated square root sum squares error detailed row 
notice cases quantity small percent absolute di erence values compared 
model imagine sender wishing transmit subcube user receiver knows subcube sender transmit entire subcube highly redundant expect strong correlation values corresponding cells ecient method send compact summary di erence cells similar changes grouped 
methods summarization arising di erent choices grouping criteria error measures group format objective function 
grouping criteria determines measure commonality relationship corresponding values respectively 
instance summarize cells having absolute di erence having ratio 
collection cells having value relationship function grouped represented single summarized unit 
closely related issue error function determines error incurred reconstructing summarized answer 
instance ratio characterize relationship cells error function cells ratio slightly di erent ratio group 
grouping format determines subset cells considering grouping 
grouping arbitrary collection cells easy interpret computationally feasible 
objective function characterize best solution 
example objective functions minimize total error xed limit size summary minimize summary size limit maximum error 
elaborate options chosen method 
grouping criteria grouping criteria determines measure similarity relationship corresponding values cubes determined external intuition expect values related 
instance refer sales respectively di erent products expect sales di erent products related 
olap datasets ratio better choice di erence 
di erent products percentage di erence absolute di erence 
nal answer group cells associated ratio value best characterizes members group 
error function measures error due summarization gap actual value cube cb expected value derived summary statistic group value cube ca example error functions squared di erence absolute di erence chi squared error log likelihood kl distance 
choosing function need sure changes signi cant contribute large amounts total get higher error ratio cells slightly di erent ratios easily summarized 
instance row changes second change considered interesting ratio change 
simply looking magnitude large numbers slightly di erent ratios large di erence possible summarize enable inclusion changes slightly smaller magnitude larger ratios 
olap data ratio group cells expected value cell cube cb rv measure error err actual value expected value rv follows err rv log rv ratio actual expected values function gives higher larger di erences absolute di erence function gives high larger ratio 
magnitude ratio change important 
notice error positive value 
commonly squared absolute error suitable 
functions give high large numbers smaller ratio larger number appeared surprising larger ratio smaller number 
tended pick large outliers detailed level reasons 
general formulation allows user de ned error function computationally ecient incrementally computable 
incremental computability requires set cells able compute small number aggregate functions value group ratio calculate sum errors tuples 
example chosen error function equation rewrite follows rv log rv log log rv log rv log aggregating tuples compute sums log va log va compute total error log log similar decompositions possible square error function 
error functions distance de ned jv rv incrementally computable 
missing values important issue de ning error functions missing values handled 
cells empty subcube vice versa 
example cubes products sold discontinued 
datasets considered missing values occurred abundance important handle 
option treat missing value small constant close zero 
trick choose value constant 
choosing small replacement missing values imply large ratio small magnitude numbers reported interesting 
rows missing values di erent values di erent ratios 
instance product newly introduced platforms missing value 
replacing value constant get di erent ratios di erent platforms easily summarize single row 
better solution replace missing values constant fraction value missing replace vice versa 
main issue picking right ratio 
large ratio cause small values appear surprising 
set arbitrarily large value 
danger setting moderately large value data ratios values larger looking data really hard pick absolute value cases 
handle missing values special manner 
summarizing rows missing values missing values assume ideal summarization assign cost due error 
case trying group tuples missing missing rest missing values 
treat kind separately summing total error 
assume group ratio 
error rst kind value missing calculated assuming fraction va max ensures ratio due missing value greater maximum ratio group 
error second kind value missing calculated assuming fraction va min 
ensures ratio due missing value greater group ratio 
left having choose danger bad choice signi cantly reduced 
group format issue subset cells considered grouping 
wanted choose representation easy user interpret 
grouping arbitrary subset members dimension meaningful dimension normally categorical 
cases dimensions hierarchies yields natural boundaries grouping 
group represented dimension single value level hierarchy 
answer consists collection groups 
groups overlapping cell binding detailed group answer 
instance third row denoting tuples product name vertical apps overlaps tuples product name united states geography unix platform 
tuples belonging second group implicitly removed rst group 
alternatives groupings 
instance set groups answer transmitted user user limit number tuples second aggregated quantity pointed user subcubes formed expanding common dimensions global ratio observed user tuple subcube measure part tuple subcube err error tuple measures expected ratio err error tuple measures expected ratio err table notations output tree tuples similar ratios grouped tree node 
problem approach tree attempts describe entire data pick key summaries approach 
causes description length increase 
objective function allow choice di erent objective functions 
rst case user speci es xed limit number rows nal answer objective minimize total error 
di erent answers total error smaller answer chosen 
second case user speci es xed limit max error cell objective nd smallest possible answer meets limit cell 
answers size smallest total error chosen 
formulations example ones automatically try choose right value mdl ish ct formulation possible 
attempts automatic choice parameters failed appear principled way measure smallest possible description length answer 
interesting formulations earlier section general framework reporting di erence aggregated values discussed speci formulation chose 
section discuss general framework answer interesting query forms 
common scenarios sided errors user interested seeing rows signi cant increase top level row increase similarly rows signi cant drop toplevel row drop 
time row opposite change reported intermediate parent top level answer 
capture requirement modifying error function value sign change opposite topmost parent intermediate parents row 

call sided error functions 
error function incrementally computable de nition may immediately apparent 
error detailed tuple depends intermediate parent tuple included 
need maintain aggregates addition equation 
maintain set sums exactly rst add tuples sign change toplevel parents 
enables general algorithm discussed section depends incremental computability error function 
non additive aggregate functions discussion far underlying assumption aggregate function tuples aggregated sum single measure example total sales total volume 
quantity displayed percentage increase sales percentage pro average sales assumption true 
fact ratio additive aggregate functions 
discuss composite aggregate functions transformed formulation scenarios percent increase sales product higher product year 
direct approach treat subcube percent increases product subcube percentage increases product approach percent increase detailed levels added aggregate higher levels error functions de ned equation fails give higher larger contributors di erences aggregate levels 
transformation works 
identify subcubes subcubes product product year 
assume user knows rst subcubes 
accordingly user expects unknown cells subcube product year increased percent product answer corrects error making assumption 
subcube sales product year scaled percentage increase product subcube sales product year 
pro percent region higher region 
answering query comparing directly pro percents additive identify constitute additive aggregates sales cost price 
transform cube de ne subcube expected sales region derived costs region pro ts region de ne subcube actual sales region algorithm finding ecient algorithm problem challenging wish operator interactively impossible exhaustively solve advance possible pair cells user possibly ask 
allow easy integration existing olap engines want special purpose storage structures indices 
algorithms objective functions discussed section minimizing total error xed answer size minimizing answer size limit maximum error tuples 
minimizing total error xed answer size sar showed top greedy methods sub optimal 
elaborate nal algorithm dynamic programming optimal certain conditions better greedy algorithm terms performance quality answer 
algorithm stages ease exposition 
discuss case single dimension hierarchies 
introduce hierarchies dimension nally extend general case multiple dimensions hierarchies 
single dimension hierarchies case subcube consists dimensional array real values 
basic premise dynamic programming formulation decompose set tuples subsets nd optimal solution separately combine get nal answer full set denote total cost number bits tuples answer size nal ratio top row min property enables design bottom algorithm 
jc denote tuples corresponding cells joined get measures scan tuples jc detailed level sequentially maintaining best solution slots assume magically know best value denote rst tuples scanned far 
new th tuple scanned update solution slots equation solution slot rst th tuples updated min cost function section err refer notation table 
best value simultaneously solving di erent guesses re ning guesses progress 
start know part query parameters global ratio tuples included answer 
start xed number ratios value maintain histogram values updated tuples arrive 
periodically histogram pick di erent values dropping extreme values average middle values 
select distinct values previous values new values update guess 
algorithm ends pick solution corresponding value smallest cost 
nal solution min single dimension hierarchies generalize case level hierarchy dimension 
intermediate hierarchy option including answer aggregated tuple level 
set tuples consists detailed tuples parents higher levels hierarchy 
include tuple agg parent tuples default ratio children answer equal ratio induced agg outer global ratio updated cost equation min cost excluding aggregate tuple cost including aggregate tuple tuple min tuples detailed data grouped common parent 
level level new group formed tuples parent state dynamic programming algorithm 
agg min agg algorithm maintains di erent nodes levels hierarchy 
node stores partial solutions slots described case single hierarchy 
show example state answer size number levels hierarchy 
tuples jc scanned order tuples hierarchy appear 
tuples rst passed bottom detailed node hierarchy 
node updates solution equation gets tuple member current hierarchy 
happens nds nal best solution equation passes solution node re initializes state member hierarchy 
non leaf node getting new solution node updates solution procedure 
data pipelined level hierarchy 
level nd best solution group tuples parent level hierarchy 
nal answer stored top node tuples scanned 
discuss choose values ratios internal nodes 
need allow possibility node aggregate tuple may included 
parent root immediate parent nal answer 
need solve ratios parent tuples 
lacking information start xed set ratios global ratio single hierarchy case 
tuples arrive node bootstrap choice ratio follows node propagates downwards children node current best guess ratio aggregate tuple 
tuples done re evaluate costs new ratios subsequent tuples get progressively better estimates 
lemma dynamic programming algorithm generates optimal answer ratios guessed level correct 
proof 
proof optimality follows directly equation algorithm straight implementation equation di erent ways decomposing tuples subsets 
optimality dynamic programming algorithm ected parts decompose tuples long nd optimal solution part separately combine optimally 
decomposition new tuple equation size 
decompose tuples boundaries hierarchy consists children value level hierarchy 
multiple dimensions general case multiple dimensions levels hierarchies dimensions 
extend multiple dimensions pre ordering levels dimension applying solution section 
goal pick ordering minimize total error 
intuitively order levels higher similarity members aggregated earlier 
example queries data shown di erent levels platform dimension similar di erent levels product dimension 
aggregated platform rst 
formalize intuition 
level dimension calculate total error tuples level summarized parent tuple level 
tuples level similar parent tuple summary tuples error due summarization small 
contrast children tuple divergent error grouping single parent tuple large 
ld denote set aggregated tuples level dimension estimate error incurred tuple ld approximated ratio induced parent tuple higher levels follows ld ld parent ld err parent sort levels dimension ld smallest value corresponding lowermost level 
computation similarity members done line data entire cube xed ordering dimensions stored done dynamically query subset involved query 
minimizing answer size xed error limit case user provides limit max maximum error expected actual values cell objective provide smallest length summary meets error limit 
easier problem solve previous answer size limited 
algorithm stages previous case 
single dimension hierarchies max denote optimal answer size set tuples denotes nal ratio parent tuples 
optimal answer xed value easily follows scan tuples error err rv greater max include tuple nal answer 
optimal answer max corresponds smallest nal answer size 
max min max values chosen exactly way previous solution 
di erence previous solution need maintain separate solutions di erent values single dimension hierarchies consider set tuples children internal node hierarchy 
agg denote parent tuples 
goal nd optimal solution agg max denotes default ratio tuple included nal solution 
options solution corresponding agg included nal answer 
agg nal solution error tuples included nal solution derived external ratio agg included nal solution external ect error due tuples best solution smaller possibilities 
agg max min max max interesting corollary solution optimal answer size max di erent values di er 
value min gives smallest answer size min solution values easily formed min tuples aggregate tuple agg ratio min multiple dimensions case multiple dimensions handled exactly way xed discussed section 
level pruning conventional data mining algorithms intend tool interactive manner processing time query bounded 
cases entire cube large subset cube involved processing small 
true bound processing time limiting level detail start 
server rst initialized collects statistics number tuples various levels detail 
probabilistic counting method proposed fm applied cube context ective estimating sizes di erent levels just pass detailed data 
real life datasets tried estimate actual levels 
individual queries size relevant levels aggregation subcube scaling estimated total size selectivity subcube respect actual cube 
selectivity estimated reciprocal size level corresponding constant values de ning subcube 
instance di query selectivity estimated reciprocal estimated size level geography year 
estimates pick level system expects complete speci ed threshold 
rest processing remains 
user want continuously re ning solution stopped time yield reasonable solution 
directly supported solution proceeded top 
unfortunately top processing may produce optimal answers 
additional challenge aggregated rows give little clue worth drilling 
algorithm cases xed xed error limit 
fixed propose algorithm 
nd best bottom solution starting tuples aggregated level value chosen user time constraints discussed 
yields rst version answer 
choose level detailed processed time threshold user willing tolerate 
merge best answer tuples layers rst version answer 
sf denote set tuples starting aggregate level going upto level value selected tuples nal answer induce default ratio tuple level denote ratios 
find best solution sf rm di erent values merge solution best solution starting level follows min sf rm fixed error limit max solution case similar solution need nd solution di erent values implementation integrating olap products diff operator forms part system suite operators enhancing olap products mining primitives 
system architected tiers topmost tier java frontend swing api bottom layer olap data source middle layer main server 
current prototype tested integrated olap data sources microsoft olap server oracle ibm db udb version 
rolap engines oracle db sql odbc access data microsoft olap server mdx ole db olap mic 
response user query diff operator dynamically generates correct sql mdx query submits olap data source 
query involves selecting speci ed values speci ed aggregation level sorting data 
intermediate caching done server 
subset productid year revenue select productid year revenue cube select geography name rest world cube productid select productid revenue subset year cube productid select productid revenue subset year select prod groupid prod productid plat userid plat typeid sum sum select cube union select cube platform product plat id prod id productid group prod groupid prod productid plat userid plat typeid order prod groupid prod productid plat userid plat typeid sql query submitted olap server idi query 
subset productid year revenue select productid year revenue cube productid select productid products prod category vertical apps cube productid select productid revenue subset year cube productid select productid revenue subset year select productid plat userid plat typeid sum sum select cube union select cube platform plat id group productid plat userid plat typeid order productid plat userid plat typeid sql query submitted olap server idi query 
show example sql statements di erence queries figures respectively 
data query assumed laid star schema cd 
middle layer light weight attachment olap server 
indexing query processing capability server heavy weight processing 
di algorithm extra disk space 
case xed amount memory consumes independent number rows 
nlr denotes maximum answer size denotes number levels hierarchy denotes number distinct ratio values algorithm uses 
architecture highly scalable terms resource requirements 
performance evaluation section experimental evaluation prototype demonstrate feasibility getting interactive answers typical olap systems scalability algorithm size dimensionality cube increases 
experiments done pc mhz intel processor mb memory running windows nt db udb olap data source 
olap council benchmark cou experiments 
dataset designed olap council serve benchmark comparing performance di erent olap products 
total non zero entries dimensions product hierarchy customer level hierarchy channel hierarchy time level hierarchy shown gure 
product customer channel time code store channel month class retailer quarter group year family line queries experiments generated randomly selecting cells di erent levels aggregation cube 
main attributes workload ect processing time number tuples query result size jc 
total number levels jc determines number nodes dynamic programming algorithm 
answer size determines number slots node 
default value experiments 
report experimental results varying values parameters sections 
number tuples chose arbitrary queries levels aggregation top 
plot total time seconds query sorted number non zero tuples subcube jc 
number tuples subcube time seconds alg total total time taken function subcube size show graphs rst denotes data access time includes time issue query returning relevant tuples stored procedures 
second curve denotes time spent stored procedure nding answer 
third curve denotes sum times 
observations total time taken nding answer minute cases 
subcube quarter entries total time slightly minute 
small fraction total time spent stored procedure implements idi operator 
majority time spent relevant data database passing stored procedure 
implies server better optimized answering olap queries processing time reduced 
subset data relevant query small fairly large sized datasets 
example olap benchmark dataset total tuples largest size subcube involving comparisons month dimension total processing time seconds 
number levels show processing time function number levels aggregation 
increase number levels xed total number tuples expect processing time increase slower linear rate signi cantly done lower levels higher levels node 
exact complexity depends fanout node hierarchy 
observe number levels increased processing time increases seconds xed query size tuples 
small increase compared total data access time seconds 
number levels time seconds total time taken versus number levels answer result size query query total time taken function result size result size show processing time function answer size di erent queries query tuples query tuples 
value increased processing time increases seconds query seconds query 
add data access time total processing time amounts factor increase total time 
dynamic programming algorithm dependence xed overheads dominant total processing time core algorithm 
explains increase processing time increases factor 
introduced new operator enhancing existing multidimensional olap products automated tools analysis 
new operator allows user obtain step summarized reasons changes observed aggregated level 
formulation operator allows key reasons conveyed user small number rows quickly assimilate 
casting information theoretic terms obtained clean objective function optimized getting best answer 
designed dynamic programming algorithm optimizes function single pass data consuming little memory 
algorithm signi cantly better initial greedy algorithm terms performance quality answer 
prototyped operator db olap server excel front 
design enables heavy weight processing involving index lookups sorts pushed inside olap server 
extension code needed support operator relatively smaller amount 
design goal enable interactive new operator demonstrated experiments prototype 
experiment industry olap benchmark indicate subcubes de ned idi query includes quarter tuples process minute 
experiments show scalability algorithm number tuples number levels hierarchy answer size increases 
wish design operators nature automate existing tedious error prone manual discovery process multidimensional data 
arb arbor software sunnyvale ca 
multidimensional analysis converting corporate data strategic information 
www com 
cd chaudhuri dayal 
overview data warehouse olap technology 
acm sigmod record march 
cod codd 
providing olap line analytical processing user analysts mandate 
technical report codd associates 
cor software 
power play special edition 
www com index html 
cor international data 
www idc com 
cou olap council 
olap benchmark 
www org 
ct cover thomas 
elements information theory 
john wiley sons 
dbm dbms 
open olap intelligent enterprise 
dbms magazine april 
www com html 
dis information discovery 
www inter net 
fm flajolet martin 
probabilistic counting algorithms data base applications 
journal computer system sciences 
ger gerber 
data 
datamation may 
www datamation com plugin issues may html 
han han 
line analytical mining integration data warehousing data mining 
db summit www com articles han han html 
hf han fu 
discovery multiple level association rules large databases 
proc 
st int conference large databases zurich switzerland september 
ida intelligent data analysis group 
olap vendors increasingly see data mining integration potent di 
www com htm march 
information discovery olap datamining bridging gap 
www datamining com bridge htm 
mic microsoft www microsoft com data olap spec 
ole db olap version speci cation 
sar sarawagi 
explaining di erences multidimensional aggregates 
proc 
th int conference large databases vldb 
shukla deshpande naughton 
storage estimation multidimensional aggregates presence hierarchies 
proc 
nd int conference large databases pages mumbai bombay india september 
sof pilot software 
decision support suite 
www com 
ss sarawagi 
intelligent interactive olap data cubes 
proc 
acm sigmod international conf 
management data demonstration section dallas usa may 
www iitb ernet sunita 
tho thomsen 
olap data mining creating total dss solution 
db summit www com articles thomsen thomsen html 

