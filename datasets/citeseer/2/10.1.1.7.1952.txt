fundamenta informaticae ios press verification timed automata similarity piotr nski wojciech penczek institute computer science pas warsaw poland pl ol faculty mathematics university poland math uni pl 
presents modification standard partitioning technique generate state spaces preserving similarity timed automata 
relation weaker bisimilarity obtained models state spaces smaller bisimilar ones preserve universal fragments branching time temporal logics 
theoretical results exemplified strong delay observational simulation relations 

problem automated verification timed concurrent programs usually understood problem checking finite state graph model corresponding program satisfies property formula 
complexity checking formula model usually linear size model main obstacle model generation connected size prohibitive 
knowing advance properties influence process generating model way model obtain minimal preserving properties 
unfortunately known build minimal models arbitrary properties usually expressed formulas ctl modal calculus tctl 
generating minimal models specific formulas minimal partly supported state committee scientific research 
address correspondence institute computer science pas warsaw poland address correspondence faculty mathematics university poland dembinski 
verification timed automata similarity models preserving sublanguages subclasses formulas generated 
done identifying equivalence preserved selected sublanguage logic generating minimal model preserving equivalence 
approach partially successful 
reason known generate minimal models preserving bisimulation ctl tctl known generate minimal models preserving maximal trace equivalence ltl 
aim show minimal model generation methods preserving bisimulation preserving weaker relation similarity 
know similarity induced universal fragment ctl actl preserves ltl stronger trace equivalence 
preserving weaker relation results generating smaller models approach constitutes step reducing unnecessary complexity automated program verification 
method applied improving partitioning algorithm generating finite models timed automata dense discrete semantics 
simulating dense models verifying universal subsets ctl tctl simulating discrete models checking reachability 
means improvement obtained algorithm price reducing expressiveness tested temporal languages 
rest organized follows section define general notions models bisimulation simulation introduce temporal logics 
section standard minimization algorithm generating bisimulating models recalled sec 
followed details original modification algorithm allowing generating simulating models 
section devoted application implementation minimization algorithms timed automata 
basic notions related introduced sec 
implementations standard case dense semantics sec 
discrete sec 

simulation relations considered literature briefly treated shown approach implementation scheme easily extended sec 

cases illustrated simple examples elaborated details appendix 
preliminary experimental results indicating state reduction possibilities proposed method sec 

section ends introducing logic tctl subsets usually express properties timed automata sec 

briefly indicated subsection logics preserved generated models 
summarizing final remarks presentation 

related original splitting algorithm generating minimal models preserving bisimulation introduced extended timed systems 
algorithms computing similarity relations states labelled graphs considered 
algorithms potentially exploited generating finite models preserving simulations splitting give unnecessarily large state spaces comparison 
follows fact require states forming equivalence class simulate 
exploit notion similarity models defined 
theoretical results modifications partitioning algorithm 
preliminary version appeared 
dembinski 
verification timed automata similarity 
preliminaries section briefly recall basic known notions results 
follows ir denotes set reals set natural numbers 

models bi simulations start standard definitions kripke structures models 
definition 
kripke structure triple set states initial state labelled transition relation fixed set labels model pair valuation function pv fixed set propositional variables pv problem decide state satisfying property reachable exist complicated property holds case finite known algorithms constructing reachable subgraph applying reachability model checking procedures 
cases timed systems infinite 
mentioned solutions problem construct finite structures corresponding infinite ones preserving required properties 
part going show method constructing finite kripke structures simulation relation required properties preserving correspondence 
definition 
simulation kripke structures 
relation simulation conditions hold 

structure simulates structure simulation structures called similar relation called bisimulation inverse relation simulation called bisimilar relations defined extended models requiring related states agree valuations 
properties preserved usually expressed temporal logic formulas 
introduce logics known results relating various kinds models 

temporal logics ctl subsets pv finite set propositional variables 
set formulas ctl defined inductively follows dembinski 
verification timed automata similarity language ctl consists state formulas formulas form pv state formulas ctl usually considered actl negation applied subformulas contain modalities 
actl 
actl modality modalities may appear paired combinations ax 
ctl 
ctl modality modalities may appear paired combinations ax 
ltl 
restriction formulas form contain consider models edge relation assumed total labels edges definition model sequel benefit description suggested algorithms ignored interpretation temporal logics 
totality ensured adding cycles nodes 
model 
infinite path denote suffix 

satisfaction formula state written just defined inductively follows 
iff pv 
iff iff iff 
iff path starting 
iff state formula 
iff iff iff 
iff iff iff 

iff 
theorem relates temporal logics models models 
theorem 
bi similar models range labelling function pv iff actl ctl resp 
formula pv reverse theorem essentially stating coarser bi simulation preserves truth value actl ctl resp 
formulas holds proved easy induction finitely branching 
formulated finite models easily extends infinite ones 
dembinski 
verification timed automata similarity 
set graphs minimization algorithms section methods generating finite structures corresponding infinite ones minimization algorithm 
known method allows obtain models bisimilar original ones models get applying second technique modification related simulation relation 

set graphs mentioned previously cases set states kripke structure infinite 
constructing structures individual states nodes construct appropriate finite graphs nodes subsets precisely definition 
structure set graph node set states iff set graph complete iff interested set graphs preserving bi simulation relation defined section 
usually literature bisimulating set graphs considered 
graphs preserve branching time properties kripke structures 
exists constructive definition algorithm finite minimal bisimulating set graphs 
algorithm sec 

definition 
bisimulating set graph set graph bisimulating iff lemma 
kripke structure bisimulating set graph bisimilar 
proof easy check relation defined wg bisimulation 
ut definition 
cor simulating set graph set graph kripke structure set labels iff non empty cor cor cor cor lemma 
kripke structure cor simulating set graph similar 
proof easy check relation defined wg simulation relation defined cor simulation ut dembinski 
verification timed automata similarity lemma relates bisimulating cor simulating set graphs lemma 
kripke structure finite complete set graph 
bisimulating cor simulating 
proof follows directly definitions 
ut lead confusion omit prefix cor writing simply simulating 

standard minimization algorithm bisimulating set graphs standard minimization algorithm bisimulating set graphs starts initial partition set disjoint classes union equals set graph node containing initial state called reduction 
partition define auxiliary functions pre fx yg re fy pre re re post fy yg ost fy post ost ost definition 
partition 
bi stable iff reduction set graph bisimulating 
bi unstable iff pre fx notice partition bi stable iff pre 
standard minimization algorithm starting initial partition constructs minimal min reachable part set classes contain reachable concrete state bi stable class union nodes min algorithm terminates bisimulation finite index 
standard generic minimization algorithm parametrised non deterministic function split refines partition choosing class bi unstable effectively splitting subclasses bi stable precisely split fxg bi stable 
split pre pre bi unstable 
fig 
pseudo code generic algorithm building bisimulating set graphs 
set reachable classes denoted set stable classes 
notice algorithm yx fy split fxg 
dembinski 
verification timed automata similarity 



cx split 
cx fxg 

fxg ost 



yx fy split 
yx fy cx 
re 
yx cx 


generic minimization algorithm bisimulating set graphs 
minimization algorithm simulating set graphs contribution relies suggesting new type set graphs weakening bisimulation conditions showing exploit definition minimization construction 
deal similar minimization algorithm considered section cor simulating set graphs start modification consists replacing classes nodes pairs cor cor call cor partition partition cor implies cor require fs fs ensures condition cor satisfied 
define cor 
cor deliberately notation transition relation meaning usually easily understood context 
definition 
cor partition 
si stable iff cor simulating cor satisfying def 
cor 
cor cor cor si unstable 
cor iff pre pre cor cor cor notice si stable iff cor pre cor cor 
minimization algorithm starts initial cor partition cor cor 
constructs set graph minimal non deterministic function split min denotes projection th component dembinski 
verification timed automata similarity cor modify cor cor cor cor cor cor cor cor possible cor cor cor action si stable pseudo stable pseudo unstable unstable split split 
cases splitting simulating set graphs reachable part si stable constructed subsets cor min cor simulating subsets 
re cor similarly ost cor defined re cor cor re re cor re cor non deterministic function split cor complicated refines sets classes subsets cor chosen pair cor cor si unstable 
see fig 
cor cor split cor refined 
function split defined follows split cor cor cor si stable cor 
class pair cor label chosen pre pre cor cor cor 
split cor pre cor cor cor pseudo stable 
cor pre cor cor 
split cor cor cor cor pre cor cor pseudo unstable 
cor pre cor cor pre cor 
split cor pre pre pre pre cor cor cor cor cor unstable 
cor pre cor cor pre cor 
obtain analogous algorithm fig 
simulating set graphs need dembinski 
verification timed automata similarity substitute line substitute cor cor algorithm replace condition split line split cor changed course cases possible replace re re yx line stable class split class unstable 
pseudo code algorithm fig 

cor 

cor split cor 
cor cor 

cor ost cor 



yx cor split cor changed 
yx cor cor 
re yx 
yx cor 


minimization algorithm simulating set graphs lemma 
kripke structure cor partition algorithm generates simulating set graph bigger minimal bisimulating set graph obtained starting partition proof sketch denote split split function split generating simulating bisimulating resp 
set graphs 
easy notice inspecting function split class cor cor generated function split generates classes cor cor 
fact split split classes 
number classes simulating set graph bigger number classes corresponding bisimulating 
ut dembinski 
verification timed automata similarity follows lemma algorithm generating simulating set graphs terminates algorithm generating bisimulating set graphs terminates 
notice able compare sizes set graphs minimization algorithm bisimulating set graph starts partition cor partition algorithm simulating graph started 
follows require initial partition bisimulating graphs fs 
applying minimization algorithm timed automata mentioned main goal apply proposed method improving partitioning algorithm timed automata 
far method introduced general time abstracting terms related logics contain explicit time parameters 
concrete kripke structures models related timed automata going interest 
section devoted task implementing minimization algorithms automata 
done applying directly notions results described earlier extending cases specific timed automata known literature simulation relations slightly different defined sec 
basic concrete semantic model changes dense discrete 
case simple examples illustrate size reduction obtained algorithms generate cor simulating set graphs bisimulating ones 

timed automata dense models ng fx set variables called clocks 
vector ir called valuation clocks 
valuation ir define valuation ny atomic constraint mean expression form 
time zone convex polyhedron ir defined finite set atomic constraints set valuations satisfying constraints 
denote set time zones 
definition 
timed automaton tuple finite set actions finite set locations fx set clocks initial location transition relation location invariant fact represented set atomic constraints 
dembinski 
verification timed automata similarity element denoted represents transition location location performing action set clocks reset zone defining enabling condition zone represented set atomic constraints 
concrete state pair ir set concrete states denoted initial state defined definition 
structure de de called concrete dense kripke structure dense transition relation de ir defined follows de iff transition action successor relation de ir iff denoted time successor relation 
pv set propositional variables 
definition 
structure de de pv holds called concrete dense model concrete dense kripke structures timed automata usually infinite need construct finite set graphs 
order directly definition set graphs section simplify loosing generality definition concrete dense kripke structure labels ir de replaced new symbol 
follows concrete dense kripke structure timed automaton mean structure de de de literature simulation bisimulation relation sense introduced sec 
defined concrete dense structures de called strong time abstracting simulation lation respectively 

implementation standard minimization algorithms timed automata dense models key notion state space reduction timed automata region 
finite models set graphs built timed automata regions states 
order effectively implement minimization algorithms define functions re ost split terms certain operations regions 
start necessary definitions 
definition 
location zone 
set zg called region 
region identified empty region 
introduce operations definitions notations concerning valuations zones regions iff ir dembinski 
verification timed automata similarity set disjoint zones fz partition regions fv zg fv zg fv transition zone fv ir fv ir vg 
notice operations clock reset zone inverse preserve zones 
results implementation 
define function split need implement operation pre deal cor simulating set graphs define regions cases implementation minimization algorithm assume partition cor partition satisfies location invariants 
partition auxiliary functions section defined follows action successor pre time successor pre re ost easy see implement re ost cor partition sec 


example generating bi simulating set graph consider timed automaton clocks fig 

examples require non negative 
denote time zones defined constraints respectively fx fx fx fx 
dembinski 
verification timed automata similarity 
example timed automaton classes initial partition cor partition minimization algorithm bisimulating simulating set graphs respectively cor stands cor initial class pictures show results generating simulating bisimulating set graph automaton fig 

classes obtained splitting generating bisimulating simulating set graphs shown fig 

simulating graph cor class coloured equal class 
detailed description process generating simulating set graph appendix part 
fig 
show bisimulating simulating set graph example 

generating bisimulating left simulating set graph automaton fig 
dembinski 
verification timed automata similarity time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time time 
bisimulating left simulating set graph generated automaton fig 

modification implementation 
implementation operations computing action successors immediate time zones building bisimulating set graphs directly applied new algorithm 
example shows approach allows decrease size state space 
improvement possible recall case cor simulation generated graph necessarily minimal 
standard approach checking stability class time successors immediate time successors taken account 
recall subset zone consisting states immediate time successors time successors omitted order prevent comparisons splittings implementation 
case simulating set graphs checking stability class zx cor cor defined pre cor cor cor cor pre zx zx pre zx cor zx cor 
means considered si stable cor immediate time successor cor requirement necessary 
approach require cor immediate time successor cor just time successor 
prevents unnecessary partitionings 
order reduce number comparisons implementation consider classes immediate time successors class pairs zones define new operation follows fv implement operation pre pre zx zx zx equals zx pre cor cor zx cor cor pre zx cor zx zx cor 
process generating simulating set graph automaton previous example starting cor partition appendix part 
classes obtained dembinski 
verification timed automata similarity time time time time time time time time time time 
classes simulating set graph splitting simulating set graph shown fig 

splitting gives classes shown fig 


minimization algorithms different bi simulation relations dense models strong time abstracting bi simulation relations concrete dense kripke structures defined section considered literature 
section provide definitions relations show algorithm section implemented order generate appropriate set graphs 
set graphs concrete dense kripke structure automaton notice concrete kripke structure considered set graph 
definition 
time abstracting delay simulation relation sd time abstracting delay simulation tad simulation short conditions hold 
sd 
sd sd sd definition 
time abstracting observational simulation relation time abstracting observational simulation tao simulation short conditions hold 

dembinski 
verification timed automata similarity left reader appropriately reformulate definitions bisimulating cor simulating set graphs sec 
basing new simulation relations 
relations extended models provided related states agree valuations 
show generate models set graphs defined relations concrete dense models timed automata 
implement minimization algorithm time abstracting delay relations define time successor pre implemented pairs zones action successor pre re ost notice computing zone region need ensure invariant location satisfied 
partition assumed satisfy invariants need check intersected zone associated location 
compute intersection invariant location 
done zone region containing states action supposed executed need ensure action executed states satisfying invariant associated done intersecting 
appendix part show process generating delay simulating set graph automaton considered 
classes obtained process shown fig 
set graphs bisimulating simulating fig 

build time abstracting observational bisimulating simulating set graphs define time successor pre implemented pairs zones action successor pre re ost dembinski 
verification timed automata similarity 
partitioning state space delay bisimulating left delay simulating set graph time time time time time time time time time time time time time time time time time time time time time time 
delay bisimulating left delay simulating set graph automaton fig 
dembinski 
verification timed automata similarity time time time time time time time time time time time time time time time time time time time time time time 
observational bisimulating left observational simulating set graph example classes get process generating observational simulating set graph example case delay simulating set graph 
graphs differ 
comparison sizes observational bisimulating observational simulating set graph shown fig 


minimization algorithm discrete models cases untimed properties timed automata interest 
constructs discrete models time successor relation explicitly taken account 
states obtained combination passing time executing actions 
various semantics action successor relation literature 
consider general action successor state obtained passing time performing action possibly passing time 
definition 
structure di di called concrete discrete kripke structure discrete transition relation di defined follows di iff ir de de de 
pv set propositional variables 
definition 
structure di di pv holds called concrete discrete model order implement algorithms discrete semantics define pre re ost dembinski 
verification timed automata similarity order give illustrative example show simulating set graph generated modify automaton adding new initial location action performed conditions actions taken class considered previous examples 
modified automaton shown fig 
state space partitions minimization results discrete bisimulating simulating set graph shown fig 

results applying minimization algorithms automaton considered previously fig 
shown fig 


modified timed automaton example generating bi simulating set graph discrete case define zones fx fx fx fx start initial partition consisting classes cor partition consisting respectively initial class similarly previous examples 
detailed description process generating simulating set graph shown appendix part 

preliminary experimental results algorithm implemented relations considered way allow treating big examples 
presenting experimental results bigger examples equivalence relations show example timed automaton provide sizes strong time abstracting bisimulating simulating set graph modified implementation section 
fig 
scalable automaton 
automaton locations outgoing arcs location increasing adds outgoing arcs leading new locations described picture 
total number locations increases 
fig 
sizes set graphs time abstracting bi simulation values provided 
total size set graph mean sum number classes edges 
column compares sizes bisimulating simulating set graphs get average reduction 
dembinski 
verification timed automata similarity 
partitioning state space discrete bisimulating left discrete simulating set graph modified automaton fig 

discrete bisimulating simulating set graph automaton fig 

discrete bisimulating simulating set graph automaton fig 
dembinski 
verification timed automata similarity 

scalable automaton bisimulating simulating classes edges total classes edges total reduction 
sizes strong time abstracting bi simulating set graphs 
timed temporal logics timed automata mentioned known see models simulating bisimulating set graphs preserve actl ctl resp 
discrete simulating bisimulating models timed automata preserve actl ctl respectively defined section 
timed properties timed automata expressed logic tctl defined pv finite set propositional variables 
formulas tctl defined inductively follows dembinski 
verification timed automata similarity pv 
intuitively means progressive run exists initial prefix time length greater holds state prefix holds intermediate states 
tctl interest 
negation applied subformulas contain modalities 
order give semantics tctl introduce notion timed runs timed automata 
denote 
timed run infinite sequence concrete states 
ir 
run said progressive iff unbounded 
de concrete dense model timed automaton function returning set progressive timed runs concrete state 
timed run model de validity tctl formulas defined follows 
iff pv 
iff iff iff 
iff 
iff 
de iff mentioned discrete bisimulating simulating models timed automata preserve ctl actl respectively defined section 
models time abstracting bisimulating set graphs built dense semantics preserve tctl 
straightforward see models time abstracting simulating set graphs preserve 
shown time abstracting delay bisimulation applied generating models verification tctl properties 
similar approach time abstracting delay simulation 

final remarks shown weaker relation similarity bisimilarity effectively reduce size state graph model general size model timed automaton particular allowing automated verification quite large classes properties actl ltl 
new approach introduced way constitutes known results unified theory 
shown algorithm implemented various kinds equivalence relations semantics timed automata 
similar relations studied context definitions enable natural reformulation known algorithms lead better results 
dembinski 
verification timed automata similarity alur courcoubetis dill halbwachs wong toi implementation algorithms timing verification automata emptiness proc 
th ieee real time systems symposium rtss ieee comp 
soc 
press 
alur courcoubetis dill halbwachs wong toi minimization timed transition systems proc 
concur springer verlag 
bouajjani fernandez halbwachs raymond minimal state graph generation science computer programming 
browne clarke grumberg characterizing finite kripke structures propositional temporal logic theoretical computer science 
grumberg simulation minimization proc 
th int 
conf 
automated deduction icad pittsburgh 
clarke grumberg peled model checking mit press 
dembinski penczek pol automated verification infinite state concurrent systems improvement model generation proc 
th int 
conf 
parallel processing applied mathematics lncs 
appear dembinski penczek pol verification timed automata similarity proc 
int 
workshop concurrency specification programming cs 
dill timing assumptions verification finite state concurrent systems automatic verification methods finite state systems vol 
lncs springer verlag 
goltz kuiper penczek propositional temporal logics equivalences proc 
concur springer verlag 
grumberg long model checking modular verification proc 
concur springerverlag 
henzinger henzinger computing simulations finite infinite graphs proc 
th annual ieee symposium foundations computer science focs 
tripakis minimization timed systems verimag imag fr tripakis dea ps gz 
tripakis yovine analysis timed systems time abstracting bisimulations proc 
cav springer verlag 
tripakis yovine analysis timed systems time abstracting bisimulations formal methods system design 

appendix 
process generating simulating set graph examples require non negative real numbers 
classes form cor short mean cor cor zones cor 
process generating simulating set graph follows dembinski 
verification timed automata similarity start initial cor partition consisting classes fx fx fx fx fx fx fx fx initial class fcg 

class stable time successor fcg fc 

stable time successor action successors action due pseudo stable cor modified resulting fx 
fcg 

considering unstable time successor split fx fx 
fcg 

considering unstability time successor fc fcg 

account action successor action pseudo stable 
fcg 

consider time successor unstability split fcg 

stable time successor fc fcg 

time successor pseudo stable fcg 

step fcg fc stable 
considering stable time successor time successor pseudo unstable 
split fcg 
dembinski 
verification timed automata similarity 
stable time successor fcg fc 
action taken pseudo stable successor fcg fc 
pseudo stable fcg 
unstable split fcg 
stable fcg fc 
time successor causing unstability split fcg 
stable time successor fcg fc 
similarly stable fc fc 
action taken leading unstability case 
class time successor due pseudo stability cor modified fc fc 
step consider stable fc fc 
pseudo unstable time successor split fcg fc 
occurs stable fc fc 
similarly stable fc fc 
stable stable time successor fc fc 
pseudo stable time successor fc fc dembinski 
verification timed automata similarity 
unstable time successor split fc fc 
step adds stable classes fc fc 
class considered stable fc fc 
occurs case fc fc 
stable stable time successor fc fc 
action taken fx fx fc fc 
unstable successor split fx fx fc fc 
occurs stable fc fc 
occurs fc fc 
action taken class pseudo stable fc fc 
pseudo time stable fc fc 
stable fc fc 
similarly stable fc fc 
stable fc fc dembinski 
verification timed automata similarity 
action taken unstability case 
action executed pseudo stable fx fx fc fc 
pseudo time stable xg fc fc 
pseudo time stable xg fc fc 
pseudo time stable fc fc 
pseudo time stable xg fc fc 
stable fc fc 
stable fc fc 
holds fc fc 
step adds stable classes fc fc 
stable fc fc 
occurs fc fc 
action taken leading pseudo stable cor modified fx fx fc fc 
stable fc fc dembinski 
verification timed automata similarity 
taken leading pseudo stable due fx fx fc fc 
occurs stable fc fc 
stable successors fc fc 
steps algorithm added stable classes fc fc algorithm terminates 

process generating simulating set graph modified time successors start initial cor partition consisting classes fx fx fx fx fx fx fx fx initial class fcg 

class time successor stable fcg fc 

stable time successor action successor action due pseudo stable cor modified fx fx 
fcg 
considering stable time successor fcg fc 
stable action successor pseudo unstable action successor fx fx fcg 
occurs stable fcg fc 
pseudo stable fcg 
occurs stable fcg fc dembinski 
verification timed automata similarity 
pseudo stable time successor fcg 
stable fcg fc 
stable successors fc fc 
pseudo stable successor fx fx fcg fc 
pseudo stable time successor xg fc 
stable fcg fc 
stable action successors time successor fc fc 
steps added stable classes fc fc 
stable fc fc 
action taken causes pseudo stability fx fx fc fc 
stable fc fc 
pseudo stable action class fx fx fc fc 
stable fc fc 
stable successors fc fc 
added list stable classes fc fc algorithm terminates 
dembinski 
verification timed automata similarity 
time abstracting delay simulating set graph generation 
start initial cor partition consisting classes fx fx fx fx fx fx fx fx initial class fcg 

class stable time successor action successors fcg fc 
considering class occurs pseudo stable action successor fx fc 
stable fcg fc 
stable pseudo stable fx fc 
stable fcg fc 
occurs giving fc fc 
steps added stable classes fc fc 
stable action pseudo stable action fx fx fc fc 
stable fc fc 
holds fc fc 
similarly considered stable fc fc 
added list stable classes fc fc algorithm terminates 
dembinski 
verification timed automata similarity 
simulating set graph discrete case example shows process generating discrete simulating set graph automaton fig 

similarly start initial cor partition consisting classes fx fx fx fx fx fx fx fx fx fx initial class fcg 

class stable action successor fcg fc 
class action taken 
pseudo stability fx fcg 
stable action successor fcg fc 
action taken leading unstability case considering occurs pseudo stable fx fcg 
stable action successor fcg fc 
stable successors fc fc 
steps added list stable classes fc fc 
action taken 
class stable considering action pseudo stable fx fx fc fc 
stable successors fc fc 
similarly stable fc fc 
steps algorithm add stable classes fc fc 
