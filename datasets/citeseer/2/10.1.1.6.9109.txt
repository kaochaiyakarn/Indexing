recovered views track architectural evolution software composition group institut informatik iam universit bern berne switzerland iam unibe ch www iam unibe ch ecoop workshop oo architectural evolution tracking evolution software system time gives valuable information 
suggests parts remain stable problem aspects change gives insight design choices 
show recovered views versions software system track evolution 
briefly describe approach recovering views software applications 
compare views versions hotdraw framework 
objective illustrate number issues concerning architectural evolution architectural change opposed change general 
detect architectural drift 
evaluate relative quality different architectural solutions 
guidelines building evolvable software 
recovering architectural views order recover architectural views application static dynamic information represented prolog facts analyze information prolog rules order create views show invocation behavior application different levels granularity 
shows process view recovery 
briefly summarize approach detailed description rd 
smalltalk application code instrumentation execution smalltalk vm moose tool famix meta model smalltalk vm parse code dynamic facts static facts specifications prolog engine queries views dotty view recovery smalltalk applications obtain static information source code parsed represented metamodel oo software td developed part project 
model represented prolog facts providing information classes methods inheritance structure application 
obtain dynamic information smalltalk applications instrumented method wrappers executed producing tracing information form prolog facts 
information represents method invocations occur execution application 
static dynamic information analyzed consists set prolog rules defining relations clusters create views see section functions generate views 
dot tool kn display recovered views 
specifying views specify view prolog rules define clustering components relation specifies certain relationship holds elements example specify view shows invocation relationships smalltalk class categories define follows category setof class class class category 
invokes class class send class instance class instance method 
rule clusters classes smalltalk category rule defines relationship classes holds instance class invokes method instance class 
generate view shows invocations executed scenario smalltalk class categories hotdraw framework invoke query generates views displayed node graph corresponds hotdraw class category directed edge means instance class category invokes method instance class category note left hand corresponds hotdraw version right hand version 
basics hotdraw constraints hotdraw figures hotdraw support hotdraw handles basics hotdraw hotdraw tools hotdraw readers hotdraw framework hotdraw toolbar hotdraw tools invocations categories hotdraw framework hotdraw figures hotdraw handles hotdraw constraints view gives coarse idea communication parts hot esprit project investigates tools techniques transforming object oriented legacy systems frameworks 
see www iam unibe ch draw framework 
category groups main classes clustering broken get better understanding behavior application 
tracking evolution case study hotdraw hotdraw bj bra framework semantic graphics editors 
allows creation graphical editors associate picture data structure changing picture changes data structure 
hotdraw framework consists smalltalk classes comes sample editors 
changes framework years particular implementation tools constraints 
documentation know hotdraw model view controller triad kp roles played drawing drawing editor drawing controller respectively 
basic concepts tools manipulate drawing consists figures accessed handles 
constraints ensure certain invariants met example figures connected line remain connected figures moved 
comparing versions hotdraw compared versions hotdraw version version order see design evolved 
obtained static information versions 
obtain dynamic information ran short scenario drawing editor application 
scenario ran consisted opening drawing editor application creating rectangle creating ellipse selecting grouping closing drawing editor 
gives initial view communication class categories 
shows version longer uses constraint solvers readers 
short documentation changes version version learn implementation changed general constraint solver implemented smalltalk dependency mechanism 
learn implementation tools changed readers commands disappeared tools implemented state machines 

matching domain concepts 
evidently changes mean architecture changed 
create new views define component main domain concepts hotdraw 
version define components drawing handle tool toolbar version constraints 
mapping classes components different version version tool concept implemented classes commands readers tools version implemented classes tool 
obtain views see show components communicate 
matching domain concepts leads similar identical graphs 
example version communicates tools version toolbar communicate tools 
tools constraints drawing handle drawing invocations components handle tools toolbar constraint 
evaluating architectural quality 
create view sends displayed classes 
version classes implement constraints collapse constraint related classes constraint component 
want illustrate schematically relative complexity versions see 
class constraints class tool drawing class tool class drawing tool class non creation invocations classes compared graph version version mess 
structure invocation graphs evaluate quality certain architecture functionality 

comparing roles 
version tool concept implemented differently interface changed 
ask public interfaces tool component see 
see version methods relate tool icon image tool don correspondence version 
reflects connection tools version see absent version 
class tool class handle handle class tools activate classname controller cursor deactivate display tool discussion public interface tool component tools controller cursor name command selected briefly sketched views recovered different versions application track architectural evolution 
objective raise discussion issues concerning architectural evolution 
purpose tracking evolution 
reverse engineering application tracking evolution software helps understand parts software problems may give insight design rationale 
tracking evolution predictive value 
example included earlier version hotdraw comparison version seen tool concept implementation 
looking versions better predict aspect software system remain stable change 
application studied framework clear discussion tracking evolution application comparing similar applications useful process evolving framework 
rules detect architectural drift 
rules codify invariants hold versions software 
interesting architectural invariants easy express fine grained elements static dynamic model 
currently looking dynamic information identify class collaborations uml collaborations expressed rules invariants luc 
easier codify rules programming style structural design patterns kp codify architectural patterns bmr 
model architectural evolution drift 
case study suggests algorithms changed constraint solving patterns change tools domain concepts roles remained quite stable 
suggests software viewed layers evolve different rates 
domain concepts roles refered metaphor application remain stable 
patterns change patterns solutions maintaining roles flexible way face certain forces 
algorithms volatile 
layering architectural style gal way think software 
way package software possible java interfaces 
evaluating quality architecture compared views application specific execution scenario saw views hotdraw version simpler hotdraw version 
raises question evaluate relative merits 
measurements comparing versions comparing maintainability flexibility software 
building evolvable software 
learn tracking software evolution guidelines building applications evolve gracefully 
rj 
funded swiss government project 
nfs european union esprit programme project 
brant foote johnson roberts 
wrappers rescue 
proceedings ecoop lncs pp 

bj beck johnson 
patterns generate architectures 
proceedings ecoop lncs pp 

springer verlag july 
bmr buschmann meunier rohnert stahl 
system patterns 
wiley sons 
bra brant 
hotdraw 
master thesis university illinois 
gal 
note object oriented software architecting 
ecoop workshop reader lncs pp 

kn koutsofios north 
drawing graphs dot 
bell laboratories murray hill nj 
kp krasner pope 
cookbook model view controller user interface paradigm smalltalk 
pp 
aug 
kp kramer prechelt 
design recovery automated search structural design patterns object oriented software 
proceeding wcre 
ieee nov 
luc lucas 
documenting reuse evolution reuse contracts 
phd thesis vrije universiteit brussel 
rd ducasse 
recovering high level views object oriented applications combining static dynamic information 
yang white editors proceedings icsm pp 
pages 
publisher unknown sept 
rj roberts johnson 
patterns evolving frameworks 
martin riehle buschmann editors pattern languages program design pp 

addison wesley 
td tichelaar demeyer 
exchange model reengineering tools 
ecoop workshop reader lncs 
wuyts 
declarative reasoning structure object oriented systems 
proceedings tools usa 
ieee computer society press aug 

