shortcut fusion accumulating parameters zip functions josef chalmers university technology cs chalmers se alternative approach shortcut fusion function unfoldr 
despite simplicity technique remove intermediate lists examples known difficult 
show remove lists definitions involving zip functions functions accumulating parameters 
categories subject descriptors programming techniques applicative functional programming programming languages optimization studies program constructs program recursion schemes symbolic algebraic manipulation applications general terms languages algorithms keywords deforestation functional programming intermediate data structures program transformation functional programmers write programs composing small highly parameterised functions 
composed functions intermediate data structures communicate 
intermediate data structures lists 
standard example function sumto sum map square example written haskell jh 
haskell 
function produces intermediate permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp october pittsburgh pennsylvania usa 
copyright acm lists expression immediately consumed map 
map produces list immediately consumed sum 
lists intermediate structures form part result 
known intermediate lists removed automatically program transformations considerable amount research gone developing powerful easily applicable techniques wad mar tm ham chi 
successful method removing intermediate data structures shortcut fusion 
relies writing list processing functions special functions foldr build 
list produced build consumed foldr list removed 
technique shown practical examples easy implement 
incorporated glasgow haskell compiler 
despite success shortcut fusion henceforth called foldr build rule shortcomings 
firstly remove lists function zip 
secondly handle functions consume lists accumulating parameters 
destroy unfoldr rule new means shortcut fusion 
characteristics technique remove argument lists function consumes list example function zip 
expression zip method able remove intermediate lists 
problem zip functions main criticisms foldr build rule 
technique remove intermediate lists functions consume lists accumulating parameters 
example intermediate lists removed function sumto sum defined accumulating parameter 
accumulating parameters known problematic fusing functions standard techniques suffer inability fuse functions defined 
foldr build rule method simple 
implemented manner candidate incorporating compiler 
noted transformation new 
noted takano meijer foldr build rule dual tm 
consider transformation focused hylomorphisms express fusion 
consider lists want remove intermediate data structures 
things generalises foldr build rule directly data types 
organised follows 
recapitulate foldr build rule section 
section explains destroy unfoldr rule show list processing functions defined terms functions destroy unfoldr 
sections show destroy unfoldr rule remove intermediate lists definitions involving zip functions section accumulating parameters section 
section discusses related section concludes 
correctness issues shortcut fusion discussed appendix 
foldr build foldr build fusion successful technique removing intermediate data structures 

story begins functions foldr build 
start looking foldr 
function foldr known functional programming community 
names reduce accumulate 
known catamorphism lists mfp 
defined follows foldr foldr xs foldr xs informally foldr goes list replaces cons argument replaces nil second argument 
look function build known specific shortcut fusion 
defined build important thing build function argument function supposed produce list 
may list constructors cons nil directly 
values passed arguments construct list 
applying foldr build rule longer producing lists 
shortly come back ensure doesn list constructors directly 
note build applied foldr gives identity function build foldr id part actual rule remove intermediate data structures foldr build rule 
beauty simplicity foldr build rule stands correct 
correctness rule relies fact function list constructors internally producing list 
arguments construct list 
idea pass different list constructors kind value produced 
exactly foldr build rule 
sure list constructors construct result list 
ensured restricting type 
actual implementations turns convenient give build refined type inferred build forall 
haskell types higher rank implementations provide support 
type see polymorphic result type way produce arguments 
type ensure sufficiently polymorphic 
initially model theory polymorphic lambda calculus argue correctness rule wad 
proof operational techniques joh 
order rule apply programmer needs define functions foldr build 
rule apply 
turned big burden functions standard libraries written style suffices functions certain intermediate lists removed 
noted foldr build rule harmless 
relies heavily transformations enable rule apply 
important inlining functions reduction 
cases relies arity analysis gil 
explicitly write step transformations enable fusion order show magic going 
transformations completely standard implemented glasgow haskell compiler pjs 
case briefly explain 
producers consumers talking short cut fusion handy classify functions producers consumers 
terminology introduced gil 
define mean get intuition 
idea producers consumers consumer applied producer intermediate data structure removed 
achieved defining producers terms build consumers terms foldr 
formally producer function expression arguments defined follows 
build words producer defined directly terms build 
consumers little trickier define 
function may take lists arguments need consumer arguments 
necessary consider function consumer certain arguments 
gives rise definition 
consider function definition 
ak 
say consumer ak ak occurs third argument foldr 
possible loosen requirements consumer current definition suffice 
see application consumer applied producer inline function definitions directly apply foldr build rule remove intermediate list 
see examples coming sections 
informed reader notes definitions differs somewhat definitions gil 
purpose difference unimportant 
move section revise notion consumers producers fit purposes 
limitations known foldr build rule unable handle zip functions gill describes significant shortcoming thesis gil 
reason foldr traverses list time 
quite possible remove lists fed zip 
functions consume lists accumulating parameters cause problems foldr build rule 
reason function foldr 
consumers written terms foldr foldr simply doesn handle accumulating parameters 
readers object function foldl defined foldr uses accumulating parameters 
definition buys 
introduces suspended function calls isomorphic removed list gained 
foldr build rule shortcomings ones just mentioned ones tackle 
destroy unfoldr optimisation important ingredients explain section 
plunge explanation emphasise fact material section new 
new things known wider audience vital understand contribution 
unfoldr key ingredient function unfoldr 
rarely function haskell library report jh 
name reveals opposite foldr constructs lists consuming 
unfoldr unfoldr case just unfoldr operational intuition call unfoldr follows unfoldr initial state function applied determine shall produce output list 
returns list returned 
hand list longer returns value just new element list state shall produce rest list 
examples inline unfoldr 
inlining recursive functions problematic 
want unfoldr purpose definition nonrecursive uses locally defined recursive function job unfoldr go go case just go version unfoldr easily inlined 
destroy key ingredient function 
chosen destroy consumes lists fashion tailored fit unfoldr 
definition follows destroy xs xs xs just xs reader wonder type destroy reason come back subsection 
just build applied foldr yields identity function similar law destroy unfoldr 
destroy composed unfoldr yields identity 
stated algebraically looks destroy unfoldr id follows immediately fact unfoldr id interesting thing destroy build function argument 
function consumes list pattern matching list 
passed function inspect list created kind view wad lists destroy unfoldr rule third ingredient transformation rule destroy unfoldr 
call destroy unfoldr rule looks destroy unfoldr psi psi foldr build rule rule hold unconditionally require type forall types ensured giving destroy type destroy forall 
idea destroy unfoldr rule foldr build rule define functions terms destroy unfoldr 
thesis gill calls function gil 
unknown time re discovered function chosen stick name came 
readers worried type 
removing lists just introduce structure 
type transient removed transformation machinery finished 
inline functions apply destroy unfoldr rule remove intermediate lists 
look problem defining list processing functions destroy unfoldr 
believe destroy unfoldr rule proved similar techniques joh 
substantial exercise leave 
expressing list functions unfoldr destroy want destroy unfoldr rule remove intermediate lists express functions terms unfoldr destroy 
intuitively quite easy soon evident meets eye 
revise notion producers consumers 
producer function expressions psi arguments defined follows 
unfoldr psi order get feeling destroy unfoldr rule works look simple examples 
function takes integers returns list integers including list producing function define unfoldr 
done follows unfoldr just succ interesting example context function consumes list foldr 
defined destroy way foldr xs destroy xs psi xs case psi xs just ys psi ys noted define large class list consumers terms destroy 
say section 
turn task defining functions produce consume lists map 
function map defined foldr saw foldr easily written consumer 
shall definition map consumer refine map xs destroy ls psi xs case psi xs just ys psi ys want define list producing function unfoldr aim replacing just 
possible second argument needs recursive call 
case perfectly possible definition map xs destroy psi unfoldr psi xs psi xs case psi xs just ys just ys problem definition 
producer unfoldr outermost level function definition 
way write map producer consumer 
doesn way define map producer consumer 
way problems 
consider happens want fuse map functions sit map map xs inline occurrences map rename get expression destroy psi unfoldr psi destroy psi unfoldr psi xs 
see inner destroy prevents unfoldr contacting outer destroy allowing destroy unfoldr rule apply 
solution rule lets destroy move inside destroy hopefully encounter unfoldr 
rule looks destroy destroy ls destroy psi destroy psi ls call rule destroy destroy rule 
easily shown correct unfolding definition destroy 
idea rule happens function defined unfoldr bring outer destroy rule 
continue example involving maps 
get apply new destroy destroy rule destroy psi destroy psi unfoldr psi psi unfoldr psi psi xs 
performing reductions give possibility apply destroy unfoldr rule destroy psi destroy psi unfoldr psi unfoldr psi xs 
applying destroy unfoldr rule performing reductions gives destroy psi unfoldr psi xs 
inlining simplifying give map function applies function element creating intermediate data structure 
seen define map terms destroy unfoldr 
common list processing functions 
zip fusion criticisms raised foldr build fusion suppose function recurses list 
henceforth call functions zip 
foldr build framework producer arguments section show destroy unfoldr fusion solves problem gracefully 
means example 
give example noted result completely general 
thing define function zip terms destroy unfoldr keeping mind fuse input lists 
turns quite easy 
zip xs ys destroy psi destroy psi unfoldr psi psi ys xs psi psi case psi just xs case psi just ys just xs ys see definition zip enables remove intermediate lists arguments 
consider function ascii table zip inlining zip gives ascii table destroy psi destroy psi unfoldr psi psi unfoldr just succ unfoldr noted consumer arguments argument need fixed 
important thing consumer argument time 
just succ 
gives opportunities apply destroy unfoldr rule 
doing give ascii table unfoldr just succ just succ 
inline 
performing reductions case case known give ascii table unfoldr just succ succ inlining unfoldr translating lambda pattern case yield ascii table go go case case just succ succ just go turn simplified reduction performing case case case known transformations ascii table go go case go succ succ see intermediate lists removed 
map xs destroy unfoldr psi xs psi xs case psi xs just ys just ys filter xs destroy unfoldr psi xs psi xs case psi xs just ys just ys psi ys foldr xs destroy xs psi xs case psi xs just ys psi ys unfoldr ni just succ repeat unfoldr na just undefined unfoldr const undefined 
standard list processing functions defined destroy unfoldr fusion accumulating parameters functions consume lists defined accumulating parameter 
defined accumulating parameter efficiency reasons 
want fuse functions remove intermediate lists currently sophisticated methods vk 
section show destroy unfoldr fusion achieve elegantly cases 
note give example result generally applicable 
functions consuming lists accumulating parameters expressed terms higher order functions foldl foldl 
functions known functional programmer 
function strict version allows compiler generate code usually efficient 
foldl example show destroy unfoldr rule deal accumulating parameters 
purposes define foldl roundabout way having locally defined functions 
foldl form simplifies transformations want 
foldl xs destroy xs acc psi xs acc xs acc xs case psi xs acc just ys acc acc seq acc acc ys seq function evaluates argument returns second argument evaluating 
way acc evaluated called recursively 
example 
consider function definition bar foldl function produces list consumed foldl 
goal examples remove intermediate list 
inlining foldl 
yield bar destroy unfoldr just succ acc psi xs acc xs acc xs 
gives opportunity apply unfoldr destroy rule 
doing give bar just succ acc psi xs acc xs acc xs 
thing inline 
applying transformations case case case known reduction definition bar acc xs xs acc acc acc xs seq acc acc succ xs assuming compiler spot strict second argument version bar efficient may hope 
notably intermediate structures foldl removed 
related removing intermediate data structures popular research subject received quite lot attention wad wad chi sf tm feg chi 
fegaras sheard zhou knowledge group attack problem fusing functions recurse multiple data 
extended previous method fusing functions sf handle wider class functions 
rely normalisation algorithm transforms function definitions 
approach powerful unclear compiler real programs input 
takano meijer responded original shortcut fusion generalising fusion law hylomorphisms tm 
start observing foldr build rule dual destroy unfoldr rule 
study focus fusing functions expressed hylomorphisms 
noted hylomorphisms generalisations foldr unfoldr functions transformation generalise corresponding transformations 
problem hylomorphisms unable express functions accumulating parameters expressed destroy 
show method fuse lists arguments function zip 
claim criticised hit develops theory able fuse zip functions 
trying extend foldr build rule handle zip functions 
approach modified foldr function notion 
initial simplicity foldr build rule disappear original foldr function usable requires list processing functions types changed 
accumulating parameters known problematic removing intermediate data structures techniques fail functions 
ideas developed tackle weakness fuse attribute grammars macro tree transducers vk 
methods handle quite large class functions deal easily functions accumulating parameters 
approaches heavyweight 
method require functions rewritten attribute grammars quite different functional language transformed 
transformation applied intermediate forms translated back 
method restricted form functions identified transforming 
cases transformations involved non trivial 
contrast method extremely simple probably handle large class functions 
proposed methodology removing intermediate data structures programs abstracting operations voi 
key idea generalised form build abstracts list constructors list manipulating functions 
technique possible remove intermediate structures cases 
quite simple elegant technique require programmer change functions fusion take place 
author suggests may automated similar chi 
believe possible result way shortcut fusion 
gives fuel opinion function unfoldr greatly appreciated gj 
gibbons jones note unfoldr useful deforestation foldr 
method remove lot intermediate lists destroy consumer restricted foldr 
investigated alternative known technique shortcut fusion call destroy unfoldr rule 
shown despite simplicity tackle problems shown difficult handle 
problems fusing functions accumulating parameters removing intermediate lists zip functions 
prototype implementation rules pragma glasgow haskell compiler 
rules pragma allows programmer specify left right rewrite rules compiler apply program 
allowed verify transformation works small examples 
needed implementation scale believe techniques developed foldr build rule 
interesting path see foldr build rule destroy unfoldr rule cohabit 
way compiler choose different implementations function order maximise fusion 

insightful comments discussing related mine 
am indebted gustavsson suggesting improvements helping examples space behaviour shortcut fusion 
supervisor david sands helped lot improve presentation 
referees valuable comments suggestions improvement 
etienne didier parigot gilles 
accumulative parameters technical report inria january 
chi chin 
safe fusion function expressions 
proceedings acm symposium lisp functional programming pages san francisco california june 
chi olaf 
type inference builds short cut deforestation 
proceedings acm sigplan international conference functional programming volume acm sigplan notices pages 
feg fegaras 
parametricity theorem program fusion 
technical report oregon graduate institute 
fegaras sheard zhou 
improving programs recurse multiple inductive structures 
acm sigplan workshop partial evaluation semantics program manipulation orlando florida june 
gil gill 
cheap deforestation non strict functional languages 
phd thesis university glasgow 
gj jeremy gibbons geraint jones 
unfold 
proceedings rd acm sigplan int 
conf 
functional programming icfp baltimore md usa sept pages 
acm press new york 
gill launchbury peyton jones 
short cut deforestation 
functional programming computer architecture pages copenhagen denmark june 
gs gustavsson david sands 
possibilities limitations call need space improvement 
proceeding sixth acm sigplan international conference functional programming icfp pages 
acm press september 
ham hamilton 
extending higher order deforestation transforming programs eliminate trees 
proceedings third scottish functional programming workshop stirling scotland august 
hit hu iwasaki takeichi 
extension acid rain theorem 
nd fuji international workshop functional logic programming pages village japan november 
world scientific 
jh peyton jones hughes 
haskell library report february 
jh peyton jones hughes 
haskell report february 
joh patricia johann 
short cut fusion proved improved 
taha editor proceedings second international workshop semantics applications implementation program generation volume lncs lecture notes computer science florence italy september 
springer 
launchbury 
zip fusion 
oregon graduate institute 
mar simon marlow 
deforestation higher order functional programs 
phd thesis university glasgow 
mfp erik meijer maarten fokkinga ross paterson 
functional programming bananas lenses envelopes barbed wire 
john hughes editor proceedings th acm conference functional programming languages computer architecture fpca volume lncs 
springer verlag 
pjs peyton jones santos 
transformation optimiser haskell 
science computer programming 
peyton jones tolmach hoare 
playing rules rewriting practical optimisation technique ghc 
haskell workshop 
san sands 
improvement theory applications 
gordon pitts editors higher order operational techniques semantics publications newton institute pages 
cambridge university press 
sf sheard fegaras 
fold seasons 
sixth conference functional programming languages computer architecture pages copenhagen june 
tm takano meijer 
shortcut deforestation calculational form 
simon peyton jones editor functional programming computer architecture san diego 
acm 
vk 
composition functions accumulating parameters 
technical report tud fi dresden university technology 
voi 
concatenate reverse map vanish free 
proceeding seventh acm sigplan international conference functional programming icfp 
acm press 
wad wadler 
better laziness lazy evaluation garbage collection compile time 
proceedings acm symposium lisp functional programming austin texas 
wad philip wadler 
views way pattern matching cohabit data abstraction 
th acm symposium principles programming languages munich germany january 
wad philip wadler 
theorems free 
th international conference functional programming computer architecture london september 
wad philip wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 
shortcut fusion improvement parametricity prove correctness optimisation weak ground tells expressions compute values transformation 
dealing transformations want know transformation improves program 
reasonable thing expect transformation improves programs improvement theory san 
give indications foldr build rule destroy unfoldr rule space improvements gs 
examples assume semantics gustavsson sands 
foldr build rule increases sharing give example showing foldr build rule increase sharing program 
sharing increased bits memory retained longer result higher memory demands program 
consider functions ones build map xs build foldr xs xs xs suppose expression map square ones element resulting list computed separately 
suppose inline definitions apply foldr build fusion 
reductions expression build see computation computed shared elements list 
noted original foldr build rule repeat definition similar ones 
definition probably lead increased sharing foldr build rule 
destroy unfoldr rule loses sharing turn destroy unfoldr rule 
dual foldr build rule expect examples decrease sharing program 
turns case 
consider functions foo xs destroy bar xs bar psi xs case psi xs just ys case psi xs just zs traverse traverse xs traverse xs foo strange looking function serves purpose example 
key thing note performs call psi xs twice 
suppose expression foo unfoldr traverse arbitrary big list 
happen foo try inspect list 
doing unfoldr traverse evaluated empty list 
done occur argument xs local function bar 
lazy evaluation sure computation xs inside bar shared foo 
see happens transform expression 
inline definition foo 
destroy bar unfoldr traverse bar 
opportunity apply destroy unfoldr rule 
doing inlining definition bar case traverse just ys case traverse just zs final expression traverse performed twice 
lost sharing 
