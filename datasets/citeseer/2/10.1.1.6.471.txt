mda programming languages michael university technology darmstadt informatik tu darmstadt de september open issues model driven architecture mda automatically transform platform independent model pim platform specific model psm source code currently possible domains uml profiles major goal minimize required interaction programmer designer steps general case 
idea define high level constructs programming languages related pim 
easier transform pim source code boost understandability code integration independent modules possible 
consider scenario software architect software development project uses mda approach designs application modeling pim unified modeling language uml conjunction domain specific uml profile arc 
second step pim transformed psm source code general steps performed automatically 
developer refinements step transformation possible 
refinements takes final solution generated source code away original high level design analysis phase 
leads common problem reading source code hard identify original intended design important mda approach 
programmer program code able understand generated code quickly sg 
furthermore distinction methods belong technical infrastructure really model business functionality awkward 
problem solved mapping high level designs language constructs extending languages general purpose higher level constructs 
high level means objects 
important mention objects superseded 
new concepts concentrate representation business functionality integration independently developed modules 
doing pim direct representation language leveraging factor understandability maintainability code 
section give example demonstrates advantages concept 
related discussed section concludes short summary brief discussion 
example pim shown system models small banking application result analysis phase 
system customers standard bank accounts custody accounts 
supported german national science foundation dfg part phd program enabling technologies electronic commerce darmstadt university technology 
custody account refers standard account owner 
customer necessarily account account exist customer 
furthermore account custody account unique key 
example pim easily seen uml diagram final transformation source code information hard recover 
example target platform ee ejbs required access account referenced customer result probably look shown listing 
listing ejb context new rmi narrow lookup comp env account account create 
account withdraw biggest problem code hard understand 
information classes account available single place code 
better representation pim separate intermodule relations associations aggregations compositions module term module module realized multiple classes 
furthermore distinguish explicit expressed uml diagram implicit relations 
implicit relations customer address regarded considered relations programmer wants take care 
source code inter module relations shown listing 
listing representation associations source code level component customer name customer account name accounts account name account customer name owner account customer name customers source code directly represents explicit relations multiplicities uml diagram 
names links taken uml diagram owner automatically generated depending multiplicity association name specified 
implementation classes model relations 
line specifies simple direct connection account named account 
third sixth line define undirected link account customer explicitly stating account customers customer zero accounts 
single source information explicit available 
listing code module shown 
listing source code pim module module security securities key security security security security module line part component listing contain inter module communication related code 
declares variables lines business methods lines 
module seen elaborated version interface definition declaration methods variables possible part component 
association definitions component seen module realization implementation definition business data functionality 
module definition definition relations represent uml diagram language level 
implementation module provided classes 
case realizes entire functionality module definitions available module listing listing 
listing source code implementation security security double quote ex 

security singleton pattern account balance quote ex 
buy security ex exchange securities security account withdraw quote 
line defines realization module part making possible access related account account customer object customer 
example fourth line current balance account accessed account balance seventh line method called account withdraw quote usually hiding fact variable account may directly may require lookup listing naming system 
possible clear representation business functionality data modules 
compiler able generate code access variables methods possibly supporting target platforms 
code seen listings easier understand leveraging possible deployability 
compared code generated current tools uml xml transformations looks similar shown listing proposed solution leads significant improvements terms code readability 
related widely recognized concepts offered oop technologies sufficient large scale programming quite suggested solutions define kind module component new structuring construct ps csc zen bw mo ml msl approaches lack explicit support code generation high level design tools 
matter fact code automatically generated uml diagrams software project 
generated code important formed easy understand possible debug maintain extend 
jiazzi taken example component oriented language allows define components typed connections fails areas 
component definition linking inherent part core language making impossible take advantage definitions programming core classes 
distinction business technical functionality provided possible program multiple platforms 
units ff ff supports modules separate linking link link units possible model general multiplicities uml diagrams 
summary shown direct representation pim language level especially modeling inter module associations worthy extension programming language mda development project 
open question concepts uml uml profiles exist handle domain specific particularities considered 
uml profiles obvious features integrated programming language draw broder 
aside discussing influence mda uml design new language concepts question arises areas effect design new language constructs 
narrowing design space high level language concepts cornerstones new ideas marked questions modeling concepts available uml currently adequately represented programming languages 
transformed code expressive 
features object level required higher level inheritance visibility 
features extended default datatypes datatype specifications 
features persistence life cycle management application servers containers worth represented programming language facilities 
design space new language constructs patterns impact design higher level language concepts 
patterns expose weaknesses programming languages solved 
depth survey areas done answer question missing really needed programming languages 
jonathan aldrich craig chambers david notkin 
architectural reasoning 
malaga spain 
ecoop 
arc architecture board 
model driven architecture 
technical report omg july 
document number 
bw martin chi wolfgang 
generic wrappers 
elisa bertino editor proceedings ecoop volume pages 
springer verlag june 
csc jo costa lus 
basic model typed components 
lecture notes computer science 
ff robert bruce findler matthew flatt 
modular object oriented programming units mixins 
proceedings third acm sigplan international conference functional programming pages baltimore maryland united states 
acm press 
ff matthew flatt matthias felleisen 
units cool modules hot languages 
proceedings acm sigplan conference programming language design implementation pages montreal quebec canada 
acm press 
sean matthew flatt wilson hsieh 
jiazzi new age components old fashioned java 
proceedings acm conference object oriented programming systems languages applications 
oopsla 
ml mira mezini karl lieberherr 
adaptive plug play components evolutionary software development 
proceedings acm th annual conference object oriented programming systems languages applications volume sigplan notices pages vancouver 
oopsla 
mo mira mezini klaus ostermann 
integrating independent components demand remodularization 
appear proceedings th acm conference object oriented programming systems languages applications 
msl mira mezini linda karl lieberherr 
component integration pluggable composite adapters 
software architectures component technology state art software development 
kluwer academic publishers 
ps pfister clemens szyperski 
objects 
proceedings international component users conference munich germany 
sigs 
sg richard omg staff strategy group 
model driven architecture 
technical report omg november 
zen matthias zenger 
type safe prototype component evolution 
technical report swiss federal institute technology inr lausanne switzerland 

