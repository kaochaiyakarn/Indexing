modeling spread active worms chen dept electrical computer engineering georgia institute technology atlanta ga email ece gatech edu active worms spread automated fashion flood internet short time 
modeling spread active worms help understand active worms spread monitor defend propagation worms effectively 
mathematical model referred analytical active worm propagation aawp model characterizes propagation worms employ random scanning 
compare model epidemiological model weaver simulator 
results show model characterize spread worms effectively 
code red worm example give quantitative analysis monitoring detecting defending worms 
furthermore extend aawp model understand spread worms employ local subnet scanning 
best knowledge model spread worm employs localized scanning strategy believe attempt understanding local subnet scanning quantitatively 
index terms security worm modeling active worms persistent security threat internet morris worm arose 
code red nimda worms infected hundreds thousands systems cost public private sectors millions dollars 
active worms propagate infecting computer systems infected computers spread worms automated fashion 
staniford show active worms potentially spread internet seconds :10.1.1.160.6250
great importance characterize monitor spread active worms able derive methods effectively defend systems 
years ago kephart white epidemiological model understand control prevalence viruses 
model biological epidemiology uses nonlinear differential equations provide qualitative understanding virus spreading 
white pointed mystery epidemiological model chen department electrical computer engineering university massachusetts amherst ma performed 
supported part nsf ani ani nsf career award ani air force research lab 
opinions findings recommendations expressed material authors necessarily reflect views national science foundation air force research lab 
gao dept electrical computer engineering univ massachusetts amherst ma email ecs umass edu kevin air force research lab information directorate brooks road rome ny email rl af mil fails predict virtually viruses slow global prevalence 
model referred analytical active worm propagation aawp model characterizes propagation worms employ random scanning 
take advantage discrete time model deterministic approximation describe spread active worms 
model captures characteristics spread active worms explains aforementioned mystery extent 
order evaluate model compare simulator 
experimental results show model effectively characterize propagation worms 
addition modeling spread worms attempt answer questions monitor spread active worms ac 
code red worm broke july th caida network networks monitor spread 
clear data collected networks reflect actual spread worm 
data reflect actual spread worm size network monitor infected machines 
results show monitoring network sufficient characterizing spread active worms accurately 
detect spread active worms timely fashion 
best knowledge effective worm detection mechanism available 
simple detection system uses unused ip addresses detect scans active worms 
help aawp model derive number ip addresses needed detecting spread active worms effectively 
simple detection system generate false alarms believe step understanding effectiveness detection system quantitatively 
defend spread active worms effectively 
perform study worm defending tool slow propagation worms model 
study quantitatively illustrates size address space needed slow code red worms effectively 
furthermore developing analytical model spread worm employing localized scanning strategy significantly difficult random scanning :10.1.1.160.6250
extend aawp model characterize spread worm employs localized scanning strategy code red ii nimda worms 
model shows worms employ localized scanning spread slower rate employing random scanning despite fact localized scanning potentially penetrate firewalls 
best knowledge attempt understanding local subnet scanning policy quantitatively 
remainder structured follows 
section ii describes active worms spread introduces parameters characterizing propagation 
section iii aawp model compare epidemiological model weaver simulator 
addition aawp model simulate spread code red worm 
section iv outlines applications aawp model include verifying correctness worm monitoring data developing detection system evaluating labrea defense system 
section extend aawp model worms employ local subnet scanning 
conclude section vi brief summary outline 
ii 
spread active worms section describe active worms spread introduce parameters spread active worms 
worm scanning models random scanning local subnet scanning 
active worm fired internet simultaneously scans machines attempt find vulnerable machine infect 
finds prey sends probe infect target 
successful copy worm transferred new host 
new host begins running worm tries infect machines 
invulnerable machine unused ip address reached worm poses threat 
worm spreading process machines functioning properly forcing users reboot computers kill processes may exploited worm 
infected machines vulnerable machines inclined infection 
worm detected people try slow 
patch repairs security hole machines defend worms 
infected vulnerable machine patched invulnerable machine 
speed spread active worms weaver hitlist idea 
long attacker releases worm gathers list potentially vulnerable machines network connections 
worm fired initial machine list begins scanning list 
worm start infecting machines list 
list exhausted worm start infecting vulnerable machines 
machines list referred hitlist 
worm infects hitlist rapidly uses infected machines stepping stones search vulnerable machines 
consider amount time takes worm infect hitlist hitlist acquired worm released infected short period time 
table shows parameters involved spread active worms 
different scanning mechanisms active worms employ random local subnet permutation topological scanning :10.1.1.160.6250
focus mechanisms random scanning local subnet scanning 
random scanning assumed computer internet just infect infected computers 
network pictured fully connected graph nodes represent computers arcs represent connections neighboring relationships pairs nodes 
topology called homogeneous mixing theoretical epidemiology 
aawp model model random scans 
local subnet scanning computers connect directly forming homogeneous mixing 
selecting targets randomly worms preferentially scan hosts local address space 
example nimda worm selects target ip addresses follows time address octets chosen 
time address octet chosen 
time random address chosen 
extend aawp model local aawp model section understand function propagation parameters analyze spread active worms employ local subnet scanning 
iii 
modeling spread active worms employ random scanning understand characteristics spread active worms employ random scanning develop aawp model uses discrete time continuous state deterministic approximation model 
section describe aawp model detail compare epidemiological model weaver simulator simulate code red worm 
deterministic approximation modeling assume worms simultaneously scan machines re infect machine infected 
assume machines hitlist infected start worm propagation 
suppose active worm takes time tick complete infection 
scan hits machine regardless machine vulnerable invulnerable infected unused ip address time takes worm finish communicating machine time tick 
assumption realistic simplify model significantly affecting results 
table parameters spread active worms parameters notation explanation vulnerable machines number vulnerable machines size hitlist number infected machines spread active time scanning rate worms average number machines scanned infected machine unit death rate rate infection detected machine eliminated patching rate patching rate infected vulnerable machine invulnerable number infected nodes size hitlist size hitlist size hitlist time second effect hitlist size cases patching take period second complete infection 
number infected nodes patching rate second patching rate second patching rate second time second effect patching rate cases hitlist entries take period second complete infection 
number infected nodes second infect machine seconds infect machine seconds infect machine time second effect time complete infection cases hitlist entries patching rate second 
fig 

modeling spread active worms employ random scanning cases vulnerable machines scanning rate scans second death rate second 
internet address space isn completely connected active worms scan entry addresses 
random scanning probability computer hit scan denote total number vulnerable machines including infected ones number infected machines time tick respectively 
theorem vulnerable machines including active worms spread infected ones infected computers average time tick infected machines scanning rate 
proof denote number newly infected machines time tick infected machines generate newly scans attempt infect machines 
prove scans equation holds prove equation induction vulnerable machines infected probability scan add equivalent newly infected machine suppose theorem true divide scans parts scans scan 
possibilities scan adding newly infected machine 
variable scan hits vulnerable machine infected 
means time tick true 
death rate patching rate time tick infected machines change vulnerable machines infected invulnerable machines total number vulnerable machines including infected ones reduced time tick number total infected expected newly infected machines 
machines time gives recursion process vulnerable machines left worm increase total number infected machines 
equation find characteristics active worms spreading 
example shows propagation active worms different hitlist sizes 
size hitlist increases takes worms time spread 
depicts example 
patching rate grows spread active worms slows 
complies intuition 
noted patching rate slower curves return zero 
draw part curves ignore falling part 
assume takes worms time tick infect machine 
display effect amount time takes infect machine worm propagation simply change time unit 
example draw curve time interval second amount time required complete infection 
worm needs seconds infect machine set time unit seconds change corresponding parameters period time 
case parameters time period seconds 
aawp model get result 
expresses number infected machines seconds shows effect time complete infection worm propagation 
worm propagation slowed time required infect machine increases 
change values parameters time complete infection aawp model observe active worms spread 
model quantitatively explain monitor spread active worms develop sensor detection system evaluate labrea tool defense system cover 
comparing aawp model epidemiological model weaver simulator epidemiological model nonlinear differential equation measure virus population dynamics fraction infected nodes birth rate rate infected machine infects vulnerable machines death rate 
solution equation 
fact easily deduce relationship birth rate scanning rate interesting code red worm july staniford independently model explain random constant spread rcs theory code red worm :10.1.1.160.6250
zou extended epidemiological model factor worm model takes consideration human countermeasure worm impact internet traffic infrastructure 
differences aawp model epidemiological model epidemiological model uses continuous time differential equation aawp model discrete time model 
believe aawp model accurate 
aawp model computer infect machines infected completely 
epidemiological model computer begins devoting infecting machines small part infected 
speed worm achieve number machines infected totally different 
epidemiological model considers patching rate time takes worm infect machine aawp model 
propagation worm possible nowadays promptly patch vulnerability computers assuming reasonable patching rate 
different worms different infection abilities reflected scanning rate birth rate time taken infect machine 
time required infect machine depends size worm copy degree network congestion distance source destination vulnerability worm exploit 
seen time infect machine important factor spread active worms 
aawp model consider case worm infect destination time epidemiological model ignores case 
fact uncommon vulnerable machine hit scans time 
models try get expected number infected machines size hitlist total number vulnerable machines scanning rate birth rate death rate 
epidemiological model easily deduce closed form topology orientation mail worms peer peer worms 
focus active worms select destinations randomly employ local subnet scanning code red nimda worms 
aawp model built homogeneous mixing topology sufficient 
shows comparison models vulnerable machines hitlist entry birth rate time tick death rate time tick parameters 
takes epidemiological number infected nodes aawp model epidemiological model time tick cases vulnerable machines hitlist entry scanning rate scans time tick birth rate time tick death rate time tick 
patching time period time tick complete infection aawp model 
measurement code red worm spread real data caida 
fig 

comparing aawp model epidemiological model number infected nodes weaver simulator aawp model epidemiological model time second cases vulnerable machines hitlist entries scanning rate scans second 
time period seconds complete infection weaver simulator aawp model 
death rate zero aawp model epidemiological model 
patching aawp model 
number infected nodes time hour simulation spread code red worm vulnerable machines starting single machine scanning rate scans second death rate second patching rate second time period second complete infection 
fig 

real data caida simulated code red worm aawp model model time ticks enter equilibrium stage aawp model needs time ticks 
entering equilibrium stage epidemiological model totally infects vulnerable machines occupying vulnerable machines aawp model infects vulnerable machines occupying vulnerable machines 
shows model better explain low level worm prevalence 
weaver wrote small simulator worm spread 
simulator uses bit round variant rc generate permutations random numbers 
modified condition simulator fit assumption 
newly infected machines previous time tick activated time current time tick different clocks 
shows growing infected nodes time models weaver simulator parameters total vulnerable machines hitlist size scanning rate scans second death rate zero patching time period seconds infect machine 
shows aawp model weaver simulator results overlap 
model weaver simulator take minutes infect vulnerable machines epidemiological model takes minutes 
simulating code red worm july th code red worm infected computers hours 
worm spreads probing random ip addresses infecting hosts vulnerable iis exploit 
caida collected real data measure spread code red worm 
data collected locations network ucsd networks lawrence berkeley laboratory lbl 
data hosts considered infected sent tcp syn packets port nonexistent hosts networks 
shows number infected hosts time 
suppose vulnerable machines internet code red worm starts single machine performs scans second takes second infect machine 
shows spread simulated code red worm aawp model death rate second patching rate second 
patching rate curve goes slightly worm spreads day 
iv 
applications aawp model model reflect spread real worms time resolve practical task 
section apply aawp model monitoring detecting defending spread active worms 
monitoring spread active worms monitor spreading rate active worms interesting task 
come attention caida collected real data network ucsd networks lbl 
collected data reflect actual propagation code red worm 
course data lower bound spread code red worm 
deviate reality 
suppose collect data addresses estimate spread active worms 
network special case addresses 
addresses number infected nodes simulated code red worm addresses monitored addresses monitored addresses monitored addresses monitored time hour fig 

collecting data different address spaces 
cases vulnerable machines starting single machine scanning rate scans second death rate second patching rate second time period second complete infection 
considered unused ip addresses 
scans infected machine hit address space counted counted 
probability scan hits space active worms generate scans time tick probability infected machine observed time tick furthermore denote number observed infected machines time tick time tick infected machines 
events infected machines observed independent 
number newly observed infected machines satisfies binomial distribution 
time tick expected number newly observed infected machines aawp model evaluate effect different address spaces collect data 
shows example simulate code red worm 
curve addresses monitored close real worm propagation aawp model 
curve addresses monitored grows slower rate curve addresses monitored time better representation curve addresses monitored 
curve addresses monitored gives worst results understood equation making curve horizontal line axis 
analysis conclude monitoring addresses gives better representation propagation active worms 
address space smaller adequate observe actual spread active worms 
detection speed goals modeling spread active worms able detect 
simple useful sensor detection system aawp model evaluate performance 
methodology vital detect active worms effectively 
near active worms may spread internet short period time making average detection time critical 
easy simple detection system 
put sensors internet monitor set unused ip addresses 
random scans active worms hit ip addresses detected sensors 
worms designers know unused ip addresses monitored sensors launch dos attacks sending packets sensors causing generate false alarms 
sensors intelligence distinguish scans active worms dos attacks requires complex sensor detection system 
challenge scope 
simple detection system interesting questions need answered unused ip addresses monitored sensors order detect active worms rapidly 
number ip addresses monitored average time required detect worms 
performance sensor detection system performance sensor detection system depends mainly detection time 
ideal detection system able detect active worms propagation 
average detection time performance indicator sensor detection system 
denote detection time 
deduce relationship average detection time number unused ip addresses monitored 
suppose unused ip addresses monitored sensors 
single scan probability detected sensors scans probability scan detected sensors indicate probability worm detected time tick note time tick vulnerable machines active worms increase total number infected machines 
assume sensors fail detect active worms people detect means infected machines generate scans expected value detection time formula aawp model shows relationship average detection time number unused ip addresses monitored sensors active worms spread varying hitlist sizes 
know case simulated code red worm size hitlist monitoring addresses average detection time minutes monitoring addresses average detection time increases hours 
want detect worm hour unused ip addresses monitored sensors 
hand worm larger hitlist spreads faster detected shorter period time 
example monitoring ip addresses need hours detect worm starting single machine need minutes detect worm hitlist machines minutes detect worm hitlist machines 
table ii shows sample results 
simple detection system easily extended complex systems 
example reduce number false alarms sensors receive scans period time tick system detect worms 
set number scans received sensor generate alarm period time tick 
value generates false alarms 
probability detection reduced 
definition larger equation shows effect sensor detection system 
large value reduce number false alarms reduces performance system 
reliability performance value tradeoff 
system large monitor addresses completely detect worms 
example addresses space monitored system detect worms internet infected 
effectiveness defense system goal modeling spread active worms defend active worms 
extend aawp model analyze labrea tool put forward slow spread active worms 
labrea labrea tool takes unused ip addresses network creates virtual machines answer connection requests 
labrea replies connection requests way causes machine get stuck 
intentionally hold connection open expected value detection time second log size hitlist size hitlist size hitlist log number unused ip addresses monitored sensors effect hitlist size number scans received expected value detection time second log number scans received number scans received number scans received log number unused ip addresses monitored sensors effect number scans received hitlist entry fig 

performance sensor detection system 
cases vulnerable machines scanning rate scans second death rate second patching rate second time period second complete infection 
table ii average detection time different sizes different numbers unused ip addresses monitored sensors second number ip addresses monitored size hitlist size hitlist size hitlist long wishes 
labrea tool monitors traffic destined unused ip addresses 
scan hits ip addresses virtual machines labrea tool reply establish connection infected machine 
connection long time 
apply labrea tool extensively attempt answer question unused ip addresses monitored labrea tool defend active worms effectively 
performance labrea tool defense system assume labrea tool installed internet monitoring unused ip addresses 
suppose scans infected machines search internet 
labrea tool trap scanning threads time tick scanning threads trapped 
scanning threads left 
denote average number scans number newly infected machines time tick respectively 
consideration labrea tool affect total number scans extend equation recursion process vulnerable machines left worm increase total number infected machines 
noted set formulae outlined turn equation 
shows simulation code red worm spreading 
labrea tool monitors unused ip addresses worm spread slightly affected 
unused ip addresses monitored labrea tool able effectively defend worm propagation 
see total number infected machines stops increasing vulnerable machines infected labrea monitors unused ip addresses 
labrea tool really slow spread active worms 
unused ip addresses needed defend active worms effectively 
easy persuade network administrators install labrea 
get unused class subnet address space addresses publicly advertised install labrea tool monitor traffic subnet start fighting active worms 
number infected nodes monitor unused ip address monitor unused ip addresses monitor unused ip addresses monitor unused ip addresses monitor unused ip addresses time second fig 

performance labrea tool detection system 
cases vulnerable machines starting single machine scanning rate scans second death rate second patching rate second time period second complete infection 
modeling spread active worms employ local subnet scanning simply selecting destinations random code red ii nimda worms preferentially search targets local address space 
part extend aawp local aawp model understand characteristics spread active worms employ local subnet scanning 
model aawp model model uses deterministic approximation 
focus active worms scanning policy ignore death rate patching rate simplify model 
function firewalls considered 
suppose worm scans internet follows time address octet chosen time address octets chosen time random address chosen regard random scanning special case local subnet scanning assume vulnerable machines evenly distributed subnet identified octets 
subnets classified different kinds networks special subnet denoted subnet type larger hitlist size 
subnets having octet special subnet denoted subnet type 
subnets denoted subnet type 
different kinds networks different sizes 
type subnet networks hitlist size 
denote size hitlist subnet type respectively 
denote average number infected machines subnet type respectively 
denote average number scans hitting subnet type respectively 
time tick relationship average number scans hitting subnet type average number infected machines different subnets item average number scans coming local subnet octets 
second item average number scans coming neighboring subnets octet 
item average number scans coming global subnets 
subnet scans randomly hit targets modeled aawp model 
total number machines total number scans equation number infected machines time tick 
recursion process vulnerable machines left 
time tick total number infected machines formulae understand charac local subnet scanning effect hitlist distribution 
different generate different patterns spread worms 
cases considered random scanning case means distribution hitlist effect spread active worms 
gives local subnet scanning change spread active hitlist distribution worms case 
similar nimda worm case select different distributions hitlist just 
evenly distributed give best performance putting special subnet gives worst performance 
shows number infected nodes time tick local subnet scanning different hitlist distributions 
cases number infected nodes time tick local subnet scanning uneven hitlist distribution 
cases fig 

modeling spread active worms employ local subnet scanning cases vulnerable machines evenly distributed subnet scanning rate scans time tick time period time tick complete infection 
hitlist distribution affect spread active worms 
local subnet scanning hitlist uneven distribution fix stands hitlist uneven distribution centralization hitlist machines special subnet 
surprisingly shows case local subnet scanning slows propagation active worms 
discuss worm designers select scanning technique section 
cases see local subnet scanning hitlist distribution influence spread active worms distribution gives best performance 
addition hitlist concentrated special subnet local subnet scanning slows spread active worms 
discussion local subnet scanning policy model implies local subnet scanning may slow spread active worms 
designers active worms technique 
main reasons firewalls protect vulnerable machines 
local subnet scanning allows single copy worm running firewall rapidly infect local vulnerable machines 
subnet belongs organization lot similar machines 
expected machine security hole high probability machines network security hole 
vi 
aawp model analyze characteristics spread active worms 
aawp model deterministic approximation gives realistic results compared epidemiological model 
simulation results show model better explain mystery 
aawp model simulate code red worm parameters vulnerable machines starting single machine scanning rate scans second death rate second patching rate second time period second complete infection 
code red worm example apply model answer different questions 
model assert address space ip addresses large obtain realistic results address space smaller addresses large effectively obtain realistic information spread worms 
second aawp model evaluate performance simple sensor detection system 
unused ip addresses needed sensors detect code red worm hour 
worms larger hitlist detected shorter period time spread faster rate 
simple sensor detection system step practical detection system detects active worms scanning frequencies source ip address distributions 
plan model evaluate type detection system 
aawp model evaluate performance labrea tool defense system 
similarly address space unused ip addresses needed labrea defend code red worm effectively 
plan apply model assess publicly available defense systems compare relative performance different defense systems 
part ongoing extend aawp model model understand spread active worms local subnet scanning 
distribution hitlist affect local subnet scanning policy 
particular worm evenly distributed hitlist spreads fastest rate 
hitlist concentrated subnet spread active worms slowed 
model vulnerable machines assumed evenly distributed subnet 
plan study effect distribution vulnerable machines order get accurate results 
russell code red ii worm incident analysis securityfocus tech 
rep aug 
russell nimda worm analysis incident analysis securityfocus tech 
rep sept 
cert cc cert advisory ca nimda worm www cert org advisories ca html sept 
song malan stone snapshot global internet worm activity research com media files snapshot worm activity pdf arbor networks tech 
rep nov 
staniford paxson weaver wn internet spare time proc :10.1.1.160.6250
th usenix security symposium security 
kephart white measuring modeling computer virus prevalence proc 
ieee computer society symposium research security privacy may pp 

kephart topology affects population dynamics langton ed artificial life iii 
studies sciences complexity pp 

kephart white directed graph epidemiological models computer viruses proc 
ieee computer society symposium research security privacy may pp 

white open problems computer virus research oct virus bulletin conference 
weaver worms potential fast internet plagues www cs berkeley edu html 
moore spread code red worm www caida org analysis security code red analysis xml 
zou gong towsley code red worm propagation modeling analysis th acm conference computer communication security nov 
caida caida analysis code red www caida org analysis security code red 
welcome tactical strategic labrea www net labrea labrea txt 
labrea www net labrea 
