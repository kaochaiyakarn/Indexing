case reuse software markus derek bridge university college cork ireland bridge cs ucc software tool reuse 
define goal directed snippets source code written tutorial purposes show program library facilities achieve task 
tool allows users specify goal free text situation source code working 
system combines text retrieval spreading activation semantic net representation source code 
long aspiration software industry software development proceed part process reuse components 
anticipated benefits improvements programmer productivity software quality 
years researchers looking ways providing software support programmers engaged software reuse see section 
efforts concerned retrieval reusable components especially source code repositories 
search engines scan repositories quickly human programmer 
challenge course equip search engine ways recognising items visits potential fulfil user needs 
processes retrieval largely subject research efforts 
left human programmer example adapt retrieved components integrate software 
research report likewise concerned retrieval reusable components 
lot research software supported reuse draw ideas case reasoning cbr 
cbr cycle ap retrieve reuse revise retain obvious parallels processes involved software reuse ta 
section describe reusable components system stores retrieves 
section describes architecture operation system retrieval explaining text retrieval semantic net retrieval 
section results experiments system 
describe related research section 
research funded part st enterprise ireland 
modern programming languages especially object oriented languages libraries reusable components class definitions 
libraries large 
case java example standard class library sdk contains approximately class definitions java interfaces 
want easier programmers resources contained libraries 
may especially helpful novice programmers familiarity contents standard libraries may low 
experienced programmers find position novices software developing requires knowledge technologies familiar 
cbr systems software reuse class definition library treated case 
cases supposed characteristics class definitions library 
case contextualized piece knowledge representing experience teaches lesson fundamental achieving goals reasoner ko 
cases case base live definition previous paragraph 
cases contains representation call 
parts 
part snippet source code case java 
snippet shows accomplish task java library components 
crucially shows library components 
goal directed part statement goal free text 
smaller shown 
widely available printed form world wide web ch 
capture howto knowledge thought kind faq 
hand crafted tends ensure addresses programmer needs 
effort crafting borne library authors interested promoting library 
facilitate reuse levels 
hand direct attention programmer facilities provided library encourages reuse facilities 
provision hyperlinks library api increase likelihood 
hand show typical usage pattern involving ordinated multiple library facilities 
programmers may able adapt usage patterns expressed stretches source code needs 
software tool recommends overview system developed helps programmers solve common problems recommending howto knowledge embodied case base 
expect programmers system actively writing program find quite specific goal due lack familiarity import java net import java io goal text read directly url source code public class public static void main string args throws exception url yahoo new url www yahoo com new new yahoo 
string null system 
println close language facilities uncertain solve 
programmer example know define export remote object need reminded open text file reading 
seen contains free text statement problem solves goal text 
user express goal query goal text free text 
standard text retrieval techniques retrieve relevant 
describe design part system little detail section 
allowing user provide query statement looking query goal text system different numerous search engines including ones built support software reuse 
suspicion borne results experiments section matching goal texts query give especially results 
programmer actively writing program tell looking 
addition goal text query contain source code written 
default source code class definition user currently editing user explicitly highlight section source code context surrounds part code know write 
addition doing text retrieval goal texts system attempt match query source code source code snippets code 
matching done spreading activation semantic net 
described detail section 
believe system faithful strong conceptions cbr 
user problem query described goal situation 
text retrieval user goal text retrieval modified version dig open source search engine written designed web sites 
set cases dig produce inverted index goal texts 
index entries produced word stemming exclude list words 
retrieval dig thesaurus 
query goal text word stemming removal words list treated purely conjunctively 
cases scored counting word stems synonyms query match word stems cases 
semantic net retrieval user situation store source code displayed user 
support retrieval chosen treat source code raw text built index dig 
think appropriate reasons programming language keywords recur low predictive power 
identifiers tend short relatively non descriptive 
example variable button called 
authors justify practice short situated context larger software system 
non identifiers reduces likelihood true hits 
identifiers meaningful user authors may variety idiosyncratic naming schemes 
example variable holds unique numeric student identifier called student num variations reduce likelihood true hits 
purely textual approach ignores potentially valuable structural information conveyed source code class membership message sending subclassing 
www org data extracted info free cut version pro 
decided system extract structure snippet source code raw source code retrieval 
decided express essential aspects structure snippet code semantic net 
placed requirements process constructing activating net code snippets wholly automatic 
allows easy incorporation new case base 
robust possible face incompleteness ill formedness source code 
needed reasons 
firstly ellipsis common author may elide code unimportant lesson conveyed 
secondly query source code development typically incomplete may compile 
approach parser build net parse trees 
antlr translator generator comes java grammar 
modified parser antlr generated face compiler errors output parse tree parse tree contain source code token stream possible 
net constructed walking parse tree 
contains kinds node case class interface method variable 
case node constructed 
class nodes interface nodes created unique class identifier java interface identifier encountered 
method nodes created unique method identifier encountered method headers defining method blocks code invoking method 
method identifier qualify new node exists method node method name signature including return type class interface 
variable nodes created declaration instance variable class variable 
ignore formal parameters local variables consider variable declarations variable accesses 
net contains kinds relationship semantics currently plays part retrieval relevance subclass implements member invokes 
net contains relevance arc case node particular class method variable nodes created source code 
www antlr org source code declares class interface extends class implements interface corresponding case nodes linked subclass implements arcs appropriate 
class interface nodes linked member arcs nodes members 
possible members inner classes variables declared class interface methods defined class interface 
method body contains statement invokes method kinds arc created possible 
firstly invokes arc method nodes client method method invoked 
secondly attempt link node invoked method class interface node member arc arc exist 
method invoked implicitly explicitly sending message method linked containing class node 
method invoked sending message variable contains object type variable determined source code possible gives class interface node method linked 
note limitations 
firstly code may incomplete variable declaration may snippet case arc created 
secondly java dynamic method binding means type variable source code may fully determine method class 
class method invoked prefixing call class name enabling method class straightforwardly linked 
arcs weights initialised creation 
weights increased currently factor time relationship repeated source code method body contains invocation method 
rules net pragmatic approximation source code structure 
due particular possibility incompleteness ill formedness source code may wholly faithful intended semantics code 
believe quality analysis get kind retrieval system supports 
fragment net corresponding shown 
nodes string exception classes omitted interests compactness 
source code construct net 
query source code contrast activate net 
query source code parsed parse tree walked search identifiers 
class identifier class nodes identifier activated 
class variable instance variable declaration variable nodes identifier type activated 
method identifier method nodes identifier signature including return type activated 
current implementation ignores namespaces java packages role java import statements 
mean equal identifiers different packages incorrectly represented single node net 
url reader url case buffered reader input stream system reader open main stream close println semantic net fragment key case node class node method node relevance arc member arc invokes arc fact initial activation exclusively identifier equality 
inexact string matching algorithm compare identifiers query source code node labels semantic net 
initial activation multiplied degree similarity 
current implementation inexact string matching simplistic computed size common prefix divided length identifier query source code 
search relevant case nodes implemented spreading activation net 
time point node spreads proportion activation received previous time point immediate neighbours 
spread proportion presently simulate idea activation decays travels 
forms basis stopping criterion see 
amount activation spread particular arc modified multiplying arc weight 
node spread new activation amount activation threshold amount presently 
node position spread activation maximum number time points elapsed currently spreading activation terminates 
case nodes received highest total activation retrieved 
experimental results collected web 
came different sources reduces dependence results style 
comprises lines text 
snippet source code goal text 
unfortunately textual descriptions associated original unsuitable 
descriptions insufficiently goal oriented 
describing problem solves focused lines code contribute solution 
decided write goal texts experiments 
experimental methodology ablation study leave methodology ab 
case case base selected turn replacement query created selected case manner described query evaluated full case base 
query successful case created top retrieved cases measure proportion times happens 
explain create query goal text create query source code 
asked experienced java programmers look independently different subsets case base 
saw source code 
looked asked write sentence describing problem solution 
means obtained query goal texts case 
goal texts obtained shown copy url output stream read url experiments constructing query query goal texts chosen random 
stopwords removed word stemming applied chosen goal text 
proportion text deleted random 
remainder submitted ht dig 
approach loosely simulates users query goal texts quite fragmentary comprising keywords 
part query query source code activate semantic net 
needed simulate idea user working class definition submits query 
class definition may incomplete ill formed 
delete randomly chosen proportion nodes parse tree remainder activate net 
described query creation case involves random deletion portions goal texts source code 
places requirement cross validation ensure report results unduly favourable unfavourable random selections 
sources include java sun com docs books tutorial examples com accuracy query source code query text experiments fold cross validation 
figures show results 
particular plots retrieval accuracy retrieval mode separately 
see query source code query goal text supplied gets higher retrieval accuracy 
source code retrieval marginally poorer performance ablation climbs slightly steeply achieves retrieval accuracy goal text retrieval 
experimental results source code retrieval may better practice random ablation source code result query source code structurally quite similar original especially lower levels ablation 
results obtained combining retrieval scores forms retrieval weighted average forms retrieval weighted equally 
course guarantee forms retrieval treated equally normalisation scores may imperfect 
tried weighting schemes shown results different 
semantic net contains approximately nodes arcs 
system written java 
running java interpreter ghz pentium mb ram takes approximately seconds average run single query slightly half time run modified parser 
optimised compiled version system run faster 
possible obtain negligible response time redesign system incremental time fashion background activity 
related combined results literature reports numerous systems built support software reuse 
approaches vary widely 
purely textual retrieval 
example mbk software documentation comments manuals indexed having regard lexical affinities statistical distributions allow standard ir techniques 
pf software components described facets features values drawn expert defined controlled vocabularies 
classified facets classes assigned experts conceptual distance graph 
user queries take form 
similar flexible approach reported os 
ir approaches classification approaches real representation content code 
system de uses system frames represent large software system 
emphasis representing system actions 
knowledge base produced manually intensive task 
user queries expressed frames unfilled slots natural language 
think advantage approach contrast semantic net produced wholly automatically queries comprise code text 
far greatest amount related uses cbr focusing case retrieval 
ambitious cbr system example proposed fe 
system design combines text retrieval component documentation similarity retrieval case base software components represented loom 
cases represent classes methods described cookbook recipes 
cookbook recipes may correspond calling 
loom representation captures kind structural information extract parse trees 
certain compo nents representation especially concerned case justification created automatically 
te information repository java class definitions extracted java reflection facilities information index repository 
addition knowledge engineers encode information data types adts 
class indexes high degree similarity features adt indexed adt 
user query possibly incomplete class interface 
potential weakness user specify query sufficiently way probably knowledgeable know class definitions repository relevant may find system limited value 
concerted efforts conducted gomes university coimbra portugal 
earlier gb gb emphasis quite deep representation software components 
specifically called function behaviour case representation attempting express component 
attention confined cases written vhdl simple hardware description language 
go go go attention moved software design 
cases represent designs design patterns expressed class diagrams unified modeling language uml 
similarity retrieval exploits identifiers class attribute method names structural relations uml diagrams 
semantic relations identifiers wordnet 
candidate cases retrieved fashion heuristically guided structural mapping algorithm sets user partial design retrieved cases 
unusual providing support automatic adaptation user design system procedural knowledge enables attempt apply retrieved design user design 
cbr corporate level support organisation learning software development projects je 
uses cbr give concrete realisation idea experience factory 
obviously addresses somewhat broader goals 
tool retrieval software 
user specify goal text current situation code writing 
system uses textual retrieval spreading activation semantic net achieve promising results 
wish take broader view supporting design oriented activities coding ones 
expect continue pursue idea retrieval user goal situation 
ab aha refining conversational case libraries leake plaza eds procs 
second international conference case reasoning lnai pp springer 
althoff birk von cbr experimental software engineering lenz bartsch sp rl burkhard wess eds case reasoning technology foundations applications lnai springer pp 
ap aamodt plaza case reasoning foundational issues methodological variants system approaches artificial intelligence communications vol pp ios press 
basili rombach experience factory encyclopedia software engineering vol pp wiley 
ch chan java developers addison wesley de devanbu brachman selfridge ballard knowledge software information system communications acm vol pp 
fe fern ndez gonz lez mez hern ndez ez supporting object reuse case reasoning smith faltings eds procs 
third european workshop case reasoning lnai springer pp 
gb gomes automatic conversion vhdl programs cases schmitt eds procs 
workshop programme third international conference case reasoning 
gb gomes learning user preferences case reuse eds procs 
european workshop case reasoning lnai springer pp 
go gomes pereira analogical reasoning promote creativity software reuse weber von eds procs 
workshop programme fourth international conference case reasoning pp 
go gomes pereira paiva case retrieval software designs wordnet van harmelen ed procs 
th european conference artificial intelligence pp 
go gomes pereira paiva cbr automation software design patterns craw preece eds procs 
sixth european workshop case reasoning lnai springer pp 
je althoff decker nick corporate information network coin fraunhofer experience factory weber von eds procs 
workshop programme fourth international conference case reasoning pp 
ko kolodner case reasoning morgan kaufmann 
mbk maarek berry kaiser guru information retrieval reuse hall ed landmark contributions software reuse reverse engineering seminars os hendler prieto az braun computing similarity reuse library system ai approach acm transactions software engineering methodology vol pp 
pf prieto az freeman classifying software reusability ieee software vol pp 
ta althoff case reasoning reusing software knowledge leake plaza eds procs 
second international conference case reasoning lnai springer pp 
te powell retrieval java classes case reuse smyth cunningham eds procs 
fourth european workshop case reasoning lnai pp springer 
