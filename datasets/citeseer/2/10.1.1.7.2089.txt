universal scripting framework lambda ultimate little language olin shivers mit ai lab cambridge mass usa 
little languages approach systems programming flawed inefficient fragile error prone difficult compose 
better solution embed task specific sublanguages powerful syntactically extensible universal language scheme 
demonstrate embeddings implemented scsh scheme programming environment unix systems programming 
embedded language highlevel process control notation second provides awk processing 
embedding systems way powerful technique example embedded awk system implemented code required standard awk significantly expressive counterpart 
programming tools built idea little languages small interpreters implementing programming language tuned specifics specialised task domain 
approach systems building unix provides host little language processors 
example unix language interpreters support notations tuned specialised task domains task interpreter regular expression string transforms sed pattern matching awk type setting tbl eqn dependency directed recompilation file system tree walking find program invocation composition sh little languages complement unix toolkit philosophy operating system provides mechanisms composing little language components larger systems fact principal interface doing little language shell 
concurrency parallelism programming networking security lecture notes computer science pages editors jaffar roland yap springer 
case little languages programming language notation expressing computation 
restricting specific task domain tune notation needs domain computations 
language understood utility example general programming language specially adapted expressing dependencies components system 
sacrificing generality rewarded notational compactness clarity 
unix little languages philosophy programmer suite specialised languages linguistic toolkit systems implementation 
programmer write component system language best suited requirements component 
constructed components composed pipelines 
principle approach provides flexible powerful method constructing systems 
practice little languages number problems 
problems little languages problem little languages approach languages usually ugly idiosyncratic limited expressiveness 
little languages similar slightly different 
little language different user required master handful languages remembering trivial distinctions unnecessarily increasing cognitive burden tools 
bizarre syntactic quirks little languages notorious 
example wellknown problem syntax distinguishing tab space programmers years 
programmer decides implement little language start scratch implement entire programming language 
designer implementor unable concentrate solely task specific aspects design 
basic linguistic elements loops conditionals variables subroutines reinvented re implemented 
add confusing unnecessary linguistic proliferation approach produce high quality language design 
temptation hurry details get interesting parts design task specific elements 
basic programming substrate thought implemented task specific elements design denied implementor full consideration 
produced little language half baked variable scoping discipline weak procedural facilities limited set data types 
implementing little language standalone interpreter executes separate address space system component implemented little language typically implemented standard input standard output text transducer interacts system components arms length pipes 
components opportunity interact ways require sophisticated data structures patterns control transfer 
forcing data communicated component component linear byte stream implies cost repeated parsing unparsing operations component interface 
practice leads fragile programs rely heuristic error prone parsers limited regular expression matchers 
alternate approach alternate approach choose powerful syntactically extensible programming language scheme embed little language 
benefit focus allows tool designer implementor concentrate elements language 
standard programming constructs loops variables procedures conditionals data structures forth taken wholesale underlying glue language needed 
means greater chance designer getting basics right really leveraging enormous design effort put designing scheme language 
designer able exploit design effort represented scheme language implementor efforts 
embedding scheme gets interpreters native code compilers free 
designer task easier doesn start scratch devote time thought task specific elements little language 
base language limited designer didn time resources implement features real programming language 
user doesn learn different little languages just scheme plus set base primitives application 
different little languages embedded scheme components written different little languages interact sophisticated data structures patterns control flow available scheme 
exemplars approach embedded little languages scheme 
high level process control notation equivalent notation provided unix shells constructing pipelines processes performing redirection forth 
second detailed example embedding awk little language scheme 
systems implemented scsh portable unix programming environment built scheme 
scsh wide variety systems programming tasks cell phone interfaces mobile web browsers cad tools log analysers servers network tools 
chief relevance provides interface scheme underlying operating system suitable platform experimenting embedding systems oriented little languages scheme 
scsh process notation scsh notation controlling processes takes form expressions notation embedded inside standard scheme code 
basic elements notation process forms extended process forms redirections 
extended process forms redirections extended process form specification unix process run particular environment epf pf pf process form redirection specs 
types redirection spec common 
file name open file read 
file name open file write 
object object printed representation 
file name open file append 
file descriptors default input output redirections respectively 
redirection implicitly 
output redirection 
means output file named scheme variable input redirection 
usr shivers login means read usr shivers login 
implicit important feature process notation provides escapes general scheme computation little language 
examples redirection 
vector ref fv 
tmp buf redirections cause file fv opened standard input file tmp buf opened append writes standard error 
redirection 
object causes input come printed representation object 
example 
quick brown fox jumped lazy dog causes reads standard input produce characters string 
note object implicitly connect computed scheme string process standard input 
append process forms process form specifies computation perform independent unix process 
types process form common scheme code pf pf prog arg arg run scheme code fork 
simple pipeline default exec program 
default case prog arg arg implicitly 
variables substituted command line exp exp forms 
extended process forms scheme process forms extended process forms scheme 
different notation expressing computation scheme expressions 
extended process forms scheme programs embedding inside special scheme forms 
basic scheme forms extended process forms exec epf run 
exec epf epf current process 
epf fork epf background return pid 
run epf run epf return exit status 
special forms macros expand equivalent series system calls 
definition exec epf macro non trivial produces code handle redirections set pipelines 
definitions run macros simple epf fork exec epf epf run epf wait epf shows series examples employing mix scsh process notation scheme 
note regular scheme provide control structure variables linguistic machinery needed script fragments possible strategy embedding specialised notation scheme 
awk scheme second case study awk language pattern directed processing 
part design task factor language basic components record field system rule pattern directed control structure 
components implemented separately scheme design 
allows mix match components task may require components 
factoring allows user degree extensibility provided record library doesn serve needs full power scheme implement primitives plug pattern matching control structure modular fashion 
field record readers awk programs iterate sequence records processing turn 
awk limited support specifying record field structure input stream 
programmer data structure complex parsed simple mechanisms luck 
scheme design provides extensible toolkit constructing procedures read records parse component fields 
toolkit easy build record readers typical cases way limits programmer constructing arbitrarily complex input parsers 
file exists 
resource file exists run merge load server 
run crypt key 
mbox crypt 
mbox decrypt mailbox 
run cc file flags compile file flags 
preprocess file current directory pipe input cc 
foo err binary foo exe 
run compiles parallel 
file outfile replace extension file exe replace extension file err cc outfile 
file 
directory files delete file dir containing string bin cwd dir file zero 
run grep bin file delete file file directory files fig 

example process notation fragments reading records basic function constructing record reader record reader elide reader record reader function constructs reader procedure reads delimited records input stream 
optional parameter string delimiter characters characters terminate record 
optional elide 
parameter true contiguous sequence delimiter characters taken mean single record boundary 
default values elide 
newline false respectively expression record reader constructs simple line reading procedure define read line record reader notice record reader procedure doesn read records constructs record readers 
note special record reader 
awk programmer limited span record readers provides 
see free general scheme define arbitrary record readers facility unavailable client awk 
parsing records fields awk program obtained record process parses record component fields 
awk system provides functions constructing field parsers 
procedures allow programmer define record field structure terms regular expressions field splitter regexp num fields parser infix splitter regexp num fields parser suffix splitter regexp num fields parser constructed parsers map record string list field strings 
regular expression passed field splitter function defines fields parsed record 
example parser field splitter produces function extracts digit sequences string define yale beat harvard field splitter 
functions differ interpretation regexp parameter procedure pattern field splitter matches fields infix splitter separates fields suffix splitter terminates fields regular expression passed infix splitter function match field separators 
parser infix splitter split line text components 
optional num fields parameter specify tight lower bounds fields parsed input record default just parse possible 
simply define parser unix passwd file expression infix splitter 
composing record readers field parsers function field reader compose record reader field parser field reader field parser record reader reader returned reader applied input stream uses record reader read record stream applies field parser record break fields 
reader returns values raw unparsed record list parsed fields 
parameters optional default record reader read line default field parser splits strings white space boundaries 
bound input stream open passwd file expression field reader infix splitter return values mx doug kwan usr bin sh mx doug kwan usr bin sh gives examples field readers simply constructed awk constructors 
notice exploited scheme higher order procedures succinctly construct wide array input procedures 
shall see awk programmer limited particular set readers parsers full power scheme define arbitrary readers parsers 
awk loop field parsing awk provides rule pattern directed control structure determining records read program 
awk basic control structure read record parse component fields match record set pattern action rules 
rule pattern matches record fires action part updating iteration variables performing output 
rules chance fire program loops reading record forth 
scheme embedded awk control structure realised macro 
general syntax new control structure awk record record field vars state var decls clause clause example simple awk loop awk read line line strip blank lines display line newline input 
form awk expression read line expression evaluated iteration produce record processed 
form ls output reader rw shivers sep scsh scm field reader infix splitter internet ip address reader field reader field splitter line decimal integers parser field splitter field reader map string number parser fig 

examples field readers list variables value returned record expression 
read line procedure example returns single value variable line 
loop pattern action clause test regular expression 
loop variable line contains non blank character matches regular expression 
fires clause body prints line 
clause test expression doesn string denoting regular expression 
general scheme expression evaluated produce boolean value print line longer chars 
awk read line line 
string length line display line newline note full power scheme encode arbitrarily complex tests limited little language provided awk 
awk loops iteration variables declared initialised style state var decls part form 
iteration variables clause return new values iteration variables fires 
loop iteration variables clause return values iteration variable 
awk expression value final value iteration variable loop multiple iteration variables produces multiple values 
examples awk expressions loop state find length longest line 
awk read line line max len max max len string length line count number non comment lines code scheme source 
awk read line line comment comment haven bothered parse records fields simple examples required 
simple matter employ field parser awk loop necessary 
example process unix passwd file 
purposes need know file contains sequence records record contains colon separated fields field user login id example read passwd procedure returns values time called line text bound line field parse list strings bound fields 
awk expression produces list elements entry passwd tagged user login id list sorted login id key sorted entries printed 
define nth convenient abbreviation 
define read passwd field reader infix splitter sort entries passwd login name 
entry display cdr entry newline sort string 
car car awk read passwd line fields ans cons cons fields line ans note awk restricted performing output express result 
general scheme expression embedded larger scheme context 
main computations example parsing sorting output composed function composition scheme pipes classical unix tools approach employ awk utility 
functional composition powerful technique composition allows sophisticated data structures linked lists passed component component efficiently reliably 
methodology embedding scheme embedded process notation awk sublanguages extra features haven covered example process notation provides ways capture parse process output scheme data awk macro supports rule patterns active designated ranges records 
seen little languages get feel general technique embedding sublanguage scheme 
cases followed methodology 
step embedding functionally decompose system primitive computational elements 
realised base procedures associated data structures 
case awk captured library record readers field parsers 
case scsh captured binding unix system calls process control scheme 
second step embedding capture unusual patterns control environment structure macros providing gains notational compactness clarity 
step distinguishes scheme languages tcl perl ability introduce new forms notation 
scheme extensions common expression framework 
tcl perl useful scripting languages extend syntax embed new language 
awk macro scsh process notation examples notational engineering 
cases careful allow escapes notation allow general scheme code extend set allowed computations 
example scsh implicit redirections allow programmer general scheme expressions redirection process form allows general scheme computations serve process specification 
redirection cross connects scheme general process computations 
awk design allow scheme form employed input record reader test body elements clauses arbitrary scheme code 
escapes allow best worlds compactness simple clarity task specific notation generality general purpose programming language 
scheme escapes keep trapped specialised notations 
example wanted write awk loop scanned files source code operating single top level function definition time write general parser scheme loop record reader 
possibility traditional awk restricted limited class built record readers provides 
benefits embedding benefits embedding sublanguage scheme clear 
embedding little language scheme gets power sources course easier embed sublanguage scheme invent implement new language cloth 
example gnu project implementation awk lines code 
scheme embedded implementation lines code roughly third field reader library third awk macro comments 
took days implement system 
things easy things didn designed implemented variables conditionals arithmetic operators procedures rest machinery typical programming languages need 
lowering barrier invent embed new little languages scheme means linguistic tool generally available programmer application specialised niches 
quality little language produced greater 
embedded awk macro required lines code implement standalone version significantly powerful 
ffl necessary user break special purpose notation express complex computations general purpose programming language 
scheme embedding simple things easy complex things possible 
standalone little language provides 
ffl general purpose computational facilities provided scheme far powerful provided interpreters implement traditional awk unix shell 
short scheme available tremendous source power 
system components compose better 
embedding subsystems single broad spectrum language scheme possible intimately intertwined 
interacting flat text streams sent pipes components written different little languages pass complex data structures 
example uses process notation embedded awk scripts vice versa 
fact current scsh programmers exploit ability compose system components way 
final thoughts technique embedding little languages scheme fairly general 
having embedded little languages scheme hard see embed 
obvious candidates expect programmed dialogue scripting tool utility dependency directed program recompilation 
power glue language power interaction facilitates case better possibilities interaction system components written embedded sublanguages go quadratically number systems embedded scheme 
aren restricted scheme embed little languages 
member lisp family programming languages including common lisp original expression dylan 
scheme sophisticated macro system language family macro systems members exploited similar manner 
final note power syntactic extension curious mid nineties scheme serious tool systems programming 
current standard lacks module system static type checking exceptions record types appear time passed language 
scheme sole remaining virtue distinguishing modern languages ml unusually sophisticated macro system 
syntactic extensibility provided macro system provided crucial mechanism needed embed little languages scheme 
designers new programming languages note power utility mechanism 

alfred aho brian kernighan peter weinberger 
awk pattern scanning processing language 
software practice experience ix april 

dylan object oriented dynamic language 
apple computer 

stuart feldman 
program maintaining computer programs 
software practice experience ix april 

don libes 
expect uncontrollable fits interaction 
proceedings summer usenix conference anaheim ca june 

robin milner mads tofte robert harper 
definition standard ml 
mit press cambridge mass 

rees clinger editors 
revised report algorithmic language scheme 
lisp pointers iv july september 

olin shivers 
scheme shell 
appear journal lisp symbolic computation 

olin shivers 
scsh manual 
november scsh release 
mit laboratory computer science 
available url ai mit edu scsh 

guy steele jr common lisp language 
digital press maynard mass second edition 
