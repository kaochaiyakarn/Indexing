exploiting coarse grained arc consistency algorithms christophe frederic fred centre de recherche en informatique de lens cnrs fre rue de universite sp lens cedex france univ fr 
arc consistency plays central role solving constraint satisfaction problems 
reason algorithms proposed establish 
algorithm called ac ac independently authors 
algorithm considered refinement basic algorithm ac advantage simple competitive 
take account constraint bidirectionality ac 
address issue particular introduce new algorithms called ac ac benefit properties ac ac 
ac ac easy implement ac take advantage bidirectionality ac 
precisely ac general algorithm partially exploits bidirectionality ac binary algorithm fully exploits bidirectionality 
turns maintaining arc consistency search mac due memorization effect efficient mac terms constraint checks cpu time 
compared mac experimental results show mac saves constraint checks average cpu time 
arc consistency plays central role solving constraint satisfaction problems 
mac algorithm algorithm maintains arc consistency search solution considered efficient generic approach cope large hard problem instances 
algorithms proposed establish arc consistency 
hand coarse grained algorithms ac ac ac ac ac developed principle apply successive revisions arcs pairs composed constraint variable belonging set variables algorithms easy implement efficient practice 
hand fine grained algorithms ac ac ac proposed principle apply successive revisions values triplets composed arc value belonging domain algorithms difficult implement necessary manage heavy data structures 
ac ac quite competitive respect coarse grained algorithms context preprocessing stage obvious context search maintaining data structures penalizing 
arc consistency algorithms characterized certain number desirable properties 
particular interesting exploit constraint bidirectionality called constraints binary order avoid useless constraint checks 
bidirectionality means value domain variable supports compatible value domain variable respect binary constraint defined supports constraint check performed looking support need perform constraint check looking support provided constraint check recorded success failure positive negative bidirectionality exploitation 
algorithms cited ac fully takes account bidirectionality 
far aware ac coarse grained algorithm partially exploits bidirectionality called double support domain heuristic 
address issue exploiting constraint bidirectionality respect coarse grained algorithms 
introduce new algorithms called ac ac seen improvements ac 
ac general algorithm suitable binary non binary problems partially exploits positive bidirectionality ac binary algorithm adapted binary problems fully exploits positive bidirectionality 
cases integrating positive bidirectionality exploitation requires slight additional data structure 
show ac ac ac benefit negative bidirectionality concentrating search support respect called candidates 
result ac ac benefit properties ac ac 
ac ac easy implement ac take advantage bidirectionality ac ac coarse grained algorithm fully takes account bidirectionality 
experimentations show arc consistency preprocessing ac efficient algorithm 
compared ac ac saves constraint checks average cpu time 
turns maintaining arc consistency search mac due memorization effect efficient mac terms constraint checks cpu time 
compared mac experimental results show mac saves constraint checks average cpu time 
preliminaries section briefly introduce notations definitions 
definition 
constraint network pair fx xng finite set variables variable associated domain dom denoting set values allowed fc cm finite set constraints constraint associated relation rel denoting set tuples allowed variables vars involved constraint loss generality possible assume set variables vars associated constraint ordered 
get position pos variable vars th variable var vars 
shall say constraint involves binds variable belongs vars 
arity constraint number variables involved number variables vars 
constraint satisfaction problem csp task finding solution constraint network 
solution assignment values variables constraints satisfied 
solution guarantees existence support constraints 
definition 
ary constraint tuple list values indexed length denoted 
tuple valid wrt iff dom var allowed iff rel current support iff valid allowed 
tuple said support support pos determining tuple valid called validity check determining tuple allowed called constraint check 
important note assuming total order domains tuples ordered lexicographic order 
solve csp depth search algorithm backtracking applied step search variable assignment performed followed filtering process called constraint propagation 
usually constraint propagation removes values occur solution 
modifying domains problem order get arc consistent involves constraint checks algorithms validity checks 
constraint checks required find new supports validity checks determine old supports valid 
definition 
csp pair composed variable value dom 
said consistent wrt constraint vars exists support 
said consistent wrt iff consistent wrt constraints said arc consistent iff pairs consistent wrt properties arc consistency algorithms order avoid useless constraint checks arc consistency algorithms exploit different properties 
section adaptation desirable properties defined 
algorithm ac vars init pick revise dom return failure vars vars return success arc consistency algorithm constraint check performed respect triplet ary constraint variable vars value dom tuple 
properties ideally verified arc consistency algorithm triplet tuple positive checked exists support successfully checked wrt 
negative checked unsuccessfully checked wrt 
positive checked exists support successfully checked wrt triplet negative checked unsuccessfully checked wrt triplet roughly speaking properties correspond properties 
ac algorithms section different algorithms ac consequently coarse grained algorithms denoted ac introduce main procedure algorithms recall ac algorithm 
propose originals algorithms called ac ac seen improvements ac 
note description algorithms ac general case non binary problems 
main procedure ac algorithms structure ac algorithms identical ac algorithm 
algorithms propagation set denoted order hold arcs need revised objective revision arc remove values dom inconsistent respect sake simplicity arc oriented propagation scheme implementation integrates variable oriented turns efficient called revision ordering heuristics 
algorithm init vars dom nil algorithm revise int dom dom valid continue nil remove dom return dom quick description main procedure described algorithm 
initially arcs put set order revised call init allows initialization ac specific data structures 
arcs revised turn revision effective value removed set updated 
ac algorithm seen extension ac called ac ac proposed independently authors 
simple important difference ac ac 
support value ac starts search scratch ac starts search resumption point corresponds support value 
precisely ac verifies positive negative 
naive approach requires data structure denoted 
data structure array store support triplet composed arc value belonging dom 
initially structure initialized nil see algorithm 
revision see algorithm involves testing value validity support nil valid potentially looking new support 
note see algorithm modifies parameter smallest support strictly greater nil remember constraint check denoted 
calls function modifies parameter smallest valid tuple pos nil 
algorithm nil break algorithm init vars dom nil nil algorithm revise int dom dom valid continue valid continue nil remove dom vars pos endfor return dom ac space complexity md optimal worst case time complexity md consider non binary constraints provided arbitrarily bound constraint arity 
ac improve behaviour ac algorithm keeping simplicity algorithm possible partially benefit positive 
particular support value looking values occurring support 
avoid dealing heavy data structures simply records value extern support support corresponds support value 
instance consider binary constraint vars fx support looking support recorded extern support support extern support 
new algorithm requires additional data structure denoted 
data structure array store extern support triplet 
initially structure initialized nil see algorithm 
revision see algorithm involves testing value validity extern support line fails validity support line 
valid search new support started succeeds extern supports updated lines 
ac keeps time space complexities ac 
worst case algorithm simply performs extra test line bounded number extra algorithm init vars dom nil cpt algorithm revise int dom dom cpt continue valid continue nil cpt nil remove dom nil cpt xk cpt return dom assignments lines value revision 
need additional array store extern supports 
ac ac integrates partial positive exploitation 
binary problems possible conceive simple algorithm fully exploits positive bidirectionality 
algorithm called ac simply records value number extern supports 
array denoted cpt introduced order store number extern supports triplet 
initializing counters see algorithm carefully update see algorithm support lost line support line value removed lines 
sake simplicity considered equivalent pos 
instance support designate value pair 
correctness ac proposition proof omitted 
ac ac keeps time space complexities ac 
proposition 
invariant main loop algorithm holds vars dom cpt gives exactly number extern supports algorithm int frontier length pos continue nil continue var length length return support continue copy pos length return support pos return return candidate negative exploitation previous section focused attention positive 
show ac ac ac benefit negative 
new algorithms denoted ac ac ac obtained replacing call standard function call function described 
principle concentrate search support respect called candidates 
candidate tuple checked 
note presentation quite technical non binary constraints 
consider function call form computes smallest candidate valid pos note optimization indicates values verified possible prefix candidate 
function updates returns value support candidate respectively indicate candidates updated argument support simply candidate 
difference function described algorithm due fact called algorithm ac ac fully exploit positive 
reason supports looking candidates 
auxiliary procedures called computes smallest valid tuple pos 
function similar described updates returns smallest exist 
computes smallest valid tuple pos 
procedure updates copy start pivot see algorithm copies elements index start incompatibility position pivot line invalid value line tuple line 
algorithm copy start pivot int start length continue pivot return dom var return return length due lack space focus analysis algorithm original parts report reader complementary description 
var equal candidate supporting line tuple valid represent support distinct provided supported values valid line 
supported exists invalid value copy stopped index values seek tuple different prefix size described function called exploit negative limited form positive called ac ac 
function see algorithm similar takes account candidates detected supports 
experiments prove practical interest algorithms introduced implemented java performed experiments run pc pentium iv ghz mo linux respect random academic real world problems 
performances measured terms number constraint checks number validity checks cpu time seconds cpu 
coarse grained algorithms implemented variable oriented propagation scheme revision ordering heuristic dom orders variables initially valid turn main loop modified updated call yield valid tuples 
algorithm boolean nil length result result return false result support return true true return true length return false result result return false result support return true propagation set increasing current size domains details 
hand implementation ac integrates standard revision ordering heuristics lifo fifo 
stand arc consistency considered stand arc consistency task making arc consistent constraint satisfaction problem 
series experiments run corresponds random problems 
class random csp instances characterized tuple number variables uniform domain size number ary constraints number allowed tuples probability tuple allowed 
ac ac ac ac ac ac ac ac cpu cpu cpu cpu table 
stand arc consistency random instances results table random binary instances studied 
precisely classes denoted experimented 
correspond classes constrained constrained instances correspond classes instances phase transition arc consistency sparse problems dense problems respectively 
class instances generated mean cpu time constraint checks validity checks computed 
algorithms close performances respect notice ac especially ac clearly outperforms ac respect 
hand algorithms exploit negative bidirectionality slightly reduce number constraint checks due overhead cpu time 
tested real world instances taken archive contains instances radio link frequency assignment problems 
stand arc consistency results table instances respectively denoted studied 
ac ac ac ac ac ac ac ac cpu cpu table 
stand arc consistency rlfap instances instances ac ac quite close 
algorithms saves constraint checks reducing cpu times compared ac ac 
number constraints checks required far weaker 
gap mainly due revision ordering heuristic 
similar behaviour observed 
third problem experimented called domino taken 
domino problem corresponds undirected constraint graph cycle trigger constraint 
instance characterized pair denotes number variables domains dg exists equality constraints trigger constraint xn xn 
ac ac ac ac ac ac ac ac cpu cpu table 
stand arc consistency domino instances domino instances ac ac allow saving constraint checks cpu time compared ac 
ac fastest coarse centre de france 
mac mac mac mac mac mac mac mac cpu cpu table 
maintaining arc consistency random instances mac mac mac mac mac mac cpu cpu table 
maintaining arc consistency random instances grained algorithm respect problem ac fully benefit positive bidirectionality overhead smaller ac 
maintaining arc consistency search appears efficient complete search algorithms algorithm maintains arc consistency search solution implemented mac versions previous algorithms experimented 
mac algorithms integrate dom dd variable ordering heuristic 
classes mac algorithms developed ac ac ac 
algorithms class require additional memory storage manage data structures md space complexity 
result constraint checks sacrificed necessary reinitialize data structures cpt backtracking 
algorithms class requires additional memory storage maintain data structures md space complexity 
shall denote algorithms class mac hand observed worthwhile leave unchanged specific data structure ac backtracking having benefit socalled memorization effect 
means extern support depth search opportunity valid weaker depth search backtracking 
performances algorithms compared respect distinct problems 
classes random instances model rd denoted experimented 
correspond classes instances phase transition search dense binary problems low tightness sparse ternary problems high tightness respectively 
class mean results generated instances 
table gives results obtained maintaining arc consistency respect mac clearly outperforms mac mac mac 
number constraint checks achieved mac times important number constraint checks achieved mac 
behaviour mac results memorization effect 
constraint checks replaced validity checks observe number validity checks mac times important number validity checks mac 
validity checks cheap performed constant time constraint checks mac great advantage 
table gives results mac algorithms 
constraint checks saved overhead maintaining data structures search penalizing terms timing 
experimented combinatorial mathematics problem called golomb ruler benchmark library ucc tw 
satisfaction problem specification values exist ruler length marks set integers am differences distinct 
modeled problem csp ternary binary constraints described 
instance corresponds maximum number marks ruler length 
observe phenomenon mac requires times constraint checks times validity checks mac 
speed 
mac mac mac mac mac mac cpu cpu table 
maintaining arc consistency golomb ruler instances behaviour different mac algorithms studied respect real instances rlfap archive 
algorithms close terms cpu time respect graph mac fastest respect difficult instance visited nodes 
important note relative bad behaviour mac 
believe mac save constraint checks integrating advanced revision ordering heuristics certainly save cpu time optimized implementation 
mac mac mac mac mac mac mac mac cpu graph cpu table 
maintaining arc consistency rlfap instances introduced new coarse grained arc consistency algorithms 
algorithms called ac ac extensions ac 
positive form partially exploited ac fully exploited ac 
far aware ac coarse grained algorithm exploiting bidirectionality 
ac ac ac advantage adapted non binary constraints 
shown negative form taken account ac ac ac resulting new algorithms denoted ac ac ac result ac proved fully exploit bidirectionality ac fine grained algorithm 
main differences ac ac ac ac ac far easier implement exploiting negative immediate binary case ac ac perform useless validity checks price heavy data structures ac ac perform revisions arcs ac performs revisions values 
respect item believe difficult enhance ac ac integrating revision ordering heuristic number elements propagation set important ac 
observations supported experimentations 
arc consistency preprocessing ac efficient algorithm 
compared ac ac saves constraint checks average cpu time 
arc consistency maintained search mac due memorization effect efficient mac terms constraint checks cpu time 
compared mac experimental results show mac saves constraint checks average cpu time 
wonder mac efficient arc consistency algorithm terms constraint checks really fastest algorithm 
mac shown times faster mac difficult random problems 
version mac improved simply equipped lexicographic revision ordering heuristic 
related shown variable oriented variant mac optimized revision ordering heuristic current domain size allows saving cpu time 
difficult know algorithm mac mac fastest direct confrontation 
perspective 
supported cnrs programme tact de la region nord pas de iut de lens 


arc consistency arc consistency 
artificial intelligence 

freuder 
constraint metaknowledge reduce arc consistency computation 
artificial intelligence 


mac combined heuristics reasons fc cbj 
hard problems 
proceedings cp pages 


arc consistency general constraint networks preliminary results 
proceedings ijcai 


refining basic constraint propagation algorithm 
proceedings ijcai pages 


revision ordering heuristics constraint satisfaction problem 
submission 


constraint programming platform 
www univ fr september 

mackworth 
consistency networks relations 
artificial intelligence 

mohr henderson 
arc path consistency revisited 
artificial intelligence 

sabin freuder 
contradicting conventional wisdom constraint satisfaction 
proceedings seattle wa 

smith 
trying harder fail 
proceedings ecai pages brighton uk 

smith walsh 
modelling golomb ruler problem 
technical report university leeds 

van 
ac efficient arc consistency algorithm low space complexity 
proceedings cp pages 

van 
lightweight arc consistency algorithms 
technical report tr university college cork 

wallace freuder 
ordering heuristics arc consistency algorithms 
proceedings pages 

xu li 
hard examples exact phase transition 
submitted 

zhang yap 
making ac optimal algorithm 
proceedings ijcai pages seattle wa 
