beamtrees compact visualization large hierarchies beamtrees new method visualization large hierarchical data sets 
nodes shown stacked circular beams hierarchical structure size nodes depicted 
dimensions beams calculated variation treemap algorithm 
small user study indicated beamtrees significantly effective nested treemaps cushion treemaps extraction global hierarchical information 

visualization large hierarchical datasets important topic visualization community 
main problem limited amount display space 
traditional node link diagrams lead cluttered displays visualize nodes 
unsuitable visualize instance average directory structure containing tens thousands nodes 
possible solutions problem threefold increase available display space dimensional hyperbolic spaces reduce number information elements clustering hiding nodes visualization space efficiently available pixel 
category solutions treemaps prime example 
treemaps compact displays particularly effective visualize size leaves tree 
important drawback treemaps hierarchical structure harder discern conventional tree browsers space display leaf nodes structure encoded implicitly 
number attempts overcome problem notable nesting shading 
inspired treemaps new algorithm visualizes structure explicitly 
user enabled adjust visualization preferences space results conventional treemap frank van ham jarke van wijk technische universiteit eindhoven dept mathematics computer science box mb eindhoven netherlands win tue nl space display hierarchical structure results 
specifically nested treemaps nesting indicate parent child relationship overlap fig 
hierarchical structure visualized stack rectangles shading strengthen perceived depth structure 

displaying hierarchical data nesting overlap section discusses basic treemap algorithm number variations 
algorithm section section discusses results user test comparing treemaps beamtrees 
section summarizes results discusses 

related treemaps invented johnson rectangular displays trees available visualization space efficiently 
basic treemap algorithm straightforward arbitrary rectangle representing root node tree horizontally subdivided smaller rectangles smaller rectangle represents child root node area rectangle proportional size attribute node 
process repeated recursively direction subdivision alternating horizontal vertical 
treemaps especially useful display large hierarchical datasets size attribute node important 
size rectangle proportional size node easily spot largest nodes tree 
standard treemap representations problems 
firstly method leads high aspect ratios long thin rectangles 
difficult compare sizes lead interaction problems 
secondly leaf nodes take visualization space space remains internal nodes tree 
difficult reconstruct hierarchical information treemap especially dealing large deep trees 
research tried provide answers problems 
new subdivision schemes developed producing better aspect ratios worsening layout stability 
methods improve display hierarchical information include nesting line width color shading 
methods require significant cognitive effort extract actual tree structure picture especially compared traditional node link visualization 
nesting influences area nodes deeper hierarchy space reserved borders 
new approach uses spatial ordering display hierarchical ordering maintaining proportionality property treemaps 

beamtrees treemaps dimensions display size third dimension display depth indicate depth tree 
available scale leaves treemap style 
scaling treemap 
display space leaves reduce size leaves 
step adapt standard treemap algorithm displaying leaves space filling render rectangles representing nodes scaled width 
words reduce dimension perpendicular direction subdivision 
shows scaling factor decreases partial occlusion creates stronger depth effect 
disadvantage leaf nodes tend thin stronger standard treemaps 
reduce problem decrease number separate elements display treat leaf nodes differently 
scaling width treemap style subdivision algorithm assign leaf node section parent node proportional size fig 
provide pleasant display sort children node leaf nodes aggregated top left side parent rectangle fig 
rectangles scaled scale factor size proportional size node represent 
display suffers problems 
firstly non leaf nodes touching edges making difficult perceive separate visual entities 
resolved applying scale factor length constraints ensure structure doesn break separate pieces 
elaborate section 
secondly large number overlapping rectangles resulting display hard interpret 
significantly improved shading section sort children constrained scaling scale length non leaf rectangles touching edges fig 
difficult perceive different visual entities scale length rectangle 
obviously run problems applying unconstrained scaling internal nodes structure fall apart separate pieces doing 
problem due scaling leaf nodes may overlap desirable fig 
need constraints limit scaling internal nodes 
leaf nodes pose problem case size depends scaled size parent node 

scaling lengths calculate constraints bottom tree starting deepest internal nodes 
discern cases internal node 
leaf nodes children case don need compute constraints leaf nodes get scaled parent definition fig 
non leaf nodes children avoid structure breaking separate pieces front edge rectangle representing child lower bound back edge rectangle representing child upper bound fig 
leaf non leaf nodes children back edge child node manner previous case 
leaf nodes children take space account avoid overlapping structures 
bound equal front edge bounding box non leaf child know total size total size child nodes derive solving fig length rectangle get scaled differently due constraints area rectangle may longer proportional size node represents 
solve problem scaling width rectangles appropriately resulting area remains proportional node size 
algorithm show mentioned cases easily integrated conventional treemap algorithm entire algorithm detail 
data types dir bound min max rectangle array dir bound real node class real real child array node rt rectangle rs rectangle function rectangle node attributes store respectively 
array child contains sorted nodes array 
dimensions rectangle representing node regular treemap stored rt rs stores scaled version rectangle 
function returns bounding rectangle scaled treemap rectangle children 
facilitate notation auxiliary functions function alt alternates direction subdivision alt alt 
functions respectively assign return length width rectangle procedure var rectangle dir real var real min max min max function rectangle dir real max min main algorithm similar original treemap algorithm extra procedures scale rectangles 
note non leaf nodes scaled leaf nodes scaling need information possibly constrained scaled length 
procedure node rectangle dir var integer real rt rt max min child child alt min max scaling internal nodes done method 
global parameters contain scale factors length width respectively 
practice values give results 
scale factor applied original treemap rectangle rt second line 
dealing case case internal node see paragraph apply constraints scaled rectangle 
difference unconstrained constrained scaled lengths taken account scaling width maintain size proportionality 
procedure node dir var real rs rt rt rs case rs min min rs min child rs min rs max max rs max child rs max case child min max rs max child rs max rs min min rs min rs max rt alt rs rs alt step resize leaves node treemap style fashion scaled size parent initial rectangle 
procedure node dir var integer real rectangle rs max min child child rs min max visualisation occlusion strong depth cue presents new problems notable fact overlapping rectangles tend break visually separate pieces 
solution problem shading indicate direction subdivision 
nodes longer visualized dimensional rectangles tend resemble threedimensional round beams strengthening perceived depth picture 
additional depth cues provided atmospheric attenuation cast shadows fig 

shows file system rendered mentioned cues 
overlap 
adding visual cues strong depth cue motion parallax 
implemented prototype opengl user rotate structure return top view press button 
extra advantage dimensional view user move viewpoint point parallel beam direction view entire structure conventional way display axis indicating node depth fig 
height beam choose minimum width length provides aesthetically pleasing picture 
disadvantage height varying beam beams level tree necessarily get laid depth 
provide option layer stack beams display beam depth proportional depth tree fig 

connections beams indicated lines beams displayed layered mode 
easier user maintain context transitions layered mode animated 
explicitly modeling leaf node procedurally generated dimensional texture maps represent leaves 
depending number node consideration resolution texture increased 
approach able render nodes real time pc geforce graphics card fig 

user test small pilot study conducted test combination explicit hierarchical information treemap style size information improvement existing methods 
study suggests treemaps ideal visualization tool small hierarchies feel alternatives larger say nodes hierarchical structures 
conducted similar user test comparing beamtrees cushion treemaps implemented nested treemaps implemented hcil treemap 
twelve coworkers participated experiment familiar shading shadows attenuation concept beamtrees familiar general treemap concepts 
setup experiment set factorial design tasks visualization methods beamtrees beamtrees nested treemaps cushion treemaps 
tasks focused file size users select largest leaf nodes 
node selected response judged correct largest leaves selected 
tree topology users indicate level predetermined node 
avoid potential confusion level root node defined 
tree topology users indicate total number levels tree 
tree topology users indicated deepest common ancestor predetermined nodes 
node memory order test fast user achieve mental map tree structure asked memorize positions predetermined nodes 
user believed remember location view closed different size prevent users remembering screen location node location 
users indicate positions nodes 
procedure created smaller randomized trees consisting approximately nodes randomized larger ones approximately nodes 
node sizes distributed log normal distribution 
visualization method participants perform tasks smaller larger tree total tasks participant 
trees methods matched randomly order visualization methods randomized 
order tasks performed tree remained experiment 

filesystem rendered filesystem layered orthogonal view layered isometric view visualizations straightforward slice dice partitioning displayed resolution pixels 
nested treemaps pixel border 
beamtrees scale factors width length 
node labels displayed users rely entirely visualization textually encoded information 
detail size information node available means tooltip window popped user moved mouse node 
users indicated familiar treemaps short explanation general principle treemaps followed small test see understood concept 
tests visualization method preceded explanation interpret visualization method tasks performed 
subsequently timed trial run performed participant comfortable task 
explanation trial run participant free ask questions 
participant convinced understood visualization method tasks performed actual testing began 
participants allowed ask questions feedback response time accuracy provided timed run 
timing self paced started immediately user asked question 
timing ended user verbally indicated answer case memory task thought remember location nodes 
tests users rated methods subjective preference 
size nested cushion dbt dbt nest ed cushion dbt dbt depth nested cushion dbt dbt nest ed cushion dbt dbt levels nest ed cushion dbt dbt nest ed cushion dbt dbt common nest ed cushion dbt dbt nest ed cushion dbt dbt 
average response time top error rate bottom tasks 
results shows average response times seconds average error rate visualization method tasks 
observed results task size determining largest nodes took slightly time beamtrees understandable allocate screen space leaves making small differences size obvious 
error rate task generally significantly higher beamtrees supporting cleveland stated interpretation speed negatively related interpretation accuracy 
depth interpreting depth node show significant difference response times 
error rates indicate nested treemaps beamtrees perform slightly better respect dually encode depth information 
nested treemaps alternating subdivision scheme nesting beamtrees overlap third dimension indicate depth 
cushion treemaps alternating subdivision scheme shading subtle provide accurate depth information 
levels global hierarchical information total number levels beamtrees perform significantly better treemap methods time accuracy 
users simply rotated view depicted memory nest ed cushion dbt dbt nest ed cushion dbt dbt counted number levels 
beamtrees performed response time accuracy 
users got frustrated treemap methods find maximum depth accounts reasonable response times low accuracy 
common parent finding common parent prove difficult methods beamtrees stand higher average large standard deviation 
due fact users took wrong approach started rotating structure looking sides trying discern beams connected 
fact default top view proves simpler considering response times beamtrees 
expect definite learning factor response times improve users familiar beamtrees 
memory results memory task comparable definite statistically significant difference accuracies beamtrees 
due difference flat shading aliasing effects opengl rendering representation sure 
results pilot study expect beamtrees perform significantly better regular treemaps comes global structural information maximum depth balance 
view provide stronger depth cues viewed side provides views similar nested cushion dbt dbt conventional layered tree layout 
users strong preference beamtrees indicated 
due fact better able answer depth related questions version fact visualizations generally interesting versions 
users felt perform better beamtrees experience visualization 


user preference rankings generalisation treemap algorithm 
scaling individual nodes treemap introduce occlusion extra depth cue retaining size proportionality treemaps 
allows display hierarchical size information single display 
variants implemented tested variant achieving significantly better results determining number levels tree 
compared tree visualization methods display size structure simultaneously plots tree rings beamtrees offer higher scalability thousands nodes 
visualizations generally introduce new problems occlusion potentially difficult interaction don expect problem 
default top view overlapping interaction facilitated providing meaningful preset viewpoints top side views 
adding sophisticated interaction methods highlighting path root improve insight 
advantage contrary regular treemaps beamtrees display internal nodes 
argue case nested treemaps interaction efficient nesting offsets pixels valuable screen space 
experimented inspection interesting research opportunities interaction beamtrees 
beamtrees slice dice partitioning 
long thin rectangles prevalent type partitioning suffer scaled width 
partially avoided problem applying treemap style subdivision simply discarding remaining beams thinner pixels clearly elegant solution 
open question done area aspect ratio improvement applicable beamtrees 
summary think concept beamtrees presents valuable improvement treemaps displaying depth natural way compromising advantages conventional treemaps 
barlow neville comparison visualizations hierarchies proceedings ieee symposium information visualization ieee cs press pp 
huizing van wijk treemaps proceedings joint eurographics ieee tvcg symposium visualization springer pp 
cleveland elements graphing data kluwer academic publishing new york ny 
human computer interaction lab treemap available www cs umd edu hcil treemap 
irani ware perceptual syntax enhance semantic content diagrams ieee computer graphics applications september october ieee cs press pp 
johnson shneiderman tree maps space filling approach visualization hierarchical information structures proceedings ieee visualization conference ieee cs press pp 
shneiderman wattenberg ordered treemap layouts proceedings ieee symposium information visualization ieee cs press pp 
technische universiteit eindhoven available www win tue nl 
vernier modifiable treemaps containing variable shaped units ieee information visualization extended abstracts available imag fr visu vernier pdf 
van wijk van de cushion treemaps visualization hierarchical information proceedings ieee symposium information visualization ieee cs press pp 
