swatt software attestation embedded devices arvind seshadri cmu adrian perrig cmu van doorn ibm pradeep khosla cmu expect surrounded embedded devices ranging java enabled cell phones sensor networks smart appliances 
adversary compromise privacy safety maliciously modifying memory contents embedded devices 
propose software attestation technique swatt verify memory contents embedded devices establish absence malicious changes memory contents 
swatt need physical access device memory provides memory content attestation similar tcg requiring secure hardware 
swatt detect change memory contents high probability detecting viruses unexpected configuration settings trojan horses 
circumvent swatt expect attacker needs change hardware hide memory content changes 
implementation swatt shelf sensor network devices enables verify contents program memory sensor node running 
proliferation embedded devices expect surrounded near 
example furniture clothing appliances expected contain integrated microcontrollers advanced functions automated checkout inventory control fire detection climate monitoring 
clear devices pose inherent risk attacker may need compromise devices compromise privacy safety 
risk compounded frequent lack security research supported part center computer communications security carnegie mellon daad army research office gifts bosch cisco intel matsushita electric works views contained authors interpreted necessarily representing official policies endorsements express implied aro bosch carnegie mellon university cisco intel matsushita electric works government agencies 
embedded devices 
environment surrounded embedded devices need mechanisms attest current memory contents devices detect attacker altered software configuration 
embedded systems cost concern 
small increase device cost leads significant increase production costs high volume manufacturing 
clearly software attestation technique incur lower cost attestation technique requires additional hardware 
importantly technique works entirely software legacy devices 
propose purely software attestation technique called swatt 
swatt externally attests code static data configuration settings embedded device 
externally mean entity performing attestation verifier physically distinct embedded device 
verifier directly read write device memory 
note need external verifier secure hardware potentially compromised device trusted verify correctly 
swatt uses challenge response protocol verifier embedded device 
verifier sends challenge embedded device 
embedded device computes response challenge verification procedure pre programmed embedded device memory downloaded verifier prior verification 
verifier locally compute answer challenge verify answer returned embedded device 
design swatt ensures embedded device return correct answer memory contents correct 
fact swatt way attacker hide malicious changes memory contents embedded device change device hardware 
motivate swatt discuss applications concrete example applicability swatt consider network printers 
network printers extremely vulnerable today anybody network access easily upload software printer turning eavesdropping active attack device 
network administrator swatt lo cal network attest printer code configuration settings expected 
attestation process administrator configure network printer communicate verifier 
ensures answer returned attestation request authentic preventing malicious printer colluding entities answer challenge verifier 
consider smart cell phone mail client part firmware 
suppose worm exploits vulnerability mail client currently active internet 
user cell phone want know mail client compromised 
determine user plugs cell phone hot sync linked pc 
pc uses swatt verify code running cell phone 
point point nature communication link pc cell phone ensures authenticity answer returned cell phone 
cell phone compromised swatt verify patch installation software successful 
electronic voting machines represent important application technique 
instances manufacturers voting machines voting software 
prevent occurrences voting machine inspectors swatt ensure correct voting software running voting machine 
consider smart cards store user passwords 
passwords smart card user swatt ensure smart card correct code running 
smartcard may contain malicious code segment leak passwords 
airlines hotels car rental companies may provide personal digital assistants pda personal 
attacker easily reprogram devices captures username password information input 
vendor erase reprogram device returned customer ensure code running trustworthy 
customer verify firmware trustworthy device 
verify firmware user plug usb key pda swatt verify code running pda 
discuss related section swatt quite different techniques aware 
swatt may appear provide similar properties secure boot distinct 
systems tcg known tcpa known secure coprocessor system initialization bootstrap trust 
swatt need secure coprocessor allows trusted external verifier verify memory contents embedded device 
code running embedded device verified code forms trusted computing base 
bootstrap trust entirely software 
jamieson propose techniques verify computer systems entirely software 
central technique premise including sufficient amount architectural meta information generated complex cpu simple checksum memory contents attacker different cpu trying simulate cpu question suffer severe slowdown checksum computation 
virtual memory subsystem caches hits misses tlb hits misses source architectural meta information 
bit microcontrollers small embedded systems virtual memory support 
devices small microcontrollers constitute majority embedded systems manufactured today 
jamieson techniques verify devices 
describe detail related section jamieson method suffers security vulnerability allows attacker hide malicious code platform 
scope propose approach verify memory contents embedded device having physical access device memory 
swatt secure long verifier correct view hardware 
particular verifier needs know clock speed instruction set architecture isa memory architecture microcontroller embedded device size device memories 
address case attacker changes hardware uses faster microcontroller 
step implemented swatt berkeley mica mote platform 
motes bit microcontroller virtual memory support 
perfect example small embedded system 
contributions contributions propose swatt technique externally verify contents memory embedded device 
show external verifier detect high probability single byte memory deviates expected value 
swatt provides strong guarantee correctness 
show swatt suc terminates high probability memory contents correct 
verify memory contents entirely software need secure coprocessors secure hardware 
swatt legacy systems 
cost concern secure hardware may available 
implementation swatt berkeley mica motes sensor network node architecture 
implementation enables directly verify program memory content running sensor node 
outline section give problem definition describe attacker model 
section presents swatt design implementation evaluation 
section discuss related section 
problem definition assumptions threat model naive approach verifying embedded device memory contents verifier challenge embedded device compute return message authentication code mac embedded device memory contents 
verifier sends random mac key embedded device computes mac entire memory key returns resulting mac value 
random key prevents pre computation replay attacks possible simple hash function 
show just verifying response insufficient attacker easily cheat 
embedded device empty memory filled zeros 
attacker alters parts memory inserting trojan horse virus attacker store original memory contents empty memory region compute mac function original memory contents verification process 
illustrates attack 
necessary embedded device empty memory region attack succeed 
attacker just easily move original code device access computing mac 
consider setting 
verifier wants check memory contents embedded device refer device expected content 
assume verifier knows expected memory contents goal design effective verification procedure resist attack described previously 
verification procedure device compute checksum memory contents 
checksum correct memory contents device value expected verifier fail high probability memory contents device differs expected content 
say verification procedure property secure verification procedure 
psfrag replacements verifier device device presumed memory content device memory request response 
generic external memory verification 
verifier copy device presumed memory sends request embedded device 
device prove memory contents returning correct response 
assumptions assume device contains memory content verification procedure verifier activate remotely 
assume verifier knows exact hardware architecture expected memory contents device 
particular hardware verifier knows clock speed memory architecture instruction set architecture isa microcontroller embedded device size device memory 
verify device memory matches expected memory contents verifier creates random challenge sends device 
device computes response challenge verification procedure 
local copy device expected memory verifier locally compute expected response verify correctness device response 
note need assume device contains trusted version verification procedure example assume attacker take full control compromised device may run legitimate verification procedure 
secure design verification procedure ensure verification fail memory content device match expected content matter code device runs verification 
threat model assume attacker full control memory device 
assume attacker modify hardware device increase size memory change memory procedure downloaded time prior verification 
psfrag replacements expected memory layout attacker memory layout empty 
code firmware firmware malicious code old verification code 
memory verification attack 
attacker replaces verification code malicious verification code copies old verification code empty memory 
access timings increase clock speed processor modifying hardware changing settings device bios 
swatt software attestation start section discussing general approach 
discuss desired properties verification procedure 
section describes implementation 
followed experimental evaluation swatt 
give guidelines practical applications swatt 
approach pseudorandom memory traversal mentioned section embedded device contains memory content verification procedure verifier activate remotely 
verification procedure uses pseudorandom memory traversal 
approach verifier sends device randomly generated challenge 
challenge seed pseudorandom number generator prg generates addresses memory access 
verification procedure performs pseudorandom memory traversal iteratively updates checksum memory contents 
key insight prevents attack macs mentioned section attacker predict memory location accessed 
attacker alters memory perform check current memory access altered locations iteration verification procedure 
current memory access touches altered location memory attacker verification procedure needs divert load operation memory location correct copy stored 
current embedded systems bios minimal difficult alter 
discuss assumption section 
attacker alters single memory location increase running time verification procedure due added statement noticeable verifier verification procedure efficient performs iterations 
verifier detect altered memory checksum returned embedded device wrong result delayed long time 
construct verification procedure way single additional statement slow checksum computation embedded device 
desired properties verification procedure verification procedure needs properties pseudo random memory traversal resistance precomputation replay attacks high probability detecting single byte changes memory contents small code size efficient implementation non parallelizable 
paragraphs discuss reasons need properties 
section describes design implementation achieve properties 
pseudo random memory traversal verification procedure pseudo random traversal memory regions checks forcing attacker check memory access verification procedure match location attacker altered 
cryptographic pseudo random generator prg produce pseudo random sequence memory locations 
choice prg depends cpu architecture device 
bit architectures keystream generated rc stream cipher generate pseudo random memory locations 
helix fast stream cipher built mac functionality optimized bit architectures 
keystream helix generate pseudo random sequence memory accesses bit architectures mac checksum 
option address generation bit architectures bits output multiword function 
resistance pre computation replay attacks prevent pre computation replay attacks checksum returned device depend random challenge sent verifier 
achieve having verifier send seed pseudo random generator prg verification procedure generate memory addresses memory traversal 
high probability detecting changes probability verification procedure returns correct checksum attacker modifies memory contents small 
verification procedure touch memory location high probability accesses memory pseudorandom sequence 
achieve result coupon collector problem 
verification procedure ln accesses memory memory size 
result coupon collector problem states number memory accesses required access memory location cn ln second checksum function sensitive value changes 
checksum differ input changes single byte difficult attacker find different input gives checksum result original memory content randomly chosen challenge 
small code size pseudo random memory traversal forces attacker insert statement verification procedure causes detectable increase running time 
statement translates compare instruction followed conditional jump assembly 
takes cpu cycles execute statement bit microcontroller architectures 
insertion extra statement cause detectable slowdown verification procedure main body excluding initialization epilogue code verification procedure take tens cpu cycles execute 
optimized implementation attacker may find optimized implementation verification procedure extra statement cause overhead 
important implementation body verification procedure loop allow optimizations 
need optimize verification procedure loop initialization epilogue code consume negligible fraction execution time 
joshi nelson randall propose denali uses automatic theorem prover generate nearly mathematically optimal straight line machine code sequence evaluates set expressions minimal possible instruction count architecture 
denali perfectly suited optimize body verification procedure loop straight line code sequence 
tools gnu generate smallest instruction sequence function specified architectural platform exhaustive generate test approach 
due small code size loop body verification procedure able hand optimize highly efficient 
section argue code sequence optimized 
non parallelizable may possible multiple devices collude speed checksum computation 
example checksum computation sequence operations split halves half computed independently device results combined 
second device needs run prg half total number iterations verification procedure bring prg state required start computing second half checksum 
consumes time running verification procedure fully 
total computation time devices single device 
prevent verification procedure non parallelizable 
achieve making address memory access computation checksum depend current value checksum 
design implementation verification procedure sensor motes designed implemented verification procedure sensor motes atmel atmega microcontroller bit harvard architecture program memory data memory 
cpu microcontroller risc architecture 
describe design give pseudo code main loop verification procedure show realization assembly language atmega 
show bit implementation implementation extended bit architectures 
pseudorandom memory traversal rc pseudo random generator prg rivest generate pseudo random sequence addresses memory access 
rc takes seed input outputs pseudo random keystream 
known attacks exist rc stream cipher 
evade weaknesses discard bytes rc keystream 
rc extremely efficient compact implementation bit architecture rc implementation requires machine instructions main loop outputs bit pseudo random number cycles atmega microcontroller 
need bit addresses access program memory microcontroller concatenate bit rc output current value checksum generate bit address 
checksum function achieve low probability collision different memory contents need sufficiently long output checksum 
checksum function outputs bits lower bound collision probability 
implementation bit checksum 
propose simple efficient checksum function 
efficiency bit architecture main design goal additional statement introduces substantial slowdown 
research required explore design space checksumming functions identify ideal tradeoff security efficiency 
shows pseudocode checksum function shows implementation assembly atmega processor 
describe function detail discuss design decisions 
generate bit checksum treat bit checksum vector bit values 
iteration function update bit value checksum incorporating memory value mixing rc values previous values checksum 
derive bit address memory location accessed follows 
high byte address rc value generated round 
previous value checksum vector low byte 
design goals changed memory location perturbs fields checksum 
achieve bit value checksum affects iterations 
bit value checksum low byte memory address iteration value incorporated computation subsequent bit value xoring loaded memory value 
altered memory location accessed memory access load different value checksum iteration affected 
design checksum function ensures computation current bit value checksum depends previously computed bit values 
loop verification procedure non parallelizable 
consider possibility mac function checksum function 
helix fast stream cipher built mac functionality 
main loop verification procedure completely replaced helix 
helix optimized bit architectures takes instructions compute bit microcontrollers 
statement cause small increase running time 
situation true macs 
take instructions compute may short allow identify slowdown caused statements 
pseudocode shows pseudocode main loop verification procedure 
code verbose unoptimized form improve readability 
variable represents number iterations loop equal total number memory accesses performed checksum procedure 
sent verifier part verification request 
number depends size memory verified due result coupon collector problem 
variables verification procedure initialized follows 
notation rc denote ith output byte rc keystream 
discard rc rc security reasons bit values checksum initialized rc rc initial value rc set rc assembler code shows assembly code corresponding pseudocode shown written assembly language atmel atmega microcontroller 
current assembly code manually optimized 
manual optimization carefully unrolling verification procedure loop away code updates checksum index variable pseudocode architecture microcontroller characteristics microcontroller harvard architecture kbytes program memory kbyte data memory 
cpu inside microcontroller uses risc isa 
means instructions loads stores cpu register immediate operands 
loads stores memory addresses 
cpu bit general purpose registers 
registers treated bit register indirect addressing data memory 
similarly form register form register upper lower bits bit registers named suffix name register 
xh xl refer upper lower bytes similarly data program memory addressed directly indirectly 
indirectly address data memory algorithm verify input number iterations verification procedure output checksum memory checksum vector current index checksum vector construct address memory read rc mod update checksum byte mem mod rc rotate left bit update checksum index mod return 
verification procedure pseudocode registers holds pointer memory location 
case program memory register indirect addressing 
indirect addressing displacement pre decrement modes 
main loop verification procedure just assembly instructions takes machine cycles 
addition single statement compare branch takes cycles main loop adds overhead terms machine cycles iteration loop 
plan approach similar denali ensure checksum code optimized 
current implementation conjecture mov instructions may optimized away instructions perform essential operations 
need strict mathematical argument code optimal high security 
experiment results implemented versions verification procedure genuine version attacker version assumes attacker changes single byte code copies data memory 
check attacker inserts extra statement verification procedure 
optimistic scenario attacker 
attacker modifies single memory location modify verification procedure 
means attacker making multiple changes memory contents 
attacker insert multiple statements 
development testing verification procedure avr studio version integrated development environment atmel microcontrollers developed atmel avr studio simulator atmega 
ran versions verification procedure simulator keeping interrupts peripherals disabled minimize running time variations due external events 
simulator profiled versions checksum function returned running time 
show plot running time versus number code memory accesses 
vary number memory accesses equal number iterations main loop verification procedure ln kbytes 
number memory accesses time seconds legitimate verification code attacker verification code time difference 
result implementation 
time difference legitimate code versus attacker code 
memory locations include checksumming procedure larger time difference legitimate attacker 
assembly explanation pure assembly code generate th member random sequence rc zh ldi zh ld yl yl add yl zl ld zl st st zl zl add zl zh ld zh generate bit memory address zl mov zl load byte memory compute transformation lpm xor add incorporate output transformation checksum add lsl carry bit adc zh mov zh 
verification procedure assembly code considerations practical selecting number iterations due pseudorandom nature memory access verification procedure finite probability single changed memory location may undetected 
probability happens arbitrarily low increasing number memory accesses performed verification procedure increasing number iterations verification procedure loop 
drawback doing running time verification procedure increases linearly number loop iterations 
memory architecture dependencies bit microcontrollers small embedded systems designed memory architectures von neumann architecture program code data reside single physical memory harvard architecture program data memories distinct 
microcontrollers lack support virtual memory 
verification procedure directly access check entire physical memory result verification request correct verifier assured memory contents correct 
note attacker reconstruct correct memory image verification undo changes afterward 
doing require code undo operation resident memory device 
change memory contents detected swatt 
harvard architecture program memory separate data memory typically different instructions required access program data memory 
data memory executable usually need verify program memory 
program memory typically contains executable code static data 
contents known verifier apriori 
feasible verify running device 
microcontrollers harvard architecture non volatile storage flash memory program memory sram data memory 
size program memory typically order magnitude larger size data memory 
bit microcontrollers popular vendors atmel national semiconductor microchip texas instruments approach 
von neumann architecture program data share memory address space 
want verify code memory externally determine memory code need verify entire memory including data 
consequently verifier needs know exact state data memory includes program stack 
set programs run embedded device runtime schedules fixed time embedded device designed 
possible checkpoints code dynamic state memory possible exception environmentally influenced state sensor readings externally predictable 
carry verification checkpoints verify running system 
case verifier download dynamic content performing verification 
effect memory size running time verification procedure ln accesses memory compute checksum memory size 
memory word read operated constant time 
running time verification procedure grows ln size memory 
empty memory regions empty regions memory filled zeros 
attacker places malicious code empty memory regions suppress read memory locations substitute zero 
attacker need compute exor operation computing checksum zero valued memory location 
time saved performing operations may offset time extra statement 
prevent attack suggest empty memory regions filled pseudo random pattern 
cpu architecture isa dependencies microcontroller architectures vary considerably vendors 
techniques discussed section von neumann architectures 
harvard architectures technique works architecture satisfies conditions 
code data memories different word sizes word size code memory smaller equal width datapath cpu microcontroller 
code memory readable sizes equal width datapath 

instruction set microcontroller instruction read words code memory 
move instruction special purpose instruction designed purpose 

harvard architectures loads program memory take times long loads data memory 
source potential attack 
attacker keep copy original memory contents data memory 
diverting load operation data memory attacker able offset extra time taken statement 
view attack require difference latencies loads program data memory greater time taken execute statement 
discussion design verification procedure discussed section central swatt 
design ensures checksum memory contents returned embedded device correct memory contents device value expected verifier 
different high probability memory contents device differ expected contents 
statement checksum holds long verifier correct view embedded device hardware configuration 
way attacker hide changes memory content change hardware device 
typically difficult changing memory contents 
interesting application swatt virus checking 
embedded device suspected infected external verifier ship verification procedure device download entire memory image device swatt ensure downloaded memory content device 
verifier downloaded content perform virus checking locally 
approach prevent virus interfering virus checker run checker infected device 
note verification procedure shipped device device infected 
design swatt ensures device return correct checksum specified time frame runs correct verification procedure 
device infected patched remove virus 
swatt verify installation patch successful 
vulnerability swatt time memory verified time device 
possibility attacker changes memory contents device verification 
open research problem deal weakness 
related ibm secure cryptographic coprocessor runs general purpose operating system allows field upgrades software stack 
ensure integrity system uses form secure boot starts initial trusted state layer verifies digital signature layer executing 
ensures software stack altered 
systems tcg known tcpa known es notion bootstrap trust mechanisms different 
tcg measure integrity various components secure hash function sha result stored separate secure coprocessor 
coprocessor attest measurements signing attestation identity key stored inside coprocessor 
measured differs system tcg starts measurement system boot starts measuring nexus takes control 
swatt need secure coprocessor allows trusted external entity verify memory contents embedded device software technique 
memory contents verified forms trusted computing base 
bootstrap trust entirely software 
jamieson propose techniques verify computer systems entirely software 
discuss section technique embedded systems 
send checksum code part challenge introduces vulnerabilities due threats mobile code 
technique similar compute randomized hash memory timing detect 
techniques serve different purposes swatt randomized memory access trigger page faults cache misses technique force insertion statement slow attacker timing approach assumes take longer simulate hardware device 
mechanisms different target platform 
presuppose virtually paged architecture availability low level cpu performance counters measure effect instruction data tlb replacements 
kinds architectural features typically available high cpus small embedded devices 
addition jamieson technique suffers security vulnerability enables attacker change arbitrary number memory locations remain undetected probability 
attack proceeds follows 
compute bit checksum adding bit memory words read current value checksum traversal influenced cache tlb misses 
periodically xor current values cache tlb misses checksum 
checksum function described checksum checksum checksum checksum method computing checksum attacker flip arbitrary number significant bits msb bit words resulting checksum correct probability 
msb property carry bit msb produced addition lost 
odd number changed locations included checksum resulting checksum msb flipped number changed locations included resulting checksum correct 
swatt technique externally verifying code static data configuration settings embedded device 
central technique carefully constructed verification procedure computes checksum memory way attacker alter content memory changing externally observed running time verification procedure producing correct checksum 
particular randomized access pattern force attacker insert check statements memory access memory altered 
practical implementation procedure provided detailed analysis 
concentrates perform secure device verification remotely untrusted network 
working expand verification cpus sophisticated architectural features virtual memory branch predictors 
hope motivates research important problem 
acknowledgments dan boneh david david maltz robert callahan mike reiter adi shamir bhaskar srinivasan brian weis stimulating discussions suggestions improve 
anonymous reviewers comments suggestions 
elise ackerman 
voting machine maker 
www com mld business technology htm dec 
william david farber jonathan smith 
reliable bootstrap architecture 
proceedings ieee symposium research security privacy pages oakland ca may 
ieee computer society technical committee security privacy ieee computer society press 
william angelos keromytis david farber jonathan smith 
automated recovery secure bootstrap process 
proceedings symposium network distributed systems security ndss pages san diego california march 
internet society 
ferguson whiting schneier kelsey 
helix fast encryption authentication single cryptographic primitive 
proceedings fast software encryption fse pages february 
scott adi shamir 
weaknesses key scheduling algorithm rc 
th annual workshop selected areas cryptography volume lecture notes computer science pages toronto august 
springerverlag berlin germany 
fx kim 
attacking networked embedded systems 
black hat briefings las vegas 
presentation available www com presentations bh asia bh asia fx pdf 
jason hill robert szewczyk alec woo seth hollar david culler pister 
system architecture directions networked sensors 
architectural support programming languages operating systems pages 
rajeev joshi greg nelson keith randall 
denali goal directed 
proceedings acm sigplan conference programming language design implementation pages 
acm press 
rick jamieson 
establishing remote computer systems 
proceedings th usenix security symposium 
usenix august 
alexander adi shamir 
new cryptographic primitives multiword functions 
invited talk fast software encryption workshop 
www wisdom weizmann 
ac il ask 
generation secure computing base 
www microsoft com resources default 
smith palmer 
high performance programmable secure coprocessor 
nd international conference financial cryptography 
smith perez 
validating high performance programmable secure coprocessor 
nd national information systems security conference october 
smith 
building high performance programmable secure coprocessor 
computer networks special issue computer network security 
finds shortest instruction sequence function 
www gnu org directory devel compilers 
html 
trusted computing group tcg 
https www 
org 

