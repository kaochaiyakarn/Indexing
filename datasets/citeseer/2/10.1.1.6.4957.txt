cluster computing kluwer academic publishers 
manufactured netherlands 
design development scalable distributed debugger cluster computing wu department electrical computer engineering northwestern university evanston il usa chen department computer science university science technology china pr china sun department computer science illinois institute technology chicago il usa 
debugging essential part parallel distributed processing 
developing parallel distributed debugger difficult 
especially true cluster computing heterogeneity presents 
give survey current debugging techniques existing tools client server debugging model 
model discuss design development practical scalable distributed debugging system cluster computing detail give case studies show distributed debugging system efficiently supports debugging message passing programs various mpi pvm programs 
newly developed distributed debugger sequential debugger gdb dbx 
capability scaling handle hundreds processes 
interfaces completely implemented java graphical user interface computing platforms 
addition portable easy learn 
keywords distributed debugger cluster systems message passing pvm mpi java 
computer system design dominated dramatic rate advance small desktop systems years 
largescale systems massively parallel processors due long engineering lag time high cost fit rapid development processor chips 
generally mpp completely developed processor chips date 
cluster systems poised primary computing infrastructure low interactive computing demanding serial parallel applications 
software environments cluster systems play important role efficiently utilizing advanced cluster architecture 
message passing software systems support cluster computing popular mpi pvm developed years 
systems mainly standardized unix systems standard sequential language fortran construct portable communication primitive library standard communication protocols tcp ip high efficiency expressing parallel algorithms wisely validly 
uncorrected proof systems require users explicitly assign special data processes deadlock communication mismatch orders idle waiting access conflict resource contest exist users parallel programs 
essential part development process parallel programs portable scalable distributed tool correctness debugging demand 
presents survey current debugging techniques existing tools design implementation portable scalable practical distributed debugger cdb cluster debugger cluster computing detail 
section discusses current debugging techniques tools 
section mainly describes design model method framework distributed debugger cdb aspects portability scalability practicability 
sections discuss cdb efficiently supports message passing programs mpi pvm programs shows views debugger implemented java 
section concludes 

current debugging techniques tools general parallel distributed program debugging divided categories correctness debugging performance debugging 
parallel programs difficult develop debug maintain understand sequential counterparts 
reason difficulty establishing correctness take account temporal conditions liveness deadlock freeness process synchronization communication called correctness debugging 
reason diversity parallel architectures need produce highly efficient program fine tuned specific target architecture 
impact task granularity parallel algorithm properties memory hierarchy intricacies involved pips ra kluwer bo tex wu chen sun exploitation multilevel parallelism carefully analyzed devise transformation strategy program 
adaptation initially inefficient algorithm specific hardware called performance debugging term suggests correctness criteria parallel algorithm pre assumed include requirements performance architecture 
correctness debugging essential part development process parallel programs initial research efforts naturally focused heavily correctness debugging 
programmer debugging parallel sequential program wants know functions program blocks program enters values variables 
simply way get information insert print statements program report section program executing output values specific variables 
approach requires skills tools programmer write program programmer decide advance variables execution statements print put print statements 
inserting print statement requires re editing re compiling re executing program 
addition program outputs great deal data finding information interest tedious 
sequential debuggers sequential computers years 
sequential debuggers gdb dbx supported multiple platforms published standards semantics debuggers 
debugger implementations subject considerable variation kinds commands available specific actions performed conjunction particular command 
serial programming community situation bad 
serial programmers may continue working system extended periods time get favorite debugger worry changing tools frequently 
parallel programming community lack standards resulted quite different scenario rapidly changing hardware software environments 
debuggers supported platform parallel debuggers criticized poor usability 
users viewpoint effective learn new debugger new computer 
date parallel debugger behaves consistently various different architectures operating systems considered easy learn 
users easy cross platform compatibility key considerations user decisions adopt new parallel environments tools 
parallel com uncorrected proof puter manufactures viewpoint real economic advantage expending efforts debuggers consistent competitors machines 
result new machine presents debugger features incompatible earlier version totally new debugger 
lack portability standard programming cluster systems hard task especially heterogeneous environment 
high performance debugging standard expected major contribution solving problems 
high performance debugging forum collaborative effort involving researchers commercial debugger developers area parallel debugging representatives high performance computing hpc user organizations 
established march sponsored parallel tools consortium 
goal define standards relevant debugging tools hpc systems 
standard attempts architecture operating system neutral sense possible build standard conforming debugger wide variety different computing systems 
forum established general goals concerning parallel distributed debuggers parallel distributed debuggers satisfy basic debugging requirements high performance computing application developers parallel distributed debuggers usable developers parallel distributed debuggers consistent platforms users debugger switch little effort 
standard attempts address needs hpc application developers hardware operating system neutral assumes programs need system independent 
explicit parallelism assumed basic programming model 
standard applies distributed memory programming multiple processes cooperating message passing libraries mpi pvm shared memory programming multiple threads execution single address space hpf 
standard may useful implicit parallel programs issues map runtime information intermediate level information original user source code addresses standard 
standard address interpreted languages typically packaged built debugger java 
defines standard command non graphical interface parallel debuggers versions deal issues graphical interfaces support debugging optimized code 
effective user debugging parallel distributed code sequential code topic theoretical practical interest software development parallel distributed communities decades state art highly uneven today 
netzer collected list including technical reports journal conference papers ph dissertations dealing parallel debuggers published middle 
nature rapidly changing high performance computing hardware software environments pips ra kluwer bo tex design development scalable distributed debugger date today 
brief survey current literature practice parallel distributed debuggers follows 
commercial parallel distributed debugger actively developed currently 
window systems ported multiple platforms languages parallel programming models great effort 
versions message passing mpi pvm shared memory hpf 
available homogenous parallel computer systems 
user interface caters primarily expert user source display windows tied individual processors 
portable parallel distributed debugger sequential debugger gdb implemented motif 
supports debugging split programs 
adopts client server approach provide uniform interface various platforms communication libraries programming models 
prototype support debugging pvm mpi programs 
specifying protocols interaction user interface client debugger server tries separate development efforts parts achieve portability 
run ibm poe environment ibm aix dbx debugger 
message debugger simulated parallel debugger supporting pvm programs single processor 
requires pvm program compiled linking special library program debugged pvm program instrumented 
affects execution behavior pvm program degree 
distributed debuggers front act unified user interface serve agent scattering gathering debugging operations collection processes 
front tedious implement heterogeneous computation account subtle differences input output formats debuggers 
node prism extends data parallel debugger prism cm machine support message passing paradigm 
prism addresses scalability advantage parallel nature debugger 
available cm 
windows parallel debugger monitor control execution stuttgart parallel processing library message passing library programs 
works message exchange level treats parallel program objects exchanging messages 
debug processes internally call sequential source level debuggers 
available programs 
uncorrected proof ibm distributed debugger client server applica tion enables detect diagnose errors programs 
client server design possible debug programs running systems accessible network connection 
debugger server known debug engine runs system program debugged runs 
system workstation system accessible network 
program running workstation debugged local debugging performed 
program running system accessible network connection debugged remote debugging performed 
distributed debugger client graphical user interface commands debug engine issued control execution program 
debugger available cobol fortran high performance compiled java interpreted java pl optimized code debugging nelson survey literature current practice leads identification aspects debugging optimized code critical tractable extraordinary efforts 
split lifetime support variables allocation varies program combined definition point reporting currency determination stepping setting breakpoints semantic event characterization program behavior treatment inlined routine calls manner inlining largely transparent 
designing high performance fortran hpf debugger linden challenges involved designing hpf debugger experimental debugging technology successfully addresses 
focus discussing distributed debuggers cluster computing design develop java scalable distributed debugger cdb meet general goals concerning parallel distributed debuggers 

design framework models distributed debugger cdb general cluster systems scalability node complete computer system 
users familiar sequential debuggers complete computer dbx gdb major unix systems ibm aix sun sunos solaris hp digital unix sco unix freebsd linux forth 
worthy developing portable scalable user friendly distributed debugger general sequential debuggers cluster systems 
distributed debugger cdb support unix network computing environments networks workstations networks computers cluster system designed developed distributed debugger cdb sequential debuggers java implement debugging functions interfaces 
distributed debugger cdb executed unix platforms java 
sequential debugger tool gives user visibility executing program control target program 
parallel distributed debugger performs function parallel distributed program 
parallel distributed computing executing program consists processes associated particular executable 
process occupies memory address space pips ra kluwer bo tex wu chen sun threads register set stack 
target program complete set threads communicating processes execution user application full course program execution 
initiate debugging sessions debugger invoked command line target program executed debugger environment 
parallel distributed target program consists processes debugger may need interact run time system responsible managing processes messagepassing systems mpi pvm 
assume debugging information generated target executable compiled special options effect 
note program compiled optimizer rearranges source code 
surprised execution path exactly match source code 
case debugger controls executable constitute target program reflected memory register values execution program utilizes debugging information associated source code executables 
control distributed process users want able set breakpoints start distributed programs 
breakpoint specifies execution reaches location relative source code 
cdb stopping process means processes triggered breakpoint unaffected threads process done stopped 
starting process similar stopping process 
distributed debugger cdb designed receive user input actions taken control target program execution reveal information 
provides portable graphical user interface easy learn 
input graphical interface 
response user input debugger typically issues variety debugging messages 
confirm operation completed successfully indicate problem occurred 
provide detailed information debugger target program doing 
cdb displays debugging information corresponding debugging window 
cdb implements distributed debugging mainly extending functions sequential debuggers 
advantages uses sequential debugging commands users know users cdb time learn 
efficiently uses current existing debugging techniques simplifies design implementation distributed debugger 
distributed debugger cdb divided levels top bottom follows architecture shown 
generally user see cdb gui graphical user interface 
debugging command user inputs sent sequential debugger socket channel 
master server socket server slave server socket client 
results sequential debugger executes debugging command returned socket channel displayed gui 
main dataflow graph cdb shown 
shown figures slave server implementation java objects translates request master server object sequential debugger commands sends commands appropriate instance sequential debugger parses sequential debugger reply arrives communicates result code requested service 
notice target program executing control sequential debugger debugger user application may reading writing output terminal 
cdb design kept simple scalable 
cdb main features uncorrected proof 
architecture cdb 
graphical user interface level network communication level sequential debugger level parallel distributed program level 
pips ra kluwer bo tex design development scalable distributed debugger 
portability basically debugger job provide mapping services user program source level machine version object level 
performing procedure debugger replies execution environment services 
services may depend target architecture things trap instructions breakpoint implementation operating system process control access address space compiler symbol table information enables mapping source object 
cdb isolates user interface client server debugging model shown 
addition cdb implemented java support debugging various pvm mpi programs 
java language independent platforms popular message passing systems pvm mpi portability distributed debugger cdb portable support debugging parallel programs heterogeneous network computing environments 

scalability cdb concept process group proposed 
user set logical processes process group 

main dataflow graph cdb 
user inputs debugging command group cdb send command processes group simultaneously 
convenient users function debug programs 
cdb may efficiently support debugging pvm mpi programs various sizes especially group management function 
capability controlling execution hundreds processes 
debugged parallel program creates parallel sub processes cdb display source codes debugging windows parallel debugging windows may activated closed users requirements 
logical breakpoint determination cdb process group shown 
setting breakpoint logical process group sets breakpoint physical process group collects physical representations logical breakpoint 
shown gn logical process groups defined user 
means stopped breakpoint 
gm gm physical processes group gm 
setting breakpoint logical process group gm means setting breakpoint physical processes gm gm 

practicability uncorrected proof 
logical breakpoint determination cdb 
goal keep cdb simple scalable 
cdb user friendly graphical user interface simple operation graphical interfaces simple window contents simple understandable command windows short clear hints provides graphical user interface platforms 
users choose favorite sequential debugger dbx gdb 
cdb greatly reduce effect execution behavior pvm mpi programs debugger debug 
views cdb gui shown sections 

implementation distributed debugger cdb general experience tool important tool functionality 
reason step pips ra kluwer bo tex wu chen sun 
initial window 

main window cdb 
process debugging parallel distributed program cdb section 
time explain tool functionality fits parallel debugging objectives 
java language portability support multiprocess control control socket communication input output redirection implement graphical interfaces low level debugging interfaces cdb cdb portability 
subsections shall discuss implementation cdb detail 
cdb executes monitoring program master server local machine program charge receiving connection requests programs 
receiving connection request master server shall create new thread master server thread true client server connection program sent request shown 
debugging process cdb mainly includes environment parameter configuration choosing target program creation process group starting debugging finishing debugging exiting cdb 

parameter configuration users system environments different home directories sequential debuggers 
users cdb need configure various parameters environments 
parameters number processes directory path message passing programs pvm mpi source codes directory sequential debugger usr bin dbx usr bin gdb setup debugging commands chosen sequential debugger 
cdb invoked initial window appeared 
window shown 
user 
startup debugging window 

process group window 
input maximum number debugging processes number parallel processes 
maximum number debugging processes cdb limited set limitations operating systems screen size step main window cdb occurs shown 
components process buttons number process buttons equals maximum number debugging processes 
button number stands logical process number 
example pn stands logical process respectively 
process button mapped process parallel program 
buttons clickable right 
menu bar setup configuring parameters sequential debugger debugging commands path source code uncorrected proof pips ra kluwer bo tex design development scalable distributed debugger start choosing target program starting debugging process creating process groups clear clearing windows processes debugging return exiting debugging environment 
debugging parallel program finished main window cdb exited 
window reusable 
configuration finished default configuration 
distributed debugger executed parameters need configured reconfiguration needed 

choosing target program cdb support debugging fortran pvm mpi programs 
provides user friendly interface choose types debugging programs pvm mpi unix types programming languages fortran shown 
unix means general sequential program run unix platforms cdb supports debugging sequential fortran program 
number processes shown valid executing mpi target program choosing program type mpi fortran 

creation process group 
debugging window 
uncorrected proof cdb provides function process group management 
processes set group example shown group includes logical process 
group includes logical process 
notice logical process number mapped 
replay dialog window 
process button shown respectively 
valid processes group send debugging commands group 
debugging command control processes group 
cdb global condition control efficiently monitor real time processes program execution 

starting debugging distributed debugger cdb support source level multiprocess debugging 
debugging window divided parts top bottom source code path debugging command input source code browser debugging information output shown 
user input modify path source code type debugging commands click debugging command button 
cdb provides debugging window process necessary sends processes debugging command displays execution results processes debugging windows 
cdb provides replay function treat parallel execution process event records shown order replay debugging procedure finding hidden errors 
record phase relevant ordering information occurring events program execution stored 
pips ra kluwer bo tex wu chen sun traces perform trace driven replay program constraint equivalent execution 
process group menu shown includes default option processes userdefined groups 
option debugging operations valid current process 
option processes debugging operations valid processes 
option group named user debugging operations valid processes group 

finishing debugging process debugging program process continually finding errors program modifying 
debugging finished cdb automatically terminates debugging processes local remote processes clear various debugging garbage affect debugging 
debugging fails cdb provides function automatically clear various debugging 
example clear button shown function 

exiting cdb means exiting cdb debugging environment 
example return button shown function 

case studies debugging message passing programs cdb distributed debugger sequential debugger dbx gdb cluster systems 
supports debugging spmd fortran pvm programs fortran mpi programs 
subsections shall cdb efficiently supports debugging mpi pvm programs 

support debugging mpi programs subsection describe distributed debugger cdb supports debugging mpi programs 

modifying mpi source codes need modification mpi source code 

compiling mpi source codes order support source level program debugging mpi programs compiled option mpich standard subroutine libraries linked 
special library needed 
uncorrected proof 
debugging users start cdb debug mpi program need input debugging program name main interface cdb cdb execute slave server program local machine debugging program name regarded parameter program 
slave server program requests connection local monitoring program master server 
monitoring program create new thread master server thread true client server connection 
connection slave server runs command debugger np program debugger sequential debugger users chose dbx gdb number processes program executable point option enable user start remote processes favorite debugger 
sends output results master server thread 
thread shall start slave server specified node 
slave server requests connection local monitoring program runs executable sequential debugger 
connection channel local master server thread get debugging program name node node ip address regarding titles respective debugging windows displays respective source codes debugging windows 
get source code executable node program executed return local node displays debugging window 
time user may cdb user interface input debugging commands setting breakpoints running step step commands sent sequential debugger connection channel local master server thread slave server 
sequential debugger executes user requests output results returned connection channel displayed debugging information columns 
users want control processes time need set choose suitable process group 
debugging commands sent sequential debuggers connection channels 

example shows language mpi program 
source code executable 
program loaded nodes compass print respectively 
buttons clickable rest clickable 
button clicked debugging windows debug window debug window shown 

support debugging pvm programs subsection depict distributed debugger cdb supports debugging pvm programs 

modifying default debugger pvm pvm system default sequential debugger assigned shell file debugger directory pvm root lib 
cdb shell file modified creating new process fact executes slave server pro pips ra kluwer bo tex design development scalable distributed debugger gram 
program charge communication local process remote process es client communication channel 
slave server program get sequential debugger chosen users starts new process control sequential debugger 

cdb views debugging mpi programs 

cdb views debugging pvm programs 
uncorrected proof 
modifying pvm source codes pvm programs users specify pvm spawn need modification source code 
specified pvm spawn pvm runs pvm root lib debugger opens debugging window runs task sequential debugger 

compiling pvm source codes order support source level program debugging pvm programs compiled option pvm standard subroutine libraries linked 
special library needed 
pips ra kluwer bo tex wu chen sun 
debugging users start cdb debug pvm program need input debugging program name main interface cdb cdb execute slave server program local machine debugging program name regarded parameter program 
slave server program requests connection local monitoring program master server 
monitoring program create new thread master server thread true client server connection 
connection slave server runs executable sequential debugger 
connection channel local master server thread get debugging program name node node ip address regarding titles respective debugging windows displays respective source codes debugging windows 
get source code executable node program executed returns local node displays debugging window 
time user may cdb user interface input debugging commands setting breakpoints running step step commands sent sequential debugger connection channel local master server thread slave server 
sequential debugger executes user requests output results returned connection channel displayed debugging information columns 
pvm program runs subroutine pvm spawn pvm may run slave server program node cluster system 
similarly slave server programs request connections local monitoring programs local monitoring program shall create new thread master server thread true client server connection 
users want control processes time need set choose suitable process group 
debugging commands sent sequential debuggers connection channels 

example shows master slave fortran pvm program 
master program master executable 
slave program slave executable 
executed master node executed slave nodes print compass respectively 
buttons cdb main interface link debugging windows debugging window de uncorrected proof bug window debug window de bug window debug window 
number buttons real processes 
button marked red color clickable 
master process marked green color 
slave processes marked yellow color 

discussed current debugging techniques existing tools design implementation java scalable distributed debugger cdb cluster computing supports debugging message passing programs pvm mpi programs 
developed distributed debugger extending functions current existing sequential debuggers java implement interfaces cdb distributed debugger achieved general goals identified high performance debugging standard concerning parallel distributed debuggers 
attempt combine java sequential debuggers reach portability easy learn 
works done support debugging hpf openmp programs support microsoft nt cluster system 
authors acknowledge comments suggestions reviewers editor chief salim 
nelson debugging optimized code concepts implementation digital alpha systems digital technical journal december 
cheng hood portable debugger parallel distributed programs proc 
supercomputing november 
see science nas nasa gov groups tools projects 
kamal version user manual los alamos national laboratory 
debugger www com 
high performance debugging standards effort www org draft article htm 
geist beguelin dongarra jiang manchek sunderam pvm parallel virtual machine users guide tutorial networked parallel computing mit press 
lusk user guide mpich portable implementation mpi argonne national laboratory usa 
hao hp distributed debugger nas new technology seminar march 
heath finger paragraph tool visualizing performance parallel programs paragraph user guide december 
high performance debugging forum high performance debugging version standard command interface parallel debuggers www org draft september 
hood project building portable distributed debugger proc 
sigmetrics symposium parallel distributed tools may 
ibm ibm aix parallel environment programming primer release 
ibm distributed debugger workstations www ibm com software doc ae index html 
see url www sp 
linden challenges designing hpf debugger digital technical journal january 
debugger split language university california berkley technical report csd 
may berman designing parallel debugger portability proc 
ipps april 
pips ra kluwer bo tex design development scalable distributed debugger netzer bibliography parallel debuggers acm sigplan notices acm onr workshop parallel distributed debugging 
see www cs orst edu papers biblio html 
allen bowker simons title scalable debugger massively parallel message passing programs ieee parallel distributed technology summer 
stallman support debugging gdb cygnus solutions 

sunsoft solaris application developer guide 
think machines prism release notes may 
wu chen hu hu zhu wu design implementation cluster system oriented parallel programming environments technical report national research center intelligent computing systems chinese academy sciences 
wu performance evaluation prediction visualization parallel systems kluwer academic publishers boston 
www informatik uni stuttgart de grids html 
wu received ph degree computer science beijing university aeronautics astronautics 
worked national research center intelligent computing systems high performance computers institute computing technology chinese academy sciences postdoctoral researcher academic year parallel programming environment group project main project chinese hi tech programme 
worked department computer science louisiana state university visiting assistant professor academic year 
worked department electrical computer engineering northwestern university postdoctoral researcher october 
member ieee computer society acm association computing machinery new york academy sciences 
current research interests database driven performance analysis systems web design par distributed computing performance evaluation prediction visualization parallel systems parallel programming environments tools 
dr wu monograph performance evaluation prediction visualization parallel systems published kluwer academic publishers isbn 
mail ece northwestern edu chen received degree computer science university science technology china 
research interests parallel programming environments tools java programming 
currently works province pr china 
sun received ph degree computer science michigan state university 
staff scientist icase nasa langley research center associate professor computer science department louisiana state university lsu 
currently associate professor director scalable computing software laboratory computer science department illinois institute technology iit guest faculty argonne national laboratory 
dr sun research interests include parallel distributed processing software system performance evaluation scientific computing 
published intensively field research supported dod doe nasa nsf government agencies 
senior member ieee member acm new york academy science phi kappa phi partner esprit iv apart automatic performance analysis resources tools working group served serving chairman program committee number international conferences workshops 
received onr certificate recognition award best award international conference parallel processing icpp 
uncorrected proof pips ra kluwer bo tex 
