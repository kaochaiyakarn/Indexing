graphs core molecular biology vincent danos laneve pps cnrs university paris department computer science university bologna 
graphic language graphic calculus modeling protein interactions domain level introduced 
activation mixed forms interaction expressed graph rewriting rules 
compilation low level graph rewriting calculus called mobile shown correct suitable notion observational equivalence 
intermediate language independent interest easily implemented calculi 
traditional means modeling biology continuoustime di erential systems regev shapiro respective collaborators convincingly argued low level name communication languages may prove excellent tools compositional modular modeling biological systems protein interaction level 
fascinating new potentially huge field application may unclear specific formalism 
proposed calculus simplified form shown expressive translate kohn molecular maps compilation molecular data pertaining mammalian cell cycle control 
explore alternative independent possibility graphic calculus 
new formalism embeds tentative calculus going step details molecular interaction 
biological objects bundles proteins known complexes taken simple multisets connected graphs 
rules reactions see manipulate internal wiring states objects 
result complexes dissolved general graphical rewrite rules express easily representable 
say formalism better re just working level abstraction 
going details necessarily option introducing model true geometric aspect 
sign ll hands time soon strong predictive theory interactive properties proteins compounds deduced folding space folding hardly computable sequence metric models bit topic moment 
take interactive capabilities black box start study combinatorial protein networks level abstraction 
additionally metrics require quite di erent apparatus concurrency 
formalism place construct uniform translation intermediate language binary interactions limited resources name creation 
firmly believe intermediate formalism called mobile translatable calculus join calculus variants 
provides excellent abstraction details doing direct translation graphic calculi 
embedding maps formal proteins agents handles graph rewritings reactions transactions agents involved 
specific initiator nodes defined reaction try set transitory tree represented sharing private names spanning participants reaction 
recruitment phase checked agents correct state fire reaction 
phase succeeds updates performed 
failure past phase recruited reactants booked wave updates passed 
arbitrary transactions reducible peer peer interactions fact reason classical result theory calculus 
translation taken literally distributed asynchronous implementation reaction network 
principle run virtual cell internet 
useful quite line things proceed molecular level 
thinking concurrent processes chemical reactions long standing working intuition concurrency instance chemical machine 
way embedding bringing fore precise counterpart converse intuition protein interactions constitute rudimentary process algebra 
reasonably expect analysis give means import adapt automatic tools developed process 
relevant prove understanding biological systems remains seen 
related 
language quite similar concerns eye applying rewriting theory concurrency theory called pathway logic proposed lincoln collaborators 
rewriting system formalism reactants proteins reactions modelled rewriting rules 
internal proteins modeled closer graphic 
implementation pathway logic maude system gives potential access useful analytic tools 

author acknowledges discussions marc roux vincent formal approaches molecular biology 
graphic formal calculus protein interactions called graphic calculus graph rewriting system 
ll avoid presentation rely drawings 
sites proteins complexes 
assume countable set protein names protein name associated finite set sites taken countable set call interface 
interfaces signature map 
finite sets formal proteins simply proteins drawn boxes sites written boundary box 
discriminate sites pictures pairwise di erent natural numbers 
letters 
written box 
sites may connected sites case say bound may free case states hidden visible 
picture proteins follows understood sites represented visible site hidden site bound site proteins may assembled protein complexes simply complexes 
complexes drawn connecting bound sites proteins building connected graphs represents compound connected direct connection examples complexes self ring complex double contact solutions reactions 
solutions multisets proteins complexes 
protein general multiple occurrences solution precise refer particular occurrence protein time don 
name suggests solutions taken associativity commutativity complexes sort freely float inside 
solution ll say protein single connected protein ll pairs protein site refer precise site solution 
reactions pairs solutions written satisfying 
virtual connectedness exists set pairs free sites 
bn corresponding edge set connects 
components preservation proteins ll refer left hand side right hand side reactants products reaction 
activations 
kinds reactions deserve special attention activations connections left untouched states change right hand side connected 
kinds intersect left hand side connected 
example kind activation observes left hand sides pairs visible sites virtual connectedness condition met 
evidently condition 
free sites bound rule making real virtual connection left hand side 
intuitively virtual connectedness causality constraint saying reactions need go temporary super complex happen 
reaction elementary sense decomposed 
interesting study restricted system explicit temporary complexes don 
firing reaction 
reaction fires solution contains proteins matching pattern left hand side rule 
instance protein matches patterns left hand sides rules 
observe convention reactions mention active sites sites tested modified rule 
accordingly reaction ects sites mentioned left hand side sites kept intact 
example reactions produce proteins applied example solution set reactions firing conditions explained generate obvious transition relation written solutions 
calculus 
calculus visible took point view associative commutative operator 
making sure existing 
graphic extends allowing reactions look wiring complexes 
embed easily 
mobile show graphic calculus binary interactions limited name creation resources strong implement graphic 
puts upper bound powerful graphic process algebra 
translation parallels direct encodings calculus 
case done dealing generic graph rewriting rules needs transactional mechanism set 
additional complexity led introduce intermediate graphical formalism called mobile follow encoding low level close implementation 
seriously thinks graphic programming language biologists implemented machine running virtual experiments target language provides model computation think easily amenable distributed implementation 
nomadic calculus instance prove platform running implementation mobile 
development follows pretty technical biologist wonder worth ort 
think certainly gives sense formal biological objects implemented 
significantly raises question feel largely independent actual formal language consideration biologically plausible reduction complex events concurrent sequences binary interactions molecular combinatorics rely binary interactions failure mechanisms complex events working abstraction 
proceeding definition intermediate language say variants reasonable choose convenient specific purpose embedding graphic 
agents solutions 
need disjoint countable sets names private public channels generically called channels simply names 
symbols 

represent respectively private public channels 
address agent names letters 
agents ports associated signature function written maps ports public channels channels means interacts environment 
hidden visible replaced private channel public 
name calculus complexes built abstractly replacing public channels private ones sharing private channels agents 
picture left shows example complex connected ar agents carry internal states written 
private channel lists see picture right 
summarize bit formal agent tuple written agent name map ports disjoint union compatible describing ports currently occupied state living unspecified finite state space list private channels carried part information carried tells current public channels visible hidden 
part incorporated agent state prefer way help understanding translation 
refer interface compatible signature compatible mean agrees ports maps public channels 
lists private channels form dynamical transaction groups 
solutions simply multisets agents 
ll consider solutions satisfying formedness condition private channels occurring solution label ports 
recover case graph structure agents private channel labeling ports represents edge 
solution shown formed 
agents share private channels lists carry di erent matter 
interactions 
mobile calculus interaction rules written solutions consist agents possibly di erent interfaces internal states private channel lists 
rules match private channels definition tested equality 
handle assume countable set meta variables written 
match private channels define notion extended interfaces signature compatible maps agent ports written 
rule pair resp 
extended interfaces resp 
common metavariable public name finite repetition lists metavariables 
second condition really saying applies rule connected common private channel public channels 
added fourth condition restricting transformations left hand side lists reader see encoding limited transformations propagation lists left hand side dynamic creation new names 
example interaction rule said reactions test equality private channels 
crucial di erence graphic asked proteins interface suitable edges connecting 
enforcing di erent agents common labels ports 
instance example left hand side fires names position private equal 
similarly left hand sides test equality private channel lists 
addition rule may replace public channel private 
private channel taken agent private channels list created anew reaction rule 
conversely ports occupied private channels released substituted public channel returned state 
firing interaction rule 
interaction occurs solution contains agents matching pattern left hand side rule 
keeping notations introduced means exists injective renaming metavariables private channels suitable partial maps solution contains agents 
notation disjoint union coproduct write understood disjoint domains 
pair rewritten follows asked map new meta variables right hand side actual fresh private names solution 
graphic mobile embed graphic show encode reaction idea initial agents decide want rule try gradually construct possible instance protocol consists phases 
called recruitment phase sets rules set send signal recruit necessary left hand side send signal back report success initiators 
agents checked booked process initiators get signal back sure everybody aboard correct state 
comes second phase update phase led second series propagations actual changes take places 
flow graph initiators 
need define statically structure top allow necessary routing information target language 
aim fix connecting edge set say virtual connectedness condition says exists 
obtained connected graph construct unique way choose orientation resulting directed graph acyclic 
done instance constructing depth tree spanning see 
choose pair proteins say called initiators reaction neighbours state space 
directed acyclic graph brief dag flow information initiators get reaction started need describe state space associated 
elementary components occurring define state corresponding agent integer representing current phase simulation integer representing reaction pair disjoint partial maps neighbours respective domains predecessors successors state graphic recast mapping sites names list private names observe acyclic domains disjoint 
maps represent possible states contacts propagation algorithm stand contacted contacted contacted answered back 
map charge keeping track contacts received dag map contacts sent 
absence failures values increase value set means success 
need notations handle maps 
write associated constant partial maps 
attention maps equal domain taken empty limit cases initiators empty sinks empty 
write constant maps domain consisting phase recruitment 
ease reading simply write pairs associating port meta variable way write pair associating port public channel 
decide re going try 
cases depending bound case connection created 
start edges top recruitment rules flavours distinguish edges existing edges created fly contact contacts agents gradually booked receiving contact request 
cross talk concurrent applications rule possible new name created uniquely identifies tentative reaction passed 
integer 
take note contacts rule avoid contacting twice making sure left 
contacted exactly ancestor words possible contact rules exactly 
remarkably test exactly time recruited interface recruited agents conforms prescription 
instance contact verify port connected check interface constraint left hand side 
reader may observe case contact rules 
comes set backward response rules edges back top reader protest point creating rules 
domain empty sinks get soon re contacted reply back back rule 
second phase update 
go phase phase phase rule fires everybody state success guaranteed 
di erent names created connections created names propagated recruited agents set right connections 
keep reaction identifier created recruitment phase cross talk possible 
course name creation may avoided phase complex recruitment phase set right connections 
general case 
remains sweep time graph update rules modify booked agents described right hand side understood partial functions set 
back wave needed map longer 
list carried private channel list map appropriate newly bound ports correct private name chosen initiators 
sink sink observe freed asynchronously transaction done successors 
may participate interactions 
observe update phase cross connection checks needed 
failures 
protocol dealing failures 
failures may occur due competitions lack proper reactants 
easy theoretical way deal failures duplicating rules phase making reversible remarked failures occur phase 
careful analysis failures suitable rules propagating better terms ciency keep simplest policy 
simple solution merits introducing simulation cost number rules applied linear size reaction original left hand side reasonable 
formal correspondence 
systems agents obtained encoding rules described correctly may simulate original system described graphic 
state satisfying way define observation relation solutions relies basic observations free sites proteins agents 
definition 
barb relation satisfying rules 

protein free site respectively agent public channel free 
complex component 
solution complex write evident mapping graphic solutions mobile solutions respects hidden visible attributes translates edges means private channels 
proposition 
solution graphic 
theorem connects reductions graphic reductions mobile 
theorem conjunction proposition gives correctness simulation respect observations 
theorem 
solution graphic 

converse correspondence hold graphic competing reactions succeed 
finer grained encoded system mobile graphic competitions may result deadlocks 
correct failure recovery mechanism support converse direction theorem content simple soundness result moment 
purpose provide formalism suitable modeling language allowing direct descriptions molecular events ering low level distributed implementation 
doing able relate formalism intermediate language comparable process algebra 
important pending question clearly techniques process algebra adapted answer biologically relevant questions formalized protein networks 
interesting question progress understanding higher level behaviours systems 
specifically rewarding look definition modules congruence bisimulation 

gerard berry gerard boudol 
chemical machine 
theoretical computer science 


jack just concurrency kit 
bulletin european association theoretical computer science october 
technical contributions 

marc vincent danos 
core modeling language working molecular biologist 
communication international workshop computational methods systems biology 

vincent danos laneve 
core formal molecular biology 
appear proceedings esop european symposium programming lecture notes computer science springer verlag 

reinhard 
graph theory 
springer new york 

steven eker merrill knapp keith patrick lincoln jose meseguer kemal 
pathway logic symbolic analysis biological signaling 
proceedings pacific symposium biocomputing pages january 
appear 

cedric fournet georges gonthier 
reflexive chemical machine join calculus 
rd acm symposium principles programming languages popl 

kurt kohn 
molecular interaction map mammalian cell cycle control dna repair systems 
molecular biology cell 

lin 
interactive proof tool process algebras 
alain finkel matthias editors proceedings theoretical aspects computer science stacs volume lncs pages berlin germany february 
springer 

robin milner joachim parrow david walker 
calculus mobile processes ii 
information computation 

satoru miyano hiroaki kitano 
bio calculus concept molecular interaction 
genome informatics 

priami aviv regev ehud shapiro william silverman 
application stochastic name passing calculus representation simulation molecular processes 
information processing letters 
press 

aviv regev ehud shapiro 
cells computation 
nature september 

aviv regev william silverman ehud shapiro 
representation simulation biochemical processes calculus process algebra 
altman hunter klein editors pacific symposium biocomputing volume pages singapore 
world scientific press 

bjorn victor moller 
mobility workbench tool calculus 
david dill editor cav computer aided verification volume lecture notes computer science pages 
springer verlag 

peter sewell 
nomadic pict language infrastructure design mobile agents 
ieee concurrency april june 

