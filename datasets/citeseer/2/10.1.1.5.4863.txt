deep packet inspection parallel bloom filters praveen krishnamurthy todd sproull john lockwood washington university st louis conventional software packet inspection algorithms kept pace high speed networks interest turned hardware process network data quickly 
string scanning bloom filters scan entire packet payloads predefined signatures multi gigabit second line speeds 
class packet processing applications inspect packets deeper protocol headers analyze content 
instance network security applications drop packets containing certain malicious internet worms computer viruses carried packet payload 
content billing systems analyze media files bill receiver material transferred network 
content forwarding applications look hypertext transport protocol headers distribute requests servers load balancing 
payload scanning applications common requirement string matching 
example presence string bytes signature identify presence media file 
known internet worms nimda code red slammer propagate sending malicious executable programs identifiable certain byte sequences packet payloads 
location offset strings packet payload length unknown applications able detect strings different lengths starting arbitrary locations packet payload 
packet inspection applications deployed router ports operate wire speeds 
networking speeds doubling year increasingly difficult software packet monitors keep line rates 
changes need specialized hardware solutions portable operate wire speeds 
describe hardware technique bloom filters detect strings streaming data degrading network throughput 
bloom filter data structure stores set signatures compactly computing multiple hash functions member set 
technique queries database strings check membership particular string 
answer query false positive false negative 
important property data structure computation time involved performing query independent number strings database provided memory data structure scales linearly number strings stored 
furthermore amount storage required bloom filter string independent length 
hardware implementation groups signatures length bytes published ieee computer society ieee stores group strings unique bloom filter 
bloom filter scans streaming data checks strings corresponding length 
bloom filter detects suspicious string analyzer probes string decide belongs set strings false positive 
architecture hardware bloom filter implementation analyze performance 
analysis shows implementation field programmable gate arrays fpgas support second line speeds scanning strings 
bloom filter theory bloom filter randomized data structure represent set strings compactly efficient membership querying 
string bloom filter computes hash functions producing hash values ranging filter sets bits bit vector addresses corresponding hash values 
procedure repeats members set entire process called programming filter 
query process similar programming filter takes input string membership verification 
new string bloom filter generates hash values hash functions programming 
filter looks bits bit vector locations corresponding hash values 
finds bits unset declares string set 
finds bits set declares string belong set certain probability 
uncertainty membership comes fact bits bit vector set members 
finding bit set necessarily imply particular string checked set bit 
finding bit set certainly implies string belong set bits definitely set bloom filter programming string 
explains presence false positives scheme absence false negatives 
false positive probability nk number strings programmed bloom filter 
reduce value choosing appropriate values size member set 
clear value quite large compared size string set 
ratio reduce probability increasing number hash functions optimal case minimizes false positive probability respect ln corresponds false positive probability ratio interpret ratio average number bits consumed single member set 
space requirement independent actual size member 
optimal case false positive probability decreases exponentially linear increase ratio implies number hash functions number random lookups bit vector required query membership proportional counting bloom filters property bloom filters impossible delete member stored filter 
deleting particular entry requires setting corresponding hashed bits bit vector zero 
disturb members programmed filter hash bits 
solve problem fan proposed idea counting bloom filters maintain vector counters corresponding bit bit vector 
counting bloom filter adds deletes member increments decrements counters corresponding hash values 
counter changes zero sets corresponding bit bit vector 
counter changes zero clears corresponding bit bit vector 
counters change addition deletion strings bloom filter 
applications network intrusion detection updates frequent actual query process 
january february entering byte hot interconnects ieee micro analyzer isolates false positives suspicious substrings hardware bloom filters network traffic 
bloom filters scan traffic network looking predefined signatures 
max byte string bloom filter max streaming data window lmin byte string byte string byte string bloom filter bloom filter bloom filter min membership query results bloom filters leaving byte 
window streaming data containing strings lengths min max bloom filter examines string 
implementation maintain counters software bit corresponding counter remains hardware 
avoiding counter implementation hardware saves memory resources 
system description previous section explained amount computation required detect string membership bloom filter independent size set strings tune filter particular false positive probability 
secondly special purpose hardware fpgas perform computation requires generating hash values 
hardware implementation bloom filters quite attractive quickly isolating potentially matching strings streaming network data 
system overview system relies predefined set signatures grouped length stored set parallel bloom filters hardware 
bloom filter contains signatures particular length 
system uses bloom filters monitor network traffic operate strings corresponding length network data shows 
system tests string membership bloom filters 
identifies string member bloom filter system declares string possible matching signature 
strings receive probing analyzer determines string member set false positive 
stated differently analyzer deterministic string matching algorithm verifies input string member set 
analyzer determination system take appropriate action drop forward log string associated packet 
signature lengths range min max 
bloom filter engine reads input data stream arrives rate byte clock cycle 
monitors window max bytes shown 
window full contains max min substrings potential signatures 
system verifies membership substring appropriate bloom filter 
hardware bloom filter gives query result clock cycle 
way system verify memberships max min strings single clock cycle 
substrings match signature data stream advance byte 
monitoring window way eventually scans possible strings length min bytes max bytes packet 
case multiple substrings matching single window longest substring string interest pol icy called longest substring lsf 
case multiple matches time array bloom filters analyzer probes substrings longest shortest 
search stops soon analyzer confirms match substring 
search window advances byte system repeats procedure 
system throughput bloom filters accelerate string matching isolating strings network data sending just strings highest probability matching analyzer 
string interest goes unnoticed bloom filters give false negatives 
derive expression system statistical throughput notation time seconds required check presence string analyzer false positive probability bloom filter total number bloom filters system clock frequency hz system operates 
window possible multiple bloom filters identify matches corresponding substrings 
search ends lth bloom filter denote number bloom filters lengths higher bloom filters show false match probability expected number false matches tf match requires additional probing analyzer 
preceding expression represents expected number additional probes performed analyzer search ends lth bloom filter 
worst case value upper bounded bf 
calculations upper bound expected number additional probes 
probes requires time worst case expected additional time spent probing add bf entering bytes search ends bloom filter identifies match true match bloom filters string lengths match window 
worst case analyzer spend time confirm true match 
match identified probing needed time equal clock period spent 
denote frequency occurrence true matching string data stream average time spent search window average system spends total add examining window window advances byte 
system throughput add bf streaming data window engine engine engine 
multiple parallel engines improve throughput 
system shown processes byte clock cycle 
group set bloom filters single scanner engine instantiate multiple engines monitor data stream starting offset byte 
engines byte stream advance bytes time shown 
parallel engines independent analyzer circuit throughput simply gr 
share analyzer throughput dif january february leaving bytes hot interconnects ieee micro ferent contention accessing analyzer 
case throughput gt add gbf assumption engines finds true match window 
tuning system parameters simplify equation considering realistic values relevant parameters 
recall assume analyzer require constant time check input string database 
analyzer implemented hash table 
set strings inserted hash table collisions resolved chaining colliding strings linked list 
hash table average constant search time storable commodity sram 
ample memory average search time hash table independent number strings string retrieval time memory depends string length 
assume byte string probed hash table maintained sram data bus width bytes 
take clock cycles retrieve string compare input 
max set assumption collision accounting memory access latencies hash probe require clock cycles 
times system clock period 
typically strings interest low frequency occurrence streaming data assume small values example 
average system finds string interest characters scanned 
assume values indicating system scan signatures distinct lengths mhz typical speed fpgas commodity bloom filter engines parallel 
substituting values equation obtain expression express value notation false positive probability ith bloom filter engine memory allocated bloom filter number strings stored bloom filter total amount chip memory available bloom filters engines engine memory shared bloom filters total number strings stored bloom filters engine summation engineer false positive probability bloom filters engine say equation mi ni ln kb implies ln substituting value expression plotting throughput total strings obtain graph 
shows effect false positives dominant small values memory results lower throughput 
amount memory increases throughput increases rapidly saturates gbps 
merely megabit chip memory system scan strings line rate oc gbps 
increase number strings proportional increase memory 
hardware design considerations equation shows fixed number strings bloom filter number bits system throughput gbps allocated member bloom filter decides number hash functions needed bloom filter 
example allocate bits member average number hash functions false positive probability describe support hash functions hardware perform corresponding random lookups chip memories 
hash functions ramakrishna fu described class universal hash functions suitable hardware implementation 
generate necessary hash functions perform calculations 
bit string bits represented chip memory available bloom filters mbits 
system throughput function available chip memory 
graph shows results values probability string true occurrence strings 
tuned system total strings distinct lengths 
maximum string probing time analyzer times system clock period clock frequency mhz 
calculate ith hash function ib bitwise operator bitwise xor operator 
ij terms predetermined random numbers range 
observe hash function calculations cumulative results calculated bits reusable calculating hash function bits 
property hash functions results regular hash function matrix 
embedded memories hash function corresponds random lookup bit long memory array 
hash functions bloom filter memory support random lookups clock cycle 
illustrates requirements graphically 
realize memories density lookup capacity making embedded rams modern fpga devices vlsi chips 
today state art vlsi technology easy fabricate memories january february hot interconnects ieee micro bits bits single contiguous memory bits memory memory memory memory 
bloom filter single memory vector allows random lookups time implementation multiple smaller memories smaller lookup capacity realize desired lookup capacity 
hold bits 
gives concise summary embedded memory technologies 
embedded memories limited lookup capacity possible employ multiple memories smaller lookup capacity 
instance lucent memory core read write ports 
memory core random memory locations readable single clock cycle 
performing concurrent memory operations requires parallel memory cores seventh required array size illustrates 
basic bloom filter allows hash function map bit vector possible member hash functions map memory segment exceeding lookup capacity memory core 
solve problem restricting range hash function memory preventing memory contention 
general maximum lookup capacity ram limited technology combine memories size realize desired capacity bits hash functions 
hash functions map single memory 
express false positive probability nk comparing preceding equation equation see restricting number hash functions mapping particular memory negligible effect false positive probability 
prototype implementation results implemented prototype system xilinx xcv field programmable gate array fpga field programmable port extender fpx platform 
implemented application find fixed size signatures bytes detect transfer high volumes content network 
xcv embedded block memories configurable single bit wide bit long array perform read operations dual ports single clock cycle 
memory construct bloom hn kh internet fpx bloom filters fiber network gigabit link filter 
equation equation see block ram support ln signatures false positive probability 
employing block rams construct mini bloom filter string capacity false positive probability block rams construct mini bloom filters giving aggregate capacity strings 
mini bloom filters constitute engine 
system instantiating parallel engines consume block rams push bytes single clock cycle 
substituting values equation see system achieve throughput gbps oc line rate 
functional prototype implements single bloom filter engine consuming block rams percent fpga available logic resources 
system operates mhz 
shows deployment setup system 
internet traffic passes gbps version washington university gigabit switch multicasts data fpx router 
router contains fast ethernet switch connected workstations 
data workstations pass router internet 
traffic coming internet router goes fpx processing 
software process replaced analyzer stand 
deployment setup prototype 
gigabit link monitor software fiber network router network station software checks packets marked possible match bloom filters fpx 
performed experiments observe practical performance bloom filters terms false positive rate programming filter different numbers strings counting false positives 
shows result experiment theoretical value 
plot shows experimental results consistent theoretical predictions 
experiments system produce false positives fewer strings program filters approximately strings mini bloom filter 
produces dip curve point 
determine throughput particular prototype configuration sent traffic switch fixed rate recycled switch generate traffic speeds gbps 
single match engine circuit scanned data rates mbps 
related explore benefits aho corasick boyer moore ac bm algorithm improve performance snort 
algorithm faster boyer moore algorithm current version snort engine 
varghese fisk analyze implementation boyer moore algorithm implementation average case performance better january february hot interconnects ieee micro false positive probability theoretical experimental 
signatures programmed single bloom filter 
false positive probability function number signatures stored bloom filter engine 
aho corasick algorithm 
algorithms primarily geared software implementation 
commercial hardware implementations packet content inspection ics available include pax port pmc sierra 
details proprietary systems available 
advent modern reconfigurable hardware technology particularly fpgas added new dimension hardware packet inspection techniques 
literature shows new approaches reconfigurable hardware essentially involve building automaton search string generating specialized hardware circuit gates flip flops automaton instantiating multiple automata reconfigurable chip search streaming data parallel 
common characteristic approaches chip hardware resource consumption gates flip flops grows linearly number search characters 
secondly methods require reprogramming fpga add delete individual strings database 
change database requires recompilation automaton regeneration repeated synthesis placement routing circuits 
contrast bloom filter systems handle larger database reasonable resources support fast updates database 
important feature network intrusion detection requires immediate response attacks malicious worms 
implemented system detect presence predefined strings internet packet payloads 
parallel bloom filters implemented fpga scanned content second speeds 
proven feasibility idea experimental implementation runs fpx platform 
micro acknowledgments research supported global velocity 
john lockwood consultant global velocity assistant professor washington university st louis 
authors article equity receive royalty license technology global velocity 

bloom space time trade offs hash coding allowable errors comm 
acm vol 
may pp 


fan summary cache scalable wide area web cache sharing protocol ieee acm trans 
networking vol june pp 


algorithms prentice hall 

ramakrishna fu performance study hashing functions hardware applications proc 
th int conf 
computing information pp 


special purpose smooth ride edn june 

lockwood reprogrammable network packet processing field programmable port extender fpx proc 
acm int symp 
field programmable gate arrays fpga acm press pp 


staniford faster string matching intrusion detection exceeding speed snort proc 
nd darpa information survivability conference exposition dis ii ieee cs press pp 


snort lightweight intrusion detection networks proc 
th systems administration conf usenix assoc pp 


fisk varghese fast content packet handling intrusion detection tech 
report cs univ california san diego 

implementation content scanning module internet firewall proc 
th ann 
ieee symp 
field programmable custom computing machines fccm ieee cs press pp 


hutchings franklin carver assisting network intrusion detection reconfigurable hardware proc 
th ann 
ieee symp 
field programmable custom computing machines fccm ieee cs press pp 


prasanna fast regular expression matching fpgas proc 
th ann 
ieee symp 
field programmable custom computing machines fccm ieee cs press 
phd student department computer science engineering washington university st louis 
research interests include various aspects high speed networking system design including packet classification forwarding payload inspection intrusion detection packet buffering queuing 
bs electrical electronics engineering institute technology science india 
praveen krishnamurthy phd student washington university st louis 
research interests include networking systems design data mining optical interconnection networks 
krishnamurthy bachelor degree engineering university madras india ms computer engineering washington university st louis 
todd sproull phd student computer engineering research assistant applied research laboratory washington university st louis 
research interests include control configuration reprogrammable systems distributed computing 
sproull bs electrical engineering southern illinois university ms computer engineering washington university st louis 
john lockwood assistant professor washington university st louis 
research interests include design implementation networking systems reconfigurable hardware 
developed field programmable port extender fpx enable rapid prototyping extensible network modules 
lockwood bs ms phd university illinois urbana champaign 
member ieee acm tau beta pi eta kappa nu 
direct questions comments article arl wustl edu 
additional information project online www arl wustl edu arl projects fpx htm 
january february 
