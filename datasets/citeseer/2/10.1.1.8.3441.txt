dbproxy dynamic data cache web applications khalil amiri ibm watson research center hawthorne ny ibm com tewari ibm almaden research center san jose ca ibm com majority web pages served today generated dynamically usually application server querying back database 
enhance scalability dynamic content serving large sites application servers offloaded front nodes called edge servers 
improvement application offloading marginal data fetched origin database system 
improve scalability cut response times data effectively cached edge servers 
scale deployment edge servers rising costs administration demand caches self managing adaptive 
describe dbproxy edge network semantic data cache web applications 
dbproxy designed adapt changes workload transparent graceful fashion caching large number overlapping dynamically changing materialized views 
new views added automatically may discarded save space 
discuss challenges designing implementing dynamic edge data cache describe proposed solutions 
data accessed web increasingly dynamic generated fly response user request customer profile 
examples dynamic data include personalized web pages targeted advertisements online ecommerce interactions 
dynamic data served author performed ibm watson research center park university science technology korea ac kr sriram padmanabhan ibm watson research center hawthorne ny srp ibm com tiered architecture consisting web server application server database data stored database accessed demand application server components formatted delivered client web server 
improve scalability performance caching edge servers widely deployed web static html pages 
dynamic content requires database accesses caches typically passed marking content uncacheable 
targeted extending static caching concept storing result dynamic web request html fragments formats indexed exact url string request header 
consistency limited reuse cached data cache space management easily gate scalability schemes 
architectures edge server collectively refers client side proxies server side reverse proxies edge enterprise caches content distribution network cdn acts application server proxy offloading application components servlets java server pages enterprise beans edge 
edge execution increases scalability back reduces client response latency avoids provisioning back resources edge resources shared sites 
architecture edge server application server proxy handling dynamic requests locally forwarding serviced back 
application components executing edge access backend database standardized interface jdbc 
combination dynamic data edge network application execution introduces new challenge 
data fetched remote back increase scalability due distributed execution marginal 
consequently caching proven technique improving scal ability performance large scale distributed systems needs evolve support structured data caching edge 
describe practical architecture self managing data cache edge server accelerate web applications 
prototype called dbproxy intercepts jdbc sql requests check satisfied locally 
dbproxy local data cache stand database engine maintains partial semantically consistent materialized views previous query results 
avoid significant overlap cached query results storage redundancy dbproxy employs table storage policy stores results common local table far possible 
common table adds new challenges cache replacement underlying data shared results 
cache replacement mechanisms address challenges adjust operate various space constraints cost benefit replacement policy 
dbproxy decides dynamically views worth caching workload new views added fly removed save space improve execution time 
dynamic changes add new challenges consistency maintenance 
furthermore dynamic semantic cache contain hundreds thousands queries 
decide new query cache hit tested containment plausible previously cached queries 
sophisticated query containment algorithms required scale large cache sizes 
discuss various challenges dynamic edge data caching describe address report summary evaluation proposed approach 
discussion dbproxy organized follows 
section discusses challenges adaptive dynamic data caching 
section describes design implementation details dbproxy 
section reports summary evaluation performance 
section reviews related section summarizes 
challenges dynamic data caching offloading application server components edge server improve scalability real performance benefit remains limited back database access 
improvement access latency scalability data needs cached edge servers 
approaches data caching edge mainly including full replication materialized views 
replication relies administrator define cached 
local tables simply mirror corresponding back base tables 
full database replication undesirable incurs large space customer id uname passwd fname lname addr id phone email visit login expiration discount balance pmt birthdate data orders id id date sub total tax total ship type ship date bill addr id ship addr id status order line ol id ol id ol id ol qty ol discount ol comment author id fname lname dob bio item id title id pub date publisher subject desc related thumbnail image srp cost avail stock isbn page backing dimension 
simplified database schema line bookstore tpc benchmark 
head edge server resources usually limited 
query response caches hand eliminate need administrator control dynamically caching data store data separate tables exact matching resulting excess storage redundancy 
materialized view approach data caching uses separate table view relies administrator view definition 
effectiveness caching data edge hinges proper view defined edge cache 
environments edge server dedicated different community geographic region determining proper view cache require careful monitoring workload involve complex trade offs presume knowledge current resource availability edge server 
resources workloads exhibit changes time example response advertisement campaigns news views cached may adapted administrator 
edge data caching requirements scale deployment edge servers rising costs administration demand caches self managing adaptive 
specifically distinguish key design requirements dynamic data cache database independence edge applications access multiple back databases different schemas possibly reside dbmss different vendors 
result edge data cache ideally assume particular dbms database schema 
furthermore allow data cached multiple back ends share space resources available edge 
self management cache adapt dynamically workload available resources 
cache contain large number materialized views matching application access patterns 
views added fly response queries edge application cache actual added view may generalization application query 
eliminates need administrator decide optimize particular materialized view edge cache 
fast query matching dynamic cache contain large number cached queries potentially hundreds thousands 
time able quickly detect new query cache hit 
able perform efficient query matching determine new query answerable union cached views quickly cache size grows 
efficient space management dynamic data cache contain large number cached queries views cache needs reduce overhead redundant storage storing large number overlapping views common tables separately 
space optimized evicting views add low benefit ensuring shared data removed 
consistency consistency maintained efficiently presence large varying number views 
amount done maintain consistency edge caches scale number caches size 
commerce example consider example commerce site online bookstore 
shows typical simplified schema database 
example derived schema tpc benchmark evaluation experiments 
line site allows keyword searches author names titles lists related books purchased benchmark real world commerce applications contains variety query types 
consider searching item table cost suggested retail price qa select avail cost item cost qb select avail cost item cost 
qn select srp cost item srp queries cached answer new queries constraints contained ranges 
avoid redundancy cache needs share storage overlapping vertical horizontal sections item table retrieved queries 
receiving new query cache needs verify new dbproxy jdbc driver query parser query matching module edge application resource manager servlet jdbc interface sql jdbc query evaluator catalog consistency manager back 
dbproxy key components 
cache index cache repository query contained union data sets retrieved tens hundreds queries 
query matching operation efficient scale number cached queries 
furthermore event change base item table origin amount required update cached views scale number queries cached 
dbproxy architecture architecture dbproxy assumes application components running edge server ibm websphere edge server 
edge server receives client requests processes locally passing requests dynamic content application components turn access database jdbc driver 
jdbc driver manages remote connections edge server back database server simplifies application data access buffering result sets allowing scrolling updates performed 
dbproxy implemented jdbc driver loaded edge applications 
transparently intercepts application sql calls determines satisfied local cache 
design overview shown cache functionality contained components 
query evaluator core module dbproxy contains caching logic 
determines access hit invoking query matching module takes query constraint clauses arguments 
query evaluator decides results returned back inserted cache 
rewrites queries cache passing back prefetch data improve cache performance 
resource result remote execute insert locally 
rewrite query query hit 
insert result return result execute query local cache return result query result cache repository 
cache hit processing 
dashed arrows represent hit path solid arrows represent path 
query misses insert data local cache 
manager maintains statistics hit rates response times adapts cache contents configuration parameters accordingly 
consistency manager responsible maintaining cache consistency 
processing paths hit shown 
dbproxy employs novel techniques data storage query matching consistency maintenance cache replacement achieve desired efficiency 
overview various aspects remainder section 
cache repository data dbproxy edge cache stored persistently local stand database 
contents edge cache described cache index containing list queries 
achieve space efficiency data stored common schema tables possible multiple query results share physical storage 
queries base table stored single usually partially populated cached copy base table 
join queries join condition base table list stored local table 
scheme achieves space efficiency simplifies task consistency maintenance 
local result table created columns selected query 
column type metadata information retrieved back server cached local catalog cache 
example consider item table shown 
columns column id primary key 
shows shared local table inserting results queries locally cached copy item table 
local table considered vertical horizontal subset back item table 
queries rewritten necessary expand select list include primary key id table locally cached rows uniquely identified 
avoids storing duplicate rows local tables cached item table id cost retrieved select cost item cost retrieved null select item null inserted consistency protocol 
local storage 
local item table entries queries inserted cache 
rows fetched middle fetched 
fetch cost column null values inserted 
result sets queries overlap 
local item table created just inserting rows retrieved primary key column columns requested query cost srp 
table assumed initially empty insertions complete successfully 
insert rows retrieved check table altered add new columns true case 
attempt insert rows fetched 
observe row id inserted insert attempt raise exception 
case insert changed update statement 
select cost column null value inserted column 
query fetch columns defined locally cached table results inserted 
case values columns fetched set null 
presence fake null values local tables raises concern values may exposed application queries 
dbproxy containment checker ensures cache return incorrect false nulls incomplete results 
table creation 
reduce number times schema locally cached table altered approach consists observing application query stream initially history available guide initial definition local tables 
local table schema definition tradeoff space overhead entire back schema space columns allocated overhead schema alterations 
observed large fraction columns need cached schema backend table 
example observing list queries qa qn section item table local table created create table local item id integer null avail date cost double srp double primary key id join queries 
results join query stored single table described table list join query join constraint 
join queries operate table list join condition results joins inserted table 
name local table query stored cache index entry 
query matching handle large varying set cached views query matching engine dbproxy highly optimized ensure fast response time hits 
cached queries dbproxy organized multi level index 
level index database schema 
second level table list tables accessed query 
third level index contains columns named query clauses 
hash tables allow quick search level 
new query received dbproxy parsed constituent clauses 
particular query clause stored boolean expression represents constraint predicate 
leaf elements expression simple predicates form col op value col op col 
predicates connected nodes arbitrarily complex expressions 
query parsed cache index accessed retrieve set queries operated tables retrieved super set columns required new query 
query matcher invoked verify result set new query contained union results previously cached candidate queries 
baseline matching algorithm 
result query qb contained query qa possible values items database predicate logically implies 
qb wherep qa wherep 
equivalent statement qb wherep qa wherep unsatisfiable 
particular queries qa qb mentioned section example query matching module test expression unsatisfiability cost cost expression satisfiable cost particular solution qb contained qa 
checking containment query union multiple queries simply requires considering logical predicates cached queries unsatisfiability verification 
baseline algorithm algorithm described decides satisfiability expressions integer attributes 
extend algorithm handle floating point string types 
floating point types introduce complexities plausible intervals attribute open 
algorithm ca checking containment clauses include disjunctive conjunctive predicates including combination numeric range string range set membership predicates 
template query matching 
baseline algorithm handle complex general predicates induce significant overhead cache contains large number queries 
observe applications issue template queries selection predicates share structure vary numeric string constants 
dbproxy exploits template nature application query streams reduce containment checking overhead order magnitude 
similar queries instantiations template aggregated cache predicates merged specialized data structures call merged aggregate predicates maps 
new query received checked containment map corresponding aggregation previously cached similar queries 
maps augmented indexes allow fast search 
containment checking converted index data search achieving significant speedups 
consistency dbproxy ensures data consistency subscribing stream updates propagated origin server 
traditional materialized view approaches update cached views re executing view definition change delta base data 
dbproxy requires efficient mechanism potentially large number queries caches 
cached data maintained partially populated copies back tables changes committed base tables origin simply propagated cached versions need re execute queries 
updates deletes inserts base tables propagated applied partially populated counterparts edge 
queries execute cache retrieve newly propagated changes matching tuples 
solution presumes slowly changing data typical web environments trades potentially unnecessary data propagation lowering processing overhead determining cached views updated 
table undergoing heavy update workload dbproxy disable local copy specified period 
read queries issued edge applications satisfied cache possible 
update transactions forwarded back database execution applying local cache 
dbproxy designed large scale deployment consis tency protocol loosely coupled origin possible 
consequently onus ensuring cache consistency fall possible edge caches resources scale naturally 
back server responsible periodic update propagation task offloaded separate process machine 
consistency guarantees web applications tolerate slightly stale data edge cache interested reasonable consistency guarantees 
example applications usually require observe effects updates immediate subsequent query 
query update hit locally stale cache updates reflected cache lost resulting strange application behavior 
section describe specific consistency properties individually collectively desirable distributed web applications 
dt set committed tuples origin database time dt state database time reflects set transactions committed origin server time point time dbproxy edge data cache contains subset tuples origin database 
ct denote set tuples dbproxy edge data cache time define properties guaranteed dbproxy increasingly higher performance costs lag consistency respect origin 
state cache ct time considered lag consistent origin database exists time lag state cache corresponds state database time units ago ct mean values tuples local cache equal back earlier time cache may tuples 
monotonic state transitions 
implies state database exported dbproxy moves forward time 
edge application observes database state dt observes state dt 
immediate visibility updates 
requires application commits update issues query query observe effects update previous updates 
dbproxy relies data propagator captures tables origin forwards edge caches 
data changes propagated edges tagged transaction identifiers applied edge cache transaction commit order 
stream incoming reflecting effects transactions committed origin site applied locally cached tables 
challenge ensuring lag consistency dbproxy dt 
interpret equality arises local tables updated propagation messages query result inserts dbproxy incorporates algorithms ensure lag consistency maintained result inserts 
separate protocols provide additional consistency properties specified application 
details algorithms fully described technical report 
cache replacement consistency protocol requires inserts updates deletes performed origin site cached table propagated edge cache 
consequently cache contain data belong cached query 
furthermore data effectively evicted limit space overhead optimize usage usually limited edge resources 
manage limited space resources edge dbproxy relies background garbage collection process evicts unused data cache safely preserving data consistency 
specifically goal cache replacement maximize benefit cache limited amount available space 
contrast traditional replacement files memory pages underlying rows shared multiple queries complicating task query eviction 
cache replacement dbproxy ensures properties maintained 
property evicting victim query cache underlying tuples belong query deleted query remains cache accesses tuples 
property tuples inserted consistency manager belong results cached queries eventually garbage collected 
cache replacement component dbproxy consists replacement policy determines replace replacement mechanism determines remove data properties maintained 
function cache replacement policy determine set queries replace cache 
space constraint tries maximize benefit storing query results locally space similar traditional knapsack problem 
determining benefit query depends multiple factors recency access frequency access cost versus hit cost frequency updates 
benefit offset space usage query 
cache replacement triggered space usage local database reaches high watermark hwm value 
replacement begins space sufficiently freed reaches low watermark lwm value 
replacement triggered demand query space insert rows local tables create new table 
replacement background process expected proceed concurrently query servicing update operations 
deeper discussion alternative mechanisms replacement properties analysis 
describe mechanisms group replacement simple implement adds overhead hit update propagation 
replacement policy set victim queries marked deletion 
ensure non overlapping rows belong victim queries properly marked carry steps 
accessed flag associated cached rows set false 
queries executed background 
background execution occur extended period affect performance foreground queries 
query executed accessed flag selected row set true 
execution cycle row flag remains false safely deleted 
prevent rows inserted updated cache consistency manager garbage collection cycle getting deleted set accessed flag true 
claims hold group replacement algorithm claim group replacement guarantees tuple deleted belongs results query remains cache index ii tuple accessed eventually removed cache 
claim dbproxy consistency group replacement enabled guarantees local executions return correct entire results 
experimental evaluation section experimental study performance impact data caching edge servers 
implemented caching functionality transparently embedding modified jdbc driver 
exceptions occur local processing sql statement caught driver statement forwarded back 
results returned local cache remote server appear indistinguishable application 
evaluation methodology environment 
represents sketch evaluation environment 
machines emulate client browsers edge flag implemented column defined creation local tables 
edge server pentium ii mhz mb memory client machine pentium ii mhz mb memory mbps origin server pentium iii mhz mb memory mbps db delay db 
evaluation environment 
machines evaluation testbed tpc benchmark 
client machine run workload generator applied load equivalent emulated browsers 
machines ran linux redhat 
apache tomcat app server 
server origin server respectively 
machine powerful edge server origin server details 
fast ethernet network mbps connect machines 
emulate widearea network conditions edge back server artificially introduce delay milliseconds remote queries 
represents application toend latency communicate wide area network assuming typical wide area bandwidths latencies 
db back database server local cache edge server 
tpc commerce benchmark evaluation 
particular java implementation benchmark university wisconsin 
tpc benchmark emulates online bookstore application amazon com 
browsing mix benchmark includes search queries best selling books author subject category queries related items particular book queries customer information order status 
benchmark numeric alphabetical range queries 
clause queries atomic predicates employing equality operator connected conjunctive disjunctive boolean operator 
standard benchmark evaluate cache 
modified benchmark slightly reflect type range queries common applications auction warehouses real estate travel fare searches geographic area queries 
minimize change logic benchmark modified single query category get related items query 
standard implementation items related particular book stored table explicitly priori defined columns 
inquiring 
summary cache performance tpc benchmark 
cases base tpc item database ii base tpc item database iii modified tpc item database iv modified tpc item database loaded back 
related items particular book simply requires inspecting items self join item table 
model range queries change get query search items cost main item 
query returns top items ordered cost 
actual percentage varies range selected uniform random distribution model varying user input select id thumbnail item cost order cost fetch rows range query calculated cost main item obtained issuing simple query 
graphs reported section refer browsing mix standard tpc benchmark tpc modified benchmark modified tpc mod short 
report baseline performance numbers item database 
investigate effect higher load origin server skew access pattern dynamic changes workload cache performance 
focus hit rate response time key measures performance 
measure query response time observed application servlets executing edge 
experiments reported section cache replacement policy triggered 
tpc benchmark executed hour seconds measurements reported seconds 
reported measurements collected system queries 
baseline performance impact 
graphs average response time queries configurations tpc item database ii tpc item database iii modified tpc item database iv modified tpc item database loaded origin server 
measurements configuration cache queries back ii cache iii cache top queries 
consider baseline tpc benchmark configurations 
shows response time improvement significant ranging case case 
note improvement better larger database may counter intuitive hit rate higher smaller databases 
observed local insertion time database higher case due higher contention local database 
performance impact caching top queries disabled rightmost bar graph configurations 
note depending load database size caching queries happen predominantly multi table joins may increase decrease performance 
dbproxy resource manager collects response time statistics turn caching different queries observed performance 
effect server load rightmost configuration discussed 
hit rate versus response time 
remaining experimental results focus database size 
table provides breakdown response times hit rates query category base tpc modified tpc benchmarks running item database 
hit rates vary category hit rate averaging baseline benchmark modified benchmark 
observe hit rates significantly higher baseline tpc response time improvement higher modified tpc benchmark 
modified tpc introduces queries low hit cost high cost 
query matching time modified tpc measured lower original tpc inclusion cost range query query constraint involves single column reduced average number columns clause 
table provides comparison caching configuration non caching configuration terms average response times query categories bottom rows table 
effect server load 
advantage caching increases scalability back database serving large part queries edge server 
reduces average response time back server experiencing high load 
high load conditions performance critical frustrated users migrate sites 
order quantify baseline tpc modified tpc query response hit query response hit query category time rate frequency time rate frequency simple top exact match total cache table 
cache performance baseline modified tpc benchmarks 
database size items customers 
workload included emulated browsers executing browsing mix tpc 
average response time msec breakdown hit cost modified tpc loaded server simple hit simple hit query category local insertion network delay query execution query matching exact match hit exact match 
breakdown hit cost modified tpc loaded origin server 
benefit repeated experiments modified tpc benchmark placing additional load origin server 
load created invoking additional equal number emulated browsers directly back 
doubled load origin non caching configuration 
right configurations mod mod load correspond modified tpc benchmark running item database additional server load 
graph shows increased server load resulted doubling average response time increasing factor configuration 
caching edge server enabled average response time increased 
performance improved factor 
shows break hit cost respectively loaded server case 
shown measured remote execution time double load 
despite cost query matching unoptimized implementation local execution effective 
effect access skew 
investigate effect access skew cache performance pronounced edge servers targeting homogeneous user population modified benchmark exhibit limited degree skew search query distribution 
hot sets common queries real workloads skew customers active topics news 
standard benchmark selects subject book queried clients uniform distribution 
change distribution zipf distribution parameter 
results showed cache performance improves skewed access cache performance improves 
hit rates exact match top query categories improve 
expected higher locality improve performance caching configuration configuration 
template query containment checking 
experiments reported section baseline query containment checking algorithm 
estimate benefit template containment checking performed experiments 
tpc benchmark cache employing traditional containment checker second cache template containment checking 
benchmark executed minutes warm cache user response time measured 
recorded average response time improvement containment checking 
overhead replacement algorithm 
estimate cost group replacement algorithm performance cache measured average query response time tpc executing small database emulated browsers replacement replacement 
cases number queries cache 
replacement case victim queries hidden cache index data deleted cached tables 
replacement background execution group replacement algorithm deleted excess rows victim queries 
overhead cleaning terms slow foreground queries low queries cache evicted half executed group replacement algorithm 
note general execution overhead group replacement grows number queries maintained cache number queries evicted 
consequently advantageous start group replacement algorithm reaching lwm large number queries evicted significant amount space recovered 
related dbproxy leverages wealth previous areas web caching content distribution networks database caching materialized views query processing 
caching static web data extensively studied deployed commercially 
focused caching dynamic data represented cache html xml 
approaches store data separately unstructured forms increase redundant storage rely invalidation consistency dbproxy minimizes redundant storage provides update propagation 
semantic caches proposed client server database systems 
semantic cache proposal handles read databases 
dbproxy similar concept semantic caching supports consistency differs implementation approach 
simplified form semantic caching targeting web workloads queries expressed html forms proposed 
caching query results proposed specific applications high volume major event websites 
set queries sites known priori results queries updated pushed origin server base data changes 
importance database scalability web prompted industry interest data caching distribution 
database caching schemes full partial table replication proposed 
powerful schemes require administration maintenance costs incur large space overhead 
furthermore require application server modifications explicitly bundle data caching application distribution logic 
dbproxy hand require application database modification bundled jdbc driver 
previous exists area query containment equivalence 
algorithms con checking dbproxy extensions previous area 
earlier database caching investigated predicate schemes views answer queries 
previous area materialized view routing answering queries rewriting materialized views describes techniques matching containment 
dbproxy differs materialized view approach relying query stream decide cache population replacement 
dbproxy stores views common tables dynamically decides views cached replaced 
consistency management materialized view approaches scale large number views update propagations common table dbproxy simplifies scalability 
caching content offloading application logic edge network promising techniques improve performance scalability 
static caching understood needed enable caching dynamic content web applications 
study issues associated flexible dynamic data caching solution 
describe dbproxy stand database engine maintains partial semantically consistent materialized views previous query results 
cache thought containing large number materialized views added fly response queries edge application cache 
uses efficient common schema table storage policy eliminates redundant data storage possible 
cache replacement mechanisms address challenges shared data views adjust operate various space constraints cost benefit replacement policy 
dbproxy includes scalable query containment checker maintains data consistency efficiently guaranteeing useful consistency properties 
evaluated dbproxy cache tpc benchmark results query response time speedups ranging factor depending server load workload characteristics 
afrati li ullman 
generating efficient plans queries views 
sigmod conference pages 
akamai technologies akamai 
www akamai com html en tc core tech html 
amiri park tewari padmanabhan 
dbproxy self managing edge network data cache 
technical report rc ibm research 
amiri park tewari padmanabhan 
scalable template query containment checking web semantic caches 
icde conference 
amiri tewari park padmanabhan 
space management dynamic edge data cache 
webdb conference informal proceedings 
bello dias sun 
materialized views oracle 
vldb conference pages 
chaudhuri krishnamurthy potamianos shim 
optimizing queries materialized views 
icde conference pages 
dar franklin nsson srivastava tan 
semantic data caching replacement 
vldb conference pages 
datta dutta thomas ramamritham 
comparative study alternative middle tier caching solutions support dynamic web content acceleration 
vldb conference 
iyengar 
middleware system intelligently caches query results 
middleware conference pages 
deshpande shukla naughton 
caching multi dimensional queries chunks 
sig mod conference pages 
fan cao almeida broder 
summary cache scalable wide area web cache sharing protocol 
sig comm conference 
goldstein 
larson 
optimizing queries materialized views practical scalable solution 
sigmod conference pages 
ibm 
websphere edge server 
www ibm com software 
keller basu 
predicate caching scheme client server database architectures 
vldb journal 
roussopoulos 
update propagation strategies improving quality data web 
vldb conference pages 

larson yang 
computing queries derived relations theoretical foundations 
technical report cs department computer science university waterloo 
levy mendelzon sagiv srivastava 
answering queries views 
pods conference pages 
luo naughton 
form proxy caching database backed web sites 
vldb conference pages 
lipasti university wisconsin 
java implementation 
www ece wisc edu shtml 
mohan 
dbcache vldb tutorial 
www almaden ibm com mohan caching vldb pdf 
oracle 
oracle ias database cache 
www oracle com ip deploy ias docs pdf 
pottinger levy 
scalable algorithm answering queries views 
vldb conference pages 
rosenkrantz hunt 
processing conjunctive predicates queries 
vldb conference pages 
sellis 
intelligent caching indexing techniques relational database systems 
information systems 
tewari dahlin vin kay 
hierarchies design considerations distributed caching internet 
icdcs conference 

front tier data cache 
www com products html 
wessels claffy 
icp squid web cache 
ieee journal selected areas communication 
williams abrams abdulla fox 
removal policies network caches world wide web documents 
sigcomm 
cochrane lapis pirahesh 
answering complex sql queries automatic summary tables 
sigmod conference pages 
