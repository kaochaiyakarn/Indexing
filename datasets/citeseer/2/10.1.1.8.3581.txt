composing monads coproducts christoph fb mathematik und informatik universit bremen informatik uni bremen de neil ghani dept mathematics computer science university leicester ng mcs le ac uk monads useful abstraction computation model diverse computational effects stateful computations exceptions uniform manner 
potential provide modular semantics modular programming style soon recognised 
general monads proved difficult compose research focused special mechanisms composition distributive monads monad transformers 
new approach problem general nearly monads compose mathematically elegant standard categorical tools underpinning monads computationally expressive supporting canonical recursion operator 
nutshell propose monads composed coproduct 
abstractly simple idea actual construction coproduct monads non trivial 
outline construction show implement coproduct haskell demonstrate usage examples 
discuss relationship ways combining monads particular distributive laws monads monad transformers 
categories subject descriptors programming techniques functional programming general terms algorithms languages theory long goal research theoretical computer science community provide modular semantics programming languages 
detail give semantics individual features programming language exception handling non determinism state computation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp october pittsburgh pennsylvania usa 
copyright acm suitably composing obtain semantics programming language 
successful reasoning large pieces software achieved reasoning smaller tractable subcomponents lifting results original problem 
exciting possibility moggi proposal monads structure denotational semantics 
moggi pointed number computational features including mentioned modelled monads 
wadler took moggi ideas showing program monads 
example monads support imperative features purely functional language 
soon clear despite value monads semantic programming perspectives composing monads prove significant challenge 
put briefly monads just compose general manner 
variety different methods combine monads proposed notably distributivity laws monad transformers 
useful specific situations theories cover situations furthermore comment adhoc 
approaches common observation monads functors carrying extra structure 
obvious way compose monad monad functorial composition unfortunately monad see monad transformers distributivity laws attempt monad 
alternative point view observe just functors objects functor category monads objects category monads monad morphisms 
canonical way putting objects take coproduct 
interest topic arose previous research coproduct monads framework modularity particular modular term rewriting 
modular term rewriting terms built signatures decomposed terms built signatures called layers 
papers argued layer structure key concept modularity taken primitive notion derived concept 
relevance monads provided axiomatic formulation notion layer 
tried apply combination monads functional programming assumptions important computational monads satisfy 
composition computational monads particular functional programmer perspective challenge result research 
concrete contributions explain construction coproduct monads idea layers describe individual monads interleaved form coproduct monad explain coproduct regarded datatype canonical recursion operator similar fold explain current approaches virtually monads composed coproduct construction explain coproduct monads implemented haskell 
non trivial coproduct free datatype quotient explain coproduct approach relates current approaches 
example presence strong distributivity laws functorial composite monads just monad coproduct monads question 
summarise feel coproducts provide right general framework composing monads 
fact monads compose way coproduct universal property associated recursion operator powerful arguments favour current approaches 
price paid keeping track possible layers 
show regard monad transformers distributivity laws attempt squash layers specific layer possible results data structure potentially easier manage 
situations coproduct analysis contributes understanding reminding compose monads associated recursion operator 
aim explain ideas functional programming community 
consequently keep categorical jargon minimum focusing intuitions examples detailed proofs times need technically exact particular sect 

basic knowledge category theory categories functors natural transformations helpful 
remainder structured follows sect 
introduce monads term algebras computational monads haskell discuss distributivity laws monad transformers compose monads 
sect 
construct coproduct monads give examples 
sect 
evaluate construction particular show distributive monads form special case 
brief history monads monads originally arose category theory models term algebras 
monads provide intuitions construct coproduct monads 
standard material refer reader general texts details 
monads term algebras term algebras built signatures defined follows definition 
single sorted signature consists function set 
set ary operators defined 
definition 
signature set variables term algebra defined inductively 

quotes distinguish variable term seen introducing layer information terms 
shall see constructing coproduct monads layer structure central concept 
set term algebra set categorically set set functor category sets 
addition set variables function sending variable associated term 
lastly substitution takes terms built terms flattens described function 
pieces data construction theory set variables embedding variables terms operation substitution axiomatised monad definition 
monad category endofunctor called action natural transformations called unit tt called multiplication monad satisfying monad laws th sketched term algebra construction associated unit multiplication 
equations monad correspond substitution behaved particular associative variables forming left right units 
think layer terms unit converts variable trivial layer multiplication allows collapse layers type single layer 
monads model number interesting structures computer science sorted algebraic theories calculi variable binders term rewriting systems computational monads state computations exceptions continuations computational monads definition appendix importantly applications involve base categories set fact monad set considered algebraic theory possibly enrichment 
setting monads considered generalised form algebraic theories 
pursue theory full generality bear mind draw intuitions monads set just particular case restrict 
rest regard abstractly layer examples layers terms rewrites computations monads nature layer provide calculus layers actual layer empty layers collapsing layers type taken primitive concepts 
coproduct construction detail consist interleavings layers component monads 
section minor technical comments enrichment important basic understanding essential mathematical correctness 
firstly monad finitary action infinite objects determined action finite objects 
example finitary signature infinite set variables finite categorically property defined terms preservation directed colimits shall need level detail constructions valid finitary monads introduce terminology informal level 
precise definitions see 
known computational monads finitary continuation monad 
secondly reasoning semantics functional languages usually pass sets order structures complete partial orders cpos 
categorically means change base category imposing order structure morphisms see crucially set functions cpo forms turn cpo 
called enrichment 
note theory enriched prefer keep presentation simple 
definition monad readers may seen functional language haskell 
related 
monads haskell programming language haskell monad operations return form type class class monad return called kleisli category monad definition 
monad associated objects morphism ty gives morphism composition tg identity tx kleisli category signature objects sets variables terms morphisms assignments form 
composition variable substitution def kleisli category considered free syntactic category generated signature attractive properties example unification expressed elegantly coequaliser 
prefer def 
unclear form coproduct kleisli categories directly 
certainly coproduct categories just disjoint union 
contrast seen presentation monads def 
supports intuition layers turns central concept constructing coproduct monads 
fortunately def 
def 
equivalent sense calculate bijective manner 
example monad constructs functors objects respectively identity morphisms ty ty tx ty functor left adjoint composition results monad isomorphic theorem vi 
directly express haskell follows class functor triple eta mu instance triple monad mu 
fmap return eta instance functor monad triple eta return mu id course defined new class monad triple eta mu advantage approach haskell syntactic sugar writing monads combine triple class haskell predefined monads instance triple combining best worlds 
composing monads monad modelling exceptions monad modelling state transformations derive monad modelling computations raise exceptions modify state 
generally monads may think performing computations computations respectively monad performs 
finish section discussing approaches problem 
distributivity guess consider functorial composite monad 
require multiplication form reason exist 
solution restrict attention monads natural transformation coherence laws multiplication constructed tl natural transformation called distributive law ensures monad :10.1.1.138.4552
practical example occurs exception monad distributes monad 
fixed object exceptions monad assignment mapping monad 
layer perspective functorial composite corresponds layer layer 
general combining monad monad include just specific layering surprising general monad 
distributive law corresponds interchange law permutes layers layers allows squash arbitrary layering triple word monad 
code produce overlapping undecidable class instances rejected ghc hugs appropriate options 
specific layering formalise observation showing strong distributive law monad coproduct monad 
monad transformers monad transformers provide partial answer question composing monads distributivity law 
nutshell monad transformer pointed endofunctor category mon monads fixed base category 
functor mon mon mapping monad monad monad natural family monad morphisms ft think functor transforming monad monad ensures monad sitting inside 
identity functor monad may regard adding monad monad 
example definition exception monad transformer type exn seen distributivity law case action monad transformer takes monad 
definition state monad transformer type statet distributive law monad state monad allows permute layer 
see monad partially permuted past pairing operation past outer function space 
monad transformers allow fine grained control combination allowing form mixing layers state monad arbitrary monad opinion concept monad transformer elegant definition general support adequate meta theory 
mean monad clear possible define associated monad transformer 
example monad transformer list monad associated monadic treatment non determinism 
disadvantage pick order combine monads considerable difference 
adding new monad transformer consider possible combinations existing monad transformers separately number combinations grows quadratically 
monad transformers really modular 
summarise distributivity laws monad transformers attempt define composite monad squashing different layers obtained interleaving component monads specific layer 
shall see coproduct approach simply keeps layers 
shift emphasis means buy generality compose monads 
course price paid data structure manage layers imposes computational overhead 
coproduct monads having discussed current approaches composing monads explain approach coproducts 
discuss abstractly coproduct means show associated universal property provides recursion operator 
discuss construction coproduct monads implementing haskell discussing correctness briefly 
coproduct monads coproduct thought smallest monad containing monads 
formally coproduct monads simply coproduct category monads 
give formal definition including relevant universal property definition 
monads coproduct monad denoted monad morphisms monad monad morphisms unique monad morphism called mediating morphism monad morphism just natural transformation commuting unit multiplication sect 

universal property allows treat coproduct monads datatype monads triple triple type plus injections inl triple plus inr triple plus monad morphism respectively monad function coproduct 
monad morphisms type defined uniformly type uses rank polymorphism standard haskell anymore triple triple triple forall forall plus just fold lists universal property freeness initiality datatype universal property coproduct just fold implement recursive functions coproduct 
consider small example 
assume exception monad exn see sect 

monad define function check char exn char check isspace return raise illegal character takes argument lower case raises exception character printable white space 
want combine exception raising function state monad store see sect 
implement function imperatively counts occurrence particular character string raising exception string contains non printing non space characters 
type function count ref int char string plus exn store int int uses store ref part exn 
function count stateful computations exception raising computations injecting coproduct inl inr count inr count cs inr return count cs run computation map store exn monad 
note defined sect 
point coproduct need universal property mediating morphism 
follows programming practice hiding implementation data type programmer 
simplest monad possible identity monad id defined appendix 
identity monad target monad maps identity monad get special case triple triple forall forall plus id id id evaluate exceptions catch exceptions occur evaluate stateful computations runst combinator 
run count computation run char string int run catch runst count want augment function having print dot time encounters occurrence character supposed count 
add predefined io monad type replacing store int plus store int io type count ref int char string plus exn plus store int io int code remains largely unchanged need change injections stateful computations inr inl 
change inconvenient point show avoid see sect 
count inr inl count cs inr inl inr inr putstr return count cs example shows self defined built monads 
run example identity monad target anymore get io monad io target monad run char string io int run return catch return 
runst id count summing different monads want implement computation coproduct monads 
universal property coproduct gives mediating morphism allows define functions run run coproduct defining functions component monads 
function coproduct monad determined uniquely seen coproduct practical situation turn actual construction coproduct monad 
constructing coproduct motivate general construction consider simple case coproduct term algebra monads 
signatures corresponding term algebra monads coproduct calculate terms built disjoint union signatures terms inherent notion layer term variable decomposes term strictly smaller subterms head symbols respectively 
suggests build action coproduct successively applying actions 
terms haskell layer corresponds particular computational feature coproduct allows arbitrary interleavings computations monads 
reflects key points general simple data structure represent interaction layer sitting layer 
unfortunately equation simple different elements sum represent element coproduct monad 
see note variables contained summands right hand side 
similarly example sect 
computations monad layered composed multiplication monad 
coproduct quotient sum equation 
kelly sect 
shown construction colimits ranked monads deduce coproducts monads special case 
rank generalisation higher cardinals basically allows operations infinitary arity provided bounded rank monad 
roughly construction coproduct monads proceeds steps construct coproduct pointed functors coproduct monads 
pointed functor endofunctor natural transformation called premonad 
monad pointed coproduct pointed functors step construction coproduct monads 
term algebra example natural transformation models relies fact mapping signatures monads preserves coproduct left adjoint 
variables coproduct pointed functors functor set returns union tx sx variables identified 
set identify elements set quotient 
example share variables quotient set equivalence relation generated quote left hand side injects variable quote right injects variable 
categorically process modelled pushout definition 
pointed functors coproduct functor maps object colimit tx rx qx coproduct monads constructed pointwise coproduct monad maps object colimit specific diagram 
definition 
finitary monads coproduct monad maps object colimit sequence defined follows colim qx colim def 
diagram fig 
colimiting morphism shape diagram single morphism qx making arrows diagram commute 
tx ts th tx tx qx rs rx rx sr rx 
diagram defining coproduct 
note triangles left fig 
unit laws monads see def 
diagram trivial 
def finitary monads easily extended monads rank transfinite induction 
unclear practical terms restrict finitary monads 
pointed earlier known computational monads finitary continuation monad rank 
despite general answer construction coproduct monads usefulness fig 
limited practice shape size contents diagram difficult reason directly 
turn contribution alternative construction trades generality greater simplicity 
implementing coproduct definitions show main difficulty faced implementing coproduct coproduct free datatype quotient 
usual construction colimit diagram take coproduct objects appearing diagram quotient relation described arrows 
solution choose representing type coproduct treat datatype operations sect 
monad operations operations operate representatives equivalence class 
need decision procedure equivalence 
unfortunately general impossible example monads modelling algebraic theories term algebras equations amounts asking elements tx equal equations theory 
general undecidable 
order decide equivalence fig 
need decide full equational theory monads involved merely element image unit 
layer called variable layer example demonstrates importance element consists layer layer layer 
middle layer variable layer quotient element equal element consisting layers 
turn element equal result applying multiplication construction concerns layered monads question decidable 
name chosen indicate monads tell element proper layer variable layer 
concretely monad layered function tx tx returns element returns canonical element 
words partial 
coproduct monads rank exists def 
construction apply layered monads monads construction simpler easier reason 
definition 
layered monad monad natural transformation tx partial left inverse inclusion 
layered monads allow decide equivalence qx def 
follows equivalent iff 
type class layered monads straightforward extension triple class codomain corresponds haskell type 
fact consider layered monads add function class class functor triple tempting provide default definition wrong semantically incorrect 
analysing fig 
see coproduct consist elements form tx rx representation coproduct base case monads triples coproduct represented recursive datatype contains layer variable data plus plus plus var instances triple 
coproduct quotient datatype equivalence relation generated diagram fig 

understand equivalence come back equation forms equalities 

variable denote term 
equivalence generated def 
arrows diagram 
implementation need map detect remove variable layers 
terms gg equivalent gg 
collapsing layers identifies terms 
equivalence generated arrows diagram implementation need check repeated layers relevant multiplication collapse layers 
sum simplified matters considering terms descending root leaf pass number quotes 
terms considered 
symbol comes signature create repeated layer collapsed 
effect try create sublayer underneath top layer multiplication applied 
normal form equivalence generated called witness term variable layers subterms top symbol comes monad term 
drawing quotients just mentioned terms witness note legibility distinguish quotes associated associated def 

quotes syntactically represent layer information implicitly 
order calculate witness term recursively strip away unnecessary quotes collapse layers possible 
define function calculating witness fact datatype plus initial algebra fy functor fy haskell allow put class constraints variables constrains types constructors bit pointless 
ty ry variables give recursive function fy datatype giving algebra structure map fa turn means functions ta ra higher order function called fold just counterpart lists fold functor functor plus fold var fold fmap fold fold fmap fold defining function strip strips away unnecessary quotes straightforward strip triple plus plus strip case just strip triple plus plus strip case just strip triple triple plus plus strip fold var strip strip collapsing layers achieved multiplication tt example 
collapse term element 
words collapse argument second 
second argument equivalent term equivalent repeated layer multiplication applied give process call lifting raising sub layer 
motivates definition calculate witness recursively calculate witness subterms lift top sublayer create repeated layer possible apply multiplication strip top layer variable layer 
recursive calculation achieved defining witness function terms fold applies argument functions recursively subterms lift triple plus plus lift lift eta wit triple plus plus wit strip mu fmap lift lift triple plus plus lift lift eta wit triple plus plus wit strip mu fmap lift wit triple triple plus plus wit fold var wit wit implement eta mu plus instance triple 
need start making instance functor instance functor functor functor plus fmap fold var 
simplest definition mu mu triple triple plus plus plus mu wit 
fold id argument mu consists plus terms built plus terms assume normal form need compute witnesses upper layer 
instance triple triple triple plus eta var var just mu fold id wit wit remains injections coproduct unique mediating morphism 
injections simple give inl triple plus inl fmap var definition unique mediating morphism recursively evaluate layers coproduct target monad 
monad morphisms apply layer coproduct compose resulting computation multiplication target monad triple triple triple forall forall plus fold eta mu 
mu 
note monad morphisms commute unit multiplication 
just monad laws denote haskell external assumption programmer responsible 
sum coproduct monads rank mild technical condition exists def 

definition difficult reason directly simple implementation large class monads called layered monads 
precise implementation works finitary layered monads include usual computational monads continuation monad 
implementations clarity efficiency 
example fmap operation coproduct quadratic number layers uses fold 
efficient version linear number layers instance functor functor functor plus fmap fmap fmap fmap fmap fmap fmap var var witness operation quadratic number layers multiplication mu coproduct quadratic number layers upper monad operation kleisli category right argument 
improved need recompute witness upper layer merely need check collapse layers 
typical situation upper layers consist layer anyway see example sect 
definition mix simplicity efficiency 
optimised implementation linear number layers principle need check new layer added collapsed top layers term added pursued matter 
monad transformers revisited claimed monad transformers seen squashing different layers coproduct monad particular monad 
definition elegant little metatheoretic support clear define monad transformer specific monad 
related problem monad transformers combine existing monads ubiquitous io monad 
having said coproduct gives canonical monad transformer practical relevance 
theorem 
monad functor takes monad coproduct monad transformer 
proof 
coproduct construction functorial 
requires monad monad morphism taken inclusion coproduct naturality follows naturality inclusions fact monad morphism 
introduce conventions coproduct readily usable 
recall sect 
added io monad coproduct replace existing injections changed type expression plus exn store int int plus exn plus store int io int 
clearly inconvenient want add monad existing computation want change existing injections 
category mon monads initial object identity monad id see sect 
category coproducts initial object words monad id function result type replace type plus id insert injections inl terms want add second monad need change type plus plus id previously existing code pertaining monad remains unchanged new code transformed need write inr inl expressions add third monad change type plus plus plus id write inr inr inl monad id serves placeholder extensions extensions alter currently existing code 
brief example assume started recursive version count function 
type count char string plus exn id int extension add imperative counting leading type count ref int char string plus exn plus store int id int addition io obtain count ref int char string plus exn plus store int plus io id int second version inr inl embed stateful computations adding io monad change existing code 
haskell need syntactic sugar reduce clutter want read write plus id write inn inr inl akin notation 
properties coproduct course justify constructions previous section 
full formal correctness proof categorical outside scope sketch goes proving correctness 
definitions introduced section 
coproduct free algebra note datatype plus coproduct monads 
plus pointed plus represents coproduct quotient plus straightforward way prove quotient coproduct monad show monad laws hold quotient prove equivalence classes injections inl inr monad morphisms monad morphism unique satisfies equations 
lot fortunately categorical constructions employ easier way 
alternate proof rests idea understand monad algebras definition 
algebra monad category object morphism tx commutes unit multiplication monad th note quadratic complexity mu operator mentioned detrimental effect construction id monad build proper layers variable 
category algebras morphisms called alg 
think algebra model carrier map ensures builds terms model terms reinterpreted model 
exactly doing term algebra case assigns function symbol arity interpretation monads construct free algebras prove functor equal monad prove functor constructs free algebras 
particular prove functor coproduct monad prove constructs free algebras defined follows definition 
category alg objects triples algebra algebra 
morphism consists map commutes algebra structures obvious forgetful functor alg takes algebra underlying object proposition prop 

forgetful functor alg functor left adjoint alg object free algebra monad resulting adjunction coproduct show functor coproduct show object sx algebra free algebra words algebra morphism unique algebra morphism prop 
shows action coproduct monad creates free algebras 
functions defined morphisms called catamorphisms canonical example free datatype lists functions fold lists 
coproduct monads fold lists way sect 

distributivity revisited perspective composing monads means combining possible interleavings layers component monads contrast approach distributivity consider possible layering consisting layer layer 
presence strong distributivity law monad coproduct 
alternative analysis distributivity special situation layers squashed layer relevant definitions definition 
monads distributive law natural transformation satisfying coherence laws sect 

coherence laws state respects unit multiplication monads tx tl distributive law compatible monad prop 
sh tt sl slightly stronger distributive law compatible monad coproduct definition 
monads strong distributive law distributive law algebra diagram commutes tb tx stx sx sa theorem 
monads strong distributive law compatible monad coproduct proof 
show theorem give algebra structure show free algebra 
prop 
coproduct algebra structure maps stx stx equations easily follow coherence laws distributive law unit laws monads 
show algebra structure free 
show algebra morphism unique morphism stx algebra morphism 
unique morphism defined sa st diagram shows squares naturality squares triangles left equation algebra 
sx sh stx sk sh stk st sk sa show algebra morphism show 
sk stx tk stx proofs simple diagram chases omit uses naturality second additionally need strong distributivity 
assume algebra morphism stx consider diagram lower stx sl sz stx sl stk stm ss sz stx sk sm sa grams algebra morphism triangles left unit laws monads diamond naturality triangle top coherence arrow left hand face diagram equals arrows right hand face diagram assumption sh sa stm sa st sh sa st making unique required 
pointed strong distributivity requirement mere technical condition 
example consider monads signatures unary operation 
terms form applied times 
clearly distributive law takes 
strong distributive law require carrier set unary operations commute 
relevance theorem working distributivity laws close working coproduct 
prime example monads question exception monad strong distributivity law exn exn exn monad exn exn introduced coproduct monads canonical combination smallest non interacting combination computational effects 
general categorical construction derived implementation haskell wide class monads called layered monads 
computations coproduct monad thought sequences steps component monads 
particular monads retain laziness 
store store sequences steps store store monad store store retrieve tuples possible coproduct 
investigated relationship combinations distributivity shown monads strongly distributive coproduct coincides functorial composition 
comparison monad transformers shown coproduct general flexible approach stronger metatheory 
haskell particular glasgow haskell compiler ghc io monad mother monads mutable state transformers input output concurrency exceptions 
approach suggest io monad constituting monads combine coproduct needed 
advantage effects monads localised state threads exceptions part program type function part monadic currently case io monad 
course io monad recovered continued coproduct components 
remains investigated optimisations currently afforded io monad ghc carried style case done provide precise typing 
confident approach scale combination handful monads coproduct simplest way combining monads 
allow arbitrary colimits monads allow shared computation effects example shared state shared exceptions imposed equations distributivity laws 
situation uncommon example combining state monad monad typically want stateful computation followed computation monad followed stateful computation second stateful computation knows particular access state want stateful computation distribute computation second stateful computation state left stateful computation 
related plotkin power hyland describe commutative combination corresponds imposed distributivity law sense 
technically uses called lawvere theories equivalent monads 
summary coproduct monads simple modular way combining monads 
general distributivity monad transformers applicable nearly cases sound mathematical foundations 
believe functional programmers choice combining monads 

locally presentable accessible categories 
lms lecture notes 
cambridge university press 
barr wells 
toposes triples theories 
der mathematischen wissenschaften 
springer verlag 
bird de moor 
algebra programming 
prenticehall 
fiore plotkin turi 
syntax variable binding 
proc 
lics pages 
ieee computer society press 
martin hyland gordon plotkin john power 
combining computational effects commutativity sum 
tcs nd ifip international conference computer science montreal 
jones duponcheel 
composing monads 
technical report yaleu dcs rr yale university dept comp 
sci dec 
kelly 
unified treatment transfinite constructions free algebras free monoids colimits associated sheaves 
bulletins australian mathematical society 
kelly 
basic concepts enriched category theory lms lecture notes 
cambridge university press 
kelly power 
adjunctions coequalizers presentations finitary monads 
journal pure applied algebra 
david king philip wadler 
combining monads 
launchbury samson editors glasgow workshop functional programming workshops computing series ayr july 
springer verlag 
liang hudak jones 
monad transformers modular interpreters 
proceedings nd acm symposium principles programming languages 
acm press jan 
luth 
categorical term rewriting monads modularity 
phd thesis university edinburgh 
luth ghani 
monads modular term rewriting 
category theory computer science ctcs lncs pages 
springer verlag september 
luth ghani 
monads modularity 
frontiers combining systems lnai pages 
springer verlag 
mac lane 
categories working mathematician graduate texts mathematics 
springer verlag 
ernest manes 
algebraic theories graduate texts mathematics 
springer verlag 
moggi 
computational lambda calculus monads 
fourth annual symposium logic computer science 
ieee computer society press june 
moggi 
view programming languages 
technical report ecs lfcs lfcs 
gordon plotkin john power 
notions computation determine monads 
nielsen editors proc 
fossacs lncs pages 
john power 
enriched lawvere theories 
theories applications categories 
robinson 
variations algebra monadicity generalisations equational theories 
technical report sussex computer science 
rydeheard stell 
foundations equational deduction categorical treatment equational proofs unification algorithms 
category theory computer science lncs pages 
springer verlag 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
useful monads appendix contains definitions monads text 
identity monad identity monad simple newtype id id instance functor id fmap id id instance triple id eta id id just mu id identity monad initial object mon monad unit monad morphism id gives unique monad morphism id identity monad trivially finitary 
exception monad exception monad adds error element base 
category theory known lifting monad 
type error string data exn exn error base instance functor exn fmap base base fmap exn exn instance triple exn eta base base just exn mu exn exn mu base exn exn mu base base base identity monad finitary add error element finite subsets infinite set variables take union exceptions unified leaving infinite set variables error element 
easier way see exception monad free monad signature consisting constant 
store monad store monad simple state transformer monad 
state list indices list 
efficient simple 
leave implementations standard 
data store st instance functor store fmap st st instance triple store eta st st mu st st st data ref ref int store ref ref store ref store runst store num ref store state transformer monad store monad particular example finitary provided underlying state finite reasonable assumption 
store monad finitary long restrict finite lists stores 
full sources code www informatik uni bremen de papers icfp src tar gz 
