foundations entity relationship modeling bernhard thalheim computer science department university rostock albert einstein str 
rostock frg thalheim informatik uni rostock dbp de submitted annals mathematics artificial intelligence august database design methodologies facilitate database modeling effectively support database processing transform conceptual schema database high performance database schema model corresponding dbms 
entity relationship model extended higher order entity relationship model herm high level simple comprehensive database design model complete database information structure operations static dynamic semantics 
model expressive power semantic models possesses simplicity entity relationship model 
shows model founded semantics 
semantical constraints considered model 
problem database design stated follows design logical physical structure database database management system contain information required user required efficient behavior information system 
implicit goals database design ffl meet information content requirements entire spectrum users application area ffl provide natural easy understand structuring information content ffl conserve semantic information designers redesign ffl achieve processing requirements achieve high degree efficiency processing ffl achieve logical independence query transaction formulation level 
fi herm foundations hand inputs process informal final output database design database definition formal syntax qualitative quantitative decisions regarding problems physical design physical placement indexing organization data 
adds additional complexity database design process formal design turned times extremely informal available information 
main complexity design process complexity number items included database scheme semantics defined database operations 
design system captures lot information schemes design 
needs structure schema information expressed transformed database model support phases design process 
nowadays design process understood capture structural design modelling semantics description behavior database especially operations defined database 
database design data models 
large number conceptual data models proposed 
actual experience models basis implementing generalized dbms scant 
models proposed primarily stand database management systems adapted implementational restrictions database systems increasingly apparent data models hand side incorporated directly programming languages variety tools cad cam expert systems knowledge bases hand side extended interoperating environments multimodel paradigms 
nearly early commercial dbms implementations hierarchical model ims system network model ids relational model ingres db 
relational data model proposed simple theoretically founded representation data soon important model database systems see example pdg ull 
primary virtues model rigorous mathematical foundation correspondence relation notion table 
research efforts highlighted large number drawbacks relational model 
abandon relational paradigm disadvantages interested extending relational languages way incorporates useful ideas alternative language paradigms allows retention advantages relational approach 
entity relationship er model popular database design models 
despite numerous positive features er approach exists strong theoretic basis 
theory able define sets semantically formed er schemes particular user specific er techniques subproblems scheme design view integration query generation scheme transformation 
additionally formalism suited computer aided software engineering tools 
yat tha suitability herm approach solution database design problems shown 
reason huge variety extensions er model founded theory development 
codd cod states entity relationship model clearly winner terms lack precise definitions lack clear level abstraction lack mental discipline 
show precise formal definition exists 
classical entity relationship model evolved higher order entity relationship model herm support design main classical data models higher order data models translation 
supports integrity constraints 
constraint declarations include attribute data types fi herm foundations non null attributes attribute combinations forming primary candidate entity keys functional dependencies multivalued dependencies inclusion dependencies 
include relationship cardinalities dependencies 
chosen constraint set powerful capture constraints schema support generation equivalent schemes 
constraints trivial equivalences schemes 
equivalence impossible justify transformations provably preserving information content schema 
herm methodology uses data type approach objectoriented modeling 
objects handled modelled databases 
object identifier characterized values objects value characterization bound defined structure characterized properties objects described attributes forms structure object 
objects furthermore special semantics general semantics 
operators associated objects 
operators behavior 
object structure general semantics operators collected classes 
structure semantics operations class represented types 
modelling objects includes case association objects classes corresponding value type type objects represented ref 
known design methodologies vary scale information modelled types 
objects classes distinguished values identifiers omitted value oriented modelling 
case object oriented approach 
object oriented approach different approaches distinguished 
objects identifiable value types identifiable objects database called value representable 
case database modelled value oriented approach mapping value representable scheme value oriented scheme exists 
database value representable object identifiers 
known case identifier handling public databases updated maintained 
value representable databases special interest 
normally objects exist database independently 
objects called kernel objects independent existence database independent existence object database 
object called characteristic describes object 
objects perform superordinate role objects case called associative 
exists associations objects 
associations objects 
kernel objects described entities valued oriented approach 
object entities relationships 
kernel objects distinguished values attributes 
attributes called key 
value representable databases objects kernel objects identifiable values 
objects represented entities 
objects represented relationships 
classical entity relationship model uses entity types representation kernel objects associations 
associations represented relationships 
developed standard drops partially strictness sth 
herm approach fi herm foundations uses weakest form distinction entities relationships theoretically sound 
kernel objects described entity types 
objects especially existence dependent objects characteristic objects describable relationship types 
organized follows 
section herm introduced informally formally 
section logical fundamentals models considered 
theory integrity constraints 
discuss application extensions proposed approach 
higher order entity relationship model introduce structural part higher order entity relationship model 
section shown founded theory exists model 
existence strong theoretical basis advantages herm approach herm schemes simpler easier understandable erm schemes 
herm schemes support abstraction simple comprehensible manner 
herm schemes translated corresponding constraints corresponding user defined operations generic operations normalized relational hierarchical network schemes 
herm type consists information structure static semantics operations behavior dynamic semantics herm type structure semantics operations behavior 
notation generalized general scope purposes chapter herm type structure semantics operations behavior environment 
overview higher order entity relationship model modelling constructs simple attributes set domains defined attributes corresponding domains 
nested attributes basic types complex attributes defined means constructors ffl tuple constructor 
nested attributes new nested attribute defined cartesian aggregation 
ffl set constructor 
nested attribute new nested attribute defined set aggregation 
bag list constructors 
sake simplicity tuple set constructors 
entities entity types characterized attributes 
entity types set attributes identifier type 
fi herm foundations clusters union types called cluster 
order relationships order relationships types defined associations entity types clusters 
additionally characterized attributes 
higher order relationships relationship type order defined association relationship types order entity types additionally characterized attributes 
integrity constraints corresponding logical operator defined type 
set logical formulas operator define integrity constraints valid instance type 
operations operations defined type 
ffl generic operations insert delete update defined type 
ffl algebra consists classical relational set operations projection restricted complement union intersection difference restrictions defined expressions formulas cartesian product extension technical operations handling nested attributes sequences reordering sequences attributes copying renaming additionally operations tagged clustering general clustering declustering 
ffl type set conditional operations 
ffl algebra query forms transactions specified 
examples constructs name person defined cartesian aggregation name fam 
membership societies defined set aggregation attribute society address persons usually defined complex attribute example address state city code town street name house numb person characterized social security number name address sex set ssn identifier person ssn name fam adr zip town street name nr 
relationship marriage persons modelled marriage person person example integrity constraint marriage predicate marriage person sex marriage person sex indicates sex person marriage different sex second person marriage 
function fi herm foundations person name fam example operation defined type person 
function spouse marriage person name person name marriage person name person name example operation involves type 
operations define roles relationships 
operations defined preconditions postconditions 
instance type student ssn name fam adr zip town street name nr sex defined student person stored database insertion operation type student defined precondition postcondition operation insert add student person insert student add student insert student person insert person 
herm differs classical erm extended erm constructs 

constructs different extensions classical erm nested attributes order relationships higher arities clusters integrity constraints complexity 

constructs new higher order relationships integrity constraints including generalized complexity operations conditional operations 

weak entity types relationships represented directly herm direct need constructs herm 

kernel objects distinguished objects differently represented entity types 
objects represented relationship types 
reason schemes herm simpler times erm schemes 
introduce formal definition structural part model 
entity relationship types data scheme dd dom finite set simple attributes set domains arity domain function dom gamma 
associates simple attribute domain 
notion data scheme introduce complex attributes called nested attributes 
data scheme dd dom set names na different formally define set un nested attributes 
fi herm foundations 
un 
un 
un na tuple valued nested attribute un attribute type notion 
un na set valued nested attribute un 
elements un note analog notion nested attributes introduced additional condition different nested attributes sets atomic attributes disjoint 
extend function dom dom un 
dom 
dom dom 
un dom dom theta theta dom theta theta denoted cartesian product sets 
un dom pow dom pow denoted power set set data scheme dd denote union sets dom un tuple un dd dom function gamma 
dom define key concept shallow equality structure alt 
need definition 
extend approach 


un fz zm fx ym 
un set attributes fx fz zm fx fy ym generalized subset fx set tuples dd generalized subset called key elements distinguished normally key considered minimal 
set sets tuples smallest set 
key called minimal key elements distinguished generalized fi herm foundations subset distinguish tuples entity type pair attr id entity set name attr set attributes id non empty generalized subset attr called key identifier 
concrete entities defined tuples attr 
fixed moment time entity set entity type set tuples attr id key 
approach general approaches nf relations 
order simple semantics bars partitioned normal forms introduced 
entity set partitioned normal form atomic attributes key set non atomic value component tuple relation partitioned normal form 
subclass entity sets partitioned normal forms closed general algebra nested relations pdg 
furthermore natural restrict entity types key sets consisting atomic attributes 
instance entity type person name fam adr zip town street name nr sex name fam allowed 
possible behavior equality alt key definition 
key definition corresponds exactly key definition nf relations flattening unnest operation 
approaches differ tuple constructor differ set operator 
tuples defined phones person fbg fc dg fe fg fd hg fb fg fdg fbg fcg ffg fhg fbg fdg fbg fcg feg fdg ffg fdg ffg fhg shallow equal behavior equal 
tuples carry different semantics 
behavior equality equality concepts may useful application area 
key definition basis behavior equality stronger key definition basis shallow equality 
equality concepts alt weaker shallow equality stronger behavior equality 
cases super subclass relationship subclass occurs 
choice modeled union subclasses 
construct called cluster 
set types types clustered category cluster cluster similarly define set union sets entity types order relationship types cluster entity types 
entity types order relationship type form ent attr name type fi herm foundations ent sequence entity types clusters attr set attributes un order relationship type fb moment sets order relationship definable element cartesian product theta theta theta dom theta theta dom 
order relationship set set relationships theta theta theta dom theta theta dom set fe rm entity schemes order relationship type data declaration dd called consistent relationship schemes entity schemes entity schemes relationship schemes orders higher order relationship type form ent rel attr name type ent sequence entity types clusters fe rel sequence relationship types clusters fr order higher attr set attributes un entity type considered order relationship type 
leads general classical entity relationship model 
codd cod states reason distinguishing entity types relationship types 
designer entity type designer relationship type 
variety design decisions reason view integration problems ndt 
explicit definition key difference entity relationship types approach 
key concept generalized relationship types tha 
case difference entity types relationship types 
assume relationship types identifiers consisting component relationship types 
herm methodology approach 
easy extent methodology approach tha 
notion ent rel attr id id subset components attributes notice furthermore relational schemes defined entity types 
relational model interpreted special case herm 
relationship type rm fb moment sets relationship definable element cartesian product theta theta theta theta theta theta dom theta theta dom 
relationship set set relationships fi herm foundations theta theta theta theta theta theta dom theta theta dom example 
design herm scheme simple university application covering information 
catalogue persons working studying university 
person social security number person number uniquely identifies person 
persons name names titles addresses town zip street 

catalogue students characterized students numbers 
student person 
students major minor specialization 
supervised professor 

catalogue professors specialisation 
professors persons 
professor associated department 

catalogue courses university characterized unique course number names 
course different prerequisites 

catalogue course offerings course semester year season room room number building professor 

catalogue projects characterized unique project number title 

catalog students activities 
students enroll certain course term 
obtain final grade 
modeled entity relationship types person person number name lastname firstname title address zip town street name nr person number course cname project num pname num room fnr building nr building student person professor person speciality department dname director phones phones dname major student department minor student department professor department project professor person prerequisite course course supervisor student professor lecture professor course room semester time day hour semester year season year season fi herm foundations student lecture result 
synonyms homonyms attribute names 
example homonyms project 
pname course 
cname example attribute identifiers 
useful translation entity relationship schemes logical language express integrity constraints higher order entity relationship model 
attribute identifier nested attribute attribute identifier attribute identifier nested attribute attribute identifier fx ag attribute identifier attr fx xm attribute identifier attribute identifier attribute identifier attribute identifier 
rm attr attribute identifier attribute identifier unique sequence rm attribute identifier attr fx xm attribute identifier attribute identifier generally component type relationship type specified name component number 
possible labels names order sequence importance 
recursive types types component type different positions correct naming represented name component number definition attribute identifier 
instance prerequisite course different course 
labeling alias concept 
label operations semantics 
instance recursive type prerequisite specified differently prerequisite requires course required course 
case requires requires course 
set fe rm entity schemes relationship type data declaration dd called consistent relationship schemes entity schemes relationship schemes rm set fe rm consistent entity relationship schemes 
set entity relationship sets jt possible define function integrity constraints set gamma 
set consistent entity relationship schemes function fi herm foundations integrity constraints pair ers called entity relationship scheme entity relationship type ers element er called entity relationship database ers database er 
herm diagrams introduce graphical representation language entity relationship schemes called entity relationship diagrams erd bricks 
data scheme dd dom set consistent en relationship schemes fe rm entity relationship diagram finite labeled digraph set directed edges edge forms 
gamma 

gamma 

gamma 

gamma 
vertices represented graphically vertices vertices represented graphically circles diamonds respectively 
clusters represented diamonds labeled simply common input point diamond 
edges gamma 
labeled dom 
edges labelled integrity constraints instance cardinality constraints 
labelling concept introduced section 
primary keys underlined 
furthermore relationship type set attributes determining components attributes underlined 
example 
continued shows diagram example 
example shows proposed extension herm solves drawbacks relational entity relational database modeling uniformity relations view definition problems deterministic normalization algorithms problems query languages set inadequacy sequence modeling 
model maintains advantages relational entity relationship model availability database design theory query language access path propagation optimization user friendliness visibility understandability data dependency propagation 
benefits herm approach demonstrate proposed model benefits constructs defined semantics 
higher order relationship types leads simplification schemes 
fi herm foundations person phi phi phi phi phi phi phi phi student gamma gamma gamma gamma major gamma gamma gamma gamma minor phi phi phi phi phi phi phi phi supervisor gamma gamma gamma gamma phi phi phi phi phi phi phi phi professor department phi phi phi phi phi phi phi phi enroll phi phi phi phi phi phi phi phi lecture phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi phi room semester course project ae ae ae ae ae ae ae ae ae ae ae ae ae 
phi phi phi phi phi phi phi phi phi phi phi hj gamma gamma gamma psi qs oe ae ae ae ae ae ae ae ae ae ae ae ae ae ae 
ak person number adr zip town street name nr name fam speciality dname director result time day hour nr building year season num pname cname herm diagram university database fi herm foundations model extensible defining constructs expressions basic constructs 
definition type concept general accommodate active types associations special semantics relationship type attr comp called existence relationship 
item called existence dependent gamma rm items gamma rm called dominant types said subordinate type 
classical entity relationship model uses weak entity types 
entity types attr id called strong id empty called weak 
relationship scheme called consistent weak entity types subordinate types 
weak entity types characterized relationships entity types 
unique treatment weak entity types characterized non binary relationship types 
instance weak entity types characterized relationship type differently representation requires additional constructs 
reason theoretical treatment weak entity types structural constructs 
instance strong entity types person flat weak entity types employment characterized strong entity types 
employment characterized person additional restriction employees need flat employed 
insurance contracts characterized persons flats 
construct express situation 
solution separation characterization employment 
case additional restriction employees needs expressed complicated path inclusion dependency 
sake simplicity representation relationship type employ 
unnatural keeps semantics information different relationship types 
generally shown weak entity type characterized characterizing relationship type weak entity type strong entity types furthermore relationship type concept weak entity types consistent 
strong restriction 
instance want keep geographic information post instances addresses consisting information state town street 
information represented path weak entity types 
easy show weak entity types modeled directly relationships additional attributes participate key 
modeling corresponds modeling approaches network model relational model 
need special consideration weak entity types 
approach alt enhance identifier concept weak entity types 
identifier defined attribute identifiers scheme 
concept shown defined 
illustrate approach newspaper example yat 
address treated entity type decomposed weak entity types state town road address 
example address object property 
address customer address served 
fi herm foundations representation address attribute require special complex integrity constraint 
get entity types 
state fname town name road city town state name address town city road town state name road street 
complex attribute identifiers indicate existence inclusion constraints entity types 
approach complicated 
herm approach allows simpler representation entity type relationship types represents information simpler form mentioned identifier definition relationship types 
state fname town state road town address road 
stated relationship types order types 
statement observation normalized relational scheme represented entityrelationship scheme order relationship types 
leads unnatural complicated schemes 
terms classical entity relationship model ris university example entity relationship types information course enrollment person person number name lastname firstname title address zip town street name nr student person number professor person number speciality speciality course cname student isa person student person professor isa person professor person room fnr building nr building lecture professor course room semester time day hour semester year season year season student course room professor result 
isa relationships treated herm approach order relationships 
relationship course enrollment lectures represented simple herm approach 
student enroll course professor certain room course information kept lecture relationship set 
surprising translating scheme leads relational scheme minimal 
translation theory teo obtain relation schemes lecture professor person number course room nr room building fi herm foundations time day hour semester year semester season professor person number course semester year semester season enroll person number course room nr room building professor person number result person number course schemes need minimized 
complex referential integrity constraint maintained 
translated scheme requires normalization 
reason erm approach useable necessary design 
furthermore normalized relational scheme direct herm representation 
herm scheme translated directly normalized relational scheme 
discussed example shown direct representation normalized relational schemes entity relationship schemes order relationship types scheme additional minimization 
reason approach useful 
normally referential integrity schemes represented additional inclusion constraints 
inclusion constraints structural constraints represented semantical constraints 
consider special case shows constraints directly represented structure additional integrity constraints 
proposition relationship types ent rel attr id ent rel attr id identifier relationship id id inclusion dependency id id 
replaced ent rel attr id id frg omitting entity relationship types id ent rel attr 
identifier relationship inclusion dependency represented definition 
herm maintains advantages models relational entity relationship model 
herm schemes normally simpler easy understandable erm schemes complicated times easy understand 
mathematical reviews library example uses entity types relationship types 
herm scheme represents types entity types relationship types tha 
classes represented entity types exist independently 
reasons need ary relationship types 
binary relationship model uses binary relationship types 
cod discusses problems model 
proposal hai binary relationship types introducing additional object identifiers leads complex schemes loss transparency 
methodology representation objects separation kernel objects fi herm foundations objects 
case need higher order relationship types representation hierarchies objects 
reasons utilization higher order relationship types 
intention database theory developed especially relational model 
case develop normalization approach herm tha 
known normalization relations represented entity relationship model semantical integrity constraints jan lien mez 
terminology example jan 
relation schemes fag fag fbg fbg fcg fcg fa bg fa bg fa cg fag inclusion dependencies 
represented erm approach entity types relationship types additional inclusion dependency 
reality inclusion dependency structural dependency 
herm representation uses entity types relationship types additional integrity constraints 
clusters generalized algebraic expressions set theoretic operations 
expressions linear ordered linear ordering definition attribute identifiers 
labels algebraic expressions 
case usage cluster definition ordering restricted 
identification computation generic operations 
identification simplified utilization integrity constraints 
approaches relational translation clusters applied 
cluster components defined identifiers translation simple en 
case relationship type replaced relationship type subcluster relationship type remaining part cluster additional identifier introduced cluster relationship type adding furthermore corresponding number relationship types cluster components identifier 
extend constructor set types 
done defining extension expressions existing constructs stw 
show null values power sets sequences lists 
cases may useful null values relationships 
concept introduced herm shortened form 
null values keys tha identification property lost 
brackets null valued components 
tha horizontal decomposition representing types types null values 
example types professor course semester room time day hour represent type lecture professor course room semester time day hour 
decomposition applied unary relationship types loss identification property relationships null values component type 
fi herm foundations approach representation power sets sequences 
instance set teams specified team person identifier research team project specified project team 
sequence lists represented manner 
need represent order list 
list teams represented type person identifier additional identifier expresses set property team 
mentioned nested relations represent flat informations nesting internal structure objects represented represented better 
nested entity types introduced herm 
model extended nested relationship types 
consider main example new entity type hobby represent hobby information 
new relationship type hobby person hobby period representation hobbies persons 
adequate representation relationship type hobby person hobby period example leads difficulties maintenance relationship type comp tennis pair person person second person person representing information tennis competition pairs 
generally extension applied model 
need explicit construct construct seen shortened form hierarchies types 
instance example represented types pair person person comp tennis pair pair second pair new type useful simplification scheme types representing concepts 
possibility view cooperation 
integrity constraints shown introduced different classical integrity constraints tha herm 
generally distinguish static integrity constraints representation semantics possible instances database dynamic integrity constraints representation behavior database lifetime correctness sequences states database 
static integrity constraint classes classified function scheme fi herm foundations integrity constraints static dynamic structural semantic representational design conditions structure relationships semantic restrictions internal structure database user friendly expressions id ed fd fd jd tgd gamma gamma gamma gamma gamma gamma psi phi phi phi phi phi phi phi phi phi phi delta delta delta delta deltaff pq classification integrity constraints 
structural dependencies dependencies reality database design express conditions structure inclusion exclusion functional dependencies 
semantic dependencies 
dependencies reality database design semantic restrictions functional multivalued dependencies 
representation dependencies dependencies representation database inclusion join tuple generating dependencies 
design dependencies dependencies user friendly schema design tha general functional generalized functional dependencies 
shown constraints dynamic integrity constraints 
dynamic integrity constraints useful maintenance database system 
general framework utilization dynamic integrity constraints 
classification includes inherent explicit constraints 
distinction inherent explicit constraints depends model 
relational model integrity constraints represented 
led difficulties classification 
classification dependencies role proposed 
approach developed tha differentiation 
consideration set constraints advantage need unique derivation procedure 
axiomatization different sets integrity constraints functional fi herm foundations inclusion dependencies 
case axiomatization known order predicate logic applied 
fairly complex 
mixing leads mismatch constraint types 
especially relational database design dependencies intending express basic relationships semantic relationships 
entity relationship approach structural constraints modelled inherited constraints inclusion dependencies defined structure scheme 
extensions er model different types functional constraints relationships cardinality constraints considered 
advantage constraints easy specify design dependencies 
restrict utilization integrity constraints mappings 








noticed representation higher order entity relationship scheme hides covers different integrity constraints extracted scheme represented database models 
notice developed axioms derivation rules different integrity constraints relational data model 
obtain new constraints homonyms synonyms 
express similarity difference values different types 
synonyms identifiers meaning 
homonyms identifiers sound alike different types different meanings 
useful simplification scheme translation schemes 
example get directly synonyms expressed homonyms expressed 
synonym associations reflexive symmetric transitive 
associations irreflexive transitive 
relational model synonyms usually implicitly assumptions unique name assumption 
university example synonym associations 
person person person person professor person person person student person person student minor department dname dname supervisor professor person person person exists simple calculus synonym associations 
calculus sound complete 
calculus gamma syn axioms fi herm foundations rules proposition folklore calculus gamma syn non redundant sound complete calculus implication synonym associations 
generalizing classical constraints generalizing inclusion exclusion constraints integrity constraints known relational database model tha generalized integrity constraints entity relationship models 
known complexity results extended dk dlm complexity results herm 
generalizing relational database theory results herm theory 
constraints specific herm 
consider classes normalization representation herm structures 
mentioned entityrelationship approach allows better distinction integrity constraints 
structural constraints expressed directly structure 
inclusion dependencies expressed directly relationship type definition 
inclusion dependencies expressed structural part type definition 
class inclusion dependencies axiomatizable cfp mit 
main example inclusion dependencies valid 
student major department dname department dname student supervisor professor person person professor person person professor person person person person 
constraints derive constraint student supervisor professor person person person person 
class exclusion dependencies tha important class integrity constraints 
types identifiers defined types 
exclusion dependency expression form valid database class exclusion dependencies powerful simple class dependencies express different semantical restrictions 
instance main example exclusion fi herm foundations dependency department department dname course course cname states names different 
exclusion dependencies keys types exclusion constraints classes 
generally speaking exclusion constraints classes express disjointness classes domain sets 
objects belong classes connected exclusion dependency time 
case exclusion constraints specialization subtype concept expressing object belonging class subclasses belong subclasses time 
main example instance exclusion constraint student professor expresses students professors time vice versa 
constraints structural constraints 
possible express exclusion constraints directly diagram additional labeled edge classes label expressing exclusion nih 
constraints discussed data models 
exclusion inclusion constraints classes axiomatized 
exclusion dependencies expressed negated inclusion dependencies 
objects belonging class belong second classes time 
instance dependency student professor expresses students professors time professors students time 
exclusion dependency negated inclusion dependencies 
class inclusion dependencies axiomatizable tha 
restrict consideration exclusion inclusion constraint classes 
case simple theory exists object oriented database modeling 
inclusion dependencies generalized inclusion dependencies tha 
generalization important model permits clustering 
instance relationship type sm attr 
inclusion dependencies valid general type 
inclusion dependency valid generalize constraints algebraic dependencies tha algebraic constraints types 
purpose introduce algebraic expressions types 
set types ft set algebraic expressions omega omega gamma ft ft smallest set properties 
omega gamma 
ft omega gamma 
omega omega parentheses omitted conventions binds stronger property union intersection associative idempotent commutative 
algebraic constraint omega expression form omega fi herm foundations algebraic expression ft set defined similarly 
define validity algebraic constraints ft classical approach 
valid ft iff usual way implication introduced algebraic constraints 
style tha propositional formulas representation algebraic constraints 
set fp variables associated set types ft association propositional formula constructed algebraic expression omega gamma propositional fp semantics defined usual 
get directly correspondence propositional formulas algebraic constraints 
proposition algebraic constraints mg properties equivalent 
mg 
mg 
im 

im 

proof 
equivalence 

known logics 
prove equivalence 

prove equivalence 
proof analogous 
assume case exists interpretation oe oe oe oe oe 
oe oe 
define database ft iff oe database obtain 
implies 
proven manner 
get directly property 
corollary set algebraic constraints psi ng exists equivalent algebraic constraint psi psi algebraic expression conjunctive canonical form intersection elementary unions 
elementary union union types ft algebraic expression disjunctive canonical form union elementary intersections 
elementary intersection intersection types ft canonical algebraic constraint constraints form disjunctive canonical form conjunctive canonical 
proposition set algebraic constraints converted equivalent set canonical algebraic constraints 
calculus allows convert sets algebraic fi herm foundations constraints sets canonical algebraic constraints 
algebraic expressions canonical algebraic constraint simple elementary intersection elementary union 
transformation equivalent set simple canonical algebraic constraints constructed set algebraic constraints 
get proposition completeness resolution calculus calculus complete sound 
soundness completeness follows soundness completeness system gamma mfd tha defined class monotone functional dependencies 
system gamma cac axioms rules theorem system gamma cac sound complete implication canonical algebraic constraints 
consider meaning simple canonical algebraic constraints 
simple canonical algebraic constraint form ym ft ft denote set ym set 
consider different cases 
ym inclusion dependency 

notation exclusion constraint gamma 
ym union dependency valid database object 
means class empty denoted fi herm foundations correspondence obtain calculus inclusion dependencies exclusion constraints classes 
system gamma axioms xy rules wm wm wm wm gamma system gamma generalizes system sound complete inclusion exclusion constraints 
theorem conclude property gamma theorem system gamma sound complete implication inclusion dependencies exclusion constraints 
implication problem exclusion inclusion constraints np complete proposition corollary implication problem inclusion dependencies exclusion constraints np complete 
implication problem complex generalization 
fi herm foundations generalizing functional dependencies functional dependencies considered important constraint classes 
results known relational database theory tha herm 
generalize class path functional dependencies 
class general class functional dependencies 
schema fe rm sequence gamma gamma types called path briefly path component component main example sequences person student supervisor professor person student supervisor professor department previously defined concept attribute identifiers extended 
identifiers importance path 
distinguish leaves roots path 
introduce concept formally 
path element called leaf gamma gamma 
component component gamma 
component gamma 
component gamma component type defined set attribute identifiers denote leaf gamma attr set attribute identifiers defined leaves path element called root gamma gamma 
component gamma component 
components gamma 
gamma component component set path component type identifiers defined recursively 
root element type 

type component type 

type gamma component gamma type 

type component type 

type gamma component gamma type 
components path leaves specified twice set type reduced set type removing type identifiers gamma gamma gamma type similar removal case concatenate set type set leaf gamma attr set attr type fx leaf gamma attr type attribute identifier set fi herm foundations attr supervisor supervisor student supervisor student name fam supervisor professor speciality supervisor professor name fam department dname department director department supervisor student supervisor supervisor professor department defined path student supervisor professor department 
path sets attr attr 
path functional dependency validity path functional dependencies defined functional dependencies relation defined relation generated path relations path gamma gamma database relation defined inductively 

path 
path gamma component 
component 

path gamma gamma component gamma 
component gamma 
path functional dependency student supervisor professor department student fin specifies student supervisors department 
corresponding relation path dependency supervisor student professor professor department 
invert 
notation depends order path introduce inversion path 
path gamma gamma gamma called inversion path gamma gamma gamma corresponding sets leaf gamma attr gamma root gamma type gamma attr gamma introduced path functional dependency corresponding inverted path functional dependency gamma obtained replacing gamma attribute identifiers attr corresponding attribute identifiers attr gamma 
path functional dependency department professor supervisor student student fin inversion student supervisor professor department student fin inversion identifier professor speciality corresponding identifier supervisor professor speciality 
introduce calculus path functional dependencies 
fi herm foundations system gamma axioms rules union transitivity gamma proven system sound complete implications path functional dependencies 
proof propositions known relational database theory 
proposition functional dependency relation satisfies functional dependency 
subset satisfies functional dependency 
path represented relation scheme lemma consequence proposition fact identifier augmentation axiom union transitivity rule armstrong system functional dependencies 
lemma identifier augmentation axiom union transitivity rules sound 
proposition functional dependency relation scheme contains satisfies functional dependency projection satisfies functional dependency 
interpreted extension proposition proves lemma 
lemma path augmentation path inversion rules path identification axiom sound 
get property fi herm foundations corollary system gamma sound 
prove completeness system gamma introduce additional rules 
additivity projectivity rules derivable rules system gamma sound 
rules completeness proof 
set path functional dependencies closure set path functional dependencies derived system gamma path identifier set attr attr fa attr fag obviously additivity projectivity lemma iff classical completeness proof functional dependencies fact proven 
lemma exists satisfies violates summarizing corollary lemma obtain result 
theorem system gamma sound complete implication path functional dependencies 
simple path functional dependencies introduced 
dependency simple path dependency specified type set identifiers simple path functional dependency path functional dependency defined single element path 
corollary theorem property trees uniquely specified leaves get system sound complete 
path functional dependencies generalized graph dependencies specified subgraphs herm graph 
fi herm foundations calculus gamma restricted simple path functional dependencies extended graph functional dependencies 
considered rules reduction rule valid general 
rule applied path weight relationship components involved partial 
reduction rule applied synonyms 
complexity constraint comp valid synonyms identifier reduction rule applied 
cardinality constraints cardinality complexity constraints commonly class constraints binary relationship types 
properties understood case ary relationship types 
related area relational database theory adaptable entity relationship model 
know inclusion dependencies express partially complexities 
furthermore known key dependencies tha expressed complexities 
complexities express domain dependencies cok numerical dependencies grm 
inclusion domain numerical dependencies cfp cok mit complexities 
scheme definition defines directly inclusion dependencies 
implicit defined inclusion dependencies typed possible full inclusion tha 
inclusion dependencies defined keys considered constraints 
class cardinality constraints forms important class integrity constraints entity relationship models need complete theory constraints 
define attr entity relationship type complexity comp specifying database state item appears times comp iff jr jm denoted cardinality denoted restriction notice recursive components relationship types denoted labels required course component number 
course 
notation complexity 
unbounded denoted pairs partially ordered natural partial order generalized sequences relationship types attr 
subsequence fi herm foundations generalized complexity comp specifies database state items appear times comp iff jr cluster complexity notion generalized follows comp comp 
example complexities easily developed university example comp prerequisite course course prerequisites course means occurrence course prerequisite comp professor project project investigator professor comp person project 
project contributors generally persons comp project project contributor person professor comp professor 
professors investigators projects comp lecture professor professors offers different courses comp enroll lecture offered course taken students 
furthermore possible complexities comp lecture semester professor course course term offered person comp supervisor professor 
professor supervises student comp major student student major 
analogous complexity definition projections relationship types introduced called flattened constraints nested constraints 
claimed nested constraints results consistent specifications flattened may lead inconsistent specifications 
examples show statement wrong 
nested specifications inconsistent proposition 
binary relationship types attr entity relationship types traditionally introduced special cardinality types 

item associated item item associated item comp partial comp total comp comp 

item associated number items item associated item comp comp comp comp 
fi herm foundations 
item associated number items item associated item comp comp comp comp 

item associated number items item associated number items comp comp comp comp notation extended arbitrary relationships 
relationship type attr introduce similarly notation relationship 
obviously cardinality constraints special functional dependencies 
semantics functional dependencies cardinality constraints different 
functional dependencies tuple constraints 
cardinality constraints restrictions 
proposition folklore 
attr cardinality constraint comp valid functional dependency gamma 
valid 
attr cardinality constraint comp valid inclusion dependency valid scheme 
second case cardinality constraint defines constraint 
complexity comp lecture expresses rooms determined courses terms teachers functional dependency lecture semester gamma 
time day hour valid lecture definition properties restrictions conclude directly fact 
proposition cardinality function monotone decreasing component sequences relationship fa comp comp fr ae fr fi herm foundations proposition shows cardinality function kind minimum semantics 
lower bound inherited component sequences 
corollary relationship fa fr proper subset fr 
comp comp 
comp min fr comp 

comp comp 
comp comp properties proposition corollary axiomatization set generalized complexities 
see chapter axiomatization complex generalized complexities 
inequalities obtained way inconsistent schemes derived 
reason introduce graphs schemes complexity 
easy see set generalized complexities ary axiomatizable tha rules premises 
diagrams labeled cardinality constraints 
noted little edge labels mean er diagrams 
classical notation binary relationships attr see instance en vos edge gamma 
labeled comp comp comp 
edge gamma 
labeled comp comp comp 
notation extended ternary relationships 
reason teo complexities ternary relationships marked shaded areas relationship triangle relationship 
concrete instance corner triangle represents relationship attr shaded comp 
notation complicated comp complexities represented 
proposal extended relationships loose information complexities 
books avoid question examples binary relationship types 
tl states semantics ternary higher order relationship sets quite complex comprehend 
definitions possible represent entire complexity information 
information labeling 
simplification propose fol fi herm foundations lowing simple labeling concept 
extended entire complexity information 
relationship fa edge gamma 
labeled comp comp comp 
edge gamma 
labeled dom 
complex labeling label diamonds relationship fa 
diamond relationship labeled subset set 
comp label extends notion teo 
instance relationship type lecture professor course room semester time day hour trivial generalized complexities 






obtain nontrivial generalized complexities 
professor take course times 
professors absent term 
mentioned functional dependency 
course term times 
generalized complexity implies trivial generalized complexity complexity 

complexity 

expresses constraint new professor absent term 
notions complexity relationship type attr 
subsequence complexity comp specifies database state items theta theta appear times comp iff jr gj 
subsequence complexity fi herm foundations comp specifies database state items appear times comp iff jr definition properties restrictions conclude directly fact 
proposition relationship type fa fr ae fr 
complexity complexity monotone decreasing component sequences comp comp comp comp 
comp 

comp 
comp comp comp 
comp comp corollary attr cardinality constraint comp valid functional dependency gamma 
valid complexity comp lecture expresses validity functional dependency lecture semester gamma 
time day hour lecture proposition shows complexity weakest form 
extend corollary complexity complexity 
utilization complexity complexity useful 
instance relationship type attr comp comp comp 
possible comp 
assertion carries semantical information fi herm foundations deduced directly premises 
university example complexity comp lecture expresses course term course term times term complexity comp lecture expresses course term parallel sessions 
theorem relationship type attr subsequence equivalent 
comp 
embedded cross dependency fr fr fr valid database state valid fr theta theta proof 
proof obvious definitions 
corollary relationship type attr subsequence comp embedded cross dependency fr fr fr valid opposite valid 
consider satisfiability cardinality constraints 
generally herm scheme set cardinality constraints satisfiable empty database 
herm scheme set complexities called consistent strongly satisfiable exists database db sat empty 
property trivial 
instance comp required course comp requires course meaning course requires prerequisites course required courses course empty infinite 
suppose course 
exists course required course 
assume requiring courses furthermore required course required courses 
side courses require courses 
required courses repeat procedure fi herm foundations required different courses say repeating procedure get infinite set course reason ratio recursion 
consider recursive relationships 
relationship attr complexities comp 
reorder sequence components relationship components attr comp database satisfying cardinality constraints obtain condition delta delta summarizing conditions derive statement 
proposition relationship attr comp herm scheme fr rg complexities consistent valid maxfx directly conclude example scheme complexities comp required course comp requires course inconsistent scheme complexity comp required course comp requires course consistent 
generalize approach ln proposed nonconstructive solution 
shown generalizing approach ln constructive criterion 
furthermore extend approach recursive relationships 
introduce labeled graph herm schemes fe rm set associated complexities attr ng attr comp attr ng attr attr comp defined fi herm foundations course phi phi phi phi phi phi hj hy phi phi phi phi phi phi graph prerequisites attr comp defined comp considered example obtain graph 
fv ng labeled graph 
sequence nodes called path called cycle additionally cycle called simple elements sequence pairwise different 
sequence nodes nodes value weight gamma called weight critical cycle simple cycle weight weight 
critical cycle instance cycle course course weight cycle consider properties 
lemma path 
weight 
delta delta proof obvious 
weight database elements conclude directly fi herm foundations proposition critical cycle weight 
database satisfying complexities sets empty infinite 
corollary herm scheme set associated complexities critical cycle exists scheme inconsistent 
ask possible obtain inconsistent schemes consistent 
algorithm 
herm scheme set associated complexities set fp mg critical cycles 
step 
mark entity relationship types critical cycle step 
mark relationship types components marked 
step 
repeat step possible relationship types marked 
step 
delete marked entity relationship types associated complexities scheme 
lemma scheme obtained scheme algorithm consistent 
proof uses proof ln 
proof ln correct assignments similarly lemma 
easily shown graph contain critical cycles correct assignment multiple path weights 
proof 
consider simple fact stating relationship set elements cartesian product component sets 
relationship attr comp database satisfying cardinality constraints obtain condition furthermore scheme obtained algorithm contain critical cycles 
apply system inequalities scheme obtained algorithm database lemma attr comp delta delta schema consistent database satisfies 
fi herm foundations critical cycles ratio defined consistent 
known algebra case integer solution system 
need construct solution corresponding entity relationship sets 
domain nat natural numbers 
entity set ng 
relationships constructed merging ln 
ary relationship type sets component types follows 
number element relationship set solution inequality system 
component relationship set associate elements component set order component set elements relationship set 
reorder relationship set order component set 
associate elements component set order component set relationship set 
continue components 
easy see new relationship set satisfies 
database obtained procedure fully populated satisfies inequality relations conclude consistent 
proof lemma idea 
idea simplification schemes simplification reasoning scheme properties 
reason introduce contraction schemes 
cycle represented relationship recursive relationship construction 
graph cycle scheme hierarchical cycle element elements gamma higher order construct new relationship type cycle loss generality assume 
cycle defines forest relationship entity types 
cycle define algebraic compression expression 
order type gamma order type define new type gamma order gamma order type gamma greater order type define new type gamma order orders types gamma equal define new type join types 
compression computes cycle database 
denote binary relationship type instance types cycle obtain relationship type recursive binary type denote join projection components 
lemma compute corresponding complexities new relationship type 
directly get new type critical cycle second component new type cycle critical 
reason need consider fi herm foundations binary recursive relationship types proofs properties cycles 
special compression explains need consider cycles binary relationship types 
reason consider satisfiability complexities binary relationship types relationship types higher arity 
lemma reformulated 
corollary scheme critical cycles scheme consistent 
summarizing corollaries get general fact 
theorem herm scheme set associated complexities 
inconsistent iff graph contains critical cycle 
computation graph contains critical cycle done computing special matrix product fv ng labeled graph 
define adjacency matrix define inductively follows minfm fm ng conclude proposition 
proposition graph contains critical cycle iff 
theorem implication problem complexities differs acyclic schemes schemes containing cycle 
equivalence functional inclusion dependencies result get implication problem complexities acyclic herm schemes pspace hard 
approach cfp show implication problem cyclic herm schemes axiomatizable 
exploit weight function scheme corrections 
consider weight 
lemma property ration greater equal 
consider scheme fi herm foundations comp comp comp comp theorem scheme consistent 
assume complexities proper database instance 
element related element element related element element related element obtain element get continuing consideration conclude database infinite case 
scheme finite database dangling exists 
get comp comp comp comp proposition herm scheme set associated complexities cycle weight 
complexities cycle finite graph path nodes condition property similar rule axiomatization finite implication unary inclusion dependencies functional dependencies tha 
proof 
graph finite database db satisfying cycle weight loss generality assume relationship types contract path binary relationship type separating get lemma weight delta weight delta weight weight delta weight delta case dangling element exist database sets cycle 
proposition extended weight higher 
case dangling values possible 
proposition algorithm correcting schemes 
algorithm 
herm scheme set associated complexities set fp mg cycles weight 
step 
cycle complexities comp cycle correct 
fi herm foundations algorithm proposition leads directly fact 
corollary herm scheme set associated complexities scheme equivalent scheme obtained algorithm 
consider question properties complexities inherited generalized complexities 
obviously generalized complexities derive conditions complexities 
complexities generalized complexities derive inequalities proposition corollary 
instance relationship type constraints comp comp obtain corollary comp theorem proposition generalized proof 
proposition relationship attr comp comp herm scheme fr rg complexities inconsistent valid maxf minf goal database modeling design efficient appropriate database 
important criteria performance integrity understandability extensibility 
developed extension entity relationship model 
extension new approach database design developed effective meeting goals 
approach shows strong theory developed applied important practical problems 
history database management systems demonstrates lacking theoretical basis leads poor difficult apply technologies 
model advantages 
model strong theoretical basis 
ffl model logic equivalent order predicate logic 
reason results known discrete mathematics relational theory tha 
fi herm foundations ffl model covers complete modeling information 
structure static semantics generic user specified operations behavior application described model 
ffl theory simplified cleaned 
sequences subsets powersets objects modeled directly 
relationships treated better way 
weak entity types avoided completely 
normal form theory developed herm 
normal form theory obtain normalized schemes classical theory 
ffl model uses distinction kernel objects dependent objects database schemes directly translatable classical models additional restructuring 

modeling natural applied simple manner 
necessary facts expressed 
ffl model supports direct translation classical database models 
translation preserves normal forms 
direct translation relational network hierarchical schemes design decisions directly obtain schemes normal forms 
translation theory support yat presents practical solution interoperability systems 
ffl herm algebra query definition 
corresponding relational network hierarchical queries automatically generated 
ffl model supports rich set constraints 
constraints development scheme equivalence 
excessive number mechanisms means semantic unit declared syntactically different compatible ways information described equivalent 
equivalence theory automatic modification schemes bot 
ffl database maintenance procedures derived design information 
ffl knowledge base previous system provided design decisions reused partially reused simplifies design task 
furthermore similarities design detected simplification implementation 
ffl design information application programs adaption existing database systems changing environments 

theory applicable practical needs 
ffl theory multi paradigm robust design methodology developed tha yat approaches known object oriented modeling stw modular programming tha programming large 
ffl modeling approach view cooperation concepts developed 
full view integration decidable axiomatizable view cooperation applicable approach 
fi herm foundations ffl approach reverse engineering 
systems programs developed management system recompiled adapted management systems 

results design simpler approaches 
ffl model modeling complex applications 
observation obtained schemes times simpler obtained models 
example simplified times placed page screen 
examples simplification possible find model 
modeling approach airport counter application modelled entity types relationship types original solution entity types relationship types unacceptable users complexity 
ffl simplification leads better understanding application normalization easier perceive 
ffl schemes avoid additional redundancy 
herm normalization schemes considered 

model easy understandable simple perceivable 
ffl model basis database design tools tha tha 
system db user groups 
ffl modeling approach simple large problems 
ffl model uses graphical representations modeling result easier understand visible 
ffl experiment novice user database designers learned herm methodology designed different database schemes different areas 
experience methodology easily accepted led accurate redundant schemes correct modeling complex relationships 
ffl query forms yat user specify application transactions programs top herm reduces substantially complexity application programming 
represented extended entity relationship model theoretical investigations model 
extensions simple useful practical database modeling 
developed theoretical fundamentals models illustrated model sound founded theory alike relational model 
introduced approach advantages existing ones 
ffl approach value oriented modelling databases objectoriented modelling value representable databases 
fi herm foundations ffl semantics founded 
relational database theory 
rich set founded semantical constructs available 
ffl structure modelled databases simple represented diagrams 
relationships relationships independently introduced rmn 
simplification er schemes important advantages extension 
er schemes normally simpler extension 
instance corresponding diagram example placed page approach 
isa relationships dependence relationships weak entity types normal simplification ratio estimated herm schemes times simpler 
furthermore isa relationships easier extracted 
direct representability relational decomposition relational normalization important advantage 
reason schemes normalized herm level translated third normal form bcnf schemes 
normally er model requires normalization translation 
illustrated rmn tha yat simple structural associations represented erm approach complex semantical constraints generalized path dependencies requiring designer deep knowledge logics high abstraction level 
herm approach structural associations represented structural constructs simpler 
yat example complex database scheme kuwait planning discussed 
database represented simple manner herm scheme relationship types third order translated efficient relational scheme generation restructuring procedures existing database generation adaption procedures existing transaction modules 
restructuring original database new database operate manner efficient 
herm approach representing hierarchies types approach restructuring adapting existing network hierarchical databases relational databases loss information 
theory satisfiability cardinality constraints 
theory extended constraints 
determining set integrity constraints satisfiable undecidable problem undecidability consistency set logical formulas 
far satisfiability concerned dependencies tha 
dependencies valid empty database trivial databases relation contains element 
extending set integrity constraints easy find examples unsatisfiable schemes see instance man 
consider example additional relationship types chair department professor leads professor leader professor complexities comp chair department 
comp professor 
inclusion dependency chair department professor department professor path inclusion dependency fi herm foundations professor department chair professor professor chair professor professor leads leader professor leads professor leads leader professor existence constraint professor hierarchical constraint specifying hierarchy departments leads gamma 
constraints perfectly natural semantics scheme 
unfortunately scheme shown unsatisfiable 
database example contain professor say person 
second complexity department say order satisfy complexity constraint exists professor chair department member department inclusion dependency 
till person 
path inclusion dependency relates relationship contradicts hierarchical constraint 
reason inconsistency exceptional case path inclusion dependency chair department leader 
path inclusion dependency extended disjunctive path inclusion dependency tha professor department chair professor professor chair professor professor leads leader professor leads professor leads leader professor professor department chair professor chair professor professor states path inclusion dependency valid professors chairs department 
alt thalheim 
fundamentals database theory key concept 
submitted publication 
kuwait 
atzeni parker set containment inference 
proc 
icdt lncs 
bars bancilhon richard scholl line processing compacted relations 
proc 
th vldb conf 
beeri kifer integrated approach logical design relational database schemes 
acm tods 
beeri 
algebraic optimization object oriented query languages 
proc 
icdt eds 
abiteboul kanellakis lecture notes computer science 
bot thalheim vossen design rad interactive toolbox database design 
rwth aachen informatik informatik berichte fi herm foundations cfp casanova fagin inclusion dependencies interaction functional dependencies 
journal computer system sciences 
cod codd relational model database management version 
addison wesley reading 
cok kanellakis functional inclusion dependencies graph theoretic approach 
technical report cs brown university dept computer science 
dk 
combinatorial problems database models 
mathematica janos bolyai algebra combinatorics logic computer science hungary 
dlm libkin muchnik 
functional dependencies semilattice closed classes 
proc 
lncs 
en elmasri navathe fundamentals database systems 
benjamin cummings publ redwood city 
object oriented data model artificial intelligence applications 
lncs springer 
gyssens paredaens van gucht 
uniform approach handling atomic structural information nested relational database model 
report university antwerp uia 
grm minker inferences numerical dependencies 
theoretical computer science 
hai 

entity relationship models formal specification comparison 
proc 
th er conference ed 

restructuring nested relations normal form 
proc 
vldb 
jan jajodia ng representation relational structures entity relationship diagrams 
entity relationship approach software engineering eds 
davis jajodia ng yeh north holland 
kanellakis vardi unary inclusion dependencies polynomial time inference problems 
technical report cs brown university dept computer science 
kobayashi overview database technology 
advances information system science ed 
tou vol 
plenum press new york 
ln lenzerini satisfiability dependency constraints entityrelationship schemata 
information systems vol 

lien lien semantics entity relationship model 
entity relationship approach system analysis design ed 
chen 
fi herm foundations man satisfiability integrity constraints reflections neglected problem 
proc 
second workshop foundations models languages eds 
heuer informatik bericht university computer science dept 
mez zaniolo decomposition relations entityrelationship diagrams 
entity relationship approach system analysis design ed 
chen 
mit mitchell implication problem functional inclusion dependencies 
information control 
ndt nijssen duke twine entity relationship data model considered harmful 
preprint university queensland dept computer science 
nih nijssen halpern 
conceptual schema relational database design fact oriented approach 
prentice hall sydney 
pdg paredaens de bra gyssens van gucht 
structure relational database model 
springer berlin 
ris 
database design fundamentals 
prentice hall englewood cliffs 
rmn inter relationship links models 
proc 
th entity relationship conference ed 

sth spencer 
er standards proposal 
proc 
th er conference ed 

stw 
schewe thalheim wetzel schmidt extensible safe object oriented design database applications 
schewe schmidt wetzel 
submitted publication 
teo 
database modeling design entity relationship approach 
morgan kaufmann publ 
san mateo 
wei bolton koenig er model clustering aid user communication documentation database design 
comm acm 
tha thalheim 
logical relational database design tools different classes dependencies 
new gener 
comput 
syst 

tha thalheim 
systematic approach database theory 
info gdr german 
tha thalheim 
higher order entity relationship model db lncs springer 
tha thalheim 
semantic issues connected keys relational databases permitting null values 
journal information processing cybernetics eik 
tha thalheim 
dependencies relational databases 
leipzig teubner verlag 
tha thalheim 
theoretical fundamentals higher order entity relationship model 
prepared publication 
kuwait 
fi herm foundations tha thalheim concepts database design 
trends database management systems eds 
vossen 
witt oldenbourg munchen german 
ed modal logic deductive databases 
john wiley vol 
vol 

tl tsichritzis lochovsky data models 
prentice hall 
ull ullman 
principles database knowledge base systems 
computer science press 
vos vossen 
und management systeme 
addison wesley bonn 
theory functional dependencies object oriented models 
oodb conference kyoto 
yat thalheim 
practical database design methodologies 
kuwait university faculty science 
deductive approach nested relations 
programming generation computers ii eds 
zhu goyal drew 
incorporating model hierarchy er paradigm 
proc 
th er conference ed 

