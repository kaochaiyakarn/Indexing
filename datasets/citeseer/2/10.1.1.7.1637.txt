partial approach model checking patrice godefroid pierre wolper universit de li ege institut li ege sart belgium email ac appears information computation vol 
academic press may pp 
presents model checking method linear time temporal logic avoid state explosion due modelling concurrency interleaving 
method relies concept mazurkiewicz trace semantic basis uses techniques including automata operate words higher 
model checking ces lp qs vw effective simple method verifying concurrent program satisfies temporal logic formula 
works finite state programs proceeds viewing program structure interpreting temporal logic evaluating formula structure 
simpler temporal deductive proofs easily effectively implemented 
intensively studied linear time temporal logic lp vw var branching time temporal logic ces el el bro temporal calculi el var cle sw 
extended probabilistic var pz vw cy realtime programs logics acd ah hlp 
adapted programs containing arbitrary numbers identical processes cg gs wl km 
methods making applicable large systems investigated bcm cmb gs 
results experimental encouraging bcd 
said 
spite success model checking wasteful idea modelling concurrency interleaving 
inclined loose sleep research supported european community esprit bra project spec 
interleaving semantics adequate concurrency remains silly investigate concurrent execution events exploring 
interleavings events 
develop simple method applying model checking incurring cost modelling concurrency interleaving 
method yields results identical methods interleaving semantics just avoids associated combinatorial explosion 
quite orthogonal model checking partial order logics pw kp pen 
logics designed semantically powerful 
efficient 
idea cost modelling concurrency interleaving avoided finite state verification appears pl val val god 
build earlier specifically god bring full capabilities model checking 
study model checking linear time temporal logic adopt automata theoretic approach vw var wol 
approach program viewed collection communicating automata infinite words buc 
include arbitrary fairness conditions 
negation formula checked converted automaton infinite words verification done simply checking product automata describing program automaton corresponding negation formula nonempty 
traditionally done computing product automaton cost modelling concurrency interleaving paid 
god shown global behavior set communicating processes represented automaton smaller usual product automaton 
basic idea build automaton accepts interleaving concurrent execution 
method justified partial order semantics concept mazurkiewicz trace maz automaton called trace automaton 
trace automaton viewed automaton accepting usually interleaving trace concurrent computation concurrent program 
independence relation transitions automaton fully represents concurrent executions program 
practical benefit automaton smaller automaton representing interleavings 
motivating idea method automata theoretic approach model checking trace automaton place product automaton 
unfortunately directly case 
able obtain result new type automaton 
consider automata operating infinite words higher 
precisely define automata operating words length theta 
study automata interestingly related type automata ordinals buchi buc buc study decidability monadic theory ordinals 
show emptiness efficiently decided 
show viewed theta automaton trace automaton improve efficiency model checking 
conclude comparison contributions related 
automata model checking briefly recall essential elements automata theoretic approach model checking 
details vw wol acw chapter tha 
problem consider 
concurrent program composed processes described finite automaton countably infinite words alphabet sigma linear time propositional temporal logic formula model checking problem verify infinite behaviors program satisfy temporal formula automata describing processes generalized buchi automata tuples sigma delta ffl sigma finite alphabet ffl finite set states ffl delta theta sigma theta transition relation ffl starting state ffl ff set sets accepting states 
generalized buchi automata define languages words functions ordinal alphabet sigma 
intuitively word accepted generalized buchi automaton automaton infinite execution intersects infinitely sets formally define concept computation word function ordinal alphabet sigma 
computation oe word sequence oe function gamma delta 
computation oe accepting state repeats infinitely infinitely word accepted accepting computation set words accepted denoted 

generalized buchi automata differ buchi automata buc set sets accepting states just set accepting states 
automaton representing joint behavior processes computed product automata describing process actions appear processes synchronized interleaved 
formally product theta generalization product automata immediate generalized buchi automata sigma delta sigma delta automaton sigma delta defined ffl sigma sigma sigma ffl theta ffl ff theta fs theta ffl delta sigma sigma delta delta sigma sigma delta sigma sigma delta note definition product automaton infinite accepting computation corresponds finite computation components 
component state infinite computation product component stays indefinitely state appear accepting 
counterintuitive consequence straightforward definition chosen product 
avoid adopt restriction acceptance conditions generalized buchi automata 
ffl acceptance condition vacuous case automaton finite infinite computations ffl set contains disjoint components case product automaton accepting computation corresponding finite computation automaton 
generalized buchi automaton quite straightforward construct equivalent automaton satisfies restriction 
programming terms restriction form fairness condition imposed processes acceptance conditions executions infinite executions legitimately infinite modelled additional idling action 
obtain model checking procedure fact need linear time temporal logic formula possible build generalized buchi automaton accepts exactly infinite words satisfying temporal formula alphabet automaton set propositions appearing formula vw wol 
construction exponential length formula usually problem formulas checked quite short algorithm behaves better upper bound 
model checking procedure 
build finite automaton infinite words negation formula uses negation formula yields efficient algorithm 
resulting automaton 
compute product ag theta practice reachable states product 

check automaton ag nonempty 
check automaton ag nonempty sufficient check graph contains strongly connected component reachable initial state includes state sets set accepting sets 
done linear time algorithm ahu 
complexity model checking method determined size ag note model checking said complexity linear size program correct measures size program size practice limits model checking methods come excessive size product 
frustrating fact lot excessive size unnecessary due modelling concurrency interleaving 
tempting eliminate 
turn partial order semantics 
partial order semantics trace automata partial order semantics possible behaviors concurrent system described terms partial orders sequences 
precisely mazurkiewicz traces maz semantic model 
briefly recall basic notions mazurkiewicz trace theory 
definition concurrent alphabet pair sigma finite set symbols called alphabet sigma binary symmetrical reflexive relation called dependency sigma 
sigma stands independency sigma 
definition sigma concurrent alphabet represent set finite sequences words symbols delta stand concatenation operation denote empty word 
define relation sigma congruence monoid delta sigma ab sigma ba relation sigma referred trace equivalence sigma 
definition equivalence classes sigma called traces sigma 
trace characterized word concurrent alphabet sigma denoted sigma trace concurrent alphabet sigma represents set words defined differ order adjacent symbols independent instance symbols independent trace ab sigma represents words ab ba 
trace equivalence class words 
return concurrent program described composition finite state transition systems property represented automaton denoted delta theta sigma theta denote transition relation product ag automata 
transition delta sets extension consider states ag sets definitions ffl fs delta ffl fs delta ffl ffl ffl ffl called respectively preset postset proximity transition intuitively preset resp 
postset transition ag represents states synchronize respectively transition 
say nonempty preset postset transition active transition 
transitions delta said equivalent notation iff ffl ffl ffl ffl intuitively equivalent transitions represent transition correspond distinct occurrences transition 
occurrences differ states active transition 
denote set equivalence classes defined delta extension define preset resp 
postset element set assume sets sn set states pairwise disjoint 
preset resp 
postset transitions corresponding equivalence class 
transition refer element delta 
define dependency ag relation dag theta dag ffl ffl ffl ffl complement dag called independency ag independent transitions occur computation order occurrences irrelevant occur concurrently execution 
note possible ways defining notion dependency gp 
sigma ag dag concurrent alphabet associated ag ag language finite words accepted ag states ag considered accepting 
words ag set finite sequences transitions system ag perform initial state 
define trace behavior ag set equivalence classes ag defined relation sigma equivalence classes called traces ag class trace corresponds partial order set causality relations represents linearizations words 
describe behavior ag means traces sequences need dependency dag ag linearization trace ag behavior ag fully characterized dependency dag automaton generates linearization trace 
call automaton trace automaton denoted ag god 
formally language accepted trace automaton satisfies relation ag pref lin sigma lin sigma denotes set linearizations words trace equivalence class sigma pref denotes prefixes god algorithm constructing trace automaton corresponding concurrent program 
construct automaton need compute reachable states ag independent transitions executable execute transitions order generate interleaving linearization transitions 
construction sub automaton ag states states ag transitions transitions ag 
order time complexity god concurrent program represented contact free safe net parallel composition sequential processes defined general formalism allows modelling process creation deletion algorithm described god applicable context considered 
algorithm god number transitions times maximum number simultaneous executable transitions 
practice turns building requires time memory building ag instance behavior simple protocol dining philosophers problem see god classically require state graph ag containing states transitions represented trace automaton containing states transitions 
trace automata model checking order results section doing model checking able proceed follows 

build finite automaton infinite words negation formula resulting automaton 
compute trace automaton corresponding concurrent executions processes automaton 
check automaton nonempty 
unfortunately incorrect 
obvious reason incorrect trace automaton defined automaton infinite words set problem easily solved 
sg respectively set states ag construction sg fg ff set sets accepting states ag set sets accepting states defined ff extend definition include set defined call result model checking 
quite possible automaton ag obtained traditional computation product accepts infinite word accept infinite word 
counter intuitive expect ag accepts word permuting independent transitions computation accepting obtain accepting computation nonempty 
true finite computations infinite computations 
consider processes totally independent alphabets completely disjoint 
trace automaton processes allows number transitions process followed number transitions second process 
fine finite computations infinite computations left infinite computation process second process infinite computation processes 
summarize saying represents infinite computations processes joint infinite computations unsynchronized processes 
example illustrates situation 
consider generalized buchi automata figures ffs fs gg ffs fs gg respectively 
possible trace automaton 
set sets accepting states defined ff gg 
automaton accept word joint infinite execution automata accepted corresponding global automaton 
generalized buchi automaton generalized buchi automaton formalize discussion 
ag respectively product automaton trace automaton obtained composing generalized buchi automata 
consider computation ag infinite word view trace automaton computation infinite sequence transitions elements set defined section 
transition ag identify automata active defined section transition 
enables define restriction computation ag components definition trace product automaton obtained composing generalized buchi automata restriction computation automaton denoted ja subsequence contains transitions active 
note restriction infinite computation ag automaton finite 

theorem computation finite infinite global automaton ag obtained composing automata 
computation finite infinite trace automaton ja ja proof consider computation ag consider computation longest restriction ja prefix ja computations choose arbitrarily 
transition prefix 
transition theorem holds 
consider prefix ends transition finite computation prefix trace definition linearization generated projection linearizations ja delta longer assumed longest projection computation prefix ja computations trivially computations contradiction theorem follows 
note true single computation ja ja 
spite theorem lets obtain interesting result trace automaton model checking cases components required infinite computation 
case automata vacuous accepting condition empty set proved theorem 
theorem generalized buchi automata vacuous accepting condition 
ag product trace automata obtained composing automata automaton ag nonempty infinite accepting computation iff trace automaton nonempty 
proof assume ag infinite accepting computation generalized buchi automaton acceptance condition 
theorem know computation ja ja assumed section product automaton ag accepting computation corresponding finite computation ja ja infinite 
ja intersects infinitely sets ja ja case proves nonempty 
direction theorem directly obtained immediate fact computations trace automaton computations global automaton 
practice theorem enables trace automaton model checking cases program operate fairness hypothesis fairness hypothesis incorporated formula verified 
circumstances automata representing program vacuous accepting conditions automaton obtained formula checked nonempty set automata 
theta words trace automata adequately represent computations components built infinite computations concatenated 
help little abstraction infinite computations concatenated 
simply think computations length ordinal larger 
interested concatenation finite number infinite computations study computations length theta 
definitions section quite naturally extended words computations length theta definitions automata ordinals see buc buc 
word length theta alphabet sigma function ordinal theta sigma 
automata defined exactly section simply change definition computation 
computation automaton sigma delta word length theta function oe theta satisfies conditions 
oe 
successor ordinal ff theta oe ff ff oe ff delta 
limit ordinal theta infinite sequence ordinals ff limit oe ff oe 
notions accepting computation accepted word essentially unchanged 
computation oe accepting state repeats infinitely infinitely theta theta word accepted accepting computation set theta words accepted denoted thetan 
note automaton accepts word length theta accepts word length theta 
checking thetan nonempty done computing maximal strongly connected components theorem sigma delta automaton 
thetan iff sequence nontrivial maximal strongly connected components ffl accessible accessible ffl 
proof assume accepting computation length theta finite state sequence computation point states included nontrivial maximal strongly connected component similarly second sequence start state component accessible 
repeating line thought sequences nth concludes existence sequence maximal strongly connected components accepting contains state set infinitely 
states appear infinitely components proves condition theorem necessary 
prove sufficient assume existence sequence connected components construct accepting computation 
sequence computation starts initial state finite prefix leads component goes infinitely states second sequence starts state finite prefix leads goes infinitely states sequences computation nth defined similarly 
goes states components infinitely computation clearly accepting 
interesting aspect definitions just consider trace automaton automaton words length theta represents infinite computations combined automata 
prove establish lemma 
lemma finite computation global automaton ag obtained composing automata 
finite computation ja prefix ja proof lemma direct consequence definition trace automata 
finite computation ag representative trace extends computation adjacent transitions single process independent ja prefix ja extend notion computation section sequences transitions length theta 
theorem assume global automaton ag obtained composing automata accepting computation accepting computation length theta trace automaton proof pumping argument prove theorem 
start considering finite prefix long satisfy condition automaton accepting condition 
describe condition generic automaton ff accepting condition set state appears infinitely precisely state appears component global state corresponding 
implies focusing selected states identify infinitely sequence components global state 
condition sequence selected times states consider computation tf satisfies condition lemma computation satisfies condition imposed sequence appears times states states appear twice component state tf contains instance subsequence starts global state component goes state accepting sets ends state call subsequence tf complete subsequence 
note assumption set contains components implies complete subsequences nontrivial contain transition 
established tf contains complete subsequence automata accepting conditions 
step choose tf complete subsequence accepting computation sort order appearance state 
oe oe oe complete subsequences taken order respective states states appear tf order state tf denote portion tf included accepting computation length theta represents infinite repetition word oe oe oe delta delta delta gamma oe trace automaton model checking need converse theorem 
hold general requires computation length theta merged computation length possible independent transitions interchanged 
precisely empty theorem ag empty program satisfies property 
nonempty computation length ag nonempty program satisfy property 
difficult case accepting computation length greater 
simple approach deal situation reconstruct part ag order determine computation artifact corresponds computation ag reconstructing part ag looses advantage partial order approach note need done cases construction limited accepting computation 
concretely partial construction ag projections various processes sequence strongly connected components defines accepting computation 
partial construction ag avoided cases checks accepting computation satisfies separability condition 
consider computation length theta 
sequence computation part computation corresponding interval 
theta theta define repeating part sequence suffix contains states appear infinitely 
rest sequence finite prefix 
call computation separable transitions repeating part 
theta theta independent transitions finite prefix 
theta theta 
show converse theorem holds separable computations 
theorem generalized buchi automata 
ag product trace automata obtained composing automata trace automaton separable accepting computation length theta automaton ag nonempty accepting computation 
proof notice separable accepting computation length theta accepting computation form oe oe oe oe delta delta delta oe oe nr oe oe ir finite computations transitions oe ir independent respect transitions oe consequence accepting computation ag oe oe delta delta delta oe oe oe delta delta delta oe nr sufficient condition separable condition sequence strongly connected components condition theorem furthermore transitions appearing independent appearing path gamma instance trace automaton separable accepting computation length theta 
summary procedure checking computation corresponding computation ag 
determine sequence strongly connected components satisfy condition theorem 
sequence ag empty 
sequence check satisfies separability condition 
ag nonempty 
remaining cases partial search ag required obtain definite answer 
note possible approach guaranty existence separable computation ag computation different construction property trace automata property section 
specific constructions trace automata additional properties tailored satisfy specific requirements 
comparison closest certainly valmari val 
addresses problem adapting model checking method avoids considering interleavings independent events generating state space concurrent program 
likewise linear time temporal logic uses different strategy 
approach fact order actions appear formula ignored constructing trace automaton handled treating property component concurrent program 
val problem solved discriminating approach 
precisely temporal operator disallowed transitions affect truth value state predicate appearing formula considered dependent 
prohibiting important approach presence operator transition potentially affect truth value formula considered dependent annihilate benefit coming partial order approach 
handle full temporal logic handle extended temporal logics wol 
noted interpretation different causes problems method valmari interpret meaning action monitored formula state program 
treatment fairness properties important difference valmari approach 
valmari approach way represent fairness conditions incorporate formula form fair oe property represent buchi conditions processes 
interaction fairness conditions partial order methods problematic fairness condition concerns processes involved program introduces dependencies wipe benefit approach 
solution represent fairness assumptions distributed way assigning progress conditions individual processes possible 
drawback strategy yield naturally expression fairness constraints 
final element comparison algorithm computing automaton represents interleavings concurrent events lies heart approaches 
note important advantage theta automata modification algorithm suitable finite computations necessary 
hand val algorithm modified increases size state space generated 
furthermore technical ideas constructions approaches differ 
valmari uses algorithm stubborn sets construction trace automaton god 
difference influences effectiveness model checking methods 
influence extremely clear cut orthogonal strategy 
quite possible problems trace automaton algorithm best stubborn sets preferable 
worth noticing parts algorithms combined order achieve better reductions wg 
really method 
hard give precise answer better interleaving methods tight coupling processes dramatically better coupling processes 
case claim done bcm check systems astronomical numbers interleaving semantics states 
course taken grain salt fact checking part enormous state space sufficient indicates interleaving semantics states uninteresting 
bcm similar phenomenon occurs difference verification large systems possible ignoring irrelevant part state space computing efficient symbolic representation sets states transition relations 
construction trace automata god implemented shows promising results method described 
implementation trace automata techniques appeared 
gw model checking restricted safety properties considered 
alternative partial order verification algorithms hgp performance real protocols evaluated 
results practicality trace automata constructions ghp 
note method advantages fly verification jj bfh 
mean build automaton combination program property building automaton program 
surprisingly automaton smaller automaton program property acts constraint behavior program 
method head start methods require state graph program built 
wish jerry burch david dill wolfgang thomas vaandrager antti valmari anonymous referees helpful comments 
preliminary version appeared proceedings th symposium logic computer science gw 
acd alur courcoubetis dill 
model checking real time systems 
proceedings th symposium logic computer science pages philadelphia june 
acw aggarwal courcoubetis wolper 
adding liveness properties coupled finitestate machines 
acm transactions programming languages systems 
ah alur henzinger 
real time logics complexity expressiveness 
proceedings th symposium logic computer science pages philadelphia june 
ahu alfred aho john hopcroft jeffrey ullman 
design analysis computer algorithms 
addison wesley reading 
bcd browne clarke dill 
automatic circuit verification temporal logic new examples 
ieee int 
conf 
computer design vlsi computers port october 
bcm burch clarke mcmillan dill hwang 
symbolic model checking states 
proceedings th symposium logic computer science pages philadelphia june 
bfh bouajjani fernandez halbwachs 
verification safety properties 
technical report imag grenoble march 
bro michael browne 
improved algorithm automatic verification finite state systems temporal logic 
proceedings symposium logic computer science pages cambridge june 
buc buchi 
decision method restricted second order arithmetic 
proc 
internat 
congr 
logic method philos 
sci 
pages stanford 
stanford university press 
buc buchi 
decision methods theory ordinals 
bull ams 
buc buchi 
transfinite automata recursions weak second order theory ordinals 
proc 
internat 
congr 
logic method philos 
sci 
pages amsterdam 
north holland 
ces clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems january 
cg clarke grumberg 
avoiding state explosion problem temporal logic model checking algorithms 
proc 
th acm symposium principles distributed computing pages vancouver british columbia august 
clarke grumberg browne 
reasoning networks identical finite state processes 
proc 
th acm symposium principles distributed computing pages calgary alberta august 
cle cleaveland 
tableau model checking propositional mu calculus 
acta informatica 
cmb coudert madre 
verifying temporal properties sequential machines building state diagram 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
springer verlag 
courcoubetis vardi wolper yannakakis 
memory efficient algorithms verification temporal properties 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
cy courcoubetis yannakakis 
markov decision processes regular events 
proc 
th int 
coll 
automata languages programming volume pages coventry july 
lecture notes computer science springer verlag 
el emerson 
lei 
modalities model checking branching time logic strikes back 
proceedings twelfth acm symposium principles programming languages pages new orleans january 
el emerson 
lei 
temporal model checking generalized fairness constraints 
proc 
th hawaii international conference system sciences hawaii 
el emerson 
lei 
modalities model checking branching time logic strikes back 
proceedings symposium logic computer science pages cambridge june 
ghp godefroid holzmann 
state space caching revisited 
proc 
th workshop computer aided verification volume lecture notes computer science pages montreal june 
springer verlag 
god godefroid 
partial orders improve automatic verification methods 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
gp godefroid 
refining dependencies improves partial order verification methods 
proc 
th conference computer aided verification volume lecture notes computer science pages june 
springer verlag 
gs german sistla 
reasoning processes 
proc 
symposium logic computer science pages ithaca june 
gs graf steffen 
interface specifications compositional reduction 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
springer verlag 
gw godefroid wolper 
partial approach model checking 
proceedings th ieee symposium logic computer science pages amsterdam july 
gw godefroid wolper 
partial orders efficient verification deadlock freedom safety properties 
proc 
rd workshop computer aided verification volume lecture notes computer science pages aalborg july 
hgp holzmann godefroid 
coverage preserving reduction strategies reachability analysis 
proc 
th ifip wg international symposium protocol specification testing verification pages lake vista florida june 
north holland 
hlp harel lichtenstein pnueli 
explicit clock temporal logic 
proceedings th symposium logic computer science pages philadelphia june 
halbwachs pilaud glory 
specifying programming verifying real time systems synchronous declarative language 
workshop automatic verification methods finite state systems volume lecture notes computer science pages grenoble june 
jj 
line model checking finite linear temporal logic specifications 
workshop automatic verification methods finite state systems volume lecture notes computer science pages grenoble june 
km kurshan mcmillan 
structural induction theorem processes 
proceedings eigth acm symposium principles distributed computing edmonton alberta august 
kp pinter 
model checker partial order temporal logic 
ee pub department electrical technion israel institute technology 
lp lichtenstein pnueli 
checking finite state concurrent programs satisfy linear specification 
proceedings twelfth acm symposium principles programming languages pages new orleans january 
maz mazurkiewicz 
trace theory 
petri nets applications relationships models concurrency advances petri nets part ii proceedings advanced course volume lecture notes computer science pages 
pen penczek 
proving partial order properties 
proc 
concurrency compositionality workshop san italy 
pl probst li 
partial order semantics avoid state explosion problem asynchronous systems 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
pw pinter wolper 
temporal logic reasoning partially ordered computations 
proc 
rd acm symposium principles distributed computing pages vancouver 
pz pnueli zuck 
probabilistic verification tableaux 
proceedings symposium logic computer science pages cambridge june 
qs sifakis 
specification verification concurrent systems cesar 
proc 
th int symp 
programming volume lecture notes computer science pages 
rodriguez sifakis 
verification sliding window protocol 
proc 
ifip wg th int 
conf 
protocol specification testing verification pages zurich 
north holland 
sw stirling walker 
local model checking modal mu calculus 
proc 
th col trees algebra programming 
lecture notes computer science springer verlag 
tha andr modal logic deductive databases introducing logic approach artificial intelligence 
wiley 
val valmari 
stubborn attack state explosion 
proc 
nd workshop computer aided verification volume lecture notes computer science pages rutgers june 
val valmari 
stubborn sets reduced state space generation 
advances petri nets volume lecture notes computer science pages bonn june 
springer verlag 
var vardi 
automatic verification probabilistic concurrent finite state programs 
proc 
th ieee symp 
foundations computer science pages portland october 
var vardi 
temporal fixpoint calculus 
proc 
th acm symp 
principles programming languages pages san diego january 
var vardi 
unified verification theory 
barringer pnueli editors proc 
temporal logic specification volume pages 
lecture notes computer science springer verlag 
vw vardi wolper 
automata theoretic approach automatic program verification 
proceedings symposium logic computer science pages cambridge june 
wg wolper godefroid 
partial order methods temporal verification 
proc 
concur volume lecture notes computer science pages hildesheim august 
springer verlag 
wl wolper 
verifying properties large sets processes network invariants 
automatic verification methods finite state systems proc 
int 
workshop grenoble volume pages grenoble june 
lecture notes computer science springer verlag 
wol wolper 
temporal logic expressive 
information control 
wol wolper 
relation programs computations models temporal logic 
barringer pnueli editors proc 
temporal logic specification volume lecture notes computer science pages 
wolper vardi sistla 
reasoning infinite computation paths 
proc 
th ieee symposium foundations computer science pages tucson 

