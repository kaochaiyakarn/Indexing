fundamenta informaticae ios press reachability analysis timed automata partitioning algorithms ol faculty mathematics university poland math uni pl wojciech penczek computer science pas warsaw poland pl 
presents new method checking reachability properties timed automata 
idea consists fly verification property pseudo bisimulating model generated modified partitioning algorithm 
pseudo bisimulating models smaller forward reachability graphs commonly reachability analysis 
theoretical description algorithm supported experimental results 

model checking approach commonly applied automated verification reachability properties 
system property reachability model checking consists exploration state space system testing exists state holds 
main problem approach caused size state space cases particular timed systems large infinite 
intensively investigated methods coping state explosion problem bounded model checking bmc sat solvers 
approach satisfiability formula encoding reachability state satisfying tested symbolic path bounded partly supported state committee scientific research 
address correspondence faculty mathematics university poland affiliated institute informatics academy poland pol reachability analysis timed automata partitioning algorithms length encoding unfolding transition relation 
timed systems transition relation concrete model system detailed region graph considered 
length path affects dramatically size propositional encoding worst case length equal depth model sat methods ineffective 
verification methods building small models systems practical importance developing efficient algorithms generating models remains important subject research 
presents new method generating models timed automata modified minimization partitioning algorithm 
motivation approach taken authors claim minimal bisimulating models models short timed automata obtained partitioning algorithm smaller corresponding forward reachability ones fr models short 
hand clear exist models preserving reachability properties smaller minimal models preserve language ctl 
define models relax requirement transition relation bisimulating models formulated predecessors state applies call new class models pseudo bisimulating ones pb models short 
done models show combine partitioning algorithm method avoids computing complementation classes representing states 
new method fly manner reachability verification 
experimental results show pb models usually smaller corresponding fr ones 
pb models nearly times smaller corresponding models corresponding additionally abstracted fr models produced tool kronos 
turns systems pb models larger abstracted fr models 
follows fact new models preserve reachability properties produce finite counter examples linear time temporal properties 
rest organised follows section related 
section introduce timed automata concrete models usually considered literature 
reachability problem standard algorithm solving section 
sections provide definition algorithm implementation pb models timed automata 
section shows refinement algorithm avoids computing complementation classes 
sections contain experimental results concluding remarks 

related different aspects reachability analysis timed automata usually studied fr models 
abstractions allowing reduce sizes fr models proposed data structures effective verification shown 
alternative method untimed histories states bisimulation relation 
bdd reachability analysis closed timed automata considered 
reachability analysis sat solvers 
method dealing reachability analysis partitioning simulating models shown 
minimization algorithm models implementations timed automata 
contains examples showing models smaller corresponding forward reachability ones 
pol reachability analysis timed automata partitioning algorithms 
timed automata ir ir denote set non negative reals set natural numbers 
fx finite set variables called clocks 
valuation tuple ir value clock valuation ir denotes valuation valuation subset clocks denotes valuation 
atomic constraint set clocks mean expression form 
valuation satisfies atomic constraint respectively 
time zone convex polyhedron ir defined finite set atomic constraints set valuations satisfying constraints 
set time zones denoted 
definition 
timed automaton tuple finite set actions finite set locations fx finite set clocks initial location transition relation location invariant 
element denoted represents transition location location performing action set clocks reset zone defining enabling condition location invariant function assigns location zone defining conditions location 
concrete state pair ir valuation 
set concrete states denoted initial state defined states automaton define timed relation ir iff action successor relation ir iff time successor relation 
structure called concrete state space run finite sequence ir notice action transitions taken time passing 
length run mean number action transitions occur 
state reachable exists run set reachable states denoted pol reachability analysis timed automata partitioning algorithms 
models timed automata pv set propositional variables pv valuation function assigns propositions states locations definition 
concrete state space timed automaton structure called concrete model concrete state spaces concrete models timed automata usually infinite directly applied model checking 
order reduce sizes define finite abstractions preserving properties verified 
idea combine classes concrete states indistinguishable properties 
away exact amount time elapsed time transitions done replacing labels ir new symbol ir 
follows concrete state space mean structure time successor relation concrete states notations depending context 
definition 
concrete model structure directed rooted edge labelled graph node set initial node pv valuation function called model conditions satisfied node set states holds reach iff reach fw graph called state space nodes called states 
model complete iff follows consider complete models 
reachability analysis model usually applied definition 
model surjective iff reach literature class models called bisimulating models considered definition 
model bisimulating iff reach edges labelled elements pol reachability analysis timed automata partitioning algorithms 
zones regions finite models built timed automata regions states 
definition 
timed automaton 
region ir set states zg denoted 
region identified empty region 
ir 
define operations zones regions iff ir set disjoint zones fz partition regions fv zg fv zg fv notice operations clock reset inverse preserve zones 
results implementation 

reachability problem model checking approach commonly automated verification reachability properties 
timed automaton property reachability model checking exhaustive exploration reachable state space testing exists state holds 
concrete models timed automata finite models preserving reachability usually applied 
aim forward reachability fr models commonly 
reachability analysis usually performed fly generating model property newly obtained states model examined generation model finished state satisfying 
general known dfs algorithm fly reachability testing shown fig 

notice worst case state satisfying reachable model generated 
order test reachability efficiently fr models improved 
example replacing condition line 
algorithm inclusion abstraction changing bounds zones greater maximal constant appearing requirements constraints form extrapolation abstraction eliminating clocks 
said cases minimal models smaller corresponding fr ones 
shown fly reachability analysis models feasible 
follows introduce notion pseudo bisimulating pb models usually smaller bigger bisimulating ones provide algorithm fly reachability analysis 
pol reachability analysis timed automata partitioning algorithms 

fw 
repeat 

get 
return 


add 
compute successors 
add successors 



return 
reachability algorithm 
pseudo bisimulating models idea definition pb models consists relaxing requirement transition relation models formulated predecessors state see def applies 
selected predecessor needs reachable state minimal number steps 
give definition need auxiliary notions 
nodes denote exists path finite sequence states edges form labels edges omitted 
say path length contains edges 
node depth denoted dpt length shortest path depth assumed infinite 
introduce definition 
model pseudo bisimulating iff reach exists reach dpt minimal set example shows difference pb models 
example 
fig 
pb model generated case 
circles straight lines concrete model ellipses arcs 
concrete states successors allowed model results creating additional nodes pol reachability analysis timed automata partitioning algorithms pb model model 
pb model generated case 
pb model path run say inscribed conditions hold ii ir iii denote edges satisfying condition def 
denote exists characterize pb model theorem 
conditions hold run inscribed path reach path path exists path valuations stuttering equivalent run inscribed proof proof induction length run consider run length 
definition model definition model completeness exists inscribed assume run length exists path inscribed means valuations states repeating values pol reachability analysis timed automata partitioning algorithms consider run definition model completeness exist exists path inscribed 
proof induction depth node 
node depth obvious exists path satisfying required condition 
assume reach depth exists path consider node reach depth 
definition pb model definition depth exists node reach dpt inductive assumption path path extended length 
proof induction length path 
easy see path length stuttering equivalent path run length inscribed notice self loop 
consider path assume path length subpath exists stuttering equivalent path run em inscribed exists run extended inscribed path easy see stuttering equivalent stuttering equivalent case run modified em comes transitivity time successor relation 
path inscribed form 
valuations states time successor relation paths stuttering equivalent completes proof 
ut follows theorem pb models preserve reachability produce finite counter examples properties expressible linear time temporal logic step operator 
formally path steps satisfying ltl formula run satisfying 
picture shows relations pb models kinds models considered literature 
class pb models comparable simulating models models preserving trace equivalence proof see 

minimization algorithm pb models pb models generated modification known minimization partitioning algorithm 
order give algorithm introduce notions pol reachability analysis timed automata partitioning algorithms bisimulating models models pseudo bisimulating models equivalence simulating models trace preserving 
relations various kinds models partition set concrete states mean set disjoint classes union equals class reachable concrete state reachable 
partition introduce functions pre fx yg post fy yg 
order generate pb models partition partition defined set pairs dpt partition dpt mean define dpt 
dpt iff introduce functions re dpt dpt pre re dpt re dpt ost dpt dpt post ost dpt ost dpt 
class dpt reachable concrete state reachable 
introduce notion pb unstability 
intuitively class pb unstable successor dpt predecessor dpt minimal depth concrete states successors class dpt see fig 

definition 
partition dpt dpt 
class dpt pb unstable 
dpt iff pre dpt dpt minimal set dpt re dpt pre pb stable iff pb model dpt satisfying def 
dpt 
denotes projection component pol reachability analysis timed automata partitioning algorithms example 
fig 
illustrates notions pb stability pb unstability 
left hand side classes dpt dpt partition pb stable successor dpt concrete states dpt predecessor dpt minimal depth successors dpt 
contrary right hand side picture classes pb unstable 
dpt predecessor dpt minimal depth satisfy required condition 
dpt pb stable dpt dpt pb unstable dpt dpt dpt 
pb stability pb unstability 
minimization algorithm pb models starts initial partition component dpt class containing equal classes set 
constructs minimal model pb min pb min pb min st st reachable part pb stable partition obtained refinement class union classes 
algorithm parameterised non deterministic function split dpt defined classes dpt dpt explanation considering classes 
function refines choosing class dpt dpt pb unstable splitting class dpt class dpt dpt minimal set dpt re dpt order dpt pb stable 
dpt 
defining function introduce function dpt defined computing value component dpt new class dpt created 
function returns value possible depth dpt determined analysis classes dpt pre notice components dpt classes step algorithm differ depths model obtained algorithm terminates 
precisely dpt dpt dpt pre exists dpt pre dpt dpt 
define split dpt dpt dpt pb stable dpt 
class dpt chosen pre fx dpt pb unstable 
dpt dpt dpt split dpt pre dpt pre pre dpt pre pol reachability analysis timed automata partitioning algorithms dpt dpt choose class dpt pre dpt dpt re dpt split dpt pre dpt pre pre dpt pre intuitively class dpt pb unstable successor dpt analysis step assume model obtained algorithm terminates dpt predecessor dpt minimal depth partition class dpt 
dpt indicates dpt predecessor depth smaller dpt choose predecessor dpt smallest value dpt splitting 
example 
fig 
presents cases function split dpt 
consider class dpt predecessors dpt dpt shown step algorithm components dpt classes equal ones picture 
step algorithm stability dpt checked case shown left hand side picture class dpt split case shown right hand side class dpt chosen partitioning 
dpt dpt split dpt dpt dpt dpt dpt split dpt 
cases function split dpt minimization algorithm models maintains sets stable reachable contain classes step considered stable reachable respectively 
classes split chosen reachable 
algorithm terminates sets reachable stable equal 
minimization algorithm pb models similar 
case modifications set reachable step algorithm result changing components dpt classes 
precisely class dpt pb stable successors added set stable successors dpt reachable 
adding dpt reachable set dpt dpt set reachable contains classes components dpt different explains sufficient function split defined classes 
hand class dpt removed reachable dpt set 
order generate pb models effectively set reachable replaced list reachable sorted depths classes 
algorithm bfs mode case pol reachability analysis timed automata partitioning algorithms function split occurs 
models obtained way usually smaller ones get classes split chosen arbitrary order 
example 
illustrates influence order classes split chosen size generated model 
consider classes dpt dpt model obtained algorithm terminates dpt dpt 
case stability class dpt checked adding dpt list reachable class pb unstable 
dpt partitioned due dpt 
process shown left hand side picture 
hand algorithm works bfs mode pb stability predecessor dpt minimal depth checked 
prevents unnecessary partitionings 
oo oo dpt dpt step step reachable dpt unstable dpt dpt dpt dpt dpt step bfs behaviour step dpt stable dpt dpt dpt 
difference pb models obtained classes split chosen different orders 
due bfs behaviour algorithm fly reachability analysis possible 
process generating model stopped soon class dpt satisfying tested property added list reachable case path dpt dpt proves reachability state pseudo code algorithm generating pb models enabling fly reachability analysis fig 

termination algorithm follows termination algorithm models 

implementation timed automata order implement algorithm timed automata define initial partition partition concrete state space automaton implement functions pre re ost 
models timed automata usually regions states need define functions satisfy requirement 
initial partition assume dpt ir dpt dpt partition define action successor pre pol reachability analysis timed automata partitioning algorithms 
reachable stable 
dpt reachable stable 

dpt split dpt 
dpt dpt 

stable stable dpt 
dpt ost dpt dpt dpt 
reachable reachable ost dpt 
dpt ost dpt return 



yx dpt split 
dpt dpt dpt dpt 
reachable reachable yx dpt dpt 
stable stable re 
yx dpt 


return 
minimization algorithm fly reachability analysis pb models time successor pre regions containing concrete states action successors time successors region respectively 
introduce re dpt dpt dpt ost dpt dpt dpt notice case time successor relation order reduce number partitionings region immediate time successors regions satisfying condition taken account 
agrees approach 
pol reachability analysis timed automata partitioning algorithms 
minimization algorithm preserving convexity main drawback algorithm consists computing differences zones applying function split 
fact operation reduced complementation polyhedra exponential number clocks automaton 
algorithm generating timed automata avoiding classes 
algorithm easily adapted generate pb models 
provide adaptation complementation classes partitioning avoided starting initial partition partition extended set concrete states ex ir satisfies invariants enabling conditions notice building initial partition computing may necessary 
dpt action performed concrete states belonging dpt 
partition classes dpt satisfying called pseudo classes 
set pseudo classes denoted ps partition dpt functions defined dpt dpt dpt ps pre class dpt pb stable 
dpt dpt pre dpt pre pre dpt dpt dpt ps pre class dpt pb stable 
dpt dpt pre dpt pre pre 
function splits class dpt time successor class belong ps dpt pb unstable 
case class dpt split time successors 
notice classes obtained case form partition dpt computing necessary 
behaves similar manner 
dpt pb unstable successors partitioned successors corresponding transition 
partition satisfies constraints automaton classes obtained applying function form partition dpt need computed 
example 
partitionings caused functions simplicity zones classes shown 
picture left location pol reachability analysis timed automata partitioning algorithms invariant associated 
class corresponding zone ps belongs ps easy see class dpt needs split time successors corresponding zones applying function results obtaining classes corresponding zones form partition dpt 
picture right way function works shown 
class dpt successors correspond zones class needs split successors function applied obtain classes corresponding zones shown rightmost part picture 
ps ps location location time successor relation partitioning location location location partitioning action successor relation 
functions minimization algorithm generating pb models functions fig 

notice pseudo classes split added list reachable 
list sorted depths classes results bfs behaviour algorithm 
enables fly reachability analysis 
termination algorithm follows termination partitioning algorithm preserving convexity models 
order generate models effectively partitions steps algorithm generated fly 
location set states ex associated algorithm start initial partition satisfying invariants enabling conditions class dpt added list stable line 
fig 
partition step extended adding classes satisfy invariants enabling conditions partitions sets corresponding locations reachable performing transition visited 
modification introduced adding pseudo code line 
algorithm fig 

trans 

target 
satisfying constraints ir 

function trans called location returns transitions target called location transition returns location reached performing function satisfying constraints called ir returns set regions partition ir satisfy invariants enabling conditions pol reachability analysis timed automata partitioning algorithms 
reachable stable 
dpt reachable stable 

dpt dpt 
dpt dpt 



dpt dpt 
dpt dpt break 


dpt dpt 

stable stable dpt 
dpt ost dpt 
dpt dpt 
reachable reachable ost dpt ps 
dpt ost dpt 

return 



yx dpt dpt split 
dpt dpt dpt 
dpt 
reachable reachable yx dpt dpt 
stable stable re 
yx dpt 


return 
minimization algorithm pb models preserving convexity 

experimental results implemented algorithm component tool programming language run machine equipped mb main memory linux operating system 
tested known fischer mutual exclusion protocol see fig 
different values parameters 
mutual exclusion ensured 
sizes models compared sizes fr ones obtained tool kronos 
table fig 
pol reachability analysis timed automata partitioning algorithms retry set enter exit process set set set set exit exit exit exit try set retry enter exit process try retry retry try try exit exit enter set enter set shared variable crit crit 
fischer mutual exclusion protocol processes columns 
contain values parameters number processes 
column gives size total automaton forw shows size fr models generated abstractions ai ax inclusion extrapolation abstractions added 
cases memory exhausted denoted 
forw ai ax models pb models 
stats edg 
stats edges stats edges stats edges stats edges 











comparison sizes models 
notice pb models usually smaller fr models 
experiments protocol show times smaller ai ax models size model understand total number states edges examples abstracted fr models smaller 
occurs instance known railroad crossing system worst case pb model states edges abstracted fr model states edges respectively 
definitely examples pb models larger abstracted fr models smaller ones 
systems clear advantage pb models comes power produce counter examples reachability properties time free safety ltl formulas 
comparing methods reachability analysis timed automata literature result considered important proving correctness showing state pol reachability analysis timed automata partitioning algorithms satisfying tested property reachable requires exploring model 
comparison results obtained various tool exploiting symbolic non symbolic methods reachability analysis mutual exclusion protocol provided 
example considered authors claim tool powerful able show reachability state satisfying property processes 
unfortunately experiments correctness proven provided 
method enables finding reachable state satisfying property processes 
authors claim able prove correctness processes allows assume symbolic tools considered worse 
hand said models smaller fr models 
pb models bigger ones smaller models shown literature better kind verification 

idea models testing reachability comes said minimal models smaller corresponding fr ones 
pb models usually smaller models 
provide modification partitioning algorithm enabling fly reachability analysis adaptation method avoiding complementation classes allows generate models effectively 
cases simple answer reachability safety question sufficient sequence transitions leading state interest 
due bfs behaviour algorithm method allows answer question 
progress reachability verification minimization algorithms possible generating pb models weaker bisimulation discrete semantics lead better results 
research concentrated problem 
alur courcoubetis dill halbwachs wong toi implementation algorithms timing verification automata emptiness proc 
th ieee real time systems symposium rtss ieee comp 
soc 
press 
alur courcoubetis dill halbwachs wong toi minimization timed transition systems proc 
concur lncs springer verlag 
cimatti sebastiani bounded model checking timed systems technical report itc irst sommarive povo trento italy january 
beyer improvements bdd reachability analysis timed automata proc 
int 
symp 
formal methods europe fme lncs springer verlag 
bouajjani fernandez halbwachs raymond minimal state graph generation science computer programming 
bouajjani tripakis yovine fly symbolic model checking real time systems proc 
th ieee real time systems symposium rtss ieee comp 
soc 
press 
pol reachability analysis timed automata partitioning algorithms tripakis model checking real time reachability properties abstractions proc 
int 
conf 
tools algorithms construction analysis systems tacas lncs springer verlag 
dembinski penczek pol tool verifying timed automata estelle specifications proc 
th int 
conf 
tools algorithms construction analysis systems tacas lncs springer verlag 
kang lee efficient state space generation analysis real time systems proc 
int 
symposium software testing analysis 
larsen larsson pettersson yi efficient verification real time systems compact data structures state space reduction proc 
th ieee real time system symposium rtss ieee comp 
soc 
press 
tripakis yovine minimum time reachability timed automata proc 
th ieee mediterranean conf 
control automation med ieee comp 
soc 
press greece july 
penczek bounded model checking universal fragment tctl proc 
th int 
symp 
formal techniques real time fault tolerant systems lncs springer verlag 
pnueli temporal logic programs proc 
th int 
symp 
foundations computer science focs 
pol penczek refining partitioning checking reachability timed automata proc 
int 
workshop concurrency specification programming cs humboldt university 
pol penczek reachability analysis timed automata partitioning technical report ics pas warsaw 
appear tripakis yovine analysis timed systems time abstracting bisimulations proc 
cav lncs springer verlag 
tripakis yovine analysis timed systems time abstracting bisimulations formal methods system design 
penczek checking reachability properties timed automata sat technical report ics pas warsaw october 
penczek reachability timed systems sat solvers proc 
int 
workshop concurrency specification programming cs humboldt university 
yovine kronos verification tool real time systems springer international journal software tools technology transfer 
