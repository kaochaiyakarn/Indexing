appears ieee symposium security privacy oakland ca vulnerabilities synchronous ipc designs jonathan shapiro department computer science johns hopkins university eros os org advances interprocess communication ipc performance exclusively ipc designs 
thread migrating designs assume ipc interactions synchronous user level execution usually resume invoked process modulo preemption 
ipc design approach offers shorter instruction path lengths requires fewer locks smaller instruction data cache footprints dramatically reduces tlb overheads consequently offers higher performance lower timing variance previous ipc designs 
care performed atomic unit operation 
performance thread migrating ipc examined detail vulnerabilities implicit synchronous ipc designs examined depth archival literature implications ipc design actively misunderstood publication 
addition performance sound ipc design address concerns asymmetric trust reproducibility provide support dynamic payload lengths 
previous ipc designs including eros mach pebble satisfy requirements 
show design objectives met simultaneously 
identify conflict requirements illustrate collision arises documented ipc architectures eros 
show design objectives simultaneously met generation eros ipc system 
keywords operating systems capability systems interprocess communication vulnerability 
thread migrating interprocess communication ipc designs driving forces current resurgence interest microkernel systems 
particular ipc implementations liedtke shapiro shown protected ipc invocations reduced cycle range processors :10.1.1.158.4191
experimental analysis ford shows performance advantage achieved asynchronous ipc mechanisms 
results performance motivated reports demise microkernels may premature 
question security motivated demise remains open 
potential security benefit high performance ipc straightforward 
contrast asynchronous buffering ipc designs latency thread migrating ipc low applications factored multiple protection domains encapsulated process boundary selectively linked protected ipc communication 
domain isolation essential building block high assurance systems 
commercial system constructed approach domain enforcement 
selected denial service attacks microkernel servers including re examined briefly examined literature 
provides depth exposure applicationlevel vulnerabilities implicit synchronous ipc system 
synchronous communication mechanism introduced security trust implications sender blocking considered 
system design incorporates user level pagers interactions pagers string transfers blocking considered 
relatively experienced ipc designers failed recognize potential security issues inherent combination 
satisfactory ipc design simultaneously satisfy certain functional testability security requirements 
particular results pentium family fast system call instructions 
comparably careful implementations designs current machines reduce common case ipc time cycle designs 
asymmetric trust ipc architecture embed assumption sender trusts recipient 
reproducibility behavior ipc primitives influenced exogenous factors system load 
required testability operational predictability variations workload 
dynamic payload ipc architecture support transmission messages length known advance receiving party 
dynamic payload support procedures returning precise unbounded integers dynamically sized vectors handled ipc interface 
particular set requirements deceptively difficult satisfy simultaneously 
due presence timeouts mach fail reproducibility requirement 
absence timeouts truncation pebble fluke fail asymmetric trust requirement 
prior reported eros failed dynamic string requirement 
examines detail certain denial service problems arise synchronous ipc designs 
identify cases potential denial describe available mechanisms eros applications may attempt protect 
show generation eros ipc subsystem simultaneously meets requirements identified process show functional requirements support dynamic message payloads need sacrifice reproducibility 
primary goals ensure denial service vulnerabilities neglected ipc designs show addressed generation eros ipc system 
balance proceeds follows 
section selectively review eros ipc designs 
section describes problem asymmetric trust detail options dealing problem 
section performs case analysis ipc safety conditions asymmetric trust identifying cases existing low cost mechanisms sufficient address problem introduces trusted buffer object tbo solution general case 
section justifies tbo trusted ordinary client establishes additional requirements ipc subsystem necessary achieve effective tbo design 
remaining sections describe related acknowledgments 
review eros ipc designs explores interprocess communication designs purposes illustration discussion eros 
feature perspective designs converging years 
carefully engineered specified embody somewhat different views ipc implemented 
proceeding body proper useful briefly review ipc designs 
descriptions provided comprehensive focusing portions ipc systems relevant denial service vulnerabilities 
ipc ipc system implements single basic primitive :10.1.1.158.4191
operation sends message named thread task id blocks waiting response 
receive phase omitted allowing message sends initiate new thread control receiver 
part specification receive phase process performing indicate accept message sender open wait particular thread closed wait 
enables implementation remote procedure calls receiving closed wait invoker rpc assured incoming message received invoked thread 
payload ipc operation consists bounded vector immediate words number guaranteed transmitted registers 
word vector optionally followed bounded dope vector entry specify byte string arbitrary length limited address space size address space mapping transferred 
ignoring complications arising scatter gather support receive specification include corresponding dope vectors specifying logical component message received 
message payload fully guaranteed induce exception sender recipient 
transmission data string lead receiver side page faults handled user mode fault handlers 
general guarantee specified destination process receive state time ipc operation 
avoid indefinite blocking invocations include timeout values amount time wait transmission initiated amount time spent servicing page faults 
timeout exceeded operation aborted error signaled sending process 
specified timeout infinite 
vulnerabilities key weaknesses design absence protection specification recipient sender may invoke process presence timeouts ipc interface 
addition minor issues ipc mechanism reveals sender task id recipient widely reported high performance pentium implementation fails save restore segment register values 
absence ipc protection service ability restrict callers 
hostile process may perform denial service attacks repeatedly invoking operations arbitrary target process 
mitigated original mechanism solution imposes significant overhead invocations 
efficient solution proposed allocate server thread client closed waits 
solution requires service applications accept complexity multithreading unfortunate implications resource consumption address problem session establishment services 
experimental design modification jaeger proposed capability ipc redirection mechanism provides access control renders recipient identity opaque 
design incorporated specification expected add typical cost ipc operation 
timeout mechanism mitigates certain low cost denial service attacks effectively receiving server thread occupied ipc operation timeout occurs 
presence timeouts primitive ipc specification impedes reproducible operation workloads queueing behavior predicted 
timeout failures difficult test real systems potential cascade unpredictable ways 
ipc system ability transmit multiple independently labeled strings inclusion multiple strings little impact vulnerability 
primary concern string transmission page fault handling aggregate string length number strings 
debatable minor issues identified viewed significant vulnerabilities 
revealing sender task identity clearly failure encapsulation 
principle unfortunate clear revelation significant security consequences 
concern revealing caller task identity demonstrates authority indirectly interposition client server difficult 
failure save restore segment registers reveals underlying interrupt event flow process cares observe 
high bandwidth inward covert channel hole straightforwardly closed minor alterations implementation 
eros ipc eros ipc system derived keykos influenced various aspects design 
eros implements primitive invocations send wait call sends enters closed wait return sends enters open wait 
fact process open closed wait explicitly recorded process state waiting process 
contrast design open closed wait distinction eros expresses restriction capability type invoked process id invoker 
receiving process available state open wait invoked start capability receiving process 
receiving process available state invocation block 
receiving process waiting state closed wait invoked resume capability receiving process 
resume capabilities produced call operation consumed invoked 
process model guarantees resume capability exists process process waiting state 
ensures invoking resume capability block waiting interprocess rendezvous 
payload eros ipc operation contains registers capabilities bounded string 
forthcoming enhancements remove string bound provide scatter gather support 
contrast eros process hold capability process wishes invoke 
capabilities named indirectly invocation specifying index kernel managed process capability list 
eros provides limited means mapping transfers sender explicitly construct mapping structure transmit capability structure recipient 
eros provides translucent forwarding object known wrapper allows capabilities selectively 
eros invocation payload consists registers capabilities guaranteed induce exception sender recipient 
transmission data string lead page faults recipient receive region properly prepared recipient 
page fault require invocation user mode page fault handler invocation resume capability invocation transmitted string truncated 
behavior guards hostile clients seek block server indefinitely 
interactions eros invocation types capability types allow mutually trusting processes establish extended mutual exclusion routine style call operations 
process performs call returning performs call resume capability processes continue ion done final invocation performed return operation 
final invocation performed whichever party blocked closed wait 
ensures third party invocations interrupt transaction progress 
vulnerabilities key weakness eros design requirement client know advance upper bound size message returned server 
functional security failing nuisance implementing language neutral capability interface 
eros truncation rule mis characterized correctness flaw ford 
fact reflects conscious decision servers obligated return correct data hostile clients 
liedtke truncation decision surprising personal communication 
discussion rationale resulted separate page fault timeouts ipc system 
absence truncation timeouts delivery assured cost exposure denial service 
note choice exposure truncation timeout really desirable outcomes 
solution adopting generation eros system feasible capability systems relies heavily eros ability factor resource trust dependencies 
asymmetric trust key recognized requirement ipc systems ability support asymmetric qualified trust relationships communicating processes 
occurs multiple client applications call single server application especially acute common shared application monitor 
clients trust server process requests correct server curious set conflicting objectives respond client requests requirements interface operational specification 
trust client faithfully execute part application level invocation protocol 
particular assumptions server possibility client induced blocking blocking precluded primitive ipc mechanism 
emphasized prior publications eros ipc system eros system includes translucent forwarding object 
original purpose translucent forwarder support selective client access 
selective revocation kind revoke hostile sessions event request flooding attacks 
hostile client attempt denial service clients simply calling server blocking indefinitely non receiving process state causing server turn blocked attempts reply 
refer type client defecting client 
basic design features attempted various ipc designs manage mitigate problem buffering mach early ipc systems implements message buffering 
buffer blocks kernel allocated effectively converts localized attack single server global denial resource attack entire operating system 
multithreading mach support multithreaded servers :10.1.1.158.4191
threads explicitly allocated resources server eventually run 
multithreading effective denial resource attack ensure attack pressures kernel scheduler expanding scope vulnerability 
truncation eros ensures server replies prompt virtue ipc specification 
prompt invocation blocked actions untrusted party 
eros process model guarantees client proper state server replies resume capability 
partial solution 
care taken user level pagers hostile client block replying server user level page fault handler 
preclude attack eros truncates message reports fact truncation client user mode handler need invoked 
defined pages removed single level store implementation result truncation kernel trusted supply promptly 
timeouts includes timeout specification part invocation reserved values mean wait wait forever :10.1.1.158.4191:10.1.1.158.4191
timeout prevents total blockage server small number hostile clients exploit server side timeout implement severe denial service clients 
summary features included commonly referenced ipc systems table 
feature mach eros buffering multithreading retry truncation timeouts table 
summary defensive features commonly referenced ipc implementations 
effect buffering mentioned kernel implemented ipc buffering creates opportunity global denial service performing denial resource attack available kernel buffers 
mach lazy copy feature performs large copies transparently copy write mappings attacking mach ipc system way requires fairly large copies pressure pages converted pressure page tables 
implemented hierarchical memory management architectures small number cooperating hostile processes exhaust mach kernel memory bit machine performing misaligned copies gigabyte region copy allocates page tables consume megabytes kernel memory 
attack attacking process need acquire full gigabytes 
starting smaller region size just exceeds kernel policy threshold copy write transfer hostile process multiple transfers create large region holding large number data pages 
essence problem party transaction charged mapping pages kernel 
additional copies imposed buffering undesirable security problem buffering arises burden cost 
failing attribute cost buffer storage appropriate process kernel open attack 
vax vmm security monitor mitigated issue memory quotas quota approach practical efficient ipc systems 
quota mechanism synchronous ipc system eventually result delivery allocation fault exception handler exactly problem eros faces user supplied page fault handlers 
alternative implement ipc primitive operates buffered channels pipe fashion 
approach abandons essentially ipc performance advances years resulting ipc primitive slow support adequate degree 
eros implements buffering kernel generally accepted buffering included design ipc primitive 
effect multithreading effect multithreading ipc denial service takes forms 
new threads allocated transparently kernel implied denial resource attack exhausting kernel memory 
threads allocated explicitly server process attack requires copies hostile client number available server threads 
multithreading required certain servers assurance perspective best avoided complexity grounds 
single threaded server feasible complexity concurrency management eliminated assurance server easily achieved 
provides multithreading aware ipc microkernel 
eros shortly implement retry operation allows service force caller re perform invocation service supplied capability 
mechanism allows eros service selectively block unblock callers kernel examining request 
cases multiplexing order return handled single service thread leveraging mechanism 
effect truncation truncation imposes subtle requirement object interfaces upper bound length reply known client time call pre probe receive area ensure needed pages defined 
impediment operations return vectors strings common dynamically sized 
general case types safely return value interprocess call underlying ipc system supports dynamically sized return values 
eros inherited truncation approach keykos adequate years 
lately come feel problematic 
changes eros ipc system years combined alter view 
expansion keykos page ipc payload limit kilobytes eros reduced length pressure messages started thinking map corba object invocations directly primitive invocation mechanism 

turn led design implemented round eros ipc modifications removes string length bound entirely subject limits address space size 

subsequent design implementation provides language neutral interface definition language capabilities drew attention fact unbounded dynamically sized vectors supported recipient know message size advance 

desire capability scripting language scripting language eros objects led introduce standard operation conforming capabilities 
operation returns string length known client advance 
luck operation time needed define commonly operation response size call time 
knowledge eros keykos current ipc systems implementing truncation 

effect timeouts previously discussed timeouts impede predictable behavior testability 
personal discussion yoon ho park regarding timeout values system concluded timeouts timeouts general divided categories 
wait corresponds eros truncation 

wait indefinitely 
wait period motivated externally specified duration real world 
example disk drive specified maximum seek time ms seek completion interrupt received ms probably wrong 

values 
principle value incorrect dynamic range possible workloads specified advance 
practice services timeouts category typically resorting infinite timeouts non blocking ipc operations 
suggests practice addition timeout value ineffective guard defecting clients 
setting aside question effectiveness timeouts embedded ipc operations difficulties friendly preclude testability interact favorably debugging recipient may stopped 
practice timeout triggered usual ipc fail ipc sender blocked duration timeout potentially doing useful 
ipc timeouts leveraged support client side page faults ipc timeout mechanism exploited hostile clients implement efficient denial service attacks clients share common server window system attacker 
attack proceeds implementing client side page fault handler simply waits page fault notification 
page fault handler place client sends string containing undefined page shared server 
receiving server thread task rendered timeout expires 
consequence behaved clients invoke server 
multithreading circumvent attack 
simply requires duplicates attacking client 
duplicates share common single defecting page fault handler 
provides timeouts eros 
case analysis suspicious ipc seeking solution problem asymmetric trust satisfy objectives 
avoid introducing complexity possible 
complex strategies server manifest latency experienced clients 

client defects impose cost misbehavior client 

avoid solutions convert localized denial service systemwide denial service 
sources vulnerability looking general solution defecting client useful understand cases problem threat 
useful escape hatch requirements ipc subsystem need guarantee service attackers 
determined receiver defecting ipc subsystem responsibility deliver message 
potential sources blockage ipc process lie invocation type divisible indivisible state invoker transmitted string page faults received string page faults 
invoker thread string vulnerabilities long ipc invocations specified indivisible rely fact invoker cause invocation block completing 
prevent page faults ipc implementation behave dry run performed sender side real invocation effectively causing sender side page faults occur prior invocation ensuring sender side string ready prior invocation 
successful dry run may assume exceptions send string region constitute defection abort invocation 
eros ipc mechanism specified 
wrong state concern consider recipient may wrong state accept ipc invocation 
consider kinds states open waits closed waits 
blocking behavior expected invoker depends expected state 
invoker process performs ipc server process open wait implicit race processes invoking possible process beats invocation may consequently block period time controlled invocation invoker implicitly declaring permit indefinitely block invoker 
closed wait matters quite different 
invoker expects waiting response 
reason waiting closed wait 
practice closed wait arises server responding previous client call 
case prompt completion required prevent denial service attacks server 
ipc system direct coupling state invoker invocation 
processes involved know procedure call semantics expected client wait forever timeout waits closed wait 
server responds wait timeout 
eros ipc system start capability capability invocation block recipient available open wait state 
resume capability invoke process waiting closed wait state 
operation causes eros process leave waiting state causes outstanding resume capabilities efficiently guaranteeing client side debuggers exploited means attack servers 
resume capabilities consumed 
prevents server compromised performing denial service attacks past clients 
receive string page faults large strings invocation protocol declares may legally block invoker wait forever start capability eros invocations need consider blocking occurs 
agreeing block invoker implicitly saying trusts receiver decisions disposition invoker thread control 
long tell case ipc subsystem free run specified page fault handler 
invoker specified invocation prompt wait resume key eros invocations page faults serviced guarantee prompt completion achieved 
care taken design parallel problem arise long strings transferred 
real time chosen gloss distinction page fault servicing timeouts readiness timeouts essential point invoker said agree block pagers 
schedulers rely fact clock driven preemption recognized quickly processor 
result internal implementation ipc transmits long strings break operation multiple internal units operation having maximum duration chosen avoid interfering scheduler 
need internal units operation ipc designer may tempted external application visible specification ipc primitive divisible form 
security design hazards 
server blocked untrusted client engaging extended transfer 
server required indefinitely hold state hopes ipc resumed precludes servicing requests incomplete divisible ipc outstanding 
avoid hazards scatter gather long string enhancements eros ipc specification allow ipc cleanly aborted permit paused prior completion 
application layer implications sources vulnerability characterized examine impact application level remote procedure call protocol cases page fault handlers safely executed 
provided ipc operations specified indivisible difficult case arises conditions apply invocation type precludes blocking payload size known advance receiver side effects computational cost operation preclude recovery delivering truncated response client adjusting client receive area replaying invocation 
experience eros vast majority interprocess invocations statically specified upper bound payload directions data motion involved 
read write requests example typically specify upper bound buffer length 
bound established reasonably require behaved recipients pre validate receive buffer areas 
cases sender robustly non blocking truncating ipc operation 
replies carry string 
string generally smaller page receive area validation requirement imposes significant performance cost 
non blocking ipc operation knows length expected message fails provide adequately validated buffer space correctly executed higher level rpc protocol 
case presume 
non blocking requirement concern wellbehaved receiver unable bound length reply 
cases particular involve return strings 
example previously described get signature operation vector invocation server respond nonblocking ipc 
response string exceeds valid buffer length recipient reply truncated 
long ipc primitive reports stub layer number bytes sent opposed received stub transparently increase receive string buffer size retry invocation 
difficult case reduced difficult case non invocations client unknown payload relatively rare set situations side effect occurs cost performing dry run invocation replay prohibitive 
solution point page fault ipc timeout 
eros capability system offers possibility flexible solution 
large message transferred single logical operation client reliably accept server block somebody provide memory hold 
typical ipc design sender holds sender memory uses timeout mechanism decide abort invocation kernel provide buffers 
ipc specification initially appears eros truncate invocations incorporate form timeout capability invocation mechanism 
source ford 
generation eros system provides underpinnings third solution 
admit problem server blocking slightly 
said server block overly constraining 
precise statement server blocked untrusted party 
particular trusted buffering agent available server safely encapsulate message buffer consumption client 
problem buffering general expensive wrong party pays storage usually kernel sender 
merely nuisance 
second potential cause denial service 
eros possible create buffer trusted server paid client 
refer object trusted buffer object tbo 
ideally trusted buffer object proceed follows 
eros idl compiler asked generate invocation stub non operation reply string modifies invocation signature trusted intermediary trusted buffer object 
client invokes tbo invokes server behalf client 

receipt server verifies means described trusted buffer object authentic 
verification succeeds server knows object really executes trusted buffer object program 
consequence knows tbo counted defect 
knows buffer storage space tbo ultimately paid client program 

server transmits response string tbo extended mutual exclusion provided eros ipc primitives 
outcomes tbo accepts entire string tbo runs space reports 

completion tbo returns client passing string supplied server 
note client reuse tbo object repeatedly 
created invocation overhead tbo minimal 
protocol optimization possible avoid string tbo client 
accepting string tbo attempts return client client may elect accept zero bytes worth data 
completion tbo reply client directly map tbo address space client memory 
desired tbo space permanently mapped client memory tbo creation time eliminating overhead call time mapping manipulations 
early review design mark miller observed memory mapping optimization feasible server side transaction yielding zero copy implementation long string transfers 
problem lies fact server prepared recover unsatisfied page faults mapping region client space exhausted 
asking tbo space available help client authority revoke space mid transfer 
sense point efficiency normal tbo invocation high recovering faults complex approach usually prove worthwhile 
introducing trusted buffer object protocol entire burden resource allocation placed client way server safe denial resource denial service 
particular tbo transmitted capability arguments ipc primitive guaranteed transmitted promptly 
overhead tbo largely lost noise large strings transferred 
trusting tbo server general trust clients need account injecting tbo intermediary helpful constraints satisfied tbo safely trusted 
constraints straightforward returning server able determine returning tbo process executing code trusted respond promptly 
server position know tbo execute code client disable scheduling authority tbo executing 
prior described eros provided means client authentication recovery destruction provide adequate control scheduling authority support tbo 
tbo authentication identification calling application distinct calling principal directly supported eros constructor mechanism 
tbo objects created tbo constructor 
eros constructor brands process creates inserting unique capability reserved capability field created process brand slot 
brand capability convenient capability type 
ensure brand universally unique private constructor uses distinguished start capability brand products 
distinguished start capability guaranteed accessible constructor 
support application authentication eros kernel implements operation known identify operation 
process resume start capability process alleged brand capability identify compares alleged brand capability actual brand previously recorded process operation returns true false brand capabilities equal 
kernel primitive constructor able identify products 
access tbo constructor service identify returning tbo 
assurance execution ways client prevent tbo executing 
client reclaim storage destroying space bank source storage created 
event capability tbo invalid server able detect defection 

client reclaim tbo storage server waiting tbo 
eros kernel provision defense destruction process causes outstanding resume capabilities invoked waking server 

client starve tbo storage providing inadequately populated space bank 
tbo code guards returns appropriate error occurs allowing server detect defection 

client disable tbo schedule execution 
address problem adding new feature generation eros ipc mechanism schedule donation 
invoker agree invoker schedule capability copied side effect invocation 
agreement required service decline execute caller control 
similarly possible arbitrary program acquire thread control caller 
ipc design provides similar mechanism 
specification schedule donation recipient continues execute donated schedule time explicitly alters scheduling authority explicitly accepting donation 
implies donating process trusts recipient give donated schedule appropriate 
tbo trusted schedule donation appropriate 
having established identity safe scheduling control tbo server returns extended string tbo non prompt return operation permits page fault servicing 
string loaded tbo server process operations client fetch string 
doing forces client donate scheduling authority tbo object relieving server remaining scheduling exposure arise error tbo implementation 
ignore tbo 
case tbo retain server schedule destroyed initiate instructions invocation client invocation force schedule donation really care schedule tbo acts 
note actions imposes additional client controlled costs server supplied tbo scheduling authority 
scheduling isolation preserved 
related pieces described rely generations improvement eros system eros owes tremendous debt predecessor keykos 
great deal thread migrating ipc done decade notably liedtke ford shapiro :10.1.1.158.4191
keykos capability invocation mechanism predates current thread migrating ipc derives measure lightweight remote procedure call bershad 
packet filtering similar flavor restricted filtering performed filtering 
aware filters defer packet processing appear filter dynamically tagged messages 
registers speed interprocess communication heavily distributed system appears independently proposed karger connection system 
design gains particular advantage trust relationship caller callee known parties 
liedtke considered selected denial service attacks microkernel servers including problems identified 
examine application level vulnerabilities depth propose design refinements ipc architecture mitigate vulnerabilities 
dynamic return payload problem addressed section identical way network transfer problem multilevel secure systems noted karger independently rushby 
way network transfer recipient incapable signaling error sender provide sufficient storage accept message unknown length 
impetus described implementation capability idl system derived closely earlier idl corba 
jointly designed mark miller author 
discussion dave presotto helped spark connections led invention trusted buffer object 
eros builds heavily keykos system designed norm hardy charles landau alan bill people helpful patient describing workings keykos encouraging development evolution eros system 
bryan ford kind various points explain number details fluke implementation mach version ipc implementation 
jochen liedtke took time years ago ibm discuss merits timeouts problem hostile pagers 
jochen continuous advances performance design microkernel operating systems led improvements eros implementation drove deeper careful understanding operating system design 
yoon ho park similarly took time discuss experiences team building system 
originated discussion jay lepreau symposium operating system design implementation prompted recognize vulnerabilities synchronous ipc systems arise complex subtle interaction factors designs interactions adequately explored archival literature 
addition fast performance effective interprocess communication system provide reproducible behavior deal trust communicating processes enable support messages contain dynamically sized payloads 
describes simultaneous satisfaction requirements challenging identifies set enhancements current eros system meet design objectives 
key enablers solution proposed ability eros authenticate code executed application independent user ability confinement protect trusted program tampering user 
generally satisfactory means satisfy requirements simultaneously previously proposed 
knowledge previous papers published expose depth adequately address interprocess denial service vulnerabilities implicit synchronous ipc designs 
analysis illustrates detail unusual case authority factoring provider trusted buffer storage authority provider execution authority need distinct order prevent certain classes denial service attacks 
ongoing design activities eros community appears example general pattern emerges places multiplexing crosses trust boundary 
solution proposed leverages authentication heavily 
rely ability identify safely execute components instantiated untrusted providers storage originates untrusted source client 
difficult see particular way trust boundary achieved form protected naming primitive 
tbo approach server relies receiving name resume capability basis authenticating tbo 
care cryptographic hash invoker executable image injected kernel invocation serve substitute capabilities 
note hash cached kernel process data structure need expensive 
number ipc systems broadly operating systems adequately support communication trust relationships appears issues involved widely understood 
goal ensure problem asymmetric trust neglected ipc designs describe strategy support 
baron bolosky golub rashid tevanian jr young 
mach new kernel foundation unix development 
proc 
usenix summer technical conference pages june 
bershad anderson lazowska levy 
lightweight remote procedure call 
proc 
th symposium operating systems principles pages dec 
chen bershad 
impact operating system structure memory system performance 
proc 
th symposium operating systems principles dec 
cheriton 
distributed system 
mar 
department defense trusted computer system evaluation criteria 
engler kaashoek 
dpf fast flexible message demultiplexing dynamic code generation 
proc 
sigcomm conference pages stanford ca usa aug 
ford hibler lepreau mcgrath 
interface execution models fluke kernel 
proc 
rd symposium operating system design implementation pages feb 
ford lepreau 
evolving mach migrating threads model 
proc 
winter usenix conference pages jan 
gabber small bruno silberschatz 
pebble component operating system 
proc 
usenix annual technical conference pages monterey ca usa june 
jaeger park liedtke uhlig 
approach 
proc 
acm sigops european workshop sept 
hardy 
keykos architecture 
operating systems review oct 
jaeger liedtke park 
flexible access control ipc redirection 
proc 
th workshop hot topics operating systems pages 
ieee mar 
jaeger park liedtke 
synchronous ipc transparent monitors 
proc 
ninth acm sigops european workshop pc new challenges operating system sept 
karger 
non discretionary access control decentralized computing systems 
phd thesis massachusetts institute technology cambridge massachusetts may 
mit lcs tr 
karger 
improving security performance capability systems 
phd thesis university cambridge oct 
technical report 
karger 
registers optimize cross domain call performance 
acm sigarch computer architecture news apr 
karger herbert 
augmented capability architecture support lattice security traceability access 
proc 
ieee symposium security privacy pages oakland ca apr 
ieee 
karger mason kahn 
retrospective vax vmm security kernel 
ieee transactions software engineering nov 
lampson sturgis 
reflections operating system design 
communications acm may 
liedtke 
improving ipc kernel design 
proc 
th acm symposium operating system principles pages 
acm 
liedtke 
improved address space switching pentium processors transparently multiplexing user address spaces 
technical report gmd tr gmd nov 
liedtke islam jaeger 
preventing denial ofservice attacks kernel 
proc 
may 
loser 
omega portable interface interrupt hardware systems 
proc 
workshop common microkernel system platforms dec 
revised jewel edition january 
mccanne jacobson 
bsd packet filter new architecture user level packet capture 
proc 
usenix technical conference pages jan 
miller 
financial instruments 
proc 
financial cryptography bwi 
springer verlag 
mogul rashid accetta 
packet filter efficient mechanism user level network code 
proc 
eleventh acm symposium operating systems principles pages austin tx usa nov 
rozier armand hermann kaiser leonard 
overview chorus distributed system 
technical report cs tr chorus systemes st en cedex france 
rushby randell 
distributed secure system 
ieee computer 
schroeder clark saltzer 
multics kernel design project 
proc 
th acm symposium operating systems principles pages 
acm nov 
shapiro farber smith 
measured performance fast local ipc 
proc 
th international workshop object orientation operating systems pages seattle wa usa nov 
ieee 
shapiro smith farber 
eros fast capability system 
proc 
th acm symposium operating systems principles pages kiawah island resort near charleston sc usa dec 
acm 
shapiro weber 
verifying eros confinement mechanism 
proc 
ieee symposium security privacy pages oakland ca usa 
wulf levin harbison 
hydra mmp experimental computer system 
mcgraw hill 

