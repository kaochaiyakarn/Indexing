unu iist international institute software technology unu iist report linking uml models design requirement jing liu zhiming liu jifeng li february unu iist unu iist reports unu iist united nations university international institute software technology research training centre united nations university unu 
macau founded 
started operations july 
unu iist jointly funded governor macau governments people republic china portugal contribution unu fund 
providing thirds fund macau authorities supply unu iist office premises furniture fellow accommodation 
mission unu iist assist developing countries application development software technology 
unu iist contributes programmatic activities 
advanced development projects software techniques supported tools applied 
research projects new techniques software development investigated 
curriculum development projects courses software technology universities developing countries developed 
university development projects complement curriculum development projects aiming strengthen aspects computer science teaching universities developing countries 
schools courses typically teach advanced software development techniques 
events conferences workshops organised supported unu iist 
dissemination unu iist regularly distributes developing countries information international progress software technology 
fellows young scientists engineers developing countries invited actively participate projects 
doing projects trained 
technical focus unu iist formal methods software development 
unu iist internationally recognised center area formal methods 
software technique universally applicable 
prepared choose complementary techniques projects necessary 
unu iist produces report series 
reports research technical administrative records unu iist activities research development achievements 
reports published conference proceedings journals 
please write unu iist box macau visit unu iist home page www iist unu edu know unu iist report series 
chris george acting director unu iist international institute software technology box macau linking uml models design requirement jing liu zhiming liu jifeng li uml model requirement uml model design defined pair class diagram family sequence diagrams 
give unified semantics models requirements designs 
define consistency design class diagram interaction diagrams show removal inconsistency treated model refinement 
formally define correctness uml model design respect model requirement 
occur proceedings april melbourne australia 
jing liu fellow unu iist shanghai university china associate professor 
research areas include software architecture development processes application formal methods system development 
mail lj iist unu edu 
zhiming liu research fellow unu iist leave department computer science university leicester leicester england lecturer computer science 
research interests include theory computing systems emphasizing sound methods specification verification refinement fault tolerant real time concurrent systems formal techniques oo development 
teaching interests communication concurrency concurrent distributed programming internet security software engineering formal specification design computer systems 
mail liu iist unu edu 
jifeng senior research fellow unu iist 
professor computer science east china normal university shanghai tong university 
research interests include mathematical theory programming refined methods design techniques mixed software hardware systems 
mail iist unu edu 
li associate professor university macau 
research areas interval temporal logic formal specification simulation computer systems formal methods system design implementation 
mail xsl mo copyright unu iist jing liu zhiming liu jifeng li contents contents formal language syntax 
semantics 
class declarations 
method call 
definedness declaration section semantics program 
class model sequence diagrams models requirement models design case study university course management system related 

report february unu iist box macau modern software systems need reliable efficient 
process software development process modelling real world problem transforming number refined models executable code 
great challenge continues confront software engineering proceed systematic way set functional requirements design satisfy requirements 
practice task complicated defects original requirements subsequent changes requirements 
step challenge ask requirement 
precisely express 
construct design requirement 
usually constructing programs hard may refer models scattered phases analysis design implementation 
tracing ripple effects models changes program modifications complicated task needs ensure consistency models different phases software life cycle 
appropriate approach maintaining accuracy consistency various models different phases software life cycle difficult costly error prone 
increase reliability facilitate software analysis design evolution designers rely variety widely recognized tools methods 
example unified modeling language uml obj reduces efforts constructing models software development increases maintainability reusability life cycle 
accepted method provided design patterns 
likewise frameworks provide users efficient means combine component reuse design reuse 
component software engineering cbse offers convenience fast design implementation 
unfortunately informal semiformal approaches methods lack support formal semantics 
founded formal method 
precisely describe requirements link requirement models design models verification 
directly obtain design requirements 
uml de facto standard modeling language provides different kinds modeling diagrams represent system various views different levels abstraction 
gives rise consistency problems 
problems concerning consistency models different views classified horizontal consistency models different levels abstraction vertical consistency 
furthermore kind consistency divided syntactical consistency semantic consistency 
obviously semantic consistency requires syntactical consistency 
conditions syntactical consistency expressed uml terms formedness rules object constraint language ocl 
article studies particular kind behavioral consistency different state charts system translating hoare csp 
article egy studies automated checking horizontal syntactical consistency design class diagram sequence diagram system 
uml formal specification notation hll propose method specifying uml class model interaction diagram 
provide formal characterization uml models requirement design 
formal link model design model requirements defined terms refinement 
relation reasoned refinement calculus hll developed specification notation 
combined model syntactic semantic consistency requirements requirement model design model taken account 
report february unu iist box macau formal language formal language section introduce oo specification language ool defined hll captures oo features classes visibility dynamic binding mutual recursive method calls 
syntax program form declaration section command understood main method java program 
understood application program services provided class method declarations 
class declaration section sequence class declarations cdecl cdecl cdecl class declaration form class extends private um um am protected public method val res rv val res rv names classes called direct superclass section private declares private attributes class types default initial values 
similarly sections protected public protected public attributes 
method section declares methods value parameters val result parameters res command bodies 
body method command defined 
java convention write class specification assume attribute protected tagged private protected public 
report february unu iist box macau formal language commands language supports typical object oriented programming constructs design form skip termination chaos abort var declaration sequence conditional iteration non determinism read read value le assignment predicate variables predicate state variables primed versions design hh defined ok ok meaning command start execute state holds terminate state holds expression boolean expression le simple variable self attribute object le le le self define functions find add delete find add delete related values sets multi objects 
general expression forms null new self type null null class 
add expression type casting type checking family designs 
define alternation fi selects execute guard true behaves chaos guards false 
semantics semantics fairly intuitive 
informally understand meaning program execution java counterpart compiled correctly 
important note validity expression defined checked evaluated 
expression valid types variables declared 
dynamic type expression recorded evaluation 
semantics command design form wf report february unu iist box macau formal language wf defines formedness command design form 
semantics ensures formed behave chaos 
example method call formed method class type type function gives dynamic type object 
class declarations class declaration cdecl section defined conditions hold 
declared distinct attribute names distinct 
initial values attributes match corresponding types 
method names distinct 
parameters method distinct 
cdecl denote conjunction conditions 
class declaration cdecl adds structural information class state main program follows role characterized design 
cdecl def cn super pri pub cdecl cn cn super super pri pri pro pro pub pub op op paras 
paras cn denotes name class 
variable underline denotes set variables means set attributes types belonging set initial values attributes set dynamic behavior methods defined dependency relation classes specified 
moment logical variable op binds methods code definition calculated declaration section 
method call vr lists expressions 
command le vr assigns values actual parameters vr formal value value result parameters method object le refers executes body terminates value result value result parameters report february unu iist box macau formal language passed back actual parameters vr 
le vr def le type le cn op type le 
type le var self le vr vr self value result value result parameters method class type le stands design associated method class programming constructs defined exactly ways counterparts procedural language 
example sequential composition corresponds relational composition def details please see hll 
definedness declaration section semantics program class declaration section comprises sequence class declarations 
semantics defined semantics single class declaration previous subsection semantics sequential composition 
definedness conditions need enforced class names declarations variable attribute parameter defined section 
function super induce circularity 
attributes class redefined subclasses 
method class allowed redefine signature subclass 
class declaration section command meaning program defined composition meaning class declarations defined section design init meaning command def init design init performs tasks check definedness declaration section 
report february unu iist box macau formal language decide values attr pri pro pub 
define meaning method body design init formalized init def attr op cn pub cn attr pri pro pub op paras op family designs defined set recursive equations 
class cn method op equation fn super constructed rules case defined superclass op op 
defining equation case fn def case method defined class case behavior method captured body environment executed fn def set body reset design set finds attributes visible class reset main program set def true pri pro cn pub reset def true cn pub report february unu iist box macau class model function renames attributes methods class code body assuming object self class model general class model consists class diagram set state assertion 
class diagram shows number classes attributes methods associations 
association undirected requirement model directed design model 
graphic definition class diagram 
definition class diagram tuple meth cn set class names att assigns class cn set attributes ass subset cn cn triple represents association name class class meth mapping set methods form paras paras list typed parameters cn cn direct generalization relation classes 
leave specification multiplicities associations state assertion class model syntax see 
class diagram easily formalized class declaration section ool class cn direct generalization class extends attribute att method paras meth paras undirected association declare class class role role class represented product directed association declare attribute addition primitive attributes type powerset multiplicity report february unu iist box macau class model type class extends direct super class att pd depending multiplicity object diagram class diagram state variables oc oa class association names oc records set objects class current state oa records set links association state typed mapping set object object object class objects super class classes 
association oc oc object class set objects class associated oc formally def oc oc def oc 
multiplicities roles association defined state property 
subsets int 
assign multiplicities oc oc resp 
link object oc oc bounded range 
multiplicity def oc 
required association links objects currently exist state association oc oc def oc oc oc oc state class diagram valid consistent class diagram association class diagram satisfies condition multiplicity condition 
subsequent discussion term state refer valid state confusion 
conditions multiplicity define precise meaning association multiplicities roles depicted uml class diagram 
classes associations multiplicities express constraints required application 
particular multiplicity report february unu iist box macau sequence diagrams restrictions allow relationships associations expressed 
ocl expressive specify semantics cases relational logic specify state assertions 
general class model pair cm class diagram state constraint classes associations 
state property class model reasoned showing meaning proven relational calculus property 
denote cm cm satisfies allows define transformations conceptual diagrams state constraint 
sequence diagrams design model static structural view software system described class diagram dynamic feature described family sequence diagrams 
sequence diagram consists objects messages describe objects communicate 
interaction occurs object invokes method 
definition assume set partial order message tuple msg object class called source message denoted source msg 
represents target object message type denoted target msg 
action denoted action msg guarded method call form act boolean expression attributes source msg possibly public variables act command method calls internal action method call target msg paras 
elements denoted msg msg respectively representing orders message invocations returns sequence diagram 
require 
guarded command act equal false magic guard false 
require action msg guarded command method call source msg target msg interactions objects carried method invocation 
definition sequence diagram tuple sd start msg report february unu iist box macau sequence diagrams initiating object actor calls message start start starting message target start say message msg directly follows message msg source object msg msg message msg diagram msg msg msg 
say msg directly invokes msg target msg source msg msg msg msg msg message msg diagram msg msg msg msg set messages contains start start msg message msg message msg start message msg msg directly invokes msg 
target object starting message case handler operation method system operation handler 
notice definition sequence diagram bit general uml allow internal actions objects 
necessary want relate model design required cases 
simplicity deal loops sequence diagram introduced defining recursive sequence diagrams uml obj 
formalize sequence diagram ool follows 
object message msg target msg action msg guarded method paras ms msg set sequences messages sm msg msg msg directly invoked msg msg directly follows msg message sequence diagram directly follows msg notice may sequence messages starting message 
act sm action msg action msg define method paras class class paras sm ms msg act sm semantics sequence diagram sd defined definitions methods signatures appear sd 
report february unu iist box macau models requirement loops definition sequence diagrams covers complicated graphic representations describe nested conditional choices sequential composition 
practice possible draw complicated diagrams 
indicates limitation graphic notation 
number ways simple diagrams represent non trivial designs 
family sequence diagrams representing sequence messages complicated sequence diagram combine semantics non deterministic choice operator 

draw diagram represents starting message paras messages directly invokes messages target define method class target object 

combine simplify construction sequence diagrams method effective 
lead methods integration designs 
models requirement uml requirements captured described class model cases 
requirement analysis usually concerned object behaves 
class models domain concept methods associations conceptual classes undirected 
class model cm called conceptual class model classes method associations undirected 
functional requirements described cases case represented sequence diagram sd called system sequence diagram satisfies conditions exists object uh called case handler message msg source msg uh target msg uh action msg method call object differs uh exist msg sd msg condition means methods case handler realize system operations case called actors 
fact highest level specification requirements need specify guarded commands terms framed designs pre post conditions 
second condition indicates interested effect system operations system state changes effect environment 
model requirements rm cm ssd cm conceptual class model ssd family system sequence diagrams case 
formalization conceptual class model cm simple section 
obtain full specification model requirements need report february unu iist box macau models design class declaration section cm includes case case handler class declaration class uh method op paras op paras op paras 
methods messages actors uh command directly invoked message op denote class declaration spec uh case 
assume uh access classes conceptual class diagram 
model requirements rm cm ssd consistent class model case model consistent class declaration section defined ool cm spec uh 
spec uh spec uh case handler classes sequence diagrams ssd method body defined types variables command declared cm expressions commands built syntax rules generally framed design equal chaos 
notice fix inconsistency refine declaration section hll 
checking inconsistency carried provide information cause inconsistency deciding command chaos 
fact static consistency conceptual model family system sequence diagrams checked just compile class declaration section formalizes 
models design uml model design dm dc sd consists design class model dc family sequence diagrams sd 
classes class model methods method class may call methods classes 
specification methods agree object interactions sequence diagrams 
captured definition 
semantics dc sd defined declaration section obtained formalization dc defining methods class dc method definitions formalization sd def paras class paras defined sd report february unu iist box macau case study university course management system dc sd consistent formalization defined class declaration section methods class violate state constraint cm commands expressions formed 
treatment static consistency done similar way compiler compiles class declaration section 
particular cd sd consistent action message msg action sd declared attribute class source object action msg method name defined method class target msg body method class model agrees definition formalization msg section refines 
corresponding class declaration section obtained cd defined 
methods class model violates state constraint model 
consistency covers static semantic consistency static consistency checked way compiling formalization model design 
useful give practical classifications inconsistencies develop tools checking inconsistencies 
correctness design model dc sd model cm ssd requirements defined refinement relation hll cm ssd dc sd refinement designs defined reasoned way 
refinement calculus hll supports class declaration refinement structural refinement refactoring fow 
refinement calculus transformations declaration section refinement adding class promoting attribute subclass superclass promoting private attribute protected attribute protected public attribute adding attribute class adding method class refining method removing attribute method case study university course management system consider simple university course management system 
departments university department provides courses 
members registered university allowed take course department 
students choice course provided different departments 
report february unu iist box macau case study university course management system dept course univ 
provides secretary case model conceptual model requirement model system conceptual model conceptual model concerned case records course departments system shown 
specify class declaration section denote declaration section cm class univ string name string address class dept string id string name class course string id association classes class univ univ dept class dept course assume system initial state university univ department recorded system 
described uni univ dep cou ha pp course denotes number courses provided department 
relationship university department 
relationship department courses 
case model identification cases important creation conceptual model 
consider case adds new course department university 
formalization conceptual model system sequence diagram case obtained cm import conceptual model class cou method val string cid string var course dep dep id new course cid dep find cou cou declaration section write application program service method report february unu iist box macau case study university course management system provided case handler 
example denote rc command read cid cid main method specified main var string cid string bool services new false read fi read type services denotes services course management system provide 
sample system service 
denotes identification department provide course cid course identification 
note uml conceptual model determines state invariants univ instance 
cases need checked preserve invariants 
design model assume type pc methods add delete find declared adding deleting finding object set 
object sequence diagram corresponding design class diagram specified program 
assume classes dep cou declared methods 
design model dm constructed class univ string name string address dep newly added method add val string cid string var department dep find cid class dept string id string name cou method val string id var course new course id cou add class course string id class dep cou pp method val string cid string univ add cid report february unu iist box macau case study university course management system address string name string univ add cid dept id id string name string name string time string id string course sequence diagram sd design model controls design class diagram dc provides add creat add univ dep dept set find dept course cou course set cid design model system type list strings attributes univ design phase main program conceptual model 
string name string main false services univ univ new univ univ new read fi read rch correctness design captured refinement relation defined hll 
report february unu iist box macau shown formal oo modelling notation defined hll provide unified semantic definition uml models requirement design semantics covers uml models model class model object diagrams interaction diagrams useful developing object systems concurrency 
unification important useful dealing consistency different models 
fact deals informal aspects uml including description cases links different uml models system development 
hand formalism keeps roles views different models clearly separate class models correspond program declaration models structural static view program object diagrams correspond program states case model describes required services external behaviour sequence diagrams realize external behaviour internal object interactions 
refinement calculus developed oo notation hll transformation models preserves certain properties 
calculus deals refinement class diagrams increase capability supporting cases 
implies support iterative incremental system development rational unified process rup 
refinement calculus deal refinement command method programs 
formalization uml notation allows transform uml diagrams consistently formal define reason transformations uml diagrams decomposing class number classes adding classes associations changing multiplicities associations formal specification notation style java 
allows write specification statements terms pre postcondition 
refinement calculus enables write specifications different levels abstraction 
oo aspect specification language subset executable supports model driven development mv system developed sequence model transformations ends executable code 
therefor formalization step uml programming language fow semantics base compiling interpreting uml diagrams programs 
supports re engineering uml models constructed specification written notation similar java 
related large number research formalization uml egy precise uml consortium see www org transformational approach transform certain uml models existing formalisms vdm csp advantage approach tools existing formalisms available manipulation models 
aims tightly combine different views unified formal language 
formal language provides built facilities naturally capture object oriented features uml existing formalism designed object oriented systems derive definitions classes objects inheritance hr treats class set objects association relation objects consider cases :10.1.1.10.1512
model associations specification connectors martin fowler believe uml successful programming langauge may people 
report february unu iist box macau architecture models fm am 
shares common ideas bpp treatment cases 
treatment cases system interface level referring design details internal objects system behave methods class provides 
believe model simpler closer essence concept cases 
bpp deal interaction diagrams general 
volume 
main difference focus link design requirement 
proof oriented model supports model driven development model transformations refinement 
consistency behavioural analysis finite state machines 
concurrency addressed 
extend model notation specification software components deal concurrency level components interactions object interactions 
includes design algorithms semantics identifying inconsistencies models uml software development 
longer terms goal development case tool uml software development 
am maibaum 
temporal logic approach component system specification verification 
proc 
icse 

uml unified process 
addison wesley 
bpp back petre 
formalizing uml cases refinement calculus 
proc 
uml 
springer verlag 
egy 
scalable consistency checking diagrams approach 
proc 
th ieee ase san diego usa 
engels heckel 
methodology specifying analyzing consistency object oriented behavioral models 
proc 
fse austria 
fm fiadeiro maibaum 
design structures object systems 
kent editors methods object technology 
springer verlag 
fow fowler 
refactoring improving design existing code 
addison wesley 
fow fowler 
invited talk point uml 
stevens whittle booch editors proc 
uml lecture notes computer science 
springer 
hh hoare 
unifying theories programming 
prentice hall international 
hll liu li 
refinement calculus object oriented systems 
proc 
alberta canada 
ieee computer society 
hll liu li 
component calculus 
dang liu editors proc 
fme workshop formal aspects component software facs 
unu iist report unu iist box 
report february unu iist box macau hr harel rumpe :10.1.1.10.1512
modeling languages syntax semantics stuff part basic stuff 
technical report mcs weizmann institute science israel september 
liu li chen 
relational model formal object oriented requirement analysis uml 
dong woodcock editors proc 
lecture notes computer science 
springer 
liu li liu 
unifying views uml 
uml workshop compositional verification uml 
li liu 
formal semantics uml sequence diagrams 
pro 
australian software engineering conference melbourne australia 
ieee computer 
mv mellor 
executable uml foundation model driven architecture 
addison wesley 
obj object management group 
unified modeling language specification ver 
object management group needham ma www omg technology documents 
report february unu iist box macau 
