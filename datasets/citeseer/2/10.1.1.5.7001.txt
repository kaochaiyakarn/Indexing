taxonomy security faults unix operating system thesis submitted faculty purdue university aslam partial ful llment requirements degree master science august thesis dedicated parents ii acknowledgments thesis advisor dr eugene spa ord guiding 
dr spa ord provided insight tackle di erent problems read drafts thesis invaluable comments 
patient willing odd schedule 
committee members dr aditya mathur dr samuel dr michal young 
dr william gorman provided invaluable feedback improve format thesis 
am greatly indebted parents support encouragement years 
able far support 
am grateful sister support di erent endeavors great friend 
dan mark steve manuscripts thesis invaluable comments 
friends everybody coast lab provided needed support sure maintained sanity 
frank wang implementing front database prototype 
complete mentioning special people inspiration supported part gifts sun microsystems bell northern research hughes research laboratories equipment coast group air force contract trident data systems 
support gratefully acknowledged 
iii page intentionally left blank table contents iv page list tables vii list figures viii ix overview software testing methods provable security formal methods security testing applications fault categories organization thesis 
related protection analysis project risos project flaw hypothesis methodology case study penetration analysis michigan terminal system software fault studies fault categories errors tex taxonomy computer program security flaws comparison security fault classi cation schemes 
taxonomy security faults unix operating system taxonomy security faults con guration errors examples synchronization errors example condition validation errors page examples environment faults example selection criteria 
design vulnerability database motivation entity relation model entity attributes entity relation diagram entity integrity constraints referential integrity constraints operation relations requirements analysis design issues database kernel representation relations vulnerability database interface user interface integrity constraints entity integrity constraints referential integrity constraints template representation data sources requirements analysis design issues database kernel representation relations vulnerability database interface user interface integrity constraints entity integrity constraints referential integrity constraints template representation data sources 
security fault detection techniques static analysis symbolic testing path analysis testing vi page functional testing syntax testing mutation testing condition validation errors boundary condition errors input validation errors access right validation errors origin validation errors failure handle exceptional conditions environment errors synchronization faults con guration errors summary 
bibliography appendices appendix description software fault studies appendix taxonomy unix vulnerabilities list tables table page percentage errors detected fault categories fault categories weiss comparative results bug statistics beizer vulnerability entity attributes operating system entity attributes patch info attributes vulnerability database interface functions operations relations vulnerability database interface functions comparison di erent software testing methods appendix table vii list figures page conventional taxonomy software modeling analysis techniques ort vs testing methods relationship testing methods design process taxonomy faults selection criteria fault classi cation entity relation diagram referential integrity constraints vulnerability database vulnerability database commands screen function interface help window vulnerability database vulnerability database commands screen function interface help window appendix viii aslam purdue university august 
taxonomy security faults unix operating system 
major professor eugene spa ord 
security computer systems important ensure reliable operation protect integrity stored information 
faults implementation exploited breach security penetrate operating system 
faults identi ed detected corrected ensure reliability safe guard denial service unauthorized modi cation data disclosure information 
de ne classi cation security faults unix operating system 
state criteria categorize faults examples di erent fault types 
design implementation details database store vulner ability information collected di erent sources 
data organized fault categories 
information database applied static audit analysis systems intrusion detection fault detection 
identify describe software testing methods ective detecting di erent faults classi cation scheme 
ix security de ned relative policy involves protection resources accidental malicious disclosure modi cation destruction web 
computer security broadly categorized physical security physical security protection computer facilities physical threats environmental hazards 
involves locks identi cation badges guards personnel administrative measures control ability approach communicate material component data processing system 
information security information security protection data dental unauthorized destruction modi cation disclosure 
involves physical security measures controlled access techniques 
interest computer security stemmed protecting information related matters national security grew computers store medical nancial records individuals proprietary information business organizations 
security computer system de ned security requirements implemented security policy 
requirements vary level security desired 
computer systems operate implicit trust reliability computer system depends reliability components 
security computer system involves security hardware software components 
critical role played operating systems operation computer systems prime targets malicious attacks 
operating system penetrated unauthorized user gains access system authorized user causes security breach exploiting aw source code 
total system penetration occurs unprivileged user gains ability execute privileged commands 
penetration system lead conse quences den bs lin denial service users may denied access legitimate services 
degradation performance performance poor system usable 
disclosure information user gains unauthorized access protected infor mation 
modi cation data user modi es information unauthorized manner 
security breaches result operational faults coding faults environment faults 
operational faults consist con guration errors policy errors 
coding faults include programming logic errors faults faults 
environment faults occur programmers pay su cient attention execution environment 
faults include errors result limitations operational environment errors introduced functional modules operate unexpected manner 
ensure reliable operation computer system implementation conform security requirements contain vulnerabilities faults may exploited breach security 
faults introduced software de velopment exposed software testing techniques 
faults prevented software formal methods veri cation stage development 
aspects developing reliable software discussed sections 
overview software testing methods classic software engineering life cycle paradigm software engineering known waterfall model sequential approach software development process 
process begins system level progresses requirements analysis design coding testing maintenance phases pre 
steps may followed speci ed order may omitted 
phases development brie described 
systems engineering analysis software developed part larger system 
systems engineering establishes requirements di erent system components de nes software interface components 
requirements analysis phase requirements gathering focused software developed performance interfacing requirements soft ware de ned 
requirements analysis requirements speci cation document developed describes requirements phase 
requirements speci cations stated precise complete consistent understandable manner 
clarity ensures requirements speci cations document encompasses expectations users enables designers develop software meets requirements iee 
requirements analysis functional speci cations doc ument may produced describes system perform intended task iee 
design software design focuses attributes program data structures software architecture procedural detail interface characterization pre 
design phase results design speci cations document contains description system architecture description module system intended relationships modules 
phase design process documented translated representation assessed quality 
coding coding phase design translated appro priate programming languages 
testing fault induced error mistake human may lead failure iee 
testing phase focus nding faults software may introduced design coding phases 
maintenance software developed released may undergo changes adapt di erent environments errors may introduced process 
software maintenance re applies preceding life cycle steps existing program 
time spent testing phase dependent project 
pressman pre ghezzi report typical projects total development time spent testing debugging 
myers mye maintenance testing costs typical installations ibm os exceeded total cost 
objective testing phase discover faults may introduced coding design phase 
referred testing phase fault detection restricted conventional testing methods fault detection technique may employed 
fault detection techniques classi ed dynamic analysis static analy sis 
dynamic analysis techniques require execution program tested conventional testing methods belong category yt 
static anal ysis consists code walk throughs inspection requirements speci cation documents nd aws implementation 
illustrates dichotomy analysis techniques 
program speci cations undecidable determine con forms yt 
presence faults generally undecidable property 
theoretically possible devise fault detection technique applicable arbitrary programs yt 
practical technique incorporates compromise accuracy ort 
adapted yt shows relationship ort expended di erent types testing methods 
requirements design programs static informal checklists formal modeling static analysis design documents general information static error analysis symbolic execution dynamic functional testing testing classes input data testing classes output data design testing structural testing expression testing data flow testing conventional taxonomy software modeling analysis techniques time exhaustive testing path coverage mutation testing branch testing node testing infinite effort threshold tractability ort vs testing methods objective software testing show program free faults demonstrate presence mye 
exhaustive testing program require nite ort time nd faults program 
com promise time ort conventional testing methods rely adequacy criteria determine adequate testing done test data adequate 
test data set adequate program test runs successfully data set incorrect programs run incorrectly 
techniques measuring adequacy test data proposed 
path testing associates adequacy test data traversal subset paths program test 
mutation testing method determining adequacy test data inducing faults program test 
method classifying dynamic fault detection techniques functional testing functional black box testing internal structure havior program considered 
objective nd solely input output behavior program agree speci cations 
structural testing approach structure program examined test cases derived program logic 
structural testing known white box testing 
software testing re ned categories myers mye de scribed 
fig mye illustrates relationship di erent types testing methods relationship design process 
unit testing unit testing white box oriented approach focuses veri cation orts module basis 
uses detailed design description exercise important control paths module boundaries 
integration testing integration testing uncover interfacing errors unit tested modules 
external testing external testing veri cation external system functions stated system speci cations 
system testing system testing attempts fully verify complete functionality system 
system testing veri cation process done simulated environment validation process performed live environment 
acceptance testing acceptance testing validation system program user requirements 
installation testing installation testing validation particular tion system intent discovering errors installing system 
requirements objectives specifications system architecture program structure module specifications module logic module test integration test function test system test acceptance test installation test relationship testing methods design process provable security formal methods software testing techniques establish presence faults absence mye 
formal methods veri cation ensure faults introduced di erent stages development implementation formally proven conform requirements speci cations 
applicability formal methods restricted proving small sections programs process tractable 
hall formal methods hal states formal methods controversial 
advocates claim revolutionize software development 
think im possibly di cult 
people formal methods unfamiliar di cult judge competing claims security kernels designed provide provable security evolved idea monitor described anderson 
monitor abstraction access checking mechanisms den 
idea security kernels small nucleus software responsible administering security policy entire system 
implementation security kernel formally veri ed demonstrate conforms security requirements 
requirements security kernel stated precise mathematical terms known criteria system 
requirements followed stating speci cations precisely describe function software mathematical terms 
speci cations independent implementation details system coded high order language hol 
implementation formally demonstrated conform original requirements 
security kernels developed provide provable system security 
included kernelized secure operating system md mitre security kernel sch multics aim scs ucla data secure unix 
security kernels failed gain wide spread popularity high development costs mediocre performance di culties encountered main taining systems 
security testing software testing cost ective method detect faults software mye 
software testing techniques proposed studied widely bei mye mye 
techniques provide cost ective systematic meth ods detect faults software 
similarly security testing intended assess trustworthiness security mechanisms bei 
security testing regarded special case system testing bei 
emphasis security testing establish functional correctness software establish degree con dence security measures bei 
systematic approach security testing 
traditional meth ods detecting security faults include penetration analysis formal veri cation security kernels lin md 
penetration analysis conducted tiger team comprised personnel familiar implementation de tails operating systems lin 
penetration analysis proven successful method assessing security system lin wil amp 
success method depends competence tiger team members knowledge system 
importance security computer systems ignored 
needed reliable operation maintain integrity stored information 
exist systematic approach detect prevent security faults operating systems 
traditional security assessment methods penetrate patch paradigm faults xed discovered 
shortcoming approach succinctly summed schell sch penetrate patch losing approach assure secure systems hacker needs nd aw vendor nd aws section discuss motivation developing fault classi cation scheme applications making process fault prevention detection systematic 
applications fault categories thesis de ne classi cation security faults unix operating system applications classi cation scheme 
faults occur dif ferent sections source code result wide range consequences 
fault classi cation scheme categorize faults share common character istic 
categories collect statistics faults devise methods fault prevention detection 
beizer bei summarized importance fault classi cations important establish categories bugs take goal bug prevention seriously 
particular kind bug recurs dominate kinds bugs possible education training new controls revised controls documentation inspection variety methods reduce incidence kind bug 
statistics frequency bugs rational perspective allocate limited bug prevention resources objective fault classi cation scheme unambiguously classify security faults non overlapping categories 
applied fault categories data organization vulnerability database necessary derive non overlapping categories 
vulnerability database designed store vulnerability infor mation di erent sources maintain security patch information 
identi ed potential applications vulnerability information database 
information analyze commonly occurring faults trace ori gin design programming practice 
fault corrected defensive mechanisms may programmed system take preventive actions fault occurs 
vulnerability information con gure audit tools nd known vulnerabilities system fs ssh 
information database write signatures intrusion detection system detect intrusions real time ks 
furthermore database may devise thought experiments aw hypothesis stage penetration analysis system lin 
security testing special case software testing bei fault categories devise software testing techniques expose faults category 
instance demillo mathur dm fault categories detect errors re ported knuth development tex knu 
fault characteristics identify software testing techniques detect tics expose faults category 
testing techniques provide systematic approach fault detection compared penetrate patch paradigm 
testing performed part system acceptance testing software developed 
alternatively techniques part penetration analysis detect security faults guideline develop new attacks aw hypothesis stage 
organization thesis chapter summary related fault classi cation penetration analysis 
revised taxonomy security faults unix operating system chapter 
design implementation vulnerability database discussed chapter 
chapter discuss software testing methods applied detect security faults 
chapter outline 

related faults operating system software lead security breaches 
knowledge di erent types faults general characteristics time enter system important ensure reliable operation preserve integrity stored information 
topics focus fault classi cation studies conducted computer systems secure improve reliability software 
approach nd security faults assume role intruder assess security mechanisms trying break system 
approach flaw hypothesis methodology penetration analysis studies 
sections outline previous research conducted security fault analysis penetration analysis software fault classi cation schemes 
conclude discussion shortcomings previous fault classi cation schemes 
protection analysis project protection analysis pa project conducted research protection errors operating systems mid 
group published series papers described speci type protection error techniques nding errors 
proposed detection techniques pattern directed evaluation methods formalized patterns search corresponding errors cbp 
results study intended personnel ing evaluation enhancement security operating systems bpc 
objective study enable little knowledge computer security discover security errors system pattern directed approach 
errors systems classi ed representative categories follows domain errors including errors exposed representation incomplete tion data incomplete destruction content incomplete destruction context validation errors including boundary condition errors failure validate operands naming errors including aliasing incomplete revocation access deallocated object 
serialization errors including multiple errors interrupted atomic operations pa project achieve goal fully automating error detection process pattern directed approach 
proposed techniques automated easily vulnerability database published 
group research important step formalizing process error detection 
pertinent outlined 
inconsistency single datum time bpc described general class problems value inconsistent veri ed 
errors referred time check time tocttou errors 
type errors classi ed validation errors error classi cation scheme proposed nal report pa project bh 
value variable critical function inadvertently intentionally replaced di erent value veri ed operating system fooled new value 
lead security breach variable part critical check entire check invalidated 
bpc illustrated critical value change lead security breach user callable routine shown 
connect procedure directory password code call password check directory password code code ok user directory directory connect user callable supervisor procedure allows users change current directory di erent speci ed login 
procedure requires arguments name password new directory returns result request user variable code 
connect calls supervisor procedure password check verify correctness pair 
return code ok indicates directory changed error code returned 
connect procedure assumes value directory line checked password check 
assumes value code line returned passwd check 
entire password check invalidated values code passwd check changed checked 
value variables changed ways bpc 

parameter passed name value remains caller address space execution program 
chronous process write access caller address space change value 

parameter passed name calling procedure arrange input output variables occupy memory location 
called procedure stored output location overwrite value input parameter 
consistency data value successive operations may formulated policy operation occurring operation modify value value value value value informally process perform operation variable value performed equal value operation occurs error statement corresponding policy statement operation occurring operation modify value value value value value process performs operation variable value time operation performed equal value operation occurs error statement form search pattern detect error exists source code 
bpc reported multics routines searched error pattern contain errors classi ed tocttou errors 
allocation deallocation residuals section describes errors operating systems result exposed content incomplete revocation access storage elements 
errors type classi ed naming errors classi cation proposed nal report pa project bh 
common strategy penetration attacks scavenging searching residual information processes hb 
residuals classi ed hb content residual contents le space memory allocated new process data previous allocation having purged 
attribute residual information size position free pool re source available di erent process 
attribute content residuals preserved exploited commu processes get information activity process hb 
important attribute residuals disclose security related information cell size inter intra cell relationships 
example cell size information available user may guess maximum length password eld reduce number permutations required brute force attack 
similarly relative position di erent cells free pool deduce previous cell allocations part larger process de ned cell 
content residual information prevented disclosed formulating deallocation policy destroys contents storage cells cell added cell extracted free pool 
desirable functional error system may lead contents exposed cell free pool 
deallocation mechanism designed particular attribute information destroyed cell added free pool 
addition content residuals access residual information poses security problem prevented 
access residual occurs process access storage cell deallocated access path established side ect request 
unit storage hb propose formal search strategy detect alloca tion deallocation errors 
suggested allocation deallocation mecha nisms manually checked ensure content attribute access residuals preserved 
serialization serialization refers ordering operations relative 
alization errors result errors ordering speci cations policy mechanism level car 
serialization errors qualify protection errors exploited corrupt data objects consequently result invalid operations 
serialization errors underestimated security errors usu ally manifest directly rarely occur operation system car 
car provides depth explanation serialization errors including theoretical treatment subject 
risos project risos project study computer security privacy conducted mid 
project aimed understanding security problems existing operating systems suggest ways enhance security 
systems security features studied included ibm os series operating system bolt beranek newman system pdp 
nal report project discussed issues related data security general 
suggested administrative actions prevent unauthorized access system methods prevent disclosure information 
main contribution study classi cation integrity aws operating systems studied 
fault categories proposed researchers risos 
incomplete parameter validation processes operating system communicate procedure calls 
maintain reliable operation parameters validated data types number order value range access rights storage location consistency 
checks specially enforced procedure call process requests services process higher set privileges 
failure validate parameters completely thor may result ampli cation access rights subject may exploited cause security breach 
inconsistent parameter validation inconsistent parameter validation design error di erent parameter validation errors 
multiple sets validation criteria system consistent inconsistent parameter validation error occurs routine evaluates condition considers valid 
implicit sharing privileged con data information higher privileged process user available lesser privileged process user implicit disclosure information taken place 
preserve integrity stored information security system important errors prevented occurring operating system software 
asynchronous validation inadequate serialization category comprised errors occur serialization enforced time value stored time referenced time check time errors 
errors usually exploited penetrate system small timing window 
inadequate identi cation authentication authorization authorization refers controlled granting access rights authentication individuals resources 
operating system security may compromised require authorization individual process uniquely identify resources dealing prohibition limit operating system code contains xed sized data structures tables queues stacks 
data structures ow system may behave unexpected ways may lead security compromise 
exploitable logic errors errors operating system software may exist improbable tim ing conditions incorrect error handling instruction side ects 
exam ple handling error condition error signal raised half word arithmetic store return address routine regarded exploitable logic errors 
flaw hypothesis methodology system development sdc conducted penetration analyses government industrial installations assess secure sys tems 
led formulation flaw hypothesis methodology successfully penetration studies 
linde lin summarizes importance penetration analysis absence formal correctness proof techniques penetrations cost ective method assessing vulnerabilities 
tive testing operating system security controls di erent subjecting penetration attack 
system testing intended discover implementation errors penetration tests ex implementation analyses infer areas possible design weaknesses flaw hypothesis methodology strategy penetrating operating system isolating generic functional aws determining weaknesses functional areas operating system design lin 
stages methodology outlined 
knowledge system control structures successful penetration penetrator understanding users interact system services available constraints placed services 
addition penetrator implementation level knowledge levels inter module knowledge access control mechanism control object hierarchy intra module design implementation flaw hypothesis aw hypothesis stage penetration team hypothesis existence vulnerability system studying system source code related documentation 
flaw hypothesis con rmation stage methodology involves con rming aw hypothesis live attacks writing programs exploit potential vulnerability 
flaw generalization stage penetration team generalized hy existence aw knowledge errors similar systems analyzing aws discovered di erent functional modules system study 
successful penetrations linde lin observed modules vulnerable recommended inspected penetration analysis 
functional modules inspected security aws include input output control program data sharing access control installation management operation control main contribution study formulation flaw hypothesis methodology system penetration 
methodology successfully penetration analysis studies amp wil 
despite usefulness methodology drawbacks 
provide systematic approach testing security mechanisms 
success penetration analysis depends knowledge expertise tiger team conducting study 
testing techniques penetration testing show existence security aws absence 
case study penetration analysis michigan terminal system section case study penetration analysis conducted graduate level computer science class university michigan ann arbor 
goals study authorized knowledgeable un privileged user gain unauthorized access les data crash system 
mts general purpose operating system ibm computers sup ported batch interactive computation 
system study maintained user accounts support users concurrently 
members tiger team conducting penetration analysis students enrolled course years experience system 
team members access user level documentation manuals internal system documentation 
penetration team employed flaw hypothesis methodology nd aws operating system discovered number aws system subroutines 
parameter checking mechanisms weak allow user store arbitrary bit sequences system segment 
system segment mts contained system accounting protection informa tion 
storing arbitrary bit sequence user modify system accounting information change privilege level completely disable pro tection mechanisms 
consequence users execute privileged instructions disable hardware storage protection modify shared segments 
mts super code contained shared segment 
forcing appropriate bit pattern stored shared segment users switch system su mode gain complete control system 
known total system penetration ultimate goal penetration study 
aws system resulted non total system penetrations 
aw allowed users bypass normal accounting update get free computer time forcing job abnormal termination 
discovered shared memory segments contained sensitive information user passwords tape identi cation lead disclosure information 
denial service attacks system forced loop forever supervisor mode particular instruction sequence 
study concluded penetration analysis properly done provide actual estimate amount time ort needed penetrate system 
factor may subjective imprecise give valid assessment system security highlight areas strength weaknesses 
study highlighted interdependence di erent modules important area consideration system routines execute implicit trust 
security violation lowest security level lead cascading ect cause security entire system compromised 
software fault studies mar published survey software fault studies software engineering literature 
studies reported faults discovered production quality software 
outlined section summary results various software fault studies 
brevity citation index study 
brief description studies included appendix faults programming logic common 
programming logic errors refer errors introduced software misunderstanding problem area mar 
errors may introduced software incorrect design incorrect logic 
studies dgm lip mb programming logic faults largest type faults 
studies rub glass gla regarded programming logic faults serious 
faults omission important 
faults survey faults commission faults omis sion mar 
glass gla studied faults discovered delivery software 
observed faults omission faults survive 
basili rombach br interface faults omissions data handling computation faults faults commission 
data handling error prone computation 
data handling refers process initializing changing variables distinguish computation faults include evaluation arithmetic boolean expressions mar 
basili br glass gla reported data handling faults nu study 
studies rub basili bp lip mb ostrand weyuker ow reported faults average frequency 
static dynamic detection techniques approximately equally ective 
detection technique detect faults implementation 
static analysis techniques proven successful exposing logic design errors typical program 
dynamic techniques expose run time errors may detected static analysis 
ding studies reported mar convincing evidence technique outperforms 
percentage errors detected techniques shown table 
study static analysis dynamic analysis rub sb dgm weak complexity modules dgm greater complexity modules wb table percentage errors detected note study dgm weak complexity modules refer modules containing arithmetic boolean expressions 
greater complexity modules contain drivers real time management code 
evidence small large modules error prone medium sized modules 
studies basili bp shen observed smaller modules higher fault rates 
observation con rmed wit study ada programs 
development phases possible 
percentage faults introduced di erent phases software life cycle vary making di cult draw conclusive decisions time fault introduced 
fault categories rub fault categories percentage fault oc study small commercial real time control programs 
results shown table 
fault category percentage incomplete erroneous speci cations intentional deviation speci cation violation programming standards erroneous data access erroneous decision logic sequencing erroneous arithmetic computations invalid timing improper handling interrupts wrong constant data value inaccurate documentation table fault categories weiss wb reported faults project develop hardware architecture simulator coded lines fortran 
faults included study reported development delivery 
fault categories weiss wb shown table 
categories proposed weiss wb language refers misunderstanding fortran language construct clerical careless refers misunderstanding design concept 
fault category percentage requirements design interface coding speci cations language coding standards careless clerical table fault categories weiss table presents results comparative study published 
collected faults compiler tlr high level language 
faults detected testing 
compare ndings published lip mb 
category lip mb computational logic data handling interface data de nition data base table comparative results beizer bei collected sample program statements exe faults fault studies conducted dgm endres rdb sch 
statistics beizer proposed classi cation scheme categorized faults di erent categories 
categories fault statistics shown table 
category number percentage occurrence functional speci cation function test total system internal interface hardware devices operating system software architecture control sequence resources total process arithmetic initialization control sequence static logic total data type structure initial value total code documentation standards table bug statistics beizer errors tex tex typesetting software developed knuth 
knuth chronological record errors discovered development process pro posed classi cation scheme organize errors knu 
classi cation scheme essential functionality external form program knu 
error classi cation included study representative errors competent experienced programmers 
revised classi cation errors demillo mathur dm detect errors mutation testing 
fault categories proposed knuth follows 
algorithm gone blunder mental typo clean consistency clarity data structure ciency enhancement forgotten function generalization growth ability interactive improvement language liability mismatch modules promotion portability quest quality reinforcement robustness surprising scenario trivial typo knuth classi cation represent bugs xed correct functioning program knu 
categories represent enhancements introduced improve performance knu 
taxonomy computer program security flaws landwehr published collection security aws di erent op erating systems classi ed aw genesis time introduced system section code aw introduced 
study motivated observation history software failures undocumented study cataloged system failures help system designers building better secure systems 
authors knowing systems failed help build systems resist failure outline categories taxonomy 
genesis genesis aw categorized malicious non malicious 
ma aws intentionally introduced system cause security vio lation 
take form viruses worms trojan horse time bombs trap doors code 
non malicious aws introduced implementation error missing requirements misunderstanding design logic 
non malicious aws belong categories 
validation errors domain errors serialization aliasing errors errors result inadequate identi cation authentication boundary condition errors logic errors time flaws categorized time software life cycle introduced system 
time includes aws introduced development maintenance op eration 
location category aws classi ed location operating system routines support software user programs 
flaws operating system classi ed categories corresponding functional modules discovered 
comparison security fault classi cation schemes chapter taxonomy security faults unix 
objective fault classi cation scheme unambiguously classify faults non overlapping categories 
classi cation data organization design vulnerability database identify fault detection techniques 
section discuss shortcomings existing security fault classi cation schemes applying data organization 
research conducted protection analysis project aimed pattern matching techniques detect security faults system source code cbp 
search strategies formalized patterns syntactic structure program 
error detected sequence operations matched corresponding error pattern 
nal report project proposed representative categories faults bh 
fault categories designed group faults syntactic structure broad data organization 
category classi cation consisted types faults 
di cult unambiguously classify faults allowed speci queries performed database 
generic fault categories published nal report risos project 
fault categories developed goal better standing faults classify analyze new faults discovered 
fault categories proposed researchers risos general classify faults operating systems 
generality fault cat egories prevented ne grained queries performed database 
criteria classi cation clearly stated 
lead ambiguities classifying di erent faults fault classi ed category 
landwehr proposed taxonomy aws di erent operating systems 
objective taxonomy identify time software life cycle fault introduced system 
taxonomy categorized aws genesis location system software time 
fault categories divided sub categories 
fault classi ca tion data organization database faults categorized landwehr proposed categories description 
example classify aw malicious non malicious involves deci sion intentions programmer 
di cult judge access source code knowledge programming environment 
possible correctly predict time aw introduced system description mar 
decision knowledge detailed progress reports milestones met project 
similarly location aw discovered easily classi ed access source code 

taxonomy security faults unix operating system chapter taxonomy security faults unix operating systems 
motivation developing taxonomy followed discussion di erent fault categories classi cation 
security errors operating systems software faults intentionally inadvertently introduced system cause security breach action violates security policy 
operating system plays important role operation computer system presence security fault poses potential threat disrupt reliable operation system 
security fault may exploited cause denial service disclosure information degrade performance system 
prevent unauthorized authorized users disrupting reliable oper ation security mechanisms operating system able withstand malicious attacks implementation contain faults may exploited breach security 
security computer systems important maintain reliable operation protect integrity stored information 
wide spread comput ers increasing computer knowledge longer possible implement security obscurity gs 
ensure computer systems secure ma attacks need analyze understand characteristics faults subvert security mechanisms 
classi cation scheme help understand ing fault characteristics categorizing faults share common characteristics 
classi cation organize vulnerability data gather statistics frequency faults devise prevention detection techniques 
taxonomy security faults chapter taxonomy security faults unix operating system 
motivation study unambiguously classify security faults distinct categories 
classi cation basis data organization vulnerability database facilitated di erent queries performed stored data 
speci characteristics faults category identify software testing techniques detect faults 
testing methods provide systematic approach detect security faults compared traditional penetrate patch paradigm 
fault classi cation scheme unique 
security fault classi cation schemes proposed categorized faults di erent criteria 
include classi cations proposed nal report protection anal ysis project bh classi cation proposed researchers risos project taxonomy aws proposed landwehr 
classi cations suitable data organization categories generic clearly specify criteria classi cation 
leads ambiguities result fault classi ed category 
taxonomy addresses shortcomings 
fault categories speci distinct 
specify selection criteria fault category 
taxonomy derived security faults unix operating system led security compromise 
taxonomies discussed earlier bh faults collected di erent operating systems 
focused unix wide spread popularity academia industry 
large number users bene results study unix vulnerabilities 
security faults collected number di erent sources including computer emergency response team cert advisories vulnerabilities reported electronic security mailing list survey literature 
collecting security faults gathered information fault exploited functional area fault versions operating systems fault consequences occurred fault exploited 
information collected literature descriptions faults response team advisories discussions experienced personnel 
understanding details broadly classi ed faults coding faults operational faults environment faults 
personnel communication physical operations security play essential role reliable operation computer systems 
vulnerabilities classes may exploited cause security compromise 
focused faults embodied software 
included vulnerabilities involved personnel communication physical operations security 
examples ties security classes include personnel security employee reveal sensitive information 
communication security installed monitor information channel 
physical security intruder employee steals disk tape containing sen information 
operations security operator fails run software detect potential security weaknesses 
coding faults comprised faults introduced software devel opment 
faults introduced errors programming logic missing incorrect requirements design errors 
observations drawn di erent software fault studies list aforementioned errors po problem areas rub wb bei knu 
operational faults result improper installation software 
policy errors classi ed operational faults 
environment faults result programmer fails completely understand limitations run time environment interactions func correct modules 
faults dependent operational environment 
coding operational fault categories re ned distinct sub categories 
coding faults studied faults identify speci coding error led fault 
tried implementation error level maintain speci characteristics category hide imple mentation details 
approach bene cial classifying faults programming language 
fault categories group di erent faults shared similar characteristics 
operational faults identi ed speci operation led fault categorize faults 
sections taxonomy faults 
fault cat description fault criteria examples di erent fault types 
taxonomy faults comprised categories operational faults con guration errors include errors resulting programs utilities installed wrong place programs utilities installed incorrect setup parameters programs utilities secondary storage objects installed access missions violate security policy coding faults synchronization errors include race condition errors errors resulting improper inadequate serialization operations condition validation errors include errors resulting missing conditions incorrectly speci ed conditions missing predicates condition environment faults environment faults include errors resulting limitation operational environment errors introduced faulty compiler operating system interaction errors functionally correct modules errors introduced exception handling mechanisms di erent expected shows diagrammatic representation fault taxonomy 
object installed incorrect permissions operational fault configuration error utility installed wrong place utility installed incorrect setup parameters field value correlation error syntax error input security fault environment fault failure handle exceptions validation error type number input fields origin validation error condition validation error access rights validation error missing extraneous input input taxonomy faults coding fault boundary condition error synchronization error improper inadequate serialization error race condition error con guration errors con guration system broadly de ned consisting hard ware software resources web 
system utility programs various service routines computer system provides regarded part con guration 
taxonomy fault classi ed con guration program utility installed wrong place program utility installed incorrect setup parameters secondary storage object program utility installed incorrect mission violates security policy examples illustrate con guration errors exploited compromise security 
examples trivial le transfer protocol tftp network utility user datagram protocol udp commonly diskless workstations load kernel image les server com 
sites running di erent versions unix tftp daemon enabled way allowed user internet access le machine running tftp ca ca 
result disclosure information security compromise sensitive les read 
instance intruder obtained access password le crack passwords gain unauthorized access system 
problem occurred tftp properly installed 
tftp enabled installed restricted access le system command 
unix bsd sendmail installed wizard mode enabled ca 
wizard mode option left test sca olding 
included enable system programmers debug program having go lengthy authentication process 
sendmail installed wizard mode en user gain access system connecting mail port providing command 
wizard mode came default password 
default password intruder bypass system authentication procedure gain access system 
synchronization errors car studied serialization errors detail part protection analysis project 
ideas section borrowed results 
operations data related evaluation conditions ect changing relative ordering operations 
operations control related change relative order execution produce di erent results 
serialization concerned types relationships opera tions data ow control ow 
purpose serialization maintain appropriateness car 
taxonomy fault classi ed synchronization error fault exploited timing window operations fault results improper serialization operations synchronization errors taxonomy include race condition errors errors occur timing window serialization errors error result improper serialization operations 
example unix speci example illustrate race condition errors 
xterm provides window interface window system 
vulnerability versions xterm program exploited allowed users create delete arbitrary les system 
xterm operated setuid process race condition access check permissions logging le logging allowed users replace arbitrary le logging le ca 
code explains vulnerability exploited 
foo create fifo file name foo xterm lf foo start logging foo mv foo junk rename file foo junk ln passwd foo create symbolic link password file cat junk open fifo error occurs timing window exists time access permissions logging le checked time actual logging started 
timing window exploited creating symbolic link logging le target le system 
xterm ran setuid root create new les destroy existing les system 
condition validation errors operations operating system classi ed car prohibitive operation allowed proceed conditions allowed proceed hold action aborted 
operation delayed conditions proceed met 
example access checking mechanisms prohibitive action denied user process invokes object outside access domain 
synchronization mechanisms operation delayed required condition satis ed 
conditions usually speci ed conditional construct implementation language 
expression corresponding condition evaluated execution path chosen outcome condition 
discussion assume operation allowed proceed condition evaluated true 
condition validation error occurs condition missing allows operation proceed regardless outcome condition expression 
condition incorrectly speci ed condition incorrectly speci ed allow execution proceed alternate path 
may allow operation proceed regardless outcome condition expression completely invalidate check 
predicate condition expression missing evaluate condition incorrectly allows alternate execution path chosen 
condition errors coding faults occur programmer stood requirements logic error condition speci ed 
taxonomy fault classi ed condition error conditions missing speci ed correctly 
check limits operation proceed system ensure allocate required resources causing starvation deadlocks 
input output operations system ensure user process read write address boundaries 
check access rights system ensure user process access object access domain 
mechanics check depend access control mechanisms implemented 
check valid input routines accept input directly user routine check validity 
includes checks field value correlation syntax type number parameters input elds missing input elds delimiters extraneous input elds parameters failure properly validate input may indirectly cause functional modules fail cause system behave unexpected manner 
check origin subject context subject refers user process host shared data objects 
system authenticate subject prevent identity compromise attacks 
check exceptional conditions system able handle exceptional conditions arise failure events malfunction functional module device 
examples unix exports speci es lists trusted remote hosts allowed mount le system 
sunos host entry le longer characters number hosts exceeded cache capacity bu er ow allowed non trusted host mount le system ca 
allowed unauthorized users read write access les system 
error occurred system failed check read characters exhausted cache capacity 
unix operating system allows users copy le remote ma chine rcp utility 
vulnerability discovered version unix allowed remote users trusted machine execute root privilege commands rcp ca 
problem occurred authentication error name lookup protocol binds high level addresses identi cation internet protocol ip addresses 
error representative number similar aws exploited weakness domain name service protocol sch 
error occurred origin message hostname authenticated 
sunos sunos user redirect characters away user terminal device 
error occurred input output routine failed properly check access rights user invoked operation 
involved adding check allow read write request proceed user correct access rights reject request ca 
unix utility allows users remotely execute limited set com mands 
aw parsing command line allowed remote users execute arbitrary commands system bis 
command line executed received remote system parsed see commands line set commands executed 
read rst word line skipped characters delimiter character read 
continue way line read 
delimiters missing set command characters checked executed 
example user execute command executing sequence 
remote machine command command checked executed 
allowed users execute unauthorized commands remote system 
error occurred failed check missing delimiters 
fsck program checks repairs le system consistency 
inconsistencies fsck corrects include large link counts inodes missing blocks free list blocks appearing free list les incorrect counts super block 
unix systems fsck run part system procedure correct lesystem inconsistencies 
fsck failed solaris privileged shell started console 
enabled user physical access gain root privileges ca 
environment faults environment faults introduced speci cations translated code su cient attention paid run time environment spa 
faults dependent operational environment result software executed di erent environment programmer mind 
typical examples environmental faults include spa value initialize uninitialized pages segments virtual memory may introduce problems supposed constant values may produce faults porting code constant pointer exception handling reporting may di erent expected system errors compiler may produce incorrect code hardware may ex instructions di erently expected circumstance operating system may introduce intermittent errors related user code environment faults occur di erent modules interact manner 
independently modules may function speci cations error occurs subjected speci set input particular execution environment 
example exec system call overlays new process image old 
new image constructed executable object le data le containing commands interpreter 
interpreter le exec arguments speci ed exec call passed interpreter 
interpreters take argument start interactive shell 
sunos version earlier user create interactive shell creating link name setuid shell script 
exec passed argument shell interpreter started interactive shell 
exec system call shell interpreter worked speci cations 
error resulted interaction shell interpreter exec call considered 
selection criteria section describe selection criteria decide mem security faults di erent categories 
motivation avoid ambiguities distinctly classify fault 
fault category series questions determine membership speci category 
answer question series quali es fault classi ed corresponding category 
assume su cient details faults known 
condition validation errors sets questions determine fault classi ed condition validation error 
boundary condition errors error occur process attempted read write valid address boundary error occur system resource exhausted error result ow static sized data structure access validation errors error occur subject invoked operation object outside access domain error occur result reading writing le device outside subject access domain origin validation errors error result object accepted input unauthorized sub ject error result system failed properly completely subject input validation errors error occur program failed parse syntactically incorrect input error result module accepted extraneous input elds error result module handle missing input elds error result eld value correlation error failure handle exceptional conditions error system failed handle exceptional condition generated functional module device user input synchronization errors section presents criteria decide fault classi ed synchronization error 
race condition errors error exploited timing window operations serialization errors error result inadequate improper serialization operations environment errors section presents series questions decide fault classi ed environment error 
error result interaction speci environment functionally correct modules error occur program executed speci machine particular con guration error occur operational environment di erent software designed con guration errors questions determine fault classi ed con guration error 
error result system utility installed incorrect setup parameters error occur exploiting system utility installed wrong place error occur access permissions incorrectly set utility violated security policy shows pictorial representation decision tree derived ques tions deciding membership faults 
internal nodes decision tree represent series questions category 
leaf nodes tree represent di erent fault categories 
decision tree shows nodes labeled unclassi able errors 
nodes represent catch category coding operational environment faults 
unclassi able error categories included classi cation scheme account new faults readily classi ed existing criteria 
new fault category associated ria added parent node unclassi able error node 
ability add new fault categories useful taxonomy extended di erent operating systems di erent structures 
error access permissions installed wrong place policy error error setup parameters configuration error configuration error configuration error operational environment dependent fault serialization error configuration error race condition error environment error coding fault failure handle exceptions synchronization error synchronization error origin validation error input validation error access validation error condition validation error boundary condition error condition validation error selection criteria fault classi cation condition validation error condition validation error condition validation error 
design vulnerability database chapter conceptual design vulnerability database 
vulnerability database organize information security faults taxonomy 
chapter discusses various design issues rational design choices 
design database terms re model entities relational algebra functions 
approach separate implementation details design 
motivation landwehr observe history software failure undocumented knowing systems failed help design better systems prone failure 
design vulnerability database step direction 
database serve repository vulnerability information collected di erent sources 
information organized allow useful queries performed data 
information database useful system designer identifying areas weaknesses design requirements implementation 
personnel involved testing security mechanisms operating system may nd information useful 
database demonstrates taxonomy applied classify actual vulnerabilities di erent versions unix 
database maintain vendor patch information vendor response team advisories catalog patches applied response advisories 
information helpful system administrators maintaining legacy system 
entity relation model part conceptual design process entity relation model illustrate relationships di erent entities database model 
entity basic object entity relation model independent existence real world en 
entity physical conceptual existence 
queries collected requirements analysis phase entities identi ed 
vulnerability vulnerability entity type corresponds description potential security aw operating system 
operating system operating system entity type corresponds operating system contains particular vulnerability 
patch info patch info conceptual entity provides information patches applied system vulnerabilities entity attributes attribute particular property possessed entity 
associated attribute value information stored attribute 
attributes single valued multi valued 
single valued attributes associated value set speci es domain values may assigned attribute 
attributes associated entity types outlined 
included brief description value set attribute 
attribute description value set name identi cation number unique identi cation pri mary key source vulnerability reported description brief description ex detection technique brief description testing strategy detect bility classi cation representative category taxonomy string string text text string known arounds text description description xed literature vulner ability text text consequence generic consequence class string table vulnerability entity attributes attribute description value set system name unique name ing system primary key family system family system unix vendor vendor name address available table operating system entity attributes string string string attribute description value set patch number unique patch number pri mary key description brief description patch fixes vulnerability vulnerability vulnerabilities xed patch table patch info attributes string string text entity relation diagram entity relation diagram shows relationships exist entities database 
relationships easily represented hierarchical network model replication data records 
amount stored information vulnerability database large opted relational model minimize data replication 
relationship represented additional relation contains primary keys entities sides 
vendor description fix literature name family operating system vulnerability classification contains patches detection technique id number source description patch num 
description contains vulnerability results patch info entity relation diagram legend consequence entity class attribute key attribute cardinality ratio fixes vulnerability schema derived entity relation diagram show di erent attributes 
primary key attributes schema underlined 
operating system schema vulnerability schema vulner id patch info schema name source description contains patch schema contains vulnerability schema detection technique family vendor classification description fix patch number description fixes vulnerability operating system name operating system name entity integrity constraints patch number vulnerability id literature consequence entity integrity constraints state primary keys uniquely identify tuple relation null 
entity integrity constraints enforced update add modify operations 
referential integrity constraints referential integrity constraints speci ed relations maintain consistency tuples 
referential integrity constraints maintained add delete modify operations 
referential integrity con straints vulnerability database diagrammatically depicted 
vulner id vulnerability source contains patch operating system name patch info patch number description patch number description detection technique operation relations classification fixes vulnerability operating system name description fix contains vulnerability vulnerability id operating system name family vendor referential integrity constraints literature relational algebra collection operations manipulate entire relations 
includes operations select tuples individual relations com related tuples relations purpose specifying query 
complete set relational operations consists select project union differ ence cartesian product 
relational operation performed combination operations en 
operations brie described table 
sections implementation details vulnerability database prototype 
prototype developed demonstrate vulnerabilities di erent versions unix classi ed taxonomy faults 
major components vulnerability database database kernel vulnerability database interface user interface components discussed detail sections 
information data ow information components shown 
user interface vulnerability database interface database kernel physical schema vulnerability database requirements analysis part requirements analysis identi ed major uses vulner ability database 
maintain date security related information di erent operating systems helpful system designers re searchers 
vulnerability information security assessment studies operating systems 
second phase requirements analysis asked people involved security related projects comment small set queries proposed 
asked supplement list additional queries may performed database 
constructed small comprehensive set queries encompass wide range attributes 
collec tion queries helped identify information included di erent attributes data objects 
collection vulnerabilities provided useful information queries discarded attributes accessed included database 
example query time vulnerability introduced system answered stored information 
similarly queries programming practices supported 
queries answered access program source code program requirements functional speci ca tions knowledge program development environment 
furthermore queries di cult answer require qualitative evaluation infor mation 
set queries supported initial prototype database shown 

list vulnerabilities system 
list vulnerabilities system occur race condition 
list vulnerabilities result denial service 
perform combination boolean operations 

vulnerability classify 

vulnerability nd systems vulnerability 

list vulnerabilities system result 
list systems vulnerability cause 
vulnerability system con sequence exploited 

give brief description exploited 

list vulnerability literature 

give description vulnerability 
list patches applied system 
vulnerability practical arounds 
system version vulnerabilities supported patch 
systems vulnerability list version numbers vendors 

list literature 
queries collected requirements analysis supported require qualitative analysis data 
completeness queries shown 

vulnerability system part operating system 
patch completely vulnerability 
level di culty expertise required patch vulnerability 
initial access setup required exploit vulnerability requires user account requires access port 
coding practice list vulnerabilities resulting coding prac tice 
prevented 
class vulnerability software engineering practice prevented vulnerability design issues major factors uenced design database scalability ease maintaining integrity information 
poor design scale lead degradation performance waste storage space create problems maintenance 
performance critical factor design keep response time queries 
paid partic ular attention ensure little data replication took place 
initial design hierarchical model relationships di erent entities modeled data replication 
point relational schema adopted facilitated representation relationships data replication 
maintenance large repository information di cult task clear particular organization scheme easier 
identi ed entity integrity constraints referential integrity constraints helpful maintain integrity stored information 
database kernel vulnerability database relational schema model consists physical conceptual entities 
entities represented relations tables model 
relational algebra de nes operations performed relations 
de nes set basis functions query relational model speci ed terms functions 
basis functions relational model select project union difference cartesian product 
vulnerability database kernel comprised basis functions directly operate physical schema 
addition contains functions create creates new relation database 
modify modify elds tuple relation 
update change speci ed eld tuple relation 
delete delete tuple relation 
destroy remove relation database 
kernel provides layer abstraction upper level layers directly interface physical schema 
enables restrict details physical schema kernel functions 
representation relations vulnerability database relation contained separate le 
tuple relation represented line text di erent elds separated colon 
instance operating system relation shown 
os un vendor os vendor vulnerability database interface database provides interface physical schema set kernel functions 
queries listed section speci ed kernel functions 
approach disadvantages 
underlying details physical schema exposed user 
second specifying queries terms kernel functions cumbersome exposes details physical schema 
alternative separate layer abstraction called vulnerability database interface provided 
layer provides set form queries interact kernel functions 
set queries currently supported vulnerability database layer prototype listed table 
query interface function list vulnerabilities system list vulnerability system list vulnerabilities system oc vulner conseq cur vulner system list vulnerabilities result list conseq conseq vulnerability classify 
classify vulner vulnerability nd systems vulnerability 
list vulnerabilities system result list systems vulnerability cause vulnerability system consequence exploited 
give brief description exploited 
nd system vulner vulner result system conseq list systems systems conseq vulner system exploit vulner list literature 
descr vulner give description literature vulner list patches applied system patches system vulnerability prac tical arounds system version ities supported patch systems vulnerability list vendors 
vulner system vulner table vulnerability database interface functions user interface user interact database command line arguments graphical user interface 
graphical interface written tk toolkit ous provides exible interface vulnerability database functions 
functions listed table invoked interface 
shows main commands screen shows functions invoked 
function selected may invoked run button 
presents window entry elds needed arguments 
shows dialogue window vulner conseq function 
shows entry elds needed arguments 
template representation input elds chosen user need remember order number arguments required function 
user obtain help window selected function help command main screen 
help screen contains brief description function arguments required usage syntax 
shows help screen vulner conseq function 
operation description notation select select tuples satisfy selection condition rela tion project produce new relation attribute remove duplicate tuples union produce new relation cludes tuples union compatible difference produce relation includes cartesian product tuples produce relation attributes cludes tuples possible com tuples select selection condition project attribute list union table operations relations difference cartesian product vulnerability database commands screen integrity constraints function interface help window relational database entity referential integrity constraints main tained creating modifying updating relations maintain integrity stored information 
referential entity integrity constraints bility database discussed section 
section describes constraints implemented database 
entity integrity constraints entity integrity constraints specify primary key relation uniquely identify tuple de ned 
vulnerability database entity integrity constraints explicitly speci ed integrity conf le 
format entries les shown vulner vulner id contains vulner os vulner id os name contains patch os patch number patch info patch number name relation followed elds serve primary key 
format allows key speci ed integrity check allows maintainer change keys desired 
entity integrity check invoked time relation created modi ed tuple modi ed deleted relation 
primary keys database vulnerability number vulnerabilities obtained response team pri mary key unique identi er response team ad vulnerability 
vulnerabilities unique number assigned vulnerability tuple 
operating system name primary key operating system entity formed concatenating name operating system version number 
eld serves unique identi er implicitly stores version number 
patch number patch number unique key vendors identify distributed patch 
referential integrity constraints referential integrity constraints speci ed tuples relations maintain consistency tuples 
vulnerability database referential integrity constraints explicitly speci ed chk conf le 
tuples referential integrity constraints speci ed relation relation instance shown relation speci es referential integrity constraint relation 
changes relation re ected relation 
referential integrity checks invoked tuples relations modi ed deleted updated 
template representation vulnerability database provides exibility change elds tuples con tained relations change integrity constraints editable tem plate representation 
di erent elds tuples speci ed db conf le format shown 
vulnerability id source classification example shows relation vulnerability consists elds id source classi cation 
templates db conf database kernel routines new tuples added modi ed updated 
template representation allows main database easily add delete elds tuples 
changes re ected subsequent create modify update operations 
integrity constraints vulnerability database speci ed editable templates 
allows maintainers change primary keys add new keys change referential integrity constraints simply editing templates integrity con guration les 
data sources started populating vulnerability database attacks led security compromise 
information gathered advisories issued computer emergency response team cert information reported electronic security mailing list survey literature 
database contains information known vulnerabilities 
vulnerabilities cat taxonomy include descriptions exploited operating systems 
sections implementation details vulnerability database prototype 
prototype developed demonstrate vulnerabilities di erent versions unix classi ed taxonomy faults 
major components vulnerability database database kernel vulnerability database interface user interface components discussed detail sections 
information data ow information components shown 
requirements analysis user interface vulnerability database interface database kernel physical schema vulnerability database part requirements analysis identi ed major uses vulner ability database 
maintain date security related information di erent operating systems helpful system designers re searchers 
vulnerability information security assessment studies operating systems 
second phase requirements analysis asked people involved security related projects comment small set queries proposed 
asked supplement list additional queries may performed database 
constructed small comprehensive set queries encompass wide range attributes 
collec tion queries helped identify information included di erent attributes data objects 
collection vulnerabilities provided useful information queries discarded attributes accessed included database 
example query time vulnerability introduced system answered stored information 
similarly queries programming practices supported 
queries answered access program source code program requirements functional speci ca tions knowledge program development environment 
furthermore queries di cult answer require qualitative evaluation infor mation 
set queries supported initial prototype database shown 

list vulnerabilities system 
list vulnerabilities system occur race condition 
list vulnerabilities result denial service 
perform combination boolean operations 

vulnerability classify 

vulnerability nd systems vulnerability 

list vulnerabilities system result 
list systems vulnerability cause 
vulnerability system con sequence exploited 

give brief description exploited 

list vulnerability literature 

give description vulnerability 
list patches applied system 
vulnerability practical arounds 
system version vulnerabilities supported patch 
systems vulnerability list version numbers vendors 

list literature 
queries collected requirements analysis supported require qualitative analysis data 
completeness queries shown 

vulnerability system part operating system 
patch completely vulnerability 
level di culty expertise required patch vulnerability 
initial access setup required exploit vulnerability requires user account requires access port 
coding practice list vulnerabilities resulting coding prac tice 
prevented 
class vulnerability software engineering practice prevented vulnerability design issues major factors uenced design database scalability ease maintaining integrity information 
poor design scale lead degradation performance waste storage space create problems maintenance 
performance critical factor design keep response time queries 
paid partic ular attention ensure little data replication took place 
initial design hierarchical model relationships di erent entities modeled data replication 
point relational schema adopted facilitated representation relationships data replication 
maintenance large repository information di cult task clear particular organization scheme easier 
identi ed entity integrity constraints referential integrity constraints helpful maintain integrity stored information 
database kernel vulnerability database relational schema model consists physical conceptual entities 
entities represented relations tables model 
relational algebra de nes operations performed relations 
de nes set basis functions query relational model speci ed terms functions 
basis functions relational model select project union difference cartesian product 
vulnerability database kernel comprised basis functions directly operate physical schema 
addition contains functions create creates new relation database 
modify modify elds tuple relation 
update change speci ed eld tuple relation 
delete delete tuple relation 
destroy remove relation database 
kernel provides layer abstraction upper level layers directly interface physical schema 
enables restrict details physical schema kernel functions 
representation relations vulnerability database relation contained separate le 
tuple relation represented line text di erent elds separated colon 
instance operating system relation shown 
os un vendor os vendor vulnerability database interface database provides interface physical schema set kernel functions 
queries listed section speci ed kernel functions 
approach disadvantages 
underlying details physical schema exposed user 
second specifying queries terms kernel functions cumbersome exposes details physical schema 
alternative separate layer abstraction called vulnerability database interface provided 
layer provides set form queries interact kernel functions 
set queries currently supported vulnerability database layer prototype listed table 
query interface function list vulnerabilities system list vulnerability system list vulnerabilities system oc vulner conseq cur vulner system list vulnerabilities result list conseq conseq vulnerability classify 
classify vulner vulnerability nd systems vulnerability 
list vulnerabilities system result list systems vulnerability cause vulnerability system consequence exploited 
give brief description exploited 
nd system vulner vulner result system conseq list systems systems conseq vulner system exploit vulner list literature 
descr vulner give description literature vulner list patches applied system patches system vulnerability prac tical arounds system version ities supported patch systems vulnerability list vendors 
vulner system vulner table vulnerability database interface functions user interface user interact database command line arguments graphical user interface 
graphical interface written tk toolkit ous provides exible interface vulnerability database functions 
functions listed table invoked interface 
shows main commands screen shows functions invoked 
function selected may invoked run button 
presents window entry elds needed arguments 
shows dialogue window vulner conseq function 
shows entry elds needed arguments 
template representation input elds chosen user need remember order number arguments required function 
user obtain help window selected function help command main screen 
help screen contains brief description function arguments required usage syntax 
shows help screen vulner conseq function 
vulnerability database commands screen integrity constraints function interface help window relational database entity referential integrity constraints main tained creating modifying updating relations maintain integrity stored information 
referential entity integrity constraints bility database discussed section 
section describes constraints implemented database 
entity integrity constraints entity integrity constraints specify primary key relation uniquely identify tuple de ned 
vulnerability database entity integrity constraints explicitly speci ed integrity conf le 
format entries les shown vulner vulner id contains vulner os vulner id os name contains patch os patch number patch info patch number name relation followed elds serve primary key 
format allows key speci ed integrity check allows maintainer change keys desired 
entity integrity check invoked time relation created modi ed tuple modi ed deleted relation 
primary keys database vulnerability number vulnerabilities obtained response team pri mary key unique identi er response team ad vulnerability 
vulnerabilities unique number assigned vulnerability tuple 
operating system name primary key operating system entity formed concatenating name operating system version number 
eld serves unique identi er implicitly stores version number 
patch number patch number unique key vendors identify distributed patch 
referential integrity constraints referential integrity constraints speci ed tuples relations maintain consistency tuples 
vulnerability database referential integrity constraints explicitly speci ed chk conf le 
tuples referential integrity constraints speci ed relation relation instance shown relation speci es referential integrity constraint relation 
changes relation re ected relation 
referential integrity checks invoked tuples relations modi ed deleted updated 
template representation vulnerability database provides exibility change elds tuples con tained relations change integrity constraints editable tem plate representation 
di erent elds tuples speci ed db conf le format shown 
vulnerability id source classification example shows relation vulnerability consists elds id source classi cation 
templates db conf database kernel routines new tuples added modi ed updated 
template representation allows main database easily add delete elds tuples 
changes re ected subsequent create modify update operations 
integrity constraints vulnerability database speci ed editable templates 
allows maintainers change primary keys add new keys change referential integrity constraints simply editing templates integrity con guration les 
data sources started populating vulnerability database attacks led security compromise 
information gathered advisories issued computer emergency response team cert information reported electronic security mailing list survey literature 
database contains information known vulnerabilities 
vulnerabilities cat taxonomy include descriptions exploited operating systems 

security fault detection techniques chapter discussed classi cation scheme security faults unix 
motivation classi cation classify faults unambiguously di erent categories data organization 
fault categories basis data organization design vulnerability database 
design implementation database discussed chapter 
application fault classi cation scheme identi ed software testing techniques may detect faults category 
taxonomy faults errors share common characteristic classi ed category 
example synchronization errors share common method exploitation relative ordering operation sequence breach security 
faults condition validation category result missing incomplete condition checks 
con guration errors operational faults occur software adapted new environment developed 
environmental errors operational dependent faults manifest software executed particular execution environment 
sections brief description di erent software test ing techniques 
sections synthesis testing techniques discuss application security faults 
static analysis static analysis techniques require execution software 
tech niques rely inspection requirements design documents code walk throughs formal methods veri cation detect coding errors program 
static analysis may performed manually process automated analysis tool 
major limitation static analysis involves array pointer variables values referenced distinguished dm 
experimental evaluation code inspections walk throughs shown methods ective nding logic design coding errors typical programs mye 
various static analysis techniques code walk throughs inspection design speci cation documents formal methods veri cation design secure operating systems md 
systems provided ble security formally demonstrated conform security requirements 
symbolic testing symbolic testing programs input data output values assigned sym values may elementary symbolic values expressions 
possible executions program characterized execution tree 
exe cution program symbolic testing performed symbolic evaluator consists expression simpli er symbolic interpreter 
symbolic testing symbolic evaluation program proof systems 
studied ectiveness symbolic testing reported fteen errors reported program may possibly detected symbolic testing 
symbolic testing prove correctness program 
program test viewed nite set assertion assertion paths program shown correct path correct 
symbolic testing problems program contains loops array variables 
limitations symbolic testing loops array variables attractive choice test complex operating system source code 
path analysis testing path analysis testing involves selection test data cases execute chosen paths 
test case constructed choosing test point execution path program 
approach exercises possible paths program 
practical economical limitations restrict path testing choosing subset possible paths 
path testing meant detect computation path selection missing path errors 
computation error occurs computation statement path computed incorrectly 
path selection error occurs predicates conditional construct incorrect 
missing path errors result missing predicates condition construct 
path analysis testing conjunction domain analysis design test cases 
domain testing intended detect path selection errors near boundary path domain dm 
control structure testing path coverage testing technique exercises possible outcomes condition construct 
control structure testing divided condition testing data ow testing loop testing 
condition testing focuses condition expressions program 
data ow testing selects paths program de nition variables 
loop testing focuses exclusively validity loop constructs program 
explore condition testing detail possible detection technique condition validation errors 
condition testing re ned types testing 
branch testing branch testing simplest control testing technique involves evaluating true false branch conditional branch mye 
branch relational operator testing bro branch relational operator test ing guarantees detection branch relational operator errors condi tion provided boolean variables relational operators condition occur common variables tai 
bro uses condition constraints simple condition 
condition constraints symbol specifying constraint outcome ith simple condition condition constraint condition covered execution execution outcome simple condition satis es corresponding constraint example consider condition form boolean expression arithmetic expressions 
assuming short circuit evaluation boolean operands constraint set condition true false true true constraint set include false false coverage constraint set guarantees boolean relational operator errors detected 
noted condition testing reveal problems evaluating conditions corresponding results 
detect missing condition con structs 
addition test cases control structure testing test cases designed detect missing condition checks 
functional testing functional program testing design program viewed description design requirements speci cations 
objective nd input output behavior program agree speci cations 
functional testing enables derive test cases fully exercise functional requirements program 
functional testing attempts nd errors program pre 
incorrect missing functions interface errors errors data structures performance errors initialization termination errors reported functional testing exposed known errors release major software package 
sections functional testing technique test case design technique conjunction functional program testing 
fault detection techniques detect condition validation errors 
boundary value analysis technique designing test cases uncover boundary value errors mye 
provides guidelines complete boundary testing derives tests input output domains 
boundary value analysis derive test cases detect missing incorrectly speci ed limit checks system resources static sized data structures 
guidelines provided boundary value analysis follows 
input condition speci es range bounded values test cases designed values just just respectively 
addition extreme values high low considered ensure conditions handled properly 

input condition speci es number values test cases developed exercise minimum maximum numbers 
values just just tested 

apply guidelines output conditions 

internal program data structures prescribed boundaries test cases designed exercise boundaries 
syntax testing syntax testing functional testing technique object test treated black box accept certain inputs reject process 
syntax checking performed part system functional test part acceptance test 
primary objective technique establish correctness system test establish system vulnerable ill formatted input 
beizer bei summarized objective syntax testing follows element fail subjected bad inputs 
element cause element fail fail subjected bad inputs 
element corrupt database subjected bad inputs fail 
element rejects bad inputs accepts inputs 
performs correct processing inputs 
errors result improper input validation outlined 
test cases designed check errors implementation 
high level syntax errors violations syntax speci cation combination elds 
field syntax errors syntax errors associated eld 
delimiter errors violation rules governing placement type characters appear separators elds 
include missing delimiter wrong delimiter delimiter delimiters 
field value errors errors occur contents eld 
include boundary values excluded values 
syntax context errors possibility error contents eld dictate content subsequent elds 
field value correlation errors contents elds correlated functional relation may full freedom picking values 
state dependency errors permissible syntax eld value condi tional state system routine 
syntax checking performed modules handle major portion input enters system 
user interface programs including terminal device input routines 
communication protocols programs accept user input 
internal interface routines call supervisor routines 
dedicated data validation routines modules 
mutation testing strictly speaking mutation testing testing technique technique measuring adequacy test data 
brief overview mutation testing dm 
detailed discussion bud 
assume program test correct version program correct 
set test cases tested domain correctness assumed relative set speci cations 
mutation analysis relies set faults 
program tested faults introduced 
introducing fault slightly di erent program known mutant produced 
mutating elements results set mutants 
mutant killed behavior di erent executed test case killed equivalent behave identical exists test case behaves di erent mutation testing requires knowledge implementation language design language dependent mutants 
sections analysis di erent fault detection methods outlined earlier discuss method detect di erent fault types classi cation scheme 
condition validation errors classi cation scheme identi ed types faults result condition evaluated properly 
sub categories condition validation faults boundary condition errors input validation errors access right validation errors origin validation errors failure handle exceptional conditions 
sections software testing techniques applied detect faults category 
boundary condition errors boundary condition errors detected boundary value analysis design test cases functional testing modules 
ensures test cases exercise boundary conditions expose boundary condition errors module test mye 
addition functional testing mutation testing detect boundary conditions designing appropriate language dependent mutants 
stance agrawal describe language mutant checking boundary conditions scalar variables 
statement mutants generated consist mutants killed cause ow ow program 
path analysis testing conjunction domain analysis applied detect boundary condition errors 
domain analysis studied variables examined variables jk 
main disadvantage domain testing applied small number variables di culty selecting test cases increasingly complex 
experiment path analysis revealed existence path selection errors 
input validation errors input validation errors result functional module fails properly validate input accepts module process 
failure validate input may cause module accepting input fail may indirectly cause interacting module fail 
syntax testing verify functional modules accept input processes modules fail ill formatted input 
syntax testing described section including test case scenario tested 
path analysis testing applied detect scenarios certain ex ecution path may chosen input 
experiment conducted path testing revealed existence twelve computation errors 
symbolic testing static analysis viable choices detecting input validation errors 
input validation errors result input received run time 
observation favor symbolic static testing attractive choice detect input validation errors 
access right validation errors access validation errors result subject allowed invoke operation object outside access domain 
programming languages conditions coded conditional constructs execution path chosen outcome evaluated condition 
improperly speci ed condition lead incorrect execution path invalidate access right check 
path analysis detect errors result incorrectly speci ed condition constructs 
branch relational operator testing bro test case design techniques aid design test cases expose access validation errors 
programming languages access validation checks coded conditional constructs mutation testing detect errors 
mutants designed provide condition analysis conditional constructs 
program ming language mutants created statement follows 
statements mutants 
trap true 
trap false trap true false executed mutant killed function ar value true false 
value true false mutants continue execution 
mentioned mutants provide partial coverage statement 
provide complete coverage case statements form mutants needed provide complete coverage 
trap statement 
trap statement mutants equivalent providing branch coverage encourage test cases designed branch executed 
origin validation errors system properly authenticate user process may allow subjects access system 
similarly program properly authenticate shared data libraries may fooled modi ed data lead security breach 
di cult task verify system vulnerable identity compromise attacks 
aware fault detection technique employed expose origin validation errors 
ensure system properly authenticates users apply formal methods veri cation ensure implementation adheres security requirements ensure underlying protocol contain weaknesses may exploited 
failure handle exceptional conditions security breach caused system fails handle exceptional condi tion 
include unanticipated return codes failure events 
static analysis techniques inspection design documents code walk throughs formal veri cation critical sections ensure system gracefully handle unanticipated event 
path analysis testing performed small critical sections code ensure possible execution paths examined 
reveal problems may anticipated designers overlooked complexity 
environment errors errors dependent operational environment di cult detect spa 
possible vulnerabilities manifest software run particular machine particular operating system particular con guration 
environment errors dependent run time conditions static analysis code detect faults 
underlying modules algorithms may formally demonstrated correct program fails function correctly speci set input 
spa 
spa ord spa mutation testing uncover problems integer ow ow 
mutation testing design test cases exercise speci set inputs unique run time environment 
path analysis testing applied sections code ensure possible inputs examined 
synchronization faults fault classi cation scheme synchronization faults introduced existence timing window operations faults result improper inadequate serialization operations 
possible sequence actions may lead synchronization fault characterized ks 
process acquires access object perform operation 

process notion object changes indirectly 

process performs operation object 
mutation testing detect synchronization faults program 
detect faults introduced timing window operations trap execution mutant placed operations 
mutant terminates execution program certain speci ed conditions satis ed 
instance timing window access permission checks actual logging xterm exploited compromise security ca 
mutant vulnerability designed terminated execution killing mutant access checks completed 
mutant placed access checks logging detect race condition 
mutants designed detect improper serialization operations 
con sider set statement executed sequentially ensure correct op eration 
assume statements contain instructions break sequential lock step execution 
design mutants rearrange order execution statements 
mutants killed mutated program produces di erent result original program 
software testing techniques discussed earlier applied detect synchronization errors 
emphasis path analysis provide coverage ensures possible execution paths program executed 
detect synchronization errors depend relative timing serialization operations 
timing errors improper serialization detected introducing faults code mutation testing 
static analysis viable option synchronization errors depend runtime conditions 
con guration errors con guration errors may result software adapted new environments failure adhere security policy 
con guration errors comprise faults introduced software developed faults introduced maintenance phase software life cycle 
static audit analysis system reveal majority con guration errors 
various software testing techniques discussed static analysis ective detecting con guration errors 
testing techniques discussed focus detecting coding faults ective exposing con guration errors 
static audit system automated static audit tools cops fs tiger ssh search system known avenues penetration 
cops example illustrate types con guration errors detected 
cops contains checks detect security faults led compromise system fs 
dir check le chk check list speci ed directories les ensure world writable 
typically list includes passwd profile rc bin usr adm checks ensure critical les directories incorrect permissions violate security policy 
pass chk checks poor password choices 
includes user name common words login identi ers 
prevent brute force attempts crack passwords 
group chk passwd chk check passwd groups validity contents variety known problems including blank spaces null passwords non standard elds 
cron chk rc chk checks ensure intruder run program root privileges system startup checking les referenced rc world writable 
dev chk checks dev kmem dev mem world read able writable 
permissions set correctly allows intruder read write directly device 
home chk user chk checks ensure user home directory ini les world writable 
checks intended prevent individual user account intruder 
root chk checks root startup les incorrect settings search paths containing current directory 
ensure les owned superuser created correct permissions 
suid chk program checks changes suid le status system 
prevent system known penetration attacks result information ow problems 
expert system written robert baldwin mit 
checks user account compromised set rules 
checks described detect known con guration errors 
checks updated new con guration errors discovered 
vulnerability database described chapter keep set checks current 
new con guration errors added database information fault characteristics extracted write new checks audit tools 
summary table shows summary di erent software testing methods detect di erent types faults 
denote technique ective demonstrated detect faults similar characteristics 
denotes technique ectively 
denotes testing method ective quantitative study may performed part 
errors functional path static mutation testing analysis analysis testing boundary condition input validation access right origin validation failure handle exceptions environment race condition serialization con guration table comparison di erent software testing methods 
main contribution thesis security fault classi cation scheme unix operating system 
classi cation scheme allows categorize distinctly security fault speci ed criteria 
distinguishes taxonomy classi cation schemes explicitly specify membership criteria faults 
demonstrate applicability classi cation scheme basis design vulnerability database 
database store security faults di erent versions unix 
database conjunction intrusion detection system static audit tool search known avenues penetration 
furthermore fault categories identify software testing methods 
methods applied test phase software life cycle penetration analysis 
traditionally testing focused proving functional correctness software 
little importance security testing 
personnel maintained system responsible security 
sites penetration analysis uncover existing security vulnerabilities 
majority computer sites ord comprehensive penetration analysis vulnerabilities went unnoticed led security compromise 
coding faults detected adequate testing 
security compromises resulted exploiting faults prevented faults detected xed development cycle 
develop reliable systems emphasis placed security testing system testing methods designed detect security faults 
part may extend classi cation scheme modern operating system 
modern systems software architecture di erent unix structure 
include micro kernels object oriented distributed operating systems 
criteria taxonomy rely implementation details designed encompass general characteristics fault 
existing categories extended include faults classi ed existing categories 
believe factors enable extend classi cation scheme include faults various operating systems 
area may evaluate software testing methods di erent operating systems 
provide quantitative data ectiveness method 
methods may develop test suite measure secure di erent systems 
suite may possible develop set metrics security certi cation di erent systems 
bibliography bibliography abbott security analysis enhancements computer operating systems 
technical report institute com puter science technology national bureau standards 
agrawal demillo design mutant op programming language 
technical report serc tr software engineering research center purdue university 
demillo comparison reliable test data generation procedures 
technical report georgia technology 
amp markstein phillips 
penetrating oper ating system study vm integrity 
ibm systems journal pages 
anderson 
computer security technology planning study 
technical report esd tr usaf electronic systems div 
bei boris beizer 
software testing techniques 
electrical engineer ing computer science engineering series 
van nostrand reinhold 
bh 
protection analysis project nal report 
technical report isi rr information sciences univer sity southern california 
bis matt bishop 
analyzing security existing computer system 
ieee fall joint computer conference november 
bp basili barry 
software errors complexity empirical investigation 
communications acm jan 
bpc richard gerald popek jim 
inconsistency single data value time 
technical report information sciences university southern california december 
br victor dieter rombach 
tailoring software process project goals environments 
proceedings th interna tional conference software engineering pages 
ieee press 
bs bic alan shaw 
logical design operating systems 
prentice hall 
bud budd 
mutation analysis program test data 
phd thesis yale university may 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
ca cert advisory ca 
computer emergency response team 
car jim 
serialization protection errors operating systems 
technical report information sciences institute university southern california april 
cbp jim richard ii gerald popek 
pattern directed protection evaluation 
technical report information sciences university southern california june 
com douglas comer 
internetworking tcp ip 
prentice hall 
clarke richardson 
formal evaluation data flow path selection criteria 
ieee transactions software engineering november 
den dorothy denning 
cryptography data security 
addison publishing 
dgm guillaume 
software engineering avionics applications 
proceedings rd international con ference software engineering pages 
ieee press 
dis 
bsd unix security 
technical report university california santa barbara 
dm richard demillo aditya mathur 
software artifacts evaluate ectiveness mutation analysis detecting errors production software 
technical report software engineering research center purdue university serc tr march 
richard demillo michael mccracken martin john ume 
software testing evaluation 
benjamin cummings publishing 
en elmasri navathe 
fundamentals database systems 
benjamin cummings publishing 
endres 
analysis errors causes system programs 
ieee transactions software engineering se 
fs daniel farmer eugene spa ord 
cops security checker system 
technical report csd tr software engineering research center purdue university september 
carlo ghezzi mehdi jazayeri dino mandrioli 
fundamentals software engineering 
prentice hall 
gla robert glass 
persistent software errors 
transactions software engineering se march 
gs gar eugene spa ord 
practical unix security 
associates 
penetration analysis michigan terminal sys tem 
acm sigops operating system review 
hal anthony hall 
myths formal methods 
ieee software pages september 
hb dennis richard ii 
allocation deallocation residuals 
technical report information sciences institute university southern california june 

reliability path analysis testing strategy 
ieee transactions software engineering se 

evaluation ectiveness symbolic testing 
software practice principle july august 
william 
survey dynamic analysis methods 
tutorial software testing validation pages 
william 
survey static analysis methods 
tutorial software testing validation pages 
hsp david hess david sa ord udo 
unix network protocol security study network information service 
technical report texas university 
iee ieee 
ansi ieee standard glossary software engineering termi nology 
ieee press 
dave karl seger william 
computer crime crime handbook 
reilly associates 
jk white cohen domain strategy computer program testing 
ieee transactions software engineering may 
knu knuth 
errors tex software practice experience 
ks sandeep kumar eugene spa ord 
pattern matching model misuse intrusion detection 
th national computer security confer ence 
carl taxonomy computer program security aws 
technical report naval research laboratory november 
lin richard linde 
operating system penetration 
national computer conference pages 
lip 
prediction software failures 
journal systems soft ware 
mar brian 
survey software fault surveys 
technical report uiucdcs university illinois urbana champaign de 
mb brooks 
statistical prediction programming errors 
technical report radc tr 
md 
design secure operating system 
national computer conference 
mye myers 
software reliability 
wiley interscience 
mye myers 
art software testing 
wiley 
ous john ousterhout 
tcl tk toolkit 
addison wesley publishing 
ow thomas ostrand elaine weyuker 
collecting categorizing software error data industrial environment 
journal systems software 

experiments computer software complexity reliability 
proceedings th international conference software engineering pages 
ieee press 
popek kline ucla secure unix 
proceedings national computer conference pages 
pre roger pressman 
software engineering practitioner approach 
mc hill third edition 
rdb dana 
quantitative aspects software validation 
ieee transactions software engineering se 
rub raymond 
quantitative aspects software validation 
sig plan notices se may 
sb 
types distribution test correction times programming errors 
proceedings international conference reliable software 
sch schiller 
design cations security kernel pdp 
technical report esd tr mitre 
sch schell 
computer security achilles heel electronic air force air university review 
sch 
software metrics aiding program development debugging 
national computer conference 
sch christoph 
addressing weaknesses domain name system protocol 
master thesis purdue university 
scs schroeder clark saltzer 
kernel design project 
acm operating systems review 
spa eugene spa ord 
crisis 
communications acm june 
spa eugene spa ord 
extending mutation testing find environmental bugs 
software practice principle feb 
ssh david sa ord douglas lee david hess 
tamu security package 
edward editor proceedings security iv conference pages 
tai tai 
branch testing 
acm software engineer ing notes april 
wb david weiss victor basili 
evaluating software development analysis changes data software engineering lab 
ieee transactions software engineering se february 
web webster new world dictionary computer terms 
webster new world new york 
wil wilkinson penetration analysis burroughs large system 
acm sigops operating system review 
wit carol 
error density size ada software 
ieee software january 
shen yu identifying error prone software empirical study 
transactions software engineering se april 
yt michal young richard taylor 
rethinking taxonomy fault detection techniques 
technical report software engineering research center purdue university september 

management information systems 
wm 
brown 
appendices appendix description software fault studies br basili rombach report software faults projects characterized high code reuse established processes high turnover programmers 
gla glass surveyed faults software systems military air craft 
rst coded instructions built pro 
second system instructions built programmers 
faults reported delivery software 
dgm describe digital ight control avionics real time sys tem 
system contained lines code written ltr special high level language assembly 
ow ostrand weyuker report faults discovered develop ment system testing interactive special purpose editor coded lines high level language lines assembly 
rub reports faults dozen validation orts 
system included study small commercial real time control programs 
bp basili discuss faults lines fortran project 
system general purpose program satellite planning studies 
char rapidly changing requirements code design reuse 
shen describe faults discovered release software di er ent programs metric calculation tool written pascal compiler pl database system written primarily assembly 
appendix taxonomy unix vulnerabilities 
synopsis lpr delete create le system 
lpr allows users create symbolic links lpd spool directory 
invocations lpr reuse les spool directory follow previously installed link 
source lgm advisory operating system sunos earlier bsd bsd net derived systems ux classi cation condition validation error check origin 

synopsis access list hosts exports longer charac ters cached list exceeds cache capacity lesystem mounted user 
source cert advisory ca operating system sunos sun sun classi cation condition validation error check limit 

synopsis systems mail message appended le sending mail user 
create arbitrary entry passwd 
source see bis 
operating system bsd systems 
classi cation condition validation error check origin destination 

synopsis possible lock password le prevent user changing password 
source security distribution list operating system bsd derived systems classi cation condition validation error check limit 

synopsis rcp exploited trusted host hosts equiv rhosts 
source cert advisory ca operating system sunos classi cation condition validation error check origin 

synopsis user gain root access machine running hp nis 
source cert advisory ca operating system system running hp nis 
classi cation condition validation error check origin 

synopsis system running nis rpc udp penetrated generating fake password entry response nis client request 
source see hsp 
operating system systems running nis rpc udp 
classi cation condition validation error check origin 

synopsis vulnerability software allows users access system authentication 
source cert advisory ca operating system system running including ver sion 
classi cation condition validation error check origin 

synopsis usr bin ex execute user program ective id root 
source cert advisory ca operating system sunos classi cation condition validation error check access rights 

synopsis re direct console input output away console regardless permissions terminal device 
source cert advisory ca operating system sunos classi cation condition validation error check access rights 

synopsis implementation usr sys sys kern exec takes text data sizes header le exec true 
cause security breach program large data size causes 
source security distribution list 
operating system bsd classi cation condition validation error check limits 

synopsis password le reading routines read string input 
routines properly check line completely read 
create bogus entry password le 
source security distribution list 
operating system bsd classi cation condition validation error check input syntax 

synopsis setting stack size sun causes crashes system 
problem occurs input parsed incorrectly 
source security distribution list 
operating system sun systems 
classi cation condition validation error check input 

synopsis xterm emulator de nes escape sequences sent user terminal mail message 
invoke arbitrary commands user terminal 
source security distribution list 
operating system systems running windows version release 
classi cation environment error interaction functionally correct modules 
synopsis rdist uses execute sendmail root 
execute arbitrary programs root 
source lgm advisory operating system sunos earlier ux bsd net derived systems classi cation condition validation check origin subject program 

synopsis version unix su open password le create shell ective real gid root root privileges user 
source unreferenced source 
operating system unix version 
classi cation condition validation check limits 

synopsis vulnerability ncsa daemon allows remote users access account httpd running 
source cert advisory ca operating system systems running ncsa httpd version includ ing version 
classi cation condition validation check limit 

synopsis code function loop copies address rst null 
input string long overwrite stack executed procedure returns address stored stack 
source unreferenced source 
operating system information available 
classi cation condition validation check limits 

synopsis ioctl system call combined take user terminal breach security 
source security distribution list 
operating system sunos classi cation synchronization error race condition 

synopsis multiple users change passwords simultaneously yellow pages password map le updated concurrently le locking 
corrupts yellow page map le 
source security distribution list 
operating system sunos classi cation synchronization error improper serialization operations 

synopsis race condition mkdir exists exploited gain root access 
source security distribution list 
operating system bsd derived systems 
classi cation synchronization error race condition 

synopsis vulnerability exists site exec feature ftpd allows local remote user gain root access 
source cert advisory ca operating system systems running version classi cation con guration error utility installed incorrect setup 

synopsis vulnerability logging function xterm allows local users create new les modify existing les 
source cert advisory ca operating system systems running window system version version 
classi cation synchronization error race condition 
synopsis sunos writable default 
ex programs overwrite password le 
source security distribution list 
operating system sunos classi cation condition validation error input validation error 
synopsis le world writable 
allows user edit create new entries le 
source security distribution list 
operating system sunos classi cation con guration error secondary storage object system database le installed incorrect permissions 

synopsis installed machines allows intruders access system 
source cert advisory ca operating system dec ultrix classi cation condition validation error check origin 
synopsis user create setuid program option login breach security 
source security distribution list 
operating system ultrix classi cation origin validation error check origin subject 
synopsis uucp mode exploited gain root privileges 
source security distribution list 
operating system information available 
classi cation con guration error program installed incorrect sions 

synopsis rpc remote program execution daemon enabled internet get access machine running 
source cert advisory ca operating system aix aix classi cation condition validation error check origin 
synopsis sendmail installed exploited unauthorized users gain access system 
source cert advisory ca 
see spa 
operating system systems running sendmail version 
classi cation con guration error program installed incorrect setup parameters 

synopsis installing internet software necessary create guest account host 
default account bin csh default shell 
guest account valid shell exploited gain root privileges 
source cert advisory ca operating system ultrix classi cation con guration error utility installed incorrect setup 

synopsis queuing system aix includes batch queue bsh turned default 
exploited remote local users gain root privileges 
source cert advisory ca operating system aix version earlier classi cation con guration error utility installed incorrect setup pa rameters 

synopsis vulnerability performance tools aix allows local users gain root privileges 
solution suggested remove setuid bit 
source cert advisory ca operating system aix classi cation con guration error secondary object utility installed incorrect permissions 

synopsis fsck fails system privileged shell run console 
allow users physical access system gain unrestricted privileges 
source cert advisory ca operating system solaris classi cation condition validation failure handle exceptions 
synopsis user create interactive shell userid setuid shell script creating link name 
source unreferenced source 
operating system sunos earlier classi cation environment error interaction functionally correct modules 
synopsis user bypass authentication process supplying argument login program 
source unreferenced source 
operating system sun systems 
classi cation condition validation error check origin 
synopsis sendmail exploited read le system regardless permissions specifying con guration le sendmail 
source see dis 
operating system bsd 
classi cation condition validation error check origin 
synopsis vulnerability exists irix systems exploited users gain root privileges 
vulnerability exploited usr fmt 
suggested solution change permission fmt ownership root 
source cert advisory ca operating system sgi irix systems 
classi cation con guration error utility installed incorrect permissions 

synopsis writable setuid le exists exploited gain root privileges 
source security distribution list operating system system derived kernel 
classi cation con guration error secondary storage object installed incorrect permissions 

synopsis mail programs unix systems change uid mail le recipient 
mail program clear setuid bits le directory writable security 
source see bis 
operating system information available 
classi cation con guration error secondary storage mail directory object installed incorrect permissions 

synopsis restore command setuid exploited breach security 
source cert advisory ca 
operating system sunos classi cation con guration error utility installed incorrect permissions 

synopsis systems shipped accounts pass words 
source cert advisory ca operating system classi cation con guration error utility set incorrect setup parameters 

synopsis vulnerability allowed possibility capturing passwords reading terminal output 
source cert advisory ca operating system sunos sunos classi cation condition validation check access rights 

synopsis usr bin improperly installed exploited gain root privileges 
source cert advisory ca operating system ultrix classi cation con guration error utility installed incorrect permissions 

synopsis local users gain unauthorized privileges setuid program changed real ective user ids subsequently caused dynamically linked program exec source cert advisory ca operating system sunos higher 
classi cation condition validation check origin 

synopsis default permission number les directories set incorrectly 
instance les owned root owned bin 
source cert advisory ca operating system sunos 
classi cation con guration error secondary storage object incorrect permissions 

synopsis part installation system creates usr release bin installs setuid root les 
exploited gain root access 
source cert advisory ca operating system sunos sunos sunos classi cation con guration error utility installed incorrect permissions 

synopsis bin login improperly installed may exploited gain root privileges 
source cert advisory ca operating system system release 
classi cation con guration error utility installed incorrect setup pa rameters 

synopsis sunos version root directory writable 
result user able overwrite destroy sensitive les 
source security distribution list 
operating system sunos classi cation con guration error secondary storage object installed incorrect permissions 

