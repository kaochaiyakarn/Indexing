multi trapdoor commitments applications proofs knowledge secure concurrent man middle attacks rosario gennaro ibm watson research center box yorktown heights ny rosario watson ibm com june introduce notion multi trapdoor commitments stronger form trapdoor commitment schemes 
construct cient instantiations multi trapdoor commitment schemes strong rsa assumption introduced strong di hellman assumption 
main application result construction compiler takes proof knowledge transforms secure concurrent man middle attack 
strong rsa construction multi trapdoor commitments compiler cient requires exponentiations maintains round complexity original proof knowledge 
works common string model case necessary prove security proofs knowledge kind attacks 
cient solutions known proofs knowledge specific language transformation works proof 
compared previously known cient proofs solution factor cient computation 
main practical applications results concurrently secure identification deniable authentication protocols 
applications results simple cient solutions strong rsa assumption strong di hellman assumption 
proof knowledge allows prover convince verifier knows secret information example witness np statement 
remain secret ensure proof reveal information verifier may necessarily act honestly follow protocol 
proofs knowledge applications chief identification protocols party associated public key identifies proving knowledge matching secret key 
securely binding message identification protocols obtains interactive public key message authentication schemes 
interesting feature schemes deniable receiver guaranteed message comes sender sender deny third party sent 
proofs knowledge performed open network internet worry active attacker manipulating conversation honest parties 
network expect control timing message delivery assume adversary control messages delivered honest parties 
adversary play man middle role honest provers verifiers 
attack adversary act prover honest verifier trying accept proof adversary know corresponding secret information 
attack adversary access honest provers proving statements 
powerful attack adversary start sessions time interleave messages arbitrary way 
informally say proof knowledge concurrently non malleable adversary able convince verifier know relevant secret information course adversary simply relies messages unchanged honest prover honest verifier 
main contribution 
general transformation takes proof knowledge concurrently non malleable 
transformation preserves round complexity original scheme requires common string shared parties 
crucial technical tool construct compiler notion multi trapdoor commitments introduce 
defining notion show specific number theoretic constructions strong rsa assumption introduced strong di assumption 
constructions cient 
far know cient construction concurrently non malleable proofs knowledge gaining factor computation communication previous proposals see 
multi trapdoor commitments 
recall commitment scheme consist phases sender commits message think putting inside sealed envelope table second sender reveals committed message opens envelope 
trapdoor commitment scheme allows sender commit message informationtheoretic privacy 
transcript commitment phase receiver infinite computing power guess committed message better random 
hand comes opening message sender computationally bound committed message 
scheme admits trapdoor knowledge allows open commitment possible way 
trapdoor hard compute ciently 
multi trapdoor commitment scheme consists family trapdoor commitments 
scheme family information theoretically private 
family admits master trapdoor knowledge allows open commitment family way desired 
commitment scheme family admits specific trapdoor 
crucial property definition multi trapdoor commitments trapdoor scheme family infeasible compute trapdoor scheme master trapdoor known 
concurrent composition detail 
consider man middle attacker proofs knowledge careful define exactly kind concurrent composition allow 
described case attacker acts verifier concurrent executions proof provers 
call left concurrency usually provers positioned left picture see 
hand right concurrency means adversary start concurrent executions prover verifiers 


pn vm left right concurrency attacks need prove protocols zero knowledge simulatable proofs knowledge extract witness adversary 
comes extraction distinction line post protocol extraction 
line extraction witness extracted soon prover successfully verifier 
post protocol extraction procedure extractor waits concurrent executions extract witnesses successful executions 
common string known fully left right simulate proofs knowledge ciently result damgard 
techniques protocols fully concurrently zero knowledge 
extraction complicated 
lindell shows post protocol extraction case right concurrency 
techniques 
applications really matters line extraction 
able left concurrency build fully concurrently secure applications identification deniable authentication protocols 
prior 
zero knowledge protocols introduced 
notion proof knowledge implicit formalized 
concurrent zero knowledge introduced 
point typical simulation paradigm prove protocol zero knowledge fails concurrent model 
sparked long series papers culminating discovery non constant upper lower explain achieve right concurrency called cal cols bounds round complexity concurrent zero knowledge black box model extra assumptions common string 
breakthrough result barak shows constant round non black box concurrent zero knowledge protocol ine cient practice 
willing augment computational model common string damgard shows construct cient round protocols concurrent black box zeroknowledge 
works focus issue zero knowledge prove verifier may engage provers concurrent fashion learn information 
focuses issue malleability proofs knowledge security man middle may start concurrent sessions 
problem malleability cryptographic algorithms specifically zero knowledge proofs formalized dolev non malleable zk proof polylogarithmic number rounds 
protocol sequentially non malleable adversary start sessions sequentially non concurrently prover 
barak shows constant round non malleable zk proof non black box model ine cient 
taxonomy introduced lindell think concurrent composition general form composition protocol world protocol run 
hand desirable protocols arbitrarily compose secure protocol environment run 
notion universal composable security defined canetti 
universally composable zero knowledge protocols particular concurrently non malleable 
common string model necessary proven uczk protocols hamiltonian cycle 
uczk protocols np problem constructed usually ine cient practice require reduction hamiltonian cycle problem 
turns common string model necessary achieve concurrent see 
model theoretical solution problem 
ideas cient solutions :10.1.1.13.2517
katz presents cient proofs plaintext knowledge special type proofs knowledge sequentially non malleable 
proofs concurrently non malleable limitations power adversary arbitrarily delaying messages usually called timing assumptions 
reasonably cient proofs knowledge concurrently non malleable garay mackenzie yang :10.1.1.13.2517
detailed comparison appears :10.1.1.13.2517
comparison 
result uses katz protocol starting point modifies left concurrently secure timing assumptions 
important change specific number theoretic commitment scheme rsa allows defeat concurrent man middle 
modifications borrow damgard techniques result slightly cient protocol non concurrent case terms communication complexity 
garay introduce notion simulation sound trapdoor commitments sstc refined improved 
show generic constructions sstc specific direct constructions strong rsa assumption security dsa signature algorithm 
sstc compile way similar protocol left concurrently non malleable 
introduce ce cols dispense need extracting proven left right concurrently non malleable extra modification universally composable 
concept sstc related define somewhat weaker notion commitment elaborate di erence section 
important contribution respect twofold show weaker notion su cient construct concurrently non malleable proofs ii notion weaker able construct cient number theoretic instantiation :10.1.1.13.2517
strong rsa construction factor faster 
ciency improvement inherited concurrently non malleable proof knowledge cases computation commitment overhead 
noted apply transformation called call cols introduced obtain line extraction left right concurrency 
know construct cient direct constructions cols relationship knowledge discrete logarithms particularly cient 
applications mind left concurrency su cient follow path 
show applications result 
application highlight prior field impact result 
applications concurrently secure identification schemes 
main application proofs knowledge design secure identification schemes 
schemes party identifies proving knows secret information 
result allows construction cient identification schemes remain secure active man middle concurrent communication model 
far know cient schemes proven concurrently secure 
example schnorr identification scheme techniques obtain cient concurrently secure identification scheme discrete log strong rsa assumption 
quisquater identification scheme obtain comparable scheme proven secure strong rsa assumption 
schemes require rounds communication modular exponentiations party 
bellare identification schemes particular concurrently secure 
schemes achieve weaker property concurrent composition specific assumption cient 
deniable authentication 
deniable authentication protocol allows sender authenticate message receiver way receiver certain message originated sender time receiver convince anybody fact 
interested public key scenario sender receiver share secret information authentication achieved public key associated sender 
show concurrently non malleable proofs knowledge turned concurrently secure deniable authentication protocols binding message proof knowledge secure way 
concurrently secure deniable authentication protocols timing assumptions cca secure encryption interactive 
technique shows somewhat natural paradigm deniable authentication transforming proof shared key model deniable authentication easily achieved message authentication codes knowledge deniable authentication protocol 
approach obtain new protocols cient new assumption 
example obtain cient concurrently secure deniable authentication protocol strong rsa assumption 
stress solutions applications fully concurrently secure tolerate adversary starts concurrent interleaving protocols execution prover sender verifier receiver 
su cient applications proof knowledge satisfies line extraction left concurrency protocols achieves applications discussed section 
organization section recall notion proofs knowledge definition non malleability concurrent composition 
recall cryptographic tools main construction 
section introduce notion multi trapdoor commitments specific number theoretic construction strong rsa assumption 
section describes main protocol proof security 
section instantiate generic protocol strong rsa commitment scheme introduce number theoretic tricks improve ciency 
section main applications result 
preliminaries say function negligible polynomial exists index nq nq 
randomized algorithm denote event outputs string rob 
denote probability event happening 
time signatures construction requires time signature scheme secure chosen message attack 
informally means adversary public key signature message choice chosen seeing public key 
infeasible adversary compute signature di erent message 
definition adapted 
definition sg sig ver time secure signature probabilistic polynomial time forger rob sk vk sg vk sig sig sk sig vk sig ver sig vk negligible example application requires line extraction types concurrency interactive chosen ciphertext security able results case 
main construction requires signature scheme strong applications require 
informally means infeasible adversary find di erent signature message received signature issue signature randomized message may valid signatures 
definition sg sig ver strong time secure signature probabilistic polynomial time forger rob sk vk sg vk sig sig sk sig vk sig ver sig vk sig sig negligible time signatures constructed ciently general signatures require public key operations see 
virtually cient time signature schemes strong 
strong rsa assumption 
product primes pq 
denote euler function 
denote set integers relatively prime integer relatively prime 
rsa assumption states infeasible compute roots random element hard find mod strong rsa assumption introduced states random element hard find mod assumption di ers traditional rsa assumption allow adversary freely choose exponent able compute roots 
give formal definitions 
rsa set integers product bit primes 
assumption say rsa assumption holds probabilistic polynomial time adversaries probability rob rsa mod negligible say strong rsa assumption holds probabilistic polynomial time adversaries probability rob rsa mod negligible non malleable protocols require time strong signatures strong requirement overlooked 
rsa assumption strengthened hold specific randomly chosen 
cient variant protocol requires selected product safe primes pq primes 
denote set integers product bit safe primes 
case assumptions restated replacing rsa 
strong di hellman assumption briefly recall strong di hellman sdh assumption introduced boneh boyen :10.1.1.1.5374
cyclic group prime order generated sdh assumption thought equivalent strong rsa assumption cyclic groups 
basically says attacker input random able come pair assumption say sdh assumption holds cyclic group prime order generated probabilistic polynomial time adversaries probability rob 
negligible 
notice depending group may cient way determine succeeded outputting 
order check need solve decisional di hellman ddh problem triple 
assumption defined cyclic group going called gap ddh groups groups cient test determine probability input ab mod 
gap ddh property required construction multi trapdoor commitments uses sdh assumption definition concurrent proofs knowledge polynomial time relationships 
polynomial time computable relationship language pairs decided polynomial time 
lr denote language induced lr 
formally ensemble polynomial time relationships pt consists collection families pt pt pt family polynomial time relationships ensemble pt associate randomized instance generator algorithm ig input outputs description relationship drop su obvious context 
definition captures notion hard relationship lr hard compute corresponding denote process choosing random computing matching gap ddh groups assumption believed hold constructed bilinear maps introduced cryptographic literature 
definition say ensemble polynomial time relationships hard probabilistic polynomial time machine rob ig negligible abuse notation say hard satisfied 
proofs knowledge 
proof knowledge relationship parties prover verifier interact common input holds secret input goal protocol convince knows ideally proof reveal information verifier zero knowledge 
protocol satisfy certain constraints 
particular complete prover knows verifier accept 
sound possibly dishonest prover know verifier reject 
zeroknowledge polytime verifier matter possibly dishonest strategy follows proof learn information protocols 
proofs knowledge belong class protocols called protocols 
move protocols polynomial time relationship prover sends message verifier answers random challenge prover answers third message verifier applies local decision test accept 
protocols satisfy special constraints special soundness cheating prover answer possible challenge words compute witness accepting conversations form 
special zero knowledge statement challenge produce polynomial time accepting conversation distribution real accepting conversations knowing witness special zero knowledge implies zero knowledge respect honest verifier 
important proofs knowledge cryptographic applications protocols 
denote process selecting message protocol 
similarly denote 
man middle attacks 
consider adversary engages verifier proof knowledge 
time acts verifier proof prover protocol proof knowledge definition possible verifier accept knowing relevant secret information oracle 
course copy messages hard show see example prove di erent statement concurrent attack adversary activating sessions provers arbitrary interleaving 
call adversary concurrent man middle 
say proof knowledge concurrently non malleable adversary fails convince verifier proof know secret information 
words proof knowledge concurrently non malleable adversary verifier accept non negligible probability extract witness 
common string model define proof system tuple randomized algorithm input security parameter outputs common string crs 
definition limit prover probabilistic polynomial time machine technically protocols arguments proofs 
rest refer proofs 
concurrent man middle adversary probability verifier accepts 
rob ig crs crs crs statements 
adaptively chosen view crs denote view interaction common string crs 
definition say concurrently non malleable proof knowledge relationship pt ig properties satisfied completeness 
witness extraction exist probabilistic polynomial time knowledge extractor ke function negligible function probabilistic polynomial time concurrent man middle adversary ke rewind access computes probability 
zero knowledge exist probabilistic polynomial time simulator sim sim sim sim random variables real crs view crs sim crs sim view sim sim crs indistinguishable 
notice definition zero knowledge simulator power rewind adversary 
guarantee zero knowledge property hold concurrent scenario 
notice definition witness extraction assumes left concurrency adversary access provers verifier 
multi trapdoor commitment schemes trapdoor commitment scheme allows sender commit message information theoretic privacy 
transcript commitment phase receiver infinite computing power guess committed message better random 
hand comes opening message sender computationally bound committed message 
scheme admits trapdoor knowledge allows open commitment possible way refer commitment 
trapdoor hard compute ciently 
multi trapdoor commitment scheme consists family trapdoor commitments 
scheme family information theoretically private 
require properties multi trapdoor commitment scheme 
family admits master trapdoor knowledge allows open commitment family way desired 

commitment scheme family admits specific trapdoor allows specific scheme 

commitment scheme family infeasible open di erent ways trapdoor known 
allow adversary schemes family giving access oracle opens committed value desired way 
adversary selects schemes seeing definition family 
remain infeasible adversary scheme family 
main di erence definition notion sstc sstc allow adversary choose schemes wants seeing definition family :10.1.1.13.2517
clearly sstc stronger requirement probably able obtain cient constructions 
give formal definition 
non interactive multi trapdoor commitment scheme consists algorithms sel com open properties 
master key generation algorithm input security parameter outputs pair pk tk pk master public key associated family commitment schemes tk called master trapdoor 
algorithm sel selects commitment family 
input pk outputs specific public key pk identifies schemes 
specific trapdoor generation algorithm 
input pk tk pk outputs specific trapdoor information tk relative pk 
com commitment algorithm 
input pk pk message outputs com pk pk coin tosses 
open commitment sender reveals receiver recomputes open algorithm opens commitment possible way trapdoor information 
takes input keys pk pk commitment opening message string tk tk open outputs com pk pk 
require properties 
assume pk pk chosen distributions induced 
information theoretic security message pair distributions statistically close 
secure binding consider game 
adversary selects strings pk 
pk 
public key pk multi trapdoor commitment family generated distribution ones generated 
access oracle eq queried string com pk pk pk message pk pk valid public key eq answers com pk pk outputs nil 
say wins outputs pk com pk pk com pk pk pk pk require cient algorithms probability wins negligible security parameter 
main di erence notion case pk selected adversary seeing pk :10.1.1.13.2517
define stronger version secure binding property requiring adversary receives tk matching public keys pk access oracle eq 
case say multi trapdoor commitment family strong scheme strong rsa assumption 
section recall commitment scheme rsa assumption 
commitment scheme widely literature 
show strong rsa assumption scheme multi trapdoor commitment 
product large primes prime gcd random element triple public parameters 
commitment scheme defined messages 
denote commitment scheme drop indices obvious context 
commit sender chooses computes com mod decommit sender reveals previous equation verified receiver 
proposition rsa assumption scheme com described unconditionally secret computationally binding trapdoor commitment scheme 
trapdoor value mod proof prove scheme unconditionally secret 
value note value exists unique value value root show scheme computationally binding rsa assumption 
show adversary able open commitment scheme ways compute roots 
proof uses shamir gcd trick 
input values want compute integer mod place public parameters commitment scheme run adversary returns commitment distinct openings 
gcd 
find integers 
compute eq 
roots sides find original definition multi trapdoor commitments 
reading follows weaker approach giving access oracle decided modify main definition weaker su ces application 
strong definition may applications decided 
show know open commitment know opening way want 
assume computed com want open need show proof unconditional security compute root mod clearly mod commitment scheme easily extended message domain collision resistant hash function 
case commitment computed com application collision resistant function sha maps inputs bit integers choose larger scheme multi trapdoor commitment 
notice scheme really family commitment schemes prime master trapdoor factorization specific trapdoor scheme mod need show secure binding condition holds strong rsa assumption 
assume strong rsa problem 
run secure binding game 
adversary going select public keys case primes 
set mod return public key multi trapdoor commitment family 
need show simulate oracle eq 
easy know roots know trapdoor schemes family identified assume adversary commitment scheme family identified prime observation compute turn allows solve strong rsa problem computing root follows 
gcd means find integers 
jumping ahead allow multi trapdoor commitment schemes concurrent executions protocols identified di erent simulator set public parameter compute root done simply setting mod 
hand adversary forced open commitment ways new di erent previous 
allow simulator compute root gcd trick 
final observation note scheme satisfies strong version secure binding property definition multi trapdoor commitment strong rsa assumption infeasible adversary di erent commitment mod bunch commitments family 
scheme sdh assumption cyclic group prime order generated assume gap ddh group group deciding di hellman triplets easy 
formally assume existence cient algorithm ddh test input triplet elements outputs ab mod assume assumption holds master key generation algorithm selects random master trapdoor 
master public key pair commitment family identified specific public key pk simply element specific trapdoor tk scheme value commit message public key pk sender runs pedersen commitment bases selects random computes commitment value open commitment sender reveals receiver accepts opening ddh test 
proposition sdh assumption scheme described multi trapdoor commitment scheme 
sketch proof scheme family easily seen unconditionally secret 
proof secure binding property follows proof lemma proven considered weak signatures :10.1.1.1.5374
words adversary obtain 
values 
chosen seeing public key able sdh compute new proof completed show opening commitment di erent ways specific equivalent finding assume open ways ddh test tells reasoning know opening want open need set protocol section describe full solution non malleable proofs knowledge secure concurrent composition multi trapdoor commitments 
informal description 
start protocol described section 
prover wants prove verifier knows witness statement prover sends message verifier challenges prover random value prover answers response modify protocol way 
assume parties share common string contains master public key pk multi trapdoor commitment scheme 
common string contains collision resistant hash function set verification keys vk time signature scheme set public keys pk commitment scheme determined master public key pk 
prover chooses key pair sk vk time strong signature scheme 
prover computes pk vk com pk pk message protocol chosen random prescribed definition com 
prover sends vk verifier 
crucial trick verification key vk determine value pk commitment scheme 
verifier sends challenge prover sends back opening answer protocol 
sends sig signature transcript computed sk 
verifier checks correct opening sig valid signature transcript vk accepting conversation protocol 
protocol described 
cnm common string pk master public key multi trapdoor commitment scheme 
collision resistant hash function maps inputs public keys multi trapdoor commitment scheme determined pk 
common input string private input prover witness statement 
prover computes sk vk sg pk vk com pk pk prover sends vk verifier 
vk verifier selects random challenge sends prover 
prover computes sig sig sk 
sends sig verifier 
sig verifier accepts com pk pk ver vk acc 
concurrently non malleable proof knowledge theorem multi trapdoor commitments exist collision resistant hash function sg sig ver strong time signature scheme cnm concurrently non malleable proof knowledge see definition 
sketch proof completeness obvious 
zero knowledge follows pretty easily results 
focus witness extraction 
build knowledge extractor satisfy definition 
extractor runs commitment scheme obtain pk tk 
places pk hash function common string 
notice extractor knows master trapdoor tk 
runs adversary common string 
call process extraction 
execution starts verifier input chosen extractor acting prover label step refers simulation step prover chooses key pair sk vk sg computes pk vk commits random value computing com pk pk random sends vk adversary 
adversary replies random challenge show extractor answers prover computes accepting conversation special property protocols 
opens 
knows tk algorithm open 
computes sig transcript 
sends back signature sig 
decides act prover input chosen just act honest verifier sending random challenge give accepting conversation notice view adversary process identical view real execution protocol 
rewind point sent message values vk ask di erent challenge notice cause problems concurrent session simulator acting prover 
sessions changes challenge simulator able proceed described opening commitment appropriate way 
opens way iteration obtain accepting conversation special soundness protocols allow compute witness required definition 
extraction fails able open commitment ways 
proposition shows probability event negligible 
proof theorem complete proposition proven 
proposition multi trapdoor commitments exist sg sig ver strong time signature scheme probability able open di erent ways extraction negligible 
sketch proof assume non negligible probability opening ways extraction 
set new procedure call mtc breaker indistinguishable extraction allow contradict secure binding condition definition multi trapdoor commitment schemes 
bound number sessions adversary start verifier 
simulator prepare time signature keys advance sk vk 
sk vk 
computes pk vk 
runs secure binding game obtains public key pk access oracle eq 
adversary run common string pk simulation prover steps identical extraction 
new session prover uses new time key sk vk 
notice session open commitment ways querying eq appropriately 
clear views adversary extraction mtc breaker indistinguishable 
open ways probability process 
assume key vk di erent keys vk prover 
pk pk 
collision resistance 
contradicted secure binding condition definition multi trapdoor commitments 
mtc breaker succeeds uses verification key vk identical vk manages verifier accept 
proposition shows event negligible probability 
proof proposition complete proposition proven 
proposition sg sig ver strong time signature scheme secure chosen probability uses vk vk verifier accepts negligible 
sketch proof assume succeeds non negligible probability having verifier accept mtc breaker choosing verification key vk equal vk show break strong time signature scheme 
run input verification key vk 
access signing oracle sign single message matching secret key sk 
goal come valid signature di erent message di erent signature message asked oracle run new procedure called forger similar extraction choose random set corresponding verification key chosen prover vk vk 
probability chose vk vk 
adversary ask simulator third message th session simulator queries signing oracle compute sig sig sk 
hand adversary produce di erent transcript interaction verifier 
vk vk sig sig sig valid signature 
case 
case valid signature message di erent asked oracle 

sig sig means signature di erent oracle returned message 
requirement strong signature scheme arises 
requirement overlooked strong rsa version section going add comments specific implementations protocol number theoretic constructions described sections 
main technical question implement collision resistant hash function maps inputs public keys multi trapdoor commitment scheme 
sdh implementation basically ready 
public keys pk multi trapdoor commitment scheme simply elements needed hash function output hand strong rsa multi trapdoor commitment public keys prime numbers appropriate length 
prime outputting collision resistant hash function described 
better modifying slightly protocol 
describe modifications inspired section 
modifying time signatures require time signature scheme sg sig ver extra property distribution induced sg verification keys vk uniform virtually cient time signature schemes property 
collection families hash functions 
going require collision resistant collection collection families universal hash functions 
definition collection families hash functions ucr collection 
collision intractable collection probabilistic polynomial time adversary rob negligible 
family universal hash functions rob starting collision resistant hash function sha cient collections family easily constructed reasonably conjectured ucr collections 
assume randomly chosen hash function ucr collection length verification keys prime modify key generation signature scheme follows 
run sg repeatedly get verification key vk vk prime 
notice denote sg modified key generation algorithm 
note facts requirement relaxed asking distribution min entropy 
vk follows distribution bit strings statistically close uniform results density primes arithmetic progressions see results hold generalized riemann hypothesis know process polynomial time expected iterations 
form pr primality testing candidates done deterministically ciently see lemma 
quite cient way associate primes verification keys 
security modified signature scheme 
selecting subset possible keys original signature scheme 
easier forge signatures 
answer easily argued follows 
forger forge signature modified scheme original scheme secure subset keys modified scheme polynomially large fraction original universe keys 
length primes 
application need prime relatively prime rsa modulus protocol 
achieved setting 
typical applications bits obtain setting length hash function output 
number iterations choose vk depends length nice find way shorten 
safe rsa moduli enforce gcd choosing small bit safe moduli need smaller bits 
case collision resistant property limiting factor choosing length 
today standards need 
resulting primes bits long 
full scheme informal description 
start protocol described section 
prover wants prove verifier knows witness statement prover sends message verifier challenges prover random value prover answers response modify protocol way 
assume parties share common string contains rsa modulus commitment scheme described section modified randomly chosen hash function ucr collection output length prime appropriate length strong rsa modulus prover chooses key pair sk vk modified time strong signature scheme 
recall means prover chooses sk vk ph vk prime 
prover computes message protocol chosen random prescribed definition com 
prover sends vk verifier 
crucial trick verification key vk determine value commitment scheme 
verifier sends challenge prover sends back opening answer protocol 
sends sig signature transcript computed sk 
verifier checks correct opening sig valid signature transcript vk accepting conversation protocol 
notice verifier need check prime 
protocol appears detail 
cnm common string rsa modulus function ucr collection 
prime common input string private input prover witness statement 
prover computes sk vk sg vk mod prover sends vk verifier 
vk verifier selects random challenge sends prover 
prover computes sig sig sk 
sends sig verifier 
sig verifier accepts ver vk acc 
concurrently non malleable proof knowledge strong rsa assumption theorem strong rsa assumption holds sg sig ver strong time signature scheme cnm concurrently non malleable proof knowledge see definition 
proof theorem similar proof theorem completeness appears appendix appendix example power simplicity techniques 
show transformation applied schnorr proof knowledge discrete logarithm 
applications section describe main applications protocol concurrently secure proof knowledge concurrently secure identification deniable authentication protocols 
concurrently secure identification protocols identification protocol prover associated public key communicates verifier tries convince legitimate prover person knowing matching secret key 
adversary tries mount impersonation attack tries verifier accept knowing secret key sk 
definition security limited adversary interact real prover mounting actual impersonation attack 
definition realistic case adversary acts man middle proposed 
clearly attacker relays messages prover verifier changing 
order definition meaningful defines successful impersonation attack transcript di erent ones attacker real prover 
concurrent scenario prover may engage identification sessions arbitrarily interleaved 
powerful adversary considered reset internal state prover 
resulting notion security implies security concurrent model 
consider scenario protocols cient ones proposed 
formally identification protocol consists triple idg 
idg randomized key generation algorithm input security parameter returns pair keys respectively secret public key 
interactive turing machines 
prover runs input key pair verifier knows public key 
denote output protocol verifier accepts 
definition say idg identification scheme secure concurrent manin middle attacks conditions satisfied correctness output idg 
security probabilistic polynomial time adversary oracle access probability negligible rob idg transcript interaction set transcripts interactions basic idea cnm hard relationship identification protocol 
theorem relationship hard multi trapdoor commitments exist sg sig ver strong time signature scheme cnm identification scheme secure concurrent man middle attacks 
proof identical proof theorem 
notice achieve full concurrency extraction procedure proof theorem care executions adversary acting prover 
need rewind executions order extract witness need 
executions nested inside just run honest verifier 
similar statement holds cnm 
deniable authentication deniable authentication protocol allows sender authenticate message receiver way receiver certain message originated sender time receiver convince anybody fact 
interested public key scenario sender receiver share secret information authentication achieved public key associated sender 
formal definition appears 
deniable authentication secure man middle attacker tries convince receiver certain message originated sender interacts sender di erent message distinguish sequential case conduct interaction time real sender concurrent case sessions arbitrarily interleaved real sender 
formal definition deniable authentication 
deniable authentication protocol consists tuple dg send rec 
generator common string 
dg randomized key generation algorithm input security parameter returns pair keys ask apk respectively secret public key 
send rec interactive turing machines 
sender send runs input message key pair ask apk 
hand receiver rec runs public key apk 
send ask apk rec apk crs denote output rec interaction message value nil denoting rec rejected execution 
hand view send ask apk rec apk denote view receiver execution random variable defined internal coin tosses messages exchanged execution 
definition say dg send rec strongly deniable authentication protocol message space properties satisfied completeness crs output ask apk output dg send ask apk rec apk crs soundness probabilistic polynomial time adversary oracle access send running inputs adaptively chosen rob crs ask apk dg output send ask pak rec apk nil negligible deniability probabilistic polynomial time receiver interacting prover inputs adaptively chosen exists simulator sim oracle access shared key model deniable authentication easily achieved message authentication codes negligible probability output dg distributions view send ask apk apk view sim apk apk indistinguishable say dg send rec concurrently secure strongly deniable authentication protocol conditions adversarial executions messages arbitrarily interleaved 
notice simulator deniability property allowed choose crs di erently simulator zk property proofs knowledge 
trying capture deniability real parties real world 
weaker notion deniability defined 
notion simulator sim access real sender authenticate fixed sequence messages independent ones selected simulation 
weakly deniable authentication protocol sender able deny authenticated receiver receiver able prove third party exactly sender authenticated 
solution 
follow paradigm similar build deniable authentication protocol 
idea protocol specific language knowledge pre image trapdoor function 
key generation algorithm outputs trapdoor function inverse assume admits cient protocol prove knowledge 
public key set sender keeps private 
authenticate message sender receiver run modified version cnm 
receiver generates random sends message sender runs cnm prover prove knowledge knowledge receiver acting verifier sends random challenge sender answers prescribed third round cnm omits signature 
receiver point reveals sender signs transcript including protocol described detail 
theorem trapdoor function multi trapdoor commitments exist sg sig ver secure time signature scheme den auth concurrently secure strongly deniable authentication protocol 
sketch proof completeness obvious inspection 
argue soundness follow proof theorem 
adversary contradicts soundness condition run simulation similar extraction 
simulation run input want compute contradicting wayness proof theorem simulator sets common string way knows tk master trapdoor multi commitment family 
allow simulate concurrent interleaving behavior honest sender opening commitment desired way 
place execution trying forge message proof theorem simulator successfully extract long open commitment di erent ways 
proposition show den auth common string pk master public key multi trapdoor commitment scheme 
collision resistant hash function maps inputs public keys multi trapdoor commitment scheme determined pk 
public key sender trapdoor function assume admits protocol prove knowledge pre images private input sender inverse receiver chooses random domain computes sends sender message sender receiver sender computes sk vk sg pk vk com pk pk random sender sends vk verifier 
sender vk receiver receiver sends random challenge sender receiver sender computes sends receiver 
sender receiver receiver checks com pk pk acc 
reveals sender receiver sender checks signs transcript sig sig sk 
sender sig receiver receiver accepts signature correct ver vk 
strongly deniable authentication protocol secure concurrent composition security multi trapdoor commitment scheme security time signature scheme event happens negligible probability 
proof identification scheme achieve full concurrency nested execution adversary acts sender needs 
notice proof need strong property time signature scheme 
message adversary trying authenticate di erent ones authenticated real prover signature produced adversary di erent transcript 
case transcripts signatures di erent case proof proposition 
prove deniability 
notice part transcript receiver compute transcript performing protocol prover sender 
notice simulator need know trapdoor pk need open ways 
observation proof soundness condition points potential improvement design protocol 
possible completely remove time signature scheme fact enforce non malleability proof knowledge 
details appear longer version 
cient instantiation den auth obtained cnm rsa way function quisquater identification scheme prove knowledge roots 
resulting scheme secure strong rsa assumption 
cient scheme known assumption 
generic transformation takes proof knowledge secure concurrent man middle attack 
cient implementation transformation adds exponentiations cient generation prime number special form computation original proof 
transformation oblivious structure original proof knowledge matter proof knowledge performed 
main tool construction definition new primitive call multi trapdoor commitments general applicability 
results obtain new cient concurrently secure solutions interesting problems identification schemes deniable authentication 
applications known cient solutions strong rsa assumption 
acknowledgments 
hugo krawczyk research originated conversations deniable authentication signatures key exchange protocols 
discussions helped focus problem concurrently non malleable proofs knowledge 
original done independently subsequent reading conversations phil mackenzie improved particular current definition multi trapdoor commitments 
shai halevi jonathan katz yehuda lindell helpful conversations advice dah lim careful reading catching typos 
bach 
algorithmic number theory volume 
mit press 
barak 
go black box simulation barrier 
proc 
nd ieee symp 
foundations computer science focs pp 
barak 
constant round coin tossing man middle realizing shared random string model 
proc 
rd ieee symp 
foundations computer science focs pp 
pfitzmann 
collision free accumulators fail signature schemes trees 
advances cryptology eurocrypt lncs vol 
springer pages 
bellare fischlin goldwasser micali 
identification protocols secure reset attacks 
proc 
lncs pp springer 
bellare goldreich 
defining proofs knowledge 
proc 
crypto lncs springer 
bleichenbacher maurer 
optimal tree time digital signature schemes 
stacs lncs vol 
pp springer verlag 
bleichenbacher maurer 
ciency time digital signatures 
advances cryptology appear 
boneh boyen :10.1.1.1.5374
short signatures random oracles 
proc 
eurocrypt lncs pp springer 
boneh franklin 
identity encryption weill pairing 
siam comp 

canetti 
universally composable security new paradigm cryptographic protocols 
proc 
nd ieee symp 
foundations computer science focs pp 
canetti fischlin 
universally composable commitments 
proc 
crypto lncs pp springer 
canetti kilian petrank rosen 
concurrent zero knowledge requires rounds 
proc 
rd acm symp 
theory computing stoc pp 
cramer damgard 
new generation secure practical rsa signatures 
proc 
crypto lncs pages 
cramer shoup 
practical public key cryptosystem secure adaptive chosen ciphertexts attacks 
crypto springer verlag lncs pages 
cramer shoup 
signature schemes strong rsa assumption 
proc 
th acm conference computer communication security 
damgard 
cient concurrent zero knowledge auxiliary string model 
proc 
lncs pp springer 
de santis di ostrovsky sahai 
robust non interactive zero knowledge 
proc 
crypto lncs pp springer 
dolev dwork naor 
non malleable cryptography 
siam comp 

dwork naor sahai 
concurrent zero knowledge 
proc 
th acm symp 
theory computing stoc pp 
feige fiat shamir 
zero knowledge proofs identity 
crypt 
springer 
garay mackenzie yang 
strengthening zero knowledge protocols signatures 
proc 
eurocrypt lncs pp springer 
final version eprint iacr org gennaro halevi rabin 
secure hash sign signatures random oracle 
proc 
eurocrypt lncs pages 
goldwasser micali 
knowledge complexity interactive 
siam 
computing february 
goldwasser micali rivest 
digital signature scheme secure adaptive chosen message attacks 
siam computing april 
quisquater 
practical zero knowledge protocol fitted security microprocessors minimizing transmission memory 
proc 
eurocrypt lncs pp springer 
katz 
cient non malleable proofs plaintext knowledge applications 
proc 
eurocrypt lncs pp springer 
katz 
cient cryptographic protocols preventing man middle attacks 
ph thesis columbia university 
krawczyk rabin 
chameleon hashing signatures 
proceedings ndss pp 
lamport 
constructing digital signatures way function 
technical report sri intl 
csl 
lindell 
composition secure multi party protocols 
lecture notes computer science vol springer 
lindell 
lower bounds concurrent self composition 
manuscript 
mackenzie yang 
simulation sound commitments 
appear eurocrypt 
maurer 
fast generation prime numbers secure public key cryptographic parameters 
crypt 
springer 
paillier 
public key cryptosystems composite degree residuosity classes 
advances cryptology eurocrypt lncs vol 
springer pages 
pedersen 
non interactive information theoretic secure verifiable secret sharing 
crypto pages 
lncs 
rosen sahai 
concurrent zero knowledge logarithmic round complexity 
proc 
rd ieee symp 
foundations computer science focs pp 
rivest shamir 
method obtaining digital signature public key cryptosystems 
comm 
acm pp 
schnorr 
cient signature generation smart cards 
journal cryptology 
shamir 
generation cryptographically strong pseudorandom sequences 
acm trans 
computer systems pages 
proof knowledge discrete logarithm example power simplicity technique show transformation applied schnorr proof knowledge discrete logarithm 
analysis going assume safe rsa moduli choose output bit strings 
estimate key generation time signature scheme recall iterate prime takes pretty amount time exponentiations bit integers consistent experimental results generating bit primes similar fashion took roughly amount time exponentiation increase computing bit primes 
easy check shows scheme requires exponentiations bit exponents bit integers prover verifier consider exponentiation bit exponent exponentiations bit exponent 
proof theorem sketch proof completeness obvious 
zero knowledge follows pretty easily results 
focus witness extraction 
build knowledge extractor satisfy definition 
extractor chooses product large primes value hash function ucr collection random prime appropriate length 
notice extractor knows factorization runs adversary common string 
call process extraction 
execution starts verifier input chosen extractor acting prover label step refers simulation step prover chooses key pair sk vk sg computes vk commits random value computing random sends vk adversary 
cnm dlog common string rsa modulus function ucr collection 
prime collision resistant hash common input primes element order element subgroup generated private input prover integer mod prover computes sk vk sg vk mod mod prover sends vk verifier 
vk verifier selects random challenge sends prover 
prover computes cw mod sig sig sk 
sends sig verifier 
sig verifier accepts ver vk ay mod concurrently non malleable proof knowledge discrete logarithms adversary replies random challenge show extractor answers prover computes accepting conversation special property protocols 
opens 
knows factorization computes sig transcript 
sends back signature sig 
decides act prover input chosen just act honest verifier sending random challenge give accepting conversation notice view adversary process identical view real execution protocol 
rewind point sent message values vk ask di erent challenge notice cause problems concurrent session simulator acting prover 
sessions changes challenge simulator able proceed described opening commitment appropriate way 
opens way iteration obtain accepting conversation special soundness protocols allow compute witness required definition 
extraction fails able open commitment ways 
proposition shows probability event negligible 
proof theorem complete proposition proven 
proposition strong rsa assumption holds sg sig ver strong time signature scheme probability able open di erent ways extraction negligible 
sketch proof assume non negligible probability opening ways extraction 
set new procedure call inverter indistinguishable extraction allow contradict strong rsa assumption 
inverter runs input rsa modulus goal compute mod bound number sessions adversary start verifier 
simulator prepare time keys advance sk vk 
sk vk 
computes vk 
sets mod notice bit primes 
adversary run input simulation prover steps identical extraction 
new session prover uses new time key sk vk 
notice session open commitment ways knows root clear view adversary extraction inverter indistinguishable 
open ways probability process 
proposition compute root vk value associated verification key chosen notice necessarily prime 
value assume key vk di erent keys vk prover 

implies gcd primes 
find 
return solution strong rsa challenge 
inverter succeeds uses verification key vk identical vk manages verifier accept 
proposition shows event negligible probability 
proof proposition complete proposition proven 
proposition sg sig ver strong time signature scheme secure chosen probability uses vk vk verifier accepts negligible 
sketch proof assume succeeds non negligible probability having verifier accept inverter choosing verification key vk equal vk show break strong time signature scheme 
run input verification key vk 
access signing oracle sign single message matching secret key sk 
goal come valid signature di erent message di erent signature message asked oracle run new procedure called forger similar simulation choose random set corresponding verification key chosen prover vk vk 
probability chose vk vk 
adversary ask simulator third message th session simulator queries signing oracle compute sig sig sk 
hand adversary produce di erent transcript interaction verifier 
vk vk sig sig sig valid signature 
case 
case valid signature message di erent asked oracle 

sig sig means signature di erent oracle returned message 
requirement strong signature scheme arises 
requirement overlooked 
