argument framework model agent beliefs dynamic environment carlos ches evar guillermo simari artificial intelligence research development laboratory department computer science engineering universidad nacional del sur av 
bah argentina email mc grs cs uns edu ar artificial intelligence research group departament computer science universitat de campus ii spain email cic eup es 
difficult problems multiagent systems involves representing knowledge beliefs agents dynamic environments 
new perceptions modify agent current knowledge world consequently beliefs 
revision updating process performed efficiently agent particularly context real time constraints 
introduces argument logic programming language called observation defeasible logic programming odelp 
odelp program represent agent knowledge context multiagent system 
beliefs agent modeled warranted goals computed basis agent program 
new perceptions environment result changes agent knowledge handled simple effective updating strategy 
process computing beliefs changing environment computationally attractive integrating dialectical database agent program providing precompiled information inferences 
algorithms creation dialectical databases 
knowledge representation issues play major role practically areas artificial intelligence mas exception 
known problems mas involve need complex abilities reasoning planning acting dynamic environments 
years argumentation gained wide acceptance multiagent systems mas community providing tools designing implementing different features characterize interaction rational agents 
logic programming approaches argumentation proven suitable formalization tools context mas combine powerful features provided logic programming knowledge representation ability model complex argument inference procedures unified integrated frameworks 
mas approaches logic programming rely extended logic programming elp underlying formalism 
agent knowledge codified terms elp program founded semantics program represents agent beliefs 
elp expressive capture different kinds negation strict default negation limitations modeling incomplete potentially contradictory information 
mas context common agents require capabilities interact environment processing new inputs changing dynamically beliefs intentions clearly setting argumentation formalism underlying mas able incorporate new information knowledge base agent reason accordingly 
odelp observation defeasible logic programming argument formalism agents reasoning dynamic environments 
basic notions odelp come defeasible logic programming delp :10.1.1.59.6130
delp odelp formalism uses knowledge representation language style logic programming inference argumentation 
provide agents ability sense changes world integrate existing beliefs odelp adapted knowledge representation system handle perceptions 
real time issues play important role modeling agent interaction 
argument mas setting timely interaction particularly hard achieve inference process involved complex computationally expensive 
solve issue enhance behavior odelp incorporating dialectical databases data structures storing precompiled knowledge 
structures speed inference process answering queries 
remainder organized follows 
section summarizes main features odelp formalism 
section reviews briefly previous truth maintenance systems provided basis notion dialectical databases introduces notion dialectical databases discussing role tool speed inference odelp formalism 
section presents worked example 
section summarizes obtained 
odelp observation delp defeasible logic programming delp provides language knowledge representation reasoning uses defeasible argumentation decide contradictory dialectical analysis :10.1.1.59.6130
codifying knowledge base agent means delp program provides trade expressivity implementability 
extensions delp integrate possibilistic logic vague knowledge argument framework proposed 
research shown delp provides suitable framework building real world applications clustering algorithms intelligent web search critiquing systems deal incomplete potentially contradictory information 
applications delp intended model behavior single intelligent agent static scenario 
delp lacks appropriate mechanisms represent knowledge dynamic environments agents able perceive changes world integrate existing beliefs 
odelp framework aims solving problem modeling perception new facts added agent knowledge base 
adding new facts may result inconsistencies associated updating process solve 
definitions follow summarize main features odelp 
language language odelp language logic programming 
follows concepts signature alphabet atoms usual meaning 
literals atoms may preceded symbol denoting strict negation elp 
odelp programs formed observations defeasible rules 
observations correspond facts context logic programming represent knowledge agent world 
defeasible rules provide way performing tentative reasoning argumentation formalisms 
definition 
observation defeasible rule observation ground literal representing fact world obtained perception mechanism agent believes correct 
defeasible rule form 
lk literal 
lk non empty finite set literals 
definition 
odelp program odelp program pair finite set observations finite set defeasible rules 
program set non contradictory case literal 
example 
fig 
shows odelp program assessing status employees 
observations describe john poor performance job john currently sick peter poor performance rose applicant demands high salary 
defeasible rules express prefers hire employers require low salary 
employee demands high salary usually hired exceptional case recommended hire applicant 
remaining rules deal evaluation employees performance responsibility job 
inference mechanism odelp program query posed corresponds ground literal supported argument 
arguments built poor performance john 
sick john 
poor performance peter 
high salary rose 
applicant rose 
rose 
hire high salary applicant 
hire high salary applicant 
hire high salary applicant 
suspend responsible 
suspend responsible 
responsible poor performance 
responsible performance 
responsible poor performance sick 
fig 

odelp program assessing status employees basis defeasible derivation computed backward chaining applying usual sld inference procedure logic programming 
observations play role facts defeasible rules function inference rules 
addition provide proof supporting ground literal proof non contradictory minimal considered argument odelp 
formally definition 
argument sub argument odelp program argument ground literal denoted subset ground instances defeasible rules 
exists defeasible derivation 
non contradictory 
minimal respect set inclusion satisfying 
arguments say subargument iff 
note defeasible rules arguments obtain ground instances changing variables ground terms variables name replaced term 
argumentation frameworks arguments odelp attack 
situation captured notion counterargument 
defeat arguments defined combining counterargument relation preference criterion partial order 
specificity syntactic preference criterion default odelp alternative criteria easily 
specificity favors arguments direct informed contain specific information 
definition 
counter argument argument counter argues argument literal sub argument complementary literals 
definition 
defeater argument defeats literal exists sub argument counter argues 
strictly preferred preference criterion proper defeater 
unrelated blocking defeater 
defeaters arguments may turn defeated 
complete dialectical analysis required determine arguments ultimately accepted 
analysis results tree structure called dialectical tree arguments nodes labeled undefeated nodes defeated nodes marking procedure 
formally definition 
dialectical tree dialectical tree argument denoted recursively defined follows 
single node labeled argument defeaters proper blocking dialectical tree 

qn defeaters proper blocking dialectical tree obtained labeling root node making node parent root nodes dialectical trees 
qn definition 
marking dialectical tree argument dialectical tree 
leaves marked node 

inner node marked node iff child marked node 
node marked node child marked node 
dialectical analysis may situations give rise fallacious argumentation 
odelp dialectical trees ensured free applying additional constraints building argumentation lines different possible paths dialectical tree 
detailed analysis issues outside scope 
query odelp program say warranted wrt iff exists argument root associated dialectical tree marked node 
definition 
warrant argument literal associated dialectical tree 
warrant root marked node 
solving query odelp accounts trying find warrant shown example 
example 
consider program shown example suspend john query wrt program 
search warrant suspend john result argument suspend john defeaters suspend john responsible john suspend john responsible john responsible john poor performance john 
suspend john responsible john responsible john poor performance john sick john 
responsible john poor performance john sick john 
specificity preference criterion suspend john blocking defeater suspend john responsible john proper defeater suspend john associated dialectical tree shown fig 
marking procedure determines root node suspend john node suspend john warranted 
fig 

dialectical tree example modeling beliefs perceptions odelp odelp models beliefs agent simple way program representing agent knowledge literal believed agent iff warranted 
particular different attitudes distinguished wrt literal believe true warranted believe false believe warranted believe undecided cases apply 
consistency basic property agent beliefs sense possible believe simultaneously literal complement 
agents odelp naturally satisfy requirement 
full discussion odelp properties proof interested reader consult 
odelp mechanism updating knowledge base agent simple effective 
assume perception carried devices detect changes world report new facts literals 
actual devices depend particular application domain characterization outside scope 
assumption perception mechanism new perceptions supersede old ones 
perception reported new fact added set observations 
new perception contradictory necessarily 
case simple update function computes new observation set 
new perceptions preferred perception mechanism source conflict change state world 
knowledge odelp truth maintenance systems tms precompiled knowledge helps improve performance problem solvers 
similar technique odelp address real time constrains required mas setting 
give brief overview tms describe mechanism knowledge odelp 
truth maintenance systems brief overview truth maintenance systems tms defined doyle support tools problems solvers 
function tms record maintain reasons agent beliefs 
doyle describes series procedures determine current set beliefs update accord new incoming reasons 
view rational thought deemed process finding reasons attitudes 
attitude belief desire rational supported acceptable explanation 
tms basic data structures nodes represent beliefs justifications model reasons nodes 
tms believes node justification node believes nodes involved 
may circular assumptions special type justifications involve nodes 
justifications nodes may added retracted accounts truth maintenance procedure necessary revisions set beliefs 
interesting feature tms particular type justifications called non monotonic tentative guesses 
non monotonic justification bases argument node current beliefs certain nodes lack beliefs nodes 
node supported non monotonic justification called assumption 
tms solve part belief revision problem general problem solvers provide mechanism making non monotonic assumptions 
doyle mentions performance significantly improved overhead required record justifications program belief excessive consider expense keeping records 
information derivations discarded information continually irrelevant assumptions changed 
dialectical databases odelp existing tms goal integrate precompiled knowledge agent framework odelp order address real time constraints mas setting 
want odelp agent able answer queries efficiently avoiding recomputing arguments computed 
note different options integrating precompiled knowledge odelp program simple approach recording argument computed far 
large number arguments obtained relatively small program resulting large database 
hand arguments obtained different instances defeasible rules 
recording generated argument result storing arguments structurally identical differing constant names build corresponding derivations 
important problem arises perceptions 
note set arguments built program depends observation set 
updated new perceptions arguments previously derivable may longer 
precompiled knowledge depends updated new perceptions appear 
clearly alternative suitable new perceptions frequent dynamic environments 
consequence precompiled knowledge managed independently set observations 
previous analysis define database structure called dialectical database keep record possible potential arguments odelp program defeat relationships 
potential arguments formed non grounded defeasible rules depending set rules discuss attack relationships potential arguments captured 
potential arguments defeat relationships stored dialectical database 
introduce formal definitions definition 
instance set defeasible rules set defeasible rules 
set formed ground instances defeasible rules instance iff instance defeasible rule instance defeasible rule example 
instance definition 
potential argument set defeasible rules 
subset potential argument literal noted exists non contradictory set literals instance rules argument wrt definition set stands state world set observations obtain instance set defeasible rules argument defined def 
note set necessarily non contradictory model coherent scenario 
precompiled knowledge associated odelp program involve set potential arguments built defeat relationships 
potential arguments obtain record potential argument devised algorithm efficiently identifies potential arguments distinguished subsets rules 
potential arguments save time computing arguments solving queries 
computing query ground literal odelp interpreter search potential argument particular instance argument wrt defeat relationships potential arguments recording information defeat relationships potential arguments useful helps speed construction dialectical trees solving queries see 
extend concepts counterargument defeat potential arguments 
potential argument counter argues literal potential sub argument contradictory literals 
note potential counter arguments may may result real conflict instances arguments associated corresponding potential arguments 
cases instances arguments exist scenario consider potential arguments contradictory observations 
notion defeat extended potential arguments 
specificity syntactic criterion particular version specificity applicable potential arguments determining potential argument informed direct 
potential arguments associated defeat relation formally define notion dialectical databases associated odelp program definition 
dialectical database odelp program 
dialectical database denoted db tuple dp db 
set 
ak qk potential arguments built 
space reasons algorithm detailed 
interested reader referred 
note contradictory literals 
idea applied identify contradiction potential arguments 

dp db relations elements pair dp respectively db holds proper respectively blocking defeater example 
consider program example 
dialectical database composed potential arguments hire hire high salary applicant 
hire hire high salary applicant 
hire hire high salary applicant 
suspend suspend responsible 
suspend suspend responsible responsible poor performance 
suspend suspend responsible 
suspend suspend responsible responsible performance 
suspend suspend responsible responsible poor performance sick 
responsible responsible poor performance 
responsible responsible poor performance 
responsible responsible poor performance sick 
defeat relations dp db 
relations depicted properly defeats indicated arrow blocking defeat distinguished dotted arrow 
fig 

dialectical database corresponding example 
speeding inference odelp dialectical databases odelp program dialectical database db understood graph possible dialectical trees computable obtained 
original odelp framework detailed section solving query wrt program accounted obtaining warranted argument discussed computing warrant involves intermediate steps computationally expensive computing arguments detecting defeaters building dialectical tree 
dialectical database speed inference process odelp keeping track possible potential arguments defeat 
query extended odelp framework including dialectical database select potential argument ground instance instantiated supporting dp db relationships db potential defeaters identified instantiated 
describe inference process assisted dialectical databases algorithm 
obtains warrant query program algorithm considers potential arguments instance tries find instance argument respect definition 
done function argument case instance exists returns parameter analyzed see warrant relations dp db find defeaters system finds instance potential defeaters conflict function acceptable checks arguments respect state function see algorithm determines marking defeaters marked nodes nodes information compute state algorithm inference process input output warrant argument looks instances potential arguments support state undefeated dp dp determines state defeaters instance defeats acceptable state undefeated state defeated sets state main argument defeaters state undefeated return instances remains undefeated warrant state algorithm inference process takes input odelp program argument interference support argumentative lines point respectively denoted il sl 
simply put il represents set arguments level actual path tree construction sl arguments odd level 
state algorithm works algorithm analyzing defeaters define state 
extra condition met defeaters comply rules established avoiding 
test performed function valid 
conclude summarizes main elements odelp agent architecture 
agent knowledge represented odelp program perceptions environment result changes set observations handled appropriate updating mechanism discussed previously 
order solve queries agents agent relies odelp inference engine 
queries speeded searching potential arguments stored dialectical database applying algorithms discussed 
final answer query undecided warrant status query respect algorithm state input il sl output state state undefeated pair dp db instance uses stored defeat relation find defeaters instance acceptable valid il sl checks defeater gives raise 
sl state il sl undefeated state defeated il state il sl undefeated state defeated recursive call defeaters return state odelp program observations defeasible rules dialectical base updating mechanism odelp inference engine perceptions queries answers fig 

agent architecture odelp underlying framework worked example section toy example illustrate dialectical database speed inference odelp 
consider program example agent knowledge model status different employees 
associated dialectical database db shown example 
suppose agent decide john suspended considering query suspend john 
shown example solving query wrt involved dialectical tree arguments see 
analyze agent proceed perform inference dialectical database db 
algorithm potential argument instantiated resulting argument suspend john responsible john responsible john poor performance john sick john dialectical database db follows defeaters see list pairs db example respectively instantiated suspend john responsible john suspend john responsible john responsible john poor performance john sick john responsible john poor performance john sick john note information db associated pairs dp db consider links graph new defeaters potential arguments defeat 
consequence dialectical tree identical shown computed basis potential arguments dialectical database associated defeat relationships 
possible potential arguments supporting suspend john 
warrant suspend john 
consider different situation sample program suppose facts applicant susan high salary susan added new observations 
order solve query hire susan wrt dialectical database db relying different potential arguments 
instances obtained relying new perceived facts 
case potential argument instantiated hire susan hire susan high salary susan applicant susan information available db defeater detected argument obtained instance wrt current set defeater hire susan hire susan warranted supported argument hire susan defeaters 
applicant susan may ask lower salary wants get job 
results new perception agent updating adding high salary susan consequently removing high salary susan 
previous situations change performed existing dialectical database 
set beliefs agent changes hire susan longer believed argument supporting hire susan built instance potential argument db 
contrary hire susan set beliefs warranted tree single node argument hire susan high salary susan applicant susan 
solid theoretical foundations agent design proper formalisms knowledge representation reasoning 
defined framework representing knowledge beliefs agents dynamic environments new perceptions modify agent view world 
comply real time issues modeling agent interaction mas setting proposed notion dialectical databases 
discussed main issues integration component odelp building dialectical database adapting specificity criterion potential arguments modifying inference process take advantage new component 
affirm precompiled knowledge improve performance argument systems way truth maintenance systems assist general problem solvers 
believe technique applied argumentative frameworks allowing new set applications 
part current involves extending analysis odelp properties context multiagent systems 
working complexity odelp considers construction dialectical databases confirms results obtained empirically 
research partially supported projects tic tic ram program de ciencia spain argentina cic argentina general de ciencia de la universidad nacional del sur nacional de cient pict 
authors anonymous reviewers providing helpful comments improve final version 

wooldridge multiagent systems 
john wiley sons 
ches evar maguitman loui logical models argument 
acm computing surveys 
prakken vreeswijk logical systems defeasible argumentation 
gabbay ed handbook philosophical logic 
volume 
kluwer academic publisher 
gelfond lifschitz classical negation logic programs disjunctive databases 
new generation computing 
garc simari defeasible logic programming argumentative approach 
theory practice logic programming 
ches evar simari godo logic programming framework possibilistic argumentation vague knowledge 
proc 
uncertainty artificial intelligence conference uai banff canada appear 

gomez ches evar hybrid approach pattern classification neural networks defeasible argumentation 
proc 
intl 
th flairs conference 
palm beach fl usa aaai 
ches evar maguitman argument recommender system solving web search queries 
proc 
intl 
ieee conference intelligent systems 
bulgaria appear 

ches evar maguitman argumentative approach natural language usage web corpus 
proc 
european conference artificial intelligence ecai 
valencia spain appear 
pollock perception seriously 
proceedings st international conference autonomous agents 

simari loui mathematical treatment defeasible reasoning implementation 
artificial intelligence 
prakken sartor argument extended logic programming defeasible priorities 
journal applied non classical logics 
poole comparison theories preferring specific explanation 
proceedings ninth international joint conference artificial intelligence ijcai 
en din 
phd thesis universidad nacional del sur bah argentina 
simari ches evar garc role dialectics defeasible argumentation 
proceedings xiv de la para ciencias de la computaci 
cs uns edu ar html 

alferes pereira logic program semantics kinds negation 
proceedings joint international conference symposium logic programm washington usa 
katsuno mendelzon difference updating knowledge base revising 
gardenfors ed belief revision 
cambridge university press 
doyle truth maintenance system 
artificial intelligence 
baral gelfond reasoning agents dynamic domains 
minker ed workshop logic artificial intelligence college park maryland computer science department university maryland 
