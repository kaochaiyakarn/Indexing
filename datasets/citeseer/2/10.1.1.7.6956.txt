lower bounds non binary constraint optimization problems pedro meseguer javier larrosa mart anchez iiia csic campus uab spain iiia csic es dep 
lsi upc jordi girona barcelona spain larrosa lsi upc es 
necessity non binary constraint satisfaction algorithms increasing real problems inherently non binary 
considering overconstrained problems partial forward checking solving algorithm analyze lower bounds proposed binary case extending non binary case 
show techniques initially developed context reversible dac applied general case deal constraints arity 
discuss issues raised non binary lower bounds study computational complexity 
provide experimental results new lower bounds overconstrained random problems including constraints di erent weights 
context constraint satisfaction increasing attention devoted soft constraints years 
constraint soft violated solution making solution unacceptable 
constraint hard satis ed solution 
soft constraints express user preferences satis ed possible necessarily enhancing greatly expressiveness constraint programming 
inclusion soft constraints extended csp schema considers hard constraints vcsp semiring csp schemas able model overconstrained problems solution complete assignment satis es hard constraints best respects soft ones 
parallel theoretical advances new algorithms appeared able solve increasing eciency di erent types overconstrained csps 
simplicity reasons algorithms assume binary constraints 
theoretical equivalence binary non binary formulations see applicability overconstrained csps nowadays widely recognized interest solving directly non binary constraints real problems 
csp supported ist programme commission european union project ist spanish cicyt project tap 
experience shown real problems inherently non binary solving natural formulation causes signi cant improvements 
aim bridge gap state art algorithms solving requirements real problems extending previously developed algorithms binary soft constraints non binary case 
done constrained optimization problems class problems includes overconstrained csps addition costs satis ed constraints objective function minimized searching solution 
particular class includes max csp problem constraints soft weight 
results easily adapted kinds problems including soft constraints 
structure follows 
section basic concepts 
section study binary lower bound formulations 
section develop corresponding non binary lower bounds analyzing usage partial forward checking algorithm 
section provide experimental results lower bounds overconstrained random ary problems 
section contains directions research 
preliminaries csp cop nite constraint satisfaction problem csp de ned triple fx xng set variables fd xn collection nite domains initial set possible values current set possible values set constraints variables 
constraint ordered set variables var called scope speci es relation rel allowed combinations values variables var 
element rel tuple 
search valid tuples reduced rel rel formed values 
element rel tuple assignment values variables complete involves variables partial 
solution complete assignment satisfying constraints 
solving csp np complete problem 
scope size constraint arity 
arity problem maximum arity constraints 
sequel denote number variables largest domain size number constraints problem arity 
letters denote variable indexes referred variable denote values pair denotes value variable assume constraints expressed extensionally relations 
constraints expressed intentionally mathematical formula procedure 
join relations rel rel denoted rel rel set tuples var var satisfying constraints accordingly join tuples union match common variables empty tuple 
subset variables involved tuple var 
projection tuple particular variable denoted 
projection set subset denoted 
nite constraint optimization problem cop de ned triple csp case set cost functions ff denote preferences tuples 
cost function var set non negative real numbers 
low values mean high preferences tuple high values mean low preferences extreme values cost functions represent preferred tuples respectively tuple consistent constraint iif inconsistent 
objective function called global cost function sum individuals cost functions var solution complete assignment minimizes 
solving cop np hard problem 
problems soft constraints naturally formulated cops 
observe loss generality hard constraints expressed model functions returning values allowed tuples disallowed ones 
max csp problem formulated cop constraints returning values allowed tuples disallowed ones 
solving cop partial forward checking pfc depth rst search algorithm solve cops 
follows branch bound bb schema 
point search set assigned past variables set unassigned ones 
current partial assignment tuple set regarding constraints cp set constraints having past variables scope cf set constraints having variables scope cpf set constraints having past variables scope 
bb traverses search tree de ned problem keeps cost best solution far complete assignment minimum global cost explored part search tree 
cost upper bound ub alternatively say tuple satis es completely ith constraint tuple violates completely ith constraint 
problem solution 
node bb computes underestimation global cost leaf node descendant current 
value lower bound lb best solution long current search path maintained 
ub lb current best solution improved current node current branch pruned 
schema pfc performs lookahead node assessing impact current assignment set lookahead allows improve quality lb computed bb 
addition lookahead enables computation lb ia specialization lb value variable ub lb ia value removed solution better current 
removed values restored pfc backtracks node eliminated 
binary case binary max csp types inconsistency counters computing lower bounds 
distance distance cp cp rel inconsistency counts ic ia cpf ji var rel directed arc inconsistency counts static variable ordering dac ia cf jvar fi jg rel reversible dac directed graph cf dac ia cf jvar fi jg edges rel arc inconsistency counts ac ia cf ji var rel russian doll search rds cf min cf max csp assumes tuple unsatisfying constraint cost 
simpli cation hold general 
real problems include constraints unsatis ed di erent costs 
problems formulated terms cops constraints represented cost functions 
de ne initial cost value constraint min var search proceeds domains change 
past variable domain reduced assigned value 
domains may reduced value pruning 
de ne current cost value constraint min var notions previous counters easily generalized cops distance distance cp cp var inconsistency counts ic ia cpf directed arc inconsistency counts static variable ordering dac ia cf var fi jg reversible dac directed graph cf dac ia cf var fi jg edges arc inconsistency counts ac ia cf russian doll search rds cf min cf counters longer record numbers inconsistencies aggregate costs caused inconsistencies cops 
maintain names case homogeneity reasons 
elements lower bounds proposed 
appear 
lower bounds lb lb require static variable ordering 
counters dac ia dac ia ac ia de ned terms 
equally de ned terms 
case word maintained added names emphasize counters maintained updated search account value deletions domains 
requires arc consistency algorithm 
approach followed 
lb distance cp min lb distance cp min lb distance cp min rds cf lb distance cp min lb distance cp min fig 

lower bounds binary cops 
non binary case lower bounds binary case constraints cpf variable scope 
longer true non binary case constraint cpf may variable scope 
extensions inconsistent recorded variables lower bound added set cost inconsistency counted times variables involved constraint 
prevent costs inconsistencies recorded variables 
problem appears considering constraint cf inconsistencies recorded variables order allow safe lower bound computation addition contributions variables 
cpf cf select variables variable recording costs inconsistencies 
variable denoted var may change solving process variables constraint 
example problem appears 
max csp context idea section ecai workshop modelling solving problems constraints 
similar approach section poster cp conference 
problem occurs ic ia dac ia counters 
graph point view constraint hypergraph formed cpf cf directed sense hyperedge points nodes connects 
hyperedge representing constraint points node representing variable var denoting pf directed hypergraph formed cpf directed hypergraph formed cf generalize binary ic ia dac ia counters follows 
fa bg ffg var ic ic lb ic ic lb fig 

simple problem composed variables ternary constraint assigning variable possible extensions current tuple inconsistent recording cost inconsistencies variable causes repeat cost computation lower bound renders unsafe left 
cost inconsistencies recorded variable causing safe lower bound computation right 
inconsistency counts pf directed hypergraph cpf ic ia pf cpf reversible dac directed hypergraph cf dac ia cf maintain ic dac names pedagogical reasons keep parallelism binary case 
observe non binary case counters record costs directed inconsistencies cost inconsistency recorded 
keeping meaning distance cp ac ia rds cf binary case lower bounds non binary cops fig 

correspond binary ones section index lb subsumed lb lb pf requires static variable ordering 
binary case dac ia de ned terms de ned terms 
case dac ia maintained updated lb pf distance cp min pf lb pf distance cp min pf rds cf lb pf distance cp min pf lb pf distance cp min pf fig 

lower bounds non binary cops 
search account value deletions 
arc consistency strategy purpose 
partial forward checking pfc algorithm proposed non binary lower bounds generic lower bound computed function lb 
follows pfc algorithm 
checks variables exists updates lines best solution distance respectively 
selects variable line iterates feasible values line 
assigns value variable computes new distance newd line checks lower bound reached upper bound line 
lookahead performed returning new domains line 
empty domain produced greedy optimization procedure executed redirecting hypergraphs pf lb lb lb lb lb order increase lower bound getting optimum redirection hypergraphs np hard problem redirect hyperedges aiming contribution lower bound 
new lower bound reach upper bound line tries remove value variable delete procedure line 
done redirecting hypergraphs pf lb lb lb lb lb order get maximum contribution lb jb empty domain produced line process goes recursive call line 
algorithm perform maintenance counters values pruned imply rede ning counters substituting 
inclusion counter maintenance non binary case conceptually direct computationally expensive 
procedure pfc fd pf fd newd distance lb lookahead fd pf pf lb delete pf pfc newd pf fig 

partial forward checking 
complexity analysis subsection discuss time complexity computing proposed lower bounds 
complexity counter distance cp requires check current assignment consistent constraint cp considering consistency check constant time operation distance cp time 
ic ia pf requires explore constraints cpf having var constraints 
compute rel empty 
free variables search right values consequently done exp consistency checks 
cost computing ic ia exp 
dac ia exp 
exponential part individual contribution constraint done prior search recorded internal data structure 
ac ia basically equivalent compute dac ia complexity 
rds cf amounts solving problems size number variables 
clearly time exp done pre process prior search 
account previous complexities easy see complexity computing lower bounds considered 
di erentiate lb pre processing complexity node complexity exp exp exp exp exp exp exp table 
complexity computing lower bounds done node repeated number times exponential problem size done prior search time 
sake clarity easy comparison complexities depicted table 
limited versions complexity node lower bounds exponential problem arity 
consequence may practical problems having large arity constraints 
closer look see complexity exponential number variables constraint may scope 
limit constraints processed having variables scope assure cost processing complexity threshold having accurate inconsistency counters 
controlled parameter new counters de ned follows inconsistency counts pf directed hypergraph cpf ic ia pf cpf fj reversible dac directed hypergraph cf dac ia cf arc inconsistency counts ac ia cf clearly time complexity bounded exp increment produces detection inconsistencies 
parameter controls trade overhead accuracy 
idea processing constraints variables context non binary forward checking 
experimental results evaluated performance pfc algorithm proposed lower bounds random cops arity 
random cop class arity characterized hn wmin wmax number variables number values variable graph connectivity de ned ratio existing constraints total number possible constraints constraint tightness de ned ratio value tuples inconsistent constraint total number possible tuples constrained variables inconsistent value tuples randomly selected random csp case 
tuple inconsistent constraint value randomly selected integer interval wmin wmax 
model experimented problem classes 
rst class represents max csp problems inconsistent tuples cost 
second class represents weighted csp costs inconsistent tuples randomly distributed 
connectivity low high constraint arity 
tightness varies get overconstrained instances 
problem solved pfc di erent lower bounds including limited versions 
lb pfc uses static variable ordering de ned heuristically decrease bandwidth 
pfc uses domain size divided forward degree dynamic variable ordering 
values selected randomly 
computation di erent lower bounds shares code data structures possible 
experiments performed sun ultra 
point averaged executions 
rst experiment aims evaluating performance redirecting directed hypergraph pf increment lower bound 
technique introduced binary dac 
simplest lower bound lb problems solved pfc optimizing lower bound removing lines standard pfc 
results appear 
see optimizing lower bound implies decrement number visited nodes 
max csp problems causes decrement cpu time 
weighed csp mean cpu time executions practically equal optimization overhead compensates optimized savings 
second experiment tries assess quality di erent lower bounds 
random problems constraints arity probability value arc inconsistent extremely low 
consider lb lb dac ac counters practically zero instances close 
provide results hypergraph pf randomly selected 
redirected optimizing lb form redirection allowed 
algorithm selects variable constraint variables scope variables randomly selected new contribution constraint terms ic lost 
mean nodes lb lb mean time lb lb mean nodes lb lb mean time lb lb fig 

mean visited nodes cpu time required pfc lb lower bound optimization problem classes tested 
lb lb limited versions constraints cpf propagated variables scope respectively 
observe lb dominates lb visited nodes cpu time problem classes tested 
happens limited versions 
weighted csp point lb lb reduction visited nodes increasing 
considering lb problem classes mean number visited nodes increases faster 
node lower threshold number visited nodes dominates dominates 
max csp threshold nodes occurs medium best trade overhead accuracy considered problems 
weighted csp threshold nodes occurs high best trade 
similar analysis applied lb third experiment considers random problems constraints di erent arities 
generated instances variables values variable constraints distributed follows constraints arity arity arity arity 
constrained variables selected randomly 
constraints shared tightness 
previous experiments considered types problems max csp inconsistent tuples mean nodes lb lb ic lb ic lb ic lb lb ic lb ic lb ic mean time lb lb ic lb ic lb ic lb lb ic lb ic lb ic mean nodes lb lb ic lb ic lb ic lb lb ic lb ic lb ic mean time lb lb ic lb ic lb ic lb lb ic lb ic lb ic fig 

mean visited nodes cpu time required pfc lb lb limited versions problem classes tested 
cost weighted csp cost inconsistent tuples randomly distributed 
experimented limited versions lb lb di erent ic dac propagation 
best combinations 
observed best limited versions lb follows max csp ic dac weighted csp ic ic dac 
agreement previous discussion limited versions lb dac contribution lb limited binary constraints higher arities cause low probability dac random instances playing secondary role respect ic counters 
experimental results coming random instances lower bounds choice non binary pfc low connectivity medium high tightness limited versions lb lb main contribution lower bound comes ic counters limited amount propagation ers best trade savings caused propagation overhead 
dac counters play secondary role limited 
means experimental results prevent bounds lb applicable speci problem types 
consider lb applicable real problems including arc inconsistent values constraints 
mean nodes lb ic lb ic lb ic dac lb ic dac mean time lb ic lb ic lb ic dac lb ic dac mean nodes lb ic lb ic lb ic dac lb ic dac mean time lb ic lb ic lb ic dac lb ic dac fig 

mean visited nodes cpu time problem classes constraints di erent arities 
generalized binary lower bounds pfc algorithm developed max csp cop inconsistent tuples may different costs 
extended lower bounds non binary case 
generalized idea directing constraints introduced binary constraints variables constraint variables scope 
means exists variable constraint cost inconsistencies recorded 
applied idea lower bound optimization local search 
high complexity lower bound computation limited versions propagation restricted constraints number variables scope limit 
experimental results random instances show limited versions er best performance terms search ort 
practical theoretical needed fully understand best way solve cops 
practical side modelling solving aspects cops number issues answer near order consolidate constraint technology type problems 
complete empirical evaluation needed including real problem instances 
theoretical side development new lower bounds speci local consistencies soft constraints avoid current limitation counters accumulate propagated inconsistencies 
exploitation constraint graph topology speed resolution cops 
authors anonymous reviewers constructive criticisms 

ane 
weighted arc consistency technique max csp 
proc 
th ecai 

meseguer freuder larrosa 
forward checking non binary constraint satisfaction 
non binary constraints workshop ijcai 

montanari rossi 
constraint solving semirings 
proc 
th ijcai 

freuder wallace 
partial constraint satisfaction 
arti cial intelligence 

larrosa 
boosting search variable elimination 
proc 
th cp 

larrosa meseguer 
exploiting dac max csp 
proc 
th cp 

larrosa meseguer schiex 
maintaining reversible dac max csp 
arti cial intelligence 

larrosa dechter 
dual representation non binary semiring csps 
modelling solving soft constraints workshop cp 

meseguer 
lower bounds non binary max csp 
modelling solving constraint problems workshop ecai august 

petit bessi ere puget 
original constraint approach solving constrained problems 
proc 
th cp september 

schiex fargier verfaillie 
valued constraint satisfaction problems hard easy problems 
proc 
th ijcai 

schiex 
maximizing reversible dac lower bound max csp np hard 
tec 
report 

schiex 
arc consistency soft constraints proc 
th cp 

smith 
phase transition mushy region constraint satisfaction problems 
proc 
th ecai 

verfaillie tre schiex 
russian doll search 
proc 
th aaai 

wallace 
directed arc consistency preprocessing 
meyer editor selected papers ecai workshop constraint processing number lncs 
springer berlin 
