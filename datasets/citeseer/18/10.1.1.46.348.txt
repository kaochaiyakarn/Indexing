university timetabling constraint logic programming hans joachim goltz dirk gmd german national research center information technology gmd berlin goltz gmd de 
timetable temporal arrangement set meetings constraints satisfied 
timetabling problem suitably modelled terms set constraints 
constraint logic programming develop methods techniques concepts combination interactive automatic timetabling university courses school curricula 
exemplary application timetabling system developed medical faculty humboldt university berlin 
timetabling system flexible take account special user requirements allow constraints modified easily basic conceptual change timetabling necessary 
essential component automatic heuristic solution search interactive user intervention facility 
user able alter timetable schedule hard constraints violated 
constraint logic programming finite domains rapidly growing research field aiming solution large combinatorial problems 
reallife problems constraint logic programming approach applied great success 
timetabling problem defined scheduling certain number courses satisfy specific conditions particular constraints regarding demands limited resources 
called hard constraints satisfied constraints satisfied far possible termed soft constraints 
timetabling problem suitably modelled terms set constraints 
constraint logic programming allows formulation constraints declarative manner 
timetabling long known belong class problems called np complete see 
existing software products timetabling impose severe restrictions kind timetables generated 
addition flexible allow anomalous requirements integrated special features virtually user organization taken account see 
gupta ed practical aspects declarative languages lncs springerverlag pp 
automated timetabling current relevant field research 
second international conference automated timetabling held 
different software methods approaches available automated timetabling see 
various constraint logic programming approaches discussed 
constraint logic programming language solve timetabling problem computer science department 
language contains user defined heuristics search methods allows greater flexibility declaration forward look ahead constraints languages timetabling problems computer science department addressed constraint logic programming language ecl ps selecting high level constraint language constraint handling rules chr implementation language 
language chr developed tom fruhwirth 
existing domain solver written chr solver timetabling problem developed requiring lines code 
look application constraint logic programming language chip university examination timetabling describe global constraint cumulative 
different labelling strategies discussed 
wurtz solution timetabling problem german college language oz 
language developed dfki saarbrucken germany concurrent language allowing functional object oriented constraint programming 
describes experience constructing large scale modular timetable constraint logic programming 
arithmetic constraints built constraint atmost problem modelling 
hybrid approach automatic generation university college timetables 
approach combines features constraint logic tabu search 
approaches discussed separately 
research concerned development methods techniques concepts combination interactive automatic timetabling university courses school curricula 
automated solution search implemented way normally allows solution relatively short time solution exists 
timetabling systems flexible take account special user requirements allow constraints modified easily basic conceptual change timetabling necessary 
essential component automatic heuristic solution search interactive user intervention facility 
user able alter timetable schedule hard constraints violated 
research focuses areas concepts methods modelling timetabling problems study influence different modelling techniques solution search development comparative analysis different methods techniques heuristic solution search interactive user intervention solution search graphical interface 
goals met constraint logic programming approach best suited needs 
methods techniques concepts developed development tested elaborated prototypical applications 
exemplary application combined interactive automatic system developed medical faculty humboldt university berlin 
system called realizes timetabling means constraint logic programming special algorithm efficient search 
test phase successfully completed 
generated timetables output html files available internet 
describe generation timetabling system 
section gives brief description timetabling problem 
discussion constraint logic programming problem representation search methods 
remarks implementation results 
problem description students medicine attend courses covering medical fields 
different types courses lectures seminars 
seminars held groups students 
student particular semester participates groups groups semester 
buildings medical faculty humboldt university different locations berlin 
carried clinics hospitals parts berlin 
important constraints timetabling problem courses quarter hour may run different lengths time 
restrictions respect starting time course 
lectures subject may scheduled day 
group lectures seminars overlap 
number seminars department research group held time limited 
courses held certain weeks arrangements possible week weeks weeks odd numbers weeks numbers weeks weeks 
lectures subject carried parallel different parts faculty 
student choose parallel lectures attend 
timetabling involves allocating rooms individual lectures 
lectures held certain specified rooms cases room matches requirements 
varying distances different course locations taken account 
starting time preferences courses preferred rooms lectures taken account possible 
constraint soft constraint 
constraints hard constraints satisfied 
constraint logic programming constraint logic programming clp generalization logic programming unification replaced constraint handling constraint system 
clp combines logic programming efficiency constraint solving algorithms 
constraint logic programming paradigma constraint satisfaction problem represented horn clause logic programs clause bodies may contain constraints 
constraints generated incrementally runtime passed constraint solver applies domain dependent constraint satisfaction techniques find feasible solution constraints 
constraint logic programming constraints finite integer domains clp fd established practical tool solving discrete combinatorial problems 
constraint logic programming language chip clp languages prolog iii clp 
developed european computer industry research centre ecrc munich developed marketed french firm 
current version chip differs particular earlier constraint systems inclusion global constraints 
chip system contains different constraint solvers 
constraints finite domains 
built constraints clp fd part chip briefly described 
constrained variable domain defined 
variable called domain variable 
usual arithmetic constraints equality disequality inequalities applied linear terms built domain variables natural numbers 
alldifferent constraint symbolic constraint expresses constraint members list domain variables integers different values 
constraint logical equivalent conjunction disequalities 
disadvantage conjunction disequalities consistency methods conjunction quite weak disequalities considered isolation 
symbolic constraints complex conditions concerning relation domain variables 
change domain variable may effect variables occurring constraint 
useful symbolic constraint element list value specifies th element nonempty list list natural numbers value value value natural number domain variable free variable 
global constraints domain specific knowledge obtain better propagations results applied large problem instances 
complex conditions sets variables modelled declaratively constraints multiple contexts 
global constraints specialized consistency methods greatly improve efficiency solving real life problems 
basic ideas global constraints cumulative rest section 
cumulative constraint introduced solve scheduling placement problems 
simplified form constraint cumulative sn dn rn sn dn rn nonempty lists domain variables natural numbers natural number 
usual interpretation constraint single resource scheduling problem represents starting time event duration amount resources needed event 
total amount resources available relevant point time 
cumulative constraint ensures time point schedule amount resources consumed exceed limit mathematical interpretation constraint gamma holds sigma gamma constraint included chip handle multidimensional placement problems 
basic constraint takes arguments list dimensional rectangles origin length domain variables respect dimension 
dimensional rectangle represented tuple xn ln origin length rectangle th dimension 
constraint ensures dimensional rectangles overlap 
gives example dimensional rectangles nonoverlapping constraint 
largest rectangle instance determined second list origin point lengths dimensions special conditions dimensional rectangles expressed constraints 
consistency methods constraints complex numerous possibilities inferring new information depending variables known 
fig 

problem representation timetabling problem suitably modelled terms set constraints 
constraints problem representation declarative 
section problem representation described briefly 
method chosen problem representation considerable influence solution search 
success search depends directly model chosen 
furthermore modelling options depend chosen solver 
constraint solver finite domains constraint logic programming language chip 
global constraints built chip particularly useful problem modelling 
course starting time represented domain variable 
assume course held days certain week theta theta time units considered 
means initially domains starting time variables defined natural numbers attributes room week location course may domain variables values unknown 
possible values attributes mapped natural numbers 
exception constraint constraints timetabling problem directly represented built constraints 
soft constraint integrated solution search 
conditional constraints 
constraints easily satisfied choice domains variables starting time corresponding restrictions domains 
analogously constraint satisfied 
note capacity room taken account choice domain room variable 
lectures scheduled day lecture scheduled day lecture 
lectures subject features determine lecture scheduled day 
example assume domain variables starting times lectures 
furthermore new domain variable time units days 
relations 

ensure constraint method modelling efficient method suggested constraint 
lecture domain variables day hour considered additionally considered constraint day hour generated 
constraint modelled predicate alldifferent respect day variables 
example shows different propagation properties 
consider question arithmetic relations finite domain solver indicated chip day hour day hour day hour day hour alldifferent day day day 
get answer day hour hour day day hour hour corresponding question method 


case day modelled constraints 
get answer question method domain variable reduced method suggested 
method lectures features 
method cases 
extend method cover case durations lectures different 
case domain variables defined duration variables linked constraint constraints represented cumulative constraints 
example sn domain variables starting times courses held certain department dn corresponding lengths time 
max maximum number courses department give time constraint modelled cumulative sn dn max group constraint modelled analogously max equal case 
unused arguments mentioned 
constraints ensure constraints satisfied course represented dimensional rectangle dimensions starting time week parallelism 
allocation rooms required attribute room considered fourth dimension 
examples assume week parallelism need considered 
sn domain variables starting times dn corresponding durations rn domain variables room allocations 
constraint modelled constraint length dimension room unit sn dn rn constraint modelled cumulative constraint additional domain variables xn required 
variables linked equation greater equal maximum number time units 
similar method modelling cumulative constraints discussed 
consider simple example methods lectures duration time units lectures duration time unit rooms 
lectures scheduled time units second fifth lectures allocated room 
furthermore assume lecture scheduled time point room 
example modelled constraint follows 
answer question cumulative constraint question modelled cumulative 
unused arguments mentioned 
case answer question domains variables reduced conditions defined constraint 
particular constraint solver determines equal constraints constraint dimensions starting time location 
breaks needed courses 
length break depends distance locations 
breaks considered dummy courses 
dummy course defined course location 
starting time dummy course equal finishing time corresponding course 
duration dummy course defined symbolic built constraint element depends selected location corresponding course 
consider simple example kind modelling 
lectures held locations allow distance different locations break time units scheduled location break time unit sufficient 
duration lectures assumed time units 
sa sb variables starting time la lb variables location lectures 
example assume lecture scheduled lecture consider dummy courses breaks needed lecture variables starting times dummy courses denoted respectively 
denote variables duration activities 
constraints implemented example sa la sb lb sa sb la lb element la element la sa sa sa la sb lb sa sb 
assume lecture scheduled time point questions demonstrate interdependence variable sb choice locations la lb example sa la sb lb sa la lb 
sb sb example sa la sb lb sa la lb 
sb sb example sa la sb lb sa la sb 
lb example sa la sb lb sa la lb 
sb sb example sa la sb lb sa la lb 
sb sb example sa la sb lb sa la sb 
lb example sa la sb lb sa sb lb 
la shows schedule lecture dummy courses different location choices la lb respectively 
fig 

lecture dummy courses breaks search methods solution timetabling problem scheduling courses hard constraints satisfied 
soft constraints satisfied far possible 
constraint solver finite domains complete consistency proved locally 
search generally necessary find solution 
search called labelling 
basic idea procedure select variable set problem variables considered choose value domain variable assign value variable consistency techniques constraint solver order compute consequences assignment backtracking constraint solver detects contradiction repeat problem variables value constraints satisfied propose generalization labelling method 
assignment value selected variable replaced reduction domain variable 
backtracking occurs unused part domain taken new domain repeated application method 
program describes basic algorithm search reducing 
reducing varlist var varlist var reducing 
domain reduction selected variable may dependent different components 
assume second argument reducing domain contains information required determining reduced domain 
reduced domain small large 
solution narrowed reduction procedure normally generate solution problem 
domain reduction assignment values variables performed may include search 
main part search carried domain reducing procedure 
conventional labelling algorithm final value assignment 
contradiction detected final value assignment search backtrack reducing procedure 
domain reducing strategy timetabling system 
advantages method shown examples 
domain reducing strategy variable selection choice reduced domain selected variable nondeterministic 
success domain reducing strategy depends chosen heuristics order variable selection determination reduced domain 
order variable selection determined characteristics courses priority related subject assignment starting time room priority 
priority subject priority generated random number 
complete order variable selection determined random numbers necessary 
chosen heuristics determining reduced domain take account wishes respect starting times see constraint 
step attempted reduce domains variables expressed wishes included reduced domain 
experience shown cases solution backtracking steps large number backtracking steps needed 
basic search method number backtracking steps restricted different orderings variable selections tried 
generation timetable controlled interactively user 
interactive timetabling actions possible help graphical interface scheduling individual course scheduling marked courses automatically removing marked courses timetable moving individual course timetable scheduling remaining courses automatically actions order combination automatic backtracking caused user actions 
user alter timetable way hard constraints violated 
individual course scheduled moved values selected causing conflict graphically represented 
values determined inference rule forward checking see rule 
selection value directly result contradiction 
solution selection exist constraint solver complete 
shows detail graphical user interface scheduling individual course 
bottom picture time points selected preferred starting times case marked 
fig 

detail graphical user interface implementation results constraint logic programming language chip selected implementation language 
global constraints object oriented component built chip particularly useful problem modelling 
representation problem phases definition problem internal relational representation internal object oriented representation 
phase definition problem developed declarative language problem description 
components timetabling problem easily defined declarative language 
graphical user interface needed set parameters 
second phase problem definition transformed internal relational representation 
definition data converted structure suitable finite integer domains 
third phase internal object oriented representation generated internal relational representation 
object oriented representation solution search graphical user interface 
transformation process takes possible cross connections definitions supports generation various solutions 
results second phase generate corresponding objects needed different solutions 
output generated timetables html format 
means results timetabling available 
phase timetables generated clinical course phase studies program 
generation timetables course phase previously caused problems involved great deal manual 
test phase successfully completed 
timetables generated quickly contradictions violations hard constraints contradictions easily detected interactive graphical user interface 
conflicts eliminated collaboration person responsible timetables medical faculty 
knowledge field important removing contradictions ensure wishes satisfied cases 
results received departments involved 
generated timetables output html files available internet www gmd de plan 
shows timetable lectures internet 
timetabling system positive reception medical faculty humboldt university berlin 
timetables generated quickly available students early stage 
allocation students course groups done preceding semester wishes students taken account possible 
fig 

timetable internet initial application timetabling system proved successful demonstrating suitability methods 
application able obtain useful information 
importance combination interactive automatic search shown 
development timetabling system include scheduling courses semester allocation rooms courses improvements problem modelling solution search perfection graphical user interface 
research needed complete interactive automated timetabling system medical faculty 
studying influence different modelling techniques solution search exploring techniques heuristic solution search main elements research 
methods techniques concepts developed development tested applications 


university timetabling constraint handling rules 
editor proc 
journ ees de programmation logique programmation par pages paris 
hermes 


extending chip order solve complex scheduling placement problems 
mathematical computer modelling 

azevedo barahona 
timetabling constraint logic programming 
proc 
world congress expert systems 


introducing global constraints chip 
mathematical computer modelling 

boizumault 
constraint logic programming examination timetabling 
logic programming 

burke carter editors 
practice theory automated timetabling ii volume lecture notes computer science 
springer verlag berlin heidelberg 

burke ford weare 
examination timetabling british universities survey 
pages 

burke ross editors 
practice theory automated timetabling volume lecture notes computer science 
springer verlag berlin heidelberg 

cooper kingston 
complexity timetable construction problems 
pages 

dincbas van hentenryck simonis graf berthier 
constraint logic programming language chip 
int 
conf 
fifth generation computer systems fgcs pages tokyo 

fruhwirth 
theory practice constraint handling rules 
logic programming 


goltz 
reducing domains search clp fd application jobshop scheduling 
montanari rossi editors principles practice constraint programming cp volume lecture notes computer science pages berlin heidelberg 
springer verlag 

gu jussien boizumault prins 
building university timetables constraint logic programming 
pages 

van hentenryck 
constraint satisfaction logic programming 
mit press cambridge mass london 

wurtz 
oz college timetabling 
pages 

gilbert 
timetabling constraint logic programming 
proc 
th symp 
industrial applications prolog tokyo japan 


complete university modular timetabling constraint logic programming 
pages 

marriott 
programming constraints 
mit press cambridge ma london 

schaerf 
survey automated timetabling 
technical report cs centrum voor wiskunde en informatica 

white zhang 
generating complete university timetables combining tabu search constraint logic 
pages 
