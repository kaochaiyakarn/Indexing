past user interface software tools brad myers scott hudson randy pausch human computer interaction inst school computer science carnegie mellon university pittsburgh pa bam hudson pausch cs cmu edu september draft user interface software tool helps developers design implement user interface 
research past tools enormous impact today developers virtually applications today built form user interface tool 
consider cases success failure past user interface tools 
cases extract set themes serve lessons 
themes past tools characterized aspects user interface addressed threshold ceiling path resistance offer predictable addressed target irrelevant 
believe lessons past themes particularly important increasingly rapid technological changes significantly change user interfaces 
dawn era user interfaces break desktop box stuck past years 
millenium open increasing diversity user interfaces increasing diversity computerized devices 
devices include hand held personal digital assistants pdas cell phones pagers computerized pens computerized various kinds desk wall size computers devices everyday objects mounted embedded truck tires 
increased connectivity computers initially evidenced world wide web spreading technologies personal area networks profound effect user interface computers 
important force user interfaces especially speech camera vision systems 
changes see increasing need user customization programming scripting 
changes require significant support underlying user interface software tools 
cr categories subject descriptors software engineering tools techniques user interfaces models principles user machine systems human factors information interfaces presentation user interfaces user interface management systems windowing systems history computing software additional keywords phrases user interface software toolkits interface builders user interface development environments event languages scripting languages 
general terms human factors languages 
past user interface software tools appear acm tochi draft 
question research area user interface software tools enormous impact current practice software development 
virtually applications today built window managers toolkits interface builders roots research 
tools achieved high level sophistication due part homogeneity today user interfaces hardware software platforms run 
saw tremendous amount experimentation variety input devices user interface styles diversity gone user interfaces 
applications windows unix macintosh look similar fashion primarily small set constructs invented years ago 
specific techniques graphical user interfaces shown tremendous commercial impact macintosh starting widely adopted small variations relatively slow growth new techniques 
computing platform largely stabilized familiar desktop machine large typically color bitmap screen keyboard mouse buttons 
stability important positive benefits 
users consistency interfaces available possible build skills largely transfer applications platforms knowing graphical user interface provides skills apply 
tool builders relative lack change allowed go significant refinement concepts 
respects tools able mature catch moving target 
feel significant opportunities improved interfaces lost stagnation 
addition conventional gui graphical user interface techniques appear kinds interactive platforms starting emerge ubiquitous computing devices having tiny large displays recognition user interfaces speech gestures requirements facilities user programming 
predicted mark weiser xerox parc age ubiquitous computing hand 
personal digital assistants pdas com palmpilot personal organizers past user interface software tools appear acm tochi draft sharp wizard popular 
digital cell phones merging digital pagers pdas form portable wireless communication devices support voice electronic mail personal information schedules contact lists 
wall size displays available projection devices smartboard large plasma panels fujitsu inch wide 
inevitable costs hardware continue drop new computational opportunities arise 
example connectivity easier due new wireless technologies bluetooth room radio network 
interfaces large small displays typically standard desktop model people necessarily expect devices act regular computers 
reviews comparing com palmpilot windows ce devices point windows user interface style created desktop palm size devices 
clearly tiny display phone 
similarly standard windows widgets pull menus appropriate large wall size displays example menus may literally high short users reach 
furthermore people interacting multiple devices time devices need communicate coordinate activities 
implication changes expect dramatic increase diversity types computing devices task contexts operate 
turn implies poised major change user interfaces dramatic new needs tools build interfaces 
especially important explicitly consider effects tools build create new tools properties needed meet new generation demands 
examples show tools significant impact styles interfaces created 
example world wide web easier pictures buttons real button widgets 
designers created elaborate animated user interfaces rich visual design high production values 
tools important successful 
general tools help reduce amount code programmers need produce creating user interface allow user interfaces created quickly 
turn enables rapid prototyping iterations iterative design crucial component achieving high quality user interfaces 
past user interface software tools appear acm tochi draft important advantage tools help achieve consistent look feel user interfaces created certain tool similar 
briefly discusses history successes failures user interface software tool research provide context developments 
discusses implications tools impending changes 
discusses requirements underlying operating system support tools 
papers discussed issues hci tools including report nsf acm workshop strategic directions human computer interaction nsf workshop hci research agendas 

historical perspective 
themes evaluating tools evaluating past tools identified themes important determining successful 
parts user interface addressed tools succeeded helped just needed 
threshold ceiling threshold difficult learn system ceiling done system 
successful current systems low threshold low ceiling high threshold high ceiling 
remains important challenge find ways achieve highly desirable outcome systems low threshold high ceiling time 
path resistance tools influence kinds user interfaces created 
successful tools advantage leading implementers doing right things away doing wrong things 
predictability tools automatic techniques unpredictable poorly received programmers 
moving targets difficult build tools having significant experience understanding tasks support 
rapid development new interface technology new interface techniques difficult tools keep pace 
time new user interface implementation task understood produce tools task may important obsolete 
past user interface software tools appear acm tochi draft 
worked user interface tools area research tremendous impact current practice software development 
course window managers resulting gui style comes seminal research stanford research institute xerox palo alto research center parc mit 
interface builders invented research laboratories bbn university toronto xerox parc 
interface builders year business widely commercial software development 
event languages widely visual basic investigated research laboratories 
current generation environments microsoft ole object linking embedding java beans component architecture developed andrew environment carnegie mellon university 
sections discuss successes detail 
complete history appears contains comprehensive survey explanation user interface tools 

window managers toolkits research systems demonstrated multiple windows time 
alan kay proposed idea overlapping windows university utah ph thesis appeared smalltalk system xerox parc 
research commercial systems picked idea notably xerox star apple macintosh microsoft windows 
overlapping windows successful part operating systems help manage scarce resources 
case scarce resources question include resources computer fairly limited number pixels human perceptual cognitive resources limited visual field attention user 
allowing user control set overlapping display surfaces display suit focus attention user task 
supporting partial overlap cues human memory provided help activities task switching easier objects interest displayed 
paying careful attention properties humans overlapping windows effectively manage limited resources available screen space human attention visual field 
past user interface software tools appear acm tochi draft window managers provide basic programming model drawing screen update imaging model accepting user input input model 
programming directly window manager level tends time consuming tedious 
programmer creates interface components scratch practically impossible provide widespread consistency user 
address issues user interface toolkits developed top abstractions provided window managers 
toolkits typically provide library interactive components architectural framework manage operation interfaces components 
employing established framework library reusable components user interface construction easier programming interfaces scratch 
demonstrated apple macintosh toolbox fact toolkit programmers job easier leverage achieve difficult goal maintaining consistency 
achieving goal making programmer job simpler toolkits provide path resistance achieve goal supporting widespread interface consistency 
reason toolkits success focus just low level aspects user interface important consistent undesirable re implement 

event languages event languages occurrence significant event manipulation input device user placed event record data structure simply called event 
events sent individual event handlers contain code necessary properly respond input 
researchers investigated style number systems including university alberta user interface management system 
led popular uses event language commercial tools language apple hypercard microsoft visual basic lingo scripting language macromedia director 
event languages successful map direct manipulation graphical user interface 
systems generate events user action mouse keyboard directed appropriate application respond 
event languages help encourage mode free style interfaces user charge generating events application handles 
discussed recognition user past user interface software tools appear acm tochi draft interfaces emerging modalities gestures speech may map event style may need new paradigm 

interactive graphical tools important contribution user interface research creation come called interface builders 
interactive tools allow interactive components placed mouse create windows dialog boxes 
examples include visual basic resource editors constructors come microsoft visual environments 
early research class tools includes xerox parc university toronto 
idea refined jean marie researcher inria brought idea popularized type tool interface builder 
important reason success interface builders graphical means express graphical concepts interface layout 
moving aspects user interface implementation conventional code interactive specification system aspects interface implementation available conventional programmers 
allowed domain experts prototype implement interfaces highly tailored tasks allowed visual design professionals involved creating appearance interfaces 
programmers benefited speed building dramatically reduced 
properties interface builders thought providing low threshold avoiding steep learning curve initially 
systems simple things done simple ways 

component systems idea creating applications dynamically combining separately written compiled components demonstrated andrew system carnegie mellon university information technology center 
component controlled rectangle screen components incorporated inside 
example drawing inside text document controlled drawing component independent text editor component 
idea adopted microsoft ole activex apple past user interface software tools appear acm tochi draft sun java beans 
reason success component model addresses important useful aspect application building appropriately modularize software smaller parts providing significant capabilities integration users 

scripting languages accident toolkits developed programming languages interpreted smalltalk developed researchers xerox parc small toolkits 
interpreted language enables developer rapidly prototype different user interface ideas immediately changes provides fast turn 
rise user interface development migrated compiled languages capabilities lost 
researchers investigated ways bring advantages back resulting scripting languages tcl tk ousterhout python perl 
research languages seeing increasing commercial popular languages visual basic javascript providing interpreted capabilities 
observe scripting language achieves wide require general purpose control structures variables loops conditionals 
intended programmers languages nearly go language designers originally mind full programmability inevitably proves necessary 
fact develops language supposed simplified generalpurpose programming language users want power 
full range control structures generally back 
trade dilemma impossible get 
combining scripting capabilities components interface builder proven particularly powerful approach 
example thousands components visual basic available third party vendors 
interface builder visual basic layout visual basic language scripting glue holds enables people professional programmers create sophisticated useful interactive applications 
visual basic shows little programming packaged properly possible domain experts create interfaces reflect domain task knowledge 
past user interface software tools appear acm tochi draft 
hypertext world wide web www spectacular success research user interface software technology 
hypertext idea 
ted nelson coined term hypertext worked hypertext systems called hypertext editing system brown university 
system hypertext features 
university maryland system highlighted items text clicked go pages 
hypercard apple significant helping idea wide audience 
complete history hypertext see 
hypertext attain widespread creation world wide web system berners lee mosaic browser years 
elements success www ease mosaic simplicity accessibility html language author pages ease making pages accessible web embedding pictures text 
www provided low threshold viewers authors 
viewers simple mechanism provided access existing network resources ftp telnet gopher hypertext framework authors simple html textual specification language 
allowed system content providers minimum learning 
second success mosaic browser clearly demonstrated power compelling nature visual images generally rich content high production values 

object oriented programming object oriented programming user interface research long intertwined history starting smalltalk motivation easy create interactive graphical programs 
popular programming graphical user interfaces widely necessary windows 
object oriented programming especially natural user interface programming components user interfaces buttons sliders manifested visible objects state corresponds instance variables operations correspond methods 
past user interface software tools appear acm tochi draft 
promising approaches caught addition lessons learned successes great deal learned looking ideas initially show great promise succeed succeeded delivering promise 
moving target problem systems researched styles user interfaces changing today standard gui 
furthermore tools designed support flexible variety styles important standardization 
section considers examples including concept user interface management system uims language approaches constraints model systems 

user interface management systems early concept user interface management system uims important focusing point forming user interface software community 
term user interface management system coined suggest analogy database management systems 
database management systems implement higher useable abstraction top low level concepts disks files 
providing abstraction allow independence low level details automate simply hide previously tedious tasks generally task creating data repositories simpler robust 
similarly user interface management systems details input output devices providing standard automatically generated implementations interfaces generally allowing interfaces specified higher level abstraction 
separation worked practice 
user interface important control low level pragmatics interactions look feel uimss tried isolate designer 
furthermore standardization user interface elements late desktop paradigm need abstractions input devices unnecessary 
uimss fell victim moving target problem 

formal language tools number early approaches building uims techniques borrowed formal languages compilers 
example systems state transition diagrams parsers context free grammars 
initially approaches past user interface software tools appear acm tochi draft looked promising 
techniques catch important reasons serve important lessons tools 
formal language techniques driven part early emphasis uims task dialog management 
time early user interface management systems conceived dominant user interface style conversational metaphor system user seen conversing objects interest 
setting dialog management takes central role fact number formal language systems job supporting central task 
unfortunately just early systems developed direct manipulation style interface quickly coming prominence 
direct manipulation interfaces role dialog management greatly reduced structuring dialog system typically detrimental concept directness 
result early user interface tools quickly ones done job solving problem longer mattered falling victim moving target problem 
problems class tools 
systems easy express sequencing hard express unordered operations 
result tend lead programmer create interfaces rigid sequences required actions 
direct manipulation point view required sequences undesirable 
path resistance tools detrimental user interface design 
reason systems catch high threshold required programmers learn new special purpose programming language addition primary implementation language pascal 
importantly formal language systems required programmers new programming concepts 
example systems grammars express sequencing dialogs 
programmers adept thinking terms grammars 
dramatically improved power tools justify steep learning curve potential users systems adopt simply got past initial difficulties 

constraints research systems explored constraints relationships declared maintained automatically system implementing past user interface software tools appear acm tochi draft different aspects user interface 
examples include sketchpad constraint garnet rendezvous amulet 
constraints designer specify example line stay attached rectangle scroll bar stay right window 
similarly declare color size position objects multiple views derived value object application application object value related formula 
relationships declared constraint solving system responds changes system updating values needed maintain declared constraints 
constraint systems offer simple declarative specifications capability useful implementing different aspects interface 
range efficient algorithms developed implementation 
constraint systems widely adopted research systems 
central reasons programmers constraint solvers unpredictable 
set constraints set job solver find solution multiple solutions solver may find user expect 
bug constraint method difficult find 
related problem especially sophisticated solvers build set constraints handled solver programmer may need ensure set constraints particular form acyclic linear may need learn details solver works presents high threshold 
furthermore declarative nature constraints difficult master people programming imperative languages requires think differently problems contributes having high threshold 
area user interface design constraints successful layout graphical elements 
systems nextstep galaxy provided limited form constraints metaphor springs rigid constraints control layout 
metaphors wider acceptance provided limited form constraints way easier learn predictable programmers 
past user interface software tools appear acm tochi draft 
model automatic techniques thread user interface research shown significant promise wide acceptance investigation automatic techniques generating interfaces 
goal generally allow designer specify interfaces high level details implementation provided system 
motivations include hope programmers user interface design experience just implement functionality rely systems create high quality user interfaces 
systems allow user interfaces created effort parts generated automatically 
promise significant additional benefits automatic portability multiple types devices automatic generation help application 
early examples model tools include cousin hp apollo open dialogue provided declarative language designer listed input output needs user interface 
system generated dialogs display request data 
evolved model systems mike jade uide humanoid 
systems techniques heuristic rules automatically select interactive components layouts details interface 
automatic model techniques suffered problems unpredictability 
fact heuristics involved connection specification final result quite difficult understand control 
programmers learn new language specifying models raises threshold 
addition model systems low ceiling 
automatically generating interfaces difficult task automatic model systems placed significant limitations kinds interfaces produce 
related problem generated user interfaces generally created conventional programming techniques 
important motivation model techniques provide independence input output specification details specific user interface characteristics standardization user interface elements separation important 
discuss new requirement device independence emerging may raise need model related techniques 
past user interface software tools appear acm tochi draft 
discussion themes returning themes introduced section successful tools focused particular part user interface significant problem addressed thoroughly effectively 
long stability desktop paradigm direct manipulation user interface style enabled maturing tools alleviating moving target problem affected earliest tools 
discussed predict new phase increased experimentation change user interfaces moving target problem important issue 
dual problems threshold ceiling effects general user interface tools 
perennial challenges user interface tool apply powerful approaches accessible understandable typical developers 
temptation feel power approach justifies steep learning curve 
cases simple cost benefit analysis may indicate 
techniques achieving power needed high ceiling systems effect raising threshold 
similarly attempts lowered threshold expense powerful features allow high ceiling 
systems suit able provide low thresholds provided access higher ceiling support trap door approach allowing general call outs underlying programming language 
trends call new powerful techniques high ceiling deal anticipated dramatic increase user interface diversity 
lessons past tools indicate practice high threshold systems adopted intended audience past initial threshold productivity tools provide easy entry smooth path increased power 
challenging creating systems low threshold high ceiling possible continue important goal tools 
issue path resistance offered tool 
tools profound effect think problems 
remain imperative tools doing right thing easy preference doing wrong thing 
applies structure organization code user interface results code 
words tools creating high quality user interfaces easier creating low quality ones 
past user interface software tools appear acm tochi draft 
prospects visions sections discuss predictions observations user interface tools 
impossible discuss tools discussing user interface changes require new tools 
sections organized new user interface paradigms see emerging 
see important implications computers commodity ubiquitous computing move recognition user interfaces user customization 

computers commodity moore law continues hold computers available general public fast perform researchers computers 
trick computer science researchers buying expensive high performance computers investigate available public years longer works computers available public fast faster researcher 
may profound impact computer science research performed 
furthermore quantitative change increased performance qualitative change kinds user interfaces possible 
example enabled production inexpensive palm size computers single chip microprocessors power cost cents embedded various devices 
impact high performance user interfaces cinematic smooth transitions animation sound effects visual audio effects 

ubiquitous computing idea ubiquitous computing computation embedded different kinds devices different scales 
seeing tiny digital pagers phones embedded computers displays palm size computers palmpilot panel computers laptops desktops wall size displays 
furthermore computing appearing devices home office 
important wave appear devices easily communicate probably radio wireless technologies bluetooth 
implications technologies tools needed 
sections discuss ideas 
past user interface software tools appear acm tochi draft 
varying input output capabilities virtually today interaction techniques highly optimized years fairly large display mouse buttons 
virtually devices envisioned ubiquitous computing mouse true pointing devices different kinds displays 
important issue interaction techniques change take varying input output hardware account 
obvious impact developers create user interfaces vastly different sizes characteristics displays 
screens desktop machines varied pixels factor screen vary inches inches diagonal factor screens cell phone displays pixels inches diagonal wall size displays dynawall land project pixels meters long meters tall 
display stanford screen pixels feet feet 
variations factors resolution size 
current techniques implicit assumptions device characteristics 
example standard widgets pull generally may fit small screens large screens high short users 
starting examples real volumetric displays clearly require entirely different interaction techniques 
input modalities differ cell phones numeric keypad voice palm size displays touch sensitive screens stylus keyboard pdas tiny keyboards wall size displays touched pointed 
changing mouse stylus touchpad requires different interaction techniques 
devices provide high quality speech gesture handwriting recognition 
tools handle different number mouse buttons change mouse stylus move new input modalities speech gestures eye tracking video cameras completely question tools 
user interfaces obviously platforms 
developer creating application run variety platforms difficult hand design screens kind display 
standardization past user interface software tools appear acm tochi draft devices class 
example different kinds pdas quite different display characteristics input methods 
may encourage return study techniques device independent user interface specification developers describe input output needs applications vendors describe input output capabilities devices users specify preferences 
system choose appropriate interaction techniques account 

tools rapidly prototype devices just software important consideration new devices desktop machines input output capabilities mouse keyboard color screen great variety shapes sizes input output designs 
user interface built hardware physical buttons switches 
designer take account software physical properties devices capabilities 
need tools support rapid design prototyping hardware 
sufficient screen techniques prototyping hardware pragmatics usability evaluated solely simulation screen 

tools coordinating multiple distributed communicating devices rise internet world wide web computer technology communication computation 
trend significantly increase rise ubiquitous computing 
devices cell phones pagers designed communication person computation bringing added functionality integration 
room area wireless networks increasingly enable multiple devices communicate important computers longer islands computation storage part integrated multi machine multi person environment 
furthermore people increasingly distribute computation devices office home car pocket increasing need people communicate different devices 
supporting collaboration people complicated current multi user applications groupkit microsoft longer assumed people comparable computers 
users cell phone car pdas past user interface software tools appear acm tochi draft train wall size displays home 
users may multiple devices time 
example pebbles project investigating pdas effectively time pcs 
devices people different levels connectedness different times disconnected connected slow links high speed network 
decisions information sent shown user importance timeliness information capabilities current connection devices 
furthermore user interaction need take account information internet information generated sensors people world 
status environment taken account call context aware user interfaces 
implications tools profound 
important tools provide facilities manage data sharing synchronization especially assumed data go date disconnected need updated reconnected 
data updated automatically environment people techniques notification awareness important 
furthermore tools needed help information appropriate way device 
user multiple devices time content input spread active devices 
applications running environment cognizant multiple people sharing group easily accommodated 
implies security issues increasingly important better user interfaces monitoring specifying testing security settings crucial 
capabilities available applications important provided low level suggests supporting capabilities included underlying operating system toolkits 

recognition user interfaces today tools provide support widgets menus dialog boxes keyboard mouse smaller proportion interfaces 
expect see substantially techniques gestures handwriting speech input output 
called recognition require software interpret input stream user identify content 
past user interface software tools appear acm tochi draft new modalities fundamentally change interfaces developed 
create speech user interfaces today requires learning vocabularies parsers hidden markov models hmms 
create gestural interfaces programmer may need know hmms feature vectors mahalanobis distance depending recognition technology 
tools needed hide complexity provide easy interface programmers 
getting speech interface single application necessary applications support different kinds modalities 
form mode output generated computer systems currently defined system designer new trend may increasingly allow user determine way computer interact support multiple modalities time 
instance user may determine situation textual natural language output preferred speech pictures may appropriate words 
distinctions dynamically abilities user limitations presentation environment 
example evidence users encouraged switch modalities speech handwriting system having difficulty interpreting input 
computing environment data distinct environment create store information interface systems need support information adaptation fundamental property information delivery 
recognition interfaces number fundamental differences today interfaces 
primary difference input uncertain recognizer errors interpreting input 
interfaces contain feedback facilities allow user monitor correct interpretation 
furthermore interpreting input requires deep knowledge context application 
example interpret move red truck system needs access objects application find red truck timing information pointing gestures find 
significant implications tool design 
conventional event model may longer recognition systems need provide input continuously just discrete events finished 
example objects gesture continuing move objects start moving immediately boundary closed popular rubine recognizer 
past user interface software tools appear acm tochi draft waiting gesture 
similarly speech interpretation speech immediately feedback provided soon possible 
temporal coordination modalities pointing requires continuous nature input preserved 
issue separation knowledge application contents 
today user interface tools deep knowledge application doing need know surface widgets appearance 
support new modalities longer 
believe appropriate architecture tools access main application data structures internals 
application need deal speech interpretation undesirable 
increasingly user interfaces built standardized data structures knowledge bases facilities available requiring application rebuild 
current trend reflection open data model step direction deep unsolved problem artificial intelligence systems general expect solutions near term 

dimensional technologies trend migration dimensional presentation space dimensional space case overlapping windows dimensional space 
dimensional technologies offer significant opportunities human computer interfaces 
application areas may benefit dimensional interfaces include training simulation interactive exploration complex data environments 
providing tools difficult problem seen lack acceptance virtual reality modeling language vrml standard world wide web 
effective notions selecting interacting information need revised techniques navigating information spaces need radically altered page models 
researchers stage developing new interaction techniques gestures metaphors interfaces 
predict need settle set interaction techniques widgets high level tools interactive behaviors possible 
research systems alice exploring hide mathematics increasingly important tools 
providing support toolkit suffers problems toolkits years ago 
need performance causes underlying implementation details visible past user interface software tools appear acm tochi draft higher level abstractions hiding 
second sure applications developed new style 
regard interfaces probably worse shape interface interfaces able adopt conventions example desktop publishing 
breakthrough occurs understanding kinds applications useful extremely difficult toolkits know abstractions provide 
central aspect dimensional interfaces near real time interactivity ability system respond quickly effect direct manipulation achieved 
near real time interactivity implies strong performance demands touch aspects application data management computation graphical rendering 
designing interfaces applications meet demands application independent manner presents major challenge hci community 
maintaining required performance context unpredictable user configured environment implies time critical capability system automatically gracefully degrades quality order maintain performance 
design general algorithms time critical applications new area significant challenge 

user programming customization scripting successful computer programs time spreadsheet primary reason success users program writing formulas macros 
user programming rare applications exists usually requires learning conventional programming 
important reason world wide web successful create pages 
active pages forms animations computation programming required usually professional programmer programming language perl java 
productivity applications increasingly programmable writing visual basic scripts microsoft word affinity programming 
systems called scripting interesting note spreadsheet formulas form constraint tremendously successful constraints programmers successful 
conjecture constraints fit business person mental model just needs computation answer programmer needs control performance methods 
key tool fit users model 
past user interface software tools appear acm tochi draft languages lingo macromedia director fairly conventional programming languages 
user programming increasingly important 
matter successful interface designers systems need customized needs particular users 
generic structures example email filtering system shared systems agents need tailored meet personal requirements 
better interfaces understandings user programming needed 
furthermore capabilities built individual applications done today means user learn different programming technique application 
facilities provided system level part underlying toolkit 
intent graph try give feel hard tools create things different levels sophistication 
example quite hard get started intercept threshold high 
vertical walls designer needs learn entirely new 
wall user needs learn microsoft foundation classes mfc graphics 
visual basic easier get started intercept lower visual basic walls learn basic programming language learn click create menu tool corel line stops low ceiling extension language available menus dialog boxes 
important research problem scripting customization threshold high difficult learn program 
threshold ceiling issue illustrated research gentle slope systems systems incremental increase level user needs learn incremental amount 
contrasted systems walls user learn new concepts techniques progress see 
past user interface software tools appear acm tochi draft 
issues tools addition issues discussed see addition trends near contradict assumptions built today tools 
skill dexterity levels users 
current interfaces assume average level dexterity manual skill part user 
current demographics know time passes older adults interactive systems mention younger disabled persons 
aging comes inevitable decline motor memory perceptual skills 
retrofitting graphical interfaces special needs users taken place little performed specific interaction technique support older adults example 
notion single fixed library interactive components problematic may require redesign accepted interactive techniques tools support 
non overlapping layout rectangular opaque interactive components 
early toolkits macintosh toolbox assumed interactive widgets buttons text fields overlap 
toolkits notably coming windows system systems heavily influenced java awt assumed overlap possible components rectangular opaque 
assumptions worked early gui interfaces 
limiting typically preclude techniques magic lens interactions show great promise technically feasible 
fixed libraries interactive components 
toolkits long assumed fixed library interactive components covered vast majority interfaces built 
result placed emphasis making components library easy employ generally neglecting issue making easy create new interactive components 
example creating new widget popular motif toolkit difficult 
implicit explicit assumptions cases simply poor early design choices system significantly limit kinds things easily accomplished 
past user interface software tools appear acm tochi draft interactive setting 
current user interface design knowledge supporting tools implicitly assumptions setting user acts 
example interfaces assume user sitting hands available look interface operating 
properties hold situations world computational support valuable driving lying machine repaired 
requiring user full attention 
current interfaces assume user full attention typically little user pays attention acts 
ubiquitous computing number devices user multiplying 
demands small piece user attention aggregate result may quite unpleasant 
result clear need new interaction paradigms minimize amount attention demanded 
interfaces need tools explicitly consider human attention part design criteria 
may require strong integration cognitive science knowledge date directly employed user interface tools 
support evaluation 
today tools focus design implementation user interfaces 
achieving general goal supporting rapid iteration designs requires rapid evaluation rapid implementation 
unfortunately tools provided explicit support evaluation 
partially tools tried mike discovered metrics applied computers 
new generation tools trying evaluate people interact interfaces automatically creating cognitive models high level descriptions user interface preliminary research needed 
creating usable interfaces going tools enforce encourage user interfaces highly usable today stance tools neutral leave design human designer 

operating system issues operating system today systems 
window manager count part operating system 
toolkit provides access standard drawing capabilities widgets win microsoft foundation classes 
today legal debate web browser considered part operating past user interface software tools appear acm tochi draft system 
furthermore distinction design time tools creating user interface run time tools execute interface blur services 
clear facilities provided operating system continue expand features tools article discusses included called operating system ill capabilities provided low level 
instance access information input output communication capabilities devices provided application software intelligent choices user interface 
instance windows ce palm size devices impossible find kinds hardware buttons available pda 
example today networking interfaces possible application decide fast connection available 
fact usually impossible find connected applications freeze minutes waiting see network respond operating system easily tell machine disconnected 
unacceptable 
interfaces need intelligent choices knowledge current capabilities device connections environment 
capabilities provided top operating system alternatively part 
applications run variety devices portable infrastructure provided possibly java run time library 
need high level protocols accessing information distributed files 
user programming support needed multiple applications provided universally applicable form 
ideally required capabilities available bundled operating system 
progress multiple vendors research groups compete provide best possible tools 

generally research innovation tools trail innovation user interface design sense develop tools know kinds interfaces building tools 
consolidation user interface desktop metaphor years surprising tools matured point commercial tools fairly successfully covered important aspects user interface construction 
clear research user interface software tools enormous impact process software development 
believe user interface design poised radical change near past user interface software tools appear acm tochi draft primarily brought rise ubiquitous computing recognition user interfaces technologies 
expect see resurgence interest research user interface software tools order support new user interface styles 
believe new tools organized providing rich context information user devices application state events 
enable user programming recognition user interfaces data sharing needed ubiquitous computing 
important replaceable user interfaces applications provide different user interfaces different devices ubiquitous computing support customization 
include having procedural interface performed user 
recommend tools aim low threshold easy provide high ceiling 
predictability important programmers sacrificed tools smarter 
naturally successful tools cover useful parts interface 
challenges provide new opportunities research problems user interface tools 
authors wish brad vander zanden dan olsen rob miller rich mcdaniel referees help article 

dtl technology labs phone fax address ave sunnyvale ca 
www dtl com 

apple computer inside macintosh 
addison wesley 

bier toolglass magic lenses see interface proceedings siggraph computer graphics 


pp 


systems systems park blvd suite palo alto ca 
tel fax 
www com 


borning programming language aspects constraint oriented simulation laboratory 
acm transactions programming languages systems 
pp 


buxton comprehensive user interface management system proceedings siggraph computer graphics 

detroit mich 
pp 


isat summer study gentle slope systems making computers easier 
woods hole ma august 
past user interface software tools appear acm tochi draft 
dey abowd wood framework providing context aware services proceedings international conference intelligent user interfaces iui 

pp 


engelbart english research center augmenting human intellect 
reprinted acm siggraph video review 

english engelbart berman display selection techniques text manipulation 
ieee transactions human factors electronics 
hfe 
fujitsu fujitsu plasma panel displays 
www 
com products plasma html 

green university alberta user interface management system proceedings siggraph computer graphics 

san francisco ca 
pp 


bluetooth vision goals architecture 
acm mobile computing communications review 
pp 

oct www bluetooth com 

hayes szekely lerner design alternatives user interface management systems experience cousin proceedings sigchi human factors computing systems 

san francisco ca pp 


henderson jr user interface design environment proceedings sigchi human factors computing systems 

boston ma pp 


henderson jr card rooms multiple virtual workspaces reduce space contention window graphical user interface 
acm transactions graphics 
pp 


hill supporting concurrency communication synchronization humancomputer interaction uims 
acm transactions graphics 
pp 


hill rendezvous architecture language constructing multiuser applications 
acm transactions computer human interaction 
pp 


hudson king generator direct manipulation office systems 
acm trans 
office systems 
pp 


hudson smith ultra lightweight constraints proceedings uist acm siggraph symposium user interface software technology 

seattle wa pp 

www cc gatech edu gvu ui sub arctic 

jacob specification language direct manipulation interfaces 
acm transactions graphics 
pp 


javasoft javabeans 
sun microsystems javabeans java sun com beans 

user interface management system proceedings siggraph computer graphics 

boston ma 
pp 


kay reactive engine 
phd thesis electrical engineering computer science university utah 

kieras glean computer tool rapid goms model usability evaluation user interface designs proceedings uist eighth annual symposium user interface software technology 

pp 

past user interface software tools appear acm tochi draft 
shneiderman embedded menus selecting items context 
communications acm 
pp 


kramer translucent patches windows proceedings uist acm siggraph symposium user interface software technology 

marina del rey ca pp 


mccracken just helpful handhelds 
cnn interactive pc world online 
september cnn com tech computing idg 

lutz programming python 
reilly associates 
isbn 
www python org 

overview toolkit proceedings uist acm siggraph symposium user interface software technology 

banff alberta canada pp 


meyer age group differences world wide web navigation sigchi adjunct proceedings human factors computer systems extended abstracts 

atlanta ga pp 


myers user interface software tools 
acm transactions computer human interaction 
pp 


myers brief history human computer interaction technology 
acm interactions 
pp 

march 

myers garnet comprehensive support graphical highly interactive user interfaces 
ieee computer 
pp 


myers hollan cruz strategic directions human computer interaction 
computing surveys 
pp 

december 
www cs cmu edu bam html 

myers amulet environment new models effective user interface software development 
ieee transactions software engineering 
pp 

june 

myers smith horn report user programming working group languages developing user interfaces 

boston ma jones bartlett 
pp 


myers collaboration multiple pdas connected pc proceedings cscw acm conference computer supported cooperative 

seattle wa pp 


swap wireless networking connected home 
acm mobile computing communications review 
pp 

oct www org 

newman system interactive graphical programming afips spring joint computer conference 


pp 


nielsen usability engineering 
boston academic press 

nielsen multimedia hypertext internet 
boston academic press professional 

past user interface software tools appear acm tochi draft 
olsen jr mike menu interaction environment 
acm transactions graphics 
pp 


olsen jr dempsey graphical user interface generator proceedings siggraph computer graphics 

detroit mi 
pp 


olsen jr research directions user interface software tools 
behaviour information technology 
pp 


olsen jr interface usage measurements user interface management system proceedings uist acm siggraph symposium user interface software technology 

banff alberta canada pp 


andrew toolkit overview proceedings winter usenix technical conference 

dallas tex pp 


pausch alice rapid prototyping system graphics 
ieee computer graphics applications 
pp 

may 
pausch conway deline lesson learned suit simple user interface toolkit 
acm transactions information systems 
pp 


pier landay issues location independent interfaces 
xerox parc technical report istl palo alto ca 
www cs berkeley edu landay research publications lii ps 

roseman greenberg building real time groupware groupkit groupware toolkit 
acm transactions computer human interaction 
pp 


rosenberg toolkits lessons learned proceedings uist acm siggraph symposium user interface software technology 

snowbird utah pp 


rosenthal simple client program hard really write hello world proceedings usenix 

pp 


rubine specifying gestures example proceedings siggraph computer graphics 

las vegas nv 
pp 


rogers hamilton adm dialogue manager proceedings sigchi human factors computing systems 

san francisco ca pp 


shneiderman direct manipulation step programming languages 
ieee computer 
pp 

aug 
smart technologies suite th avenue calgary alberta canada 
www com 

streitz land interactive landscape creativity innovation proceedings sigchi human factors computing systems 

pittsburgh pa pp 
appear 

suhm myers waibel designing interactive error recovery methods speech interfaces chi workshop designing user interface speech recognition applications 


sukaviriya foley griffith second generation user interface design environment model runtime architecture proceedings interchi human factors computing systems 

amsterdam netherlands pp 

past user interface software tools appear acm tochi draft 
sutherland sketchpad man machine graphical communication system afips spring joint computer conference 


pp 


szekely luo neches interface builders model interface tools proceedings interchi human factors computing systems 

amsterdam netherlands pp 


teitelman display oriented programmer assistant 
international journal studies 
pp 

xerox parc technical report csl palo alto ca march 

smalltalk environment 
byte magazine 
pp 


thomas graphical input interaction technique workshop summary 
siggraph computer graphics 
pp 

summary seattle uims workshop june 

tobias computers elderly review literature directions research age research skill acquisition assessment change applications design proceedings human factors society st annual meeting 

pp 


vander zanden myers automatic look feel independent dialog creation graphical user interfaces proceedings sigchi human factors computing systems 

seattle wa pp 


vander zanden constraint grammars new model specifying graphical applications proceedings sigchi human factors computing systems 

austin tx pp 


software galaxy application environment 
dissolved 
galaxy bought information systems campinas brazil support com 
www com 

wall schwartz programming perl 
sebastopol ca reilly associates 

wasserman rapid prototyping interactive information systems 
acm software engineering notes 
pp 


weiser computer science issues ubiquitous computing 
cacm 
pp 

july 

weiser brown coming age calm technology 
www com hypertext weiser htm 
revised version weiser brown 
designing calm technology journal com july 

wiecha tool rapidly developing interactive applications 
acm transactions information systems 
pp 


winograd human centered interaction architecture 
working interactive workspaces project stanford university graphics stanford edu projects 

worden making computers easier older adults area cursors sticky icons proceedings chi human factors computing systems 

atlanta ga acm 
pp 

