workflow mechanisms document centered collaboration anthony lamarca keith edwards paul dourish john lamping ian smith jim thornton xerox palo alto research center usa lamarca parc xerox com aspects technical support collaborative activity support content support coordination 
design cscw systems typically address combining collaborative application 
approach suffers variety known problems compatibility collaborative single user applications working styles practices 
describe alternative approach coordination collaborative functionality aspect collaborative artifact collaborative application 
infrastructure series application examples illustrate idea collaboration coordination collaboration separated independent applications 
computer applications focus manipulation content 
gather information user record control access organize act demand 
content includes user readable forms information handled word processor presentation package software development environment internal machine readable forms database records index structures object code formats 
collaborative applications add second concern focus content concern coordination 
schmidt bannon draw strauss argue central focus cscw articulation means people divide allocate coordinate schedule mesh interrelate concerted activities 
cscw systems able deal content coordination fundamental question development cscw technologies nature relationship 
troublesome 
cscw applications attempted take entire problem single approach led development collaborative text editors drawing tools 
systems focussed coordination aspects left application development approach led development collaboration harnesses run time frameworks transparent application sharing 
approaches problems discuss 
new approach relationship content coordination facets collaborative systems 
approach focus collaboration feature artifact application 
doing free set restrictions interoperability content come application focus 
model adopts electronic documents primary means content exchange 
electronic documents opened read manipulated changed clustered sorted variety familiar tools critically carry semantics delegating application 
applications content encodings applications manage content 
store represent render manipulate content wide variety formats 
content encoded application specific ways interpreted specific applications ability understand meaning particular encoding 
content types applications may shareable applications may readily exposed applications 
example custom database application insurance claims processing tool semantics assumptions validity information store 
data stored application understandable applications 
fact applications unable access information stored custom database simple file 
words applications contain encodings representations content tailored specific needs ability interpret manipulate representations encapsulated application 
approach successful time presents problem attempt extend functionality application new areas 
content coordination top concern content collaborative applications concerned support coordination activities individuals 
variety mechanisms introduced support coordination awareness shared workspace dourish bellotti explicit representations conversational action basis managing patterns interaction winograd flores 
support coordination primary research focus cscw 
detriment support content prototype collaborative tools latest research prototype shared text editor may shared isn text editor 
problem combine application features interpretation management specialised content new features collaboration coordination 
common approaches relationship content coordination shared applications 
combine single monolithic application needs collaboration fully integrated manipulation presentation content second collaboration harness share single user applications 
second approach proved useful specific scenarios remote presentations deployed systems approach 
take workflow application example 
discussed application innate understanding content process workflow 
user updates bit content system say digitally signing expense request system notices change state move process logical state 
change may involve displaying forms users screens removing documents queues participants 
workflow tool able tightly integrated content manages detect changes information changes come application dynamically update information users screens 
downside integration workflow tool take responsibilities 
document centered collaboration exploring new approach integration content coordination collaborative systems 
call approach document centered collaboration 
approach move coordination functionality application documents 
achieve exploit novel document infrastructure gives documents resources maintain application integrity 
explain infrastructure operations document including reading writing moving deleting observed active code associated document 
active code take appropriate action making notifications performing operation operation 
ability associate computation content gives ability tightly bind application semantics content semantics constrain 
time active code exploit knowledge external state world documents effect aware responsive changes users 
believe system offer novel approach workflow state workflow process exposed set documents read written operated standard existing tools 
users need directly see workflow tool 
computation attached documents enforces coordination conventions workflow process allowing documents ways conventional electronic documents 
enable construction active documents built middleware layer sits ordinary applications existing document repositories file systems 
general purpose applications look file system file systems look general purpose application 
infrastructure maintain extra information documents provided underlying repository provides ability execute arbitrary code documents accessed 
sitting files applications infrastructure add new capabilities electronic documents allowing existing applications continue 
believe approach number tangible benefits 
force choice doing workflow favorite set document applications word processors workflow brought applications creating standalone applications workflow 
coordination interpretation content separated 
second existing tools available working documents 
ability bind computation document content ensure general purpose tools operate documents semantically constrained ways violate requirements workflow may place 
essentially enable documents standard general ways corrupting workflow semantics new constrained functionality layered top existing document functionality 
third designers workflow processes allow rapid pace development 
workflow process builder just write pieces computation attached documents implement workflow process surrounding tools interfaces mediating visualizing workflow process 
described done context placeless documents project xerox parc dourish 
placeless documents effort build generation document management system provides radical extensibility smooth integration existing document repositories tools 
shall describe placeless substrate workflow experi ments founded investigate separate collaborative applications built document centered model 
comparison existing approaches relationship content coordination functionality fundamental issue design cscw systems 
approach embed collaborative functionality new tools 
users offered new sorts drawing tools hill new sorts spreadsheets palmer cormack new sorts presentation tools isaacs incorporating functionality information sharing collaboration 
regularly observed bennett olson new tools simple everyday tasks barrier collaborative tools 
case single user systems johnson nardi attest inertia surrounding adoption new tools new applications tailored specific domain needs 
approach problem development collaboration transparent systems harnesses existing tools support collaborative functionality 
examples include matrix jeffay prakash shim jam collaboration transparent approach suffers problem applications unchanged semantics revised incorporate needs effects collaborative 
advantage users carry tools familiar significant investment 
collaboration transparency allows group members carry existing single user tools problem arises may single user tools 
people different incompatible software systems incompatible versions software system forcing people upgrade system new collaborative system better asking switch new word processor 
different group members different word processors collaboration transparent approach sufficient 
approach focus applications artifacts case documents 
goal design system user microsoft pc adobe mac third uses netscape composer unix machine seamlessly web documents 
achieve collaboration augmenting documents 
coordination languages separate application functionality supporting collaboration move coordination infrastructure examples include linda gelernter domain parallel systems cortes mishra domain collaborative ones 
approach differs artifacts take active role managing coordination 
closest related approach olsen 
explore collaboration coordination surface representations want move model application encapsulates fixed semantic interpretation data kept separate actual document contents 
approach abandon encoded semantics operate level human consumable surface representations simple perceptible graphical patterns application displays 
approach similar rely semantics application different move semantics closer document representation 
abbott sarin suggested generation workflow tools simply invisible capability applications decoupling collaboration functionality application making middleware component approach brought closer model demonstrate 
introducing placeless documents system new infrastructure document management provides basis approach 
main body introduce illustrate approach describing example systems built top placeless documents serve explain document centered approach operates practice 
consider approach relates current potential practice development collaboration technologies 
placeless documents project section presents overview system 
discussion basic facilities placeless architecture look particular mechanisms placeless necessary build document centered view workflow 
overview placeless documents traditional document management systems filesystems hierarchical organization users documents contained folders folders nested folders 
structure easy understand limiting 
example excel document project budget contained excel folder budget folder project folder 
goal placeless documents project build flexible system organizing document space 
placeless model organization properties convey information context document budget shared workgroup 
properties metadata describe annotate document facilitate various settings 
active properties systems support association extensible metadata files documents properties placeless active entities augment extend behavior documents attached 
simple inert tags extensionally describe extant states document properties live code fragments implement user desired intentions state document 
active properties affect behavior document multiple ways add new operations document govern document interacts documents document management system exists 
example placeless active properties implement access control handle reading writing document content repositories properties called bit providers perform notifications document changes interested parties 
active properties particularly bit providers provide ability associate computation content 
property code perform arbitrary actions invoked properties return results context state document management system time invoked 
active properties heart placeless document system shall see implement document centered workflow particular examples 
distribution compatibility placeless documents architected robust distributed system 
design allows users access document collections network importantly serve document collections see fit 
attributes placeless system described active properties robust distribution enable construction novel applications document services 
truly useful system existing document file applications 
crucial desire support workflow arbitrary shelf applications 
architected number map existing document file management interfaces protocols concepts provided placeless 
examples include file system interfaces ftp imap pop protocol interfaces webdav 
existing applications expect access files electronic documents comment interfaces placeless provides interfaces documents 
example built network file system nfs server layer atop placeless 
layer lets existing applications including tools word powerpoint written understand files live placeless documents 
existing applications change placeless loss power placeless concepts find easy expression traditional file system model 
purposes placeless infrastructure thought middleware layer essentially multiplexor capable reusing generating content varied sources creating uniform notion documents content exposing resulting documents multiplicity interfaces 
exposing arbitrary entities documents bit provider mechanism making documents widely available arbitrary interfaces gain great leverage existing tools applications 
architectural foundation allow computation tightly bound document content 
placeless system integrate existing sources information filesystems web repositories expose documents interfaces documents accessible existing applications 
experiments workflow built placeless system 
systems described provide document centered approach workflow allow users break away closed specialized applications bring power generalpurpose computing tools workflow processes 
simple example travel approval simplest applications called maui manages corporate travel approval process 
actual process description simple employees submit trip itineraries approval requires consent employee manager department head 
goal allow employees easily submit trip requests check trip status give managers easy way check access travel requests requiring attention 
rest section describes implemented document centered style building new active properties top flexible property document infrastructure 
user view maui users construct itineraries way wish free choose application document format choice 
example user write note framemaker submit excel spreadsheet detailed cost information simply scan copy conference invitation 
differs significantly traditional workflow systems relevant data manipulated proprietary integrated tools 
enter new itinerary travel approval process users open standard document browser windows explorer drag itinerary document trip status document 
trip status document special serves central point coordination approval process 
itinerary dragged trip status document approval process underway employee task done short checking status trip 
trip approved denied relevant people employee sent email notification result 
serving drop target new trip itineraries trip status document contains content summarizes state user travel plans 
content html format contains summary trips employee submitted requests see 
way employee run application understands html netscape word framemaker view document check status pending trips 
contents trip status document help managers giving list itineraries require attention 
trip status document serves nexus coordination trips approving trips content dynamically updated states pending processed travel change 
actual approval denial trip performed itinerary document 
manager opens travel itinerary requires vote view document usual happens voting box created active property allows decide approve deny trip 
note arrangement differs classic workflow users system explicitly run workflow software 
case manager open document way normally view edit system augments normal interaction include access user interface components needed drive workflow process 
works maui new active properties 
attached trip status document 
property functions 
listens drops documents receives starts documents travel approval process 
determining user manager department head organizational information stored documents represent users system edwards lamarca attaching copies second property described dropped document 
dropped document addition roles performing trip request 
second serves html content summarizes state user trips 
travel status document largely straightforward task querying travel documents formatting results html bit provider invoked content required dynamically generate new information state world time invoked 
second new property approve managers interact casting votes trip 
property determine user currently viewing document attached manager decision needed particular travel request 
appropriate property create display gui component button voting 
clicking buttons record manager vote document send employee notification appropriate 
applications placeless aware check existence components display alongside document content 
approve deny property create separate standalone gui control panel appear travel request viewed application 
knowledge state travel approval process distributed properties 
status bit provider knows add configure prop erties order turn ordinary document pending itinerary understand votes applied 
instance approve deny property knows single manager vote knows managers voted 
section describe complex process see distribution knowledge state increases behaviors users included process 
managing complex process hiring support research lab hiring process involves number different steps people 
chose implement hiring process application second document centered workflow application potentially offers significant benefits tests model interaction 
travel approval application implemented top placeless documents properties hold logic state process collection properties comprise hiring application called carlos 
hiring process illustration hiring process carlos shown 
process candidates submit application form resume set supporting documents articles papers 
determining application order letters requested candidate 
letters received candidate materials reviewed screening committee 
job screening committee decide interview scheduled 
carlos screening committee arbitrary size designed policy small group member votes 
interview approved candidate contacted date chosen interview traditional administrative procedures 
point candidate brought interview process moves general voting stage members lab invited submit hiring proxy vote candidate described 
carlos rigid quantitative rules governing number votes cast rejection acceptance thresholds 
votes statistics accumulate review lab manager final hiring decision 
user view carlos users interact number different document types hiring process 
documents exist candidate basis 
process describe similar lab 
changes process order simplify illustrate interesting things system 
hiring process shared 
important shared document hiring status document contains live date summary status candidates system 
user tool understands html content open status document candidate process see 
overview users view candidate letters jump supporting documents see compilations screening hiring votes cast 
status document serves mechanism adding new candidates system 
candidate entered hiring process dragging link resume hiring status document 
see departure traditional workflow carlos resume documents composed application saved format 
especially useful hiring process resumes letters arrive number different forms including postscript simple ascii tiff images scanned documents 
dragging resume status document new candidate document created 
document serves important functions 
contains html content gives detailed view candidate status 
content similar hiring status document provides greater detail 
candidate document functions mechanism adding letters supporting documents candidate 
users drag documents candidate document choice type document dropped letter supporting document system records choice 
transitions states hiring process take place automatically user intervention required dropping third letter candi hiring status document date instance candidate status automatically changed waiting letters requiring screening decision candidate document cast screening hiring votes system 
carlos vote just simple number 
votes system quantitative portion plus related document called proxy 
gives users system considerably flexibility express thinking voted way 
cast vote screening hiring users compose proxy desire drag document candidate 
point user small gui allow enter quantitative portion vote 
case screening vote quantitative portion simple case hiring vote candidates judged scale 
research lab hiring votes cast number ways 
roughly half people lab attend formal hiring meeting discuss candidate people send email proxies leave voice mail proxies 
due flexibility system accommodate proxies forms 
email voice mail easy turned documents attached candidate document 
digital video infrastructure possible record entire hiring meeting break different documents containing individual proxy 
carlos centralized application set coordinated properties effort provide user coherent experience possible 
reason chose html format status candidate documents 
hyperlinking html easy users smoothly move status single candidate status candidate letters proxies 
works travel approval application functionality carlos divided number active properties 
functionality status document provided provides date status candidates create new candidate documents resume 
bulk logic hiring process lives 
status bit provider knows produce html content describing candidate status 
understands receive drops supporting documents letters screening hiring votes 
things needs understand various states hiring process transitions take place 
example property knows candidate waiting letters state third letter dropped advance requiring screening decision state 
carlos uses property gives document ability refer relevant document 
carlos adds property supporting document letter proxy vote configures point relevant candidate document 
way users quickly jump linked clusters related documents 
extending document focus domains software engineering final application built document centered model tool support software development process called 
software development fluid chaotic process needs strong support workflow tools 
tools try provide clean task boundaries separation responsibilities enhance software development process 
software development collaborative process attributes traditional workflow processes task shared people different overlapping responsibilities result shared artifact code moves state state progresses readiness 
factor complicates software process greatly presence multiple versions artifact developer may copy software differs 
divergence things distinguishes software development traditional workflow 
workflow situations version artifact travel approved isn candidate interviewed 
different participants workflow share fully consistent view state process 
contrast software developers snapshots code state may vary widely 
wanted see expand reach document centered model extremely fluid domain software engineering 
goals fold 
wanted support awareness state development process 
second wanted support automation subtasks development process 
providing true useful sense awareness typically hard problem collaborative development may know piece code checked way knowing finer granularity doing re changing 
workflow systems designed provide awareness context task hand manager aware state travel terms sense travel approval task example 
unfortunately software engineers typically coarse forms machine supported awareness available level knowing individual file checked instance 
believed support better facilities fine grained task focused awareness model 
wished explore automation development process embodying individual tasks active properties attached program content 
properties serve load cumbersome chores development running tests generating documentation ensuring builds finish correctly 
provides collection properties support development process enhancing awareness automation 
document centered focus brings benefits accrue applications ability tools hand operate content unification disparate task models single document metaphor 
application collection properties attached source code files 
properties control behavior files ensure interact support development process smooth way 
mentioned common awareness problems collaborative code development knowing working source files 
typically process reconciling working versions done users check code centralized repository represents true view project 
desire lessen potentially cumbersome error prone process reconciling changes check time providing awareness changes making code base real time 
system shows details working code snapshots currently regardless code checked 
system understands users working program files knows basic structure source code provide awareness information way semantically meaningful task hand 
java example system shows methods classes changed users 
form awareness allow users know working portion code user worked regardless check status 
system doesn prevent users making overlapping changes check process provide information colleagues doing 
shows example java source file edited user 
display provides fine grained information identifying areas changed users changes may checked 
supports collaborative development supports automation common tasks software development 
set active properties attached source files automatically compile run programs defined source files automatically generate documentation 
refer 
automatically compile program generate documentation code changed 
properties com prise generate new user interface components user 
see number views display date documentation currently edited source file look state compilation file 
extra control enabled code compiled errors allowing user easily run application 
tasks happen automatically user intervention requiring user attention results 
steps typically part build process automated makefiles build tools 
allows new build tasks added incrementally attached directly code documents 
note developers integrated development environments ides 
properties comprise add new ui components applications change innate controls displaying code assist development process 
example developers remain aware ide developer doing active properties detect changes live noticing updates document edited ide 
second properties provide new ui components controlling displaying conflicting updates pop stand windows ide windows 
automation aspects active user running ide 
documentation object files generated background results operations available separate placeless documents 
works awareness aspects driven property attached code source files called 
property awakens periodically computes hash code signatures text individual methods 
signatures stored document properties identifying state content terms source code structure 
signatures computed property performs query find versions source file placeless documents users 
documents attached date lists signatures attached 
signature lists compared see users making potentially conflicting changes 
provide ui widget presents potential conflicts 
automation tasks implemented separate property called 
property performs tasks new content written invoking external tools jobs 
run javac compiler compile java code needed javadoc documentation generation system 
property captures output external compilation process creates new placeless document 
object files result compilation imported placeless error warning messages compiler 
javadoc generated html documentation imported placeless 
properties expose derived documents views original source directly available property provided ui controls course accessed browser query applications 
compilation executes successfully generates run control applications invoke code 
experiment convinced facilities provided placeless documents system applicable range application domains 
provides support time consuming tasks collaborative development coordination peer developers automation aspects build process 
adds value development process allowing users tools comfortable 
enhances functionality existing tools getting way commonly development processes 
directions examined model workflow separates monolithic workflow applications individual component behaviors attached directly content heart activities 
exposing state workflow process document leverage wealth general purpose document management tools exist environments 
integration computation content hope move closer model envisioned abbott sarin workflow invisible capability applications 
ability tools comes price generalpurpose tools lose tight semantic binding specialized applications provide 
custom stand workflow tools embody semantics tasks manage ways general purpose tools 
tension design workflow processes model strike balance general tools specific requirements task hand 
managing balance effectively direction research 
addition pragmatic benefits allowing standard tools integrate workflow practice novel way model active content provide fluid expressions workflow tasks 
example single piece content participate multiple workflows layering active properties 
new behaviors easily added documents disrupting behaviors place 
primary focus enabling types tasks workflow applications typically managed believe infrastructure implications uses types tasks 
software engineering example represents class task col different rigorously structured globally consistent views traditional workflow processes enhance 
active property mechanisms support workflow task great benefit 
believe foundation provided placeless documents infrastructure support construction applications accurately clusters active property sets range document organization management tasks 
systems described implemented atop placeless document system 
placeless approximately lines java code amount code needed implement active properties quite small order lines code 
believe placeless provides excellent substrate constructing experimenting new document services tools allows easy development behavior piecemeal fashion 
primarily exposition systems aspects placeless applied novel applications original motivation doing see facilities provided placeless applied demanding domain workflow 
believe primary value collection systems concepts allow construction new forms document interaction particular expressions systems concepts actual workflow examples 
desire put forward novel model workflow description infrastructure required support model 
currently investigating new applications placeless including electronic mail general purpose organizational tools new vertical application domains including workflow examples 
plan continue refine extend infrastructure year lessons learn applications 
acknowledgments placeless documents project parc large effort benefited involvement support people 
particular karin petersen douglas terry contributed placeless design implementation directly involved workflow applications described 
abbott sarin 

experiences workflow management issues generation 
proc 
acm conf 
computer supported cooperative cscw chapel hill nc 
new york acm 
smith 

transparent sharing java applets replicated approach 
proc 
acm symp 
user interface software uist banff alberta 
new york acm 
hill 

building shared graphical editors abstraction link view architecture 
proc 
european conf 
computer supported cooperative ecscw milano italy 
dordrecht kluwer 
bennett 

learning users experiences groupware 
proc 
acm conf 
computer supported cooperative cscw los angeles ca 
new york acm 
cortes mishra 

programming langauge describing collaborative 
proc 
acm conf 
computer supported cooperative cscw boston ma 
new york acm 
dourish bellotti 

awareness coordination shared workspaces 
proc 
acm conf 
computer supported cooperative cscw toronto ontario 
new york acm 
dourish edwards lamarca lamping petersen salisbury terry 

extending document management systems active properties submitted transactions information systems 
edwards lamarca 

balancing generality specificity document management systems submitted interact 
gelernter 

generative communication linda 
acm trans 
programming systems 
grudin 

groupware applications fail problems design evaluation organizational interfaces 
proc 
acm conf 
computer supported cooperative cscw portland 
new york acm 
isaacs morris rodriguez 

forum supporting interactive presentations distributed audiences 
proc 
acm conf 
computer supported cooperative cscw chapel hill nc 
new york acm 
jeffay lin smith smith 

architecture artifact collaboration system matrix 
proc 
acm conf 
computer supported cooperative cscw toronto ontario 
new york acm 
johnson nardi 

creating presentation slides study user preferences task specific versus generic application software 
acm trans 
computer human interaction 
olsen hudson phelps heiner 

ubiquitous collaboration surface representations 
proc 
acm 
conf 
computer supported cooperative cscw seattle wa 
new york acm 
olson 

groupware wild lessons learned year virtual collocation 
proc 
acm conf 
computer supported cooperative cscw boston ma 
new york acm 
palmer cormack 

operation transforms distributed shared spreadsheet 
proc 
acm conf 
computer supported cooperative cscw seattle wa 
new york acm 
prakash shim 

support building efficient collaborative applications replicated objects 
proc 
acm conf 
computer supported cooperative cscw chapel hill nc 
new york acm 
schmidt bannon 

cscw seriously supporting articulation 
computer supported cooperative 
winograd flores 

understanding computers cognition new foundation design 
norwood nj ablex 
