computational model theory overview moshe vardi department computer science rice university houston tx usa 
mail vardi cs rice edu url www cs rice edu vardi computational complexity problem amount resources time space required machine solves problem 
descriptive complexity problems complexity describing problems logical formalism finite structures 
exciting developments complexity theory discovery intimate connection computational descriptive complexity 
connection complexity theory finite model theory term computational model theory 
overview offer perspective computational model theory 
important observations underly perspective computational devices encodings problems logic applied directly underlying mathematical structures mismatch complicates relationship logic complexity significantly order logic severely limited expressive power finite structures way increase limited expressive power order logic adding fixpoint constructs 
observations motivated formalisms finite variable infinitary logic relational machines 
story formalisms computational model theory interrelationship 
keywords computational model theory computational complexity descriptive complexity theory infinitary logic relational machines computational complexity problem amount resources time space required machine solves problem 
complexity theory traditionally focused computational complexity problems 
branch complexity theory focuses descriptive complexity problems complexity describing problems logical formalism finite structures 
exciting developments complexity theory discovery intimate connection computational descriptive complexity 
connection complexity theory finite model theory term computational model theory 
overview offer perspective computational model theory 
themes perspective fact relationship descriptive computational complexity intimate problems full version invited th workshop logic language information computation www di br held brazil august scientific sponsorship igpl asl organised univ federal univ federal de 
interested exclusively finite structures 
terms model structure refer finite models structures explicitly stated 
igpl vol 
pp 
oxford university press computational model theory overview partners irreconcilable differences 
computational devices encodings problems logic applied directly underlying mathematical structures 
result machines able enumerate objects logically unordered 
example typically think set nodes graph unordered ordered encoded tape turing machine 
order mismatch complicates relationship logic complexity significantly 
second theme perspective fact order logic severely limited expressive power example graph connectivity expressible order logic see 
view fact emphasis database theory finite model theory logics go order logic 
way increase limited expressive power order logic adding fixpoint constructs 
fixpoint fundamental computational construct extension viewed transforming logic assertional logic computational logic 
extensions order logic subject extensive study focusing expressive power relationship complexity classes particular pspace asymptotic probability properties cf 

particular importance extensions inflationary fixpoint logic obtained order logic adding fixpoints inflationary order formulas fixpoint logic obtained order logic adding fixpoints general order formulas 
order logic finitary syntax different way increase expressive power allow infinitary formation rules 
powerful logics resulting way infinitary logic allows arbitrary disjunctions conjunctions 
logic studied extensively infinite structures cf 
powerful interest finite model theory class structures closed isomorphisms definable 
interesting extension perspective finite model theory infinitary logic consists formulas finite number distinct variables 
formally union lk lk collection formulas variables 
infinitary logic studied originally infinite structures turned uses finite model theory 
fact said underlie lower bounds expressibility finite structures implicit 
reasons importance finite model theory fact expressiveness standpoint constitutes proper extension inflationary fixpoint logics 
derive positive negative results fixpoint logics 
positive side structural results transfer similar results fixpoint logics negative side lower bound results expressibility yield fortiori lower bounds expressibility fixpoint logics vice versa 
main advantage expressive power infinitary logics lk variables clean precise characterization terms simple pebble games players pair structures cf 

contrast fixpoint logic known possess similar property 
review applications 
concerns expressibility second concerns 
fixpoint logics infinitary logic laws 
provide elegant framework studying important phenomena laws expressive power query languages infinitary formulas non effective syntax define non computable queries 
seek understand better connection effective query languages 
main focus identify natural effective fragments relate known computational models queries 
formalize natural effective fragments define syntactic semantic notions recursively enumerable formulas 
syntactic notion enumeration syntactic components sentence 
contrast semantic notion requires set models sentence show intimate connection effective fragments formal computing device subsumes database query languages 
device called relational machine consists turing machine interacting relational store order queries 
model similar spirit computation carried practical database languages sql order queries embedded host programming language 
turing machines operate encodings problems relational machines operate directly underlying mathematical structures overcoming order mismatch 
turing machines natural measure complexity terms size input 
measure natural relational machines machines measure size input 
fact relational machines limited discerning power power distinguish different pieces input able manipulate input relationally 
suggests natural measure size input relational machine respect discerning power machine 
new measure gives rise new notion computational complexity called relational complexity resulting classes relational polynomial time relational deterministic polynomial space 
relational complexity serve mediator logical complexity standard complexity 
hand questions containments standard complexity classes translated questions containments relational complexity classes 
hand expressive power fixpoint logic precisely characterized terms relational complexity classes 
tight relationship fixpoint logics relational complexity standard complexity yields logical analogs containments complexity classes 
particular shows tantalizing questions complexity theory vs pspace np vs pspace pspace vs exptime boil fundamental issue understanding relative power inflationary vs st order operations 
fixpoint logics infinitary logic fixpoint logics early relational model dominant data model database management systems 
core query language computational model theory overview relational model relational calculus order logic 
known natural graph theoretic queries transitive closure connectivity acyclicity colorability order definable 
motivated proposal aho ullman extend order logic fixpoint construct 
vocabulary ary relation symbol xn order formula vocabulary structure 
formula gives rise operator ary relations universe ary relations ary relation operator generates sequence stages obtained iterating 
interested relationship stages operator fixpoints 
definition structure vocabulary 
stages defined induction 
say relation fixpoint operator formula intuitively associate operator limit stages 
possible sequence stages converges integer 
notice case fixpoint 
sequence stages may converge 
particular happen formula fixpoints 
additional conditions imposed formulas considered order ensure sequence stages converges 
xn form xn xn 
guarantees ary relation natural syntactic condition guarantees convergence 
sequence stages increasing 
structure elements stage sn elements consequently integer sn 
sequence stages converges inflationary fixpoint 
write denote inflationary fixpoint 
inflationary fixpoint logic denoted ifp order logic augmented inflationary fixpoint formation rule inflationary formulas 
canonical example formula ifp provided inflationary fixpoint order formula 
case defines transitive closure edge relation follows connectivity property expressible ifp noted order logic 

fixpoint logics infinitary logic fixpoints guaranteed exist formula xn positive occurrence scope number negations 
case monotone consequently sequence increasing limit fixpoint 
fact limit fixpoint 
positive fixpoint logic st order logic augmented positive fixpoint formation rule positive formulas 
easy see ifp expressive logic 
gurevich shelah showed fact logics expressive power see 
complexity theoretic aspects ifp studied 
papers focused positive fixpoint logic observed positive fixpoint logic ifp expressive power implies data complexity sense 
known ifp captures complexity class ptime logic said capture complexity class holds 
problems expressible 
ordered structures express problems natural definition require problem iff expressible problems ptime evenness property checking cardinality structure expressible ifp 
requiring express precisely problems stringent 
obtain logics fixpoint constructs expressive inflationary fixpoint logic 
powerful logic results iterates general firstorder operators fixpoint reached may happen 
case may non terminating computations inflationary fixpoint logic iteration guaranteed converge 
definition sequence stages operator associated formula xn structure integer set 
call fixpoint fixpoint logic nfp st order logic augmented fixpoint formation rule arbitrary st order formulas 
notice order formula xn structure elements sequence stages converges cycles 
case determined carrying sn iterations sn distinct ary relations elements 
computation fixpoint requires space polynomial size structure length reasonable encoding structure 
example size ary relation tuples domain elements mn log 
structure store stage time compute stage making sure current level iteration exceeded sn 
notice formula xn inflationary shown loss expressiveness restricting attention converging st order operators operators integer 
computational model theory overview fixpoint coincides inflationary fixpoint sequence stages converges 
follows nfp extension ifp 
ifp formulas evaluated polynomial time nfp formulas evaluated polynomial space express pspace complete problems network convergence problem 
fixpoint logic introduced abiteboul vianu called partial fixpoint logic 
particular observed logic coincides query language rql introduced studied 
follows nfp captures complexity class pspace evenness property expressible nfp 
ifp captures ptime nfp captures pspace ifp nfp expressive power ptime pspace 
clear converse holds ifp nfp need order fully capture ptime pspace respectively 
phenomenon called order mismatch 
complexity classes defined terms turing machines 
turing machines receive ordered inputs encoding input impose order nodes input graph numbered 
contrast logic operates level require imposition order consider example transitive closure query expressed ifp 
return order mismatch sequel 
finite variable infinitary logic consider infinitary logic extension order logic results allowing infinite disjunctions conjunctions syntax keeping quantifier strings finite cf 

illustrate gain expressive power recall evenness property noted expressible nfp 
firstorder sentence stating exactly elements 
infinitary sentence asserts number elements 
define formally syntax infinitary logic 
definition vocabulary consisting finitely relational constant symbols vn 
infinite set variables 
class infinitary formulas smallest collection expressions contains order infinitary formula infinitary formula vi variable vi vi infinitary formulas set infinitary formulas infinitary formulas 
semantics infinitary formulas direct extension semantics firstorder logic interpreted disjunction formulas interpreted conjunction 
note mismatch arise fagin result existential second order logic expresses precisely np complete problem logic possible require existence total order 

fixpoint logics infinitary logic context finite model theory powerful interest express class structure closed structure described order sentence 
general formulas may infinite number distinct variables 
focus attention fragments total number variables required finite 
variables may infinite number occurrences formulas 
definition positive integer 
infinitary logic variables denoted lk consists formulas distinct variables 
infinitary logic consists formulas finite number distinct variables 
lk 
write lk collection order formulas variables 
family infinitary languages introduced barwise tool studying positive fixpoint logic infinite structures 
time languages numerous uses applications theoretical computer sciences 
underlie studied right 
see survey 
give examples illustrate expressive power infinitary logic fixed number variables 
example paths connectivity assume vocabulary consists single binary relation symbol pn order formula asserting path length obvious way write pn variables xn xn 
known pn order formula distinct variables see put assume induction pn pn 
follows connectivity property directed graphs expressible pn 
similarly property cycle definable pn 
notice set positive integers property connected path length number expressible formula pn 
follows express non recursive properties 
properties connectivity cycle known expressible ifp 
consider extensions order logic fixpoint formation rules compare resulting logics 
key observation underlying ifp nfp viewed fragments 
computational model theory overview theorem xm lk formula vocabulary ary relation operator associated 
stage xk definable lk formula structures 
result fixpoint xk xk definable formula lk structures 
note expressive nfp observed express non recursive properties 
applications reasons importance finite model theory fact expressive power standpoint constitutes extension fixpoint logics theorem 
derive positive negative results fixpoint logics 
positive side structural results transfer similar results fixpoint logics negative side lower bound results expressibility yield fortiori lower bounds expressibility fixpoint logics vice versa 
main advantage expressive power infinitary logics variables clean precise characterization terms simple pebble games players pair structures cf 

contrast fixpoint logic known possess similar property 
lk equivalence pebble games structures equivalent logic sentence distinguishes 
central concept logic plays important role model theory 
discuss equivalence infinitary logics fixed number variables 
definition structures vocabulary positive integer 
say equivalent write ifa satisfy sentences 
say equivalent write ifa satisfy 
connection definability equivalence relation described propositions 
proposition vocabulary class structures positive integer 
equivalence class equivalence relation definable sentence 
proposition class structures vocabulary positive integer 
statements equivalent 
class definable sentence structure 

applications 
structures known equivalence characterized terms infinitary pebble game 
game implicit barwise described detail immerman 
definition assume structures vocabulary cl dl interpretations constant symbols respectively ci cj iff di dj pebble game players known spoiler duplicator structures proceeds rounds rules round spoiler chooses structures places pebble elements 
duplicator responds placing pebble element structure 
spoiler chooses structures game continues way pebbles placed structure 
ai bi elements respectively picked players th move 
spoiler wins game point conditions holds pebbles element structures corresponding pebbles different elements structure ai aj bi bj ai aj bi bj previous condition fails mapping ai bi cj dj isomorphism substructures universes respectively 
ak cl bk dl conditions fail spoiler removes corresponding pairs pebbles game proceeds round 
duplicator wins game continue playing forever spoiler win round game 
concept winning strategy duplicator pebble game formalized terms family partial isomorphisms see details 
crucial connection pebble games equivalence provided result 
theorem structures vocabulary positive integer 
equivalent computational model theory overview 


duplicator winning strategy pebble game note fact pebble game captures lk equivalence lk equivalence holds finite structures general structures pebble game captures lk equivalence differs lk equivalence 
consequence proposition theorem get game theoretic characterization definability logics lk 
proposition class structures vocabulary positive integer 
statements equivalent 
class definable 

structures duplicator winning strategy pebble game expressiveness proposition provides method establishing certain properties expressible infinitary logic finite number variables 
specifically order establish property expressible formula show structures ak bk ak bk duplicator winning strategy pebble game ak bk 
proposition guarantees method complete expressible structures ak bk exist 
demonstration method show evenness property expressible proposition evenness property expressible 
proof 
sketch describe proof vocabulary consists binary predicate symbol proof arbitrary vocabularies similar 
suffices show evenness property expressible lk arbitrary consider kk kk complete directed graphs nodes nodes respectively 
obviously precisely structures cardinality 
note node substructure kk kl turn isomorphic node substructure kk duplicator clearly winning strategy pebble game kk 
claim follows 
laws infinitary logics vocabulary consisting finitely relation symbols proposition function constant symbols class structures universe initial segment positive integers 
property structures labeled asymptotic probability onc defined equal limit fraction structures cardinality satisfy provided limit exists 
say true 
applications case equal 
false 
turns interesting properties class graphs true false 
example known easy prove connectivity rigidity planarity colorability 
hand evenness asymptotic probability 
study asymptotic probabilities viewed foundations theory average case complexity focuses average case properties mathematical structures cf 

fagin establish fascinating connection logical definability asymptotic probabilities 
specifically showed class structures relational vocabulary property expressible order logic exists 
result known law order logic starting point series investigations aiming discovering relationship expressibility logic asymptotic probabilities 
survey compton contains account developments area see expository 
logic say law holds case exists equal logic important direction investigation finite model theory pursued study laws fixpoint extensions order logic 
showed holds order logic augmented transitive closure operator 
result extended independently blass gurevich kozen proved law holds ifp 
results extended law established nfp 
turns results subsumed law 
past laws various logics proved establishing transfer theorem kind infinite structure vocabulary property expressible satisfies method discovered fagin proof law order logic 
establish law ifp show law holds nfp 
turns countable structure vocabulary satisfies equivalence logics 
structure unique isomorphism 
call countable random structure vocabulary 
random structure characterized infinite set extension axioms intuitively assert type extended possible type 
precise definitions follows 
definition vocabulary consisting relation symbols 
xm sequence distinct variables type variables conjunction formulas maximally consistent set equalities xi xj inequalities xi xj atomic formulas variables negated atomic formulas variables computational model theory overview variable different variables say type extends type conjunct conjunct 
pair types extends associate firstorder extension axiom stating 
set extension axioms 
theory studied gaifman showed back forth argument countable models isomorphic isan categorical theory 
fagin realized extension axioms relevant study asymptotic probabilities proved class structures finite vocabulary extension axiom equivalence truth sure truth consequently law order logic follows results application compactness theorem mathematical logic 
show law holds infinitary logic game theoretic characterization 
proofs transfer property proof note employ methods proofs assume law order logic involve random structure infinite structure compactness consequences 
law derived directly establishing transfer theorem 
law hand subsumes earlier ones hand provides unifying treatment laws order logic extensions fixpoint operators infinitary syntax 
fixed positive integer 
structure write forthe equivalence class respect equivalence relation 
follows show tight connection laws asymptotic probabilities equivalence classes 
turns general fact holds arbitrary probability measures 
far results discussed uniform probability measures structures elements carry probability 
developed study random structures variable probability measures 
started erd nyi detail bollob 
general probability measure prn structures elements prn may non uniform distribution 
asymptotic probability pr relative probability measures prn defined pr limn prn provided limit exists 
note asymptotic probability defined earlier uniform measure simply special case definition 
logic say law holds relative measure pr sentence asymptotic probability pr exists 
notice strictly speaking pr probability measure countably additive finitely additive 
describe necessary sufficient condition existence laws arbitrary probability measures 
note compactness theorem known fail finite structures 

effective fragments theorem class structures vocabulary positive integer prn sequence probability measures structures elements 
equivalent 
law holds infinitary logic lk relative measure pr 

equivalence class equivalence relation pr 
return uniform measure law preceding theorem characterization terms pebble games 
theorem class structures vocabulary positive integer conjunction extension axioms variables 
structure model 
result law holds relative uniform measure proof 
sketch models easy verify duplicator winning strategy pebble game intuitively winning strategy duplicator provided elements witnessing extension axioms variables 
follows theorem models thena follows structure model law follows theorem 
corollary class structures vocabulary 
law holds ifp nfp relative uniform measure effective fragments elegant theoretical tool formulas non effective syntax define non computable queries 
practical query language context databases 
purpose section identify natural effective fragments relate known computational models queries 
relational machines language consisting ifp nfp queries viewed programming language simple control interacting databases set order queries 
natural extension paradigm consider computationally complete computing devices interacting database order queries 
relational machine turing machine augmented relational store 
relational store consists set relations certain arities 
relations designated input relations designated output relations 
type relational machine sequence arities relations 
arity machine maximal arity relations store 
example relational store may consists unary relations binary relation case type arity 
tape machine tape initially empty 
transitions depend current state content current tape cell computational model theory overview test emptiness relation relational store 
transitions involve actions move right left tape overwrite current tape cell tape symbol replace relation store result order operation relations store 
order operations boolean operations im project tuples relation coordinates im specified order cross product relations resp select relation tuples th coordinate coincides th select tuples th coordinate coincides domain element see 
example machine instructions machine state head reading symbol relation empty change state replace symbol move head right replace 
relational machines model embedding relational database query language general purpose programming language 
essentially loosely coupled generic machines introduced 
turing machines get input spread input tape relational machines get input natural way 
example input graph input machine set nodes unary relation set edges binary relation 
order mismatch come relational machines fixpoint logics 
come back connection relational machines fixpoint logics 
relational machines give rise types computational devices 
think relational machine acceptor relational language set structures 
case assume single ary output relation machine accepts output relation consists ary tuple rejects output relation empty 
think relational machine relational function computing output structure input structure 
think relational machine mixed function function structures strings output written machine tape 
relational machines turing machine component perform arbitrarily complex computations tape 
relational machines turing complete ordered inputs compute encoding ordered input tape proceed emulate standard turing machine 
relational machines turing complete general 
shall see compute evenness 
wide variation expressive power generalizes situation ifp nfp languages similar causes 
ifp nfp relational machine interacts databases finite set order queries limits ability distinguish tuples input 
essentially relational machine perform computation equivalence classes tuples distinguish 
return point shortly 
infinitary logic relational machines noted syntax semantics effective 
isolate natural effective fragments consider syntactic semantic aspects 
expressive power turing machines 

effective fragments leads notions recursively enumerable fragments syntactic effectively enumerate syntactic components formula 
semantic set models formula shall see approaches lead classes formulas sets models 
start syntactic approach 
consider syntax tree formula 
definition path tree finite 
suppose node tree countably children 
position tree identified finite sequence ik integers 
notion recursive enumeration components formula captured definition 
disjunctions conjunctions countable 
exists computable function finite sequence integers ik returns symbol position denoted ik syntax tree 
definition analogue definition church kleene fragment lck syntactically effective fragment see 
turns syntactic effectiveness guarantee semantic effectiveness 
show formulas yield analog arithmetic hierarchy defined relational machines 
arithmetic hierarchy relational machines defined analogy classical arithmetic hierarchy 
precisely add relational machines oracles sets structures accepted relational machines obtain level hierarchy add oracles set structures accepted 
rel denote collection sets structures hierarchy 
proposition models sentence iff rel easily seen rel coincides ordered inputs classical arithmetic hierarchy 
formulas define non computable queries 
try attack problem finding effective fragments semantic approach 
semantic notion effective formula simply requires definition structures vocabulary recursively enumerable exists recursive enumeration ii structures iff structure isomorphic belongs enumeration 
characterize sentences set models result shows semantically equivalent relational machines 
yields normal form sentences 
prove result normal form style 
normal form says essentially query reduced relational machine query ordered structures 
computational model theory overview structure ordered contains binary relation succ consisting successor function domain structure 
normal form reduces query evaluation arbitrary structures query evaluation ordered structures 
lemma fact resulting structure ordered encode structure tape relational machine 
lemma vocabulary vocabulary relational machine formula 
structure computes tape encoding ordered structure 
exists formula structure iff 
theorem set structures vocabulary 
equivalent 
accepted relational machine 
models sentence proof 
sketch suppose accepted relational machine arity clearly simulated standard turing machine 
shown accepting computation described formula 
set formulas describing accepting computations accepting computation 
input accepted iff yields accepting computation models 
suppose models 
wecan lemma 
note relational machine accepting constructed follows 
input computes tape 
enumerates encodings instances tape possible isr accepts generated 
verify accepts precisely suppose accepted forsome satisfying 
isomorphic 
lemma satisfies soi satisfies 
lemma satisfies soi conversely suppose occurs accepts relational machines viewed syntactic semantic effective fragment 
relational complexity identified relational machines effective fragment define complexity classes relational machines 
noted measure input size appropriate relational machines 

effective fragments turing machines relational machines limited access input particular generally compute size 
relational machines discerning turing machines 
say relational machine discern tuples input ary relation store computation precisely example automorphism maps discerned discerning power relational machines best understood terms pebble games 
pebble game spoiler duplicator tuples structure proceeds described pair structures initial rule 
game starts spoiler choosing tuples elements chosen tuple ul vl placing pebbles chosen elements duplicator responds placing pebbles elements tuple placing pebbles chosen elements duplicator wins pebble game tuple structure say equivalent denoted 
characterizes discerning power ary relational machines 
proposition tuples equivalent structure ary relational machine discern ary relational machines discern equivalent tuples measure size input 
intuitively ary relational machine sees input equivalence classes tuples 
best understood looking extremes 
shown relational machines turing complete ordered inputs distinct tuples distinguished collapse order logic unordered sets number equivalence classes bounded constant independent size input 
ary relational machine sees input equivalence classes tuples natural measure input size respect size structure denoted number classes tuples reasonable measure time space complexity ary relational machines function size input 
measure reasonably serve basis measuring complexity calculated relational machines 
state important technical result 
lemma input type exists ifp formula variables xk yk input type formula defines partial order tuples xk incomparable yk iff xk yk 
words exists ifp query computing order equivalence classes order counting number classes easy 
proposition input type relational machine outputs tape input structure type string length time polynomial 
measure complexity ary relational machines terms size input 
define relational complexity classes terms deter computational model theory overview nondeterministic relational time relational space 
define relational complexity class relational polynomial time proposition guarantees effective classes 
obvious known relationships deterministic nondeterministic alternating complexity classes pspace hold relational complexity classes relationships typically result simulations order show hold simplify complexity classes notation class resource control bound resource control bound resource time space control deterministic nondeterministic alternating bound bounding function family functions 
class time nondeterministic poly np space deterministic poly 
assume bounds linear 
typically bound polynomially closed set functions set functions contains linear functions contains contains polynomials 
furthermore assume bounds fully time space constructible see 
note commonly functions including logarithmic linear polynomial exponential bounds fully time space constructible fully time space constructible functions polynomially closed 
relationship relational standard complexity 
easy see size structure bounded polynomial size 
furthermore relational machines strictly weaker turing machines check cardinality input 
follows theorems 
proposition polynomially closed set functions 
resource control class resource control resource control 
relational machines sense weaker standard machines weakness due lack order 
weakness disappears presence order 
string say alphabet 
encode structure rel consisting total order elements unary predicate elements giving positions string 
note size rel bounded language rel 
rel ordered relational machine simulate machine proposition resource control polynomially closed bound language class resource control bound relational language rel resource control bound 
combining propositions get 
effective fragments corollary polynomially closed sets functions resource resource control control resources controls respectively 
proof 
suppose class resource control class resource control resource control resource control 
resource control resource control 
class resource control 
proposition rel class resource control rel resource control 
proposition resource control class resource control 
follows exists turing machine accepts standard encoding rel control control resource resource bounded function iff standard encoding rel obviously obtained time space polynomial follows exists turing machine ml accepts control resource bound 
class resource control 
follows corollary separation results standard complexity classes translate separation results relational complexity classes 
example follows strictly contained 
understand relationship standard relational complexity introduce notion reduction relational language standard language 
say relational language type relationally reducible polynomial time standard language exists deterministic polynomialtime relational machine acting mixed function structures strings structure type turns relational language reduced standard language 
reduction uses partial order constructed lemma 
theorem polynomially closed set fully time space constructible functions relational language resource control 
relationally reducible polynomial time language class 
proof theorem reduction depends type arity relational acceptor denote relational machine reduction type arity call relational reduction machine input type arity combining propositions corollary theorem get relationships relational complexity classes analogous relationships standard complexity classes 
computational model theory overview corollary polynomially closed sets fully time space constructible functions resource resource control control kinds resources controls respectively 
class resource control class resource control resource control resource control 
proof 
part corollary 
part suppose class resource control class resource control relational language type resource control accepted relational machine arity consider relational reduction machine theorem exists language class resource control type iff class resource control class resource control 
relational machine input computes time polynomial runs turing machine accepts control control resource resource bounded function 
accepts uses control control resource resource bounded function 
resource control 
particular follows corollary known relationships deterministic nondeterministic alternating complexity classes pspace hold relational complexity classes 
open questions standard complexity classes translate questions relational complexity classes ptime pspace 
relational machines fixpoint logics fixpoint logics involve iterations st order formulas 
relational algebra expressive power st order logic clear relational machines appropriate control simulate fixpoint logics 
example ifp nfp 
find precise relationship fixpoint logics relational machines consider theorem 
theorem relational language certain relational complexity reduced relational polynomial time standard language analogous standard complexity 
example relational language reduced relational polynomial time language ptime 
discussed earlier ifp captures ptime 
gap ifp relational polynomial time reduction 
gap bridged theorem uses normal form theorem 

effective fragments theorem relational reduction machine input type arity ifp formula rel 
theorem supplies missing link relational machines fixpoint logics 
combining theorem get theorem 
ifp 
nfp proof 
simulate relational machine fixpoint logic uses obtain rel uses logic simulate standard machine 
possible rel ordered structure fixpoint logics express corresponding standard complexity classes ordered structures 
theorem contrasted earlier discussion complexity ifp nfp 
discussion talked ifp nfp capturing complexity classes theorem provides precise characterization expressive power fixpoint logics terms relational complexity classes 
relational complexity mediator fixpoint logic standard complexity 
corollary relates standard complexity relational complexity theorem relates relational complexity fixpoint logic 
bridge gap standard complexity fixpoint logic 
corollary pspace iff ifp nfp tantalizing questions complexity theory boil fundamental issue relative power inflationary vs st order operators 
shown questions np vs pspace pspace vs exptime expressed terms relative power inflationary vs st order operators 
am grateful ron fagin numerous comments previous draft article 
supported part nsf ccr ccr 
abiteboul compton vianu 
queries easier thought probably 
proc 
th acm symp 
principles database systems pages 
abiteboul vardi vianu 
computing infinitary logic 
theoretical computer science 
abiteboul vardi vianu 
fixpoint logics relational machines computational complexity 
acm 
abiteboul vianu 
datalog extensions database queries updates 
journal computer system sciences 
abiteboul vianu 
generic computation complexity 
proc 
rd acm symp 
theory computing pages 
abiteboul vianu 
computing order logic 
journal computer system sciences april 
computational model theory overview aczel 
inductive definitions 
barwise editor handbook mathematical logic pages 
north holland 
afrati cosmadakis yannakakis 
datalog vs polynomial time 
computer system sciences 
aho ullman 
universality data retrieval languages 
proc 
th acm symp 
principles programming languages pages 
barwise 
admissible sets structures 
springer verlag 
barwise 
moschovakis closure ordinals 
journal symbolic logic 
barwise feferman editors 
model theoretic logics 
springer verlag 
blass gurevich kozen 
zero law logic fixed point operator 
information control 
bollobas 
graph theory 
springer verlag 
bollobas 
random graphs 
academic press 
cai immerman 
optimal lower bound number variables graph identification 
combinatorica 
chandra 
theory database queries 
proc 
th acm symp 
principles database systems pages 
chandra harel 
structure complexity relational queries 
journal computer system sciences 
codd 
relational model large shared data banks 
communications acm 
codd 
relational completeness data base sublanguages 
editor database systems pages 
prentice hall 
compton 
laws logic combinatorics 
rival editor nato adv 
study inst 
algorithms order pages 
reidel 
dawar lindell weinstein 
infinitary logic inductive definability finite structures 
information computation 
de 
second order inductive definability finite structures 
zeitschrift mathematische logik und grundlagen der mathematik 
erd nyi 
evolution random graphs 
publ 
math 
inst 

acad 
sci 
fagin 
generalized order spectra polynomial time recognizable sets 
karp editor complexity computation siam ams proceedings vol 
pages 
fagin 
monadic generalized spectra 
zeitschrift mathematische logik und grundlagen der mathematik 
fagin 
probabilities finite models 
journal symbolic logic 
fagin 
finite model theory personal perspective 
theoretical computer science 
feder 
stable networks product graphs 
phd thesis stanford university 
gaifman 
concerning measures order calculi 
israel journal mathematics 
gaifman 
local nonlocal properties 
stern editor logic colloquium pages 
north holland 
gaifman vardi 
simple proof connectivity order 
bulletin european association theoretical computer science june 
kogan 
range degree realizability formulas restricted predicate calculus 
cybernetics 
gurevich 
zero laws logic computer science column 
bulletin european association theoretical computer science 
gurevich shelah 
fixed point extensions order logic 
annals pure applied logic 
hopcroft ullman 
automata theory languages computation 
addison wesley 

effective fragments immerman 
upper lower bounds order expressibility 
journal computer system sciences 
immerman 
relational queries computable polynomial time 
information control 
immerman 
descriptive computational complexity 
hartmanis editor computational complexity theory proc 
symp 
applied math vol 
pages 
american mathematical society 
ph 
kolaitis 
asymptotic probabilities inductive queries decision problem 
parikh editor logics programs lecture notes computer science pages 
springer verlag 
ph 
kolaitis vardi 
decision problem probabilities higher order properties 
proc 
th acm symp 
theory computing pages 
ph 
kolaitis vardi 
fixpoint logic vs infinitary logic finite model theory 
proc 
th ieee symp 
logic comp 
sci pages 
ph 
kolaitis vardi 
infinitary logic laws 
information computation 
ph 
kolaitis vardi 
infinitary logic computer science 
proc 
th international colloq 
automata languages programming pages 
springer verlag lecture notes computer science 
ph 
kolaitis vardi 
expressive power datalog tools case study 
journal computer system sciences august 
ph 
kolaitis vardi 
expressive power variable confined logics 
proc 
th ieee symp 
logic computer science pages 
lakshmanan mendelzon 
inductive pebble games expressive power datalog 
proc 
th acm symposium principles database systems pages 
leivant 
inductive definitions finite structures 
information computation 
lynch 
infinitary logics sparse random graphs 
proc 
th ieee symp 
logic computer science pages 
lynch 
infinitary logic sparse random graphs 
proc 
th ieee symp 
logic comp 
sci pages 
papadimitriou 
computational complexity 
addison wesley 
rogers 
theory recursive functions effective computability 
mcgraw hill 
rubin 
free algebras von neumann bernays godel set theory positive elementary inductions reasonable structures 
phd thesis california institute technology 

asymptotic solvability logical formulas 
combinatorial algebraic methods applied mathematics pages 


asymptotic truth infinite formulas 
proceedings union seminar discrete applied mathematics applications pages 


infinitary queries asymptotic probabilities ii properties definable fixed point logic 
random structures algorithms 
ullman 
database knowledge base systems volumes ii 
computer science press 
vardi 
complexity relational query languages 
proc 
th acm symp 
theory computing pages 
received december 
revised march 
