hybrid automata algorithmic approach specification verification hybrid systems rajeev alur courcoubetis thomas henzinger pei hsin ho introduce framework hybrid automata model specification language hybrid systems 
hybrid automata viewed generalization timed automata behavior variables governed state set differential equations 
show examples considered workshop defined hybrid automata 
reachability problem undecidable restricted classes hybrid automata procedures verifying safety properties piecewise linear hybrid automata variables change constant rates 
procedures respectively minimizing computing fixpoints generally infinite state spaces 
show procedures terminate give correct answers 
demonstrate typical workshop examples procedures terminate provide automatic way verifying properties 
real life processes elevators aircraft controlled programs 
reactive programs embedded continuously changing environments react environment changes real time 
obviously correctness vital importance reactive programs 
traditional program verification methods allow best approximate continuously changing environments discrete sampling 
generalized formal model computing systems needed faithfully represent discrete continuous processes unified framework 
hybrid automata framework 
hybrid system consists discrete program analog environment 
hybrid automata generalized finite state machines modeling hybrid systems 
usual discrete transitions program modeled change program counter ranges finite set control locations 
addition allow possibility global state system changes continuously time laws physics 
control location continuous activities environment governed set differential equations 
label location abbreviated version appeared hybrid systems grossman nerode ravn rischel eds lecture notes computer science springer verlag pp 

bell laboratories murray hill nj 
institute computer science forth department computer science university crete heraklion greece 
supported part bra esprit project react 
department computer science cornell university ithaca ny 
supported part national science foundation ccr united states air force office scientific research contract 
invariant condition hold control resides location transition labeled guarded set assignments 
model hybrid systems inspired phase transition systems mmp viewed generalization timed automata ad 
current pursues objectives 
hybrid automata defined suitability specification demonstrated paradigmatic examples 
second verification problem hybrid automata studied shown intrinsically difficult severe restrictions 
third importantly successfully verify interesting properties truly hybrid system behaviors 
note nicollin independently developed approach similar 
verification purposes restrict linear hybrid automata 
linear hybrid automaton variable rate change time constant constant may vary location location terms involved invariants guards assignments required linear 
interesting special case linear hybrid automaton timed automaton ad 
timed automaton continuously changing variable accurate clock rate change time 
furthermore timed automaton terms involved assignments constants invariants guards involve comparisons clock values constants 
reachability problem linear hybrid automata undecidable pspace complete timed automata 
show algorithms analysis timed automata extended obtain procedures solving verification problem linear hybrid automata 
particular consider fixpoint computation method hnsy minimization procedure timed automata ach :10.1.1.26.7422
methods perform reachability analysis infinite state space timed automaton computing sets states 
show primitive steps algorithms performed relatively easily case linear hybrid automata methods generalized 
crucial observation set states computed algorithms definable linear formula union convex polyhedra 
move timed automata linear hybrid automata termination procedures longer guaranteed 
methods consider prove invariant properties linear hybrid systems 
illustrate methods examples case procedures terminate 
example involves water level monitor 
truly hybrid system water level increases decreases continuously phases 
show prove water level remains specified bounds 
second example proves mutual exclusion property real time mutual exclusion protocol 
earlier algorithmic methods timed automata fail bounds various delays known 
show perform symbolic analysis deduce constraints various bounds 
third example involves leakage gas burner 
example called integrator system required prove bound ratio durations 
modeling hybrid systems define formal model specification language hybrid systems 
hybrid traces interval nonempty convex subset nonnegative real line intervals may open closed bounded unbounded 
left point interval denoted right point bounded denoted intervals adjacent right open left closed right closed 
interval sequence finite infinite sequence intervals partitions 
neighboring intervals adjacent 

interval particular left closed 
interval finite interval sequence unbounded 
interval sequence refines interval sequence obtained splitting intervals 
henceforth identify interval sequence refinement closure fj refines ig 
clearly finite set interval sequences interval sequence refines sequences finite set real valued variables 
state interpretation variables write sigma set states 
trace function sigma 
equivalently trace collection functions variable say trace property constituent functions property properties functions ffl function piecewise smooth exists interval sequence sequence functions restriction interval coincides restriction restriction interval called phase phases piecewise smooth trace restrictions intervals sequence fi ffl piecewise smooth function piecewise linear phase linear 
ffl piecewise linear function step function slope phases 
ffl piecewise linear function clock function slope phases 
ffl piecewise linear function skewed clock function constant slope phases ffl piecewise linear function integrator function slope phase 
timed trace trace constituent functions step function clock function 
set traces fusion closed traces trace gamma hybrid automata model hybrid system fusion closed set piecewise smooth traces 
trace represents possible behavior system real time 
piecewise smoothness ensures bounded interval time finitely discontinuous state changes 
fusion closure ensures state contains information necessary determine evolution system 
define sets traces graphs edges represent discrete transitions vertices represent continuous activities 
hybrid system components ffl finite set vd real valued data variables 
data state interpretation variables vd write sigma set data states 
ffl finite set vertices called locations 
variable pc vd control variable ranges set locations properly encoded vd sigma theta sigma system state pair oe consisting location data state oe sigma ffl labeling function assigns location set possible activities 
activity function sigma ffl labeling function assigns location exception set sigma system control leave location exception occurs 
complement sigma gamma called invariant location 
ffl labeling function assigns pair locations transition relation sigma require locations data states oe sigma oe oe 
state oe called successor state oe iff oe oe 
time instant state hybrid system specifies control location values data variables 
state change ways instantaneous transition changes entire state successor relation elapse time changes values data variables continuous manner activities current location 
exceptions hybrid system enforce progress underlying discrete transition system transition taken exception occurs 
typical exceptions timeouts sensor readings trigger discrete state change 
formally run hybrid system finite infinite sequence ae 
oe oe oe oe oe oe delta delta delta data states oe oe sigma locations intervals activities 
state oe successor state oe 
interval sequence 
activity oe gamma oe gamma 
run ae uniquely determines trace ae gamma 
observe left closed state time time transition state oe gamma state oe defined oe hand left open state time defined oe gamma sa denote set traces ae correspond runs ae system set sa fusion closed time instant run configuration system completely determined location control resides values data variables 
linear hybrid systems linear term ff set variables linear combination variables rational coefficients 
linear formula oe boolean combination inequalities linear terms hybrid system linear activities exceptions transition relations defined linear expressions set vd data variables 
locations possible activities linear functions defined set differential equations form data variable vd rational constant iff vd delta write define activities linear hybrid system 
locations exception defined linear formula oe vd oe iff oe oe 

pairs locations transition relation defined guarded set assignments oe fx ff vd oe linear formula vd ff linear term vd oe oe iff oe oe vd ff 
oe oe ff 
assignment form 
indicates value variable changed nondeterministically arbitrary value 
write term ff various special cases linear hybrid systems particular interest ffl location discrete variable 
discrete variable changes location control changes 
discrete system linear hybrid system data variables discrete variables 
ffl discrete variable proposition pairs data variables propositions linear hybrid automaton finite state system states labeled propositions 
ffl location xg pair clock 
value clock variable increases time uniformly transition automaton resets leaves unchanged 
finite state timed system linear hybrid system data variables propositions clocks 
ffl constant location xg pair skewed clock 
skewed clock similar clock variable changes time fixed rate different 
multirate timed system linear hybrid system data variables propositions skewed clocks 
rate timed system multirate timed system skewed clocks proceed different rates 
graphical representation ffl location xg pair integrator 
integrator clock stopped restarted measure accumulated durations 
integrator system linear hybrid system data variables propositions integrators 
ffl discrete variable parameter pairs parameter symbolic constant instance guards transitions 
different special types linear hybrid automata defined define parameterized version 
instance parameterized timed system linear hybrid system data variables propositions parameters clocks 
clearly linear discrete timed multirate timed integrator system traces sa piecewise linear step traces timed traces skewed clock traces integrator traces respectively 
graphical representation exceptions label locations invariants 
suppress location labels form activities true invariants 
transition labels suppress guard true assignments form reflexive transitions label true suppressed altogether 
example consider linear hybrid system single data variable system locations location value decreases constant rate 
transition may taken time value fallen taken value falls 
transition taken value instantaneously decreased 
location rate starts increase constant rate 
transition back location taken exactly value hits 
time instant control system location location invariant 
initial acceptance conditions turn hybrid system automaton adding initial acceptance conditions 
initiality criterion labeling function assigns location initial condition sigma muller acceptance criterion collection acceptance sets locations 
run ae hybrid muller automaton accepting 
oe 
ae finite final location ae set ae locations visited infinitely ae ae set infinitely 
hybrid automaton linear linear hybrid system locations initial condition defined linear formula oe vd oe iff oe oe 
parallel composition hybrid system typically consists components operating concurrently coordinating 
system constructed descriptions components product operation 
hybrid systems 
product theta hybrid system theta ffl activity belongs iff restriction data variables denoted ffl data state oe iff oej projection oe variables oej ffl oe oe iff oej oe oej oe 
hard see traces product system precisely hybrid traces projections traces component systems 
follows product linear hybrid systems linear accepting run product automaton meet initial acceptance conditions component automata 
examples hybrid systems model thermostat water level monitor clock mutual exclusion protocol leaking gas burner hybrid systems 
temperature controller example describes nonlinear hybrid system 
temperature plant controlled thermostat continuously senses temperature turns heater 
temperature governed differential equations 
heater temperature denoted variable decreases exponential function time initial temperature constant determined plant heater temperature follows function gamma constant depends power heater 
suppose initially temperature degrees heater turned 
wish keep temperature degrees 
resulting system described hybrid automaton note representation initial condition 
automaton locations location heater turned location heater 
water level monitor example describes linear system 
water level tank controlled monitor continuously senses water level turns pump 
temperature water level changes piecewise linear function time 
pump water level denoted variable falls inches second pump water level rises inch second 
suppose initially water level inch kx temperature controller water level monitor pump turned 
wish keep water inches 
time monitor signals change status pump time change effective delay seconds 
monitor signal turn pump water level falls inch signal turn pump water level reaches inches 
linear hybrid automaton describes water level monitor signals water level passes inches respectively 
automaton locations locations pump turned locations pump 
clock specify delays automaton control location signal switch pump respectively sent seconds ago 
section prove monitor keeps water level inches 
mutual exclusion protocol example describes parameterized multirate timed system 
timing algorithm implements mutual exclusion distributed system skewed clocks 
consider asynchronous shared memory system consists processes atomic read write operations 
process critical section time instant processes allowed critical section 
mutual exclusion ensured version fischer protocol lam describe pseudocode 
process mutual exclusion protocol repeat repeat await delay critical section forever processes share variable process allowed critical section iff process private clock 
instruction delay delays process time units measured process local clock 
furthermore process takes time units measured process clock single write access shared memory assignment 
values information timing behavior instructions 
clearly protocol ensures mutual exclusion certain values private processor clocks proceed precisely rate mutual exclusion guaranteed iff example interesting assume private clocks processes proceed different rates local clock times faster clock resulting system modeled product hybrid automata 
automata models process critical sections represented locations private clocks processes determine rate change skewed clock variables respectively 
section prove mutual exclusion guaranteed case happen control location control location leaking gas burner consider integrator system 
chr duration calculus prove gas burner leak excessively 
known leakage detected stopped second gas burner leak seconds leakage stopped 
wish prove accumulated time leakage twentieth time leaking gas burner interval seconds 
system modeled hybrid automaton 
automaton locations location gas burner leaks location 
integrator records cumulative leakage time accumulated amount time system spent location clock records time system spent current location specify properties 
clock records total elapsed time 
section prove invariant system 
undecidability verification design verification algorithms hybrid systems impaired fact emptiness problem hybrid system run undecidable restricted classes systems 
positive side emptiness problem timed automata propositions clocks pspace complete ad 
negative side emptiness problem undecidable asynchronous timed systems propositions skewed clocks proceed different rates integrator systems propositions integrators 
obtain strong undecidability results restrict classes multirate timed systems integrator systems 
linear hybrid system simple linear atoms exceptions transition guards form assignments form vd particular rate timed systems simplicity condition prohibits comparison clocks different rates 
theorem emptiness problem undecidable rate timed systems simple integrator systems 
proof 
part theorem follows undecidability halting problem nondeterministic counter machines 
distinct clock rates rate timed system encode computations 
suppose accurate clocks rate skewed clocks rate 
encode values counters th machine configuration values accurate time counter value encoded clock value accurate clock reset reaches marks intervals length 
obvious counter initialized tested 
remains shown counter incremented decremented 
increment counter represented skewed clock time time start accurate clock interval gamma reset reaches nondeterministically reset interval test time 
decrement counter represented skewed clock time time nondeterministically start accurate clock interval gamma test time reaches interval reset construct rate timed system run iff halts 
acceptance conditions construct rate timed automaton run iff counter infinitely run shows emptiness problem sigma complete rate timed automata hps 
second part theorem follows undecidability result timed systems memory cells cer ans 
point emptiness problem decidable simple rate timed automata 
simple asynchronous timed automaton transformed timed automaton factoring process timed automata scaling process timed automata clock rate constructing product 
analogous result holds real time temporal logics 
verification procedures consider linear hybrid system 
linear formula oe vd wish determine oe invariant oe true states occur trace 
recall sigma theta sigma state space define reachability relations states ffl time step 
locations data variables vd oe 
data states oe sigma nonnegative reals ffi define oe ffi sigma data state assigns data variable vd value oe ffi delta sigma smallest relation oe ffi oe ffi ffi oe oe ffi sigma smallest relation oe ffi oe ffi ffi oe oe ffi lr sigma smallest relation oe ffi oe ffi ffi oe lr oe ffi 
words lr ffl transition step 
relation sigma smallest relation pairs data states oe oe sigma oe oe oe 
oe 
note relation reflexive 
ffl single step 
states oe oe sigma oe oe iff exist oe oe sigma oe lr oe oe oe oe oe oe lr oe ffl reachability relation sigma transitive closure single step relation 
single step reachability relation extended sets states 
state oe sigma set sigma states oe iff oe oe oe sets sigma states define iff oe oe denotes transitive closure 
sets sigma states wish find reachability relation holds 
solution reachability problem allows verification safety properties hybrid system suppose initial condition labeling function take set defined oe iff oe 
check linear formula oe invariant consider set bad states oe iff oe oe 
oe invariant iff reachability relation hold 
undecidability emptiness problem follows reachability problem undecidable linear hybrid automata 
state space sigma generally infinite attempt quotient state transition graph sigma 
method succeed finite quotient state space states identified equivalent respect reachability problem 
problem attacked different ways ffl choose definitions state equivalence 
move forward initial set identify states reached sequence single steps 
alternatively move backward final set identify states reach sequence single steps 
ffl working forward backward choose add equivalence class states time current set intersects respectively new states added 
refer category verification methods fixpoint methods computation viewed iterative approximation fixpoint defines class reachable states 
alternatively start initial partition state space refine respects equivalence relation checking reachability 
verification methods category called minimization methods computation viewed constructing bisimulation relation minimal coarsest state partition respects single step reachability 
instance fixpoint computation approach instance minimization approach 
procedures rely set primitive operations 
fixpoint computation define backward fixpoint computation procedure solves reachability problem provided terminates 
procedure starts set cur repeatedly adds states state cur reached 
procedure terminates answer indicating reachable stage initial state added terminates answer new states added 
procedure may course terminate procedure reachability problem linear hybrid systems 
backward fixpoint computation old cur cur cur old pre cur old old cur cur od return cur 
crucial step computation state set pre foe sigma oe rg computation possible due fact state sets encountered procedure definable linear formulas state sets problems deciding algorithmic solutions 
data region rd sigma set data states form foe sigma oe oe linear formula oe vd region rd sigma consists location data region rd union sigma regions location called region family 
central lemma ensures linear hybrid systems required state sets computable lemma sigma region family pre 
proof 
suffices show rd data region set pre rd foe sigma oe rd pair locations 
linear formula defines rd construct linear formula pre defines set pre rd 
contains variables think defining set points dimensional space 
set dimensional polyhedron bounding hyperplanes linear functions rational coefficients 
extend time step transition step relations linear formulas 
linear formula location foe sigma oe sigma oe oe 
oe 
foe sigma oe sigma oe oe 
oe lr linear formula pre disjunction pre lr lr transition step relation computed substitution 
oe guard vd ff oe ff linear formula ff obtained replacing occurrences ff time step relations computed quantifier elimination 
locations oe vd linear formulas ffi gamma ffi result replacing occurrences delta ffi gamma delta ffi respectively 
ffi oe ffi ffl ffi oe ffl oe ffi ffi ffl ffi oe ffl lr oe 
remains shown quantifiers eliminated formulas 
convert quantifiers existential form translate quantifier free subformulas disjunctive normal form 
existential quantifiers distribute disjunction suffices construct linear formula equivalent formula ffi conjunction linear inequalities 
note formula ffi defines convex rational polyhedron 
eliminate existential quantifier solve inequalities ffi construct conjunction ffi free inequalities implied transitivity 
timed systems hnsy fixpoint method extended check properties linear hybrid systems specified real time extensions branching time logics ctl :10.1.1.26.7422
minimization partition state space sigma regions 
region stable implies oe oe partition bisimulation region stable 
partition respects region 
observe partition respects bisimulation reachability analysis see reachable check exists path region region objective construct coarsest bisimulation provided finite 
purpose adopt algorithms performing simultaneous reachability minimization analysis transition systems bfh ly 
minimization procedure bfh 
true qg initial partition sigma regions region location 
initial partition refined fr sigma gamma respects minimization ff fr fi ff fi choose ff gamma fi ff split ff frg fi fi frg ff ff fr ff ff gamma frg ff ff ff fr fi fi fi gamma fr rg gamma frg ff fi od return ff starting procedure selects region checks stable respect current partition split smaller regions 
additional book keeping needed record regions reachable region containing initial state 
procedure current partition ff set regions reachable region initial state fi set regions stable respect 
function split splits region subregions stable respect split fr gamma region region pre proper subset split frg 
operation split computed pre state sets encountered minimization procedure definable linear formulas 
procedure terminates coarsest bisimulation finite number equivalence classes 
minimization procedure terminates obtain finite bisimulation sigma respect 
timed automata ach resulting reachability graph solve emptiness problem presence acceptance conditions model checking branching time properties 
minimization procedure may replaced efficient procedure ly implemented primitive pre verification examples demonstrate fixpoint computation procedure minimization procedure terminate cases 
minimization water level monitor hybrid automaton defined 
minimization procedure prove formula invariant follows water level monitor keeps water level inches 
linear formula denote set states oe oe satisfies pc 
set initial states defined hpc set bad states defined hy initial partition true gg 
partition region initial partition bad states hpc hpc hpc hpc hpc hpc hpc hpc ig bad states regions 
initial region contained ff fc considering ff find split hpc hpc ig fc take ff fc fi 
considering find stable respect ff ff fr fc fi fc stable reaching new states ff ff remains fi fc considering obtain split hpc hpc ig regions regions constitute new fi obtained removing fr rg old fi 
new ff fc stable ff fc fi fc stable ff fc fi fc stable fi fc ff remains unchanged 
considering obtain split hpc hpc ig contains reconsidered 
split split hpc gamma hpc gamma ig contains finding stable ff fc fi fc stable fi fi fc ff change 
partitioned hpc hpc ig considered 
stable respect current partition 
considered split hpc hpc ig consider 
turns stable 
considering fi fc ff ff fc partition fc stable ff fi fc notice region ff contains bad states invariant property verified 
fixpoint computation mutual exclusion protocol product hybrid automata defined 
fixpoint computation procedure prove formula pc invariant follows protocol ensures mutual exclusion 
hpc region initial states hpc region bad states 
denote value pre cur th iteration algorithm 
pre cur pc pc pc pc pc denotes th component control variable pc 
keep computing pre long disjoint pc pc pc pc pc pc gamma pc pc gamma pc pc pc pc pc pc pc pc pc pc gamma pc pc gamma gamma gamma pc pc gamma pc pc pc pc pc pc pc pc pc pc pc pc gamma pc pc gamma pc pc gamma pc pc gamma pc pc pc pc pc pc pc pc pc pc gamma pc pc gamma pc pc gamma gamma pc pc gamma pc pc pc pc gamma pc pc pc pc gamma gamma pc pc pc pc pc pc pc pc pc pc gamma gamma pc pc gamma pc pc pc pc gamma pc pc pc pc gamma pc pc gamma gamma fixpoint iterations 
notice fixpoint contains initial states invariant property verified 
fixpoint computation leaking gas burner integrator system defined 
fixpoint computation procedure prove formula invariant follows gas burner leaks twentieth time interval seconds 
hpc region initial states hy yi region bad states 
denote value pre cur th iteration algorithm 
pc gamma gamma gamma pc gamma gamma gamma gamma gamma gammax pc gamma gamma gamma gamma gamma gammax pc gamma gamma gamma pc gamma gamma gamma pc gamma gamma gamma gamma gamma gammax pc gamma gamma gamma gamma gammax pc gamma gamma gamma pc gamma gamma pc gamma gamma gamma gamma gammax pc gamma gamma gamma gamma gamma gammax pc gamma gamma pc gamma gamma pc gamma gamma gamma gamma gamma gammax pc gamma gamma gamma gamma gamma gammax pc gamma gamma pc gamma gamma pc gamma gamma gamma gamma gamma gammax fixpoint iterations 
fixpoint contains initial states invariant property verified 

amir pnueli joseph sifakis influenced ideas contained numerous discussions 
ach alur courcoubetis halbwachs dill wong toi 
minimization timed transition systems 
cleaveland editor concur theories concurrency lecture notes computer science pages 
springer verlag 
ad alur dill 
automata modeling real time systems 
paterson editor icalp automata languages programming lecture notes computer science pages 
springer verlag 
bfh bouajjani fernandez halbwachs 
minimal model generation 
kurshan clarke editors cav automatic verification methods finitestate systems lecture notes computer science pages 
springer verlag 
cer ans cer ans 
decidability bisimulation equivalence parallel timer processes 
cav automatic verification methods finite state systems lecture notes computer science 
springer verlag 
appear 
chr hoare ravn 
calculus durations 
information processing letters 
hnsy henzinger nicollin sifakis yovine :10.1.1.26.7422
symbolic model checking realtime systems 
proceedings seventh annual symposium logic computer science pages 
ieee computer society press 
hps harel pnueli 
propositional dynamic logic regular programs 
journal computer system sciences 
lam lamport 
fast mutual exclusion algorithm 
acm transactions computer systems 
ly lee yannakakis 
online minimization transition systems 
proceedings th annual symposium theory computing 
acm press 
mmp maler manna pnueli 
timed hybrid systems 
de bakker huizing 
de roever rozenberg editors real time theory practice lecture notes computer science pages 
springer verlag 
nicollin sifakis olivero yovine 
approach description analysis hybrid systems 
appear 
nicollin sifakis yovine 
atp timed graphs hybrid systems 
de bakker huizing 
de roever rozenberg editors real time theory practice lecture notes computer science pages 
springerverlag 
wang mok emerson 
real time distributed system specification verification asynchronous propositional temporal logic 
proceedings th international conference software engineering 
