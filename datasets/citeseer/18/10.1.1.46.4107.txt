ant colony optimization meta heuristic marco dorigo di caro iridia universit libre de bruxelles ulb ac chapter ant colony optimization meta heuristic ant algorithms multi agent systems behavior single agent called artificial ant ant short inspired behavior real ants 
ant algorithms successful examples swarm intelligent systems applied types problems ranging classical traveling salesman problem routing telecommunications networks 
section focus ant colony optimization aco meta heuristic defines particular class ant algorithms called aco algorithms 
aco algorithms inspired experience run goss colony real ants 
laboratory colony ants access food source arena linked colony nest bridge branches different length see 
branches arranged way ants going direction nest food source vice versa choose branch 
experimental observation transitory phase minutes ants shortest branch 
observed colony probability selecting shortest branch increases difference length branches 
emergence shortest path selection behavior explained terms positive feedback differential path length possible indirect form communication known stigmergy mediated local modifications environment 
fact ants going nest food source vice versa deposit chemical substance called pheromone ground 
arrive decision point intersection left right branches probabilistic choice biased amount pheromone smell branches 
behavior autocatalytic effect fact choosing path increase probability chosen ants 
experiment pheromone branches ants going nest food source choose branches equal probability 
due differential branch length ants choosing shortest branch reach food source 
path back nest reach decision point see pheromone trail shorter path trail released forward travel choose higher probability longer 
new pheromone nest food experimental apparatus bridge experiment 
branches different length 
ants move nest food source back 
released chosen path making attractive subsequent ants 
process iterates pheromone shorter path deposited higher rate longer making shorter path selected ants 
sections show simple ideas engineered put colony artificial ants find solutions difficult optimization problems 
simple ant colony optimization algorithm section simple ant algorithm illustrate basic behavior aco meta heuristic put evidence components 
main task artificial ant similarly natural counterparts find shortest path pair nodes graph problem representation suitably mapped 
connected graph jn nodes 
simple ant colony optimization aco algorithm find solution shortest path problem defined graph solution path graph connecting source node destination node path length number hops path see 
arc graph associated variable ij called artificial pheromone trail pheromone trail short 
pheromone trails read written ants 
amount intensity pheromone trail proportional utility estimated ants arc build solutions 
ant applies step step constructive decision policy build problem solutions 
node local information maintained node outgoing arcs stochastic way decide node move 
decision rule ant located node uses pheromone trails ij compute probability choose node node move set step neighbors node ij ij search process small amount pheromone assigned arcs 
source destination ants build solutions paths source destination node 
ants choosing solid line path arrive sooner destination bias search ants moving back source node 
building solution ants deposit pheromone information arcs 
aco ants deposit constant amount delta pheromone 
consider ant time moves node node change pheromone value ij follows ij ij delta rule simulates real ants pheromone depositing arc ant arc connecting node node increases probability ants arc 
case real ants differential path length favor emergence short paths 
avoid quick convergence ants sub optimal path exploration mechanism added similarly real pheromone trails artificial pheromone trails evaporate 
way pheromone intensity decreases automatically favoring exploration different arcs search process 
evaporation carried simple way decreasing pheromone trails exponential way gamma ae ae iteration algorithm 
preliminary experiments run aco simple graph modeling experimental apparatus shown algorithm effectively finds shortest path simulated nest food sources 
experiments shown increase complexity searched graph example connecting nest food source means possible paths behavior algorithm tends stable value parameters critical 
aco taken didactic example simplicity number limitations 
algorithms defined chapters share basic properties aco enriched extra capabilities help overcome aco limitations 
example amount pheromone deposited ants proportional quality solution built generated ant pheromone information useful directing ants search 
problems form heuristic information available nodes desirable ants able 
important point desirable enlarge class problems attacked aco algorithms 
aco applied shortest path problems additional constraints want find shortest hamiltonian path graph path visits nodes need give ants limited form memory 
sections introduce aco meta heuristic builds aco model enriching artificial ants number capacities find counterpart real ants allow overcome listed limitations simple model 
aco meta heuristic aco algorithms instances aco meta heuristic introduced section applied discrete optimization problems characterized follows ffl finite set components fc nc 
ffl finite set possible connections transitions elements defined subset cartesian product theta fl cg jlj ffl connection cost function possibly parametrized time measure defined 
ffl finite set constraints omega omega gamma assigned elements ffl states problem defined terms sequences hc elements equivalently 
set possible sequences set sub sequences feasible respect constraints omega gamma subset elements define problem feasible states 
length sequence number components sequence expressed jsj 
ffl neighborhood structure assigned follows state said neighbor ii state reached logical step component sequence determining state exists hs ffl solution psi element satisfying problem requirements 
solution said multi dimensional defined terms multiple distinct sequences elements ffl cost psi associated solution psi 
psi function costs connections belonging solution 
consider graph associated discrete optimization problem instance defined 
solutions optimization problem expressed terms feasible paths graph aco algorithms find minimum cost paths sequences feasible respect constraints omega gamma aco algorithms population colony agents ants collectively solve optimization problem consideration graph representation 
information collected ants search process encoded pheromone trails example traveling salesman problem defined section set cities set arcs connecting cities solution psi hamiltonian circuit 
terms node component arc connection transition interchangeably 
ij associated connection ij pheromone trails encode long term memory ant search process 
depending problem representation chosen pheromone trails associated problem arcs 
arcs associated heuristic value ij representing priori information problem instance definition run time information provided source different ants 
ants colony presents general characteristics ffl ant complex find probably poor solution problem consideration quality solutions emerge result collective interaction ants 
ffl ant private information information local node visiting 
ffl ants communicate ants indirect way mediated information read write variables storing pheromone trail values 
ffl ants adaptive 
contrary adaptively modify way problem represented perceived ants 
ants colony properties ffl ant searches minimum cost feasible solutions psi min psi psi 
ffl ant memory store information path followed far 
memory build feasible solutions ii evaluate solution iii retrace path backward 
ffl ant state hs gamma ii move node feasible neighborhood defined fj hs ji ffl ant assigned start state termination conditions ffl ants start start state move feasible neighbor states building solution incremental way 
construction procedure stops ant termination conditions satisfied 
ffl ant located node move node chosen move selected applying probabilistic decision rule 
ffl ants probabilistic decision rule function values stored node local data structure ij called ant routing table obtained functional composition node locally available pheromone trails heuristic values ii ant private memory storing past history iii problem constraints 
ffl moving node neighbor node ant update pheromone trail ij arc 
called online step step pheromone update 
simplify notation setting ij usually start state expressed unit length sequence single component 
ffl built solution ant retrace path backward update pheromone trails traversed arcs 
called online delayed pheromone update 
ffl built solution case path back source node ant dies freeing allocated resources 
informally behavior ants aco algorithm summarized follows 
colony ants concurrently asynchronously move adjacent states problem moving neighbor nodes shown aco algorithm 
move applying stochastic local decision policy information contained node local ant routing tables 
moving ants incrementally build solutions optimization problem 
ant built solution solution built ant evaluates solution deposits information goodness pheromone trails connections 
pheromone information direct search ants 
ants activity aco algorithm include procedures pheromone trail evaporation daemon actions 
pheromone evaporation process means pheromone trail intensity connections automatically decreases time 
practical point view pheromone evaporation needed avoid rapid convergence algorithm sub optimal region 
implements useful form forgetting favoring exploration new areas search space 
daemon actions implement centralized actions performed single ants 
examples activation local optimization procedure collection global information decide useful deposit additional pheromone bias search process non local perspective 
practical example daemon observe path ant colony choose deposit extra pheromone arcs ant shortest path 
pheromone updates performed daemon called offline pheromone updates 
aco meta heuristic behavior described pseudo code 
main procedure aco meta heuristic manages schedule activities construct scheduling discussed components aco algorithm ants generation activity ii pheromone evaporation iii daemon actions 
important note schedule activities construct specify activities scheduled synchronized particular executed completely parallel independent way kind synchronization necessary 
leaves designer freedom specify way procedures interact 
aco algorithms suitable find minimum cost shortest paths graph general important note interesting approach shortest path problems classical algorithms dynamic programming label correcting methods efficiently applied 
case example types shortest path problems ffl np hard problems dimension full state space graph exponential dimension problem representation 
case ants smaller graph built problem components daemon actions component optional 
procedure aco meta heuristic termination criterion satisfied schedule activities ants generation activity pheromone evaporation daemon actions schedule activities procedure procedure ants generation activity available resources schedule creation new ant new active ant procedure procedure new active ant fant initialize ant update ant memory current state target state read local ant routing table compute transition probabilities omega state apply ant decision policy omega move state state online step step pheromone update deposit pheromone visited arc update ant routing table update internal state online delayed pheromone update foreach visited arc psi deposit pheromone visited arc update ant routing table foreach die procedure aco meta heuristic pseudo code 
comments enclosed braces 
procedure daemon actions line aco meta heuristic procedure optional refers centralized actions executed daemon possessing global knowledge 
new active ant procedure target state line refers complete solution built ant step step delayed pheromone updating procedures lines mutually exclusive 
absent pheromone deposited daemon 
memory generate feasible solutions aco implementations taken local optimum problem specific local optimizer 
ffl shortest path problems properties problem graph representation change time concurrently optimization process adapt problem dynamics 
case problem graph physically available networks problems properties value connection costs ij change time 
case conjecture aco algorithms appropriate variation rate costs ij increases knowledge variation process diminishes 
fact cases efficient application techniques dynamic programming standard algorithms difficult feasible 
ffl problems computational architecture spatially distributed case parallel network processing 
aco algorithms due intrinsically distributed multi agent nature matches types architectures effective 
section consider application aco meta heuristic paradigmatic problems belonging defined classes problems traveling salesman problem tsp adaptive routing communications networks 
tsp prototypical representative np hard combinatorial optimization problems problem instance statically assigned information globally available 
contrary problem adaptive routing communications networks exogenous process incoming data traffic problem instance change time temporal constraints impose solve problem distributed way 
chapters book illustrate applications aco metaheuristic problems falling classes detailed examples applications adaptive routing :10.1.1.4.3655
aco traveling salesman problem traveling salesman problem traveling salesman problem tsp plays important role ant colony optimization problem attacked methods see :10.1.1.26.1865:10.1.1.52.6342
tsp chosen reasons problem ant colony metaphor easily adapted ii studied np hard problems combinatorial optimization iii easily explained algorithm behavior obscured technicalities 
traveling salesman problem terminology introduced previous section defined follows 
set components representing cities set connections fully connecting elements cost length connection distance cities tsp problem finding minimal length hamiltonian circuit graph hamiltonian circuit graph closed tour psi visiting nodes length sum lengths arcs composed 
distances need symmetric asymmetric tsp different graph need fully connected missing arcs added giving high length 
ant system paradigmatic example aco algorithms applied tsp 
extensions ant system :10.1.1.46.609:10.1.1.145.8411
ant system tsp ant system aco algorithm designed set ant algorithms differing way pheromone trail updated ants 
names ant density ant quantity ant cycle 
number ant algorithms including aco meta heuristic inspired ant cycle performing implementations interesting successful applications see section detailed overview 
new active ant procedure algorithm shown 
informally described follows 
number ants positioned parallel procedure new active ant ant identifier ant identifier get city number cities foreach read ij foreach ij ij ij il node apply probabilistic rule node hs ii gamma gamma foreach ij psi ij ij psi ij ij ff ij fi il ff il fi foreach free allocated resources procedure pseudo code ant system new active ant procedure 
instruction steps empty online step step pheromone update performed 
cities 
ants start state start city chosen randomly memory ant initialized adding current start city set visited cities initially empty 
ants enter cycle step lasts iterations ant completed tour 
step ant located node reads entries ij ant routing table node step computes transition probabilities step done published papers identify ant system ant cycle 
applies decision rule feasible neighborhood choose city move step moves new city step updates memory step 
ants completed tour happens synchronously iteration loop ant adds new city tour construction memory evaluate built solution retrace tour backward increase intensity pheromone trails ij visited connections ij steps 
effect making visited connections desirable ants 
ants die 
ants deposit pheromone problem specific daemon actions performed 
triggering pheromone evaporation happens ants completed tours 
course easy add local optimization daemon action done aco algorithms tsp developed see example :10.1.1.145.8411
amount pheromone trail ij maintained connection ij intended represent learned desirability choosing city city corresponds desirability arc ij belong tour built ant 
pheromone trail information changed problem solution reflect experience acquired ants problem solving 
ants deposit amount pheromone proportional quality solutions psi produced shorter tour generated ant greater amount pheromone deposits arcs generate tour 
choice helps direct search solutions 
memory internal state ant contains visited cities called tabu list memory define ant set cities ant located city visit 
exploiting ant build feasible solutions avoid visit twice city 
memory allows ant compute length tour generated cover path backward deposit pheromone visited arcs 
ant routing table ij node set neighbor nodes node obtained functional composition pheromone trails ij local heuristic values ij ij ij ff ij fi il ff il fi ff fi parameters control relative weight pheromone trail heuristic value 
probability ij th algorithm iteration ant located city chooses city move probabilistic decision rule ij ij il aco implementations connection credit assignment connections belonging solution receive amount pheromone depending quality solution connection part 
term tabu list indicate simple memory contains set visited cities relation tabu search 
heuristic values inverse distance cities defined problem instance 
feasible neighborhood node ant defined ant private memory problem constraints set visited cities 
role parameters ff fi 
ff closest cities selected corresponds classical stochastic greedy algorithm multiple starting points ants initially randomly distributed nodes 
contrary fi pheromone amplification method lead rapid emergence stagnation situation ants tour general strongly sub optimal 
appropriate trade set heuristic value trail intensity 
ants completed tour ant deposits quantity pheromone delta psi connection ij psi length tour psi done ant iteration ij ij delta ij psi number ants iteration maintained constant total number ants set way setting value delta function ant performance shorter tour done greater amount pheromone deposited 
pheromone updating performed ants pheromone evaporation triggered rule applied arcs ij graph ij gamma ae ij ae pheromone trail decay coefficient initial amount pheromone ij set small positive constant value arcs 
aco routing communications networks routing problem generic routing problem communications networks informally stated problem building routing tables direct data traffic measure network performance maximized 
terminology introduced section give formal definition routing problem 
sets correspond respectively sets processing nodes communication links real network 
directed graph node set represents network node processing queuing forwarding capabilities oriented arc directional transmission system link 
link associated cost measure defined physical properties parameters settings ff fi ae set respectively set experimentally dorigo 
original ant system pheromone evaporation performed pheromone updating 
algorithm original exactly values delta equation set delta gamma ae delta psi 
choice measure network performance function type network provided services 
example packet switching network performance measured throughput amount correctly delivered bits time unit distribution data packet delays 
crossing traffic flow 
network applications generate data flows source destination nodes 
node network local routing component uses local routing table choose best outgoing link direct incoming data destination nodes 
routing table ijd generic node set neighbors says data packets entering node directed destination node node move 
routing tables bi dimensional choice neighbor node data packet entering generic node forwarded function packet destination node ant routing tables posses bi dimensional structure pheromone trails associated connection vectors gamma values 
fact ant routing tables aco implementations routing build routing tables means implementation dependent schemes 
vectorial pheromone trails natural extension scalar trails tsp 
important differences tsp implementation arise different nature problems ant assigned defined pair start destination nodes discovering path ant builds part problem solution defined terms paths pairs network ii cost associated connections statically assigned depend connection physical properties traffic crossing connection interacts recursively routing decisions 
subsection antnet simplified version antnet algorithm 
detailed description antnet performing extension described 
antnet antnet ant searches minimum cost path pair nodes network 
ants launched network node destination nodes randomly selected match traffic patterns 
ant source node destination node moves hopping node till node reached 
ant node chooses node move probabilistic decision rule function ant memory local ant routing table pheromone trails connected arcs memorized variables associated arc destination pairs 
directed arc gamma trail values ijd associated possible destination node ant located node general ijd 
arc associated heuristic value ij independent final destination 
heuristic values set values ij gamma ij il ij length bits waiting sent queue link connecting node neighbor antnet implementation aco algorithms routing problems daemon component line aco meta heuristic 
local ant routing table obtained functional composition local pheromone trails ijd heuristic values ij building path destination ants move link queues data 
way ants experience delays data packets time sd elapsed moving source node destination node measure path quality 
goodness path evaluated heuristic function trip time sd local adaptive statistical model maintained node 
fact paths need evaluated relative network status trip time judged low quality low congestion conditions excellent high traffic load 
generic ant completed path deposits visited nodes amount pheromone delta proportional goodness path built 
purpose reaching destination node ant moves back source nodes path backward high priority queues allow fast propagation collected information 
procedure new active ant ant identifier ant identifier get start node get node foreach read ij foreach ij ij ij il node apply probabilistic rule node hs ii gamma gamma foreach ij psi ij ij delta ij ij gamma ij gamma gamma foreach free allocated resources procedure pseudo code antnet new active ant procedure 
instruction steps empty online step step pheromone update performed 
update pheromone trails ant routing tables done ant backward path origin node 
backward path ant increases pheromone trail value ijd connection ij previously moving pheromone trail intensity increased applying rule ijd ijd delta reason ant updates pheromone trails backward trip compute amount pheromone delta deposit visited arcs needs complete path source destination evaluate 
pheromone trail visited arc updated pheromone value outgoing connections node relative destination evaporates ijd ijd delta set neighbors node said antnet ant routing table ijd node obtained usual composition pheromone trail values local heuristic values 
done follows ijd ijd gamma ij gamma jn gamma destination node weighting factor denominator normalization term 
ants decision rule defined follows 
time ant located node directed node city ant current location neighborhood ant visited ant chooses node probability ijd ijd ant chooses city uniform probability ijd gamma 
words ants try avoid cycles equation case nodes neighborhood visited ant ant choice re visit node generating way cycle 
case generated cycle deleted ant memory forgets completely 
considering stochasticity decision rule evolution traffic conditions ant continues cycling cycle 
parallel implementations population oriented nature aco algorithms particularly suitable parallel implementation 
particular principle possible exploit different types parallelism parallelism level ants ii parallelism level data iii functional parallelism 
parallelism level ants probably obvious way parallelizing aco algorithm consists considering number nc colonies nc applied problem instance 
colonies allowed exchange information search process 
parallelism level data consists splitting considered problem number subproblems solved colony ants 
functional parallelism easily obtained letting procedures ants generations activity pheromone evaporation case decay factor chosen operates normalization pheromone values continue usable probabilities 
antnet differently happens ant system neighborhood feasible neighborhood 
daemon actions lines aco meta heuristic procedure perform activities concurrently exchanging synchronization signals 
obviously functional parallelism combined types parallelism 
currently parallel implementations aco algorithms ant level parallelism 
implementations briefly reviewed 
ffl parallel versions aco algorithm implementation tsp connection machine cm 
approach taken attributing single processing unit ant 
unfortunately experimental results showed communication overhead major problem approach fine grained parallel machines ants spend time communicating ants modifications pheromone trails 
result algorithm performance impressive scaled badly increasing problem dimensions 
ffl better results obtained coarse grained parallel network transputers 
implementation divided colony nc nc set number available processors 
acted complete colony implemented standard algorithm 
completed iteration algorithm hierarchical broadcast communication process collected information tours ants broadcast information nc processors 
way concurrent update pheromone trails performed 
speed obtained approach nearly linear number processors behavior shown stable increasing problem dimensions 
ffl bullnheimer strauss proposed coarse grained parallel versions called synchronous parallel implementation spi partially asynchronous parallel implementation papi 
spi basically implemented transputers papi pheromone information exchanged fixed number iterations done 
algorithms evaluated simulation 
findings show papi performs better spi performance measured running time speedup 
probably due papi reduced communication caused frequent exchange pheromone trail information 
experimentation necessary compare quality results produced spi papi implementations 
ffl interesting aspect ant level parallel implementation type pheromone trail information exchanged nc information update trail information 
kruger merkle middendorf considered exchange global best solution uses global best solution choose add pheromone trail ii exchange local best solutions receives local best solution uses update pheromone trails iii exchange total trail information colony computes average trail information colonies ij trail information nc colony sends colonies computes ij nc ij preliminary results indicate methods ii faster give better solutions method iii 
ffl execution parallel independent runs easiest way obtain parallel algorithm obviously reasonable approach underlying algorithm case aco algorithms randomized 
stutzle presents computational results execution parallel independent runs processors mmas algorithm 
results show performance mmas improves number processors 
ants pheromones solutions evaluation section discuss characterizing aspects aco algorithms 
particular focus way solutions generated ants evaluated way evaluations direct pheromone trail laying ants search importance colony ants 
implicit explicit solution evaluation 
aco algorithms solutions generated ants provide feedback direct search ants entering system 
done mechanisms 
common aco algorithms consists explicit solution evaluation 
case measure quality solution generated decide pheromone deposited ants 
second kind implicit solution evaluation 
case ants exploit differential path length dpl effect real ants foraging behavior 
fact ant chooses shorter path deposit pheromone bias search forthcoming ants 
turns geographically distributed problems network problems case implicit solution evaluation dpl effect plays important role 
fact shown example explicit solution evaluation switched setting amount pheromone deposited ants constant value independent cost path built ant possible find solutions network problems just exploiting dpl effect 
quite obviously shown coupling explicit implicit solution evaluation making amount pheromone deposited proportional cost solution generated improves performance 
fact dpl effect exploited geographically distributed network problems due efficiency reasons 
fact distributed nature nodes routing problems allows exploitation dpl effect natural way incurring additional computational costs 
due decentralized nature system inherently asynchronous nature dynamics real network 
contrary case combinatorial optimization problems natural way implement aco algorithms colony synchronized ants ants synchronously add elements solution building 
course principle possible asynchronous sense explained ants combinatorial optimization problems 
problem computational inefficiencies introduced computational overhead necessary independent asynchronous ants outweigh gains due exploitation dpl effect case example asynchronous implementation aco algorithm tsp reported 
explicit solution evaluation pheromone laying 
said ant built solution cost built solution compute amount pheromone ant deposit visited edges 
ant system example ant deposits amount pheromone inversely proportional cost solution generated 
obviously possible choices implementations aco algorithms tsp combinatorial optimization problems exist different functional forms solution cost decide pheromone ants daemon deposit 
problem arises routing problems general problem characteristics problem change unpredictable ways problem solution simple way evaluate solution decide pheromone ants deposit 
way problem antnet ants learn online model network status evaluate solutions ants 
number ants 
exact number ants parameter times set experimentally 
fortunately aco algorithms robust actual number ants 
limit discussion question colony ants setting single ant 
fact single ant capable generating solution efficiency considerations suggest colony ants desirable choice 
particularly true geographically distributed problems differential length effect exploited ants solution class problems arise presence colony ants 
interesting note routing problems ants solve shortest path problems colony ants problems 
hand case combinatorial optimization problems ants move synchronously ants build solutions aco algorithm run iterations equivalent principle ant generates delta solutions 
experimental evidence suggests algorithm performance best number ants set value general dependent class problems algorithm applied 
aco meta heuristic applications available numerous successful implementations aco meta heuristic applied number different combinatorial optimization problems see table 
list ordered application problem chronologically 
studied problems traveling salesman tsp quadratic assignment qap routing telecommunication networks 
problems aco algorithms competitive best available heuristic approaches 
particular ffl particularly important class quadratic assignment problems model real world problems aco algorithms currently performing heuristics available 
chapter book presents overview available aco algorithms qap 
ffl results obtained application aco algorithms tsp encouraging see results obtained unsophisticated local search procedure opt allow obtain results close obtainable sophisticated methods :10.1.1.145.8411
research necessary assess aco algorithms reach performance state art algorithms iterated lin kernighan 
ffl aco algorithm called antnet outperformed number state art routing algorithms packet switching networks set benchmark problems 
interesting results obtained ffl sequential ordering problem problem finding shortest hamiltonian path graph satisfies set precedence constraints order cities visited 
applied problem sop aco algorithm coupled local search routine improved best known results wide set benchmark problems 
ffl shortest common supersequence problem vehicle routing problem 
problems aco algorithms proposed solution subject concluding chapters book section dedicated aco algorithms 
aco algorithms applied graph coloring problem reasonably state art results obtained 
short overview applications chapters section section book includes chapters dedicated applications aco algorithms important difficult combinatorial optimization problems quadratic assignment problem qap vehicle routing problem vrp shortest common supersequence problem scs 
problems introduced discussed detail forthcoming chapters interesting show cast aco meta heuristic framework 
quadratic assignment problem quadratic assignment problem stated follows 
consider set activities assigned locations 
matrix ij gives distances locations ij euclidean distance location location matrix hk characterizes flows activities transfers data material humans hk flow activity activity assignment permutation ng activity assigned location problem find permutation product flows activities distances locations minimized 
interesting note tsp table 
list applications aco algorithms combinatorial optimization problems 
classification application chronologically ordered 
problem name authors year main algorithm name traveling salesman dorigo maniezzo colorni gambardella dorigo ant dorigo gambardella acs acs opt stutzle hoos mmas bullnheimer hartl strauss rank quadratic assignment maniezzo colorni dorigo qap gambardella taillard dorigo qap stutzle hoos mmas qap maniezzo colorni qap maniezzo ants qap vehicle routing bullnheimer hartl strauss vrp gambardella taillard vrp connection oriented schoonderwoerd holland abc network routing bruten rothkrantz white pagurek oppacher di caro dorigo antnet fs bonabeau gu erin abc smart ants snyers kuntz th connection di caro dorigo antnet antnet fa network routing subramanian druschel chen regular ants gu erin snyers kuntz caf van der put rothkrantz abc backward sequential ordering gambardella dorigo sop graph coloring costa hertz shortest common michel middendorf scs supersequence qap ant algorithm follow aspects aco meta heuristic :10.1.1.26.1865:10.1.1.52.6342
variant original qap 
seen particular case qap items set integers locations cities visited 
tsp problem assigning different integer number city way tour visits cities ordered assigned number minimal length 
aco algorithms chapter book qap represented follows 
set components composed activities locations 
transitions activities locations locations activities 
typically ant starts building solution choosing activity location assign activity activity activities assigned 
activities locations chosen feasible neighborhood set activities locations assigned 
typically qap mmas qap example pheromone trails associated transitions activities locations choice location assign activity transitions locations activities chosen probabilistic heuristic rule function pheromone trails 
obviously prevents defining aco algorithm transitions locations activities function pheromone trails 
shortest common supersequence problem set strings alphabet sigma shortest common supersequence problem consists finding string minimal length supersequence string string supersequence string obtained inserting zero characters 
consider example set 
string shortest supersequence 
ants build solutions repeatedly removing symbols front strings appending supersequence construction 
practice ant maintains vector pointers front strings front string character string removed moves space feasible vectors 
representation aco algorithm 
components vectors pointers transitions implicitly defined rules govern way characters removed string fronts constraints implicitly defined ordering characters strings 
vehicle routing problem vehicle routing problems class problems set vehicles serve set customers minimizing cost function subject number constraints 
characteristics vehicles constraints determines particular type vrp 
simple example complete weighted directed graph fv set vertices set arcs weight ij associated arc represents distance vertex represents depot vertices represent customers locations 
demand service time associated customer 
objective find minimum cost vehicle routes customer visited exactly exactly vehicle ii vehicle total demand exceed vehicle capacity iii vehicle starts ends tour depot iv total tour length vehicle exceed bound easy see tsps closely related vrp consists solution tsps common start cities 
tsp ants build solutions sequentially visiting cities problem components cities transitions associated arcs 
feasible neighborhood set unvisited cities pheromone trails associated arcs 
acknowledgments marco dorigo acknowledges support belgian research associate 
supported curie fellowship awarded di caro cec tmr contract 
bibliography bertsekas 
dynamic programming optimal control 
athena scientific 

di un algoritmo la del del 
master thesis dipartimento di elettronica informazione politecnico di milano italy 
bonabeau dorigo th 
natural artificial swarm intelligence 
oxford university press 
bonabeau gu erin snyers kuntz th 
routing telecommunication networks smart ant agents telecommunication applications 
proceedings second int 
workshop intelligent agents telecommunication applications 
lectures notes ai vol 
springer verlag 
bullnheimer hartl strauss 
improved ant system algorithm vehicle routing problem 
technical report pom institute management science university vienna 
accepted publication annals operations research 
bullnheimer hartl strauss 
new rank version ant system computational study 
technical report pom institute management science university vienna 
accepted publication central european journal operations research economics 
bullnheimer hartl strauss 
applying ant system vehicle routing problem 
osman vo martello editors metaheuristics advances trends local search paradigms optimization pages 
kluwer academics 
bullnheimer strauss 
parallelization strategies ant system 
technical report pom institute management science university vienna austria 
appear kluwer series applied selected papers pardalos editors 
bullnheimer strauss 
mit dem ant system 
technical report fur universitat wien 
costa hertz 
ants colour graphs 
journal operational research society 

dell algoritmo il del 
master thesis dipartimento di elettronica informazione politecnico di milano italy 
di caro dorigo 
antnet mobile agents approach adaptive routing 
technical report iridia universit libre de bruxelles 
di caro dorigo 
antnet distributed stigmergetic control communications networks 
journal artificial intelligence research jair december 
di caro dorigo 
extending antnet best effort quality ofservice routing 
unpublished presentation ants ant colonies artificial ants international workshop ant colony optimization iridia ulb ac ants ants html october 
di caro dorigo 
ant colony algorithms best effort routing datagram networks 
proceedings tenth iasted international conference parallel distributed computing systems pages 
iasted acta press 
dorigo 
optimization learning natural algorithms italian 
phd thesis dipartimento di elettronica informazione politecnico di milano 
dorigo 
parallel ant system experimental study 
unpublished manuscript 
dorigo di caro gambardella 
ant algorithms distributed discrete optimization 
technical report iridia universit libre de bruxelles 
submitted artificial life 
dorigo gambardella 
ant colonies traveling salesman problem 
biosystems 
dorigo gambardella :10.1.1.145.8411
ant colony system cooperative learning approach traveling salesman problem 
ieee transactions evolutionary computation 
dorigo maniezzo colorni 
positive feedback search strategy 
technical report dipartimento di elettronica politecnico di milano 
dorigo maniezzo colorni 
ant system optimization colony cooperating agents 
ieee transactions systems man cybernetics part 
gambardella dorigo 
ant reinforcement learning approach traveling salesman problem 
proceedings twelfth international conference machine learning ml pages 
palo alto ca morgan kaufmann 
gambardella dorigo 
solving symmetric asymmetric tsps ant colonies 
proceedings ieee conference evolutionary computation icec pages 
ieee press 
gambardella dorigo 
sop hybrid ant system sequential ordering problem 
technical report idsia lugano ch 
gambardella taillard 
ant colonies vehicle routing problems 
corne dorigo glover editors new ideas optimization 
mcgraw hill 
gambardella taillard dorigo 
ant colonies qap 
technical report idsia lugano switzerland 
accepted publication journal operational research society 
garey johnson 
computers intractability 
freeman 
glover 
tabu search part orsa journal computing 
glover 
tabu search part ii 
orsa journal computing 
goss aron deneubourg pasteels 
self organized shortcuts ant 
naturwissenschaften 
grass 
la reconstruction du nid les coordinations chez sp 
la th eorie de la interpr etation du comportement des termites 

gu erin snyers kuntz 
adaptive agent driven routing load balancing communication networks 
technical report rr intelligence artificielle sciences enst 
accepted publication journal complex systems 
hillis 
connection machine 
mit press 
johnson mcgeoch 
traveling salesman problem case study 
aarts lenstra editors local search combinatorial optimization pages 
chichester john wiley sons 
kruger merkle middendorf 
studies parallel ant system bsp model 
unpublished manuscript 
lawler lenstra rinnooy kan shmoys editors 
travelling salesman problem 
wiley 
lin 
computer solutions traveling salesman problem 
bell systems journal 
maniezzo 
exact approximate nondeterministic tree search procedures quadratic assignment problem 
technical report csr scienze dell informazione universit di bologna di italy 
maniezzo colorni 
ant system applied quadratic assignment problem 
ieee trans 
knowledge data engineering press 
maniezzo colorni dorigo 
ant system applied quadratic assignment problem 
technical report iridia universit libre de bruxelles belgium 
michel middendorf 
island model ant system lookahead shortest supersequence problem 
eiben back schoenauer 
schwefel editors proceedings ppsn fifth international conference parallel problem solving nature pages 
springer verlag 
reinelt 
traveling salesman problem computational solutions tsp applications 
berlin springer verlag 
schoonderwoerd holland bruten 
ant agents load balancing telecommunications networks 
proceedings international conference autonomous agents pages 
acm press 
schoonderwoerd holland bruten rothkrantz 
ant load balancing telecommunications networks 
adaptive behavior 
stutzle 
parallelization strategies ant colony optimization 
eiben back schoenauer 
schwefel editors proceedings ppsn fifth international conference parallel problem solving nature pages 
springer verlag 
stutzle hoos 
max min ant system local search traveling salesman problem 
michalewicz yao editors proceedings ieee icec eps ieee international conference evolutionary computation evolutionary programming conference pages 
ieee press 
stutzle hoos 
improvements ant system introducing max min ant system 
proceedings international conference artificial neural networks genetic algorithms pages 
springer verlag wien 
stutzle hoos 
max min ant system local search combinatorial optimization problems 
vo martello osman editors meta heuristics advances trends local search paradigms optimization pages 
kluwer boston 
subramanian druschel chen 
ants reinforcement learning case study routing dynamic networks 
proceedings ijcai international joint conference artificial intelligence pages 
morgan kaufmann 
van der put 
routing mobile agents 
technical report sv kpn research 
van der put rothkrantz 
routing packet switched networks agents 
simulation practice theory press 
white pagurek oppacher 
connection management adaptive mobile agents 
editor proceedings international conference parallel distributed processing techniques applications pdpta pages 
csrea press 

