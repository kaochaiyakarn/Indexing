ad hoc polymorphism ad hoc philip wadler stephen blott university glasgow october presents type classes new approach ad hoc polymorphism 
type classes permit overloading arithmetic operators multiplication generalise variables standard ml 
type classes extend hindley milner polymorphic type system provide new approach issues arise object oriented programming bounded type quantification data types 
provides informal type classes defines formally means type inference rules 
strachey chose adjectives ad hoc parametric distinguish varieties polymorphism str 
ad hoc polymorphism occurs function defined different types acting different way type 
typical example overloaded multiplication symbol may denote multiplication integers multiplication floating point values 
parametric polymorphism occurs function defined range types acting way type 
typical example length function acts way list authors address department computing science university glasgow glasgow qq scotland 
electronic mail wadler blott cs glasgow ac uk 
published th acm symposium principles programming languages austin texas january 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
integers list floating point numbers 
widely accepted approach parametric polymorphism hindley milner type system hin mil dm standard ml hmm mil miranda tur languages 
hand widely accepted approach ad hoc polymorphism name doubly appropriate 
presents type classes extend hindley milner type system include certain kinds overloading bring sorts polymorphism strachey separated 
type system generalisation hindley milner type system 
system type declarations inferred explicit type declarations functions required 
inference process possible translate program type classes equivalent program overloading 
translated programs typable hindley milner type system 
body gives informal type classes translation rules appendix gives formal rules typing translation form inference rules dm 
translation rules provide semantics type classes 
provide possible implementation technique desired new system added existing language hindley milner types simply writing pre processor 
places issues ad hoc polymorphism arise definition operators arithmetic equality 
examine approaches problems adopted standard ml miranda approaches differ languages differ single language 
shall see type classes provide uniform mechanism address problems 
miranda trademark research software limited 
grew efforts haskell committee design lazy functional programming language goals haskell committee adopt shelf solutions problems possible 
little surprised realise arithmetic equality areas standard solution available 
type classes developed attempt find better solution problems solution judged successful included haskell design 
type classes judged independently haskell just incorporated language standard ml 
type classes appear closely related issues arise object oriented programming bounded quantification types data types cw mp rey 
connections outlined required understand relations fully 
type system similar discovered independently stefan kaes kae 
improves kaes ways notably type classes group related operators providing better translation method 
divided parts body gives informal type classes appendix gives formal description 
section motivates new system describing limitations ad hoc polymorphism standard ml miranda 
section introduces type classes means simple example 
section illustrates example section may translated equivalent program type classes 
section presents second example definition overloaded equality function 
section describes subclasses 
section discusses related concludes 
appendix presents inference rules typing translation 
limitations ad hoc polymorphism section motivates treatment ad hoc polymorphism examining problems arise haskell committee includes arvind brian boutel jon fairbairn joe fasel paul hudak john hughes thomas johnsson dick kieburtz simon peyton jones nikhil mike reeve philip wadler david wise jonathan young 
arithmetic equality standard ml miranda 
arithmetic 
simplest approach overloading basic operations addition multiplication overloaded functions defined terms 
example write define square write terms square square approach taken standard ml 
incidentally interesting note standard ml includes overloading arithmetic operators formal definition deliberately ambiguous overloading resolved hmt page different versions standard ml resolve overloading different ways 
general approach allow equation stand definition overloaded versions square types int 
int float 
float 
consider function squares square square square independently type int type float possible overloaded versions function 
general may exponential growth number translations reason solutions widely 
miranda problem side stepped overloading arithmetic operations 
miranda provides floating point type named num way type system indicate operation restricted integers 
equality 
history equality operation treated overloaded fully polymorphic partly polymorphic 
approach equality overloaded just multiplication 
particular equality may overloaded monotype admits equality contain type function type 
language may write denote equality integers denote equality characters 
define function member equations member false member xs member xs write terms member member haskell abbreviate list characters abc 
approach taken version standard ml mil 
second approach equality fully polymorphic 
case type 

bool type variable ranging type 
type member function member 

bool write type list 
means applying equality functions types generate type error 
approach taken miranda equality applied function type result run time error equality applied type result test representation equality 
may considered bug violates principle abstraction 
third approach equality polymorphic limited way 
case type 

bool type variable ranging types admit equality 
type member function member 

bool applying equality member function type type type error 
approach currently taken standard ml written called variable 
polymorphic equality places certain demands implementor run time system 
instance standard ml types tested equality differently types possible run time distinguish pointers 
object oriented programming 
nice polymorphic equality extended include user defined equality operations types 
implement need require object carry pointer method procedure performing equality test 
operation property object carry pointer dictionary appropriate methods 
exactly approach object oriented programming gr 
case polymorphic equality means arguments equality function contain pointer dictionary type 
suggests dictionaries passed independently objects polymorphic equality passed dictionary objects minus dictionaries intuition type classes translation method described 
introductory example introduce type classes means example 
say wish overload negate unary minus types int float 
introduce new type class called num shown class declaration 
declaration may read stating type belongs class num functions named negate appropriate types defined 
may declare instances class shown instance declarations 
assertion num int may read functions named negate appropriate types defined int 
instance declaration justifies assertion giving appropriate bindings functions 
type inference algorithm verify bindings appropriate type type int int int similarly 
assume defined standard prelude 
instance num float declared similarly 
word notational conventions type class names type constructor names capital letter type variable names small letter 
num type class int float type constructors type variable 
may define square exists algorithm infer type square definition outlined appendix 
derives type square num 

class num 

negate 
instance num int negate instance num float negate square num 

square squares num num num 

squares square square square definition arithmetic operations data 




add mul neg int float square 

square mul squares 

squares square square square translation arithmetic operations read square type 
belongs class num negate defined 
write terms square square appropriate type derived int expression float second 
hand writing square yield type error compile time char asserted instance declaration numeric type 
define function squares mentioned previously type inferred 
type may read squares type 
belong class num 
write type cartesian product 
squares type 
terms squares legal derive appropriate type 
translation feature form overloading possible compile time translate program containing class instance declarations equivalent program 
equivalent program valid hindley milner type 
translation method illustrated means example 
shows translation declarations 
class declaration introduce new type corresponding appropriate method dictionary class functions access methods dictionary 
case corresponding class num introduce type shown 
data declaration defines type constructor new type 
values type created value constructor components types shown 
functions add mul neg take value type return second third component respectively 
instance class num translated declaration value type 
corresponding instance num int declare data structure type int similarly float 
term form negate replaced corresponding term follows 
add 
mul negate 
neg appropriate dictionary 
appropriate dictionary determined 
type 
example translations 
mul 
mul optimisation easy compiler perform beta reductions transform respectively 
type function contains class translated dictionary passed runtime 
example definition square type square num 

square translates square 

square mul application square translated pass appropriate extra parameter square 
square square 
square translation squares shown 
just type translation 
exponential growth avoided 
example equality section shows define equality class instance declarations 
type classes serve straightforward generalisation variables standard ml 
standard ml mechanism allows user extend equality types straightforward way 
standard ml mechanism translated compile time places special demands implementor run time system 
class eq 

bool instance eq int eqint instance eq char member eq 


bool member false member xs member xs instance eq eq 
eq instance eq 
eq true ys false xs false xs ys xs ys data set instance eq 
eq set xs ys map member xs ys map member ys xs definition equality definition summarised 
declaring class eq containing single operator instances eq int eq char class 
define member function usual way shown 
type member need explicitly inferred 
inferred type member eq 


bool read member type 

bool type class eq equality defined exactly equivalent standard ml type list bool variable 
may write terms member member haskell evaluate true 
give instance defining equality pairs 
line instance reads class eq class eq pair class eq 
words equality defined equality defined equality defined 
instance defines equality pairs terms equality components usual way 
similarly possible define equality lists 
line instance reads equality defined equality defined type list may write terms hello goodbye member haskell moses evaluate false 
final data declaration defines new type constructor set new value constructor 
module exports set hides outside module representation set accessible mechanism haskell define data types 
final instance defines equality sets 
line instance reads equality defined equality data eqd 

bool eq eqd int eqint eqd int member eqd 


bool member false member xs eq member xs eqd eqd 
eqd eqd eqd 


bool eq eq eqd 
eqd eqlist eqlist eqd 


bool eqlist true eqlist ys false eqlist xs false eqlist xs ys eq eq xs ys translation equality defined type set case sets represented terms lists sets taken equal member member second vice versa 
definition uses standard functions map applies function element list returns conjunction list booleans 
set equality defined terms member member uses overloaded equality valid apply equality sets integers sets lists integers sets sets integers 
example shows type class mechanism allows overloaded functions defined data types natural way 
particular provides improvement treatment equality provided standard ml miranda 
translation equality consider translation mechanism applies equality example 
shows translation declarations 
part translation introduces new similar translation section 
defining eqd corresponding class eq 
case class contains operation dictionary entry 
selector function eq takes dictionary type eqd returns entry type bool 
corresponding instances eq int eq char define dictionaries types eqd int eqd char containing appropriate equality functions function member translated member straightforward way 
terms translations 
eq mul member 
member member haskell 
member haskell translation instance declaration equality lists little trickier 
recall instance declaration begins instance eq 
eq 
states equality defined type equality defined type corresponding instance dictionary type parameterised dictionary type type eqd 
eqd remainder translation shown translation equality pairs 
terms translations hello goodbye 
eq hello goodbye 
eq member haskell moses 
member haskell moses optimisation easy compiler perform beta reductions transform terms form eq eqd eqlist eqd eqd dictionary equality 
optimisation may applied examples definition eqlist 
worthwhile compare efficiency translation technique polymorphic equality standard ml miranda 
individual operations eqint slightly efficient polymorphic equality type argument known advance 
hand operations member eqlist explicitly pass equality operation overhead polymorphic equality avoids 
experience needed asses trade costs 
subclasses preceeding num eq considered completely separate classes 
want numerical equality operations appear type separately eq num 
bool xs member xs square practical matter bit odd expect data type negate defined defined converse 
sensible num subclass eq 
follows class eq 
num 



negate 
asserts may belong class num belongs class eq 
words num subclass eq equivalently eq superclass num 
instance declarations remain instance declaration num int valid instance declaration eq int active scope 
follows type contains num contain eq convenient abbreviation permit eq omitted type num 
type write num 
bool qualifier eq longer needs mentioned implied num general class may number sub superclasses 
contrived example class top fun 
class top 
left fun 
class top 
right fun 
class left right 
bottom fun 
relationships types diagrammed follows top left right bottom multiple superclasses pose problems usual means implementing objectoriented languages pose problems translation scheme outlined 
translation simply assures appropriate dictionaries passed run time special hashing schemes required object oriented systems 
natural think adding assertions class declaration specifying properties instance satisfy class eq 

bool equivalence relation class num zero 

negate 
zero negate form ring valid proof rely properties long proves hold instance declaration 
assertions simply written comments sophisticated system verify assertions 
suggests relation classes object oriented programming different sort class declarations resemble object declarations obj 
possible overloaded constants zero example 
unrestricted overloading constants leads situations overloading resolved providing extra type information 
instance expression meaningless context specifies result int float 
reason careful constants overloaded type int type float 
general treatment constants require coercion subtypes 
reasonable allow class apply type variable 
instance class coerce coerce 
instance coerce int float coerce case assertion coerce taken equivalent assertion subtype suggests relation bounded quantification subtypes see cw rey excellent surveys area wan car 
type classes may thought kind bounded quantifier limiting types type variable may instantiate 
approaches bounded quantification type classes introduce implicit coercions subtype int supertype float record fields record fields 
exploration relationship type classes approaches fruitful 
type classes may thought kind data type 
type class specifies collection functions types implemented 
way type class corresponds data type implementations instance declaration 
exploration relationship type classes current data types cw mp rey appears called 
referred kaes 
advance conceptual notational benefit grouping overloaded functions classes 
addition system general kaes handle involving type variable coerce example 
translation rules improvement 
kaes outlines sets translation rules calls semantics static dynamic 
dynamic semantics limited power language described static semantics appears similar power translation described greatly increase size program 
drawback translation method introduces new parameters passed runtime corresponding method dictionaries 
may possible eliminate costs partial evaluation generate versions functions specialised certain dictionaries reduce run time cost increasing code size 
needed assess trade offs approach partial evaluation techniques 
clear issues remain explored tradeoffs remain assessed 
look forward practical experience type classes haskell provide 

important idea overloading reflected type function suggested different form joe fasel 
discussion comments grateful luca cardelli bob harper paul hudak john hughes stefan kaes john launchbury john mitchell kevin mitchell nick rothwell mads tofte david watt members haskell committee members ifip 
typing translation rules appendix presents formal typing translation rules set rules performing typing translation 
rules extension damas milner dm 
language typing translation rules overloading helpful slightly simpler language captures essential issues 
language usual constructs identifiers applications lambda abstractions expressions plus new constructs inst expressions correspond class instance declarations respectively 
syntax expressions types 
expression oe declares overloaded identifier 
scope declaration may corresponding inst expressions inst oe type oe instance type oe notion precise 
lambda expressions bound variables inst expressions may smaller scope 
lambda expressions inst expressions contain explicit types types expressions inferred rules 
example portion definition equality shown 
rest appendix eq abbreviation type bool second example portion definition arithmetic operators shown 
num abbreviation type translating formal language grouped operators dictionary 
straightforward independent central issue resolve overloading 
types damas milner system distinguishes types written type schemes written oe 
system adds third syntactic group predicated types 
syntax 
full language wrote types member eq 


bool simplified language write form member ff eq eq ff ff ff bool restriction eq read equality defined type corresponding restriction eq eq ff read eq instance type eq ff 
general refer ae predicated type predicate 
give rules deriving typings form oe read set assumptions expression typing oe translation 
typing includes translation rules derive pairs 
possible typing rules translation simply deleting ne portion rules 
possible translation rules independently typing controls translation 
example elimination predicates types controls elimination lambda abstractions translations 
identifiers expressions oe inst oe type variables ff type constructors types ff predicated types ae ae type schemes oe ff oe ae syntax expressions types eq ff eq ff inst eq eq int eqint inst eq eq char inst eq ff fi eq eq ff eq eq fi eq ff fi eq fst fst eq snd snd eq definition equality formalised ff num ff inst num int inst num float fst snd negate square square definition arithmetic operations formalised eq ff eq ff eq eq int eq eq int eq eq char eq eq char eq ff fi eq eq ff eq eq fi eq ff fi eq ff fi eq eq ff eq eq fi eq ff fi eq eq ff eq eq ff eq eq fi eq eq fi ff fi ff fi assumptions taut oe oe taut oe oe ff oe spec ff oe oe ff free gen ff oe comb abs oe oe typing translation rules part assumptions typing done context set assumptions assumptions bind typing translation information free identifiers expression 
includes identifiers bound lambda expression overloaded identifiers 
write sequences assumptions sets order irrelevant 
forms binding assumption list ffl oe overloaded identifiers ffl oe oe declared instances overloaded identifiers ffl oe lambda bound variables assumed instances overloaded identifiers 
oe oe identifier translation overloaded identifier bound lambda expression assumption form oe simply translates 
shows assumptions available applying inference rules expression eq fst eq snd 
bindings corresponding instance declarations bindings bound variables bindings corresponding assumed instances equality 
shall see assumed instances introduced pred rule 
instances set assumptions define instance relation type schemes oe oe read oe general oe assumptions 
relationship defined damas milner extended apply predicated types 
certain sets assumptions valid 
definition validity depends relation founded mutual recursion definition valid assumptions definition give definition section definition valid assumptions 
instance relation oe oe oe ff ff ae oe fi fi ae defined follows oe oe iff fi free oe ff ff ae ae part similar definition damas milner 
bound variables oe specialised resulting predicated types compared 
define ae ae iff type part ae equals type part ae condition damas milner predicate ae ffl predicate form ae predicate appears types ffl predicate eliminated assumptions predicate eliminated iff ffl ffl oe oe example set assumptions ff eq eq ff ff ff bool int int bool holds 
hand ff eq eq ff ff ff bool float float bool hold contains binding asserting eq instance type float type schemes unifiable overlap exists type instance set assumptions 
say oe oe unifiable exists type valid set assumptions oe oe write oe oe oe oe unifiable 
ae pred oe ae ae rel oe ae oe oe oe oe oe oe oe inst oe inst oe oe typing translation rules part eq eq int eqint eq eq char eq ff fi eq eq ff eq eq fi eq ff fi eq eq ff eq eq fi eq eq ff fst fst eq eq fi snd snd eq ff fi eq eq ff eq eq fi eq ff fi eq eq int eq eq char translation equality formalised eq ff eq ff eqint eq int eqint eq int inst eq eq int eqint inst eq eq char eq problematic expression valid assumptions sets assumptions proofs valid 
valid sets assumptions inductively defined follows ffl empty 
empty assumption set fg valid 
ffl normal identifier 
valid assumption set identifier appear oe type scheme oe valid assumption set 
ffl overloaded identifier 
valid assumption set identifier appear oe type scheme types oe oe types schemes oe oe oe oe oe distinct oe oe oe oe oe valid assumption set 
example assumptions valid set 
set invalid augmented binding eq fl eq char fl eq fl eq char fl instance overlaps set 
inference rules give inference rules characterise form oe rules break groups shown figures 
group directly damas milner rules 
small differences translations added rule straightforward way taut rules rule bindings bindings 
example set assumptions shown assumptions types integer character constants 
rules sufficient derive eq bool eq eq int eq bool eq eq char rules sufficient resolve simple overloading 
complicated uses overloading require remaining rules shown 
deal elimination predicates second deal inst constructs 
seen expressions types contain classes expressions predicated types translated lambda abstractions require dictionary passed run time 
idea encapsulated pred predicate rel release rules 
pred rel rules introduce eliminate predicates analogously way gen spec rules introduce eliminate bound type variables 
particular pred rule adds predicate type lambda expression translation rel rule removes predicate type application translation 
rule types expressions adding appropriate binding environment inst rule types inst expressions adding appropriate binding environment 
validity condition sets assumptions ensures overloaded identifiers valid types 
notice translations contain inst expressions contain overloading 
easy verify translations typed hindley milner system 
example program translated rules program 
reader easily verify corresponds translation 
shown formalise typing transformation ideas informally body 
principal typings call oe principal type scheme iff ffl oe ffl oe oe oe oe key result hindley milner system expression typing principal type scheme 
conjecture valid set assumptions expression containing inst expressions typing principal type scheme example set assumptions 
typing eq ff eq ff eq eq alpha principal 
examples non principal typings eq eq int eq eq int eq eq char eq eq char instance principal typing assumptions existence principal types problematic expressions contain inst expressions 
example assumption set expression 
possible derive typings eq int eqint eq char principal type 
possible resolution require inst declarations global scope 
remains open question drastic restriction ensures existence principal types 
bjrner ershov jones editors partial evaluation mixed computation north holland appear 
cw cardelli wegner understanding types data abstraction polymorphism 
computing surveys december 
car cardelli structural subtyping notion power type 
proceedings th annual symposium principles programming languages san diego california january 
dm damas milner principal type schemes functional programs 
proceedings th annual symposium principles programming languages albuquerque january 
goguen 
jouannaud meseguer principles obj 
proceedings th annual symposium principles programming languages january 
gr goldberg robson smalltalk language implementation 
addison wesley 
hin hindley principal type scheme object combinatory logic 
trans 
am 
math 
soc 
pp 
december 
hmm harper macqueen milner standard ml 
report ecs lfcs edinburgh university computer science dept 
hmt harper milner tofte definition standard ml version 
report ecs lfcs edinburgh university computer science dept 
kae kaes parametric polymorphism 
proceedings nd european symposium programming nancy france march 
lncs springer verlag 
mil milner theory type polymorphism programming 
comput 
syst 
sci 
pp 

mil milner proposal standard ml 
proceedings symposium lisp functional programming austin texas august 
mil milner changes standard ml core language 
report ecs lfcs edinburgh university computer science dept 
mp mitchell plotkin types existential type 
proceedings th annual symposium principles programming languages january 
rey reynolds approaches type structure 
mathematical foundations software development lncs springer verlag 
str strachey fundamental concepts programming languages 
lecture notes international summer school computer programming copenhagen august 
tur turner miranda non strict functional language polymorphic types 
proceedings nd international conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
wan wand complete type inference simple objects 
proceedings symposium logic computer science ithaca ny june 
ieee computer society press 

