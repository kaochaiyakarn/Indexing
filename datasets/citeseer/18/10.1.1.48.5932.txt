retrospective study synthesis kernel calton pu jonathan walpole dept computer science engineering oregon graduate institute von neumann dr beaverton henry massalin sunnyvale ca building synthesis kernel demonstrated interesting implementation techniques improving performance operating system kernels :10.1.1.38.5072
particular experimented fine grain modular kernel organization dynamic code generation software feedback 
addition importantly discovered careful systematic combination ideas powerful idea may serious limitations 
describes lessons learned synthesis interesting interactions discovered modularity dynamic code generation software feedback 
highlight important common synthesis approach ideas operating system design implementation 
historically measures throughput formed primary basis evaluating operating system performance 
direct consequence operating system implementation techniques geared optimizing throughput 
unfortunately traditional approaches improving throughput tend increase latency 
examples include large buffers data transfer coarse grain scheduling quanta 
approach appropriate batch processing model early computer systems today interactive multimedia computing environments introduce different processing model require correspondingly different performance metrics implementation techniques 
new computing model data transferred real time devices pipeline system application level computation steps 
interactive environment applications primarily concerned performance determined operating system throughput magnitude variance latency introduced step pipeline 
reducing controlling latency maintaining throughput pipelined environment key goal generation operating systems 
contrast totally throughput oriented implementation techniques conventional operating systems synthesis kernel sought investigate implementation techniques provide lower predictable latency improving throughput 
particular synthesis incorporates dynamic code generation reduce latency critical kernel functions software feedback control variance latency introduced operating system resource scheduling policies 
experience synthesis showed techniques interesting useful right 
important kernel design lessons learned project relate interactions techniques relationship kernel design approaches fundamental principles underlie ideas 
focuses exactly issues 
organized follows 
section outlines key performance challenges generation operating systems 
main synthesis implementation techniques dynamic code generation software feedback summarized sections respectively principle advantages problems 
section discusses interaction techniques explains relationship kernel design approaches identifies common principles 
principles describe design directions operating systems 
section outlines related 
section concludes 
performance challenges generation operating systems advent interactive multimedia computing imposes strict new requirements operating system performance 
particular generation operating systems support processing real time data types digital audio video low latency high throughput 
emerging model computation real time data enters system input device passes number kernel application processing steps real time output device 
environment system performance determined large part throughput total latency pipeline 
multimedia applications systems complex number steps pipeline increase 
important addition new steps pipeline cause significant increases latency 
problem key challenge operating system designers 
operating systems implement data movement buffering large amounts data pipeline stage process correspondingly large cpu scheduling quanta additional pipeline elements lead undesirable increases latency 
alternative approach implement data movement processing steps fine granularity 
approach traditionally taken allow operating system overhead incurred operations context switching data transfer system call invocation interrupt handling amortized large periods useful 
focusing amortizing costs expense latency suggest generation operating systems resolve problem directly reducing cost fundamental operations 
need new design approaches exacerbated trend operating system design micro kernel operating systems 
systems implement operating system functionality collection coarse grain server modules running minimal kernel 
structuring approach advantages current implementations tend lead increase cost invoking operating system functions add number steps pipeline 
popular process emulating existing monolithic operating systems microkernel operating systems exacerbates problem 
current implementation approaches supporting emulation redirecting traps user level emulation libraries invoking operating system functions introduce additional latency kernel calls 
important accepted reasons supporting emulation 
needed new implementation techniques allow supported efficiently 
summary generation operating systems provide support low overhead data movement control flow transfer modularity emulation 
provide predictable real time resource scheduling support multimedia applications 
areas explored bounds traditional kernel implementation approaches 
synthesis kernel departs traditional approaches making extensive techniques ffl dynamic code generation reduce latency common kernel functions particularly emulation context switch queue buffer management system call invocation interrupt handling 
ffl software feedback adaptive resource scheduling predictable variance latency 
techniques described detail earlier papers dwelling ideas sections briefly introduce ideas focus key lessons learned application synthesis 
remainder discusses interaction ideas relation important concepts kernel design 
dynamic code generation techniques uses benefits briefly explain principle conceptual technical level 
list key places synthesis state summarize benefits obtained places 
refer papers details 
interaction ideas explain fine grain modularity interfaces essential foundation dynamic code generation 
explain mean terms opposed coarse grain server level concept modularity interfaces familiar sosp folks 
explain features essential dynamic code generation successfully 
explain concept synthesis show example helps apply dynamic code generation 
learned key lessons ffl lesson interfaces possible gain benefit dynamic code generation 
example unix limits fast context switch best example think 
ffl lesson fine grain modularity approach doesn scale 
dynamic code generation applied programming large rigorous approach modularity employed 
wide applicability dynamic code generation needs fine grain modularity 
dynamic code generation key removing overhead conventionally thought associated modularity 
mutual dependency ideas 
similar reasons dynamic code generation offers key efficient emulation allows artificial boundaries introduced emulation removed collapsing layers 
give example illustrate mean 
important problems cache management explain impact dynamic code generation cache management particularly instruction data cache consistency issues discuss hand tuned cache management generated code 
portability discuss impact synthesis assembler approach dynamic code generation 
affect portability 
target independent assembler may give support portability family machines higher level language support needed wider portability discuss issue porting compiler optimizer code generator vs porting os 
debugging explain distinction dynamic code generation self modifying code append approach vs update place 
generated code generating code 
debugging really big problem sounds 
debugging support available synthesis 
henry say debugging support available kernel monitor 
nicer 
software feedback technique uses benefits briefly explain software feedback support adaptive real time scheduling 
state differs conventional real time scheduling approaches 
explain approach synthesis cpu scheduling 
refer papers details 
interaction ideas explain cost adaptive scheduling dynamic code generation 
give example 
dynamic code generation simple things fast queue management cpu re allocation 
give short examples 
allows adaptive feedback mechanism responsive 
mention need link fine grain modularity calton couldn remember getting left 
explain multimedia systems need adaptive scheduling approaches order efficient resources 
learned lesson ffl lesson fine grain adaptation schemes need dynamic code generation achieve simplicity performance 
ffl lesson think 
important problems range responsiveness explain tradeoff limitations responsiveness magnitude error hand excessive algorithmic complexity hand 
theoretical foundations explain limitations current experimental approach 
outline necessary terms theoretical analysis filter properties experimental validation 
discuss need better theoretical foundation fine grain adaptive scheduling ideas 
integration fine grain adaptive scheduling existing approaches guaranteeing levels service managing overload relate qos interfaces support resource reservation admission testing continuous degradation face overload 
discussion relationship ideas dynamic optimization information learned runtime drive dynamic optimization valuable principle kernel designers 
abstractly basis dynamic code generation software feedback 
dynamic code generation gathers information invariants run time uses information complete instantiation code templates 
software feedback gathers performance information runtime uses adjust resource scheduling policy 
addition commonality conceptual level number important mutual dependencies techniques 
dependencies show effectiveness ideas depends combination applied isolation 
key dependencies ffl adaptive scheduling approaches useful low cost responsive 
achieve need dynamic optimizations dynamic code generation 
ffl fully effective dynamic code generation requires interfaces fine grain modularity 
modular kernel design facilitates dynamic code synthesis interactions simplified constrained 
ffl dynamic code generation widely system fine grain modularity applied widely including modularization code generator 
ffl dynamic code generation holds key removing performance overheads associated modularity emulation 
provides foundation real scientific comparison different kernels calton mean 
paving way acceptance new kernel mach 
interdependencies potentially large impact kernel structuring 
fine grain modularity essential structuring concept 
explain extent synthesis concept useful appropriate 
claimed application implementation techniques greatly improve support emulation existing system interfaces difficult emulate completely kernel interface 
part operating system interface supported emulation 
kernel exports data structures cvt ibm mvs absolute location hex unix emulation problem harder 
belief ultimately kernel interfaces completely encapsulated 
don view lack support level emulation major drawback 
uniform kernel design approach synthesis showed couple dynamic optimization techniques usefully added kernel developers tool kit 
synthesis didn go far describing supporting new kernel development methodology embodies approaches uniform way 
fundamental principles underlie dynamic optimization techniques synthesis concept partial evaluation 
partial evaluation viewed process specializing operations knowledge invariants hold various stages program development cycle including execution 
synthesis information relating invariants generally implicit kernel code 
uniform kernel design implementation approach provide direct support generalized partial evaluation making knowledge manipulation invariants explicit 
support generalized partial evaluation differs synthesis approach ways 
uses invariant related information sources apply optimizations different stages system life cycle 
approach thought incremental specialization 
synthesis focused primarily runtime optimizations 
second programming methodology include support making invariant related information explicit source information stage target optimization 
information suite partial evaluation tools ranging compile time analysers runtime code generators 
key kernel design implementation approach integrate multi level programming approach embodies invariant information fine grain modularity 
require new high level programming language support 
language requires general features support modularity defined semantics automatic partial evaluation support multi level programming longterm hope integration multi level programming fine grain modularity allow separation machine dependencies fine granularity improving potential code reuse enhancing portability 
related dynamic code generation ways 
list deutsch compiled smalltalk terminal way 
feedback systems existed long time context control theory 
network protocols idea applied design specific protocols certain things cite jain 
scheduling cite ibm 
cite kevin jeffay adaptive buffer management multimedia os 
relationship real time scheduling approaches 
emulation mach bsd unix window dos nt windows os dos chorus svr 
accepted practical idea needed preserve huge investment software allow graceful transition 
dynamic code generation considered expensive temporary solution 
ultimately build emulator faster original implementation hardware 
unix emulator mach synthesis emulator unix carries low overhead dynamic code generation 
modular kernels interfaces kernels completely interface 
mention implementation limitations kernels 
modular kernels 
chorus mach 
contrast pure message implementation mach multiple implementation kernel chorus 
possible show cost modular kernel dynamic code generation 
talking apple people finlayson 
discuss dynamic optimization dynamic linking micro protocols kernel cite peterson 
related ideas synthesis project include lock free synchronization explain idea reduced synchronization lock free synchronization 
explain important removing bottlenecks multiprocessor systems 
explain herlihy moss particularly transactional memory give idea theoretical foundation 
synthesis experimental validation idea powerful applicable big way 
synthesis shown os kernel implementation techniques promising 
ideas studied isolation careful systematic combination 
learned techniques may clear win combination powerful 
interaction ideas subtle experience synthesis shows applied operating system kernels 
example ideas modular kernel design emulation long time synthesis provides new evidence implemented efficiently combining dynamic optimization techniques 
optimization techniques improve performance modular systems require high degree modularity order effectively 
similarly advent multimedia computing real time adaptive resource management key issue 
adaptive scheduling approaches need dynamic optimization techniques dynamic code generation order responsive 
synthesis project discovered important interactions interesting techniques 
applied widely integrated operating system efforts need unified approach kernel implementation optimization 
outlined essential elements new approach fine grain kernel structure high level language support modularity incremental specialization 
accetta baron bolosky golub rashid tevanian young 
mach new kernel foundation unix development 
proceedings usenix conference pages 
usenix association 
massalin pu 
threads input output synthesis kernel 
proceedings twelfth symposium operating systems principles pages arizona december 
massalin pu 
fine grain adaptive scheduling feedback 
computing systems winter 
special issue selected papers workshop experiences building distributed systems florida october 
massalin pu 
reimplementing synthesis kernel 
proceedings workshop micro kernels kernel seattle april 
usenix association 
pu massalin 
composition synthesis kernel 
proceedings international workshop object orientation operating systems palo alto october 
ieee computer society 
pu massalin ioannidis 
synthesis kernel 
computing systems winter 
zimmermann 

basic concepts support distributed systems chorus approach 
proceedings nd international conference distributed computing systems july 
