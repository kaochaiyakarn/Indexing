appears proceedings ieee aerospace conference aspen design remote agent experiment spacecraft autonomy douglas bernard gregory chuck fry edward gamble jr bob kanefsky james kurien william millar nicola muscettola nayak barney pell rajan nicolas benjamin smith brian williams jet propulsion laboratory california institute technology oak grove drive pasadena ca douglas bernard jpl nasa gov nasa ames research center ms moffett field ca recom technologies ames research ames riacs ames nayak ptolemy arc nasa gov describes remote agent flight experiment spacecraft commanding control 
remote agent approach operational rules constraints encoded flight software 
software may considered autonomous remote agent spacecraft operators sense operators rely agent achieve particular goals 
experiment executed flight nasa deep space technology validation mission 
experiment spacecraft usual detailed sequence commands execute 
spacecraft list goals achieve experiment 
flight remote agent flight software generate plan accomplish goals execute plan robust manner keeping track plan accomplished 
plan execution remote agent stays lookout hardware faults require recovery actions replanning 
addition describing design remote agent discusses technology insertion challenges approach remote agent approach address challenges 
experiment integrates spacecraft autonomy technologies developed nasa ames jet propulsion laboratory board planning robust multithreaded executive model failure diagnosis recovery 

robotic spacecraft making possible explore planets understand dynamics composition history bodies solar system 
spacecraft enable extend presence space fraction cost risk associated human exploration 
pave way human exploration 
human exploration desired robotic precursors help identify map candidate landing sites find resources demonstrate experimental technologies 
current spacecraft control technology relies heavily relatively large highly skilled mission operations team generates detailed time ordered sequences commands macros step spacecraft desired activity 
sequence carefully constructed way ensure known operational constraints satisfied 
autonomy spacecraft limited 
describes flight experiment demonstrate remote agent approach spacecraft commanding control 
remote agent approach operational rules constraints encoded flight software software may considered autonomous remote agent spacecraft operators sense operators rely agent achieve particular goals 
operators know exact conditions spacecraft tell agent exactly instant time 
tell agent exactly goals achieve period time report 
remote agent ra formed integration separate technologies board planner scheduler robust multi threaded executive model fault diagnosis recovery system 
remote agent approach designed new millennium program deep space ds mission experiment 
spacecraft see fly asteroid mars comet 
new millennium program designed validate cutting edge technologies enable technologies broadly available nasa programs 
experiment exercised october 
word view macintosh picture 

ds spacecraft section discusses benefits spacecraft community increased spacecraft autonomy motivation 
section outlines challenges acceptance spacecraft autonomy section introduces remote agent design approach architecture 
section covers particulars ds remote agent experiment 
section discusses functioning technology components remote agent 
section describes remote agent software integrated separately developed deep space flight software 
section describes remote agent experiment tested prior flight 
section summarizes describes plans remote agent development 

need autonomy spacecraft desire increase level spacecraft autonomy comes separate objectives spacecraft customers advantage science opportunities reducing spacecraft operations costs handling uncertainty including ensuring robust operation presence faults 
advantage science opportunities science customers spacecraft able modify sequence actions quickly late breaking information available spacecraft 
example ultraviolet spectrometer comet mission identify region particular interest intense scrutiny 
current technology scientists pre planned sequence observations stored board reprogram examine closely newly identified region interest 
ra plans may revised new information hours minutes 
ground control turnaround time hours impractical turnaround time minutes physically impossible due speed light 
see 
word view macintosh picture 

fast replanning new information similarly mars pathfinder mission science team requested ability meteorology instrument senses dust devil passing tell camera take unplanned images aimed departing dust devil 
difficult see capability coexist time tagged command sequences imaging planned rest day 
reducing spacecraft operations costs funding sources insisting means reduce operations costs 
fixed amount funding available nasa solar system exploration including spacecraft development operations 
operations costs reduced resources available developing wider variety interesting solar system exploration missions 
development detailed spacecraft sequences accounts largest expenditure operations budgets 
commanding spacecraft higher level abstraction sequence development task responsibility flight software reducing ground operations costs 
savings come change think operations planning 
old approach spacecraft activities needed predicted approved ground controllers 
new thinking ground controllers need know low level details spacecraft activities capabilities spacecraft high level goals 
ensuring robust operation presence uncertainty customers require high reliability ability respond problems flight 
existing spacecraft fault protection system represents autonomous system board 
robust operation desired presence hard faults degraded performance operator errors 
traditional spacecraft conservative designs generally provide minimal level fault protection necessity 
major problem attitude control power antennas prevent ground controllers diagnosing correcting problem 
remote agent able go step recovering fault continue mission involves replanning degraded capability 
advantage remote agent derives nominal failure modeling fault diagnosis engine 
hard coded fault protection designs domain knowledge implicit explicit 
means rely fault protection algorithm developers understand system understanding design symptoms look responses take show 
contrast model fault diagnosis fault protection software engineers explicitly model system behaves nominal failure cases 
fault diagnosis search diagnoses observed symptoms 
spacecraft designers understand details system behavior advantage having encode knowledge explicitly design time 

autonomy technology insertion requirements build better won catch mice gets 
similar issues insertion higher levels autonomy spacecraft designs 
design developed needs sets customers mind spacecraft test engineers mission controllers 
spacecraft test conversations spacecraft test engineers raised number concerns addressed autonomous system design process 

determinism non determinism system nondeterministic test system don control initial conditions flight 
current remote agent design system deterministic extent set inputs yield outputs time 
context question predict exact set commands remote agent achieve set goals far predict exactly spacecraft state time 
situation common context attitude control systems 
don know exactly particular thruster fire know system fire needed achieve higher level goal holding commanded attitude 
test system 
attitude control system develop multiple scenarios verify pointing error meets requirements situations 
check usage acceptable requirements met 
continuing analogy attitude control system develop multiple scenarios test high level goals met analyze resources required acceptable 

earlier system behavior definition flight system complex testing needed earlier desired behavior needs defined long launch 
additional techniques required 
described testing section 
concern early definition may valid depending spacecraft behavior choose build flight software launch 
traditional sequence development approach sequences developed launch opportunity observe full behavior test environment 
board planner opportunity design test behavior hand 
pointed opportunity requirement 
example project may choose delay final design scenarios launch 
case expect update board planner mission goals time scenario finalized may launch 

test plan coverage develop test plan assures adequate coverage 
test cases devised 
needs tested system test 
core engines underlying remote agent unfamiliar spacecraft test teams require large effort test 
distinction remote agent infrastructure engines mission unique models 
remote agent infrastructure extensively analyzed tested pre integration unit tests 
system test level focus behavior remote agent meets goals constraints set 
complex system test plan needs include nominal cases failure cases cases test boundaries system operators learn break 
planner challenged overloading number tasks done short time 
executive may challenged large number tasks requiring immediate response fault protection may challenged examining response multiple closely spaced failures 
planner unit tests include examples constraint 
executive unit tests explore approach achieve task fault protection tests depend testers invent challenging scenarios 
large variety tests seeking extreme boundary condition behavior indicated testing complex software system 
major advantage remote agent approach depends declarative hardware knowledge approaches hardware knowledge captured implicitly 
explicit models come handy review time software engineer sit hardware expert review declarative model hardware 
helps reduce errors understanding hardware software engineers 
mission operations mission operators controllers clearly expressed number requirements desires respect fielding autonomous systems 
include 
low level commanding operators able access low level control spacecraft hardware autonomous system 
requirement clear remote agent design modified allow low level hardware command access potentially bypassing autonomous capabilities safeguards 
remote agent instructed context goals low level commands need carefully spacecraft low activity quiescent mode 

ground override authority ability command spacecraft revert low level autonomy mode controllers decide want disable autonomous feature 
requirement met ds 

migration autonomy capabilities sequence allows demonstration autonomous capabilities ground system capabilities prior fielding spacecraft board capabilities 
remote agent experiment designed meet requirement engaging executive just basic sequence engine allowing remote agent execute pre computed plan sent ground enabling board planner bringing full ds remote agent level autonomy bear 

behavior prediction ability predict level behavior spacecraft spacecraft begins execute board generated plan 
copy board planner built ground system 
copy generate experience rules thumb sets goals easily achievable sets difficult achieve board system rules thumb 
operators define goals mission phase remote agent closing loop goals best prediction spacecraft behavior goals achieved schedule 
remote agent designed support multi level commanding monitoring order enable ground controllers adjust level autonomy desire different activities mission phases 

remote agent design approach architecture new millennium autonomy architecture rapid prototype effort identified key contributing technologies board planning replanning multi threaded smart executive modelbased failure diagnosis repair 
learned take advantages strengths weaknesses technologies merge powerful system 
successful completion prototype ra selected nmp technologies ds 
spacecraft software modification demonstrated experiment 
fig 
shows communications architecture remote agent interaction rest spacecraft flight software 
note interaction hardware responsibility real time software 
ra layered top software gathers information levels support fault diagnosis 
word view macintosh picture 

remote agent communication architecture spacecraft commanding styles possible 
commanding intended operating mode ra mission provision updating goals flight 
typical planning cycle executive executing plan gets activity interpreted time plan segment 
executive calls planner current projected spacecraft state including health devices 
planner scheduler generates new plan priorities heuristics domain models including system constraints 
planner sends plan executive creates agenda plan items executes agenda 
plan execution robustness added making model mode identification reconfiguration mir system 
mir system includes monitors mode identification nominal failure conditions communication state executive proposals reconfiguration actions take event failures 
components remote agent described detail section remote agent experiment deep space mission described detail 

deep space remote agent experiment remote agent experiment rax deep space demonstration ra capabilities 
alternate method control mission rax focused demonstrating specific autonomy capabilities controlling aspects spacecraft behavior 
remote agent controls spacecraft hardware software camera autonomous navigation solar electric propulsion sep subsystem trajectory adjustment attitude control system turns attitude hold navigation system determining actual trajectory deviating trajectory sep thrusting profile needed stay trajectory power amplification switching module demonstrating fault protection capabilities 
failure modes covered rax 

power bus status switch failure 
camera power stuck 
hardware device communicating bus flight computer 
thruster stuck closed mission scenario remote agent experiment executed phases hour phase followed couple weeks day phase 
phase start slowly demonstrating executive operating manner low level sequencer accepting commands turn devices 
scripted mode demonstrated execution plans ground 
main demonstration commanding spacecraft go stay known safe standby mode take series optical navigation images 
addition failure mode demonstrated injecting power bus switch status readings indicating power bus unexpectedly 
fault diagnostic system examine information information indicates devices bus communicating normally flight computer conclude failure switch status measurement bus 
action result 
planning sep thrusting attempted phase 
phase start demonstrating low level commanding initiate board planning 
spacecraft initial state goals planner generate day plan including imaging optical navigation thrusting stay trajectory simulated injection faults test failures 
camera power stuck failure injected 
executive unable turn camera plan dictates executive realizes current plan aborted replanning indicated 
necessary example initial plan assumptions power consumption incorrect camera 
plan declared failed spacecraft sent standby mode planner requested replan new information camera power switch stuck 
new plan received executive execution resumes including navigation sep thrusting 
near day plan planner called generate plan days 
plan includes navigation sep thrusting 
includes simulated faults 
failure hardware device communicate injected proper recovery reset device interrupting plan 
thruster stuck closed failure simulated injecting attitude control error monitor threshold 
correct response switch control modes failure mitigated 
ra capabilities demonstrated ds rax scenario designed demonstrate ds remote agent meets autonomy technology goals allow low level command access hardware achieve goal oriented commanding generate plans goals current spacecraft state expectations determine health state hardware modules demonstrate model failure detection isolation recovery coordinate hardware states software modes replan failure new context 
ra components major components remote agent discussed 
planner scheduler highest level commanding interface remote agent provided planner scheduler ps 
ps maintains database goals mission mission profile spans long time horizon potentially duration entire mission 
duration mission ps iteratively invoked executive return synchronized network high level activities plan short term scheduling horizon mission profile partitioned 
typically short term horizon covers days 
ps receives request exec identifies scheduling horizon retrieves mission profile goals relevant horizon merges expected initial spacecraft state provided exec incomplete initial plan generates fully populated plan 
ps sends plan exec execution 
rax phase mission profile cover days contain scheduling horizons days 
rax allows specification kind goals 
specifies frequency duration optical navigation windows time spacecraft requested take set asteroid pictures orbit determination board navigator 
second type goal specifies mini sequence set lowerlevel commands exec issue real time software requirements activate mini sequence certain synchronization constraints respect planned activities 
new plan requested mm ps situations nominal operations case exec reaches activity planner plan horizon current scheduling horizon 
exec issue request new plan 
request define new initial state expected final state plan currently execution 
allow seamless patching old new schedule interruption execution 
fault response fault protection system detects anomaly impact executability tasks plan exec request new plan resume normal operations having put spacecraft safe standby mode 
case initial state describes standby tasks holding states subsystem modeled plan health information describing possibly degraded modes failed subsystems 
notice point view ps nominal fault response case handled exactly way 
ground controllers add modify delete goals mission profile explicitly issuing command mission profile 
example mission spacecraft communicated earth deep space network final communication schedule allocated mission may available weeks ahead time possible schedule may change short notice week 
ground controllers need communicate situation spacecraft issuing appropriate edit commands modify mission profile 
ps provides core high level commanding capability rax 
initial incomplete plan containing initial spacecraft state goals ps generates set synchronized high level activities executed achieve goals 
ps presents features distinguish artificial intelligence operations research approaches problem 
example spacecraft domain planning scheduling aspects problem need tightly integrated 
planner needs recursively select schedule appropriate activities achieve mission goals subgoals generated activities 
needs synchronize activities allocate global resources time power data storage capacity 
subgoals may generated due limited availability resources time 
example may preferable keep scientific instruments long possible maximize amount science gathered 
limited power availability may force temporary instrument shut mission critical subsystems need functioning 
case allocation power critical subsystems main result scheduling step generates subgoal instrument requires application planning step 
ps able tune order decisions characteristics domain considering consequences action planning resource scheduling simultaneously 
helps keep search complexity control 
significant difference respect classical approaches artificial intelligence operations research action planning resource scheduling typically addressed sequential problem solving stages distinct software systems 
important distinction remote agent ps classical approaches planning activities planner schedules occurrence states conditions 
states conditions may need monitored ensure example spacecraft quiet high stability pointing required 
states consume resources finite durations similar characteristics activities plan 
ps explicitly acknowledges similarity unifying conceptual primitive token represent actions states occur time intervals finite extension 
ps consists heuristic search engine incremental refinement scheduler irs operates space incomplete partial plan 
plans explicitly represent time numeric metric fashion planner temporal database 
causal planners ps begins incomplete plan attempts expand complete plan posting additional constraints database 
constraints originate goals constraint templates stored model spacecraft 
temporal database facilities defining accessing model information search provided hsts system 
details ps hsts system see 
describes ps architecture 
word view macintosh picture 

planner scheduler architecture coverage rax model described table 
appendix gives detailed description timelines tokens needed ps handle propulsion thrust subsystems spacecraft 
table summary planner models ra experiment subsystem state variables value types compatibilities comments micas executable health models health mode activity micas imaging camera 
rax demonstrates fault injection recovery device part day scenario 
navigation goal executable internal schedule orbit determination od picture activity 
propulsion thrust goal executable internal thrust schedule generated nav module planner generates plans precisely activate ips specific intervals constraints domain model complex set timelines subsystem controlled planner see appendix details attitude executable health enables planner schedule constant pointing attitudes spacecraft maintains panels sun 
targets constant pointing attitudes imaging targets earth communication thrust direction ips thrusting 
power management goal internal allows planner ensure adequate power available scheduling numerous activities simultaneously 
executive goal executable allows modeling low level sequences bypassing planner models giving mission ops ability run sequencing mode ra 
planner executable schedule executive request plan horizon 
mission goal allows mission manager planner coordinate activities series scheduling horizons updatable mission ops entire mission subsystem model represented ps database 
subsystem set dynamic state variables value tracked time 
dynamic state variable assume values 
token associated value state variable occurring finite time interval 
value associated compatibilities patterns constraints tokens 
legal plan contain token value temporal constraints compatibilities satisfied tokens plan 
example atomic temporal constraints belong compatibility expressed english spacecraft asteroid pictures requested navigation ion thrusting allowed 
table identify distinct kinds state variables 
goal timeline contain sequence high level goals spacecraft satisfy navigate goal described 
goal timelines filled ground operators board planning experts seen ps goal generators 
example order generate portion plan commands ips engine ps nav returns types goals total accumulated time scheduling horizon thrusting profile followed 
types information laid separate goal timelines 
expected device health information time tracked health timelines 
expected profile communicated exec ps initial spacecraft state 
exec communicate health device changed fault occurred 
example previous fault situation ground controllers may decided ips engine trustworthy considered operational tests run 
ps generate plans involve engine 
may decide run tests posting appropriate goals mission profile breaking nominal plan execution 
tests may decide ips engine trustworthy may send message exec ok thrust 
exec communicate ps health timeline scheduling horizon needing interrupt regular plan execution put spacecraft standby mode 
kind state variable internal timeline 
planner internally organize goal dependencies subgoaling 
executable state variable corresponds tasks tracked executed exec 
rax ps treats timelines tokens simple unified search algorithm 
advantages 
ground team force certain behaviors spacecraft including mission profile explicit tokens executable timelines 
additional tokens treated ps goals checked internal ps model missing supporting tasks automatically expanded create consistent plan 
greatly facilitate ground team 
table gives quantitative information regarding plans ps expected generate board day experiment 
tokens constraints columns contain number tokens pairwise temporal constraints token starts minutes token plan respectively 
cpu time column reports actual measured run time ps powerpc vxworks flight hardware testbed 
column reports estimated time generate plans actual rad flight processor ds 
scale factor due lower speed rad respect powerpc order magnitude allocation cpu ps process 
table 
ps metrics performance scenario tokens constraints cpu time ppc testbed mm ss est 
cpu time rad hh mm ss horizon replan horizon second horizon executive smart executive exec reactive plan execution system responsibilities coordinating execution time activity 
exec functions include plan execution task expansion hardware reconfiguration runtime resource management plan monitoring event management 
executive invokes planner mir help perform functions 
executive controls lower level software setting modes supplying parameters responding monitored events 
task expansion exec provides rich procedural language esl define complex activities broken simpler ones 
procedure specify multiple alternate methods goal achievement increase robustness 
selected method fails exec try methods applicable current context 
resource management multi threaded system exec works multiple activities simultaneously 
activities may compete system resources constraints resolved ground planner 
exec manages resources monitoring resource availability usage allocating resources tasks available making tasks wait resources available suspending aborting tasks resources unavailable due failures device breaking 
see ref 
detailed discussion 
rax startup startup exec asks mir describe current spacecraft configuration 
exec puts spacecraft standby mode 
standby mode safe mode guarantees sufficient power ground communications thermally benign state 
standby mode achieved exec begins normal operational cycle 
operational cycle top level operational cycle including planning loop described follows 
exec requests plan formulating plan request describing current plan execution context 
executes monitors generated plan 
exec executes plan decomposing high level activities plan primitive activities executes sending commands usually real time flight software 
exec determines commanded activities succeeded direct feedback recipient command inferences drawn mode identification mi component mir 
method achieve task fails exec attempts accomplish task alternate method task definition invoking mode reconfiguration component mir recovery expert 
finds steps repair failing activity interfering concurrent executing activities exec performs steps continues original definition activity 
exec unable execute repair current plan aborts plan cleans executing activities puts controlled system stable safe state called standby mode 
situations continued operation allowed exec requests new plan ps maintaining standby mode plan received executes new plan 
periodic planning cycle shown approach separates extensive deliberative planning phase reactive execution phase executing infrequently generated plans extended time periods 
far advance system plan constrained factors including uncertainty results execution 
term planning horizon describe length time plan constructed 
normal operations ra plan week ahead time comes near current plan start working plan horizon 
actual rax experiment lasts week planning horizon set considerably shorter days 
word view macintosh picture 
executive periodic planning cycle address problem generating initial states planning round differently depending status currently executing plan 
plans normally include task planning horizon planner sets aside time computation 
point executive sends planner remainder current plan entirety annotations decisions far executing 
current plan serves prediction level abstraction required planner 
planner extend plan address goals planning horizon return result executive 
executive merge extended plan current representation existing plan 
net result executive perspective executing multiple chained plans virtually executing long plan 
useful consequence enables executive engage activities span multiple planning horizons month long ion engine burn interrupting 
event plan failure executive enters standby mode prior invoking planner generates description resulting state language understood planner 
note establishing standby modes plan failure costly activity respect mission goals causes interrupt ongoing planned activities lose important opportunities 
example plan failure causing enter standby mode comet encounter cause loss encounter science time re plan comet sight 
concerns motivate strong desire plan robustness plans contain flexibility continue execution plan wide variety execution outcomes 
executing flexible plan easy draws capabilities smart exec 
plan execution describe plan execution capability executive detail 
planner represents spacecraft activity set concurrent subsystems 
independent component subsystem conceptualized state variable take series different behaviors time 
plan consists timeline state variable 
timeline contains sequence constraints behavior state variable 
token data structure represents part sequence timeline 
token information desired behavior duration token flexible constraints token start finish 
lastly plan contains constraints coordinate behavior tokens different timelines called constraints 
example compatibility constraint says take picture token may executed window corresponding keep pointing target token activated 
exec multi threaded process capable asynchronously executing activities parallel 
exec thread timeline plan procedure called token definition type token contained plan 
token definition procedure contains precondition met activity start postcondition met activity finish body describes procedure executed 
execute plan exec activates corresponding thread timeline procedure corresponding token timeline 
exec tracks status tokens data structure called agenda 
new token able start previous token finished constraints satisfied exec terminates previous token procedure transitions 
example token turning target completed token constantly pointing target activated 
enables take picture token camera timeline activated 
picture activity finished exec terminate keep pointing target token transition token turning target attitude 
tokens executed rax executive summarized appendix detail plan execution achieved cycle shown 
exec receives new plan planner updates plan execution agenda 

exec chooses new task usually arising token agenda ready execution 

exec decomposes task series sub tasks task definition models current execution context 
sub tasks recursively decomposed level primitives 
exec invokes mir recovery expert achieve tasks failed 

exec begins execute primitive task example sending command waiting condition true 

shown processes command making change software parameter device state 
monitor affected component registers change low level sensor data sends mi new abstracted value state affected components 
mi compares command observations infers actual nominal failure mode component sends update exec describing changes modes interest exec 

exec compares feedback external events mi mode updates conditions specified task models determine command executed successfully 
proceeds take steps complete high level token 
token finished exec updates agenda continues cycle 
process external events update agenda choose task agenda execute task update agenda expand sub tasks primitives non primitives new plan ps mode update mir activity completion external commands commands request mir task models agenda 
executive plan execution cycle hard command execution failures may require modification schedule case executive coordinate actions needed keep spacecraft standby mode request generation new schedule planner 
architecture support timelines timelines tokens represent activity spacecraft subsystems external ra 
ra contains timelines support architectural features 
planner processing timeline describes activity planner 
plan horizon token timeline corresponds state planner generating new plan 
exec executes token generating plan request sending planner incorporating new plan current execution context 
supports model planning multiple horizons described 
script token timeline similar directs exec load execute plan defined file previously linked ground 
way ground controllers support back back plans 
supports automated planner running closed loop fashion ground board spacecraft supporting easy migration planning capability human automatic ground autonomous board planning 
second exec activity timeline represents low level activities exec perform lower level tokens managed board planner 
execute exec activity token takes filename argument exec simply loads executes referenced file 
file contain arbitrary lisp code including commands executable spacecraft 
timeline run exec mode corresponding traditional sequencer sending plan contains sequence exec activity tokens low level commands defined file 
timeline runs concurrently timelines defined planner enables ground operators require certain low level activities inserted high level plan generated autonomously 
exec supports exec activity procedure immediate function invocable ground controllers 
middle autonomous plan execution standby mode ground operators ask exec run arbitrary low level commands file tied events linked prespecified clock times 
complete list rax timelines tokens see appendix summary executive capabilities demonstrated rax summarize exec capabilities described demonstrated rax scenarios 
exec demonstrates multi level commanding allowing ground operators specify low level commands hardware part sequence generate plans ground request execute plans generated onboard spacecraft 
low level commanding ground planning demonstrated phase rax experiment plan linked ground contains high level activities turning target low level activities exec activity tokens simulate injection various faults turn 
second exec demonstrates plan request generation execution 
demonstrated currently executing plan changed nominal scenario currently executing plan device health token updated micas health update standby mode 
part executing plan phase exec demonstrates number important capabilities involved token decomposition 
exec demonstrates context sensitive behavior management ion propulsion system 
executing thrust command exec requires ips standby mode 
standby mode exec proceeds thrusting put ips standby mode proceeding 
exec demonstrates time driven token durations 
example terminates thrust segment timeout external confirmation 
exec demonstrates event driven token durations picture tokens allowed terminate picture finished turn tokens completed receipt turn complete messages acs sep thrusting token completed message mir ips thrusting state 
exec demonstrates goal oriented achievement don achieve things true 
planner unable determine thrust segments necessary achieve total desired thrust inserts thrust tokens plan may need executed 
exec tracks thrust achieved executes thrust tokens associated turns long thrust necessary 
exec demonstrates coordination activity details subsystems level visibility planner 
constraint acs thrust vector control mode shortly ips started thrusting 
exec commands ips thrusting mode sends command acs enter mode lower level domain knowledge 
similarly exec puts acs back reaction control system rcs control mode termination thrusting activity 
third exec demonstrates ability maintain required properties face failures 
thruster failure scenario exec learns mir state update current thruster mode faulty 
invokes mir recovery request executes mir recommendation change degraded thruster control mode 
fourth exec demonstrates ability recognize plan failure abort plan enter standby mode request execute replan 
occurs micas failure scenario exec learns mir micas stuck turned 
exec requests recovery mir turn micas way fix problem mir informs exec recovery 
plan requires micas exec aborts plan terminating thrusting segment necessary 
enters degraded standby mode leaves micas despite usual desire turn unnecessary devices standby mode requests plan planner 
plan request exec informs planner micas stuck 
executing new plan ground finds way fix micas informs mir fact 
exec learns mir micas shut new information cause exec abandon plan planner require micas broken 
time exec asks plan informs planner restored health micas planner plan switch micas desired 
exec demonstrates ability terminate plans immediate command ground case enters whichever standby mode command specifies 
implementation exec implemented top execution support language esl turn implemented multi threaded common lisp 
internal exec code designed modular layered fashion individual modules designed tested independently 
individual device knowledge rax implemented exec library generic device management routines support addition new devices reuse software missions 
details exec 

diagnosis repair refer diagnosis repair engine remote agent mir mode identification reconfiguration emphasizes model diagnosis control flavor system 
mir commands sent board hardware managers exec 
command executed mir receives observations spacecraft sensors abstracted monitors lower level device managers attitude control subsystem acs bus controller 
mir combines commands observations declarative models spacecraft components determine current state system report exec 
simple example shown schematically 
nominal case mir merely confirms commands expected effect spacecraft state 
case failure mir diagnoses failure current state spacecraft provides recovery recommendation 
single set models algorithms exploited command confirmation diagnosis recovery 
lv hur hwu lv rq wr rii 
information flow mir rax mission scenario demonstrates mir capabilities state identification experiment diagnosis sensor failure diagnosis recovery recommendations device failures overriding mir diagnosis ground command 
illustrates mir ability disambiguate sensor failure failure device sensed 
mir combines power distribution models sensed nominal current draw communication status devices conclude power switch switch sensor failure occurred 
failures diagnosed similar fashion include possibility recovery 
focuses repeated attempts recover camera switch deemed permanently stuck 
illustrates successful recovery communication device resetting remote terminal rt 
attitude error models spacecraft dynamics mir infers particular pair thruster valves stuck closed 
mir able recommend matter valves stuck switching acs control modes mitigate problem 
depend failures occurring experiment failures simulated injecting false monitor readings consistent failures 
rax expected take appropriate corrective actions necessary 
injecting simulated failures may 
lieu guaranteed real failure provides greater confidence system flight ready demonstrate ra reacts failure ground controllers able observe interpret necessary override actions taken 
simulations necessary demonstration rax fully responsible responding real failures limited scope occurring experiment 
raises additional challenge regarding rax avoid conflicts flight software fault protection mechanism fp may react failure 
negotiate complex resolution strategy rax designed narrower notion nominal operation fp tuning monitors appropriately avoiding conflict altogether 
rax operational respond mitigate faults mandate fp monitors triggered 
rax fails fp terminate rax triggered 
mir component ra architecture embodied system called livingstone consists parts mode identification mi mode reconfiguration 
mi responsible identifying current operating failure mode component spacecraft 
component failure responsible suggesting reconfiguration actions restore spacecraft configuration achieves current goals required planner executive 
livingstone viewed discrete model controller mi provides sensing component provides actuation component 
mi mode inference allows executive reason state spacecraft terms component modes terms low level sensor values supports run time generation novel reconfiguration actions 
livingstone uses algorithms adapted model diagnosis provide functions 
key idea underlying model diagnosis combination component modes possible description current state spacecraft set models associated modes consistent observed sensor values 
de kleer williams mi uses conflict directed best search find combination component modes consistent observations 
analogously uses search find cost combination commands achieve desired goals state 
furthermore mi system model perform function 
combination single search algorithm single model process exercising multiple uses contributes significantly robustness complete system 
note methodology independent actual set available sensors commands 
furthermore require aspects spacecraft state directly observable providing elegant solution problem limited observability 
model diagnosis algorithms immediately provides livingstone number additional features 
search algorithms sound complete providing guarantee coverage respect models 
second model building methodology modular simplifies model construction maintenance supports reuse 
third algorithms extend smoothly handling multiple faults recoveries involve multiple commands 
fourth algorithms require explicit fault models component easily exploit available fault models find failures possible recoveries 
livingstone extends basic ideas model diagnosis modeling component finite state machine spacecraft set concurrent synchronous state machines 
modeling spacecraft concurrent machine allows livingstone effectively track concurrent state changes caused executive commands component failures 
important feature behavior component state mode captured qualitative models 
models describe qualities spacecraft structure behavior detail needed precise numerical prediction making models easier acquire verify quantitative engineering models 
examples qualities captured power data hydraulic connectivity spacecraft components directions thruster provides torque 
models quantify spacecraft perform failed thruster example infer failed signs errors spacecraft orientation 
inferences robust small changes underlying parameters affect behavior spacecraft 
addition models reduced set clauses propositional logic 
form allows behavior prediction take place unit propagation restricted efficient inference procedure 
mir view spacecraft supported set fault protection monitors classify spacecraft sensor output discrete ranges high low nominal symptoms excessive attitude error 
goal rax basic monitoring capability inexpensive scope monitoring driven system engineering analysis constrained software development concerns 
achieve monitors specified dataflow schema feature extraction symptom detection operators reliably detecting discriminating classes sensor behavior 
second software architecture sensor monitoring described domain specific software templates code generated 
symptom detection algorithms specified restricted harel state transition diagrams reusable spacecraft 
goals methodology reuse symptom detection algorithms reduce occurrence errors automation streamline monitor design test 
table illustrates classes components modeled mir ds spacecraft 
list number instances spacecraft model modes states component occupy 
told mir model represents components twelve different types behavior interconnections 
ease modeling mir allows set components model describing interconnection grouped module treated unit 
table illustrates modules created model ds 
list number instances spacecraft model components modules module contains 
table 
ds hardware modeled components mir component class model modes ion propulsion system ips standby startup steady state thrusting shutdown beam controller hung unknown remote terminal nominal failure power failure unknown attitude control degraded degraded failed failed failed unknown switch popped popped stuck stuck unknown switch sensor nominal stuck stuck unknown current sensor nominal reported value real value unknown values unconstrained thruster valve nominal stuck closed unknown thruster nominal unknown tank non empty unknown thruster unavailable bus controller nominal unknown vehicle dynamics nominal qualitative description force torque 
power bus nominal failure considered fatal remote involve diagnosis 
table 
ds hardware modeled modules mir module model subcomponents power relay switch switch sensor power distribution unit relays power buses current sensors remote terminal generic rt subsystem remote terminal models rt devices mir model ips system ips remote terminal thruster pallet facing facing reaction control system thruster subsystem remote terminal important note mir models required explicit complete respect actual physical components 
models explicitly represent cause behavior terms component physical structure 
example numerous causes stuck switch driver failed excessive current shut 
observable behavior recovery causes stuck switch mir need closely model physical structure responsible fine distinctions 
models incomplete explicit unknown failure mode 
component behavior inconsistent known nominal failure modes consistent unknown failure mode 
way mir infer component failed failure foreseen simply left unmodeled recovery possible 
modeling level detail required relevant distinctions diagnosis distinctions prescribe different recoveries different operation system describe system qualitative common sense models compact quite easily written 
consider stylized model fragment table describes possible modes remote terminal 
table 
mir model fragment remote terminal device remote terminal power input rt switch power output command input bus controller command output mode nominal power input comm status power input comm status mode failure probability comm status command input reset mode nominal mode failure probability comm status power input mode nominal mode unknown probability note model unmodeled behavior consistent single model describes remote terminal outputs behave nominally failure connections devices influence behavior expected effect recovery actions reset device mode consideration 
remote terminal communicating mir consider may longer nominal may receiving power input 
investigating mir generate similar set explanations switch fail provide power model connections 
additional technical details livingstone 

integrating rax flight system integrating rax flight software challenging rax represents significant departure traditional flight software 
differences technical described previously practical cultural 
view flight software differences may manifest number ways flight software developers actual increased risk flight software product 
fortunately differences impacts inherent limitations rax technology sensitivity issues rax successful high level flight software control architecture 
single largest practical difference rax presents arises fact rax implemented common lisp previous missions realtime software rax interacts lowerlevel languages issues arise fact myth significant issue interfaces rax need specified shared languages 
success rax required issues addressed way allow traditional flight projects comfortable rax technology mitigate risk introduced new technology 
result rax manager flight software component 
rax manager presents rax technology flight software traditional flight software interface 
hardware device managers implementation interface concern interface correct functionality place required resources allocated 
rax manager serves different functions life cycle project 
design time rax manager specifies interface agreements rax flight project 
interfaces includes telemetry logging ground command dictionaries computational resources cpu fraction memory requirements messaging function calling interface flight rules fault protection responses timing mission plan 
implementation time rax manager shields existence rax implementation flight software presenting interface externally 
producing interface performing necessary conversions rax implementation language full responsibility rax developers 
process simplified dramatically rax developed software package known clash lisp syntax harmony 
clash defines language declaring message passing interfaces provides preprocessor program compiler translate declared interfaces header files code files lisp code 
clash runs inside rax hides aspects inter module communication issues 
uniform interface internal message passing rax components external message passing rax modules telemetry packet encoding 
simple compile time declarations specify interface location internal external code implementing corresponding interface 
testing time rax manager decouples rax flight software allows launch ready software tested anticipation launch date rax software tested anticipation experiment start date 
rax testing proceed launch ground generated traditional sequences validated post launch 
rax manager tiny subset rax code tested relatively early flight software schedule 
runtime rax manager mediates message passing rax flight software 
aspects 
rax manager initiate terminate rax experiment initiation happens commanded ground termination result ground command unanticipated fault having way non rax fault protection subsystem 
second aspect rax manager discard messages destined rax times rax operational 
ds rax relatively short lived technology demonstration experiment dominant runtime activity rax manager simply discard incoming messages 
course time initiation termination rax manager passes messages rax flight software 
functions rax manager spans entire flight project lifecycle doing allows rax address mitigate unique risks arise phase 

testing rax approach testing validating rax exploits standard software testing practice goes number key areas 
foundation reliable high quality system laid design specification interfaces different subsystems 
formalized rax interfaces rax rest flight software components rax clash 
clash essentially eliminated class essentially syntactic errors discrepancies index identify switch array range values inconsistent interpretations interface structures 
formalizing interfaces allowed focus testing effort finding eliminating subtle semantic errors 
rax system level testing principal approach testing rax system level scenario testing requirements 
testing individual rax modules testing methods variety methods discussed section 
started scenario testing identifying set system level requirements met rax 
designed set test scenarios ensuring requirement adequately tested scenarios 
scenario design started development hour day scenarios demonstrated flight 
scenarios include nominal operation planning executing backto back plans variety failure scenarios 
additional scenarios developed variations basic set scenarios 
variations generated nominal execution varying number image goals window varying available power solar arrays varying times turns failures varying location time number failures 
important aspect approach people intimately familiar spacecraft mission develop scenario variations 
ensures different scenarios capture variations nominal scenarios credible failures 
furthermore people identify situations challenging rax time resource limited situations critical sequences requiring precise timing failures hard diagnose recover 
mission systems engineers best position develop scenario variations 
order avoid excessively systems engineer time approach knowledgeable members rax team develop scenario variations variations reviewed ds systems engineers 
limited scope rax approach feasible 
basic approach testing generalizes naturally system level testing remote agent deployed complete mission 
particular mission usually consists number different phases characterized nominal scenarios 
example phases ds mission include launch ballistic cruise cruise ion thrusting asteroid comet various validation experiments 
nominal scenarios phases developed tested 
systems engineers nominal scenarios develop scenario variations including failure scenarios build confidence remote agent effectively carry phases mission variety different situations 
focus provided nominal scenario phase helps keep system level testing remote agent manageable 
scenario testing rax augmented variety tools processes ensure effective testing 
specifically developed set flight software hardware simulators support effective rax testing prior integration rest flight software 
developed tools simulated time warping allows rax associated simulators skip periods time rax idle 
allows test scenarios lasting days weeks simulated time minutes hours real time 
possible attempted convert tests automatic regression tests requiring manual intervention 
allows automatically run battery tests overnight ensure major release rax passes regression tests 
installed formal bug tracking system gnu system process 
code error discovered logged 
error corrected regression test created fails code corrected passes corrected code 
regression test added set regression tests 
addition system level testing described extensive module feature tests rax modules 
described 
planner scheduler module feature testing main requirements planner produce valid plan valid plan requests executive legal behaviors plan experts successfully update mission profile response profile update request 
requirement tested directly automated scenario testing 
requirement somewhat harder test 
partial plan provided planner set plan expert behaviors planner produce valid plan computational resource bounds exceeded times report plan generated bounds 
plan valid consistent plan model 
requirement tested extensive scenario testing 
plans generated scenario tested correctness plan model automated constraint checker manual spot checking plans 
constraint checker converts plan model set logical constraints 
plan checked ensure constraints met 
constraint checker performs coverage analysis ensure rule plan model exercised adequate number plans 
manual spot checking done displaying plan modified gantt chart plan viewing tool 
plan valid respect plan model plan model may incorrect 
model may express knowledge model developer intended developer may acquired correct knowledge experts 
plan model verified respect knowledge appropriate experts 
done encoding plan model english specifications confirming human experts 
source expert knowledge flight rules 
english rules state actions performed spacecraft 
example fire ips engines optical navigation images 
rules converted logical expressions added set constraints checked constraint checker 
final test small representative set plans run executive ensure execute correctly spacecraft exhibits correct behavior 
executive module feature testing modular multi level structure executive see section enables executive sub modules tested independently permits executive adapted new missions minimal amount change primarily external devices level 
limited scope rax testing higher levels executive external device level top level control relatively straightforward 
gives opportunity effectively test lower levels executive providing foundation missions 
necessary test entire executive mission high development cost eliminate selection missions 
previously discussed automatic regression tests possible test executive 
test started manual intervention required test returns pass fail value 
facilitate process simulator designed check system level properties constraints executive running 
example constraint micas camera take picture spacecraft turning 
constraint simulator generates error cause test fail simulated spacecraft turning receives command executive take picture 
unfortunately testing done automatically 
determining executive really supposed certain situations requires expert review log generated executive 
time consuming errors may overlooked 
order address problem visualization tool validating executive plan execution called developed cmu simmons 
provides user view executing timelines highlights execution flaws allows user zoom individual token showing values constraints 
formal analysis approach check executive code violates design specifications 
approach create formal model characterizes behavior critical executive constructs example dealing resource management 
formalize design requirements enforced constructs example aborted activities give resources allocated 
run model formal model checker proves formal model satisfies design requirements generates example scenario requirement violated 
approach errors executive code discovered difficult discover test methods described 
major drawback approach timeconsuming applied small part executive 
decreasing time expertise required perform analysis ongoing research area 
diagnosis repair module feature testing mir major categories testable requirements provide command confirmation exec diagnose set failures provide recoveries failures meet certain performance requirements 
majority mir testing scenario testing combination simulators real hardware 
scenario consisting sequence spacecraft commands resulting monitor values real simulated processed mir 
point scenario mir model spacecraft state agree spacecraft state predicted scenario commands 
scenario failure injected spacecraft simulation hardware testbed causing set monitor values reported mir 
mir diagnosis recovery checked injected failure performance metrics taken 
mir testing scenarios derive sources 
human testers 
developed tools allow user easily write scenario consisting rax command sequences failure injections running hardware testbed expected monitor values 
human analysis mir weaknesses provides stressful expensive test scenarios system 
second source brute force automatic scenario generation 
rax mir models small classes tests performed exhaustively set reasonable limiting assumptions fast spacecraft simulator 
example simplicity mir models failure injected combination modes model achieve automatically checked correct diagnosis recovery 
third source informed automatic scenario generation 
mir models spacecraft modeling component finite state automaton 
large amount done verification community verifying finite automata mir models correctly models physical software system spacecraft simulator hardware 
addition large amount done model diagnostics community deriving tests systematically subsystem assembled system simulator hardware determine diverge models 
drawing build automatic test generators provide near minimal length tests determine mir model agrees hardware simulator models 

number desirable remote agent features planned remote agents part ds ra 
enhancements increase mission robustness refine diagnostic capabilities simplify process representing integrating knowledge software 
discussion mission robustness discussed flexible planning recovery capabilities 
capabilities help cases preparatory action needed taken past enable recoveries current situation 
example primary engine breaks system may able switch backup engine 
remote agents capability anticipate possible failures opportunities build plans provide necessary resources system prepared possible futures 
related capability vein executive understand priorities plan abandon individual tasks threads activity failing entire plan 
enable high priority activities completed low priority activities fail 
discussion diagnosis pointed mir system new inferences time action taken new observation 
event failures generate recoveries may improve situation 
actions taken normal execution recovery right information isolate fault optimal level detail 
develop methods active testing system conduct tests sole purpose help improve understanding state spacecraft 
examples capability include turning spacecraft see gyro measuring turn rates correctly turning selected devices detect shorts 
terms knowledge engineering discussed various reasoning engines ra different representations knowledge 
ways necessary useful feature allows planner reason level executive diagnosis system reason detailed level 
heterogeneous representations number benefits raise difficulties 
significant possibility models diverge converge need duplicate knowledge representation efforts 
ideally head increasingly unified representation spacecraft intend generalizing powerful models capable handling complexities realworld domain 
technology advances currently targeted deep space missions new millennium program 
deep space spacecraft separated optical interferometer deep space comet nucleus sample return mission 
launches early years new millennium 
acknowledgments carried jet propulsion laboratory california institute technology contract national aeronautics space administration national aeronautics space administration ames research center 
authors acknowledge invaluable contributions guy man robert rasmussen defining vision spacecraft autonomy evolved effort 
authors acknowledge contributions guy man richard doyle kane jpl gregg keith swanson ken ford nasa ames mel montemerlo nasa headquarters leadership seeing necessity possibility advances area spacecraft autonomy insight recommending supporting approach took 
addition authors early defining deep space remote agent accomplished efforts erann gat steve chien jpl michael wagner ron chris plaunt scott sawyer hans thomas nasa ames 
appendix timelines respective tokens module exec perspective 
module timeline token description acs spacecraft attitude constant pointing sun point vector target solar panels sun transitional pointing sun turn vector target solar panels sun 
poke primary inertial vector small attitude change 
rcs health rcs available maintain information thruster status 
rcs ok maintain rcs set maintain desired rcs mode 
micas camera micas actions micas take op nav image take set navigation pictures 
micas mode micas keep micas 
micas ready keep micas 
micas turning turn micas 
micas turning turn micas 
micas health micas availability ensure micas available 
op nav obs window obs window op nav wait specified duration 
nav processing nav plan prep send message prepare navigation plan 
available monitor monitor switch 
sep sep sep standby achieve maintain ips standby state 
sep starting achieve maintain ips start 
sep thrusting maintain thrust level 
sep shutting thrusting go standby state 
sep time accum accumulated thrust time monitor thrust time accumulated 
sep schedule thrust segment specifies desired thrust level vector 
sep thrust timer max thrust time set timer thrusting time reached 
thrust timer idle thrust timer 
planner planner processing planner plan horizon script horizon request get plan planner 
run scripted plan 
general exec activity exec activity execute low level sequence file passed parameter 
exec eval exec eval watcher process specified script 
additional tokens listed planner placeholders timelines 
placeholder tokens require exec perform activity 
appendix detailed planner model sep timelines tokens comments sep schedule goal timeline idle segment thrust segment sep schedule populated nav planning expert 
thrust segment defines time period heading thrust level 
sequential segments constitute schedule 
idle segments needed pad timeline precisely position thrust segments 
sep thrust timer goal timeline thrust timer idle max thrust time max thrust time returned nav planning expert 
specifies total burn duration achieved current planning horizon 
sep time accum internal timeline accumulated thrust time tracks amount time plan sep scheduled thrust 
time accumulation occurs sep thrust tokens see 
sep executable timeline sep standby sep ready power grid turned 
tracks amount time sep thrusting 
greater time longer duration sep starting token 
follows sep shutting 
followed sep starting 
schedule appropriate power consumption retrieved board power table 
sep starting prepares xenon tanks allow thrusting 
duration token dependent sep thrusting previous thrust level 
requires attitude spacecraft kept constant requested thrust heading 
follows sep standby 
followed sep thrusting 
schedules power consumption retrieved board power table 
sep thrusting sep engine thrusting immediately having started 
temporally contained thrust segment token see receives requested attitude thrust level 
attitude kept constant requested attitude token 
communicates duration accumulated thrust time token track total accumulation 
follows sep starting 
followed sep thrusting sep shutting 
communicates requested heading sep starting sep shutting appropriate 
schedules power consumption retrieved power table 
sep thrusting sep engine continuing thrust having shut change attitude 
follows sep thrusting 
followed sep thrusting sep shutting 
short duration turn mode requested change attitude token 
communicate requested heading sep shutting appropriate 
constraints identical sep thrusting 
schedules power consumption retrieved power table 
sep shutting turns sep requires spacecraft kept constant requested thrust heading 
schedules power consumption power table 
biographies dr douglas bernard received mechanical engineering mathematics university vermont mechanical engineering mit ph aeronautics astronautics stanford university 
participated dynamics analysis attitude control system design spacecraft jpl hughes aircraft including attitude articulation control subsystem systems engineering lead cassini mission saturn 
currently dr bernard group supervisor flight system engineering group jpl team lead remote agent autonomy technology development new millennium program 
dr gregory computer scientist computational sciences division nasa ames research center 
received management information systems oakland university received ph computer science university michigan 
performed autonomous rover research jpl remote sensing research general motors research 
research interests include autonomous systems machine learning 
chuck fry member technical staff research contract nasa ames research center information sciences division 
chuck information computer science university california irvine 
research interests include computer architecture functional languages social implications internet 
dr ed gamble member advanced software technology group jpl 
received bachelor master electrical engineering ucla 
doctorate awarded electrical engineering specialty artificial intelligence mit 
interests ranged laser scattering fusion critical phenomenon computational vision integration sensory information programming languages real time systems 
currently interested spacecraft software architectures reuse autonomy 
bob kanefsky senior knowledge engineer computational sciences division nasa ames research center 
received formal systems stanford university 
designed wrote software tools ra ds flight software teams particularly abstractions message passing lisp telemetry 
supported mars pathfinder science operations team delivering experiment superresolution image processing algorithm helped develop writing web sequence generator preparing necessary commands lander camera 
james kurien computer scientist computational sciences division nasa ames research center currently doctoral candidate brown university 
holds masters degrees brown university rensselaer 
contributed robot navigation research brown model software environments ibm research 
dr nicola muscettola senior computer scientist computational sciences division nasa ames research center 
received diploma di electrical control engineering ph computer science di milano italy 
principal designer hsts planning framework lead board planner team deep space remote agent experiment 
research interests include planning scheduling temporal reasoning constraint propagation action representations knowledge compilation 
word view macintosh picture 
word view macintosh picture 
word view macintosh picture 
word view macintosh picture 
dr nayak senior computer scientist computational sciences division nasa ames research center 
received tech 
computer science engineering indian institute technology bombay ph computer science stanford university 
ph dissertation entitled automated modeling physical systems acm distinguished thesis 
currently associate editor journal artificial intelligence research jair research interests include model autonomous systems abstractions approximations knowledge representation reasoning diagnosis recovery qualitative causal reasoning 
dr barney pell senior computer scientist computational sciences division nasa ames research center 
architects remote agent new millennium deep space ds mission leads team developing smart executive component ds remote agent 
dr pell received degree distinction symbolic systems stanford university 
received ph computer science cambridge university england studied marshall scholar 
current research interests include spacecraft autonomy integrated agent architecture reactive execution systems collaborative software development strategic reasoning 
pell guest editor computational intelligence journal tutorials autonomous agents space robotics 
rajan member planning scheduling group nasa ames research center 
holds institute tech 
science india masters university texas arlington computer science 
prior joining nasa ames doctoral program computer science courant institute mathematical sciences new york univ primary research interests planning robotics knowledge representation 
dr ben smith member artificial intelligence group jpl deputy lead jpl element ds planning team 
holds ph computer science university southern california 
research interests include intelligent agents machine learning planning 
dr brian williams technical group supervisor intelligent autonomous systems group nasa ames research center model autonomous systems project 
received bachelor electrical engineering mit continuing receive masters ph computer science 
mit developed earliest qualitative simulation systems hybrid qualitative quantitative symbolic algebra system minima system ibis synthesizing innovative controller designs 
williams xerox parc best known gde sherlock model diagnosis systems 
williams received aaai best awards qualitative symbolic algebra incremental truth maintenance 
guest editor artificial intelligence chair aaai tutorial forum currently editorial board journal artificial intelligence research 
barney pell scott sawyer douglas bernard nicola muscettola ben smith mission operations autonomous agent proc 
ieee aeronautics aero aspen ieee press appear 
pell bernard chien gat muscettola nayak wagner williams remote agent prototype spacecraft autonomy spie proceedings volume denver 
word view macintosh picture 
view macintosh picture 
word view macintosh picture 
muscettola hsts integrating planning scheduling fox zweben eds intelligent scheduling morgan kaufman muscettola smith chien fry rajan yan board planning autonomous spacecraft proceedings fourth international symposium artificial intelligence robotics automation space july 
erann gat esl language supporting robust plan execution embedded autonomous agents proceedings aaai fall symposium plan execution aaai press 
barney pell ed gamble erann gat ron jim kurien bill millar nayak christian plaunt brian williams hybrid procedural deductive executive autonomous spacecraft nayak williams editors procs 
aaai fall symposium model directed autonomous systems aaai press 
barney pell erann gat ron nicola muscettola ben smith robust periodic planning execution autonomous spacecraft procs 
ijcai 
erann gat barney pell resource management unconstrained plan execution system proc 
ieee aeronautics aero ieee press appear 
de kleer williams diagnosing multiple faults artificial intelligence vol number 
de kleer williams diagnosis behavioral modes proceedings ijcai 
weld de kleer readings qualitative reasoning physical systems morgan kaufmann publishers san mateo california 
de kleer williams artificial intelligence volume elsevier 
williams nayak model approach reactive self configuring systems proceedings aaai 
reid simmons greg visualization tools validating software autonomous spacecraft proc 
fourth international symposium artificial intelligence robotics automation space tokyo japan 
klaus havelund michael lowry john penix formal analysis spacecraft controller spin technical report nasa ames research center 
