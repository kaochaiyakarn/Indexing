algorithms quantum computation proceedings th annual symposium foundations computer science santa fe nm november ieee computer society press pp 

discrete logarithms factoring peter shor bell labs room mountain ave murray hill nj usa computer generally considered universal computational device believed able simulate physical computational device increase computation time polynomial factor 
clear true quantum mechanics taken consideration 
researchers starting david deutsch developed models quantum mechanical computers investigated computational properties 
gives las vegas algorithms finding discrete logarithms factoring integers quantum computer take number steps polynomial input size number digits integer factored 
problems generally considered hard classical computer basis proposed cryptosystems 
give examples quantum cryptanalysis 
discovery quantum mechanics people behavior laws probability quantum mechanics counterintuitive 
behavior quantum mechanical phenomena behave quite differently phenomena classical physics 
feynman ask effect computation 
gave arguments behavior intrinsically computationally expensive simulate quantum mechanics classical von neumann computer 
suggested possibility computer quantum mechanical principles avoid problem implicitly asking converse question quantum mechanics computer compute efficiently classical computer 
early field quantum mechanics computing done 
ask quantum mechanics conferred extra power computation show turing machine simulated reversible unitary evolution quantum process necessary prerequisite quantum computation 
deutsch give explicit model quantum computation 
defined quantum turing machines quantum circuits investigated properties 
part discusses quantum computation relates classical complexity classes 
give brief intuitive discussion complexity classes readers background 
generally resources limit ability computers solve large problems time space memory 
field analysis algorithms considers asymptotic demands algorithms resources function problem size 
theoretical computer scientists generally classify algorithms efficient number steps algorithms grows polynomial size input 
class problems solved efficient algorithms known classification nice properties 
thing reasonable job reflecting performance algorithms practice algorithm running time tenth power input size say truly efficient 
classification nice theoretically different reasonable machine models produce class see behavior reappear quantum computation different models quantum machines vary running times polynomial factors 
computational complexity classes discussed 
pspace problems solved amount memory polynomial input size 
important complexity class np intuitively class exponential search problems 
problems may require search exponential size space find solution solution may verified polynomial time possibly polynomial amount additional supporting evidence 
discuss traditional complexity classes 
bpp problems solved high probability polynomial time access random number generator 
problems solved polynomial time sums exponentially terms computed efficiently sums satisfy requirement term computable polynomial time 
classes related follows bpp np pspace relationship bpp np known 
question quantum mechanics computer allows obtain computational power satisfactorily answered 
question addressed shown solve problem quantum polynomialtime known solvable bpp 
problem stimulated bernstein vazirani laid foundations quantum computation theory computational complexity :10.1.1.144.7852
results contained oracle problem problem involving black box subroutine function computer allowed perform code accessible 
done polynomial time quantum turing machine requires super polynomial time classical computer 
indication fact knew simulate quantum computer classical computer exponential slowdown quantum computation obtain greater polynomial speedup classical computation augmented random number generator 
result improved simon gave simpler construction oracle problem takes polynomial time quantum computer requires exponential time classical computer 
viewing simon oracle subroutine result promise problem takes polynomial time quantum computer looks difficult classical computer promise problem input guaranteed satisfy condition algorithm easy case discrete log directly analogous simon algorithm group replaced group gamma able discover algorithm seeing simon 
result bernstein vazirani particular class quantum turing machine universal quantum turing machine simulate quantum turing machine class 
unfortunately clear quantum turing machines simulate classes quantum turing machines result entirely satisfactory 
yao remedied situation showing quantum turing machines simulate simulated uniform families polynomial size quantum circuits 
defined machines heads showed machines simulated slowdown factor show class problems solved polynomial time machines possibly bounded probability ffl error reasonably robust 
class called bqp analogy classical complexity class bpp problems solved bounded probability error probabilistic turing machine 
class bqp considered class problems efficiently solvable quantum turing machine 
bqp pspace non relativized proof bqp strictly larger bpp imply structural complexity result bpp pspace proven 
view difficulty approaches come mind showing bqp bpp lead collapse classical complexity classes believed different 
second approach prove results relative oracle 
bennett shown relative random oracle case np bqp 
proof fact suggests quantum computer invert way functions proves way oracles black box functions subroutine quantum computer allowed look inside 
oracle results misleading past notably case ip pspace 
third approach take solve bqp studied problem polynomial time algorithm known 
shows extra power conferred quantum interference hard achieve classical computation 
bernstein vazirani simon gave polynomial time algorithms problems known bpp problems invented especially purpose simon problem appear contrived conceivably useful 
discrete logarithms integer factoring number theory problems studied extensively polynomial time algorithms known 
fact problems widely believed hard cryptosystems hardness proposed rsa public key cryptosystem hardness fac :10.1.1.40.5588
show problems solved bqp 
currently knows build quantum computer possible laws quantum mechanics 
suggestions possible designs computers substantial difficulty building 
possible build small quantum computers scaling machines large interesting computations fundamental difficulties 
hoped stimulate research feasible construct quantum computer 
quantum computer built research illuminate problem simulating quantum mechanics classical computer 
method doing arbitrary hamiltonian necessarily able simulate quantum computer 
general method simulating quantum mechanics polynomial slowdown lead polynomial algorithm factoring 
quantum computation section give brief quantum computation emphasizing properties 
complete overview refer reader simon proceedings earlier papers quantum computational complexity theory :10.1.1.144.7852
quantum physics experiment behaves proceeds possible paths simultaneously 
paths complex probability amplitude determined physics experiment 
probability particular outcome experiment proportional square absolute value sum amplitudes paths leading outcome 
order sum set paths outcomes identical respects universe state 
quantum computer behaves way 
computation proceeds possible paths path associated complex amplitude 
determine probability final state machine add amplitudes paths reach final state square absolute value sum 
equivalent way looking process imagine machine superposition states step computation 
represent superposition states js amplitudes complex numbers ja js basis state machine quantum turing machine basis state defined written tape position state head 
quantum circuit basis state defined values signals wires level circuit 
machine examined particular step probability seeing basis state js ja heisenberg uncertainty principle looking machine computation disturb rest computation 
laws quantum mechanics permit unitary transformations state 
unitary matrix conjugate transpose equal inverse requiring state transformations represented unitary matrices ensures probabilities obtaining possible outcomes add 
definitions quantum turing machine quantum circuit allow local unitary transformations unitary transformations fixed number bits 
example informative point 
suppose machine superposition states gamma apply unitary transformation gamma gamma gamma gamma gamma gamma bits state 
multiply bits components vector matrix 
machine go superposition states notice result different started superposition states probabilities particular configuration observed 
give certain properties quantum computation useful 
facts immediately apparent definition quantum turing machine quantum circuit useful constructing algorithms quantum machines 
fact deterministic computation quantum computer reversible 
results reversible computation compute polynomial time function long keep input machine 
erase replace need addition computable polynomial time gamma polynomial time computable 
fact polynomial size unitary matrix approximated polynomial number elementary unitary transformations approximated polynomial time quantum computer :10.1.1.144.7852
approximation introduce bounded probability error results computation 
building unitary transformations quantum computation deals unitary transformations helpful able build certain useful unitary transformations 
section give techniques constructing unitary transformations quantum machines result showing construct particular unitary transformation polynomial time 
transformations generally matrices rows columns indexed states 
states correspond representations integers computer particular rows columns indexed specified 
tool repeatedly unitary transformation summation gives fourier transform 
consider number number bits polynomial 
perform transformation takes state jai state gamma jbi exp iab apply unitary matrix th entry exp iab 
transformation heart algorithms call matrix exponential size show transformation done polynomial time 
fact able smooth numbers ones small prime factors 
deal smooth numbers contain prime power factor larger log fixed possible transformation polynomial time smooth numbers coppersmith shows essentially fast fourier transform substantially reduces number operations required factor 
know factorization delta delta delta gcd polynomial size show build transformation polynomial time composing need lemma quantum computation 
lemma suppose matrix block diagonal mn theta mn unitary matrix composed identical unitary theta matrices diagonal 
suppose state transformation done time quantum turing machine 
matrix done log mn time quantum turing machine constant 
call matrix direct sum copies notation matrix tensor product theta identity matrix 
proof suppose number tape 
reversibly compute ff ff mff ff computation erases tape replaces ff ff ff tells block row contained ff tells row matrix block row apply ff obtain fi erasing ff process 
combining ff fi obtain mff fi gives result applied right amplitude 
computation takes time rest computation polynomial log log show obtain smooth decompose product polynomial number unitary transformations polynomial time enables construct polynomial time 
suppose gcd 
represent cd rearranging rows columns obtain rearranging rows columns obtain long rearrangements rows columns polynomial time row find polynomial time row taken inverse operations polynomial time lemma recursion obtain polynomialtime way perform quantum computer 
need define check cd 
define need preliminary definitions 
recall relatively prime 
exp 
number mod mod gamma mod 
number exists chinese remainder theorem computed polynomial time 
decompose row column indices follows ff ff fi fi fl fl note asymmetry definitions define ff fi ff fi fi fi fi fl fi fl gammafi fi 
easy see cd ff fl need ff fi fi fl ensure non zero entries 
cd ff fi fi fi fi fl gammafi fi ff fl ff fl ff fl 
ff ff fl fl ac cd 
sketch rearrange rows columns get matrix matrix put block diagonal form blocks indexed ff fi entries ff fi 
tq mod 
block ff fi entries look ff fi fi fi exp ff fi fi fi exp ff ff fi rearrange rows block indexed ff ff ff mod obtain transformation ff fi amplitude exp iff fi transformation unitary matrix ff fi entry equal exp iff fi matrix similarly rearranged obtain matrix need show find smooth lies polynomial time 
smooth closer need 
known find smooth numbers close polynomial time 
lemma polynomial find number prime power larger log divides constant independent proof find multiply primes delta delta delta delta delta delta delta product larger product larger divide largest prime keeps number larger produces desired prime theorem 
prime number theorem theorem calculation show largest prime dividing size log 
note coppersmith transformation th roots unity set blog nc 
discrete log easy case discrete log problem prime generator multiplicative group mod mod find mod 
start giving polynomial time algorithm discrete log quantum computer case gamma smooth 
algorithm analogous algorithm simon group replaced gamma smooth case interesting accomplishment polynomial time algorithms classical computers case explaining case easier explaining general case discrete log factoring algorithm algorithms similar example illuminate complicated algorithms 
start algorithm tape quantum memory machine 
trying compute mod 
delete constants specify state machine contents tape 
algorithm starts choosing numbers mod gamma uniformly state machine step gamma gamma gamma ja bi algorithm computes gammab mod reversibly keep values tape 
state machine gamma gamma gamma fi fi gammab mod ff transformation gamma map amplitude gamma exp iac gamma amplitude gamma exp ibd gamma 
discussed previous section unitary transformation gamma smooth accomplished polynomial time quantum machine 
leaves machine state gamma gamma exp gamma ac bd fi fi gammab mod ff compute probability computation ends machine state jc yi mod 
probability absolute value square sum ways machine produce state fi fi fi fi fi fi fi gamma exp gamma ac bd fi fi fi fi fi fi fi sum satisfying gamma rb mod gamma 
condition arises fact computational paths interfere give mod 
substitute equation rb mod gamma exponential 
sum reduces fi fi fi fi fi gamma gamma exp gamma kc rc fi fi fi fi fi rc mod gamma sum set gamma st roots unity evenly spaced unit circle probability 
sum root unity gamma times giving gamma gamma gamma check probabilities add counting gamma states jc yi gamma choices mod gamma gamma choices mod 
computation produces random mod gamma corresponding mod gamma 
gamma relatively prime find division 
choosing possible equal probability chance gamma relatively prime oe gamma gamma oe euler oe function 
easy check oe gamma gamma log 
theorem oe gamma gamma gammafl log log 
need number experiments polynomial log obtain high probability 
fact find set relatively prime prime divisor gamma repeating experiment expected constant number times 
give information obtain note precision number bits precision needed amplitude quantum mechanical computers barrier practicality 
generally accepted theoretical dividing line feasible infeasible polynomial precision number bits logarithmic problem size feasible infeasible 
quantum computer phase angle need obtained physical device constructing devices better polynomial precision impractical 
fact polynomial precision may prove impractical theoretical dividing line results nice theoretical properties 
need show computations previous section need polynomial precision amplitudes 
act writing expression exp iac gamma imply need exponential precision phase angle exponentially precise 
fortunately case 
consider matrix gamma term exp iac gamma replaced exp iac gamma sigma 
positive case resulting occur nearly large probability adding gamma amplitudes exactly phase angle add gamma amplitudes nearly phase angle size sum reduced constant factor 
algorithm give constant probability probability 
recall obtain matrix gamma multiplying log matrices entry gamma product log terms 
suppose phase angle ffl log 
product phase angle ffl perform computation constant probability success 
similar argument shows magnitude amplitudes polynomial fraction 
similar arguments hold general case discrete log factoring show need polynomial precision amplitudes cases 
need show construct constant size unitary matrices having limited precision 
arguments give fact bennett shown sufficient polynomial precision computation quantum turing machine obtain answer high probability 
precision easily limiting factor practicality quantum computation advisable investigate precision needed quantum algorithms 
bernstein vazirani show number bits precision needed logarithm number computational steps quantum computer takes algorithms conceivably require 
interesting open questions possible discrete logarithms factoring polynomial precision tradeoff precision time possible 
factoring algorithm factoring similar general case discrete log somewhat simpler 
algorithm general case discrete log give algorithms order increasing complexity 
readers interested discrete log may skip section 
giving quantum computer algorithm factor give quantum computer algorithm finding order element multiplicative group mod integer mod 
randomized reduction factoring order element 
factor odd number method computing order element choose random find order compute gcd rx gamma 
fails give non trivial divisor odd rx gamma mod 
criterion shown algorithm finds factor gamma gamma number distinct odd prime factors scheme long prime power factoring prime powers done efficiently classical methods 
find mod 
find smooth put machine uniform superposition states representing numbers mod 
leaves machine state gamma jai algorithm discrete log write state machine change values 
compute mod 
keep tape done reversibly 
leaves machine state gamma ja mod perform fourier transform mapping amplitude exp iac 
leaves machine state gamma exp iac jc mod observe machine 
sufficient observe solely value clarity assume observe mod 
compute probability machine ends particular state fi fi mod ff may assume summing possible ways reach state find probability fi fi fi fi fi jx exp iac fi fi fi fi fi sum mod 
order sum equivalently satisfying mod 
writing br find probability fi fi fi fi fi fi gammak gamma rc exp br fi fi fi fi fi fi ignore term exp factored sum magnitude 
replace rc residue congruent rc mod range gammaq 
leaves expression fi fi fi fi fi fi gammak gamma rc exp fi fi fi fi fi fi show small amplitudes sum nearly direction giving large probability 
small respect change variables approximate sum integral fi fi fi fi fi gammak gamma rc exp dt fi fi fi fi fi quantity shown asymptotically bounded exact probabilities equation example case plotted 
probability seeing state fi fi mod ff gammar probability observing values quantum algorithm described factoring 
high probability observed value near integer multiple 
gammar rc gamma dq dividing rq rearranging terms gives fi fi fi fi gamma fi fi fi fi know fraction satisfies inequality 
obtain fraction lowest terms rounding nearest fraction having denominator smaller fraction polynomial time continued fraction expansion finds best approximations fractions chapter 
fraction lowest terms happens relatively prime give count number states fi fi mod ff enable compute way 
oe possible values relatively prime oe euler oe function 
fractions close fraction jc gamma rj 
possible values order roe states fi fi mod ff enable obtain states occurs probability obtain probability oe 
theorem oe log log fixed theorem shows find log log fraction time repeating experiment log log times assured high probability success 
note algorithm order properties multiplication mod 
fact permutation mapping set gamma kth iterate computable time polynomial log log algorithm able find order element minimum discrete log general case general case find smooth number close see lemma 
easy case choose uniformly mod gamma compute gammab mod 
leaves machine state gamma gamma gamma fi fi gammab mod ff fourier transform send mod amplitude exp ac bd giving state gamma gamma gamma exp gamma ac bd delta fi fi gammab mod ff note moduli deal gamma keeping track things confusing able obtain algorithm similar easy case 
probability observing state jc yi mod fi fi fi fi fi fi fi gamma exp ac bd fi fi fi fi fi fi fi sum gamma rb mod gamma 
relation br gamma gamma br gamma substitute expression obtain amplitude gamma gamma exp gamma brc kc bd gamma gamma br gamma delta absolute value square amplitude probability observing state fi fi mod ff analyze expression 
factor exp taken terms ignored change probability 
split exponent parts factor obtain gamma gamma exp exp rc gamma gamma fc gamma br gamma gamma br gamma kj fc gamma fzg mean residue mod gammaq fzg 
show get outputs deduce furthermore chance getting output constant 
idea fi fi fi rc gamma gamma fc gamma gamma jq fi fi fi closest integer varies gamma phase exponential term eq 
varies half unit circle 
jfc gamma jv phase second exponential term eq 
farther exp 
combining observations show conditions hold contribution probability corresponding term significant 
furthermore conditions hold constant probability reasonable sample condition holds allow deduce give lower bound probability output output satisfies conditions 
know ranges gamma phase exp iu ranges iw gamma rc gamma gamma fc gamma gamma jq eq 

component amplitude exponential eq 
direction exp iw cos jw gamma gamma 
condition phase vary due second exponential exp iv 
applying variation manner minimizes component direction get component direction cos jw gamma gamma 
condition jw putting probability arriving state jc yi satisfies condition cos dt count number pairs satisfying conditions 
number pairs holds exactly number possible exactly holds round fraction nearest integer obtain 
number holds approximately 
pairs satisfying conditions 
multiplying gamma number possible gives approximately pq states jc yi 
combining calculation lower bound probability state gives probability obtaining state 
want recover pair gamma gamma fc gamma gamma mod equation obtained condition dividing thing notice multiplier fraction denominator gamma evenly divides gamma gamma fc gamma need round nearest gamma divide mod gamma gamma gamma fc gamma find candidate show experiment need repeated polynomial number times find correct requires details 
problem divide number relatively prime gamma 
general case discrete log algorithm know possible values generated reasonable likelihood know 
additional difficulty step harder corresponding step previous algorithms 
knew remainder modulo prime powers dividing gamma chinese remainder theorem recover polynomial time 
able find remainder primes larger little extra able recover pair generated probability tenth possible pair 
eq 
follows mapped gamma rounding nearest integer multiple gamma 
exactly close gamma 
corresponds exactly show prime power ff dividing gamma random contain willing accept large constant algorithm just ignore prime powers know modulo prime powers try possible residues primes large constant factor increase running time 
tenth pair tenth 
prime power ff random divisible ff probability ff probability having prime power divides ff ff jp gamma ff sum prime powers greater divide gamma 
sum integers converges goes factor increase large constant 
recall obtained probability experiment 
experiments obtain sample chosen equally 
able find set prime powers ff dividing gamma relatively prime 
prime possibilities residue modulo ff ff exponent prime prime factorization gamma 
try residues modulo powers primes possibility calculate corresponding chinese remainder theorem check see desired discrete logarithm 
algorithm properties algorithm find discrete logarithms fields ff need know order generator multiply take inverses elements polynomial time 
program algorithm wait quantum computer built ways efficiency increased efficiency shown 
jeff lagarias finding fixing critical bug version discrete log algorithm 
charles bennett gilles brassard andrew odlyzko dan simon umesh vazirani correspondents numerous list productive discussions corrections improvements early drafts pointers literature 

quantum mechanical hamiltonian models turing machines stat 
phys 
vol 
pp 


quantum mechanical hamiltonian models turing machines dissipate energy phys 
rev lett 
vol 
pp 


bennett logical reversibility computation ibm res 
develop 
vol 
pp 


bennett bernstein brassard vazirani strengths weaknesses quantum computing manuscript 
currently available world wide web url vesta physics ucla edu 

bernstein vazirani quantum complexity theory proc 
th acm symp 
theory pp 


brassard quantum challenge structural complexity theory proc 
th conf 
structure complexity theory ieee computer society press pp 


brassard oracle quantum computing proc 
workshop physics computation pp 
ieee computer society press 

coppersmith approximate fourier transform useful quantum factoring ibm research report rc 

deutsch quantum theory church turing principle universal quantum computer proc 
roy 
soc 
lond 
ser 
vol 
pp 


deutsch quantum computational networks proc 
roy 
soc 
lond 
ser 
vol 
pp 


deutsch jozsa rapid solution problems quantum computation proc 
roy 
soc 
lond 
ser 
vol 
pp 


bit gates universal quantum computation phys 
rev vol 
pp 


feynman simulating physics computers international journal theoretical physics vol 
pp 


feynman quantum mechanical computers foundations physics vol 
pp 

originally appeared optics news february 

sipser interactive protocols np languages 
inform 
proc 
lett 
vol 
pp 


gordon discrete logarithms gf number field sieve siam discrete math 
vol 
pp 


hardy wright theory numbers fifth edition oxford university press new york 

landauer quantum mechanically coherent computation useful proceedings drexel symposium quantum quantum classical correspondence feng 
hu eds 
international press appear 

machines de turing 
recursive en de equation ou est un de codes comptes de des sciences vol 
pp 


lenstra lenstra jr eds development number field sieve lecture notes mathematics springer verlag book contains reprints articles critical development fastest known factoring algorithm 

lenstra jr rigorous time bound factoring integers amer 
math 
soc 
vol 
pp 


lloyd potentially realizable quantum computer science vol 
pp 


lloyd envisioning quantum supercomputer science vol 


miller riemann hypothesis tests primality comp 
sys 
sci 
vol 
pp 


hellman improved algorithm computing discrete logarithms gf cryptographic significance ieee trans 
information theory vol 
pp 


fast rigorous factorization discrete logarithm algorithms discrete algorithms complexity proc 
japan joint seminar pp 
academic press 

rivest shamir adleman method obtaining digital signatures public key cryptosystems vol 
pp 


shamir ip pspace proc 
th ann 
symp 
foundations computer science pp 
ieee computer society press 

simon power quantum computation proc 
th ann 
symp 
foundations computer science pp 
ieee computer society press 

teich obermayer mahler structural basis quantum systems ii effective particle dynamics phys 
rev vol 
pp 


toffoli reversible computing automata languages programming seventh colloq lecture notes computer science de bakker van leeuwen eds 
pp 
springerverlag 

unruh maintaining coherence quantum computers phys 
rev vol 
pp 


yao quantum circuit complexity proc 
th ann 
symp 
foundations computer science pp 
ieee computer society press 
