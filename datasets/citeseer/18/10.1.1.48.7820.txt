scanning polyhedra loops fran cois irigoin cri cedex france supercompilers perform complex program transformations result new loop bounds 
shows usual assumptions automatic parallelization transformations loop nests expressed ne transformations integer sets de ned polyhedra new loop bounds computed algorithms fourier pairwise elimination method exact integer sets 
su cient conditions pairwise elimination integer sets extend pseudo linear constraints 
tradeo dynamic overhead due bound slackness compilation complexity resulting code correct 
algorithms interchange block loops regardless loop bounds blocking strategy safely exchange array parts levels memory hierarchy neighboring processors distributed memory machine 
optimizing transformations generate cient code supercomputers applied steps 
dependence analysis provides conditions transformations preserve sequential program semantics 
best transformation class chosen respect particular architecture 
chosen transformation applied program source machine code level 
deals mainly third point introduces new conditions transformation legality neglected ed speci cally intricate transformations requiring new loop bounds generation 
related quite limited dealt mail appropriate 
shown limited number simple algorithms easy prove linear algebra theory solve uni ed way loop bound generation problems di erent kinds loop nest transformations 
goal provide algorithms nely tuned speci transformation speci case powerful simple tools experiment complicated transformations quickly 
dependence theory program transformations covered extensive bibliography quite known parallel programming community 
deemed necessary recall basics see instance 
di erent code generation problems introduced examples formalized section 
rst problem enumerate loops tiles generated tiling transformation second enumerate loops iterations contained tile generally iteration set order de ned loop interchange 
third precisely enumerate array elements accessed nest loop maintain memory consistency copy ciently level memory hierarchy neighboring nodes distributed memory machine 
side ect generalized version supernode partitioning introduced encompass unique framework tiling transformations strip mining combinations loop skewing interchanging jamming 
section algorithm fourier pair wise elimination described compute loop bounds scanning polyhedron de ned system linear inequalities obtain loop nest linear rescheduling 
algorithm section obtain approximate tile enumeration set loops care taken tile level clear transformations called 
called blocking partitioning transformations blocking mathematical avor partitioning general 
hope going introduce space tessellation 
existing iterations 
complex algorithm necessary section preserve memory consistency generating software data prefetch store global local memory 
constraints de ne exact set elements move integer ne image polyhedron 
overview problems ciently execute programs multiprocessors mix techniques advocated 
consider instance program abstraction pde solver point stencil depicted gure 
reduce amount communication respect amount computation distributed memory machine suggests hexagon tiling 
point star pde stencil phi enddo enddo program tiling shown gure program triangular iteration set assuming 
dot represents iteration loop body 
tile contains dots fall inside plus dots boundaries 
graphically nicer translate boundaries dots drawn set constraints 
constraints strict non strict depending position respect tile 
instance tiles gure de ned system inequalities shape leads tiles shown gure 
visible non strict comparisons de ne tile hexagonal tiling program iteration set tile tiling proposed tiles identical 
de ne lattice visualized choosing arbitrary origin 
gure origins highlighted small circles iterations fall corresponding tile 
notice instance tile contains elements top left boundary tile contains 
tile middle elements 
tile empty elements belongs iteration set 
enumerated cover iteration set 
unusual iteration sets shown program may produce unexpected empty tiles tile gure 
loop bounds appear program automatically generated formal calculus tool 
important notice potential problem tile intersect iteration set integer point belongs intersection 
phi enddo program possible tiling anomaly tile set mentioned tile origins belong lattice de ned generator vectors 
equivalent choices possible vectors pair chosen explain set non empty tiles derived origin lattice arbitrarily chosen point simplify calculations see gure 
call coordinates tile origins space integer point mapped oneto tile 
tile coordinates linked iteration coordinates equations theses equations conjunction simple system derived loop bounds program de nes iteration set second system de nes set integer points belonging tile origin see system gure characterize set non empty tiles tiles contains iteration 
tile origin coordinates eliminated system generate cient loop bounds scan non empty tiles variable eliminated 
words dimensional polyhedron projected subspace 
resulting set tiles displayed gure translates loop bounds non empty tile set need algorithm input iteration set de ned system linear inequalities uniform tiling de ned lattice giving output loop bounds scan non empty tiles 
tile space system de ning shape tile coordinates tile 
iteration space system derived loop bounds coordinates iteration 
desired new loop bounds de ned sg jb lots notations suddenly introduced introduced equations related program hexagonal tiling 
systems linear constraints represented matrix coef cients possibly symbolic constant term iteration set local tile tile di erent reorderings usually compatible semantics initial program 
loop interchange compiler move parallel loop inwards vector unit probably simplest 
hyperplane method simpli ed version obtained combination loop skewing loop interchange loop permutation complex change bases 
transformations map integer points integer points basis preserve iteration set program semantics 
change basis matrix unimodular explained banerjee combination loop interchanges generally global code generation nested loops loop reordering 
criterion de ne general linear loop transformations 
instance decided execute iterations program front front basis iterations belonging front executed parallel 
transformation legal desirable point 
fronts shown tile gure lines new execution ordering generated replacing initial basis 
new rst basis vector linking front second basis vector linking iteration neighboring executed parallel 
pair vectors resulting change coordinates meet conditions de ne new local iteration set tile shown gure constraints su bounded easy derive new loop bounds skewed iteration set execution pattern max min 
easy 
assume desired change basis de ned de ne new local iteration set tile constraints su constraints generate loop bounds bounds external loop refer unsuitable constraints due partitioning 
assume best partitioning program square partitioning squares de ned diagonals anti diagonals 
constraint contain possible loop bounds initial iteration ordering preserved tile 
need algorithm input polyhedron de ned system inequalities ordered set variables giving output polyhedron de ned new system inequalities variable bounded min max expressions contain variables higher rank ordering 
constraints non ordered variables 
symbolically part constant term 
system directly derive loop bounds 
input polyhedron result tiling transformation shape tile change execution ordering product bu initial iteration domain change basis matrix combination su array elements accessed tile program tiled shown gure execute multiprocessor machine 
di erent kinds multiprocessors exist machine shared global memory fast local memories distributed memory machine need de ne array elements necessary execute tile 
rst example gure shows elements array available local memory processor execute hexagonal tile 
note set non convex 
elements missing bottom left top right corners 
nr non convex array access pattern second example consider contrived code de ned jalby resulting accessed set shown gure 
small subset accessed elements displayed show clearly non convexity 
linear loop bounds de ne convex iteration sets array subsets easily enumerated loops 

enddo enddo enddo non convex array access pattern necessary move sets exactly preserve memory consistency ciently waste memory interconnection network bandwidth useful algorithm input iteration set de ned system linear inequalities set array giving output set possibly non linear loop bounds array array element accessed input accessed output 
aj rg aj distributed memory machine pseudo linear mapping function input restrict elements accessed output loop available processor 
loop bound generation issues points outlined proceed 
bounds loop nest de ne special constraints loop index appear inner loop bounds result corresponding constraint matrices row echelon 
systems linear inequalities directly generate loop bounds 
second projection generally ne image polyhedron polyhedron shown gure 
linear loop bounds generate convex sets enumerate sets enumerate superset 
failing eliminate variables projection results extra loops 
instance dimensional array referenced nested loops copied loops 
initial loop indices eliminated 
elimination possible 
may necessary pseudo linear constraints modulo conditions add test guard loop body worse comes worse generate extra loop 
vector matrix notations algorithms depend number loops variables 
examples dimensional impossible draw properly cases 
lattices tiling transformations assumed tiling de ned lattice set constraints independent derived automatically automatic tiling method 
multidimensional blocking schemes proposed supernode partitioning loop tiling loop quantization quantization strip mine interchange unroll jam wavefront blocking 
tiling methods share common properties 
tiles equal integer translation implicit load balancing unique code blocks 
tile space integer vector space block numbering easy tile set polyhedron remain linear framework 
linear relation iteration coordinates block coordinates local coordinates useful test tile membership generate loop bounds tile 
multidimensional hyperplane partitioning simplest way partition space tiles family regularly spaced hyperplanes 
unique vector de ne hyperplanes orientation spacing norm ordering direction 
simple transformation called hyperplane partitioning generalization strip mining restriction stripe direction 
hyperplane partitionings combined de ne smaller tiles 
de nition vectors put matrix tile coordinates iteration pseudo linear toone mapping oor function bh free meet condition dependencies transformation legal matter 
claim tile obtained techniques de ned unique matrix su cient able derive code matrix generate code techniques 
tilings applied hand hexagon tiling shown gure simply generated 
dealt explicitly 
de nes surjection iteration space integer tile space integer point reached integer point relate coordinates tile containing local coordinates necessary get rid nonlinearity due oor operator introduce lattice examples instance strip mining loop program factor equivalent de ning moving loop innermost position expressed tiling tiling tiling shape constraints shape system constraints easy derive de nition point belongs tile origin smallest integer kh integer matrix 
de ned matrix vector kh kh pseudo inverse matrix solution nd linear relation compute pseudo inverse introduce auxiliary variable free inverted necessarily integer point iteration space instance tiling de nes space stripes width space leads non linear equation produces non integer odd tilings program shown gures 
elements belonging tile connected 
smith normal form smith proved integer linear application described quasi diagonal matrix called diagonal adequate unimodular changes basis performed domain image spaces multiplying get smallest proportional integer matrix preserving transpose sign remember usage get pd may assume null rows corresponding dimensions useless tile space may null columns 
null columns invertible square matrix de nes bounded tiles called supernode 
non zero coe cient de nes basic hyperplane partitioning 
pseudo inverse previous section smith bases related equations kd 
see precise de nition 
means multidimensional hyperplane partitioning seen simple set strip mined loops proper basis chosen 
coordinates zero rst ones equal th diagonal term get integer coordinates multiple lcm means direction hyperplane spacings possible tile contain points 
unimodular bases preserve integer coordinates 
changes basis relation tile origin coordinates iteration space tile coordinate tile space kq 
lattice de ned 
example equation de nes integer origin stripe proper stripe numbering 
supernode partitioning square invertible matrix equation simpler implies 
integer 

possible derive lattice matrix tile shape legal multidimensional hyperplane partitioning tiling obtained automatically 
scanning polyhedron naive solution project polyhedron basis vector nd loop bounds loop add test loop body sure iteration executed 
speci algorithms developped handle special changes basis permutations obtained interchanging loops 
di erent kinds loop bounds distinguished rectangular ones triangular ones 
case handled speci algorithm 
algorithm solving problem dimensional spaces outlined 
generating systems 
images extreme vertices extreme vertices image polyhedron loop bounds derived 
algorithm general assumes generating system known usually true loop bounds available 
basic idea projection algorithm nd loop bounds dimension 
fourier pairwise elimination care valid rational real polyhedra provides simple inclusion equality integer points 
row echelon sp lists parametric linear constraints dimensional space sp compute projections reverse order avoid redundant computations sp fourier sp union sp done sort constraints increasing constraint rank sort try eliminate redundant constraints innermost executed number constraints th constraints complement fourier empty trivial constraint restore original value complement endif preserve unique lower upper loop bound endif normalize rank done return algorithm row echelon detail algorithm row echelon informally 
system de nes set integer points 
initialized augmented projections smaller smaller subspaces 
projection provides constant bounds outermost loop provides bounds outermost index second loop 
fourier motzkin pair wise projection algorithm useless points added time 
initial system included useless iterations generated outer loops result empty ranges inner loops 
general total number constraints rst phase huge 
hopefully redundant 
eliminated min max constraints needed index variable 
test 
redundancy test exact 
better constraints eliminated 
generated loops correct constraints 
simple redundancy test called fourier empty fourier motzkin test shown 
faster tests 
constraints normalized coe cient corresponding index variable 
rst version algorithm 
uses idea useless projections performed 
implemented experimental phase compute loop bounds loop interchange hyperplane method 
tiling algorithm tiling simple fourier row echelon available 
lattice relations tile space iteration space constraints de ning tile shape build large linear systems containing necessary inequalities key point approximate algorithm fourier motzkin pairwise projection compute bounds scan tiles exact bounds scan iterations tile 
show correctness prove equality 
right left inclusion obvious iteration set conditions tile row echelon perform projection 
left right inclusion due proper inclusion fourier may tiles bs iteration tile bs kinds optimization performed decrease control overhead due bs 
inequalities redundant respect bt eliminated 
favorable case means iteration set bounds 
second set tests computed distinguish full tiles integer points computed ignored partial tiles intersect iteration set boundaries 
note system intricate system directly derived usual linear loop bounds see instance gure algorithm row echelon cope 
note system bs complicated kind loop reordering applied exploit instance multiprocessor vector units 
algorithm designed deal called real programs fail input code automatically generated 
tiling ht bs bt arrays constraints define tiling compute loop bounds bs tile enumeration build system sl eliminate unwanted variables standard projection fourier apply previous algorithm get system loop bounds bt row echelon compute loop bound bt tile iteration enumeration build system iteration set tile membership conditions sl bs row echelon return bs bt algorithm tiling ne image key idea build large polyhedra product domain image spaces eliminate variables domain space constraints introducing new image elements 
application equations solved hermite smith normal form 
inequalities dealt 
legal integer pairwise elimination great care taken modify ne image integer point set variable domain polyhedra eliminated 
preserve image points integer divisions introduced 
jl integer linear expression set constraints jl integers pk qk positive integers variable 
theorem pk qk eq qk qk ep apk derived integer divisions eliminate proj bsc proj bs pseudo linear system necessarily de ne polyhedron integer divisions may introduce holes convex polyhedron 
elimination operation internal operation 
introduce su cient conditions eliminate variable simple pair wise elimination modifying projection 
eliminate variables possible preserving projection system linearity 
conditions theorems 
theorem pk qk pk qk obtained pair wise elimination method system 
pk qk proj bsc proj bs theorem illustrated gures 
rst gure pairwise elimination variable polyhedron introduces additional integer point image polyhedron polyhedron projection represented axis 
result pairwise elimination method segment integer point belonging polyhedron projection point 
projection integer points di erent projection real points di erence slopes lines small containing integer point 
di erent de nitions exist non positive integers 
remainder assumed positive 
bsc set integer points belonging illustration theorem illustration theorem second gure shows line slope point image polyhedron projection integer point polyhedra contains integer point value projection set 
constraint resulting integer pair wise elimination proved redundant preserved system 
linear condition determine redundant 
theorem pk qk pk pk qk pk qk redundant proj bsc proj brc words constraint resulting elimination constraint met redundant bsc 
theorem illustrated gure equivalent having coe cient variable eliminate redundancy criteria described illustration theorem example system condition obviously redundant gure shows constraint redundant proj bc redundant proj bsc proj bs proj brc 
integer divisions conditions met possible eliminate variable combining inequalities introducing integer division theorem get assume variable inequality appearing left hand side right 
possible rewrite hl pseudo linear function pk qk example inequality equivalent rewritten example inequality equivalent simply transformed linear constraint constraint containing integer division 
hand transformed constraints function modulo mod elimination possibility important 
occurrences variables project eliminated pair wise elimination modifying projection 
hand constraints expressions complicated contain integer divisions 
algorithm compute pseudo linear constraints de ning exactly image polyhedra characterizes array elements referenced loop nest brie outlined 
computation image polyhedra constraints set referenced array elements ne image index set access function image polyhedron computed index set change basis index basis image basis dimension ne image dimension iteration space loops scan image polyhedron 
variables eliminated image polyhedron constraints de ned system rst step algorithm consists projecting useless variable occurrences possible pair wise elimination method constraints satisfying conditions theorems 
second step redundant constraints eliminated 
redundant constraints useless variable eliminated variable appear constraint superior rank 
constraints useful variables kept generate loop bounds 
integer divisions introduced constraint expressions 
remaining useless variables eliminated combining pairs constraints introducing integer divisions variable appear constraint superior rank 
nal system may contain useless variables manage prove 
occurrences variables constraints express integer divisions non convexity polyhedron ne image 
happened tested case 
generation nested loops si set constraints computed previous algorithm image polyhedra 
si linear subset si si si pseudo linear subset 
generate nested loops de ning image polyhedra algorithm row echelon described section applied si inequalities si added loops bounds guard variable higher rank inequality appears inequality sides 
examples consider program proposed jalby gure nested loops generated computed image polyhedra max idiv min idiv 
new nested loops access array element referenced original program 
number generated loops minimal equal ne image dimension 
case array having uniform dependences interesting dealt case 
examples programs set elements compute set array elements referenced rst program equivalent evaluate referenced array elements second 

enddo enddo compute set elements execution tile represented gure previous transformation applying preceding algorithms 
nested loops generated computed image polyhedra max min idiv idiv 
enddo di erent algorithms generating loop bounds di erent classes program transformations 
general encompass transformations combination transformations nests loops 
general respect loop bounds 
require rectangular triangular dal loops 
polyhedral iteration set acceptable 
min max operators may appear bound expressions 
generality simplicity complicated optimizations easy try 
additional tests di erent code versions generated algorithms ultimate optimization sought 
technique extended deal loop alignment loop peeling 
interesting generate code non perfectly nested loops adding guards statements new guards move statements loops redundancy test 
interesting algorithms generate code partitioning strategy studied successively improved 
partitioning assumes independent sets iterations exist dependence vector long 
set origins tile set de ned lattice 
dual tiling problem studied outer loops scan tile inner loops scan intersection lattice iteration set 
correctness algorithms easy prove known linear algebra concepts 
tradeo accuracy checking complexity possible correctness preserved 
worst case complexity clearly exponential space dimensions constraint number issue number loop nests increases linearly program size square dependence testing 
exponential worst case complexity may produce polynomial average complexity observed linear programming simplex algorithm 
bound constraints diagonal rectangular loops bounds coe cients rectangular loops complexity problem 
algorithm usefulness may real programs contain complicated loop bounds subscript expressions 
faster algorithms dealing simple usual cases preferred 
simple real cases compiler algorithms able cope unexpected ones detecting 
complex algorithms pretty straightforward easy write shorter lines code 
tricky cases handle may people try new optimizations instance tilings mainly may occur suite program transformations applied 
initial code simple stay restructuring process 
algorithms row echelon tiling rst implemented experimental phase ibm system 
second implementation underway pips project 
algorithm image implemented stand basis 
second phase pips project generate data exchanges local memories global memory 
allen kennedy automatic loop interchange sigplan symposium compiler construction sigplan notices allen callahan kennedy automatic decomposition scienti programs parallel execution acm symposium principles programming languages munich aiken nicolau loop quantization analysis algorithm tech 
rep cornell university en eration de code pour locales th ese de universit pierre marie curie progress banerjee theory loop permutations nd workshop languages compilers parallel computing banerjee unimodular transformation double loops rd workshop programming languages compilers parallel computing irvine cheng general criteria redundant nonredundant linear inequalities journal optimization theory applications vol 
april 
du fourier analysis linear inequality systems mathematical programming study northholland fourier analyse de de acad des sciences pendant ann ee math ematique de acad des sciences de institut de france 
gallivan jalby gannon problem optimizing data complex memory systems proceeding acm int conf 
supercomputing st malo 
hollander partitioning labeling index sets loops constant dependence vectors int conference parallel processing pp 
ii ii aug irigoin code generation hyperplane method loop interchange report cai cai ecole des mines de paris irigoin loop reordering dependence direction vectors journ ees syst emes el ematique architecture futures programmation parall ele int vlsi paris irigoin computing dependence direction vectors dependence cones linear systems report cai cai ecole des mines de paris irigoin supernode partitioning acm symposium principles programming languages san diego irigoin dependence approximation global parallel code generation nested loops international workshop parallel distributed algorithms bonas oct north holland irigoin jouvelot overview pips project international workshop compilers parallel computers paris december 
karp miller winograd organization computations uniform equations journal acm pp 
lamport parallel execution loops communications acm pp 
program improvement source transformations acm pp 
padua multiprocessors discussion theoretical practical problems phd dissertation report 
uiucdcs university illinois urbana champaign padua wolfe advanced compiler optimizations supercomputers communications acm vol 

program partitioning synchronization multiprocessors systems ph thesis report uiucdcs university illinois urbanachampaign march porter eld software methods improvement cache performance supercomputer applications rice comp tr rice university shang fortes independent partitioning algorithms uniform dependencies int conference parallel processing pp 
aug schrijver theory linear integer programming wiley optimal tiling iterative pde solvers frontiers massively parallel computation wolf lam maximizing loop transformations rd workshop programming languages compilers parallel computing irvine wolfe optimizing supercompilers supercomputers ph thesis university illinois urbana rep uiucdcs 
wolfe loop skewing wavefront method revisited int journal parallel programming pp 
wolfe iteration space tiling memory hierarchies parallel processing scienti computing ed siam pp 
wolfe optimizing supercompilers supercomputers mit press wolfe iteration space tiling supercomputing reno pp 

