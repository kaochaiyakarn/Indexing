indexing methods approximate text retrieval extended ricardo baeza yates gonzalo navarro erkki sutinen tarhio problem line approximate string matching studied line indexing techniques emerged 
study different indexing mechanisms problem proposing taxonomy classify 
propose analyze new techniques adaptations line algorithms 
final version plan experimentally compare algorithms terms index construction time space overhead query efficiency tolerance errors determining best compromises case 
approximate string matching recurrent problem branches computer science applications text searching computational biology pattern recognition signal processing problem stated follows long text length comparatively short pattern length retrieve segments occurrences text edit distance pattern edit distance strings defined minimum number character insertions deletions replacements needed equal 
line version problem pattern preprocessed text 
classical solution uses dynamic programming mn time 
number algorithms improved kn time worst case average cleverly properties dynamic programming matrix parallelizing computation bits computer words 
worst case time algorithm short patterns bit parallelism 
trend filtration algorithms fast filter run text quickly discarding uninteresting parts 
interesting parts verified expensive algorithm 
examples filtration approaches 
sublinear sense inspect text characters line problem omega gamma taken constant 
text large searched frequently fastest line algorithms practical preprocessing text necessary 
indexing methods developed exact string matching 
years ago indexing text approximate string matching considered main open problems area 
dept computer science university chile 
supported part 
dept computer science university helsinki finland 
supported academy finland 
dept computer science university finland 
survey indexes approximate text search 
cover detail known approaches propose analyze new indexing mechanisms extensions 
final version plan experimentally compare techniques terms indexing times space overhead querying times tolerance errors pointing best indexes different circumstances 
taxonomy outline types indexing mechanisms word oriented sequence oriented 
oriented natural language text information retrieval index retrieve word edit distance pattern second useful text natural language index retrieve sequence notion word separation 
avoiding text redundancies sequence partition exact search general partitioning word matching strings optimal partition approx 
grams grams full inversion partial inversion sequential search depth search pattern partitioning minimal redundancy traversal taxonomy indexes approximate string searching categories propose new algorithms highlighted 
current word oriented indexes solve problem classical line algorithm set words vocabulary obtaining set words retrieve :10.1.1.17.6054
rest may proceed approximate matching 
vocabulary sublinear size respect text achieve performance 
indexes capable retrieving occurrence sequence words 
cases exactly wanted 
problem complex words 
case example genetic databases dna proteins 
solutions case fall classes 
class algorithms searching complete pattern allowing errors way avoids repetitions text 
typically traverse suffix tree text text :10.1.1.9.8541
second class reduces problem exact matching substrings pattern uses index retrieves exact substrings 
third class takes pattern substrings reduce problem exact matching approximate search substrings necessary indexes 
number proposals reduce space requirements indexes 
different indexes involve different trade offs indexing time space overhead querying time tolerance errors 
example second class tend smaller indices low number errors 
focus powerful sequence oriented indexes solve simplification original problem 
presenting detail different indexing schemes give general concepts 
standard notation strings finite alphabet size oe 
call gram string length denote edit levenshtein distance strings minimal number insertions deletions substitutions needed transform denote word size computer commonly assumed log 
ff error ratio analysis assume uniformly distributed text 
approaches call partitioning lemma 
general form proved establishes string matches pattern partition pattern pieces piece appear string bk jc errors 
particular case reducing exact matching proved 
particular case appears 
word oriented indexes partial inversion plus sequential search proposal word oriented index due manber wu 
practical approach propose scheme modified inverted file sequential approximate search 
index structure follows text logically divided blocks 
index stores different words text 
word list blocks word appears kept 
search word allowing errors line approximate search algorithm case agrep run index words 
block matching word new sequential search performed block agrep 
idea blocks index small cost having traverse parts text sequentially 
index small pointers blocks small occurrences single block referenced 
glimpse uses blocks works moderate size texts 
larger texts possible point files blocks occurrences words 
typical figures size index respect text blocks files words 
glimpse algorithm software intended index medium size text collections 
small index size attractive choice 
works texts mb moderate error ratio 
experiment run dec mb text indexed minutes index took text 
queries answered seconds depending query 
baeza yates navarro propose alternative search technique index 
search pattern vocabulary especially suited short patterns words list matching words block obtained approximate search anymore 
multiple exact pattern matching algorithm search matching words text blocks 
experiments show algorithm times faster glimpse approximate word queries 
size blocks tuned meet different trade offs index space query time shown experimentally 
show analytically possible index type sublinear size search times simultaneously 
full inversion ara navarro ziviani take approach full inversion 
word list occurrences text kept text accessed 
search vocabulary second phase search changes completely matching words vocabulary identified lists merged 
phrases searched splitting words 
approach resistant size text collection shown text collections gb 
index built single pass text linear time 
construction proceeds place sense space requirement build index final index 
analysis shows assumption vocabulary size fi fi validated previous ones retrieval costs near useful searches reasonable precision 
space requirements index similar inverted lists applicable word compression scheme reduces space usage practice improves indexing search times 
experiments run sun sparcstation mb ram show indexing performance mb minute space overhead excluding words 
gb text collection searched single word queries nearly seconds 
pointers words glimpse large texts 
sequence oriented indexes avoiding text redundancies describe algorithms avoid repetition due text 
suffix tree device factor redundancies text 
minimal redundancy traversal technique simulating sequential algorithm running suffix tree text text 
different substring text represented single node suffix tree possible avoid repetitions occur text 
papers lines due jokinen ukkonen :10.1.1.9.8541
improved results 
algorithm fact state search point text influenced characters read 
call viable prefixes substrings prefixes approximate occurrence pattern 
algorithms traverse suffix tree different viable prefixes simulating dynamic programming algorithm 
suffix tree built linear time respect text size main memory 
improved version complexity search mq plus size output number distinct viable prefixes text 
worst case analysis shows min oe oe alphabet size 
small 
weak point scheme large space needed suffix trees 
important linear time construction practical suffix tree fit main memory 
suffix tree indexing character typically takes space bytes 
partially overcome compression technique proposed obtains index size nh log entropy text 
show experiments natural language space requirements bytes 
better insufficient index main memory medium size texts 
search time log log 
depth search tree different algorithm suffix trees due gonnet 
case search method simpler 
substring text potential occurrence starts root suffix tree sufficient explore path starting root descending branch seen branch represent occurrence pattern 
algorithm better minimal redundancy explores nodes 
simplicity suitable number enhancements 
example additional log query time factor run suffix arrays 
suffix array built log time fits main memory log size main memory 
takes bytes 
propose variation indexing scheme possible mentioned simplicity 
dynamic programming suffix tree 
line algorithm uses bit parallelism simulate automaton recognizes approximate pattern achieves linear time small patterns worst case 
pattern long automaton partitioned 
technique seen particular case general automaton searching trie 
case automaton nondeterministic converting deterministic practical tends generate large automata 
lack space include analysis technique extended version 
analysis shows limit ff number inspected nodes sublinear log oe ff 
gamma oe log oe ff 
log oe gamma ff gamma oe 
cost inspect node small patterns 
gamma general gamma 
original scheme cost inspect node 
partitioning exact search kind algorithms basically traditional index capable exact retrieval 
suitable integration information retrieval systems 
manage partition approximate problem smaller exact searching problems 
exact grams jokinen ukkonen observed approximate match errors ends position text gamma grams occur gamma 
gamma includes gamma grams kq get broken edit operations 
divide layers consecutive non overlapping blocks length gamma 
number pattern grams block counted 
block gamma pattern grams respective text area examined dynamic programming 
sutinen apply filtration condition strengthened fact preserved pattern gram move positions original position 
method previous block oriented scheme window oriented approach occurrence pattern gram marks corresponding window occurrence located 
sutinen tarhio give way utilize relative order preserved grams 
idea observing sequence samples non overlapping grams text fixed periods length supposing occurrence includes samples precondition implying gammak gammaq require samples may occur preserved samples occur approximately locations occurrence 
condition verified utilizing pattern blocks pattern divided slightly order overlapping blocks text scanning phase evaluates sequence samples blocks preserved grams 
indexing scheme main contribution saving space th sample text stored index 
sight result different index adjust formula index precomputed fixed applied 
index takes space log built time queried nm oe log time 
compression reduce index space lempel ziv related technique obtains log size query time penalty 
choice point blocks exact text positions sequential searching matching blocks 
implemented system called shown faster glimpse sequences words errors currently adapted handle approximate searching 
searching matching string technique proposed myers 
uses index sequence text length stored list positions text 
search pattern length gamma maximal strings edit distance pattern generated searched 
lists merged 
longer patterns split pieces required length 
partition proceeds binary fashion level pattern left split parts similar length 
partitioning lemma section shows parts searched bk errors provided occurrence piece verified complete match 
simply verifying substrings occurrences algorithm goes level level partition process obtaining occurrences level combining children level 
pattern long better simple verification substring 
length strings stored index small store computer integers 
allows build index time assuming fits main memory quickly practice 
strings short avoid explosive number generated search time 
space index mainly storing positions sequences text 
query complexity shown kn pow ff log average pow ff concave function ff satisfying pow 
sublinear pow ff restricts error ratios scheme efficient 
maximum useful ff increases alphabet size 
example formula shows ff max oe oe 
experiments confirm estimations show improvement various orders magnitude line algorithms 
optimal partitioning baeza yates navarro propose simple practical scheme partitioning lemma stated section case 
pattern split pieces piece searched errors index candidate verified complete occurrence 
line approximate search 
index stores text strings length 
length selected index large selectivity letters natural language 
longer pieces search pattern pruned 
natural language simple equal length partition may give bad results depending resulting pieces log dynamic programming algorithm select best partition 
defined minimizes total number text positions verify 
information required exactly predict number verifications available index 
useful give user early feedback precision time cost posed query 
possible reduce space requirements cost expensive querying times pointing blocks exact occurrences 
worked practice 
shown search time fi ff ln oe gamma fi ln ln 
index built linear time depending length sequences takes bytes 
shi studied possibility splitting pattern parts optimization 
verifications triggered search phase complex experimental results needed comment real performance improvement 
possible improvement verifications holds long patterns typical case text retrieval 
general partitioning include section algorithms intermediate approaches shown 
basically partition pattern point problem reduced exact matching 
result set subpatterns searched errors 
occurrences verified check complete matches 
describe previous algorithms kind propose new 
approximate grams filtration condition locating approximate matches pattern grams text 
leads filtration tolerating higher error ratio compared methods applying exact grams single error occurrence qualifies match gram 
filtration schemes utilizing approximate grams 
chang marr developed dynamic algorithm best match distances scanned text grams searched pattern 
algorithm scans consecutive non overlapping text grams maintains cumulative sum best match distances 
sufficient number grams scanned cumulative sum exceeding corresponding area checked accurate method 
sutinen tarhio apply best match distance stricter way 
addition scan th sample text 
depends number samples best match distances corresponding pattern blocks evaluated time gammak gammaq corresponding text area examined cumulative best match distance consecutive samples index grams ways case locate samples close pattern grams exclusively find samples sufficient distance original pattern 
filtration cumulative resemblance text samples corresponding blocks goal inclusive approach find samples possible goal exclusive approach opposite 
query time complexity scheme nm log 
pattern partitioning new algorithm partitioning lemma section 
static variation line version 
divide pattern pieces piece searched simple automaton 
search suffix tree text pieces algorithm proposed section 
collect nodes verify text positions occurrence complete pattern 
shown gamma number verifications sublinear ff gamma oe ff ff gamma wff gamma ff practice means moderate error ratio near oe 
perform searches kind section analysis holds considering node visited times cost cost inspecting node gamma 
achieve search apart considerations section pose requirement total number verifications sublinear verifications required section 
require ff ff discussion pointed importance indexing schemes approximate text retrieval discussed techniques aware presenting theoretical analysis 
focus sequence oriented indexes word oriented ones solve simplification problem 
arranged approaches taxonomy proposed analyzed new indexing schemes 
comparing different approaches theoretical analysis difficult probably accurate aim final version complete extensive experimental comparison sequence oriented indexes 
comparison carried different kinds text databases random dna proteins natural language measure index construction times index space overhead query execution times tolerance errors maximum ff value scheme works 
data provide information compare different approaches practice find best option depending different circumstances 
ara navarro ziviani 
large text searching allowing errors 
technical report dept cs univ federal de minas brazil 
baeza yates 
text retrieval theory practice 
th ifip world computer congress volume pages 
elsevier science sep 
baeza yates gonnet 
fast text searching regular expressions automaton searching trie 
acm 
baeza yates navarro 
fast heuristic approximate string matching 
proc 
wsp pages 
carleton university press 
baeza yates navarro 
faster algorithm approximate string matching 
proc 
cpm pages 
baeza yates navarro 
practical indices approximate string matching 
technical report dept cs univ chile 
baeza yates navarro 
block addressing indices approximate text retrieval 
submitted publication 
baeza yates 
fast practical approximate pattern matching 
proc 
cpm pages 
lncs 
chang 
theoretical empirical comparisons approximate string matching algorithms 
proc 
cpm pages 
lncs 
chang marr 
approximate string matching local similarity 
proc 
cpm pages 

fast approximate matching suffix trees 
proc 
cpm pages 
galil park 
improved algorithm approximate string matching 
siam computing 
gonnet 
tutorial computational biochemistry darwin 
technical report informatik switzerland 
dfs suffix tree 
gonnet baeza yates snider 
information retrieval data structures algorithms chapter new indices text pat trees pat arrays pages 
prentice hall 
heaps 
information retrieval computational theoretical aspects 
academic press ny 
sutinen 
approximate string matching gram places 
proc 
th finnish symposium computer science pages 
univ 
jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
mfcs volume pages 
sutinen 
lempel ziv index grams 
proc 
esa pages 
lncs 
ukkonen 
lempel ziv parsing sublinear size index structures string matching 
proc 
wsp pages 
carleton university press 
kim shawe taylor 
approximate string matching algorithm 
theoretical computer science 
knuth 
art computer programming volume sorting searching 
addison wesley 
landau vishkin 
fast string matching differences 
computer systems science 
sutinen tarhio 
experiments block indexing 
proc 
wsp pages 
carleton university press 
manber myers 
suffix arrays new method line string searches 
acm siam symposium discrete algorithms pages 
manber wu 
glimpse tool search entire file systems 
technical report dept cs univ arizona oct 
mccreight 
space economical suffix tree construction algorithm 
acm apr 
moura navarro ziviani 
indexing compressed text 
technical report dept cs univ federal de minas brazil 
myers 
sublinear algorithm approximate keyword searching 
algorithmica oct nov 
navarro 
approximate string matching counting 
submitted publication 
needleman wunsch 
general method applicable search similarities amino acid sequences proteins 
molecular biology 
sellers 
theory computation evolutionary distances pattern recognition 
algorithms 
shi 
fast approximate string matching blocks sequences 
proc 
wsp pages 
sutinen tarhio 
gram locations approximate string matching 
proc 
esa 
lncs 
sutinen tarhio 
filtration samples approximate string matching 
proc 
cpm pages 
tarhio ukkonen 
approximate boyer moore string matching 
siam journal computing 
ukkonen 
finding approximate patterns strings 
algorithms 
ukkonen 
approximate string matching grams maximal matches 
theoretical computer science 
ukkonen 
approximate string matching suffix trees 
proc 
cpm pages 
ukkonen 
constructing suffix trees line linear time 
algorithmica sep 
witten moffat bell 
managing gigabytes 
van nostrand reinhold new york 
wright 
approximate string matching word parallelism 
software practice experience apr 
wu manber 
agrep fast approximate pattern matching tool 
proc 
usenix pages 
wu manber 
fast text searching allowing errors 
cacm 
wu manber myers 
sub quadratic algorithm approximate limited expression matching 
algorithmica 
