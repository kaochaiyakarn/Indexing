notes simply typed lambda calculus peter aczel manchester university june contents deduction inference systems 
definition 
adding extra axioms 
semantics inference systems 
formal systems 
rules inference 
intuitionistic implication 
hilbert style formal system 
natural deduction 
sequent formulation nd natural deduction 
normal nd tree proofs 
sequent calculus sc 
intuitionistic propositional logic 
hilbert style formulation 
natural deduction formulation 
sequent formulation natural deduction 
sequent calculus formulation 
untyped lambda calculus preliminaries 
notion function 
examples functions 
functions sets 
multi argument functions 
currying 
problem variable clashes 
untyped universe 
combinators 
laws lc 
problems 
general universe 
syntax lc 
terms 
construction trees 
de bruijn terms 
notes simply typed lambda calculus peter aczel substitution 
deduction 
combinatory logic 
cl translation 
translation cl 
converse proposition 
equivalence cl ext fij 
equivalence cl fi 
summary 
church rosser theorem 
reduction relation 
proof theorem fi 
normalisation 
simply typed lambda calculus simple type theory stt 
variant stt 
standard set theoretical models stt 
standard term models stt 
normal relation method stt 
girard method 
method strong normalisation 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel simply typed lambda calculus notes types built atomic types function type operation forms new type types calculus viewed refined version purely implicational fragment intuitionistic logic 
refinement consists terms untyped lambda calculus represent formal derivations logic 
notes consist sections simply typed lambda calculus 
section focus mainly curry style version function types call stt consists rules typing terms untyped lambda calculus 
middle section untyped lambda calculus section mainly standard styles inference system intuitionistic implicational logic hilbert style natural deduction style sequent calculus style 
notes earlier notes part sc 
course type theory gave manchester university spring 
notes available working material lectures constructive type theory gave summer school 
lectures aimed give presentation ideas martin lof type theory meaning explanations justify rules inference 
topic suggest may 
summer school dissatisfied approach taken time approach satisfied 
agreement editors prepared notes proceedings 
main purpose notes act tutorial topics treats relationships 
novice reader advised read notes conjunction thorough text detailed discussions lists available 
material organisation fairly standard expert find little new 
distinctive features presentation 

introduce precise notion inference system notes 

untyped lambda calculus motivated set theoretically postulating infinite set equal set unary functions course impossible classical axiomatic set theory 
believe consistent intuitionistic set theory non founded sets allowed reasoning set unreasonable motivational purposes 

method proof introduced prove church rosser theorem 

set general framework giving normalisation strong normalisation proofs 
worthwhile proofs explicit implicit literature 
type theories normalisation proofs doubt come think efforts normalisation proofs simplest type theory useful 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel deduction inference systems definition inference system consists ffl set statements ffl set steps delta delta delta sn premisses sn statements 
axiom 
inference system tree proof upward growing finite tree labelled statements node labelled statement step premisses label children node 
tree proof tree proof statement labels root tree 
tree proof inference system sigma theorem sigma written sigma just sigma understood context 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel exercises 
show theorems inference system form smallest set statements step premisses 

show set tree proofs inference system form smallest set finite trees labelled statements step delta delta delta sn trees roots labelled sn respectively tree finite tree root labelled trees immediate subtrees 

linear proofs inference system linear proof statement finite sequence sm statements sm step delta delta delta show statement theorem inference system iff linear proof 
adding extra axioms sn statements inference system sigma write sigma sn inference system obtained sigma adding new axioms sn new steps sn sigma understood just write sn sigma sn semantics inference systems inference system semantics 
purposes take semantics inference system collection interpretations specifying correct true statements interpretation 
write correct statement interpretation sound step premisses correct 
semantics sound interpretation sound 
semantics inference system write sn interpretation sn correct statement correct 
semantics complete sn implies sn marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel weakly complete implies note formulate notion strong completeness defining possibly infinite set statements 
exercise show semantics sound sn implies sn formal systems formal system inference system data type holds 
ffl statement represented value ffl algorithm determine value represents statement 
ffl algorithm determine pair values represent statement 
ffl algorithm determine configuration delta delta delta values represents step inference system 
note facts ffl formal system algorithm determine finite tree values data type represents proof tree 
ffl sigma formal system sigma sn rules inference usually steps inference sytem rules rule determining set steps called instances rule 
rule schematically scheme configuration delta delta delta expressions involving metavariables substituted 
instances rule obtained suitably substituting metavariables 
meant suitable substitution specified implicit explicit side condition scheme 
axiom scheme special case schematically rule instances steps having premisses instance axiom 
formal system finitely schematic rules having syntactically specified matching algorithm deciding configuration data values instance rule obtained scheme suitable substitution metavariables 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel intuitionistic implication assume set atomic formulae 
formulae generated atomic formulae rule rule formulae 
abbreviation conventions 
leave outermost parentheses 

associate right 
example abbreviates 

hilbert style formal system describe formal system statements formulae defined 
axiom schemes rule inference mp modus ponens axiom schemes 


mp axiom scheme represents infinitely instances pair formulae formula instance ax 
tree proof formula 

mp mp note conventions tree proof readable 
leaf name axiom scheme instance application mp named 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel linear proof formula linear proof consisting numbered formulae 

mp mp note obvious conventions right hand side line justify line 
note tree proof linear proof schematic apply uniformly formula exercise deduction theorem show standard result proof method textbooks logic 
natural deduction natural way prove implication assume try deduce making assumption needed 
successfully deduced infer notice assumed trying deduce assumption dropped inference step get kind inference step involves discharge assumption new idea part apparatus inference systems far 
convenient way modify notion tree proof allow discharge assumptions 
inference system sigma tree proof assumptions sn simply tree proof inference system sigma sn leaves tree assumptions sn may appear axioms sigma 
natural deduction tree proofs allow possibility discharging assumption inference step 
labelling occurrences assumption discharged time labelling inference step discharge happens label 
course label different examples assumption discharge tree 
describe rules constructing nd tree proofs intuitionistic implication 
rule implication abbreviated 
states nd tree proof formula form nd tree proof having root having tree immediate subtree 
undischarged occurrences assumption discharged new tree 
elimination rule implication abbreviated 
simply familiar modus ponens rule called mp 
rules written schematically follows 

note 
assumption placed square brackets indicate may assumed proof discharged inference step 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel examples nd tree proofs give nd tree proofs axioms hilbert style formal system intuitionistic implication 









note convention labelling discharged assumption natural number labels step assumption gets discharged 
examples nd linear proofs linear nd proofs obvious conventions indicate assumption gets discharged 
ass ass 

ass ass ass 






proofs 
ass 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel sequent formulation nd natural deduction formulation natural deduction special kind tree proof replaced sequents statements formal system having standard hilbert style rules inference 
sequent form gamma gamma finite sequence formulae formula 
note literature symbols 
symbols ways leading ambiguity 
formal system specified axiom scheme ass rules inference 


ass gamma gamma 
gamma gamma 
gamma gamma gamma write gamma gamma theorem formal system nd gamma theorem gamma iff nd tree proof undischarged assumptions gamma 
write gamma gamma hilbert style inference system implication axiom schemes rule mp 
theorem gamma iff gamma result exercise expresses structural rules weakening contraction permutation admissible rules nd 
exercise show formula gamma occurs gamma gamma implies gamma nd normal nd tree proofs redex nd tree proof occurrence instance rule 
left hand premiss instance rule 
part tree form 



nd tree proof normal contains redex 
note redex detour natural consider simplifying redex replacing contractum marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel nd tree proof obtained nd tree proof appearing redex replacing occurrences assumption gets discharged premiss redex nd tree proof occuring second premiss redex 
result may pictured 

theorem gamma nd normal nd tree proof undischarged assumptions gamma 
proof idea nd tree proof normal choose redex replace contractum 
repeatedly redexes remain 
obvious procedure eventually terminates successfully 
turns redexes contracted chosen procedure terminate 
strong normalisation property natural deduction 
fact turns easier show particular systematic strategy choosing redexes leads termination 
weak normalisation property 
return complete proof discuss simply typed lambda calculus 
sequent calculus sc formal system uses sequents statements nd slightly different rules 
structural rule gamma gamma side condition formulae appear gamma gamma effect having rule order assumptions appear sequence gamma number times formula appears sequence gamma treated set assumptions 
remaining rules ass gamma gamma 
gamma gamma 
gamma gamma gamma cut gamma gamma gamma write gamma sc sc gamma theorem gamma sc iff gamma 
sc gamma sc cut rule left 
theorem gamma sc gamma sc gamma marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel cut elimination theorem sequent calculus 
called gentzen 
gentzen gave algorithm systematically removing cuts tree proof sc 
theorems suffices show normal nd tree proof undischarged assumptions gamma gamma sc gamma hard induction size normal nd tree proof 
note natural deduction sequent calculus closely related approaches deduction normalisation nd tree proofs corresponds cut elimination 
prefer focus natural deduction approach 
exercise prove theorems theorem proof theorem 
intuitionistic propositional logic section extend purely implicational logic previous section adding logical constants intuitionistic propositional logic add binary connectives conjunction disjunction special constant absurdity 
propositional constants negation defined standard way 
non atomic formula forms definitions hilbert style formulation keep axiom schemes rule inference implication add axiom schemes ax 
ax ax ax 
ax 
ax 

ax 
natural deduction formulation give schemes new forms nd tree proofs 

marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel note involves discharge assumption occurrences nd second third premisses 
notion normal nd tree proof extends full intuitionistic propositional logic add new forms redex 











respectively 
definitions theorem section methods proof carry full intuitionistic propositional logic 
sequent formulation natural deduction give new rules inference sequent formulation 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
gamma gamma marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel sequent calculus formulation gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
gamma exercise extend proofs theorems section full intuitionistic propositional logic 
untyped lambda calculus preliminaries notion function sets 
usual write function rule function application functions treated extensionally functions equal value argument function defined definition form delta delta delta delta delta delta delta delta delta delta delta delta expression involving variable denotes value set assigned value set convenient write delta delta delta delta delta delta unique function defining equation 
rule function abstraction delta delta delta delta delta delta delta delta delta delta delta delta marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel examples functions sets 
identity unique function defined constant unique function defined composition ffi ffi unique function defined ffi functions sets sets 
cartesian product theta set ordered pairs rule theta graph set pairs set subset theta conversely subset theta satisfies condition define function defining equation unique axiomatic set theory functions identified graphs 
multi argument functions sets 
cartesian product theta delta delta delta theta set ordered tuples theta delta delta delta theta rule delta delta delta delta delta delta expression value variables xn may occur delta delta delta assigned values respectively xn theta delta delta delta theta delta delta delta unique function theta delta delta delta theta defining equation xn delta delta delta marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel currying sets 
write set functions theta call curried version term named american logician haskell curry main developer combinatory logic 
name functional programming language haskell 
function process called uncurrying theta problem variable clashes set theta curried version defining equation function defined generally quite different function defined 
variable occurs free left hand side occurs bound lambda expression right hand side constant function 
expand right hand side get wrong 
get moral making textual substitution suitably relabel bound variables avoid variable clashes 
problem variable clashes familiar feature quantifiers predicate calculus 
untyped universe untyped lambda calculus lc calculus functions sense apply 
motivate lc postulate non trivial set element universe functions 
write delta usually just ab result applying function abbreviations ab delta delta delta delta delta delta ab delta delta delta delta delta delta delta delta delta delta delta delta xn delta delta delta delta delta delta xn delta delta delta marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel note delta delta delta xn xn xn xn ax delta delta delta xn xn ax delta delta delta xn call curried version combinators ia xy kab xyz yz bc xyz acb xyz xz yz ac bc expressions examples combinators 
definitions defining equations arbitrary elements equations connecting combinators 
example results 
proposition 
proof observe kx kx unique element ix follows proposition bbs kk 
proof observe bbs kk xyz yz sx yz sx sx ky xz xyz get result 
combinatory logic cl concerned combinators equations involving 
laws lc fi delta delta delta delta delta delta delta delta delta delta delta delta ax ext ax bx exercise cb sii 
dd 
show ac 
show call fixed point call fixed point combinator 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel problems standard axiomatic set theory zfc inconsistent non trivial set probably relatively consistent variant zfc uses intuitionistic logic logic drops foundation axiom 
give proofs inconsistency 
contradiction zfc suppose 
ffag fa fag contradicting foundation axiom 
second contradiction zfc proof uses cardinal numbers 
cardinality cantor theorem contradicting note reasoning proof constructive 
closer examination cardinality argument second proof show second proof constructive 
general universe time assume non trivial set functions ffi identity function define ab fi weak versions ext 
fg wj ax 
ax bx get ext bijection inverse syntax lc terms assume set const constants infinite set var variables 
terms lc built constants variables application lambda abstraction 
terms bnf style grammar mm constants variables 
alternatively set terms defined rules 

constant term variable term 

terms 

variable term term 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel notational conventions ffl leave outermost parentheses terms 
ffl mm delta delta delta mn abbreviates delta delta delta mm delta delta delta ffl delta delta delta xn abbreviates delta delta delta delta delta delta 
example xy ax abbreviates ax bx construction trees term constructed unique way rules associated construction tree 
example term ax bx tree ffl ffl ffl ffl ffl ffl note indicates explicitly root downward growing tree 
leaf labelled variable constant 
variable leaf bound node path leaf root tree 
leaf free 
leaf bound node path leaf root called binder leaf 
formal purpose bound variables specify binders bound leaf nodes 
construction trees bound variables may construction graphs pointer bound leaf nodes binder 
occurrences bound variables removed 
example previous tree graph 
ffl ffl ffl ffl ffl ffl ffl ffl ffl construction graph ax bx 
example construction graph xy 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel ffl ffl ffl ffl ffl ffl terms xz xv construction graph 
terms said ff convertible 
example construction graph pair ff convertible terms 
ffl ffl ffl ffl ffl ffl ffl ffl 
xz xy 
wz wx term obtained term simultaneously relabelling give alternative notations graph 
bourbaki de bruijn dual de bruijn de bruijn index bound leaf construction tree number nodes occuring path leaf including binder leaf node 
dual de bruijn index number nodes path including binder root 
dual de bruijn term associated term obtained replacing variable occuring bound leaf dual de bruijn index leaf erasing variable binder 
de bruijn terms define de bruijn pre terms bnf style grammar equation mm delta delta delta variable pre term pre term obtained simultaneously making replacements 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel example 
note preferring take dual de bruijn approach 
set de bruijn terms defined set pre terms inductively defined rules earlier define terms lc lambda abstraction rule understood sense just explained 
thing bound variable de bruijn term notation refer 
numerical indices 
de bruijn terms 
pre term var set variables occur xg result replacing occurrences proposition xg var 
proposition de bruijn term var unique term substitution variable term function 
terms terms unique function var fyg proposition function 
defined 
note literal substitution indices get shifted construction tree lemma substitution lemma var 
proof induction structure deduction fi calculus formal system statements equations terms having axiom schemes rules inference 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel fi calculus just fi calculus rule left 
fij calculus obtained fi calculus adding axiom scheme mx provided var 
consider rule 
ext mx nx provided var var 
weak versions wj ext required form terms form consistency problem show terms theorem fij 
see section 
exercises 
show fij ext sides theorems 

show fi wj fi 

xx xx show term 
terms section show fi show 
combinatory logic roughly combinatory logic approach ideas lambda calculus avoids lambda abstraction bound variables 
means substitution understood literally 
syntax combinatory logic grammar mm lambda abstraction special symbols turns formal system cl combinatory logic defined define simulation lambda abstraction translated cl main axioms cl defining equations easy translation cl formal systems closely related 
translations exactly inverses 
really conservative extension subsystem equivalent cl rule ext sense combinatory logic show cl ext equivalent fij 
define combinatory logic weakening ext show cl equivalent fi 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel cl translation formal system cl consists axiom scheme rules section equations terms combinatory logic axiom schemes kmn ml nl arbitrary combinatory logic terms 
call terms cl terms contrast terms lambda calculus call lc terms 
translation 
mlc cl terms lc terms defined structural recursion equations lc xy slc xyz xz yz mn lc straightforward prove result 
proposition cl mlc nlc translation cl order give translation need simulate lambda abstraction cl variable define operation 
cl terms structural recursion equations 
km var mn var mn lemma cl terms cl translation 
mcl lc terms cl terms structural recursion equations cl mn cl cl mcl proposition cl mcl ncl converse proposition seen translations ways cl 
extensionality added formal systems translations carry inverses suitable sense showing cl ext equivalent ext 
fij 
translations cl quite inverses 
variant show proposition strengthened 
variant definition equation mx var third equation previous definition equation apply 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel exercise show variant definition defining 
mcl ae cl slc cl mlc cl cl terms note syntactic identities equalities proved cl proposition cl mlc nlc cl terms proof note proposition holds variant definition mlc nlc cl mlc cl nlc cl exercise cl exercise show replaced proposition proposition 
equivalence cl ext fij proposition 
cl ext fij mlc nlc 
fij cl ext mcl ncl 
cl ext mlc cl cl term 
fij mcl lc lc term 
replaced 
equivalence cl fi combinatory logic rule weakening rule ext requires functional sense definition 
definition cl term functional forms km sm observe original definition cl term functional mcl functional term lc term form 
note observation variant definition exercise show functional cl term lc term form fi mcl proposition results proposition hold ext replaced fij replaced fi 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel summary main relationships combinatory logics lambda calculi summarised diagram 
cl cl cl ext fi fij church rosser theorem aim section prove church rosser theorem lambda calculus fi 
proved calculus fij 
result calculus immediate consequence calculus consistent 
consistency equational calculus mean property equations proved equivalently distinct variables equation proved 
reduction relation redex fi term form contractum term 
fi redexes 
fij redexes terms form mx var having contractum redex write contractum 
exercise show contr proved rules 

contr redex 
contr ffl contr ffl ml contr lm contr lm term lemma useful 
lemma term variable 
redex proof redex 
proposition may assume variables distinct redex 
substitution lemma marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel calculus terms write contracts abbreviated contr obtained replacing occurrence redex contractum 
write reduces abbreviated red obtained sequence zero contractions contr delta delta delta contr reduction relation red terms reflexive transitive closure contraction relation contr 
state theorem 
theorem church rosser fi fij red red term red red note call relation set confluent xry xry abbreviates xry abbreviates 
church rosser theorem states reduction relation confluent calculi 
exercise relation set relation show confluent iff equivalence relation 
church rosser theorem show calculi red show calculus consistent 
proof theorem fi define relation terms show contr ii red iii confluent 
deduce theorem properties way 
red means sequences zero contractions contr delta delta delta contr contr delta delta delta contr delta delta delta delta delta delta repeated iii fill rectangle working top left hand corner bottom right hand corner 
delta delta delta delta delta delta 
delta delta delta delta delta delta marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel way eventually get term delta delta delta delta delta delta ii transitivity red get red remains define relation prove ii iii 
definition define recursion structure cases depending form redexes immediate definition lemma 
lemma 


redex exercises 
show term redex prove previous lemma 

prove ii induction structure proof iii need result 
lemma 
proof proposition may assume 
induction hypothesis ii 

marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel ii redexes induction hypothesis ii lemma xi corollary redex redex proof iii show confluent 
consequence lemma uses definition 
lemma done 
definition define term recursion structure cases 
ae redex redex note equation redex 
lemma proof induction structure cases 
induction hypothesis ii 

ii redexes marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel induction hypothesis redex remains consider case redex 
redex redex ii case xi normalisation definitions section apply calculi fi fij 
term normal subterm redex 
red normal call normal form term weakly normalisable normal form strongly normalisable contraction path contr contr delta delta delta finite 
examples trivially normal terms normalisable strongly normalisable 
examples normal terms xy xyz xz yz omega xx note omega omega omega normal 
fact omega contr omega omega normalisable strongly normalisable 
note kk omega normal normalisable contr contrast term strongly normalisable 
exercises 
show term normal fi calculus iff form delta delta delta xn delta delta delta xn variables constant variable normal terms 
happens fij calculus 

show normalisable term unique normal form 

show strongly normalisable term normalisable 

show strongly normalisable set contraction paths contr contr delta delta delta finite 
hint konig lemma 
show calculi decidable equation normalisable terms provable 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel simply typed lambda calculus simple type theory stt assume set atomic types generate types atomic types rule types typing judgments form term untyped lambda calculus type 
particular variable declaration typing judgment form variable 
sequence xn zero variable declarations non repeating list xn variables called context 
type theory stt formal system statements form gamma gamma context typing judgment 
axioms rules stt schemes 
ass gamma gamma appl gamma gamma gamma mn abstr gamma gamma marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel exercises 
exercise identify atomic formulae intuitionistic implicational logic atomic types stt infinite non repeating list variables 
show xn stt show sequents correspondence nd tree proofs pairs consisting term stt tree proof sequent xn 
gamma context xn prove results 
gamma stt var fx xn 
gamma context includes variable declaration gamma gamma stt gamma stt delta stt gamma stt delta stt nn xn red gamma stt gamma stt variant stt terms stt untyped terms lambda abstractions include typing variable bound form type 
rules stt just rules stt rule abstr replaced rule 
abstr gamma gamma exercises 
term stt gamma untyped term obtained erasing abstraction subterm show gamma stt gamma gamma stt 
show type gamma stt unique unique tree proof stt gamma result second exercise may write type gamma unique type gamma stt exists 
note gamma context xn terms stt gamma stt correspondence nd tree proofs terms viewed formal expressions represent corresponding nd tree proofs 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel standard set theoretical models stt assignment set atomic type may define standard set theoretical model stt way 
define type structural recursion equation sets set functions gamma context xn gamma theta delta delta delta theta structural recursion gamma stt may assign function gamma gamma equations gamma 
gamma mn gamma gamma gamma gamma gamma equation right hand side function gamma note easy formulate notion set theoretical model type theory stt standard term models stt notion standard term model stt useful tool describing variety constructions proving stt term set various sets set normalisable terms set sn strongly normalisable terms 
call untyped term stt term gamma stt context gamma type section introduce useful notion term model stt set untyped terms 
subsets definitions 
fm mn fx definition standard term model stt assignment subset type types model xn nn xn nn 
theorem soundness standard term model stt gamma stt gamma marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel proof straightforward induction size stt tree proof gamma base case axioms ass trivial 
induction step rule appl uses induction step rule abstr uses care needed relabel variable instance rule gamma gamma induction hypothesis gamma gamma context xn means nn nn xn rewrite nn xn provided fresh variable distinct xn occurring nn 
get observe nn xn follows nn nn xn gamma required 
xi definition non empty collection sets terms defined stt collection binary operation call implication operation call stt collection variable rich variable set theorem set terms variable rich stt collection subsets stt term proof variable rich stt collection subsets choose may define standard term model stt follows 
recursively define types letting atomic type letting stt term context gamma type gamma stt previous theorem gamma gamma context xn xn xi marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel normal relation method stt define notion regular set terms notion normal relation set terms prove result regular set normal relation define simple variable rich stt collection subsets stt term apply result sets sn way cover variety constructions give normalisation proofs stt set terms set terms form xn delta delta delta ar observe 
define regular set mx var exercise show set normalisable terms set sn strongly normalisable terms regular 
lemma regular set proof regular set 
observe choose variable var 
mx regular 
binary operation sets terms antimonotone argument monotone second xi set terms 
relation terms defined invariant mrm mn note reduction relation red invariant 
lemma sets terms 
invariant relation closed closed 
proof invariant relation closed 
mrm show 
mn invariant mn closed 
xi call redex redex rs relation terms rs relation terms closed mrm lemma sets terms rx closed 
marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel proof rx closed 
redex required 
xi call relation terms normal set terms conditions hold 

rs 
invariant 
closed 
call stt collection simple follows mmax defines implication operation maximum possible 
theorem regular set having normal relation collection cr fx closed sg simple variable rich stt collection subsets proof closed cr cr non empty 
cr mmax 
lemma mmax invariant lemma mmax closed closed 
mmax cr 
rx rs rx closed lemma mmax cr simple stt collection 
variable rich ar cr 
xi note possible implication operation cr set terms smallest closed set includes set terms path mrm rm delta delta delta rm 
corollary regular set normal relation stt term relation terms may form smallest invariant relation includes fact consists pairs mn delta delta delta delta delta delta mrm 
exercises regular set show 
normal relation rs smallest normal relation 

normal relation rs closed 

normal relation regular subset closed normal relation marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel theorem 
red normal relation regular set 
rn normal relation 
rsn normal relation regular set sn sn applying corollary result get constructions give normalisation theorem stt giving stronger result strong normalisation 
exercise left redex non normal term redex starts furthest left redexes 
left contraction contraction left redex 
left reduction sequence left contractions 
ln set terms having left reduction normal form 
show ln regular normal relation 
girard method girard candidate de method proving strong normalisation involves slightly different simple variable rich stt collection subsets sn form cr sn previous section 
leave details exercises 
definition define set terms cr set conditions hold 
cr sn cr contr cr form contr cr fx cr 
exercises 
sn cr 
cr simple variable rich stt collection subsets sn 
rsn cr cr sn 
method strong normalisation describe method proving strong normalisation stt terms uses stt collection sets variable free terms 
set variable free terms set terms theorem set terms stt collection subsets stt term marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel theorem set terms terms normal relation fx non empty closed stt collection subsets proof define implication operation collection apply result 
lemma 

exercise show sn normal relation sn sn exercise sn normal relation sn set satisfying theorem stt collection subsets sn stt collection subsets sn theorem sn sn stt term sn marktoberdorf summer school proceedings notes simply typed lambda calculus peter aczel barendregt lambda calculus north holland publishing amsterdam 
nd edition 
gallier girard de logic computer science ed 
odifreddi vol 
apic studies data processing pp 
academic press 
gallier constructive logics part tutorial proof systems typed calculi theoretical computer science 
girard lafont taylor proofs types cambridge tracts theoretical computer science cambridge university press 
lambek scott higher order categorical logic cambridge studies advanced mathematics cambridge university press 
martin lof intuitionistic type theory bibliopolis napoli 
nordstrom petersson smith programming martin lof type theory monographs computer science oxford university press 
nordstrom petersson smith martin lof type theory 
chapter handbook logic computer science written appear 
available ftp ftp ftp cs chalmers se pub papers smith ps gz takahashi parallel reductions calculus information computation 
troelstra schwichtenberg basic proof theory cambridge tracts theoretical computer science cambridge university press 
marktoberdorf summer school proceedings 
