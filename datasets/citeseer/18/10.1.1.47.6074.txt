relevant 
relevant undoing actions collaborative atul prakash michael software systems research laboratory department electrical engineering computer science university michigan ann arbor mi phone email eecs umich edu eecs umich edu ability undo operations standard feature single user interactive applications 
current collaborative applications allow users simultaneously shared document lack undo capabilities provide undo generally provide global undo change document undone allowing users individually reverse changes 
propose general framework undoing actions collaborative systems 
framework takes account possibility conflicts different users actions may prevent normal undo 
framework allows selection actions undo performed occurred appropriate criterion 
keywords undo collaboration groupware conflict analysis 
ability undo operations standard useful feature interactive single user applications 
instance availability undo facility editors invaluable users allowed invoke commands modify document complex ways remove lines contain string 
availability undo encourage users experiment acting safety net allowing users try different approaches solving problems backtracking 
unfortunately collaborative editors group applications built grove shredit lack undo capabilities 
provide undo generally provide global undo appeared proceedings fourth conference computer supported cooperative october pp 

change document undone allowing users individually reverse changes 
compared single user applications performing undo collaborative applications provides technical challenges areas choosing action undone determining undo occur resolving conflicts different users 
choosing action undo single user system usually easy simply choose action revert prior state document 
group environment may parallel streams activities different users undo needs selective 
parallel shared document going users expect undo actions globally actions belong users 
second correct operation chosen undone location undo action performed may different location action originally performed due effects users activity document 
users interleave portion document may sense undo user changes undoing users changes 
case dependencies changes need taken account undo 
rest organized follows 
section summarizes basic concepts conventional undo algorithms single user systems 
section describes related area 
section discusses approach extends undo capabilities particularly group environments 
section describes requirements application meet undo framework example text editing 
section describes selective undo algorithm 
section discusses variations selective undo may useful collaborative systems 
section summarizes 
basic concepts provide raw ingredients implementing undo history list needs maintained 
history list consists sequence operations carried far modify state document 
operations history list stored order performed 
instance history list starting state prior carrying operations sequence lead current state 
assume operations modify state document reversible operation determine inverse operation undo effect instance editor insert operation undone delete operation 
note general inverse operation may depend state document prior instance text document operation done deletes character position order determine inverse know character deleted 
assume operations stored history list contain sufficient data inverse easily determined 
instance operation stored history list deleted character 
related basic methods providing undo capability single user systems 
discuss 
detailed discussion techniques formalization undo redo facilities 
single step undo single step undo common macintosh windows applications editors vi 
allows undo operation 
instance history list single step undo allows undoing operation subsequent undo operation usually redo undo allowed implemented undo undo example redone 
linear undo model model interlisp system early systems provide undo linear undo model 
linear undo model allows undoing sequence operations keeps pointer tracks operation undone 
operations redone possibly doing new operations 
instance history list operations undone sequence new operation done redone giving history list pointer indicates operation undone operation redone 
note model undo operations explicitly stored history list 
wants back original sequence possible 
undo done manually 
undo skip redo model supports redo linear undo model allows skipping operations redo 
linear list model keeps tree data structure maintaining history possible restore state point history linear undo model 
example stored different branch tree sequence undone redone user desired 
limitation linear undo model model order undo operation steps back history subsequent operations undone redone skipping redo 
implementation careful potentially disruptive group environment users may see undone short apparent reason 
furthermore models address issue simply redoing operations may semantically sense may lead unexpected results earlier operation skipped 
history undo history undo scheme gnu emacs editor allows undoing sequence operations linear undo schemes appends undo operations history list 
undo operations history list treated operations allowing undone desired 
instance history list suppose undone 
history undo history list follows operation reverses effects breaks undo mode doing operation undo say history list point doing undo operations result history undo nice property possible go back previous state possibility conflicts arise single user applications operations skipped 
approach approach called selective undo 
approach history undo allow operations undone selectively deal explicitly location shifting conflicts 
experience history undo simple intuitive users 
desired techniques applied linear models 
data structures similar history undo particular undo inverse operation appended history list 
collaborative application operation done user may globally users may done operations subsequently need allow undoing particular user operation history list 
example consider history list refer operations done user refer operations done users suppose user wishes undo action normal history undo mechanisms single user systems support task require undoing 
model possible undo operations redo pointed previous section disconcerting users system may correct dependencies note user may aware operations carried document users users may aware activities user algorithms possible undo undoing redoing example operation undone selected identity user 
generally operation undo selected attribute region time 
term scheme selective undo operation undone necessarily selected attribute attached operation 
selectively undo operation simply execute inverse operation operations shifted location undo performed 
example suppose text operations applied starting state abcd followed resulting state 
operation inserted position second operation inserted position 
assume operations done different users 
user operation undo 
simply perform operation inverse second operation moved location 
scheme takes possibility location shifting account example operation undone executing 
take account possibility conflicts 
example may modified region document longer sense semantically undo undoing allow operation undone prior conflicting operations undone 
application requirements undo framework assumes application model changes document performed set primitive operations 
operations performed archived history list provide basis undo 
operations reversible capable re ordered conflicts operations exist 
applications maintain current state document edited 
state represented different data structures framework places restrictions representation 
primitive operations just operations means state document altered 
operation applied state results new state 
state simply result sequence zero operations applied starting state 
operations parameters specify exactly operation accomplish performed 
instance delete operation parameters indicate deleted 
letter denote state prior application operation 
ffi indicates operation applied 
example ffi ffi denotes state resulting application operation followed operation document state ffi denote compound operation applies applies sequences operations equivalent produce state 
equivalence represented example ffi ffi indicates sequences produce state operations sequence identical 
extensions history list implementing undo collaborative systems extensions needed basic history list described section 
order selectively undo particular user operation tag operation history identity user performed 
tags stored time reason operation 
selective undo algorithm allows tag choose operations undo 
conflict re ordering reversibility operations model requires application supply functions detect conflicts operations re order operations create inverse operations 
synchronous group environment similar functions usually needed anyway ensure predictable results parallel streams activities going 
instance users working simultaneously document conflict checking may involve making sure changes overlap locks 
mechanisms reordering parallel independent operations needed order operations done may unpredictable 
editor prepared accept operations order resulting effect 
functions application provide ffl inverse operation operation ffl conf operation operation boolean ffl operation operation operation operation assumed operations result functions primitive operations expressed terms primitive operations see section extensions needed multi operation undo 
allows operations result applying functions treated just operations history list 
inverse function explained section 
sections provide descriptions properties conflict transpose functions 
conflict conflict adjacent operations implies second operation depends meaningful having performed suppose example graphics document edited 
operation creates circle document operation circle 
case conflict operation done operation little sense 
conf function supplied application return rue exists conflict operations performed sequence alse conflict exists 
importance notion conflict operation undone conflicts operation operation undone 
transpose conflict exists operations require possible transpose 
making adjustments operations possible perform different order obtain result 
function nonconflicting operations return new operations satisfy properties transpose property performing ffi ffi give result executing ffi ffi irrespective initial valid state transpose property operation done document operation done property allows move operations history list guarantees resulting state 
property shows meaningfully undone leaving effects quite operation identical position data may different 
notion transpose similar described 
require transpose function defined operations conflict 
example document model applied text editing consider text editor supporting primitive operations ffl position char insert character specified position ffl position delete character specified position 
note model dictate actual data structure store document state 
current state represented linked list lines single array characters way 
application responsible correctly applying operations internal data structure represents correct state 
denote operations stored history list follows ffl position char ffl position char note character deleted stored history list part operation easily derive inverse 
operations happen inverses 
definitions conflict transpose sequence followed conf ae true false 
gamma undefined gamma definitions say conflict character deleted inserted 
operations considered independent 
notice change position argument transpose transpose properties satisfied 
leave reader determine conflict transpose definitions combinations operations 
complete definition functions general string insert delete operations 
example document model applied graphics editors assume commands stored history list graphical editor ffl radius draw circle position specified radius 
object identifier returned command stored history list permit easy reversal transpose 
ffl change radius circle 
stored inverse easy compute 
case conflict transpose functions straightforward ffl conflict operations conflict refer circle match 
ffl transpose transposing operations simply requires interchanging operations refer different circles transpose undefined 
note graphical operations text editors usually require parameter changes graphical operations usually absolute coordinates coordinates change position objects relative positioning desired different operations provided relative coordinates correctly transposed 
undo algorithms section presents versions undo algorithm limited selective undo demonstrate basic concepts followed full selective undo algorithm 
algorithms assume operation chosen undone 
methods selecting operation undo described section 
algorithms independent single centralized history list maintained users site possibly different equivalent history list editor state 
multiple history lists editor states communication protocol editors ensure editors eventually reach state operations done parallel various sites 

limited selective undo demonstrate principles undo technique describe limited version algorithm example 
algorithm works follows transpose function repeatedly shift operation undone reaches history list 
shifted due conflict way undone 
operation shifted simply execute inverse shifted operation undo 
shifting operation effectively determined undo performed 
example help demonstrate algorithm 
assume want undo history list suppose conflicts conf true undo fail 
conflict result iteration 
note history list need altered new iteration 
show entire list clarity 
conf true undo fail 
shift occur resulting 
shifted list performed giving history list see correct note ffi ffi equivalent ffi ffi transpose property find ffi ffi ffi ffi ffi ffi ffi performing original history gives result operation performed transpose property undo succeeded 
algorithm correct unable deal results prior undo operations 
example suppose history contains conflict conflicts user wanting undo undoes resulting history user attempts undo limited undo determines conflicts unable shift history 
undone able undo selective undo give selective undo algorithm limited prior undo operations 
algorithm similar limited algorithm section uses sophisticated conflict checking technique 
avoid prior undo limitation track operations undone 
placing pointer history list links operation corresponding undo operation 
undoing sequence history list appear follows note oval line beneath sequence indicates undo pointer omega psi undo algorithm works making copy history list operation undo onward 
operation undo shifted transpose reaches list 
shift check conflict exists operation 
conflict operation undone really conflict operation undo removed copied history list procedure 
subroutine operation undone shifts adjacent removes operations 
valid ffix identity operator 
conflict operation history undone undone 
case intervening called recursively eliminate history list 
example selective undo say history list point follows assume operations conflict conflicts 
operation undone history list follows operation results shifting past omega psi suppose operation undone 
algorithm copy onwards original list affected shifting operations 
conflict undo pointer called remove pair 
resulting temporary history list onwards follows 
assuming conflict shifted past giving operation 
operation shifted list successfully undone operation operation carried appended original history list appropriate undo pointers added giving desired result sigma pi ffi fl variations selective undo undo algorithms means provided user select operation wishes undo 
variations type record op operation field pairing undo proc undo temporary list node pointers operation copy history list onward shift forward removing paired undo operations op 
nil conflicts op 
nil return sorry 
conflicts endif transpose returns operations store nd transpose op endif endwhile perform executes operation appends history list returns pointer appended node perform inverse return undo successful endproc proc 
conflicts op op conflict undone removed transpose operations logically physically op op transpose op op endif endwhile operation adjacent undo remove list endproc selective undo algorithm operations undone selected 
determining appropriate variation subject research focus 
give interesting variations illustrate basic techniques 
individual history undo emacs style history undo described section minor modifications framework allowing user undo operations 
time user undo system searches backward history list operation tagged user identity located pointer history record stored user 
selective undo algorithm applied operation 
user immediately undo history search continues backward stored pointer 
user proceed back changes 
operation undo performed stored pointer deleted making undo operations appear normal operations undone 
undo algorithm fails due conflict simple conflict list generation algorithm locate conflicting operations belong users 
point interface inform user problem show undone 
choice canceling proceeding undo operations users 
regional undo useful criterion selecting undo operations region document 
example user may want undo changes changes 
region selection criterion slightly difficult user id timestamps operations performed historically region refer location region 
locate operation affects region start defining special region identifying operation define conflict operation performed place history list transpose shift backward 
transposed due conflict conflicting operation region undone 
note operation give region corresponds prior doing implement repeated undo region necessary transpose defined conflicts shifted past undone subsequent 
apparent anomaly problem update operation simply introduced identify region determine operations carried associated region 
multi operation actions situations arise application may wish treat group primitive operations single highlevel operation 
instance consider scenarios ffl user level action result numerous primitive operations bunch inserts 
users expect able undo high level operation entirety undo operation having undo primitive operations 
ffl undoing steps useful returning known previous state 
example user may wish revert chapter back way pm tuesday undo operations done chapter region timestamps pm tuesday assuming sufficient history appropriate tags kept 
multiple operation actions corresponding undo actions similar notion transactions databases 
primitive operations performed collectively conflicts reported handled 
instance suppose paragraph indented modified conflicts arise 
desirable allow partial undo effect hard understand 
multi operation undo implemented framework extensions 
history list needs extended keep sufficient information set operations constitute high level operation determined 

undoing high level operation primitive operations constitute high level operation need shifted undone single transaction 
conflicts arise shifting undo permitted undoing conflicts 

undo pointers need go corresponding operations high level 
framework group undo simple generally applicable variety documents 
techniques proposed presently implemented toolkit 
techniques context history undo aspects techniques notions transpose conflict applicable implementing undo linear models 
focus developing general framework group undo research needed determine appropriate interfaces supporting undo collaborative applications 
ellis gibbs concurrency control groupware systems proceedings acm sigmod conference management data seattle washington may acm press pp 

ellis gibbs rein design group editor 
engineering humancomputer interaction cockton ed northholland amsterdam pp 

ellis gibbs rein groupware issues experiences 
communications acm january 
prakash distributed toolkit supporting multiple group editors proceedings third conference computer supported cooperative los angeles california october pp 

olson shredit shared electronic workspace 
technical report university michigan ann arbor 
prakash 
undoing actions collaborative 
technical report cse tr computer science engineering division university michigan ann arbor march 
stallman gnu emacs manual 
teitelman interlisp manual xerox palo alto research center 
thimbleby user interface design 
acm press new york pp 

vitter new framework redoing 
ieee software october pp 

yang new conceptual model interactive user recovery command reuse facilities proc 
chi conference human factors computing systems washington may acm press pp 

