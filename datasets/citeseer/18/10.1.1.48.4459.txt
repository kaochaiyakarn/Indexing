register transfer paths code generation heterogeneous memory register architectures guido araujo sharad malik mike tien chien lee department electrical engineering fujitsu laboratories america princeton university san jose ca princeton nj lee fla fujitsu com ee princeton edu address problem code generation basic blocks heterogeneous memory register dsp processors 
propose new technique register transfer paths efficiently basic block dags directed acyclic graphs expression trees 
approach builds results report optimal code generation algorithm expression trees architectures 
technique implemented experimentally validated tms popular fixed point dsp processor 
results show code quality obtained proposed technique 
analysis type dags benchmark programs reveals majority basic blocks benchmark set expression trees leaf dags 
leads claim tree algorithms described technique choice basic block code generation heterogeneous architectures 
digital signal processors dsps heterogeneous register set architectures designed meet performance area constraints imposed data intensive applications signal processing communication domains 
order achieve goal designers choose implement set highly specialized functional units execute operations frequently required algorithms 
examples type units multiply accumulate units mac address calculation units acu 
common dsp designers dedicated interconnections specialized registers available functional units reduce cost design 
specialization functional units registers interconnection reflected processor instruction set architecture isa 
partially supported cnpq dept computer science unicamp brazil frequently isa dsps application specific instruction set processor asips dedicated instructions take operands store results specific registers opposed generic register files 
addresses problem generating code basic blocks heterogeneous register set architectures 
similar effective approaches problem proposed 
general combine pattern matching algorithms data routing dag tree scheduling techniques 
approaches exclusively trees explored received attention 
divided sections follows 
sec describes class target architectures considering machine representation register transfer graph rtg 
rtg structural representation datapath subsequently 
sec contains formal definition problem example illustrating relevance 
sec shows register transfer paths expression dags trees 
results applying approach typical digital signal processing algorithms sec 
sec list important 
architectural model proposes approach code generation problem basic blocks class dsps architectures 
dsp architectures identified class consider tms processor representative target architecture rest 
section describe machine representation 
initially machine instructions written functional notation operation patterns describe instructions processor isa 
description particularly useful code generation tree grammar parsing 
example consider example partial functional description tms isa fig 
symbol left side colon represents location datapath store result operation described right 
far right numbers parenthesis represent instruction identifiers mnemonics describe instruction implements operation 
storage plus add plus minus mul mul const const lack pac sacl lac lt partial description tms processor isa locations datapath represented lowercase letters accumulator product register memory store operands multiplier 
capital letters specify operations plus minus mul constants const 
uses representation architecture isa known register transfer graph rtg 
rtg structural representation datapath topology contains information instructions processor isa 
nodes rtg describe locations datapath registers register files memories 
memories register file nodes represented double circles order distinguish single register nodes 
edge nodes rtg defines path locations datapath 
labels edge correspond identifiers instructions isa take operand location store result location example rtg tms architecture fig easily derived partial isa description fig 
instruction identifiers fig label edge rtg 
example fig see accumulator incoming edges numbered 
edge originating node self loop edge node describe transfer operations required instruction plus 
tms rtg representation major problems code generation determine schedules minimize resource conflicts occur instruction needs datapath register contains valid data 
traditionally deals problem saving contents register location usually memory operation know memory spilling 
shown architectures belong memory register class generate expression trees spilling free schedules provided architectures satisfy certain criterion exclusively rtg 
criterion simple stated follows definition rtg criterion architecture satisfies rtg criterion exists memory node cycle self loop architecture rtg fig rtg criterion satisfied pair registers easy check fig tms architecture satisfies rtg criterion 
observe cycle pair nodes fig 
sections show rtg criterion task expression dag 
problem definition tasks generating code expression dag select best set instructions perform dag operations 
task known instructions selection subsumes problem dag covering known np complete 
practical solutions problem heuristics proposed divide dag component trees selecting appropriate set trees 
dag component trees unique ways done 
traditionally heuristic employed case homogeneous register architectures disconnect multiple fanout nodes dag 
order divide dag component trees able disconnect break edges dag 
code generation task breaking dag edge nodes fig requires allocation temporary storage say save result operation consumed operation storage location traditionally memory general place datapath 
breaking edge expression dag requires constraint raw read write edge introduced nodes order guarantee original ordering operations maintained scheduler 
edge represented dashed line fig 
sake simplicity marking edge breaking represented small line segment transverse subject edge shown fig 
heuristics dag code generation trees heterogeneous architectures received attention 
may largely fact optimality guaranteed trees architectures breaking dags trees considered probably generate extremely inefficient code 
optimal code generation algorithms expression trees proposed 
key idea heuristic uses architectural information rtg selection raw breaking edge simplified notation component trees dag resulting code quality improved 
consider example dag fig 
notice different approaches decompose dag component trees depending edge selected break 
see fig extra instruction corresponding overhead generated heuristic breaking edge coincidentally code fig best sequential code generate subject dag 
observe tms architectural description fig multiplication operation requests operands memory result addition operation produce result accumulator notice fig bring data register go carefully analyzing fig see lac lac add add sacl sacl lt lt add lac add breaking edge breaking edge result addition operation stored moved order operand multiplication operation 
move data go memory 
suppose memory position selected store temporary result breaking dag edge just assigning advance memory node appear edge instruction selection phase code generation 
notice existence register transfer path goes memory data moved property target datapath 
similarly register transfer path pass memory 
notice edge broken pattern plus instruction add match addition result accumulator case instruction lac bottom code fig issued order bring data back accumulator adding new instruction final code 
question ask point observations generalized 
see sections possible 
problem solution heuristic propose address problem just described divided phases 
phase sec partial register allocation done datapath operations clearly allocated code generation task performed dag 
second phase sec architectural information employed identify special edges dag broken introducing loss optimality subsequent tree mapping stages 
third phase sec edges marked disconnected dag 
component trees scheduled optimal code generated component tree 
partial register allocation general property heterogeneous register architectures result specific operations stored defined datapath locations 
take example operations add mul target processor tms 
notice implicitly define primary storage resources operation result 
case tms fig register allocation task required determine registers respectively store immediate result operations add mul 
partial allocation registers store result operations performed advance task breaking edges expression dag takes place 
expression dag partial register allocation performed natural edges identified natural edges saw sec edges specific properties originating target architecture allow disconnect dag compromising optimality subsequent code generation trees 
edges termed natural edges defined follows 
definition natural edges instruction selection matching edge produces sequence data transfer operations datapath pass memory edge referred natural edge 
expression dag target architecture satisfies rtg criterion shown number edge natural edges 
order state set simple lemmas 
pair registers datapath memory register architecture satisfies rtg criterion fig 
function maps nodes set datapath locations set registers datapath set memory positions 
natural natural self loop rtg lemma edge natural edge 
proof 
observe fig path registers traversed instruction selection performed edge 
memory operation selected instruction selection natural edge fig 
lemma edges natural edges self loop exists register node rtg representation target architecture fig 
proof 
architecture satisfies rtg criterion loop rtg self loop contain memory node 
register rtg loop starting contain memory node 
memory operation selected instruction selection performed edge 
natural edge 
notice task breaking natural edges introduce new operations dag name implies instruction selection phase memory operation naturally selected due constraints architecture datapath topology 
result potential optimality lost breaking natural edges 
example consider lemmas rtg tms fig 
lemma see edge natural edge 
consider lemma 
take situation looking rtg fig see register self loop 
tms satisfies rtg criterion dag edge natural edge 
consider case rtg see register contains self loop said regarding edges 
lemmas show dag edges interact natural edges defined 
introduce concept edges 
edges natural edge natural edge lemma op consider operation operand nodes fig 
partial register allocation operations jrj edges natural edge 
proof 
notice binary operation take operands simultaneously register 
consider situations node self loop architecture rtg edges 
matched instruction takes operand hand instruction matches edge 
register contained rtg loop self loop goes back similarly lemma matching introduce sequence transfer operations necessarily goes memory node rtg making natural edge 
self loop node exist architecture rtg edges natural edges lemma 
lemma op consider operation operand nodes fig 
partial register allocation nodes rtg paths pair nodes path go memory node natural edge 
proof 
proof trivial follows fact operation take operands register time paths rtg bring data register path go memory path pass memory corresponding edge natural edge 
lemmas see need decide edge disconnected dag 
different instruction selection costs result depending edge selected 
case call corresponding natural edges pseudo natural edges distinguish natural edges 
pseudo natural edges identified double line segment distinguish natural edges 
natural edges breaking pseudo natural edges result compromising optimality code generation component trees 
chance happen actual practice 
example consider lemmas rtg fig lemma satisfied case 
case path exists rtg go memory node 
edges pseudo natural edge 
rules examples applied expression dag fig results 
marked edge fig side number corresponding rule examples 
algorithm task expression dag may potentially introduce cyclic raw dependencies resulting tree components leading impossible schedule 
consider example paths nodes component trees fig 
dag fig requires edges multiple fanout nodes disconnected 
assume edges selected edges break 
case nodes tree collapsed single component tree breaking dag trees mentioned edge nodes broken raw edge introduced 
case resulting raw edges form cycle component trees results infeasible schedule component trees 
notice cyclic raw dependency constraining tree scheduler ble edge broken fig 
occur raw edge brought resulting component tree 
consequence potential optimality tree scheduler algorithm guaranteed anymore satisfy constraint imposed new raw edge inside situations analyzed conclude edges paths disconnected order guarantee proper scheduling operations inside component trees component trees 
algorithm dag disconnect edges natural edges possible 
designed algorithm call 
algorithm starts breaking natural edges breaking edges adds cost total cost final code 
proceeds paths 
traverses paths dag looking edges marked pseudo natural edges 
pseudo natural edge break existing path edge broken 
outgoing edge starts path corresponding multiple fanout node broken 
point paths expression dag disconnected 
additional edges broken node ends outgoing edge 
broken edges disconnected dag temporary memory nodes created raw edges introduced component trees 
resulting component trees rithm executed dag decomposed component trees fig 
component tree represented circle containing dag edges nodes 
broken edges natural pseudo natural edges identified dark circle mark 
topological ordering performed order schedule component trees 
point optimal code generated component tree individually technique proposed 
results tab list series expression dags extracted typical digital signal processing programs 
profiled sections kernel programs benchmark suite 
selected largest dag kernel purpose comparison hand written code 
hand written assembly compiled code generated dag resulting number cycles single loop execution reported tab 
compiled code generated standard heuristic dag breaking edges multiple fanout nodes column standard heuristic 
costs reflect number processor cycles overhead respect hand written code 
notice overhead due dag dag hand standard basic trees leaf full origin type written heuristic approach blocks dags dags instr 
instr 
overhead instr 
overhead real update complex update dot product matrix matrix iir convolution fir fir dim lms table experiments dags tree leaf dag full dag dag technique 
dags classified trees leaf dags full dags 
leaf dags dags leaf nodes multiple fanout edges 
classify dag full dag tree leaf dag 
see approach performs better standard heuristic cases full dags 
average overhead comparing compiled assembly code 
overhead dags high existence large number low overhead trees compensates 
leaf nodes way heuristics 
simply duplicated different nodes outgoing edge 
consequence heuristics performance case leaf dags 
notice average overhead case full dags higher case leaf dags 
discrepancy certainly due existence memory register immediate instructions processor isa zero cost multiple fanout operands memory constant values 
analysis source programs dags tab extracted showed large number common expressions simply program variables constants 
performed experiment kernel benchmark order determine type dags basic blocks typical digital signal processing programs 
see tab results revealed basic blocks analyzed trees leaf dags full dags 
experiment performed time application benchmark adpcm known speech encoding algorithm 
basic blocks analyzed determine frequency trees leaf dags dags 
case basic blocks program trees leaf dags full dags 
adpcm represents average mixture typical dsp programs weighted average overhead due smaller 
heuristics mentioned similar impact final code quality approach natural edges considerably improve code quality critical parts program loop body 
proposes tree heuristic code generation memory register architectures satisfy rtg criterion 
shows decomposing dags trees concept natural edges performing tree code generation effective approach type architecture 
fundamental reasons support claim summarized follows memory register architectures dag edges natural edges making memory spilling natural operation type target architecture experiments shown majority dags benchmark trees optimal code generation algorithm exist 
trevor paulin instruction set matching selection dsp asip code generation 
european design test conference pages 
marwedel 
tree mapping algorithms structures 
int conf 
computer aided design pages 
de man data routing paradigm efficient data path synthesis code generation 
high level synthesis symposium pages 
texas instruments digital signal processing applications tms family 
aho ganapathi tjiang 
code generation tree matching dynamic programming 
acm trans 
prog 
lang 
systems october 
araujo malik 
optimal code generation embedded memory non homogeneous register architectures 
proc 
th international symposium system synthesis pages september 
garey johnson 
computers intractability 
freeman new york 

dsp benchmarking methodology 
technical report aachen university august 
