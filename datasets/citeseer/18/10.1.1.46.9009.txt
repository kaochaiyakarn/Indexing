building interpreters composing monads guy steele jr thinking machines street cambridge massachusetts gls think com exhibit set functions coded haskell building blocks construct variety interpreters lisp languages 
building blocks joined merely functional composition 
building block contributes code support specific feature numbers continuations functions calls nondeterminism 
result composing number building blocks parser interpreter printer support exactly expression forms data types needed combined set features 
data structures organized pseudomonads generalization monads allows composition 
functional composition building blocks implies type composition relevant pseudomonads 
intent haskell type resolution system ought able deduce data types automatically 
unfortunately deficiency current haskell implementations related recursive data types circularity reflected statically type definitions 
circumvent restriction applying program simplifier performs partial evaluation certain amount program algebra 
construct wide variety interpreters style wadler starting building blocks page boilerplate code writing lines code specify building blocks redundantly specify type compositions applying simplifier 
resulting code acceptable haskell code 
tested dozen different interpreters various combinations features 
discuss code structuring strategy exhibit building blocks briefly describe partial evaluator number automatically generated interpreters 
preprint appear proceedings annual acm sigplan sigact symposium principles programming languages january 
really liked phil wadler monads :10.1.1.33.5381:10.1.1.100.9674
entirely satisfied methodology constructing new interpreters writing single interpreter plugging various monads 
necessary modify code interpreter necessary alter hand data structure definitions input expressions output values 
automated 
problem monads choose customer 
interpreter state interpreter continuations interpreter continuations state 
vision building blocks interchangeably combination build interpreters 
combined functional composition haskell type system extension ought able deduce relevant data types automatically 
done 
function definitions value haskell expression complete nondeterministic cbv interpreter fact complete nondeterministic call value interpreter interpreter parser printer 
similarly result complete cbn numbers interpreter complete call name numbers interpreter expression complete continuation nondeterministic cbv numbers interpreter produces complete continuation nondeterministic callby value numbers interpreter 
pseudomonads structure interpreter building blocks pseudomonads generalization monads permits infixl infixl 
type 
type 


type see text monad 



data monad monad unit monad 
unit monad bind monad 
bind monad monad monad 

data pseudomonad pseudomonad pseudomonad 
pseudomonad pb pseudomonad 
pseudomonad pb pb data bind bind 
bind bind bind bind 
bind bind 
monad unit 



haskell code supporting pseudomonads composition 
theory pseudomonads described companion 
support code taken verbatim 
order convey necessary type information convenient reify monads pseudomonads 
represent monad haskell algebraic datatype monad encapsulating unit bind operations monad 
note name monad type constructor data constructor convenient pun permitted haskell 
define generic unit bind operations 
wadler style speaks type type type constructor maps monad question object language merely conceptual triple unitm bindm 
style monad object type monad type monads map type type corresponds wadler type example declaration defines usual identity monad 
word syntax wadler haskell infix notation various monad binding operations writing bindm bindm generic bind operation takes arguments monad object function 
infix notation quite convenient particularly exhibiting associative law monads devised define haskell infix operators 

may write bind 
code 
pseudomonad slight generalization monad 
pseudomonad encapsulates operations called 
operation identical nature unit operation takes extra argument object function applied monad 
idea object type revealing object type may fed function function need produce result type may produce result type monad argument type monad specifying way take values type type motivation operation invoke function case needs way produce result type 
syntax generic operation takes arguments 
define infix operator may write 
syntax happens code figures definition 
short pseudomonad simply monad parameterized monad exactly manner wadler parameterized interpreter monad 
pseudomonads assumed proved obey laws analogous monads 
monad laws expressed unit bind form left unit unit 
right unit 
unit associative 





remember 
lower syntactic precedence function application 
analogous laws pseudomonads left unit unit 
right unit 
unit associative 





composition operator composes monad pseudomonad produce new monad 
monad obeys monad laws pseudomonad obeys pseudomonad laws composition necessarily obeys left unit right unit monad laws 
separate proof supplied resulting monad obeys monad associative law consistent experience moggi monads compose general 
note passing fact general theory argument operation pseudomonad monad 
composition operator combines pseudomonads produce third pseudomonad pb pa pseudomonad mb pa pz 
pz pb 

pz pb pa 
composition operator associative gloss subtle point infinite regress proof left right identities identity pseudomonad 
general theory required remainder provided substantial theoretical motivation way 
hold 
pulled fast 
type definition legitimate haskell type declaration free type variable 
true entirely point extra hole escape hatch allows arbitrary monad pseudomonad general theory plugged 
try fix problem introducing extra type variable type soon propagates code messy 
general theory requires type variable type pseudomonad 



gets caught infinite regress 
regress part fundamental structure paradigm 
idea wimp say exactly argument type 



hope haskell type inference system happy 
best solution existential type variables write definition shown treated existentially 
tried chalmers haskell implementation supports experimental version existential type variables 
unfortunately implementation imposes restriction effect existential type variables escape application requires escape 
recommend haskell implementors consider full support unrestricted existential type variables 
program simplifier reported circumvents restrictions haskell type system 
towers data types interpreter uses objects types terms input expressions values results 
interpreter extended new capability types may require modification 
example add numeric processing interpreter value type extended represent numbers term type extended represent operations addition 
building block takes interpreter maps terms type values type produces new interpreter maps terms type values type 
pseudomonads type pseudomonad type pseudomonad 
pseudomonads construct new parser printer 
parser maps strings terms printer maps values strings 
old parser extended produce terms new type 
old printer extended accept values new type 
composing multiple building blocks results composing multiple pseudomonads 
result construct towers data types 
final parser maps strings type top term tower final interpreter maps terms type top value tower final printer prints values 
see 
far fairly straightforward 
final wish final term type final value type recursive 
example want term able contain terms terms topmost type tower 
problem express implicitly causes problem haskell type checker 
deal problem 
term value tower tower 
incomplete 
see proceedings 
string string towers types packages effect need compose just functions sets functions 
haskell modules class language invent representation sets functions 
simple association list representation list routines routine type earliest list shadows 
call structure package 
association list say tuple sake modularity building blocks concerned routine types 
structure allows add new routine types modifying previously written building blocks 
necessary code packages shown 
stand current term value types types level type tower package corresponds stand term value types top tower 
type stands type values stored environment 
interpreter accepts term current level type tower produces value top type tower 
produces value current level way applies unit operation monad project type top tower 
monad constructed composition pseudomonads building blocks composed 
kinds routines parser parser interpr interpreter printer signals error constructs number value constructs function value applies function namer string names interpreter package contain routine kind 
example routine numbers building block included 
auxiliary routines provide way building block facilities provided 
example shall see continuations building block uses routine construct function representing continuation course cbv cbn data routine parser string 
string interpr 
string 

string string 
int 




namer string data package package routine update package pkg new package new pkg parser package parse parse parser parse rest parse rest interpr package interp interp interpr interp rest interp rest package showval showval showval rest showval rest package complain complain complain rest complain rest package rest rest package rest rest package apply apply apply rest apply rest namer package name name namer name rest name rest support code packages building block included provide definition routine 
update function adds set new routines package possibly shadowing old ones type 
various access functions parser interpr extract routine appropriate type package result undefined package contains routine required type 
data data wrong interpreter tmt tmv top package parser interpr namer unit tmt top invalid expression unit tmv wrong wrong wrong interpreter base interpreter base interpreter base interpreter variants built towers types shown 
null interpreter 
interprets completely boring language term 
attempt parse string fails produces projected top term type tower 
attempt interpret results complaint 
produces value wrong wrong wrong projected top value type tower 
value wrong prints wrong 
name base interpreter interpreter 
types projected top tower 
interpreter function takes monads arguments tmt top monad terms tmv top monad values 
monads constructed building blocks composed passed back levels arguments 
unit operations monads lift terms values respectively top tower 
interpreter function takes third argument passed back top tower 
top completed top level interpreter package 
note call directly calls complaint function top level package 
building blocks shadow complaint function new new 
completing interpreter interpreter function shown really complete working interpreter merely function needs arguments produce package routines 
call function complete top top top type term type value complete interpreter parse parser interp interpr showval complain apply name namer code complete constructed interpreter monads top level package produce new package may point tower possibly bottom top 
need feed appropriate arguments 
handy pull constructed package apart individual functions customary names 
necessary code shown 
function complete deceptively simple 
simply caps tower returns top level package top 
top computed 
feeding arguments 
arguments simply identity monad package returned top tower identity monad suffices lift terms values package top 
third argument top top level package 
apparent depending critically fact implementation language haskell lazy 
computing value top requires top passed argument 
result expression complete interpreter fact complete null interpreter package 
remaining definitions simply name individual routines package 
necessary working haskell main program 
driver code implements read eval print loop initial friendly greeting prompt interaction 
note parse function usual haskell style produces list possible parses simply uses parse discards 
apply special purpose program simplifier section code figures result shown 
sample interaction interpreter sample interactions transcripts actual console sessions running code driver data term data value wrong parse interp complain invalid expression complain wrong showval wrong wrong name interpreter simplified code completed base interpreter welcome interpreter 
wrong 
wrong 
wrong 
kat wrong 
wrong 
boring 
numbers building block numbers building block extends term data type include numeric constants con addition operations add haskell integer top level terms 
extends value data type include numeric values num see 
definition type refers top level term type refers term type level numbers package 
similarly definition 
pseudomonad map type type augments type new possibilities con add terms 
pseudomonad map type type augments type new possibility num 
may strange coded simply num unit num intermediate name 
fact strange 
form tricks program simplifier applying certain transformation just right time 
hack 
sorry 
function numbers interpreter building block 
building block showval interp exp exp parse main stdout welcome name abort stdin abort contents 
process lines contents process done process xs stdout abort stdout abort process xs code drive constructed interpreter takes old produces new 
interpreter suitable argument numbers result suitable argument complete 
accepts usual arguments tmt tmv top returns new package 
package produced updating old package new routines case 
old package come 
ah constructed old originally building block 
old need arguments 
needs monad lift terms old package top 
tmt lift terms new package top lift terms old package new package 
need compose tmt pseudomonad composition operator 
similarly tmv 
top level package top passed unchanged 
structure quite stereotypical appears unchanged building block 
examine particulars numbers building block 
parser bulky parsers distinguish bad inputs quite straightforward 
possibilities parse constant ddd produce term con parse addition operation produce term add parse way old package parses 
cases term lifted top term type tower applying unit tmt 
interpreter printer pretty expect reading wadler :10.1.1.100.9674
interpreting constant con results equivalent value num lifted top value type tower applying unit tmv 
code interpreting add operation just wadler interpr top place interp tmv 
place bindm slightly elaborate operands numbers 
note name interpreter new package constructed prepending word numbers name old package 
incorporate numbers facilities interpreter need replace lines marked type term term type value value complete numbers interpreter apply program simplifier code figures plus result shown 
sample interaction interpreter welcome numbers interpreter 

wrong 
kat wrong 
process numerical expressions reject 
recursive types haskell complete function knot tied resulting recursive term value types top fixpoint 
unfortunately existing implementations haskell type system circularity 
language specification hard determine language restriction implementation deficiency 
nub matter haskell allows recursive mutually recursive datatypes provided algebraic datatype intervenes 
current implementations apparently static requirement circularity definition textually apparent deduced type mechanism 
program simplifier type checker discovers dynamically type data con int add data num int pseudomonad 
con unit con add unit add pseudomonad 
num unit num numbers tmt tmv top update oldpkg parser interpr namer oldpkg tmt tmv top pcon psum parser oldpkg psum unit tmt add dropwhile isspace parser top dropwhile isspace parser top dropwhile isspace pcon pcon ord ord pcon pcon ord ord pcon unit tmt con pcon con unit tmv num add env interpr top env tmv 

interpr top env tmv 

case num num 
unit tmv num 
top numbers top unit tmv top unit tmv env interpr oldpkg env num show oldpkg unit tmv num numbers namer oldpkg numbers building block actual discovery produces occurs error chalmers haskell glasgow haskell despite fact algebraic datatype dynamically intervenes 
simplifier reduces type declarations form circularities textually manifest see rendering palatable haskell implementations 
program simplifier principal activity program simplifier judicious inlining function definitions followed fi reduction lambda expressions haskell case expressions 
simplifier performs ff conversion necessary tries smart job renaming variables adding primes post pass heuristically tries minimize number primes residual code maintaining readability 
ideally necessary types deduced com data term con int add term term data value num int wrong parse pcon psum psum add dropwhile isspace parse dropwhile isspace parse dropwhile isspace pcon pcon ord ord pcon pcon ord ord pcon con pcon interp con num interp add env case interp env interp env num num 
num complain numbers showval interp env showval interp env interp complain invalid expression num complain wrong showval num show showval wrong wrong name numbers interpreter simplified code complete numbers interpreter pletely automatically settled performing substitution simplification explicitly provided type declarations term value 
interesting algebraic datatypes nested data foo bar baz data type simplifier flattens data foo bar baz arranges code simplifier eliminate applications flatten nested case constructs appropriate 
transformation justified appeal category theory omit details 
simple heuristic controls unrolling recursive procedures body procedure inlined outermost case statement tagged name procedure forbidden inline case statement procedure name matches tag 
unrolling continues gating case statement eliminated partial evaluation 
simplifier uses fast fairly effective style waters 
nondeterministic building block nondeterministic building block extends term data type include choice construct amb surface syntax top level terms failure operation fail surface syntax fail 
alters value data type list values 
see 
implementation interpreter closely follows wadler :10.1.1.100.9674
failure results list value lifted top value type tower 
choice involves interpreting subexpressions appending lists results 
difference wadler interpreter values recursive calls interpreter necessarily lists top value type lowered back level lists concatenation 
achieved monad bind operation tmv 
bind operation requires result lifted back top value type unit tmv exactly want anyway 
choose print multiple values line followed line 
name interpreter name old package preceded word nondeterministic 
nondeterministic interpreter exactly manner numbers interpreter need replace lines marked type term term type value value complete nondeterministic interpreter interesting interpreter nondeterministic numbers type term term term type value value value complete nondeterministic numbers interpreter data fail amb type mtl pseudomonad 
fail unit fail amb unit amb pseudomonad 
foldr unit 



unit nondeterministic tmt tmv top update oldpkg parser interpr namer oldpkg tmt mtl tmv top parser oldpkg unit tmt fail dropwhile isspace unit tmt amb dropwhile isspace parser top dropwhile isspace parser top dropwhile isspace fail unit tmv amb env interpr top env tmv 

interpr top env tmv 

unit tmv env interpr oldpkg env oldpkg nondeterministic namer oldpkg nondeterministic building block apply program simplifier code figures plus figures result shown 
save space chosen elide parser 
parsers follow predictable pattern anyway 
sample interaction interpreter welcome nondeterministic numbers interpreter 





note pairs values interacted produce distinct sums 
fail 
fail 
fail 
data term fail amb term term con int add term term type value value data value num int wrong parse interp fail interp amb env interp env interp env interp con num interp add env foldr foldr case num num 
num complain numbers showval showval interp env interp env interp complain invalid expression num complain wrong showval case num 
show wrong 
wrong 
name nondeterministic numbers interpreter simplified code complete nondeterministic numbers interpreter parser elided call value building block particular interest usually think soul interpreter handling variables lambda binding function calls fact just set features separated building block 
cbv building block extends term data type include variable var lambda expressions lam function applications app string top level terms 
extends value data type include functional values fun function function maps values current level type tower values top type tower 
see 
implementation interpreter closely follows wadler :10.1.1.100.9674
choose nest definition lookup definition case 
note accepts function composes unit tmv 
call value fun value type 
routine takes argument type 

reason difference see callby name building block uses fun values different type interface remains constants 
allows clients interface continuation building block combined call value call name building block 
parse surface syntax lambda expressions application function argument print functional values function 
add call value features nondeterministic numbers interpreter write code type term term term term type value value value value complete cbv nondeterministic numbers interpreter sample interaction interpreter welcome call value nondeterministic numbers interpreter 
function 


currying functional arguments fine 

far 

data var string lambda string app data fun 
pseudomonad 
var unit var lambda unit lambda app unit app pseudomonad 
fun unit fun cbv tmt tmv top update oldpkg parser interpr namer oldpkg tmt tmv top pvar papp parser oldpkg pvar elem pvar pvar elem pvar pvar unit tmt var pvar unit tmt lambda dropwhile isspace var pvar dropwhile isspace parser top papp unit tmt app dropwhile isspace parser top isspace dropwhile isspace parser top dropwhile isspace var env lookup env lookup unit tmv lookup lookup lookup top unbound variable lambda env unit tmv fun 
interpr top env app env interpr top env tmv 

interpr top env tmv 

top env interpr oldpkg env fun top function top unit tmv fun function oldpkg fun unit tmv call value namer oldpkg call value building block strange didn print value 
function 
ooh weird 
trying choose function produces 
didn print 
didn print tried 
entirely correct 
chose add call value building block adding nondeterministic building block 
nondeterminism governs number values num doesn govern functional values fun look just definition value type produced program simplifier data value fun value 
value value data value num int wrong sure represent list numbers list functions 
moral compose building blocks matters order 
say call value nondeterministic numbers interpreter incorrect sense perfectly legitimate working combination specified building blocks working interpreter 
just may interpreter want purpose 
prefer nondeterministic call byvalue numbers interpreter type term term term term type value value value value complete nondeterministic cbv numbers interpreter apply program simplifier relevant code result shown 
elide parser 
sample interaction interpreter welcome nondeterministic call value numbers interpreter 
function 

ah better 



stuff works 

function 
function 

choices functions 

exchange indicates truly call value body get value 
call name building block call name building block quite similar call value building block subtle differences monads lines differing names variables marked 
difference world 
see 
specify nondeterministic call name numbers interpreter type term term term term type value value value value complete nondeterministic cbn numbers interpreter show simplified code expect differs exactly places simplified call value code 
sample interaction interpreter welcome nondeterministic call name numbers interpreter 
function 


data term fail amb term term var string lambda string term app term term con int add term term type value value data value fun value 
value num int wrong parse interp fail interp amb env interp env interp env interp var env lookup env lookup lookup lookup lookup complain unbound variable interp lambda env fun 
interp env interp app env foldr foldr apply interp env interp env interp con num interp add env foldr case fun 
fun 
foldr case fun 
fun 
case num num 
num complain numbers showval showval interp env interp env interp complain invalid expression apply fun apply complain function showval fun 

num complain wrong showval case fun 
function 
num 
show wrong 
wrong 
name nondeterministic call value numbers interpreter simplified code complete nondeterministic call value numbers interpreter parser elided data var string lambda string app data fun 

identical names 
identical names cbn tmt tmv top update oldpkg parser interpr namer oldpkg tmt tmv top 
identical var env lookup env lookup lookup lookup lookup top unbound variable lambda env unit tmv fun 
interpr top env app env interpr top env tmv 

top interpr top env env interpr oldpkg env fun top function top unit tmv fun function oldpkg unit tmv fun call name namer oldpkg call name building block parts identical call value building block elided 



function 
function 

exactly 
know call name 

exchange indicates truly call byname body perform calculation anew resulting total possibilities 
continuation building block continuation building block extends term data type include construct catch 
wadler called construct callcc error form original scheme catch construct :10.1.1.100.9674
function callcc type operation 
continuation building block alters value data type haskell function continuation haskell function maps values values produces value 
see 
continuation building block difficult construct took long time get types right 
problems 
prefer value type type 

free type variable 
words want lifted value type polymorphic various types continuation produce various types result conflicting requirements 
need able extract underlying value feeding identity continuation value need implementation catch shown requires captured continuation return value top type tower need 
net effect 
practical effect limit continuation building block leftmost applied 
try build nondeterministic continuation interpreter example haskell report type error simplified code simply doesn 
continuation nondeterministic interpreter works fine 
specify continuation nondeterministic callby value numbers interpreter type term term term term term type value value value value value complete continuation nondeterministic cbv numbers interpreter apply program simplifier relevant code result shown 
time elide parser interpreter case add 
inspection interpreter case catch reveals expected code interpreted environment variable bound function value continuation cc proceeds ignore cc feeds continuation catch expression 
note simplifier wasn smart reduction 

interest examine argument occurrence foldr interpreter case app 
recall call foldr comes nondeterministic building block purpose append reduce monad terminology join list lists 
added continuation building block see argument foldr continuation passing version 
second argument continuation passing version 
empty list sample interaction interpreter welcome continuation nondeterministic call value numbers interpreter 
catch 
catch 
catch 
catch 
catch 
errors building block errors building block introduces new terms purpose preserve string argument complain function discarding producing error message useful wrong 
welcome nondeterministic errors call value numbers interpreter 
error unbound variable 
error unbound variable error unbound variable 
error unbound variable error invalid expression error unbound variable 
error unbound variable function 

interaction reminds unsatisfactory property interpreter framework 
functions higher value tower numbers attempting add function number produce error message numbers merely returns function dictated operation 
possible solution code add extract numeric value related operation calls error thunk unable descend num representation 
problem operation provided pseudomonads may worth 
data catch string type 

mtc pseudomonad 
catch unit catch mvc pseudomonad 
cc 
cc continuation tmt tmv top update oldpkg parser parsec interpr namer oldpkg tmt mtc top tmv mvc parsec parser oldpkg unit tmt catch dropwhile isspace isspace var parser top isspace parser top catch env callcc 
interp top 

env callcc 
env interpr oldpkg env oldpkg 
continuation namer oldpkg continuation building block haskell 
restrictions haskell type system certainly caused problems way 
times tempted switch scheme common lisp 
dialect lisp easier code program simplifier lisp provides parser pretty printer 
working lisp avoided need program simplifier altogether principal practical motivation transform code form acceptable haskell type checker 
truth wadler conducted haskell appropriate preserve notational continuity looking excuse gain experience haskell anyway 
say type checking help hindrance especially construction continuations building block 
experience haskell years ago ecl effect strongly typed dialect lisp type checker happy program correct 
challenge trying force pseudomonads haskell type framework taught lot strengths limitations way trying hammer set lovely vague thoughts form yields great insight strengths limitations english language example wealth synonyms paucity rhymes love clarifying comfortably romantic impulses 
monads 
asked big deal monads 
isn done simply functional programming style feel compelled explain point 
merely style simply accept compliment mind may back handed 
feel thought style decomposing interpreters exposure structuring ideas suggested monads philip wadler mark jones put 
theory automatically wonderful virtue theory justifies leading pragmatic solutions implausible 
exactly instance 
data term catch string term fail amb term term var string lambda string term app term term con int add term term type value value 
value 
value data value fun value 
value num int wrong parse interp catch env 
interp 
cc 

env interp fail 
interp amb env cc 
interp env 
interp env 
cc interp var env lookup env lookup 
lookup lookup lookup complain unbound variable interp lambda env 
fun 
interp env interp app env cc 
interp env 
foldr 
cc 


cc 
cc 
interp env 
foldr 
cc 


cc 
apply cc cc interp con 
num interp add env cc 
interp complain invalid expression apply fun apply complain function showval 
fun 




num complain 
wrong showval case fun 
function 
num 
show wrong 
wrong 

name continuation nondeterministic call value numbers interpreter simplified code complete continuation nondeterministic call value numbers interpreter parser interpreter case add elided type terme data err string mte pseudomonad 

mve pseudomonad 
err unit err errors tmt tmv top update oldpkg namer oldpkg tmt mte tmv mve top unit tmv err err error oldpkg errors namer oldpkg errors building block draw parallel changes style assembly language programmer exposed principles structured programming 
hold hope slightly ad hoc techniques back translated appropriately mathematical language suitably qualified category theorist oh similar notion known years properties things way ll easier time 
excellent relation theory hold practice 
comparison essentially long reformulation wadler add crucial capability composition :10.1.1.100.9674
owes roots wadler cites course notably reynolds 
spirit earlier sussman 
presentation omitted proofs particularly proofs monad associativity 
cases exist putative monads arise interpreters really associative 
proofs program equivalence kind discussed wadler little practical effect :10.1.1.100.9674
investigation warranted 
certain simple important cases lists simple coproducts behaved provided pseudomonads composition operator result obeys monad associative law really monad 
king wadler example consider lists trees bags sets :10.1.1.33.5381
simon peyton jones wadler investigated monads perform imperative tasks working compiler coded haskell :10.1.1.100.9674
jonathan rees coded monadic interpreters scheme apparently published 
mark jones developed gofer variant haskell allows additional polymorphism type classes 
gofer supports programming multiple monads including cleaner version monad comprehension syntax proposed wadler 
representing monads gofer type class allows gofer type system deduce monad intended unit bind operation avoiding need reify monads manner shown 
jones begun explore possibility recoding interpreters gofer simpler monadic programming style 
ideas anticipated moggi give semantics complex language propose stepwise approach starts monad notion computation corresponding toy sublanguage step applies monad constructor adds feature language 
moggi goes theoretical descriptions useful monad constructors including exceptions side effects continuations 
best knowledge put idea practice produce actual working interpreters monad building blocks 
factors moggi monad constructors interesting way parts pseudomonad composition operator 
composition operator associative operator left right identity pseudomonad identical structure monad 
pseudomonad haskell means 
monad constructor mapping monad new monad 
think factoring usefully structures simplifies necessary proofs composed monad satisfy monad laws 
title plays ambiguity english verb compose object verb may indicate inputs outputs composition operation 
really compose combine monads get monad result 
compose produce monad things monads 
technique compose monads sense applying composition operator pseudomonads 
important lesson composition operation associative general commutative 
practical result really matters order combine building blocks 
interpreters built building blocks combined different orders may different different behaviors 
clear small set building blocks automatically construct interpreters shake stick 
tempted title interpreters free 
thought better 
constructed interpreters shown am working building blocks state output string data example 
building blocks shown transform value type variety ways thing term type adding alternatives big disjunction 
pseudomonad nontrivial computation terms 
presto 
macros 
macros building block 
leave value type transform term data type macro environment 
error messages positions 
wadler remarks parser produce terms suitable :10.1.1.100.9674
term type extended turns easiest modify parser input data type merely string pair string remaining parsed position start remaining string 
useful type towers 
left hook input type parser changed 
unsatisfactory interp functions shown accept extra environment argument env 
environments irrelevant numbers building block example nondeterministic building block ought introduced explicitly cbv cbn building blocks explicitly concerned environments 
interpreter ought purely mapping terms values extraneous arguments 
suffice simply value tower extending call value building block lifts value type env 
problem building blocks composed nondeterministic environments inherited properly 
solution introduce additional hook form second term type tower term type represents parser output second represents interpreter input main driver calls small function initially identity function map 
suspect full blown truly modular lisp interpreter coded style need fairly large number types corresponding towers 
techniques quite general need limited construction interpreters interpreters merely subject exposition academic papers behavior complex relative size code needed express 
monads pseudomonads useful software system requires easy flexible extensibility 
monad hook powerful hook hook type discipline 
monad eye hang monad hook uses hook 
pseudomonad eye hook 
chain 
hm 
mixing metaphors 
towers chains 
hang pseudomonad hook hook left 
wonder macintosh toolbox defined terms large set pseudomonads lending structure games played various add software packages intercept system calls 
acknowledgments wish philip wadler mark jones olivier danvy paul hudak conference referees helpful remarks 
paul hudak phil wadler simon peyton jones lennart augustsson provided helpful advice haskell 
am grateful access different implementations haskell yale haskell glasgow haskell chalmers haskell jones gofer system 
jonathan rees dan friedman mitch wand provided useful information encouragement 
apple computer inside macintosh volumes addison wesley reading massachusetts 
hudak paul peyton jones simon wadler philip editors 
report programming language haskell non strict purely functional language version 
technical report 
yale university glasgow university new haven glasgow respectively august 
jones mark personal communication guy steele september 
jones mark system constructor classes overloading implicit higher order polymorphism 
proc 
fpca sixth international conference functional programming languages computer architecture 
acm sigplan sigarch ifip london september 
king david wadler philip 
combining monads 
functional programming glasgow 
springer verlag berlin 
moggi eugenio 
view programming languages 
technical report ecs lfcs 
laboratory foundations computer science university edinburgh edinburgh scotland april 
lecture notes course taught stanford university spring 
peyton jones simon wadler philip 
imperative functional programming 
proc 
twentieth annual acm symposium principles programming languages 
association computing machinery charleston south carolina january 
raymond eric editor 
new hacker dictionary 
mit press cambridge massachusetts 
rees jonathan 
personal communication guy steele october 
reynolds john definitional interpreters higher order programming languages 
proc 
acm national conference 
association computing machinery boston august 
steele guy jr compose monads 
technical report 
thinking machines cambridge massachusetts july 
unpublished 
steele guy jr fahlman scott gabriel richard moon david weinreb daniel bobrow daniel demichiel linda keene kiczales gregor crispin pitman kent waters richard white jon common lisp language second edition 
digital press bedford massachusetts 
steele guy lewis jr sussman gerald jay 
art interpreter modularity complex parts zero 
ai memo 
mit artificial intelligence laboratory cambridge massachusetts may 
sussman gerald jay steele guy lewis jr scheme interpreter extended lambda calculus 
ai memo 
mit artificial intelligence laboratory cambridge massachusetts december 
wadler philip 
comprehending monads 
proc 
acm symposium lisp functional programming 
acm sigplan sigact sigart nice france june 
appear journal mathematical structures computer science 
wadler philip :10.1.1.100.9674
essence functional programming 
proc 
nineteenth annual acm symposium principles programming languages 
association computing machinery albuquerque new mexico january 
wadler philip 
theorems free 
proc 
fpca fourth international conference functional programming languages computer architecture 
acm sigplan sigarch ifip london september 
waters richard xp common lisp pretty printing system 
ai memo 
mit artificial intelligence laboratory cambridge massachusetts march 
wegbreit ben holloway glenn jay judy 
ecl programmer manual 
technical report 
harvard university center research computing technology cambridge massachusetts december 
