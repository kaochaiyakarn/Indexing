robot motion planning dynamic environments paolo jet propulsion laboratory california institute technology pasadena ca usa email telerobotics jpl nasa gov zvi department mechanical nuclear aerospace engineering university california los angeles los angeles ca usa email seas ucla edu presents method computing motions robot dynamic environments subject robot dynamics actuator constraints 
method concept velocity obstacle defines set feasible robot velocities result collision robot obstacle moving velocity 
avoidance maneuver specific time computed selecting robot velocities set 
trajectory consisting sequence avoidance maneuvers discrete time intervals generated search tree avoidance maneuvers 
exhaustive search computes near minimum time trajectories heuristic search generates feasible trajectories line applications 
trajectories compared optimal trajectory computed dynamic optimization minimizes motion time subject robot dynamics actuator limits state inequality constraints due moving obstacles 
approach demonstrated planning trajectory automated vehicle intelligent vehicle highway system scenario 
addresses problem motion planning dynamic environments 
typical examples dynamic environments include manufacturing tasks robot manipulators track retrieve parts moving air sea land traffic aircraft vessels vehicles avoid moving destination 
motion planning dynamic environments considerably difficult widely studied static problem requires simultaneous solution path planning velocity planning problems 
path planning involves computation collision free path start goal considering robot dynamics 
velocity planning hand involves computation velocity profile path satisfying system dynamics actuator constraints 
addition motion planning static environments guaranteed find solution exists time motion planning dynamic environments essentially intractable solution may exist time evolution environment 
previous methods consisted graph search configuration time space robot checking intersection swept volumes robot obstacles space 
velocity constraints considered solution asteroid problem acceleration constrains satisfied planning point mass approximate dynamic constraints satisfied introducing path velocity decomposition method limiting slope direction curvature trajectory position time plane 
family adjacent paths developed account obstacles blocking initial path computing complete trajectory connecting different path segments 
network possible paths searched compute time minimal trajectory 
dynamic constraints define collision front introduce concept transient obstacles applicable dynamic environments 
date line dynamic planning treated emphasizing reasoning decision making creating artificial potential fields obstacles 
time optimal motion planning problem static environments treated previously parameter optimizations representing trajectory polynomial time accounting obstacles penalty function representing path cubic spline computing motion time path efficient method developed 
time optimal motion planning cooperating robots moving specified paths studied 
develop efficient method computing trajectories robot moving time varying environment 
utilizes concept velocity obstacle vo represents robot velocities cause collision obstacle time 
avoidance maneuver computed selecting velocities outside velocity obstacle 
ensure maneuver dynamically feasible robot dynamics actuator constraints mapped robot velocity space 
trajectory consists sequence avoidance maneuvers computed searching tree avoidance maneuvers generated discrete time intervals 
line applications tree pruned heuristic search designed achieve prioritized set objectives avoiding collisions reaching goal maximizing speed computing trajectories desirable topology 
solutions computed method conservative exclude trajectories feasible include avoidance maneuvers violating velocity obstacle 
evaluate quality trajectories compared trajectories computed dynamic optimization bound velocity obstacle approach 
optimization steepest descent modified include state dependent inequality constraints due moving obstacles 
initial guess optimization trajectory generated search maneuver tree 
advantages approach multi fold permits efficient geometric representation potential avoidance maneuvers moving obstacles ii number moving obstacles avoided considering union vo iii unifies avoidance moving stationary obstacles iv allows simple consideration robot dynamics actuator constraints 
organized follows 
section defines velocity obstacle avoidance velocities describes representation compute trajectories 
section describes dynamic optimization compute time optimal trajectories 
examples trajectories corresponding time optimal solutions section 
velocity obstacle velocity obstacle vo extension configuration space obstacle timevarying environment 
consists velocities robot cause collision robot obstacles time 
concept valid general robots obstacles restrict analysis circular robots obstacles plane 
section define vo concept combine dynamic constraints robot compute avoidance velocities dynamically feasible 
corresponding avoidance maneuvers build tree represents temporal resolution avoidance trajectories generated satisfy constraints represented velocity obstacles 
velocity obstacle vo illustrated scenario shown circular objects shown time velocities va vb circle represents robot circle represents obstacle 
velocities positions chosen collide time provided va vb change 
compute vo represent configuration space reducing velocity velocity robot moving obstacle 
point enlarging radius circle attach velocity vectors position center respectively 
considering relative velocity va gamma vb assuming maintain current velocities collision occur time line relative velocity intersects fact relative velocity lies tangents cause collision define collision cone cc set colliding relative velocities cc fv cone planar sector apex bounded tangents shown 
collision cone partitions space relative velocities colliding avoiding velocities 
relative velocities lying boundaries cc represent tangent maneuvers graze obstacle collision cone specific particular pair robot obstacle 
consider multiple obstacles useful establish equivalent partition absolute velocities done simply adding velocity vb velocity cc equivalently translating cc ab collision cone cc collision cone cc vb shown 
velocity obstacle defined cc phi vb phi minkowski vector sum operator 
vo partitions absolute velocities avoiding colliding velocities 
velocities boundaries result grazing corresponding relative velocities lie boundary collision cone cc note vo stationary obstacle identical relative velocity cone vb 
avoid multiple obstacles obstacle combined single velocity obstacle number obstacles 
vo assumes velocity remains constant 
account variable velocities recomputed specified time intervals 
assumption circular robot obstacles reduces dimension configuration space greatly simplifies computation fixes shape configuration space obstacles generally functions positions robot space 
general manipulators periodically recomputed account time varying configuration space obstacles 
vo velocity obstacle avoidance maneuvers velocities reachable robot state time interval deltat computed transforming control constraints bounds robot acceleration 
set feasible accelerations time fa defined fa ug represents dynamics robot actuator efforts set admissible controls position vector defined earlier 
note feasible acceleration range degree freedom system decoupled actuator limits parallelogram 
set reachable velocities rv deltat time interval deltat defined rv deltat fv va phi deltat delta fa set reachable avoidance velocities rav defined difference reachable velocities velocity obstacle rav deltat rv deltat psi psi denotes operation set difference 
maneuver avoiding obstacle computed selecting velocity rav 
shows schematically reachable velocity set rav consisting disjoint closed sets corresponding respectively feasible front rear avoidance maneuvers 
multiple obstacles rav may consist multiple disjoint subsets 
vo rv rav reachable avoidance velocities 
computing avoidance trajectories trajectory avoids static moving obstacles reaches goal satisfies robot dynamic constraints computed discrete sequence elementary avoidance maneuvers selected global search tree feasible maneuvers specified time intervals 
alternatively global search may reduced heuristic search line applications trajectories moving obstacles known priori acquired realtime 
approaches discussed 
global search represent state space robot tree avoidance maneuvers discrete time intervals 
nodes tree correspond positions robot discrete times operators expanding node time successors time velocities reachable avoidance velocity set rav 
edges correspond avoidance maneuvers positions 
search tree defined follows fx fv rav deltat jth node time rav reachable velocity set computed node rav rav rav tree representation global search 
lth operator node time edge node time node time tree feasible avoidance maneuvers constructed follows 
time avoidance set rav corresponding node discretized grid 
velocities corresponding node grid compute edges emanating node ij positions reached robot maneuver interval successors node node completely expanded operators applied edges emanating examined 
resulting tree constant time interval nodes variable branch number function shape rav searched standard techniques 
shows schematically subtree avoidance maneuvers 
avoidance maneuvers selected velocity obstacles collision course considered obstacles discussed earlier 
excludes feasible trajectories part time collision course obstacles 
trajectories may generated considering obstacles imminent collisions refining trajectory dynamic optimization discussed section 
heuristic search line applications incomplete information environment available goal vo max angle goal vo rav tg strategy 
mv strategy 
maneuver tree constructed incrementally heuristic rules designed satisfy prioritized set goals embedded formulation velocity obstacle 
survival robot guaranteed selecting avoidance velocities rav target reached selecting velocities point destination motion time minimized choosing highest velocity available desired trajectory structure selected choosing appropriate sequence front rear avoidance maneuvers 
propose basic heuristics tg goal choose highest avoidance velocity line goal shown mv maximum velocity select maximum avoidance velocity specified angle ff line goal shown 
heuristics may combine strategies order better satisfy prioritized goals 
dynamic optimization trajectory computed heuristic search evaluated line dynamic optimization 
optimization formulated mayer notation performance index min oe subject kinematic dynamic constraints gamma omega gamma psi fu min max initial manifold terminal manifold represents time varying obstacles robot dynamics represents admissible controls 
state constraints due presence obstacles differentiated respect time explicit controls appended state dependent control constraint hamiltonian 
number constraint represents order constraint 
approach requires additional tangency constraint entry point constrained arc 
may constrain problem constraints order higher 
case single obstacle state constraint replaced tangency condition denoted psi control equality constraint denoted psi psi 
gamma psi admissible control set optimal control ae umin umax necessary optimality conditions optimal control interval generates optimal solution minimizes satisfies fixed terminal manifolds gamma omega gamma computed satisfying necessary conditions minimum principle 
hamiltonian function problem defined vectors lagrange multipliers set active control constraints time adjoint equations lagrange multipliers gamma oe omega exhibit discontinuity entry point constraint gamma psi constraint active minimization hamiltonian autonomous system equivalent satisfying adjoint equations constrained arcs gamma gamma gamma summary trajectory minimizing performance index characterized controls admissible set ii states satisfy terminal manifolds gamma omega iii state equations described free arcs constrained arcs discontinuity junction iv hamiltonian minimized entire interval 
conditions satisfied trajectory computed numerical method described 
numerical computation optimal trajectory computed numerically appending constraints performance index appropriate arrays lagrange multipliers computing corrections controls drive zero differential augmented performance index 
differential derived function variations control switches assuming solution 
singular arcs approximated finite number switches generating sub optimal solution 
differential augmented performance index formed computing differentials omega psi independently including effects psi dj omega gamma combining final form augmented performance index oe omega dt gamma hamiltonian equation 
lagrange multiplier defined oe omega psi constraints psi affected state constant lagrange multipliers 
bang bang controls take values ff ff variation rewritten ffiu ff gamma ff sgn dt sgn signum function 
indicates number switches segment trajectory rth input indicates number elements bang bang controls ij ffiu dt ij ij ffiu dt ij ij ffiu dt ij oe omega dt differential minimized choosing steepest descent increments dt ij gamma ij ii ffiu dt gamma oe omega ii suitable positive values 
values dt ij dt depend multipliers values computed requiring differentials psi omega gamma reduced quantities ffl 
values multipliers gammai gamma psi psi ffl psi omega gamma gamma omega gamma omega gamma gamma psi psi psi omega omega gamma omega gamma omega dt omega dt gamma gamma omega oe gamma omega gamma gamma psi psi gamma ffl delta omega oe omega oe omega dt doe dt gamma ii ij psi omega psi omega oe index indicates segments trajectory state constraint 
index constraint boundary represents independent controls 
generating initial guess trajectory computed heuristic search consists sequence straight line segments velocities assigned segment 
velocity changes abruptly segments smooth spline interpolation 
trajectory segment divided halves spline interpolation applied trajectory segments replaces velocity discontinuities polynomial blend chosen third order hermite spline 
bang bang controls spline interpolation computed follows 
actuator efforts computed accelerations spline interpolation inverse system dynamics 
smooth actuator efforts approximated bang bang controls trajectory obtained integrating controls shape trajectory computed search 
optimal trajectory local minimum vicinity initial guess exit robot vehicle vehicle example trajectory problem 
computed optimizing switching times 
purpose examples dynamics robot modeled double integrators 
examples examples computation trajectories demonstrated intelligent vehicle highway system scenario shown 
goal robotic vehicle leftmost lane reach exit right colliding vehicles 
initial velocity robot vehicle exit robot vehicle vehicle trajectory computed tg strategy 
exit robot vehicle vehicle trajectory computed global search 
initial velocity vehicle 
velocities represented bars attached center circle 
time interval nodes search tree chosen arbitrarily 
trajectories computed global search heuristic search tg mv tg strategies 
solution computed mv tg strategy compared optimal solution computed dynamic optimization 
pictures circles representing robot obstacles displayed intervals robot represented darker circle 
exit robot vehicle vehicle trajectory computed mv tg strategies 
bang bang ax bang bang ay bang bang approximation controls initial guess 
grey circles represent position robot obstacles robot crosses path obstacles 
trajectories computed velocity obstacles trajectory shown computed depth iterative deepening algorithm 
algorithm returns fastest path target time reaches target 
example rav sets discretized considering points side boundary maximum feasible velocity direction goal 
search expanded depth levels total motion time solution tg strategy resulted trajectory shown 
trajectory robot slows lets vehicle pass speeds exit vehicle 
total motion time trajectory trajectory computed mv tg strategies shown 
trajectory robot speeds pass vehicle slows vehicle pass speeds goal 
motion time trajectory trajectory computed mv heuristics tg heuristics 
start vehicle vehicle robot exit initial guess dynamic optimization optimal trajectory shows bang bang approximation controls trajectory shown 
shows initial guess dynamic optimization obtained integrating bang bang controls 
effects approximation show different terminal position robot far target collision vehicle 
collision represented bars time time indicating depth contact robot vehicle 
trajectory resembles trajectory type maneuvers avoiding obstacles time avoidance vehicle approximately 
trajectory initial guess dynamic optimization converges local minimum vicinity trajectory computed velocity obstacles shown 
optimal controls shown 
optimal solution key features heuristic trajectory allowing meaningful comparison trajectory computed heuristic search corresponding optimal solution 
motion time optimal trajectory slightly lower time heuristic solution optimal trajectory violates points velocity obstacle due vehicle accounts shorter motion time 
ax solution ay solution optimal bang bang controls 
novel method planning motion robot moving time varying environment 
significantly different currently available planning algorithms simultaneously computes path velocity profile avoid static moving obstacles satisfy robot dynamic constraints 
method consists computing obstacle corresponding velocity obstacle set colliding velocities obstacle robot 
subtracting reachable velocities robot set reachable avoidance velocities formed consists velocities avoid obstacles satisfy robot dynamic constraints 
search space formed representing state space robot tree avoidance maneuvers 
global search tree yields trajectories minimize selected performance index motion time traveled distance 
solutions computed method conservative maneuver avoids obstacles irrespectively expected collision time may exclude trajectories feasible violate velocity obstacle interval 
line applications tree pruned heuristic strategies aimed satisfying prioritized list goals survival robot reaching target minimize motion time 
quality heuristic trajectories evaluated comparing optimal trajectories computed dynamic optimization 
velocity obstacle method extended dimensional environments modeling robots obstacles spheres 
method demon start vehicle robot vehicle exit optimal solution 
planning trajectory automated vehicle intelligent vehicle highway system scenario 
main advantages velocity obstacle approach include efficient geometric representation maneuvers avoiding number moving static obstacles simple consideration robot dynamics actuator constraints 
approach possible compute line safe feasible trajectories dynamic environments air traffic control intelligent highway systems harbor traffic management 
acknowledgment research described partially carried jet propulsion laboratory california institute technology contract national space administration 
bobrow gibson 
time optimal control robotic manipulators specified paths 
international journal robotics research fall 
bryson 
method solving optimum programming problems 
asme journal applied mechanics june 
bryson dreyfus 
optimal programming problems inequality constraints necessary conditions extremal solutions 
aiaa journal november 
bryson ho 
applied optimal control 
hemisphere publishing new york ny 
cameron 
study clash detection problem robotics 
ieee international conference robotics automation pages st louis mo march 
cameron 
efficient intersection tests objects defined constructively 
international journal robotics research february 
cameron 
collision detection intersection testing 
ieee journal robotics automation june 
cameron 
modelling solids motion 
phd thesis edinburgh uk 
canny reif 
new lower bound techniques robot motion planning problems 
th ieee symposium foundation computer science 
canny reif donald xavier 
complexity planning 
th symposium foundation computer science 
bryson 
optimal programming problems inequality constraints ii solution steepest ascent 
aiaa journal january 
erdmann lozano perez 
multiple moving objects 
ieee international conference robotics automation pages san francisco ca april 
erdmann lozano perez 
multiple moving objects 
algorithmica 

robot motion planning moving obstacles 
phd thesis university california los angeles january 

motion planning dynamic environments relative velocity paradigm 
ieee international conference automation robotics volume pages atlanta ga may 
foley van dam feiner hughes 
computer graphics 
addisonwesley publishing reading ma 
th 

path velocity decomposition revisited applied dynamic trajectory planning 
ieee international conference automation robotics volume pages atlanta ga may 

motion planning amidst transient obstacles 
ieee international conference robotics automation pages nice france may 

motion planning transient obstacles 
international journal robotics research october 

time minimum routes time dependent networks 
ieee transaction robotics automation june 
samet 
time minimal paths moving obstacles 
ieee international conference robotics automation pages scottsdale az may 
samet 
motion planning dynamic domain 
ieee international conference robotics automation pages cincinnati oh may 
jacobson 
new necessary conditions optimality control problems state variable inequality constraints 
journal mathematical analysis applications 
johnson gilbert 
minimum time robot planning presence obstacles 
ieee conference decision control pages ft lauderdale fl december 
kant zucker 
efficient trajectory planning path velocity decomposition 
international journal robotic research fall 
kant zucker 
planning collision free trajectories time varying environments level hierarchy 
ieee international conference robotics automation pages raleigh nc 
khatib 
unified approach motion force control robot manipulators operational space formulation 
ieee transaction robotics automation 
korf 
depth iterative deepening optimal admissible tree search 
artificial intelligence 
lee lee 
collision free motion planning robots 
ieee transactions system man cybernetics smc january february 

optimal control 
mcgraw hill book new york ny 
lozano erez 
spatial planning configuration space approach 
ieee transaction computers february 
lozano erez wesley 
algorithm planning collision free paths polyhedral obstacles 
communications acm october 
meier 
efficient algorithm bang bang control systems applied link manipulator 
phd thesis stanford december 
nilsson 
principles artificial intelligence 
tioga palo alto ca 

motion planning inertial constraints 
technical report tr nyu robotics laboratory 
pearl 
heuristics 
addison wesley publishing reading ma 
reif sharir 
motion planning presence moving obstacles 
th ieee symposium foundation computer science pages 
hendler 
model reaction planning dynamic environments 
international journal artificial intelligence engineering april 

time optimal paths acceleration lines robotic manipulators 
th ieee conference decision control los angeles ca december 

robot path planner obstacles actuators gripper payload constraints 
international journal robotics research december 
shin mckay 
open loop minimum time control mechanical manipulators 
american control conference pages june 

optimization control systems constraints 
phd thesis harvard february 
weinreb bryson 
optimal control systems hard control bounds 
ieee transactions automatic control ac november 
