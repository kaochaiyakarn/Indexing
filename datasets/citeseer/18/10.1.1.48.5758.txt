similarity indexing algorithms performance david white ramesh jain cs ucsd edu jain ece ucsd edu visual computing laboratory university california san diego gilman drive mail code la jolla ca efficient indexing support essential allow content image video databases similaritybased retrieval scale large databases tens thousands millions images 
take depth look problem 
major difficulties solving problem high dimension feature vectors represent objects 
provide overview computational geometry problem highlight results useful practice including approximate nearest neighbor algorithms 
variant optimized tree call vam tree provide algorithms create optimized tree call tree 
tree provided better performance competing structures tested main memory secondary memory applications 
observed large improvements performance relative tree ss tree secondary memory applications modest improvements relative optimized tree variants 
keywords similarity indexing high dimensional feature vectors approximate nearest neighbor searching closest points content retrieval image video database retrieval 
visual information systems provide content access image video databases applications objects represented feature vectors medium high dimensional space queries objects similarity similarity measured type distance feature space 
representative samples systems strategy ibm qbic mit photobook project 
number object 
images stored systems usually small typically simple linear optimized linear search perform queries provides adequate performance 
order allow systems scale large large databases objects soon exist part digital libraries information systems indexing support needs developed linear search databases provide adequate performance 
call general problem providing indexing support similarity queries medium high dimensional feature vectors similarity indexing 
shows dependencies exist similarity indexing applications 
domain expert domain knowledge convert domain objects 
images feature vectors provide similarity measures feature vectors 
goal similarity indexing provide general purpose domain independent indexing algorithms useful domains 
focuses improving indexing performance types distributions believe occur practice 
research funded part national science foundation mip similarity measures domain knowledge similarity index domain objects feature vectors similarity indexing dependencies query definition focus call similarity selection operation 
similarity selection operation generalization nearest neighbor query spherical range query approximate versions queries :10.1.1.15.3125
parameters similarity selection query operation 
query vector query results ordered increasing distance distance usually euclidean weighted euclidean distance 

positive integer specifies maximum number approximate nearest neighbors returned query result 

positive real number specifies maximum distance query vector vector query results 
note larger distance kth nearest neighbor 
large exact query returns nearest neighbors larger number objects distance 
large exact query spherical range query bounded relative 
non negative real number ffl specifies bound approximation error 
approximation error bound ffl equal result vectors distance current kth nearest neighbor vector approximate query result distance closest missed vector query point define missed vector vector result set approximate query result set corresponding exact query 
ffl query exact implementation perspective definition ffl allows approximate search algorithm avoid visiting buckets query point ffl defined 
figures show examples 
circle drawn dashed line represents region searched approximate query circle drawn solid line represents region searched exact query 
bucket regions searched order minimum distance query vector numbered 
nearest neighbor case large ffl may thought maximum error allowed relative exact result 
example ffl distance kth approximate nearest neighbor greater distance true kth nearest neighbor 
researchers practice average error maximum allowed error small values ffl probability non exact results returned small negligible 
performance results euclidean distance similarity measure perform exact approximate nearest neighbor queries large believe types queries missed approx elias algorithm priority tree approximate nearest neighbor search algorithms nn query practice 
virtually algorithms described referenced modified efficiently support weighted euclidean queries distance metrics norms spherical range queries 
related section review computational geometry spatial indexing literature relating medium high dimensional indexing summarize 
algorithm proposed nearest neighbor searching bucketing algorithm elias algorithm 
simple algorithm uses regular partitioning space containing dataset instance grid partition assigned bucket holds points lying 
searching nearest neighbors accomplished searching buckets order closest distance query point buckets searched contain closer nearest neighbor see 
algorithm provides performance uniformly distributed data practical non uniform distributions practice 
algorithm analyzed rivest cleary 
cleary analysis assuming uniform distribution sufficiently large dataset ae shows algorithm requires time exponential dimension lower bound delta buckets independent size dataset 
easy extend cleary analysis show buckets visited nearest neighbor search increases linearly search ball increases average volume factor optimized tree proposed friedman bentley finkel probably data structure practice nearest neighbor searching main memory 
optimized tree requires logarithmic expected time respect size dataset 
bentley proposed modified tree applications allow constant time searching respect dataset size tree lower dimension 
sproull provided refinements tree observed practice tree performance degrades rapidly dimension 
arya mount analyzed tree bucketing algorithm boundary effects account showing dependence dimension better cleary bound number data points large respect dimension ae 
thesis arya provides refinements tree suggest tree variant called priority tree see numbering shows bucket search order 
computational geometry nearest neighbor searching focused approximate nearest neighbor nearest neighbor problem knowledge algorithms image video retrieval applications algorithms image retrieval suggested 
approximate nearest neighbor algorithms appropriate image video retrieval applications fast response time important receiving exact query results 
empirical results arya empirical results show allowing small probability incorrect result provide large speedup modest probability incorrect result speedups order magnitude achieved 
arya provide optimal algorithm approximate nearest neighbor nearest neighbor searching tree prove provides optimal worst case performance 
problem optimal algorithm decision tree model requires log time construct structure requiring space provides query times requiring log time 
addition structure proposed arya generalized optimal dynamic structure log point insertion deletion results callahan kosaraju 
arya state empirical tests showed relatively little difference running time effective performance splitting rules optimal algorithms optimized tree 
clarkson provided optimal algorithm problem totally different method 
database literature research mainly focused indexing lower dimensional data types queries nearest neighbor similarity queries 
tree successful variant tree indexing high dimensional datasets database literature 
provides algorithms nearest neighbor searching related problems provide performance results high dimensional data 
white jain proposed ss tree dynamic structure similarity indexing provided results show outperforms tree exact nearest neighbor queries high dimensional datasets 
summary provide nearest neighbor approximate nearest neighbor searching medium high dimension 
rule thumb search time increases exponentially dimension linearly number nearest neighbors 
true known practical algorithms uniformly distributed dataset 
rule applied blindly actual performance application depend dataset distribution size indexing structure 
exponential complexity dimension indicate impossible index intrinsically high dimensional datasets 
applications encountered require indexing intrinsically high dimensional datasets dataset medium dimensional high embedded dimension intrinsically high dimensional 
eigenface dataset 
fact high intrinsic dimensionality instance high fractal dimension indication ineffective non intuitive feature vector representation 

simple optimized tree variants provide best main memory performance practice algorithms proposed computational geometry algorithms literature 
friedman mentioned disk implementation optimized tree tree possible knowledge developed efficient method disk implementations 
show indexing structures variants optimized tree tree perform disk implementations fact provide significantly better performance dynamic structures tree ss tree 

believe support approximate nearest neighbor searching algorithms provided applications currently exact nearest neighbor search algorithms performance increase outweigh disadvantages receiving approximate exact results 
optimal worst case algorithms known static dynamic structures practice algorithms provide worst case guarantees may provide better equivalent performance 
spatial structures including tree tree ss tree provide exact approx query results structure show important choose appropriate structure task 
vam tree variant sproull provided taxonomy tree variants existing previous 
listed call dimensions tree variations split partition plane orientation split partition plane position distance representation 
variants refinements suggested fall general framework 
original optimized tree dimension greatest spread split dimension chose split position median calculated distance bounds dimensions 
tree variant arya similar optimized tree incorporates refinement distance calculation appropriately called distance refinement 
refinement provides advantages bounds calculation original optimized tree reduced computational overhead 
distance refinement priority tree refinements approximate queries 
recommend addition fields applications tree nodes fit main memory extra memory overhead cause additional paging negate benefits provided extra fields 
sproull suggested splits principle axis eigenvector dimension highly correlated datasets 
problem approach incompatible arya distance refinement splits orthogonal 
suggest different approach highly correlated datasets 
allowing splits arbitrary dimensions believe axes changed uncorrelated karhunen loeve transform dataset indexing tree tree 
distance refinement case dimensions orthogonal distance transformed space equivalent distances original feature space 
vectors stored original representation new transformed representation 
globally correlated datasets simple idea allow arya distance refinement effectively correlated datasets reduce index storage requirements creation time axes need stored tree calculated tree building process 
tested approach general idea successfully database literature tree 
variant believe performs best general refines split orientation split position incorporates arya distance priority refinements see caveat 
known partial distance calculation optimization buckets 
call refinement optimized tree vam tree split orientation variance split position approximately median 

vam tree chooses split dimension dimension largest variance 
compared standard maximum spread dimension provided equivalent slightly better search performance 
variant required cpu time build tree implementation calculating variance expensive updating bounds 
sproull tried number tree variants recommended variant maximum variance 
see example maximum variance criterion chooses better split maximum spread criterion maximum spread criterion sensitive outliers 
example obviously contrived believe cases cause maximum variance criterion provide better query performance 
max variance split outliers max spread split example maximum variance criterion provides better split maximum spread 
standard optimized tree algorithm splits dataset half node making tree balanced 
split rule causes number elements stored bucket vary depending size dataset 
disk implementations bucket typically stored disk block important able specify fixed size bucket disk blocks fully utilized independent size dataset 
algorithm provides split rule guarantees minimum number buckets approximating median split 
gamma xi sp pi xi sp pi 
bucket size dataset size current parent subtree number elements subtrees low high side split 
easy prove split rule generate tree maximum possible utilization bucket capacity minimum number buckets observing buckets low subtree split fully utilized base case 
cases internal nodes tree paged addition buckets convenient construct tree internal nodes full 
accomplished simply modifying value depending size number elements full internal subtree 
function blog sp 
bucket size fan internal node 
trees usually set greater number internal nodes stored disk block 
variant proven inductively provide maximum utilization level internal nodes argument 
split rules analyze data distribution histogram instance known query distribution encourage guarantee full buckets internal nodes 
complicated split rules may yield large improvement average search performance practice certain types distributions 
paliwal arya average case standard tree split rule provides performance close split rules cases query distribution known 
believe significant improvements worst case search performance possible split rules suggested arya bentley sproull 
note bentley arya implementations wasteful terms space tree nodes 
superfluous space usage implementation simpler usually insignificant main memory applications space store vectors larger space required tree internal nodes 
disk implementations important trim fat paging issues recommend structure similar tree 
comparison implementation designed main memory disk applications uses space bentley store tree nodes primarily eliminated bucket nodes 
implementation requires storage lsd tree store number extra fields tree node main memory order support dynamic updates 
tree preliminary tests showed optimized tree provides better performance tree ss tree implemented version tree derived optimized tree 
call structure tree created recursively choosing splits dataset maximum variance dimension choosing split approximately median 
assume number leaf bucket accesses determines search time clearly tree provide better performance optimized tree partitioning space additional information provided tree form exact upper lower bounds dimension 
presenting algorithm convert tree tree provide simpler efficient algorithm creates tree directly dataset tree variant described 
algorithm provided uses conventions standard template library stl simple syntax presentation 
implemented tree tree ss tree code generic algorithms framework stl 
framework allowed implementation main memory disk versions code disk iterator 
compiler effectively supports stl implementation fast handcoded version 
unfortunately compilers including ones currently effectively support stl change 
algorithm contains critical set routines create tree 
data type entry tree node represents iterator pointer feature vectors 
main function returns root new tree dataset feature vectors 
called build tree recursively 
splits dataset maximum variance dimension chooses split location equations 
splitting algorithms simply replacing function 
functions provided implementation dependent straightforward implement 
creates internal tree node returns pointing 
creates tree bucket leaf node returns pointing 
simply calculates variance dataset dimensions returns index dimension highest variance 
partitions dataset element offset lo size sorted position dimension dataset partitioned value 
performed linear time selection algorithm 
variant hoare algorithm provided nth element template function stl sophisticated algorithms faster large datasets 
note large datasets runtime dominated disk accesses algorithm improved constant factor combining variance calculation selection 
selection routine example return maximum variance dimension side split eliminating scan function 
tree vam tree ss tree tree buckets disk speedup cpu ms cpu speedup buckets cpu ms buckets buckets table tree vs structures secondary memory varying dimension exact nn queries uniformly distributed vectors empirical performance results section provide empirical results compare structures suggested previously known structures 
cpu results attained sun sparc gnu compiler standard optimizations 
table compare structures proposed ss tree tree 
disk speedup somewhat unrealistic overly optimistic measure speedup versus linear search solely buckets accesses appropriate search time dominated buckets leaf accesses 
cpu speedup speedup observed index stored main memory compared linear search partial distance calculation 
percentages indicate value compares tree 
tree creation routines require seconds create tree vam tree dataset vectors main memory 
tree holding dataset vectors usually created second 
order magnitude faster ss tree orders magnitude faster tree 
really fair comparision tree ss tree designed fully dynamic tree take advantage full knowledge dataset 
main memory tree provide best performance 
observed improvements cpu time nn queries sure structure provide noticable performance improvement tree variants application implementation 
disk applications believe tree indexing method choice structures compared high dimensional data 
requires average number bucket disk accesses queries requires orders magnitude time construct index 
suggest new update routines reorganization routines tree structure developed ideas 
gavrila suggested method creating optimized tree provide marginally better query performance requires orders magnitude time optimize index 
plan run tests real datasets eigenface dataset large texture dataset provide results approximate query performance 
test results omitted due space considerations 
note results table worse observed real datasets typically correlated clustered 
example noticed eigenface dataset indexed dimensional uniform dataset 
compare number indexing methods high dimensional data 
tree provides best performance structures tested disk applications 
main memory tree variants provide performance tree provided slightly better performance tests 
structures dynamic tree applications require dynamic indexing dynamic update algorithms tree insertion algorithms 
tree structure periodically reorganized algorithms provided 
believe provides final solution similarity indexing problem believe algorithms useful practice simple believe provide performance applications 
arya 
nearest neighbor searching applications 
phd thesis computer vision laboratory center automation research university maryland college park md june 
available technical report cs tr 
arya mount 
approximate range searching 
th annual symposium computation geometry pages 
acm press june 
arya mount narayan 
accounting boundary effects nearest neighbor searching 
th annual symposium computational geometry pages vancouver british columbia canada june 
acm press 
arya mount netanyahu silverman wu 
optimal algorithm approximate nearest neighbor searching 
th ann 
acm siam symposium discrete algorithms pages 
revised version referred currently available www www cs umd edu 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
proceedings acm sigmod international conference management data pages may 

bei gray 
improvement minimum distortion encoding algorithm 
ieee communications oct 
bentley 
trees point sets 
proceedings sixth acm annual symposium computational geometry pages june 

optimal algorithm closest pair maintenance 
annual acm symposium computational geometry pages june 
callahan kosaraju 
algorithms dynamic closest pair body potential fields 
proceedings th acm siam symposium discrete algorithms pages 
clarkson 
algorithm approximate closest point queries 
proc 
tenth annual symposium computational geometry pages 
cleary 
analysis algorithm finding nearest neighbours euclidean space 
acm transactions mathematical software june 
munro 
average case selection 
acm 
edelman 
representation similarity chorus prototypes 
minds machines feb 
faloutsos barber flickner hafner efficient effective querying image content 
journal intelligent information systems integrating artificial intelligence database technologies july 
friedman bentley finkel 
algorithm finding best matches logarithmic expected time 
acm transactions mathematical software sept 
gavrila 
tree index optimization 
waugh healey editors advances gis research 
taylor francis 
cs tr university maryland college park 
guttman 
trees dynamic index structure spatial searching 
proceedings acm sigmod international conference management data pages june 

distance scan algorithm spatial access structures 
nd acm workshop advances geographic information systems pages gaithersburg maryland dec 

widmayer 
lsd tree spatial access multidimensional point non point objects 
proc 
th international conference large data bases pages 
hoare 
algorithm partition algorithm quicksort algorithm find 
communications acm 
jain 
chapter image transforms 
fundamentals digital image processing pages 
hall 
jain pentland petkovic 
workshop report nsf arpa workshop visual information management systems 
held iccv 
available www vision ucsd edu papers html june 
ma manjunath 
image indexing texture dictionary 
proc 
spie volume oct 
manjunath 
image browsing alexandria digital library adl project 
lib magazine aug 
musser 
stl tutorial guide programming standard template library 
addison wesley publishing reading ma 
musser stepanov 
algorithm libraries 
software practice experience july 
niblack barber equitz flickner qbic project querying images content color texture shape 
proceedings spie storage retrieval image video databases volume pages feb 
stonebraker 
chabot retrieval relational database images 
ieee computer sept 
pentland picard sclaroff 
photobook tools content manipulation image databases 
proceedings spie storage retrieval image video databases ii san jose ca volume pages feb 
paliwal 
fast dimensional tree algorithms nearest neighbor search application vector quantization encoding 
ieee transactions signal processing mar 
rivest 
optimality elias algorithm performing best match searches 
information processing pages 
robinson 
tree search structure large multidimensional dynamic indexes 
proceedings acm sigmod international conference management data pages apr 
schroeder 
fractals chaos power laws minute infinite paradise 
freeman new york 
sproull 
refinements nearest neighbor searching dimensional trees 
algorithmica 
stroustrup 
programming language 
addison wesley publishing reading ma second edition 
tomasi guibas 
image descriptions browsing retrieval 
arpa image understanding workshop 
turk pentland 
eigenfaces recognition 
journal cognitive neuroscience 
white jain 
similarity indexing ss tree 
proc 
th ieee international conference data engineering new orleans louisiana feb 
accepted publication available www vision ucsd edu papers 
start entry entries entries new internal tree levels start entries level means return root tree entry entries root returned entry delete entries return entry int start entries int level int size child level lo size lo entries hi entries entries size start stl convention points location element size bucket size entries start return calculate aka child subtrees capacity size bucket size child level faster lookup table possible values child level int log size bucket size log internal fanout int bucket size pow internal fanout child level lo size start size lo entries start start lo size entries child level hi entries start lo size entries lo entries child level entries lo entries hi entries create new node needed level jj child level level entries entries entries entries return entries int start int size int int lo size size calc aka int split dim start split dim start lo size return lo size algorithm routines tree creation 
