framework network protocol software hermann glue software engineering ch bern switzerland fax phone glue ch ralph johnson dept computer science university illinois springfield ave urbana il phone johnson cs uiuc edu robert engel tech ag ch bern fax phone engel tech ch writing software control networks important difficult 
efficient reliable flexible 
conduits framework network software implement signalling system multi protocol atm access switch 
earlier version implement tcp ip 
reduces complexity network software easier extend modify network protocols sufficiently efficient 
conduits shows power object oriented framework common object oriented design patterns 
protocol stack usually implemented layered software architecture 
example tcp sits top ip sits top ethernet driver see 
layer communicates layers 
requests move stack users network back users 
hard build individ asynchronous transfer mode copyright fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage new copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
ual layers replaced replacing ip slip layered architecture address reusability layers 
layer requires new implementation different layers common 
arp ip tcp udp ethernet ftp telnet tcp ip stack 
key problem designing reusable communication protocol software factor common structure behavior protocol specific parts 
solving problem results software components reused source code modification variety different protocol implementations 
shows achieve applying number previously described object oriented design patterns 
additional benefits ffl protocol specific software parts simpler easier maintain evolve framework provides infrastructure operations 
serial line internet protocol ffl result framework network protocol software words generalized software architecture communication protocols 
documenting framework helps communicate underlying model works 
conduits example black box framework framework components reused composing instances johnson foote 
contrast white box framework components reused inheritance 
white box frameworks get name fact users tend know implementation components reuse 
black box frameworks usually easier white box frameworks harder design 
black box frameworks started white box frameworks gradually evolved compositional 
conduits designed way 
describes conduits evolved white box framework case study design frameworks 
describe evolution conduits terms sequence design patterns 
design patterns descriptions communicating objects classes customized solve general design problem particular context 
design patterns described gamma describe detail 
describe problem solve design results applied 
patterns useful way describe design framework beck johnson 
graphic notation depict architecture similar booch object diagrams booch 
object scenario notation invented glue software engineering primarily teaching objectoriented software engineering metz developing framework extensively communicate document design situations shown lot expressive power 
conduits commercial product 
shows evolutionary development framework commercially viable design patterns useful commercial projects 
basic framework architecture framework sorts objects conduits information chunks 
conduit software component distinct sides sidea sideb 
conduit may connected sides conduits neighbor conduits 
conduit accepts chunks information neighbor conduit side delivers conduit opposite side 
conduits bidirectional neighbors send information 
sidea sidea sidea sidea sideb sideb sideb kinds conduits 
kinds conduits neighbor sidea 
mux neighbors sideb adapter neighbor conduit sideb protocol exactly 
vague term information chunk flows conduits 
specific section refine basic framework architecture reusable 
layer protocol stack implemented conduits 
tcp ip stack contain conduits tcp ip atm signalling stack contain conduits signalling atm adaption layer actual layer signalling call control layer responsible call routing 
information chunks tcp ip stack include ethernet ip tcp packets 
addition information chunks represent operations opening closing channel 
atm switch transfers data hardware information chunks atm signalling stack represent operations 
originally considered strictly vertically stacked layers communication protocols called sides conduit upper lower 
conduits interconnect stacks information chunks travel upwards moved top second stack flow network 
inter working conduit horizontal proving upper lower sides sense 
conduits may asymmetric structure behavior 
new terminology lets reuse conduit upside getting confused 
mux mux conduit connects sidea conduit number sideb conduits 
mux multiplexes information chunks arriving sideb single neighbor conduit connected sidea 
information chunks sidea neighbor conduits connected sideb 
sideb instance variable mux denotes multi valued variable realized trough appropriate collection class list map 
layer protocol stack contain mux 
example tcp ip stack ethernet layer contains mux connect low level protocols arp ip ip layer contains mux connect ip udp tcp tcp layer contains mux connect clients ftp telnet 
mux layer ethernet need add new sideb conduits dynamically low level protocols ethernet usually specified operating systems kernel built 
mux tcp layer able add new connections dynamically 
important easy install disconnect sideb conduits 
mapping type communication protocol similar 
mux able extract dispatch address information chunk arriving sidea demultiplex information chunk neighbor conduits sideb 
example mux ip layer extract service identifier ip message tell dispatch tcp udp atm signalling system dispatch information chunks conduits representing individual calls call 
opposite direction mux provide identifier represents sender sideb conduit label information chunk multiplexes 
protocol communication protocol described finite state machine fsm implemented protocol conduit information chunks produced consumed tested 
protocol remembers current state communication 
provides commonly required facilities counters timers storage information chunks temporarily retained 
protocol exactly neighbor conduit connected sides 
sideb sidea sideb sidea sideb sidea sidea sideb 
protocols mux 
general single layer protocol stack implemented conduits specialized single role 
example tcp layer really consists protocol conduit implement protocol mux dispatch packets tcp connections 
layer protocol stack string conduits 
terms address identifier index dispatch key session key mean thing different situations 
important design problem add new sideb conduits mux 
design problem mux information chunk sidea addresses non existing conduit sideb 
solve problems giving mux default conduit neighbor conduit connected sideb mux dedicated channel 
mux exactly default conduit zero sideb conduits 
ip layer information chunks sent default conduit illegal service identifiers default conduit logs errors responds 
atm signalling systems information chunks delivered default conduit indicate new call commonly new session needs established default conduit install new sideb conduit 
sidea sideb 
sidea sideb sideb sidea create sideb sidea mux default conduit 
architecture see create install new sideb conduits mux conduit factory default conduit mux 
new session set information chunk received sidea mux delivered default conduit channel 
arrives conduit factory installs new instance required session protocol sideb mux 
information chunk mux previously unable handle revisit mux correctly just installed protocol conduit 
time information chunk session key arrives mux directly handed new session protocol 
dashed line originating denotes global class object 
operation create applied class protocol produce instance 
adapter adapter kind conduit neighbor conduit sideb 
sidea connected conduit 
adapter conduit interface framework software hardware 
sideb implementation usually specific particular software hardware environment 
example ethernet conduit adapter hardware client conduit adapter application programs wanting client 
adapter converts information chunks external stream oriented format 
simply interface library written registering call back function library offering sideb function accepts stream read 
summary architecture model conduits divides network protocol implementation parts process information conduits parts represent information processed information chunks 
conduits basic interfaces connecting conduits neighbors accessing neighbors handling information chunks 
conduits share interfaces 
argue separating function data object oriented conduits uses object oriented techniques heavily 
uses inheritance organize hierarchy conduits 
class conduit subclasses mux protocol adapter may subclassed 
second uses polymorphism possible connect kind conduit 
long conduit dashed lines global relations depict classes modules assumes neighbors support conduit interface kind conduit connect 
sideb sidea sidea sideb 
sidea sideb sidea sideb sidea sideb sidea sidea sidea sideb 
typical conduit graph 
conduit connected kind conduit build arbitrary graphs simple components 
information chunks flow conduit graph cause state changes protocol conduits 
shows example conduit graph implement layer signalling protocol atm engel 
design patterns improve architecture architecture described previous section reusable extendible 
particular naive implementation architecture require subclassing protocol define specified itu new state machine subclassing mux specify addresses extracted information chunks subclassing describe kind conduit added sideb conduit mux 
problems solved existing design patterns resulting blackbox framework elegant highly reusable easily extendible 
patterns mux example composite pattern adapter example adapter pattern 
patterns obviously design patterns provide flexible solution model problem domain better 
strategy pattern want able reuse mux class different places conduit lattice 
need configure mux dispatch criteria 
call components accessors access relevant dispatch key information chunk 
new conduit installed sideb mux needs new session key policy 
session key generator hidden accessor 
mux accessor responsibilities 
compute index sideb conduit current dispatched 
compute index new sideb conduit 
mux handle information chunk arrives sidea accessor get index sending information chunk sideb conduit index 
delivered method parameter 
passed method 
avoid cluttering diagram lines short name ic indicate 
gets information chunk invokes method 
separating algorithm object uses algorithm called strategy pattern 
ic sidea sideb 
sideb sidea ic 


strategy pattern object scenario 
intent strategy pattern algorithm strategy vary independently clients 
mux context strategy accessor plays role strategy 
accessors difference different mux objects different layers protocol stack mux longer subclassed 
mux accessor created 
knows extract field tcp message information chunk 
atm signalling system fetches call number gets various parties point situation 
state singleton command patterns concert communication protocol usually realized extended finite state machine fsm 
changes state receives timer expires 
protocols implemented state pattern means state protocol represented separate object 
protocols delegate behavior state object letting protocol change behavior state changes 
protocol changes state replacing old state object new 
state pattern design pattern book gamma gives broad interface context protocol state object state 
interface operation possible event 
tcp protocol conduit operations send delegate operations state object 
different protocols respond different sets events give different protocols different interfaces limiting reusability protocol 
version state pattern protocol conduit reusable 
protocol offers just method method accept information chunks 
information chunk interacts state object usually invoking protocol specific operations 
state offers relatively broad interface information chunks protocol narrow interface 
protocol information chunk performs apply operation information chunk giving state object protocol arguments 
information chunk implements apply operation invoking operation state object 
sidea sideb toa rm 

accept rm 
release rm 
rm cs rs instance 
rs apply cs state state singleton command pattern interactions 
raw information chunks just arrays bytes appropriate define operations apply 
introduce new class messenger contains information chunk defines apply operation 
messenger represents event operation going invoked fsm protocols encounters passed graph conduits 
example command pattern 
purpose command pattern encapsulate request class object manipulated way 
command pattern lets conduit handle messenger passing neighbor conduit 
protocol conduits handle messengers applying current state object 
done directly language requests invoke methods class representation requests passed 
communication system probably large number protocol objects time state objects sharable 
implies immutable 
means store mutable variables timers counters protocol object manipulate state object 
protocol requires new state class hierarchy new derived class state finite state machine 
instance state class sense singleton pattern state classes 
exactly instance state class dynamically created destroyed 
shows messenger interacts protocol state object 
messenger represents release operation 
arrives sideb applied current state cs sets timer number msec changes state protocol cs rs proceeds neighbor sidea 
note definition protocol responds release command state cs implemented class 
general protocol specific code state classes messenger just invoking single operation state 
messenger state classes protocol specific 
state classes usually reusable communication application messenger classes 
class state tightly coupled messenger classes implement operations perform 
notice messengers states ingalls 
dispatch messenger performs second dispatch state 
eventual function state depends class messenger class state 
exactly situation expect transition fsm 
visitor pattern typical messenger routed mux gets protocol interacts state 
operations traverse conduit graph differently especially conduits added removed mux 
alternative add new kinds accept operations conduit defeat purpose command pattern 
alternative messenger responsible traversing conduit graph couple messenger conduit 
messenger class hierarchy strongly coupled state classes protocol specific better capture reusable algorithms separate class 
visitor connected releasing protocol state messenger tob toa apply conduit accept mux setup release alerting tob toa 
state sender framework class collaboration graph 
solution problem visitor pattern 
intent visitor pattern represent operation performed elements object structure case conduit graph 
visitor lets define new operation conduits changing classes conduits 
making operations conduits subclasses class visitor 
conduits deal visitors depend messenger hierarchy 
visitor subclasses 
carries messenger conduit graph 
visitor subclasses help change conduit graph 
kind visitor usually originates conduit factory 
installs conduit object mux sideb encounters 
presents framework important classes form class collaboration graph wirfs brock 
visitor arrives conduit accept operation invoked previous conduit 
conduit performs operation visitor indicates class conduit 
mux performs operation protocol performs operation 
visitor gets know conduit subclass method invoked 
argument type pointer subclass visitor able invoke specific subclass methods argument 
method 
method available subclass mux invoked method 
visitor decides appropriate action conduit type type additional information carries 
encounters mux traverse calls toa tob depending direction 
encountering protocol apply messenger protocol current state object 
visitors may behave differently encountering kind conduit 
messengers commands states visitors thought commands conduits 
messengers just execute method sidea sideb mt 
am sender sideb sidea 
accept mt 
alerting am rs apply rs rs 
encounters protocol sidea 
name target state object visitors may different things kind conduit encounter 
effect messenger state transition determined state effect visitor conduit decided visitor 
trade new states new messengers new visitors new conduits 
visitor pattern powerful command pattern visitor may initiate appropriate kind conduit encounters 
visitors traverse conduits directions 
way accomplish give conduits kinds accept operations 
kind pass visitor side 
complicates conduit graphs may assembled previous conduit know connected sidea sideb neighbor conduit 
conduits kind accept operation visitors responsible traversing conduits 
approach visitor subclasses 
lead subclasses deal interconnected sidea 
real notion direction traversal just going opposite side visitor ar rived 
visitor knows previous sender conduit arrived conduit sidea determine opposite side 
conduits invoke method visitor pass sidea neighbor conduit parameter 
complexity added visitor pattern compensated fact visitor travel string conduits encountering destination kind conduit 
particular easy implement switching routing functionality see section 
prototype pattern conduit factory parameterized kind conduits creates 
easy solution conduit factory define function creates conduits factory method pattern require new subclass new kind conduit factory 
better solution conduit factory prototypical conduit copies needs create new 
example prototype pattern specifying kinds object create prototypical instance 
prototype pattern requires conduits able copy 
permits conduit factories specified parameterizing instance conduit graph example conduits installed mux needs new sideb 
call routing atm signalling system atm fast rely software switch data 
result atm separates signalling information data traffic software handling signalling information hardware switching data 
atm software steers data controlling switch 
keeps track state calls changes switch calls change state 
data flowing conduit graph conduit graph stores state calls path conduits call 
difficult problems applying conduits atm software handling call routing 
atm switch typically supports trunks call originate trunk trunk 
trunks connected crossbar switch mux switch switch 
conduits represent situation 
object scenario shows simplified version initial conduit graph call handling routing atm signalling system 
trunks shown number 
mux top specialized visitor establish new connections trunks 
note connected conduit factories trunk mux 
tm sidea sideb sidea sidea sideb link lp sidea sidea sidea sideb link lp sidea sideb tm tm sideb cf cf sideb sideb sidea trunk orig sidea trunk dest initial conduit graph trunks active calls 
initially calls progress established trunk system adapter link protocol lp lp mux conduit factory 
new call create string new conduits 
suppose new call initiated trunk 
adapter creates arrive conduit factory cf multi protocol atm access switch able handle point multipoint connections 
basically involves demultiplexing stage 
create install new protocol sp layer signalling followed new protocol cp conduits instances single protocol class 
protocol specific behavior caused configuring new protocols suitable state objects 
conduit factory installs string conduits objects shown installs side conduit string 
sidea protocol sp interconnected sideb lower mux trunk sideb cp protocol connected sidea top mux tm 
intermediate result visualized object scenario 
sidea sidea sideb link sideb lp sidea sp sidea cp sidea sidea sidea sideb link lp sideb sidea sideb tm tm sideb tm sidea sideb sideb create cp 
sender trunk orig sidea sidea cf cf 
accept cc accept cc 
sideb cc cf cp trunk dest routing call trunk 
visit protocol sp protocol cp 
call routed origin trunk destination trunk 
protocol cp responsible initiate 
sets path destination trunk creating special visitor called remembers cp protocol created destination trunk id cc sent cp protocol sideb immediately visiting top mux tm point dispatched conduit factory cf correct destination trunk 
point ask destination conduit factory provide new destination conduit string mechanism origin 
leads creation new signalling protocol sp new call control protocol cp shown object scenario 
establish interconnection protocol conduits cp cp 
remembered origin cp protocol continue carried sideb protocol sideb destination cp protocol eventually destination protocol stack adapter destination trunk 
sidea sidea sideb link sideb lp sidea sp sidea cp sideb sidea sidea sidea sideb link lp sideb sideb sidea sidea sideb sp cp sidea sideb tm tm sidea sideb tm sideb trunk orig sidea sidea trunk dest cf cf sideb final interconnected conduit path new call 
operations atm signalling system straightforward 
example call released entire conduit string origin mux destination mux destroyed 
release request may initiated parties connected call 
protocol conduit usually handle event gracefully fsm 
conduit destroyed inform neighbor conduits sidea sideb object class kind visitor 
object remove neighbor conduit dying conduit 
framework evolution related framework started white box framework relied heavily inheritance gradually black box 
conduits originally designed jonathan zweig ms thesis zweig johnson implement tcp ip 
version separate mux protocol visitor pattern 
kind conduit required separate subclass adding new protocols required development testing 
excellent source inspiration just object technology kernel group language protocol implementations called morpheus abbott peterson 
authors claim morpheus benefits duplicated adding predefined classes general object oriented language lack knowledge common patterns protocol operation invocation morpheus exploits optimize 
framework achieve execution efficiency special purpose programming language offers similar easily extensible compositional facilities 
important advantage implemented standard compiler 
september team tech started design atm signalling software conduits starting point 
team small member extensive experience object oriented technology january framework implement layer atm signalling protocol 
framework undergone number major revisions extensions implement multiple layers signalling system flexible multi protocol atm access switch marketed today 
version itu signalling protocol implementation specification 
approved version introduced mainly new feature 
feature required link protocol lp able issue signalling protocol instances sp 
glance requires just minor extension 
classical approach easy broadcast control information currently running protocol instances 
framework solves problem adding 
special behavior encounters mux sidea 
demultiplexing sideb conduit broadcasts conduits connected sideb mux 
effort design implement test extended feature week 
certainly refinements come 
currently hardest question factor slight differences network user side protocols upwards compatible revisions protocols protocol variations different standard bodies itu atm forum incremental feature sets added demand protocol 
currently investigating solutions permit higher levels reuse area states messengers 
new protocols require creating new state classes 
conduits visitors messengers usually reused 
state classes regular predictable interfaces constructed automatically higher level specifications itu 
prototype specified graphs conduits initial protocol stack graph conduits 
specified graphically 
possible create protocol builder sense object oriented interface builders 
software network protocols meets international specs quite complex hard build 
shown segregate reusable infrastructure black box components cohesive framework encapsulate protocol specific parts extra classes relatively easy build maintain 
design developed steps 
particular reuse problems led design patterns solved 
result components framework protocol independent 
means framework concentrate just part framework needs customized pay attention rest 
leads framework easier learn 
concentrated architectural model design patterns improve flexibility reuse potential 
issues faced designing framework 
questions memory management policies scheduling potential parallel activities execution efficiency testing facilities important solutions problems explained 
design continue improve proven worth 
allowed small group develop complex software short amount time allowed rapidly change software track proposed standards revised 
toni walter erich gamma brian foote philippe lennart constructive comments earlier drafts 
abbott peterson 

language approach protocol implementation 
ieee acm transaction networking 
beck johnson 

patterns generate architectures 
european conference object oriented programming pages bologna italy 
springer verlag 
booch 

object oriented analysis design applications 
cummings 
engel 

signalling atm networks experiences object oriented solution 
international phoenix conference computers communications 
ieee 
gamma helm johnson vlissides 

design patterns elements objectoriented software 
addison wesley 
metz 

teaching objectoriented software architecture example games factory 
oopsla educators symposium proceedings 
acm 
ingalls 

simple technique handling multiple polymorphism 
sigplan notices 
itu 
recommendation specification description language 
itu 
johnson foote 

designing reusable classes 
journal object oriented programming 
wirfs brock wilkerson wiener 

designing object oriented software 
prentice hall 
zweig johnson 

conduit communication abstraction 
usenix conference 
usenix 

