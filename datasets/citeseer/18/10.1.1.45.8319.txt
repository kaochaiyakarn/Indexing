proceedings th international symposium industrial robots robot programming demonstration rpd machine learning user interaction methods development easy comfortable robot programming systems nch kaiser university karlsruhe institute real time computer systems robotics 
karlsruhe germany robot programming demonstration intuitive method program robot 
programmer shows particular task performed interface device allows measurement recording human motions parameters relevant perform demonstrated task 
presents analysis learning interaction requirements characteristic rpd system 
requirements new system architecture proposed supports phases interactive programming process 
example task experimental results 
keywords programming demonstration man machine interface machine learning 
due costs involved development maintenance robot programs automatic programming techniques programming human demonstration pbd currently attracting lot interest 
learning capabilities continuously attractive robotic researchers machine learning techniques applied levels robot planning control 
integrated architectures contain learning performance component topic ongoing research 
quite obvious developments seen closely interrelated learning capabilities required increase robot ability interact human operator perform operations autonomously 
hand interaction implicit knowledge operator help guiding learning processes order achieve satisfactory results 
describes basic requirements concerning application machine learning role user interaction rpd system light task rpd system solve 
section gives brief overview rpd section deals role machine learning user interaction rpd system 
requirements analysis architecture rpd system proposed section 
section describes experiments prototypical implementation showing validity proposed concepts 

robot programming demonstration idea programming demonstration pbd specify task solutions describe knowledge general explicitly programming detail demonstrating examples task problem solution 
leads easier natural way adapting automatic system kind user needs 
fact paradigm pbd investigated user interfaces graphical editors office automation systems 
case system acts observer human performing tasks tries learn observations dialogs user 
user adaptive system learn typical action sequences user try apply autonomously encounters similar situation time 
applied robotics pbd considerable improvement making robot programming feasible beginners easy comfortable experts 
similar traditional robot programming different methods rpd 
user demonstrates solution commanding robot bowl master slave approach teleoperation moving real robot hand 
user demonstrates solution performing task manually robot 
cases virtual reality methods 
proceedings th international symposium industrial robots second method natural way programming couple drawbacks 
especially transformation human motions adequate robot motions difficult impossible due kinematic constraints robot enormous manipulation skills human 
contrast method enables system exactly record demonstrated solution transformation robot capabilities superfluous necessary skill learning 
manual control sensed data control actions supervised generalization autonomously executable program fig 
user role rpd general rpd user acting programmer teacher time consuming step step programming 
pushes task robot programming higher conceptual level 
interaction user system important issue 
long preprocessing generalization techniques applied fully autonomously system rely support user 

role ml user interaction rpd system machine learning degree learning necessary fulfill previously described tasks reach simple rote learning just remembering exactly user complex learning methods inductive generalization specialization deductive approaches 
possibilities limitations simply recording solution playing back way investigated years standard teach methods robots efforts apply real learning techniques 
approach mainly developed industrial users mind strong demand readability comprehensibility resulting operational knowledge 
resulting knowledge represented generalized explicit program 
programs elementary skills considered black boxes referenced inside program steps 
task learning demonstrations examples lot known ml literature 
simply applied task hand 
specific learning tasks described follows 
learning structural knowledge program structure macro operators subprograms 
learning parameter knowledge termination criteria condition parameters action parameters 
learning skill knowledge 
set traces user demonstrations segmented lists elementary operations eos major task determine general program structure 
purpose single sequence eos analyzed certain subsequences appear repeatedly 
candidates generating new macro operator 
additionally loops searched repeating sequence eos macro operators replaced explicit loop construct 
task structural induction integration example structures described general structure conditional branches 
level task mainly matching problem find correspondence eos macro operators sequence actions sequences 
main problem learning parameter descriptions 
branch loop condition eo dependency condition resp 
action parameters task example specific features determined 
problem known ml functional induction far really satisfying solutions 
generate test approach generating possible combinations function space checking applicability 
functional induction task rpd difficult investigated ml approaches set relevant variables world model task description part function description explicitly 
possibility simplify problem user interaction described section 
application pbd paradigm area robotics concerns acquisition elementary skills 
elementary skills provided robot execution elementary operations 
represent interface proceedings th international symposium industrial robots tween planning control level robot architecture 
similarly machine learning techniques supporting acquisition representation located interface subsymbolic symbolic learning 
neural networks fuzzy controllers established feasible alternatives classical control paradigms number applications generation controllers unsolved problem 
idea applying generalization technique set examples order arrive operational controller demonstrated elementary operation appealing 
task conceptually similar generation robot programs examples higher level exist lot practical differences 
probably greatest arises nature elementary operations 
sequence discrete actions control involved supervision elementary operation force controlled movement contour tracking requires learning continuous numerical function 
completeness sufficiency examples important difficult achieve task level 
bigger problems arise nonoptimal input provided user 
relatively easily detected user task level impossible classify single control inputs bad 
usually complete execution regarded bad 
assign delayed evaluation specific parts control action classical problem reinforcement learning resp 
learning delayed rewards 
problems described preliminary results area exist 
range initial generation neural network fuzzy controller base existing controller line tuning field interpretation control task markovian model direct playback compliance trajectory 
approaches lot simplifying assumptions hold reality 
possible way overcome problems better integration user system allowing supervise process especially providing new means analyze evaluate examples results produced 
user interaction important aspect concerning basic idea practical realization usability rpd system interaction user acting teacher trainer programmer system 
complete programming process generation supplement examples evaluation resulting robot program subject user control 
structure programming process task assigned user provide system examples example generation possible solutions problem 
important constraint necessity give examples form understood rpd system executed robot 
user know robot solve task able demonstrate solution implicitly resources robot 
instance user detects contact situation visually robot equipped force torque sensor user take robot perception account 
similarly user responsible providing sufficient set examples achieve desired generality 
example interpretation deal aspect system know quality examples 
control inputs sensory feedbacks recorded optimal configuration represent possible inefficient solution result incorrect demonstration 
user classify examples quality 
preprocessing examples order generate normalized representation terms existing elementary operations requires user support 
rpd system evidence concerning logical connection data recorded demonstration 
user partition data trace yielding segments identified single elementary operations 
generalization phase user guide learning process 
rpd system decide recorded action represents important part demonstration correction previously encountered error just inefficiency introduced user 
able distinguish task specific parameterization example specific parameterization 
constraints require user instruct system generalize keep existing instantiation general solution stored 
learning process rpd system produced description general solution task 
evaluation learning result done user 
possible deficiencies solution detected improved repeating parts processing chain necessary providing additional examples previously uncovered regions input domain 
proceedings th international symposium industrial robots final output rpd system directly executable robot instance robot program sequence parameterized elementary operations remain control system 
provided set examples available learning system produce optimal general solution instantiation general solution yield near optimal executable program 
practice tuning generated program user require little effort compared providing complete optimal set examples 
summarizing observations obvious interaction user system plays key role concept rpd 
phases programming process user remains highest authority 
ultimate target course autonomous rpd system examples input producing program templates executable code output 
long limited sensorial reasoning capabilities exist supervision guidance phases programming process user remain necessary 

rpd system architecture order realize rpd system different requirements arising individual phases programming process taken account 
specify functionality interfaces components rpd system main criteria design system architecture 
shows proposed solution rpd system architecture meeting requirements described 
prototypical implementation architecture realized experiments described section 
programming process starts demonstration 
user supply examples specific task ways instance directly moving robot desired path means input device joystick 
demonstrations values significant parameters position velocity tool status recorded example set parameter traces time 
parameter traces generated artificially sufficiently accurate simulation exists 
simulation usually hides important aspects real environment 
processing examples cognitive level requires normalized representation exhibit unnecessary details individual demonstration 
representation set elementary operations provided robot 
aided user analyzer scans demonstrations generates corresponding sequences elementary operations necessary control structures 
order perform operation efficient accurate possible analyzer induction unit access world model 
input tools bowl keyboard teach box robot arm teacher expert task description user system robot system kernel analyzer detection elementary operations generating normalized representation programming system knowledge base containing solutions standard representation example standard representation transformation executable robot program robot language robot language robot language controller emulation system puma simulation system induction component specialization robot commands interface trace 
solution standard representation fig 
functional architecture rpd system proceedings th international symposium industrial robots induction unit operates normalized representation examples produces generalized description covering 
general solution demonstrated kind task stored rpd system knowledge base generation executable programs processing new examples 
user support necessary phase classifying individual actions importance guiding generalization process 
generation executable program requires instantiation general solution needs real task 
instance variable locations replaced exact locations sensor guided actions appropriate limits error detection measures 
possible way achieve task simulation world robot necessary sensors 
accuracy simulation equally critical demonstration phase 
user supervision required 
learning phase thing working rpd system system initialization world model task processing learning done 
standard solution desired task knowledge base phase learning process starts demonstration example examples may follow 
analysis follows demonstration points relevant robot movement extracted redundant points eliminated reduce amount data 
trace constructed way divided separate sections 
partitioning process preprocessing data finished 
partition trace normalized format seen elementary operation 
matching trace data eo known system supported user principle done system autonomously 
partitioned pre interpreted example transformed general format allows processing single example class similar tasks 
number examples needed generalization depends strongly complexity task 
process generalization specialization divided different overlapping phases structuring solution processing single steps parameters 
system tries identify sequences eos creates macro operators 
sequence occurs preset threshold user asked sequence new macro 
agrees system replace occurences sequence macro 
process alters structure solution keeps parameters commands unchanged 
step processed detection branches loops 
phase generalization process parameters taken account determine condition loop selecting distinct branches 
phase linear data sequence transformed structured tree 
solution single demonstration structured completely solutions examples matched order find generalized solution capable solving tasks covered examples 
generalization specialization matching common features distinctions different solutions task 
main method generalization specialization condition action parameters functional induction 
moment object features input variables functional description condition resp 
action parameter searched 
far complete construction possible function space performed best approximating function 
system deals complex tasks user interaction necessary order reduce set input variables dimensionality function space 
process demonstration analysis induction shown 
result generalization specialization kind program called template representative class tasks 
integrated knowledge base similar tasks 
partitioning interpretation analyzer demonstration desired task robot control system generalization induction component knowledge base wor fig 
schematic description demonstration proceedings th international symposium industrial robots execution phase second phase user defines desired task initializes task specific parameters gets program template 
template generated phase executable program lacks data taken world model provided user 
gaps filled program complete 
executed transformed rpd system internal representation executable code 
transformation done interpreter part kernel system 
rpd system produced executable robot program programming language supported interpreter 
explicit program checked verified necessary changed extended optimized 
execution phase summarized 
selecting task completing template creating selecting world model world modeller ng ith rea robot robot control system completion execution interpreter sequence commands knowledge base programming system fig 
schematic description execution 
experimental results prototypical rpd system implemented 
section summarizes example session task twelve objects different types small large cubic boxes small large cylinders placed randomly shelves case 
possible start situation shown 
fig 
start situation example task sort objects constraint placed left right top bottom small objects small shelves large objects large shelves cubic boxes placed cylinders 
goal situation task shown 
fig 
goal situation example task chosen complexity allows prove principle correctness approach test improve system features capabilities 
extended ways system capabilities allow handle difficult tasks new objects introduced different ways sorting criteria learned 
modeling demonstration task task selected world model generated objects modeled placed shelves case 
model saved restored demonstration course 
model created user demonstrate solution specified task 
order write trace actions performs robot moving manipulator opening closing gripper start timer initializing recording selected data 
depending task perform user experience sample rate timer set desired value 
usually sample second yields results 
proceedings th international symposium industrial robots mentioned ways demonstrate task robot 
example bowl chosen allows precise easy control robot arm 
small part trace recorded experiment described shown 
includes values bowl world frame robot tcp values joint positions forces torques stored 

analyzing trace step trace filtered transformed loaded rpd system 
thresholds set influence process filtering zero movements depends sample rate tracer 
transformation process data trace compared positions objects described world model especially key events close gripper occur 
parameters commands building solution altered position objects obtained world model 
result list elementary operations defined system standard description language processing 
small section list parameters shown rel set gripper moves rel rel moves abs moves abs rel moves rel set gripper rel structuring list currently done establishing macro operators eos 
process described section aspect mentioned regards list eos represents structured tree commands creation macros proposed system accepted user creation macros deterministically guided user specific needs 
fig 
solution generation macros 
executing solution solution tree shown screen saved file executed robot 
execution modes available allow testing real execution 
parameters executable commands partly taken trace partly world model depending respective commands 
output produced test mode representing sequence parameters shown peo rel peo set gripper peo moves rel peo rel peo abs peo abs peo abs peo abs peo rel peo moves rel peo set gripper peo rel 
application programming demonstration pbd robotics resulting robot programming demonstration rpd expected lower costs robot programming significantly whilst increasing flexibility portability robot programs 
integration machine learning techniques integration user interaction push actual programming higher conceptual level 
long steps necessary transform example template suitable processing execution performed fully autonomously user remain central part concept 
done concentrate automatization preprocessing generalization steps 
new methodologies support automatic analysis examples suitable feedback performance component robot elementary skills programming system investigated 
proceedings th international symposium industrial robots supported siemens ag nchen germany 
dr dr kind cooperation 
prototype system developed university karlsruhe institute real time computer systems robotics 
archibald 
computational paradigm creating executing robot skills 
proc 
th int 
symp 
industrial robots 
tokyo 
mitchell 
office automation systems programmed users 
proc 
rd annual conf 
german association computer science 
dresden germany 
giordana 
smart multistrategy learning tool 
proc 
int 
joint conference artificial intelligence ijcai chambery france nch 
programming demonstration robotics study 
universit karlsruhe institut und 
karlsruhe 
german 
latombe 
approach automatic robot programming inductive learning 
brady paul editors proc 
robotics research international symposium 
mit press 
falkenhainer michalski 
integrating quantitative qualitative discovery abacus system 
kodratoff 
eds 
machine learning artificial intelligence approach vol 
morgan kaufmann publishers 

hein thomas 
aid shell building highly interactive adaptive user interfaces 
proc 
int 
joint conference artificial intelligence ijcai 


demonstration programming focussing attention robot task acquisition 
research report nr 
department computer science 
university calgary 
ikeuchi 
assembly plan observation 
part 
proc 
ieee int 
conf 
robotics automation 
nice 
kaiser wallner 
machine learning enhancing mobile robot skills 
proceedings madrid spain 
kaiser 
time delay neural networks robot control 
submitted symposium robot control capri italy 

application machine learning robotics analysis 
proc 
nd int 
conf 
automation robotics computer vision 
singapore ro 
ro 
und cord 
applications symbolic learning methods robotics 
bericht der fakult informatik 
universit karlsruhe 
german und hauser 
new system architecture applying symbolic learning techniques robot manipulation 
proc 
ieee rsj conference intelligent robots systems yokohama 
kuniyoshi inaba inoue 
seeing understanding doing human task 
proc 
ieee int 
conf 
robotics automation 
nice 
langley search regularity aspects scientific discovery 
michalski 
eds 
machine learning ai approach vol 
morgan kaufmann publishers 

programming demonstration basis auto customizable workstation software 
proc 
workshop intelligent workstations professionals 
ed 
nchen springer 
scott shavlik ray 
refining pid controller neural networks 
advances neural information processing systems denver 
machine learning robot assembly plans 
kluwer academic publishers 
sutton 
learning predict methods temporal difference 
machine learning vol 
pp 

trajectory reconstruction stereo image sequences teaching robot paths 
proc 
th int 
symp 
industrial robots pp 
tokyo 
watkins 
learning delayed rewards phd thesis university cambridge yang xu chen 
hidden markov model approach skill learning application telerobotics 
proc 
ieee int 
conf 
robotics automation atlanta georgia 
