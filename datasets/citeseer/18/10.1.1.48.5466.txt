sato efficient propositional prover zhang department computer science university iowa iowa city ia usa cs uiowa edu sato satisfiability testing optimized propositional prover davis putnam method major practical methods satisfiability sat problem propositional logic 
report sato appeared 
constantly add new techniques sato efficient 
major motivations develop sato attack open latin square problems 
sato works latin square problems previous versions classes sat problem 
fall effort improve sato works large set sat problem 
discuss briefly techniques effective improve sato performance 
splitting rules conflict analysis 
techniques known community real challenge integrate techniques weakening 
happy report techniques integrated techniques previously implemented sato 
discussions assume reader familiar propositional logic davis putnam method 
important place heuristics may inserted davis putnam method choice literal splitting 
known different splitting rules performance davis putnam algorithm different magnitude orders 
sato provides popular splitting rules rule works particular class sat instances 
instance study quasigroup problems rule better choose literal shortest positive clauses positive clause clause literals positive 
hand proved effective splitting rule choose variable value maximal plus number occurrences literal binary clauses 
tried combine rules follows number shortest non horn clauses current set 
collect variable names appearing da ne shortest positive clauses 
choose pool variables maximal value 
mixed rule worked quite percentage non horn clauses input multiplied 
splitting rule adjusts various input clauses 
supported part nsf ccr ccr 
intelligent backjumping extensively studied search procedures solving constraint satisfaction problems 
sat problem special case constraint satisfaction researchers applied technique davis putnam method 
basic idea simple literal assigned true method splitting rule active unit propagation passive 
empty clause backtracking needed 
point may collect active literals played role making empty clause 
current active literal belong set need try second truth value literal 
called intelligent backjumping 
order avoid collection set literals stage search may save disjunction negations collected literals new clause system 
silva idea davis putnam method reported experimental results 
implemented idea self adjusting splitting rule latest version sato sato 
technique creating new clauses improve performance 
fact certain sat instances performance worse prover spends time memory storing new clauses 
important parameter greatly affects performance maximal length newly created clauses allowed saved 
participants second dimacs implementation challenge collected large set sat instances different application areas 
set sat instances called dimacs benchmarks available internet 
table experimental results sato dimacs benchmarks comparison state art publicly available sat provers including grasp posit sat latest version tableau dpl 
cpu times provers obtained 
times scaled equivalent cpu times sun sparc machine test program provided dimacs comparing different machine architectures 
column table class names sat instances 
number class name number instances class 
classes problems dimacs benchmarks included table par instances instances instances 
reason provers listed table solve instance classes seconds cpu time 
entry incomplete propositional provers gsat excluded instances unsatisfiable 
execution times sun sparc seconds respectively 
sato compiled gcc option sgi onyx machine 
run times machine 
grasp posit sat dpl sato sato prob 
aim aim aim bf dubois hanoi hole ii ii ii par par ssa table 
experimental results dimacs benchmarks table number cumulated cpu time spent prover class problems prover solve instance seconds assumed cpu time seconds second number number instances solved prover class 
sato denotes sato sato denotes sato 
older version sato intelligent backjumping self adjusting splitting rule 
experiment sato maximal length newly created clauses allowed saved 
apparent sato significantly faster sato dimacs benchmarks classes ii hole 
fact comparing provers listed table performance sato best second best class problems par 
code sato available world wide web www cs uiowa edu sato html 
barth davis putnam enumeration algorithm linear pseudo boolean optimization technical report mpi max plank institut fur informatik 

crawford auton experimental results cross point satisfiability problems 
proc 
th national conference artificial intelligence aaai pp 


davis logemann loveland 
machine program 
communications association computing machinery july 

dubois andre carlier sat versus unsat see 

freeman improvements propositional satisfiability search algorithms 
ph dissertation dept computer science university pennsylvania 

johnson trick eds 
second dimacs implementation challenge dimacs series discrete mathematics theoretical computer science see dimacs rutgers edu challenges 
mcallester outlook truth maintenance ai memo mit ai laboratory 

efficiency stability hypergraph sat algorithms see 

silva sakallah conflict analysis search algorithms propositional satisfiability 
technical reports cadence european inesc lisboa portugal may 

stallman sussman forward reasoning dependency directed backtracking system computer aided circuit analysis 
artificial intelligence vol 

stephan brayton sangiovanni combinational test generation satisfiability memo 
ucs erl dept electrical engineering computer science university california berkeley oct 

zhang sato decision procedure propositional logic 
association automated reasoning newsletter march 

zhang hsiang distributed propositional prover application quasigroup problems 
appear journal symbolic computation 

zhang stickel 
implementing davis putnam algorithm tries 
technical report dept computer science university iowa 
article processed macro package llncs style 
