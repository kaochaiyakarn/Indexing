generic programming extension haskell ralf hinze institut ur informatik iii universit bonn bonn germany ralf informatik uni bonn de www informatik uni bonn de ralf functions de ned completely generically datatypes 
examples include pretty printers show parsers read data converters equality comparison functions mapping functions forth 
proposes generic programming extension enables user de ne functions haskell 
particular proposal aims generalizing haskell deriving construct commonly considered de cient instance declarations derived prede ned classes 
generic de nitions derived instances speci ed arbitrary user de ned type classes classes type constructors rst order kind 
generic polytypic programming aims relieving programmer repeatedly writing functions similar functionality di erent datatypes 
typical examples socalled generic functions include pretty printers show parsers read functions convert data universal datatype bit strings character strings xml documents equality comparison functions mapping functions map forth 
proposes generic programming extension haskell enables user de ne functions completely generically datatypes including nested datatypes mutually recursive datatypes datatypes involving function spaces 
central idea parameterize function de nition type type constructor de ne function induction structure types type constructors 
interestingly haskell provides rudimentary form genericity 
derivable class methods seen simple examples generic functions 
deriving construct instance declarations collections class methods automatically generated ned datatypes 
haskell programmer probably uses mechanism derive instance eq show instances show methods newly de ned datatypes 
matters stand deriving construct su ers drawbacks 
de nitions generic functions hard wired various haskell compilers 
implies particular libraries contain derivable classes ix special status haskell compiler know details code 
clearly undesirable situation 
furthermore derived instances informally de ned haskell report appendix 
instance section report contains statement 
precise de nition derived read show instances general types scope report 
second instances derived prede ned classes 
user modify existing derivable classes instance adapt show needs de ne derivable classes 
deriving user de ned types fact known 
instance datatype parameterized type constructor data twice twice deriving eq show fails general 
reason failure quite fundamental explained section 
augment haskell generic de nitions problems overcome 
meaning derived instances precise appendix instance precisely de nes generic show method user de ne derivable classes instances derived datatypes de nable haskell 
rest take brief look generic de nitions 
mentioned basic idea generic function parameterized datatype de ned induction structure types 
types introduced haskell data construct essentially sums products 
components product may depend user de ned datatypes primitive types char int 
example consider datatype polymorphic binary trees constructor bin contains additional size eld 
data tree tip bin int tree tree structure de nition explicit writing sums products 
tree int tree tree abbreviation unit type 
equation explicit tree binary sum rst component sum tuple second tuple represented nested binary product 
likewise datatypes decomposed binary sums binary products primitive types 
consequently de ne function generically datatypes su ces specify action binary sums binary products primitive types 
example equations de ne generic function encode converts elements type bit strings implementing simple form data compression 
data bit encode bit encode encode char encode int encode left encode encode right encode encode encode encode rst parameter encode type argument 
type signature explicit type encode depends type argument de nition proceeds case distinction equation char int equations 
note serve abbreviations prede ned types de nitions 
data data left right data consider equation encode turn 
encode single element bits required 
characters integers encoded primitive functions existence assume 
encode element sum emit bit constructor followed encoding argument 
encoding pair concatenation component encodings 
de nition compress elements arbitrary datatypes 
instance encode tree char type tree char bit compresses binary trees character labels 
rest organized follows 
section introduces various forms generic de nitions sketches semantics 
section explains blend generic de nitions haskell type classes 
particular show de ne derivable type classes 
section presents examples generic functions 
section reviews related section concludes 
appendix details necessary changes syntax appendix lists modi cations standard prelude standard libraries 
note describes generic programming extension primarily user point view 
theoretical background extension described companion 
furthermore note extension implemented plan near 
generic de nitions type indexed values generic function generic value de ned inductively terms generic values 
prototype inductive de nition 
char int 

type signatures mandatory generic values 
fact type argument appears left hand side signature identi es indexed type 
equations employ pattern matching types 
type patterns left hand sides restricted type expressions form ak type constructor applied type variables 
ak distinct 
inductively de ned recursive calls corresponding right hand sides form type variables 
ak generic values usually de ned types 
instance encode compress functions numbers 
exhaustive generic de nition include cases cases cover data declarations additionally primitive types de ned data declaration 
dozen primitive types standard prelude de nes char double float int integer io ioerror standard libraries provide array permissions 
generic value instantiated applied simply calling appropriate type argument may arbitrary type expression 
require type expression closed may contain type variables 
generic values de ned terms generic values 
example consider function dump writes elements type binary format le maps bit value character splits list argument list lists length element may length smaller 
dump io dump map encode note type signature mandatory type parameter dump omitted 
type arguments general needed disambiguation section provides example follow design principle value type dependencies explicit 
general non inductive de nition form 


type variable 
right hand side de nition may involve calls generic values 
type arguments may contain type variable type variables 
semantics section gives brief account semantics generic de nitions 
note generic de nitions operate binary sums products 
design decision dictated pragmatic concerns 
generic de nitions ary sums products tting closely datatype declarations 
appears ary type constructors awkward 
precise ary sums products translated binary ones 
roughly speaking right hand side datatype declaration 
cn translated type expression cn de ned follows 
tn bn bn tn translation essentially creates balanced expression tree 
instance mapped 
generic de nitions notable exception encode decode see section insensitive translation ary sums 
encode translation scheme sensible choice unbalanced list scheme aggravate compression rate 
likewise components constructor translated tn bn bn tn generic values de ned happen insensitive encoding ary products 
di cult de ne function yields di erent results di erent translation schemes 
contains complete translation data newtype declarations 
note resulting type expressions include constructor names record labels 
section explains useful 
strictness annotations ignored 
viable choice remains seen 
central idea semantics type expressions interpreted fairly straightforward manner values 
exemplify equation tree tree tip bin int tree tree seen de ning argument function maps type expressions type expressions 
general interpret primitive types type constructors char int value constructors types de ned datatype declarations functions 
tree recursively de ned resulting type expression course nite 
particular case type expression represented circular structure hold general see 
fortunately haskell nonstrict language able generate process nite data structures ease 
consequently may interpret generic values ordinary functions operate possibly nite type expressions 
possible specify semantics translation haskell 
reason simply haskell type system expressive 
specify type generic values dependent types required 
seen datatypes translated binary sums products 
translation course duplicated value level 
instance argument encode tree char converted jxk left right je je je je general constructor application ek introduced declaration data am 
kn tn nkn translated follows jk ek je jek function yields binary encoding constructor left bn bn right de nition may look daunting simple interpretation 
draw binary sum tree speci es path root th leaf 
encoding components constructor vn bn bn vn course require inverse translation decodes encoded values 
inverse translation applied generic function produces values type depends type argument 
leave reader ll details 
generic de nitions implemented ways 
semantics sketched describes interpretative approach generic value repeatedly pattern matches type argument 
clearly approach ine cient especially type argument statically known compile time 
interpretative layer removed specializing generic value respect type 
process specialization seen special instance partial evaluation described length section states basic idea 
note restrictions form generic de nitions chosen order guarantee specializing generic de nition feasible 
accessing constructor label names function encode seen simple printer 
able de ne pretty printer produces human readable output names constructors accessible 
provide additional type pattern form value variable type con type variable 
type con new primitive type comprises constructor names 
manipulate constructor names operations contains complete list 
data con arity con int primitive con string primitive building arity implement simple generic version haskell showsprec function 
recall showsprec takes precedence level value value type returns string string function 
equations de ne showsprec types involve primitive types 
am 
cn am am ck am kjk jt jt kjk tk jt jt 
tk jtk translation datatype declarations datatype renamings showsprec int shows showsprec left showsprec showsprec right showsprec showsprec arity showchar showsprec showsprec showsprec showchar showsprec rst equations discard binary constructors left right 
required constructor names accessible type pattern constructor nullary string representation emitted 
constructor name printed followed space followed representation arguments 
precedence level output additionally parenthesized 
equation applies constructor component 
case components separated space 
note de nition simpli ed version showsprec considers operators record syntax 
full blown version appears appendix noted constructor names appear type level counterpart value level value constructors encoded left right 
generic de nition include case type pattern tacitly assume 
haskell allows programmer assign labels components constructor 
names labels accessed type pattern value variable type label type variable 
generic de nition include case pattern assume 
full blown version showsprec uses type pattern ad hoc de nitions generic function solves problem uniform way types 
desirable di erent approach datatypes 
consider instance function encode instantiated lists base type 
encode structure element list bits 
large lists clearly wasteful 
space cient scheme stores length list header followed encodings elements 
specify compression scheme lists called ad hoc de nition 
encode xs length xs concatmap encode xs ad hoc de nitions specify exceptions general rule may prede ned user de ned datatypes 
type pattern left hand side form ak type constructor applied type variables 
ak distinct 
furthermore type constructor rst order kind 
recall kind system haskell speci es type type constructor 
kind represents nullary constructors char int 
kind represents type constructors map type constructors kind kind order kind order order maxf order order restriction rst order kinds severe remains seen 
ad hoc de nitions spread modules 
generic de nitions handled class instance declarations 
type signature generic definition equations plays ole class de nition 
ad hoc de nitions akin instance declarations 
instance declarations explicitly named import export lists section 
implicitly exported 
remarked serve abbreviations prede ned types 
truth 
di erent sets constructor names able distinguish generic ad hoc equations 
instance showsprec showsprec showchar showsprec showchar showsprec showchar ad hoc de nition determines layout pairs 
contrast showsprec de ned section generic de nition specifying layout constructor components 
mutually recursive de nitions generic de nitions seen far involve single generic value 
obvious generalization allow mutually recursive de nitions 
require de nitions inductive structure type expressions 
formally mutually recursive declaration group 
gn formed partial order recursive call ak fa bk fb fa 
examples generic de nitions employ general form appendix generic de nitions may appear top level declaration list module 
principle permit generic de nitions local declaration groups 
extension hindered haskell lack scoped type variables 
recall type signatures mandatory generic de nitions 
lack explicit scopes impossible distinguish monomorphic polymorphic uses type variables 
suitable extension described 
values indexed rst order type constructors functions may indexed types kind type constructors rst order kind 
archetypical example function size int counts number values type structure type note type parameter size ranges types kind 
able de ne size generically type constructors kind extend type language type abstractions 
agree syntax abstractions type level 
type constructor type expression looks ugly 
example identity type char constant type maps arbitrary types char 
type abstractions de nition size reads size int size size size char size int size left size size right size size size size understand equations helpful replace formal type parameter type signature respective type arguments 
rst equation obtain type int 
clearly structure type contains element type substituting yields int elements type sums substitution yields int 
determine size element type calculate size structure type structure type size structure type sum size components 
de nition size employs sorts type patterns identity type may abbreviated id patterns form fk type variables kind 
exhaustive generic de nition include cases id additionally primitive types 
reconsider de nition size note cases constant types form alike 
allow programmer combine cases type pattern may abbreviated shortcut de nition size rewritten size int size id size size left size size right size size size size applying generic value works value called closed type expression 
type may involve type abstractions 
example size counts number elements list lists 
stress type arguments unambiguously inferred compiler principle reason mandatory 
consider instance call size xs xs type int 
determine type argument size solve equation int 
higher order uni cation int yields di erent solutions int int int arbitrary 
prevent ambiguity type arguments omitted 
alternatively haskell kinded rst order uni cation produces unique solutions rst example 
practical experience needed decide viable alternative 
value may indexed arbitrary rst order type constructor 
general case type patterns projection patterns constructor patterns 
type parameter arguments di erent projection patterns 
constructor patterns general form fk 
note adhoc de nitions employ constructor patterns 
instance ad hoc de nition list type form 
blending generic de nitions type classes type classes generic de nitions closely related concepts 
section concerned integration features 
particular show specify derivable class methods generic de nitions 
brie comment di erences type classes generic de nitions 
type class corresponds roughly type signature generic de nition collection type signatures 
instance declarations related ad hoc de nitions 
class instance declarations mimicked generic de nitions 
generic de nitions furthermore allow instances de ned uniform way fact general type classes 
negative side user supply explicit type arguments 
seen section possible infer type arguments generic calls 
contrast class methods general called giving explicit type information 
integrating generic de nitions type classes hope get best worlds 
allow default class methods speci ed generic de nitions 
way class method de ned generically instances making possible derive instances newly de ned datatypes 
take example haskell eq class derivable classes 
generic de nition eq 
class eq bool true left left left right false right left false right right declaration instances may derived arbitrary types kind arbitrary type constructors rst order kind subsidiary primitive types instances eq 
type constructors rstorder kind derived instance declaration form eq eq ak eq ak 
important note instances derived matter internal structure types 
example de nition data matrix matrix twice deriving eq uses second order type constructor twice de ned perfectly legal 
currently de nition rejected 
generic default methods speci ed classes rst order type constructors 
haskell functor class serves excellent example 
functor class consists called mapping function map applies function element type structure type known map de ned type constructors kind involve function space 
alas currently user program instances functor hand part tedious quite involving 
generic default methods save day 
class functor map map id map map left left map map right right map map map map instances functor derived arbitrary type constructors kind deriving 
note appendix de nes slightly general version takes function space account 
limits type classes noted instances derived datatypes haskell 
section take brief look reasons failure 
consider datatype declarations taken note mapf isomorphic twice 
data mapf mapf data maps maps maps mapf maps mapf mapf maps second order type constructors kind 
attempt derive instance haskell map called fmap 
prede ned class say eq fails cases 
recall instance declarations eq essentially form context may additionally refer classes 
instance eq eq ak eq ak clearly form limited handle mapf maps 
extension class system described allows general instance contexts 
extension realized ghc hugs eq instance derived mapf guess implemented 
instance eq eq mapf try derive eq maps compilers loop 
generalized form instance contexts type constraints nitely represented 
example demonstrates limits haskell class system 
hand generic de nitions specialized higher order type constructors mapf maps 
sketch main idea rest section technique described length 
eqd dictionary type corresponding eq class 
note instance declaration form instance eq eq de nes function type eqd eqd dictionary mapped dictionary type constructor kind 
consequently instance type constructor kind 
function maps instances instances 
eqd eqd eqd eqd scheme easily generalized type constructors higher order kinds 
unfortunate situation eq instances principle derived arbitrary type constructors instances represented haskell instance declarations 
explains particular deriving restricted type constructors kind rst order kind type may internally depend types higher order kinds 
examples section presents examples generic functions 
rst example decode essentially inverse encode takes bit string decodes pre bit string returns decoded value coupled unused su functions related decode encode bs bs 
decode bit bit decode bs bs decode int bs bs decode char bs bs decode error decode decode bs appl left decode bs decode bs appl right decode bs decode bs cs decode bs ds decode cs ds appl ad hoc de nition lists decode left instructive exercise reader 
standard prelude contains number list processing functions generalized arbitrary type constructors sum product instances general concept termed reduction crush 
crush function type collapses structure values type single value type de ne crush require ingredients value binary operation usually necessarily neutral element crush crush id crush crush left crush crush right crush crush crush crush crush de ne instance generic versions sum 
bool bool crush true sum num sum crush examples appendix 
function sum shows type signatures generic values may involve class constraints 
de nition implements monadic mapping function falls back monad class 
monadic map applies function type elements type structure type threads monad left right resulting structure 
mapm monad mapm id mapm return mapm left mapm right mapm return note mapm generalizes function name de ned standard prelude prelude function specialized lists 
important special case mapm thread monad thread mapm id function thread essentially commutes type constructors generalizes prelude function sequence operates lists 
related concept generic functional programming trades variety names refers concept structural polymorphism sheard calls generic functions type parametric jay term shape polymorphism harper morrisett coined phrase intensional polymorphism jeuring invented word 
mainstream generic programming initial algebra semantics datatypes typically requires basic knowledge category theory 
categorical programming language charity automatically provides map catamorphisms user de ned datatype 
functorial ml similar functionality di erent background 
theory shape polymorphism values separated shape contents 
polytypic programming language extension polyp ers special construct de ning generic functions 
generic de nitions similar ones modulo notation generic programmer additionally consider cases type composition type recursion see detailed comparison approaches notable exception restricted rst order kinded regular datatypes subsets class cover small part haskell type system 
theoretical background possible implementation generic programming extension described companion contains supplementary pointers relevant 
show particular specialize generic de nitions instances datatypes 
specialization employs generalization dictionary passing translation require passing types representations types run time 
contrast intensional polymorphism typecase de ning type dependent operations 
proposes generic programming extension haskell 
feel extension ts quite smoothly language 
particular generalizes deriving construct derivable class methods explicit 
examples furthermore demonstrate usefulness extension 
phil wadler anonymous referees helpful comments 
changes syntax lists necessary changes syntax 
syntax type expressions extended include type abstractions 
optional type arguments added type signatures left hand sides function de nitions value expressions 
changes standard prelude standard libraries standard prelude extended module called generics see de nes con label generic values 
figures contain modi cations standard prelude 
note derivable classes eq ord enum bounded show exception read precisely de ned generic default methods 
de nition read omitted reasons space 
lists changes standard library ix 
context type type signature var var tyvar type indexed value type type type type type function type type type type binary sums type type type binary products type tyvar tyvar type type abstraction var atype constructor type pattern var btype label type pattern btype type application unit type unit type list constructor function constructor binary sum constructor binary product constructor tupling constructors var atype type indexed value atype aexp application type indexed value changes syntax module generics con arity fixity infix infixl infixr prec fixity precedence label card crush size gor gall listify types primitives data con arity con int primitive con string primitive con bool primitive instance eq con instance show con show data fixity infix prec int infixl prec int infixr prec int deriving eq ord read show fixity con fixity primitive precedence con int precedence prec fixity data label label string primitive instance eq label instance show label show generic definitions card int nb card undefined infinite types card card char 
system dependent card int 
system dependent card card card card card card card card card crush crush id op crush op crush op left crush op crush op right crush op crush op crush op op crush op num crush crush size num size map const gor bool bool crush true gor crush false gall bool bool gall map gor map eq bool gall listify listify crush id 
map module generics module prelude import generics equality ordered classes class eq bool bool true left left left right false right left false right right class eq ord compare ordering bool max min compare eq compare left left compare compare left right lt compare right left gt compare right right compare compare compare lex compare lex lt rel lt lex eq rel rel lex gt rel gt 
enumeration bounded classes class enum succ pred int int error range right card card left right card card map 

changes prelude class bounded left right monadic classes class functor map map id map map left left map map right right map map map map map phi map phi left left right right phi phi map data just deriving eq ord read show functor 
changes prelude continued module import generics sum product num sum product length int length size bool bool gor bool bool gall elem eq bool elem 
changes module import generics class show showsprec int shows show string shows showsprec left showsprec showsprec right showsprec showsprec showsprec showchar showsprec showsprec phi showsprec shows showchar showchar arity shows fixity shows showchar showsprec showsprec showchar phi showsprec phi showsprec shows showchar showsprec precedence fixity op infix showsprec op showsprec infixl showsprec op showsprec infixr showsprec op showsprec class read analogous changes module ix class ord ix range index int inrange bool int range range range index index inrange error ix index index range index index index inrange true inrange compare gt compare gt inrange inrange inrange null range index changes ix robin cockett fukushima 
charity 
yellow series report dept computer science univ calgary june 
karl crary stephanie weirich greg morrisett 
intensional polymorphism type erasure semantics 
acm sigplan notices 
fokkinga 
monadic maps folds arbitrary datatypes 
technical report memoranda informatica university twente june 
hagino 
category theoretic approach data types 
phd thesis university edinburgh 
robert harper greg morrisett 
compiling polymorphism intensional type analysis 
conference record nd acm sigplan sigact symposium principles programming languages popl san francisco california pages 
acm press 
ralf hinze 
generalizing generalized tries 
journal functional programming 
accepted publication 
ralf hinze 
new approach generic functional programming 
technical report iai tr institut ur informatik iii universit bonn july 
ralf hinze 
polytypic programming ease extended 
th fuji international symposium functional logic programming flops tsukuba japan lecture notes computer science 
springer verlag november 
appear 
patrik jansson johan jeuring 
polyp polytypic programming language extension 
conference record th acm sigplan sigact symposium principles programming languages popl paris france pages 
acm press january 
patrik jansson johan jeuring 
polylib library polytypic functions 
roland backhouse tim sheard editors informal proceedings workshop generic programming sweden 
department computing science chalmers university technology university june 
jay bell moggi 
functorial ml 
journal functional programming november 
jay 
shapely types shape polymorphism 
editor programming languages systems esop th european symposium programming edinburgh uk proceedings volume lecture notes computer science pages berlin april 
springerverlag 
johan jeuring patrik jansson 
polytypic programming 
launchbury meijer sheard editors tutorial text nd international school advanced functional programming wa usa volume lecture notes computer science pages 
springer verlag 
mark jones 
functional programming overloading higher order polymorphism 
international spring school advanced functional programming techniques volume lecture notes computer science pages 
springer verlag 
jones peterson 
hugs user manual may 
available www haskell org hugs 
lambert meertens 
calculate 
swierstra editors proceedings th international symposium programming languages implementations logics programs plilp aachen germany volume lecture notes computer science pages 
springer verlag september 
erik meijer koen claessen 
design implementation mondrian 
proceedings haskell workshop 
simon peyton jones 
explicit quanti cation haskell 
available research microsoft 
com users simonpj haskell quantification html 
simon peyton jones john hughes editors 
haskell non strict purely functional language february 
simon peyton jones mark jones erik meijer 
type classes exploring design space 
proceedings haskell workshop 
fritz 
structural polymorphism 
roland backhouse tim sheard editors informal proceedings workshop generic programming sweden june 
dept computing science chalmers univ techn 
univ june 
karl fritz 
analytical structural polymorphism expressed patterns types 
phd thesis university michigan 
tim sheard 
type parametric programming 
technical report oregon graduate institute science technology portland usa 
