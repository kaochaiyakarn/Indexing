proc 
ecoop springer verlag lncs pages 
making type inference practical nicholas jens palsberg michael schwartzbach alf daimi aau dk palsberg daimi aau dk mis daimi aau dk computer science department aarhus university ny munkegade dk denmark implementation type inference algorithm untyped objectoriented programs inheritance assignments late binding 
algorithm significantly improves previous oopsla handle collection classes list useful way 
complexity dramatically improved exponential time low polynomial time 
implementation uses techniques incremental graph construction constraint template instantiation avoid representing intermediate results doing superfluous recomputing type information 
experiments indicate implementation type checks lines pr 
second 
results mature product number tools example safety tool image compression tool code optimization tool annotation tool 
may type inference object oriented languages practical 
keywords type inference implementation collection classes tools smalltalk 
basic purpose doing type inference untyped object oriented programs guarantee messages understood 
oopsla type inference algorithm untyped object oriented language inheritance assignments late binding :10.1.1.136.9764
algorithm type check common programs including polymorphic recursive methods 
infer types programs collection classes 
collection class contain different instances different parts program 
example class list may boolean list place integer list place 
algorithm oopsla confuses uses list leading rejection type safe programs 
presents ffl improved algorithm handles collection classes useful way ffl implementation new algorithm including novel techniques making type inference faster space consuming 
complexity reduced exponential time low polynomial time 
implementation type checks hundreds lines seconds runs sun sparc hp available anonymous ftp 
improved algorithm similar previous types sets classes 
simple flexible concept useful considering implementation aspects object oriented languages 
speed generality current implementation opens new perspectives tools provided untyped object oriented languages 
includes tools doing image compression code optimization annotation programs class hierarchy construction insertion dynamic checks class memberships 
usages type inference may turn just important safety guarantee 
opinion type inference promising basis sophisticated tools new implementation techniques may practical 
section outline example language exactly oopsla 
section survey previous algorithm explain extend handle collection classes 
section demonstrate implementation works section summarize tools built envision basis implementation 
language outline example language apply algorithm 
language resembles smalltalk see taken previous :10.1.1.136.9764
program 
class class classid inherits classid var id 
id 
classid method method id 
id expression id 
classid new self class new instanceof classid self super id nil syntax example language 
program set classes followed expression value result executing program 
class defined inheritance contains instance variables methods method message selector 
formal parameters expression 
language avoids metaclasses blocks primitive methods 
provides explicit new expressions tests condition non nil 
result sequence result expression sequence 
expression self class new yields instance class self 
expression instanceof classid yields run time check class membership 
check fails expression evaluates nil 
demonstrated program classes true false natural list basic language :10.1.1.136.9764
suzuki address problem type inference language algorithm capable checking common programs 
graver johnson provided algorithm simplified problem types instance variables specified programmer types arguments inferred 
addressed problem inferring types useful connection separate compilation 
means algorithm allowed reconsider program text new classes added program 
comparison demonstrates demand leads rejection programs algorithm :10.1.1.136.9764
remains seen approaches combined 
basic concept type terminology type type finite set classes 
idea compute type information expressions concrete program 
information superset classes possible non nil values may evaluate execution particular program 
want set small possible smaller sets precise lead acceptance program yield efficient code generation 
note notion type investigated differs theoretical studies types object oriented programming related record calculi 
section show algorithm infer type information 
algorithm works programs collection classes 
algorithm review type inference algorithm :10.1.1.136.9764
section serve brief summary want appreciate refinements section gentle want read original 
general idea define type variable expression occurring program 
generate collection constraints variables 
attempt solve constraints 
solvable minimal solution corresponds inferred typing program typable 
summary entire algorithm shown 
input program example language 
output safety guarantee type information expressions unable type program 
expand away inheritance 
construct trace graph expanded program 
extract set type constraints trace graph 
compute solution set type constraints 
solution exists output wanted type information safety guarantee output unable type program 
algorithm 
expanding inheritance algorithm starts expanding away inheritance current program 
really perform type inference subset example language inheritance 
approach common previous algorithms 
known insight inheritance technique reusing untyped code inherited method completely unexpected contexts subclass 
better typings obtained considering method twice superclass subclass 
results duplication type variables general type variables improve chances typability inferred types precise 
algorithm pays price expanding inheritance type fewer programs 
actual expansion simple syntactic transformation program texts 
illustrated 
note methods duplicated renamed care taken connection self super 
expanded program may increase quadratically size 
worst case occurs inheritance hierarchy narrow sequence 
balanced hierarchy increase size 
trace graph notion trace graph aid explaining constraints shall impose type variables 
nodes graph correspond methods edges correspond message sends 
extra node corresponding main program 
graph set constraints derived paths graph starting main node 
path associated trace execution program 
shall illustrate technique example program 
classes expansion classes expansion class var method self class new method self class new class var method new method new class inherits var method super class var method new method new method self class inherits method super method super class var method new method new method self method self method self expanding inheritance 
nodes local constraints node trace graph corresponds particular method implemented class current program 
fact shall nodes method implementation 
explained advantage distinguish different uses method 
possible analyzed separately gives rise type variables leading typability programs better typings 
simple criterion distinguishing methods comes syntactic message sends 
suppose program contains different syntactic message sends selector say method corresponding name generate copies 
class previously implemented method implement methods 
identical bodies 
th syntactic message send selector selector clearly change semantics program cause size trace graph quadratic size program worst case 
distinction instrumental securing typability polymorphic methods 
example program trace graph nodes indicated 
node associate local constraints reflect semantics corresponding method body quite straightforward 
general rules illustrated local constraints example program listed organized trace graph nodes general rules 
note rule class method class var temp method temp method temp method self new new example program 
called called called called called main called main main trace graph nodes example program 
number responsible enforcing safety guarantee 
edges conditions connecting constraints edges trace graph correspond potential transfers control 
method body contains message send selector outgoing edge node corresponding method name renaming copies methods mentioned section taken seriously 
edges trace graph example program illustrated 
edge associate condition 
consider edge node node edge traversed trace program type sender contains class implementing method corresponds 
label edge condition necessarily hold edge local constraints leads taken seriously 
condition state expression constraint id id id 
fc implements 
new new fcg instanceof instanceof fcg self self fthe enclosing id id id nil nil local constraint rules 
trace graph node local constraints rule new fag new fbg new fa bg fbg temp temp temp fbg trace graph node local constraints rule temp fbg temp fbg self fbg self fbg self fbg self fbg local constraints example program 
class constant contained type variable 
examination conditions show simplicity idea 
edge associate collection connecting constraints reflect semantics message sends 
simply state actual argument assigned formal argument result message send result body invoked method 
connecting constraints example program listed 
self self temp temp new temp new trace graph edges example program 
edge connecting constraints new new new new new new temp temp temp temp temp self temp self self self self self connecting constraints example program 
global constraints construction trace graph completed 
left extracting global constraints 
conditional constraints arise paths trace graph 
consider path main node 
conditions edges encounter hold path corresponds possible execution program 
local connecting constraints arrive better hold 
express relationship illustrated 
main path conditional constraints look condition edge local constraints final node connecting constraints final edge 
global constraints derived single path 
total collection global constraints derived manner paths main node graph 
note graph may infinitely paths program finite get finite set different conditional constraints simple combinatorial reasons 
note global constraints may contain great amount recursive dependencies 
decide condition holds considering local constraints come play conditions turn hold 
example program consider path originating node going node node 
global constraints derived path new temp self fbg self fbg temp self complete set global constraints 
new fag new fbg new fa bg new fbg new new new new temp temp temp fbg new new new temp new temp fbg temp new temp temp fbg temp temp new temp self fbg self fbg temp self new temp temp self fbg self fbg temp self new temp self self fbg self fbg self self new temp temp self self fbg self fbg self self new temp self self self fbg self fbg self self new temp temp self self self fbg self fbg self self global constraints example program 
solving constraints finite set conditional constraints resolved single fixed point computation appropriate lattice 
details result :10.1.1.136.9764
note technique manage recursive dependencies mentioned 
limit condition hold type variable attain value 
solution exists special error value result computation 
time computing solution quadratic size global constraints 
sketched proof soundness solution respect dynamic semantics :10.1.1.136.9764
global constraints example program solvable example program typable 
minimal solution shown 
new fag new fbg new new temp temp fg remaining type variables constraints imposed consequently attain value fg minimal solution 
minimal solution example program 
collection classes far described algorithm find typings different kinds programs polymorphic methods recursive methods late binding pose problem :10.1.1.136.9764
fatal flaw renders useless practical context instance variable single associated type variable 
means collection classes typed useful manner 
suppose class list instance variable head containing element list 
want list integers list booleans create separate instances means list new 
instance contain integers booleans 
type analysis single type variable head attain type fint 
consequently algorithm surmise list instances contains mixture integers booleans prevent sending succ message head integer list 
fortunately extend algorithm handle cases 
idea obtain type variables code duplication 
manual solution problem define trivial subclasses list called intlist 
expansion inheritance create new type variables head 
rest program kept separate attain type fintg type 
extended algorithm applies strategy universally program 
syntactic occurrence new create copy entire class produce type variables worst case cause quadratic increase size program 
technique allows liberal typings collection classes 
encounter useful example improved algorithm falls short 
furthermore working completely untyped programs 
fact distinction syntactic occurrences new expressions improves typings programs relate collection classes instance variables 
implementation naive implementation type inference algorithm construct possibly large trace graph extract larger set type constraints compute minimal solution 
size intermediate results infeasible collection global constraints general worst case exponential size program 
approach efficiently implementing algorithm embodies major ideas explained section 
show combine steps algorithm incrementally compute graph constraints solution 
avoids representing intermediate results unreachable parts trace graph 
result polynomial time algorithm 
introduce naming schemes constraint templates avoid costly recomputation storage local constraints different nodes method 
data structure compactly represents constraints far computed minimal solution 
final subsection give performance measurements implementation state obtained anonymous ftp 
incremental graph construction combine steps algorithm observation 
observation suppose set unconditional inclusions 
suppose step compute minimal solution inclusions far 
minimal solutions increase monotonically step 
implies condition satisfied point satisfied final solution solution exist 
observation justifies incremental construction trace graph follows 
starting main node follow edges condition true 
true conditions remain true need undo decision edge need record conditions 
inclusion met way inserted data structure solver contains minimal solution inclusions contained 
terminology front edge unprocessed outgoing edge visited node 
computation stops front edges left 
means possibly large parts trace graph need constructed traversed see 
especially important typical smalltalk environment large number number classes methods name 
example look trace graph program set new add typical smalltalk environment 
resemble structure different classes implementing method add 
condition satisfied set set new wasteful 
condition trace graph edge satisfied 
subset trace graph traverse 
avoiding unreachable parts trace graph 
follow edges generate conditional constraints come play 
furthermore need visit node 
longer generate conditional constraints subsequent visits node add new 
main data structure solver represents front edges constraints minimal solution continuously updated 
operations data structure see 
note trace graph represented front edges minimal solution 
subsection describe efficient implementation constraint aspect data structure 
solver rephrase algorithm see 
clearly polynomial time algorithm node edge visited visit takes linear time 
recall trace graph polynomial size program 
naming schemes constraint templates represent program augmented ffl unique number node called ptn parse tree number ffl constraint template method node 
explained information yields unique naming type variables avoids costly recomputation storage local constraints different nodes method 
uniquely identify type variables naming scheme 
recall trace graph nodes representing method syntactic message sends 
means identify trace graph node pair ptn message send ptn method 
add class add class add class set add class add class add class add class add class path add class add class add class add class main path set new set set new part trace graph set new add 
furthermore recall expression needs fresh type variable copy method appears 
means identify type variables pair ptn message send ptn expression exception instance variables just type variable 
extension algorithm handle collection classes simply trace graph nodes represented quadruple ptn message send ptn new ptn method ptn new extra identify new expressions generate new versions original components 
simplicity modification shows flexibility current implementation 
avoid recomputing local constraints different nodes method constraint template 
template computed time needed merely instantiated 
instantiation inserts appropriate ptn message send corresponding method 
described data structures implementation augmented parse tree solver 
subsection indicates efficiently implement constraint aspect solver 
constraint representation pointed unconditional constraints expressed just different kinds inclusions constant variable variable constant variable variable input program example language 
output safety guarantee type information expressions unable type program 
expand away inheritance 
solver add constraint local constraints main node 
solver add front edge trace graph edges main node 
front edges satisfied condition 
solver get front edge goes node node solver add constraint connecting constraints edge 
seen 
solver add constraint local constraints node 
solver add front edge trace graph edges node 
solution constraints exists output wanted type information safety guarantee output unable type program 
algorithm rephrased 
data structure solver add constraint adds constraint constraint set 
solution extended constraint set error returned 
add front edge adds front edge set front edges 
get front edge removes front edge condition satisfied respect minimal solution current constraint set 
solver solver data structure 
store inclusions efficient way give ordering 
achieved associating type inclusion variable right hand side second third type inclusions variable left hand side 
store inclusion associated type variable 
type variable represented object form 
assignment set classes constant constraint set classes variable constraint set type variables storing constraint individually components object keep track effects different types inclusions 
relationship shows keep track kind inclusions assignment set 
kind inclusion assignment set updated assignment assignment constant 
likewise shows keep track kind inclusions constant constraint set updating constant constraint constant constraint constant 
deal kind inclusions variable constraint set updated variable constraint variable constraint variable 
things left 
ffl assignment constant constraint change sure assignment constant constraint 
case constraint system solution program typable 
ffl assignment changes propagate value assignment variables variable constraint 
methods type variable object consequently look follows method subset constant constant constraint constant constraint assignment constant constraint couldn type program 
method subset variable variable variable constraint variable constraint variable variable superset constant assignment method superset constant assignment assignment assignment assignment constant constraint couldn type program 
foreach variable variable constraint variable superset constant assignment add constraint operation solver easily implemented methods type variables 
sets classes implemented bit vectors efficiency set operations 
sets type variables implemented sets pointers type variable objects 
different type variable objects stored hash table type variable name quickly locate corresponding type variable object 
functionality system bares resemblance trigger functions databases way change assignment type variable triggers chain events soundness total assignment 
way solution system constraints date 
major advantages way implementing constraint solver 
addition constraint constraint system solution expanded constraint set simple requires little 
requires search lists structures immediate access relevant data 
secondly lot redundant constraints created place adverse effects individual constraints stored 
performance evaluation implementation achieved dramatic speed realistic running times 
figures contain experimental data implementation sparc 
columns show name program size number lines total number paths trace graph smaller number edges implementation running time milliseconds 
program lines paths total edges time msec peano integers search trees container class type check basic algorithm 
program lines paths total edges time msec peano integers search trees container class extended algorithm 
implementation flexible user selectively specify classes treated collection classes done writing collection class just class program text 
classes treated collection classes 
corresponds running previous algorithm oopsla :10.1.1.136.9764
note programs type checked algorithm 
classes treated collection classes 
gives slower running times better typings example program container class type checked 
programs laborious encodings integers booleans replaced smalltalk style primitive classes running times vastly improved 
implementation available anonymous ftp daimi aau dk directory pub palsberg inference 
contains files compressed executables various architectures 
example programs available readme file containing instructions 
appendix shows analysis programs example language 
implementation peano integers adopted typed smalltalk program provided ralph johnson 
second program provided justin graver 
uses collection classes typable extended algorithm basic 
analysis recognizes programs safe produces versions type annotations different styles 
perspectives efficient implementation algorithm perspectives merely type inference traditional sense 
host useful tools smalltalk programmer available 
section describes little effort obtained basic algorithm 
safety tool mentioned earlier program typable error message understood occur execution 
iron guarantee useful asset finished product 
furthermore guarantee obtained completely automatic fashion cost programmer 
image compression tool smalltalk image grows time may contain classes defined numerous unrelated tasks 
cumbersome programmer create stand executable version program unneeded code left 
product inferred typing information show discard superfluous code guarantee essential missing 
class appear value type variable discarded 
furthermore obviously individual methods remaining classes may discarded 
consider message send selector inferred type receiver mentions set classes implement method named methods marked live 
done message sends unmarked methods remain 
safely removed sure invoked 
note technique image compression useful typed object oriented languages eiffel 
code optimization tool safety guarantee issued run time checks message understood left 
simplifies code dynamic method lookups 
significantly inferred type receiver corresponds closely information contained polymorphic line cache pic employed holzle chambers ungar greatly improve efficiency 
information approximates set possible non nil values receiver expression may evaluate execution program 
inferred types yield sets slightly large 
pics obtain sets slightly small 
smaller sets result smaller target code case cache pic technique pays price dynamic re compilation alternatively dynamic lookup 
technique avoids cache misses altogether 
possibly merge approaches optimal 
annotation tool seen appendix inferred type information annotate original program 
improve readability serve debugging tool 
various styles annotation current algorithm 
conversely algorithm accept annotated programs annotation provided user impose constraints 
view annotation rudimentary correctness predicate automatically verified algorithm 
hierarchy construction tool analysis collection classes lead suggested changes class hierarchy classes intlist 
furthermore inferred subtype relationships lack may criticize class hierarchy suggested programmer 
check insertion tool bounds safety guarantee appear restrictive applications local constraint 
inferred type receiver examined determine message send safe 
dynamic check inserted method lookup similarly qua checks simula beta 
selective approach may greatly reduce number required checks compared simula beta implementations 
note dynamic check inserted implicitly compiled code explicitly program text manner program transformation 
taken important steps making type inference practical 
previous algorithm improved handle collection classes useful manner severe limitation suffered 
current version algorithm able handle realistic programs 
second algorithm implemented quality promises real life applicability 
technique incremental computation achieved dramatic speed compared naive implementation 
indicated number practical tools type inference algorithm 
believe tools form basis design methodology supports rapid prototyping evolution mature product 
supported part danish research council dart project 
appendix examples appendix shows programs peano integers container class output type inference implementation 
peano integers program chosen option method headings annotated 
container class program chosen option message sends annotated 
peano integers class zero method iszero true new method plus anumber anumber method minus anumber anumber negative method negative self method negativeinteger negativeinteger method negativeinteger negativeinteger method positiveinteger positiveinteger method anumber anumber method incr positiveinteger new self method decr negativeinteger new self zero class negativeinteger inherits zero var incr method anumber incr anumber self method iszero false new method plus anumber anumber self method minus anumber anumber self method negative positiveinteger new incr negative method negativeinteger negativeinteger decr plus incr method positiveinteger positiveinteger decr plus incr method anumber anumber plus self negative method incr incr negativeinteger class positiveinteger inherits zero var decr method anumber decr anumber self method iszero false new method plus anumber anumber self method minus anumber anumber self method negative negativeinteger new decr negative method negativeinteger negativeinteger incr iszero istrue decr decr method positiveinteger positiveinteger incr plus decr method negativeinteger negativeinteger self self unfortunately loops iszero istrue method iszero iszero istrue nil incr decr self method anumber anumber decr minus decr method decr decr positiveinteger booleans class object object class true method istrue object new method false new method method self method xor true class false method istrue nil method true new method self method method xor false class main var method go zero new decr plus zero new incr minus negative plus main main new go annotated peano integers time initializing msecs program typable 
time finding solution msecs number edges graph class zero method anumber positiveinteger 
positiveinteger negativeinteger 
negativeinteger method negative zero method incr positiveinteger method negativeinteger negativeinteger 
negativeinteger method negativeinteger zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method plus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method iszero true method decr negativeinteger method positiveinteger positiveinteger 
positiveinteger method minus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger zero class negativeinteger var incr zero negativeinteger method anumber positiveinteger 
positiveinteger negativeinteger 
zero negativeinteger positiveinteger method anumber zero negativeinteger 
negativeinteger method negative positiveinteger method incr negativeinteger zero method negativeinteger negativeinteger 
negativeinteger method negativeinteger zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method plus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method iszero false method decr negativeinteger method positiveinteger positiveinteger 
zero negativeinteger positiveinteger method minus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger negativeinteger class positiveinteger var decr zero positiveinteger zero negativeinteger positiveinteger zero negativeinteger positiveinteger zero negativeinteger positiveinteger method anumber positiveinteger 
zero negativeinteger positiveinteger negativeinteger 
negativeinteger method negative negativeinteger method incr positiveinteger method negativeinteger negativeinteger 
zero negativeinteger positiveinteger method negativeinteger zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method plus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method iszero false method decr zero positiveinteger method positiveinteger positiveinteger 
positiveinteger method minus anumber zero negativeinteger positiveinteger 
zero negativeinteger positiveinteger method method anumber zero positiveinteger 
positiveinteger positiveinteger class object object class true method method istrue object method method true false 
true method xor true class false method method istrue method method true false 
true false method xor false class main var zero negativeinteger positiveinteger method go zero negativeinteger positiveinteger main zero negativeinteger positiveinteger container class class natural method iszero nil natural class boolean method istrue nil boolean class container var method put val val method get container class main var method go container new put natural new get iszero container new put boolean new get istrue main main new go annotated container class time initializing msecs program typable 
time finding solution msecs number edges graph class natural method iszero natural class boolean method istrue boolean class container var natural boolean method get natural boolean method put val natural 
natural boolean 
boolean container class main var container container method go main alan borning daniel ingalls 
type declaration inference system smalltalk 
ninth symposium principles programming languages pages 
luca cardelli 
semantics multiple inheritance 
gilles kahn david macqueen gordon plotkin editors semantics data types pages 
springer verlag lncs 
luca cardelli peter wegner 
understanding types data abstraction polymorphism 
acm computing surveys december 
william cook jens palsberg 
denotational semantics inheritance correctness 
information computation 
proc 
oopsla acm sigplan fourth annual conference object oriented programming systems languages applications pages new orleans louisiana october 
william cook 
denotational semantics inheritance 
phd thesis brown university 
ole johan dahl bj rn nygaard 
simula common base language 
technical report norwegian computing center oslo norway 
scott chris tomlinson 
type theories object oriented programming 
acm computing surveys march 
adele goldberg david robson 
smalltalk language implementation 
addisonwesley 
justin graver ralph johnson 
type system smalltalk 
seventeenth symposium principles programming languages pages 
justin owen graver 
type checking type inference object oriented programming languages 
phd thesis department computer science university illinois urbana champaign august 

andreas 
polymorphic type inference simple object oriented programming language state 
technical report 
universitat des saarlandes december 
andreas 
wrapper semantics object oriented programming language state 
ito meyer editors proc 
theoretical aspects computer software pages 
springer verlag lncs 
urs holzle craig chambers david ungar 
optimizing dynamically typed object oriented languages polymorphic inline caches 
proc 
ecoop fifth european conference objectoriented programming pages 
samuel kamin 
inheritance smalltalk denotational definition 
fifteenth symposium principles programming languages pages 
bent kristensen ole lehrmann madsen ller pedersen nygaard 
beta programming language 
bruce shriver peter wegner editors research directions object oriented programming pages 
mit press 
bertrand meyer 
object oriented software construction 
prentice hall englewood cliffs nj 
jens palsberg michael schwartzbach :10.1.1.136.9764
object oriented type inference 
proc 
oopsla acm sigplan sixth annual conference object oriented programming systems languages applications pages phoenix arizona october 
jens palsberg michael schwartzbach 
type safe code reuse 
proc 
ecoop fifth european conference object oriented programming pages 
springer verlag lncs geneva switzerland july 
jens palsberg michael schwartzbach 
static typing object oriented programming 
science computer programming 
reddy 
objects closures semantics object oriented languages 
proc 
acm conference lisp functional programming pages 
didier emy 
typechecking records variants natural extension ml 
sixteenth symposium principles programming languages pages 
michael schwartzbach 
type inference inequalities 
proc 
tapsoft pages 
springer verlag lncs 
bjarne stroustrup 
programming language 
addison wesley 
suzuki 
inferring types smalltalk 
eighth symposium principles programming languages pages 
mitchell wand 
simple algorithm proof type inference 
informaticae 
mitchell wand 
type inference record concatenation multiple inheritance 
lics fourth annual symposium logic computer science pages 
