arrow manifesto software engineering comprehensible rigorous graphical specifications diskin boris lab database design frame inform systems riga latvia mail diskin aol com hotmail com march 
novel formalizable specification paradigm proposed possible solve lot specification problems software 
roots idea mathematical category theory terminology call specifications sketches 
principal advantages sketches 
ffl nice amalgamation logical rigor graphical evidence 
sketches graph images precise formal specifications rigor say order logic theories 
ffl universality precise sense word 
mathematically proven specification semantic meaning formalized expressed sketch 
ffl unifying power 
graphical specification languages simulated sketches corresponding signature diagram markers 
ffl semantic capabilities 
sketch language inherently object oriented provides quite natural way specifying oo class schemas 
ffl easy flexible modularization mechanism 
complex specification sketch nodes sketches arrows sketch mappings patterns reiterated necessary 
sketch specifications enjoy unique combination rigor expressiveness comprehensibility 
data modeling process modeling metadata modeling providing unified specification framework entire field software engineering 
important observation applying sketches concrete application domain sketches normally appear precise formal refinement existing notation external imposition domain 
particular sketches seen far reaching generalization ffl fdm schemas er diagrams semantic modeling ffl interaction diagrams process modeling ffl schema grids metadata modeling 
contents problem specifying ideal specification paradigm software engineering possible 
arrow logic software specifications arrow thinking category theory semantic modeling sketches metadata modeling hyper sketch fibrations transaction modeling arrow sketches summary sketch processor software applications list figures internal object structure arrow diagrams plane specification paradigms example fibration software specifications arrow logic framework picture software evolution problem specifying computer 
rates scales expansion everyday life internal development growing multiple diverse hardly predictable directions 
mysterious computer component software despite precise logical foundations origin 
logic software inherently operational responds question denotational semantic meaning implicit remains hidden context 
results evident peculiarity situation software expansion accompanied extremely mobile wide experimental activity surprisingly weak semantic foundations cf 

peculiarity computer intellect software somewhat similar human intellect productivity goes strict denotational patterns 
human experience shows activity intellect productive initial heuristic stages advanced development needs clear specifying goals 
logic software reached industrial maturity state ignoring denotational specifications certainly importance specifications recognized abundance specification languages created 
meet requirements software reality believe weak specification foundations software building caused misunderstanding underestimating value specifications absence suitable specification languages 
language merely notational system direct reflection corresponding underlying logic software suffered badly lack suitable logics 
problem logics notational tricks 
stumbling block specification efforts software extreme heterogeneity modern nearest information systems iss 
cooperative heterogeneous appear large number local iss distributed complex computer communication network intranet 
turn local complex configuration data flows data processing units pattern global local reiterated downward upward 
normally local iss sufficiently autonomous significantly differ origin development organization architecture data models result inside intranet different nodes operated different software runs different hardware platforms 
constitutes phenomenon architectural heterogeneity 
addition data circulating network significantly differ meaning range natural numbers video images types integer string relation constitutes semantic heterogeneity 
builders complex software applications faced need integrate heterogeneous data residing different sources communication network 
today problem global direct figurative senses advent information addition intranet enterprise databases vast amount information data software accessible internet 
handling architectural heterogeneity usually attributed called interoperability amounts resolving communication problems file transfers remote logins 
stated basic conditions interoperability heterogeneous systems achieved achieved nearest cf 
contrast managing semantic heterogeneity interoperation far solved noted problem stage understood add requires corresponding logic reason properly 
clearly interoperation problem specification problem manage able specify data structures data manipulations precise unambiguous terms specifications separated algorithms 
specification data processing unit plug electrical appliance 
externally completely characterized numbers voltage power current frequency connect appliances network required verify matching numbers 
course hope simple story data processing devices network electrical appliances sample useful mind borrow metaphor 
unfortunately picture observe modern software sharp contrast sample specifications implicit hidden implementation procedural description statement purpose resolving algorithm simultaneously discussion success optimality algorithm canceled 
handling interoperability achieved semantic interoperation challenge 
important problem specifications languages specifying architecture complex till architectural schemas appear highly informal diagrams facilitating heuristic discussions having precise technical description 
contrast ideal design schema sequence stepwise refinements highlevel architectural schemas low level data procedure specifications step including higher level ones 
designer deal precise formal description refinement steps formally specified 
current software design ideal looks unreachable precise definitions basic architectural concepts view data refinement data absent abundance data models query languages known formulate data model query language general 
questions may theoretical context cooperative heterogeneous practically valid 
illuminating example fact invoking wittgenstein philosophy conference organized practitioners wittgenstein said long ago idea worth discussing worth having language discuss 
researchers need develop languages handling data interoperation 
languages contain primitives pruning restructuring merging data schemas dealing consistency uncertainty managing directories meta information 
difficult problems developing integrated systems figuring schemas data application code mean 
standards defining meaning software needed 
context required general language allowing specify basic db theory concepts database schema instance query view update way independent italic specific data model single universal data model capturing data models 
words library virtual object classes datamodel view refinement designed particular data model notions view refinement derived datamodel view refinement summarize extreme heterogeneity software world led extreme heterogeneity software descriptions 
overly sugared syntactically overloaded particular details presentation implementation 
role specifications heterogeneous notationally diverse environment important crucial 
area strongly needs integral framework powerful specification principles capable cover different data semantics uniform way 
framework known community specification linguistic efforts resulted huge diversity ad hoc notational systems languages metaphor babel different contexts different people attempts characterize situation 
goal manifest special diagram arrow logic developed mathematical category theory capable solve lot specification problems software 
suggest try demonstrate briefly arrow logic exactly logic software needs operational low level logic software string denotational high level specification logic graph precise sense category theory carefully distinguish intrinsically graph logics graphical interfaces logics 
correspondingly arrow thinking underlying arrow logic working way thinking software design development 
ideal specification paradigm software engineering bundle specification problems outlined resolved framework powerful specification paradigm single extra universal specification language 
mean needs generic definition depends list parameters different specification languages instances defined choice parameters problem domain specification language la suitable may built appropriate domain needs language lb diversity domains results variety languages la lb languages treated uniform way instances 
achieve goals paradigm possess characteristics ffl semantic capabilities ffl universality ffl unifying flexibility ffl abstraction flexibility ffl comprehensibility 
course numbers formal constructs complex structures properties described briefly 
description said expressible thing described constructs language suitable choice parameters semantic capabilities 
languages admit semantic interpretation close real world semantics object oriented capable specify object class schemas natural way 
hand languages admit value oriented interpretations capable specify type schemas 
universality 
wide range semantic constraints business rules expressible 
totality semantic constraints possible real world practically unlimited particular case set business rules usually changeable subjected unpredictable evolution 
universality specification language understood absolute sense possible formalizable semantic constraint expressible unifying flexibility 
ad hoc specification language say developed particular domain accumulate useful experience convenient customary experts domain 
reasonable neglect advantages replace equally expressive entirely novel language 
better solution simulate find parameters syntax intended semantics close possess possibility simulate wide range ad hoc languages 
abstraction flexibility 
term means capability build specifications data model independent way section 
consider example notion view data 
view quite clear case relational data model notion extreme importance far views applications tolerant changes data schema 
needs general definition applicable relational oo semantic data schemas uniform way 
words needs definition view data model parameter 
holds basic metadata modeling concepts schema refinement schema integration 
needs integral metadata modeling framework data model parameter 
call possibility state framework abstraction flexibility specification paradigm 
comprehensibility 
specification language powerful flexible remain thing heavily comprehended human 
recognize main components comprehensibility graph evidence 
graphical syntax 
people draw graphical schemas facilitate reasoning communication 
usually schemas considered informal heuristic pictures precise implementable converted string specifications similar theories logical calculi 
desirable respect build graph specification language graphical images precise formal specifications suitable implementation 
ii 
growing awareness experts specification verification methods reached limits handle systems small size complexity 
noted hope industrial size designs handled formalized methods premises compositionality abstraction 
ideal paradigm discussing necessary include flexible modularization mechanism 
exist machinery decomposing global specification simpler component specifications languages satisfying automatically satisfy context component systems satisfying integrated global system satisfying course schema decomposing presentable concise form preferably graphical 
possible 
specification methods currently software properties ideal formulated practically inconsistent 
sole formal universal paradigm known community higher order logic fol hol string specifications 
known attempts build graph interface fol stream conceptual graphs similar constructs capable correct inherited value oriented character logical calculi objects ordinary logical specifications 
attempt build concept object fol called logic system gaining popularity theorists knowledge representation ai 
logic involved string formalism heavy understand 
addition community doubts specification languages similar logical calculi capable emulate basic constructs object orientation see 
hand graph notational systems created oo design booch omt uml db design er diagrams areas 
notations informal pretend role specification language possess limited expressive power 
result db designer forced alter scylla easy scarcely formalized graph approaches logically clear perfect inflexible relational languages 
due evident tendency practitioner exists field today cookbook approaches poorly formed having subjective human considerations navathe 
course successful compromises expressiveness comprehensibility known sql compromise apt restricted situations solve problem 
problem ideal paradigm abstraction flexibility 
glance impossible speak data schemas data instances way specific description appears kind substantial speaking 
task building ideal paradigm discussed appears extremely difficult possible 
fortunately methodology specification machinery ideally matching ideal properties formulated developed mathematical category theory 
section describe briefly main lines incorporating categorical means real software problems semantic data modeling metadata modeling process modeling 
arrow logic software specifications arrow thinking category theory category theory ct modern branch algebra 
invented late time achieved great success providing uniform structural framework different branches mathematics including metamathematics logic stating foundations mathematics 
ct great interest software offers general methodology machinery specifying complex structures different kinds 
wider context th century age structural patterns opposed previous century ct precise mathematical respond structural request time 
basic idea underlying approach consists specifying universe discourse collection objects morphisms normally function context mappings transformations objects 
result universe specified directed graph nodes objects arrows morphisms 
objects internal structure wishes say say terms arrows 
feature ct formulated oo programing terms object structure behaviour encapsulated accessible arrow interface 
objects ct sense objects oo sense common 
surprising result discovered ct arrow specification language extremely expressible 
fact absolutely expressible higher logic specification described arrow language 
arrow language proven extremely powerful conceptual means basic object interest described arrows normally turned derived objects interest described arrows quite natural way 
main lesson ct define properly universe going deal necessary sufficient define morphisms mappings object universe 
words means 
arrow specification framework gives rise special kind thinking called arrow thinking 
philosophical terms arrow thinking seen precise formalization dialectics idea course ct mathematical discipline having common philosophical speculations 
context arrow thinking long history going back ancient continuing oo paradigm software constructive ontology quantum physics see constructivity aspects arrow specifications 
great say ct offers mathematically justified framework proper formalization general ideas observability constructivism 
formally category directed multigraph composable arrows arrows objects arrow composition defined unique way denote 
due existence compositions categories modeling complex universes usually infinite implicitly specify lot derived information universe 
practice deals finite presentations infinite categories 
example relational world universe infinite totality relations assumed derivable finite set basic relations relational operations queries 
basic set specified finite schema relational database schema finite presentation infinite universe 
similarly general situation usually finite presentations infinite categories 
finite presentations called sketches sketch specifications appear constructive technological realization arrow logic see database theory oriented presentation sketches 
section outline briefly sketch framework applied specification problems semantic modeling metadata modeling transactions modeling 
semantic modeling sketches said current semantic models hardly comprehensible case complex specifications informal limited expressive power 
arrow framework possible develop successful specification language amalgamating requirements rigor logical calculi expressive higher order logic graph 
specification principle underlying approach world consists sets functions 
correspondingly world specified directed graph nodes denote sets classes objects arrows denote functions attributes 
course simple idea known underlies lot notational systems 
particular known semantic models directly idea called functional data model fdm 
fdm gained popularity fdm similar models capable manage problem complex types consistent way 
functional approach assumes object classes plain sets real world object may internal structure certain type may tuples objects sets object variant cases complex combinations basic types 
example object convoy tuple component second component submarine third set ships 
express structure functional approach incorporate diagram predicates functional specifications essential ingredient functional approach missed fdm similar models 
basic discovery category theory possible describe internal structure objects class externally stating certain properties arrow diagrams adjoint class 
consider example class diagram shown fig 

infer diagram object class married assigned man object woman object wife 
allow state married object pair man object woman object 
ensure property semantic models class married declared relationship class man man oe married person oe woman wife man phi phi phi married person woman wife man oe married person woman wife sets functions graph er diagram sketch internal object structure arrow diagrams woman correspondingly marked famous er diagram notation diamond fig 

node married intrinsically different nodes man woman way treating types leads heterogeneity object classes 
way express required property married objects shift focus nodes arrows declare pair wife separation property objects married wife wife case function married man theta woman married objects identified pairs man theta woman property arrow diagram wife enforces certain internal structure married objects 
introduce diagram predicate separating shape predicate family arrows common source agree denote family satisfying predicate arc required specification class married look shown fig 

picture contains diagram markers double body arrow arc brackets 
marker hung diagrams single arrow denotes property isa arrow 
arc marker denotes property commonly targeted family functions cover target object target class image source classes 
specification states person object man object woman object ii married object pair man theta woman example quite simple demonstrates specify tuple types variant types arrow diagrams properties show done set type 
gives rise general notion arrow diagram predicate general paradigm specifying internal structure classes externally diagram predicates 
paradigm provides extremely flexible powerful specification mechanism functional approach specifying data missed fdm 
bit involved examples sketches semantic modeling including sketch specification queries semantic schemas 
arrow specification diagram predicates sketch follows general results categorical logic specification described formally say higher order logic replaced corresponding equivalent sketch 
fixed big collection diagram predicates operations compositions cover formalizable structures 
known categorical result explain database theory terms 
sketch vocabulary strict compact 
sketches graphical constructs consisting kinds items nodes interpreted sets ii arrows interpreted functions iii marked diagrams labeled collections nodes arrows interpreted constraints 
semantics arrow sketch function set set 
diagram arrows domains codomains arrows may coincide marked label functions satisfy certain predicate 
say extension gamma sketch satisfies constraint course draw sketch collection diagram predicates markers declared organized signature say pi 
sketch pi sketch predefined signature pi 
suggest way manage heterogeneity semantic models 
model vocabulary constructs specially arranged convertible signature diagram predicates pi specifications converted pi sketches 
adjusting visualization pi predicates visual presentations pi sketches close semantic schemas seen externally see details 
way diversity semantic models transformed variety sketch data models different signatures 
sketches different signatures sketches uniformly compared integrated relating integrating signatures 
task far trivial precisely formulated approached methods developed category theory address issue specially forthcoming sense similar task operating positional numbers different bases 
anyway interesting particular cases signature integration easy 
place sketches data models roughly visualized picture fig 

horizontal correlation er diagrams oo design diagrams points equal comprehensibility capability simulate notations explained section 
string specification languages sql simulated sketches 
suggesting sketches want enforce practitioners researchers universal graphical language collection graphical constructs likes 
suggest concerns specified semantic schemas 
question visualize specification constructs marked semantic schemas 
accurate distinction logical specification visualization simultaneously parallelism key advantages sketch approach practical view point deserve additional words 
clear distinction logical specification visualization provided presence formal semantics sketches sketch notation favorable comparison notational systems semantic modeling 
course logic decide problems design notational system art technology 
strict sketch pattern possible designate formalizable part design task state precise basic framework consideration formulate commutativity principle visualization conjunction diagram predicates conjunction visualizations monic arrows plane specification paradigms marked decorating tails covers decorated heads 
topic research 
parallelism specification graphical visualization provided graph nature sketch logic sharply distinguishes sketches semantic models externally graphical internally predicate calculus oriented string logics typical example niam 
repertoire graphical constructs models bulk kind logical formulas requires special visualization 
configurations visualization constructs arbitrary evident natural correlations graphics logical string formulas 
particular problem actual modern case tools underlying logic relational string 
course situations easily described logical formula hardly graphical image inverse situations 
language combine graphical string logics flexible notational mechanism 
want say opposition graph string quite semantic modeling arrow logic leads comprehensible specifications predicate calculus various string versions 
methodology sketch approach illustrated analogy 
sense place sketches heterogeneous space semantic models comparable modern positional numeral systems general space numeral systems including positional systems huge diversity non positional ad hoc systems egyptian roman 
analogy mean table 
specification data language minimal paradigm specified predefined base specification language sketches collections sets functions signature pi pi sketch original categorical sketches positional numeral systems finite cardinalities base numeral system positional number binary numbers question expressive power sketches analogous question arbitrary numeral system emulated positional 
positive answer evident everybody considers question pure syntactical frame thinking syntactically obvious translate roman numbers decimal numbers 
evident answer caused inherited habit think numeral numbers semantically thinking semantically roman number presentation finite cardinality expressed decimal number 
situation sketches somewhat similar universal expressive power nowadays evident everybody trained category theory may sound optimistic specialist semantic modeling habit think conceptual schemas formal semantic terms sets functions habit think conceptual schemas pure relational terms 
case doubts arbitrary complex logical formula expressed diagram predicate translation far evident nowadays textbook categorical logic see 
distinguishing specification visualization emphasized numeral systems example similar special disciplines writing positional numbers 
consider discipline figures written counter clockwise spiral number written inconvenient ambiguous virtually possible notation mark zeroes switching line number written examples different visualization techniques specification logic specifying finite cardinalities positional logic 
metadata modeling hyper sketch fibrations shown basic modularization concepts view data refinement data naturally described arrows denoting sketch mappings functors graph mappings compatible diagrams 
view schema pi sketch pair view schema pi sketch view mapping functor augmentation derived items 
refinement schema pair sr refinement schema sr refinement mapping augmentation sr derived items 
augmentation oe schema thought obtained adding derived items denoting derived information query specified schema schema specifies data augmented answer query 
collection queries specified schema containing top design methodology suggests data schemas complex process stepwise data refinement stage refinement system user views principal data schemas 
design process specified chain gamma view th stage refinement corresponding refinement 
view means sketch nodes denote data schemas arrows denote mappings views 
words coupled sending nodes arrows sketches sketch mappings 
analogy hypertexts call construct 
arrow pair ae component functor second component function assigns view schema refinement mapping ae 
think construction collection view hyper sketches placed fiber plane indexed number refinement steps inter fiber mappings 
explains name hyper text fibration term fibration borrowed category theory 
addition diagram hold commutative view mapping ae ae commutativity condition important constraint maintenance necessary holding integrity schema repository mandatory functionality metadata framework 
hand condition pair ae construction thoroughly studied category theory condition mapping ae called natural transformation functors ae 
functor assigning data schemas th fiber sketch 
presence commutativity entire construction fibration technical categorical sense 
constraint induced software reality leads mathematically justified construct 
consider remarkable fact instance general phenomenon extremely high relevance arrow language developed category theory software engineering cf 
construction fibration generalized way 
till assumed collection organized refinement chain 
may happen schema repository set chains outgoing common source example chains represent different directions design project directions fig 

strange chains meet node different projects lead view fig 
diverse 
words assume refinement steps indexes organized graph graph fig 
example node see fig 
coupled functor sending nodes data schemas arrows mappings views data schemas terminal schemas mappings provided shown fig 

arrow denotes refinement sketch mapping natural transformation refinement ae 
explained example fig 
refinements ae specified existence implicitly pointed circle square frames ffl nodes 
course commutativity condition described hold arrow view arrow addition refinement steps subjected conditions example different refinement chains common source target may required commutative 
specifies conditions properties diagrams graph sketch project sketch fig 

design process properly documented result vast multiple level schema repository 
seen project nodes mapped view arrows mapped refinements 
turn nodes view mapped data schemas stored library sketches relational schemas arrows view mapped view mappings stored library 
entire construction may look considering similar things normal category theory corresponding notation terminology arrow machinery developed 
hand assert level arrow structure immediate generalization concept schema grid proposed works italian school 
concept tried series projects performed important institutions bank italy italian state administration 
believe construction precise explication intention underlying concept schema grid 
transaction modeling arrow sketches remind data structured sketch extension mapping functor sending nodes object classes arrows 
transaction specified input output data schema sketches addition sketches related specified arrow span oe prs compare arrow definition relation classes section enjoy taste arrow thinking 
intended meaning prs denote common persistent part extension change transaction 
semantics transaction function sending extension extension restrictions prs equal 
description specified arrow diagram 
ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi 
project sketch fi fl fi fl fi fl fi fl fi fl oe oe oe fi fl fi fl fi fl fi fl fi fl oe oe oe oe 
ffl ffi fi fl fi fl fi fl fi fl fi fl oe oe ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi oe ffl ffi fi fl fi fl fi fl fi fl fi fl oe oe oe oe ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi oe ffl ffi fi fl fi fl fi fl fi fl fi fl oe oe oe oe ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi notation sketches denotes sketch augmentations derived items augmentations augmentations integration augmentations denotes sketch mapping extension example fibration oe prs oe omega oe omega prs omega prs omega omega omega omega omega denotes universe extensions nodes arrows schemas taken 
diagram assumed commutative 

prs prs transaction interpreted arrows arrows arrows 
way arrow framework specifying transactions developed 
example parallel execution transactions interaction specified diagram omega denotes special operation aggregating sketches precise terms operation tensor product 
remarkable fact simple conceptually transparent framework extended capture arbitrary process interconnection networks including cycles see 
processes naturally specified arrow logic 
practical specification methodologies various graph notational systems data flow diagrams petri nets widely specifying behaviour iss 
conjecture notational systems arranged refined sketches representing corresponding interaction categories 
summary sketch precisely defined formal construct directed multigraph endowed diagrams labeled markers predefined signature 
sketches studied mathematical methods subject category theory basic framework established 
modeling software sketches subject computer science mathematics 
roughly divided data modeling process modeling meta data process modeling 
structures modeled simple simple ad hoc means sufficient 
complex structures need special means considerations hopefully show sketches powerful natural specification paradigm 
applicability sketch framework visualized fig 
specification space familiar square picture inter relations oo relational databases built stonebraker considered oo rdbms projection space 
modern complex iss built oo principals component data procedure meta structures complex logic structuring suitable modern narrow fibration logic 
flexibility sketches modeling correspondingly specification tool provided existence different substantial interpretations sketch items 
interpretations possible 

semantic data modeling nodes sets arrows functions 
software specifications arrow logic framework 
object oriented design nodes object classes arrows 

functional programing nodes data types arrows programs procedures 

logic logic programing nodes statements propositions arrows deductions proofs 

process modeling nodes interfaces arrows processes 

transaction modeling nodes data states arrows transactions 

meta modeling nodes data process schemas sketches arrows mappings functors 
interpretations reside square ds simple ps complex plane ms thoroughly studied semantics computation research see 
interpretations structural aspects square ds complex ps simple developed utilized 
papers aim technology development purely computer science research particular sketch solution long standing problem heterogeneous view integration described 
modeling transactions square complex complex stage initial development speak technology 
metadata modeling interpretation plane ps developed integral data model independent framework specifying database architecture proposed 
sketch processor software applications applying sketches software engineering subject technology application contrast technology development discussed 
sketch processor program allows user perform gamma set signature diagram markers gamma draw edit sketches signature gamma set mappings signatures sketches gamma integrate signatures integrate sketches different signatures gamma perform various operations sketches integration intersection subtraction gamma set nodes sketches arrows sketch mappings gamma maintain integrity 
sketch processor supports framework maintenance management complex metadata environments schema repositories 
alpha version processor implemented frame inform system 
sketch processor purely sketch engine knows interpretation nodes arrows basic sketches 
augmented modules interpreting sketches diagram markers translating sketches sql code code java code 
remarkable fact programing languages treated sketch signatures particular special key words markers way programs sketches 
immediate consequence translations sketches sql code code put formal pattern sketch rewriting determined rewriting rules 
format rewriting rules hard coded rules parameters 
design translation modules require development processor install procedure translating sketches say sql code needs set list corresponding sql tailored rewriting rules enter processor 
sketches surprising possibility say data general 
data signature diagram predicates pi ii pi sketch specifying data schema iii extension mapping gamma sending nodes arrows sets object classes functions way diagram predicates constraints occurring respected 
universality opens extremely wide perspectives building various sketch applications 
database design oo design hypertext document design managing schema repositories reverse engineering data warehousing managing business rules parallel design complex iss incomplete list immediate applications realization provided implementation sketch processor translating modules 
principally possible attractive technically involved applications sketch dbms sketch expert systems 
realized systems significantly intellectual flexible current ones sketches semantically rich expressive formalism data knowledge representation see aspects 
gamma delta theta xi pi sigma upsilon phi psi omega gamma horizontal vertical axis scales richness data resp 
procedural structures employed 
curves trace evolution databases programming languages 
middle line depicts kinds logical algebraic machinery involved mathematical models 
discrete mathematics matrices boolean polynomials 
string relational logic tuple algebras 
graph categorical logic diagram algebras 
trident symbolizes systematic attempt applying theory practice success relevance mathematical model evaluated picture software evolution human activity impossible descriptions 
necessity obvious statements vital importance speak humans descriptions important mandatory activity richer logical schemas goes denotational formulations 
goes absence clear specifications serious obstacle till benefits having specification language exceed efforts development 
software computer intellect somewhat similar human simultaneously software human activity reached stage clear semantic specifications crucial factor 
question languages suitable achieve goal 
turn semantic specifications impossible mathematical models software constructs question suitable mathematics 
course genetic gaps mathematics applied methodology methodology practice quite normal 
normal size gaps extent disagreement opposite sides observe software engineering 
resulted common general disappointment practitioners methodology logical mathematical support software technology 
assert cause gaps subsequent disappointment inherited non applicability theoretical mathematical logic algebra software engineering unsuitable mathematical tools theory unsuitable unsuitable theory suitable 
oversimplified picture software evolution mathematics employed traces history situation see fig 

certainly attempt describe software world concise graphical image doomed speculative 
global threads identified shown picture infamous impedance mismatch db pl arisen seventies trend modern computational procedures operate extremely rich data structures trend databases flexible rich computational view point 
fact manage modern distributed iss effectively forced think terms semantically valid computational procedures join db pl integrated oo framework db pl evolutions tend meet oo supervision 
theory line appears computation modeling powerful tools category theory attacking somewhat obsolete goal data modeling actual problems attacked unsuitable tools 
graph object oriented specifications scope classical relational model just focus ct category graph composable arrows oo ct seen kind oo mathematics abstraction object encapsulation heart arrow thinking underlying ct experience ct shows oo requires special kind thinking dynamic arrow thinking terms sets morphisms opposed static thinking terms sets elements 
mathematics oo ct nice amalgamation modern trends software modern mathematics 
general suggestion incorporate powerful categorical tools arrow logic sketch specification paradigm modeling software constructs seriously built unified specification framework modern information technologies 
aware risk making general statements predictions software assert step result significant increasing software design productivity 
written specialist database design decade experience semantic modeling designing large databases year experience applying category theory concepts subject mathematician decade experience categorical treating logical metamathematical concepts year experience db theoretical interpretations categorical constructs 
year guess collaboration easy due obvious reasons convinced unexpectedly high relevance category theory nonsense concrete things semantic modeling database design structuring schema repositories reverse engineering interoperation heterogeneous systems database theory 
current nearest situation relating category theory se theory practice similar age calculus th century differentiation integration techniques mechanical engineering coupled closely fact single discipline theoretical mechanics elasticity theory preimages modern purely mathematical discipline separated merge 
situation ct se slightly different mathematics designated developed predict nearest coupled se 
initial steps done conjecture years arrow nonsense category theory basic mathematical discipline necessary software engineer ordinary linear algebra calculus mechanical engineer 
abramsky 
interaction categories communicating sequential processes 
roscoe editor classical mind essays honour hoare pages 
prentice hall int 
atkinson bancilhon dewitt maier zdonik 
object oriented database system manifesto 
conference deductive object oriented databases kyoto japan 
barr wells 
category theory computing science 
prentice hall international series computer science 
batini battista santucci 
structuring primitives dictionary entity relationship data schemas 
ieee trans soft engineering 
diskin 
algebraic graph approach management systems schema integration sketches equations 
generation information technologies systems nd int workshop pages israel 
ftp ftp cs chalmers se pub users diskin papers db ps gz 
diskin 
view integration sketches equations 
foundations intelligent systems proc 
th int symposium ismis springer lnai pages 
diskin 
formalization graphical schemas general sketch logic vs heuristic pictures 
th int congress logic methodology philosophy science 
published special edition kluwer publ ftp ftp cs chalmers se pub users diskin ps gz 
diskin 
formalizing graphical schemas conceptual modeling sketch logic vs heuristic pictures 
technical report frame inform systems riga latvia 
accepted int symp knowledge retrieval storage efficiency kruse published registration fee ftp ftp cs chalmers se pub users diskin papers db kruse ps gz 
diskin 
arrow logic metadata environment formalized graph framework structuring metadata repositories 
technical report frame inform systems riga latvia 
ftp ftp cs chalmers se pub users diskin reports tr ps 
diskin 
formalizing schemas federal database environment architecture 
technical report frame inform systems riga latvia 
ftp ftp cs chalmers se pub users diskin reports tr ps 
diskin 
generalized sketches algebraic graph framework semantic modeling database design 
technical report frame inform systems 
ftp ftp cs chalmers se pub users diskin reports tr ps 
diskin 
graph logic er diagrams taming heterogeneity semantic data models 
technical report frame inform systems riga latvia 
submitted data knowledge engineering companion 
ftp ftp cs chalmers se pub users diskin reports tr ps 
diskin 
variable set semantics generalized sketches er objectoriented oo 
appear data knowledge engineering manuscript available ftp ftp cs chalmers se pub users diskin er ps 
diskin 
variable sets functions framework conceptual modeling integrating er oo sketches dynamic markers 
object oriented entity relationship modeling proc 
th int conf springer lncs pages 
diskin 
graphical formalized framework specifying view systems 
advances databases information systems adbis st east symposium 
ftp ftp cs chalmers se pub users diskin papers db adbis ps 
drew king mcleod rusinkiewicz silberschatz 
report workshop semantic heterogeneity interoperation multidatabase systems 
sigmod record 
halpin 
fact oriented approach schema transformation 
rd symp springer lncs pages 
jifeng hoare 
categorical semantics programing languages 
mathematical foundations programing semantics springer lncs pages 
johnson 
value commutative diagrams information modeling 
algebraic methodology software technology amast 
springer 
kifer lausen wu 
logical foundations object oriented frame languages 
journal acm 
langmaack pnueli 
de roever 
foreword 
compositionality 
proceedings int 
symposium 


model theory computer science appetizer 
abramsky gabbay maibaum editors handbook logic computer science volume 
oxford university press 
mineau moulin sowa editors 
conceptual graphs knowledge representation 
number lnai 
springer 
moggi 
category theoretic account program modules 
mathematical structures computer science 
navathe 
years modeling methodologies tools 
entity relationship modeling er number springer lncs 
pitts 
categorical logic 
abramsky gabbay maibaum editors handbook logic computer science volume vi 
oxford university press 
shipman 
functional data model data language 
acm tods 
stonebraker 
object relational database systems 
russian 
ullman 
comparison deductive object oriented database systems 
deductive object oriented databases dood springer lncs pages 
wadler 
comprehending monads 
mathematical structures computer science 
