anthony jameson paris carlo tasso eds user modeling proceedings sixth international conference um 
vienna new york springer wien new york 

available line um org 
user modeling adaptive navigation support www tutoring systems gerhard weber marcus specht department psychology university trier germany 
learning systems electronic textbooks accessible www lack capabilities individualized help adapted learning support emergent features site intelligent tutoring systems 
discusses problems developing interactive adaptive learning systems www 
introduce elm art ii intelligent interactive textbook support learning programming lisp 
elm art ii demonstrates interactivity adaptivity implemented www tutoring systems 
knowledge component system uses combination overlay model episodic user model 
supports adaptive navigation individualized diagnosis help problem solving tasks 
adaptive navigation support achieved annotating links 
additionally system selects best step curriculum demand 
results empirical study show different effects techniques different types users lessons programming course 
originally www retrieve information world 
soon clear www able allow extended interactivity 
increased utilization interactive features www lot learning systems emerged introduce users various domains 
number learning courses exploding see lot interesting features emerge improved capabilities new www browsers 
systems experimental stage 
provide limited support users familiar new domain 
systems adapt particular user site tutoring systems 
discuss student modeling necessary individualized tutoring system goals student modeling 
introduce ii adaptive knowledge tutoring system www supports learning programming lisp 
show goals individual student modeling accomplished system report results empirical study different types adaptive navigation support 
supported innovation author 
weber specht goals student modeling www tutoring systems main features intelligent tutoring systems curriculum sequencing interactive problem solving support 
features differentiate intelligent learning systems traditional computer assisted instruction incorporate intelligent techniques skilled human teachers teaching classes coaching individual learners 
intelligent learning systems classroom necessarily need include intelligent features 
systems concentrate diagnosing solutions exercises johnson soloway support stages problem solving exercises problem solving tasks anderson weber 
www learning systems outside classroom 
distance learning situation teacher directly available help learning adapt number nature new concepts learner current knowledge state 
learning system play role teacher far possible 
system build individual user model user able adapt curriculum user help navigate course support working exercises problem solving individually 
curriculum sequencing adaptive guidance curriculum sequencing describes order new knowledge units skills learned corresponding teaching operations presenting examples demonstrations asking questions providing exercises tests solving problems particular learner 
textbooks traditional learning medium curriculum predefined author textbook 
holds texts delivered www 
curriculum predefined author text developer system 
authors provide optimal learning path assumed average learner 
established strategy writing textbooks 
case electronic textbooks situation totally different 
electronic textbooks usually form hypertext allows random surfing text space 
order get lost hyperspace guidance system may helpful 
www browsers annotate visited links able give hint pages suitable visited 
situation arises learner complete beginner new domain learned possesses possibly incomplete incorrect knowledge topics learned 
case waste time learner read pages canonical curriculum corresponding problems tests learner familiar 
situations information contained individual user model learning system adapt presentation pages particular user 
simple type user model overlay model carr goldstein may suited represent necessary knowledge individualized curriculum sequencing adaptive guidance hypertext 
simplest form user model contains information item knowledge base learned completely learned status unknown 
examples systems knowledge bip barr item ip brusilovsky rez 
elaborate user model differentiate detailed knowledge states 
important distinguish pages describing new knowledge visited adaptive navigation support www tutoring systems pages learners successfully performed tests problem solving tasks 
additionally depending results tests exercises system decide prerequisite knowledge known learner knowledge items 
www learning systems maintaining individual user model observing diagnosing learner knowledge state complicated 
systems exist rudimentary types individualized curriculum sequencing adaptive hypertext guidance brusilovsky kay lin schwarz 
advanced techniques knowledge navigation support described eklund press rez 
describe alternative approach elm art ii 
individual help problem solving support knowledge learning systems support learners working exercises problem solving 
main techniques 
hand lot systems exist provide intelligent diagnosis complete solutions exercises problem solving tasks 
domain learning programming known systems exist offer type problem solving support ii soloway johnson ii elm pe weber 
side systems model tracing approach anderson provide continuous interactive problem solving support working exercises 
currently advanced systems model tracing tutors act theory anderson programming tutors elm pe elm art elm model weber 
act model tracing tutors system observes learner solving problem gives advice solution path result error 
type tutoring suited site tutoring systems 
direct observing single problem solving steps performed line www tutoring systems delay caused correspondence server long 
problem may solved creating intelligent site agents java applets 
elm systems follow episodic learner modeling approach 
episodic learner modeling suited diagnosing complete incomplete solutions problems giving individualized help 
examples best fit current learning situation chosen basis individual episodic learner model weber 
diagnosis elm pe follow problem solving process directly performed demand 
approach meets needs client server communication employed learning systems 
elm art ii history developing elm art ii www introductory lisp course elm art elm adaptive remote tutor elm pe weber site intelligent learning environment supports example programming intelligent analysis problem solutions advanced testing debugging facilities 
intelligent features elm pe elm model weber specht weber 
years elm pe introductory lisp courses university trier 
course materials students regular classes completed printed materials single students working printed materials 
students elm pe practice new knowledge working exercises 
way able acquire necessary programming skills 
elm pe limited platform dependent implementation user interface large size application 
limitations hindered wider distribution usage system 
decided build www version elm pe intranets internet 
step translate texts printed materials form html files dividing small subsections text pages associated concepts learned 
concepts related describing concepts prerequisites outcomes building conceptual network 
interactions learner elm art recorded individual learner model 
page visited corresponding unit conceptual network marked correspondingly 
presenting text pages www browser links shown section subsection pages overview annotated corresponding simple traffic lights metaphor referring information individual learner model schwarz 
red ball front link indicated corresponding section text page ready learned necessary prerequisites met 
green ball indicated page section ready recommended learned yellow ball indicated link ready visited especially recommended system 
elm art enabled direct interactivity providing live examples intelligent diagnoses problem solutions 
examples function calls evaluated 
learner clicked live example link evaluation function call shown evaluator window similar listener ordinary lisp environments 
users type solutions programming problem editable window send server 
evaluation diagnosis problem solutions performed way elm pe 
feedback messages proven useful elm pe sent back learner 
approach converting printed textbooks electronic textbooks elm art developed interbook brusilovsky authoring tool creating electronic textbooks adaptive annotation links 
experiences elm art understood printed textbooks suitable transformed hypertext pages electronic textbooks manner 
textbooks usually written sequential order single pages read easily accessed page course 
additionally simple adaptive annotation technique elm art improved 
users get information state different concepts visited learned learn 
importantly inferring knowledge state particular user visiting possibly reading new page appropriate correctly pointed eklund press 
objections shortcomings motivation building elm art ii new version elm art describe sections 
adaptive navigation support www tutoring systems electronic textbook adaptive guidance knowledge representation 
elm art ii represents knowledge units learned electronic textbook terms conceptual network brusilovsky 
units organized hierarchically lessons sections subsections terminal pages 
terminal pages introduce new concepts offer problems solved 
unit object containing slots text corresponding page information relate units concepts 
static slots store information prerequisite concepts related concepts outcomes unit concepts system assumes known user worked unit successfully 
units terminal pages tests slot may contain description group test items learner perform 
test items solved successfully system infer user possesses knowledge concepts explained unit 
problem pages slot storing description programming problem 
dynamic slots stored individual learner model built user 
user model updated automatically interaction elm art 
page visited course corresponding unit marked visited user model 
test items programming problem solved correctly outcome concepts unit marked known inference process started 
inference process concepts prerequisites unit recursively prerequisites units marked inferred 
information dynamic slots user model annotate links individually guide learner optimally course 

collections test items associated page units 
single test items may belong different 
elm art ii different types test items supported test items forced choice test items multiple choice test items free form test items 
test items users simply answer questions clicking button 
forced choice test items users answer question selecting alternative answers multiple choice test items users answer question selecting correct answers provided system 
free form test items users type answer question asked freely form 
parameters determine single test items learner 
group length parameter determines test items single page 
min problems solved parameter defines minimal number test items solved correctly 
max errors parameter determines errors maximally allowed test items single page 
parameters set 
test items long test items answered correctly 
fixed number test items simultaneously page 
system gives feedback number errors test items page presents erroneous test items users answers correct answers 
additionally explanation answer provided system correct 
explanations stored separately test item 
correctly solved test items current accessed icon page 
displayed new window showing correct answers reason answer correct 
users called solve test items long test items solved correctly incorrect weber specht submitted test items 
individual user model test items solved correctly particular stored dynamic slot 
test items solved correctly making errors outcome concepts corresponding unit marked solved inference process started 
current version elm art ii values min problems solved parameter vary depending difficulty tests cases max errors parameter set 
solving number min problems solved test items correctly group test items shown page error allowed 
lisp course tests play twofold role 
hand tests check user possesses correct declarative knowledge 
especially useful course lot new concepts data types function definitions introduced 
hand tests evaluation tasks check users able evaluate lisp expressions correctly 
skills evaluation inverse skills generating function calls function definitions 
evaluation skills needed decide programs correctly find errors programming code 
program creation skills practiced special tasks 
supported episodic learner model approach described section 
visual adaptive annotation links 
elm art ii uses extension traffic lights metaphor annotate links visually see 
top terminal page navigation button line links belonging subsection shown links annotated corresponding current state 
green red yellow orange balls annotate links additionally texts links outlined different styles aid color blind users 
green ball means page ready suggested visited concepts taught page ready learned 
prerequisites concept learned inferred known 
red ball means page ready visited 
case prerequisite concepts known learner system infer successfully solved tests programming problems user possess required knowledge 
user allowed visit page case solves corresponding test programming problem correctly system infers backwards necessary prerequisites known 
strong assumption diagnosing user knowledge state changed fuzzy probabilistic models 
yellow ball different meanings depending type page link points 
case terminal page test problem page yellow ball means test problem solved correctly 
case terminal page yellow ball indicates page visited 
case lesson section subsection link yellow ball means subordinated pages learned visited 
orange ball different meanings 
case terminal page orange ball means system infers successfully learned pages content page known learner described 
case lesson section subsection link orange ball means page visited subordinated pages visited worked successfully 
adaptive navigation support www tutoring systems browsers supporting javascript different meanings state link explained status line bottom window cursor located link 
individual curriculum sequencing 
adaptive annotation links powerful technique aid users navigating pages course users may confused best step continue course 
may happen learner 
example text page free form test items adaptive annotation links 
weber specht moves hyperspace loses orientation 
learner wants follow optimal path curriculum order learn fast completely possible 
meet needs button navigation bar text pages allows user ask system best step depending current knowledge state particular user 
algorithm select best step particular user works follows starting current page page searched page annotated suggested visited 
may page terminal page problem solved correctly moment 
page prerequisites fulfilled pages course checked see visited solved annotated suggested visited 
learner completes course successfully best page 
line help episodic user modeling elm art ii supports example programming 
encourages students re code previously analyzed examples solving new problem 
hypermedia form course especially similarity links examples help learner find relevant examples previous experience 
important feature elm art ii predict student way solving particular problem find relevant example individual learning history 
kind problem solving support important students problems finding relevant examples 
answering help request elm art ii selects helpful examples sorts corresponding relevance presents student ordered list hypertext links 
relevant example student happy example reason try second suggested examples 
implementation feature directly adopted version elm pe weber 
student failed complete solution problem student find error reported evaluating code evaluator window ask system diagnose code solution current state 
system gives feedback providing sequence help messages increasingly detailed explanation error suboptimal solution 
sequence starts vague hint wrong ends code level suggestion correct error complete solution 
cases student understand messages error step need explanations 
solution corrected completed checked forth 
student kind help times required solve problem correctly 
context option provide code level suggestion important feature elm art ii distance learning system 
ensures students ultimately solve problem assistance human teacher 
individual presentation example programs diagnosis program code episodic learner model elm weber 
elm type user learner model stores knowledge user learner terms collection episodes 
sense case learning episodes viewed cases kolodner 
construct learner model code produced learner analyzed terms domain knowledge hand task description hand 
cognitive diagnosis results derivation tree concepts rules learner solve problem 
concepts adaptive navigation support www tutoring systems rules instantiations units knowledge base 
episodic learner model instantiations 
elm examples course materials pre analyzed resulting explanation structures stored individual case learner model 
elements explanation structures stored respect corresponding concepts domain knowledge base cases distributed terms instances concepts 
individual cases parts different purposes 
hand episodic instances analyses shortcuts actual code plan match corresponding patterns episodic instances 
hand cases analogical component show similar examples problems reminding purposes 
experimental study annotation curriculum sequencing new version elm art ii started accompanying empirical study look effects combining new adaptive annotation technique ii guidance offered button 
treatments levels investigated simultaneously 
treatment contrasts adaptive annotation links described simply annotating links visited yellow ball visited orange ball 
second type annotation control group comparable usual annotation performed www browsers annotate links visited cached 
second treatment contrasts providing best step button version navigation button 
user starting elm art ii assigned randomly treatment conditions 
introductory questionnaire users asked familiar programming languages know lisp 
experimental study data subjects know lisp 
subjects come introductory lisp course held psychology department university trier 
additionally users world login lisp course 
hypothesis postulates visual adaptive annotation links individual curriculum sequencing button motivate users proceed learning 
people outside university visit elm art ii see introductory interactive programming course works www 
measure nature link annotation individual curriculum sequencing number pages tests problems users solved correctly stopped working elm art ii 
investigation subjects working elm art ii visited pages glance course experience lisp finish third lesson 
fourteen subjects previous experience programming language subjects familiar programming language 
results shown table 
table shows significant effect individual curriculum sequencing specific button subjects previous experiences programming language 
subjects button worked pages subjects button ms beginners tried learn elm art ii 
programming beginners subjects weber specht familiar programming language table visited pages solved exercises problems working adaptive link annotation effect quite statistically significant small sample vs pages ms 
results easily interpreted looks navigation behavior complete beginners closely 
beginners experience www browser 
subjects profited guided directly system button 
button navigate course materials 
learning navigate hypertext addition learning programming language may difficult 
individual adaptive guidance system especially helpful complete beginners 
subjects familiar programming language familiar web browsers 
pleased link annotation stayed longer learning system links annotated adaptively 
second hypothesis postulates number navigation steps reduced adaptive navigation support individual curriculum sequencing button 
techniques additive effect navigation process 
fourteen subjects finished lesson introductory lisp course elm art ii 
number navigation steps link annotation button shown table 
differences average numbers navigation steps significant small number subjects data support hypothesis partially 
subjects individually guided button needed fewer steps finish lesson subjects option vs steps respectively 
adaptive link annotation systematic effect number navigation steps 
small effects observed lesson fade away lessons 
individual guidance system help learners follow optimal path curriculum 
table 
mean number pages tests problems users finish third lesson solved correctly stopped working elm art ii 
users previous programming language 
users previous programming language 
adaptive annotation button button adaptive annotation button button adaptive navigation support www tutoring systems subjects understand simple hierarchical architecture programming course follow best learning path guidance 
results mean adaptive link annotation adaptive curriculum sequencing important expected 
shown data techniques especially useful starting phase users especially beginners frustrated 
techniques presumably helpful advanced users posses knowledge 
case system able adapt particular user helpful navigating pages system infers known 
shown advantage study 
system elm art ii described example implemented www 
integrates features electronic textbooks learning environments intelligent tutoring systems 
user modeling techniques simple overlay models elaborated episodic learner models suited allow adaptive guidance individualized help problem solving support www learning systems 
www help move laboratories intelligent system due enormous requirements computing power capacity classrooms permanent availability distance learning 
elm art ii implemented programmable www server cl url www ai mit edu projects doc cl home page html 
elm art ii accessed url www psychologie uni trier de 
anderson 

rules mind 
hillsdale nj lawrence erlbaum associates 
anderson corbett koedinger pelletier 

cognitive tutors lessons learned 
journal learning sciences 
barr beard atkinson 

computer tutorial laboratory stanford bip project 
international journal man machine studies 
brusilovsky 

intelligent tutor environment manual introductory programming 
educational training technology international 
table 
mean number navigation steps needed lesson 
adaptive annotation button button weber specht brusilovsky schwarz weber 

elm art intelligent tutoring system world wide web 
gauthier lesgold eds proceedings third international conference intelligent tutoring systems 
berlin springer 

brusilovsky schwarz weber 

tool developing adaptive electronic textbooks www 
proceedings webnet world conference web society 
charlottesville aace 

weber 

example explanation learning environments 
gauthier lesgold eds intelligent tutoring systems proceedings third international conference 
berlin springer 

carr goldstein 

overlays theory modelling computer aided instruction ai memo 
cambridge ma massachusetts institute technology ai laboratory 
eklund 
press 
knowledge navigation support hypermedia courseware west 
australian educational computing 
johnson 

intention diagnosis novice programming errors 
london pitman 
kay 

course programming language 
pro ceedings second international www conference mosaic web 
kolodner 

case reasoning 
san mateo ca morgan kaufmann 
lin 

adaptive interaction www 
carlson eds proceedings ed telekom world conference educational telecommunications 
charlottesville va aace 

rez guy 

adaptive hypermedia system 
greer ed proceedings ai ed th world conference artificial intelligence education 
washington dc aace 

rez guy 

hypermedia intelligent adaptive hypermedia 
maurer ed proceedings ed media world conference educational multimedia hypermedia 
graz austria aace 

schwarz brusilovsky weber 

world wide intelligent textbooks 
carlson eds proceedings ed telekom world conference educational telecommunications 
charlottesville va aace 

soloway rubin woolf johnson 

ii ai programming tutor 
journal computer instruction 
de decker 

semantic augmentation student program analyser 
proceedings seventh international peg conference 



reverse engineering novice program analysis 
ph dissertation katholieke universiteit leuven belgium 
weber 

episodic learner modeling 
cognitive science 
weber 

elm programming environment tutoring system lisp beginners 
cker eds cognition computer programming 
norwood nj ablex publishing 

