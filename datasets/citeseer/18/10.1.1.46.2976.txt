detecting intrusions system calls alternative data models christina stephanie forrest barak pearlmutter dept computer science university new mexico albuquerque nm forrest cs unm edu intrusion detection systems rely wide variety observable data distinguish legitimate illegitimate activities 
study observable sequences system calls kernel operating system 
system call data sets generated different programs compare ability different data modeling methods represent normal behavior accurately recognize intrusions 
compare methods simple enumeration observed sequences comparison relative frequencies different sequences rule induction technique hidden markov models hmms 
discuss factors affecting performance method conclude particular problem weaker methods hmms sufficient 

forrest introduced simple intrusion detection method monitoring system calls active privileged processes :10.1.1.47.6145
process represented trace ordered list system calls process execution 
showed program normal behavior characterized local patterns traces deviations patterns identify security violations executing process 
important characteristics approach introduced :10.1.1.47.6145
identifies simple observable short sequences system calls distinguishes ieee symposium security privacy ieee computer society pp 

normal intrusive behavior 
observable simpler earlier proposals especially standard audit packages sunos bsm 
second method analyze model sequences simpler proposals 
records presence absence sequences compute frequencies distributions identify sequences important 
advantage simple approach computational efficiency question naturally arises accurate models data possible 
past years statistically learning techniques developed 
methods potential generating accurate compact models system call data groups published results experiments alternative models applied system calls :10.1.1.50.2488:10.1.1.40.1452
available methods designed specific applications idiosyncrasies 
goal compare various methods systematically possible larger realistic suite data sets past 

choosing applicable methods ways system call data characterize normal behavior programs involves building training model traces normal processes 
section discuss alternative approaches task select careful investigation 
list methods discussed empirical approach taken ignores family methods formal specification program legal activities 
means exhaustive cover believe appropriate problem 

enumerating sequences methods described depend enumerating sequences occur empirically traces normal behavior subsequently monitoring unknown patterns :10.1.1.47.6145:10.1.1.43.6197
different methods enumeration tried defines different model generalization data 
statistical analysis patterns earlier 
original lookahead pairs :10.1.1.47.6145
database normal patterns consisted list system call system calls follow separation system calls 
method implemented efficiently gave results original synthetic data sets 
reported contiguous sequences fixed length gave better discrimination lookahead pairs :10.1.1.43.6197
database normal behavior remained compact computational efficiency reasonable 
earlier method known time delay embedding tide method called sequence time delay embedding stide 
comparisons reported contiguous sequences 

frequency methods frequency methods model frequency distributions various events 
system call application events occurrences pattern system calls sequence 
example frequency method gram vector classify text documents 
document represented vector histogram sequence frequencies 
element corresponds sequence length called gram value element normalized frequency gram occurs document 
histogram vector identifies point multidimensional space similar documents expected points close 
damashek dot product histogram vectors measure similarity pointed measures possible 
set documents represented centroids set individual histograms dot products taken resulting centroid individual histogram vector test membership set 
adapting method traces system calls computer programs straightforward 
centroid vectors model normal individual traces vectors distant centroid considered anomalous 
approach suitable line testing trace vectors evaluated program terminated 
difficult determine size vector space possible sequences large guarantee subset sequences observed traces normal behavior complete 
coarse clustering documents suggest sufficient precision discriminate normal intrusive traces program 
frequency methods examine sequences individually making suitable line 
determination sequence anomalous empirically determined frequencies sequence approaches taken quite different examples illustrate 
helman propose ranking sequence comparing sequence known occur normal traces expected occur intrusions 
sequences occurring frequently intrusions infrequently normal traces considered suspicious 
unfortunately frequencies sequence possible intrusions known priori 
choose frequency distribution abnormal sequences assumption 
possibilities choosing distribution mentioned simplest assume abnormal distribution uniform 
helman method assumptions problematic system call application 
assumes data independent stationary 
series complete program traces stationary ordered correlations separate traces sequences trace :10.1.1.43.6197
programs different distributions sequences execution distinct regions trace 
sequences system calls clearly independent especially sequences overlap 
second problem characterizing frequencies abnormal sequences accurately 
sri takes different approach emerald system 
static distributions define normal abnormal behavior emerald compares short term frequency distributions new unknown traces longer term historical distribution 
prior knowledge estimation abnormal frequencies required 
long term distribution continually updated weight data stationarity required 
allow possibility intruder maliciously training system shift definition normal closer pattern produced intrusive behavior 
central methods idea rare sequences suspicious 
chose implement minimal version frequency method allow evaluate central idea 

data mining approaches data mining approaches designed determine features important large collection data 
current problem idea discover compact definition normal obtained simply listing patterns occurring normal 
identifying just main features patterns method able generalize include normal patterns missed training data 
lee approach study sample system call data 
program called ripper characterize sequences occurring normal data smaller set rules capture common elements sequences 
monitoring sequences violating rules treated anomalies 
results published synthetic data promising chose method testing 

finite state machines machine learning approach problem construct finite state machine recognize language program traces 
techniques building deterministic probabilistic automata sort task example 
methods generally determine frequencies individual symbols system calls case occur conditioned number previous symbols 
individual states automaton represent history observed symbols transitions states indicate symbols produced resulting state automaton 
algorithms building automata assumption data stationary 
particularly powerful finite state machine hidden markov model widely speech recognition dna sequence modeling :10.1.1.131.2084
hidden markov model hmm describes doubly stochastic process 
hmm states represent unobservable condition system modeled 
state certain probability producing observable system outputs separate probability indicating states 
having different output probability distributions states allowing system change states time model capable representing nonstationary sequences 
hmms computationally expensive powerful 
great deal information available usefulness demonstrated areas 
reasons decided hmms finite state machine representative experiments 

data sets original studies system call approach conducted primarily synthetic data sets 
earlier studies synthetic data sets suggestive necessarily predictors methods perform fielded systems 
consequently wider variety data sets current study 
include live normal data traces programs collected normal usage production computer system different kinds programs programs run daemons programs vary widely size complexity different kinds intrusions buffer overflows symbolic link attacks trojan programs denial service 
programs run privilege exception described misuse programs greatest potential harm system 
table summarizes different data sets programs collected 
data sets publicly available carefully described www cs unm edu data sets html 
intrusions taken public advisories posted internet 
trace list system calls issued single process execution 
simple definition meaning process trace varies program program 
programs process corresponds single task example lpr print job generates separate trace 
programs multiple processes required complete task 
named single daemon process runs continuously monitoring events awaiting requests occasionally spawning subprocesses handle certain tasks 
processes daemons number system calls trace varies widely seen comparing data lpr 
data lpr collected universities identical conditions os version lpr different users network configurations 
unm normal data set includes fifteen months activity mit data set includes weeks 
set includes large number normal print jobs single symbolic link intrusion consists print jobs 
detection synthetic traces collected production environments running prepared script program options chosen solely purpose exercising program meet real user requests 
program intrusions normal data available normal data training normal data testing number traces number traces number system calls number traces number system calls number traces number system calls mit lpr unm lpr named login ps inetd stide sendmail table 
amount data available program 
normal data training refers models built sequence length sequence length models training data 
test data sequence lengths includes normal data training set models 
anomaly traces considered successful detection intrusion 
named normal data consist single daemon trace traces subprocesses collected month 
intrusion named buffer overflow sample traces intrusion 
data include synthetic traces single live trace 
live trace long generates huge number system calls continually updates user screen left running days collect data 
intrusion buffer overflow 
named sample traces intrusion 
login ps normal data sets relatively small 
simpler programs little variation normal behavior expected additional traces 
small data set means insufficient data thorough analysis false positives 
login ps trojan intrusions allow unauthorized access system built back door 
number traces collected trojan program 
trojan program traces collected actual trojan programs installed live intrusion 
traces easy detect trojan program different version program replaced 
traces trojan programs created directly installed normal version program 
traces correspond back door break system ordinary users logging program normally back door 
ideally detect presence trojan code currently unauthorized access trace treated separate example intrusion 
stringent test foreign code executed 
inetd program typically started foreground process initiates daemon process run background exits 
daemon process turn initiates child processes perform fixed set initialization steps execute program 
child processes nearly identical 
normal data inetd include trace startup process daemon process representative child process 
intrusion inetd denial service attack ties network connection resources 
attack progresses system calls requesting resources return abnormally re issued 
intrusion data collected include startup process daemon process child processes daemon process expected show deviation normal behavior 
second denial service attack tested ties memory available system 
affects running program requests memory denial ofservice attack 
case departed policy monitoring privileged processes traced analysis program stide processing sendmail data 
normal intrusion data collected stide processing data interrupted denial service attack 
final data set sendmail consists normal data version sendmail running production mail server vulnerable known sendmail intrusions 
able collect large set live normal data false positive analysis 
note data collected different version sendmail earlier papers 

experimental design objective compare different methods data different programs getting better picture relative merits 
accurate intrusion detection correctly classify intrusions normal data 
errors category intrusions identified called false negatives 
errors second category normal data identified anomalous called false positives 
wish minimize kinds errors equivalently maximize true positives minimize false positives 
attempt measure performance terms system usage general observations computational effort 
data sets single intrusion script method single threshold intrusion detected missed 
get better picture gradual trade false positives false negatives occurs multiple intrusions combine results available programs 
composite results see methods multiple data sets single set parameters require hand tuning 
programs complicates design experiments 
comparable amounts data program building models normal 
programs vary complexity trace similar meaning program simply choosing fixed number traces system calls include approach 
second need define consistent measure comparing false positives 
shows number unique sequences function total number sequences seen data sets 
axis represents sequences seen chronological order traces added order collected 
sequence new gradually number new sequences drops 
way establishing consistent measure training data programs set target slope growth curve 
rate encountering new sequences drops preset value say data build model normal 
unfortunately growth curves data sets smooth 
traces pass new sequences new sequences encountered close 
surprising change system call order affecting sequence generally affects total number sequences number unique sequences 
typical database growth curve 
graph shows size normal database grows traces added chronologically 
nearby sequences 
considered methods smoothing curve get better estimate slope eventually settled approach 
shows different versions growth curve data 
pool normal data traces treated loop trace follows trace 
curve shown different starting point loop chosen randomly traces read order point 
allows examine variations growth curve reducing amount data disrupting chronological ordering traces 
total number sequences number unique sequences 
alternate database growth curves data 
light lines show standard growth curves different starting points training data dark line shows mean 
average individual growth curves shown darker line gives smoother estimate rate database grows 
precise measure rough way estimate training data 
experiments selected point average curve local slope new sequence traces remained way traces 
program average trace length estimate cases single long trace skewed average 
averaged lengths synthetic traces named median trace length 
chose groups training traces fashion sequences length sequences length 
data included second larger training set testing 
table shows training data program sequence length 
testing side false positives measured differently true positives 
detect intrusion require anomaly signal described exceed preset threshold point intrusion 
making single determination normal trace appears anomalous insufficient especially long traces 
program running days time flagged anomalous counted separately 
simplest way measure count individual decisions 
false positive rate percentage decisions normal data flagged anomalous 
note approach measuring true positives 
intrusion traces generally resemble normal traces large part individual sequence intrusive trace normal 

building models normal behavior modeled normal behavior data sets described section methods chosen earlier 
process took longer hmms methods 
largest data set hmm training took approximately months methods took hours 
smallest data sets hmm training times measured days compared minutes methods 
subsections explain details method 

sequence time delay embedding stide sequence time delay embedding stide profile normal behavior built enumerating unique contiguous sequences predetermined fixed length occur training data 
ran experiments sequence lengths 
sequence length slide window length trace system call time adding unique sequence normal database 
sequences stored trees save space speed comparisons 
building database requires single pass data methods described 
testing time sequences test trace compared normal database 
sequence database called mismatch 
individual mismatch indicate anomalous behavior sequence included normal training data 
date real intrusions studied produce anomalous sequences temporally local clusters 
convenient defining line measure anomalous activity 
derive line measure anomaly signal number mismatches occurring temporally local region called locality frame 
data reported locality frame system calls 
point test trace check current sequence mismatch keep track sequences mismatches 
locality frame count lfc gives anomaly signal 
somewhat different approach taken measure anomalous behavior hamming distances unknown sequences closest match normal database :10.1.1.43.6197
set threshold lfc traces considered normal 
time lfc reaches exceeds threshold anomaly recorded 
lfc threshold primary sensitivity parameter experiments described ranges 
lower lfcs tend catch intrusions give false positives higher lfcs tend produce fewer true false positives 

stide frequency threshold stide simple addition stide allows test premise rare sequences suspicious 
sequence database keep track seen training data 
training data processed determine sequence frequency 
experiments rare defined sequence accounting normal training data 
stide represents addition threshold sequence frequencies 
sequences test traces compared database stide 
rare sequences included database counted mismatches 
mismatches aggregated locality frame counts described earlier 
threshold locality frame counts primary sensitivity parameter 

ripper ripper repeated incremental pruning produce error reduction rule learning system developed william cohen 
rule learning systems typically classification problems 
training samples consist set attributes describing object classified target class object belongs 
examples ripper extracts rules form attrib attrib attrib true 
example class chosen attributes respectively class chosen attribute class default class 
conditions specify attribute equal certain value 
types data conditions possible 
multiple conditions taken mean conditions hold 
intrusion detection problem classification useful complete set examples abnormal class es train system 
primarily interested application anomaly detection positive negative instances 
lee adapted ripper anomaly detection learn rules predict system calls short sequences program traces 
program list unique sequences occurring program create ripper training samples 
sequence turned ripper sample treating system calls sequence attributes target class 
requires renaming system call ripper accept classes look attributes 
similar attribute target pairs created test traces case sequences just sample unique sequence 
ripper difficult time learning rules classes information system call occurs sequence 
frequencies sequence recorded simple duplication sequence times effective 
replicated training sample twelve times create training file lee stolfo 
ripper takes training samples forms hypothesis list rules describe normal sequences 
rule violation score established percentage times rule correctly applied training data 
rule conditions met times training data prediction correct times penalty violating rule lee average violation scores rank trace measure inappropriate line testing 
moving average violation scores locality frame gave excessive false positives 
call sequence violates high confidence rule mismatch equivalent stide mismatches described earlier 
mismatches aggregated locality frame counts described earlier 
chose mean rules violation scores greater 

hidden markov model standard hmms fixed number states decide size model training 
preliminary experiments showed choice application choose number states roughly corresponding number unique system calls program 
test programs alphabet system calls state hmms cases 
state hmm ps stide state hmm inetd state hmm sendmail 
states fully connected transitions allowed state state 
state need store probabilities associated transitions state probabilities associated producing system call 
program system calls model states means roughly values 
cases transition symbol probabilities initialized randomly trained algorithm described 
occasionally prior knowledge useful performing initialization 
case lpr data sets 
primary difference lpr traces length document printed 
reflected traces number read write pairs 
randomly initialized hmms devoted states great deal training time modeling different frequency distributions particular subsequence 
result hmms recognize intrusion 
model initialized predetermined read state write state arranged loop rest model states available represent parts traces accuracy improved 
assigned large probabilities desired transitions output system calls read write states low probabilities alternatives 
transition output probabilities states randomized 
training probabilities iteratively adjusted increase likelihood automaton produce traces training set 
passes training data required 
avoid fitting training data likelihood model producing second set normal traces training periodically measured 
second likelihood stopped improving training terminated 
mentioned earlier training hmm expensive 
calculations trace pass training data take ts length trace system calls see table number states symbols 
storage requirements high 
trellis intermediate values kept performing calculations particular trace requires floating point values 
longer traces values written memory mapped binary file 
fortunately testing efficient 
standard way test hmm compute likelihood produce data original training set 
simpler measure standard method sensitive trace length better suited line 
graph underlying hmm nondeterministic finite automaton 
read trace system call time tracking state transitions outputs required hmm produce system call 
hmm model program normal traces require transitions outputs intrusive traces system calls require unusual state transitions symbol outputs 
time list current possible states 
choosing state single system call consistent best path hmm sequence system calls keep track possible paths 
thresholds set normal state transition output probabilities 
encounter system call trace produced threshold transitions outputs flagged mismatch 
note lfc aggregate mismatches hmm anomalies usually temporally clumped thought fair count individual mismatches 
experiments threshold state transitions outputs 
parameter primary sensitivity parameter thresholds varying 
note hmms making anomaly decisions system call sequences methods 
time check system call depends model size size current list valid states 
tends stay small normal traces include states anomaly identified 
current valid state implementation program takes decide anomaly 
means process system call 
times improved converting model better representation automaton testing probability thresholds known 

results tested data modeling methods data sets traces unix programs different sensitivity thresholds 
false positives reported normal data training true positives reported traces anomalous behavior 
results discuss accuracy individual data sets 
get picture detection methods perform variety data averaged results data sets 
shows average results combination data modeling method sensitivity threshold 
different symbol denote method point shows performance particular threshold 
hmms distinguish results randomly initialized hmms hmms initialized include human knowledge modeled program 
axis represents ability detect anomalies 
mentioned earlier threshold signal intrusive trace counts correct detection intrusion 
axis represents false positives measured individual decision basis traces 
false positives shown fraction total number sequences system calls trace normal behavior range 
shows region primary interest 
rough estimate traces order system calls long 
identifying sequences system calls hmms anomalous roughly equivalent identifying trace anomalous 
course hold vast differences traces mentioned earlier 
suggest practicality false positive rates 
perfect performance correct detection intrusions false positives represented points upper left corner 
data sets individual true positive rate intrusion successfully detected zero data sets intrusion traces harder recognize 
true positive average simple representation intrusions detected 
normal data varied 
differences false positives span orders magnitude average heavily influenced worst results 
show median scores inset 
note scale false positives smaller median significantly lower average methods thresholds 
stide results show average false positives average true positives stide ripper hmm hmm median false positives median true positives 
composite results method data sets sequence length 
point represents performance particular threshold 
true positive values fraction intrusions identified 
sequence methods false positives fraction sequences giving mismatches specified locality frame count threshold 
hmms false positives fraction system calls corresponding state transitions outputs specified probability threshold 
points labeled hmm randomly initialized hmms hmm specially initialized hmms designed handle lpr data 
stide points appear median plot false positives scale 
results hmm thresholds map single median point shown 
new scale stide median results lower corresponding means low methods 
plotted points axis inset median true positives stide hmm methods correctly detect majority intrusion traces thresholds 
ripper true positive rates drop gradually increasing threshold false positives drop rapidly accounts points running axis 
composite picture shown gives rough outline data 
shows relationship thresholds true false positives detail 
sensitivity threshold relaxed fewer sequences system calls identified anomalous traces affecting true false positives 
relaxed sequence methods means increase lfc needed flag anomaly means decrease minimum probability hmm generate normal system call 
ripper curves steeper ripper rarely generates high lfcs 
ripper rules depend system calls sequence sequences anomalous part trace classified anomalous 
results shown choose thresholds method 
definition fixed 
system may important maximize true positives minimizing false positives may key 
moment choose mean average true positive rate 
hmms stide stide threshold average true positive rate missing login intrusion traces 
ripper closest match true positive rate missing login intrusion traces 
thresholds turn comparison corresponding false positive rates 
shows false positive rate method normal test sets thresholds chosen described 
values data set vary average true positives threshold average false positives stide threshold stide threshold ripper threshold hmm 
average true false positives versus threshold method sequence length 
hmm results randomly initialized hmms 
orders magnitude note logarithmic scale correlation long traces low false positive rates ignoring named daemon moment number misclassified normal traces varies widely programs 
important trace length complexity program variability usage 
sendmail program larger complicated programs producing traces larger variety system calls sequence patterns surprising difficult model 
contrast stide simpler programs interact network 
gave realistic data sets test data come just abnormally long trace stide application program 
lpr data sets produced program unm false positives higher methods 
speculate unm data collected longer period time reflect changes network configurations user behavior mit data 
possible simply training data characterize complex data sets adequately training set sizes determined variability system call patterns see section 
sendmail training set larger program training set lpr training sets larger percentage available data 
sendmail unm lpr worst false positive rates 
results modeling methods particular data set similar results method different data sets 
clear stide consistently performs methods methods clear winner 
need better understand false positive rates vary data sets conclusively identify method best 
data suggest single best choice data sets 
methods stide bad choice 
results figures computed sequence length window size corresponding choice training data 
results sequence length qualitatively similar points worth noting 
expected results sequence methods similar sequence lengths chose size training set sequence length 
training set chosen sequence length larger sequence length reflecting fact possible sequences length length 
ripper stide average results appear slightly better sequence length despite training data possibly smaller sequences allow better generalization 
hmms depend sequence length hmm accuracy better data sets larger training set 
trends average behavior hold programs 
method programs sequence length false positive rates lower mit lpr unm lpr named stide sendmail false positives stide stide ripper hmm 
false positive rates data sets sequence length 
stide threshold stide threshold ripper threshold hmm threshold 
note ripper true positive rate threshold slightly lower methods 
false positive rates shown logarithmic scale 
higher 
due fact results depend somewhat traces sequences included training set 
different choice training data amount data yield different test results cases 
attempted measure variation obtain error estimate false positives 
comparisons suggestive tests statistical significance 

discussion intrusion detection important active area research 
various research groups suggested methods look promising set data 
order choose different methods need comparisons variety data 
comparisons easy 
differences methods large variations amount types data complicated study 
difference way anomaly signals generated 
sequence methods tend produce multiple mismatches single misplaced system call system call affects multiple sequences 
hmms check single system call time automatically produce fewer mismatches 
biases results favor hmms 
alternative fair compare peaks 
trace region locality frame counts shows peak graph anomaly signal time 
peak equivalent single hmm anomaly 
size locality frame cause multiple anomalies lumped peak 
contiguous mismatches better definition peak 
case impossible calculate percentage false positives notion peaks possible trace 
regardless false positives calculated test data improve confidence results 
collected data spectrum different kinds programs intrusions relatively small number data sets 
individual data set carries weight final outcome adding results data set change composite results favor methods 
studies conducted thoroughly 
collecting data predetermined stopping criteria 
modeling method number parameters affect anomaly signals representative variations investigated 
random element ripper hmms results methods ideally averaged multiple trials 
reasons definitively determine method best 
general statements properties data helpful harmful methods 
purposely chose methods handle discrete data large number distinct system calls problem methods 
training hmm time pass roughly proportional square alphabet size number different system calls 
complex programs system calls require significantly longer training times 
testing side decision current implementation requires number tests directly proportional number distinct system calls 
contrast stide stide number system calls indirect factor training test times way data stored 
search time sequence database depends number branches sequence trees 
number possible branches level equal number system calls number encountered practice significantly fewer 
methods scale dramatically better number system calls 
scaling length traces factor 
methods training test times linear length trace 
training algorithms hmms ripper multiple passes training data stide stide require single pass build normal databases 
mentioned earlier hmms store intermediate data training number floating point values proportional trace length multiplied number states 
long traces expensive 
number unique sequences data set directly related trace length 
fact longer traces repeat small number sequences times 
mentioned earlier primary difference lpr traces number read write pairs 
long live trace bulk data consists system calls repeated 
reason ripper trained unique sequences raw data 
common sequences dominate rules extracted sequences 
suggests problem frequency methods 
sequences accounting large percentage data frequencies normal sequences tend look insignificant flagged anomalous 
common sequences dominate trace shorter sequences frequencies evenly distributed 
simple methods comparing rare common sequences insufficient sophisticated approaches better frequency information 
method designed take advantage locality intrusions 
sequence methods locality frame aggregates mismatch counts focus local history system calls 
hmms potential capture long term history way concentrated local events 
partly choice model size states required give hmms longer memory 
relatively small hmms state characterize multiple parts traces 
single state producing primarily read system calls example represent different program states reading data required 
transitions state reflect different possibilities going write close read 
potential missing anomalies state transitions possible mix prefixes suffixes go 
potential better generalization offered sequence methods 
example training data include examples system call times row hmm accept trace system call twice row 
sequence methods possible exception ripper identify mismatches 
data studied sequences false positives contribute identifying anomalies 
additional factor evaluating methods degree training automated 
ability add human knowledge model helpful knowledge required 

compared methods characterizing normal behavior detecting intrusions system calls privileged processes 
method tested suite data sets consisting different types programs different intrusion techniques 
test suite methods performed adequately 
hidden markov models generally recognized powerful data modeling methods existence gave best accuracy average high computational costs 
surprisingly simpler sequence time delay embedding method compared favorably hmms 
conclude problem system call data regular simple modeling methods 
average results indicate possible achieve increased accuracy hmms provided significant computational resources available train run 
method consistently gave best results programs results programs varied results methods 
variations false positives due complexity traced programs environments differences analysis methods 
alternative methods tested results demonstrate problem methods perform 
believe choice data stream short sequences system calls important decision particular method analysis 
historically computationally sophisticated methods applied intrusion detection problem accepted solutions widespread 
lesson disproportionate amount attention directed data modeling problem equal attention paid considering effective data streams monitor 

acknowledgments authors mark patrik haeseleer paul helman geoff anil somayaji derek smith valdes wenke lee carla matt helpful discussions suggestions 
mit ai lab unm group allowing collect data production systems 
supported national science foundation iri darpa intel ibm 
carrasco oncina 
learning stochastic regular grammars means state merging method 
proceedings second international colloquium grammatical applications pages spain 
cohen 
fast effective rule induction 
machine learning th international conference 
morgan kaufmann 
damashek 
gauging similarity grams languageindependent categorization text 
science feb 
forrest hofmeyr somayaji longstaff :10.1.1.47.6145
sense self unix processes 
proceedings ieee symposium security privacy pages los alamitos ca 
ieee computer society press 
helman 
statistically system prioritizing information exploration uncertainty 
ieee transactions systems man cybernetics part systems humans july 
wong honavar miller 
intelligent agents intrusion detection 
proceedings ieee information technology conference pages syracuse ny september 
hofmeyr forrest somayaji :10.1.1.43.6197
intrusion detection sequences system calls 
journal computer security 
javitz valdes 
nides statistical component description justification 
technical report computer science laboratory sri international menlo park ca march 
ko fink levitt 
automated detection vulnerabilities programs execution monitoring 
proceedings th annual computer security applications conference pages december 
hofmeyr 
shape self unix processes 
ieee software 
lee 
personal communication 
lee stolfo 
data mining approaches intrusion detection 
proceedings th usenix security symposium 
lee stolfo chan 
learning patterns unix process execution traces intrusion detection 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
rabiner 
tutorial hidden markov models selected applications speech recognition 
proceedings ieee 
rabiner juang 
hidden markov models 
ieee assp magazine pages january 
ron singer tishby 
power amnesia learning probabilistic automata variable memory length 
machine learning 
