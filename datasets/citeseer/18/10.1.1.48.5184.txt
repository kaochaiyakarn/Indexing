declarative interface models user interface construction tools mastermind approach szekely sukaviriya castells university southern california information sciences institute szekely isi edu georgia institute technology noi cc gatech edu jk cc gatech edu universidad de madrid castells lola iic uam es university technology graz icg tu graz ac currently building user interface involves creating large procedural program 
modelbased programming provides alternative new paradigm 
model paradigm developers create declarative model describes tasks users expected accomplish system functional capabilities system style requirements interface characteristics preferences users techniques supported delivery platform 
model smaller procedural program determines behavior system 
advantages approach 
declarative model common representation tools reason enabling construction tools automate various aspects interface design assist system builders creation model automatically provide context sensitive help run time assistance users 
common model allows tools operate cooperate 
components system share knowledge model promotes interface consistency systems reusability construction new interfaces 
declarative nature model allows system builders easily understand extend systems 
describes modeling language mastermind model user interface development environment 
keywords model interfaces knowledge interface tools uims user interface design environments model interface development new paradigm constructing interfaces 
model approach interfaces automatically generated declarative specification model describes tasks users need perform content structure layout displays role display elements play user tasks 
developers model paradigm build interfaces building model describes desired interface writing program exhibits desired behavior 
model paradigm offers potential benefits traditional methods building interfaces 
powerful design run time tools 
declarative model common representation tools reason enabling construction tools assist developers design time users run time 
examples design time tools design critics automatically analyze designs detect questionable features automated advisors help developers refine designs automated design tools automatically create certain portions interface 
examples run time tools automatically generated context sensitive help support user customization 
consistency reusability 
components system share knowledge model promotes interface consistency systems reusability construction new interfaces 
support early conceptual design 
models encourage designers explicitly represent rationale design decisions encouraging designers think artifacts building 
iterative development 
models executable details interface designed developers experiment designs early development process catching design flaws early considerable coding effort spent resistance change built 
model interface development tools built achieved level maturity allow generate industrial strength applications :10.1.1.17.5641
main shortcomings today model tools lack flexibility 
modeling language existing model tools expressive give developers adequate ways control features interface needed real applications 
poor performance 
model tools experimental tuned performance 
common cause inefficiencies tools interpret models run time interface generated 
models suitably restricted level interpretation leads poor performance 
notable exceptions adept compiles models executable code interprets model run time uses model expressive tools 
hard 
model tools hard especially compared interface builders 
model tools require models specified specialized modeling language 
modeling form programming skill interface developers wish learn 
mastermind new model interface development environment designed address main shortcomings existing model tool 
mastermind represents continuation humanoid uide different complementary model systems 
humanoid strength lies presentation model modeling tools performance uide strength lies dialogue model design critics help generation tools 
mastermind designed capitalize best features humanoid uide try avoid shortcomings 
documents mastermind modeling language detail discussing modeling constructs available mastermind 
main desiderata designing mastermind modeling language expressive power 
mastermind designed give interface designers extensive control interface features 
goal achieved allowing developers model interfaces different levels abstraction 
higher levels easier specify offer control lower levels offer control expense specification cost 
mastermind designed support mainly specification traditional graphical user interfaces 
amenable interactive specification 
mastermind modeling language designed models easily specified interactive modeling tools hide syntax language completely 
aspects model designed specified demonstration 
achieve goal designs modeling tools construct models expressible language 
built design environment macromedia director vision design environment help guide design modeling language 
sacrificed expressivity provided multiple ways expressing certain features order achieve goal 
compilation efficient representation 
model tools successful possible translate model efficient representation runtime 
elected powerful declarative representation design time supports sophisticated reasoning interface designs order enable creation design run time tools 
declarative representation translated partially compiled representation objects declarative model translated efficient procedures 
declarative model remain run time representation allow sophisticated run time tools needed compromising performance 
interface generation component run time system modeling tools currently designed implemented 
rest organized follows 
briefly describe mastermind architecture order give context role models play system 
sections discuss modeling language detail 
devote sections discuss models application capabilities tasks presentation 
close related current status 
appendix contains example model electronic mail application 
architecture mastermind uses different architectures design time environment delivery applications 
design time architecture designed support fast iterative development powerful design time tools 
design time architecture preserves model declarative form maintains extensive book keeping information models extended interfaces generated model incrementally updated 
application delivery architecture optimized performance 
uses compiled representation model smaller declarative representation supports fast generation interfaces 
des appl cat model model es ent model cor communi cat mas erm nd ot ot pi ng appl cat model ng ui des gn cr cs pr es model ng ui model ng ui help author ng ui 
architecture mastermind design time environment 
shows architecture design time environment 
mastermind models represented corba common object request broker architecture object model run separate process called model server 
mastermind tools mastermind prototyping environment run separate processes access modify model communicating model server corba communication support layer multi process architecture allows new tools integrated needing modify recompile complete system supports teams designers working simultaneously supports remote collaborations 
model server uses remote procedure call architecture communicate clients 
provides procedures create large variety structures compose model procedures modify destroy structures procedures query contents model 
model server save restore models text files 
complete set procedures specified corba idl 
mastermind provide tools authoring model application task presentation modeling tools tools critiquing designs tools authoring help systems tools generating portions interface automatically generating menus task model prototyping environment generate executable interfaces model model completely specified 
tools integrated sharing model model server 
model element model server modified request tool tools depend modified element informed update state 
particular prototyping environment notified model changes update interface prototypes fly design specifications change 
application delivery environment corba application uses corba 
delivery models translated source code compiled linked rest application code making delivered applications compact efficient 
delivered applications retain ability contact model server order access declarative representations models models partitioned parts execute separate model servers running separate nodes network 
possible teams designers distributed remote sites collaborate efficient manner 

allow tools animated help system invoked application execution access analyze models incremental fashion 
application model application model defines capabilities application 
mastermind application model extension corba object model 
mastermind uses corba widely emerging standard modeling language provides basic facilities needed model applications 
corba strength support distributed heterogeneous applications corba mastermind able support interfaces distributed applications 
section briefly summarizes corba object model mastermind extensions 
corba object model similar smalltalk classes 
corba supports definition classes called interfaces corba multiple inheritance 
classes attributes methods 
addition corba model exceptions 
class declare set exceptions consist name parameters describing data communicated exception 
model methods lists exceptions methods raise 
mastermind currently supports extensions corba idl language 
notion method preconditions allow developers model legal call methods 
second extension notion reports objects including presentations tasks register consumers reports informed certain changes occur object update state accordingly 
reports mechanism works objects consumers different processes 
example shows partial mastermind model email application 
bold keywords represent corba idl modeling constructs 
bold underlined keywords represent mastermind extensions 
message object provides attributes represent information typically stored email message 
show examples exceptions methods 
precondition send method specifies send invoked message ready send returns true 
show reports messages generate order inform clients changes 
interface message attribute address sender attribute date arrival time attribute string subject attribute sequence recipients raises recipient incorrect attribute string body exception recipient incorrect string recipient exception raised methods modify recipients attribute message 
exception message exception raised message delivered reason 
boolean message ready send void send preconditions message ready send void folder report sender changed report subject changed report recipient added address new recipient report recipient removed address old recipient report recipients changed application model restricted contain objects representing data structures application 
interface designers model new objects combine attributes objects order better model user view data 
example application allow users dial phone computer interface designer want define new objects corresponding countries cities information implicitly represented data structures application prefixes number 
expressions mastermind features expression language represent connections tie pieces model 
examples expressions assignment parameters model objects invocation application routines predicates test certain conditions true arithmetic expressions iteration expressions programming language constructs 
key feature expressions constraint 
mastermind evaluates expression records model elements expression depends elements change expressions automatically recomputed 
example task preconditions specified expression tests value certain task parameters satisfy condition 
values parameters change precondition task automatically brought date 
expression language suitably restricted mastermind analyze behavior 
example mastermind find tasks set parameters precondition task determine tasks need executed order precondition valid 
reason expressions represented internally model objects attributes textual scripts 
task model task model describes tasks users perform system 
task modeling mastermind centers representing elaborating user tasks outlining steps required perform tasks 
designers specify task hierarchies tell mastermind users application interface changes users interact system underlying application provide users needed requested information carry intended tasks 
task designers specify goal task conditions task performed effects task information requirements task breakdown sub tasks specify task performed 
breakdown task defined combination user tasks interface tasks application tasks 
designers specify steps optional steps needed certain conditions true 
lowest level user tasks interaction techniques correspond primitives clicking button selecting item menu 
putting interaction techniques part task breakdown designers tell mastermind kind inputs expected user 
placing system task designers tell mastermind update interface 
placing application task designers tell mastermind application routine called point breakdown user performs task provide task information relevant interface information required steps 
tasks modeled terms main objects tasks task connections 
objects auxiliary objects described sections 
task tasks modeled terms objects called tasks 
goal effects attributes specify task parameters specify data task operates preconditions specify legal execute task sub tasks specify steps carrying task 
mastermind represents sub tasks task connection object specifies sub tasks executed order 
addition task objects contain set flags control dialogue sequencing 
table attributes task 
attribute name type name symbol prototype task task type user presentation application interaction technique undetermined goal goal effects expression parameters name task parameter precondition expression subtasks task connection optional boolean boolean boolean loop boolean reentrant boolean task name prototype task newly defined task inherits information 
example task print email message defined specialization generic print task 
task type specifies different categories tasks 
user tasks tasks user performs presentation tasks requests information user application tasks tasks application performs user involvement interaction technique tasks represent low level tasks mouse clicks undetermined tasks way developer delay committing specific task type 
effects specification actions performed task executed 
typical effects invoke application routines information change status tasks set task parameters 
effects task serve dual purpose 
describe task declarative way analyzed various design run time tools 
addition translated executable code appropriate behavior happen run time 
list primitive expressions specification effects tasks method invocation expression invoke method specified object set arguments 
object arguments specified listing task parameters contain values method operate 
parameter setting expression set value parameter result evaluating arbitrary expression 
task status modification expression start interrupt abort execute tasks 
data presentation expression information user 
data specified list task parameters contain information 
expressions behave constraints task parameters change run time presentation automatically updated 
parameters variables store data task operates details 
precondition specifies conditions true task executed 
preconditions specified expressions test values task parameters satisfy condition task state 
tasks provide set flags control dialogue sequencing convenient way preconditions 
optional specifies task optional need performed specifies task resumed interrupted specifies task interrupted started loop specifies task performed multiple times provided preconditions remain true reentrant specifies separate instances task spawned run time 
applications users spawn multiple instances task spawn task compose message finishing spawn separate instance compose different message 
case task said reentrant 
task reentrant instance task 
interaction technique tasks necessary specify fields depend particular interaction technique 
example mouse click interaction technique necessary specify mouse button triggers interaction technique area screen clicked invoke happens user moves mouse area releasing mouse button details discussed 
goal goal specification task contrast effects specify task accomplishes goal 
goals represented text formal objects mastermind analyze operate 
goal specified text just serves documentation task shown user help strings 
goal represented formally expression mastermind evaluate goal satisfied context determine task needs executed 
example goal task select email message message selected need force user execute task 
case task goal modeled expression checks task parameter holds current selections value type email message 
general tasks necessity context dependent need goal modeled formally 
task parameter task parameters variables defined task objects storing information needed executing task 
typical uses parameters store data needs passed application routines data needed evaluate preconditions data needs passed tasks 
values parameters root tasks tasks parent set mastermind application starts 
values parameters subtasks defined expression computes value parameters tasks explicitly set effects tasks 
task parameters defined task visible sub tasks descendants 
table attributes task parameter 
attribute name type name symbol type type value expression default expression mode produced consumed type parameter standard primitive types type defined application model 
values parameters typically defined expressions compute value terms values parameters 
literal expressions allowed support specification constants numbers strings 
parameters default value expression value compute value 
mode specifies task produces consumes value parameter 
task connection task connections specify sub tasks task specify sub tasks need executed order 
moment mastermind determines tasks need executed information task connection information contained preconditions 
example task connection specify sub tasks done unrestricted order preconditions taken account subtle context dependent sequencing restrictions get enforced 
table attributes task connection 
attribute name type tasks name task connection type sequence parallel unrestricted attribute tasks contains list sub tasks task 
sub task named easy sub tasks 
connection type specifies order subtasks task performed 
sequence specifies sub tasks performed sequence 
parallel specifies tasks executed parallel need wait task complete starting 
unrestricted specifies sub tasks executed order ordering restrictions imposed preconditions specifies sub tasks needs executed 
presentation model presentation model defines visual appearance interface 
display application produce defined object called presentation 
presentation section gives overview main attributes presentation 
sections describe individual attributes detail 
appendix contains example presentation definition email application 
table attributes presentation 
attribute name type name symbol prototype presentation parts name presentation parameters name presentation parameter guides name guide magnitudes name magnitude replication replication grids name grid conditionals conditional 
presentation name prototype presentation newly defined presentation inherits information 
example dialogue box defined specialization generic dialogue box presentation 
presentations typically built smaller parts presentations 
example presentation definition email program define part command buttons part show headers messages user mailbox part show body selected message 
presentations standard parameters font color application specific parameters set email messages shown window 
guides define layouts 
example specify collection buttons placed row guide defined baselines buttons guide 
magnitudes specify properties presentation width height 
presentation part presentation replication attribute indicate multiple copies part generated 
example email application presentation displays message headers replicated part gets replicated message mailbox 
grids support definition layouts especially defining layout replicated parts 
replicated parts attached grids align parts specify multiple replications laid 
conditionals support specification alternative presentations depending characteristics data displayed characteristics display amount space available 
conditionals override element specification appear position grids prototype part add remove parts 
presentation parameters magnitudes presentation parameters variables defined presentation objects storing values control appearance presentation 
example button presentation object parameters specify label button font label button pressed color mastermind supports application specific parameters 
developers add new parameters presentation objects keep track information appropriate 
example presentation object email application shown appendix defines parameter called mailbox store pointer mailbox object holds user email messages 
cases values application specific parameters passed parts presentations extract information directly passed parts 
shown appendix value current folder passed headers extract current folder individual messages 
message decomposed date sender subject pieces passed values label presentation 
shown table presentation parameters identical task parameters don mode attribute 
presentation parameters produce values 
table attributes presentation parameter 
attribute name type name symbol type type value expression default expression magnitudes special kinds parameters store sizes presentation components 
addition value magnitudes support specification minimum maximum values useful specification layouts 
table attributes magnitudes 
attribute name type presentation parameter name symbol float min value float max value float grids guides grids guides basic facilities defining layouts 
grids guides years graphic designers specify layouts pages books newsletters advertisements provide powerful framework defining pleasing layouts 
grid theory adapted electronic documents interfaces part current user interface guidelines 
reasons mastermind incorporates notions grids guides presentation model 
addition mastermind supports constraint language allow specification layouts regularity grids guides enforce appropriate 
grids guides represent departure layout mechanisms interface builders tool kits organize layouts rows columns 
main problem rows columns provide way align elements display far apart leading layouts visually appealing 
grids guides solve problem 
grid grid set parallel lines span area display 
parts presentation grid lines define layout 
grid lines parent presentation visible children presentation children 
allows deeply nested parts aligned nested parts 
table attributes grids 
attribute name type name symbol direction horizontal vertical start expression expression distance expression num lines expression expression exceptions list direction attribute specifies direction lines grid 
displays contain vertical horizontal grid 
start attribute specifies coordinate line grid placed 
coordinate constant integer expression depends guide parameter presentation 
typically expression just guide causes grid start location guide 
attribute specifies coordinate grid ends 
distance num lines attributes specify distance lines grid number lines grid 
attribute specifies grid adjusted start grid change 
grid start change distance grid lines proportionally adjusted number lines remains fixed 
grid number lines adjusted 
start distance num lines attributes specified 
example start distance specified mastermind automatically derives value num lines 
exceptions allow definition irregular grids distance grid lines different default 
useful applications spreadsheets user manually adjust size columns 
guide guide single line parts 
default presentations guides corresponding left right top bottom 
addition developers define guides appropriate guide third distance left 
layouts defined snapping guides guides grids 
table attributes guides 
attribute name type name symbol direction horizontal vertical position expression margin expression margin expression direction attribute specifies direction line 
position constant expression depends guides grids 
guides margins lines sides guide parallel offset certain amount 
easy define gaps parts presentation 
example defining row buttons consecutive buttons margin margin guides position define gap 
grids guides design time elements developers define layout display don appear final interface user sees 
possible define tasks manipulate guide position giving user way adjust layout display 
replications applications manipulate collections information example collection messages mailbox collection notes music score collections nodes lines graph editor 
define presentations applications necessary specify part presentation replicated times elements collections displayed 
mastermind replication construct mechanism model presentations collections 
combined conditional construct replications specify presentation heterogeneous collections information email voice messages messaging application 
table attributes replications 
attribute name type name symbol replication data expression demand boolean anchor presentation 
generic presentation 
replication data expression computes set elements displayed 
typically expression invokes application routine routine extracts mailbox object collection messages contains 
demand attribute specifies replicas part generated advance needed 
attribute gives developers flexibility define presentations elements collection displayed scrollable window presentations display elements constructed incrementally display composed multiple pages pages added needed 
specify lay multiple replicas part grids parts see description object 
anchor generic provide alternative specifying layout replicated parts 
mechanism layouts defined appropriately terms grids parts 
basic idea define layout defining position element anchor defining position nth element generic position nth minus element generic anchor presentation skeleton defines replica laid 
typically skeleton presentation contains definitions guides left top terms guides grids parents 
generic list presentation skeletons defines elements laid 
typically generic presentations defined corresponding nth nth minus replicas 
expressions guides nth presentation define layout respect guides presentation 
generic presentations defined define layouts depend replications 
table attributes 
attribute name type name symbol grid replication init index integer condition expression init procedure expression part index provide convenient way specifying layout replicated parts specifying replications fill grid specifying replications laid replication laid specifying icon placed right element list 
possible specify multiple replication object 
common case containing vertical horizontal grid 
effect elements laid rows vertical grid 
columns vertical grid exhausted row horizontal grid 
general multiple supports specification large variety layouts 
attribute specifies grid replication layout 
layout replication means part laid respect part replication right 
init index specifies grid line replication element place element default 
init procedure advanced feature provides flexibility specifying init index allowing procedure called init index 
condition specifies placing objects reaching column vertical grid 
conditionals conditionals allow definition presentations appearance depends characteristics data displayed email messages voice messages messaging application characteristics platform color display vs black white characteristics interface moment row buttons window narrowed truncating row buttons pull menus commands remain accessible scrolling 
template conditionals case statement consisting case clauses 
mastermind evaluates case statement independently evaluates predicate clause sequence returns true uses specification associated successful clause 
table attributes case clause 
attribute name type predicate expression specification presentation 
predicate expression depends presentation task parameters guides grids containing presentation ancestors 
true features presentation specified specification attribute applied presentation constructed 
example presentation specify values parameters guides override prototype presentation part 
mastermind evaluates conditionals records dependencies predicates evaluates parameters guides grids predicates depend changes value mastermind re evaluate appropriate predicates re apply appropriate specifications update display 
related tools constructing user interfaces divided basic categories interface builders uimss model tools 
sections compare mastermind tools categories 
interface builders interface builders popular interface construction tools market 
provide easy wysiwyg interface constructing interfaces designers draw screens interface 
interface builders low level description interface consisting mainly location properties type elements display 
information support sophisticated analytic tools design evaluation critiquing tools interface new platform tools automatically generating help 
contrast model tools mastermind particular contain rich model interface supports mentioned tools 
model tools mastermind designed provide easy interface building models similar designer interface interface builders provide :10.1.1.17.5641
appendix shows mastermind presentation editor similar interface builder captures richer representation presentation 
addition mastermind specify aspects interface including dynamic aspects interface builders support 
uimss uimss user interface construction tools mainly construct dialogue component interface 
specialized languages describe dialogue transition networks grammars events 
uimss provide facilities specifying presentations primitive 
mastermind dialogue specification comprehensive 
captures high level user tasks users expected perform system decomposition low level tasks correspond dialogue specifications uimss 
uimss automatically generate interfaces specifications similar mastermind application model 
mastermind improves systems providing comprehensive models tasks presentations allowing designers better control interfaces generated 
model tools section compare mastermind model tools features capabilities enabled task presentation models 
task models task analysis important part user interface design process leading interface designs better meet user requirements 
past number researchers developed task representations capture user task information processable form 
representations capture hierarchical nature task decomposition fashion mastermind 
mastermind task models similar goms uan goms uan mastermind models drive interfaces run time just describing 
goms task representation useful evaluating interfaces predicting speed specified task decompositions 
representation emphasizes recording paths user actions including motor steps mental steps performing tasks 
goms representation intended capture situations multiple actions performed users concise fashion 
mastermind task model designed superset goms representation translator built generates goms models mastermind representation goms techniques evaluate interface designs represented mastermind 
task analysis knowledge description taxonomy developed systematically capture objects functions 
applying objects functions domain precisely specified classified 
mastermind helps designers conceptualize tasks objects 
mastermind facilitates creating objects task descriptions leaves responsibility doing designers 
uan uses task descriptions hierarchical task decomposition way specify links task model interface specification 
helps sure user requirements fulfilled functions accessing mechanisms users 
uan task representation extensive including specification time parallelism task interruption 
systems task models drive interfaces run time adept trident 
adept automatically generates user interfaces task descriptions limitation lies environment allow interface styles added allow designers control interface details 
trident uses task descriptions help automatic generation user interfaces 
trident job generating high quality interfaces machine analyzable representation interface guidelines 
mastermind trident addresses generation form interfaces 
uide mastermind uses pre post conditions called preconditions effects mastermind model dialogue component interface 
mastermind improves uide uses efficient constraint system evaluate maintain preconditions allowing mastermind scale large applications 
presentation models mastermind presentation model similar humanoid 
mastermind main contribution presentation model designed support graphical specification presentations similar interface builders 
addition mastermind supports notions visual graphic design grid design supported systems 
mastermind presentation model similar garnet heavy constraints define layouts 
mastermind provides control interface details garnet provides higher level components automatically update display data changes easier 
current status specification mastermind modeling language described complete 
modeling language specified corba callable frame system 
addition developed grammar textual specification models store models files 
textual specification bootstrap interactive modeling tools standard way specifying models 
expect developers textual modeling language 
prototyping environment designed implementation started spring 
interactive tools partially designed implementation commence prototyping environment ready 
expect initial version system complete fall 
reports progress expect need modify modeling language gain experience mastermind build interfaces 
set issues resolved satisfactorily impact modeling language prototyping environment generated interfaces 
expressiveness 
matter hard try declarative modeling language expressive interface designs modeled 
approach deal problem allow interface developers foreign components ole custom controls 
foreign components minimally modeled specifying parameters methods called 
mastermind able reason fully allow included designs 
extensibility 
mastermind modeling language extensible sense new attributes objects added modeling language 
problem extensions effect tools updated take account new information 
envision kinds extensions extensions mastermind core done mastermind developers extensions done wants incorporate new tool mastermind suite tools 
system evolves tool specific extensions migrated core 
semantics 
currently formal semantics mastermind modeling language 
semantics frame system modeling straight forward inheritance part hierarchies lot semantics model implicit way tools attributes modeled 
expect construct tools check models consistency various notions quality expect develop formal semantics model 
relationship task modeling schemes 
literature task modeling rich schemes modeling tasks proposed 
tried arrive compromise satisfies conflicting goals easy specify directly executable expressive 
weight goals expect enhance modeling language incorporate features expressive notations 
mastermind model interface development environment designed address shortcomings existing model tools 
modeling language designed expressive possible making hard developers model interfaces application modeling language extension corba idl language 
mastermind allows applications specified idl corba support application embedding network distribution ole 
application model complements idl information needed drive user interface 
addition task sub task decomposition features task modeling systems mastermind possible specify detailed ordering constraints tasks optional repeatable tasks preconditions effects 
addition mastermind specifications described formal language supports generation interface analysis 
presentation modeling language features grids guides allow specification pleasing layouts features constraint system support specification complex layouts support screen resize update features iteration conditional constructs support specification displays dynamic information 
features support specification main windows applications just menus dialogue boxes 
addition expressivity mastermind modeling language implemented separate process open set tools designers working simultaneously 
acknowledgments wish david kieras spending days explaining goms models helping design modeling language expressive goms executable needed prototyping environment analyzable needed tools 
want reviewers extensive insightful comments 
appendix appendix describes parts model email application 
example expressed syntax textual representation mastermind models 
shows presentation model email application 
parts template shown boxes labeled name part 
presentation editor allows parts guides grids iterations conditionals added deleted manipulated graphical way 
layout defined dragging parts snap guides grids 
region bounded contains replication part show message headers see header template 
replication consists labels show date sender subject message 
shows interface mastermind generate model specified previous 
parts presentation objects instantiated bound data application 
textual specification defines model builds interface shown 
words formatted mail interface represent names objects defined 
words formatted parameter represent type object value enumeration expressions square brackets bottom represent expressions 
presentation object main window called mail interface 
parameter mailbox bound mailbox parameter defined root task email interface 
send quit forw ard file print compose reply lp text box window tit le presentation modeling tool showing model main display email application 
send mail quit lp forw ard reply file print compose smith red cross drive re examples tom ski re cc pedro sz eke ly subj ect manuals date fri jan pst rev manual pedro sz eke ly mode ile pedro sz eke ly ls 
screen shot interface mastermind generate presentation model specified 
task parameter initialized application starts 
definitions guides expressions depend parameters window bottom left space proportionally assigned window resized 
definition depends font window grid adjusted font 
show definition part window displays message headers parts defined similarly 
header part replicated contents mailbox computed calling contents method value mailbox parameter 
replication headers displayed column 
mail interface window parameters mailbox parameter value email task mailbox font parameter value chicago guides left guide leave small space left window 
direction vertical right margin right guide direction vertical left margin guide top headers 
direction horizontal position guide bottom headers 
direction horizontal position bottom guide position message sender field 
direction vertical position left right right margin left margin guide position subject field direction vertical position left right left margin right margin grids grid direction horizontal start false distance font height parts header header presentation replication demand false replication data mailbox contents grid ref guides top guide direction horizontal position grid ref header pres specifies display individual header 
value message parameter data element replication defined 
presentation parts date sender subject attributes message 
parts aligned top guide defined replication mail interface presentation object 
note consume reports definition sender part 
declares message produces sender changed report part informed display appropriately updated 
header pres presentation parameters message parameter value mail interface header replication replication data parts date label parameters text parameter value message date guides top guide direction horizontal position header pres top left guide direction vertical position mail interface left right margin right guide direction vertical position mail interface left margin sender label parameters text parameter value message sender consume reports sender changed guides top guide direction horizontal position header pres top left guide direction vertical position mail interface right margin right guide direction vertical position mail interface left margin subject label parameters text parameter value message subject consume reports subject changed guides top guide direction horizontal position header pres top left guide direction horizontal position mail interface right margin right guide direction horizontal position mail interface right left margin task model task forward message 
message parameter specifies message forwarded 
value specified effect select message task shown 
order forward message user complete tasks specified subtasks attribute 
subtasks done sequence 
precondition task specifies forward message task invoked message selected 
forward message task goal forward received message different recipient task type user parameters message parameter type message mode consumed recipient parameter type string subtasks task connection connection type sequence tasks invoke forward specify recipient fill message send preconditions selected msg null reentrant true true invoke forward task leaf task bound interaction technique bound forward button presentation object shown 
interactive environment developer define goal task task automatically created button part added email window presentation 
task explicit effects 
serves block tasks user clicks forward button 
invoke forward task goal indicating message forwarded task type interaction technique task extension technique extension interactor am choice command object forward button 
user clicks forward button specify message forwarded 
effect task set recipient parameter string user types contents text edit interaction technique 
specify recipient task goal indicate receive forwarded message task type interaction technique task extension technique extension interactor am text edit interactor object forward address field effects recipient recipient specified system display message composed display message task user specify body message modify text task 
tasks described 
fill message task goal add forwarded message task type user subtasks task connection connection type sequence tasks display message modify text message filled user send completing send task 
task involves steps 
invoke send interaction technique task user clicks button request new message sent 
second call send application task invokes application routine sends message 
send task goal finishing message forwarded task type user subtasks task connection connection type sequence tasks invoke send call send 
feiner 
scope automated generation graphical interface 
proceedings acm siggraph symposium user interface software technology uist 
pp 

bodart provot vanderdonckt 
model approach presentation continuum task analysis prototype 
proceedings eurographics workshop design specification verification interactive systems 
di italy june 

bodart vanderdonckt 
problem selecting interaction objects proceedings hci people computers ix glasgow august cockton draper weir eds cambridge university press cambridge pp 


framework conceptual consistency verification sc 
dissertation dept ee cs george washington university washington dc 

byrne sukaviriya wood foley kieras 
automating interface evaluation 
proceedings human factors computing systems chi 
boston april 

de baar foley coupling application design user interface design 
proceedings human factors computing systems chi 
monterey california may pp 


diaper 
analysing focused interview data task analysis knowledge description 
proceedings ifip interact human computer interaction 

feiner 
apex experiment automated creation pictorial explanations 
ieee transactions computer graphics applications november 

feiner 
mckeown 
generating coordinated multimedia explanations proceedings th ieee conference artificial intelligence applications pp 


foley kim kovacevic murray uide intelligent user interface design environment sullivan tyler eds 
architectures user interfaces elements prototypes addison wesley reading ma pp 

foley 
controlling user interface objects pre postconditions 
proceedings human factors computing systems chi 
monterey california may pp 


hartson mayo 
framework precise reusable task abstractions 
proceedings eurographics workshop design specification verification interactive systems 
di italy june 

hayes 
szekely 
graceful interaction cousin user interface international journal man machine studies vol 
pp 


hayes szekely lerner 
design alternatives user interface management systems experience cousin proceedings chi san francisco april addison wesley reading pp 


hayes 
executable interface definitions form interface abstractions advances human computer interaction vol 
hartson 
ed ablex publishing norwood chapter pp 


john vera 
goms analysis graphic machine paced highly interactive task 
proceedings human factors computing systems chi 
monterey california may pp 


johnson wilson markopoulos 
adept advanced design environment prototyping task models 
proceedings interchi 

johnson wilson johnson 
scenarios task analysis adept design environment 
carroll ed scenario design 
addison wesley 
press 

johnson johnson wilson 
rapid prototyping user interfaces driven task models appear scenario design john carroll ed john wiley sons pp 


kieras polson 
approach formal analysis user complexity 
international journal man machine studies 

kim foley don user interface presentation design assistant proceedings uist 
october pp 


mackinlay 
automating design graphical presentations relational information 
acm transactions graphics pp 
april 

szekely neches 
automatic generation help interface design models 
proceedings human factors computing systems chi 
boston april 

myers garnet manuals 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa 
may 

neuron data 
open interface toolkit 
university ave palo alto ca 

nextstep interface builder 
drive redwood city ca 


olsen 
mike menu interaction environment 
acm transactions graphics vol pp 


puerta 
study models intelligent interfaces 
proceedings acm international workshop intelligent user interfaces 
jan 
pp 


puerta eriksson gennari musen 
ontology frameworks knowledge acquisition tools 
proceedings eigth workshop knowledge systems 
banff alberta canada february 

singh green 
high level user interface management system 
proceedings sigchi 
april pp 


sukaviriya 
dynamic construction animated help application context proceedings acm siggraph symposium user interface software technology uist acm new york ny pp 


sukaviriya foley 
coupling ui framework automatic generation context sensitive animated help 
proceedings uist 
october pp 


szekely luo neches 
facilitating exploration interface design alternatives humanoid model interface design 
proceedings sigchi 
may pp 


szekely luo neches 
interface builders model interface tools 
proceedings interchi april pp 


vanderdonckt bodart 
encapsulating knowledge intelligent automatic interaction objects selection 
interchi proceedings amsterdam netherlands 
april pp 


wiecha bennett gould greene 
tool rapidly developing interactive applications 
acm transactions information systems july 
pp 


wilson johnson kelly cunningham markopoulos 
hacking model approach user interface design proceedings hci people computer viii cambridge university press pp 


williams 
non designer design book 
press berkeley california 
biographies pedro szekely pedro szekely research assistant professor isi concerned development principled general purpose user interface management systems 
received ph computer science carnegie mellon university research user interface management systems focusing defining clear standards requirements communication application programs user interface management system 
designers implementors cousin model user interface management systems 
developed initial version constraint graphics system garnet project 
isi dr szekely developed humanoid model user interface design environment principal investigator mastermind project arpa funded project collaboration georgia tech 
mastermind produce generation modelbased interface development environment combining best features humanoid georgia tech uide system 
noi sukaviriya sukaviriya research scientist ii equivalent research assistant professor college computing georgia institute technology 
earned doctoral degree george washington university dissertation automatic generation context sensitive animated help 
interests include model user interface technology automatic generation intelligent help online applications multimedia help interactive help high level specifications user interfaces user interface design process adaptive interfaces usability testing international user interfaces 
pablo castells pablo castells visiting scientist information sciences institute 
received ph degree computer science universidad madrid spain dissertation metaknowledge high level heuristics way provide guidance control automatic problem solving mathematics 
past years dr castells involved projects funded spanish government area knowledge systems 
research isi currently focused providing knowledge support user interface design context model framework 
jk member technical staff silicon graphics 
computer science georgia institute technology 
interests include programming user interfaces distributed systems 
ewald ewald doctoral candidate institute computer graphics graz university technology 
expects complete degree july 
interested tools raising level abstraction programming user interfaces semi automatically generating user interfaces models semantics application 
