ml language specify semantics machine instructions norman ramsey department computer science university virginia charlottesville va nr cs virginia edu july languages computer systems description languages csdl family describe properties machines 
descriptions generate machine dependent components systems software 
csdl specifies instruction semantics register transfer lists 
information implicit register transfer frameworks explicit csdl 
detail required unrealistic expect people write register transfers directly metalanguage needed 
metalanguage called rtl ml 
ml types type inference extended provide polymorphism widths types enabling rtl translator infer detail needed 
higher order functions enable exploration discovery idioms useful specifying semantics machine instructions 
ml extended subtyping enables rtl programmers leave fetches implicit resulting notation familiar compiler writers machine designers 
rtl contains polymorphic primitives width result independent width argument 
applying primitives may result terms free width variables 
counterproductive forbid terms occur frequently 
rtl typically constrains variables binds choosing minimal integer satisfying constraint 
reports rtl ml language member csdl computer systems description languages family machine description languages 
csdl descriptions intended provide precise formal notations describing properties systems software machine architectures way supports automatic generation useful tools 
csdl descriptions intended reusable build body descriptions popular processors useful building current tools bailey davidson 
csdl descriptions composed simple components describes possible single property target machine 
different components may written different languages csdl family currently includes description languages mature ccl describes calling conventions bailey davidson sled describes representations machine instructions ramsey fern andez 
csdl uses register transfer lists rtls specify semantics machine instructions 
distinguishing feature csdl rtls detailed unambiguous semantics independent target machine ramsey davidson 
previous register transfer frameworks left machine dependent information byte order word size implicit 
detailed rtls csdl useful building variety machine level tools 
example possible derive emulator csdl description having assumptions emulated machine project build emulator start fall 
problem common csdl languages motivation having csdl place tool generating program needs detailed information comfortable human write directly 
ccl sled contain special domain specific language constructs easier write detailed specifications 
example ccl uses set comprehension notation specify sets registers say registers caller saves callee saves 
sled uses special notations specify bits packed words specify groups similar instructions 
domain specific constructs relatively easy human specify full calling convention directly ccl full set binary encodings directly sled 
specifying semantics machine instructions demanding 
assumptions target machine takes considerable detail specify semantics machine instruction times detail takes specify instruction binary representation 
worse related instructions differ semantics binary representations 
example sparc alu instructions follow schemata assembly language binary representations compact sled specification treat single group instructions 
semantic description group split subgroups distinguish effects condition codes 
semantic description terms csdl rtls detailed written directly human simple ad hoc methods managing detail ccl sled scale semantics 
solution problem metalanguage rtl possible write register transfer semantics having write detail explicitly 
metalanguage ml primarily reasons ffl ml style type inference damas milner mitchell inference coercions possible infer detail needed 
describes extension infers sizes operands results 
ffl writing property directly functions encapsulate behaviors address instruction setting condition codes logical instruction 
higher order functions combine behaviors define experiment different idioms describing semantics 
experiments done changing metalanguage translator 
kind flexibility needed obvious priori common behaviors different machines common behaviors 
begins explaining structure csdl underlying model rtl semantics fits structure sections motivate need metalanguage 
continues outlining design goals metalanguage explaining ml basis design 
technical heart presents rtl type system explaining extends ml type system 
need type system significant reason don simply ml metalanguage 
presents examples higher order functions describing semantics machine instructions 
contribution show ideas higher order typed functional languages apply problem domain appear firstorder untyped imperative 
core csdl csdl family opposed collection unrelated languages languages family refer instructions state share models instructions state 
csdl instruction set essentially ml algebraic datatype 
individual instruction viewed constructor applied operands 
csdl specifications identify names types operands 
operand types include integers various widths possible introduce new types define machine dependent concepts effective addresses 
new types correspond ml datatypes values new types created applying suitable constructors 
example sparc supports addressing modes semantics specified rtl follows default attribute rs rs address rs rs sparc assembly language appears support addressing modes variations ones shown obtained special case rs 
sparc description define constructors modes specifies register zero 
rs simm address rs sx simm names constructors create values type address underlying model sparc effective addresses roughly equivalent ml datatype datatype address word word word word word word int int structure word indicates register numbers bit unsigned integers int indicates simm bit signed integer 
types specified fragment current implementation rtl imports types sled specification 
csdl storage space sequence mutable cells 
storage space array cells width indexed integers 
languages refer cells naming storage space giving integer expression offset identifying cell storage space 
example pentium refers general purpose register register eax 
semantically cell contains bit vector distinguished value model results instructions effects undefined 
number cells storage space may left unspecified 
example specify general purpose registers memory intel pentium follows storage cells bits called registers cells bits called memory aggregate pentium register file bit cells memory bit cells bytes 
aggregate directive tells rtl translator default byte order memory 
storage spaces model main memory general purpose registers special purpose registers condition codes entire state machine described contents storage spaces 
rtl semantics rtl specify effect instruction register transfer list rtl describes way modifying storage cells 
denotation rtl function states states 
csdl register transfer lists designed tools people 
simplify analysis form simple detailed unambiguous 
information possible explicit rtl 
doesn matter individual rtls grow large long composed simple parts rules 
design choice distinguishes csdl rtls earlier smaller rtls implicit assumptions details operand widths byte order 
csdl register transfer lists ffl operators fully disambiguated type size 
signature rtl sig type const literal bit vector type operator pure function values type aggregation bijection type space designates mutable store datatype rtl rtl guarded list guarded guard exp effect effect store location exp ty kill location location agg aggregation cell cell cell space exp exp const const fetch location ty app operator exp list withtype ty int width value bits asdl specification form rtls ffl fetches explicit changes size type data 
ffl stores annotated size data stored 
ffl explicit tree nodes specify byte order 
generally specify transfer data storage spaces different cell widths 
presents ml datatype giving form rtls 
register transfer list list guarded effects 
effect represents transfer value storage location store operation 
transfer takes place guard expression evaluates true 
effects list take place simultaneously dijkstra multiple assignment statement rtl represents single change state 
example rtl describe swap instruction introducing bogus temporaries 
locations may single cells aggregates consecutive cells storage space 
values computed expressions side effects 
expressions may integer constants fetches locations applications rtl operators lists expressions 
effect assigns value kill effect stores location 
kill effects needed specify instructions change values undefined way example intel states effect logical instruction af flag undefined 
example typical rtl consider sparc load instruction displacement addressing mode written sparc assembly language ld sp want specify just single instance single instruction effect load instruction written rtl follows sx stack pointer register register register 
corresponding rtl verbose widths quantities identified explicitly fully disambiguated tree store agg cell const fetch agg cell app add fetch agg cell const app sx const constants labeled hash marks indicate number bits arguments results data transferred 
constants fit generalization hindley milner type system milner described 
need metalanguage generating tools form rtls significant advantages 
byte order word size explicit build tool generators don assumptions target machine 
operators integer literals instantiated widths know exactly bits needed hold operand intermediate result 
notation specification form unrealistic people expected write detail 
compiler writers machine designers long rtls informal notation bell newell 
compilers rtls intermediate forms davidson fraser 
purpose rtl support kinds notations users comfortable give notations precise meaning terms fully explicit rtls 
particular ffl necessary write fetches explicitly 
ffl necessary write aggregations explicitly 
ffl necessary write types widths explicitly 
ffl possible define infix mixfix notations 
example compiler writer likes write simply byte memory matter means byte location value means byte word containing byte 
ml type system rtl translator infer information context rare cases necessary write aggregations widths explicitly distinguish load double load 
implicit fetches members rtl target audience accustomed imperative programming 
rtls specify imperative action taken execution instruction target machine 
reasons rtl support standard imperative notations may denote location value depending context 
typical imperative programming languages define syntactic lvalue contexts rvalue contexts compilers automatically insert fetches rvalue contexts 
ml rvalue contexts requires explicit fetches 
strategies quite appropriate rtl 
rtl insert fetches automatically syntax identify contexts uses types 
technique enables specification writer define arbitrary functions accept return locations permitting locations appear left hand sides built assignment constructs 
example pentium specification written assignment function implements common pattern phi phi generic binary operator fun llr left op right left op left right rtl translator infer left refers location insert fetch instance passed op 
implicit aggregation aggregation necessary different parts machine storage spaces different granularity individual cells different widths 
rtl aggregation nodes specify byte order 
generally aggregations possible write rtl stores bit value fetches bit value consecutive bit locations provided kn 
aggregation denote bijection single bit value bit values 
bijection identity function 
storing uses bijection fetching uses inverse making possible combine rtls forward substitution 
explicit aggregations especially useful building tools binary translators transform non native aggregations byte swapping 
machines fixed byte order compiler writers machine designers seldom think aggregation explicitly 
necessary write aggregations rtl unusual happens bit registers aggregated hold bit value 
rtl translator insert appropriate aggregations storage cells 
exploring specification idioms ccl sled get programmable specification languages problems faced limited hard identify useful sets domain specific idioms 
obvious idioms useful describing instructions semantics 
rtl addresses problem providing plenty expressive notational power 
expressive power comes higher order functions 
notational power comes ability define binary infix operators arbitrary precedence associativity 
careful choice precedences possible simulate mixfix notations 
expect compiler writers machine designers comfortable defining higher order functions 
form rtl best suited pioneers familiar functional programming machine operation 
pioneers explore power abstraction power infix notation 
luck discover small set useful higher order functions map fold filter machine description functions embodied library special syntax 
evaluation rtl purpose rtl specify rtl trees specification instruction reduce rtl tree abstractions 
keeping purpose features ml discarded 
dramatically recursive functions algebraic datatypes 
typed terms guaranteed normal form fixpoint combinator normalized compile time 
loops machine code looping instructions specified conditionally assigning program counter point looping instruction 
users write bounded loops rtl code building vectors foldr 
rtl imperative features order evaluation may arbitrary 
rtl type system rtl translator rtls embedded polymorphic typed calculus rtl operators functions applied 
rtl type system extends ml type system ways 
handle implicit fetches aggregations attaches subtype constraints type variables mitchell 
permits types parameterized widths natural numbers 
attach arithmetic constraints width variables constraints infer missing information 
observation andrew appel rtl supports dynamically chosen precedence simple precedence parser expressions 
parser shown ramsey appendix release rtl represent precedence fixedpoint decimal numbers integers programmers able insert new infix operators precedence hierarchy 
types widths hardware manipulates bit vectors different widths 
registers come different sizes bits platform integers stored fields instructions different widths bit register numbers bit displacements values different sizes fetched single memory address 
help detect errors rtl requires widths operands match exactly operators expect widths values assigned match widths locations stored 
example correct write bit value put bit register translator guess value sign extended zero extended simply inserted low order bits 
requiring operation explicit avoids potential errors specification 
better construct deemed nonsense plausible meaning fact describe target machine 
ml deal integers distinct widths 
ml integers distinct widths distinct types pair types distinct operators needed map 
example sparc need different sign extension operators take bit bit bit values bits 
language indicate really instances single operation 
ml writing integer literals require distinct notations literals distinct types knows written meant 
rtl type system treats bit vectors different widths instances single polymorphic type constructor 
width variable integer literal types rtl bits value bits wide 
keeping low level behavior machines describes rtl type system distinguish signed integers unsigned integers floating point numbers values bit vectors 
loc location containing bit value 
cells sequence bit storage cells aggregated larger location 
example illustrates rtl type constructors may applied just types widths 
type constructor kind tells arguments expects argument type width 
addition type constructors provided initial basis rtl borrows ml arrow tuple record constructors 
rtl rtl operators polymorphic widths 
integer literals polymorphic 
polymorphism offers advantages 
specifications tools simpler fewer operators keep track 
importantly specification language applied new machines having new data sizes requiring change operator quite true directed graph formed types conversions need strongly connected completely connected 
store loc theta rtl store bit value location 
rtl represents state transformer 
fetch loc bits fetch bit value location 
agg cells loc divides agg aggregates integral number bit cells bit location making cell significant part new location big endian byte order 
mnemonic wide narrow 
add bits theta bits theta bits bits bit complement add carry ignoring carry overflow 
bits theta bits theta unsigned multiply 
sx bits bits sx takes bit value interprets complement signed integer sign extends produce bit representation value 
const bits const represents bit literal constant representable bits 
different ns 
rtl operators types set requiring change underlying tools 
shows primitive rtl operators types 
rtl translated second order typed calculus 
variation algorithm damas milner infers types widths 
calculus looks basic calculus ff type abstraction instantiation width abstraction instantiation ff basic types con con con delta delta delta type constructors width variable constant widths may variables literals rtl tuples records ifthen polymorphic 
ml abstractions inferred go explicit abstractions instantiations types widths normally implicit source language 
rtl employs usual typing rules polymorphic calculi cardelli 
width abstraction width instantiation width variables just type abstraction type instantiation type variables 
constraints widths suggests width variables may instantiated arbitrarily 
example bit cells aggregated form bit location multiple general type inference width variable may attached constraints forms constraint example source sign extension 
theta multiplication division 
divides aggregation 
integer literal 
algorithm may unify width variables width variables case constraints conjoined may unify width variables integers case constraints checked satisfaction 
binding width variables type inference rtl frequently happens free width variable unify integer 
thing happen ml type variables rarely practice 
cases cause polymorphic term variable appears left arrow right 
ml term primitive type ff fi ff fi presupposes unusual control flow nontermination abnormal termination unsafe type cast 
rtl contrast common primitive rtl operators types bits mbits 
function bits bits applied value bits result term bits 
type term free width variables term free width variable situation better rtl ml say machine instruction performs operation value unknown width 
unfortunately rejecting terms hand acceptable forcing people write widths great burden 
way dilemma rules binding free width variables 
important cases arise practice variables constraints associated general principle choose value satisfies constraint sense minimal 
applying principle individual cases requires thought 
free width variables arise frequently practice associated integer literals type bits obvious minimal choice choose satisfying constraint smallest width big hold entirely clear rule suits cases sign extended significant bit 
free width variables arise aggregation 
bit registers space bit bytes space big endian aggregation untyped term rd translated effect store agg loc rd agg constraints divides divides sparc term corresponds load instruction load double instruction 
obvious rule case choose satisfying constraints common multiple rtl takes slightly conservative approach 
collection constraints fk divides ng chosen common multiple common multiple term rejected error message 
thinking restriction implicit aggregation things big biggest cell term cell mentioned term implicitly aggregated original size surprising 
conservative approach compromise forcing people write detail violating principle 
constraints listed remains done identify forms may occur type inference characterize set terms widths assigned type inference develop generic implementation techniques specialized different families constraints 
subtypes subtype constraints rtl type system includes subtype relation begins relationships primitive type constructors divides coerce aggregating bits coerce fetching relation extended tuple record arrow types usual rules covariance contravariance explained mitchell subtyping rule type inference rtl translator inserts explicit coercions 
primitive coercion functions relations agg fetch represents correct aggregation byte order storage space aggregated 
risk sophisticated algorithms type inference 
hard novices understand happens hindley milner type inference goes wrong subtyping things worse 
evidence favoring mitchell full algorithm 
current implementation rtl uses weaker algorithm coerces values primitive tuple types values function type 
weaker algorithm works describing sparc pentium uses class functions represent concepts byte context word context context 
functions frequently need coerced operate equally locations values current algorithm incapable coercions rtl programmer insert explicit fetches 
algorithm replacement 
examples examples section drawn complete description sparc description covering interesting features pentium ramsey davidson 
higher order function manipulating groups registers rtl iteration looping recursive constructs provide vector foldr initial basis 
sparc description uses foldr define higher order function thing registers fun vector foldr effects 
effects rtl skip vector spanning simultaneous composition rtl skip empty rtl vector spanning vector integers 
function specify behavior sparc save instruction seen compiler default attribute save rs rd fun rd fun rd 

reg reg fun zx reg local fun zx reg rd rd rs local registers pushed stack represented 

registers new registers 
demonstrates utility variety machines worth providing syntactic sugar writing write simultaneously context dependent effective addresses pentium denotation effective address depends context 
example register direct address number denotes register ah sp esp respectively byte word context 
natural representation effective address record type loc loc loc 
effective address refers location memory explicit aggregation width instantiation needed produce record right type fun address rtl address rtl address rtl address context address represented function applied record fun fun fun expect functions passed functions specifies address effect fun llr left op right size size left op size left size right definition llr works undesired consequences owing wellknown limitation hindley milner type system 
functions polymorphic types ff fi fl fb ff fi flg ff parameter size may polymorphic type 
monomorphic type fb ff fi flg ff ff unified location size left assigned unified value 
result type inferred llr ff ff theta loc theta theta ff 
ff loc rtl parameter left location right value 
example illustrates need coerce bits theta bits theta loc bits composing fetch fetch 
problem pair functions represent size context 
element pair applied locations values fun llr left op right size val sl sr size sl left op sl left sr right difficult explain need transformation programmers intimately familiar ml type inference limitations 
specifying instructions set condition codes machine instructions set condition codes called flags arbitrarily stylized patterns 
pentium example values sf zf pf determined simple tests result operation 
common semantics expressed rtl function set flags 
af cf set conditions different different kinds instructions values parameters set flags 
making argument record tuple ensures order values matter 
fun result sf bit result zf bit result pf bit parity result bits af cf section pentium manual intel says xor instructions clear cf flags leave af flag undefined update sf zf pf flags 
function logical flags implements behavior 
fun result instructions follow pattern dst phi specifying pattern produce results main effect assignment result may set flags 
fun bin dst operator size sl sr val result operator sl sr result result effect sl dst result size function sl applied dst causes problems pentium dst expected 
logical combines main effect effects flags 
fun logical inst size val result effect inst size effect result rtl supports experiments mixfix notation dst phi 
notation simulated playing suitable games precedence try fractional precedence 

fun 
operator operator operator fun 
operator operator operator fun dst operator bin dst dst operator operator notation define instructions follows default attribute addr reg logical addr addr 
reg status rtl describe sparc instructions lines 
instructions include register windows control flow load store integer floating point alu instructions including effects condition codes 
instructions omitted coprocessor instructions privileged load store instructions cache flush 
lines rtl define basic library rtl operators operators sparc description 
experiments describing pentium covered registers aliases effective addresses logical instructions 
preceding section gives essence experiments 
descriptions lengthy expositions rtls rtl available technical report ramsey davidson 
prototype translator implements rtl number differences language 
algorithm insert fetches aggregations weaker mitchell 
type width constraints implemented 
awkward notation define curried functions 
translator produces rtl creation functions vpo compiler benitez davidson processor supplement describing instruction set 
translator written standard ml 
bailey mark jack davidson 
january 
formal model specification language procedure calling conventions 
conference record nd annual acm symposium principles programming languages pages san francisco ca 
february 
reusable application dependent machine descriptions 

bell gordon allen newell 

computer structures readings examples 
new york mcgraw hill 
benitez manuel jack davidson 
july 
portable global optimizer linker 
proceedings acm sigplan conference programming language design implementation sigplan notices 
cardelli luca 

type systems 
allen tucker jr editor computer science engineering handbook chapter pages 
boca raton fl crc press 
damas luis robin milner 

principal type schemes functional programs 
conference record th annual acm symposium principles programming languages pages new york 
davidson jack christopher fraser 
october 
code selection object code optimization 
acm transactions programming languages systems 
intel 

architecture programming manual 
vol 
pentium processor user manual 
mount prospect il 
milner robin 
december 
theory type polymorphism programming 
journal computer system sciences 
mitchell john july 
type inference simple subtypes 
journal functional programming 
ramsey norman jack davidson 
november 
specifying instructions semantics csdl preliminary report 
technical report cs department computer science university virginia 
revised may 
june 
machine descriptions build tools embedded systems 
acm sigplan workshop languages compilers tools embedded systems vol 
lncs pages 
springer verlag 
ramsey norman mary fern andez 
may 
specifying representations machine instructions 
acm transactions programming languages systems 
ramsey norman 

unparsing expressions prefix postfix operators 
software practice experience 
appear 

