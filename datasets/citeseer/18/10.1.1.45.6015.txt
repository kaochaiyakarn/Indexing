scenario requirement analysis alistair sutcliffe centre hci design school informatics city university square london ec hb uk tel mail sutcliffe city ac uk method scenario requirements engineering described 
method uses types scenario structure models system context scripts system usage 
modelling language reported describing scenarios heuristics cross check dependencies scenario models requirements specification 
heuristics grouped analytic treatments investigate correspondences users goals system functions input events system processes deal system output destination scenario model acceptability analysis system output different stakeholders 
method illustrated case study taken london ambulance service report 
prospects scenario re related discussed 

spite increasing attention scenarios attracted requirements engineering methods merged guide practice scenario requirements analysis validation 
different interpretations appeared ranging scenarios basis generating user cases descriptions system usage help understand socio technical system implications experience narratives requirements elicitation validation 
authors give advice scenarios process analysis validation 
exceptions inquiry cycle potts describes scenario scripts system method goal oriented requirements analysis 
dependencies events originating scenario validated requirements specification requirements elaborated deal obstacles problems prevent successful system operation 
unfortunately inquiry cycle give detailed advice scenarios generate questions furthermore leaves open human judgement dependencies system output users determined 
inquiry cycle demonstrated utility industrial scale case studies 
research partially funded european commission esprit crews cooperative requirements engineering scenarios long term research project 
builds concepts inquiry cycle aim providing detailed advice scenarios requirements analysis validation 
previous proposed scenario requirements analysis method recommended combination concept demonstrators scenarios design rationale 
scenarios described typical user tasks concept demonstrators portrayed early design vision required system 
gave outline guidance scenario analysis 
scenarios different connotations 
important distinction scenarios form part specification required system derived versus scenarios captured actual experience originate system design 
view adopted user cases object oriented literature case embodies projected vision user interaction designed system 
scenarios threads interaction may occur network user case describes pathways interaction 
scenarios type precedents instance viewpoints core described interaction intended system external agents context diagrams structured systems analysis 
scenarios second sense descriptions taken reality system implemented validate required system 
scenario scripts advocated inquiry cycle 
validating requirements focusing dependencies intended system immediate environment researched jackson points domains impose obligations required system 
jackson formalises event dependencies system environment inherent laws physics obligations required system avionics real time applications events may arise human failure causality failure explicitly analysed obligations systems users addressed 
modelling relationships dependencies people systems investigated mylopoulos chung :10.1.1.29.2587
framework composed strategic dependency strategic rationale enterprise models facilitate investigation relationships requirements goals agents tasks 
models judgement system boundary framework applied socio technical system 
scenarios appear framework enterprise models may derived scenarios intended system environment 
research enterprise modelling tradition suggest approaches validating requirements social level detailed guidance practitioner left problem extracting general lessons examples 
methods required unlock potential scenario re furthermore relationship investigation examples models need understood clearly 
motivation mind reports development second generation method integrates scenarios model requirements analysis 
organised sections 
introduce scenario requirements analysis schema representing scenario knowledge explain background case study london ambulance service known system failure caused poor requirements engineering re 
section describes walkthrough method scenario requirements validation investigates inbound outbound event dependencies 
step illustrated case study 
discuss related prospects scenario requirements engineering 

scenario requirements analysis necessary define knowledge representation schema scenarios 
prerequisite walkthrough method analyses dependencies system components environment 
describe dependency checking separate sections inbound outbound events practice analysis interleaved 
purposes scenarios defined facts describing existing system environment including behaviour agents sufficient context information allow discovery validation system requirements 
scenarios instances actual experience system captured users 
agent behaviour key component scenarios adapt scripts proposed inquiry cycle instant events describing system operation 
scripts add detail system environment context activity evaluated 
scenario models created describe system environment investigated connections dependencies system environment 
scenario modelling may appear similar system modelling content system environment model depends boundary intended system placed 
system boundaries frequently change requirements investigation see single model intended system environment boundary eventually imposed 
furthermore model alternative technical system specifications may explored 
boundary required system fixed cases may constructed describe interaction stakeholders system facilitating migration requirements analysis described object oriented specifications 
method described intended extend complement early phases object oriented development case approach uml rational 
relationship scenarios requirements specification illustrated 
scenarios contain information operation current system environment 
scenarios usually examples interaction instance level jane filled order form pressed enter key send database may contain contextual information system environment jane worked busy office frequently interrupted concentrating order entry difficult 
scenarios may contain descriptions activities manual systems interaction legacy systems descriptions agents roles organisation settings 
requirements specification artefact emerges re process evolving simple lists functional desiderata models constitute requirements specification 
method described uses scenarios test data validates requirements investigating dependencies events originate environment described scenario requirements specification system error 
case scenarios projector stories system 
scenarios captured text narratives sketches informal media 
analysis progresses informal representations may replaced models 
question far modelling endeavour extended system core outwards social domain 
ultimately society modelled economics dictate modelling restricted essential set facts useful shaping new system 
modelling limited time available resources methods indicates extent modelling describing facts system environment captured requirements validation 
second question sort facts captured modelling 
address point scenario modelling language proposed support understanding new application domains 
scenarios contain instance information describe real world events happen individuals 
raises problem instant level information related types classes instant information explicitly modelled scenarios leaving example narrative description 
scenarios requirements specification system output impacts social domain inbound events imply process requirements examples instance level descriptions system usage context user agents usage scripts scenarios models required system environment method stages scenarios requirements discovery validation illustrated 
types scenario proposed scenario scripts describe system usage scenario structure models containing facts system environment 
structure models capture broad view modelled domain support investigation relationship required system environment 
scripts hand take detailed view agents behaviour dependency analysis 
part method analyses user goals checks supported system functions 
creates cut requirements specification describes high level system processes 
requirements specification elaborated investigating dependencies input events described scenario script requirements functions 
identifies requirements deal inbound events users system environment different types analysing unexpected events 
inbound events described scenarios interaction users proposed system 
analysis leads st cut decisions extent automation user system boundary requirements specification updated add functions deal different inbound events 
system outputs motivated users goals step described terms process outline content requirements specification 
enables acceptability impact system output users assessed specifying output detail step analysing requirements support users tasks step 
followed tracing destination output different stakeholders investigating system provides necessary support users unacceptable demands social impact analysis step 
stakeholder cost benefit analysis carried complete prognosis people may react required system step 
scenario structure model assess impact system output coupling technical social systems 
scenarios may imaginary stories new system real examples 
method implies sequential process practice stages interleaved understanding system environment increases requirements analysis 
alternative versions requirements specification may produced depending decisions extent automation scenarios created explained different versions users 
method described detail section subsections maps methods step proceeding method necessary define models represent scenarios goal analysis inbound event analysis output requirements analysis social impact analysis scenario structure model scenario scripts characterise system output requirements requirements users aims goals examples problems goal lists input process requirements usage scenarios initial system model system output types information requirements agents destinations refined requirements user env 
events system model stakeholder analysis 
outline method steps showing input scenarios requirements analysis scenario knowledge representation schema schema components semantics familiar software engineering specifications adapted previous research scenario modelling 
schema summarised 
objects structure objects agents activities goals resources achieve events states describe changed provide context owned responsible contribute change initiate 
schema scenario modelling expressed entity relationship diagram objects objects subject matter transactions undergo change 
objects may physical subject laws gravity momentum conceptual objects physical instantiation 
object properties attributes describe quantitative qualitative terms 
agents agents properties methods 
agents specialisations objects carry activities 
agents sub typed human automated agents describe required computer system users 
agents roles describe allocation activities tasks agent assumed responsibility 
properties describe agent knowledge domain task useful determining agent competence carry task specifying training requirements 
structure objects structure objects represent visio spatial information physical environmental facts normally appear data models warehouse library air corridors air traffic control 
structure objects model approximations real world entities persistent spatial properties express containment possession objects example library contains books 
structure objects model physical units departments buildings logical units organisation physical manifestation modelled objects classes 
resources objects necessary activity consumed described resources 
resources necessary complement instance flight plan necessary resource navigating aircraft start location destination 
goals goal states describe required state system satisfy maintain avoid 
goals held agents may express requirements functional implementable design relate performance quality goals immediately implementable design features 
requirements usually expressed linguistically intentions aims objectives 
statements refined formal expressions goal state system attain 
activities activities processes achieve goal 
activities belong agents processes normally run completion resulting state change objects 
addition activities model human tasks 
activities decomposed actions organised procedures control constructs sequence selection iteration 
relationships relationships model structural informational functional associations objects 
high level relationship types distinguished 
model class hierarchy relationships objects aggregation describes part compositional associations functional relations denote objects associated achieving system activity 
association results state change functional relationship serves information access 
lower level relationship sub types introduced model dependencies responsibility models association agent activity goal duty carry authority describes relationship agents dominant agent authority behaviour subordinate ability agent permit agent initiate action consume resource agent activity resource dependency models need activity achieve goal sub goals achieved enable subsequent goal completed need resource agent complete activity contribution specialisation dependency non mandatory relationships agent may contribute achieving goal absolutely necessary completing goal activity goal 
location describe location object point space coordinates location respect structure object 
case object may contained structure object part air corridor 
states states describe properties objects agents persist detectable time changed state transitions 
events event single point time happens allen conception temporal semantics 
events treated semaphores initiate state transition 
instance dispatch goods warehouse customer triggered customer order request event 
completes knowledge representation schema 
section describe schema creating scenario model 
scenario structure model created schema describe major components domain activity 
detailed descriptions behaviour interaction agents described illustrated user cases event trace diagrams integrate standard oo approaches 
detailed descriptions referred scenario scripts record event sequences real life examples system operation 
scenario scripts collected event trace diagrams added document scenario 
structure model remain reasonably constant may need updating script introduces new agent activity 

modelling scenarios stage case study london ambulance service documented failure requirements engineering system design introduced 
application complex socio technical system documented requirements specification material scenarios constructed 
space precludes exhaustive analysis system illustrate operation method selected elements system 
case study description london ambulance service las computer aided dispatch system initiated new computer aided ambulance dispatch system london 
intention replace resource intensive manual system computerised essence enable human controller manage entire incident call arrival ambulance incident scene 
implementation october encountered problems operations reverted manual system month series catastrophic failures 
london ambulance service large organisation 
staff operational staff control assistants managers administrators maintenance ancillary 
accident emergency ambulances patient transport service ambulances emergency control vehicles rapid response units helicopter 
operations real time mission critical people die ambulance arrive time 
requires information patients emergencies hospitals road conditions ambulance locations calls function effectively 
system distributed embedded relies hardware define location ambulances communicate ambulance crews 
mobile nature operations london system complex prone problems 
original system evolved considerable amount time 
ambulance crews considerable knowledge london emergency conditions control room staff worked closely knit teams constant communication dispatch appropriate ambulance right accident 
system relied skilled individuals extensive domain knowledge including geography london 
computer ambulance dispatching cad system main functions call public resource ambulance identification resource ambulance resource ambulance management 
call involved telephone operators control assistants local knowledge map book complete incident form 
incident forms passed resource controllers allocators allocated resources calls 
incident report amended passed dispatcher sent local ambulance station action radio contact ambulance crews 
ambulance dispatched 
new cad system intended automate process possible reducing workload reliance control room staff 
included computer gazetteer london resource proposal system linked automatic vehicle location system tracked ambulance locations 
call resource identification resource resource management ambulance crews control centres hospitals dispatchers management cad system functions patients public emergency calls treat transport instruct report 
computer aided dispatch cad system showing agents system functions communication channels original manual system functions distributed roles call takers resource allocators dispatchers radio operators 
immediately system cut call traffic load increased exceptional levels 
keep track status location ambulances 
led incorrect database ambulances dispatched optimally frequently ambulance assigned call 
consequence large number exception messages system slowed message queue grew 
exception messages generated repeat messages message lists scrolled top screens important messages lost view 
ambulance crews frustrated pressure slow notifying status unit 
mobile data terminals incorrect sequences enter status information 
public repeating calls delay response 
longer knew units available resource proposal software long time perform searches 
result entire system ground halt 
taken line las reverted manual dispatching system 
scenario structure model system illustrated 
answer call crews ambulance london street space stabilise patient plan route navigate drive treat patient get accident transport patient hospital public accident route route knowledge carried subject matter carry involved fulfilled supported goals agents activities objects resource structure object 
partial structure model ambulance crew sub system 
events states omitted note model contains information explicitly stated scenario responsibilities goals crews 
scenario scripts user case scenario manual system shown 
commences member public placing call received call operator takes details incident records form 
location incident ascertained maps gazetteer london streets 
incident details passed resource allocator decides ambulance ambulance station answer call 
resource allocator uses knowledge crew status ambulance locations status reports allocate resources calls 
allocation decision passed dispatcher prepares instructions ambulance crews 
instructions passed local stations radio operator direct contact crews 
public control assistant resource allocator dispatcher radio operator ambulance crew local station record details emergency call complete form locate incident eliminate duplicates allocate resource create message instructions instructions status reports status reports drive incident 
scenario script manual system illustrated case diagram 
new system usage scenario roles merged 
automatic call receiving system assists gathering details locates incident map displays gazetteer 
intended sequence events new cad system shown 
member public calls ambulance service 
dispatcher locates call finds nearest appropriate ambulance 
depends ambulance location accurately notified system 
dispatcher gives instructions crew drive accident location carry duties 
crew take patient hospital complete call report back dispatcher 
idealised scenario assumes goes 
agents involved member public emergency call dispatcher instructs ambulance crew take patient hospital 
manual system additional agents telephone operator control assistant 
handled emergency call recorded detail accident location 
new computer system intended simplify process eliminating interface 
dispatchers increased computer system provide effective decision support 
scenario consists models structure model describes las domain agents activities behaviour models expressed event traces 
public control assistant resource allocator dispatcher radio operator ambulance crew local station record details emergency call complete form locate incident eliminate duplicates allocate resource create message instructions instructions status reports status reports drive incident 
scenario script las covering crew dispatcher sub systems illustrated case event trace diagram 
approximate sequence events reads top bottom 

scenario requirements validation essence method compare scenarios developing requirements specification 
method recommendation format requirements specification 
may formal language list requirements goals artefact prototypes storyboards 
preliminary fact gathering initial scenarios models created 
decision taken cut partitioning model intended system environment 
alternative partitionings system designs may created followed method stages 
different boundaries automation decisions may regarded scenarios system user case techniques may employed represent 
number alternatives explored depends resource constraints 
environment usage scenario cross checked system 
analysis stimulate fact gathering understanding domain increases 
turn lead elaborate models system environment checked thoroughly 
method proceeds iterative cycles fact gathering modelling requirements elaboration validation 
section walkthrough method question templates described guide analyst checking requirements specification scenario vice versa 
goal analysis goals scenario structure model compared requirements specification 
heuristics user goal scenario cross checked functional goals requirements specification 
user goal require computerised support 
functional requirement added requirements specification implications non functional requirements considered 
goal describe quality performance property system achieve 
properties indicate non functional requirements may directly implemented 
nfr goals linked agents activities may help achieve 
goal require computerised support achieved manual procedures 
points need developing operating procedure manuals activities social system 
goal require management decision resources responsibilities 
management responsibility goals linked appropriate agent scenario model 
scenario goal associated activity fully automated 
transfer segment scenario model requirements specification partial automation required elaboration model requirements specification needed 
case study las system users goals explicitly analysed apart aims senior management failure investigate stakeholders needs main contributions system failure 
main stakeholder groups involved public ambulance crews dispatchers management 
original system driven management goals 
may surmise stakeholders goals follows public receive prompt response quick arrival ambulance 
ambulance crews obtain accurate information accident location helpful instructions completing job traffic congestion reports drive accident location quickly possible give attention causality remove hospital quickly safely possible 
dispatchers determine location priority accident plan dispatch nearest appropriate ambulance call monitor progress call obtain accurate information status call ambulance crews 
managers deliver efficient service reduce costs optimise ambulances crew resources 
goals compared activities structure model appears goals supported human activities 
planning scheduling key activity depends goals goals held different stakeholders 
high level analysis seeds conflict apparent 
automated system appeared support dispatchers goals apparent analysis support inappropriate 
little support provided crews system intended support management objectives reducing manpower improving resource utilisation 

investigating inbound event dependencies cornerstone method checking dependencies environment system commences tracing source potential input events 
events may originate sources agents environment usually people generate system input 
objects environment produce naturally occurring events movement animals events may complex origin human machine systems agent controls 
instance pilot initiates events flight plan aircraft sending message autopilot causes aircraft change direction 
complex events prefer model human agent event originator 
top level scenario analysed identify event generating agents objects 
information systems events interest emanate human users real time systems events originate physical world system oil refinery create events communicating pressure temperature changes control system 
scenario script inbound event ascertain system function deal 
new functional requirements elaborated 
event require system attain goal state 
process exist carry necessary change 
event imply system maintain goal state 
system interpret deviation state 
system take remedial action return desired state 
answers question suggest functional requirements monitor normal states correct deviations ideal state 
requirements established deal normal events exception analysis undertaken elaborate system requirements deal abnormal event patterns 
event created human agent production may reliable 
events emanate inanimate objects may reliable detecting may 
questions check possible permutations may occur 
may suggested ruled scenario questions generate scenario scripts analysing scripts describing normal behaviour 
happens event doesn arrive 
system continue function 
event essential system signal malfunction 
happens event arrives early late 
system time sensitive 
early events buffered processed buffered 
late arriving events tolerated 
system halt tasks resume arrival malfunction reported 
happens event arrives wrong order 
system sequence dependent 
mal ordered events buffered sorted acceptable order 
happens duplicate event arrives 
system detect duplicates eliminate unwanted copies 
happens unexpected event arrives 
system deal unknown input 
system interpret extraneous events report presence 
happens corrupted event arrives 
case system detect event correct type arrived contents message damaged 
system send request event message retransmitted 
design implications dependencies known software engineering literature 
dealing event permutation requires guarded commands designed 
requirements specification elaborated entity life histories express patterns correct incorrect events sequential order see jackson method 
jackson points filter process specified detect abnormal events test probes normal input sequence take corrective action unexpected event detected 
dependencies scenario components intended system predictable validation requirements mal formed inputs easily specified event arrival random requirements difficult elaborate 
main classes events imply different responses system known events validated order timing arrival 
case system requirement detect event order expected life history take error correcting action 
known events may arrive order 
requirements case check plausibility events provide undo facilities correct user mistakes warning messages events appear unusual aircraft descends leaving airport 
unknown events 
system continue function correctly requirement exception capture procedure reporting mechanism human operators investigate exceptional events 
inbound events imply requirements processes trap input deal normal abnormal patterns 
abnormal patterns error recovery necessary safety critical systems complex system may take action prevent undesired states 
specialisation requirements analysis dealt depth sutcliffe 
part inbound event validation trace event source 
important security critical requirement 
source event traced specific individual 
individual authorised send event message 
requirements implications logs identify message source individual password protection 
networked systems source event difficult detect 
cases authorisation protocol may required origin event checked 
additional security considerations event intercepted event message read 
message secure encryption required 
case study inbound event heuristics interesting finding event emergency call public concerns duplicates 
people report accident 
suggests requirement identifying caller location nature accident duplicates eliminated 
duplicates occurred excessive response times real world system 
types duplicate need tracked repeat calls case require progress report duplicate calls original event eliminate unnecessary dispatches 
detecting events considered implemented system 
line analysis triggered unexpected events 
ambulance service received different calls ranging minor accidents terrorist bomb injuries 
major disasters rare dramatic implications 
large number ambulances dispatched scene severely resources service 
indicates event consequences knock effects need investigated suggests heuristic event types analysed determine response requirements implications resources 
reporting events shown scenario script considerable oversimplification real system required reporting stages 
implications reporting failures serious 
requirement deal exceptions periodic reminders crews report events arrive shall see outbound analysis advisable 
report events duplicates arrive wrong order corrected queried report sequence template 
ambulance calls set reporting procedures sequence event arrival anticipated 
instruction dispatcher crews key event 
anticipated problems trigger heuristics system 
communication ambulance crews radio arrival checked dispatcher accuracy information vital 
assured radio communications large cities subject considerable interference 
requirements explored secure transmission medium procedure initiated check instructions clear understood 
categorising system output outbound validation difficult impact social system judged 
nature social systems complex unpredictable change introduced computer system frequently produces unanticipated undesirable side effects 
part method aims detect side effects requirements stage guarantee detecting side effects 
validation knowledge social system possessed requirements engineer user 
cases incomplete 
system output may take form message displays dialogue boxes synthesised speech requirements specified formats lists screen layout charts storyboards prototype screens 
highly interactive systems virtual reality dividing line input output hard draw taxonomy adapted different system types 
basic distinction output events convey information human output events imply demand human action 
output event types defined follows direct commands output message requires human action process control system system detects dangerous condition issues command human operator take action 
indirect commands case output may warning messages information displays imply human action taken 
indirect commands gradation force explicit implications operating system issues disc full warning request delete unwanted files implicit events reports customer complaints imply action exceed certain level 
input requests system needs input user 
mandatory essential interaction continue discretionary 
input requests specialisations direct indirect commands 
information displays type describes output immediate implication human response 
information displays may functions 
information may necessary user complete task may instruction tuition help 
information may provided decision support information display may raison tre system information retrieval applications 
metaphors interactive worlds type output blurs distinction metaphors simulation displays virtual worlds support input integrated output multimedia format 
output types classify requirements specification component level system produce output type sub system alternatively output classified event level requirements specification detailed 

output requirements analysis driven requirements specification scenario 
scenario requirements specification cross referenced ensure output generated needed 
steps user task imply information need identified scenario user needs information particular point scenario script system output function exist provide 
requirements specification scenario script checklist help analyse possible user needs 
requirements specification component produces output corresponding user requirement information scenario 
user require information scenario stage information produced needed 
coupling system output user task depend application type 
safety critical system synchronisation precise 
user require information decision support 
points output requirements system provide information help user decision making provide instruction carrying task 
user goal scenario information seeking 
points information retrieval requirements may characterise application may embedded tasks 
questions help identify information requirement dependencies users system doing help assign output types 
question focuses attention appropriate output information user task information content system output appropriate user task goal 
answer question may require detailed task analysis scope detail task information analysis method 
tracing output recipient agent important security required 
destination system output assessed questions receive output information 
circulation output restricted functions required track destination output obtain certification arrives correct destination possibly prevents unauthorised access delivery encryption 
happens wrong person receives output 
distribution messages guaranteed destination important encryption considered 
possible requirement audit trail log acquired output 
happens output gets lost 
output message critical functioning socio technical system 
answers question imply requirements logging message arrival ability request re sends original output arrive 
ability detect lost messages time period timestamp identify individual messages unique code considered 
happens output arrives late early 
question important accuracy vital 
date information may useless information arrives early may missed key updates 
answers question imply requirements ensure timely arrival network prioritisation timestamp priority controlling database update integrity reporting information 
happens output arrives wrong order 
output order geared set sequence functions ensure sequential integrity output required numbering messages designing protocol acknowledge receipt message sent 
happens information inappropriate incorrect 
question focuses link system output user task 
answer may depend thorough task information analysis cross checking scenario may suffice generate answer 
cases user task may predictable requirements clarification dialogue configurable information displays indicated 
case study output las cad system contained direct commands dispatcher crews mandatory input requests crews report location status 
information displays critical dispatcher 
gazetteer display supposed show locations calls ambulances overlaid map london 
schedule proposer displayed allocation lists crews calls 
tracing system output reveals discrepancies stakeholders information needs system output 
instance crews needed information traffic congestion road works provided system 
crews indirect contact system output dispatcher 
information displays adequate supporting dispatchers decisions decision making call allocation proposer 
responsibility crew allocation decision longer clear dispatchers frustrated 
exacerbated inaccurate information prevented decisions 
information accurate output display improved providing better information possible routes projected journey times 
closest ambulance accident location arrive way streets road works 
information provided dispatchers crews readily available local radio police reports 
applying outbound event heuristics points potential problems tracking system output appropriate agents 
instructions dispatchers received incorrect crew crew identification check necessary 
existed manual system 
seriously instructions crews overheard general public lead undesirable consequences causing congestion major accidents 
secure communications considered 
messages get lost arrive wrong order message recording log needed help dispatchers trace call progress diagnose miscommunication problems 
furthermore messages replayed log avoid composing 
effect incorrect output dispatchers prime causes system failure 
accurate information vital possibility late lost reporting events ruled requirement cross checking accuracy needs investigated 
implemented simple instruction dispatchers understanding crew location explicit call allocation instructions 
deviation detected crew corrected 
error tolerances inaccurate information incorrect events studied establish impact performance user tasks 
dispatcher tolerate say inaccurate events performance degradation correction protocols may necessary 
social impact analysis stated outset difficult task achieve success depends unknowns accurate social theories predict human behaviour response computer systems 
sufficient knowledge particular social system predictions 
stable system environment predictions remain valid system constructed implemented 
sources knowledge complete contend complete judgement impact social domain tentative 
guidance may uncover potential problems 
investigation begins assessing coupling social technical systems 
system output commands direct indirect counted 
commands closer coupling social technical systems 
close coupling increases dependencies socio technical system prone failure 
general design advice divide system autonomous sub systems reduce coupling 
closely coupled human computer systems reviewed change design automation computer autonomy increase human control design computer system advisory controlling role style coupling socio technical systems implications organisational culture 
hierarchical organisations lines authority clear power relationships defined structure 
close coupling may possible hierarchical organisations systems may brittle prone failure social environment changes 
networked organisations loose coupling technical systems organisations reflect 
scenario structure model elaborated propose different technical system solutions consequently different system boundaries 
implications people reactions computer systems may vary widely boundary drawn 
involves partitioning tasks activities people computers 
heuristics guide judgements authors 
impact heuristics bear mind requirements stage 
excessive automation diminishes human responsibility 
may turn adverse impact motivation 

excessive automation diminishes human awareness system reduces user capacity respond abnormal events 
dangers safety critical systems pointed leveson 

automation leaves users tasks increase boredom lower motivation lead errors 

automation closely coupled interaction imposes new practices people 
may cause reject system constrains human activity unnatural manner 

coupling users automated systems sensitive users skills knowledge 
users take decisions imposed computer system necessary training 

care exercised ensure computer system alter responsibilities power relationships people 
new computer systems invariably alter responsibilities changes assessed ameliorated possible 
furthermore changes explained justified users technical system boundary established power authority relations traced check system output fulfil users goals authority relationships clear contradict agents charge activity conflict authority 
information output may unexpected consequences 
effect providing information agent assessed see alter person role potential power 
instance providing person person schedule gives opportunity agent may tell second wrong order 
problems difficult detect priori better defence motivated trained staff create 
financial applications security paramount asking information misused receiving agent advisable 
power relations may implicit form incentives monitoring results direct reporting 
scenario structure model assess impact commands tracing output event destination social system asking questions system output trigger activity human agent responsible 
indicates direct command 
system output necessary input human activity imply need decision making 
suggests indirect command 
system output helpful strictly necessary resource completion human activity 
indicates indirect dependency 
system commands identified impact assessed tracing output recipient agents goals responsibilities roles authority social domain 
questions point potential problems guide analyst issues may need investigated 
system output command trace agents involved assess appropriate person asked comply command 
answer inspecting agent properties determine necessary skills knowledge undertake task take decision 
implications personnel selection training 
inspecting role tasks agent responsible 
command directed wrong person social system changed 
person respond time appropriate manner 
investigate time demands decision making carrying tasks checking user training role 
step establish users comply system commands 
possible reasons may lack motivation see command imposition responsibilities 
pointers answers may tracing responsibility authority relationships agent ascertain command create clash responsibilities system asks agent take decision exceeds responsibility 
command user authority system requires user take decision wrong time takes decision 
command alter power relationships human agents command diminishes person authority increase 
complete investigation questions goes requirements analysis socio technical system design 
stakeholder analysis stakeholder cost benefit analysis help summarise previous investigations highlight potential reactions personnel new system 
technique assess impact system design different users stakeholder groups 
analysis repeated alternative system designs assess trade offs various stakeholder 
stakeholder group assessed questions new system de skill job 
excessive automation culprit 
new system threaten job security 
responsibilities diminished new system 
may caused automating part stakeholder job re distributing responsibilities social system 
system adversely effect working practices 
may causes excessive coupling directs human operators allows flexibility removing ability take decisions autonomous action change authority requiring clearance action taken providing sufficient information complete task potential benefits enhanced responsibility stimulating job descriptions opportunities self advancement promotion offset 
stakeholder group preponderance motivation willingness operate new system decreased 
lead mistakes non compliance responsibilities duties ultimately sabotage 
answers may gathered interviewing stakeholders directly opinions judgement independent experts 
cost benefit analysis may conducted sub system component level necessary 
case study las cad system closely coupled consequence event messages crews dispatchers 
system output imposed large number commands crews report location status 
call allocation proposer functioned indirect command dispatcher decision making nearly completely automated 
scenario structure model part cad system illustrated 
shows relationships agents goals activities traced impact analysis 
shows dispatchers role complex responsibilities 
costs benefits group stakeholders analysed seen management significant see table 
crews dispatchers suffered fears possible loss jobs result system 
system imposed demands crews manual system 
surprising crews comply reporting procedures dispatchers frustrated 
inspecting agents roles tasks suggests manual system appropriate allocation tasks agents 
dispatchers crews extensive domain knowledge carry tasks 
problem new personnel training thorough 
call allocation proposer dispatchers decision making authority accurate information planning 
computer system accurate information function social reasons completely automating function 
need maintain user knowledge flexible responses 
fully automated system dispatchers 
people actively take decisions rapidly deny responsibility decisions 
disaster occurs may lost vital domain knowledge enable plan response event automated scheduler designed deal 
furthermore dispatcher response may delayed tacit assumption automated system responsible cope 
impact heuristics point insensitivity design system automation crews power responsibility relationships assuming computer system 
history proved allocation decision making role unproven computer system serious mistake 
public crews dispatchers management hospital report status emergency call plan response instruct crews arrive accident stabilise patient report transport patient report policies planning response strategies locate call eliminate dups 
scenario structure model part cad system 
goals shaded ellipses agents rectangles activities unshaded ellipses 
speed safety non functional requirements 
table 
stakeholder analysis cad system 
stakeholders job security responsibility control workload managers supervisors dispatchers ambulance crew 
discussion retrospective case studies inevitably suffer benefit hindsight 
clear relative contribution method human user recommendations produced analysis 
las report dwells failures social domains failure consult ambulance crews problems dispatchers uncovered wealth problems mentioned report may modest claims effectiveness method 
may hypothesise method uncovered problems inherent current system 
inquiry report blamed management approach system development ascribes major causes failure hardware system integration issues communications failure cad systems poor software testing inadequate preparation system cut 
contend developers corrected mistakes chance failure poor requirements analysis social domain 
parts scenario method reported related enterprise modelling approach mylopoulos chung :10.1.1.29.2587
create models system immediate environment similar semantics 
strategic dependency rationale model allow tracing dependencies agents goals tasks limited reasoning identify trade offs functional requirements non functional requirements referred soft goals 
enterprise modelling method give advice creating enterprise models contain detailed event dependency analysis reported 
dependencies systems environment analysed detail jackson zave point input events impose obligations required system 
propose formalism modelling dependencies 
formal modelling applicable class system implicitly analyse real time safety critical applications clear models deal uncertainties human behaviour 
models user goals system requirements described kaos language enables behavioural requirements constraints formally specified kaos scenarios test data requirement validation 
believe scenario approach appropriate deal uncertainty caused human behaviour focuses eliciting requirements dialogue system function repair problems caused unreliable human behaviour 
far method dealt non functional requirements 
scenarios capture necessary criteria expressed quantifiable terms instance goals quality metric approach similar manner boehm win win analysis 
dependency checking proposed lends assessing non functional requirements 
instance inbound outbound event involves human agent mediate user interface 
usability criteria attached dependencies usability guidelines provide suggestions satisfy non functional requirement see iso parts 
performance requirements assessed checking volume temporal distribution events system requirements security non functional requirements partially dealt heuristics 
elaborating scenario approach cover non functional requirements part ongoing research 
scenarios assessing impact technical systems authors 
reports give little prescriptive guidance analysis practitioner left examples case studies general lessons extracted 
method gives limited heuristics advise checking agent role allocations fall far short comprehensive guidance proposed 
comprehensive enterprise modelling schema proposed analysis business processes critical success factors 
approach potential bridge gap business modelling requirements engineering elaboration social impact analysis 
senses method proposed contain radically new concepts strength lies integration previous ideas 
brought concepts safety critical system assessment bear requirements analysis integrated scenario approaches re 
acknowledge heritage inquiry cycle reported walkthrough method wealth heuristics give comprehensive guidance solving re problems 
stakeholder analysis influence extensively researched bringing social impact analysis adds value reasons stakeholders opinions explicit scenario modelling 
specification requirements analysis process socio technical system implication novel contribution broken ground previous informal analyses 
may contend formalising analytic heuristics capture diversity problems social domains answer heuristics better point method incremental grows experience 
failure formalise knowledge social implications hinder re 
problem eclectic approach builds baroque method may seen unwieldy 
practitioners invariably want quick dirty methods 
approach preclude adoption lean methods 
scenario analysis partitioned different layers complexity developed variants method suit systems varying levels complexity forms part 
tool support necessary component method success 
accordingly develop intelligent tools embed heuristics requirements engineer guide 
report early prototype guides analyst agenda questions provides suggestions developing requirements 
spite advances scenario re may offer demonstrate effectiveness practice 
evidence approach effective empirical studies earlier versions method scenarios heuristics 
validation industrial case studies part research agenda 
improve social impact analysis just begun address complexities understanding go wrong computer system introduced social domain 
author members city crews team comments earlier drafts 
research partially supported eu long term research project crews operative requirements engineering scenarios partners rwth aachen project ordinator city university london university paris university namur 

carroll scenario perspective system development 
carroll ed 
scenario design envisioning technology system development 
wiley new york 

jacobson jonsson 
object oriented software engineering case driven approach 
addison wesley reading ma 

creating contexts design 
carroll ed 
scenario design envisioning technology system development 
wiley new york 


potts takahashi anton inquiry requirements analysis 
ieee software march 

sutcliffe technique combination approach requirements engineering 
proceedings rd international symposium requirements engineering january ieee computer society press 

potts takahashi smith ora evaluation inquiry requirements analysis internet service 
zave harrison md ed 
proceedings re second international symposium requirements engineering 
ieee computer society press 

sutcliffe requirements rationales integrating approaches requirements analysis 
olson gm ed 
proceedings designing interactive systems dis 
acm press new york 

graham task scripts cases scenarios object oriented analysis object oriented systems 

cockburn structuring cases goals members aol com papers htm 
core method controlled requirements expression 
systems software requirements engineering eds thayer dorfman pp ieee computer society press los alamitos 
yourdon 
modern structured analysis 
prentice hall 
jackson software requirements specifications 
addison wesley reading ma 
mylopoulos chung nixon representing non functional requirements process oriented approach 
ieee transactions software engineering 
chung representing non functional requirements process oriented approach 
dept computer science university toronto 
representing socio technical system options development new forms organization european journal organizational psychology 
dobson je 
change evolution requirements challenge practice software engineering 
ieee symposium requirements engineering re san diego ca 
ieee computer society press 
rational 
uml unified modelling language available rational boulder colorado 

maiden sutcliffe requirements critiquing domain abstractions 
proceedings international conference requirements engineering siddiqi ed 
ieee computer society press 
allen common sense theory time 
proceedings international joint conference artificial intelligence 

report inquiry london ambulance service 
london 
jackson system development 
prentice hall 
sutcliffe jackson system development 
prentice hall 
sutcliffe task related information analysis international journal human computer studies vol pp 

bailey human performance engineering 
prentice hall 
shneiderman designing user system interface 
rd edition morgan kaufmann 
sutcliffe human computer interface design 
nd edition macmillan london 
leveson system safety computers 
addison wesley reading ma 
jackson zave domain descriptions 
ieee symposium requirements engineering 
ieee computer society press 
van lamsweerde darimont massonet ph goal directed elaboration requirements meeting scheduler problems lessons learnt 
proceedings re ieee international symposium requirements engineering york uk eds harrison zave pp ieee computer society press 
basili rombach tame project software environments ieee transactions software engineering vol 
pp 

boehm identifying quality requirement conflicts ieee software pp 
march 
iso ergonomic requirements office systems visual display terminals 
parts international standards parts draft standards international standards organisation switzerland available national standards organisations 
improving performance manage white space organization chart 
bass san francisco hollnagel human reliability analysis context control academic press london 
reason human error 
cambridge university press 
macaulay requirements engineering 
springer verlag berlin 
sommerville sawyer requirements engineering practice guide john wiley sons 
maiden ryan manning cooperative scenario approach acquisition validation system requirements exceptions help 
proceedings glasgow safety critical system engineering workshop 

