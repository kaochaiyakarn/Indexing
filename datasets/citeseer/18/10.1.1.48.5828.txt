lambda calculus objects method specialization kathleen fisher computer science dept stanford university cs stanford edu furio honsell dipartimento di informatica universit di udine honsell john mitchell computer science dept stanford university cs stanford edu june presents untyped lambda calculus extended object primitives reflect capabilities called delegation object oriented languages 
type inference system allows static detection errors message understood time allowing type inherited method specialized type inheriting object 
type soundness proved operational semantics examples illustrating expressiveness pure calculus 
forms object oriented languages 
major lines difference class delegation languages 
class languages smalltalk gr es object created class inheritance determined class 
delegation languages self cu object may created object inheriting properties original 
untyped lambda calculus objects functional form delegation tool studying typing issues object oriented programming languages 
main interests lie understanding functionality method may change inherited intuitively due reinterpretation special symbol self ii setting stage equational reasoning method bodies apart particular context occur 
second goal necessary understanding effects optimization program transformations method bodies inheritance hierarchies 
main reason delegation language study relative simplicity compared class languages 
calculus main operations objects send message object written forms method definition 
expression denotes object method denotes object obtained adding method body sent message result obtained applying form self application allows model special symbol self object oriented languages supported part nsf graduate fellowship nsf pyi award nsf ccr 
supported part cnr mitchell funding stanford spring 
supported part nsf pyi award matching funds digital equipment powell foundation xerox nsf ccr wallace davis faculty scholarship 
directly lambda abstraction 
intuitively method body function actual parameter object 
reinforce intuition write method bodies form self final method operation objects replace method body 
provides functional form update 
language self distinguish instance variables methods essential 
untyped lambda calculus bears strong resemblance object system ra ar originally developed prior knowledge untyped part calculus aba model fragment modula cdg 
main goal develop type system allows methods specialized appropriately inherited 
briefly suppose point object methods returning integer coordinates move method type int theta int point 
method move type send message move obtain function distances move directions returns point identical updated gamma coordinates 
create colored point cp object extension operation cp inherits move methods untyped object oriented language smalltalk inherited move method change position colored point leaving color unchanged 
typed language want move method cp specialized type int theta int colored point inherited method original type int theta int point moved colored point obtain ordinary point color making inherited move function largely useless 
imperative version move bypass difficulty returning type unit called ml void issue arises attempt define function return value 
construct current eiffel mey analyzed coo illustrates value specializing type method imperative language 
include construct widespread counter evidence usefulness method specialization 
fact appears common novice programmers attempt specialize types methods derived classes 
experienced programmers appear casts approximate effects described 
phenomenon concerned called method specialization mit describes precursor calculus 
earlier describes method specialization explains usefulness presents tentative type system extending complicated record calculus cm 
addition analysis type system 
current presents calculus objects recourse record calculi owe substantial debt previous studies record calculi simplifies typing rules substantially proves type soundness 
addition show equality typable terms undecidable showing encode numerals objects define partial recursive function 
objects play essential role function part calculus simply typed sufficient express total recursive functions 
preliminary version appeared 
untyped objects inheritance delegation untyped calculus objects extend untyped lambda calculus object related syntactic forms hi grammar may variable constant symbol built function lambda abstraction function expression function application 
object forms described tabular form easy hi empty object send message object extend object new method having body replace method body consider meaningful denotes object method meaningful denotes object method 
conditions enforced type system 
reason distinguishing extension method replacement operations different typing rules 
method new method object referred may type 
hand method replaced careful violate typing assumptions methods refer 
concerned static typing single operation adds method object replacing existing method name 
examples objects inheritance method specialization provide intuition calculus give short examples 
shows records may encoded objects second third illustrate method specialization 
examples may regarded motivating examples try define method specialization general attempt convey essential properties examples points colored points 
simplify notation write hm hhi distinct method names 
illustrate computational behavior objects section simplified evaluation rule reflects operational semantics defined precisely hm eval gamma 
hm allows evaluate message send retrieving appropriate method body object applying entire object 
note relation eval gamma 
represents evaluation step full evaluation expression 
record components 
example form point object constant coordinates def hx self self send message may calculate result eval gamma 
self eval gamma 
second evaluation step ordinary fi reduction lambda calculus 
example may generalized show record may represented object methods constant functions 
particular may represent record hl object hm ke ke self dimensional point move function 
interesting object refer point object coordinate move method 
easily give similar dimensional point coordinates dimensional case illustrates ideas simply 
def self move self dx self dxi move method applied object displacement dx replaces method returning coordinate incremented dx illustrated example calculation send message move parameter object move self dx hp hp hp self sound rule object equality hhm hm may reach move self move self dx showing result sending move message integer parameter object identical updated coordinate 
inherit move point colored point 
third introductory example shows move inherited colored point defined adding color method 
cp def hp color self send move message cp parameter may calculate resulting object exactly way cp move self dx cp hcp cp hcp self final cp move self move self dx color self red important feature computation color resulting colored point original 
move defined originally points coordinate method body performs correct computation method inherited complicated object additional methods 
cases useful redefine inherited method exhibit specialized behavior 
may accomplished calculus combination inheritance method redefinition 
example want object change darker color moved define colored points points obtaining colored point right type move method 
move redefined changing type right behavior 
mutually recursive methods 
technical simplification system formulated methods added object time 
leads formulate typing rules manner difficult write object expressions mutually recursive functions 
specifically static type system allow method body added methods refers available object 
example type object expression hhi plus self self method referring method 
reason object expression typable send message plus object send message 
object method error precisely error aim prevent type system 
hand may type object expression self plus self self formed extending empty object method plus method refers typing restriction method may refer method object inconvenient wish add mutually recursive methods object 
standard idiom adding mutually recursive methods 
specifically extend object giving method body correct type depend object may extended desired method body referring replace dummy method body desired method body referring programming inconvenience limitation expressiveness 
serious merit complicating typing rules way alleviates difficulty 
real programming language illustrative object calculus expect convenient syntactic sugar simultaneously adding possibly mutually recursive methods object 
operational semantics defining operational semantics calculus give rules extracting applying appropriate method object 
natural way approach permutation rule hhe ffi ffi hhe ffi ffi distinct occurrence ffi may treat objects sets methods ordered sequences 
equational rule cause typing complications typing rules allow type object expressions switch ext ov hhe book gamma 
hhe perm ov ov hhe book gamma 
hhe add ov book gamma 
hhe cancel ov ov hhe book gamma 
fi eval gamma 
ffi eval gamma 
ffi ffi may 
table bookkeeping evaluation rules 
methods added appropriate order 
particular permute methods object expression self plus self self subexpression hhi plus self self typed described previous section 
entire expression typed 
circumvent problem method order complicated standard form object expressions method defined exactly arbitrary method body contribute observable behavior object redefined exactly giving desired method body 
definitions method form useful allows permute list method redefinitions arbitrarily 
formally addition eval gamma 
relation allows evaluate object function expressions operational semantics includes subsidiary bookkeeping relation book gamma 
allows object transformed standard form indicated 
relation book gamma 
congruence closure clauses listed table 
rules allow method redefinitions permuted arbitrarily 
important property book gamma 
proved section book gamma 
type derivable fail general permutation rule discussed 
evaluation relation congruence closure union book gamma 
evaluation clauses fi bottom table 
words eval gamma 
may obtain applying bookkeeping basic evaluation step subterm 
static type system class types message send type object called class type 
part misuse word class classes object oriented languages generally determine representations interfaces types objects 
class best standard term object oriented programming suggests type object 
type defined type expression class hhm ii type property element type object result value type significant aspect type bound type variable may appear types say type mean type free occurrences referring type class hhm ii 
class hh ii special form recursively defined type 
typing rule message send form class hh ii class hh ii substitution reflects recursive nature class types 
rule may give point move methods considered section type class hh int move int tii returns integer move type subtle important aspect type system object extended additional method syntactic type method change 
example extend color obtain cp section obtain object type class hh int move int color important change notice syntactic type move int meaning variable changed 
referring type originally refers type cp effect called method specialization type method may change method inherited 
kind reinterpretation type variables sound typing rule object extension insure possible type new method correct 
done form implicit higher order polymorphism 
subtle aspect type system objects behave identically send sequence messages may different types 
adding redefining methods considered operations objects 
simple example objects 
def self move self dx self dxi def self move self dx move dx hard see return results sequence message sends 
send clearly gives result send message move move uses move sequence subsequent messages produce identical results 
equivalent extend additional methods 
reason move method preserve additional methods added object extension second 
distinction shows type system give type second unsound give type 
point class hh int move int tii point class hh int move int similar situation arises smalltalk example possible classes generate equivalent objects behave differently inherit 
adapting type system smalltalk expect distinguish classes type 
reason wish type smalltalk class give information behavior objects types methods inherited classes 
types rows kinds type expressions include type variables function types class types 
change system substantial way add type constants need 
types class rows hhii hhr ii kinds kind row expressions appear subexpressions type expressions rows types distinguished kinds 
notational simplification write intuitively elements kind rows include method names reason know statically method appear guarantee methods multiply defined 
kinds form infer form higher order polymorphism method bodies 
environments contexts system list term type row variables 
gamma ffl gamma gamma gamma note contexts ordered lists sets 
judgement forms standard gamma formed context gamma term type gamma formed type gamma row kind typing rules part formulation type system routine 
novel rules discussed associated objects 
complete type system appears appendix empty object hi object type class hhii specified rule empty object gamma gamma hi class hhii empty object methods respond messages 
object extended methods obtain objects types 
typing rule meth app sending message object form described section 
precise rule row occurring class type object may form long method name occurs explicitly 
type equality allows order method names permuted described appendix consequently loss generality assuming method listed type 
meth app gamma class hhr ii gamma class hhr ii subtle complicated rule system obj ext typing rule adding methods objects 
rule assume object class type include method added 
final assumption typing expression method body thing notice typing contains row variable implicitly universally quantified 
quantification indicated type substitution row expression provided correct kind 
see lemma 
essential implies required functionality possible extension second important property typing type form class type substituted hidden class type necessary hypothesis sending message result application object 
simplify notation abbreviation 
obj ext gamma class hhr ii gamma gamma class ii gamma class hhr ii rule redefining overriding method body form slightly simpler 
example typing derivations claimed earlier able prove typings class hh int move int tii class hh int move int contexts gamma move self class int move int tii dx int gamma gamma move class hhr int move int tii derivation assuming ffl hx self class hhx gamma self dx int gamma gamma self dx class hhr int move int tii int gamma self dxi class int move int tii gamma gamma dx gamma self self dx self dxi class int move int tii int ffl hhx self move self dx self class hhx int move int tii table example typing derivation 
argued unsound give type 
illustrate typing rules prove table 
second proved similarly 
addition prove object expression cp hp color self type class hh int move int color similar means 
examples intended demonstrate type system captures desired form method specialization 
soundness type system prove soundness type system steps 
subject reduction type eval 
type symbol eval 
denotes transitive closure eval gamma 
relation 
define evaluation strategy eval reduces expressions object calculus values special value error undefined expression question fails terminate 
subject reduction show may derive type closed expression eval error evaluator returns error fails find required method fact claim type system prevents message understood errors 
subject reduction proof begins collection lemmas substitution row type variables 
lemmas allow specialize polymorphic object types include additional methods 
section introduce normal form typing derivations permit restrict attention derivations occurrences equality rules row fi immediately occurrence row fn app restriction greatly simplifies proofs 
prove series technical lemmas section 
allows treat contexts lists sets 
remaining lemmas section provide tools constructing row expressions generalize polymorphic object types 
lemmas section show book gamma 
fi components eval gamma 
relation preserve expression types 
subject reduction theorem follows 
section define eval function show typable closed expressions evaluate error fact guarantees get dynamic message understood errors 
substitution lemmas lemmas prove may derive type row judgement containing type row variable substituting type row expression appropriate kind produces derivable judgement 
lemma desired property additional hypothesis may derive judgement gamma gamma extra assumption required projection weakening empty row cases 
lemma uses lemma show additional hypothesis fact unnecessary 
lemma judgement gamma gamma judgement gamma judgement gamma gamma derivable gamma gamma form proof proof induction derivation gamma gamma cases vacuous follow immediately inductive hypothesis 
projection case requires case analysis projected variable 
row fi type fi cases follow fact fi fi row expressions type expressions row type expression row type variable match weakening case requires fact gamma derivable gamma class row fn abs cases follow fact bound variables may consistently renamed necessary 
lemma gamma gamma gamma derivable gamma gamma proof proof lemma induction length gamma lemma needed case gamma exp var 
fact gamma derivable gamma may combine lemmas give desired substitution property type kind derivations 
lemma gamma gamma gamma derivable gamma gamma may lemma conjunction lemma specialize class types contain additional methods 
lemma gamma gamma gamma derivable gamma gamma proof lemma follows induction derivation gamma gamma lemma projection weakening empty object cases 
lemma row expression needed obj ext case 
normal form equality rules proof system introduce non essential judgement derivations unnecessarily complicate derivation analysis 
restrict attention derivations appearance equality rule row fi immediately occurrence row fn app 
call derivations derivations 
judgements derivable full system derivable derivations see judgements row type expressions particular form call nf type normal form derivable derivations 
expression type type nf may prove soundness derivations 
nf type row expression normal form respect fi reduction applied row function application redexes 
notion defined row type portion calculus strongly normalizing confluent 
prove fact giving translation function tr sigma sigma denotes typed lambda calculus function types signature sigma defined type constants typ meth term constants er meth ar typ typ typ cl typ meth 
typ br meth typ meth method name variables sigma contain row type variables calculus 
define translation tr tr tr ar tr tr tr class cl typ tr tr tr hhii er tr hhr ii br tr tr tr typ tr tr tr tr extend tr kinds contexts system follows tr typ tr typ meth tr ffl tr gamma tr gamma tr gamma tr gamma tr tr gamma tr gamma tr note tr preserves bound free variables expressions bv bv tr fv fv tr row type expressions furthermore ff tr ff tr renaming bound variables 
show strong normalization system follows strong normalization sigma need establish properties tr need show translations terms related fi system related fi sigma translation kinded term system typed sigma term 
lemma proves properties 
lemma fi tr fi tr row type expression system 
proof proof lemma induction structure inductive case case analysis possible forms case follow routinely case follows subsidiary lemma tr tr tr type row expressions proved induction structure lemma establishes tr produces typable sigma terms 
lemma gamma derivable system tr gamma tr tr derivable sigma distinguish sigma derivations derivations system 
proof proof lemma induction derivation gamma cases row fi type fi require lemma subject reduction sigma combining lemmas get row type portion calculus strongly normalizing lemma strong normalization row type portion gamma derivable row type expression infinite sequence fi reductions lemma crucial showing confluence sigma implies confluence row type portion calculus 
lemma tr fi unique expression fi tr row type expression expression sigma proof proof lemma induction structure similar outline proof lemma 
confluence row type portion system follows 
lemma confluence row type portion gamma derivable 
fi 
fi exists 
fi 
fi row type expression unique normal form nf row type expressions defined notion 
term expression type type normal form may restrict attention types rows nf need extend definition nf term expressions contexts 
nf term expression just expression nf context gamma context listing nf elements gamma lemma shows find derivation judgement nf lemma normal form gamma derivable nf gamma nf 
proof proof lemma induction derivation gamma occurrences equality rules may eliminated derivation row type expressions related fi reduction nf cases follow immediately inductive hypothesis 
give row fn app case detail interesting 
gamma derived row fn app gamma form gamma hypotheses row fn app previously derived gamma gamma inductive hypothesis know nf gamma nf nf gamma nf derivable 
applying row fn app judgements produces nf gamma nf nf cases consider nf abstraction 
case nf nf 
case nf gamma nf nf nf nf fi nf nf applying row fi judgement produces nf gamma nf nf derivation 
note nf nf nf substituting types normal form variables introduce new fi reductions 
substituting row expression row variable introduce new fi reduction allow abstraction row variables need worry case 
judgement derivable nf gamma nf case nf abstraction 
case desired result follows immediately inductive hypothesis 
point concern expressions nf limitation severe term type type nf analyses derivations consider derivations restriction equality rules greatly simplifies proofs 
technical lemmas lemma useful allows contexts fact lists treated sets 
lemma gamma gamma gamma gamma derivable gamma gamma proof proof lemma induction derivation gamma gamma obj ext obj cases require subsidiary lemma permits consistent renaming row variables judgement 
renaming necessary avoid naming clashes 
remaining lemmas section build formed row expressions substituted row variables typing derivations 
ability crucial proofs lemmas 
lemma gamma hhr ii derivable gamma gamma 
proof proof lemma induction derivation gamma hhr ii cases follow routinely inductive hypothesis 
weakening case follows repeated applications lemma 
row fi case worked difficult 
gamma hhr ii derived row fi previous step row fn app definition derivation 
furthermore hypotheses form gamma hhr ii gamma hhr ii hhr ii loss generality fv ftg hhr ii hh ii implies inductive hypothesis gamma gamma derivable 
lemma gamma gamma derivable 
just gamma gamma original derivation nf gamma nf lemma get gamma gamma derivable 
lemma gamma class hhr ii derivable gamma gamma 
proof lemma induction derivation gamma class hhr ii handle weakening case 
cases vacuous step derivation form gamma class hhr ii type fi case follows vacuously appear derivation 
class case follows immediately lemma 
lemma gamma derivable gamma proof proof lemma induction derivation gamma case obj ext difficult 
cases follow similar reasons directly inductive hypothesis 
gamma derived obj ext judgement form gamma class hhr ii hypotheses obj ext previously derived gamma class hhr ii applying inductive hypothesis produces judgement gamma class hhr ii lemma gamma derivable 
hypotheses obj ext give gamma derivable 
mj applications row ext may derive gamma hhr ii final hypothesis obj ext tells judgement gamma class ii derivable 
applying inductive hypothesis produces judgement gamma class ii follows easily proved property derivations gamma class ii derivable 
lemma gives gamma derivable 
side condition row ext fv consequence lemma may derive gamma applying row extension may derive judgement gamma hhr ii applying class judgement produces gamma class hhr ii judgement wished derive 
type preservation lemmas lemmas show various components eval gamma 
relation preserve expression types 
lemma gamma derivable book gamma 
gamma derivable 
proof proof lemma consists parts shows derivation gamma depend form form formally gamma derived gamma oe gamma oe derivable gamma fact may seen inspection typing rules 
second part shows gamma derivable book gamma 
matching left hand side book gamma 
axioms gamma derivable 
fact follows case analysis book gamma 
axioms 
row variables lemmas essential switch ext ov case 
fact fi reduction preserves expression types immediate consequence lemma lemma gamma gamma gamma derivable gamma gamma proof proof lemma induction derivation gamma gamma cases require lemma form gamma gamma derivable judgement gamma gamma derivable 
proof sub lemma similar structure proof lemma 
immediate consequence lemma reduction preserves expression types 
lemma gamma hhe ffi ffi class hhr ii derivable distinct precisely method names occur consecutively right gamma class hhr ii derivable 
proof suppose gamma hhe ffi ffi class hhr ii derivable 
proof parts 
part establishes claim gives derivable type object obtained hhe ffi ffi stripping number ffi operations 
names subobjects introduced 
second part establishing claim shows may derive required type 
claim follows analysis typing judgements claim 
represent subobjects hhe ffi ffi introduce notation def def ho gamma ffi note object assumption lemma just need able name particular collections methods defined associated types 
gamma subsequence gamma ffi similarly sigma sigma gamma subsequence sigma sigma gamma gamma note gamma ffl gamma ffi gamma sequence methods defined follows methods gamma gamma methods overridden similarly gamma sequence methods defined methods gamma gamma methods defined overridden lemma follows immediately claims written notation just defined claim gamma class hhr ii derivable gamma gamman class hhr gamman gamman gamman gamma gamma gamman sigma gamman gamma sigma gamma gamman ii derivable claim gamma class hhr ii gamma class hhr gamma gamma sigma gamma sigma gamma ii derivable gamma class hhr ii derivable 
proof claim induction claim follows induction derivation typing 
induction necessary handle weakening case 
simple case analysis suffice 
cases weakening need considered obj ext obj rules hypothesis form gamma gamma gamma class gamma gamma sigma gamma sigma gamma ii lemmas build row expression substituted lemma row variable judgement give desired type theorem subject reduction gamma derivable eval gamma 
gamma derivable 
proof proof similar outline lemma reduces showing basic evaluation steps preserves type expression reduced 
book gamma 
case follows lemma fi case lemma case lemma 
type soundness subject reduction need formalize notion message understood errors show type system prevents 
intuitively message understood error occurs message sent expression define object method 
formalize notion define mutually recursive functions eval get proof rules style structured operational semantics 
ideas proof system discussed 
full system appendix eval function standard lazy evaluator lambda calculus extended object calculus way 
object expressions message sends evaluate 
expressions form eval uses function get extract method behavior specified eval proof rule eval get eval eval may read follows 
get extracted method returning expression form send message expression applying object 
resulting expression recursively evaluated returned value original message send 
meta variable expression special value error get extract method expression 
different forms expressions get may immediately extract method corresponding axioms getm get getm get hhe second rules converts object ito equivalent object hhe get returns objects standard form 
extract method complicated expressions recursively eval get functions 
getm rule representative cases getm get get get find method expression form find method expression calling get returns expression form send object message extracting method applying return result recursively looking method resulting expression 
get fail find method 
different ways get may immediately realize object required method object variable lambda abstraction empty object hi possibilities described axioms getm var get error getm hi get hi error getm get error called complicated expressions get fails find desired method recursive calls fails 
getm err getm rules representative cases getm err get error get error getm get get get rules reflect fact ways fail find method expression form described getm err occurs find method second described getm rule saw occurs find method expression obtained invoking method 
need define mutually recursive functions single eval function notion value changes context message send 
particular looking method object expression form ffi value 
looking method expressions values 
looking method ffi value evaluated 
specific eval get functions designed may demonstrate type system prevents message understood errors programs 
technique allow show terms typed function expressions programs diverge reduce lambda abstractions 
need add third evaluation function get looks lambda abstractions returns tagged error value function gamma error called expression reduce lambda abstraction 
simplify presentation consider message understood errors 
proof rules may show formally typable programs object calculus produce message understood errors 
lemma ev eval ev get eval proof proof induction derivation ev base case getm axiom follows add ov bookkeeping rule 
base cases vacuous error expression immediate 
inductive case getm proof rule representative non vacuous inductive cases 
derived get getm previously derived get get note get equal error know get expression error eval 
eval eval step follows inductive hypothesis fact reduction rules congruence relation 
second step follows reduction rule final inductive hypothesis 
remains show may derive eval error ways eval equal error returning expression undefined happens diverges lazy evaluation simpler prove contrapositive lemma ev error ffl ev get class hhr ii row type ffl ev eval type gamma indicates judgment gamma derivable 
proof proof induction derivation ev error base cases vacuous follow inspection typing rules 
give inductive cases getm err getm rules representative non vacuous inductive cases 
getm err derive ev error getm err ev get form previously derived get error applying inductive hypothesis get class hhr ii row type inspection typing rule message send meth app reveals type fortiori class hhr ii row type needed show 
getm derive ev error getm ev get form previously derived get get error applying inductive hypothesis second equations get class hhr ii lemma eval 
eval 
eval class hhr ii get subject reduction theorem class hhr ii needed show 
theorem type soundness judgement derivable eval error expressive power function part calculus simply typed typable expression contain object operations strongly normalizing 
follows function expressions subset total recursive functions representable 
contrast show partial recursive functions representable calculus functions objects 
intuitively class types form recursive type allows self application 
simple example nonterminating expression illustrating failure strong normalization typable object expressions 
divergent computation object omega method sends message object 
consequently evaluation omega produces infinite sequence message sends 
omega def hm self self class hhm tii omega eval gamma 
self self omega eval gamma omega fixed point operator considering natural numbers basic operations show define fixedpoint operator type 
main idea illustrated object rec recurse method causes function applied rec def self self rec rec eval gamma 
rec define general fixed point operator treating object function context gamma oe oe rec class rec typing derivation shows resulting function type oe oe oe oe contain gamma rec oe gamma gamma rec class rec oe gamma gamma gamma rec class gamma gamma gamma rec rec oe ffl rec rec oe oe oe object numerals representation natural numbers object expressions complicated preceding examples 
main idea represent natural number object method sends formal parameter message total times 
similar spirit church numeral number represented function function applications 
differences numeral involves message sends function applications message method names parameters message sent times fixed formal parameter 
possible type church numerals calculus able type predecessor equality function church numerals 
representation number stored rep method numeral 
addition rep method convenient include successor predecessor methods 
gives numerals methods successor predecessor rep representation 
numerals type nat def class hhs rep test test ii test def class hhm tii type rep chosen easy test number zero evaluate argument expressions accordingly 
numeral defined follows combinator postponing full definition predecessor zero test defined 
def rep self rep self self rep easy see successor increments number times sent rep relying predecessor method 
may show nat zero test function ifz zero test property ifz yields true def nat nat nat false def nat nat nat 
result ifz 
functions true false objects def hm falsei def hm truei properties eval gamma 
eval gamma 
eval gamma 
true eval gamma 
false 
objects define zero test follows 
ifz def rep ifz eval gamma 
eval gamma 
true false predecessor rough terms main idea predecessor pass object form hm rep method object 
method function right type 
rep sends object message times net effect send message gamma times 
gives way decrementing number times sent formal parameter function 
zero test ifz take care special case result object hm numeral predecessor method numeral defined follows 
self rep ifz self self rep hm function ifz self self rep sends hm total minf times predecessor method works follows 
eval gamma 
hn rep ifz rep hm eval gamma 
hn rep hm minf ng eval gamma 
hn rep minf ng gamma concludes set basic functions natural numbers needed represent partial recursive functions 
computationally expressive typed calculus functions objects sound type system 
kernel language define objects interfaces called classes directly subsidiary calculus records 
gives axiomatic presentation simple object oriented language type system form hope conducive 
feature calculus method specialization method redefinition expressions form may define functions type behavior change natural useful way result inheritance 
capability difficult achieve directly calculus records 
early claim captured essence inheritance simple form progress direction 
technical open problems including development denotational model proof system equivalence sufficiently powerful derive nontrivial equations method bodies investigation subtyping substitutivity language 
hopefully calculus provide basis studying mathematical problems manner faithful substantial uses object oriented programming practice 
aba abadi 
baby modula theory objects 
technical report dec systems research center 
appear functional prog 
ar adams rees 
object oriented programming scheme 
proc 
acm symp 
lisp functional programming languages pages july 
cdg cardelli donahue jordan kalsow nelson 
modula report 
technical report src dec systems research center 
cardelli donahue jordan kalsow nelson 
modula type system 
sixteenth acm symp 
principles programming languages pages 
cm cardelli mitchell 
operations records 
math 
structures computer science 
summary math 
foundations prog 
lang 
semantics springer lncs pp 
coo cook 
proposal making eiffel type safe 
european conf 
object oriented programming pages 
cu chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
sigplan conf 
programming language design implementation pages 
es ellis 
annotated manual 
addison wesley 
gr goldberg robson 
smalltalk language implementation 
addison wesley 
mey meyer 
eiffel language 
prentice hall 
mitchell honsell fisher 
lambda calculus objects method specialization 
proc 
ieee symp 
logic computer science pages 
mit mitchell 
typed foundation method specialization inheritance 
proc 
th acm symp 
principles programming languages pages january 
ra rees adams 
dialect lisp lambda ultimate software tool 
proc 
acm symp 
lisp functional programming languages pages august 
ungar smith 
self power simplicity 
proc 
acm symp 
object oriented programming systems languages applications pages 
typing rules general rules start ffl projection gamma gamma gamma weakening gamma gamma gamma gamma gamma rules type expressions type var gamma dom gamma gamma type arrow gamma gamma gamma class gamma gamma class type row equality type row expressions differ names bound variables order label type pairs considered identical 
words consider ff conversion type variables bound class applications principle ii ii ii ii type row expressions conventions syntax explicit rules system 
additional equations types rows arise result fi reduction written fi fi conversion written fi 
row fi gamma fi gamma type fi gamma fi gamma type eq gamma fi gamma gamma rules rows empty row gamma gamma hhii row var gamma dom gamma gamma row label gamma fn fm gamma row ext gamma gamma gamma hhr ii row fn abs gamma gamma row fn app gamma gamma gamma rules assigning types terms exp var gamma dom gamma gamma exp abs gamma gamma exp app gamma gamma gamma empty object gamma gamma hi class hhii meth app gamma class hhr ii gamma class hhr ii obj ext gamma class hhr ii gamma gamma class ii gamma class hhr ii obj gamma class hhr ii gamma class ii gamma class hhr ii abbreviation definition evaluation strategy axioms meta variable represents expression error 
getm var get error getm hi get hi error getm get error getm get getm get hhe eval var eval eval hi eval hi hi eval eval eval eval eval eval inference rules getm app err eval error get error getm app eval get get getm err get error get error getm get get get getm err get error get error getm get get hhe getm err get error get error getm get get hhe eval app err eval error eval error eval app eval eval eval eval err get error eval error eval get eval eval 
