electronic publishing vol 
september rita editor user interface manipulating structured documents cowan mackie de smit department computer science department computer science computer systems group university cape town university waterloo cape town waterloo ontario south africa canada summary structured documents developed sgml gml lat usually contain combination text tags 
various types documents require tags different placement creator document learn retain large amount knowledge 
rita consists editor user interface controlled grammar description document type tags guide user preparing document avoiding problems tags placed incorrectly 
user interface contains display wysiwyg document examined prepared 
describes rita user interface internal structure algorithms relates anecdotal user experiences 
comparisons commercial experimental systems 
key words document manipulation finite state automata user interfaces incomplete documents structured documents syntax directed editing partial documents document preparation viewed distinct activities creating content structure document editing generating document specification appearance formatting 
observations separation appearance structure content developments led creation tagging markup languages lat ex gml sgml 
markup languages structure document usually specified set tags may implicit embedded text 
creating different types structured documents error prone task set tags correct placement remembered 
tendency produce incorrectly tagged documents especially noticeable novice infrequent user presents problems document processing professionals remember subtleties tagging similar computing 
aim describe rita editor user interface structured documents 
rita designed users wide range expertise document processing primary goal members broad class create edit tagged documents structurally correct initially entered computer 
different types users benefits markup languages trouble learning remembering details tag types received march john wiley sons revised november university nottingham 
cowan mackie de smit placement 
focuses details rita dynamic user interface algorithms required implementation 
systems available software houses research laboratories design objectives similar ones proposed rita 
authors able locate publications describe user view methods implementation 
tool rita invaluable minimizes errors significantly reducing computing resources making creators documents productive 
rita tested successfully different groups users including word processing staff programmers staff minimal computer skills 
experiences rita contexts led tool ensures document structurally correct entered computer 
similar experiences reported 
number structured document editors proposed developed 
include etude derivative publishing system ips pen author editor write sgml editor systems kimura 
version rita described designed operate gml sgml tag sets produce output processed different formatting systems including lat dcf waterloo script gml 
rita developed certain views computing environment users set documents handled 
design parameters described remainder section 
layout style sheet document really needed document formatted 
text prepared desirable view approximate appearance document confirm serious structural deficiencies exist 
rita designed accept layout style sheet terminal computer screen adapt particular computing viewing environment 
documents prepared viewed displays ranging character simple graphics screens high resolution bit mapped displays 
people want prepare documents necessarily interested secrets computing want produce document appears produced expert perform task minimum fuss bother 
type user model guided development rita 
users subdivided novices casual users experienced non technical users 
novices minimal computing skills want learn little possible start producing perfectly formatted documents 
casual users may may substantial computer skills produce documents infrequently tend forget techniques document preparation uses computer 
experienced non technical users individuals belong word processing group little knowledge markup languages 
course system developed tried forget expert feature implemented remembering members broad spectrum users 
different types documents different structures example books different legal documents contracts 
certain tags define entities titles chapter headings illegal document type context 
rita designed understand structure classes documents rita tailored aid user preparing type document 
rita accepts different document rita manipulating structured documents types defined context free grammars consisting set rules rule defines regular language 
rules defined large document divided segments chapters merged formatter produce complete document 
document created content structure modified editing existing structure may temporarily document structure incorrect violates grammar defined particular document type 
flexibility editing important correct document structure rigidly enforced times 
system overview rita provides user features ability view document prepared see get editing environment method constraining document ensure conforms document type technical manual contract letter memorandum system retargetable output documents created system may directed different batch formatters different interactive displays method editing documents editing process may documents temporarily incorrect system illustrated 
rita accepts input different sources document class database user produces specific document output 
document class database contains components descriptions structure document document grammar descriptions appearance structural component document different media 
user supplies text document chooses tags menu constrained document grammar structurally correct documents entered 
output tagged document standard ascii format passed formatting system 
documents papers memoranda letters different syntactic structures regarded structured objects type document defining document class 
particular document instance specific document class 
database document class descriptions provides information structure document class conform concrete representations document generated 
class descriptions document types normally created document administrator expert user 
compiler class generator provided rita new document types defined existing types extended support additional tag definitions concrete representations 
structural description syntax document class consists rules defines regular language see example complete set rules extended context free grammar 
example grammar simple document class illustrated 
rule defines object class composite object classes composed object classes basic object classes text decomposed constituents 
basic object possibly empty string non structural data associated referred content object 
content composite object content constituents 
cowan mackie de smit user input interactive batch rita target formatter final document techdoc body appendices 
rita system title author date title text author text date text paragraph class structure class appearance document class database concrete representation optional layout style information body section section heading paragraph section heading text paragraph text paragraph paragraph appendices section text 
structure definition simple technical document rita manipulating structured documents different composite objects may similar identical components appearance screen print may 
example document conforming grammar contains identical definitions 
concrete representations objects may differ 
rendering system annotate positive integer display show preceded bullet 
objects may optional attributes 
attributes characteristics objects composition content may include objects 
attributes allow non hierarchical relationships cross implemented 
concrete representation semantics object defined sequences instructions executed object encountered 
different sets instructions produce different representations document 
representations generated incrementally display document screen interactive editing document 
representations may input existing batch formatters tex lat gml direct viewing printing user 
detail specifying generating concrete representations provided section document semantics user view rita rita designed users ranging novice expert presents features appeal broad group 
features include dynamic user interface ability edit text structure document creation revision 
designers tried apply law accidental key produce results user easily recover 
aspects rita described subsections 
user interface user interface features rita seen examining shows motif version 
application window divided smaller areas menu bar top screen text window structure window 
text structure windows middle application window text window right vertical line structure window left 
current versions rita text window provides see get display text contained document 
approach allow support display technologies ranging mono font character flexible bitmap displays 
screen exactly match final appearance document benefits wide range users worth relatively small degradation appearance 
depending display technology rita supports fonts presentation lists numbered section headings footnotes 
verbose mode allows footnotes exposed hidden appearance formatted text closer wysiwyg 
labels representing citations figures sections displayed line 
rita user positions cursor text window starts typing 
cursor text window word wrap text editing features word processors microsoft word available 
structure window left vertical cowan mackie de smit 
user interface rita text window line contains fairly readable version sgml tags 
tags indented indicate part enclosing structure indicated list list representing ordered list 
menu bar top screen number words descriptors represents pull menu 
menu contains commands relevant specific descriptor 
need user memorize commands commands activated power users function keys 
file commands activated file menu allow storage retrieval text file browsing 
context sensitive help available topics including tags 
help text extended simple editor 
operations typing text done mouse keyboard includes operating menus positioning cursor marking text scrolling documents 
text editing text editing mode cursor placed text window keyboard mouse text automatically reformatted type 
cursor configured sizes character word sentence block keyboard mouse extended multiple sizes 
text marked cursor operations cut copy paste performed marked text 
commands search text replace substitute text available 
commands case sensitive insensitive replace items globally time 
search command search tags structure window 
facilities check spelling words text window supported word dictionary 
suggests corrections allows user create multiple user dictionaries augmented checking phase 
user dictionaries saved discarded single session 
rita manipulating structured documents structure editing rita far appears functional characteristics comprehensive word processor 
real power system apparent user allowed insert delete change structure document 
structure usually modified cursor left hand structure window circumstances structure changed cursor text window 
cursor shown structure window placed mouse enter key 
rita initialized standard document class new document class descriptions loaded activating command file menu 
different document class type template constrains rita user create document structures elements syntactically legal document type 
user wishes enter new document element cursor placed tag structure window structure menu appears bottom screen shown 
elements legally inserted cursor shown structure menu 
item structure menu chosen mouse single keystroke 
necessary know tags specific document type 
extensive help available describe tags 

user interface rita structure window structure document changes produced 
example ordered list shown changed lists simple list unordered list rita allows user transform tags forms 
change tag user selects tag structure window chooses transform edit menu 
action causes transform menu appear bottom screen containing valid transformations 
text marked cursor transformed create entities highlighted phrases 
structures marked cursor structures accompanying text cut pasted written file merged document 
cowan mackie de smit mark structure cursor placed structure tag extended mark document structure desired 
structure marked way cursor automatically extended include subsidiary parts ordered list items shown 
presentation document elements possible choices examined ensuring user rita add legal document elements syntax checking seen syntax directed programming editors cornell program synthesizer place holders kimura menus 
syntax checking approach rejected required user knowledge tagging markup language approach consistent type user served 
place holders create form menu button middle document excluded generating place holders document types moderately complex grammars abcd xyz cause visual confusion 
simple place holders useful reminder user certain vital documents elements address letter missing 
menus shown chosen placed position screen conflict area 
menus active cursor structure window transformation progress 
text entered menus absent 
course providing menus contain syntactically correct tags means menus computed dynamically function cursor position structure text window 
need dynamic menu construction led examination menu construction algorithms described menu construction editing complex documents documents simple complex number criteria including set tags possible attributes modifiers tags low level formatting commands 
simple documents usually subset available tags document type attributes formatting commands 
documents simple complex basic structures content 
legal tags included structure menu novice find number choices menu confusing 
reasons extra complex tags hidden user needed 
structure editor provides simple terse complex verbose mode user toggle 
verbose mode valid tags appear structure menu 
verbose mode explodes material appearing structure text windows 
verbose mode tags attached entities single words appear structure window corresponding text elements separate lines text window 
tags attached small items single words phrases hidden terse mode disrupt flow text 
rita manipulating structured documents attributes modifiers tags tag set 
rita allows insertion modification attributes tag accepts 
times tag set adequate low level formatting commands introduced document 
document grammar contain process specific tag allows insertion formatting commands 
document grammar uses user embed tag allow rita accept document may completely conform current grammar 
user embed tag brackets structural components parse correctly previously stored document produced conventional editor read rita 
text associated illegal structure incorporated correct structure editing commands rita 
facility allow transformation incorrect document correct small number editing steps 
rita support inclusion tables equations structured graphics editing objects completely implemented 
current proceeding improving editing capabilities allowing user access tool appropriate task document 
implementing user view rita contains algorithms data structures manage internal representation text structure external appearance 
section specific algorithms data structures effect performance user view document user ability manipulate document 
rita editor activated automatically provided document grammar defines structure class documents 
rita class compilers generators accept rita document class descriptions defined sgml document type definition dtd 
accompanying document grammar set rules defining appearance class documents display device user creates document instance class selecting structural components typing text 
document complete stored disk ascii text embedded gml sgml tags internal format 
provides storage efficiency minimizes confusion users representation document stored disk 
case gml file ascii text layout document type provided input text formatting program 
corresponding layout language sgml document rita sgml tags converted document input existing text formatting system lat ex 
commercial systems implement non standard layout mechanism international standard draft stage 
input rita come sources entire file read subsequent editing modification keystrokes keyboard user entering structure text 
rita supports virtual memory model length document handled 
complete file read rita acts manner similar document formatter batch compiler 
text structure entered default set simple display rules sgml dtds 
choice gml sgml tags governed document grammar loaded rita 
cowan mackie de smit document keyboard rita operate incremental compilation mode input keyboard entered document performance constraints allow document parsed time structure modified 
approach incrementally processing document feedback screen presentation parallels method described programming languages 
representing user view structured documents tree appropriate data structure referencing structure text document 
node tree represents object class document grammar 
edges tree connect node representing object class left hand side rule constituent object classes right hand side 
representation convenient manipulating structure verifying document obeys syntax rules language 
implementors early version rita observed structure documents primarily hierarchical tree underlying data structure node tree contained pointer block text 
choice data structure directed implementors creation inappropriate interface quite confusing user 
moving structures adjacent screen implied complex tree traversal structures related shared common ancestor 
editing operations appeared simple straightforward user perspective involve fairly complex keyboard sequences nature tree processing operations 
users understand rules governing structure tagged document tend view document linear progression text hierarchy document elements 
solve problem additional data structure called field list introduced 
field list contains pointers text document pointers appropriate nodes document tree 
field list sequential linked list order text screen maps internal view document tree linear view user 
field list primary data structure text manipulation algorithms rita tree structure manipulation algorithms 
rita data structures commonly manipulating text programs 
field list descriptors pointers line list contains actual text common way representing documents word processors 
tree common way representing program source compilers 
presenting document structure user rita create menus dynamically efficiently user edits document structure minimal perceived delay 
details menu creation editing described subsequent sections 
document class description context free grammar composed number object classes 
object class defined finite state automaton fsa complete set fsas provides equivalent definition document class rita manipulating structured documents description 
document class descriptions compiled class generator set tables loaded rita 
tables consist set transitions fsas formatting programs initial final states transition fsas 
rita set tables support editing document structure presentation document user 
rita responsive user requests modification document structure achieved incremental compilation techniques 
node document tree contains state parent fsa allows automaton restarted point document processing predecessors specific object 
incremental capability number different ways key providing fast response 
steps required specific point document structure create menu contains legal document elements 
list potential document elements created transitions fsa 
second tested see inclusion causes automaton achieve defined state represents valid insertion point document 
algorithm described fully section menu construction document element selected menu element inserted document tree action causes parent fsa move new state 
mentioned earlier section state stored tree node representing new element 
insertion new element may cause states stored nodes representing subsequent siblings changed 
fsas determine objects added location document check correctness composite objects legality structural editing operations 
correctness composite object document checked executing automaton object object children input symbols 
input symbols read automaton final state object correct 
fsas incrementally formatting document screen 
field list record restart points document restart point position new line forced formatting programs 
keystroke extent reformatting limited maximum range previous line restart point 
change structure document fsas executed 
text processed formatting programs passed word wrap routine performs final format operations 
menu construction philosophy rita provide user options consistent document grammar mistakes prevented 
creation menu contains legal document elements calculated dynamically finite automaton constructed object class parent current object 
suppose correct object class currently consists sequence objects am cursor currently ak implies cursor called phantom child case ak null sequence 
wish construct menu containing names classes objects may inserted immediately ak violating document class syntax 
violate cowan mackie de smit document class syntax words legal menu item partial object class defined am causes finite automaton reach state possible reach final state 
state called legal state 
legal menu item transition function sequence objects bak am undefined leaves automaton state final state reached 
formally partial transition function finite automaton accepts members object class set states fsa input alphabet 
extend usual way see example writing am am am assume automaton state sk having read symbol ak 
objects appear creation menu sk bak am legal state words transition function sequence bak am defined 
set calculated straightforward manner executing automaton starting state sk bak am input string different values values considered label transitions sk 
assume function construct menu parameters correspond symbols exists returns creation menu set just described set acceptable bs 
example defined dl th 
dh 
dl interpreted class definition lists consists optional headings th dh term definitions list 
sample definition list illustrated shows finite automaton defines class 
object class tht th current object sk 
construct menu returns set tg dh legal states 
considered transitions possible state 
note current state automaton stored part document corresponds state sk stored ak necessary re start assumed automaton deterministic 
case similar approach taken non deterministic automaton 
rita manipulating structured documents terms definitions term block text called definition describing term listed immediately 
term term group terms may share definition 
term terms group definition 
term term th th 
sample definition list dh dh 
dfa accepting definition lists dh dh 
dfa accepting different kind definition list cowan mackie de smit automaton start state time started state sk input bak am 
necessary scan bak am scanning terminated soon aj read corresponding stored state current scan state 
course necessary state information saved document updated document structure changes addition deletion object 
note wrong include symbols label transitions sk creation menu words sk defined example consider class dl th 
dh 
slight modification previous example 
illustrates dfa class 
assume object instance class consists sequence tht identical previous example 
criterion determine symbols creation menu th current object sk menu 
incorrect invalidates transition state grammar allow adjacent ts 
general symbol causes invalidation may away current object necessarily just successor 
incomplete documents menu construction method described earlier allows user create documents tail incomplete required objects form tail right objects document missing 
example specific instance document component title author date 
appear document sub appearing 
gml version rita uses menu construction algorithm produce menu document component 
menu shows sub components required 
example object title initial menu inserted author appear 
date inserted optional element 
visible menu 
course description assumes cursor positioned correctly structure window 
rita accept document stages warn user document incomplete document stored 
tail incompleteness allows documents created front back sequence concluded serious deficiency rita 
experience gml association american publishers sgml document type definitions provides evidence contrary 
immediate children root component document components gml document grammars aap definition optional 
creation document fact tail incomplete quite uncommon rita manipulating structured documents users produce initial document contains mandatory components specified document grammar 
users produce tail incomplete document appropriate validate document parser formatting archiving 
tail incomplete documents appear problem gml aap definitions may case sgml general 
important aspect sgml meta language allow organizations freedom construct grammars associated tags document types 
flexibility means tags created language construct including single characters document grammars may contain numerous required objects 
consider sgml document grammar may require body letter receiver address document 
user specific grammar may want create body letter having concerned receiver address 
class grammar requires editor supported tail incompleteness force user create address 
words tail incompleteness allow user create objects temporal order 
problem occurs existing document modified 
editing necessary syntax rules violated relaxed order perform edit effectively 
example suppose object defined instance class created composition xi user decide thata deleted replaced easy convenient way accomplishing allowing tail incompleteness 
number options exist handling problem 
define transformation rules elaborate consider example case non isomorphic composite objects remove grammar rules temporarily editing incorrect document 
grammar rules removed relaxed entire document difficult impose document minor grammatical errors simple errors may cascade 
course incorrect portion document moved non syntax checking environment editing re insertion syntax checking environment see copying moving subsection 
relaxing rules portion document isolation impact errors may significantly reduced 
overcome potential problems sgml grammars developed methods provide manipulation documents obey different completeness criterion subsequence incompleteness 
document subsequence incomplete objects document form subsequence legal sequence required objects 
words document turned complete document sequence insertions 
document subsequence incomplete viewed partially correct term 
supporting subsequence incomplete documents enables user create sibling document components time order 
allows flexibility existing characters words seen bun subsequences characters word subsequence 
cowan mackie de smit document edited objects moved removed causing difficulties syntax checker 
support subsequence incompleteness incorporated rita tested successfully prototype 
discussion follows shows algorithms described readily extended allow form incompleteness 
subsequence incomplete documents supported modifying appropriate times finite state automaton constructed object class 
automata modified adding null transitions transition function automaton set states input alphabet transition added automaton 
equivalent relaxing class grammar structure symbols optional 
unfortunately supporting subsequence incompleteness introduces potential complication user 
user create document subsequence incomplete know complete especially non expert user unfamiliar class grammar user probably aware grammar 
approaches handling subsequence incomplete documents user simply allowed create subsequence incomplete documents ii validation routine verifies document complete iii menu marking algorithm indicate user reasonable way document complete 
approach merit discussed section 
allowing subsequence incomplete documents implies user rita create attempt format incorrect documents 
approach counter goals rita allow casual user create correct documents minimal knowledge tagging languages 
allowing user attempt format incorrect documents introduce level complexity avoided type user 
running validation routine highlight areas document subsequence incomplete give indication correct structure inserted 
user required run validation routine document saved choose ignore results 
similarly user indication document creation document subsequence incomplete menu shows legal structural insertions marks minimal set complete document 
approach requires user survey entire document determine structures produce menus marked items 
probably best approach combines validation marked menus 
validator structure subsequence incomplete provide user menu indicating minimal insertions required allow user add appropriate structures 
course process dynamic user insert structure leave document incomplete different way menu change reflect fact 
validation routine traditional parser discussed 
brief description menu marking algorithm paragraphs 
complete details approach described 
user indication sub objects mandatory object complete correct 
trivial problem rita manipulating structured documents may different combinations mandatory sub objects complete object 
example consider object class cd 
subsequence incomplete instance contain acd complete object 
approach solve problem system mark items menu complete parent current object number insertions 
required objects marked 
steps marking process 
construct finite automaton call provides possible legal ways completing incomplete object 

determine shortest path initial final state 

set shortest paths calculated step mark appropriate items creation menu 
allowing user view alternative methods completing parent current object possible modification menu marking algorithm just 
example algorithm compute shortest paths paths longer shortest paths longer 
number paths default parameter computed current grammar 
case user toggle menus markings various path lengths looking appropriate document completion strategy 
structure editing creating document requires insertion new text structure modification components document changed 
support editing text straightforward 
editing structure document create complications particularly document conforms complex sgml grammar 
editor document wants perform number operations including deletion structures moving copying structures transformations structure similar structure splitting joining nesting extracting structures 
section describe finite automaton approach allows types editing operations performed flexible manner maintaining partial correctness 
description brief detailed algorithms see 
operations incorporated current version rita 
implementation methods part ongoing project text processing systems 
deletion deletion straightforward deleting object position leaves subsequence incomplete document 
cowan mackie de smit copying moving patch area provided grammar rules relaxed completely 
deleted document currently edited automatically copied patch area user copy place document 
inserting content patch area document system ensures patch content allowed new position rules subsequence incompleteness 
copy performed user directed offending object patch area 
user allowed edit patch area 
difference editing patch area editing normal document system uses standard non restrictive class grammar patch area 
syntax grammar patch ob ob ob object classes basic composite defined current document class grammar 
furthermore syntax composite object class re written ob ob ob result combination composition object accepted patch area 
patch area ability edit provides mechanism change affected provided document grammar 
time document proper kept partially correct 
transformations current implementation allows limited way class object changed class similar structure 
algorithm mentioned provides limited form transformation extensive discussion transformations see 
menu constructed lists valid classes object may transformed 
algorithm uses notational conventions ap current object change class class class parent ap menu construct menu class ap ap am bn children ap class class menu test correct class bn false remove class menu endif endfor return menu 
algorithm transform class object rita manipulating structured documents ap ap am current object siblings 
set constructed classes objects may take current object place deleted 
set reduced removing members set children current object form legal subsequence 
function test correct reduction tests sequence symbols bn accepted automaton objects class resulting set contains elements appear transformation menu 
split join necessary split objects chapter may need split chapters 
accomplished split operator user positions cursor point object parent object split section chapter split 
parent current object split current object creating new objects class parent 
siblings left front current object children leftmost new objects current object siblings right rear children new object 
second new object new current object 
command executed partially correct document obtained 
test correct ensure split performed result legal subsequence incomplete document 
join inverse operation joins current object left sibling children 
user prompted creation menu indicate class new parent operation possible 
nest extract possible replace sequence objects descendants single new object parent indicated sequence 
example sequence paragraphs may grouped subsection 
achieved nest function 
user prompted creation menu indicate class new parent operation possible 
inverse function extract current composite object cursor positioned marking subtree document replaced children allowed subsequence incomplete rules 
document semantics section describe set rules defining appearance class documents 
mentioned system overview different concrete representations document object produced representation generated unparsing scheme 
unparsing scheme set unparsing methods 
method describes way unparsing class objects class nodes parse tree 
method may single class scheme catering layouts object class different contexts list items different types lists 
term fact concrete representationof unparsing parse tree represents document 
cowan mackie de smit unparsing method composed possibly empty set variables set unparsing actions 
unparsing action ordered pair transition program associates unparsing program particular transition finite automaton constructed extended regular expressions defines class syntax 
unparsing program sequence unparsing instructions executed particular transition execution finite automaton unparsing instructions produce output change value variables accessible method 
shows semantic definition objects document class 
semantic definition part enclosed square brackets defines schemes produce concrete representations forms suitable display terminal input gml formatter 
display scheme methods defined ordered unordered 
methods named standard actions method listed form example transition program ordered actions method display scheme 
indicates encountered variable associated incremented unparsed method display scheme 
unparsing methods basic objects initial final unparsing actions 
implied text associated basic object generated emitted unparsing actions object 
unparsing scheme provided class description generates concrete representation display screen 
creator unparsing schemes aware siblings may document preparation 
fortunately appearance siblings seldom interdependent appearance siblings typically controlled parent exist siblings created 
instructions allowed unparsing programs include adjusting margins line length conditional statements emitting outputting string constants values attributes emitting amount vertical space toggling word wrap centering left justification right justification underlining testing empty objects unparsing constituent object specified method 
current implementation supports limited set variables object document 
progress extend provide automaton assumed transitions executed leads start state executed start automaton leads final state imaginary truly final state 
special name method different name 
requirement different methods unparsing object single scheme unique names 
rita manipulating structured documents display method standard initial lm vs ordered final vs gml method standard initial nl ol attrs standard final nl eol paragraph paragraph display method ordered initial nl 
paragraph plain standard endif standard final method unordered initial nl paragraph plain standard endif standard final gml method standard initial nl li attrs paragraph standard final 
sample class definition 
unparsing schemes generate concrete representation display gml formatter cowan mackie de smit attributes associated object global unparsing methods object class 
unparsing programs attributes read variables 
current support attributes allows limited access unparsing programs 
method parameters variables passed method invoked unparsing program object 
method parameters call value parameters programming language 
local method variables variables local scope method similar local variables procedure 
additional unparsing instructions implemented include assignment variables string concatenation obtaining values variables includes value attribute object pointed pointer variable emitting values variables converted strings necessary emitting current date font changes testing object th having attribute value unparsing arbitrary subtree document tree usually determined pointer attribute specified method 
user experience rita system extensively number organizations produce various types documents 
section describes specific experiences authors able observe 
observations form brief anecdotes support claims ease increased productivity mentioned 
secretary research group experience word processors gml experience asked produce page manual manuscript contained handwritten text 
document structure implied paragraph headings sections titles explicit tags text 
documentation available rita secretary minute demonstration 
exception secretary entered document correctly time error easily fixed 
appears rita intuitive tool allows novices effective text formatters 
large offered test rita real world projects 
project involved word processing group responsibility producing letters contracts manuals document composition facility 
particular group knew gml tag set computer experts 
member group indicated rita valuable tool longer remember subtle details gml tag set variety document types 
able observe form document prepared removing need formatting runs mainframe just ensure correctness tag set appearance 
actual measurements manager department reported increase productivity felt correct documents produced time period 
initial successes rita word processing group prompted test group senior programmer analysts obviously highly computer literate 
members group produced mail reports manuals rita manipulating structured documents document preparation document composition facility spf editor 
categorized casual expert users knowledgeable gml word processing group 
experience quite positive group want return computers rita software experiment 
rita helped produce correct documents time minimal knowledge gml tag set 
software produced comprehensive software system required large scale documentation effort 
specifically multiple section manuals pages text diagrams prepared authors 
authors manuals varying degrees experience gml ranging expert novice 
majority authors rita structural errors produced sections merged final versions manuals 
measure success indicated fact authors rita want return old methods producing tagged documents 
experience successful group adopted rita production tool 
related syntax directed editing techniques programming language oriented editors generators system cornell program synthesizer synthesizer generator dose large degree applicable document editors authors mention document editors constructed go detail 
programming languages generally speaking explicitly structured documents result editors generated programming languages tend rigid documents 
furthermore incremental parsing recognizer approach taken syntax directed editors easy adapt documents documents ambiguous grammars 
example grammar possible distinguish paragraph portion paragraph part 
important aspect syntax directed editing system trade amount checking done ensure correct structure flexibility afforded user editing structure 
approach templates place holders 
parts document required optional missing represented place holders ghost windows blank slots kimura buttons furuta 
penalty paid extra storage screen space required place holders 
approach allow free entry text markup keywords indicating objects re parse input appropriate times 
approach works programming languages suitable documents re introduces dilemma user having know formatting language clear literature document systems mentioned place holders provide flexible editing environment uses syntax directed approach making allowance partial documents 
rita differs commercially available sgml editors write author editor ways 
tags rita separate structure window tags editors embedded text may exposed hidden 
cowan mackie de smit rita dynamically produces menu user traverses structure window moves insert transform mode 
author editor produces menus insert transform mode structural checking enabled 
automatic menu generation rita easier enter correct documents author editor user continually select insert mode determine structures chosen point document 
contains description rita editor user interface structured documents containing tags markup languages sgml 
rita provided grammar particular document class document class database constrains user allowing construction documents syntactically correct 
rita addresses problem partially correct documents situation occur documents edited 
dynamic user interface presents menus correct tags user constructs edits document 
screen layout document class grammar provide wysiwyg display document prepared 
number partially substantiated observation drawn experiences rita 
rita useful wide range users ranging novice casual user expert 
user interface certainly appropriate novice operate rita instruction user manual 
structured editor user interface rita contribute significantly increased productivity user need minimal knowledge tag set document structure correct position structures document 
segmenting document creation parts structure content layout minimizes amount typographic knowledge required individual user 
combination structured editor rita text formatter separates structure content layout provides productive document preparation environment 
grateful wood reading offering helpful comments 
research described partially supported natural sciences engineering research council canada foundation research development south africa 

lamport lat document preparation system addison wesley reading mass 

ibm white plains new york document composition facility general markup language starter set user guide th edition august 

department computing services university waterloo waterloo ontario canada waterloo script gml user guide april 

mckee welch gml tutorial publications limited waterloo ontario canada rd edition 

goldfarb sgml handbook oxford university press new york 
rita manipulating structured documents 
de smit formatter independent structured document preparation system phd thesis dept computer science univ waterloo waterloo ontario canada april 
research report cs 

de smit cowan combining interactive document editing batch document formatting 
van vliet pp 


cowan mackie experiences rita research report cs dept computer science univ waterloo waterloo ontario canada 

mackie waterloo rita tutorial publications limited waterloo ontario canada th edition 

chamberlin document convergence interactive formatting system ibm journal research development january 

chamberlin paris defining wysiwyg processing 
van vliet pp 


chamberlin paris wade extensible system editing documents mixed type proc 
st hawaii int 
conf 
system sciences pp 
washington dc april 
ieee computer society press 

chen harrison multiple representation document development computer january 

furuta andre interactively editing structured documents electronic publishing origination dissemination design april 

walker supporting document development concordia computer january 

hammer implementation etude integrated interactive document production system proc 
acm sigplan symp 
text manipulation sigplan notices june 

morris see get 
description publishing system proc 
second int 
conf 
text processing systems ii ed 
miller pp 

boole press october 

allen nix perlis pen hierarchical document editor proc 
acm sigplan symp 
text manipulation sigplan notices june 

king overview document preparation system 
van vliet pp 


interactive system structured document manipulation 
van vliet pp 


toronto canada author editor user manual st edition april 

yard software systems uk write sgml editor 

kimura structure editor document objects ieee trans 
software engineering se march 

van sgml standard language text description proc 
second int 
conf 
text processing systems ii ed miller pp 

boole press october 

formatting structured documents batch versus interactive 
van vliet pp 


furuta integrated exact representation editor formatter 
van vliet pp 


waterloo rita document class generator publications limited waterloo ontario 

wood theory computation john wiley new york 

knuth addison wesley reading mass 

troff user manual research report cs bell laboratories murray hill new jersey october 

foley van dam feiner hughes computer graphics principles practice systems programming series addison wesley nd edition 

open software foundation osf motif user guide 
cowan mackie de smit 
microsoft redmond washington microsoft word 

teitelbaum reps cornell program synthesizer syntax directed programming environment comm 
acm september 

international organization standardization new york document style semantics specification language dsssl iso iec dis 

bhatti incremental execution environment sigplan notices april 

lomet formalization transition diagram systems journal acm 

hopcroft ullman automata theory languages computation addison wesley reading mass 

association american publishers electronic manuscript project standard electronic markup washington dc version electronic manuscript series edition november 

de smit cowan manipulating partial documents syntax directed environment research report cs dept computer science univ waterloo waterloo ontario canada january 

furuta stotts specifying structured document transformations van vliet pp 


reps teitelbaum synthesizer generator proc 
acm sigsoft sigplan software engineering symp 
practical software development environment sigplan notices may 

medina mora syntax directed editing integrated programming environments phd thesis dept computer science carnegie mellon university pittsburg pennsylvania 

thomas reps tim teitelbaum synthesizer generator system constructing language editors springer verlag new york rd edition 

feiler kaiser display oriented structure manipulation multi purpose system ieee computer society seventh international computer software applications conference compsac pp 
november 

feiler interactive prototyping environment language design nineteenth annual hawaii international conference system sciences volume ii pp 


campbell saga project system software development sigplan notices may 

gansner language editor interactive programming environment compcon ieee computer society spring 

proc 
int 
conf 
text processing document manipulation ed cambridge university press april 

document manipulation typography ed van vliet cambridge university press april 
