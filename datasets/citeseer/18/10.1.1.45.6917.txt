prism ii compiler architecture agarwal lee smith lam athanas silverman ghosh laboratory engineering man machine systems brown university providence ri discusses architecture compiler general purpose metamorphic computing platform called prism ii prism ii improves performance computationally intensive tasks augmenting functionality core processor new instructions match characteristics targeted applications 
essence prism general purpose hardware platform behaves application specific platform 
methods hardware synthesis vhdl designer blox synthesis results compared 
general purpose computers designed primary goal providing acceptable performance wide variety tasks providing high performance specific tasks 
performance machines ultimately depends capabilities processing platform match computational characteristics applications 
early improving computational performance focused rewriting microcode suit specific applications 
users monitor execution application compose new instructions enhance performance 
area research mid centered dynamically changing instruction set compile time reduce bus traffic main memory 
example application specific instruction polynomial evaluation instruction available dec vax architecture 
instruction took arguments pointer table coefficients described polynomial value independent currently virginia polytechnic institute state university principally funded nsf mip mip 
variable degree polynomial 
instructions effective reducing number instruction fetches decodes 
time main memory order magnitude slower microcode memory 
reducing main memory accesses essential performance 
multicycle instruction sets large computers began loose appeal late research particularly ibm started reveal inefficiencies microcode philosophy 
observations instruction set usage suggested small subset instructions utilized high level language compilers 
due fact difficult problem recognize complex machine instruction highlevel language program 
addition advancements semiconductor memory instruction pipelines bridged performance gap main memory control store memory 
eliminating complex largely unused instructions room implement efficient hard wired control unit 
high performance processors today hard wired control scheme instruction execution 
strategy provides high level performance amount silicon available removes flexibility underlying hardware 
contrast earlier microcode philosophy users find structuring applications fit underlying architecture 
advancements compiler technology hand tuning computation intensive application widely practiced 
application requires computational power achieved generalpurpose platform forced applicationspecific computer architecture 
applicationspecific computers fundamental hardware capabilities machine designed particular class algorithms 
example digital signal processor application specific processor designed specifically provide fast 
tasks suited particular application specific machine perform execution performance tasks outside targeted class usually poor 
cost dollars development time custom vlsi fallen rapidly application specific processors expensive alternative applications 
characteristic common nearly applications computationally intensive tend spend execution time small kernel executable code 
efforts improve performance applications best spent kernels rarely executed sections 
solution proposed kernels divided complex instructions executed directly hardware 
solutions past hardware execute instructions reconfigurable 
performance multiple types applications adversely affected 
adaptive metamorphic architecture reaps performance benefits applicationspecific architectures tuning hardware individual tasks general purpose nature system suitable diverse tasks 
presents architecture compiler general purpose metamorphic computing platform called prism acronym processor reconfiguration instruction set metamorphosis 
goal prism ii improve performance computationally intensive tasks information extracted program compilation synthesize new operations augment functionality core processor 
section describes prism system 
prism ii compiler architecture section 
section discusses results obtained running compiler example programs section contains summary topics covered 
prism prism proof concept system developed demonstrate viability incorporating instruction set metamorphosis general purpose machine 
prism consists configuration compiler reconfigurable hardware platform 
configuration compiler shown special compiler accepts high level language program input produces hardware image software image 
hardware image consists set physical specifications program reconfigurable platform 
specifically compiler transforms language control computation constructs structural description mapped xilinx fpgas 
technique create hardware image analogous synthesis silicon compilers 
software image similar function executable image produced conventional compiler includes support accessing reconfigurable platform program execution 
prism hardware platform shown attempt reconfigurable platform intentionally kept simple demonstrate utility architecture 
prism consisted existing processor board armstrong processing node mhz processor second board consisted primarily xilinx fpgas 
boards interconnected bit bus armstrong node coprocessor interface access second xilinx board 
simplistic design configuration provided excellent means testing metamorphic architecture concept 
prism able measure architecture performance relatively simple algorithms 
results prism system demonstrated significant speed possible certain classes routines 
prism ii new system construction prism ii designed address hardware software deficiencies prism goals ffl synthesize functions derived language specification 
prism supports smaller subset shown 
program source configuration compiler software image hardware image reconfigurable hardware platform overview prism configuration compiler processing platform 
shown dotted lines identified portions input specification transformed equivalent hardware structures 
data buffers data data select select select select xilinx xc field programmable gate arrays armstrong expansion bus reconfigurable hardware platform armstrong processing node data bus bits armstrong armstrong ii computation engine address control bus high speed serial channels prism core processor prism hardware platform 
ffl support synthesis sequential logic execution loops loop counts unknown compile time 
prism required fixed loop counts logic combinational 
ffl develop new system level architecture provides efficient communication reconfigurable hardware host processor 
tighter integration reduce data movement penalty host processor adaptive hardware 
prism inefficient respect 
ffl provide adaptive architecture powerful real world applications 
proof concept system 
ffl sufficiently cost effective multiprocessor systems 
sections describe operation prism ii 
new configuration compiler described followed overview new hardware 
int char short long fixed loop count complete syntax prism prism ii variable loop count switch case break continue double float struct union goto supported subsets syntax 
configuration compiler diagram prism ii configuration compiler shown 
configuration compiler consists main components 
parser optimizer hardware synthesizer 
parts compiler currently operational automatic 
reported results taken simulation model system 
parsing parsing optimization stages gnu compiler gcc front configuration compiler 
gcc chosen ffl optimizing compiler ffl source code available ffl internal structure documented ffl time saved recoding standard optimizations 
gcc provides standard compiler optimizations constant folding common sub expression elimination dead code elimination 
optimization extensively strength reduction process decomposing complex operation series simpler ones 
example constant multiplied variable operation broken series shifts adds maps hardware easily original multiplication 
internal representation gcc called rtl variation register transfer language 
register transfer language rtl gcc front parsing standard optimizations program source hardware images xilinx tools ppr simulation simulation blox netlist generation program flow graph generation vhdl generation vhdl designer prism ii configuration compiler 
resultant hardware image may derived separate implementations 
parsed program represented doubly linked list rtl statements describe operations add jump move 
gcc written easily ported different processors provides machine description file allows target architecture described 
machine description file defines architecture load store data movement large register set 
large register set reduces number main memory accesses simplifies synthesis processes 
rtl representation control flow data flow graphs derived standard data flow analysis algorithms 
graphs synthesize hardware explained section 
example function compiled prism ii configuration compiler shown 
example decodes bit hamming code returns corresponding bit word 
hamming codes error detection correction transmitting binary data 
particular choice common bit errors may corrected 
function decodes bit hamming code returns corresponding bit word 
unsigned char unsigned char word unsigned char syndrome bit bit bit unsigned char bit bit bit bit bit word bit word 
bit word 
bit word 
bit word 
bit word 
bit word 
syndrome bit bit bit bit syndrome syndrome bit bit bit bit syndrome syndrome bit bit bit bit switch syndrome case word break case word break case word break case word break return word xf example function 
control flow graph program shown expressed terms basic blocks shows possible execution paths 
basic blocks regions code execution sequential single entry single exit points 
data flow graph shown expose essential data dependencies function 
note data flow graph system pure data dependency graph control information introduced multiplexers 
boxes labeled mux multiplexers provide merging multiple execution paths function 
different execution paths may define variable definitions selected operation node data flow graph completed 
multiplexer inputs select signals obtained control data flow analysis program 
basic block basic block basic block basic block basic block basic block basic block basic block basic block basic block basic block basic block control flow graph example function 
synthesis decision existing synthesis tools order save development time 
tools readily available vhdl designer blox 
decide synthesis tool compiler methods tried 
incorporating vhdl designer compiler easy task 
incorporating blox difficult justified allow control synthesis task 
vhdl designer sequential vhdl module created describes behavior optimized function 
accomplished stepping rtl list produced gcc generating appropriate vhdl representation operation 
vhdl synthesizer vhdl designer creates hardware image 
method deficient direct control synthesis process 
commercial tools reg xor xor xor xor xor xor ior xor xor xor ior eq gt eq eq eq xor xor xor xor mux mux mux mux mux data flow graph example function 
powerful usually include large set optimizations 
second method blox netlist file generated describes architecture optimized function logic block level 
netlist file synthesized hardware standard xilinx tools 
blox created xilinx provide high level method entering logic designs fpgas 
blox provides library msi lsi functions counters adders buses registers designer schematic entry 
blox software uses netlist file generated schematic file generate optimized representation design 
blox maps high level representation primitives partition place route software ppr 
advantage blox synthesizes hard macros 
hard macros actual clb configurations optimized speed area 
approach taken blox netlist file created parsing data flow graph 
node dfg operation constant 
nodes dfg map corresponding blox representation 
bit multiply function designed hand exception procedure 
hardware platform design prism ii hardware platform addresses major limitations prism limitation time required load unload adaptive elements 
prism required clock cycles ns length access adaptive element 
prism ii architecture access adaptive element ns 
addition length data transfer prism bits 
size data transfers adaptive elements bits inputs bits outputs 
second limitation prism operation fit single fpga 
prism ii architecture allow operation span fpgas allowing larger operations synthesized partitioning data flow graph 
provide balance hardware software performance chose fast risc processor complement adaptive elements 
amd am processor clocked mhz provide mips performance 
addition processor built floating point unit 
synthesis support floating point operations important host processor capability 
shows system level architecture prism ii detailed explanation reconfigurable hardware follows 
data transferred fpgas form bit quantities hardware specification starts high level language 
xilinx fpga provides general purpose pins provides bit buses 
keeping form high level functions expected algorithms implemented prism ii high data fan inputs 
fan observed function calls take arguments return single result 
fanin observed logic systems result internal structures fpgas allow high logic fan 
final consideration affect connection network interaction host processor 
shows xilinx fpgas interconnection scheme 
utilizing data buffers various points connection network fpgas unison perform individual tasks 
fpgas working unison network structure implies data flow starts coprocessor interface falls bottom fpga 
note bus latch am mmu fpu timer cache boot rom burst mode memory controller interleaved dram bank interleaved dram bank timer comm pio data bus instruction bus ctrl addr ctrl address bus data bus status display reconfigurable array prism ii hardware platform 
structure adheres assumption high data fan 
global bus provides control signals shared fpgas providing global clocking functions transferring state information fpgas 
coprocessor interface am uses address data bus simultaneously transfer bits data 
fpga provided bit connection coprocessor interface support maximum data transfer rates 
connection scheme directly influenced number pins xilinx part 
plans xilinx family include doubling amount usable logic significant increase number pins 
fpgas available interconnection scheme scaled accordingly 
new pins dedicated global bus 
reconfigurable modules connected global bus 
results determine synthesis method example programs compiled vhdl designer blox 
numbers directly program names number input output bits respectively 
example programs coprocessor interface xilinx fpga xilinx fpga xilinx fpga indicates data buffer placement global bus data bus address bus data bus data bus address bus address bus prism ii fpga connection scheme 
ffl piece piecewise linear approximation function 
ffl dist hamming distance bit words 
ffl bit reversal function fft algorithm 
ffl logic performs possible logic functions inputs 
ffl ff finds bit bit word 
ffl code returns bit hamming code bit word 
synthesized program fits single xilinx xc pg fpga 
table shows clb requirements program reported partition place route utility 
maximum number clbs required program occurred piece required available clbs 
results show examples synthesis path better equal area requirements vhdl designer 
table shows execution times synthesized programs 
execution times vhdl designer blox calculated load prop unload load unload time required transfer data fpga ns prism ii system 
propagation time prop provided xilinx tool 
program indicates maximum performance prism ii system resulting compiled structure clb 
delays inside fpga program routing delays ns 
interesting note vhdl designer required clb dist delay slightly blox 
small decrease delay greatly offset increase number clb blox design 
execution times programs run am synthesis derived simulation sim 
total speed attained prism ii system calculated speed gamma execution time synthesis load prop unload shown table 
table shows performance improvements greater order magnitude programs 
results show larger programs synthesis path superior vhdl designer synthesis path speed area measures 
smaller programs methods perform similarly 
number clb vhdl designer blox piece dist logic ff code table clb requirements synthesis paths 
summary architecture compiler new general purpose metamorphic computing platform prism ii 
shown significant performance benefits achieved execution times ns vhdl designer blox amd piece dist logic ff code table execution times example programs 
speed vhdl designer blox piece dist logic ff code table speed attained methods synthesis 
computationally intensive tasks augmenting functionality core processor newly synthesized operations match computational characteristics application 
new operations automatically synthesized reconfigurable hardware platform allowing reuse platform different applications 
methods synthesizing hardware vhdl designer blox 
results showed structures generated blox gave better speed area performance larger programs 
smaller programs methods gave similar results 

foundations microprogramming architecture software applications 
academic press new york ny 
silverman 
attached processor speech 
proceedings icassp 
patterson 
case risc 
computer architecture news october 
silverman 
architectural approach speech recognition processors 
algorithmically specialized parallel computers pages 
academic press 
hennessy patterson 
computer architecture quantitative approach 
morgan kaufmann publishers 
athanas silverman 
processor reconfiguration instruction set metamorphosis architecture compiler 
ieee computer march 
xilinx san jose california 
programmable gate arrays users book 
gajski 
silicon compilation 
addison wesley reading massachusetts 
silverman 
system application software armstrong multiprocessor 
ieee computer june 
free software foundation cambridge massachusetts 
porting gnu cc 
aho sethi ullman 
compilers 
principles techniques tools 
addison wesley reading massachusetts 
systems massachusetts 
vhdl user guide tutorial 
xilinx san jose california 
blox design tool user guide 
xilinx san jose california 
xact guide 
advanced micro devices am microprocessor user manual 
user manual 
austin texas 
toronto ontario 
bmc user application guide 
hans zima barbara chapman 
supercompilers parallel vector computers 
acm press new york new york 
