experience predicate abstraction das david dill park computer systems laboratory stanford university stanford ca riacs nasa ames research center moffett field ca 
reports experiences implemented prototype system verification predicate abstraction method graf saidi 
systems described language iterated guarded commands called gamma gamma simplified version protocol description language 
system libraries svc efficient decision procedure order logic cmu bdd library 
libraries increases scope problems handled predicate abstraction increased efficiency especially svc typically called thousands times 
verification system provides limited support quantifiers formulas 
system applied successfully nontrivial examples flash multiprocessor cache coherence protocol concurrent garbage collection algorithm 
verification garbage collector algorithm required proving properties simple graphs done predicate abstraction 
abstraction emerging key formal verification large designs especially designs finite state 
predicate abstraction described graf saidi provides means combining theorem proving model checking techniques automatically mapping unbounded system called concrete system finite state system called system 
states system correspond truth assignments set predicates 
user supply predicates properties proven 
system automatically model checks properties system defined predicates 
abstraction conservative meaning property shown hold system concrete version property holds concrete system property fails hold system may may hold concrete system 
implemented prototype system efficient verification invariants predicate abstraction discover far predicate abstraction take goal formal verification real systems 
results supported darpa nasa contract dabt nasa contract 
content necessarily reflect position policy government official endorsement inferred 
encouraging 
systems described language iterated guarded commands call gamma gamma simplified version protocol description language 
system libraries efficient decision procedure quantifier free order logic called svc cmu bdd library written david long 
libraries increases scope problems handled predicate abstraction increased efficiency especially svc typically called thousands times 
prototype verifier written common lisp libraries written called foreign function interface 
applied successfully nontrivial examples flash multiprocessor cache coherence protocol concurrent garbage collection algorithm 
verification discovering strategies effective tool important design tool 
quickly needed limited support quantifiers expressing properties unbounded numbers processes data 
garbage collection algorithm necessary prove properties recursive function 
interestingly recursive algorithms verified translating gamma gamma predicate abstraction 
detailed description programs written syntax gamma gamma logical formulas syntax svc 
benefits readability deemed outweigh possibility translation errors 
related derived graf saidi abstraction scheme 
original implementation represented state space set monomials monomial product boolean variables negated variables 
bdds usually represent boolean functions efficiently 
graf saidi sacrificed accuracy representing image monomial transition rule single monomial cover states image transition rule 
method restriction 
verifier accurate may require computation performed efficiently 
approach handling parameterized systems uses quantified formulas similar differs method 
linear systems equations deal state transitions 
basic idea state variable keeps track number processes state 
process moves value decremented incremented 
handled reasoning parameterized systems introducing formulas quantified replicated processes state variables 
similar proposed 
approach generating state graphs concrete rules 
advantage requiring fewer validity checks required constructing transitions 
abstracting rules may lose information concrete system unable prove invariant interest 
predicate abstraction section summarizes theory predicate abstraction implementation prototype verifier 
notation somewhat different graf saidi similar details computation successors set states recursive decomposition 
concrete descriptions previous area concrete system modeled collection iterated nondeterministic commands 
single global state variable represents complete state system 
multiple state variables represented making fields variable record type 
initial state concrete system generated assignment init set transition rules 
rule defines transition function maps states states input language guarded commands guards necessary transition functions defined leave state variables unchanged guards satisfied 
execution system sequence states init gamma arbitrary state gamma note gamma occur execution sequence transition function concrete state reachable appears execution sequence 
interested predicates state variables invariants meaning hold reachable state concrete system 
system defined concrete system set predicates oe oe oe state state space truth assignment indices set states finite 
predicates define abstraction function ff maps concrete states states 
particular ff oe 
state reachable abstraction reachable concrete state reachable state space check invariants 
user knows invariants wants prove invariants supplied predicates oe invariant may decomposed conjunction simpler properties 
true reachable states invariant proven 
addition bdd describing reachable state space converted invariant concrete state space described 
approximating reachable state space sets concrete states represented logical formulas 
states represented bdds regarded propositional initialization depends values state variables unconstrained allow nondeterministic choice start states 
initialization rule conveniently similar transition rules system 
formulas associating boolean variables bn truth values corresponding predicates 
concrete domain necessarily finite concrete state space represented order formulas 
set concrete states ff taken fff concretization function fl inverse image ff fl fq ff note sc fl ff 
propositional formula bdd variables representing set order formula representing fl computed substituting predicate oe approximation reachable state space system computed usual breadth symbolic traversal 
time algorithm bdd representing current reachable set 
initially formula represents abstraction initial states concrete system 
algorithm iteratively computes approximation set successors current reachable set 
iteration formula logical disjunction formula current reachable set formula successor set 
key step procedure find formula set successors 
bdd characterizes find bdd characterizing successors system 
sufficient compute successors contributed concrete transition function set successors union successors contributed individual functions 
formula initial states computed finding possible successors entire state space transition function init words finding formula successors true init 
successors computed method similar graf saidi recursive subdivision concrete state space 
step computes fl substitution described 
represents set states state assume transition function written order term name predicates oe characterize sets fq oe pre computed substituting term oe 
intuitively oe means predecessor state satisfy oe compute recursive case splitting bit formula ascending order bm oe bm oe true satisfiable false unsatisfiable formula boolean combination predicates oe 
set concrete states represented function computes logical formula representing set states ff 
splits parts conjoining oe oe called recursively compute ff ff 
oe assumed true false equivalent values 
important optimizations shown 
false false check satisfiable step svc 
second saved table time computed table checked see needed value available computing recursively 
propositional operations performed bdd library common subexpressions shared 
dealing indexed sets transitions 
gamma gamma allows user define set transition rules vary index variable 
construct called ruleset declares index variable code transition rules contained ruleset 
feature useful describing collections nearly identical processes 
ruleset parameters encoded accesses infinite array indexed natural numbers entries rule indices 
contents array unconstrained serves source nondeterministic choices 
ith element array looked determine choice transition rule execute ith step computation 
stating properties parameterized systems requires quantified formulas svc decide quantifier free formulas 
prototype verifier copes quantifiers simple heuristics parameterized processes concrete variables associated process frequently stored array quantified variables instantiated array index expressions 
svc checks validity variables universally quantified outside scope existential quantifier replaced fresh symbolic constant distinct names formula 
instantiation quantifiers fresh variables useful 
resort system allows user supply hints instantiate instantiate variables 
measures barely adequate sophisticated handling quantifiers required 
flash cache coherence protocol example advantage predicate abstraction strengthen invariants automatically 
potentially valuable finding appropriate invariants difficult aspects verifying design theorem prover 
technique evaluated protocol previously verified methods stanford flash multiprocessor cache coherence protocol 
model cache coherence protocol consists set nodes contains processor caches portion global memory system 
cache line sized block memory associated directory header keeps information line 
state cached copy invalid shared readable exclusive readable writable 
distributed nodes communicate asynchronous messages point point network 
protocol verified aggregation abstraction help theorem prover 
proof required lemmas showed various pairs actions commute produce state regardless execution order 
lemmas don hold arbitrary system states necessary prove invariant characterizes reachable states prove lemma holds invariant 
finding invariant difficult part proof 
detailed description protocol proof 
prove invariants necessary strengthen inductive strengthening equivalent finding induction hypothesis 
practice strengthening invariant trial error process involving repeated failed proofs new properties manually extracted 
usually requires iterations iteration difficult 
predicate abstraction invariant strengthening easier 
user supplies plausible properties useful strengthening invariant system automatically tries various boolean combinations conditions able prove property 
saves effort trying boolean combinations hand 
reachability analysis generates state candidate invariant hold possible report state concrete transition enters state 
information may suggest additional predicates added 
predicate abstraction invariant strengthening user starts description system relatively simple invariants sufficient conditions prove verification conditions interest 
example desired property flash exclusive copy memory line system 
prove predicates supplied initially exclusive copies 
single exclusive copy invariants discovered properties strong properties added putx message message directory cache wants exclusive copy 
putx replies network 
single putx reply network gamma gamma description protocol test somewhat different pvs description aggregation proof 
simplification modeling memory separate node machine fact memory stored processing nodes 
simplification necessitated inefficient treatment quantifiers current gamma gamma prototype 
second simplification result limitation gamma gamma pvs description directory entry memory block maintained count sharers read cached copies memory block 
easy way count number actual sharers gamma gamma changed set sharing nodes count 
spite compromises believe problem invariant strengthening modified flash protocol quite difficult ability solve gamma gamma indicates predicate abstraction effective approach problem 
interesting challenges flash protocol finding invariants unknown number processes 
original description protocol description parameterized unknown number processes 
caches modeled unbounded array indexed node indices 
tends lead predicates properties prove quantified process indices 
instance property write back request exists exclusive copy memory line system specified universal quantifier cache state exclusive net wb empty explained section gamma gamma able handle quantified predicates albeit sub optimally trying instantiations human interaction 
capability critical completing proof reasonable effort 
estimate finding invariants predicate abstraction order magnitude easier finding trial error pvs 
required days user time hours cpu time strengthen invariants 
garbage collection example ambitious example attempted fly garbage collection algorithm proposed dijkstra 
algorithm widely acknowledged difficult get right difficult prove 
detailed discussion subtlety algorithm subsequent variations havelund shankar 
extended version algorithm handle multiple concurrent mutators garbage collector concurrent caml light 
proof safety property required invariants proved 
details modified algorithm proof discussed 
original algorithm simplified ben ari involve colors 
led simpler argument correctness 
alternative problem possibly addressed writing recursive function count sharing nodes verifying properties proof garbage collection algorithm 
haven tried 
justifications ben ari algorithm van de 
proofs informal pencil proofs 
modified algorithm mechanically proved boyer moore theorem prover 
formulation algorithm proved havelund shankar pvs 
proofs approximately size 
proofs needed invariant lemmas function lemmas took months 
far know mechanically proved original algorithm dijkstra garbage collection algorithm collector mutator models behavior user program nondeterministically changing pointers run concurrently processes accessing shared memory 
memory abstractly modeled directed graph node having outgoing edges 
subset nodes called roots special sense accessible proof algorithm assumes loss generality root node 
node reached roots edges accessible 
mutator allowed choose arbitrary node redirect edges arbitrarily chosen accessible node 
memory node color field collector uses keep track accessible nodes 
collector adds nodes accessible mutator called garbage nodes free list recycling 
mutator described pseudo code redirects edge arbitrarily selected accessible node arbitrary accessible node acc says accessible 
colors second node gray white 
part subtlety algorithm collector mark nodes steps mutator 
collector finds nodes reachable roots added free list 
begins coloring root nodes gray coloring node gray called shading 
iterates nodes finds gray node shades successors colors node black 
collector starts iteration 
collector algorithm 
basic property prove collector free accessible node 
extra state variable called error added collector set true collector frees accessible node reducing desired property invariant error true 
predicates simply guards gamma gamma description algorithm derived directly invariant proved 
required insight 
predicates needed collector marking phase mutator change color node gray case exist gray node examined collector 
color gray color gray mutator true choose acc true choose change left right left right color white color gray fi collector shade roots error false marking phase color gray shade left right color black gray gamma fi mod od collecting phase color white acc error true fi append free list white color white fi od fig 

mutator collector algorithms correctness algorithm depends invariant black node white successor transitory case mutator shade white successor 
color black color left white left color black color right white right verifying properties graphs major difficulty verifying garbage collection algorithm predicate abstraction correctness depends simple properties graphs easy prove simple instantiation quantifiers induction needed 
properties axioms verifier verifying algorithm proved predicate abstraction auxiliary gamma gamma programs compute graph properties 
example property function acc necessary color black color black color left black color right black acc left right color black function acc function graph structure nodes left right arguments 
axiom says redirecting edge point accessible node previously inaccessible node accessible 
write left represents array left value index similar equation redirecting right side 
acc left right acc write left right acc left right difficult property required insight 
states root node graph gray color nodes gray white accessible white node exists path gray node entirely white nodes 
color gray color white acc left right color gray reachable white left right reachable white similarly recursive definition says path white nodes left right 
frequently possible write auxiliary gamma gamma program computes graph property verify predicates algorithm 
verified properties axioms main verification effort 
auxiliary programs tricky write require concurrency 
method currently ad hoc properties encountered written simple recursive definitions translated provably correct algorithm gamma gamma program computes property 
example starting simple recursive definition accessibility acc acc acc left acc right simple write gamma gamma program sets entries array acc true false depending node accessible 
prove property assume array color initialized color black color black color left black color right black check state space predicate acc color black 
similar approach prove property 
property slightly complex function needed computed twice original memory structure mutator redirected edge memory graph 
expected complexity property somewhat difficult prove 
provided auxiliary gamma gamma program white accessible node finds witness existential quantifier consequent 
able prove algorithm correct days 
machine time required prove final version garbage collection algorithm hours 
finding appropriate abstraction predicates took time required understanding algorithm 
typically start invariants hold system part state 
proof process generate traces candidate invariant fail 
happened reasons left obvious axiom acc 
invariant hold situations needed tweaked get right 
needed changing predicate adding predicates 
proof process discovered bugs accidentally added coding algorithm 
course human time spent figuring axioms prove 
experiences reported believe predicate abstraction cost effective verification technique non finite problems parameterized systems 
predicate abstraction regarded infinite state alternative model checking 
believe valuable method checking strengthening invariants larger verification effort involving tools especially interactive theorem provers 
gamma gamma verifier prototype evaluating ideas polished tool 
generally useful aspect gamma gamma system needs additional including name change 
particular need better support quantifiers generally efficient powerful decision procedures 
acknowledgments grateful mahadevan subramaniam suggesting predicate abstraction saidi help understanding abstraction methodology klaus havelund telling concurrent garbage collection algorithm clark barrett help integrating svc libraries shankar help cmu bdd package 

barrett dill levitt 
validity checking combinations theories equality 
srivas editors formal methods computeraided design volume lecture notes computer science pages 
springer verlag november 
palo alto california november 

ben ari 
algorithms fly garbage collection 
acm transactions programming languages systems july 

col uribe 
generating finite state abstractions reactive systems decision procedures 
conference computer aided verification volume lecture notes computer science pages 
springerverlag 

dijkstra lamport martin scholten 
fly garbage collection exercise cooperation 
communications acm november 

doligez gonthier 
portable unobtrusive garbage collection multiprocessor systems 
proc 
acm symp 
principles programming languages january 

doligez leroy 
concurrent generational garbage collector multithreaded implementation ml 
proc 
acm symp 
principles programming languages january 

emerson 
reasoning rings 
proc 
acm symp 
principles programming languages 

german sistla 
reasoning systems processes 
journal acm july 

graf saidi 
construction state graphs pvs 
grumberg editor conference computer aided verification volume lecture notes computer science pages 
springer verlag 
june haifa israel 

havelund 
mechanical verification garbage collector 
unpublished manuscript 

havelund shankar 
mechanized refinement proof garbage collector 
unpublished manuscript 

lessens saidi 
automatic verification parameterized networks processes abstraction 
electronic notes theoretical computer science entcs 

manna pnueli 
temporal verification reactive systems safety 
springer verlag 

park dill 
verification cache coherence protocols aggregation distributed transactions 
theory computing systems 


incremental garbage collection algorithm multi mutator systems 
distributed computing 


mechanically verified incremental garbage collector 
formal aspects computing 

sistla german 
reasoning processes 
symp 
logic computer science ithaca pages june 

van de 
algorithms fly garbage collection revisited 
information processing letters march 
