self nonself discrimination computer stephanie forrest alan perelson dept computer science los ln 
university new mexico santa fe albuquerque asp santafe edu forrest cs unm edu lawrence allen rajesh dept computer science dept computer science university new mexico university new mexico albuquerque albuquerque raj cs unm edu problem protecting computer systems viewed generally problem learning distinguish self 
describe method change detection generation cells immune system 
mathematical analysis reveals computational costs system preliminary experiments illustrate method applied problem computer viruses 
problem ensuring security computer systems includes activities detecting unauthorized computer facilities guaranteeing integrity data files preventing spread computer viruses 
view protection problems instances general problem distinguishing self legitimate users corrupted data unauthorized users viruses 
introduce change detection algorithm way natural immune systems distinguish self 
mathematical analysis expected behavior algorithm allows predict conditions perform reasonably 
analysis report preliminary results illustrating feasibility approach problem detecting computer viruses demonstrating algorithm practically applied proceedings ieee symposium research security privacy press 
remains open problem suggest general principles readily applied computer security problems 
current commercial virus detectors distinct technologies activity monitors signature scanners file authentication programs 
system describe essentially file authentication method change detector 
initial testing virus detection setting algorithm may applicable problems 
significant differences algorithm described conventional approaches change detection checksums message digest algorithms checking activity distributed sites site having unique signature quality check traded cost performing check protection symmetric sense change detector protected data set mutually protective algorithm generating change detectors computationally expensive checking cheap difficult modify protected file alter detectors way modification detected 
authentication methods method relies guarantee data protected uncorrupted time detectors generated 
change detection tools available employ variety change detection methods signature functions tripwire 
tools tripwire devote considerable attention important problems administration portability reporting 
properly viewed algorithm comparable nature signature function incorporated tool tripwire 
mentioned features distinguish algorithm conventional signature methods particular signatures expensive generate cheap check especially checking activity distributed multiple sites multiple signatures exist data set 
distinguishing features advantages disadvantages remains seen setting appropriate algorithm features 
approach relies important principles ffl copy detection algorithm unique 
protection schemes need protect multiple sites multiple copies software multiple computers network 
environments believe single protection scheme effective way avoid detection site sites vulnerable 
idea provide protected location unique set detectors 
implies site compromised sites remain protected 
ffl detection probabilistic 
consequence different sets detectors protect entity probabilistic detection methods feasible 
intrusion site successful multiple sites 
probabilistic methods system achieve high system wide reliability relatively low cost time space 
price course somewhat higher chance intrusion site 
ffl robust system detect probabilistically foreign activity looking specific known patterns intrusion 
virus detection programs scanning unique patterns digital signatures known time detection software distributed 
leaves systems vulnerable attack novel means 
change detectors algorithm learns self notices probabilistically deviation self 
system overview algorithm phases 
generate set detectors 
detector string match protected data see careful definition match 
censoring phase illustrated 
monitor protected data comparing detectors 
detector activated change known occurred shown 
unpromising approach 
view set data protected set strings finite alphabet change data string original set proposing generate detectors strings original data set 
surprisingly algorithm turns feasible mathematically fairly small set detector strings high probability noticing random change original data 
number detectors remain constant size protected data grows 
figures illustrate algorithm works 
copy detection system generates unique valid set detectors runs monitoring program regularly example background process check changes 
describing procedure detail need describe trying detect 
reduce detection problem problem detecting string changed change modification existing string new string added self 
algorithm fail notice deletions 
string string bits represented digital computer string assembler instructions string data apparent method appears relevant strings change time protected strings need fairly stable 
define self string protected string 
note convenient view self unordered collection substrings times long string concatenation substrings 
term collection set remove check duplicates 
duplicates appear extremely low frequency technically collections protected strings detectors multisets 
generate valid detectors split logically self string equal size segments 
originally chose split strings facilitate mathematical analysis system allows predict probability detection 
turned advantages making easier detect certain kinds computer viruses suggesting extensions system 
example self strings generate random strings detector set match reject generation valid detector set censoring break bit string substrings length produces collection self sub strings protected contains substrings 
second step generate random strings call collection match strings strings strings match self see section eliminated 
strings match strings members detector collection called repertoire 
procedure called censoring 
continuing example suppose contains random strings 
consist strings strings eliminated match string censoring procedure illustrated 
collection detector strings produced state self monitored continually matching strings strings achieved choosing string string testing see match 
implementation pairings deterministically string chosen matching fixed order 
detectors checked order produced 
self strings order determined practice procedure generate random strings sequentially continue generating sufficient number elements 
useful conceptually predicting strings generated produce certain size 
example order instructions program 
alternatively procedure randomized 
match concluded changed 
example suppose bit self string changed produce 
point monitoring process noticed self string matches detector strings string change reported 
matching perfect match strings equal length means location string symbols identical 
example section shows perfect matching strings defined alphabet 
perfect matching extremely rare strings reasonable length partial matching rule needed 
relax matching requirement matching rule looks contiguous matches symbols corresponding positions 
strings say match true agree match contiguous locations 
see example 
matching rule applied strings defined alphabet symbols 
general case strings alphabet representing bit pattern stored computer 
higher level strings defined particular machine instruction set 
shows example censoring 
match nonself detected protected strings detector collection monitor protected strings changes 
example matching rule 
strings defined letter alphabet fa dg match contiguous locations underlined 
match false greater agree contiguous locations 
match true 
useful know probability pm random strings match contiguous locations 
number alphabet symbols number symbols string length string number contiguous matches required match pm gammar gamma gamma approximation gammar 
exact formula cases approximation fails 
table illustrates effect varying pm different values row shows configuration experiments 
setting corresponds byte change 
rows table show linear increase pm length string increases 
rows show exponential decrease pm increases 
rows show dramatic effect pm increasing alphabet size 
pm gamma gamma gamma gamma table example values pm varying values alphabet size number contiguous matches required match string length 
generating repertoire string protected segment generate random strings match reject generating repertoire 
string protected logically segmented equal length self strings stored 
generate repertoire random strings produced box labeled matched self strings 
strings eliminated match self string contiguous positions 
string fails match string self contiguous positions accepted repertoire box labeled 
probability detection detection probabilistic need accurate estimates probabilities different configurations change detection system 
section describes predictions 
analysis taken 
suppose string want protect 
mentioned string application program data element computer system stored memory 
algorithm described section estimate number size detector strings required ensure arbitrary change protected string detected fixed probability 
definitions calculations nr number initial detector strings censoring nr number detector strings censoring size repertoire number self strings pm probability match random strings probability random string matching self strings gamma pm ns probability nr detectors fail detect intrusion pm small ns large gammap mns nr nr theta gamma pm nr pm small nr large gammap mnr nr nr theta pm solving nr get nr pm theta gamma pm ns formula allows predict number initial strings nr required detect random change function probability detection gamma number self strings protected ns matching rule pm 
nr minimized choosing matching rule pm ns foregoing analysis allows estimate computational costs algorithm way 
observe method relies basic operations generating random string fixed length comparing strings see meet matching criterion contiguous matches 
assume operations take constant time 
time complexity phase proportional number strings nr number strings ns 
equation estimates nr size protected data set reliability detection required particular matching rule pm 
cost complete checking phase ii proportional number strings nr number strings 
analysis observations algorithm 
tunable choose desired probability detection estimate number detector strings required function size ns strings protected equations 
increased probability detection results increased computational expense due increased size choose desired probability detection determining fatal single intrusion redundancy exists system see item 
ns vs nr pm ns axis shows number self strings ns axis predicts initial repertoire size nr formula nr pm theta gammap 
nr independent ns fixed pm equation 
size detector set necessarily grow number strings protected 
implies possible protect large data sets efficiently 

nr pm fixed nr grows exponentially exponential factor unfortunate respect imply set detectors produced say supercomputer virtually impossible malicious agent change self change detector set change unnoticed 
nr controlled choosing pm ns illustrates dramatic effect minimizing nr different value currently studying promising methods reducing size nr rely changing matching rule new ns 
probability detection increases exponentially number independent detection algorithms 
number copies algorithm system fails detect feature primary advantage algorithm 
example table shows copy detection algorithm detectors protect data set size reliability 
different sites system level reliability obtained detectors site 

detection symmetric 
changes detector set detected matching process notices changes self 
implies change detected priori way decide change self detectors 
advantage self confers protection detector set detector set provides self 
experiments analysis possible design wide variety detection systems different properties 
section report preliminary results investigations different parameter settings 
report classes experiments experiments random binary strings experiments sparc instructions generated compiling programs dos environment experiments com files infected actual computer viruses 
set experiments show implications equation confirms estimates provided theoretical analysis 
remaining sets experiments illustrate method applied problem detecting computer viruses 
table compares theoretical experimental probabilities fixed number nr detectors fail detect random change self 
compares theoretical experimental values initial repertoire size nr providing estimate costly phase algorithm repertoire size nr set detectors consisting bits target failure rate set 
experimental procedure follows 
fix 
compute pm 
setting corresponds matching rule notices byte changes 

compute nr pm equation round largest integer 

repeat times generate ns random binary strings 
determine nr experimentally generating random strings nr valid detectors 
test detectors replace string self random string 
ii 
compare detector strings modified self strings 
iii 
detectors matches new string partial matching rule described earlier report modification 

compare mean obtained trials 
procedure obtained close agreement theoretical predictions observed results shown table 
experiment establishes worst case baseline algorithm 
worst case sense set detectors advantage distributing detection task self strings generated randomly changes self consist replacing single string changing bits 
example self strings protected repertoire consisting detectors 
detectors detect random change self time 
additionally see exponential cost generating detector set significant self strings modest amount data protect 
detection task distributed sites site need generate valid detector initial repertoire achieve detection rate 
similar experiments indicate agreement experimental predicted values desired achieved fixing nro nr conducted tests programs compiled sparc processor 
experiments interesting illustrate effect larger alphabet 
tests differed method generate infected program 
tests source code file compiled 
resulting object file disassembled sparc instructions mapped single ascii character 
produced long string symbol represented single op code 
string split substrings ascii symbols long representing collection self strings 
string defined alphabet size length 
full sparc instruction set larger experimental theory experimental nro nro table theoretical experimental fixed nr numbers reported mean trials 
numbers parentheses standard deviations 
nr set theoretical entries 
theoretical nro calculated formula nro nr gammap theoretical calculated formula nr pm 
differs nr rounded step algorithm 
constructed collections implicitly explicitly defined alphabet symbols long 
detectors selected randomly generating strings comparing program strings 
specified number contiguous characters positions matched program string detector rejected 
generate match procedure continued specified number detectors generated 
test modified file new file constructed detectors compared 
detectors matched strings new file specified allowed maximum number matches modification reported 
methods modify program file changing source code recompiling say add loop changing single character protected file minimal change possible changing characters code segment source file 
collapsed variants symbol different versions certain floating point operations treated uniformly 
method num 
infection detectors pf pf loop single mutation single mutation data segment data segment data segment table system performance high cardinality alphabet experimental results 
experiment run self strings length characters 
reported number multiple repetitions detection system different leaving modification constant 
loop single mutation experiments repeated times data segment experiments repeated times 
methods labeled loops single mutation data segment respectively table 
method intermediate difficulty probably realistic virus detection viewpoint 
generate example shown table 
series tests involved inserting short loop source code program recompiling code called loop table 
data segment change inserts additional instructions compiled file insertion shifts order instructions point insertion forward 
effect altering character strings new code 
type change tests run detectors constructed matching symbol detect change time 
conclude detecting viruses form easy algorithm 
may surprising algorithm works 
fact constraints matching process detector correct character possible character correct position 
turns constraints restrictive need require contiguous matching 
second series tests created infected file changing character original file labeled single mutation table 
represents opposite extreme case 
tests performed types experiments detectors 
detector characters long 
set 
test runs nr nro table probability failing detect modification com infected timid virus 

string length 
match threshold 
nr number detectors 
nro initial repertoire size 
nm number non self strings 
nm 
observed probability failing detect virus 
detectors modification detected time 
detectors modification detected time 
table shows results types experiments 
rightmost column labeled pf shows dramatic improvement obtained copies detection algorithm independent sites 
final set experiments tested simple virus 
example consider timid virus described 
virus modifies bytes com file appends bytes code file 
viruses turn extremely easy algorithm detect reason data segment change sparc test 
testing method follows 
generate detectors standard com file supplied dos 
copy virus directory containing com file 

execute virus causing original com file infected 

test modified com file detectors see modification detected 
tests conducted different files com com shown edit com shown 
table shows results com file binary sparc com timid params strings nr nr table typical experimental results randomly generated binary strings column strings sparc instructions generated program column com files column file infected timid virus column 
case predetermined 
binary string com cases fixed nr nr determined experimentally 
sparc timid cases nr fixed observed experimentally 
binary self strings length 
values shown average trials numbers parentheses standard deviations 
considering lines table reliability attained detectors essentially reliability attained detectors 
order compare results preceding experiments table displays typical results preceding experiments 
notable observation data table algorithm performs better practice theory 
obvious explanation discrepancy real programs collections completely random strings 
example analysis assumed symbol alphabet occurs equal probability certainly case sparc instruction set 
fairly straightforward modify analysis account different occurrence frequencies symbols 
ways actual programs deviate random strings 
example certain sequences symbols may occur regularity related particular compiler 
investigated patterns extend theory account 
second way experiments deviate analysis method generate modified string 
theory assumes random string added self possibly replacing existing string viruses modifications reported single mutation sparc case involve larger changes self 
discussion algorithm just takes inspiration generation cells immune system 
immune system capable recognizing virtually foreign cell molecule 
distinguish body cells molecules created circulated internally estimated consist order different proteins foreign 
cells receptors surface detect foreign proteins called antigens receptors pseudo random genetic process highly receptors detect self molecules 
cells undergo censoring process thymus called negative selection cells recognize self proteins destroyed allowed leave thymus 
cells bind self peptides leave thymus provide basis immune protection foreign antigens 
artificial immune system works similar principles generating detectors randomly eliminating censoring ones detect self 
refer detectors antibodies model inspired deletion self reactive cells deletion antibodies 
algorithm related earlier immune system models universe antigens foreign material antibodies cells perform recognition represented binary strings 
complex chemistry antibody antigen recognition highly simplified binary immune systems modeled string matching 
binary models study different aspects immune system including ability detect common patterns noisy environments ability discover maintain coverage diverse pattern classes ability learn effectively antibodies expressed antigens 
current algorithm logically split self string equal size segments generate valid antibodies detectors providing collection strings analogous internal cells molecules body 
distributed nature algorithm inspired immune system individual generates unique set protective antibodies 
analogy reflected change detection algorithm copy detection system generates unique valid set detectors 
just algorithm splits self string smaller substrings proteins broken smaller subunits called peptides recognition cells 
directions described general method distinguishing self context computational systems illustrated feasibility change detection method problem computer virus detection 
major limitation appears computational difficulty generating initial repertoire 
potentially advantage protects antibodies modified conform modified form self currently investigating possible ways reduce complexity 
current investigations direction ideas immunology believe may possible apply conventional algorithms especially take account regularities self 
noted nonrandom method generating detectors produce regularities detector set 
regularities exploited malicious agent compromising security system 
way defeat algorithm design virus composed subset self presumably different order 
design virus logical segments program method uses checking unable detect 
believe difficult practice slight modification method protects vulnerability 
simply choosing different segment length site number common substrings available virus quickly diminishes 
interestingly natural immune systems similar strategy 
proteins broken large pseudorandom collection peptides 
major complex mhc molecules bind subset peptides cells recognition 
genes code mhc molecules highly polymorphic individual may different set peptides recognition 
details partial matching rule segmentation self equal size segments arbitrary decisions 
designed system features order simplify mathematical analysis behavior 
matching rule contiguous matching regions sense may appropriate rules computational environment 
important area research investigate matching rules revisit decision partition self segments 
date studied method applied computer virus detection 
suspect applicable wide variety network operating system problems area currently investigating 
approach unifies wide variety computer data security problems treating problem distinguishing self 
negative selection mechanisms immune system evolved distinguish self 
interested discovering information processing methods immune system translated useful algorithms 
acknowledgments authors gratefully acknowledge santa fe institute encouraging supporting interdisciplinary research produced results reported 
support provided forrest national science foundation iri 
david mathews helped prepare figures john mchugh helpful suggestions manuscript 
de boer perelson 
diverse immune system 
proc 
roy 
soc 
london volume pages london 
farmer packard perelson 
immune system adaptation machine learning 
farmer lapedes packard editors evolution games learning pages 
north holland amsterdam 
reprinted physica 
forrest smith perelson 
genetic algorithms explore pattern recognition immune system 
evolutionary computation 
forrest perelson 
genetic algorithms immune system 
schwefel editors parallel problem solving nature berlin 
springer verlag lecture notes computer science 
hightower forrest perelson 
evolution secondary organization immune system gene libraries 
proceedings second european conference artificial life press 
kim spafford 
design implementation tripwire file system integrity checker 
technical report csd tr purdue university dept sciences purdue university west lafayette 
ludwig 
little black book computer viruses 
american eagle publishers 
perelson 
predicting size antibody combining region consideration efficient self non self discrimination 
proceedings national academy science 
perelson 
probability self nonself discrimination 
perelson editors theoretical experimental insights immunology ny press 
springer verlag 
smith forrest perelson 
searching diverse cooperative populations genetic algorithms 
evolutionary computation 

schema recombination pattern recognition problems 
proceedings second international conference genetic algorithms pages hillsdale nj 
lawrence erlbaum associates 

mathematical probability 
mcgraw hill book ny 
pp 

