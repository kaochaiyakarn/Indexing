domain specific mapping solving graph problems reconfigurable devices andreas alessandro mei viktor prasanna university southern california prasanna usc edu usc edu 
conventional mapping approaches reconfigurable computing rc utilize cad tools perform technology mapping high level design 
comparison execution time hardware extensive amount time spent compilation cad tools 
long compilation time considered evaluating time performance rc solutions 
propose domain specific mapping approach solving graph problems 
key idea alleviate intervention cad tools mapping time 
high level designs synthesized respect specific domain adapted input graph instance run time 
domain defined algorithm reconfigurable target 
proposed approach leads predictable rc solutions superior time performance 
time performance metric includes mapping time execution time 
example case single source shortest path problem estimated run time speed compared state art 
comparison software implementations estimated run time speed asymptotically improved optimization hardware design improvement configuration time 
reconfigurable computing rc solutions shown superior execution times application domains signal image processing genetic algorithms graph algorithms cryptography compared software dsp approaches 
efficient rc solution achieve minimal execution time minimal time mapping hardware 
conventional mapping approaches rc see fig 
utilize cad tools generate hardware designs optimized respect execution time area 
research performed part project 
supported darpa adaptive computing systems program contract 
dabt monitored fort 
mei department mathematics university trento italy 
performed visiting university southern california 
technology mapping netlist generation place route execution problem instance cad tools reconfigurable devices device data library modules application developer algorithm synthesis tools mapping time execution time synthesis compilation configuration running time design synthesis high level rtl gate level design technology mapping netlist generation place route execution application developer cad tools reconfigurable devices device data library modules algorithm synthesis tools mapping time execution time running time design synthesis high level rtl gate level design skeleton adaptation control program problem instance skeleton fig 

conventional left domain specific right mapping approaches resulting mappings incur overheads due dominant role cad tools 
clock rate required area rc solution depend heavily cad tools estimated reliably compile time 
technology mapping phase requires extensive compilation time 
usually hours compilation time required achieve execution time range msec :10.1.1.50.9354
case mappings reused time compilation occurs performance bottleneck 
mappings depend input problem instance mapping time ignored serious performance limitation 
propose novel rc mapping approach solving graph problems 
input graph instance new mapping derived 
objective derive rc solutions superior time performance 
time performance metric running time defined sum mapping time execution time 
key idea proposed approach reduce intervention cad tools mapping time 
technology dependent design synthesized specific domain algorithm target 
reconfigurable target visible application developer see fig 

run time derived design adapted input graph instance 
proposed mapping approach eliminates dominant role cad tools leads real time rc solutions 
furthermore time performance area requirements accurately estimated compilation 
particularly important run time environments parameters problem known priori time area constraints satisfied 
section proposed mapping approach briefly described 
section illustrate approach demonstrate solution single source shortest path problem 
section concluding remarks 
domain specific mapping simple natural model assumed application development 
consists host processor array fpgas external memory 
fpgas organized mesh 
memory stores configuration data downloaded array data required execution 
role memory analogous role cache memory memory system terms providing high speed link host array 
illustrate ideas consider adaptive logic board virtual computer map designs 
board xc architecture 
consider graph problems application domain 
graph instance leads different mapping 
mapping overhead ignored 
specific domain algorithm target objective derive working implementation superior time performance 
time performance metric running time defined sum mapping time execution time see fig 

obtain hardware implementation algorithm specific skeleton synthesized specific domain dynamically adapted input graph instance run time 
proposed mapping approach consists major steps see fig 

skeleton design graph problem general structure skeleton derived characteristics specific domain 
skeleton consists modules correspond elementary features graph graph vertex 
modules optimized hardware designs functionality determined algorithm 
configurations modules interconnection derived target architecture 
interconnection modules fixed defined general capture individual connectivity different graph instances 
placement routing modules optimized conventional cad tools approaches 
skeleton derived compilation derivation affect running time 
addition skeleton exploits low level hardware details reconfigurable target terms logic placement routing 

adaptation graph input instance functional structural modifications performed skeleton run time 
modifications dictated characteristics problem instance configuration final layout derived 
functional modifications dynamically add alter module logic adapt modules input data precision problem size 
structural modifications shape interconnection skeleton characteristics problem instance 
software program control program derived manage execution fpgas 
program schedules operations chip data flow computational requirements problem instance 
addition coordinates data flow hardware implementation 
interconnection skeleton established step execution scheduling essentially corresponds software routing adapted skeleton 

configuration reconfigurable target configured adapted structure derived step 
completion configuration control program executed host initiate manage execution hardware 
proposed approach leads rc solutions superior time performance compared conventional mapping approaches 
furthermore approach skeleton mainly determines clock rate area requirements 
reliable time area estimates possible compilation 
single source shortest path problem illustrate ideas demonstrate mapping scheme single source shortest path problem 
classical combinatorial problem arises optimization problems problems heuristic search deterministic optimal control problems data routing computer communication network 
weighted directed graph source vertex problem find shortest path source vertex 
bellman ford algorithm solving single source shortest path problem consider algorithm 
shows pseudocode algorithm 
edge weights negative 
complexity algorithm ne number vertices number edges 
vertex label label source 
edge label min label label bellman ford algorithm vertices edges problem size average iterations initialize relax edges check negative weight cycles edge label label return false return true fig 

bellman ford algorithm experimental results graphs negative weight cycles reachable source algorithm may converge gamma iterations 
number required iterations height shortest path tree input graph 
height equal maximum number edges shortest path source 
worst case gamma number vertices 
performed extensive software simulations determine relation gamma graphs negative weight cycles 
note known rc solutions perform gamma iterations algorithm regardless value shows experimental results different problem sizes 
problem size gamma graph instances randomly generated 
value graph instance average graph instances calculated 
considered problem sizes number required iterations grows logarithmically number vertices increases 
values smaller table fig 
starts converging gamma 
mapping bellman ford algorithm skeleton skeleton corresponds general graph vertices edges 
weight assigned edge edge vertex vertex 
derived structure see fig 
consists modules connected pipelined fashion 
index id gamma label uniquely associated module 
module corresponds vertex weight edges stored memory 
particular ordering weights required 
memory word consists weight associated indices memory start modules corresponding vertices label min label label fig 

skeleton architecture bellman ford algorithm start module initiates execution hardware 
iteration corresponds cycles needed feed contents memory modules 
weights repetitively fed modules cycles 
algorithm terminates iterations 
extra iteration required start module detect termination 
labels modified iteration graph contains negative weight cycles reachable source solution exists 
graph contains negative weight cycle reachable source solution exists 
module see fig 
values id label stored relaxation corresponding edges performed 
upper part label added incoming weight 
index compared id determine edge incident vertex id weight updated id lower part weight relaxed min operation algorithm shown 
index compared id determine edge incident vertex id label vertex id updated id label 
label updated flag asserted 
id id label cut fig 

structure modules left placement skeleton fpga array right iteration signal set start module reset flags 
addition resets register contains signal module gamma 
signal travels modules samples flags 
iteration signal sampled start module 
execution terminates solution exists 
iterations solution exists 
skeleton placement routing fpgas array see fig 
simple regular 
communication consecutive modules uniform differs boundaries array 
depending number required modules cut fig 
formed corresponds communication links module fig 

adaptation skeleton cut formed labels allocated modules initialized 
execution managed control program executed host 
program controls memory feeding required weights array 
addition initiates terminates execution start module 
area running time estimates module created parametrized libraries xilinx series fpgas 
footprint module dlog ne theta denotes number bits weight label number vertices 
log modules placed largest device xc family 
memory space required dlog ne theta bits number edges 
needed memory array bandwidth log bits cycle support execution 
fully utilize benefits fastmap tm interface mb sec bandwidth required 
assumption largest xc device configured sec wildcards 
algorithm terminates theta cycles number required iterations graph 
cycle corresponds clock period skeleton 
clock rate skeleton estimated mhz bits mhz bits 
clock rate analysis overheads caused routing considered 
clock rate determined mainly carry chain adder modules 
faster adder improvements clock rate possible 
mapping time range msec 
mapping time analysis timings fastmap tm interface xilinx series fpgas 
performance comparison shortest path problem solved dynamic computation structures 
key characteristic solution mapping edge physical wire 
experiments considered problems average degree maximum degree 
instances considered compilation time hours assuming network workstations available 
extensive time spent placement routing 
resulting mapping time eliminated gains achieved fast execution time 
fair comparisons solution assumed available bandwidth configuring array mb sec 
mapping time solution estimated msec range see fig 

iterations clock rate negative weight cycles area requirements check solution solution independent mapping time hours msec execution time cycles network workstations memory array bandwidth mb sec assumed fig 

performance comparisons solution mapping overhead mapping edges physical wires resulted limitations respect clock rate area requirements 
clock rate depended longest wire omega worst case number vertices 
supported known theoretical results show worst case graph takes omega area laid number vertices longest wire omega long 
increases execution time solution drops dramatically 
execution time average times faster approach times slower 
larger degradation performance expected severe 
considering execution mapping time resulting speed comparing solution gamma iterations executed negative weight cycles detected 
checking algorithm convergence negative weight cycles included design resulting longest wire increase drastically affecting clock rate time 
time performance area requirements determined completely efficiency cad tools reliable estimates compilation 
speed vertices edges fig 

comparison running time approach software implementation 
area comparisons difficult different fpgas 
furthermore considered graph instances indicative entire problem space 
considered instances xc fpga allocated vertex increases area required grows rapidly 
solution area fpgas memory required 
design modular design easily adapted different graph instances complete redesign 
software simulations performed time performance comparisons uniprocessor solutions 
algorithm mapped hardware implemented language 
software experiments performed sun ultra mb memory clock rate mhz 
limitations degree vertices assumed 
problem instance gamma graph instances randomly generated average running time calculated 
compilation time uniprocessor obtain executable considered comparisons 
data assumed memory execution cache effects considered 
assumptions average edge relaxed nsec 
hardware implementation assumed bits 
mapping time proportional number vertices input graph 
mapping execution time considered comparisons 
achieved run time speed asymptotically 
considered problem sizes see fig 
lower speed observed 
increases mapping time overhead amortized corresponding execution time 
shorter configuration time result convergence speed bound smaller domain specific mapping approach introduced solve graph problems fpgas 
problems depend input graph instance constitute suitable application domain exploit reconfigurability 
proposed approach reduces dominant role cad tools leads rc solutions superior time performance 
example single source shortest path problem speed shown compared 
comparison software solutions asymptotic speed shown 
includes graph problems examples validate mapping approach 
addition focus specific instances np hard problems execution time comparable corresponding mapping time provided general purpose cad tools approaches 
believe proposed approach combined software hardware design framework efficiently attack specific instances np hard problems 

babb frank agarwal solving graph problems dynamic computation structures spie high speed computing digital signal processing filtering reconfigurable logic 

bertsekas tsitsiklis parallel distributed computations numerical methods athena scientific belmont massachusetts 

cormen leiserson rivest algorithms massachusetts institute technology 

hutchings exploiting reconfigurability domain specific systems int 
workshop field programmable logic applications sep 

rashid leonard mangione smith dynamic circuit generation solving specific problem instances boolean satisfiability ieee symposium field programmable custom computing machines apr 

ullman computational aspects vlsi computer science press rockville maryland 

zhong martonosi malik accelerating boolean satisfiability configurable hardware ieee symposium field programmable custom computing machines apr 

xc field programmable gate arrays www xilinx com apps htm april 

parameterized library xc works ver 
aug 
