parameter genetic algorithm georges harik high school way mountain view ca net fernando lobo dept environmental engineering universidade nova de lisboa monte da portugal mail fct unl pt user point view setting parameters genetic algorithm ga far trivial task 
user typically interested population sizes crossover probabilities selection rates ga technicalities 
just interested solving problem really hand problem blackbox algorithm simply press start button 
explores development ga fulfills requirement 
parameters whatsoever 
development algorithm takes account aspects theory gas including previous research population sizing schema theorem building block mixing genetic drift 
holland proposed genetic algorithms envisioned methods going efficient easy applicable wide range problems 
thing stands current literature genetic algorithms require quite bit expertise order particular application 
expertise needed users generally clueless decide various codings operators deciding set parameter values ga robust easy method genetic algorithm turns method needs lot tuning parameter 
state affairs kind paradox contradicts holland original goals 
decisions user applying ga grouped categories 
choice appropriate coding operators 
second choice appropriate parameter settings 
addresses second category 
unimportant irrelevant 
important topic subject extensive research 
specifically motivations linkage learning gas relieve user having come special purpose codings operators 
linkage learning gas able detect important similarities building blocks encoding able come smart operators able efficiently process building blocks harik 
contained similar flavor regarding second category choices 
outcome algorithm relieves user having set parameters ga resulting parameter ga life easier users goes step closer direction algorithm robust efficient simple 
remainder organized follows 
section reviews related topic parameter setting gas 
section describes parameterless genetic algorithm core 
section presents computer simulations showing parameter ga action 
ends suggesting couple extensions 
related section reviews important research efforts understanding relationship various parameters affect performance attempts eliminate ga substantial amount research areas briefly mention small part 
better exposition divide various works classes empirical studies theoretical studies parameter adaptation 
empirical studies systematic studies understand relationship ga parameters conducted de jong 
tried various combinations parameters set functions 
experiments de jong concluded test functions set parameters gave performance population size crossover probability mutation probability 
de jong published dissertation parameter settings adopted researchers practitioners 
referred standard settings 
de jong important gave practical guidelines subsequent ga applications research 
downside people taken results seriously blindly applied solve kind problems 
theoretical studies dynamics ga complex hard study effect parameters simultaneously 
research studies analyzed effect parameters isolation ignored 
studies proven useful get insights ga dynamics 
relevant ones works selection goldberg deb mutation muhlenbein back population sizing goldberg deb clark harik control maps goldberg deb thierens thierens goldberg 
population sizing special relevance resulting models clearly show setting population size range problems huge mistake 
control maps key development parameter ga control map gives region parameter space ga expected 
talk issues 
parameter adaptation parameter adaptation techniques change adapt parameter values search progresses 
topic investigated early days evolutionary computation ec field 
techniques include centralized decentralized control methods 
centralized methods change parameter values central learning rule davis smith 
decentralized methods central control ga related class algorithms called evolution strategies es back schwefel 
idea decentralized methods encode parameters typically crossover mutation rates individual strings 
consequence parameters subject rules evolution 
approach parameter adaptation meta gas 
idea run higher level ga searches set parameters lower level ga higher level ga meta ga runs population individuals encodings parameter settings lower level ga regular ga uses settings higher level ga mercer sampson grefenstette 
parameter adaptation focused adapting mutation crossover rates little adaptive population sizing schemes 
smith exception 
address detail section 
development parameter ga previous sections explained motivation removing parameters genetic algorithm 
ready parameterless ga ignores mutation time 
doesn mean mutation unimportant 
extensive debates evolutionary computation community regarding usefulness crossover versus mutation vice versa 
recognize mutation quite helpful certain situations shouldn discarded lightly 
ignore sake simplicity 
revisit topic mutation 
satisfied parameter crossover ga parameters affect performance crossover ga population size selection rate crossover probability 
remainder section explain eliminate parameters 
exposition proceeds steps 
get rid selection rate crossover probability 
get rid population sizing 
getting rid selection rate crossover probability selection rate crossover probability eliminated single shot proper understanding roles parameters 
selection rate allows user control amount bias better individuals 
crossover probability allows user control amount recombination mixing 
parameters purpose ensure building blocks grow generation generation 
closer look schema theorem reveals survival probability schema increase raising selection rate lowering crossover probability 
previous research goldberg deb thierens shown ga quite robust regarding settings parameters 
goldberg deb thierens observed building blocks compact ga works wide range combinations important thing respect schema theorem fall extreme cases low high selection pressures 
low selection pressures ga able discriminate bad individuals 
high selection pressures ga pays attention best individuals resulting immediate loss diversity little recombination done 
extreme cases easily excluded setting selection rate value low high 
apart ga just needs obey schema theorem making sure growth ratio building blocks greater 
oe effect selection operator schema generation ffl disruption factor schema due crossover operator 
net growth ratio schema generation oe gamma ffl expression simplification schema theorem 
conservative hypothesis schema destroyed crossover operator substituting formula obtain growth ratio schema expression gamma setting gives net growth factor ensures necessary building blocks grow 
able mix single individual matter having adequate population size 
building blocks compact population sizing requirements quite reasonable goldberg deb clark harik 
compact ga able learn linkage fly population sizing requirements extremely large thierens goldberg 
case get rid selection rate crossover probability setting problems 
building blocks compact genes located close chromosome string getting rid population sizing population size critical parameter ga small ga converge sub optimal solutions 
large ga spend unnecessary computational resources 
theoretical models addressed topic population sizing gas goldberg deb clark harik 
essence models recognition ga mistakes deciding building block competitors 
increasing size population ga get better sampling building blocks reduce error decision making 
simple words models dictate population size large ga correctly decide statistical sense building block competitors 
result equation says population size proportional problem length building blocks signal noise ratios 
accurate models difficult apply practice rely assumptions may hold real world problems 
example order apply population sizing equation user needs know estimate maximum level deception problem selective advantage signal building block tough competitor 
information usually unknown hard estimate 
equation accurate proper mixing building blocks 
due reasons difficult apply equation practice 
easy apply process automated algorithm 
smith attempt 
order authors required user specify desired accuracy level selection loss equivalent building block signal goldberg equation 
suggested algorithm online estimates schema fitness variances sizes population selection loss approximates user specified target loss 
resulting algorithm limitations 
hard relate user specified selection target loss actual accuracy ga solving problem 
second estimation schema fitness variances noisy ga samples partitions simultaneously 
third population sizing theory assumes building block mixing going nearly perfect may occur practice 
smith significant especially studies attempted automatically adapt population size 
far looking difficulties exist order apply population sizing theory practice 
step back moment observe user typically solve problem ga starts trying small population size 
try larger 
tried different population sizes feeling problem responds different population settings 
situation certainly familiar ga users world included 
user need kind experimentation single problem 
algorithm experimentation automatically 
propose 
approaches getting rid population sizing 
simpler major drawback 
second comes logical consequence constitutes effective mechanism eliminating population sizing parameter 
attempt double population size convergence 
approach consists iteratively running ga different population sizes 
starting small population size say ga run converges 
ga fires new population twice large previous converge 
process repeats ad 
time population converges population size doubled 
ga works forever stops computer runs memory user happy solution quality presses button 
technique simplistic powerful 
roughly mimics user typically ad hoc way time ga doing systematic way 
doubling population size time population converges guarantee time needed parameter ga order reach certain solution quality factor time needed ga starts optimal population size 
user doesn want wait long presses button early run parameter ga probably better ga optimal population size 
technique drawback immediately obvious 
occurrence genetic drift may lead long convergence times 
genetic drift occurs pressure discriminate distinct solutions 
simplest way illustrate bit problem individual individual fitness 
consider population individuals half individual half individual 
ga runs population selection pressure discriminate convergence means individuals genotype 
notice eventually happens mutation turned 
different solutions eventually population converge zeros ones 
process looks random walk waiting times convergence quite long 
roaming population called drift 
process occur proposed parameter ga consequences waiting times population size doubled quite long unacceptable 
solution avoid long waiting times detect population drifting affirmative case fire new population twice large old converges 
drift detection difficult task 
think stopping population running fitness variance population members falls certain threshold ffl approach introduces problems 
parameter goes philosophy 
second real world problems noisy fitness functions 
problems threshold ffl reached 
fortunately way get drift problem need additional parameters 
second attempt establish race multiple populations 
alternative approach tackling drift problem consists running multiple populations simultaneously 
idea establish race populations various sizes 
parameter ga gives advantage smaller populations giving function evaluations 
consequently smaller populations chance converge faster larger ones 
smaller populations get head start start drift larger population 
happens smaller populations destroyed 
specifically point time larger population average fitness greater smaller population parameter ga gets rid smaller population 
rationale doing follows 
larger population higher fitness smaller population point continuing running smaller population smaller produce fitter individual larger 
drift problem partially eliminated population starts drifting larger population 
coordination array populations complex easily implemented counter illustrated table 
time step counter base incremented position significant digit changed increment operation noted 
position indicates population ran 
example algorithm initially runs population table mechanics parameter ga counter action base run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population run generation population 
generations runs population generation population generations population generation illustrated table 
population allowed run times generations population 
just description attempt new population gets fired twice size previous population 
account number generations population sizes observe population allowed spend twice number function evaluations population 
eventually population converges population 
point algorithm removes resets counter 
likewise average fitness population average fitness larger population smaller population removed counter reset 
time typical state parameter ga look shown table 
example parameter ga currently running different population sizes 
smaller size generation 
population size generation 
larger size generation 
table typical state parameter ga population population current average index size generation fitness experimental results section presents computer simulations test problems compares performance parameter ga regular ga optimal parameter settings problems 
gas implemented simple gas 
simple ga mean ga uses fixed coding non adaptive operators 
simple ga implementation generational uses tournament selection replacement uniform crossover mutation 
problem independent runs performed order get results statistical significance 
order compare parameter ga regular ga run algorithms specified target solution achieved record number fitness function evaluations needed 
test problems carefully chosen illustrate specific aspects parameter ga problem onemax problem known counting ones problem 
easy problem ga existing population sizing theory order compare parameter ga ga optimal population size 
second problem noisy onemax problem 
problem illustrate need having multiple populations running simultaneously order overcome drift 
third problem bounded deceptive problem user knowledge location deceptive sub problems building blocks 
problem simple ga unable efficiently mix building blocks existing population sizing theory hold 
onemax onemax function simply returns number ones individual string 
testing purposes string length bits 
target solution string ones 
parameters regular ga tournament size probability crossover equal population size 
parameters chosen nearly optimal problem crossover ga population size chosen population sizing equation harik shown gamma moe bb ln ff population size depends building block size number building blocks building block fitness variance oe bb building block fitness signal bit onemax problem values oe bb 
plugging values equation get gamma ln ff ff probability ga mistake building block 
ga expected correctly solve proportion gamma ff building blocks 
case ga get optimal solution runs 
theoretical guaranteed ff imply infinite population size 
practical purposes population size corresponds small error probability 
compares regular ga parameterless ga regular ga takes average function evaluations order reach optimal solution parameter ga takes average function evaluations 
expected ga optimal parameter settings reach optimal solution faster parameter ga parameter ga bad 
knowledge problem parameter ga able reach optimal solution times time needed optimal ga population sizing scheme responsible factor 
rest due selection rate crossover probability parameter ga easy problem onemax higher crossover rate aggressive selection scheme achieve higher solution quality faster 
price paid order robust settings 
parameter settings easy difficult problems 
aside notice doing clever tricks counting number function evaluations 
simply counting product population size number generations 
careful implementation parameter ga spend half number simply reevaluating population members don undergo crossover 
noisy onemax want illustrate need having multiple populations running simultaneously parameterless ga test noisy onemax problem 
function evaluations bit onemax problem 
figures lines indicate best solution far algorithm averaged runs 
solid line regular ga dashed line parameter ga problem fitness individual noise fitness problem absence noise noise noise component 
practical purposes noise component simulation tossing gaussian random variable mean variance oe bit string length noise variance oe 
value corresponds large amount noise 
miller studied effects noise population sizing requirements ga extended harik equation account 
resulting equation gamma oe oe noise ln ff bit onemax problem fitness variance noise oe 
noise level oe noise obtain population sizing gamma ln ff level accuracy ff get population size 
shows comparison regular ga optimal parameter settings parameterless ga regular ga takes average function evaluations order discover individual building blocks 
thing parameterless ga takes average function evaluations factor 
function evaluations bit noisy onemax problem 
tracing parameter ga observed smaller populations ran convergence 
larger populations 
due large amount noise tiny selection pressure population simply drifts 
notice drift completely eliminated 
populations drift don ran convergence 
bounded deceptive test case illustrates problem known difficult simple ga problem concatenation copies bit trap function 
trap function function unitation number ones bit sub string 
defined follows ae gamma fitness function sum independent sub functions 
previous knowledge location sub functions building blocks hard simple ga combine building blocks different individuals assemble single individual 
order simple ga needs obey schema theorem addition requires large population size thierens goldberg 
case existing population sizing models unable predict accurate population sizes assumption building blocks mix hold 
desired target solution string building blocks solved correctly 
order obey schema theorem regular ga uses selection rate crossover probability 
minimum population size needed order solve runs optimality empirically function evaluations copies bit trap function 

compares gas 
regular ga took average function evaluations reach target solution parameter ga took number 
extensions couple extensions done top 
integration mutation 
problems mutation ga outperform crossover ga important problems benefit combination 
question combine efficient way 
empirical theoretical evidence ga community mutation works best small population sizes crossover works best large population sizes 
crossover ga mutation ga need totally different strategies 
question integrate mutation crossover difficult surely area needs additional research 
extension experiment kind gas 
important mention parameter ga just proposed tied specific implementation 
valid kind crossover ga possible parameter simple ga parameter ga 
restricted parameter simple ga done purpose order exposition clear 
conducted experiments parameter linkage learning ga result powerful algorithm relieves user having set ga parameters relieves user having come special purpose codings operators 
results reported soon 
summary practical approach eliminates need parameters crossover ga illustrated operation described parameter ga implemented 
parameterless ga uses crossover probability selection rate order obey schema theorem fall extreme cases high low selection pressures 
fixing selection rate crossover probability problems look approach similar adopt called standard parameter settings 
case parameter settings backed sound theoretical constitute robust settings 
course possible obtain better performance problems tweaking interested peak performance 
really interested robustness simplicity 
regarding population size parameterless ga tackles running multiple populations cascade manner getting rid ones converge ones drift 
parameter ga bit slower ga starts optimal parameter settings truth knows optimal parameter settings arbitrary real world problem 
technique just requires user press start button 
algorithm runs forever best user happy solution quality waited long decides press button 
users ga technology don necessary ga specialists order 
disseminate usage methods algorithms accurate reliable efficient simple 
date issue parameter settings confusing users 
parameter ga removes great part confusion 
life easier users strongly believe contribute successful applications gas 
far theory concerned parameter ga solid foundations helps narrow existing gap ga theory ga practice 
back 

optimal mutation rates genetic search 
forrest 
ed proceedings fifth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
back schwefel 

evolution strategies variants computational implementation 
winter gal 
eds genetic algorithms engineering computer science chapter pp 

chichester john wiley sons 
jr 

adaptive search simulated evolution 
unpublished doctoral dissertation university michigan ann arbor mi 
university microfilms 
davis 

adapting operator probabilities genetic algorithms 
schaffer 
ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
de jong 

analysis behavior class genetic adaptive systems 
doctoral dissertation university michigan ann arbor 
university microfilms 
goldberg deb 

comparative analysis selection schemes genetic algorithms 
foundations genetic algorithms 
tcga report 
goldberg deb clark 

genetic algorithms noise sizing populations 
complex systems 
goldberg deb thierens 

better understanding mixing genetic algorithms 
journal society instrument control engineers 
grefenstette 

optimization control parameters genetic algorithms 
sage 
ed ieee transactions systems man cybernetics volume smc pp 

new york ieee 
harik 

learning gene linkage efficiently solve problems bounded difficulty genetic algorithms 
doctoral dissertation university michigan ann arbor 
illigal report 
harik cant paz goldberg miller 

gambler ruin problem genetic algorithms sizing populations 
back 
ed proceedings fourth international conference evolutionary computation pp 

new york ieee press 
holland 

adaptation natural artificial systems 
ann arbor mi university michigan press 
mercer sampson 

adaptive search reproductive meta plan 

miller 

noise sampling efficient genetic algorithms 
doctoral dissertation urbana 
illigal report 
muhlenbein 

genetic algorithms really mutation hillclimbing 
parallel problem solving nature ppsn ii 
smith 

adaptively resizing populations algorithm analysis results 
complex systems 
thierens goldberg 

mixing genetic algorithms 
forrest 
ed proceedings fifth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
