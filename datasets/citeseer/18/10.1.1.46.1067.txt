tempo specializing systems applications consel hornof marlet muller thibault 
volanschi irisa inria university rennes france lawall college ohio noy ecole des mines de nantes france tempo partial evaluator designed exploit specialization opportunities systems applications 
obtaining efficient systems increasingly important context pervasive high speed networks interactive multimedia large distributed databases 
tempo developed studying specific applications optimized working backwards create tool perform desired specialization 
tempo consists subcomponents research topics strategy combine simplest subcomponents studies showed needed 
possible simply reused existing technology 
limitations encountered identified fundamental problem developed new techniques overcome 
summarizes development process assesses resulting partial evaluator provides perspectives 

specializing systems programs numerous specialization opportunities exist operating systems programs software engineering reasons general modular consel hornof pu volanschi 
opportunities result way components combined 
example calling contexts generic library functions include invariants exploited 
opportunities created operating system running 
example values known file opened remain invariant permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
delta compose project subsequent reads writes file pu 
take advantage opportunities partial evaluator treat programming language operating systems typically written exploit specialization opportunities due generality modularity 
exploit run time invariants file reads writes 
handle large applications certain operating systems contain lines code 
ensure predictability informing user code transformed specialization 
tempo addresses needs follows reusing existing analyses 
order treat complex constructs programming language tempo includes number standard analyses consel 
dealing pointers imperative features requires alias analysis side effect analysis banning emami 
analyses flow sensitive context insensitive analysis existing research sufficient purposes 
new analysis features 
number improvements binding time analysis necessary exploit aforementioned specialization opportunities hornof 
example return sensitivity needed effectively treat complex way data passed interprocedurally hornof noy hornof :10.1.1.43.8322
template run time specialization 
fundamental challenge exploiting run time invariants generate best possible code amount time cost code generation incurred run time 
tempo provides template run time specializer consel noel noel 
templates automatically generated compiled optimized compile time 
approach minimizes run time costs producing high quality code 
module oriented specialization 
bottleneck large applications located small parts code 
tempo facilitates optimization small parts feature known module oriented specialization consel 
set functions optimized extracted original application reinserted specialization 
interface file describes context functions extracted tempo preserves interface specialization 
visualization tools 
enable systems programmer understand follow specialization process tempo includes visualization tools display results analysis 
tempo specializing systems applications delta 
assessment incorporating features described tempo able successfully specialize systems programs programs domains 
operating systems major concern distributed systems obtaining fast remote procedure call protocol rpc protocol remote procedure look local sun microsystem 
considerable amount dedicated optimizing rpc different operating systems building new implementations manually optimizing critical sections existing code schroeder burrows 
client server interface fixed specialization opportunities exist data encoding decoding functions 
tempo automatically optimize sun rpc commercial rpc implementation de facto standard muller marlet volanschi consel pu goel muller volanschi marlet 
optimized encoding decoding functions ran times faster yielding speedup round trip call 
tempo optimize operating system applications including signal delivery memory allocation 
domains specializing systems programs required development sophisticated partial evaluator 
tempo capable successfully specializing programs domains simpler hand optimized 
scientific algorithms 
significant speedups obtained specializing scientific algorithms cubic spline interpolation romberg integration fast fourier transformation fft noel 
graphics programs 
specializing graphics programs image filtering noel ray tracing proven effective 
software engineering 
tempo software architectures order tightly integrate separate components efficient implementation marlet 
tempo plays key role framework application generator design exploiting fact partial evaluation especially suited specialize interpreters thibault consel thibault 

continuing tempo specialize applications 
additionally tempo core transformation engine pursuing directions widen applicability improve usability 
back specializer 
order extend applicability tempo investigating ways multi language specialization platform 
translating languages fortran java tempo back specializer 
example added front containing delta compose project cfront translator specialize part chorus ipc subsystem written 
developed harissa translator java specialize java programs muller moura consel 
specialization toolkit 
working complementing tempo tools specialization easier non programming language experts 
tools assist module oriented specialization developed collaboration systems researchers oregon graduate institute 
analyze large programs provide information concerning invariant usage allows generic version function replaced specialized version fly 
compiler specialization classes interfaced tempo allows user express specialize program high level specification language volanschi 
developing tool uses profiling information detect bottlenecks specialization opportunities programs 
research supported part sept france telecom cti arpa nsf ccr 
banning 
efficient way find side effects procedure calls aliases variables 
conference record th annual acm symposium principles programming languages san antonio tx usa jan pp 

acm press 
consel hornof el noy volanschi 
uniform approach compile time run time specialization 
danvy gl thiemann eds partial evaluation international seminar dagstuhl castle number lecture notes computer science feb pp 

consel el 
general approach run time specialization application conference record rd annual acm sigplan sigact symposium principles programming languages st petersburg beach fl usa jan pp 

acm press 
consel pu walpole 
incremental specialization key high performance modularity portability operating systems 
partial evaluation semantics program manipulation copenhagen denmark june pp 

acm press 
invited 
emami ghiya hendren 
context sensitive interprocedural pointsto analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation june pp 

acm sigplan notices 
acm press 
hornof 
static analyses effective specialization realistic applications 
ph 
thesis universit de rennes hornof noy 
accurate binding time analysis imperative languages flow context return sensitivity 
acm sigplan symposium partial evaluation semantics program manipulation amsterdam netherlands june pp 

acm press 
publically available www cse ogi edu disc projects toolkit 
java specialization classes compiler publically available www irisa fr compose sc 
tempo specializing systems applications delta hornof noy consel 
effective specialization realistic programs sensitivity 
van hentenryck ed proceedings fourth international symposium static analysis sas volume lecture notes computer science paris france sept pp 

springer verlag 
marlet thibault consel 
mapping software architectures efficient implementations partial evaluation 
conference automated software engineering lake tahoe nevada nov pp 

ieee computer society 
muller marlet volanschi consel pu goel 
fast optimized sun rpc automatic program specialization 
rapport de recherche rr july inria rennes france 
muller moura consel 
harissa flexible efficient java environment mixing bytecode compiled code 
proceedings rd conference object oriented technologies systems portland oregon usa june pp 

usenix 
muller volanschi marlet 
scaling partial evaluation optimizing sun commercial rpc protocol 
acm sigplan symposium partial evaluation semantics program manipulation amsterdam netherlands june pp 

acm press 
el hornof consel lawall 
automatic template runtime specialization implementation experimental study 
rapport de recherche nov irisa rennes france 
pu black consel cowan inouye walpole zhang 
optimistic incremental specialization streamlining commercial operating system 
proceedings acm symposium operating systems principles copper mountain resort usa dec pp 

acm operating systems reviews acm press 
schroeder burrows 
performance firefly rpc 
acm transactions computer systems february 
acm press 
sun microsystem 
nfs network file system protocol specification 
rfc march sun microsystem 
ftp ds internic net rfc txt 
thibault consel 
framework application generator design 
proceedings symposium software reusability may pp 

acm press 
thibault marlet consel 
domain specific language video device drivers design implementation 
conference domain specific languages santa barbara ca oct pp 

usenix 
volanschi consel muller cowan 
declarative specialization object oriented programs 
oopsla conference proceedings atlanta usa oct pp 

acm press 
volanschi muller consel 
safe operating system specialization rpc case study 
workshop record workshop compiler support systems software tucson az usa feb pp 

