expressiveness conceptual data modelling ter hofstede th van der weide published ter hofstede th van der weide 
expressiveness conceptual data modelling 
data knowledge engineering february 
conceptual data modelling techniques aim representation data high level abstraction 
conceptualisation principle states aspects represented deal meaning universe discourse 
conventional conceptual data modelling techniques er niam violate conceptualisation principle dealing objects complex structure 
order represent objects conceptually irrelevant choices 
worse universe discourse adapted suit modelling technique 
objects typically occur domains meta modelling hypermedia cad cam 
extensions existing data modelling technique niam discussed formally defined possible naturally represent objects complex structures having violate conceptualisation principle 
extensions motivated practical point view examples theoretical point view comparison expressive power formal set theory grammar theory 
keywords 
conceptual data modelling hypertext object role models er niam identification 
past years conceptual data modelling techniques introduced 
known examples relational model er approach niam 
conceptualisation principle requires conceptual schemas deal exclusively aspects universe discourse 
aspects irrelevant meaning machine efficiency avoided 
complex application domains contemporary data modelling techniques capable adhering conceptualisation principle 
choices relevant respect leading overspecification worse adapted extra objects introduced 
problems caused lack sufficiently powerful construction mechanisms 
various application domains contain objects complex structures 
documents example field office automation 
objects constructed specific rules book consists sequence chapters chapter consists sequence sections 
rules recursive nature 
recursive structures sequences adequately modelled conventional modelling techniques er niam 
partially supported serc project socrates 
software engineering research centre box ak utrecht netherlands mail hofstede serc nl dept information systems faculty mathematics informatics university nijmegen toernooiveld ed nijmegen netherlands mail cs kun nl domain complex objects important field method engineering metamodelling 
field meta models constructed particular modelling techniques 
meta models capture syntactical structure techniques 
meta models contain complex object types example modelling technique allows decomposition 
natural represent object types flat structures see 
computer aided design cad computer aided manufacturing cam areas complex structures frequently occur 
typical examples part hierarchies recursive nature components part components 
general conceptual data modelling technique introduced predicator set model psm capable representing complex structures natural way 
predicator set model extension predicator model pm turn formalisation niam 
means niam schemas seen psm schemas 
means design procedure supporting construction niam schemas niam philosophy lost psm need extended support additional constructs 
motivation new constructs practical point view provided number examples 
theoretical point view new constructs motivated comparison axioms formal set theory grammar theory 
comparison particularly relevant hypermedia document structures usually described means context free grammars style sgml oda 
implies context free grammars modelled psm document structures 
organisation follows 
section psm introduced informally formally 
main extensions niam power types generalisation 
concept power type compared concept powerset formal set theory 
possible treat set objects object 
second extension concept generalisation enables union different types objects 
concepts psm may combined define recursive object types 
typical example construction formulas 
semantics psm terms populations instantiations 
section concludes typical graphical constraints relation power types 
name suggests psm inspired formal set theory 
section axioms set theory related modelling constructs psm providing indication expressive power 
identification information structures considered respect object instances weak identification respect object types structural identification 
structural identification acts formedness rule complex object types 
schemas structurally identifiable populated 
section notational shorthands introduced facilitate representation complex object types 
notational shorthand schema possible treat schema object type 
particularly useful domain method engineering meta modelling 
second shorthand sequencing especially important relation context free grammars subject section 
section concludes psm schema meta model psm 
describes structure formalisation 
section translation context free grammars psm schemas 
demonstrates expressive power context free grammars embedded psm 
application translation hypertext information structure described means context free grammar represented elegantly psm schema 
predicator set model section starts informal basic components type construction mechanisms psm followed formalisation psm 
formalisation consists parts 
part information structures defined 
information structure psm schema constraints 
second part deals instantiations information structures called populations 
gives platform constraints exclusion mechanism populations see 
typical constraints relation power types considered 
key concepts data modelling concept relation type 
er niam relation type considered association object types 
graphical representation binary relation object types niam style shown corresponding er diagram depicted 
relation type consists number roles denote particular functions played object types relation type 
oe ae oe ae niam relation type gamma gamma gamma gamma corresponding er diagram see roles ordered 
corresponds tuple oriented approach relation defined subset cartesian product 
disadvantage approach algebraic operators lack useful properties commutativity associativity 
modern approach mapping mechanism describe relations mapping oriented approach see 
example approach corresponds disconnecting relation yielding situation 
oe ae oe ae disconnecting roles note represented format relation types called fact types considered object types referred fact 
fact compared notion aggregation semantic data modelling mechanism allows creation types instances tuples 
basic building element connection object type role called predicator term introduced 
predicator connecting predicator connects note concept predicator appears niam schema unnamed drawing object er schema visualised 
sequel prefer niam drawing style 
psm pm relation type considered set 
relation type considered association objects types 
full consequence approach draw relation type shown 
relation type set prefer style style due notational simplicity 
power types psm notion power type exists 
power types compared power sets conventional set theory 
instance power type set instances element type 
instance power type identified instances element type just set identified elements formal set theory axiom extensionality see 
simple example shown 
oe ae ship name name oe ae ship code oe oe convoy simple example power type example known convoy problem object type convoy power type ship 
result instance object type convoy set instances ship 
identified constituent ships ships identified ship code 
schema graphical constraints occur 
black dot object type ship example total role constraint expresses instance ship play role name 
double arrow role example uniqueness constraint expresses instances ship play role 
formal semantics graphical constraints 
convoy problem expressible terms niam er schema 
consider example schema 
schema implicitly states convoy consists number ships means role name contains 
contrary convoy identified ships schema needs form identification example artificial convoy code 
clearly violation conceptualisation principle 
notion power typing notion grouping introduced ifo data model 
notion provides considerable extension expressiveness 
illustration expressive power power types chemical reactions example discussed 
considered universe discourse deals simple chemical reactions 
chemical reaction consumes set input substances associated quantities produces set output substances corresponding quantities 
oe ae convoy contains oe ae ship name name oe ae ship code oe oe oe niam schema belonging chemical reaction cr id substance chem code quantity int input output indicator fi og gamma gamma gamma gamma gamma gamma reaction schema pi pi pi ch gamma ch oh ch gamma cho chemical reactions er universe discourse modelled er schema terms relationship shown 
relation attribute cr id identify chemical reactions 
entity type substance describes substances subject chemical reaction entity type quantity describes quantity 
input output indicator distinction input output substances chemical reaction 
problem solution superfluous identification chemical reaction 
chemical reactions sufficiently important name 
just identified description terms goes comes 
second problem solution allow addition chemical reaction elementary update 
caused fact model object instances needed denote reaction 
power type offers better opportunity model universe discourse see 
model chemical reaction modelled relationship set input set output 
schema better understood studying sample population see 
sample population style nested relations encountered nf datamodel 
main difference nf uses nested table heading nested tuples 
solution solves update problem mentioned 
model chemical reaction denoted single object instance 
mentioned elementary update problem solved 
consequence update operation chemical reaction considered single operation psm 
furthermore psm schema separate identification chemical reactions needed input output indicator 
specialisation specialisation referred subtyping niam mechanism representing possibly overlapping subtypes object type 
specialisation applied substance quantity int oe input output oe chemical reaction theta theta theta input output ch gamma ch oh ch gamma cho chemical reactions specific instances object type certain facts recorded 
suppose example adults persons age greater equal interested cars 
situation captured psm schema 
oe ae adult oe ae car owns owned oe ae person oe ae age oeoe example specialisation specialisation relation subtype supertype implies instances subtype instances supertype adult person 
proper specialisation required subtypes defined terms supertypes 
decision criterion referred subtype defining rule see 
subtype defining rule adult adult person age identification subtypes derived supertypes 
ongoing example persons identified name adults identified name 
specialisation relations organised called specialisation hierarchies 
specialisation hierarchy fact hierarchy strict sense acyclic directed graph unique top 
top referred see 
objects inherit properties ancestors specialisation hierarchy 
characteristic specialisation excludes fact types power types occurring subtypes 
consider example case ternary fact type subtype binary fact type 
clearly leads contradiction 
problems occur fact types power types specialised see example 
fact type works subtype works temporarily 
need explicitly represent subtype fact type derived supertype 
consequently fact types power types act 
approach correspondence requirements stated 
oe ae carnivore oe ae oe ae herbivore oe ae oe ae oe ae animal oe oe oe ae type gamma gamma gamma gamma gamma gamma gamma gamma gamma example specialisation hierarchy example specialisation hierarchy flesh eater spec animal plant eater spec animal carnivore spec flesh eater spec flesh eater spec plant eater herbivore spec plant eater specialisation relation represented arrow 
consequence object type carnivore animal 
subtype defining rules flesh eater animal type animal plant eater animal type animal carnivore animal type animal animal type animal herbivore animal type animal generalisation generalisation mechanism allows creation new object types uniting existing object types 
contrary name suggests generalisation inverse specialisation 
specialisation generalisation originate different axioms set theory see section different expressive power 
generalisation typically required generalised object type covered constituent object types specifiers 
decision criterion case specialisation subtype defining rule necessary 
furthermore properties inherited upward generalisation hierarchy downward case specialisation see 
implies identification generalised object type depends identification specifiers 
nature generalisation apparent fact type power type generalised object type 
oe ae variable oe ae oe ae formula oe arg arg example generalisation example example generalisation shown 
formula may single variable constructed function say simpler formulas 
note structure instances formula determined specifier variable come 
example shows generalisation define recursive object types 
possible ifo data model object types hierarchical structures 
logical data model see object types directed graphs may contain cycles 
stated generalisation specialisation entirely different notions 
situations solved specialisation complex subtype defining rules involved situations solved generalisation recursive structures involved formula example 
niam generalisation usually modelled specialisation 
leads violation conceptualisation principle discussed example 
consider individually priced products 
product car house 
car identified registration number house identified combination zip code house number 
note uniqueness combination zip code house number modelled means encircled graphical notation uniqueness constraint fact types 
product considered generic term house car 
products price associated 
niam universe discourse modelled schema 
schema suffers overspecification 
firstly special label type code introduced order identify products 
secondly constraint subtypes car house needed express subtypes total disjunct 
thirdly special fact type special object type product type required determine type product 
determination forms subtype defining rule products see 
extra object types conceptually relevant 
considered violation conceptualisation principle 
concept generalisation avoided 
appropriate schema universe discourse depicted 
schema label type code longer needed products inherit identification cars houses 
furthermore constraint expressing car house disjunct total respect product follows directly strong typing rule generalisation rule see section 
oe ae reg nr oe ae zipcode oe ae car oe ae house oe ae house nr oe ae product code oe ae amount oe ae gamma gamma gamma gamma oe oe oe price oe having oe ffl subtype defining rules car product having product type car house product having product type house specialisation generalisation zipcode car reg nr house house nr product amount oe oe price example generalisation information structure discussion previous section leads definition information structure called label type set structure consisting basic components 
finite set 

set object types 
partition set elements called fact types 
fact types object types 
set power types 
power types object types 
function base base predicator object part predicator 

function elt function yields element type power type 

partial order spec theta object types capturing specialisation 
set atomic object types defined 

partial order gen theta object types expressing generalisation 
auxiliary function fact defined fact point cyclic composition power types excluded example power types element type formally elt 
section see cyclic structures excluded requires structural identification 
structural identification considered rule formedness object types see 
fact types power types considered different concepts psm due different interpretation concepts 
different sorts atomic object types entity types label types 
difference labels contrast entities represented reproduced communication medium 
depending medium distinguish text graphics sound video 
term multimedia collective noun 
typical examples label types name number code 
typical example entity type person 
important note instances occurrences object types part information structure 
instantiations populations introduced section 
example example information structure shown fp vg fa hg ff hg feg fa dg fa dg oe ae oe ae oe ae oe ae oe ae example information structure fp qg fr tg fu vg 
respect base fact base fact base fact elt specialisation concept specialisation defined partial order asymmetric transitive spec object types spec convention spec interpreted specialisation subtype note infix style notation preferred spec written spec 
signature spec implies spec definition spec implies atomic object types occur subtypes 
specialisation extension concept subtyping atomic object types specialised 
axioms prevent cycles specialisation structures require transitively closed 
psm asymmetry spec spec psm transitivity spec spec spec specialisation networks function similar top operator lattice theory 
fact function reflects requirement stated section specialisation network unique top 
requirement direct consequence fact subtypes inherit identification 
properties psm cohesion spec psm strictness spec furthermore required subtype hierarchies label types entity types interfere psm separation axioms powerful properties derived 
lemma spec proof suppose spec distinguish cases 
spec spec spec spec contradict asymmetry spec 

spec spec spec contradict asymmetry spec 
corollary idempotency proof suppose 
applying strictness rule yields spec 
contradicts previous lemma 
lemma fact types power types proof suppose cohesion rule derived spec 
definition spec implies moment require power type element type subtype formally elt spec 
excluded notion structural identification see section 
example contains example specialisation hierarchy spec spec oe ae oe ae oe ae oe ae oe ae qk gamma gamma gamma example specialisation hierarchy spec spec spec specialisation relation spec derived transitivity represented arrow 
consequence object types composed object type generalisation concept generalisation formally introduced partial order asymmetric transitive gen theta convention gen interpreted generalisation specifier 
psm asymmetry gen gen psm transitivity gen gen gen note definition gen implies generalised object types atomic 
predicate gen generalised object types defined follows gen gen generalisation specialisation conflicting due inheritance structure 
consider example 
specialisation generalisation specialisation relation requires identification depend identification generalisation relation requires identification depend identification terms populations see section contradiction formulated different way 
specialisation case requires population instances object type instances object type fulfil subtype defining rule generalisation requires instances exactly instances object type avoid conflicts generalised object types required psm gen generalisation go boundaries specialisation hierarchy oe ae oe ae oe ae conflicting generalisation specialisation psm gen lemma gen gen spec proof suppose gen gen application psm yields 
cohesion rule psm conclude spec populations information structure frame part real world called universe discourse 
state corresponds called instantiation population information structure vice versa 
idea states previously mentioned 
furthermore state transition corresponding transition populations information structure 
formulated universe discourse isomorphic set possible populations information structure transition relation 
statement verified formally universe discourse part real world 
approach population pop information structure hp gen spec base value assignment object types pop 
omega gamma conforming structure prescribed respecting generalisation specialisation hierarchies gen spec 
denoted pop 
sequel omit quantifications pop 
population assigns set instances object type instances come pre existing set omega gamma instances may structure may set 
structure conform structure object types assigned 
specified means number axioms stated sequel section 
respecting specialisation hierarchy reflected specialisation rule spec pop pop intuitively object types reasons values common instantiation 
example value object type instantiation value object type 
example suppose gen value population value third example object types may share values power types element types may share values 
formalised concept type relatedness captured binary relation object types type related proven derivation rules gen elt elt strong typing rule expresses instantiations object types instances common type related 
pop pop respecting generalisation hierarchy reflected generalisation rule gen pop phi pop gen psi population atomic object type just set values 
population fact type set tuples mappings fact type values type 
referred conformity rule 
pop theta omega pop base population power types consists sets instances population element types 
called power type rule pop pop elt gamma example example population information structure pop fa pop fb pop fc pop fd pop ffa fa gg pop ffq fq gg pop fr fq pop phi fu fa fu fa psi constraints specification universe discourse contain components 
description set states called underlying information structure 

description set transitions usually set actions bring transitions 
focus description set states 
accepted method describing sets formal grammars 
fact information structure denoted grammar terms communication information system formulated see 
information systems description closely follows style datatypes 
information structure described set elementary fact types set object types 
state population instantiation fact types 
usually populations correspond states excluded 
done imposing constraints information structure 
static constraints simply exclude invalid populations 
dynamic constraints forbid certain transitions may render states unreachable initial state 
unreachable states valid 
invalid populations unreachable populations states classification populations style describing called superset technique 
technique cases precise cumbersome 
looks easy way describe superset exclude invalid elements imposing constraints elements superset 
information formalisation see 
section restrict typical static constraints relation power typing 
noted constraints introduced pm including known constraints total role uniqueness constraint applicable 
definition relational operators projection selection unnesting part relational algebra introduced pm refer 
appendix contains complete list types constraints graphical representations 
exclusion constraint power type may property population instances disjunct 
property expressed exclusion constraint 
graphically constraint representation exclusion constraint fact types connected power type involved 
example exclusion constraint shown 
example groups students receive mark course 
exclusion constraint expresses student member tutorial groups 
oe ae student attends oe oe ae course tutorial group gamma upsilon sigma xi pi oe ae mark results example exclusion constraint formally exclusion constraint singleton set fgg population pop satisfies exclusion constraint denoted pop exclusion pop cover constraint requirement instance certain object type occur instance power type expressed cover constraint 
graphically constraint depicted total role constraint connected power type involved 
example shown student member tutorial group 
oe ae student attends oe oe ae course tutorial group gamma upsilon sigma xi pi oe ae mark results example cover constraint cover constraint may assigned subtype power type 
population subtype cover population element type 
formally cover constraint singleton set fgg population pop satisfies cover constraint pop cover pop pop elt naturally possible combine exclusion constraint cover constraint 
way expressed power type partition 
example shown student member precisely tutorial group 
cardinality constraint may case instances power types elements 
cardinality constraint enforces instances power type consist oe ae student attends oe oe ae course tutorial group gamma upsilon sigma xi pi upsilon sigma xi pi oe ae mark results example partition constraint elements arbitrary natural numbers 
graphically cardinality constraint depicted occurrence frequency constraint connected power type involved 
example consider tutorial groups reasonable size 
oe ae student attends oe oe ae course tutorial group gamma gamma upsilon sigma xi pi upsilon sigma xi pi delta delta delta upsilon sigma xi pi oe ae mark results example cardinality constraint formally cardinality constraint tuple hg mi population pop satisfies cardinality constraint pop cardinality pop jpj membership constraint membership constraint express instances element instances 
consider example extension convoy example 
convoy 
membership constraint expresses convoy part convoy 
oe ae ship convoy flag ship upsilon sigma xi pi example membership constraint formally membership constraint tuple hp qi fact fact elt base base 
population satisfies membership constraint pop member pop fact sequel write sigma pop pop population information structure sigma pop pop satisfies constraints specified 
motivation axioms set theory section premises psm motivated universality data model argued 
approach compare model axioms formal set theory called zermelo fraenkel system axioms see example 
extensionality consider axiom extensionality states set characterised elements axiom states sets having elements equal 
axiom encountered set oriented data models entity types fact types determined instances 
psm axiom motivation concept power type 
instances power types equal elements 
results observation mentioned section power types psm identified terms element types 
specialisation subset schema comprehension schema axiom schema allows construction new set set selection formula oe context sets xn oe xn note superset essential schema omission yield known russell paradox results choosing selection formula oe paradox easily derived expression comprehension schema corresponds notion specialisation referred subtyping usual data modelling 
psm defined subtype formula oe corresponds subtype defining rule 
pop phi pop oe psi derivation replacement schema general schema comprehension schema 
formula considered functional behaviour xn xn new set constructed applying elements set elements exactly correspond theta xn schema replaced corresponding replacement schema corresponds notion derived object types derived information 
pop phi pop psi population defined terms population derivation rule 
express complex derivation rules constraint language introduced psm 
graphical constraints general powerful purpose 
power type special notion formal set theory notion power set 
applying clever numbering schema subsets see easily shown concept derivable 
powerset defined phi psi power set axiom enforces existence operator 
notion power set corresponds notion power type psm 
instances power types sets instances element type necessarily possible sets instances 
generalisation motivation concept generalisation union axiom 
axiom states construct set set uniting elements set denoted phi psi context psm call generalisation elements 
special case suppose oe ae oe ae oe ae fx yg union object types fx yg see 
fx yg gen 
fx yg gen applying generalisation rule yields pop fa bg pop pop enumeration pair set axiom states sets set denoted fx yg exactly members 
psm interpreted enumeration constraint set objects associated label type restricting population label type objects 
case label type objects enumeration constraint associating fx yg enforces pop fx yg finite axiom foundation states sets hierarchically constructed infinite descending element chains 
corresponds notion structural identification discussed section 
structural identification excludes definition types formed 
example cyclic power typing 
suppose object types elt elt correspond sets 
case founded 
example fact type fp base base correspond set theta founded 
general object types structurally identifiable correspond sets founded 
see example finite hierarchy 
case infinite descending element chains occur 
set platoon set soldiers soldiers atomic entities 
upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi platoon upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi oe ae soldier finite hierarchy identification section discuss identification 
distinction weak identification structural identification 
informally population weakly identified objects properties equal 
structural identification defined schema level guarantees weak identification population schema properties 
weak identification population psm schema maps object types sets instances 
applications difference instances relevant need expressible 
typical application chicken farm eggs important entities 
difference eggs need expressible number importance 
cases difference objects expressible model speak implicit identification 
usually difference objects expressible terms model 
cases term explicit identification 
labels elementary data types considered representable directly 
result label identified 
assume equality operator labels 
entities hand represented properties 
consequence entities properties distinguishable considered 
properties entity recorded facts plays role 
population weakly identified entity values properties equal 
formal definition refer 
composite objects introduced tuples identified components 
means instances fact types equal components equal 
power type instances sets identified elements 
consequently population pop values power type information structures may contain cycles fact type contains directly indirectly oe ae oe ae oe oe cyclic object type component 
example 
consequence population structure may contain object contains component 
example object pop hp ai 
cyclic objects called virtual objects 
structural identification section considered weak identification guaranteed properties schema constraints particular 
psm schema sigma structural identifiable iff 
sigma closed labels label type occurs total role constraint total base motivation enforce absence unused labels 

object types identified identifiable identification object seen fixed set properties provide unique description terms labels 
identification guarantees valid population weakly identified 
predicate identifiable defined terms structure objects 
respective object classes discussed subsequently 
label types label type obviously identifiable 
fact types composed object type generally set may conclude identifiable components identifiable identifiable base power types power type identifiable identifiable elt stated sets identified elements 
entity types entity type distinguish cases 
takes inherits identification identifiable pop provided subtype membership decidable properties constraints schema 
expressed schema subtype defining rules see 
second case identification inheritance arises object generalisation 
case object type inherits identification specifiers 
precisely generalised object type gen identifiable gen identifiable note require identification generalised object identification specifiers 
reason identification specifier may depend identification generalised object type 
example identification fact type dependent identification formula 
identification formula depends turn identification variable 
leaves identification object types generalisation object type 
case looking identification paths denominations 
denominations form uniquely denoting object object type population 
set possible names denominations defined phi base total fpg unique fpg psi identification object type depends existence set middle names constituting called identifier set ffl unique ffl fact ffl identifiable definition unique expresses uniqueness constraint theorem demonstrates attained purpose guaranteeing weak identification structural identification 
proof straightforward analogous proof corresponding theorem 
theorem sigma identifiable population weakly identified identifiability power types fact types expresses populated objects 
example virtual object infinite list 
psm schema modelling infinite list shown 
oe ae base oe ae oe ae infinite list schema infinite list virtual objects introduced fruitful elements computing see example 
restrict non virtual objects 
non identifiable object type example shows example object type structurally identifiable 
gen elt object type populated non virtual objects 
situation interpreted set theory yield sets sets founded see section 
problems occur specifier identifiable 
note gen possible gen relation theta problem structural identification related predictive type theory see 
considering clear instances object type properly typed 
types cyclic structures predictive type theory enforces types hierarchical structures 
cases may difficult establish object types fulfil conditions predicate identifiable 
lemma topological sort see may useful 
lemma nesting criterion psm schema identifiable exists monotone nest counter function 
base 
elt 
gen gen proof monotone nest counter obtained numbering atomic non generalised object types arbitrary order deriving numbers object types rules identifiability 
corollary psm schema identifiable information structure contain cyclic power type structures 
example consider 
nesting criterion identifiability schema imply existence monotone nest counter conflicting requirements 
oe ae oe ae oe ae standard names identifiable information structure depicted identification object type depends identification standard name dependent concluded presence standard names sufficient conclude identifiability 
schema sequencing section notational shorthands introduced schema sequencing facilitate specification complex object types 
examples discussed shorthands order demonstrate elegance modelling 
section concludes meta model psm expressed psm schema 
indication capability psm model complex structures 
schema need decomposition large systems generally recognised 
known example decomposition mechanism activity graphs 
activity graph processes data may subject decomposition 
data modelling techniques usually provide decomposition mechanism 
psm schema introduced purpose 
schema construction mechanism allows define part schema object type 
instances object types populations corresponding schemas 
result objectified schemas valid information structures 
formally sigma schema objectified object type syntactical requirement sigma valid psm schema 
furthermore populations satisfy decomposition rule meaning instances valid populations sigma pop sigma oe ae oe ae pa pf pb oe ae ap oe ae bp fp oe ae oe ae fg schema schema elementary concept defined terms concepts power type fact type 
idea construct power type object type schema objectified 
power types base predicator part fact type see 
fact type relate sets instances object types involved schema part schema instance 
example activity graphs ffl ffi fi fl sample activity graphs schema elegantly define meta model activity graphs 
sample activity graphs depicted 
oe ae activity oe oe oe ae state activity graph upsilon sigma xi pi upsilon sigma xi pi delta delta delta delta decomposed decomposition oe oe decomposition decomposed oe meta model activity graphs activity graphs bipartite directed graphs consisting activities states 
direction arrow activity state indicates state input output activity 
activities states decomposed activity graphs 
rightmost activity graph shows decomposition activity 
meta model activity graphs depicted 
seen activity graph objectified schema consisting activities states input output relations 
binary relations activity activity graph state activity graph represent decomposition relation 
sequencing sequencing construction mechanism allows define new object type instances tuples arbitrary length object type 
graphically sequence type depicted rectangle associated object type 
construction mechanism elementary 
translation sequence type generalised object type shown 
example parameter passing mechanism example consider function overloading language 
function may definitions definition different types parameters 
languages number parameters fixed algol 
assume parameter type sequence function may contain output parameter type uniquely determined input parameter types ordering 
peculiar universe discourse described psm schema 
schema parameter type sequence sequence type 
oe ae oe ae oe ae oe ae oe ae extend hd tl sequencing oe ae function oe oe ae parameter type parameter type sequence output oe gamma gamma gamma oe ae input example sequencing example meta model section concluded meta model psm constraints introduced section expressed psm schema 
meta model shown 
meta model contains label types meta model generalised object types power type elt meta model contains fact types gen fg spec fs fu base fb elt fx bases informally 
meta model demonstrates expressive power psm regard modelling complex structures 
express complex structure 
relation context free grammars section discussed expressive power context free grammars embedded psm 
shown context free grammar translated psm schema 
upsilon sigma xi pi upsilon sigma xi pi elt gamma gamma base gen oe oe spec hhh oe meta model psm context free grammars employed describing hypertext information structures see example translation shows feasibility psm describing hypertext information structures 
translation generalised object types play crucial role 
reverse translation describing psm schema translated context free grammar 
conclude larger example syntactical description path expressions form basis advanced languages data manipulation style niam 
embedding context free grammars start known definition context free grammar 
definition context free grammar tuple hn sigma pi si finite set nonterminal symbols sigma finite set terminal symbols initial symbol pi set production rules form 
sigma sequel restrict production rules non empty right hand side 
restriction severe possibility generating empty string lost see example 
empty string correspond information structure object types 
describe translation delta context free psm schema delta 
symbol interpreted atomic object type 
nonterminal symbols interpreted entity types terminal symbols interpreted label types 
pi production rule form interpret rule description generalisation object type right hand side specifier generalisation considered objectified fact type fact type consists sn object oe ae oe ae oe ae sn ps ps psn oe ae pf translation production rules types respectively bases 
translation production rules depicted graphically 
concludes translation context free grammar psm schema 
note power types result translation 
oe ae oe ae gamma gamma gamma oe ae example translation context free grammar example context free grammar production rules hai hai hai hai hbi hbi resulting psm schema delta shown 
may convenient allow grammar rules form shorthand grammar rules st case sequence types introduced section grammar translation 
simplified translation production rule shown possible case non terminals single defining production rule 
example full simplified translation 
example consider grammar style sgml describing structure book 
oe ae oe ae oe ae oe ae oe ae simplified translation oe ae char string oe ae title oe ae section sections phi phi phi phi phi phi phi phi phi phi theta theta theta theta theta oe ae chapter contents oe ae book xi xi xi xi xi xi xi xi xi xi xi xi example translation sgml structure results psm schema 
important note psm schema resulting translation context free grammar exhibit explicitly order symbols right hand side production rules 
corresponds mapping oriented view right hand side production rule usual tuple oriented view 
resulting psm schema viewed representation syntax corresponding grammar hand 
oe ae char oe ae book grammar box grammars incorporated psm schema grammar box 
example grammar box depicted 
grammar box takes inputs object types correspond terminal symbols 
output grammar box start symbol 
respect context free grammars bad schema result context free grammar satisfy rules 
firstly useless symbols symbols occur derivation start symbol 
terms psm symbols correspond superfluous object types 
secondly object types correspond terminal symbols identified making grammar box interpreted label types 
identification object type corresponding start symbol grammar depends structure grammar 
theorem shows proper identification precisely corresponds nonterminal symbols grammar 
nonterminal productive identifiable 
grammar productive nonterminal symbols called universally productive 
test property done linear time 
theorem hn sigma pi si context free grammar delta corresponding predicator set schema sigma identifiable proof object types correspond terminal symbols structurally identifiable correspond label types 
consider translation production rules schema fragments see 
see identification requirement object types correspond nonterminal symbol rewritten applying identification rule generalised object types rule identifiable furthermore productive nonterminal symbol exists derivation resulting string contain terminal symbols 
derivation frame identification extended example conclude example describes relevant subset language dealing path expressions 
language introduced natural language manipulation niam schemata 
oe ae path expres sion gamma gamma ff omega phi psi expres sion definition path expressions object role models concept path expressions introduced means conveniently selecting specific sets information 
consider simple subset governed syntactically syntax consider shows corresponding psm schema 
meaning language follows 
path expression simplest form sequence 
case sequence describes chain joining 
logical connectives counterpart intersection union 
new relations formed specifying new associated value 
mapping oriented view relations prefer power type construct sequence mechanism 
peter bruza contribution translation context free grammars predicator set schemas 
furthermore gerard denis verhoef comments earlier version 
appendix legend graphical symbols appendix contains overview symbols 
table see symbols object types 
table see notational conventions generalisation specialisation 
table shows graphical representations constraints 
object type label type role predicator oe ae power type sequence type grammar box table legend object type symbols generalisation specialisation table legend isa relationships oe uniqueness constraint single fact type ff omega phi psi uniqueness constraint fact types ff omega phi psi ffl total role cover constraint ff omega phi psi occurrence frequency constraint cardinality constraint ff omega phi psi theta exclusion constraint ff omega phi psi membership constraint ff omega phi psi subset constraint ff omega phi psi equality constraint ff omega phi psi fx enumeration constraint table legend constraints abiteboul hull 
ifo formal semantic database model 
acm transactions database systems december 
bird wadler 
functional programming 
prentice hall new york 
van ter hofstede th van der weide 
semantics verification object role models 
information systems october 
bruza th van der weide 
level hypermedia improved architecture hypertext 
tjoa wagner editors proceedings data base expert system applications conference dexa pages 
springer verlag 
chen 
entity relationship model unified view data 
acm transactions database systems march 
codd 
relational model data large shared data banks 
communications acm 
crossley ash williams 
mathematical logic 
oxford university press 

deterministic entity relationship modelling 
technical report department information systems university nijmegen nijmegen netherlands 
th van der weide 
formal description top model 
technical report department information systems university nijmegen nijmegen netherlands 
neuhold 
formal techniques data base design 
springer verlag 
van editor 
concepts terminology conceptual schema information base 
publ 
nr 
iso tc sc 
harrison 
formal language theory 
addison wesley reading ma 
hatcher 
logical foundations mathematics 
pergamon press 
ter hofstede th van der weide 
formalisation techniques chopping methodology jungle 
information software technology january 
ter hofstede th van der weide 
expressiveness conceptual data modelling 
data knowledge engineering february 
hull king 
semantic database modelling survey applications research issues 
computing surveys september 
hunter nielsen 
oda document architecture open systems 
computer communications april 
iso 
information processing text office systems standard general markup language sgml 
iso 
iso 
information processing text office systems office document architecture oda interchange format part 
iso 
knuth 
fundamental algorithms volume art computer programming 
addison wesley 
kuper vardi 
expressive power logical data model 
proceedings acm sigmod international conference management data pages austin texas 
acm 
maier 
theory relational databases 
computer science press 
meersman 
conceptual language 
research report international centre information analysis services control data belgium brussels 
meyer 
theory programming languages 
prentice hall englewood cliffs new jersey 
nijssen halpin 
conceptual schema relational database design fact oriented approach 
prentice hall sydney australia 
schek scholl 
relational model relation valued attributes 
information systems 

eine auf petri analyse und teil zur bei der entwicklung von 
phd thesis berlin university technology berlin germany 
smith 
standard generalized markup language related standards 
computer communications april 
van der spiegel bruza th van der weide 
transaction model hypertext 
karagiannis editor proceedings data base expert system applications conference dexa pages 
springer verlag 
stroustrup 
programming language 
addison wesley publishing 
de 
rule generation conceptual database updates 
proceedings ifip tc working conference knowledge data 
de meersman 
user guide 
research report international centre information analysis services control data belgium brussels 
de meersman 
cris case workbench niam 
olle stuart editors computerized assistance information systems life cycle pages amsterdam netherlands 
north holland ifip 
verhoef ter hofstede 
structuring modelling knowledge case shells 
andersen bubenko lvberg editors proceedings third international conference caise advanced information systems engineering volume lecture notes computer science pages trondheim norway may 
wand weber 
ontological analysis fundamental information systems concepts 
proceedings ninth international conference information systems pages november 
th van der weide ter hofstede van 
determining semantics complex uniqueness constraints 
computer journal april 

case repository database application 
proceedings symposium systems analysis design research strategy atlanta georgia 

niam information analysis method theory practice 
kluwer academic publishers 
