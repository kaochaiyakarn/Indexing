logic higher order language reasoning objects inheritance scheme michael kifer department computer science suny stony brook stony brook ny georg lausen fakultat fur mathematik und informatik universitat mannheim mannheim west germany june propose database logic accounts clean declarative fashion objectoriented features object identity complex objects inheritance methods furthermore database schema part object language allows user browse schema data declarative formalism 
proposed logic formal semantics sound complete resolution proof procedure computationally attractive 
supported part nsf dcr partially performed visiting university mannheim germany object oriented approach databases generated considerable interest community past years 
term object oriented loosely defined number concepts identified salient features approach 
ban sb weg number surveys concepts complex objects object identity methods inheritance 
reasons interest object oriented database languages show promise overcoming called impedance mismatch mai programming database languages 
different deductive approach gained enormous popularity databases programming languages 
logic programming full fledged computational formalism database specification language proponents deductive approach argued capable overcoming mismatch problem 
form approaches shortcomings 
main problem object oriented approach lack formal semantics traditionally considered important databases 
hand deductive databases normally flat data model support object identity data abstraction 
expected combining paradigms yield significant benefits 
number attempts combine approaches ab ag bk bnt cw kw kv mai rks reported literature opinion succeeds meeting goals 
approaches support object identity restrict kinds complex objects queries support inheritance limit deduction propose formalism called frame logic abbr 
logic full fledged logic achieving goals listed addition suitable defining manipulating database schema 
implications frame languages ai fk min essentially scaled versions complex objects identity inheritance deduction 
connection name logic derived 
reason inheritance schema need capabilities higher order logics 
usually powerful useful purposes 
number researchers suggested useful parts higher order logics order semantics encoding predicate calculus hay mcc 
provides indirect semantics true spirit object oriented programming frame languages ai 
contrast propose logic appearance higher order logic tractable natural direct order semantics 
precisely classification logic higher order syntax order semantics 
sound complete proof procedure logic described full 
extension kw turn maier logic mai 
kw distinction objects classes relationships maintained main reason student dept string person empl children john children person young assistant cs cs cs ee mary bob faculty bob mary sally john phil part hierarchy inheritance methods schema reasoned formalisms 
organized follows 
section syntax semantics logic section presents skolem herbrand theorems section illustrate higher order capabilities logic 
syntax semantics logic section describe proposed logic means example followed formal account syntax semantics 
logic example developing logic motivated desire capture logically clean way number scenarios salient common features depicted way example figures 
shows part hierarchy 
classes individual objects taken domain organized lattice 
asserts faculty assistant employees student empl persons mary cs strings mary faculty sally student 
notice lattice ordered respect definedness ordering denotational semantics equivalently respect relative knowledge content gin 
instance statement assistant john john assistant informative empl john assistant employee vice versa 
assistant knowledge content located empl 
general class located instances 
furthermore note classes reified placed domain instances 
object empl viewed instance superclass person time class objects located lattice 
presents facts employees students clause says object bob faculty name bob notice bob id object bob string representing bob name 
additionally clause states bob works department cs department name cs manager employee denoted constant phil 
clauses similar information mary john sally 
note friends attribute mary record set valued syntactically expressed means set constructor syntax mai kw cw 
clauses provide general information classes faculty students empl faculty normally supervised faculty middle aged students normally young clause rule stating employee supervisor manager department employee works 
clause rule defining method person method children function argument returns set persons containing children common notice term children appears clause different roles head attribute position denotes method object position body denotes id object content set children ground instance term say children mary different roles denotes object representing mary children function person returns possibly empty set children mary person 
logic syntactic term may denote different things depending context appears 
feature allows pose meta queries objects retrieve set objects represent labels defined certain object 
applications method children demonstrated queries 
query asks father mary child sally requests children mary phil 
query requesting information middle aged employees working cs departments 
particularly employee requesting supervisor age department 
expected answer query bob supervisor age works cs mary supervisor faculty age works cs see bob answer observe bob working cs department bob age value belonging class see 
value supervisor facts faculty bob name bob age works dept cs dname cs empl phil faculty mary name 
mary age friends works dept cs dname cs assistant john name john works cs dname cs student sally age general class information faculty supervisor faculty age student age young empl supervisor empl rules supervisor empl works dept empl children fzg person children obj children members zg person children obj children members zg queries mary children 
mary children phil fzg 
empl supervisor age works dname 
cs 
sample database partly inferred rule partly inherited general description class faculty 
rule suggests bob supervisor phil hand faculty bob supervisor class faculty looking observe phil instance faculty semantics logic suggests value supervisor bob lub phil faculty 
see 
information phil supervisor inconsistent 
clause retrieved mary age middle aged person 
hand object denoted constant john retrieved john student inherits young young instance 
restriction query dropped clause retrieved john supervisor phil age young works cs supervisor john inferred rule john working cs due clause department cs managed phil 
interesting point bob john faculty subject restriction imposed clause supervisor faculty 
contradiction john supervisor phil arises 
additional important observation disagreements attribute values need result inconsistency bob case 
instance sally student inherits young 
logic logically entails sally age lub young 
example figures point logic dealing higherorder concepts 
instance attribute friends essentially set valued function person returns set persons 
similarly user think objects lattice displayed sets ordered subset relation higher order intuitions develop programs models 
underlying semantics formally remains order see details allows overcome difficulties normally associated truly higher order theories 
order behaviour respect sets achieved introducing typing single valued set valued functions mix 
furthermore formally logic flat sets model arbitrarily deeply nested sets natural way 
logic shares behaviour respect sets related formalisms cw kw discussion kw 
order behaviour respect class subclass hierarchy achieved defining lattice structure set objects classes allows model sets quite authentic inexpensive way 
syntax alphabet logic consists set basic objects set object constructors infinite set variables usual logic connectives quantifiers objects logic complex objects usual sense classes objects 
approaches treat classes instances inherently different entities emphasize distinction 
instance object student viewed representing class students individual student instance time instance superclass represented object person 
logic classes meaning frame formalisms fk min sense class viewed instance subset superclass 
feature largely responsible fact inheritance naturally built semantics logic contrasting algorithmically defined inheritance approaches 
basic objects elements constants logic 
object constructors elements logically function symbols arity construct new objects 
members viewed ary object constructors convenient consider separately assume disjoint 
id term term composed function symbols object constructors constants basic objects variables usual way 
set ground variable free id terms denoted show essentially plays role herbrand universe logic 
conceptually id terms viewed objects object abstractions commonly referred object identity kc 
objects represented id terms constants non basic objects best perceived constructed simpler objects 
instance object university state taken class representing universities object university class universities new york state assuming instance class state 
logic mai kw predecessor logic distinction objects labels viewed exclusively binary relations objects 
distinction difficult reason entities relationships uniform framework traced entity relationship model entities objects relationships labels constitute disjoint categories 
logic object viewed entity relationship depending situation syntactic position formula 
role label object type label single valued called functional set valued type occurrence label determined context label appears 
discussion appears 
language logic consists set formulae constructed alphabet symbols 
formulae built atomic formulae means usual connectives quantifiers 
atomic formulae called terms logic terms 
see id terms introduced earlier viewed special case terms 
convenience names starting lower case letters denote ground terms names starting capital letters denote possibly nonground terms 
term cf 
mai kw simple term id terms complex term lab lab tm slab fs slab fs 
id terms lab slab id terms chose name differently indicate syntactic position term emphasizes role labels 
furthermore appearance set construct indicates respective id terms slab slab supposed typed set valued labels rest labels lab lab functional 
order labels term immaterial 
denote terms 
worth noting chose setting logic static typing labels virtually impossible 
consequently say considered syntactically correct term may bound ground id terms appear terms contexts calling set valued labels 
semantics set way syntax calls functional label false universally quantified 
furthermore constructs lab lab fdg syntactically correct terms despite fact lab functional label due part term set valued label due 
logic semantics term unsatisfiable 
intuitively term statement object asserting instance class properties specified labels 
labels specified omit brackets reducing complex term simple term account higher order features frame object oriented formalisms incurring overhead higher order predicate calculus reify classes model class membership means lattice ordering true set theoretic membership 
formally assume elements organized lattice means ordering oe usual stands oe 
distinguish maximal element minimal element 
maximal element viewed meaningless object represents class instances perceived object representing biggest class unknown object 
lattice static part language viewed part schema specification lattice represents transitive closure subclass instance relationships classes oe person oe student student oe john means possibly indirect subclass instance mentioned earlier distinguish individual objects classes object treated class extension contains objects classes lattice 
element may appear term instance position class position 
gives logic feel higher order language semantics essentially order 
accordingly terms instance class refer object depending want emphasize role class instance respective superclass 
part sample lattice structure depicted 
impose monotonicity restriction lattice objects considered role labels lattice structure labels ignored 
assumption needed logic unification decidable 
simply means object constructors monotonic functions lattice instance person oe john john person car person oe car john meaning john cars belong class cars owned persons 
monotonicity necessary resolution procedure complete discussed full 
apart ensures lattice structure effectively part schema specifications instance relationship verified efficiently 
practical cases finite oe specified complete specification lattice order needs provide typing information finite number object constructors specifying classes range arguments 
instance cons edge theta path path meaning path oe cons edge path example typing information 
additional typing function symbols automatically inferred known type inference techniques see car 
verification holds pair ground id terms done way resembling usual unification algorithm discussed full 
term atomic formula 
formulae constructed simpler means logical connectives quantifiers 
simplify notation assume convention single valued label lab omitted intention lab 
similarly set valued label lab omitted assume lab furthermore class specification omitted assumed 
instance john name string john john name string john pay 
children considered term 
convention allows view id terms special case terms identifying 
semantics presenting semantics need introduce ordering powerdomain lattice 
ordering bk called hoare ordering bo 
lattice ordering maximal minimal elements preorder vu powerset defined follows pair sets write vu iff element preorder vu order cyclic 
instance fag vu fa vu fag vu vu considered lattice modulo equivalence relation vu vu maximal minimal elements lattice equivalence classes empty set respectively 
simplify language talk lattice structure powerset disregarding subtlety 
similarly pair lattices define lattice structure set mappings denoted map follows map 
kinds lattice mappings monotonic denoted mon homomorphic denoted hom ones preserving lub glb 
particular importance 
clearly hom mon 
semantics logic defined follows 
language logic interpretation tuple 
universe objects required lattice structure smallest largest elements respectively lattice ordering partitioned pair subsets account possible types labels 
useful think elements names objects elements best thought objects possible world homomorphism interpreting objects elements mapping mon interprets ary object constructor monotonic mapping additionally related follows 
reader may notice constants function symbols interpreted essentially way predicate calculus 
difference set ground terms domain lattice structures accounted 
role labels objects interpreted associating appropriate mappings element functions specifically mon associates monotonic mapping element mon associates monotonic mappings elements notice ignore ordering oe induced set valued labels interpreted monotonic set valued functions functional labels monotonic single valued functions 
notice functions associated elements noted earlier strictly speaking set object names interpreted real objects possible world objects names assume roles labels variable assignment mapping variables domain extend id terms usual way recursively 
simplify notation extend variable assignments terms follows 
interpretation variable assignment 
meaning term denoted statement existence true nonexistence false object properties specified 
consider term lab slab fs sm id terms role objects lab slab id terms role functional set valued labels respectively terms 
true iff conditions hold id term lab intended functional label lab technical reason apparent tries define formula satisfaction variable assignment 
lab true id term slab intended set valued label slab sm vu slab true simply says object class possible world condition says id terms representing labels appropriately typed term second condition says term satisfied possible world world information object denoted amount information asserted third condition simply says properties asserted true notice definitions 

true 
true similarly oe oe 
false 
meaning formulae oe oe oe defined standard way oe true resp oe resp 
oe iff oe true true resp 
oe true true resp 
oe true 
meaning quantifiers quite standard true oe resp 
oe resp 
agrees possibly true 
clearly closed formula meaning independent variable assignment simply write 
interpretation model true 
aside orderings powersets lattices possible 
instance smyth ordering bo smyth iff element exists presumably ordering hoare semantics 
allow enforce typing constraints elements sets way functional labels see section 
switching smyth ordering permit certain unnatural inferences lab fbg infer lab fb cg ideally called egli milner order hoare smyth orderings combined 
benefit right semantics sets achieved hoare ordering type enforcement smyth order offer 
unfortunately order able group elements sets egli milner ordering change logic syntax introducing variables sets 
particularly order logic kw set grouping second order ldl handling sets expensive proposition 
databases queries database set formulae 
distinguish extensional part database set terms intensional part set formulae complex terms 
set formulae oe formula write oe oe logically implied entailed iff oe true model language set variables set basic objects substitution mapping oe fid gamma terms lg identity outside finite set dom oe called domain oe 
extended id terms letting oe commute object constructors recursively oe lab slab oe oe oe lab oe oe slab oe 
substitutions extended formulae letting commute logical connectives 
substitution ground oe dom oe 
substitution oe formula oe oe oe called instance oe 
ground instance contains variables 
query statement form term 
set answers 
database smallest set ground terms closed contains instances logically entailed skolemization herbrand theorem skolemization procedure logic different predicate calculus 
predicate calculus result 
theorem cf 
skolem theorem set formulae oe formula 
oe denote skolemization oe respectively 
oeg unsatisfiable model iff oe language logic herbrand universe herbrand interpretation interpretation domain lattice ordering oe originally supplied 
herbrand interpretations interpret objects object constructors usual way 
compare interpretations herbrand particular follows pair interpretations 

differing way interpret objects labels write iff object typed functional label set valued label map map 
ordering lattice mappings introduced section 
spell particular case means vu 
vu strictly speaking preorder see section preorder order 
vu order modulo equivalence relation iff having defined talk minimal models minimal reader notice definitions minimality order spirit corresponding classic notions herbrand interpretations smaller means defined 
classic logic programming llo herbrand interpretations defined subsets herbrand base just set ground atomic formulae 
logic analogue herbrand base set ground terms class information stripped class information superfluous validity instance statement form consequence lattice structure part language independent program 
call terms bare 
classic logic logic subset herbrand base associated unique herbrand interpretation 
proposition subset herbrand base herbrand interpretation ffl satisfies term ffl minimal interpretation preorder furthermore interpretation unique modulo equivalence relation defined earlier 
relationship sets bare terms corresponding herbrand interpretations obvious classic case 
instance set fd lab lab fcg lab lab feg corresponds interpretation lab maps lub lab maps set fc 
rest labels map depending type 
theorem cf 
herbrand theorem finite set formulae inconsistent iff finite subset ground instances 
herbrand theorem basis resolution semi decision procedure predicate calculus cl 
full show extending result kw sound complete resolution proof procedure defined logic 
turn provides firm basis theory logic programming 
particularly model theoretic semantics logic programs perfect model semantics prz extended logic 
discussed companion 
inheritance methods higher order queries section discuss salient features proposed semantics illustrate number examples 
inheritance notion inheritance fundamental ai object oriented programming number researchers worked incorporating programming languages 
cardelli car considered inheritance framework functional programming 
described type inference procedure recall section term class information lab abbreviation term lab 

sound respect denotational semantics system 
contrast devised logic inheritance built semantics proof procedure full sound complete 
ait kaci nasr incorporate inheritance logic programs means unification algorithm 
intuitively appealing algorithm semantically sound justification 
addition maier mai pointed algorithm may correct type inferencing querying databases 
smolka ait kaci sak semantics unification algorithm equational logic 
clear extend semantics full fledged logic way resolution procedure proposed unification algorithm sound complete 
possible system applicable database querying 
ample literature called nonmonotonic inheritance tou tht er different monotonic inheritance logic see 
furthermore works inheritance defined algorithmically built semantics consider inappropriate logic object oriented programming 
contrast logic inheritance built semantics follows theorem theorem database lab lab frg term 
lab lab nonground terms id terms respectively viewed universally quantified term 
suppose id term instance class lab lab frg proof denote lab lab frg 
universally quantified terms suffices prove theorem ground case 
lab lab frg lab lab frg ground instances respectively 
result follows definitions immediately 
consider interpretation 
follows true ffl lab ffl fg vo lab lab lab monotonic mappings mon mon respectively follows ffl lab ffl fg vo lab exactly means properties hold words inherits properties theorem justifies intuitions example section 
instance faculty mary mary inherits supervisor faculty clause 
sally clause provides sophisticated example 
student sally sally inherits age young clause 
clause states sally interpretation sally age young sally age true necessarily case sally age lub young sally age true clauses logically entail sally age 
interpretation 
label age interpreted monotonic single valued function age map sally young 
lattice homomorphism lub young lub young 
arbitrarily chosen interpretation derive sally age 
inherited property age young true fact age 
effect called monotonic overwriting inheritance 
arguable monotonic overwriting suffices needs real world modeling 
difficult think situations example want sally completely disregarding inherited age young 
furthermore cases recall paragraph discussing bob supervisor section inheritance contradicts information extent declare local inconsistency cf 
bob supervisor 
cases may intention situations may needs formal account case 
complete overwriting inheritance simple instance nonmonotonic inheritance mentioned earlier desirable built logic way monotonic counterpart 
raises host difficult problems issue research 
browsing database schema explained earlier logic formally order semantics capable modeling certain higher order features sets class subclass hierarchy scheme quite naturally 
modeled means set valued functions lattice structure schema reasoned labels correspond attributes relational model represented id terms virtually indistinguishable objects 
section discuss browsing capabilities logic 
higher order capabilities described section discussed kn context deductive databases 
treatment kn general integrated 
typically queries database systems specified respect existing scheme assumed known user 
practice shows assumption unrealistic kind browsing database necessary 
means user apply intuitive exploratory search structure scheme database time query cf 
mot 
user interfaces commercial databases support browsing different extents 
purpose examples demonstrate logic provides unifying framework data schema exploration 
refer example section 
pair rules collects instance class faculty labels defined person including inherited labels defined labels labels flg faculty person defined labels labels flg faculty zg example figures defined labels mary 
replacing person adding bodies rules yields set labels strictly defined 
example browsing retrieval objects mention say cs directly indirectly objects 
specified follows finder cs content fxg cs finder cs content fxg cs finder cs content fxg finder cs content fzg finder cs content fxg fzg finder cs content fzg running example query finder cs content fxg return set fcs cs bob mary 
inheritance mechanism discussed previous section enforce domains labels 
instance specifying person name string cause instance person inherit domain string label name 
term specifies value name john name john value instance string goes explained section john overwrites string 
specified value incomparable string john name lub string john name 
derived 
relational model relation schema usually fixed supplier sno sname tuples relation defined schema attributes 
contrast object oriented languages logic particular attribute set may vary object object 
fact general class information cf 
clauses limits schema specifying generally true class relational model limits schemes specifying set meaningful attributes relation 
take stand notion schema relational databases modeling necessity merely implementational convenience 
example shows desired schema restriction relational sense imposed logic supplier supplier sno sname supplier supplier clause states label sno sname maps supplier second clause says set valued label maps supplier top set 
individual supplier inherit restrictions label outside supplier scheme yield meaningless information regarding methods methods means incorporating data abstraction object oriented programming 
embody procedural aspect object oriented paradigm researchers believed methods cast declarative setting 
instance lr propose formal data model intended support procedural object oriented language 
similarly bnt methods written procedural language integrated declarative setting 
believe infamous impedance mismatch programs data overcome declarative fashion requires methods defined declaratively 
say procedural languages 
contention procedural component integrated declarative framework clean way alluded section 
logic declarative definitions methods possible nonground id terms allowed appear label positions terms 
example effect 
consider rule person graduation date university record stud person date year person graduation date method function universities years ask queries graduation date 
john graduation date 
find persons graduated find dates universities john graduated 
modifying browsing example previous section define method returns set objects directly indirectly referring object passed method argument stuff variable finder find stuff fxg stuff finder find stuff fxg finder find stuff fxg finder find stuff fzg finder find stuff fxg fzg finder find stuff fzg object oriented languages ability inherit methods build incrementally responsible success approach human interfaces graphics 
example illustrates phenomena accounted logic 
suppose person male female writer 
define method legal name follows 
normally legal name name person 
maiden name married female pen name writer considered legal name 
define method person legal names fng person name string year refine females writers legal names fng female maiden name string year legal names fng writer pen name string year mary married female writer uses husband name different legal names year 
hand joe male writer method return legal name 
example instance operator overloading feature attributed object oriented programming 
means method name denote quite different procedures depending class name 
instance overloading obtained modifying previous example include class incomparable person 
companies completely different set rules regulating legal names definition legal name class may little resemblance definition method classes person female writer syntactically name 
note logic methods essentially labels parameters plain labels viewed parameterless methods 
uniformity pleasing corresponds situation data types 
technique described allows define arbitrarily complex methods full power logic programming disposal 
alternatively incorporate procedures written language smalltalk considering nonground labels computed functions adapting ideas mw mw 
relational approach databases initiated codd cod firm theoretical grounds object oriented databases dominated grass roots activity implementations done kbc vba accompanying theoretical progress 
result researchers feeling area object oriented databases misguided lacking direction needing spokesman codd coerce researchers area common set terms defining common goal hoping achieve ns 
contention problem lies deeper 
codd influential proposal relied large body knowledge mathematical logic concerning predicate calculus 
essentially merely applied different terms logicians known decades 
logical foundations object oriented databases parallel underly relational theory lacking opinion major factor uneasy feeling 
pioneering mai maier proposed framework defining model theoretic semantics object oriented logics 
encountered certain semantic difficulties approach subsequently abandoned direction 
turned difficulties fatal theory repaired significantly extended cw kw 
novel logic takes logics cw kw new dimension logic capable representing known object oriented paradigm 
provided formal semantics logic showed embodies natural way notions complex object object identity inheritance methods schema 
note logic sound complete resolution proof procedure computationally attractive renders suitable basis developing theory object oriented logic programming 
issue discussed companion 
obviously benefited dave maier original logic mai valuable suggestions 
discussions dave warren extremely helpful particular dave helped understand semantics developed 
james wu finding inaccuracies earlier draft 
ab abiteboul beeri 
power languages manipulation complex objects 
technical report rapport de recherche inria 
appear tods 
ag abiteboul grumbach 
col logic language complex objects 
workshop database programming languages pages france september 
ait kaci nasr 
login logic programming language built inheritance 
journal logic programming 
ban bancilhon 
object oriented database systems 
acm sigact sigmod sigart symposium principles database systems pods pages 
bk bancilhon khoshafian 
calculus complex objects 
journal computer system sciences april 
beeri naqvi shmueli tsur 
sets negation logic database language ldl 
technical report mcc 
bnt beeri nasr tsur 
embedding terms horn clause logic language 
third international conference data knowledge bases improving usability responsiveness pages 
morgan kaufmann 
bo buneman ohori 
powerdomains generalize relational databases 
theoretical computer science 
car cardelli 
semantics multiple inheritance 
information computation february 
chen kifer warren 
hilog order semantics higher order logic programming constructs 
north american conference logic programming october 
cl chang lee 
symbolic logic mechanical theorem proving 
academic press 
cod codd 
relational model large shared data banks 
communications acm 
cw chen warren 
logic complex objects 
acm sigact symposium principles database systems pods pages 
er etherington reiter 
inheritance hierarchies exceptions 
national conference artificial intelligence aaai pages washington 
fk fikes kehler 
role frame representation reasoning 
communications acm 
gin ginsberg 
multivalued logics 
ginsberg editor readings non monotonic reasoning pages 
morgan kaufmann 
hay hayes 
logic frames 
editor frame conception text understanding pages 
walter de gruyter 
kbc kim banerjee 
chou woelk 
composite object support object oriented database system 
proceedings oopsla 
kc khoshafian copeland 
object identity 
proceedings oopsla pages 
kn krishnamurthy naqvi 
real horn clause language 
intl 
conference large data bases vldb 
kuper 
extension lps arbitrary sets 
technical report ibm yorktown heights 
kv kuper vardi 
new approach database logic 
acm sigact symposium principles database systems pods 
kw kifer wu 
logic object oriented logic programming maier logic revisited acm sigact sigmod sigart symposium principles database systems pods pages march 
llo lloyd 
foundations logic programming second edition 
springer verlag 
lr richard 
modeling inheritance genericity object oriented databases 
nd intl 
conf 
database theory icdt volume lecture notes computer science pages bruges belgium 
springer verlag 
richard 
object oriented data model 
acm sigmod conference management data pages 
mai maier 
logic objects 
workshop foundations deductive databases logic programming pages washington august 
mai maier 
database languages bad idea position 
proc 
workshop database programming languages france september 
mcc mccarthy 
order theories individual concepts propositions 
hayes michie editors machine volume pages 
edinburgh university press 
min minsky 
framework representing knowledge 
haugeland editor mind design pages 
mit press cambridge ma 
mot motro 
baroque browser relational databases 
acm transactions office information systems 
maier stein 
development object oriented dbms 
proceedings oopsla pages 
mw maier warren 
incorporation computed relations relational databases 
technical report department computer science suny stony brook december 
mw maier warren 
theory computed relations 
technical report department computer science suny stony brook november 
ns neuhold stonebraker 
directions dbms research laguna beech report 
sigmod record march 
prz przymusinski 
declarative semantics deductive databases logic programs 
minker editor foundations deductive databases logic programming pages 
morgan kaufmann los altos ca 
rks roth korth silberschatz 
extended algebra calculus nf relational databases 
technical report univ texas austin 
sak smolka ait kaci 
inheritance hierarchies semantics unification 
technical report ai mcc may 
sb stefik bobrow 
object oriented programming themes variations 
ai magazine pages january 
tht touretzky horty thomason 
clash intuitions current state nonmonotonic multiple inheritance systems 
intl 
joint conference artificial intelligence ijcai pages 
tou touretzky 
mathematics inheritance 
morgan kaufmann los altos ca 
vba object manager 
user manual 
weg wegner 
object oriented classification paradigm 
shriver wegner editors research directions object oriented programming pages 
mit press 
zaniolo ait kaci beech cammarata kerschberg maier 
objectoriented database knowledge systems 
technical report db mcc 
