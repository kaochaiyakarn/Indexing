distributed real time mpeg video audio player cen calton pu richard jonathan walpole department computer science engineering oregon graduate institute science technology calton walpole cse ogi edu constructed distributed real time mpeg video audio player study feedback mechanisms synchronization quality service qos control system adaptiveness context multimedia applications 
player composed audio video server client processes distributed network 
client supports variable speed play random positioning offering common vcr functions fast forward backward 
player intended internet shared environment real time non real time applications great diversity network bandwidth host processing capability 
salient features player include real time synchronized playback mpeg video audio streams user specified parameters desired presentation quality adaptiveness variations available resources network bandwidth server client processing capacity buffer space 
software feedback approach synchronization clients servers dynamic qos control system adaptiveness 
example buffer fill level client monitored fed back dynamically server synchronize frame transmission rate client play rate 
similarly quality video client monitored fed back mpeg decoder server order conserve resources overload 
parameters delay response play command speed change adapt dynamically current environment 
presents design implementation experimental analysis distributed real time mpeg video audio player 
section describes system architecture 
section discusses software feedback synchronization qos control mechanisms adopted player 
sections describes implementation presents initial performance results 
related outlined section 
section discusses concludes 
system architecture shows process oriented view player architecture 
system main components client audio video server output environment video device windows audio device 
server runs host daemon 
accepts requests video audio stream access forks video audio server sessions service 
client set collaborating processes controller ctr video buffer vb video decoder vd 
processes share memory containing buffers data structures parameters status statistics 
vb buffer frames received decoded vd buffer frames decoded displayed 
controller provides user interface supports operations fast forward backward variable speed play random positioning volume adjustment 
program chosen play ctr opens server sessions video server vs audio server initialize requested streams reply ctr stream parameters 
playback program player defined pair video server host mpeg file path audio host audio file path 
video buffer vb video decoder vd controller ctr user interface video server vs audio server server server structure shared data vd buffer feedback udp udp video stream vb buffer tcp tcp control client control audio stream audio video player architecture video frames sent vs udp buffered vb decoded vd displayed video output device ctr 
audio samples sent tcp connection resampled played ctr audio output device 
playing audio video streams synchronized assigning sequence numbers video frames audio sample blocks ctr plays audio blocks continuously plays video frame corresponding audio block played 
current version player support bit sample rate law audio format assume tcp channel ctr provide bandwidth 
user interface allows users specify desired qos presentation video audio data 
particular current version player supports variable video frame rate audio sample rate 
variety software feedback mechanisms adopted player synchronize video server client manage qos system resources 
addition feedback techniques described detail section adaptive techniques player ffl adaptive play start delay ctr issues play command vs monitors vd buffer starts play timer decoded frame arrives 
ffl adaptive speed change delay ctr issues play speed change command vs waits frame sent new speed arrives vb buffer changing play timer speed 
ffl adaptive fast startup play startup ctr feeds expected vb buffer fill level vs order fill client vb buffer expected level quickly possible vs sends frames higher normal rate initial part transfer 
ffl video transfer smoothing vs avoids generating bursts traffic deliberately spacing transmission packets large frames 
approach reduces packet loss due buffer overflow udp 
block sequence samples corresponding video frame software feedback synchronization qos control components player need sensitive adaptation environmental changes 
adaptation achieved feedback mechanisms implemented software 
software feedback mechanisms similar phase locked loops control systems adapt changes observed locally global information 
main areas software feedback server client synchronization qos control 
server client synchronization reached maintaining vb buffer expected fill level 
vb buffer management depends factors jitter network delay scheduling buffer fill level oscillate 
oscillation absorbed buffer size 
imperfections adaptive techniques buffer deviate expected fill level permanently 
server client clock drift causes buffer fill level drift eventually overflow empty buffer left unchecked 
feedback mechanism solves synchronization problem monitoring vb buffer fill level 
low pass filter applied eliminate jitter short term variations 
significant deviation expected fill level detected difference fed back vs raises slows transmission speed temporarily compensate 
imperfection adaptive techniques compensated way 
clock drift corrected periodic compensation 
player supports qos presentation video audio 
dimensions quality specified current version player video frame rate audio sampling rate 
versions player hope support quality adjustment dimensions 
supporting qos explicitly allows manage system resources efficiently feeding actual playing quality observed client back video server 
quality degradation client results frame loss occurs late path vs network vb vd ctr 
example missing late frame client result network congestion receive buffer overflow insufficient processing capacity decoding stage 
cases server resources network bandwidth wasted transmitting original frame 
general frame client display time shortage resources stage pipeline better server avoid transmitting place 
player uses feedback observed quality client control server 
server starts transmitting sufficient data meet user specified qos requirements 
number frames displayed client consistently lower expected client feeds difference back server server deliberately drops evenly spaced frames 
feedback approach ensures smooth degradation perceived qos client efficient resources path server client 
sufficient resources exist player utilize point user quality requirements exceeded 
frames dropped evenly server dropped bursts pipeline resources depleted 
feedback support qos specification player adaptable operate effectively environments diverse hardware capabilities dynamically changing load 
example consider client real time scheduling support 
feedback mechanism ensures intermediate resources wasted processing client keep pace server transmission rate 
adaptation happens regardless problem occurs pipeline scheduling network transmission buffer management 
implementation results player implemented period months tested department network authors 
implementation uses code modified berkeley mpeg decoder motif interface modified version implemented meyer geometry center university minnesota 
initial experiments player conducted video stream sized frames companion audio stream 
experiments video audio streams synchronized 
proposed adaptive techniques worked 
play start speed change delay usually ms 
player fast start ran requested speed filled vb percent total frames specified frames played vs frames sent percent total frames number consecutively dropped frames framerate framerate framerate unlimited presentation quality comparison experiment results qos control mechanism buffer expected level period sending frames 
vs stream smoothing algorithm implemented longer observed udp socket buffer space available error messages 
software feedback synchronization qos control mechanisms evaluation 
initial results promising 
observed network scheduling jitter frames 
absence vs vb synchronization mechanism vb buffer fill level deviate frames server problematic clock drifting faster ppm cause vb buffer fill level drift frames 
synchronization mechanism reduce vb buffer fill level deviation frames 
evaluate qos control mechanism conducted experiments server client different subnets 
streams played speed frames second fps user specified video stream frame rate fps fps unlimited 
shows percentage frames played vs percentage frames sent vs fps frames sent played effective bandwidth fully utilized 
fps frames cases played frames sent dropped path 
point percentage frames sent increases linearly percentage frames played decreases indicating path overload presentation quality decrease 
shows frame rate fps minimizes display jitter due long sequences dropped frames 
shows percentage frames played preceded consecutively dropped frames sent vs dropped path 
cases shown frame rates fps fps unlimited 
fps case fewer occurrences consecutive frame drops unlimited case 
fewer occurrences consecutive frame drops fps case 
means fps case plays smoothly 
expect fully refined feedback qos mechanism able achieve optimal frame rate users specified frame rate met 
related berkeley continuous media system shares common ideas player outlined 
main distinction berkeley system uses network time protocol ntp synchronization client servers 
approach rely presence ntp target environment believe software feedback approach support user specified qos result higher degree adaptability efficiency 
idea software feedback originated synthesis operating system 
massalin pu demonstrated software feedback process scheduler adapt quickly system changes 
applies software feedback approach distributed scheduling problem adaptive qos control 
discussion design implementation distributed real time synchronized video audio player description software feedback mechanisms uses synchronization qos control 
player implementation robust intend publicly available 
intend evaluate refine synchronization qos control feedback mechanisms explore approaches building general implementations software feedback mechanisms 
particular exploring idea software feedback toolkit 
area qos specification extending player incorporate user specification qos dimensions including spatial temporal resolution color quantization synchronization accuracy 
members distributed systems research group ogi helpful comments discussions help implementation experiments 
research supported national science foundation donations tektronix hewlett packard portland trail 
massalin pu 
fine grain adaptive scheduling feedback 
computing system winter 
calton pu robert 
feedback scheduling toolbox approach 
fourth workshop workstation operating systems 
oct 
patel performance software mpeg video decoder 
acm multimedia anaheim california 
august 
lawrence rowe brian smith 
continuous media player 
proc 
rd nossdav 
san diego california 
november 
lawrence rowe mpeg video software representation transmission playback 
high speed networking multimedia computing symp 
elec 
imaging sci 
tech san jose ca february 
thomas network transparent system distributed audio applications 
proc 
usenix summer conference june 
richard jonathan walpole david maier 
quality service specifications multimedia presentations 
technique report cs 
oregon graduate institute science technology 
november 
