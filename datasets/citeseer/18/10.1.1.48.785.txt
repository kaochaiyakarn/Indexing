scenario analysis software architecture rick kazman department computer science university waterloo waterloo ontario gregory abowd college computing georgia institute technology atlanta georgia len bass paul clements software engineering institute carnegie mellon university pittsburgh pennsylvania software architecture important tools designing understanding system system preliminary design active deployment maintenance 
scenarios important tools exercising architecture order gain information system fitness respect set desired quality attributes 
presents set experiential case studies illustrating methodological scenarios gain architecture level understanding predictive insight large real world systems various domains 
structured method scenario architectural analysis scenarios analyze architectures respect achieving quality attributes 
lessons drawn growing body experience applying scenario architectural analysis techniques 
keywords software architecture software analysis methods software quality software architecture analysis applications scenarios analysis proposed software system determine extent meets desired quality criteria desirable 
reasons analysis difficult include lack common understanding high level design lack fundamental understanding quality attributes 
surge interest software architecture issues involved high level design software systems clarified 
goal show exploit software architectural concepts analyze complex software systems quality attributes 
compensate lack fundamental understanding express attributes scenarios capture essential actions involving system analysis 

see example april special issue ieee transactions software engineering devoted software architecture 

distinguish analysis evaluation 
analysis webster new collegiate dictionary 
separation component parts 
examination complex elements relations 
definition heart consider important examining software architectures 
evaluation pre supposes particular value scale system world forthcoming 
review experiences scenario analysis architectural descriptions software systems 
scenarios brief narratives expected anticipated system development user viewpoints 
structured method employing scenarios analyze architectures software architecture analysis method saam 
saam described section 
experience saam saam related techniques section 
section explore lessons learned 
discussion relationship software architecture quality attributes scenarios 
software architecture software architecture describes high level configuration components compose system connections coordinate activities components 
say software architecture quite case high level configurations describe functionality ultimately performed software hardware components 
say high level configuration high level configuration system composed type component decomposition configuration 
instance system may composed set modules sense parnas set cooperating sequential processes resides modules 
viewpoints valid architectural nature 
carry different information 
process viewpoint describe interaction system execution terms processes active dormant pass share data synchronize 
module viewpoint describe interaction teams responsible building modules terms information allowed share required share interfaces prohibited sharing implementation secrets 
process viewpoint implications performance module viewpoint implications maintainability 
sharp distinction run time versus development time descriptions properties recurring theme 
issues software architecture large new 
date back dijkstra pointed pays consider structure computer program addition making compute correct answer 
people build large computer systems considering allocation function configurations long time 
software engineering textbooks describe development stage requirements detailed design architectural design compatible notion definition software architecture occurs transition problem definition solution space 
ideas motivations underlying software architecture novel past years researchers practitioners explicit architectural issues begun worry representation architecture important living artifact right life cycle product 
notion architectural representation may profitably analyzed understand fitness respect intended 
software architecture manifests usefulness life cycle ways architecture artifact design represents decisions requirements types achieved 
manifestation early design decisions architecture represents design decisions hardest change deserving careful consideration 
architecture key artifact achieving successful product line engineering disciplined structured development family similar systems effort expense risk developing system independently 
architecture usually artifact examined programmer particularly maintenance programmer unfamiliar system begins 
emphasis analysis software architectures compatible belief understanding implications design leads early detection errors predictable cost effective modifications system entire life cycle 
quality attributes interested evaluating architectures determine fitness respect certain properties qualities resulting system 
qualities fall categories 
qualities describable observing output executing system presence input 
addition correctness qualities include usually called names security reliability availability 
performance throughput time dependent 

qualities describable measuring activities development maintenance team 
include maintainability portability adaptability scalability 

qualities describable measuring activities particular user possibly system concert executing system 
include ease predictability learnability 
categorization useful difficult analyze architecture qualities 
qualities vague provide little procedural support evaluating architecture 
example vagueness suppose change colors user interface changing resource file read run time changing fonts interface requires re compilation 
system modifiable 
answer respect changing colors respect changing fonts 
design acceptable depends predictions actual usage user interface modifiable way important owner say system appropriately modifiable notion appropriateness applies quality factors 
lesson time foreseeable simple scalar universal measurements attributes safety portability 
context dependent measures meaningful presence specific circumstances execution development 
safety benchmarks fine example 
universal measurement safety benchmarks unnecessary 
benchmark represents data system executing particular inputs particular environment benchmarks 
may wish better understanding universal expression quality attributes recognize role played specifying particular operational context system 
represent contexts scenarios 
scenarios scenarios widely documented technique requirements elicitation especially respect operator system 
widely design 
categorization requirements novel identification 
software engineering texts counsel designers plan account life cycle properties addition correctness teach importance quantitative testable specifications properties 
extends trend 
method comparing design alternatives 
experience shows programmers understand built system asking system responds component component particular input operational situation 
scenarios tool analysis quality primary utilization 
scenarios express particular instances quality attribute important customer system 
analyze architecture consideration respect easily satisfies constraints imposed scenario 
scenarios differ widely breadth scope 
scenarios brief description anticipated desired system 
point scenarios typically sentence long appropriately called 
emphasize scenarios appropriate roles involving system 
operator role widely considered roles system designer modifier system administrator depending domain 
important analyzing system roles relevant system considered design decisions may accommodate roles 
consideration roles leads distinction run time scenario operator role development time scenario maintenance engineer 
process choosing scenarios analysis forces designers consider uses changes system 
believe architectural analysis give precise measures metrics fitness 
measures need couched terms qualities modifiable architecture questions typically little value 
really want know architecture accommodate change architecture accommodate change class architectural analysis guide inspection architecture focussing attention potential trouble spots 
distinction scenario types important 
recall scenario brief description anticipated desired system 
may case system directly supports scenario meaning anticipated requires modification system order performed 
usually determined demonstrating existing architecture behave performing scenario simulation system architectural level 
scenario directly supported means change system represent architecturally 
change change components perform assigned activity addition component perform activity addition connection existing components combination 
refer class scenarios direct scenarios second class indirect scenarios 
direct indirect scenarios different stages analysis method 
final point scenarios impacted architecture level decisions 
example portability scenario architectural implications determining functionality divided may depend code level hardware level factors byte ordering 
furthermore scenarios simply evaluated architectural information 
example developer scenario ensure module lines code constraint checked ensured architecture level analysis 
analysis influences design processes analysis design closely intertwined 
designer knows basis upcoming design review design positively affected 
surprise applying analysis method number influences designers independent analysis 
carrying scenario architectural analysis observed ben 
ability compare competing high level designs system document comparisons 
focussing design activity needed reused 
enhancing high level communications development team developers customers system 
see specific examples benefits case studies 
noted current level maturity discipline software architecture benefits architectural analysis brings development project people process oriented 
output analysis activity call attention particular problem design communication design propose solutions problems identified 
change models analysis techniques improve consideration people process oriented issues remain crucial 
architectural analysis helps improve communication development team members team members outsiders upper level managers clients users 
part benefit accrued simply choosing common syntactic semantic notation architectural representation 
larger part benefit arises scenario software architecture analysis helps focus high level global software design discussions specific problem areas motivates development teams critically evaluate discuss architectural alternatives system early life cycle 
means focus achieved effective scenarios subject rest 
method scenario architectural analysis particular method doing scenario architectural analysis saam software architecture analysis method 
saam originally developed enable comparison competing architectural solutions 
result experience architectural analysis prescribed steps saam evolved 
experience architectural analysis strictly followed method prescribed saam case comparing competing candidate architectures 
cases scenarios foundation illuminating properties architecture body experience stable set activities dependencies activities emerged call saam 
saam may considered canonical method scenario architecture analysis computer systems particular analysis efforts may carried subset variation saam appropriate 
shows steps saam dependency relationships stages 
steps saam products 
describe candidate architecture 
candidate architecture architectures described syntactic architectural notation understood parties involved analysis 
architectural descriptions need indicate system computation data components component relationships called connectors 

develop scenarios 
develop task scenarios illustrate kinds activities system support kinds changes anticipated system time 
developing scenarios important capture important uses system 
scenarios represent tasks relevant different roles user customer marketing system administrator maintainer developer 

perform scenario evaluations 
indirect task scenario list changes architecture necessary support scenario estimate cost performing change 
modification architecture means new component connection introduced existing component connection requires change specification 
stage summary table lists scenarios direct indirect 
indirect scenario impact set changes scenario architecture described 
experience sufficient list existing components connections altered new components connections introduced method allows sophisticated cost functions 
tabular summary especially useful comparing alternative architectural candidates provides easy way determine architecture better supports collection scenarios 

reveal scenario interaction 
different indirect scenarios may necessitate changes components connections 
case say scenarios interact component connector 
determining scenario interaction process identifying scenarios affect common set components 
scenario interaction measures extent architecture supports appropriate separation concerns 
component determine scenarios affect 
saam favors architecture fewest scenario conflicts 

evaluation 
weight scenario scenario interactions terms relative importance weighting determine ranking 
subjective process involving stake holders system 
weighting chosen reflect relative importance quality factors scenarios manifest 
notes method discussed section software architecture may representation 
appreciable amount ongoing research languages representations static configurations clearly superior notation emerged 
purposes tended simplistic architectural primitives case studies simple representations limiting 
typical representation distinguish components active transform data passive store data depict data passing information components control component enabling component perform function connections 
simple lexicon provides reasonable static representation architecture 
accompanying static representation architecture description system behaves time dynamic representation architecture 
take form natural language specification behavior 
assumes scenarios inherently different nature 
return point section 
activities dependencies scenario analysis scenario development individual scenario evaluation iterate architecture description assess scenario interaction evaluation formal structured specification see section 
steps highly interdependent 
deciding appropriate level granularity architecture depend kinds scenarios wish evaluate scenarios appropriate code size scenario 
determining reasonable set scenarios depends kinds activities expect system able perform reflected architecture 
important relationship steps role direct scenarios play helping understand architectural description 
demonstrate case study see section direct scenarios help determine static architectural connections aid formulation structured descriptions dynamic behavior architecture 
offering single architectural metric saam produces collection small metrics scenario analyses 
set mini metrics saam fact developed intent compare competing architectures scenario basis 
left users saam determine scenarios important order resolve cases candidates different scenarios 
evaluation derived context organizational requirements 
validation method saam intended applied early design order validate analyze number existing systems 
sections describe case studies elucidate justify different phases saam scenario architecture description development indirect scenario analysis scenario interaction 
case studies involves interaction different industrial partner 
certain details studies proprietary covered agreements 
cases details slightly modified protect proprietary interests 
case studies academic participants subsequent development procurement actions outcomes analyses 
case studies included 
global information system contemplating purchase system infrastructure support applications development multimedia communication unlimited conferencing 
purchasing wanted assurance architecture system purchased going provide generic satellite multi user applications anticipated developing near long term 
result analysis decided purchase system avoiding investment tens millions dollars 

air traffic control investigation complex real time system set proposed changes system 
purpose evaluation determine development system justified 
change scenarios intended represent appropriate manifestations qualities performance availability 
result evaluation decision proceed proposed changes 

wrcs case study analysis commercial version control configuration management tool 
analysis covers activities saam shows artifacts saam evaluation produced 
result analysis significant problems discovered product architecture respect scenarios considered 
pursued number industrial academic case studies scenario analysis saam maturing 
user interface development environments published saam case study comparing academic ui development environments 

internet information systems performed full saam study collection information systems wais www harvest attempt understand architectural differences evolved past years successfully supported expected uses systems 

key word context small architectural case study parnas places classic comparison different architectural style approaches problem 
performed saam evaluation determine reproduce similar results previously published 
analysis provided rationale deciding solutions problem previously published 

embedded audio system automotive develops embedded audio systems scenario technique design generation audio systems 

visual debuggers saam evaluation comparing public domain visual debuggers 
case studies structure descriptions evaluations answering questions system context purpose architectural evaluation 
method 
learn 
result 
global information systems system context purpose april asked lead saam analysis architecture system intended support applications development multimedia communication unlimited conferencing 
customer requesting analysis purchased system supplier intention stepping stone long term plan develop applications infrastructure global satellite information systems support mobile traditional computing 
supplier reputation system customer purchase represented huge potential investment 
understandably customer wanted greater assurance supplier architecture going best serve needs 
customer larger goal mind individual saam exercise 
begun recognize importance architecture help unify various product divisions 
want able define product lines architectural families 
decided saam analysis way start understanding formalize analyze architectural artifacts 
method 
develop scenarios describe candidate architecture conducted day tutorial software architecture saam followed day preliminary saam evaluation system architecture 
system fairly mature having devel oped past years experts telecommunications 
activities method utilized case study artifacts produced detailed 
supplier provided architecture document described system layered architecture client server peer peer design principles 
coarse level detail insufficient satisfy customer desire know system worked structure going suitable purposes 
effort provide details architecture worked supplier provided thick dense technical document detailing application programming interface modules architecture 
far detail customer analyze wrong level detail reporting management 
saam evaluation began brainstorming session generate customer criteria evaluating system form scenarios different user perspectives user network administrator network provider applications developer 
customer supplier saam consultant worked distinguish direct indirect scenarios 
scenario considered direct supplier explain sufficient detail system provided service described scenario 
listened description determine required change ordinary system learn system decomposed level beneath layers 
exercise instructive focussed discussion way revealed global rationale architecture customer unable determine independently interacting system course preceding year 
second day scratched surface saam evaluation determined defining collection direct scenarios established order understand represent existing system architecture 
customer wanted modify architecture suit needs knew way specifying static dynamic aspects behavior detailed way suggested layering detailed api documentation 
simple box line diagrams exemplified saam case studies date considered adequate static description natural language description dynamic behavior common saam case studies sufficient 
course months set direct scenarios established order produce static dynamic representation architecture 
set direct scenarios included ones described informally labels 
basic telephony connection 
multimedia tele video conferencing session 
paging way capabilities global information systems activities shaded artifacts list scenarios scenario development individual scenario evaluation iterate architecture description assess scenario interaction evaluation static dynamic representations 
wireless lan services 
cellular services pcs fashion 
geolocation 
remote monitoring stations telemetry security 
remote data terminal operations direct scenarios level decomposition system provided shown 
difficulty point determining different connections components 
solution problem create flow diagrams direct scenario similar flow diagrams jacobson object oriented case development method 
flow diagrams created existing customer developed tool documenting cases 
column diagram represents architectural component 
arrow columns represents flow information labelled diagram data connection control relationship labelled 
direct scenario described detail flow diagram filled document kinds relationships components scenario expects 
sample scenario description shown 
learn 
event flow diagrams provide structured precise approach documenting dynamic behavior architecture ample tools able produce documentation example customer tool provided output framemaker document 
added advantage having completed modified event flows simply administrative task determine static connections necessary static representation shown 
having accumulated data control connections flow diagrams able super 
figures showing architectural descriptions modified originals 
exact details architectures proprietary affect drawn exposition 
passive data computation components active data identifying static components impose original layers supplier determine constraints layered architecture observed direct scenarios shown 
exercise easy complete full cooperation customer supplier 
known scenario analysis relies domain expertise learned exercise skill generating architectural description large system clear contains sufficient overwhelming amount information 
skill generating acceptable architectural descriptions analysis difficult perform 
result 
scenario analysis greatly increased customer understanding supplier architecture 
direct scenarios played critical role helping customer determine suitable level detail architectural representation 
exercise eventually led customer decision purchase supplier system decision concrete evidence system directly support large number required scenarios 
important point init ops invoke get ids cty invoke ccj sample flow description direct scenarios ccj passive data computation components active data static architecture connections connections control data layer layer layer layer mean supplier architecture inherently bad 
simply means inappropriate context customer wanted 
general point emphasize architectures inherently bad simply fit purpose fitness architectural analysis helps reveal 
customer embarked generative exercise define architectural solution global information systems domain exercise conducted similar scenario manner 
air traffic control audit system context purpose summer audit conducted large system development 
application air traffic control real time embedded process control program 
system comprised roughly lines ada code designed distributed flexibly configured highly reliable meet strict performance human interface constraints 
customer audit wished know things architecture system chosen wisely meet stringent requirements system addition open accommodate life cycle evolution 
current requirements quite explicit expected evolutionary changes 
auditors step determine changes customer mind meant customer architecture open 
answer needed able accommodate software written third party implemented part functionality application accommodate upgrades commercially shelf network operating system language compiler support tool suites 
method 
develop scenarios describe candidate architecture activities method artifacts produced detailed 
similar benefit scenario activity observed audio system case study 
case generative exercise define new product line audio systems enhanced scenarios enable design team develop common representation understanding static dynamic behavior evolving design 
air traffic control activities shaded artifacts list scenarios scenario development individual scenario evaluation iterate architecture description assess scenario interaction evaluation scenario impact table air traffic control case study quality attributes considered important achieve maintain enumerated 
system included ultra high availability accomplished sophisticated distributed fault tolerant design implementation scheme performance ability extract functionally useful subset system 
set indirect scenario classes deemed occur system lifetime enumerated 
scenario classes came anticipated requirements system domain knowledge changes legacy systems genre 
case scenario classes identified included upgrades network processor hardware operating system importation application support software additional functional performance requirements extraction functionally useful subsets staged deployment 
auditors careful consider scenarios affected quality attributes listed increasing system availability requirement 
sure consider scenarios affected system architectural level affect highest level components module level code level 
scenario class auditors defined specific instance change change scenario 
instance test system ability accommodate increased performance posited increase maximum number vehicle radar tracks system required monitor 
perform scenario evaluations change scenario auditors performed scenario evaluation developers asked accommodate change identifying showing components architecture level components design level modules ada packages documentation affected change 
result set active design reviews participants pro active area 
purpose change scenarios assess system design appropriate arbitrary modifications 
exercise auditors investigated process implement change viewed catalogued code documentation produced accessed modified result change 
exercises actual code changes developer anticipated auditors preparing working prototypes change installed 
table lists change exercises quality aspect tested 

systems may distinction highest level components modules modules code units 
learn 
parts air traffic control system implemented auditors compile lines code statistics change exercise 
exercise performed system design code existed 
design documentation complete detailed informative identify specific areas change exercise serve uncover documentation deficiencies 
way corrected allowing implementation proceed incomplete designs 
interesting lessons derived evaluation table 
individual scenarios represent quality attribute 
example scenario importing third party developed applications implications availability performance 
scenarios important architecture implications levels design code 
result 
result change exercises set high confidence metrics class change project management project cost performing concrete maintenance operations system 
knowledge management approved changes 
changes anticipated auditors assessed generally accepted software engineering standards followed past resulted systems easily modified respect normal life cycle evolutionary pressures 
step included standard code quality metrics traditional documentation inspection quality assessments 
design rationale see information encapsulated various design levels 
encapsulation implies scenarios designers mind implicitly explicitly system insulated 
design level affected quality attribute affected change scenario design code availability performance subset modify monitor control console position user interface import third party developed applications testing system openness increase system maximum capacity flight tracks add new output displays system delete requirement support electronic flight data system upgrade higher performance network upgrade faster processor migrate window system table change scenarios scope wrcs system system context purpose section discuss application saam commercially available revision control system rcs call wrcs 
wrcs provides functionality allow developers projects ability create archives compare files check files create releases back old versions files 
project context means group related files linked appropriately form finished product 
example files source code computer program text book digitized audio video creation video clip 
wrcs keeps track changes files evolve time 
provides capabilities multiple users project private areas allowing developer modify test system isolation disturbing developers corrupting primary copy system 
managerial functions production reports provided 
wrcs functionality integrated program development environments accessed tools wrcs graphical user interface 
method 
section steps saam taken arrive architectural evaluation wrcs shown evaluation 
lessons learned evaluation discussed section 
develop scenarios describe candidate architecture evaluation take place require architectural representation product semantic interpretation principally means component connector 
creating architectural description proved difficult tasks evaluating wrcs 
start project architectural description product needed devise way eliciting information 
information analyzed grouped way aid construction architectural diagram 
sources information limited consisted interviews members development team product documentation product 
particular access source code product specifications 
appropriate software wrcs activities shaded artifacts fish eye visualization scenario impact static representation set scenarios grouped scenario development individual scenario evaluation iterate architecture description assess scenario interaction evaluation tabular summary direct indirect scenarios architecture supposed concern level abstraction code 
essence task reverse engineering create design document finished product 
product architectural description arrived iteratively 
stage studied product existing description product executables libraries documentation devised new set questions 
answers questions stage helped clarify current description 
new stage allowed obtain insight product motivate new questions asked order arrive stage 
didn previous representation chose start gross listing modules basic relationships iterate adding structure went 
process eliciting scenarios helped clarify architecture shall see section 
took iterations obtain representation satisfactory architectural evaluation 
representation shown 
process describing architecture scenarios continually developed represented various stakeholder roles system 
wrcs roles users developers maintainers system administrators 
scenario enumeration simply particular form requirements elicitation analysis 
scenarios developed discussion stake holders system order try characterize current projected uses system 
scenarios formed basis architectural evaluation 
tasks subset tasks elicited wrcs domain architectural representation wrcs component calls components connections diff win owl report wrcs rcs sccs rcs hook diff main expert 
total studied tasks 
complete evaluation complex system involve dozens scenarios 
user 
compare binary file representations 
compare binary files generated products 
example framemaker files stored binary representation 
comparing versions framemaker file want see editing changes human readable form changes binary codes stored files 

configure product toolbar 
change icons actions associated button toolbar 
maintainer 
port operating system 

minor modifications user interface 
add menu item change look feel dialog box 
administrator 
change access permissions project 

integrate new development environment 
attach example symantec 
perform scenario evaluations scenarios created need classify direct satisfied executing system developed indirect require change components connections architecture 
direct indirect classification indication fitness architecture respect satisfying set scenarios 
example looking scenario reconfigure product toolbar product say direct scenario respect wrcs architecture 
needs modify architecture achieve change task indirect architecture desirable respect feature 
stage want estimate difficult change say terms person hours required lines code impacted 
simply modify ascii resource file re start product case architectural implications indirect scenario minimal 
need change internal table re compile case implications scenario moderate 
need dramatically re structure user interface code case implications considerable 
indicate nature scenarios wrcs modules affect table 
reveal scenario interactions indirect task scenarios necessitate changes component system said interact 
scenario interaction important consideration exposes allocation functionality product design 
explicit way capable showing modules system involved tasks different nature 
high scenario interaction reveal poor isolation functionality particular component design giving clear guideline focus designer subsequent attention 
shall show section amount scenario interaction related metrics structural complexity coupling cohesion strongly correlated number defects final product 
table shows number changes required module system 
table account relevant scenarios elicited wrcs analysis just section 
scenarios imposes single change architecture number changes scenario description direct indirect changes required compare new binary file representations indirect require modifications diff comparison display results comparison 
configure product toolbar direct port operating system indirect components call win modified specifically main 
target operating system support owl owl needs ported components call owl specifically main hook 
new operating system supported novell software wrcs modified new networking environment minor modifications user interface indirect require changes components call win api specifically main diff 
change access permissions project direct integrate new development environment indirect requires changes hook addition module lines connects new development environment hook table scenario evaluations wrcs module indicates level indirect scenario interactions module 
main purposes software architecture architectural analysis communication tool software team means documenting design design rationale 
concerned results architectural analysis clearly transmitted properly emphasize problem areas 
visualization technique highlight scenario interactions fish eye view 
wrcs architecture module size proportional number interacting scenarios affect 
shows scenario interactions lie relative scale interactions 
seen clearly component scenario interaction wrcs 
component development effort concentrated 
modules main module changes main wrcs diff rcs sccs rcs hook report table scenario interactions module wrcs hook suffer high scenario interaction small amount scenario interaction 
information immediately calls attention architecturally significant features system currently exists guides designers developers allocation time effort 
proven highly effective device communication team members wrcs case study 
evaluation scenarios determined mapped structural description scenario interactions determined extent implications scenarios manifest 
remains done prioritize scenarios identified potentially problematic order arrive evaluation architecture 
result 
wrcs analysis identified number severe limitations achieving extra functional qualities portability modifiability 
major redesign system recommended 
having gone analysis procedure saam implementation substantially contributed avoiding problems wrcs developers face 
learn 
organization evaluation obtained mixed results 
senior developers managers important tool architectural analysis plan impose developments new products 
realized identify potential problems early software life cycle extremely low cost 
wrcs team evaluation regarded just fish eye representation scenario interactions wrcs main diff win owl report wrcs rcs sccs rcs hook diff exercise 
attribute fact senior developers managers perspective understand majority software development life cycle spent maintenance feature enhancements 
reason effort aids improving product support extra functional qualities significant 
developers wrcs team broad perspective 
concerned meeting release deadlines finding bug time luxury contemplating major changes architecture 
words senior manager features implement 
architectural analysis done early 
done done meaningless 
saam allowed insight product capabilities easily achieved inspections code design documents 
simple straightforward cost effective way exposed specific limitations product 
furthermore accomplished scant knowledge internal workings wrcs 
said earlier access wrcs source code 
importantly process frustrating lack real usable results caused change practice development 
convinced need architectural analysis front 
results lessons having performed architectural evaluations half dozen small medium sized software architectures large industrial systems begun see patterns emerging ways architectural analysis proceeds benefits accrue process 
saam people strengths saam largely social 
process analysis helps focus attention important details architecture allows users ignore critical areas 
scenarios proven important tool communication team developers communication development team upper level managers 
scenarios suggests refine architectural description ask questions refine analysis 
difficult get agreement appropriate set scenarios process doing forces system stakeholders talk reach consensus 
collection scenarios particularly scenarios caused problems similar systems past provide benchmark evaluate new designs 
visualization proven effective tool communicating design problems stakeholders 
visualization architecture emphasizing scenarios scenario interaction focuses attention effectively proposing areas discussion 
saam traditional architectural metrics architectural evaluation interesting relationship traditional design notions coupling cohesion 
architectures exhibit low coupling high cohesion terms breakdown functionality 
mean terms saam analysis 
low coupling means single scenario doesn affect large numbers structural components 
high cohesion means structural components host scenario interactions 
implication correspondence architectural analysis means determining coupling cohesion highly directed manner 
architectural metrics structural complexity metrics coupling cohesion criticized crude instruments measure 
saam improves metrics allowing measure coupling cohesion respect particular scenario set scenarios 
way instruments measures sharper meaningful 
example standard interpretation coupling components coupled coupled irrespective communicate say initialization repeatedly 
similarly structural complexity measures data components consider predicted changes part architecture 
simply record part architecture high structural complexity bad 
scenarios hand tease cases apart 
determining proper level architectural description point useful reflect relationship scenarios architectural description 
said benefits software architecture ability view software higher level abstraction 
means architectural diagram useful choose appropriately high level description 
designers architecture know level 
simple answer level scenarios dictate 
exactly happened iterated versions representation wrcs system 
illustrate point look part wrcs system 
describing system software architecture designers arbitrarily choose level description 
exemplified 
architecture initial structural description need map scenarios structure 
particular indirect scenario need highlight components connections affected change scenario implies 
primarily interested indirect scenarios represent extra functional qualities architecture satisfy direct scenarios represent system function 
direct scenarios interactions interesting insofar indicate component potential complexity 
mapping scenarios structural description serves purposes aids validating scenario interaction difficult process step describes guides process architectural evaluation show 
sake exposition consider mapping hypothetical indirect scenarios part wrcs architecture shown 
mapping means module main affected scenarios modules report architecture annotated indirect scenarios main diff report affected scenario forth assume simplicity sake connections affected scenarios 
consider implications scenario interaction module main 
mean multiple indirect scenarios affect single module 
possible meanings 
interaction mean scenarios class 
variants basic scenario 
case fact scenarios class cluster module taken sign 
means system functionality sensibly allocated 
put way means architecture exhibits high cohesion respect class scenarios 
possibility explain scenario interaction scenarios different classes module main subdivided shown subdivided original architectural representation 
recall said priori right level description architectural description scenarios dictate appropriate level 
example module main really composed functions deals neatly scenarios shown 
case process scenario architectural analysis helped refine level software architecture module main 
final possibility interacting scenarios different classes module main subdivided 
case reveals potential problem area architecture scenarios different classes affecting module architecture appropriately separating concerns 
determining proper set scenarios great emphasis saam places scenarios interesting question generated sufficient number scenarios adequately test architecture 
put way generating new scenarios 
possible answers question 
simple answer run resources 
complex meaningful answer involves reflecting back analysis technique 
generating scenarios addition new scenario longer perturbs design 
way scenario generation software testing prove sufficient number test cases determine point architecture exploded view module main main diff report main main main addition new test cases providing negligible improvement software 
way minimizing number scenarios needed analogy testing group scenarios equivalence classes discussed section merely generates new question 
emphasis classes scenarios determine architectural cohesion determine scenarios appropriately grouped classes 
scenarios clustered architecture class allocated distinct structural components 
components contain functionality irrelevant satisfaction scenarios devise additional scenario cause interaction components allocated 
hand components contain functionality germane satisfaction scenarios see pattern analysis set structural components affected scenarios components affected scenarios 
way thinking problem scenario classes domain experts cluster scenarios way 
additional implicit scenarios mind elicited 
acknowledgments authors acknowledge efforts contributions mauricio de simone linda creation 
sponsored part natural sciences engineering research council canada department defense 
atwood systems analyst hayden 
clements bass kazman abowd predicting software quality evaluation th international conference software quality austin tx october appear 
dardenne scenarios requirements acquisition cis tr department computer information science university oregon 
dean cordy syntactic theory software architecture transactions software engineering april 
dijkstra structure multiprogramming system communications acm 
garlan shaw software architecture 
advances software engineering knowledge engineering volume world scientific publishing 
gough higgins ray scenarios industrial case study hypermedia enhancements proceedings second ieee international symposium requirements engineering york england march 
henry kafura software structure metrics information flow ieee transactions software engineering se sept 
coupling encyclopedia software engineering ed 
jacobson jonsson object oriented software engineering case driven approach 
addison wesley 
kazman bass abowd webb saam method analyzing properties software architectures proceedings icse sorrento italy may 
kazman bass deriving software architectures quality attributes cmu sei tr software engineering institute carnegie mellon university 
kazman bass abowd clements architectural analysis case study internet information systems proceedings international workshop software intensive systems seattle april 
available cmu cs tr school computer science carnegie mellon university pittsburgh 
graham 
eds domain specific software architecture program cmu sei sr software engineering institute carnegie mellon university 
parnas design development program families ieee transactions software engineering se 
parnas criteria decomposing systems modules communications acm december 
shaw larger scale systems require higher level abstractions proceedings fifth international workshop software specification design ieee computer society 
tichy rcs system version control software practice experience july 
weiss parnas active design reviews principles practices proceedings eighth international conference software engineering 
