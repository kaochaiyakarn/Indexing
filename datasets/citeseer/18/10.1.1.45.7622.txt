aus den ur betriebswirtschaftslehre der universit kiel nr 
characterization generation general class resource constrained project scheduling problems rainer kolisch arno sprecher andreas drexl december rainer kolisch arno sprecher andreas drexl institut fur betriebswirtschaftslehre christian universitat zu kiel kiel germany phone fax mai kolisch bwl uni kiel de describes algorithm generation general class precedence resource constrained scheduling problems 
easy hard instances single multi mode resource constrained project scheduling problem benchmarked state art branch bound procedures 
strong impact chosen parametric characterization problems shown depth computational study 
results provided demonstrate classical benchmark instances researchers decades belong subset easy ones 
addition shown hard instances far smaller size presumed literature may solved optimality huge amount computational time 
keywords project scheduling precedence resource constraints nonpreemptive case multiple modes project generator branch bound methods easy hard instances 
resource constrained project scheduling research rapid progress regarding models methods documented literature cf 

time little research concerned systematic generation benchmark instances published 
generator random project scheduling problems 
unfortunately allow create instances subject certain project characteristics 
experimental purposes researchers generated test problems utilizing restricted subset project characteristics 
documented cf 
efforts briefly described cf 

result commonly benchmark instances available 
patterson compared exact procedures makespan minimization single mode resource constrained project scheduling problems cf 

problems partly quasi standard 
main drawbacks ffl collection problems different sources problems generated controlled design specified parameters 
ffl single mode case makespan minimization taken consideration 
ffl advances cf 
development exact single mode procedures demonstrated patterson set solvable average cpu time second personal computer 
instances number activities difficult solve considered benchmark anymore 
intention twofold cf 
instance generator broad class project scheduling problems utilizes parameters 
proposed literature entirely new 
second sets instances single multi mode case resource constrained project scheduling problem 
solving problems state art procedures strong impact parameters specified demonstrated 
project generator progen instances available authors request 
remainder organized follows section give formal description model 
employed parameters realization project generator dealt sections 
effect parameters computational study single multi mode case respectively outlined section 
section 
functional description generator appendix 
notation model description consider projects project specific release date ae due date ffi super project consists partially ordered jobs unique dummy source sink 
sake simplicity project refers super project 
set immediate predecessors successors job jobs numerically labeled predecessor smaller job number precedence relations jobs represented acyclic activity node network 
furthermore jobs projects consecutively labeled fj lj job project project consists lj gamma fj jobs 
categorization scheme proposed cf 
cf 
distinguish types scarce resources set renewable resources set nonrenewable resources set doubly constrained resources 
resource constant period capacity ae resource capacity units 
doubly constrained resources limited respect period capacity ae total capacity job processed modes 
job performed mode non splittable duration jm periods 
uses ae jmr units renewable doubly constrained resource period process consumes jmr units nonrenewable doubly constrained resource table provides summary notations definitions 
modelling purposes binary variables proposed projects ae ffi release date due date project cost incurring period project finished due date fj lj number job project unique source sink network set immediate predecessors successors job ef lf earliest latest finish time job upper bound projects makespan horizon set renewable nonrenewable doubly constrained resources modes job jm non preemptable duration job scheduled mode ae jmr period usage renewable doubly constrained resource required perform job mode jmr total consumption nonrenewable doubly constrained resource required perform job mode ae period availability renewable doubly constrained resource total availability nonrenewable doubly constrained resource table symbols definitions ef lf job performed mode completed period 
constraints table 
ensures job assigned exactly mode completion time time window ef lf 
time window feasible finish times calculated forward backward recursion shown 
indicates job starts release date project warrants job ends due date project 
precedence relations related jobs maintained 
secures feasibility respect renewable doubly constrained resources 
limits consumption nonrenewable doubly constrained resources availability 
common objective function 
makespan minimization minimize mj lf ef lf ef gamma jm ae fj lj lf ef ffi fj lj mh efh lf ef gamma jm ae jmr jm gamma ae rt jmr lf ef ef lf table constraints objective minimization weighted project delay minimize max fjp lf ef gamma ffi 
formulation embodies wide range precedence resource constrained scheduling problems especially single ae ffi multi mode problem ae ffi resource constrained project scheduling 
furthermore job shop flow shop type problems scheduling problems multiple parallel machines included 
note main emphasis generation set solutions constraints 
addition easy incorporate regular objective functions 
details left reader user progen 
project generation generation section briefly outline generation projects 
functions round trunc random functions rand rand defined follows rand integer random number interval rand real random number interval pseudo random numbers constructed transforming uniformly distributed random numbers 
uniformly distributed random numbers calculated developed constants implementation 
generation needs explanation 
input output displayed tables respectively 
mpm denotes mpm duration project calculated respect release dates modes shortest duration network construction described section 
number projects min max minimal maximal number jobs project min max minimal maximal number modes job min max minimal maximal duration job ae max maximal release date ffi fac due date factor table input generation network generation section stated structure project depicted acyclic 
quite natural approach construct network simple implication definition network theorem cf 
network node set arc set node directed path single source directed path single sink 
node sink source successor predecessor 
basic idea follows determine predecessor node second determine successor node add arcs 
rand min max number jobs project total number jobs including super source sink 
jobs numerically consecutively labeled projects 
project consists numerically labeled jobs gamma 
rand min max gamma number modes job jm rand min max gamma 
modes labeled respect non decreasing durations 
ae rand ae max release date project max ae max fd horizon ffi trunc mpm ffi fac gamma mpm due date project trunc rand period tardiness costs project table output generation example network consider example cf 
additional arc give extra information scheduling activities taken consideration 
definition definition network 
arc called redundant arcs gamma 
arc redundant element transitive closure anf 
construction process network arc chosen adding actual graph cases redundancy occur cf 
denotes current graph actual sets immediate successors immediate predecessors 
cardinality set nodes maximal number cases redundancy non redundant arcs theorem illustrated figures 
theorem network jv 
network connected minimal number non redundant arcs min min gamma maximal number non redundant arcs max network max gamma gamma gamma gamma ji gamma odd 
minimal number nonredundant arcs maximal number non redundant arcs min max maximal number start activities min max maximal number finish activities max max maximal number successor predecessor activities activity gamma network complexity average number non redundant arcs node including super source sink ffl net tolerated complexity deviation table input network generation characterization network parameters table 
complexity average number non redundant arcs node measure network logic introduced pascoe cf 
activity arc networks adopted davis cf 
representation 
complexity understood way fixed number jobs higher complexity results increasing number arcs greater network 
shown alvarez valdes tamarit cf 
confirmed study increasing complexity problems easier 
term complexity somewhat confounding 
stay term lot computational studies cf 
known project summary measure 
disadvantages associated measure wit number arcs give informations number possible schedules 
attempts order find elaborate measures complexity 
pointed herroelen cf 
evident structure network whichever way measured sufficient reflect difficulty encountered resolution problems 
ii measure normalized interval 
normalized measure network structure order strength proposed cf 
assembly line balancing problem cooper cf 
project scheduling problem 
order strength representation calculated dividing number arcs maximal number arcs 
unfortunately maximal number arcs drawbacks includes redundant arcs far greater realistic number precedence relations scheduling problems 
maximal number non redundant arcs purpose exceed number realistic precedence relations 
consequence realistic projects order strength converges zero increasing number jobs 
describe network construction single project multi project network maintained analogously 
step number start finish activities drawn randomly interval min max min max respectively 
arcs connect dummy source start activities finish activities dummy sink added network 
step lowest indexed non start activity activity assigned predecessor activity random 
similar step activity successor assigned cf 
arcs 
steps jobs considered order increasing job number 
step arcs added complexity reached 
procedure take account ffl avoid redundancy precedence relations start activities finish activities respectively 
ffl adding arcs step arc produce redundant precedence relations 
network generation ffl limitation maximal number successors predecessors number start finish activities arc step incorporated predecessors allowed 
cases generation procedure restarted ffl required complexity low happen step number arcs integrated network high ffl net ffl step due limited number predecessors successor job available 
ffl step job successors available lead redundant precedence relations 
ffl required complexity obtainable step limited number trials randomly selecting node calculating possible successors arcs addable obtain gamma ffl net appropriate reduction set predecessors successors steps previously described numerical labeled network realized 
adjustment input parameters special network structures general serial structures network shapes described obtainable 
multi project general structure multi project serial structure min max minimal maximal number resources type min max minimal maximal number resources type job mode combination min max minimal maximal demand resource type probability demand resource type duration constant monotonically decreasing duration rf resource factor type rs resource strength type ffl rf tolerated resource factor deviation table input demand generation resource demand availability generation resource demand generation resource demand generation consists decisions 
determine resources consumed job mode combinations second job mode combination uses consumes resource calculate number units consumed 
step refer request generation subsection refer generation demand level subsection 
consider resource type fr dg 
number resources type determined randomly drawn integer min max rand min max requested resources purposes generalization resource factor rf introduced pascoe cf 
single mode case utilized studies cooper cf 
alvarez valdes tamarit cf 

single mode case rf calculated follows rf jrj jr 
resource factor reflects average portion resources requested job 
measure density array jr rf job requests resources 
rf indicates job requests resource obtain unconstrained mpm case 
order rf multi mode case generalize straightforward type dependent resource factor rf fr dg rf gamma gamma jmr 
rf normalized interval interpretation close original rf 
reflects average portion resources type requested job mode combination measures density dimensional array jmr course rf equals proposed pascoe case table shows input parameters 
generation resource request internal variables data structures represent information job mode combination requests resource dimensional array rq binary digits 
rq initialized zeros set equal requests resource actual resource factor arf calculated follows arf gamma gamma rq actual number resources requested obtained rq get ct actual set triplets ct rq max set job mode resource combinations furthermore rq exceeding max steps performed internal variables continuously updated 
step job mode combination far minimal number requested resources min reached additional resources selected randomly 
step actual resource factor asserted addition triplets ct ct actual resource factor incremented randomly drawing triplet ct establishing minimal number resources requested establishing resource factor 
gamma gamma gamma step step min max table resource factor establishing table triplet set ct max fixed 
step actual resource factor declines tolerated arf rf delta gamma ffl rf rf delta ffl rf warning message 
level demand rq positive demand job mode combination resource generated 
interrelation durations modes demand resource reflected types functions 
duration independent decreasing increasing duration 
renewable doubly constrained resources period demand nonrenewable resources total demand generated interrelation prescribes 
resource interrelation defined rand type dependent probabilities 
job demand randomly drawn integer interval min max assigned modes request resource 
case job levels interrelation demand duration drawn randomly parameter specified interval rand min max rand min max low high calculated follows low high number modes job different durations requesting resource calculate delta high gamma low yield intervals follows round high gamma deltak round high gamma delta gamma modes labeled respect nondecreasing durations draw demand randomly intervals corresponding durations 
illustrates generation level demand 
jm rq rq demand generated randomly interval 
due construction inefficiency defined occur definition job inefficient modes modes jm ae jmr ae jmr inefficient modes occur job calculate number resources requested job rq request demand generation restarted additional constraint efficiency obtainable generation interrupted parameters adjusted 
resource availability generation order express relationship resource demand jobs resource availability cooper cf 
introduced resource strength rs calculated follows rs jr rs utilized alvarez valdes tamarit cf 

main drawbacks proposed measure 
point propose new rs overcome disadvantages ffl rs standardized 
ffl second small rs guarantee feasible solution 
jobs jr respectively adjust resource strength rs order achieve feasible solution 
ffl third important regard myopic fashion scarcity resources calculated 
shall depicted simple example consider projects exactly data network 
project parallel structure job immediate successor dummy source immediate predecessors dummy sink project serial structure job exactly predecessor successor 
assume resource availability large order assure problems 
rs projects exactly obviously serially structured project mpm case quite easy solve parallel structured project dependent amount resource availability difficult 
order overcome disadvantages created methodology measure resource applicable types resources 
determine minimal demand min maximal demand max resource availability convex combination rs scaling parameter min rs max gamma min 
respect resource get smallest feasible resource rs 
rs amount resources just large achieve mpm case 
nonrenewable resources minimal maximal availabilities complete project calculated follows min gamma min fk jmr max gamma max fk jmr type dependent resource strength rs availability min round rs max gamma min considered resource renewable minimal demand min gamma max ae min fk ae jmr oe maximal demand calculated peak demand precedence preserving earliest start schedule 
job performed lowest indexed mode employing maximal period demand respect resource consideration 
determine maximal period demand job respect resource jr max fk ae jmr mode shortest duration jr min ae jmr jr precedence relations due dates project calculate earliest start schedule modes determined 
obtain resource dependent start time st completion time ct job gamma 
calculate peak period demand max max gamma st tct jm jr available amount type dependent resource strength rs ae min round rs max gamma min state rs lowest resource feasible level respect generated 
rs resource unconstrained mpm case respect generated 
rs 
feasibility problem assured mode coupling resource constraints 
computational results single mode case currently advanced exact procedure solving makespan minimization problems implicit enumeration procedure type backtracking demeulemeester cf 

coded solves job problems patterson instances average computational time seconds optimality ibm ps model sx sx processor mhz 
original implementation algorithm provided demeulemeester computational study 
carried series experiments single mode problems 
full factorial design varied complexity resource factor rf resource strength rs 
constant varying parameter levels documented table respectively 
obviously jn jdj pr 
projects combination rf rs total delta delta delta instances generated 
solved exact solution procedure 
utilizing previously described machine imposed time limit seconds maximal cpu time 
instances solved seconds average 
minimum solution time turned seconds seconds maximum solution time imposed limit seconds 
table provides frequency distribution solution times 
hard problems needed cpu seconds jrj ur qr min max table constant parameter levels single mode instances full factorial design rfr rsr table variable parameter levels single mode instances full factorial design optimal solution verified imposed time limit 
order find effects different parameters performed mean value analysis regarding cpu times varying parameters 
effects altering complexity seen table 
enlarged solution times decrease 
due fact adding precedence relations network lowers number feasible schedules upper bound projects makespan 
reduces enumeration tree problems easy 
effect mentioned alvarez valdes tamarit heuristics cf 

increase resource factor results increase solution times cf 
table 
contradicts results alvarez valdes tamarit 
observed problems resource factor easier ones resource factor 
assume results somewhat distorted myopic resource strength pointed section 
concluded problems harder average portion resources requested job increases 
remarked majority instances patterson resource factor 
table seen resource strength strongest impact solution times 
problems rsr turned hardest 
instances range instances table frequency distribution solution times single mode instances full factorial design cpu table effects complexity solution times rfr cpu table effects resource factor rfr solution times optimum solution verified imposed time limit 
problems rsr resource constrained anymore optimal solution mpm schedule 
rsr cpu table effects resource strength rsr solution times order get insight effects parameters solution time chosen combination rf rs average solution time seconds needed 
ceteris paribus design changed just parameter time generated instances parameter level remaining tables 
effect number renewable resources seen table 
quite intuitive increasing number constrained resources complicates problem 
effects number start activities depicted table 
increasing number start activities keeping number jobs precedence relations constant generally results parallelism network problem harder solve 
reasoned strong impact resource strength solution time indicated full factorial design study thoroughly study rsr performed 
table shows results varying rsr steps 
average solution time continuously increases decreasing rsr hardest problems ones minimal resource availability provided 
relationship hardness problem resource scarcity deviates function conjectured herroelen cf 
computational study alvarez valdes tamarit cf 

effect growing number jobs outlined table 
known problem np complete respect number activities cf 
surprising jrj cpu table effects number resources jrj solution times cpu table effects number start activities solution times solution times grow rapidly number jobs 
sum single mode case tractable suggested previously published patterson test data 
multi mode case makespan minimization problems conjecture effects complexity number constrained resources number start activities number jobs single multi mode case 
concentrated mutually effects resource factor resource strength renewable nonrenewable resources 
utilized full factorial design constant varying parameter levels table respectively 
instances level combination varying parameters generated delta delta delta delta problems 
problem solved state art solution procedure patterson 
cf 

branch bound enumeration algorithm backtracking variety 
computational results patterson 
cf 

instances generated characteristics similar ones instances patterson 
number jobs ranged instances jobs 
solution procedure coded fortran implemented ibm mainframe computer 
imposed time limit minutes problems jobs solved optimality 
preponderance problems ranged jobs 
original solution procedure available recoded code rsr cpu table effects resource strength rsr solution times cpu table effects number jobs solution times jrj ur qr jn un qn min max table constant parameter levels multi mode instances full factorial design implemented ibm rs workstation approximately times faster ibm mainframe times faster ibm ps sx 
pointed section guarantee feasibility problems feasible solution 
average time find verify optimal solution seconds 
minimum maximum time seconds seconds respectively 
table gives frequency distribution solution times 
table effects varying resource factors documented 
increasing resource factor problems harder 
solution times far sensitive rfn factor rfr factor 
effects resource strength seen table 
nonrenewable resources scarce problems turn difficult 
amazingly hold renewable resources general 
bottom line table shows reverse true problems harder solve increasing availability 
recalls results single mode case quite unexpected 
thorough study table provides explanation 
case sufficient nonrenewable resources rsn solution times increase decreasing availability renewable resources 
small amounts nonrenewable resources rsr effect reverses 
due strong impact rsn mean solution time shows tendency scarce nonrenewable resources 
sum reproduce promising results provided patterson 
cf 
parameter levels rs rs table variable parameter levels multi mode instances full factorial design range instances table frequency distribution solution times multi mode instances rfr rfn table effects varying resource factor multi mode case 
multi mode instances general tractable restricted number jobs 
additional done speed convergence 
progen project generator broad class precedence resource constrained scheduling problems utilizes known new summary measures 
benchmark instances single multi mode case project scheduling produced solved state art procedures 
results show strong impact proposed parameters furthermore hard easy instances discriminated 
general promising results previously published studies hold true small problem instances remain optimal state art algorithms 
rsr rsn table effects varying resource strength availability generator instances computational study provide tool evaluation algorithms project scheduling environment 
due versatility generator related areas single multiple machine scheduling 
erik demeulemeester katholieke universiteit leuven providing code algorithm 
appendix functional description progen progen coded borland turbo pascal 
code consists units cf 
table corresponding tasks 
units typedecl compiled available turbo pascal unit format 
code typedecl progen amenable users adjust size arrays specific needs 
adjustment typedecl compiled units linked turbo pascal build command 
user wish change size arrays readily available execution file progen 
progen main program 
typedecl definition constants types variables data structures 
generation network 
generation resource request level demand 
generation resource availability 
inout read write routines 
utility support functions random number generator schrage 
table units progen starting progen needs file parameter settings henceforth refered file 
file suffix bas 
table example file depicted 
input relates parameters sections 
starting progen gets menu shown table 
option choose file expl bas 
file checked existence actual subdirectory 
option allows define seed implemented random number generator 
default random number generator turbo pascal invoked generate seed congruence generator 
default value number instances 
different number instances required option adjustment 
adjustments displayed upper right part menu 
option instance generator started 
create number instances 
instances name file suffix dat 
labeled consecutively get files expl dat expl dat 
warning error messages generated instances written separate file name file suffix err expl err 
possible error messages shown table 
divided classes 
messages wrong input messages process generation messages deviation parameters serious errors lead interruption generation process 
example instance file corresponding error file displayed tables respectively 
error error occur please send input file seed authors 
order avoid user unintentional erasing instance files generate problems file error file name exists actual subdirectory 
instances erased restarting generation 
case problems please contact authors 
number projects minimal number jobs project maximal number jobs project maximal release date maximal due date modes minimal number modes maximal number modes minimal duration maximal duration network minimal number start activities project maximal number start activities project maximal number successor job minimal number finish activities maximal number finish activities maximal number predecessors complexity complexity network availability rmin minimal number renewable resources rmax maximal number renewable resources minimal period demand maximal period demand minimal number resources requested maximal number resources requested resource factor rrs resource strength number func 
probability choose constant function probability choose decreasing function nmin cf 
renewable resources nmax nrs number func 
dmin cf 
renewable resources dmax drf number func 
limit iterations tolerance network tolerated complexity deviation tolerance rf tolerated resource factor deviation maximal number trials format base file colon followed value spaces allowed colon value comment allowed follow value comments allowed colon value comment space value integer exception 
due date factor 
complexity 
resource factor 
resource strength 
function probabilities 
tolerances table parameter settings file project generator progen version file initial value randomly number instances initial value number instances generate program table progen error predecessor determined 
error successor determined 
error complexity achieved low 
error complexity achieved high 
error max req 
resources resources type 
max 
error max req 
resources resources type 
max 
error max req 
resources resources type 
max 
error min req 
resources max type 
min max 
error min req 
resources max type 
min max 
error min req 
resources max type 
min max 
error rf achieved min req 
resources large 
error rf achieved min req 
resources large 
error rf achieved min req 
resources large 
error rf achieved max req 
resources small 
error rf achieved max req 
resources small 
error rf achieved max req 
resources small 
error obtained rf falls short tolerated range error obtained rf falls short tolerated range error obtained rf falls short tolerated range error obtained rf exceeds tolerated range error obtained rf exceeds tolerated range error obtained rf exceeds tolerated range error trial produce job non dominated modes 
error network generation success 
error redundant arcs network 
error non dominated modes job nt produced 
table error messages file expl bas initial value random generator projects jobs incl 
supersource sink horizon resources renewable nonrenewable doubly constrained project information 
jobs rel date duedate cpm time precedence relations 
modes successors successors requests durations 
mode duration table example instance file sample file expl dat error successor determined error complexity achieved low error successor determined error complexity achieved low error trial produce job non dominated modes table example file error messages alvarez valdes tamarit heuristic algorithms project scheduling review empirical analysis 
eds advances project scheduling 
elsevier amsterdam pp 

balas 
project scheduling resource constraints 
beale 
ed applications techniques 
english universities press london pp 

scheduling project networks resource constraints time windows 
annals operations research vol 
pp 

bell han new heuristic solution method resource constrained project scheduling 
naval research logistics vol 
pp 

bell park solving resource constrained project scheduling problems search 
naval research logistics vol 
pp 

bock patterson comparison due date setting resource assignment job preemption heuristics scheduling problem 
decision sciences vol 
pp 


heuristics scheduling projects resource restrictions resource duration modes 
working des sciences de administration universite laval quebec canada 
bowman 
schedule sequencing problem 
operations research vol 
pp 

christofides alvarez valdes tamarit project scheduling resource constraints branch bound approach 
european journal operational research vol 
pp 

cooper 
heuristics scheduling resource constrained projects experimental investigation 
management science vol 
pp 

davies 
experimental investigation resource allocation multi activity projects 
operational research quarterly journal operational research society vol 
pp 

davis 
exact algorithm multiple constrained resource project scheduling problem 
phd dissertation yale university new haven usa 
davis 
project network summary measures constrained resource scheduling 
transactions iie transactions vol 
pp 

davis heidorn algorithm optimal project scheduling multiple resource constraints 
management science vol 
pp 

davis patterson comparison heuristic optimum solutions resource constrained project scheduling 
management science vol 
pp 

hebert resource constrained project crashing 
omega vol 
pp 

demeulemeester 
optimal algorithms various classes multiple project scheduling problems 
phd dissertation katholieke universiteit leuven belgium 
demeulemeester herroelen branch bound procedure multiple resource constrained project scheduling problem 
management science appear 
drexl 
scheduling project networks job assignment 
management science vol 
pp 

drexl gr nonpreemptive multi mode resource constrained project scheduling 
iie transactions appear 

activity networks project planning control network models 
wiley new york 
herroelen measurement complexity activity networks 
european journal operational research vol 
pp 

herroelen demeulemeester generation activity networks 
working department applied economic sciences katholieke universiteit leuven belgium 
jackson boggs nash powell guidelines reporting results computational experiments 
report ad hoc committee 
mathematical programming vol 
pp 

johnson 
algorithm resource constrained project scheduling problem 
phd dissertation institute technology usa 

coefficients network complexity 
management science vol 
pp 

karp 
reducibility combinatorial problems 
miller thatcher eds complexity computer applications 
plenum press new york pp 

kim hierarchical approach multi resource scheduling explicit lateness costs 
iie transactions appear 

multi project scheduling analysis project performance 
working school business vcu richmond usa 
davis multi project scheduling categorization heuristic rules performance 
management science vol 
pp 

multi project scheduling analysis project performance 
iie transactions vol 
pp 

lawrence morton resource constrained multi project scheduling tardy costs comparing myopic bottleneck resource pricing heuristics 
working graduate school industrial administration carnegie mellon university pittsburgh usa 
mason branch bound algorithm minimizing cost project scheduling 
management science vol 
pp 


experimental investigation comparative evaluation production line balancing techniques 
management science vol 
pp 

neumann 
operations research verfahren bd 

munchen wien 
pascoe 
allocation resources revue recherche pp 

patterson 
project scheduling effects problem structure heuristic performance 
naval research logistics quarterly naval research logistics vol 
pp 

patterson 
comparison exact approaches solving multiple constrained resource project scheduling problem 
management science vol 
pp 

patterson huber horizon varying zero approach project scheduling 
management science vol 
pp 

patterson roth scheduling project multiple resource constraints zero programming approach 
transactions iie transactions vol 
pp 

patterson talbot algorithm general class precedence resource constrained scheduling problems 
eds advances project scheduling 
elsevier amsterdam pp 

patterson talbot computational experience backtracking algorithm solving general class precedence resource constrained scheduling problems 
european journal operational research vol 
pp 

wolfe scheduling limited resources zero programming approach 
management science vol 
pp 

scheduling project networks 
annals operations research vol 
pp 

russell 
cash flows networks 
management science vol 
pp 

russell 
comparison heuristics scheduling projects cash flows resource restrictions 
management science vol 
pp 

sampson weiss local search techniques resource constrained project scheduling problem 
research report school university virginia usa 
schrage 
solving resource constrained network problems implicit enumeration nonpreemptive case 
operations research vol 
pp 

schrage 
portable fortran random number generator 
acm transactions mathematical software vol 
pp 

node ordering heuristic network scheduling multiple resource constraints 
foundations control engineering vol 
pp 


approaches problems resource allocation project activities comparative study 
journal operational research society vol 
pp 


multiobjective network scheduling efficient renewable nonrenewable resources 
european journal operational research vol 
pp 

smith daniels smith daniels optimal project scheduling materials ordering 
iie transactions vol 
pp 

stinson 
branch bound algorithm general class multiple resource constrained scheduling problems 
phd dissertation graduate school business administration university north carolina usa 
stinson davis multiple scheduling branch bound 
transactions iie transactions vol 
pp 

talbot 
project scheduling resource duration interactions nonpreemptive case 
working graduate school business administration university michigan usa 
talbot 
resource constrained project scheduling time resource tradeoffs nonpreemptive case 
management science vol 
pp 

talbot patterson efficient integer programming algorithm network cuts solving resource constrained scheduling problems 
management science vol 
pp 


heuristic scheduling activities resource precedence restrictions 
management science vol 
pp 


measures restrictiveness project networks 
networks vol 
pp 

ulusoy ozdamar heuristic performance network resource characteristics resource constrained project scheduling 
journal operational research society vol 
pp 


project scheduling discrete continuous resources 
ieee transactions systems man cybernetics vol 
pp 


certain models resource allocation problems 
vol 
pp 

yau ritchie linear model estimating project resource levels target completion times 
journal operational research society vol 
pp 

