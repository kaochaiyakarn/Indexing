virtual time global states distributed systems mattern department computer science university kaiserslautern germany distributed system characterized fact global state distributed common time base exist 
notion time important concept day life decentralized real world helps solve problems getting consistent population census determining potential causality events 
argue linearly ordered structure time adequate distributed systems propose generalized non standard model time consists vectors clocks 
clock vectors partially ordered form lattice 
timestamps simple clock update mechanism structure causality represented isomorphic way 
new model time close analogy minkowski relativistic spacetime leads interesting characterization global state problem 
new algorithm compute consistent global snapshot distributed system messages may received order 
asynchronous distributed system consists processes common memory communicate solely messages unpredictable nonzero transmission delays 
system notions global time global state play important role hard realize sight definition clear 
general process system immediate complete view process states process approximate global edited version minor alterations title originally appeared proceedings international workshop parallel distributed algorithms chateau de bonas france october 
ed 
copyright elsevier science publishers 
northholland author permission 
current address department computer science university saarland saarbrucken germany 
email address mattern cs uni sb de view idealized external observer having immediate access processes 
fact priori process consistent view global state common time base exist cause typical problems distributed systems 
control tasks operating systems database systems mutual exclusion deadlock detection concurrency control difficult solve distributed environment classical centralized environment large number distributed control algorithms problems wrong 
new problems exist centralized systems parallel systems common memory emerge distributed systems 
prominent problems distributed agreement distributed termination detection symmetry breaking election problem 
great diversity solutions problems really beautiful elegant truly amazing exemplifies principles distributed computing cope absence global state time 
design verification analysis algorithms asynchronous systems difficult errorprone try 
simulate synchronous distributed system asynchronous systems 
simulate global time common clock 
simulate global state common memory simulated properties design simpler algorithms 
approach realized called synchronizers simulate clock pulses way message generated clock pulse received pulse 
synchronizer intended additional layer software transparent user top asynchronous system execute synchronous algorithms 
message overhead mechanism high 
second approach need additional messages system remains asynchronous sense messages unpredictable transmission delays 
approach advocated lamport 
shows virtual time implemented logical clocks simplify design distributed mutual exclusion algorithm 
morgan toueg develop idea 
approach pursued chandy lamport snapshot algorithm fundamental paradigms distributed computing 
panangaden taylor elaborate idea leading characterization concurrent common knowledge 
obviously notions global time global state closely related 
chandy lamport algorithm process freezing computation compute best possible approximation global state global state occurred processes took snapshot local state simultaneously 
process system decide snapshot state really occur occurred stable properties global predicates remain true true termination detection deadlock detection shows snapshot algorithm general solution problems 
specific algorithms problems simpler efficient 
sense snapshot algorithm computes best possible attainable global state approximation lamport virtual time algorithm perfect 
fact mapping partially ordered events distributed computation linearly ordered set integers losing information 
events may happen simultaneously may get different timestamps happen definite order 
applications mutual exclusion described lamport defect noticeable 
purposes distributed debugging important defect 
aim improving lamport virtual time concept 
argue linearly ordered structure time adequate distributed systems partially ordered system vectors forming lattice structure natural representation time distributed system 
non standard model time resembles respects minkowski relativistic space time 
particular extended range simultaneity events causally related simultaneous representing causality isomorphic way loss information 
new notion time generalized clock synchronization algorithm yields process best approximate knowledge idealized time external observer 
idealized global time quite naturally defined supremum local clock vectors 
vector structure time shown isomorphic structure possible states constructed snapshot algorithm yielding complementary view global time global state 
event structures setting process viewed consisting sequence events event atomic transition local state happens time 
events atomic actions occur processes 
usually events classified types send events receive events internal events 
internal event causes change state 
send event causes message sent receive event causes message received local state updated values message 
notice called message gamma driven models distributed computing actor model type event receipt message triggers execution atomic action resulting local state update finite number messages sent processes 
simplicity message driven models attractive point view 
events related events occurring particular process totally ordered local sequence occurrence receive event corresponding send event 
relationship heart notion virtual time 
central concept causality relation determines primary characteristic time influence past 
formally event structure pair set events irreflexive partial order called causality relation 
event structures represent distributed computations way 
computation holds conditions holds events process precedes sending event message corresponding receive event causality relation smallest relation satisfying conditions 
helpful view definition terms diagram 
obviously signifies possible event causally affect event graphically means follow path causality event event diagram moving direction arrows left right process lines 
possible view diagram timing diagram actual computation horizontal direction represents real time 
events depicted dots occur specific instant time observed idealized external observer 
messages represented diagonal arrows 
observer continuously watch messages way destination draw accurate diagram actual message flow 
notice dimensional space time diagram represents loci objects gamma dimensional space time 
possible view diagram poset gamma diagram partial order 
usually poset diagrams drawn placing element higher 
transitivity assumed connections directly related elements drawn redundant connections omitted 
shows poset diagram computation 
obviously diagrams isomorphic 
implicit global time depicting specific computation shows logical relationships events causal structure computation 
shows diagram similar diagram depicted 
notice partial event order events happen global time instant 
diagrams showing causality relation called equivalent 
obviously time diagram transformed equivalent diagram stretching compressing horizontal process lines representing local time axis 
gets operational view equivalence transformation time diagrams assuming process lines consist idealized rubber bands 
time diagram constructed time diagram stretching compressing elastic bands equivalent long arrows representing message flow go backwards right left time 
time diagrams messages flowing backwards time obviously depict realizable situation 
valid time diagram event drawn left event restriction going poset diagram actual time diagram 
notice rubber band equivalence transformations time diagrams exactly transformations leave causality relation invariant 
consistent cuts process sends messages processes order initiate local actions recall distributed information messages usually received different time instants 
due unpredictable message delays possible guarantee local actions triggered messages performed simultaneously 
motivates notion cuts 
graphically cut time slice zigzag line cutting time diagram parts left part right part 
formally augment set events include new called cut event process fc ng denotes number processes 
connecting events diagram yields cut line 
cut partitions sets past events happen cut events happen cut 
denote local event order iff occur process 
formally identify cut past set yielding definition definition cut event set finite subset lost cut events straightforward associate cut defined definition set cut events vice versa 
clear context mean cut past set cut events 
shows poset diagram set past cut depicted 
definition anticipates notion time definition cut cut diagram cut line cut cut right cut line 
vice versa 
notice reflexive cut 
partial order set cuts 
forms lattice theorem operations set cuts partially ordered event set forms lattice 
proof straightforward 
recall lattice partially ordered set elements greatest lower bound inf upper bound sup 
obviously inf sup cuts provisions taken happen cut contains receiving event message sending event 
situation undesirable cuts compute global state distributed system cut line section 
definition rules inconsistent cuts requesting cuts left closed causality relation definition consistent cut event set finite subset cut consistent message received sent necessarily vice versa 
shows consistent cut 
cut inconsistent event part cut immediate predecessor 
obviously set consistent cuts subset set cuts partially ordered set theorem set consistent cuts sublattice set cuts 
simple proof consistent cuts closed sup inf left reader 
lattice structure consistent cuts guarantees consistent cuts cut cut earlier 
extends finite set consistent cuts sup theorems stated proofs see 
graphical interpretation obvious 
assume cut line rubber band 
stretch band straight vertical 
message arrow crosses right left cut inconsistent 
consistent 
shows rubber band consistency test inconsistent cut 
notice violating condition theorem 
theorem consistent cut consisting pair cut events causally re lated cut events consideration remarks previous section sees consistent cuts possible theorem time diagram consistent cut consisting cut events equivalent time diagram occur simultaneously cut line forms straight vertical line 
global states consistent cuts theorem shows cut events consistent cut occur simultaneously potential execution distributed computation cut events simultaneous real time 
snapshot local states processes taken real time obviously consistent 
global state computed consistent cut correct 
global state consistent cut comprises local state process time cut event happens set messages sent received 
time diagram messages characterized arrows crossing cut line left right side 
snapshot problem consists designing efficient protocol yields consistent cuts collect local state information 
furthermore way messages crossing cut captured 
chandy lamport algorithm time assuming message transmission fifo 
propose similar algorithm section non fifo channels 
concept time lamport notes concept time fundamental way thinking 
fact real time helps master problems decentralized real world 
consider example problem getting consistent population census 
agrees common time instant far gets counted moment 
time useful concept considering possible causality 
consider person suspect crime person far away site crime instant close time crime culprit 
examples characteristics real time 
clocks events timestamped happens earlier causally affect 
lamport mysteries universe possible construct system clocks running independently observe causality relation 
asynchronous distributed systems real time clocks common time base exist 
fine approximation having features real time design distributed algorithms considerably simplified 
idea morgan factorize distributed algorithms separate algorithms algorithm global time available processes 
clock synchronization algorithm realizing virtual time suitable approximation global time 
separation concern helps design new distributed algorithms idea elaborated possible combine components single optimized algorithm 
statements vague give raise questions exactly virtual time considered best possible approximation global real time 
algorithm written assuming existence real time correct virtual time 
essential structure real time 
questions considered sequel 
nature time studied philosophers mathematicians physicists logicians 
formal structure model theoretic sense interest prevalent mathematical picture standard time set instants temporal precedence order 
earlier satisfying certain obvious conditions 
notice transitivity imply asymmetry 
linearity 
eternity density 
non isomorphic models satisfying axioms obvious rationales reals cases real time clocks need properties example digital clocks obviously satisfy density axiom useful cases 
replacing density discreteness integers standard model time 
shows implementing clocks hardware counters variables type real integer computer programs correct 
occasionally notice fact axioms perfectly realized large simulation programs example may happen clock variable overflows simulation time eternal rounding errors result events happening time shouldn simulation time dense 
main question design system logical clocks synchronization mechanism asynchronous distributed systems fulfills axioms making real time physical clocks similar mechanisms 
system logical clocks timestamp events causality relation preserved 
turns lamport clock synchronization mechanism sketch section fulfills requirements useful respects 
despite defect preserve causal independence 
see preserving causal independence possible denoting number processes time domain 
virtual time main difference virtual time real time virtual time identifiable succession events discrete 
virtual time flow means real time passage escape influence 
just doing waiting virtual time pass dangerous happens virtual time stands virtual time instant waiting may occur 
concept virtual time distributed systems brought prominence lamport 
widely distributed control algorithms explicit mutual exclusion algorithms concurrency control algorithms 
morgan gives applications virtual time raynal shows drift logical clocks different processes bounded 
logical clock mechanism assigns event value timestamp time domain certain conditions met 
formally logical clock function partially ordered set clock condition holds 
irreflexive relation called earlier converse 
stated verbally clock condition reads event causally affect event earlier smaller timestamp 
notice converse implication required 
consequence clock condition properties hold event occurs event single process event assigned logical time earlier logical time assigned event 
message sent process logical time send event earlier logical time receive event 
usually set integers taken time domain logical clock implemented system counters process guarantee clock condition local clocks obey simple protocol executing internal event send event process clock ticks message contains timestamp equals time send event 
executing receive event message timestamp received clock advanced max assume timestamp event new value local clock updating local clock occurs just executing event 
typical value different tick approximation real time difference tick 
events mutually independent denoted 
say timestamps mutually independent events 
shows events causally independent may get different timestamps 
assumed initially 
timestamp different values 
depicts situation 
looking timestamps conclude events independent timestamps 
conclude guaranteed past influenced 
possible decide events causally related 
notice causal relation necessarily mean causes modal sense 
means cause 
important defect looking timestamps events possible assert event influence event 
reason defect preserves lot structure mapping linear order preserve negations 
looking better suited domain set isomorphism mapping vector time assume process simple clock incremented time event happens 
idealized external observer having immediate access local clocks knows moment local times processes 
appropriate structure store global time knowledge vector element process 
example depicted illustrates idea 
aim construct mechanism process gets optimal approximation global time 
equip process clock consisting vector length total number processes 
time henceforth considered set vectors consequent clocks devices hold time implemented vectors arrays 
event local clock ticks 
process ticks incrementing component clock real valued increment acceptable considered occur event action timestamp event clock value 
notice timestamps vectors 
lamport original scheme message gets piggybacked timestamp consisting vector local clock 
receiving timestamped message process gets knowledge processes global time approximation 
receiver combines knowledge global time approximation receives simply sup timestamp message sup componentwise maximum operation sup max component transitivity scheme process may receive time updates clocks processes 
shows example time propagation scheme 
causally independent events may happen order 
somewhat arbitrary global time incremented sequence possible reflect flow time different equivalent time diagrams 
time observed computation depicted impossible clock value 
notice process advance th component global time accurate knowledge local time 
yields theorem theorem instant real time 
possible compare time vectors defining relations definition time vectors iff 
iff iff 
notice partial orders 
reflexive symmetric concurrency relation generalization simultaneity relation standard time 
notion standard time merely intersection point past larger range 
notice concurrency relation transitive 
definition assigns time cut definition cut denote cut event process maximal event belonging special cut events exist recall assume existence initial event process 
sup cn called global time cut 
notice sup associative 
shows different cuts time example 
consistent cuts time unique yielding practical consistency criterion cuts theorem defined definition 
consistent iff cn proof consistent theorem assume happen instant real time 
theorem applies yields result 
inconsistent exists message sent process received process denotes timestamp message 
cn 
structure vector time non linear vector time interesting structure 
theorem theorem lattice 
proof obvious 
vectors upper bound simply sup greatest lower bound inf inf defined analogously sup replacing max min 

things interesting consider possible time vectors event set analogy theorem prove theorem set possible time vectors event set sublattice 
fact possible identify consistent cut time vector identification possible time vectors consistent cuts leads main theorem theorem event set lattice consistent cuts lattice possible time vectors isomorphic 
isomorphism looking 
leave proof reader 
theorem nice important consequence theorem iff iff 
gives simple method decide events causally related take timestamps check 
test succeeds events causally related 
causally independent 
test simplified processes events occur known theorem occurs process event iff 
pictorial meaning causality relation correctness theorem theorem easy see 
event causally affect event exist path causality time diagram propagates local time knowledge event event propagating time knowledge path increase conversely event knows local time exist causality path 
see 
path poset diagram corresponds possible interleaving linear sequence events consistent causality relation 
set paths determines possible development global virtual time 
time spread freely dimensions messages put restrictions development time message sent process received process induces restriction equivalently 
time diagram depicted shows messages displays lattice structure area cut restrictions lattice structure systems processes pleasing 
minkowski space time standard model time fulfills axioms section 
reality standard 
fact finite speed light minkowski wellknown relativistic space time model may reflect reality accurately standard model time 
nice analogies vector model time 
minkowski model dimensional space onedimensional time combined give dimensional picture world 
physical reality restrict case giving dimensional structure time diagram temporal spatial dimension 
due finite velocity signals event influence events lie interior called light cone depicted 
notice similarity describe phenomenon 
events causality influence influence coordinates events speed light simple arithmetic exercise check events causality event may influence 
notice partially ordered set events event space time stamp coordinates causality preserving transformations correspond rubber band transformations play important role minkowski space time famous lorentz transformations leaving light cone invariant 
analogy goes light cones dimensional minkowski space form lattice 
depicts construction 
simply identify space time point light cone 
intersection light cones define supremum intersection past light cones define infimum 
notice light cones intersect 
identification analogous identification cuts time vectors 
sight strong structural analogy minkowski space time vector time surprising indicate vector time fundamental non fictitious concept 
real world distributed analogy strong dimensional light cones form lattice 
application vector time interesting application vector concept field distributed debugging 
locate bug caused error programmer think causal relationship events program execution 
debugging distributed environment difficult traditional debugging mainly increased complexity race conditions 
tracing events important timestamped trace data detect possible race conditions 
obviously potential race condition exists causal relationship events 
detected comparing timestamps vectors 
time vectors help proving event cause event helping locate error 
notice possible influences 
concept vector time implemented integrated distributed debugging system experimental multicomputer system 
independently vectors logical clocks distributed debugging suggested discussed 
potential application similar distributed debugging called trace checkers distributed systems observe sequence events check possible sequence events specification 
purpose performance analysis useful get information potential concurrency 
events executed concurrently 
analysis timestamped trace data execution help determine degree parallelism 
scheme similar time vectors detect mutual inconsistencies multiple file copies context network partitioning 
parker show vectors detect situations copies file modified independently separate partitions 
copy file socalled version vector th component counts number updates file site version vectors version conflict signalled 
file copies version vectors conflict may reconciled action version vector reconciled file sup 
distributed simulation system process logical clock 
clocks completely unrelated 
process safely advance clock guaranteed receive message process time 
fact things little bit complicated main point order get high degree parallelism essential process approximation processes logical clocks 
concept vector time applies quite naturally piggybacking time vector application messages increases speedup 
distributed simulation system idea currently implemented 
vector time design distributed algorithms 
having sense best possible approximation global time simplify development distributed algorithms protocols 
application section 
computing global states systems fifo channels section reinvent variant algorithm time vectors show snapshots computed messages necessarily received order sent 
concentrate local states processes messages transit considered subsequently 
clearly notion global state distributed system meaningful consistent cuts 
theorem shows determined cut consistent 
looking method guarantees yield consistent cuts 
real world snapshot algorithm obtain consistent population census simple processes agree time 
process takes local snapshot time 
time local snapshots collected construct global snapshot 
want adapt algorithm distributed systems common clock processes agree single virtual time set virtual time instant mutually concurrent occur 
theorem helpful 
theorem moment clock ticks roof sketch theorem recall message transmission times assumed non zero 
means late request snapshot clocks processes clock executing local event 
simplicity exposition assume initiator requesting snapshot 
idea follows ticks fixes time common snapshot time 
position 
broadcasts processes 
execute event knows process knows getting acknowledgments 
ticks setting takes local snapshot broadcasts dummy message processes 
forces processes advance clocks value 
process takes local snapshot sends local clock equal jumps value smaller value larger drawback frozen successfully published common snapshot time overcome inventing st virtual process clock managed free clock usual way behave process 
obvious components vectors simply omitted 
virtual clock cn ticks initiates new run snapshot algorithm assume happen completion previous run broadcast phase unnecessary processes know snapshot time 
easy see integer counter snapshots counter modulo alternating boolean state indicator sufficient 
call states white snapshot red snapshot simple algorithm message white red indicating sent snapshot process initially white red immediately takes local snapshot soon receives red message time 
white processes send white messages red processes send red messages 
initiating process red spontaneously starts virtual broadcast algorithm ensure eventually processes red 
achieve may directly indirectly send red dummy messages processes virtual ring may flood network protocol process sends dummy messages neighbors red 
notice algorithm correct messages received order sent 
easy see cut induced snapshot algorithm consists white events consistent 
exist message sent red process received white process message color receiving process red immediately message accepted 
full global state consistent cut consists local states messages transit 
fortunately messages easily identifiable white received red process 
red process gets message simply sends copy initiator 
remaining problem termination 
initiator gets copies messages transit know received 
principle problem solved distributed termination detection algorithm non fifo channels simply ignoring red messages 
deficiency counting method particularly attractive case consistent snapshot message counters taken moment snapshot local states 
purpose process equipped counter part process state counts number messages process sent minus number messages received 
messages snapshot algorithm counted 
collecting accumulating counters local snapshots initiating process knows white messages transit determine snapshot algorithm 
knows copies get 
termination algorithm processes red white messages transit subsequent run start reinitialization simply exchanging roles white red 
interesting compare algorithm snapshot algorithm lai yang require fifo channels 
algorithm complete histories sent received messages kept node 
message histories considered part local state initiator compute difference determine messages transit waiting message copies 
algorithm fast needs considerably space scheme 
noted snapshot algorithm distributed termination detection algorithm 
local states interest message counters relevant 
accumulated message counter equal zero messages cross cut line system terminated 
acknowledgments author michel raynal gerard tel useful comments draft version 
awerbuch 
complexity network synchronization 
journal acm 

bracha toueg 
distributed deadlock detection 
distributed computing 

mani chandy leslie lamport 
distributed snapshots determining global states distributed systems 
acm transactions computer systems february 


partial orders parallel debugging 
barton miller thomas leblanc editors proceeding acm sigplan sigops workshop parallel distributed debugging pages university wisconsin madison wisconsin may 

timestamps message passing systems preserve partial ordering 
proceedings th australian computer science conference pages february 
dieter wolfgang 
global events global breakpoints distributed systems 
proceedings annual hawaii international conference system sciences pages january 

deriving trace checkers distributed systems 
technical report irisa university rennes france 
lai tao yang 
distributed snapshots 
information processing letters may 

leslie lamport 
time clocks ordering events distributed system 
communications acm july 

mattern 
algorithms distributed termination detection 
distributed computing 

carroll morgan 
global logical time distributed algorithms 
information processing letters may 

toueg 
substituting real time common knowledge distributed systems 
technical report department computer science cornell university november 
revised june 
see appeared proceedings th acm symposium principles distributed computing 
nielsen plotkin winskel 
petri nets event specifications domains 
part theoretical computer science 

panangaden taylor 
concurrent common knowledge new definition agreement asynchronous systems 
technical report tr department computer science cornell university 
revised version tr may 
proceedings acm th symposium principles distributed computing 
parker jr detection mutual inconsistency distributed systems 
ieee transactions software engineering 

michel raynal 
distributed algorithm prevent mutual drift logical clocks 
information processing letters february 
pages 
van benthem 
logic time 
reidel publishing 
