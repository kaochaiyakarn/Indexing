fast sorting reversal piotr berman sridhar hannenhalli department computer science engineering pennsylvania state university university park pa berman cse psu edu department mathematics university southern california los angeles ca usc edu analysis genomes evolving inversions leads combinatorial problem sorting reversals studied detail 
series hannenhalli pevzner developed polynomial algorithm problem sorting signed permutations reversals proposed implementation algorithm 
exploit combinatorial properties cycle graph permutation propose ff implementation algorithm ff inverse ackerman function 
making algorithm practical technique improves implementations rearrangement distance problems 
supported nsf ccr 
supported nsf young investigator award nih hg doe de fg er 
transformation late jeffrey palmer colleagues discovered remarkable novel pattern evolutionary change plant 
compared mitochondrial genomes closely related genes identical 
surprise genes identical dramatic differences order fig 

discovery studies decade convincingly proved genome rearrangements common mode molecular evolution mitochondrial viral bacterial dna see bafna pevzner 
study genome rearrangements involves solving combinatorial puzzle find shortest series reversals transform genome 
reversals transforming shown fig 
cases genomes consisting small number conserved blocks palmer coauthors able find parsimonious scenarios rearrangements 
genomes consisting blocks exhaustive search potential solutions far possibilities pen pencil methods 
result palmer palmer overlooked parsimonious scenarios rearrangements complicated cases vs black vs see bafna pevzner correct solutions 
analysis genome rearrangements provides multitude challenges computer scientists see pevzner waterman review open combinatorial problems motivated genome rearrangements 
computational approach comparison gene orders versus traditional comparison dna sequences pioneered sankoff see sankoff sankoff 
kececioglu sankoff suggested performance guarantee algorithm analyze genome rearrangements conjectured sorting reversals np hard 
problem studied bafna pevzner introduced notion cycle graph permutation revealed important links maximum cycle decomposition graph reversal distance 
hannenhalli pevzner referred hp rest polynomial algorithm sorting signed permutation reversals problem believed np hard 
see kececioglu sankoff kececioglu gusfield kececioglu ravi bafna pevzner hp hannenhalli hannenhalli pevzner hannenhalli pevzner progress computational aspects genome rearrangements gates papadimitriou goldreich jerrum aigner west cohen blum studies related combinatorial problems 
problem consider order genes organisms represented permutations oe oe oe oe 
reversal ae interval permutation gamma gamma gamma gamma clearly delta ae effect reversing order genes permutations oe reversal distance problem find shortest series reversals ae ae ae delta ae delta ae delta delta delta ae oe fig 

call reversal distance oe 
note reversal distance oe equals reversal distance oe gamma identity permutation 
sorting reversals problem finding reversal distance identity permutation 
restricted biologically relevant version sorting reversal problem sorting signed permutation reversals deals permutations associate sign element representing direction corresponding gene 
hp developed duality theorem expressing reversal distance signed permutation terms easily computable parameters permutation proposed polynomial algorithm implementation 
state relevant results hp section 
improvement earlier implementation exploits certain combinatorial properties permutations discussed detail readers strongly recommended refer hp 
algorithm proposed hp finds optimal sequence reversals iteratively 
iteration finding safe reversal oriented component presents bottleneck step algorithm reversal sort stated section turn involves computing connected components interleaving graph permutation times 
section nff algorithm computing connected components interleaving graph permutation properties interleaving graph section nff algorithm finding safe reversal oriented component 
leads ff implementation algorithm 
oriented cycle non oriented cycle black edge gray edge optimal sorting permutation reversals cycle graph permutation transformation signed permutation unsigned permutation cycle graph interleaving graph oriented unoriented component 
cycles hurdles permutation elements ng 
denote ji gamma jj 
extend permutation adding 
call pair consecutive elements breakpoint adjacency cycle graph edge colored graph vertices 
join vertices black edge gray edge see fig 

number black edges denoted trivially equal 
cycle edge colored graph alternating colors consecutive edges cycle distinct 
cycles mean alternating cycles 
length cycle number edges 
cycles length correspond adjacencies 
denote cycle length cycle 
signed permutation ng permutation gamma sign associated element fig 

signed case reversal fragment changes order signs elements fragment 
interested minimum number reversals required transform signed permutation signed identity permutation 
define transformation signed permutation order unsigned permutation ng follows 
model signs elements replace positive elements gamma negative elements gammax gamma fig 

call unsigned permutation image signed permutation 
cycle graph elements gamma joined black gray edges define cycle graph signed permutation cycle graph edges excluded 
observe vertex degree fig 
cycle graph signed permutation collection disjoint cycles 
denote number cycles 
observe signed identity permutation order maps unsigned identity permutation order effect reversal mimicked reversal implying 
sorting image signed permutation mean sorting reversals ae cut positions 
rest section image signed permutation 
say reversal ae acts black edges gamma 
call ae reversal cycle black edges gamma belong cycle 
reversal increases ae gamma bafna pevzner 
gray edge oriented reversal ae acting black edges incident ae gamma unoriented 
cycle oriented oriented gray edge unoriented 
gray edges interleaving intervals overlap contains 
cycles interleaving exist interleaving gray edges see fig 
examples 
set cycles cycle graph permutation 
define interleaving graph edge set interleaving cycles fig 

vertex set partitioned oriented unoriented vertices cycles 
connected component oriented oriented vertex unoriented 
terms edge cycle component accurate terms edge cycle component 
connected component corresponds set integers fi ug representing set positions permutation belonging cycles set integers define umin min umax max oe partial order set element called minimal element oe element oe element greatest oe oe jp 
collection sets integers 
define partial order rule oe iff min umax ae wmin wmax say set separates sets exists max min hurdle set defined unoriented component minimal hurdle greatest hurdle minimal hurdle minimal element oe greatest hurdle satisfies conditions greatest element oe ii separate sets hurdle protects non hurdle deleting transforms non hurdle hurdle hurdle nk 
hurdle protects non hurdle define collection sets integers unoriented component permutation number hurdles collection permutation called fortress odd number hurdles hurdles 
define ae fortress signed permutation image define 
theorem hp signed permutation order gamma 
notice theorem immediately leads naive polynomial algorithm exhaustive search efficient algorithm developed hp propose faster implementation 
introduce certain notions essential state polynomial algorithm sorting signed permutation reversals developed hp 
previous studies revealed complicated interleaving structure long cycles cycles length greater cycle graphs poses serious difficulties split example split 
analyzing sorting reversals bafna pevzner transpositions bafna pevzner 
get problem introduce equivalent transformations permutations 
permutation simple cycles length 
black edge gray edge belonging cycle cycle graph permutation 
split new graph obtained ffl removing edges ffl adding new vertices ffl adding new black edges ffl adding new gray edges 
fig 
shows split transforming cycle cycles 
cycle graph signed permutation split corresponds cycle graph signed generalized permutation 
define generalized permutations describe padding procedure find generalized permutation corresponding split generalized permutation permutation arbitrary distinct reals versus permutations integers ng considered 
section permutations mean generalized permutations generalized identity permutation mean generalized permutation gamma 
extend permutation adding min gamma max 
elements consecutive element elements adjacent cycle graph generalized permutation defined graph vertices black edges adjacent elements gray edges consecutive elements 
obviously definition cycle graph generalized permutation consistent notion cycle graph described earlier 
black edge gray edge belonging cycle cycle graph 
define delta gamma delta gamma delta padding permutation elements obtained inserting th element vw note consecutive adjacent implying image signed permutation image signed permutation 
lemma establishes correspondence splits 
lemma hp 
padding oe transforming delta oe safe acts non incident edges long cycle 
clearly safe padding breaks long cycle smaller cycles affecting reversal distance permutation 
theorem hp long cycle exists safe padding acting permutations equivalent permutation oe oe exists series permutations oe delta oe safe padding oe acting gamma 
theorem hp permutation exists equivalent simple permutation 
padding ae reversal acting black edges 
ae mimicked ignoring padded elements 
need generalization observation 
sequence permutations oe called generalized sorting oe generalized identity permutation obtained reversal padding 
note reversals generalized sorting may interleave 
lemma hp generalized sorting mimics genuine sorting number reversals 
reversal ae safe gamma gamma ae gamma ae ae 
oriented component set reversals acting oriented cycles assume reversal ae breaks number connected components phenomenon clear section 
define index ae union unoriented components ae originally course padding permutation ng modeled permutation vw minf 
generalized permutations introduced mimicking procedure intuitive 
contained index ae ae index ae ae may unsafe new components form index ae may create new hurdles recall hurdles special instances unoriented components ae increasing ae compared 
index ae ae guaranteed safe 
section show set contains safe reversal providing new proof theorem theorem hp oriented component exists safe reversal ae components ae contained oriented index ae 
new proof allow find safe reversal efficiently 
reversal cuts hurdle acts cycle hurdle 
reversal merges hurdles acts black edges belonging hurdles 
lemma hp reversal acting cycle simple hurdle safe 
lemma hp exists safe reversal merging hurdles 
lemma hp exists safe reversal merging hurdles 
exists safe reversal cutting hurdle 
lemmas theorems motivate algorithm reversal sort optimally sorts signed permutations 
theorem hp reversal sort optimally sorts permutations time 
proof sketch theorem implies reversal sort provides generalized sorting series reversals containing reversals 
lemma implies generalized sorting mimics optimal genuine sorting reversals 
sketch implementation reversal sort description data structures omitted 
define complexity permutation gamma set cycles number black equivalently gray edges clearly complexity simple permutation 
note iteration loop reversal sort reduces amount complexity complexity increases hurdles merged decreases step implying number iterations reversal sort bounded 
algorithm reversal sort hp 
sorted 
long cycle 
select safe padding ae theorem 
oriented component 
select safe reversal ae component theorem 
number hurdles 
select safe reversal ae merging hurdles lemma 
simple hurdle 
select safe reversal ae cutting hurdle lemmas 
fortress 
select safe reversal ae merging super hurdles lemma 
fortress 
select un safe reversal ae merging arbitrary super hurdles 
delta ae 
endwhile 
mimic genuine sorting computed generalized sorting lemma polynomial algorithm sorting signed permutation reversals steps implemented linear time self evident describe fast algorithm computing connected components section 
computing conditions rest steps requires information connected components interleaving graph permutation 
step computes connected components number times times worst case search safe reversal 
computing connected components implemented time step presents bottleneck iteration implemented time 
conditions steps computed linear time evident hp 
gives time implementation reversal sort 
finding connected components nff time algorithm reversal sort steps implicitly require computation connected components interleaving graph particularly step components oriented need evaluate index ae series candidate reversals ae turn mainly involves computing connected components interleaving graph ae general method finding connected components requires scanning edges graph accomplished time number edges 
interleaving graph simple case linear scan permutation disjoint set operations step suffices find connected components 
discussion respect simple permutation suffices support claims 
node cycle represented gray edges say originating leftmost position 
view gray edge record fields 
algorithm mark positions corresponding image simple signed permutation beginnings endings gray edges representing cycles 
algorithm performs linear scan positions permutation 
edge pair scanning positions detect edge larger construct graph retaining nodes edges detected scan node edge 
th iteration starting th iteration new node detected create new component corresponding edge detected compute connected components performing unions components gamma scan sets find union structure form connected components node active iff component active contains active node case define handle active node maximum note active adjacent nodes consequently inactive component remains unchanged iterations component union find structure maintain connected components additional field store handle component active 
components merged look handles larger position handle merged component 
store positions handles active components stack 
shows algorithm compute connected components interleaving graph ideas discussed 
step involves disjoint set operation step involves disjoint set operations 
union operation reduces number components number times step executed 
union rank path compression disjoint set operations executed nff time 
easy see rest steps involves constant amount positions gives running time nff connected components 
connected component containing handle omit superscripts obvious context 
lemma assume active nodes algorithm connected components 
stack phi 

edge 
create new component set fi jg handle 
push 
edge 
find handle 
top 
union find pop 
handle 
active 
push algorithm computing connected components interleaving graph permutation proof assume contrary 
partition disjoint subsets fa ja ig fa ja bg node adjacent note parts non empty 
node adjacent node connected contradiction 
theorem executing connected components sets union find structure connected components proof suffices show th iteration iteration algorithm sets union find connected components stack consists beginnings handles active components increasing order 
prove induction 
basis step trivial 
induction step consider th iteration step 
gray edge graphs gamma don differ element active component action required maintain inductive claim pushing stack handle quite obviously time largest handle 
consider case gray edge edges gamma form ff clearly compute components maintain stack suffices remove replace components union 
need ensure resulting component uniquely represented stack handle iff remains active 
show connected components exactly steps claim iff active assume clearly active gamma placements obeying ordering constraints triplet triplet contradict lemma 
implies assume active clearly lemma implying inductive assumption concerning stack iff handle popped stack step consequently iff incorporated notice handle popped stack due inequality condition step 
condition step ensures active case handle pushed stack 
claim ensures stack changed properly pops step push step 
finding safe reversal nff time problem better illustrated puzzle 
connected graph vertices colored green red atleast vertex colored green 
denote set vertices adjacent goal delete vertices restrictions single green vertex deleted time resulting graph obtained switching color vertex changing green red vice versa ii switching adjacency pair vertices making adjacent adjacent vice versa iii deleting little inspection rules reveals deletion certain green vertex may create connected 
connected components red vertices possibly delete vertices directly deleting vertices component affect goal choose green vertex deletion component resulting graph atleast green vertex 
proceeding manner delete vertices recursively 
searching safe reversal oriented component exactly afore mentioned problem subclass graphs possible delete vertices 
subclass class interleaving graphs simple signed permutations oriented cycle corresponds green vertex unoriented cycle corresponds red vertex 
glance finding safe reversal oriented component require exhaustive search oriented cycles looking closely combinatorial properties interleaving graph avoid 
proof theorem shows particular reversal ae acting oriented cycle index ae ae creates unoriented components exists alternative reversal oe acting oriented cycle index oe index ae 
worst case trying candidate reversals find safe reversal zero index 
ideas proposed improvement find reversal oe index oe index ae bounding number trials logn 
idea proposed improvement reduce problem size finding oe subsequent candidates 
achieved showing ignore part interleaving graph equivalently permutation sacrificing information evaluating index alternate reversal 
logn trials halving problem size consecutive trials leads linear time algorithm 
assume single component oriented 
denote set oriented cycles obviously joj problem trivial cycle defines safe reversal 
assume joj 
lemma reversals ae oe acting oriented cycles respectively index ae disjoint index oe index ae disjoint index oe 
proof assume contrary index ae index oe index ae disjoint index oe unoriented component containing subgraph induced unoriented vertices 
connected exists oriented cycle adjacent cycle assume index ae ends oriented component ae 
note path oriented cycle path 
index ae ends unoriented component ae path broken ae path get broken adjacent adjacent ae hp 
consider smallest clearly unoriented oriented ae belongs oriented component ae contradiction 
lemma exists pair reversals ae oe acting oriented cycles respectively index ae disjoint index oe 
proof lemma suffices show ae oe index ae index oe empty 
consider cases 
case clique choose adjacent index ae belongs unoriented component ae 
unoriented ae adjacent adjacent oe cycle adjacent remains oriented index oe 
case clique set unoriented cycles adjacent cycle set nodes adjacent fix set minimum size 
case ae choose gamma gamma index ae adjacent adjacent adjacent ae adjacent adjacent adjacent case connected oriented 
adjacent conclude symmetric reasoning index oe case ae suppose contains distinct cycles set neighbors ae cycle unoriented isolated contradiction impossible configuration cycle graph hp 
define sole member show index ae empty 
gamma fug cycle adjacent adjacent unoriented 
ae cycle adjacent oriented cycle briefly describe efficiently find pair vertices satisfying lemma 
assume fu um adjacent satisfy case 
similarly um um adjacent 
remaining case um um clique case 
observe ends oriented cycles split intervals compute array noi noi gives number interval contains observe determined pair noi noi 
particular pairs computed takes constant time compute size check sets subset relation find element set element difference sets 
details left reader 
lemma imply theorem exists reversal ae oriented cycle half cycles unoriented component ae index ae jh theorem suggests way reduce number cycles considered evaluate index alternative reversal 
theorem ae reversal oriented cycle ae unoriented component created ae oe reversal oriented algorithm find safe reversal 
find reversal ae oriented cycle index ae jcj 
theorem 
ae safe return ae safe reversal 

unoriented component ae 
find safe reversal theorem nff algorithm finding safe reversal oriented component cycle belonging ae oriented unoriented ae 
cycle belongs unoriented component oe iff belongs unoriented component subgraph oe induced ae refer subgraph oe 
proof belongs unoriented component oe belongs unoriented component oe proof statement embedded proof theorem 
prove converse assume contrary cycle belonging unoriented component oe belonging oriented component oe 
edge oe consider cases case ae belong different components ae oriented unoriented ae implies unoriented oe edge oe shown implies edge ae contradiction fact belong different component ae case oe imply 
ae imply 
ae imply implies unoriented ae implies unoriented oriented oe contradiction 
theorems immediately lead recursive algorithm find safe reversal finding safe reversal oriented component 
log joj recursive calls find safe reversal successive call input size reduced factor 
step involves trying candidates theorem involves computing connected components done mff current input size 
running time find safe reversal nff size oriented component 
leads ff implementation reversal sort 
aigner west 
sorting insertion leading element 
journal combinatorial theory 
bafna pevzner 
genome rearrangements sorting reversals 
th annual ieee symposium foundations computer science pages 
appear siam computing 
bafna pevzner 
sorting reversals genome rearrangements plant evolutionary history chromosome 
mol 
biol 
evol 
bafna pevzner 
sorting transpositions 
proc 
th annual acm siam symposium discrete algorithms pages 
cohen blum 
improved bounds sorting conjecture 
manuscript 
goldreich 
minimum length generator sequence problem np hard 
journal algorithms 
gates papadimitriou 
bounds sorting prefix reversals 
discrete mathematics 
hannenhalli 
polynomial algorithm computing distance genomes 
combinatorial pattern matching proc 
th annual symposium cpm lecture notes computer science pages 
springer verlag berlin 
hannenhalli pevzner 
transforming polynomial algorithm sorting signed permutations reversals 
proc 
th annual acm symposium theory computing pages 
hannenhalli pevzner 
transforming men mice polynomial algorithm genomic distance problem 
th annual ieee symposium foundations computer science pages 
hannenhalli pevzner 
cut cut applications comparative physical maps molecular evolution 
seventh acm siam symposium discrete algorithms pages 

sorting prefix reversals diameter networks 
manuscript 
jerrum 
complexity finding minimum length generator sequences 
theoretical computer science 
kececioglu gusfield 
reconstructing history recombinations set sequences 
th annual acm siam symp 
discrete algorithms pages 
kececioglu ravi 
mice men evolutionary distances genomes 
proc 
th annual acm siam symposium discrete algorithms pages 
kececioglu sankoff 
exact approximation algorithms inversion distance permutations 
combinatorial pattern matching proc 
th annual symposium cpm volume lecture notes computer science pages 
springer verlag berlin 
extended version appeared algorithmica 
kececioglu sankoff 
efficient bounds oriented chromosome inversion distance 
combinatorial pattern matching proc 
th annual symposium cpm volume lecture notes computer science pages 
springer verlag berlin 
palmer 
mitochondrial dna rearrangements transcriptional alterations male sterile cytoplasm 
molecular cellular biology 
palmer 
plant mitochondrial dna evolves rapidly structure slowly sequence 
journal molecular evolution 
pevzner waterman 
open combinatorial problems computational molecular biology 
rd israel symposium theory computing systems pages 
ieee computer society press 
sankoff 
edit distance genome comparison non local operations 
combinatorial pattern matching proc 
rd annual symposium cpm volume lecture notes computer science pages 
springer verlag berlin 
sankoff abel 
genomic divergence gene rearrangement 
molecular evolution computer analysis protein nucleic acid sequences chapter pages 
academic press 
sankoff antoine lang 
gene order comparisons phylogenetic inference evolution mitochondrial genome 
proc 
natl 
acad 
sci 
usa 
