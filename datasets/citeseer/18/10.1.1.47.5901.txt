heterogeneous network computing generation sunderam department math computer science emory university atlanta ga usa vss emory edu heterogeneous concurrent computing emerged times effective platform high performance applications traditional distributed computing 
performance functionality methodologies provide limitations potential reasonably understood 
discuss selected aspects heterogeneous computing context pvm system describe evolutionary enhancements system 
extensions involve performance optimization light weight processes client server computing suggest useful directions generation heterogeneous systems follow 
prototype design generation heterogeneous computing framework discussed 
parallel computing methodologies clusters heterogeneous systems demonstrated viability past years highperformance scientific computing general purpose applications 
approach concurrent computation premise collection independent computer systems interconnected networks transformed coherent powerful cost effective concurrent computing resource software frameworks 
common methodology realizing mode computing exemplified pvm parallel virtual machine software framework emulates generalized distributed memory multiprocessor heterogeneous networked environments 
research supported doe mics de fg er nasa nag nsf awards asc asc ccr 
preprint submitted elsevier preprint november approach obviates need possess hardware multiprocessor proven viable cost effective technology concurrent computing application domains 
number reasons including portability support heterogeneity robustness simple complete programming interface pvm system gained widespread acceptance high performance concurrent computing community 
course experiences pvm developers numerous external users substantial knowledge gained limitations potential pitfalls heterogeneous network concurrent computing 
important factors concerns delivered performance scientific supercomputing applications compute intensive mathematical kernels 
known accepted communications bottlenecks serious obstacles high performance cluster environments numerous projects tried overcome deficiencies varying degrees success 
programming model viewpoint natural automatic computing model desirable commonly paradigm sequential processes cooperating explicit message passing cumbersome prone error 
language graphical toolkit oriented solutions proposed developed mainstream methods 
third major issue heterogeneous network computing concerns logistics operational matters 
allocation resources load balancing failure resilience scavenged idle cycles security factors times important heterogeneous network platforms standalone machines 
issues emerged addressed different methods early mid network computing driven primarily scientific applications synergy message passing parallel computing models algorithms tools 
important shifts focus 
heterogeneous computing wide area basis receiving renewed attention various forms national global virtual computing frameworks 
second coupling parallel concurrent computing world wide web underlying technologies investigated 
projects currently progress netsolve globus ninf legion 
complementary approach evolves incrementally existing pvm infrastructure addresses issues concerning heterogeneous computing systems 
pvm overview experiences pvm software system integrated set software tools libraries emulates general purpose flexible heterogeneous concurrent computing framework interconnected computers varied architecture 
objective pvm system enable collection computers cooperatively concurrent parallel computation 
detailed descriptions discussions concepts logistics methodologies involved network computing process may briefly principles pvm include explicit message passing model partitioning process computation scheduling 
user configured host pool dynamic reconfiguration ability translucent access hardware 
heterogeneity support machines message portability multiple platforms 
computing entities decoupled space loosely coupled time 
pvm model api pvm computing model notion application consists different sub algorithms components 
components depending functions may execute parallel 
components parallelizable may executed replication reducing processing time involved 
pvm supports level hierarchy parallelism relationship components functional decomposition intra component parallelism typically achieved data decomposition commonly spmd single program model computing 
pvm software system contains library routines enable user process register leave collection cooperating processes routines add delete hosts virtual machine initiate terminate pvm tasks synchronize send signals pvm tasks routines obtain information virtual machine configuration active pvm tasks 
routines provided packing sending messages tasks 
core communication routines include asynchronous send single task multicast list tasks 
messages received filtering source message tag may specified wildcards blocking non blocking receive routines 
application programming interface provided library programs link col lection support software daemons executing user configured host pool implements process control message exchange mechanisms emulating general purpose concurrent virtual machine 
nas parallel benchmarks pvm cluster network computing general pvm particular widely high performance applications including scientific supercomputing 
general purpose nature machines networks involved preclude efficiencies attainable dedicated mpp pvm performance quite satisfactory frequently 
illustrate include report performance exercise nas computational fluid dynamics parallel benchmarks nasa 
benchmarks designed substantially exercise processor memory communication systems current generation parallel computers 
npb nas parallel benchmark kernels exception embarrassingly parallel application highly communication intensive parallelized message passing systems 
form rigorous suite quasi real applications heavily exercise system facilities provide insights bottlenecks hot spots specific distributed memory architectures 
order investigate viability clusters heterogeneous concurrent systems applications npb kernels ported execute pvm system 
detailed discussions analyses describe experiences representative kernels ethernet fddi clusters 
cycle multigrid kernel involves solution discrete poisson problem periodic boundary conditions theta theta grid 
coordinates specific points specific points 
pvm version application derived substantially modifying intel hypercube version data partitioning dimension grid maintaining shadow boundaries performing nearest neighbor communications 
optimizations incorporated primarily maximize utilization network capacity reduce communication 
results multigrid kernel pvm shown table pvm implementation performs excellent levels despite large volume communication accounts upto execution time 
may observed communications bandwidths obtained application level significant percentage theoretical limit types networks 
processor cluster achieves half speed single processor cray mp estimated fourth cost 
conjugate gradient kernel application approximates small table cycle multigrid pvm timings platform time comm 
comm 
bandwidth secs volume time secs kb sec ibm rs ethernet mb ibm rs fddi mb ibm rs fddi mb cray mp est eigenvalue symmetric positive definite sparse matrix 
critical portion code matrix vector multiplication requiring exchange sub vectors partitioning scheme 
exercise pvm version implemented optimal performance modifications focusing reducing communication volume interference 
results experiments shown table 
table conjugate gradient pvm timings platform time comm 
comm 
bandwidth secs volume time secs kb sec ibm rs ethernet mb ibm rs fddi mb sun sparc ss ethernet mb cray mp table exhibits certain interesting characteristics 
multigrid application conjugate gradient kernel able obtain near theoretical communications bandwidth particularly ethernet processor cluster high performance workstations performs fourth speed cray mp 
notable observation increase number processors communication volume increases resulting lowered speedups 
results npb kernels indicate power limitations concurrent network computing pvm high speed high capacity networks pvm performance competitive supercomputers possible harness nearly full potential capacity processing elements networks scaling load imbalance latency limitations inevitable general purpose processors networks cluster environments built 
multithreaded network concurrent computing attempt address major factors contributing performance degradation pvm viz 
load imbalance latency effects investigating alternative computing model threads 
approach derived combining variants principles multithreading systems data flow computing remote procedure call believed potential enhance performance functionality heterogeneous systems drastic departure prevalent parallel programming methodologies 
tpvm framework tpvm collection extensions enhancements pvm computing model system 
tpvm computational entities threads 
tpvm threads runtime manifestations imperative subroutines collections thereof cooperate simple extensions pvm programming interface 
interest straightforward transition avoid large paradigm shift modes tpvm identical model pvm threads computational units 
tpvm offers programming models data driven execution supporting remote memory access 
individual models supported tpvm discussed sections general architectural overview tpvm depicted brief description follows 
cpu server pvm system subsystem threads message passing shared address space comm pvm process pvm process pvm process latent thread hi perf ws cpu desktop interconnection network fig 

tpvm architectural overview architecturally tpvm natural extension pvm model 
terms resource platform tpvm emulates general purpose heterogeneous concurrent computer interconnected collection independent machines 
tpvm supports threads model potentially capable exploiting benefits multithreaded operating systems small scale increasingly prevalent general purpose computing environments 
multiple computational entities may manifested single process 
combination aspects enable increased potential optimizing interaction computational units user transparent manner 
words inter machine communication may continue message passing intra machine communication including may implemented available global address space 
addition latent computational entities form dormant threads may instantiated asynchronously initialization negligible low cost 
cases helps reduce overhead spawning new computational entities application execution 
concept latent threads extends naturally computing paradigms appropriate general purpose non scientific distributed concurrent processing 
tpvm designed layered pvm system require modifications changes pvm 
user level primitives supplied library application programs link operational mechanisms provided form standalone pvm programs 
central tpvm implementation concept scheduling interface responsible controlling thread spawning facilities available tpvm 
interface defined functional terms enabling implementations evolve centralized mechanism preliminary implementations distributed algorithms 
schematic scheduling interface principal facets tpvm implementation shown 
thread tpvm essentially subroutine procedure code segment including nested procedure invocations identified entry point 
tpvm requires strong encapsulation threads shared variables permitted system enforce restriction 
tpvm thread sequence collection subroutine initiated possesses thread control executes stack data segment 
threads tpvm exist context pvm processes 
processes tpvm indulge computation communication serve shells environments threads exist play active roles certain points execution thread creation 
process may play host pod threads may instantiation different entry points 
application programmers access facilities tpvm invoking model dependent functions 
exports active lwps latent lwps hw status scheduling interface local centralized distributed exported typed memory read write invoke dep invoke dep spawn schedule export info invoke hold schedule fig 

schematic tpvm implementation implementation experiences different models provided tpvm system preliminary version implemented tested 
process model tpvm supports traditional concurrent computing model multiple interacting threads cooperating explicit message passing 
model multiple threads unique thread id spawned subsequently exchange messages send receive calls manner analogous process spawning interaction pvm 
define threads may spawned pvm pod host processes utilize functions tpvm export 
declares potential thread identified symbolic string valued name associated function entry point additional parameters specify options limits number threads allowed pod 
existing thread pod process may subsequently spawn instantiations exported thread communicate synchronize tpvm variants usual pvm routines 
experiences preliminary implementation process oriented model tpvm encouraging viewpoints functionality performance 
textbook applications matrix multiplication sorting written conform model tested experimental implementation results shown table 
seen table tpvm versions perform better factor upto largest gains occurring granularity number threads ideal 
entries show tpvm performance worse overheads thread management offset gains due increased asynchrony 
problem pvm cpus processes tpvm cpu threads size sort integers table pvm vs tpvm times seconds ss workstations ethernet motivated known advantages data driven computing observations scheduling critical importance high performance tpvm system supports computing model different process paradigm 
scheme thread entry points exported contain list firing rules required satisfied thread instantiated 
arguments tpvm export contain size pointer array containing list message tags implying specified thread may instantiated message tag type available 
typically threads complete portion allocated able partially satisfy dependency 
order indicate thread able satisfy firing rule exported service deliver message containing required data special invocation functions provided 
table indicates measured performance matrix multiplication sorting examples mentioned earlier results process model included convenient comparison 
seen data driven model performs approximately levels cases significantly better 
problem cpu threads cpu threads size 

sort integers table tpvm vs times seconds ss ethernet client server computing pvm message passing model supported pvm powerful suited spmd applications especially scientific computing 
providing message passing interface restricted pvm application categories significantly 
furthermore message passing model requires number potentially complex tasks programmed explicitly user including process identification table maintenance message preparation transmission reception ordering discrimination task synchronization 
contrast traditional distributed computing client server model 
paradigm entities known servers provide services may invoked clients 
implicit definition potential varying levels implementation semantics 
support client server applications natural manner developed rpc system pvm framework 
pvm rpc loosely rpc model remote services mimic procedure call 
service provider designs implements server may export services 
services accessed client invocation looks behaves procedure call 
overview pvm rpc pvm rpc loosely known rpc model remote services mimic procedure call 
service provider designs implements server may export services 
services accessed client invocation looks behaves procedure call 
number issues arise procedure call invokes non local service 
issues include name binding parameter passing asynchronous processing redundancy applies fault tolerance load balancing 
issues facilitated pvm system implemented pvm rpc subsystem 
pvm rpc major components pvm daemon service broker sb servers clients 
remainder section describes function interaction components 
integrated part native pvm system responsible identifying managing global resources available hosts message routing authentication 
pvm program run master started 
master starts processes list available hosts local start available host 
local running host host available pvm system 
sb maps service names known clients tuple consisting server service id recognizable server 
order ensure pvm rpc reliable pvm respect hardware failure sb runs machine master 
various ways sb start server trying register service start sb running 
complete scenario sb interaction rest pvm prc system illustrated server starts locates sb table facility 
sb running server starts sb pvm spawn attempts locate sb second lookup sb done prevent race conditions servers 
server registers services sb communication server sb required 
similarly client wishes service locates sb gets list available services sb 
client case request list registered services results complete list known services addresses client caches locally eliminate unnecessary communication client sb 
list servers services may change client execution issue client requires service address cached problem known provider service due server failure congestion 
cases client update list known services 
server available particular service client default interleave requests available servers 
pvm rpc programming pvm rpc server programs client programs need written 
create server services declared coded syntax similar standard primitive pvm rpc service declare service 
syntax servicename inout declaration followed standard code defines implementation service 
parameters treated pointers array notation favored element access 
key words inout give server hint variables need copied client server server client bidirectionally inout 
inout specified variable assumed inout 
type parameter pvm type specified legal pvm type pvm int pvm pvm supported 
parameter programmer specifies hidden integer constant name size size appended parameter name specifies number elements parameter named variable name contains 
complete example demonstrating usage pvm rpc service shown fig 

services declared int fig 

example showing declare implement service sums vectors 
call pvm rpc main terminates program 
function generate main program containing code registering defined services processing requests clients 
restrictions number services server may contain external functions service allowed server may behave client 
service may call external functions services declared file contains pvm rpc main statement 
shows complete server containing service add vec 
clients may invoke remote procedure calls 
call pvm rpc synchronous second pvm rpc calls server function asynchronously 
case subsequent pvm rpc wait statement acts synchronization point rpc 
limit unpredictable behavior parameters rpc modified rpc routine completion remote procedure parameters modified pvm rpc wait statement 
example client invocation rpc call include pvm include int fig 

example complete pvm rpc server 
size size size double vectors size size size 
rpc coordination pvm rpc model straightforward effective mechanism allows user perform distributed computation elegant natural fashion 
furthermore pvm rpc enhances pvm adding support clientserver computation 
current implementation achieves features minimal performance penalty 
preliminary benchmark experiments simple textbook applications scientific computing matrix multiplication particle cell codes implemented pvm rpc partitioning allocation methods chosen total communication volume computation equal close message passing counterparts compared 
cases pvm rpc implementations executed elapsed times standard versions applications rpc implementations performing better cases 
process pvm process pvm postal mail delivery receive register time server register bind tid blackboard message process names names process message names messages service process interaction name space time day send time day time client bind msg fig 

pvm coordination model having established client server computing model feasible useful context message passing systems general comprehensive abstraction considered 
model known coordination model provides cooperation interaction independent entities furthermore coordination may completely decoupled space time 
order enhance pvm model coordination facilities global name space processes messages services needed 
addition postal messages enable time decoupling introduced model 
messages may persistent hold instant delivery semantics flexible dynamic manner provide message exchange capabilities ranging synchronous send receive mailbox modes 
pvm coordination model shown detailed contains specifics preliminary implementation client server api supported 
agents scripts heterogeneous computing experiments threads client server computing coordination context traditional process oriented message passing system demonstrated potential unification paradigms distributed computing parallel processing 
thread concurrent computing infrastructure valuable permitting finer granularity hiding latency exploiting multi cpu workstations 
clientserver coordination models showed traditional applications benefits request response paradigm especially regard expressiveness ease 
considering little performance degradation valuable especially enhanced potential transparent fault tolerance load balancing built rpc servers 
building idea service oriented computing framework encapsulated multithreaded computing entities natural progression move agent computing 
imposing constraints requirements portability heterogeneous computing scripting languages appear promising 
order investigate potential ideas propose icet heterogeneous network computing framework 
icet model icet model premise internet infrastructure holds tremendous promise global computer 
despite current limited information retrieval system internet consists thousands fast processors capable yielding performance provided heterogeneous processors organized cooperate single user problem ii remote operations initiated machine independent manner iii highly efficient protocols exist support reliable uni multicast communication varying selectable qualities service iv software support functionality created 
undertaken pilot project investigate feasibility icet model variety information transformations ranging voice mail collection systems high performance distributed computations performed efficiently internet 
simple highly effective object naming location scheme urls versatile servers simple browsers interfaces powerful computing environments 
possible icet servers operate daemons utilizing standard protocols interact browsers icet protocols talk servers icet core message passing interface servers 
contrast usage web passive information retrieval source icet transforms web active resource computational engine repeatedly distribute route operations data perform distributed data transformations fuse results compute iteratively recursively 
icet environment established set icet servers initiated distributed set machines 
utilizing current technology internet capable transporting objects object files source files icet scripts icet servers icet browsers 
icet browsers determine objects transported objects transported 
effecting operation may simple naming invoking local user defined icet script 
specified target locations icet servers accept interpret icet scripts carrying tasks specified 
failed servers replaced necessary 
icet scripts contain interpretive code generate transport icet scripts servers specified locations invoke defined executables invoke object files dynamic linkage invoke icet scripts possibly remotely including scripts fetch source object executable files sites replicate icet scripts associated data 
schematic proposed operational model icet shown 
enable utilization remote executables icet scripts invoking executables allow specification inputs outputs read written data envelopes 
data envelopes act caches storing transient data obtained functional compositions consist special icet commands enveloping data 
icet scripts code segments processed interpreter perl subject imperative style programming 
tasks performed sequentially iteratively conditionally 
icet operations enable encourage recursion recursive interpretation scripts simply recursive instantiation executables 
exception icet scripts computational invocations envelope icet data envelope icet data 
console editor prog 
ops results monitor front browser icet script icet script icet script icet server icet server icet server icet server fig 

icet operational overview involve basic blocks 
starting architectural model attempting build prototype system experimentation performed concepts evolved contemporary heterogeneous computing systems 
heterogeneous concurrent computing networks independent computer systems technology evolved years 
extremely valuable effective high performance computing platform permitted parallel computing hardware investment 
time limitations network computing evident overcome novel approaches tools implementations 
experiences conjunction complementary advances developments mbone world wide web prompted quest generation heterogeneous network concurrent computing systems 
outlined incremental evolutionary approach goal 
sunderam geist dongarra manchek pvm concurrent computing system evolution experiences trends journal parallel computing pp 
march 
casanova dongarra netsolve network server solving computational science problems proc 
supercomputing november appear 
grimshaw synopsis legion project university virginia technical report cs june 
sunderam pvm framework parallel distributed computing journal concurrency practice experience pp 
december 
white sunderam performance nas parallel benchmarks pvm networks journal parallel distributed computing vol 
pp 
april 
foster tuecke enabling technologies web ubiquitous supercomputing proc 
th ieee symp 
high performance distributed computing syracuse august 
fox web high performance computing communications proc 
th ieee symp 
high performance distributed computing syracuse august 
sunderam rpc facility pvm proceedings high performance computing networking brussels belgium springer verlag pp 
april 
krone aguilar sunderam integrating coordination features pvm proceedings international conference coordination models languages italy springer verlag pp 
april 
sato matsuoka ninf network information library globally high performance computing proc 
parallel object oriented methods applications santa fe feb 
