complex behavior specification autonomous systems department computer information science linkoping university linkoping sweden jam ida liu se focuses problems design autonomous reactive system specification behavior respect unpredictable changes occurring real world 
behavior oriented languages briefly formal relationships process transition networks statecharts 
goal presentation address need augmenting design paradigm theoretical tools adequate expressing complex behaviors autonomous reactive systems pursuing high level goals applicable analysis synthesis tasks systems 
problem designing autonomous system capable acting real world subject attention years 
research focused designing systems attributes ffl reactivity order allow system cope unpredictable changes dynamic environment pursuing mission research supported centrum industrial information technology 
ffl robustness meaning ability function variety situations including failure subsystems ffl selectivity attention order effectively existing resources system computing power sensory equipment ffl ability pursue goals defined designer system 
great deal research topic currently done behavior design paradigm 
paradigm result initiated pursued mit ai lab brooks workers ang bro bro bro con mat augmented research conducted places ark pay kr 
main idea consists building controller autonomous possibly intelligent system set primitive reactive behaviors couple sensory inputs system outputs 
ultimately system built way reveal ability cope effectively dynamic unpredictable changes real world performing task 
results obtained far mit places promising prove approach worth investigation 
major open problems behavior approach brooks states bro ffl understanding dynamics individual behavior couples environment robot sensors actuators ffl understanding behaviors integrated single robot ffl understanding multiple robots interact go business 
questions addressed research done competing paradigm call symbolic approach problem 
existing answers formulated totally different framework mind notable exception rosenschein kaelbling research 
behavior approach behaviors basic building blocks problem constructing complex autonomous system amounts synthesis problem 
symbolic ai approach final result complex behavior starting point design system seen analysis problem 
course approaches different tools extent different languages 
raises question common ideas share starting point integration approaches 
assuming set system behavior designed solve problem choosing appropriate architecture implementation 
spectrum approaches imaginable illustrated list ffl unstructured collection loosely coupled behaviors ffl layered system higher layers implement conceptually complex behaviors layers equally reactive subsumption architecture bro ffl layered system reactive component resides bottom layer reasoning symbolic component resides top layer fir ms gat ffl classical sense think act architecture computations done path sense part act component realize behavior revealing required degree reactivity appropriate complexity 
course extremes seen idealizations unreasonable purest form 
exist approaches close extremes 
quote brooks bro collection behaviors georgeff lansky prs gl sense cycle 
obvious strong weak points 
bottom direction guarantees effective realization possible system physically grounded 
top design hand provides systems proven pursue top level goals requiring non trivial amounts intelligence 
question remains open systems possessing properties designed 
worth noting quite lot publications see kr stress strongly need constrain design realizable simple fast hardware 
leads third extent orthogonal previous major aspect design problem choosing best medium implementation 
imagine solutions ranging general purpose machines appropriate software implementing adopted control strategy case tho collections specialized processors designed specific purposes processing visual data motor control sensor fusion purely hardware realizations control algorithms case brooks robots 
seen attempt review state art area specification autonomous agent behavior 
provides basis suggestions research unifying classical pure automata theory ai approaches problem 
overview behavior languages goal short presentation twofold sketch state research area specifying behaviors autonomous agents identify existing constraints investigate problems 
expressive power limitations specification tools far behavior language rex ruler automata theory 
compositional specification behaviors set specifications simpler behaviors formally derive specification composition 
decompositional specification behaviors specification complex behavior allow infer set specifications hardware realizable primitive behaviors yield predictable software fitting layered architecture 
correspondence specifications behavior autonomous system software specification software architecture 
theoretical tools modeling dynamics single behavior 
theoretical tools modeling dynamics system coupled behaviors 
section chosen briefly selected specification methods behavior language situated automata approach statecharts process transition networks 
behavior language brooks created behavior language lisp programming language specifying behavior controllers bro 
constructs language define set behaviors comprising control system robot 
set behaviors usually intended designer robot achieve predefined set goals 
goals implicit specification name emergent functionality 
behavior language assumption behavior expressible set called real time rules 
real time rule expression form condition rest body forms exclusive rest forms executed independently rules real time possibly augmented finite state machine 
finite state machine equipped registers timing elements 
behaviors defined stand real time rules groups rules 
stand rule named name declarations rule complex behaviors constructed facility name inputs outputs declarations rules 
input output registers behaviors connected wires designer intentions connect source dest rest dests core idea behavior approach asynchronous independent activation real time rules behaviors 
mechanisms activating behaviors bro ffl thresholding ffl hormone system conditions releasers ffl spreading activation 
behavior language guarantees set behavior specified constructs language automatically compiled level directly realizable hardware 
support provided checking set behaviors contradictory wrt sensory input vs expected output wrt perception action state environment automaton situated environment 
internal dependencies interacting behaviors behaviors help achieve assumed goals 
situated automata somewhat constrained approach problem proposed rosenschein kaelbling ros kr 
concept situated automata ros autonomous agent generally system environment modeled finite state automata 
idea allows formally state dependencies state environment state system 
consider information environment carried states system formally prove correctness system design 
basis idea situated automata kaelbling rosenschein created hierarchy languages rex provides link set reactive behavior rules hardware implementation defining goal oriented behaviors action part system ruler describing perception component system 
rex rk defined lisp serves specifying lowlevel description machine 
appropriately defined logic accepts specifications computed rex prove properties behavior designed machine 
kr ruler ros expressions compile rex statements theoretical machinery applied ruler programs 
tools guarantee having specified set desired system interactions world having completely specified possible set situations occurring world perceived sensory input system system behave desired way compilable gate level 
requirement complete specification possible situations system find recognize limitations imposed specification languages order compilable hardware causes approach restrictive 
statecharts interesting language specifying behaviors statechart formalism har general incarnation higraphs har :10.1.1.20.6336
statecharts define complex hierarchical finite state automata 
plausible candidate specifying autonomous agent behavior 
advantages ffl defined formal semantics ffl graphical representation means user friendliness ffl existence implemented support tools statemate 
due formal grounding automata theory statecharts strong connections situated automata approach kaelbling rosenschein tools provided formalism expressing goals system acting environment 
seen deficiency statecharts originally designed specification stand automata pairs coupled automata system environment hand statecharts intuitive specification tool easily express interdependencies various elements system conceptualization process supported strongly approaches 
process transition networks graphical language created purpose specifying behaviors autonomous agents process transition networks ptn mal 
assigned formal semantics mal tools implementing represented control strategy created 
enable designers simultaneously specify behaviors independent agents environment 
compilable making necessary assumptions automata describe behavior separate agent sm explicitly couple goals agent changes behavior 
somewhat flat statecharts fewer provisions hierarchical abstraction ptn language 
expressive power statecharts topic section 
process transition networks vs statecharts order show equivalence statecharts algorithm translating 
languages detail 
descriptions contain informal presentation language constructs order provide reader necessary intuitions provisions formal definition 
formal definitions ultimately quoted interested reader consult mal hpss respectively definition ptn assume world consists objects call agents state world including state agent agents may described sets object properties 
values object properties may change time 
cases statements true ffl set property values finite value function piecewise constant 
ffl set property values infinite usually continuous 
property value may change time distinguished time points change continuous 
value function piecewise continuous 
hope decision sacrifice formal accuracy hopefully improved readability give impression languages formal 
set adjacent time tokens property value continuously changes includes values remain constant called circumstance 
example state robot performing primitive operation polishing kitchen sink searching empty soda traffic lights red car airplane air corridor computer hung examples circumstance 
ptn language introduce notion process corresponding circumstance 
process depicted box 
interested moments discontinuities property occur discontinuities convey important information changes current situation 
call discontinuities events 
events represented ptn language hexagonal boxes 
discontinuities definition may appear periods continuous change property events appear processes 
transition process event process denoted thick arrows pointing source process event second pointing event process 
causal dependencies discontinuities represented enabling arrows denoted thin lines pointing event event subsequent process event 
case corresponds situation discontinuity forces occur second case describes situation actual enabling 
somewhat unfortunately due historical reasons referred enabling arrows 
simple ptn constructed primitives shown 
ptn models behavior system consisting robots cooperating finishing phase sink production 
process describes behavior agent called activity 
activities implicit termination conditions termination condition explicitly stated ptn called actions 
activity boxes distinguished doubling vertical borders action contains additional internal box denoting termination condition 
actions followed primitive mean simple basic compound respect assumed level analysis 
operation primitive analysis level appear complex operation lower level 
wait polish wait wait sink available sink taken away start start operation start sink ready ready robot fetching sinks operating robot robot transporting sinks transport fetch sink cooperating robots 
extinguish fire wait alarm fire alarm fire fire start fire fire fire brigade activities 
events event encoded termination conditions action 
desired event enable event enabling arrow may drawn directly box representing termination condition 
illustrates activity action boxes 
activities actions may distinguished arbitrary way 
focus attention processes ascribed agent agents 
example fire brigade treated single agent 
assume ptn cycle containing activity consists activities 
ra process circumstance associated property agent subsequent values property subsequent processes circumstances associated agent 
action box seen way encoding activity subsequent event ptn cycle describing triggering conditions event 
main reason distinguishing actions keep simple possible 
making distinction allows draw enabling arrows intuitively clear fashion 
illustrates correspondence action boxes activity boxes enabled external cycle 
termination conditions action just conditions described external cycle 
ptn language may combine enabling arrows connectives 
expressed consecutive events transition processes 
may represented different paths leading process usually depicted merging enabling arrows 
see 
primitive ptn language decision 
action performed agent faced possibilities 
actions decisions encode external condition shown network 
making condition explicit decision box written primitives defined previously 
definition 
ptn directed labeled finite graph finite set nodes finite set arcs labeling function 
assumed disjoint sets denoting set processes set events respectively 
set activities set actions 
labeling function associates node label 

attr theta val attr finite set attribute names val attr va set possible attribute values va function assigning attribute name set possible values name 
set attribute values finite 
set arcs ae theta ta ea ta ea ta set transition arrows ta ae theta theta ea set enabling arrows ea ae theta set ea enabling arrows consists subsets ea epa epa 
epa denotes set proper event enabling event denotes collect look empty soda empty soda sight empty soda sight disappears empty soda sight empty soda sight disappears collect look empty soda trash trash dropped switch attention collected action activity plus additional enabling cycle 
set extended event succeeding process enable event 
transition pair transition arrows form 
follows previous constraint exists unique 
treat transitions pairs theta define cycle processes linked transition cycle group process consisting processes reachable process processes process reachable 
terms state properties connectives 
formed ptn 
set constraints stated formally mal 
due space limitations provide natural language formulation 
ffl event exactly preceding process exactly succeeding process 
ffl process member cycle ffl transition belongs cycle ffl cycle consists transitions ffl cycle containing activity consists activities ffl enabling arrows link different cycle groups ffl processes belonging cycle group assigned attribute name ffl value labels cycle group belong value set ffl value labels different processes cycle group different 
concludes definition 
ensure processes describing activities agent intermingled processes denoting states external property environment 
necessary sufficient provision ensuring described system non 
herbert action perception arm base higraph representing hypothetical control system robot called herbert 
action blob cartesian product arm base 
definition statechart presentation statecharts quoting formal definition general construct higraph har :10.1.1.20.6336
definition 
higraph quadruple oe finite set blobs set edges binary relation blobs 
function oe assigns blob set oe assumed function cycle free 
function thetab introduces equivalence relation blobs classes equivalence blob denoted 
atomic blobs denoted see 
statecharts particular subset higraphs ones relation corresponds transition function automaton 
advanced constructs statecharts history dependent transitions require additional relation blobs defined concentrate formal aspects language 
basic idea distinguishing statecharts tools specifying automata ability easily capture hierarchies abstractions 
notions illustrated 
presents simple state automaton incompletely specified transitions 
subfigure presents possible hierarchical view automaton states treated group states distinguished common transition fi state named note fact arrow blob corresponds set arrows 
subfigure illustrates possibility abstraction state drawn investigating internal structure 
subfigure presents concept introduced statecharts abstraction statecharts 
default arrows 
default arrow describes state system find transition outside happens detailed information initial state missing 
outer default arrow pointing blob subfigure says case ambiguity state inner default arrow refers case transition pointing ff example transition occur state notion introduced statecharts simplifying specification automata history dependent default entry illustrated 
ways history circle 
meaning agrees intuition history circle causes transition visited state blob 
case applies incoming ff transition case entry default choose state 
obviously blob visited time default state chosen 
note history entry applies uppermost level blob 
subfigure usual default entry rules applied 
hand entry force application history dependent entries statecharts 
tory operator atomic level 
subfigure illustrates usage 
subfigure illustrates intermediate usage history entries entry history dependent standard default applied 
important notion orthogonality appeared formal definition higraph form function 
meaning set states system distinguish subsets describing subsystems working parallel 
terms state space means global state tuple local states subsystems illustrated 
subfigure presents blob divided orthogonal 
corresponding flat version state space subfigure 
note number states transitions non orthogonal description exponential respect number orthogonal components system 
illustrates important feature introduced statecharts conditional transition 
label fi means transition case occurs case input letter fi appearing input subsystem orthogonality statecharts 
state harel introduces concepts statecharts language conditional dispatching selectors delays output functions pose additional problems respect formalization translation 
omit discussion concepts 
translation algorithm show ptn formalism statecharts expressive power terms possibility specifying different kinds systems terms readability number language primitives algorithm translating ptn statechart statechart ptn 
easier task 
simple version ptn consists set cycles processes linked transitions 
transitions may linked enabling arrows provided constraints definition fulfilled 
corresponding statechart consist atomic blobs corresponding ptn processes 
different cycle groups ptn represented atomic blobs belonging orthogonal main global blob statechart 
levels resulting statechart global blob orthogonal corresponding cycle groups atomic blobs corresponding processes 
transitions processes mapped corresponding transitions atomic blobs 
proper enabling arrows encoded identical labels attached enabling enabled transitions enabled translation enabling arrows 
transition labeled condition checking states preceding transitions active 
see transition enables transition extended enabling arrows enable target transition source transition occurred 
case illustrated 
statechart constructed way corresponds behaviorally terms state changes function time input original ptn 
proceed translation arbitrary statechart ptn 
atomic blobs mapped processes 
transitions atomic blobs mapped appropriate transitions processes 
statechart contains orthogonal parts translated separate cycle groups ptn 
consider translation procedure constructs 
non atomic ones 
transitions 
default entries 
history entries 
conditional transitions 
order complete algorithm 
proceed order 

abstractions incoming outgoing transitions just ignored 

transitions pointing drawn separately processes corresponding considered blob 
incoming transitions drawn single process corresponding initial state 
case default history entries process chosen arbitrary way 
cases considered points 

default entries pointing initial state transitions default entry directed state 

history entries encoded additional ptn cycle 
processes cycle correspond internal states blob simple type history entry 
changes cycle correspond changes state blob 
cycle constructed previous steps just copy 
transition entering blob history entry dispatched appropriate process 
dispatching consists multiplying transition appropriate number copies pointing processes cycle transition enabled different place history cycle 
type entries expressed type ones don separate construction 

conditional transitions translated transitions extended enabling arrows pointing processes corresponding condition 
construction processes reserve term algorithm formal description allow translate ptn statechart statechart ptn 
fact interesting theoretical consequences shown higraphs generalization statecharts correspond specific class datalog logic programs 
languages specifying behaviors reactive autonomous systems 
common factor languages way finite state automata 
languages process transition networks statecharts chosen closer presentation shown equivalent 
goal short presentation twofold sketch state research area specifying behaviors autonomous agents identify existing constraints investigate problems 
expressive power limitations specification tools far behavior language rex ruler automata theory 
compositional specification behaviors set specifications simpler behaviors formally derive specification composition 
decompositional specification behaviors specification complex behavior allow infer set specifications hardware realizable primitive behaviors yield predictable software fitting layered architecture 
correspondence specifications behavior autonomous system software specification software architecture 
theoretical tools modelling dynamics single behavior 
theoretical tools modelling dynamics system coupled behaviors 
acknowledgment brant helpful comments 
ang colin angle 
legged autonomous walking robot 
master thesis mit 
ark ronald arkin 
integrating behavioral perceptual world knowledge reactive navigation 
robotics autonomous systems 
bro rodney brooks 
robust layered control system mobile robot 
ieee journal robotics automation 
bro rodney brooks 
behavior language user guide 
memo mit april 
bro rodney brooks 
elephants don play chess 
robotics autonomous systems 
bro rodney brooks 
intelligence reason 
proceedings international joint conference artificial intelligence sydney 
morgan kaufman 
con jonathan connell 
colony architecture artificial creature 
phd thesis mit 
ai lab tech report 
anita flynn rodney brooks william wells iii david barrett 
world largest cubic inch robot 
ieee micro electro mechanical systems pages salt lake city utah 
anita flynn rodney brooks lee 
zones cornerstones gnat robot double feature 
ai memo mit 
fir james firby 
adaptive execution complex dynamic worlds 
phd thesis department computer science yale university 
gat eran gat 
reliable goal directed reactive control autonomous mobile robots 
phd thesis virginia institute state university 
gl michael georgeff amy lansky 
reactive reasoning planning 
proceedings aaai sixth national conference artificial intelligence pages 
morgan kaufman 
david harel statemate working environment development complex reactive systems 
ieee transactions software engineering april 
har david harel 
statecharts visual formalism complex systems 
science computer programming 
har david harel :10.1.1.20.6336
visual formalisms 
communications acm 
johan anders nyberg mikael 
software architecture autonomous systems 
proc 
th international symposium unmanned untethered technology pages 
hpss david harel amir pnueli schmidt rivi 
formal semantics statecharts 
ieee symposium logic computer science pages ithaca ny 
ieee computer society press 
kr leslie pack kaelbling stanley rosenschein 
action planning embedded agents 
robotics autonomous systems 
mal 
process transition networks formal graphical knowledge representation tool 
ras editors methodologies intelligent systems th international symposium pages 
springer verlag october 
lecture notes artificial intelligence 
mal 
process transition networks 
proceedings ieee systems man cybernetics conference charlottesville va pages october 
mat maja mataric 
distributed model mobile robot environment learning navigation 
technical report mit ai lab may 
ms magnus morin erik sandewall 
software architecture supporting integration sub systems 
prometheus proceedings fourth workshop 
available technical report ida tr dept computer information science linkoping university 
pay david payton 
internalized plans representation action resources 
robotics autonomous systems 
rk stanley rosenschein leslie pack kaelbling 
synthesis digital machines provable epistemic properties 
joseph halpern editor theoretical aspects reasoning actions pages monterey ca 
ros stanley rosenschein 
formal theories knowledge ai robotics 
new generation computing 
ros stanley rosenschein 
synthesizing automata environment description 
proceedings international conference principles knowledge representation reasoning pages 
morgan kaufman 
sm hua shu 
process transition networks behavior automata 
proceedings ieee international symposium intelligent control arlington va pages 
ieee control systems society 
tho charles thorpe 
outdoor visual navigation autonomous robots 
groen editors intelligent autonomous systems pages 
north holland 
zadrozny 
logical dimensions graph formalisms 
john sowa editor principles semantic networks chapter pages 
morgan kaufmann 
