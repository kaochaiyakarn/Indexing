application hybrid genetic algorithm airline crew scheduling david levine mathematics computer science division argonne national laboratory south cass avenue argonne illinois levine mcs anl gov scope purpose airline crew scheduling visible economically significant problem 
widespread economic significance difficulty solution problem attracted attention operations research community years 
purpose develop genetic algorithm airline crew scheduling problem compare traditional approaches 
discusses development application hybrid genetic algorithm airline crew scheduling problems 
hybrid algorithm consists steady state genetic algorithm local search heuristic 
hybrid algorithm tested set real world problems 
optimal solution half problems solutions 
results compared obtained branch cut branchand bound algorithms 
branch cut algorithm significantly successful hybrid algorithm branch bound algorithm slightly better 
genetic algorithms gas search algorithms developed john holland 
analogy natural selection population genetics 
common application gas finding approximate solutions difficult optimization problems 
describe application hybrid ga genetic algorithm combined local search heuristic airline crew scheduling problems 
common model airline crew scheduling problems set partitioning problem spp minimize supported mathematical information computational sciences division subprogram office computational technology research department energy contract eng 
subject ij ij binary goal determine values binary variables minimize objective function airline crew scheduling row represents flight leg takeoff landing flown 
columns represent legal round trip rotations pairings airline crew fly 
associated assignment crew particular flight leg cost matrix elements ij defined ij flight leg rotation 
airline crew scheduling economically significant problem difficult solve 
approximate approach starting point exact approaches solve linear programming lp relaxation spp 
number authors noted small spp problems solution lp relaxation integer case optimal integer solution fractional values easily resolved 
years noted spp problems grow size fractional solutions occur frequently simply rounding performing small branch bound tree search may effective 
exact approaches usually branch bound bounding strategies linear programming lagrangian relaxation 
fischer continuous analogs greedy gamma opt methods provide improved lower bounds 
eckstein developed general purpose mixed integer programming system cm parallel computer applied problems set partitioning 
developed algorithm uses combination dantzig wolfe decomposition restricted column generation 
hoffman padberg report optimal solutions branch cut large set real world spp problems 
motivations applying genetic algorithms set partitioning problem exist 
ga works directly integer solutions need solve lp relaxation 
second genetic algorithms provide flexibility handling variations model constraints cumulative flight time mandatory rest periods limits amount allocated particular base modifying evaluation function 
traditional methods may trouble accommodating addition new constraints easily 
third iteration genetic algorithms contain population possible solutions 
noted knowledge family solutions far important obtaining isolated optimum 
fourth np completeness finding feasible solutions general case enormous size problems current industrial interest spp problem test effectiveness gas 
hybrid genetic algorithm genetic algorithms population candidate solutions 
original gas holland candidate solution represented string bits interpretation bit string problem specific 
bit string population assigned value problem specific fitness function 
survival fittest step selects strings old population randomly biased fitness 
strings recombine crossover mutation operators see section produce new generation strings hopes fit previous 
population replacement generational replacement genetic algorithm replaces entire population generation offspring traditional genetic algorithm defined holland 
hope offspring best strings carry important building blocks best strings forward generation 
allows possibility best strings population survive generation 
pointed davis best strings may allocated reproductive trials :10.1.1.87.3586
possible mutation crossover destroy alter important bit values propagated generation parent offspring 
steady state genetic algorithm alternative replaces individuals time entire generation 
practice number new strings created generation usually 
new string replace worst ranked string population 
way allows parents offspring coexist population 
advantage immediately able take advantage genetic material newly generated string having wait generate rest population 
disadvantage small populations bit positions lose value strings population value bit position 
reason run large population sizes offset 
earlier empirical testing effective results reported individual replaced generation population size 
problem data structures solution spp specifying values binary decision variables value zero indicates column included included solution 
solution may represented binary vector interpretation bit zero binary vector 
representing spp solution ga straightforward natural 
bit ga string associated column bit column included solution zero 
ordered spp matrix block staircase form 
block set columns row defined rows may empty 
columns sorted order increasing ordering matrix manner helpful determining feasibility 
block may set 
fact initialization scheme see section evaluation function obvious way evaluate fitness bit string minimizer equation spp objective function 
just finding feasible solution spp np complete strings population may infeasible equation insufficient take account infeasibilities 
approach problem incorporate penalty term evaluation function penalize strings violate constraints 
penalty methods allow constraints violated 
depending magnitude violation penalty case proportional size infeasibility incurred degrades objective function 
choice penalty term significant 
penalty term harsh infeasible strings carry useful information lie outside feasible region ignored information lost 
penalty term strong ga may search infeasible strings 
part investigated different penalty terms conclusive results 
results reported linear penalty term ja ij gamma scalar weight penalizes violation constraint choosing suitable value difficult problem 
choice reflect just costs associated making constraint feasible impact constraint feasibility 
know method calculate optimal value empirical choice setting largest columns intersected row choice similar penalty provided upper bound cost satisfy violated constraints set covering problem equality eq 
replaced 
case set partitioning choice provides bound ga may find infeasible solutions attractive feasible ones 
ga operators primary ga operators selection crossover mutation 
choose strings reproduction binary tournament selection 
strings chosen randomly population fitter string allocated reproductive trial 
produce offspring held binary tournaments produced parent string 
parent strings recombined produce offspring 
crossover operator takes bits parent string combines create child strings 
motivating idea creating new strings substrings fit parent strings parent strings child strings point crossover new promising areas search space explored 
illustrates point crossover 
starting parent strings length crossover sites chosen random 
new strings created uses bits parent string bits second parent string string uses complementary bits parent string 
mutation applied traditional ga sense background operator provides theoretical guarantee bit value permanently fixed zero strings 
implementation mutation complement bit probability algorithm apply crossover mutation 
select parent strings generate random number 
crossover probability create new offspring point crossover randomly select insert new population 
randomly select parent strings copy apply mutation 
case test new string see duplicates string population 
undergoes possibly additional mutation unique 
local search heuristic mounting experimental evidence genetic algorithm local search heuristic beneficial :10.1.1.87.3586
combines ga ability widely sample search space local search heuristic hill climbing ability 
early experience subsequent experience methods trouble finding optimal feasible solutions 
led develop local search heuristic ga assist finding feasible near feasible strings apply ga operators 
heuristic define notation 
ng set column indices 
fj ja ij fixed set columns intersect row fj jx changing set columns intersect row current solution 
heuristic developed called row takes row oriented view problem 
basic outline 
row works follows 
iterations parameter heuristic rows problem selected randomly constraint largest infeasibility 
row possibilities jr jr jr 
action row cases varies varies best improving point neighborhood evaluated improves current solution accepted move improving foreach chose row random max improve jr best endfor row heuristic move improves current solution strategy 
best improving apply rules 

jr calculate delta change 
set column minimizes delta 
jr unique column calculate delta change 
delta set minimizes delta 
jr calculate delta change set column minimizes delta strictly speaking best improving heuristic cases move neighboring solutions degrade current solution 
allow situation know jr jr constraint infeasible move current solution neighboring solutions attractive 
advantage solution jumps locally optimal infeasible domain attraction 
improving version row differs best improving version ways 
case select random column set 
case set soon find delta case randomly select column leave set cases guarantee find improving solution know change current solution feasible random move constraint feasible weighing implications cost component feasibility constraints 
initialization initial ga population usually generated randomly 
intent sample areas search space ga discover promising ones 
developed modified random initialization scheme 
block random initialization suggestion gregory uses information expected structure spp solution 
solution spp typically contains ones zeros 
knowledge randomly setting approximately number columns estimated final solution 
average number nonzeros column expect number optimal solution approximately ratio number nonnull blocks probability set block choose set column chosen randomly 
probability set single column block 
computational results test problems test hybrid algorithm selected subset problems small medium sized problems larger problems hoffman padberg test set 
real set partitioning problems provided airline industry 
table sorted increasing numbers columns 
fewer columns nw nw columns respectively 
problems significantly larger just columns constraints 
reason test larger problems practice usually preprocessed matrix reduction feature large problems significantly reduce size problem 
access capability 
try gain insight difficulty test problems solved public domain lp solve program 
program solves linear programming problems simplex method solves integer programming ip problems branchand bound algorithm 
columns table name test problem number rows columns problem optimal objective function value lp relaxation objective function value optimal integer solution number simplex iterations required lp solve solve lp relaxation plus additional simplex iterations required solve lp subproblems branch bound tree number variables solution lp relaxation zero number nonzero variables solution lp relaxation having fractional value number nodes searched lp solve branch bound tree search optimal solution 
optimal integer solution lp solve problems aa kl aa aa nw kl indicated table sign front number simplex iterations number ip nodes problems 
aa aa lp solve terminated finding solution lp relaxation 
aa kl kl lp solve solution lp relaxation terminated finding integer solution 
nonoptimal integer solution lp solve nw terminated 
termination occurred program aborted user specified resource limit reached 
lp solve smaller problems fairly easy integer optimal solution small branch bound tree search 
exceptions large tree search required nw nw nw nw nw 
problems loosely correlate higher number fractional values lp relaxation 
larger problems lp solve results mixed 
nw problems nw nw nw nw nw table test problems problem 
lp ip lp lp lp ip name rows cols optimal optimal iters nonzeros ones nodes nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw aa kl aa nw aa nw kl nw results quite integer optimal solutions nw 
size branch bound tree searched correlate loosely degree solution lp relaxation 
kl aa models lp solve considerably difficulty find integer solutions 
row heuristic results creating hybrid ga required selecting parameters row heuristic 
number iterations apply row 
row computationally expensive empirical evidence showed significant difference applying row iterations fixed number iterations row applied 
remaining parameters select method constraint selection search strategy best improving improving 
studied empirically subset test problems table 
subset selected smaller problems larger ones 
table compares best improving column best improving column strategies conjunction method constraint selection 
random means constraints selected randomly 
max 
means constraint largest value ij gamma selected 
columns opt 
feas 
number times independent trials optimal feasible solution 
obvious result table feasible solution run test problem constraint selection maximum violation 
random constraint selection helped significantly finding feasible solutions optimal ones 
appears randomness cases improving strategy helps escape locally optimal solution 
differences best improving improving strategies significant 
table row heuristic best vs improving problem best name random max 
random max 
opt 
feas 
opt 
feas 
opt 
feas 
opt 
feas 
nw nw nw nw nw nw nw aa nw table compares best improving improving strategies hybrid combination row heuristic refer 
table constraint selection done randomly 
results show improving strategy superior finding optimal solutions 
interesting result argue expect exactly opposite 
ga introduces randomness search expect better applying crossover mutation best solution row presumably 
possible explanation ga population converged new search information introduced row heuristic 
row best improving mode gets trapped local optimum little additional search occurs 
table best vs improving problem best name opt 
feas 
opt 
feas 
nw nw nw nw nw nw nw aa nw hybrid genetic algorithm results table compares row heuristic hybrid 
row perform poorly respect finding optimal solutions 
finds optimal solutions row finds 
outperforms row 
case row local improvements recombination ability allows local improvements incorporated strings having global effect 
table contains results applying test problems table 
runs row heuristic applied randomly selected string generation constraint randomly selected improving strategy 
run terminated optimal solution test problems known iterations previous informal testing observed progress early search best solution rarely changed iterations 
perform experiments problem table independent runs 
run single node ibm scalable sp computer 
ibm sp system node consists ibm rs model workstation processor mb memory gb disk 

opt 

feas 
columns number times optimal feasible solution 
best feas 
column objective function value best feasible table comparison algorithms problem row name opt 
feas 
opt 
feas 
opt 
feas 
nw nw nw nw nw nw nw aa nw solution feasible solution 
opt 
column percentage optimality best feasible solution 
entry best feasible solution optimal percentage optimality best feasible solution suboptimal feasible solution 
avg 
feas 
column average objective function value feasible solutions 
second opt 
column percentage optimality average feasible solutions 
results table divided groups feasible solution 
infeasible problems nw nw nw aa aa nw aa nw 
problems group feasible solutions run 
optimal solutions average fifth time 
problems nw nw kl nw best feasible solution percent optimality 
average feasible solution varied typically percent optimality smaller problems percent optimality medium sized problems percent optimality larger problems 
second group problems unable find feasible solutions 
problems subdivided better infeasible solution optimal 
class nw aa aa aa nw 
point note table large number constraints aa aa aa nw 
note table problems relatively high numbers fractional values solution lp relaxation difficult lp solve 
aa problems average run best infeasible solution evaluation function value approximately times optimal solution 
nw nw best infeasible solution percent optimal solution feasible solutions 
problems feasible solution nw run performance characteristics closely related nw nw infeasible problems 
table hybrid genetic algorithm results problem 
best avg 
name opt 
feas 
feas 
opt 
feas 
opt 
nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw aa kl aa nw aa nw kl nw twelve percent constraints remained infeasible 
nw nw nw able find infeasible strings lower evaluation function values optimal solution concentrated search strings 
problems penalty term evaluation function strong ga exploited 
table compares solutions test problems lp solve branch cut algorithm hoffman padberg column hp algorithm 
entries optimal solution percentage optimality best feasible solution suboptimal feasible solution 
lp solve results obtained ibm rs model workstation 
hoffman padberg results table runs ibm rs model workstation 
entries fifth column table 
branch cut algorithm obtained best results solving problems optimality 
results matrix reduction preprocessing step applied test problems reduce size addition matrix reduction done part branch cut algorithm available lp solve 
lp solve optimal case nw near optimal solutions larger problems feasible solutions 
optimal solutions problems solutions percent optimality 
eleven problems feasible solutions greater percent optimality obtained feasible solution 
reported actual solution times algorithm run different model ibm workstations 
take account relative performance different processors general comments computational performance 
branch cut algorithm significantly faster lp solve 
problems lp solve optimal solutions lp solve solution times slightly faster faster processor lp solve ran factored 
successful finding feasible solutions finding optimal solutions 
motivated develop row heuristic 
important parameters row constraint selection performed select move 
random constraint selection improving strategy introduces randomness successful attempts apply row infeasible constraint find best improving solution 
key points row ability moves large neighborhoods willingness move downhill escape infeasibilities randomness introduced random constraint selection improving strategy 
constraints feasible row longer introduces randomness true improving mode moves examined degrade current solution row remains trapped local optima 
table comparison solution time problem lp solve hp nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw nw aa kl aa nw aa nw kl nw ran independent trials real world spp problems 
optimal solution half problems solutions percent optimality 
problems unable find feasible solutions 
cases penalty term strong ga exploited concentrating search infeasible strings lower evaluation function values optimal solution 
compared branch cut branch bound algorithms 
branchand cut algorithm successful solving problems optimality time branch bound 
outperformed branch bound significantly 
fact feasible solutions larger test problems branch bound 
surprising genetic algorithms outperformed traditional operations research algorithms 
gas general purpose tools usually outperformed specialized algorithms problem exist 
points worth noting 
nw models relatively easy solve little branching may indicative current spp problems airlines solve 
second genetic algorithms map naturally parallel computers expect scale large numbers processors 
parallel computing experience promising regard 
areas possible enhancement exist 
problems penalty function strong ga exploited searching infeasible strings lower evaluation function values feasible strings 
research stronger penalty terms methods solving constrained problems genetic algorithms warranted 
second adaptive mutation rate simulated annealing move row heuristic maintain diversity population order sustain search warrants investigation 
chu beasley shown preprocessing constraint matrix reduce size modifications fitness definition parent selection method population replacement scheme lead improved performance solving spp problems 
acknowledgments parts ph thesis illinois institute technology number people helped various ways course 
greg bob tom tom christopher remy john gregory bill gropp hoffman john lusk jorge mor bob olson gail pieper paul nick radcliffe sun david tate stephen wright 
anonymous referees helpful comments 
johnson 
global approach crew pairing optimization 
ibm systems journal 
steiger 
airline crew scheduling problem survey 
transportation science 
hull 
airline crew scheduling supercomputers algorithms 
siam news 

lp solve 
public domain linear integer programming program 
available anonymous ftp ftp es ele tue nl directory pub lp solve file lp solve tar chu beasley 
genetic algorithm set partitioning problem 
technical report imperial college 
davis :10.1.1.87.3586
handbook genetic algorithms 
van nostrand reinhold new york 
dejong 
genetic algorithms function optimizers 
whitley editor foundations genetic algorithms pages 
morgan kaufmann san mateo 
dumas solomon 
airline crew pairing problem 
technical report universit de montr eal 
eckstein 
parallel branch bound algorithms general mixed integer programming cm 
technical report tmc thinking machines 
fischer 
optimal solution set covering partitioning problems dual heuristics 
management science 

optimizing flight crew schedules 
interfaces 
goldberg 
genetic algorithms search optimization machine learning 
addisonwesley publishing new york 
goldberg deb 
comparative analysis selection schemes genetic algorithms 
rawlins editor foundations genetic algorithms pages 
morgan kaufmann san mateo 
gregory 
private communication 
gregory 
private communication 
hoffman padberg 
solving airline crew scheduling problems branch 
management science 
holland 
adaption natural artificial systems 
university michigan press ann arbor 
kitano nakanishi 
hybrid search genetic algorithms combining genetic algorithms tabu search simulated annealing 
forrest editor proceedings fifth international conference genetic algorithms page san mateo 
morgan kaufmann 
levine 
genetic algorithm set partitioning problem 
forrest editor proceedings fifth international conference genetic algorithms pages san mateo 
morgan kaufmann 
levine 
parallel genetic algorithm set partitioning problem 
phd thesis illinois institute technology chicago 
department computer science 

exact solution crew scheduling problems set partitioning model successful applications 
networks 
muhlenbein 
parallel genetic algorithms combinatorial optimization 
zenios editors computer science operations research pages 
pergamon press 
nemhauser wolsey 
integer combinatorial optimization 
john wiley sons new york 
pierce 
application combinatorial programming class zero integer programming problems 
management science 
richardson palmer liepins 
guidelines genetic algorithms penalty functions 
schaffer editor proceedings third international conference genetic algorithms pages san mateo 
morgan kaufmann 
syswerda 
uniform crossover genetic algorithms 
schaffer editor proceedings third international conference genetic algorithms pages san mateo 
morgan kaufmann 
whitley 
genitor different genetic algorithm 
rocky mountain conference artificial intelligence pages denver 
