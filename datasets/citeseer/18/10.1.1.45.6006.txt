shared understanding synchronous collaborative design saad thesis submitted degree doctor philosophy department architectural design science university sydney november fl saad wife rita mother father daughters 
summary thesis concerned developments computer support systems collaborative design environments 
multi user collaborative design system requires shared understanding design artefact design team 
thesis explores issues involved development multi user design systems shared workspaces 
developments data modelling symbolic schemas integrated design environments graphical representations emphasise need represent visual semantic data computer design systems 
furthermore order support collaboration representations explicitly shared 
level sharing accomplished shared workspaces 
shared workspace collaborative design environment medium various people involved design task collaborate 
workspace includes multi user interface coordinate various design activities 
designer able view designer workspace space 
computer programs design provide visual interface 
computer supported cooperative groupware concerned development conceptual models facilitate group interaction exploration enabling technologies 
application models collaborative design 
thesis explores different technological approaches develop multi user applications design 
framework classifying applications issues raised develop comprehensive collaborative design system proposed 
proposed framework prototype multi user cad system developed 
allows designers simultaneously modify share design schema common representation visual design objects 
implemented autocad basic cad application 
various requirements developing multi user application synchronous summary iii design emerged implementation prototype 
thesis presents mate multi user architecture team environments designers 
mate comprehensive multi user architecture collaborative design existing applications cad modelling programs analysis programs knowledge systems shared designer shared workspaces 
categories workspace considered shared visual representation shared underlying representation 
explicit representation design mate comprises visual representation semantic model 
architecture enables shared understanding design product providing explicit representation graphical semantic design objects 
thesis proposes shared object model captures explicit representation visual semantic descriptions shared design objects 
model allows different concepts represent various designers perspectives coexist different stages design process incorporating multiple views design semantics graphics object 
incorporation results better shared understanding design improved communication collaboration 
interface shared object model developed object browser program 
links graphic data semantic data maintained program 
object browser implemented incr tcl tcl tk toolkit 
acknowledgments lord giving life intelligence 
express sincere appreciation gave assistance preparation thesis 
particularly wish supervisor dr mary lou maher associate professor department architectural design science university sydney provided direction assistance encouragement supervision thesis 
appreciate opportunities provided discuss ideas thesis publications conferences 
members thesis committee professor john gero dr michael rosenman interest valuable suggestions thesis proposal 
wish express gratitude entire staff key centre design computing spent time postgraduate study providing learning working environment 
acknowledge assistance people dr bala balachandran dr james rutherford fruitful discussions joe doug fay sudweeks stephen technical help 
colleague peter williams friendship valuable technical assistance implementation thesis ideas 
dorothy choi jos jun jo han jong jun heng li sun stone wang wang john zhang caring fellowship 
words inadequate express sincere gratitude wife rita daughters love encouragement sacrifice 
love 
special brother wife mona sons jerome jonathan encouragement support understanding 
gratefully acknowledge financial support university sydney australian postgraduate research award key centre top scholarship key centre design computing university sydney 
iv contents summary ii acknowledgments iv computer design time design shared workspace motivations objectives organisation thesis background artificial intelligence collaborative design cooperative frameworks multi agent design models 
negotiation coordination support models 
summary distributed integrated design environments design data exchange standards data knowledge integration design intent summary computer supported cooperative multi user interfaces shared applications architectures shared applications communication shared applications contents vi summary multi user architectures collaborative design enabling technologies communication networking client server model multiplexors message systems computer conferencing media space summary classification scheme multi user applications design framework classifying collaborative design environments applying scheme multi user cad system discussion requirements multi user system synchronous collaborative design mate design multi user architecture team environments designers session server coordinator shared visual representation shared underlying representation summary semantics graphics shared design workspaces design semantics design knowledge research semantics modelling shared workspaces workspace information sharing workspace communication media contents vii workspace process management workspace exploration space linking semantics graphics representation visual design information aggregations shared objects relationships represent aggregation shared objects model object browser interface shared object model implementation object browser example defining building model defining objects linking semantic graphic objects summary issues contributions research list cscw groupware applications collage clearboard rendezvous sketchpad contents viii abstracts research papers list figures interaction domain time dimensional space 
view design workspace coordination centralised manager 
view design workspace coordination shared workspace 
typical blackboard model showing major components 
conceptual architecture blackboard model building design 
database centred approach integrated system 
aes approach integration 
illustration capturing design intent distinct model shared model 
multi user centralised architecture 
multi user replicated architecture 
alternative multi user architecture 
applications sharing shared repository 
applications sharing messages passing 
system architecture protocol multiplexor tec floor control interface maher rutherford 
illustration closed open applications illustration generic multiplexor illustration application specific coordinator 
illustration multi user interface shared applications 
synchronous multi user cad system 
collaborative systems time space matrix 
ix list figures flow data control proposed model illustration collaborative server 
components shared visual interface generalised specialised hierarchy buildings objects illustration shared database distributed design applications 
combining graphical models video images sound shared workspace communication 
process management role shared design workspaces 
graphical model state space exploration shared design workspace 
wire frame model surface model arch constructive solid geometry csg representation arch boundary representation rep arch hierarchy wall classes object class relationships represent aggregation 
representation shared objects object browser interface 
definition generic class 
graphical representation building 
typical desktop screen mate 
abstraction model building 
class aggregation hierarchy structural engineer shared object model 
class components hierarchy structural engineer shared object model 
class components hierarchy architect shared object model 
instances aggregation components classes architect 
architect semantic objects cad model 
instances aggregation components classes structural engineer 
structural engineer semantic objects cad model 
establishing link semantic object wall graphic entity autocad 
aggregation object office defined architect model 
list figures xi aggregation object floor defined structural engineer model 
chapter computer design computer applications widely designers various domains 
literature available computer design fall extreme categories computer assisted design computer mediated communication 
computer applications developed aid designers solving complex analysis problems visualising designed objects 
regardless degree support applications provide single user interface 
developments state art information technology applied enhance communication coordination collaboration networking concurrent processing windowing environments developed specifically support design 
thesis attempts fill gap extremes 
explores issues involved development computer design environment teams design professionals collaborate 
section describes research approaches collaborative design followed motivation research objectives themes shared workspace 
organisation thesis detailed section 
time design computer technology developed assist designers various disciplines 
technologies models constructed development computer applications individual 
computer aided design knowledge sys chapter 
asynchronous synchronous multiple single domain time research space interaction domain time dimensional space 
tems examples applications 
computer applications single machine architecture single user interface 
practice design involves designer requires harmonious interaction designers systems 
technologies models developed support individuals sufficient teams 
requirements needs individual workspace vastly different shared workspace individuals team 
computer applications intended aid designers especially groups designers developed fit needs individual member team 
illustrates interaction time domain dimensional space 
time considered asynchronous synchronous collaboration 
domain considered single multiple discipline collaboration 
ffl time 
important distinguish asynchronous group interaction synchronous real time interaction 
asynchronous mode designers may different times different parts design require immediate notification actions 
networked workstations wide variety functions tools support sharing exchanging information asynchronously email ftp dbms 
challenge enhance extend tools support synchronous interaction example immediate notification assumed 
ffl domain 
collaborative design requires extensive interaction designers single various disciplines 
hand models chapter 
computer systems developed support single designer 
hand research collaborative design focussed interaction multiple disciplines 
approach explores role computers supporting collaborative design activities multiple views design information single multiple design disciplines 
major aim thesis provide support designers involved synchronous collaborative design session 
focus shareable workspace required participants team design synchronous collaboration shareable workspace design meanings workspace human designers view interact visual representation shared representation design project persistent memory interprocess communication underlying representation 
shared workspace collaborative design defined group designers involved solving complex problems design information data design requirements control distributed 
design environment requires extensive interaction designers single various domains 
hand architects may example cooperate early stage design single domain 
hand architects structural engineers may cooperate design structural systems various domains 
interactive environment designers may interact sending tasks undertaken may interact dynamically exchanging design concepts ideas 
collaborative design involves kinds knowledge different domains 
designers require different views design data substantially different data processing needs capabilities 
different levels abstraction needed deal diversity knowledge 
conventional approach widely collaborative design viewed illustrated manager coordinates access shared workspace 
main drawback approach manager provide coordination designers control design process management design objects 
approach providing shared workspace proposed research 
shared workspace medium team may room different locations networked workstations 
chapter 
designer designer designer manager workspace shared view design workspace coordination centralised manager 
workspace shared designer designer designer manager view design workspace coordination shared workspace 
communication participants collaborative design occurs 
representation shared workspace central task collaborative design 
shared workspace provides flexible effective visual communication advantage allowing understanding model design design specialists necessary shared vocabulary 
underlying representation design elements shared workspace shared 
chapter outlines major requirements sharing design representations 
chapter 
motivations design rarely activity commenced completed individual 
common design environment teams designers final solution 
design research focussed supporting individual activity design 
computer aided design cad example design professions tool visualising documenting design solution 
mode cad system currently limited single user interface 
interface provides technology person view drawing changes geometry view 
implicit technology assumption cad activity limited individual 
single user cad systems suitable collaborative design 
primary motivation thesis need models computer supported collaborative design lead development multi user synchronous cad systems 
development computer supported cooperative cscw groupware enable group people geographically distributed communicate computer 
enabling technologies provide basis communication sharing applications workspaces collaborative environment 
thesis motivated belief enabling technologies support designers need research shared workspaces facilitates communication shared understanding design 
objectives research visualisation representation design information promising application research collaborative design developed 
recognition design requires human problem solving activity involves groups designers major objective thesis develop computational model collaborative design notions shared workspaces investigated visual sharing visual environment allows real time interaction designers visualising effect design decisions 
shared workspace design ideas sketches drawings shared 
chapter 
semantic sharing having ability share design concepts necessarily imply effective communication achieved 
sharing design semantics allows designers different perspectives reduce risk mis interpretation design decisions 
detail objectives thesis outlined ffl provide framework collaborative design environment team designers final solution design project 
ffl elaborate concept shared environment notion shared workspaces 
categories shared workspace visual representation vs underlying representation developed support multi user collaborative design environment 
ffl develop synchronous multi user cad system demonstrate test ideas developed proposed framework 
ffl identify representation presentation design semantics efficient representation schema 
explore ideas design examples mainly concerned architectural structural design buildings constructed 
organisation thesis research developments design computing artificial intelligence provide basis representing reasoning design knowledge research dai cscw provides multi user architectures collaborative design environment shareable workspace support synchronous design team activity 
rest thesis organised follow ffl chapter gives general overview current research areas thesis builds 
starts describing highlights development design research reviews application cscw design 
chapter appropriate techniques abstractions relevant technology areas identified 
chapter 
ffl chapter dedicated presentation multi user architectures collaborative design 
scheme classifying multi user applications design followed description multi user cad prototype 
chapter presents various issues requirements needed collaborative design environment followed description mate multiuser architecture synchronous collaborative design existing applications shared designers 
main focus chapter sharing visual representation basis displaying manipulating graphical design data 
ffl chapter goes support visual data explores representation design semantic 
various uses shared workspaces 
questions design semantics 
design semantics represented 
explained 
chapter describes development implementation shared object model illustrates design semantics examples 
ffl chapter concludes summary contribution thesis 
research directions described 
ffl appendix shows abstracts published research papers related thesis 
ffl appendix gives descriptions cscw groupware distributed collaborative research projects features 
chapter background chapter presents background information major areas artificial intelligence ai distributed integrated design systems computer supported collaborative systems 
need flexibility reasoning information sharing control distribution motivates current research distributed ai dai 
dai concerned modelling general problem solving collaborative intelligent interaction agents 
design research adopts dai approaches develop distributed integrated design systems capable addressing complex nature design processes 
computer supported cooperative cscw distinguishes general area dai distributed computing concentrating collaborative enabling technologies computer networking communication 
development implementation cscw systems called groupware lead emergence new type systems support group working 
systems range electronic mail video conferencing shared applications shared workspaces 
computer supported collaborative design system requires integration variety working modes demands flexibility design knowledge representation 
context chapter identifies appropriate techniques abstractions provide opportunity developing synchronous collaborative design systems 
remainder chapter explores relevant research developments technologies implications development collaborative design systems 
specifically section reviews developments artificial intelligence design identifies developments offer col chapter 
background design 
section examines efforts integration distributed systems related specifically computer aided design 
developments computer supported cooperative described section special needs computer supported collaborative design elaborated 
artificial intelligence collaborative design need represent design knowledge processes computable model led artificial intelligence ai paradigms design research 
ai models extended include special characteristics design objects 
general schema representing design knowledge design prototype gero 
design prototype formal representation design knowledge incorporates function behaviour structure 
consideration ai developing ai computer aided design systems intelligent graphical interface provide access graphical functional aspects design objects 
section describes various issues addressed researchers achieve ai collaborative distributed design systems 
brief new paradigms distributed ai provided basis current research ai collaborative design 
recognition human problem solving activity involves groups people lead research artificial intelligence investigate concurrency distribution ai 
distributed ai concerned modelling problem solving collaborative intelligent interaction human non human agents 
distributed ai deals issues solution complex problem divided number subproblems modules known distributed problem solving agents cooperate solve single complex task known multi agents 
research issues dai include modelling communication control negotiation problem solution space bond gasser 
remainder section highlights research issues ai collaborative design systems 
cooperative frameworks frameworks developed collaborative design blackboard architecture cooperation 
blackboard medium communication specialists known chapter 
background knowledge sources occurs 
knowledge source knowledge source knowledge source module control blackboard data data flow control data flow typical blackboard model showing major components 
shows blackboard model usually consists major components knowledge sources blackboard data control module 
knowledge sources separate independent modules needed solve specific problem 
solution space problem solving process organised application dependent hierarchies global data stored blackboard 
control module represents meta knowledge knowledge sources 
monitors changes blackboard maintains appropriate focus attention activating opportunistic knowledge source state 
blackboard systems developed different control architectures application areas 
despite generality flexibility blackboard framework communication intensive 
integrated schemes considered researchers different arenas 
proposes hybrid cooperation model incorporates blackboard approach framework distributed transaction 
developments distributed artificial intelligence foundations modelling collaborative integrated systems particularly cooperative product design knowledge activity distributed 
blackboard model problem solving applied structural design research groups mit sriram carnegie mellon university 
conceptual view blackboard model knowledge chapter 
background modules involved building design shown 
architect ks structural engineer ks engineer ks project manager blackboard global design data conceptual architecture blackboard model building design 
systems truly concurrent run supervision global scheduler collection integrated control knowledge sources 
focus cooperative systems shifted addressing issues related synchronisation conflict resolution knowledge sources 
case models strategies resolving conflict cooperating agents reported sycara 
multi agent design models 
multi agent design approach requires teams intelligent design agents design specialists cooperate perform specific design tasks 
collaboration design agents achieved exchange design information changes special coordination agent detection resolution design conflicts particular negotiation strategy 
approach development framework collaborative distributed multi disciplinary design called federation collaborative design agents 
design agents communicate special system program called facilitator standard language called agent communication language acl 
presents computational model collaborative design multiple design agents 
organisation design knowledge notion design prototypes 
design agents design prototype design instance incorporate function behaviour chapter 
background structure relevant knowledge design process 
negotiation coordination support models 
despite interesting computational models negotiation coordination collaborative design sycara studies directed development architectures support negotiation brown 
examples architectures design histories case design negotiation meta level knowledge knowledge approaches support design concept negotiations 
general domain independent framework supporting collaborative evaluation refinement design defined 
framework distinguishes control knowledge sources supported blackboard architecture resources organisation coordination related application domain form design 
cooperative multi expert advisor system developed monitor evolving design process helps resolution conflicts architectural design applications 
cooperative systems development interacting collaborative mechanisms allow resolution common problem means expert agents working 
rutherford knowledgebased design decision support environment enables designers participate multi disciplinary design activity 
framework uses multi level blackboard model basis communication user application applications participating problem solving process 
summary mentioned ai provides representation reasoning paradigms broadened computers design 
dai methodology development collaborative design system offer support areas representation common design knowledge communication formal design information generic problem solving frameworks adaptation application conflict resolution design process 
model communication offers close match shared workspace collaborative design process blackboard model 
model permits effective efficient chapter 
background cooperation multiple sources knowledge common global database supports persistent memory constraining sources specific knowledge representation mode processing 
issues addressed implementing blackboard model collaborative design considered thesis 
issues support persistent objects organisation objects shared information space 
distributed integrated design environments design general involves number participants designers interaction multiple technologies 
designers interact sharing design information distributed environment 
computer aided design systems implemented function distributed multidisciplinary environment 
primary goal systems representation geometry 
overcome limitations cad systems researchers ai design develop models achieve significant level intelligent cad example akman balachandran gero 
integration computer technologies ai research design research provides conceptual basis needed computer integrated design systems 
relevant cad design research includes developing various design data exchange standards models data knowledge integration capturing design intent rationale development common models design knowledge processes multidisciplinary design environment 
developments described subsections related efforts reported literature 
design data exchange standards existing cad systems offer powerful drawing capabilities realistic representations design 
design data cad systems represented set graphics symbolic objects lines polygons text 
attributes attached objects deal non graphic information 
nature design collaborative integration issues thesis words specialist designers participants agents synonymously 
terms refers human computer program 
chapter 
background critical research topic 
early efforts integration resulted development various data exchange standards 
aim standards varied exchanging drawing data exchanging product models 
dxf results efforts exchange graphics databases cad systems deal geometric information lines circles lack design features data exchange standards topology relationship shifts focus product data exchange standards 
focus product modelling pdes step emphasis solid modelling geometry essential features models non geometric data relationship information step 
current research development data exchange standards provides basis computer representation efforts limited mainly conceptual models product data data exchange physical files formal language support information modelling stages express language 
research efforts research may share concerns objective different 
data exchange standards assume product modelled shared workspaces product designed 
thesis incorporates data modelling concept visual representation shared workspace semantics relationships 
data knowledge integration representation non geometric information maintained cad systems ability manipulate 
design data extracted database user fed system reason 
interfaces exist manage exchange information various systems 
deal diversity design information integrated cad systems provide basis data integration 
illustrates database centred approach integrated system 
integrated data approach involves database management systems provide utilities manipulating design information 
approaches adopted 
approach relational database management system rdbms data stored tables accessed modified relational query language 
second approach object oriented database management systems oodbms object ori chapter 
background database model expert system cad structural solid modelling analysis database centred approach integrated system 
programming techniques support encapsulation complex objects 
building design example integration achieved constructing building model form database disciplines retrieve utilise produce information project 
information limited graphical data 
project specific information client requirements building schedules part project database 
application approach integration varied 
database management systems centralised database provide access shared information systems manage link shared data multiple applications 
example approach ibm architecture engineering series aes ibm 
aes various applications graphical modelling structural analysis rule base calculator rbc analysis lighting analysis power energy analysis integrated sharing set files database 
users application interact graphical representation perspective design 
graphical data stored separate graphic file accessed mainly graphic modelling application gm viewed applications 
customised data shared storing linking rdbms ingres records graphic elements 
illustrates aes approach integration 
complexity design data issues raised design databases integrated design multiple views multiple representations consistency levels abstractions necessitate appropriate level extensibility capture structure behaviour complicated design objects 
research integrated systems rely object oriented database chapter 
background rdbms graphic modeller modeller structural structural file rendering file rendering modeller rendering file rendering modeller file graphic files aes approach integration 
management systems oodbms 
oodbms object oriented programming techniques utilities database management systems support encapsulation complex objects 
oodbms early stage development 
object oriented approach shows significantly promise semantic expressiveness perspective 
approach applied various research projects law sriram sauce powell 
variety computer applications dealing different functionality aspects design continues grow 
hand computers perform complex analyses predetermined sequence operations stiffness method finite element method structural analysis require input generate output 
hand knowledge systems knowledge representation schemes rules frames prototypes predetermined order operations heuristic 
need integrate diverse forms knowledge representations analysis methods realized howard 
research issues adapting methods synchronous collaborative design environment involve consideration schema captures function behaviour versions single vs multiple interpretations design semantics 
chapter 
background design intent design researchers recognised representation designs integrated design environment currently limited geometric topological information collaboration requires communication intent 
design intent defined implicit design knowledge leads design decisions stage design process 
motivations capturing design intent varied 
motivations determine effect modifying design decisions changes create new design modifying previous design solution redesign understand design solution explanation 
current research design intent includes representing evolving artifact design objectives supporting design documents garcia representing purpose behaviour design elements rosenman maher representing user performance requirements design level de la 
remainder section look representations design intent relevant research 

presents model design decision making objectives motivating decisions explicitly represented 
view design process refining high level objectives physical description artefact 
intent decision set objectives including refinements leading decision 
entities design model identified objectives functionality aesthetic economic alternatives sets decisions represent design instance operators contain knowledge design decisions 
garcia 
propose approach design documentation active document 
add active design documents model metaphor having computerised apprentice designer design process 
apprentice observes designer developing design 
decisions supporting rationale stored case knowledge base 
inconsistency appears apprentice expectations design decisions apprentice interrupts design process asking rationale decisions 
formal representation communicating design intent proposed rosenman maher 
design prototype schema basis representation association design intent geometry 
design intent related required function behaviour chapter 
background design element geometry elaboration structure description element 
capturing design intent tends document evolution design process 
approaches support various activities design process including refinement evaluation explanation directly address issues involved communication design intent 
motivations research capturing design intent support understanding design decisions improve communication designers reduce interpretation design decisions collaboration process 
design design design intent design intent design design design intent illustration capturing design intent distinct model shared model 
chapter 
background shows potential capturing design intent collaborative design system 
explicit representation visual information viewed mapping user conceptual model domain graphical representation 
illustrates users may formulate different models design intent graphical model 
order collaborate members design team shared understanding different models required shown 
thesis provides mechanism combining graphical semantic objects abstracted aggregated tangled hierarchy 
summary section describes development distributed integrated design systems 
major approaches achieve distribution integration design information discussed design data exchange standards design knowledge integration representation design intent 
focus ai representations design 
ai techniques provide representation paradigms represent reason design design processes 
issues raised development ai representations design relevant support design semantics collaborative design environment goes graphical geometrical physical design data 
computer supported cooperative generally main concerns computer supported cooperative cscw related study theory people computer related technologies affect group behaviour 
cscw distinguished distributed ai concentrating collaborative group communication 
researchers range disciplines including computer science organisational theory psychology design involved cscw 
research issues area range discovering models interaction applications development implementation 
research front researchers concerned conceptual models group communication bannon schmidt smith ellis concept information sharing hennessy trevor exploring communication collaborative design simon peng 
re chapter 
background search provides theoretical basis design development cooperative applications 
effort cscw concentrated group organisational aspects 
contrast various techniques applied enhance communication coordination collaboration networking concurrent processing windowing environments 
technologies help producing cscw applications enhance teamwork 
current applications area primarily group meetings long distance conferences software development game playing 
research relevant survey includes architectures multiuser applications patterson crowley greenberg models shared workspace ishii multi user drawing tools greenberg 
application research design physical objects developed 
distinctions collaborative design include need share design drawings ideas rationale applications focus sharing text graphics 
increasing number researchers various disciplines involved cscw field led wide range applications 
applications provide support collaborative process variety different categories computer mediated systems computer conferencing systems screen file sharing systems authoring systems 
diversity collaborative applications multidisciplinary research approach cscw necessitates classification applications 
context sections describe cscw systems emphasis ffl multi user interfaces shared applications 
ffl architectures shared applications 
ffl communication shared applications 
multi user interfaces shared applications typical cscw system multi user painting drawing application 
drawings essential part communication process collaborative design useful investigate broad range shared painting drawing tools 
approach develop multi user painting application functionally equivalent single user system 
resulting system system allows users draw type erase surface board 
chapter 
background users see exactly image 
details implementation single user multi user painting systems similar 
user interface capabilities added multi user system facilitate collaboration shared pointer participants list shared drawing tools fit category 
advanced feature added systems multiple shared surfaces shared individual views 
example simple shared drawing program public domain program runs workstations window system dourish 
drawing surface entirely shared entirely unstructured simply bit plane 
modes draw erase 
mouse acts pen draw mode eraser erase mode 
mouse button pressed acts pointing device movements echoed remote screen 
considered shared sketching tool users equal roles 
users right draw erase part shared surface board 
shared drawing tool motif windows wilson 
capabilities available system including ability create geometrical objects line rectangles ellipses 
images common raster image formats copied common drawing board 
editor detailed colour colour grabber outputs grey scale postscript formats bitmap 
different policies scrollbars 
default policy allows user scroll different area shared drawing surface independently 
policy available allows users lock scrollbars 
painting programs drawing programs allow users create objects lines texts manipulated 
effect having objects selected modified simultaneously different users raises number interface issues 
greenberg 
reports issues building object oriented drawing program called 
strategy allow person time manipulate object 
provide flexible responsive system strategy applied object handles object 
lu mantei uses different approach solve conflicting interface issues raised sharing object surface 
differs shared drawing tools support transparent layers 
chapter 
background users different layers contribute design 
layers stacked displayed prominent colour 
users able create hide select layer 
sketchpad system interactive graphical editor similar 
addition sketchpad system uses cad pictures background item discussion multiple users able sketches time 
interactive manipulation background visible users 
pointer identified user name box close pointer representation 
conference member allowed choose image background picture discussion 
may select sketches see 
sketches different participants distinguished different colours 
collaborative design encompasses wide range control techniques 
cscw essentially supporting rich patterns collaboration including model control 
groupware systems utilise control mechanisms strategies determine access object shared 
collaborative systems lead complex control models 
enabling technology cscw systems support complexity constrain 
architectures shared applications collaborative systems require applications working application uses single distributed interfaces 
multi user system distributes application interface users address nature implementation architecture 
groupware system main architectures centralised replicated 
application centralised workstation participant workstation participant workstation participant multi user centralised architecture 
chapter 
background shows centralised architecture 
architecture single application drawing program shared multiple participants providing shared group workspace 
copy application running graphical input output shared screens network 
sharing transparent application application shared need changes 
advantage architecture basically simple implement easy synchronise system information consistent resides place 
example centralised architecture rendezvous system designed build multi user applications conversational settings patterson hill 
centralised design rendezvous architecture implies information common users collected single space called abstraction 
individual views information generated user 
link view abstraction represented constraints 
rendezvous system considered toolkit provides standard graphics widgets multi user support telepointers multi user text multi user drawing multi user undo capability support sharing duplicated customised views 
shared drawing tool centralised architecture 
uses central program 
program controls shared surface board processing inputs users 
unique feature separation user interface component shared surface component 
user interface component controlled user 
utility implementation centralised architecture shared window systems protocol multiplexor 
protocol multiplexor special program behaves server window client 
program intercepts client server connection passes participating servers filtering unwanted useless responses events 
window multiplexor developed allow unmodified client shared users separate workstations simultaneously tec 
replicated architecture shown executing copy application user 
users interact copy server 
servers replicated application exchange inputs 
advantages interaction user application improved system robust unexpected failures 
system replicated architecture designed chapter 
background application replicated workstation participant application replicated workstation participant application replicated workstation participant multi user replicated architecture 
infrastructure building shared applications crowley 
multimedia applications developed system shared editor sketch program video tools 
system requires modification single user applications function replicated architecture 
fully replicated architectures communication protocol participants processes defined registering drawing erasing main advantage replicated architecture performance 
feedback better centralised architecture interaction user application locally handled 
second replicated architecture reduces network load input distributed network input output 
furthermore performance successful sites connected local area network may unacceptable wide area network 
technical barriers considered developing synchronous distributed collaborative system effective local wide areas network 
compared centralised architecture replicated architecture difficult synchronise 
states replicated applications consistent times 
instance designers working drawing shared drawing program select object simultaneously replicated application highlight selected object indicate permission user manipulate desired object 
applications receive requests select object rejection sent replica 
fact problem complicated applications chapter 
background application replicated workstation participant application replicated workstation participant application replicated workstation participant centralised server alternative multi user architecture 
involved may receive input number sides user 
common problem distributed computing solutions may depending level knowledge known application semantics 
development synchronous system requires special distributed control mechanisms ensure shared workspaces identical 
alternatives basic centralised replicated architectures possible 
shows alternative architecture developing distributed system 
hybrid architecture participants applications may central server handle organisation collaborative session activation shared processes access common resources 
interaction users individual application processes handled locally 
uses approach minimise need replicated architecture distributed ownership problem moving responsibility registration communication management centralised manager 
communication shared applications architectures discussed previous section form basis developing multi user systems 
possible architectures synchronous distributed collaborative systems define model computer applications shared participants 
focus section form communication applications shared 
specifically replicated architecture single application chapter 
background cad program shared application cad database programs shared 
section describes current approaches share applications 
approaches applications sharing multi user environment shared repository message passing 
application shared application shared application shared repository shared application shared applications sharing shared repository 
shows typical architecture applications sharing shared repository approach 
program responds directly user interacts indirectly users shared database shared repository architecture existing applications built originally single user extended support multi user interaction 
application unaware shared separate component developed control flow information application shared repository 
shared database provides applications independent representation shared workspace information 
clearly required sharing different applications 
approach imposes direct coupling applications shared repository 
changes shared repository reflect applications shared 
message passing approach applications interact message system illustrated 
architecture applications aware collaboration process 
built concept cooperation users application processes 
form architecture implies applications developed integral part multi user environment 
example shared drawing tools message system mechanism 
applications developed system basic transfer mechanism multi cast message application processes 
chapter 
background application shared application shared application shared application shared messages transfer applications sharing messages passing 
message system approach requires considerably large amount interactions applications application exchange information applications 
shared repository approach provides way letting applications share common data space 
problem involved multiple applications sharing resource shared repository space 
applications coordinate resource 
summary cscw research development multidisciplinary approach 
aspects cscw systems considered multi user interfaces architectures application sharing schemes 
cooperative systems considered belonging variety different categories message systems conferencing systems meeting support systems focussed categories address essential features developing multi user system synchronous collaborative design 
outlined multi user drawing applications object oriented approach introduce interface issues exist shared surface program 
major architectural alternatives multi user system centralised replicated 
advantages disadvantages alternative highlighted reviewing existing cscw systems 
unified approach overcome problems architectures 
broad scope existing applications need extend support collaborative system development inspired discussion application chapter 
background sharing 
different ways sharing applications identified 
shared repository scheme applications interact shared memory message passing scheme applications exchange messages transfer protocol 
cscw potential extend role computers group success requires understanding contribution individual organisational context 
opportunities application cscw technology lie multi user interfaces architectures collaborative design system 
chapter presents various requirements distributed synchronous collaborative design systems 
particular concentrated multiuser aspect system 
highlighted need support multiple levels information sharing 
strategies provide simultaneous interaction discussed 
emphasised role design communication collaborative design process 
pointed need shared visual representation new shared user interface metaphors specifically designed multi user systems 
research efforts distributed artificial intelligence provide models generic cooperative problem solving environment 
attention coordinate activities individual modules involved problem solving process 
different approaches proposed blackboard model offers generic strategy organise activities 
ideally blackboard model intended allow individuals exchange control solution data represent evolving global solution 
application blackboard model depends context data degrees control shared information 
developments integrated design systems satisfy requirements collaborative design systems various degrees 
distribution design information complexity design objects represent themes integration 
developments provide basis capturing design semantics addition geometric properties physical design object 
application collaborative systems explore technical problems emerge existing communication technology demand chapter 
background integration workspace aspect systems increases 
exploration shared workspaces collaborative design central issue 
development distributed synchronous collaborative systems driven nature shared design workspaces 
chapter multi user architectures collaborative design concerns chapter implement collaborative design systems existing visual interfaces multi user interface additional components needed people share visual interface originally developed single user private vs public workspace 
section gives overview enabling technologies multi user groupware applications developed 
number frameworks reviewing classifying cscw groupware discussed 
scheme classifying multiuser applications design section raises additional issues needed collaborative design environments 
section shows current software technologies applied develop synchronous multi user cad system 
enabling technologies research distributed applications multi user architecture synchronous collaborative design teams design professionals collaborate focussing need shared visual underlying representations 
enabling technologies traditionally computer systems autonomous entities 
computer hardware software capable providing information resources users 
years number changes technology underlined chapter 
multi user architectures collaborative design trend development computer applications 
important realisation computers users need share information resources 
section describes enabling technologies required build distributed collaborative applications 
intention give broad view underlying technologies necessary design develop multi user system allows individuals groups share information resources 
categories enabling technologies identified communication networking client server model message systems computer conferencing media spaces 
communication networking emergence local area networks lan provides basis connect computers close typically organisation single building apart 
enables users share resources printers centralised file server 
wide area network wan enables users connect computers different cities countries 
infrastructures network computers formed facilitates exchange sharing information resources different computers 
information sharing viewed sharing exchanging data users computer systems 
electronic mail file transfer distribute messages applications data wide range systems 
similarly distributed database management systems dbms provide multiple views common database schemas 
allow users access data views 
resource sharing involve accessing shared process device 
example unix operating system allows distributed systems separated parts run separate computers attached network 
operating system provides reliable communications path involved processes hidden users 
cscw groupware applications require multiple media 
media graphics video audio link people located different locations 
existing network communication technologies support transfer large quantities information serious degradation performance 
effective realisation cscw groupware applications requires establishment high speed bandwidth communication infrastructure chapter 
multi user architectures collaborative design integrated services digital network isdn 
client server model client server model standard model developing distributed applications 
server process controlling resource clients 
case distributed window system workstation network server process controls display resources 
server acts intermediary resources local system applications clients running local remote systems 
clients processes wish display screen 
client server model network transparent application programs 
possible user programs running different machines network invoked displaying windows single screen 
screen layout appearance style user interaction normally managed separate program called window desktop manager 
implementation client server model software development environments windows enables possibility distributing sharing visual interfaces application programs 
protocol describes activities sent client server connections 
protocol specifies types messages transferred network requests responses events errors 
client sends series requests server 
server performs requested actions sends series replies clients 
events sent server client 
event contains information device action key presses mouse movements side effect previous request 
multiplexors advantage client server model windows system user activities client intercepted 
user interface activity pass client server connection possible multiplex visual interface single application number users 
protocol multiplexor mux special program enables team users share existing windows applications 
tec window chapter 
multi user architectures collaborative design multiplexor provides joint viewing functionality single user applications 
program consists intercepting client server connection filtering events multiplexing responses illustrated 
includes floor control module 
module determine users separate event streams merged 
appears normal server clients client server 
result single process multiplexed interface shared applications displayed interact users separate workstations simultaneously 
floor control server server server user user user client client multiplexor system architecture protocol multiplexor tec protocol multiplexor aims provide application sharing joint viewing facilities windows system advantages 
users required new applications share existing applications modification 
existing cad systems run windows shared modification 
multiplexor allows users create conference applications 
view interface shared application 
joint viewing system need modified incorporate new applications changes existing applications 
multiplexor allows proprietary clients shared task developing computer supported collaborative design environment greatly reduced 
chapter 
multi user architectures collaborative design message systems fundamental aspect group exchange documents 
speed reliability computer networks enabled electronic messages exchanged computers 
electronic mail systems allows messages delivered electronic mailbox read recipient time 
electronic mail promotes interpersonal communication individuals 
message systems support asynchronous exchange structured information groups users 
artificial intelligence techniques message systems help manage information overload 
coordinator example supports organisational communication management providing facilities generating transmitting managing information conversation flores 
theories communication activity language action 
computer conferencing computer conferencing systems designed facilitate communication process engaging group discussion posting messages activities shared bulletin board news group world wide web 
users involve conference interacting shared information space 
users read conference contents reply particular message held conference server 
conferencing systems usually organised subject enable people interact common interests experiences specified subject 
turoff reviews historical evolution technology emphasising computer mediated communication cmc systems enable group people exhibit collective intelligence 
computer conferencing systems traditionally address asynchronous interaction users rodden textual information 
advances computers telecommunications led integration computer audio video communications 
development integrated services digital network isdn promises provide unified solution transmission voice computer ultimately video data 
technological advantages provide basis developing shared software support computer mediated communication teleconferencing 
desktop conferencing allows group users geographically dispersed interact synchronously chapter 
multi user architectures collaborative design desktop workstations 
example desktop conferencing system 
commercial software combines live video audio shared white board package 
allows users interact live video audio working collaboratively text document captured image 
shared white board provided annotate file mark image 
example video conferencing systems architecture engineering construction aec industry networking cad project newton 
project provides high order levels integration design construction phases infrastructure projects supporting live video conferencing capability networking cad system 
video site proposed building distributed multiple workstations networking cad session 
media space media space enables group people extend shared workspace considerable distance overcoming barriers physical separation 
media spaces investigated design tools xerox parc harrison minneman 
define media space system integrates video audio computer technologies allowing individuals groups create environments span physically temporally disjoint places events realities 
users interact virtual space connects geographically displaced spaces 
media space system consists number enhanced workstations connected digital audio video network broadband isdn 
media space broadened nature human inter organisation communication patterns 
media space tends focus shared workspace people allowing approximation face face communication 
buxton argues effective remote collaborative telepresence lies integration spaces person space achieved media space task space achieved shared synchronous computer conferencing groupware 
shared softwares packages trademark silicon graphics chapter 
multi user architectures collaborative design support communication aspect media space 
packages include shared white boards shared authoring tools video audio capabilities 
summary section highlighted different technological approaches develop multi user applications 
number underlying technologies examined communication infrastructure client server model multiplexors message systems computer conferencing systems media space 
approach adopted client server model development distributed applications easier possible 
enables applications share information resources regardless locations 
notable example application model implementation multiplexors enables development multi user interfaces single user applications 
software technologies allow focus supporting simultaneous design activities concentrating technological aspects multi user design system 
message systems computer conferencing systems allow people interact engaging group activities textual information 
video conferencing systems extend shared information space allowing people interact video audio communication channels 
addition media spaces integrate people places time space 
experiences media space proved successful tool collaborative communication electronic digital technologies buxton mantei 
scope media spaces limited support exchange digital images supporting explicit design models 
designers need exchange design models represented various forms information drawings specification tables application technology design may lead capture explicit design rationale available process evolution design models 
classification scheme multi user applications design decades research cscw groupware computer mediated communication focussed developing information systems chapter 
multi user architectures collaborative design support group 
goals objectives research development areas varied 
group interaction multi user interface information systems emerged important factor development collaborative distributed design systems 
number frameworks reviewing characterising cscw groupware systems proposed bennett rodden greenberg peng 
objectives various perspectives review classification schemes aspects discussed time space taxonomy 
principals classify collaborative systems time space participants performing collaborative 
taxonomy common platform describing groupware distributed systems ellis rodden greenberg 
describes type interaction particular collaborative system perform synchronous asynchronous interaction geographical distribution participants located place remote different place 
shared information 
shared information raises issues concerning degree sharing required kind information shared 
granularity shared information depends application domain collaborative systems 
shared editors example share textual information 
addition textual sharing group drawing tools enable participants share graphical information 
peng identifies kinds information captured exchanged collaborative action oriented representation oriented information 
action oriented information useful group interaction synchronous collaboration gesture movements representation oriented information useful sharing formal representation design knowledge 
implementation architecture 
communication exchange information major concern collaborative design systems 
ability quickly exchange various types messages communication group essential 
challenge apply appropriate technologies increase support direct communication channel participants 
classification addresses nature implementation chapter 
multi user architectures collaborative design user user user user application application application floor control interface maher rutherford 
architecture 
main architectures multi user applications centralised replicated crowley 
architecture depends single copy shared application runs central server graphical input output shared screens network centralised executing copy application user replicated 
interactivity access control 
floor control mechanism important groupware systems tend focus activity 
floor control may help resolving interpersonal conflicts 
approach master slave style master user allowed interact application users may watch 
approach clearly limited users discouraged participating collaborative process 
moderated approach floor control passed users special access interface 
interface model allows users request pass floor control 
similar passing pen meeting 
current pen holder interact shared application enabling task completed intervention 
control passed users releasing pen group 
illustrates interface establishing user control application maher rutherford 
experiences gained observational studies various researchers flores bennett tang minneman turoff prototypes developed addresses issues raised classification schemes 
agreed research development cscw collaborative distributed systems general requires contributions range chapter 
multi user architectures collaborative design lines including sociologists cognitive scientists designers computer scientists rodden greenberg 
important aspect collaborative applications explore impact technology group individuals specific discipline 
framework classifying collaborative design environments develop computational model collaborative design environment framework classifying multi user applications design needed 
aim classification framework explore enabling technologies allow comprehensive collaborative design model developed 
framework raises new issues addressed directly previous classification frameworks 
framework enables better understand existing research projects clarify scope thesis 
classification scheme class applications closed versus opened approach distributing interaction multiplexing versus coordinating type applications single versus multiple real time video separate versus integrated representation design objects common vs multiple 
closed versus open applications people variety computer supported systems available group 
normally belong extreme categories 
category group access utilities enable share existing application 
existing applications closed sense user interface modified 
order develop multi user application existing single user applications data generated application intercepted sent locations 
user interface application may duplicated site intermediary agent 
example keyboard events mouse movements may captured participating sites sent back centralised application 
second category comprehensive open design applications normally 
application development systems interface enhancements offered open applications aim provide foundation clear understanding application engine developing extending functionality existing applications 
result systems support collaborative chapter 
multi user architectures collaborative design multi user interactivity evolved 
new applications developed specifically support group activities 
examples applications shared white boards provide support drawing listing indexing electronic documents authoring tools support joint writing documents groupware development environments provide support building multi user applications 
considered open applications multi user interface integrated application 
illustrates categories multi user interface specifically developed closed shared application users interact multi user interface provided integrated open shared application 
user user user user user user application multi user interface application multi user interface illustration closed open applications multiplexing versus coordinating aspect multi user development distribution input output shared applications 
window system example protocol multiplexor distribute data application collect events remote locations illustrated 
approach may applied window applications problems 
applications may ignore user events communicate directly hardware workstation efficiency purposes 
actions hard capture multiplexor applications modified 
design implementation issues multiplexor floor control 
floor control policy technique multiplexor uses determine access manner 
default assumption design multiplexors pass users actions generated user chapter 
multi user architectures collaborative design application generic multiplexor illustration generic multiplexor client 
approach tends deviate collaborative potentially confusing users application 
users select simultaneously object drawing program try move object different directions resulting activity unpredictable 
coordinating input output shared applications allows developers manage distribute users interactions 
approach viewed process filtering distributing users event high level application interface hardware level provided multiplexors technique 
shows illustration sharing application coordinators 
coordinators communicate shared application application specific coordinator 
disadvantage coordinator approach requires large development effort build coordinator specific shared application 
application application specific coordinators illustration application specific coordinator 
chapter 
multi user architectures collaborative design single versus multiple packages goal groupware multi user systems assist groups communication collaborating coordinating activities ellis 
collaborative design may require variety applications 
users different tools global task 
example designers building project different applications 
designer architect uses cad system display layout office building 
second designer structural engineer uses structural package analyse structural system floor plan 
designers different packages results shared maintain consistency 
developing multi user architecture design provide access shared application variety tools designers specific task multiple packages illustrated 
user user user multi user interface dm cad fem illustration multi user interface shared applications 
computer conferencing systems tec crowley provide shared display groupware applications 
shared display allows participants view static dynamic information text graphics various shared applications 
systems support various forms interaction shared applications exchange information restricted specific application activity 
practice designers wide range applications address specific design activity 
development computer support collaborative design requires model interaction various applications 
chapter 
multi user architectures collaborative design separate versus integrated video capability effectiveness communication enhanced addition communication media video audio transmissions 
approach separate communication channel carry video audio signals multiple workstations 
copy shared data application displayed participant workstation video images participants displayed separate windows 
approach allows progress informal discussion helps situations involving negotiation participants 
second approach integrate media shared workspace bridging gaps computer desktop 
clearboard ishii utilises video overlay technique permits people see image changing 
project uses similar approach development shared drawing system team designers generate design concepts 
image remote partner displayed screen transparent shared drawing surface displayed window 
metaphor clearboard open shared workspace provides smooth transition individual shared workspaces 
common versus multiple representation groupware applications sharing visual objects 
visual objects constructed graphics primitives strings characters 
complexity manipulating visual objects depends structural representation objects system 
representation visual objects shared drawing systems varies freehand sketches surface object graphics knowledge graphics 
systems tend focus common representation visual objects simultaneous interaction shared systems 
addition collaborative engineering systems focus representation object model provides basis sharing design product information 
shared model wong example conceptual framework representing content structure product information 
collaborative design system requires support multiple representations modelling design concepts maintaining flexibility interacting visual representation design objects 
chapter 
multi user architectures collaborative design summarise classification scheme table shows number research commercial projects fit scheme 
brief description applications appendix columns describe classification scheme rows correspond specific project 
tick cell indicates corresponding project fits category certain degree 
vs multiplexing coordinating vs vs closed vs open separate multiple integrated common single multiple vs clearboard collage rendezvous sketchpad table classification scheme multi user applications design 
applying scheme multi user cad system purpose multi user interfaces focussed primarily text editors dimensional drawings support group creation modification documents images 
despite technological advantages developing multi user applications application technologies needs adapted cad systems 
cad important tool design profession chapter 
multi user architectures collaborative design chose focus collaborative cad synchronous collaboration accommodated multi user interface 
multi user cad system allows users simultaneously modify common design graphically rich environment 
computer aided design applications consist high level representations complex objects mainly describe structure design entities threedimensional space 
manipulation dimensional objects normally supported editing functions translate rotate change shape complex object 
functions tend enforce certain sequential order valid 
multi user cad system interaction users different editing functions established modification functions 
manipulation issue complex design objects presents situation exist systems simple objects shared 
common approach overcome problem edit access mode 
mode access controlled object processed 
multiple modification functions may performed shared design objects 
access methods shared objects impose level reasoning collaborative design process consistency feasibility constraints 
multi user synchronous cad section far describes framework multi user applications design developed support collaboration 
synchronous multi user cad system implemented autocad basic cad system 
multiple designers different workstations interact drawing time 
system event driven mechanism replaces command driven interface autocad 
application process receives participants input events 
results responsive interface standard cad systems 
specifically designer adding graphical objects drawing designers continue draw modify design objects time 
illustrated coordinator inserted autocad input devices keyboard mouse 
coordinator translates event input devices autocad command form turn executes takes action translates event independent inter process communication form distributes controllers 
chapter 
multi user architectures collaborative design autocad visual interface process coordinator designer autocad visual interface shared visual interface inter process messages input input input output output input process coordinator designer dxf file synchronous multi user cad system designer issues command shared visual interface coordinator sends command autocad process 
second distributes network message coordinator turn filters autocad process 
autocad processes execute current command display result designers workstations 
mechanism simplifies process handling events maintaining synchronisation multiple copies application 
algorithm shows events processed coordinator 
event equal quit process user events participant process participant events chapter 
multi user architectures collaborative design discussion shows satisfies scheme 
multi user cad system uses ffl autocad shared application closed ffl single application handle visual communication drawing ffl coordinator handle multi user interactivity ffl video conferencing handle social communication designers ffl dxf file common representation structure visual objects 
vs multiplexing coordinating vs vs closed vs open separate multiple integrated multiple vs clearboard collage common single 
closed versus open applications autocad commercial product closed source code available enhancement application limited 
application development system ads user interface enhancement provided autocad allows develop user interface supports multiple users 
allows designers create manipulate visual data dynamically 
shown synchronous multi user cad system developed single user cad system 
multiplexing versus coordinating maintain synchronous interaction shared application distributed designers uses coordinators facilitate coordination 
chapter 
multi user architectures collaborative design cad systems considered object oriented graphical systems 
graphic systems cad systems fixed set geometric objects 
objects manipulated various activities functions 
multi user system functions applied object simultaneously 
arises problem concurrency control significant pixel group systems 
coordinator provides support concurrency control maintaining synchronous access shared application 
uses object locking mechanism insure user modify particular object 
advanced methods control problems discussed section 
coordinator considered third agent sits designer shared application 
advantage approach interpersonal conflicts resolved monitoring users input 
users encouraged participate collaborative process allowing simultaneously manipulate graphical objects 
disadvantage approach limited number application dependent functions supported 
configured autocad allow changes object 
configuration allows coordinator monitor participants actions 
multiplexor approach provides generic way distributing user interface shared application 
single versus multiple packages supports team design providing single shared cad module communication 
drawings constructed graphics primitives computational representations cad system lines circles boxes design involves drawing activity type activities may may involve drawings 
design evaluation activity reasoning tool evaluate sufficiency design 
example construction evaluation module provides cost estimate schedule extracted drawings 
extension support set shared applications design ranging shared drawing tools shared design representation presentation tools require complex coordinator 
chapter 
multi user architectures collaborative design separate versus integrated video capability uses separate program establish audio video connections 
video audio support creates virtual space designers communicate hand gestures verbal discussion 
participation communication enables designers better understand explain design solutions 
design session designers engage direct discussion order resolve explain particular problem 
electronic talking video conferencing systems support direct communication negotiation design participants 
approach allows designers share design activities sharing design information 
video supports visual communication negotiation capture evolution design process 
video conferencing allows display dynamic video images participants multiple windows workstation 
video maintain sense personal presence appropriate providing record decisions regarding design objects 
common versus multiple representation allows designers share design schema common representation visual objects 
dxf file format provided autocad basis visual data representation 
designers able create manipulate visual objects aggregation objects primitives provided dxf file 
primitives may sufficient define structure design objects need define semantic meaning visual objects 
implication implementation provide basis moving providing richer representations environments 
current technology offers support synchronous collaboration existing commercial single user cad system implementation problems concerning development group interaction 
include concurrency control functional features cad databases 
functional features embedded graphical objects allows model structure behaviour design elements limited actual commands cad system provides 
additional issues emerged need model pro chapter 
multi user architectures collaborative design cess supports multiple interpretation design semantics 
approach taken applying cscw distributed technology provides shared workspace visual images address need design semantics representation persistent memory 
multi user collaborative design system facilitate sharing manipulation graphic representation design semantic representation 
section presents various requirements distributed synchronous architectures supporting collaborative design 
requirements multi user system synchronous collaborative design studies shown computers significantly increase productivity individual designers complex design projects demand communicative collaborative efforts teams designers 
complexity design raises new requirements developing multi user system synchronous collaborative design 
done researchers fields human computer interface hci cscw man machine machine machine interaction attention man machine man interaction 
context essential features multi user system required supporting design environment designer machine designer may summarised follows support design information sharing 
team designers forms intention working achieve partial design goal objective information space implicitly explicitly created shared 
building design project example design descriptions major objectives goals constraints project specified 
descriptions define space design elements 
level design information sharing called object sharing 
objects inside information space representation objects 
architectural drawing example representation building design project 
early stage design designers focus spaces relationships viewed connected network interacting building objects bubble diagram 
design stage designers tend focus chapter 
multi user architectures collaborative design detailed design enclosure structure 
representations convey information building object represent information different ways 
design involves creating sharing information multiple levels representation referred representation sharing 
designers share views designed objects necessarily representation 
core system high rise building represents vertical circulation architectural system building serves main structural element supporting vertical horizontal loads 
core system different functional representation presentation dimensional model building 
level sharing called presentation sharing views 
multiple levels design information sharing required object sharing representation sharing presentation sharing 
multi user system provide medium design information shared objects representations presentation 
support simultaneous interaction 
multi user system implies simultaneous presence participation users 
kind system classified synchronous system differs slightly asynchronous systems collaboration allowed time simultaneous presence team members 
asynchronous collaborative systems require special collaboration aware applications written 
contrast synchronous systems collaboration aware 
different types interaction considered space time matrix principle dimensions collaborative systems location users time collaboration involved illustrated ellis 
collaborative system supports team place different times called asynchronous interaction non real time interaction physical bulletin board file management system 
collaborative system supports team different places different times called asynchronous distributed interaction electronic mail system electronic bulletin board 
collaborative system supports team time different places synchronous distributed interaction real time interaction real time conferencing system shared drawing program 
classification general classes accurate 
applications support synchronous asynchronous interaction allow collaboration different places 
example electronic mail system chapter 
multi user architectures collaborative design time place face face interaction electronic board meeting rooms different place different time synchronous distributed asynchronous interaction distributed asynchronous bulletin board distributed database shared cad video conferencing file management email collaborative systems time space matrix 
asynchronous different place 
key issues developing collaborative design applications level interaction differs nature shared application 
example shared drawing surface program users simultaneously part surface 
users add erase marks bitmap image 
interface program simple interface multi user object oriented drawing program raises number issues 
system users create delete manipulate objects lines boxes arcs 
control problem occurs users try manipulate object time 
strategies solve problem locking object user manipulate preventing accessing 
strategy implement locking mechanism basic structure object 
drawing applications example handles allow users modify graphical entities 
possible lock handles users select points line move 
strategy graphical objects flexible mechanism needed manipulating complex design objects 
advanced transaction management allows greater concurrency parallelism design process required 
traditional approaches handling concurrency control inappropriate synchronous multi user systems summarise support simultaneous interaction depends complexity shared information ranging sharing simple drawing surface shar detailed discussion concurrency related issues facing groupware development ellis 
chapter 
multi user architectures collaborative design ing entities information space management evolution design objects 
support design communication 
communication collaborative design permits sharing exchange information various members design team 
success team design project depends effectiveness design communication 
designers explicitly share model language communicate 
shared window system example allows single user applications shared 
system provide direct communication participants audio video channels 
additional channels participants tend system overcome deficiencies annotating shared workspace writing messages sketching symbols gesturing mouse 
design information expressed various terms design process 
example early stages design project sketches pictures essential forms communication 
design proceeds explicit representation required drawings models database 
rules expert knowledge applied analysis evaluation stages design process 
design intent rationale important support understanding design decisions particularly making changes 
current activities computer mediation design communication provide opportunity formalise design process 
identification formal communication channels collaborative design possible assume design participants autonomous 
participants collaborative design project human professionals computer programs inclusion informal communication fundamental success collaborative process 
essential multi user system facilitate formal informal communication flow design communication participants various stages design process 
support visualisation 
major advantages computer applications ability view database multiple perspectives 
cad programs regarded database managers graphical information allow users different views designed model 
designers select effective view match ideas minds 
flexibility cad program interactive environment specific views generated relation specific design problem order understand complexity 
cad system essential tool designers construct chapter 
multi user architectures collaborative design visual representation real world 
advantages having multiple views single user environment enormous introduces communication problems multi user environment 
difficulty arises designer tries understand certain design problem view 
necessary provide common discussion view visual representation design shared see see 
addition incorporating semantics visual representation useful feature supports collaboration 
provide shared interfaces 
diverse set user interface ui metaphors support individual 
ui metaphors evolved individual perspective focus individual tasks 
example desktop metaphor window systems revolutionary movement human machine interaction uses simple familiar things folders documents mailbox metaphor sufficient personal workspace 
shared workspaces set new requirements powerful metaphors facilitate group interaction 
pointing device example evolved support direct manipulation object interest 
multi user system new manipulation styles needed shared pointer 
emergence systems significantly shifted need individual ui metaphors shared ui metaphors 
provide mechanisms coordination control 
cooperation essential collaborative design succeed 
emphasise collaboration designers team project develop acceptable computer support coordination control mechanisms considered 
collaborative systems need concurrency control resolve conflicts participants simultaneous operations 
simple solution floor control shared window application permit person time control shared workspace 
facilities pass control participants 
example list users asked floor control maintained system 
solution relax floor control policy letting participants resolve conflicts alternative communication channels audio video 
support running open floor system provide mechanisms detect recover conflicting problems 
coordination essential design support effective rich tailored particular team behaviour 
various requirements address needs designers respect collaborative aspects design process 
list requirements chapter 
multi user architectures collaborative design exhaustive addresses aspects shared workspace including content representation presentation shared information interfaces objects shared 
section presents multi user architecture synchronous collaborative design teams design professionals collaborate focussing requirements shared design workspaces 
mate design multi user architecture team environments designers mate multi user architecture collaborative design existing applications cad modelling programs analysis programs knowledgebased systems shared designer 
nature shareable workspace computer supported collaborative design categories workspace considered 
shared visual representation 
shared underlying representation 
need maintain shared representations comes requirement multi user system users able see provided shared visual representation requirement system maintain representation design solution relevant domain knowledge provided shared underlying representation 
shared workspace design meanings context computer supported collaborative design workspace human designers view interact shared representation design problem computer uses persistent memory interprocess communication 
requirement shared workspace recognition levels distinct need considered separately ultimately represent objects 
architecture developed support multi user synchronous collaborative design shown 
shared visual representation sits designers software coordinators 
shared visual representation comprises user interaction techniques visualisation geometry semantic models 
shared underlying representation sits chapter 
multi user architectures collaborative design coordinator server session shared underlying application coordinator information flow control flow shared visual representation visual interface designer visual interface designer flow data control proposed model coordinators stores information generated designers computer applications 
coordinators software applications accept input designer coordinate events application 
application computer program designers choose basis collaboration cad system rendering program 
session server initiates session starts coordinators 
remainder section concepts shared visual representation shared underlying representation elaborated 

session server 
start application process typically charge setting collaborative design session 

coordinator 
special application process embodies data management control applications shared workspace 

application 
existing application development tools supports representation progress design activities 
chapter 
multi user architectures collaborative design 
shared visual representation 
visual sharing design elements various support design concepts solutions 

shared underlying representation 
generic sets shared objects models processes support symbolic functionality design specific design decisions represent design elements relationships 
remainder section describes components interrelationship represented proposed architecture 
session server session server start application collaborative design session 
charge setting communication requirements controlling users joining leaving session 
session server provides benefits 
number participants may vary may known start 
second provides open architecture term applicability extendibility 
designers general different tools enhance ideas test knowledge expertise 
session server provide link different tools participants current design session 
shows user interface collaborative session server 
illustration collaborative server 
chapter 
multi user architectures collaborative design coordinator coordinator special application process encapsulates session management communication functions applications shared workspace 
single coordinator represents application process 
application start session sends request message session server asking join session 
establishing communication session server coordinator responsible managing design data application process 
design objects retrieved posted shared workspace coordinator 
coordination multiple simultaneous inputs shared application supported coordinator 
types coordination techniques highlighted synchronous coordination synchronous coordination implies sequences activities preserved 
context user interface management systems sender request waits receiver respond processing resume 
deleting file example file manager asks confirmation user completing request 
asynchronous coordination asynchronous coordination allows applications process activity waiting 
supports multiple concurrent activities 
user may issue multiple commands simultaneously 
combinatory coordination combinatory coordination allows synchronous asynchronous coordination 
multi user systems require types supported 
object oriented graphic system requires certain fixed sequence actions completed shared surface drawing system requires control multiple inputs 
type coordination depends shared application 
shared visual representation visual representation forms critical part synchronous collaborative design environment 
part real time interaction designers design occurs 
design general represented sketches drawings 
visual symbols designers chapter 
multi user architectures collaborative design usually saved drawing surface 
addition drawings sketches computer applications design led additional computerbased visual media including models video photo realism animation designers computers applications visualise ideas sophisticated media capture design objects design changes multimedia interaction visual touch 
shared visual interface multiple windows allows designers partition workspaces public vs private graphics vs text data vs knowledge base illustrated 
component provides various facilities needed interpret visualise design elements shared underlying representation 
workspace database design browsing design private browsing public workspace knowledge base direct user communication components shared visual interface public design workspace proposed architecture designed support graphical data designers 
supports concurrent design allowing participants draw simultaneously public shared workspace 
designers allowed edit process graphical information shared workspace dynamically 
public workspace provides various graphic symbolic objects collaborative design session 
similarly private design workspace allows designers new design ideas creative design incomplete design modify existing design ideas alternative design 
mechanisms adding new information private workspace public workspace vice versa required 
need shared graphical workspace database knowledge chapter 
multi user architectures collaborative design base browsers required 
browsers convenient medium searching finding design information underlying representation 
provide powerful way understanding visualising multimedia elements attached design objects 
examples multimedia elements include text unstructured graphics images voice 
synchronous collaborative design session requires direct communication designers 
direct user communication component provides medium coordination negotiation cooperative development design ideas 
include electronic talking systems video voice 
visual level shared workspace addresses presentation shared data 
shared visual information shared visual representation workspace provides various facilities needed interpret visualise design elements shared underlying representation providing means communication designers 
consider shared visual representation need graphics access knowledge databases audio video communication inclusion video animation 
ffl graphics 
shared graphic workspace mate designed support sharing graphical models designers 
mate supports concurrent design allowing participants draw simultaneously common shared workspace 
demonstrating mate cad system basis shared drawing surface 
designers allowed edit process graphical information shared workspace dynamically 
incorporating existing cad systems mate architecture designers able edit graphical models team design environment developed individually 
ffl knowledge 
addition shared graphical workspace shared database knowledge base browsers support collaborative design 
purpose database knowledge base representations design semantics explicit 
mate browsers convenient medium searching finding design information underlying representation 
direct links graphical objects database objects chapter 
multi user architectures collaborative design provides means finding information selecting graphical object database object identified 
ffl audio video 
synchronous collaborative design session requires direct communication designers 
direct user communication component provides medium coordination negotiation cooperative development design ideas 
include electronic talking systems video voice 
video conferencing broadened nature computer mediated human inter organisation communication patterns 
mate video conferencing component integral system run parallel mate session 
ffl video animation 
video provide design information 
example video building discussed site proposed building distributed multiple workstations collaborative session 
mate broadcasting video done parallel collaborative design system 
addition real time video animated sequence explore various alternatives design decisions 
animation powerful design tool making decisions explaining reasoning 
shared underlying representation shared visual representation plays important role visualising design elements collaborative design system underlying representation provides support understanding design objects persistent representation available collaborative sessions 
considering underlying representation separately visual representation highlights need representation records shared understanding design models 
design objects include formalised information 
system manipulate reason design objects relationships attributes functions constraints referred design models 
examples design models cad models cad system object hierarchy stored design knowledgebase 
information stored design objects may help designers recognise understand design artifact 
examples include text images video sound underlying representation allow chapter 
multi user architectures collaborative design digital design data stored database 
specific computer applications retrieve interpret underlying representation 
example wall represented cad system double lines data required system geometric information 
design process structural engineer wall structural system support loads link wall objects beam slab 
representation wall object database allows semantics explicit 
underlying representation medium organising shareable memory system second tool supports collaborative design environment 
shared underlying representation shared workspace considered content shared data 
order extend communication visual representation design content includes explicit representation design semantics 
design semantics represent abstractions design information describe purpose performance design objects go geometry include considerations function behaviour versions general design knowledge consideration shared underlying representation organisation shared data 
design objects organised classes properties define default semantics objects belong class 
furthermore hierarchy objects formed allows semantics graphics associated groups elements 
relationship objects defines nature aggregation 
integration specialised generalised hierarchies shared objects illustrated schematically 
generalised objects provide basis defining semantics associated specific object design session class link 
hierarchical structure underlying representation allows different abstractions represented explicitly part link 
summary chapter includes broad view enabling technologies necessary develop groupware applications 
advances computer networking multi user applications developed provide synchronous collaboration participants 
shared window applications designed allow sharing digital information text graphics 
teleconferencing systems chapter 
multi user architectures collaborative design generalized specialized st george hotel buildings framed systems structures core service core wall walls class link part link generalised specialised hierarchy buildings objects media space enable group people interact virtual space adding support video audio channels 
scope synchronous applications limited support exchange digital images supporting explicit design models 
framework classifying multi user applications design section 
multi user cad system developed explore issue sharing explicit design descriptions existing cad application 
technology available support synchronous collaboration shared representation address need design semantics representation persistent memory 
mate design multi user architecture synchronous collaborative design described notion shared workspaces 
shareable workspace design meanings context computer supported collaborative design workspace human designers view interact shared representation design problem computer uses persistent memory interprocess communication 
requirement shared workspace recognition levels distinct need considered separately ultimately represent objects 
shared workspace human designers interact visual 
design information represented form designers currently communication drawings sketches notes diagrams equations graphs chapter 
multi user architectures collaborative design visual level shared workspace addresses presentation shared data underlying level addresses representation design objects includes representation geometry form cad system produce visual image screen representation design semantics support multiple views multiple aggregations objects representation administrative information 
compared multi user applications mate architecture designed provide comprehensive open shared workspace team designers 
features mate provide summarised ffl provide ways sharing visual representation design activities 
advantage having shared views personalised views design maintained 
ffl provide ways extending functionality existing applications enable team awareness 
ffl facilitate participating team members enabling multiple applications shared workspace 
ffl enable understanding design product integrating presentation representation design 
ffl allow support multiple representation design semantics 
chapter thesis different views shared workspaces collaborative design examine representation design basis incorporating multiple views design semantics mate design architecture 
chapter semantics graphics shared design workspaces design complex artifacts involves individuals designers clients developers manufactures 
design artifacts emerges interaction designer artifact interacting designers environment 
design viewed activity teams designers final solution 
activity designing interaction designers environment refer collaborative design 
computer support design design research developments computer hardware software 
computational approach design research distinct branches trying emulate design activity trying support design activity 
approach design viewed transformation initial design requirements design description set transformation operators 
second approach computer programs developed assist designers analysis documentation 
approaches may suited individual design activity fail directly support collaborative nature team design activity 
research computer integrated design systems need permit design application programs share data 
development integrated systems aims incorporate various types design models data modelling process modelling 
data modelling describes artifact chapter 
semantics graphics shared design workspaces designed terms data structure possibly relationships constraints objects 
process modelling describes activities design process 
models developed specifically represent building engineering design data 
models aim identify capture complexity design information exchanged 
complexity design objects requires different conceptual models representation different methods interaction 
form interaction manipulation graphical models 
perception alteration graphical models necessary designer realise changes act accordingly 
going restricted environment single user application perception important 
multi user applications developed notion shared facilities distributed different users place geographically displaced 
research area computer science referred computer supported cooperative cscw groupware provides basis development multi user applications support group interaction 
chapter focusses semantics deep knowledge shared understanding collaborative design 
designers collaborate need share coordinate annotate various design media 
example design buildings designers formal informal drawings verbal text specifications computer physical models photographs video document communicate ideas 
order facilitate sharing drawings media need share understanding design 
development computer environments support collaborative activity computational design research current developments advanced technology cscw 
thesis approaches development model development shared workspaces 
considering nature shared workspace computer representation design information includes visual semantic representations overview representations section 
section shows nature shared workspace different views information sharing communication media process management exploration space 
chapter 
semantics graphics shared design workspaces design semantics design knowledge designers various forms representing exchanging design information 
information generally design design intentions 
traditionally designers describe design terms graphical textual symbols 
symbols tend express aspects design information 
aspect designers concerned knowledge 
design knowledge designers driving force realising design solution 
explicit representation design knowledge essential building design systems facilitate collaboration designers 
different kinds knowledge 
knowledge objects concepts design functional logical relationships 
kind knowledge referred descriptive knowledge 
knowledge actions events strategies describe perform achieving particular design project constraints applied known control knowledge procedural knowledge 
thesis focusses descriptive type knowledge represented design semantics 
deals issues representation designs design knowledge describe meaning structure design semantics shared collaborative environment 
research semantics modelling emphasis semantic modelling research capture meaning description physical geometric features design objects 
representation meaning lead explicit representation function behaviour performance constraints design artifact 
example design model uses artificial intelligence ai paradigms design prototype schema gero design objects organised classes structure function behaviour properties 
prototypes similar object classes object oriented terminology 
objects organised classes properties define structure behaviour objects belong class 
similarly prototypes groups kinds attributes function structure behaviour 
prototypes useful representation physical conceptual design ele chapter 
semantics graphics shared design workspaces ments 
prototypes permits manipulation design information data knowledge higher level abstraction 
motivation representing semantics design varied exchange design information product modelling data integration representation multiple meanings 
research product modelling 
step aimed standard extended description geometrically defined design objects include topology features performance major motivation product modelling computer integration 
integration deals transfer exchange design data heterogeneous computer applications 
counterpart product modelling ai approach design integration development shared design representations 
majority activity area design research community lead various approaches sharing structuring shared semantic design models 
developments design research lead standardisation computational models object oriented representations complex design artifacts 
examples systems developed prototypes integrated design environments howard 
current research shared design models focussed providing semantic models represent different functional views evolving design 
designers may different conceptual views design object 
building design building elements viewed differently participant design process example architect may view wall partitioning space space focus structural engineer may view wall load bearing object wall focus 
representation design semantics multiple interpretations shared objects clayton hwang representation organisation multiple functional design spaces wong van examples research focus 
shared workspaces collaborative design environment provides shared workspace various people involved design task collaborate 
shared workspace comprises medium communication interaction participants collaborative design occur 
computer supported chapter 
semantics graphics shared design workspaces environment collaborative design shared workspace serve different purposes lead different approaches making design information explicit 
order clarify role shared workspace consider nature shared workspace information sharing communication media process management exploration space 
workspace information sharing fundamental role shared workspace share information 
collaborative design may conducted distributed indirect way 
building design example architects responsible architectural design engineers responsible structural design builders responsible developing plan construction process 
order collaborate professionals share information geometry function building 
addition different types computer applications designer 
collaborative design system support representation access shared design information required participants respective computer applications 
approach sharing information store information distributed database accessible various participants design project 
shows view shared workspace shared database different application programs store retrieve information 
shared cad fem dm illustration shared database distributed design applications 
advantage centrally storing shared information allows participants access information time 
shared information facilities important feature collaborative 
maher rutherford explore enabling technologies implications shared databases distributed design sessions 
chapter 
semantics graphics shared design workspaces workspace communication media collaborative design involves significant amount communication design participants 
communication leads sharing exchange design information formally informally design process 
communication collaborative design serves number purposes exists different modes 
mode communication exchange sharing design solution state generated designer activity 
order ensure consistency designers need refer solution information order update solution states 
shows illustration video conferencing collaborative design session graphical model design displayed video images participants design 
focus view shared workspace visual interaction designers graphical representation design solution 
workspace process management process planning managing controlling design activities identified key requirement development computer integrated design applications 
number control policies coordinating participants design process developed including modelling tools representing patterns group communication 
shared workspace environment organisational structure design domain affects administration control strategy execution design activities 
shared workspace contains information required participants determine current state development process 
shared workspace manage design process determines content organisation information 
shown design data organised generators users information information generated architect stored near top information hierarchy available structural engineer engineer 
focus view shared workspace coordination management people information blackboard architecture nii 
blackboard architecture provides computational environment sharing problem solving agents 
agents computer programs people 
blackboard system provides syntax de chapter 
semantics graphics shared design workspaces combining graphical models video images sound shared workspace communication 
structured representation structured approach interaction negotiation 
effect nature shared workspace consideration process model information needed support various processes participants collaborative design environment 
workspace exploration space contrast considerations shared workspace seen team interaction explores potentially expand explicitly represented design space 
process exploring various versions design solution occur interaction feedback participants 
gero defines exploration design process defining producing state space search 
viewing design search process design space goals predefined view design considers space chapter 
semantics graphics shared design workspaces architect ks structural engineer ks engineer ks project manager global design data shared ws process management role shared design workspaces 
goals evolving design proceeds 
illustrates state space exploration gero 
coordinate system shows state space viewed participant 
participant contributes design space introducing changes time 
representation shared workspace allow multiple views design space allow changes occur design process proceeds 
participant participant participant state space exploration process participant graphical model state space exploration shared design workspace 
chapter 
semantics graphics shared design workspaces linking semantics graphics designers may different views design object considering relevant abstraction object 
abstraction mechanism normally reduce complexity supporting formation concepts focus certain properties objects perceived 
examples abstraction mechanisms generalisation specialisation composition decomposition views 
characteristics abstractions design object define semantics object 
accordingly different representations design semantics support different views design 
example consider element building design wall various perspectives wall aggregations meaningful different designers views 
building wall graphical semantic representation 
graphical representation drawings locate indicate geometry wall 
semantic representation includes function wall say partition space support floor performance information compressive stress imposed loads wall 
semantics wall may depend abstraction interest designer equally important characteristic design information way elements semantically aggregated 
construction contractor may interested aggregating walls level semantically identifies task 
structural engineer may interested aggregating walls vertical line top building foundation forms structural system carrying loads support 
architect may interested aggregating walls surround room semantically meaningful design layout floor plan 
difficulty representing semantics referring element assume different organisation possibly content semantic representation 
fact wall represented different semantics physical object introduces additional ambiguity 
representation visual design information design concerned representation manipulation visual information translated physical models 
drawings instance constructed external representation relevant aspects visual domain 
simplified preserve chapter 
semantics graphics shared design workspaces visual information world necessary problem solving 
drawings meant truthful visual representations real world represent information problem form visually extracted 
explicit representation visual information characterised syntax design objects 
syntax concerned configuration design objects points lines patches symbols groups elements various properties objects 
cad systems allow association syntactic properties material graphical entities 
properties considered researchers part syntactical information coyne 
thesis geometric shape information part syntactical information 
syntactic properties interpretation graphical objects represent design semantics 
order extend communication visual representation design content include explicit representation design semantics 
design semantics represents abstractions design information describe purpose performance design systems objects go geometry include considerations function behaviour versions general design knowledge comparison syntax design semantics concerned interpretations design syntax specific context certain level 
example syntactic description rectangle inside room floor plan may derive desk defined orthogonal lines 
lines forms syntax desk corresponds semantics descriptions general desk derived descriptions general performance 
thesis refers interpretation syntactic information design semantics 
designers may different conceptual views design object 
building design project building elements may visual representation syntax viewed differently participant design process 
semantic meaning design objects deal representation graphical models composition visual objects model dimensional cad model 
chapter 
semantics graphics shared design workspaces alternative representations geometry cad main cad systems build visual models represent geometry design objects constructed manufactured 
graphic representations geometric modelling cad systems provide tools designers transformation process conceptual models physical models 
general representation physical objects dimensional space 
current cad environments provide different ways graphical representation physical objects constructed wire frame surface solid models 
simplest representation dimensional objects wire frame model 
wire frame model skeletal description object 
wire frame model surfaces 
object displayed set edges join vertices 
edges formed basic sets graphic elements lines arcs circles 
wire frame models provides way describe visualise physical objects 
wire frame models extensively cad applications contain information capture shape object 
surface model extends wire frame model include information form object modelled 
surface mathematical element separating interior exterior object 
object consists combination flat curved adjoining surfaces 
surface model provides realistic visualisation object removing faces obscured surfaces front model 
shows symbolic representations arch wire frame surface models 
wire frame model surface model arch important attribute physical objects solidity 
wire frame surface model encloses volume 
contrast solid model chapter 
semantics graphics shared design workspaces supports distinction interior represented solid shape exterior property enclosing volume 
solid finite volume dimensional space intersection volumes half space solid models may represented number different ways 
common representations models constructive solid geometry csg boundary representation rep 
union difference cylinder box box constructive solid geometry csg representation arch csg solid described binary tree nodes boolean operations union difference interaction performed left right subtrees 
hierarchy tree order boolean operations performed create composite model 
composite model top tree called root 
leaves primitives solid basic building blocks creating complex solid models 
rep model solid represented set faces form boundary object 
face bounded loop edges edge ended vertices 
topological structure describes underlying geometry solid object 
underlying geometry points curves surfaces associated vertices edges faces respectively 
general cad applications combination modelling systems point space falls surface side 
points surface side form half space points side form half space 
chapter 
semantics graphics shared design workspaces faces edges vertices boundary representation rep arch capable representing wide variety forms 
intent applications describe understand structure design objects 
definition design consists shape properties needed better visualise design objects 
clear system record knowledge specific shape proposed 
implications linking semantics cad objects stated previous section semantic meaning visual design objects concerned level representation graphical models 
linking design semantics visual objects limited geometrical structure graphic objects inside cad database 
example wall represented thick line spans point point cad systems may provide primitive entity line graphically represent wall 
linking semantic description wall partition spaces considered object level 
alternatively designers may different graphical models represent design objects 
example wall constructed surface model represent faces wall solid model enable create opening wall 
case single primitive entity may exist represent graphic object 
structure graphic design object consists aggregation objects set primitive entities parallel lines represent wall result operation composite objects boolean operation solid model 
level design semantics chapter 
semantics graphics shared design workspaces linked aggregation geometric objects may may defined cad database 
linking semantic description wall considered object aggregation level 
cad systems able construct composite objects primitive graphic entities unable represent various relationship composite objects aggregation objects required representation design semantics 
sections describe various abstraction mechanisms relationships represent aggregation shared objects respectively 
aggregations shared objects understanding design activity help support collaborative process 
view design activities process identifying relationships entities relationships translate implementation model 
combination aspects relationships leads complexity 
complexity reduced various abstraction mechanisms include ffl generalisation specialisation generalisation specialisation mechanism relates concept general general concepts 
generalisation means organise conceptual classes objects instances objects 
specialisation generalisation relationships classes define partial order set classes 
object oriented design systems generalisation implementation mechanism sharing information specialised classes 
wall brick wall timber wall concrete wall hierarchy wall classes generalisation specialisation mechanism utilised describing design elements building 
shows specialised wall chapter 
semantics graphics shared design workspaces brick wall inherit properties general class wall generic class wall wall 
ffl aggregation abstraction mechanisms inheritance powerful represent relationships classes design objects minute detail needs represented distinct class relationship classes needs represented 
aggregation allows details complex relationships suppressed 
aggregation collecting concepts relating 
example construction contractor interested aggregating brick walls level office building quantity bricks needed calculated 
information individual wall needed relationships spatial relationships irrelevant 
ffl composition decomposition composition decomposition concerned combination division concepts relationships different concepts 
composition aggregating relating concepts 
oneto relation object composed set objects 
decomposition division single concept parts relationships 
example building decomposed building systems building systems decomposed building subsystems forth 
decomposition extended downwards considerable building element reached door window beam column composition decomposition configuration maintained hierarchy network 
relationships represent aggregation section elaborates relationships abstractions aggregation object oriented design paradigm 
relationships ffl class class relationships kind specialisation relationships conceptual classes 
supported inheritance powerful way representing relationships classes 
house kind building houses general characteristics buildings provide economic chapter 
semantics graphics shared design workspaces environment space accommodation reverse necessarily true 
buildings houses said set buildings contains set houses 
ffl class object relationships instance instantiation objects generalised classes 
example international house instanceof house 
international house independent unique instance house properties defined 
international house address city road sydney consists stories ffl class object object object relationships indirectly uses relationship entity property function conceptual class uses instance class perform particular function 
class room uses unit provide thermal comfort 
unit part room room perform cooling heating ventilation function 
ffl object class relationships creates relationship uses object class objects 
relationship instance class exist request performing particular function 
room creates instance unit provide thermal comfort 
ffl object object object class relationships connotes containment 
house contains kitchen bath room bed room 
decompose room manageable parts 
part relationship reverse associate particular element composition 
ffl objects class relationships aggregation objects design process needs maintained identified stages 
creates relationship objects consideration parent classes 
illustrates various relationships represent aggregation 
class refers category identical concepts 
object instance particular conceptual class unique characteristics 
chapter 
semantics graphics shared design workspaces class class object object kind uses part uses instance object class relationships represent aggregation 
shared objects model section presents shared object model captures explicit representation visual semantic descriptions shared design objects 
shared objects allow different concepts represent various designers perspectives coexist different stages design process 
functional descriptions functional relationships accepted default dynamically developed 
context process modelling system appropriate level detail appropriate level abstraction simplified 
design activities viewed process developing design system identifying relationships entities system 
collaborative activity access resulting geometry individual design activity semantics design 
incorporation multiple views design semantics graphics object results better shared understanding design improved communication collaboration 
shared object functional descriptions object knowledge representation semantic relations physical structural description spatial logical configurations consistency administrative ownership attributes multiuser access persistency 
organisational semantics graphics representation shared objects illustrated underlying representation shared objects chapter 
semantics graphics shared design workspaces consists main parts ffl administrative data describes administrative information specific design object 
record administrative ownership information 
ffl semantic data describes meaning design object 
provides functional intentional information semantic relationships 
ffl graphics data includes physical structural descriptions design objects needed reason spatial logical configuration 
includes link shared object visual representation objects stored cad graphical modelling system 
important feature aspects separation shared object ability organise graphic semantic objects way support multiple views 
designer may bring perspective design 
perspectives linked shared object 
shared objects particular designer view 
aim shared object model model system appropriate level detail appropriate levels abstractions particular designer view 
shared object provides support multiple views design semantics ffl shared graphic object 
design semantics associated common graphic object represent information problem form extracted visually 
relation multiple design semantics linked graphic object 
ffl shared aggregated objects 
aggregation graphics objects collect objects certain way hierarchical composition relate concepts shared aggregated objects 
relation design semantics related group objects 
object browser interface shared object model mate organisational semantic information stored object browser 
class definitions provide default semantics object chapter 
semantics graphics shared design workspaces instance class 
designer accept modify default semantics collaborative session specific object created 
graphic data stored dxf file compatible autocad application 
links graphic data semantic data maintained object browser 
allow synchronous collaboration link shared objects cad application activated deactivated 
designers may simultaneously multiple applications design session 
architect may cad application add new graphic objects engineer may object browser create new objects classes relationships represent abstraction model 
architect may different abstraction model represent concepts loaded object browser 
shared browser interface provides interactive methods designer develop abstraction model shown 
methods include defining new shared classes creating modifying instances represent shared objects defining relationships represent particular concept linking shared objects graphic entities 
interface data presentation includes presentation administrative data semantic data graphics data presentation inheritance hierarchy classes subclasses presentation various concepts abstraction models current shared object belongs 
implementation object browser implemented incr tcl tcl tk toolkit ousterhout language stroustrup 
implementation shared object model comprises main components shared object representation user interface cad link 
shared object representation primitive classes application domain shared object model constructed incr tcl 
class incr tcl acts template creation shared design objects 
generic class defined allow access classes instances shared object model 
definition generic incr tcl provides object oriented extensions tcl language 
chapter 
semantics graphics shared design workspaces object browser interface 
class 
class definitions expressed key word class followed class name list data procedures methods operate data 
generic class contains mainly organisational data shared object model 
constructor destructor special methods invoked automatically object created destroyed 
generic class constructor initialises public variables store ownership information 
set command allows store values variables syntax set adm set env user special notation differentiate main parts shared object model adm administrative data sem semantic data gra graphics data 
designers create abstraction models generic class basis derived classes 
types classes aggregation classes chapter 
semantics graphics shared design workspaces generic constructor config global env set adm set env user set adm exec date set set collect objects collections destructor collect set ind lsearch exact objects set objects objects ind ind set ind lsearch exact collections set collections collections ind ind method config config public adm public adm public adm public adm public adm protected items method return items method item lsearch exact items item items item method item set ind lsearch exact items item set items items ind ind public gra public collect common collections common objects definition generic class 
chapter 
semantics graphics shared design workspaces component classes 
common variables collections objects lists instances created design session 
variable collect indicate derived class aggregation class component class 
items variable list objects particular aggregation instance 
methods retrieve list objects add new object remove existing object aggregation class respectively 
classes serve generic schema initiate shared objects 
tcl interpreted language similar lisp designers generate execute new schema session recompiling restarting object browser 
special config method provided allow users dynamically modify values public variables 
user interface user interface provides access shared object representation various tk widgets 
tk provides set commands creating user interface elements widgets allows developers build new kinds widgets 
describes functionality widgets built object browser interface shown ffl classes widget 
widget displays list classes loaded current design session 
designers create instance particular class choosing class modifying default values attached class 
ffl objects widget 
list includes objects created loaded current session 
current object highlighted 
ffl parents widget 
widget enables designer trace parent superclass current object hierarchy structure 
ffl part collections widget 
objects belong type aggregation collection 
widget lists aggregation groups current object belongs 
widget enables designers browse multiple views design semantics shared object 
important features tcl tk application accessible modifiable runtime 
chapter 
semantics graphics shared design workspaces ffl current widget 
widget displays name current object 
object name unique identity attached object 
widget rename current object 
ffl isa widget 
class current shared object displayed widget 
widget create new instance specified class 
ffl administration variables widget 
widget enables designer identify ownership current shared object group transaction creation modification date access control ffl semantic variables widget 
semantic descriptions shared object stored form attribute value pairs 
values form atomic unit range values method function activated needed 
ffl graphical variables widget 
graphical variables include information graphic object stored cad system 
spatial logical configuration graphic objects stored form behavioural functions 
ffl show link widget 
button enables designers activate deactivate link object browser application cad system 
designers applications search specific design object 
example structural engineer object browser select description floor system level 
graphical objects belong floor system highlighted cad system 
reverse true 
architect select graphical objects beam cad system semantic description beam displayed object browser interface 
ffl link object widget 
designers button link shared object graphic objects inside cad system 
ffl add remove widget 
menu widget add remove object existing aggregation 
name aggregation groups explicitly displayed 
menu enable widget provides way selection choices window interface enabling disabling group membership 
chapter 
semantics graphics shared design workspaces designers select desired group 
cad link object browser cad system network capabilities window environment unix operating system communicate 
separate programs processes object browser process autocad process 
object browser uses file input output commands provided tcl language communicate autocad process unix socket 
autocad application written 
process consists sets functions 
set provides commands exchange data autocad object browser databases 
second set functions aggregate graphic entities inside autocad 
aggregation done attaching special labels graphic entities extended entity data provided autocad development system 
object browser example section presents example illustrates object browser autocad system collaborative design session mate architecture 
problem consists rehabilitation historic building research centre 
example demonstrates explicit representation multiple views design semantics graphic objects facilitate shared understanding 
participants architect interested affect changes layout spaces structural engineer interested maintaining stability building 
session initiated architect calls participant structural engineer 
architect starts autocad opens graphic model building discuss layout offices 
graphical description building displayed 
structural engineer initiates object browser display semantic descriptions graphic objects 
engineer loads relevant file describes shared design objects classes 
illustrates object browser looks collaborative design session mate 
desktop participant consists components form visual interface note shared applications started participants design session session server mate chapter 
semantics graphics shared design workspaces graphical representation building 
mate 
session server provided enable link different tools participants current design session 
autocad window display edit dimensional model building 
semantics graphic objects relationships accessed changed dedicated object browser window 
video window display broadcast clip project site 
defining building model stated shared design objects consist main parts administrative data semantic data graphics data 
hierarchical structure abstraction models derived generic class 
shows conceptual model building describes semantic descriptions generic object building system inside shared object model 
generic class get access different hierarchies building model 
store common information ownership access control object type 
administrative data defined chapter 
semantics graphics shared design workspaces typical desktop screen mate 
generic class 
derived top level classes generated generic class 
includes basic building components describes description different designers views design semantics wall door beam 
includes classes describe aggregation various components building meaningful designers 
semantic objects initiated classes 
object belongs associated single graphic object cad system 
graphic objects cad system inherit semantic descriptions parent class upper classes hierarchical structure 
furthermore object belongs aggregation semantic descriptions aggregation inherited 
top level classes structural engineer architect models derived top level classes building 
structural chapter 
semantics graphics shared design workspaces administrative descriptions semantic description graphical description class generic exist class class 
generic class provide polymorphism class offices 
type residential building class type component arch structural material structural consultant struc 
class zone adjacency purpose provide sleeping cooking storage service abstraction model building 
engineer model class generated class 
class classified subsystems facade describe various structural system building 
similarly major subclasses generated class beam column slab wall 
show class aggregation hierarchy components hierarchy structural engineer shared object model respectively 
inheritance classes inherit characteristics upper level classes 
special statement inherit code causes class inherit public protected common variables methods procedures class 
inherit generic constructor config set collect method config config public purpose sem provide space accomodation chapter 
semantics graphics shared design workspaces administrative descriptions semantic description graphical description class class facade class functionality type grid type structural function type system type class depth span class structural material structural consultant material length height material fire rating floor load system type class aggregation hierarchy structural engineer shared object model 
public sem residential public gra public gra public gra inherit constructor config set collect set purpose sem resist primary gravity lateral loads method config config public sem public sem public sem public sem public sem architect may different abstraction model represents concepts loaded object browser 
architect chapter 
semantics graphics shared design workspaces semantic description administrative descriptions graphical description class class class class beam provide support slab deflection carry vertical loads transfer loads foundations slab column provide support gravity provide support floor system carry vertical load class 
type component arch struc 
swall class components hierarchy structural engineer shared object model 
model major subclasses zone wall window door 
classes form plan layout 
objects different aggregations components defined zone subclass 
shows components hierarchy architect shared object model 
defining objects architect views floor plan consisting spaces bounded walls form plan layout 
instances aggregation class zone initiated defined 
similarly instances component classes define boundary spaces connected entities defined 
component classes wall window door 
link object button object browser link shared semantic object graphic entity inside cad system established 
wall instance may direct link graphic entity zone instance formed aggregation wall objects surround 
zone objects grouped instance class zone allows designer describes semantic meaning aggregation 
example architect may aggregate offices office office floor plan define private place exhibition seminar rooms define public function zone kitchen wc define service zone 
chapter 
semantics graphics shared design workspaces graphical description semantic description type component arch struc 
administrative descriptions 
class class class class wall separate space finish length width window provide view control control daylight control energy consumption shape height door finish control access location width class components hierarchy architect shared object model 
show semantic objects various spaces components generated architect 
similarly structural engineer defines instances aggregation classes component classes illustrated 
wall wall wall door door door wind wind wind instance class service door window wall office office kitchen wc corridor exhibit seminar public function private instances aggregation components classes architect 
chapter 
semantics graphics shared design workspaces wall office office office office exhibition wc kitchen office wall wall seminar wall wall wall door window window architect semantic objects cad model 
linking semantic graphic objects section shows designers link semantic objects graphic objects object browser 
semantic shared objects defined designers link object button object browser link semantic objects graphic objects cad system 
link wall graphical representation wall autocad architect selects wall list objects 
message displayed notification window inside object browser asking architect cad system select required graphic entities 
shows link accomplished 
similar scenario establish links semantic objects corresponding graphic entities 
architect creates office aggregation class zone 
office aggregation object graphic object attached 
architect uses object browser interface add elements office object 
shows objects form aggregation object office 
architect selects desired objects listed objects widget uses add remove widget add objects office object 
objects part aggregation object office wall wall wall wall door window window 
enable designers browse multiple views design semantic part collection widget lists chapter 
semantics graphics shared design workspaces instance class facade slab col col col wall wall wall column slab floor facade facade swall instances aggregation components classes structural engineer 
aggregation groups selected object belongs 
similarly structural engineer establishes link semantic objects swall swall graphic entities autocad show 
floor instance aggregation class 
floor composed swall swall objects instances components class wall 
example objects wall swall shown different semantic objects described architect structural engineer models 
objects linked graphic object inside cad system belong different aggregation objects office floor 
activating show link button object browser scenarios carried ffl graphic entity wall autocad selected semantic objects wall swall highlighted objects list widget object list current 
part collection list aggregation objects selected object belongs office floor 
chapter 
semantics graphics shared design workspaces swall swall swall swall swall swall swall swall structural engineer semantic objects cad model 
ffl wall swall selected object browser graphic entities inside autocad highlighted 
ffl part collection list architect structural select office floor autocad selects entities included aggregation objects see 
wall establishing link semantic object wall graphic entity autocad 
chapter 
semantics graphics shared design workspaces office wall wall wall window door wall window aggregation object office defined architect model 
semantic shared objects defined linked visual representation design objects designers able share understanding design abstraction models 
explicit representation semantic visual models ability examine views models enable support collaborative design process 
main contribution chapter development implementation shared object model captures explicit representation visual semantic descriptions shared design objects inside shared workspaces 
various uses workspaces collaborative design environment outlined 
description representation design semantics visual information 
convenient group objects design domain independently hierarchical relationships exist 
purpose mechanism attach relations object structure provided objects relations considered belong group 
shared browser interface allows designers dynamically include exclude objects particular group aggregation 
chapter 
semantics graphics shared design workspaces swall swall swall swall swall swall swall swall floor aggregation object floor defined structural engineer model 
addition shared browser interface allows development classes relationships object oriented design methodology 
object browser supports various features enable designers generate multiple views design semantics link views graphic representation shared objects 
features include ffl creation abstractions 
nature inheritance structure provided object browser designer develop relationships classes subclasses focusing semantic behaviours application abstractions classes represent 
generalisation specialisation mechanism applied kind relationships 
ffl creation new schemas 
designers may create new schema generating new classes represent conceptual model 
new schemas related existing schemas inheritance mechanism developed scratch 
object browser enables designers utilise composition decomposition relationships creates uses 
ffl creation aggregations 
aggregation refers group objects chapter 
semantics graphics shared design workspaces meaningful aggregation generator 
stated relationships objects suppressed 
aggregation allows individual objects belong multiple groups object inherit semantic descriptions group 
object browser allows designers generate groups characteristics semantically meaningful designer 
designers may examine multiple characteristics design semantics particular object 
ffl creation persistent objects 
conventional computer application data transient 
lifetime object time creation deletion running program execution 
collaborative environment shared objects need exist time space 
object browser enables designers create manipulate set shared objects session store persistent repository 
objects having properties called persistent objects 
persistent objects particularly important design database applications computations take place world shared persistent objects 
ffl provide concurrency 
object browser shared object behaves independently basis messages receives 
objects perform individual tasks concurrently 
control embedded structure objects active attributes active values invoke special functions 
functions attached attributes known daemons traces 
ffl provide flexibility 
shared object imply dimensional graphic representation objects shared participants 
objects modelled particular designer may relevant designers 
object browser allows designers link design semantics graphic objects basic entity level entity aggregation level 
designers choose appropriate tools applications develop graphical representation shared object simple dimensional program advanced solid modelling program 
chapter thesis presents architecture computer support collaborative design allows shared understanding developed maintained participants team design 
chapter summarises major issues research followed major contributions opportunities research developments 
summary issues issues addressed development artificial intelligence representations design support representation design semantics considered 
collaborative design environment issue ambiguity representation design semantics apparent 
designers share representations perceive different abstractions different semantic models 
order address problem concept shared workspace needs defined computational support collaborative design needs clarified 
thesis presents architecture computer supported collaborative design distinguishes shared visual representation shared underlying representation 
distinction provides focus development user interaction multi user design environment shared visual representation focus development shared representation design models data shared underlying representation 
chapter 
computer programs design provide visual interface 
computer supported cooperative groupware concerned development conceptual models facilitate group interaction exploration enabling technologies 
scope groupware limited support exchange digital images supporting explicit design models 
designers need exchange design models represented various forms information drawings specification tables application technology design may lead capture explicit design rationale available process evolution design models 
thesis explores different technological approaches develop multi user applications design 
framework classifying applications issues raised develop comprehensive collaborative design system proposed 
proposed framework prototype multi user cad system developed 
allows designers simultaneously modify share design schema common representation visual design objects 
implemented autocad basic cad application 
technology available support synchronous collaboration shared representation address need design semantics representation persistent memory 
mate design multi user architecture team environments designers developed notion shared workspaces 
mate comprehensive multi user architecture collaborative design existing applications cad modelling programs analysis programs knowledge systems shared designer shared workspaces 
shareable workspace design meanings context computer supported collaborative design workspace human designers view interact shared representation design problem computer uses persistent memory interprocess communication 
requirement shared workspace recognition levels distinct need considered separately ultimately represent objects 
development multi user design environments allow designer access broad range applications similar range available single user design environment 
special considerations multi user design environment include need public shared space need private space 
ability move public private spaces needs chapter 
ted presents difficult problem conflict resolution model integration 
multi user design environments share concerns cscw researchers including need floor control allow participants establish protocol interaction 
developments considered context systems feedback intended user community 
protocol analysis developments proceed open research problem 
development underlying representation combined linked design models reflect current efforts product modelling compromising perceived benefits ai paradigms design research 
approach identify graphical semantic objects abstracted aggregated tangled hierarchy 
allows different semantic aggregations exist explicit 
thesis proposes shared object model captures explicit representation visual semantic descriptions shared design objects 
model allows different concepts represent various designers perspectives coexist different stages design process incorporating multiple views design semantics graphics object 
incorporation results better shared understanding design improved communication collaboration 
interface shared object model developed object browser program 
links graphic data semantic data maintained program 
object browser implemented incr tcl tcl tk toolkit 
development computational support collaborative design ultimately allow shared understanding developed maintained computer representations 
mate system provides starting point testing understanding represented communicated 
contributions major contributions research computer supported collaborative design ffl generic scheme classifying multi user applications 
framework classifying multi user applications design developed chapter explores enabling technologies raises various key issues development collaborative design applications 
chapter 
ffl multi user architecture synchronous collaborative design 
development mate enables team design professionals collaborate focussing requirements shared design workspaces 
shown existing single user applications shared team members additional requirements needed implement collaborative design systems multi user interfaces 
ffl shared workspaces 
thesis elaborates shared workspaces collaborative design environments 
different views shared design workspaces various roles interaction design participants considered 
understanding views clarifies need sharing design representations 
ffl explicit representation shared visual representation semantic models 
developing multi user applications collaborative design understanding shared design models required 
research approaches shared understanding explicit representation visual semantic models 
ffl incorporation multiple views design semantics 
designers may different representations design semantics support different views design 
thesis incorporates multiple views design semantics allowing designers generate modify examine representation visual semantics descriptions shared design objects 
allows designers link semantic graphical models shared object model 
ffl aggregations shared object 
development shared object model enables designers combines graphical semantic objects abstracted aggregated tangled hierarchy 
model allows design objects belong multiple aggregations semantic descriptions explicitly inherited aggregation 
ffl prototype implementation 
development prototype models object browser demonstrates feasibility enabling technologies 
shows limitations current technology developing multi user synchronous cad systems 
object browser shows linking graphical objects multiple views chapter 
design semantics enhances share understanding design participants 
research section intended highlight suggested directions research development computer supported collaborative design 
possible research works ffl multiple representations graphical semantic design objects applications 
shared object model thesis allows explicit representation design semantics graphic objects 
link maintained semantic objects graphic objects reside single application autocad 
developments considered combining design semantics multiple representations graphic objects number applications 
ffl integration symbolic reasoning representation design semantics 
symbolic reasoning integrated shared object model maintain consistency multiple views design semantics multiple representations graphic objects 
integration architecture icm project 
considered 
project implements open system integration architecture multi criteria semantic modelling knowledge critiques explanations 
ffl elaboration integration multi media mate 
designers collaborate need share coordinate annotate various design media 
multimedia important aspect design currently supported environments collaboration 
mate design enables designers incorporate various forms digital media design objects provide richer means computer mediated communication 
ffl development group interfaces collaborative design 
various components mate object browser developed current technology object oriented programming graphic user interface 
multi user distributed aspects applications requires special considerations concurrency control data chapter 
process distributions shared information 
research include development group interfaces collaborative design support wide variety team activity 
ffl experiment mate complex design projects 
explicit representation design semantics ability combine graphic representation provide shared understanding designers 
approach demonstrated simple design project object browser interface 
approach scales complex design project pursued 
bibliography akman hagen 

fundamental theoretical framework intelligent cad system computer aided design 
balachandran gero 

role prototypes integrating expert systems cad systems gero ed applications artificial intelligence engineering design verlag berlin pp 

bannon schmidt 

cscw characters search context bowers benford eds studies computer supported cooperative theory practice design elsevier science amsterdam pp 

perez dele cruz morales 

collaborative architecture design evaluation refinement gero maher eds preprints aaai workshop ai collaborative design washington dc pp 

bond gasser 

analysis problems research dai bond gasser eds reading distributed artificial intelligence morgan kaufmann ca pp 

brown 

exploring role single function agents negotiation gero maher eds preprints aaai workshop ai collaborative design washington dc pp 

bennett 

learning user experience groupware proceedings conference computer supported cooperative acm new york pp 

buxton 

telepresence integrating shared task person spaces proceedings graphic interface morgan kaufmann pp 

clayton 

interpretation objects multi disciplinary design gero sudweeks eds artificial intelligence design kluwer academic dordrecht netherlands pp 

coyne rosenman radford balachandran gero 

knowledge design systems addison wesley publishing reading ma 
bibliography crowley baker tomlinson 

infrastructure building shared multimedia applications proceedings conference computer supported cooperative acm new york pp 

de la 

object space framework design construction integration building environment 


cooperating agents database perspective ed verlag pp 



model real time operation bannon robinson eds proceedings second european conference computer supported cooperative kluwer academic dordrecht pp 

dourish 

shared drawing program rank xerox europarc uk 
dourish 

silicon graphics ellis gibbs rein gail 

groupware issues experiences communication acm 
ellis 

conceptual model groupware furuta eds proceedings conference computer supported cooperative acm new york pp 

far 

flemming hendrickson maher woodbury 

concurrent computer integrated building design prentice hall englewood cliffs nj 
flores graves winograd 

computer systems design organisational interaction acm transactions office information systems pp 

clayton kunz 

interdisciplinary communication medium collaborative design proceedings third international conference ai civil engineering edinburgh pp 

finger garrett 

representing reasoning design intent gero ed artificial intelligence design butterworth heinemann oxford pp 

garcia howard stefik 

active design documents new approach supporting documentation preliminary routine design technical report stanford university 
bibliography gero 

design prototypes knowledge representation schema design artificial intelligence magazine 
gero 

model exploration computer aided design gero eds formal design methods cad north holland amsterdam pp 

greenberg 

real time groupware distributed system concurrency control effect interface furuta eds proceedings conference computer supported cooperative acm new york pp 

greenberg roseman webster 

human technical factors distributed group drawing tools interacting computers 
harrison minneman 

media space research project video design medium proceedings conference participatory design pp 

hennessy 

information domains cscw bowers benford eds studies computer supported cooperative theory practice design elsevier science amsterdam pp 

hill patterson 

rendezvous language communication acm 
howard abdalla phan 

primitive composite approach structural data modelling computing civil engineering 
howard levitt paulson pohl tatum 

computer integration reducing fragmentation aec industry 
hwang 

design semantics cad databases phd thesis department architectural design science university sydney australia 


model collaborative design multiple design agents phd thesis department architectural design science university sydney australia 
ibm 
ibm architecture engineering series 
ishii kobayashi grudin 

integration interpersonal space shared workspace clearboard design experiments acm transactions information systems 
genesereth 

framework collaborative distributed multidisciplinary design gero maher eds preprints aaai workshop ai collaborative design washington dc pp 

bibliography lenz meyer wegener schaffer 

communication support cooperative computer communication 


hypertext collaborative example intermedia kraut eds intellectual teamwork lawrence erlbaum associates new jersey pp 

law wiederhold 

architecture managing design objects shareable relational framework international journal systems automation research applications 
lu mantei 

idea management shared drawing tool bannon robinson eds proceedings second european conference computer supported cooperative kluwer academic dordrecht pp 

maher rutherford 

model collaborative design cad database management proceedings conference university sydney sydney australia pp 

maher rutherford 

model synchronous collaborative design cad database management research engineering design 
appear 


unofficial yellow pages cscw groupware prototypes projects 
url ftp tft tele pub groupware cscw yp ps mantei baecker sellen buxton milligan 

experiences media space acm conference human factors computing pp 

ncs 
collage 
url ftp ftp ncsa uiuc edu unix collage newton wilson crawford tucker 

networking cad aec sector newton ed networking cad proceedings national conference new applications high speed metropolitan wide area networks construction manufacturing vol 
research laboratory csiro division building construction engineering melbourne pp 

nii 

blackboard systems blackboard model problem solving evolution blackboard architectures ai magazine 
ousterhout 

tcl tk toolkit addison wesley publishing reading ma 
bibliography patterson 

rendezvous architecture synchronous multi user applications proceedings conference computer supported cooperative acm new york pp 

peng 

survey collaborative drawing support tools design perspectives prototypes computer supported cooperative cscw 
peng 

exploring communication collaborative design operative architectural modelling design studies 
dubois delcambre 

artificial intelligent software engineering building engineering microcomputer civil engineering 
rodden 

survey cscw system interacting computers 
rosenman maher 

formal representations communicating design intent technical report key centre design quality university sydney australia 
rutherford 

knowledge design decision support flemming van wyk eds futures north holland pp 

sauce powell 

object oriented approaches integrated engineering design systems computing civil engineering 


distributed sketchpad system fraunhofer institut germany 
harris clark smyth 

designing distance real time designer designer interaction design studies 
simon 

communication control computer supported cooperative systems furuta eds proceedings conference computer supported cooperative acm new york pp 

smith hennessy lunt 

object oriented framework modelling organisation communication bowers benford eds studies computer supported cooperative theory practice design elsevier science amsterdam pp 

sriram wong 

shared workspaces computer aided collaborative product development technical report intelligent engineering systems laboratory mit ma 
bibliography step 
product data representation exchange part overview fundamental principles technical report step document iso tc sc 
stroustrup 

programming language second edn addisonwesley publishing reading ma 
sycara 

object oriented framework collaborative engineering design sriram fukuda eds computer aided cooperative product development verlag london 
tang minneman 

video shadows support remote collaboration olson olson eds proceedings conference computer supported cooperative acm new york pp 

tec 
version windows system 
trevor rodden mariani 

adapters support cooperative sharing furuta eds proceedings conference computer supported cooperative acm new york pp 

turoff 

computer mediated communication requirements group support journal organisational computing 
van 

modelling multiple views buildings automation construction 


negotiation aid cooperative problem solving technical report ibm fsd ny 
wilson 

shared whiteboard windows apple computer cupertino ca 
wong 

shared workspaces computer aided collaborative phd thesis department civil environmental engineering mit 
appendix list cscw groupware applications appendix gives brief description cscw groupware distributed collaborative applications 
intended complete list guide develop framework section 
preparing larger list cscw groupware projects 
list includes useful index classify systems categories subcategories 
lu mantei shared drawing package 
supports generation management design ideas group discussion 
differs shared drawing tools support transparent layers 
users different layers contribute design 
layers stacked displayed prominent colour 
users able create hide select layer 
shared sketching tool supports sessions remote participants 
provide extensive graphics functions elaborated user interface geometrical objects lines ellipses rectangles free hand drawings textual annotations created appendix list cscw groupware applications modified 
sketches common raster image formats copied common drawing board 
drawing functions selectable main window similar common software 
button invokes distributed mouse cursor 
separate window complete drastically reduced view drawing board 
collage ncsa collage ncs scientific data analysis tool software development group national center supercomputing applications 
tool provides image display analysis colour table editing spreadsheet display floating point numbers 
collage provides capability distribute data analysis visualisation functions number users 
foundation collaborative aspects tool functionality 
functionality implemented tools macintosh windows pc compatible platforms 
clearboard clearboard ishii utilises video overlay technique permits people see image changing 
approach integrate media shared workspace bridging gaps computer desktop 
greenberg greenberg multiuser sketchpad program takes entire computer display 
users see exactly thing draw type erase move cursors drawing save restore image 
simple paint program users erase marks bitmap surface object oriented drawing program features structured drawing drafting packages 
locking restrict access rights shared objects private objects seen users 
appendix list cscw groupware applications dourish desktop conferencing system 
commercial software combines live video audio shared white board package 
allows users interact live video audio working collaboratively text document captured image 
shared white board provided annotate file mark image 
crowley system replicated architecture designed infrastructure building shared applications 
multimedia applications developed system shared editor sketch program video tools 
system requires modification single user applications function replicated architecture 
rendezvous rendezvous system hill patterson designed build multi user applications conversational settings 
rendezvous language extension common lisp common lisp object system clos provides declarative graphics system constraint maintenance system event dispatcher large class library 
rendezvous toolkit provides standard graphics widgets multi user support telepointers multi user text multi user drawing multi user undo capability support sharing duplicated customised views 
project uses video overlay technique similar clearboard approach develop shared drawing system team designers generate design concepts 
image remote partner displayed screen transparent shared drawing surface displayed window 
appendix list cscw groupware applications dourish simple shared drawing program runs workstations window system 
public domain program 
drawing surface entirely shared entirely unstructured simply bit plane 
modes draw erase 
mouse acts pen draw mode eraser erase mode 
mouse button pressed acts pointing device movements echoed remote screen 
considered shared sketching tool users equal roles 
users right draw erase part shared surface board 
sketchpad sketchpad system distributed interactive graphical editor particularly designed sketching 
cad pictures background items discussion multiple users able sketches time 
interactive manipulations visible users 
conference member allowed choose image background picture discussion 
may select sketches see 
sketches different participants distinguished different colours 
far screen sharing file transfer system 
allows users view screen operates computers transfer files 
runs macintosh windows systems connected network 
tec window multiplexor developed allow unmodified client shared users separate workstations simultaneously 
protocol multiplexor special program behaves server window client 
program intercepts client server connection passes appendix list cscw groupware applications participating servers filtering unwanted useless responses events 
wilson shared drawing tool motif windows 
capabilities including ability grab areas display outside window drag drawing area 
editor detailed colour colour grabber outputs greyscale postscript formats bitmap 
rewritten motif resulting better cleaner interface original bit slower 
appendix abstracts research papers published papers describe research aspects thesis 
saad 

synchronous collaborative design multimedia workshop distributed systems multimedia infrastructure support cscw chapel hill nc 
position defines model enables designers incorporate various forms multimedia design objects shared objects shared visual workspaces 
aspects collaborative design systems discussed digital media integration multi user interaction 

saad maher 

multimedia synchronous collaborative design proceeding multimedia design conference key centre design computing university sydney 
design collaborative effort team designers involving coordination multiple areas expertise exchange ideas various forms information 
multimedia important aspect design currently supported environments collaboration 
designers collaborate need share coordinate annotate various design media 
development computer environments support activity current developments multimedia technology research results area computer science referred computer supported cooperative cscw 
appendix abstracts research papers considerations building systems include nature shared workspace computer representation design information model systems multimedia communication information sharing collaborative design environment defining links graphic explicit semantic data support design collaboration 

saad maher 

shared understanding collaborative design submitted computer aided design 
propose computer support collaborative design requires shared understanding design artifact design team 
development support shared understanding builds current developments research ai cad cscw computational models design 
shared understanding explicit representation order effectively shared 
explicit representation comprise visual representation semantic model 
architecture computer supported collaborative design distinguishes shared visual representation shared underlying representation 
development underlying representation combines graphical semantic objects abstracted aggregated tangled hierarchy 

saad maher 

sharing design objects design semantics workshop semantic basis sharing knowledge data design lausanne switzerland 
development collaborative design environments issue ambiguity representation design objects apparent 
designers share representations perceive different abstractions different semantic models 
approach position identify graphical semantic objects abstracted aggregated tangled hierarchy 
allows different semantic aggregations exist explicit 
appendix abstracts research papers 
maher gero saad 

synchronous support emergence collaborative cad flemming van wyk eds futures north holland amsterdam pp 

design rarely activity commenced completed individual 
common design environment teams designers final solution 
consider issues involved development computer design environments teams design professionals collaborate focussing need visual underlying representations support multiple interpretations 
consider environment providing shared workspace facilitates communication progression design ideas concepts drawings 
environment shared workspace focusses workspace designers see interact workspace provides underlying computer representation persistent memory 
emphasis providing representations support emergence occurs collaboration 

saad maher 

computational model synchronous collaborative design gero maher 
eds preprints aaai workshop ai collaborative design washington dc pp 

designers engaged team design project need establish develop maintain shared environment collaborate 
design emerges interaction participating designers 
explores underlying representation support representation semantic design knowledge needs communicated collaboration data needed computer programs displaying geometry 

maher saad 

computer support synchronous collaborative design transactions mechanical engineering 
appendix abstracts research papers computer programs user friendly suited supporting designers limited documentation analysis tools need consider computer impact support collaboration 
review developments cad design ai cscw 
model computer supported synchronous collaborative design focussing components system provide sophisticated multi user interface need comprehensive representation design solution 
