visualizing program slices thomas ball research bell labs com stephen eick eick research bell labs com october appears proceedings ieee symposium visual languages pp 
october 
copyright ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
visualizing program slices thomas ball stephen eick bell laboratories rd il eick research att com october program slicing automatic technique determining code program relevant particular computation 
slicing applied areas including program understanding debugging maintenance 
little attention paid suitable interfaces exploring program slices 
interface program slicing allows slicing statement procedure file level provides fast visual feedback slice structure 
integral interface global visualization program shows extent slice crosses procedure file boundaries facilitates quick browsing numerous slices 
appears proceedings ieee symposium visual languages 
understanding behavior large software system complex daunting task 
program slicing automated program decomposition proposed mark weiser aids endeavor reducing amount code examined point process 
informally stated slice contains components program potentially affect component interest 
slice aids program understanding focusing attention smaller relevant subprogram 
shows slice simple function link 
slice point statement return highlighted 
statements slice colored statements outside slice 
slice may reduce amount code programmer examine slices may quite large complicated especially large systems 
current slicing interfaces text browsers shown editors inadequate task exploring slices :10.1.1.15.231
interfaces slice formed selecting statement expression slice point invoking slice command 
result statements slice highlighted colored 
slice crosses procedure file boundaries additional browsers may opened browser commands may invoked view entities 
interfaces simple slice burden programmer task determining extent slice finding interesting slice features 
determining code lies outside slice difficult 
navigation slice cumbersome especially slice crosses procedure file boundaries rule large programs 
simply put interfaces get way program slicing expedite difficult examine different slices program effort required see just slice 
slice part invisible interfaces 
developed interactive slicing interface address problems 
motivation developing need better visualize data generated slicing tools particular slicing tool built 
investigating apply slicing large legacy systems help programmers better understand comprehend behavior 
uses reduced visual representation programs pioneered eick extended ways support slicing 
shows snapshot main display 
files displayed columns contain representations procedures 
procedures displayed open form line code displayed thin row see procedure file qpt closed form hides underlying code see procedure second file 
slice formed respect code entity simply pointing mouse 
statements procedures files slice immediately colored 
slice dynamically updated track mouse making patterns shared slice structure apparent 
source browser may opened view actual code 
interface facilitates slicing making slices fully visible user extend procedures files 
global hierarchical overview program combined highly interactive interface allows user quickly examine slices find interesting slice features browse slice 
section introduces program slicing describes tool built find slices 
section describes slicing interface visualization 
section steps main display 
mouse indicates slice point application slicing visualization program 
section discusses related section summarizes 
program slicing preliminaries slices generally classified dimensions 
slice direction backwards forwards 
backwards slice respect component identifies components affect forward slice respect identifies components affected second slice computed analyzing program source code referred static slice analyzing executions program dynamic slice 
static dynamic slices automatically constructed variety methods 
approaches involve examining program data control dependences give informal descriptions rigorous definitions see 
statement data dependent statement writes variable subsequently reads intervening writes 
function statement return data dependent statement data dependent int 
analyzing data dependences presence pointers arrays difficult task program source code problem generally undecidable 
exact data dependences particular execution program easily computed examining execution address trace tradeoff dependences program may arise execution 
data dependences span procedure file boundaries 
statement control dependent statement predicate control executes 
control dependences span statements proce int rank rank rank rank rank return program dependence graph function link 
control dependence edges solid data dependence edges dashed dure cross procedure file boundaries 
statement control dependent enclosing conditional 
return statement control dependent statement executes regardless control flow path procedure 
combined data control dependences form edges directed graph program dependence graph vertices statements program 
backwards forwards slice respect statement may backwards forwards transitive closure graph identifying set statements slice 
shows program dependence graph function 
dashed curved edges data dependences solid straight edges control dependences 
backwards closure return includes vertex graph corresponds slice shown 
constructed tool building dynamic program dependence graph program execution 
qpt instrumentation tool generate program traces 
qpt instruments executable file code generate trace interesting events addresses written read 
trace piped trace analyzer extracts dynamic data control dependences 
qpt instruments executable files dependences machine instructions 
symbol table executable file allows map dependences machine instructions dependences corresponding statements source level 
result analysis statement level dynamic dependence graph 
performing execution analysis object code level allows analyze programs written different languages 
slicing visualization interface interface displays program compact representation 
programs organized levels files modules procedures statements 
previous slicing interfaces focus slicing statement level 
believe equal easy slice level hierarchy statements procedures files 
reduced representation clearly show levels hierarchy 
order examine slices interface highly interactive 
slicing accomplished simply pointing representations files procedures statements 
display updated real time show slice associated current mouse position allows user quickly examine different slices find interesting patterns 
describe visual interactive aspects interface greater detail 
visualization shown file program represented column procedures column may wrap file large file name top column 
procedures file displayed forms closed form procedure partially filled rectangle size encodes number lines procedure procedure record blocks open form line text procedure maps line pixels indentation length reflecting text procedure find proc addresses 
reduced representation shows file procedure sizes internal control structure open procedures 
display shows name procedure containing slice point check global regs names procedures step away slice procedure record blocks 
displaying procedure names tends clutter display 
slice spans procedures may contain relatively statements proportion number executed statements procedures 
hand may encounter heavy slices contain executed code procedure 
distinguish cases option fill closed procedure indicate percentage executed statements procedure slice 
quickly scanning display user gauge size slice terms number statements addition number procedures files spans 
immediately see small amount executed code procedure record blocks slice 
colors display distinguish executed code code dark gray vs light gray code slice code outside slice color vs gray 
distinguishing executed code code display necessary clear code sliced 
components slice color coded rainbow scale shortest path distance slice point dependence graph red slice point color lower rainbow spectrum represents step away shortest path 
allows easy identification immediate predecessors slice point 
closed procedure color hottest color procedure 
file name similarly colored 
interaction shows components slicing interface 
interface supports continuous slicing program 
require user invoke slice command desired slice slicing continues user requests halt button click 
slicing accomplished simply pointing entity reduced representation 
pointing closed procedure forms slice respect full interface 
forward slice assignment text start executed statements procedure transitive closure vertices representing statements procedure 
similarly pointing file name forms slice respect statements file 
procedure opened slices may taken respect individual statements procedure 
shows forward slice assignment statement 
time slice formed previous slice erased 
mouse drag disables erasure previous slice allowing user slice respect set program components 
slider left main display scales size closed procedures 
browsing procedure level easier identify patterns procedures equal size 
shows example procedures scaled reflect true size shows example procedures scaled nearly equal size 
interface supports forward backwards slicing time 
addition filters controlling transitive closure 
example possible restrict slicing operation propagate strongly connected component containing slice point 
useful identifying recurrences cycles program computation apparent simple backwards closure 
separate window left side display see color selector associated slider 
slider controls steps transitive closure expand slice operation 
user interested small area slice point points far away necessary compute full transitive closure slice operation 
color selector represents number steps closure 
selector user may selectively enable disable slice colors reflected reduced representation 
examine particular slice slicing turned fixes current slice 
files procedures slice elided files procedures backward slice procedure read proc file aout forward slice procedure write insts file aout slice rearranged display sorted dependence distance slice point 
allows exploration source code near slice point minimum mouse motion files procedures close slice point terms dependence distance spatially close 
order statements procedure altered 
view actual source code source browser may opened see 
lines text browser colored reduced representation 
browser view tracks current mouse position reduced representation allowing user quickly move code file procedure code 
user desires code file may browsed standard browser commands slices may requested browser 
example sections shows slice visualization quickly find interesting relationships program components 
applied slicing tool qpt profiling tracing tool 
qpt written language lines code procedures including libraries 
shows files procedures qpt program 
qpt basic steps read executable file determine points executable add instrumentation code write instrumented executable file 
slicing answer number questions relationships program components ffl groups procedures files participate computation 
ffl code variables crucial computation program 
changing code variables affect behavior parts program 
ffl file procedure contain independent computations just 
highly interdependent shared code slicing procedures file aout immediately reveals highly interdependent procedures file see 
slice procedures includes procedures 
furthermore shows backwards slice respect procedures small 
forward slice respect procedures includes procedures program 
procedures read aout info find proc addresses record name note hidden proc read proc collaborate reading executable file 
surprisingly program depends data structures initialized procedures 
inter file functionality functions procedures file aout shows forward slice respect procedure aout write insts 
forward slice small spans files 
procedures collectively output instrumented executable file 
procedures deal executable file format aout deal machine independent instrumentation prof trace handle machine dependent instrumentation machine inst machine prof trace natural organization porting qpt tool different platforms harder discover inter file functionality 
slice visualization apparent immediately 
important variables examine text procedure read aout info see browser find initializes number global variables text start text size data start corresponding starting addresses sizes various segments executable file 
size forward slice respect variable definition indicate crucial variable program computation 
shows forward slice respect variable text start 
procedure displayed name directly text start 
procedures slice indirectly influenced value text start 
files shown forward slice respect text start influences code program 
quick analysis performed slicing procedures statements file aout learned ffl highly interdependent procedures file read input qpt program dependent 
ffl set interdependent procedures spanning files collectively output instrumented file 
ffl variable text start influences large portion program 
related program slicing systems aware give user global overview program allow quick examination slices 
systems text syntax directed browser support slicing mainly statement level 
examples program wisconsin program integration system spyder surgeon assistant 
display previous eick seesoft program visualization system 
seesoft display file program displayed refer open form line file mapped line display length indentation reflecting underlying source text 
line color encodes associated statistic example count times line executed 
totally line orientation display slicing program abstractions procedures visually apparent pointed selected way user suppress eliminate line level detail needed 
problem visualizing program slices part larger program visualization problem visualization interdependencies relationships program components apparent user 
main challenges visualization huge number relationships fact relationships necessarily localized code 
slicing eliminates relationships code relevant point interest leaves challenges remaining relevant relationships 
effectively shows code inside outside slice global fashion provide direct assistant navigating dependence relationships code tools 
summary visualization method interface querying displaying program slices 
tool allows user quickly request examine different program slices 
reduced visual representation program displays various levels program hierarchy possible query display browse slices highly interactive fashion 
different possible applications 
part system program understanding reverse engineering tool identify related procedures files extract restructure code 
applied debugging provides help identifying code contributes anomalous program behavior 
agrawal demillo spafford 
debugging dynamic slicing backtracking 
software practice experience june 
ball larus 
optimally profiling tracing programs 
conference record nineteenth acm symposium principles programming languages albuquerque nm pages 
acm jan 
eick steffen 
visualizing code profiling line oriented statistics 
proceedings visualization pages 
ieee computer society press oct 
eick steffen sumner jr seesoft tool visualizing line oriented software statistics 
ieee transactions software engineering nov 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
gallagher 
surgeon assistant limits side effects 
ieee software may 
horwitz prins reps integrating non interfering versions programs 
acm transactions programming languages systems july 
korel laski 
dynamic program slicing 
information processing letters oct 
larus 
efficient program tracing 
ieee computer may 
ottenstein ottenstein 
program dependence graph software development environment 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments acm sigplan notices may 
reiss 
framework visualization 
proceedings ieee symposium visual languages pages aug 
reps wisconsin program integration system manual release 
technical report unpublished report university wisconsin madison wi july 
weiser 
programmers slices debugging 
communications acm july 
weiser 
program slicing 
ieee transactions software engineering se july 
