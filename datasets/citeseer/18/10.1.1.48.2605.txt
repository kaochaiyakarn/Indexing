residency check elimination object oriented persistent languages antony hosking hosking cs purdue edu department computer sciences purdue university west lafayette usa explore ramifications object residency assumptions impact residency checking subroutine dispatch scenarios procedural static object oriented dynamic virtual object oriented 
obtain dynamic counts residency checks necessary execution benchmark persistent programs scenarios 
results reveal significant reductions number residency checks achieved application residency rules derived dispatch scenario program executes additional constraints specific language implemented 
keywords residency checks optimization object orientation static dynamic dispatch persistent programming languages view permanent storage stable extension volatile memory objects may dynamically allocated persists invocation 
persistent programming language object store preserve object identity object unique identifier essence address possibly store objects refer objects forming graph structures modified modifications visible accesses unique object identifier 
access persistent objects transparent programmer perspective requiring explicit calls read write 
language implementation run time system objects resident memory demand non resident pages automatically resident paged virtual memory system 
treating persistence orthogonal type abc important ramifications design persistent programming languages encourages view language extended support persistence minimal disturbance existing syntax store semantics 
notion persistent storage stable extension dynamic allocation heap allows uniform transparent treatment transient persistent data persistence orthogonal way data defined allocated manipulated 
characterization persistence allows identify fundamental mechanisms transparent persistent system support 
notable need kind residency check trigger retrieval non resident objects 
widely accepted orthogonal persistence exhibit sufficiently performance justify inclusion important feature programming language 
offer evidence orthogonal persistence added object oriented language compromising performance 
focus avoiding residency checks objects residency guaranteed context 
consider scenarios residency checks eliminated characterize execution suite benchmark persistent programs scenario terms number residency checks incurred benchmark 
scenarios represent spectrum styles execution procedural non object oriented object oriented static binding methods call sites object oriented dynamic method dispatch 
remainder organized follows 
reviewing object faulting residency checking followed description execution scenarios consider 
discussion experimental framework follows including description prototype persistent smalltalk implementation experiments benchmark programs metrics evaluation presentation results 
offer brief 
see www cs purdue edu people hosking 
supported sun microsystems appears proc 
seventh international workshop persistent object systems cape may new jersey may morgan kaufmann object faulting residency checking traditional database systems persistent system caches frequently accessed data memory efficient manipulation 
virtual memory may relatively scarce resource reasonable suppose persistent data cached 
persistent system arrange resident just objects needed program execution 
knowing advance data needed system load objects demand persistent object store memory 
object fault attempt non resident object 
relies residency checks implemented explicitly software performed implicitly hardware giving rise kind hardware trap non resident objects 
wide range object faulting schemes devised having different representations persistent objects 
approaches drive faulting memory protection traps object faulting entirely transparent compiled code representation virtual memory pointers apparently resident objects 
evidence suggest totally transparent schemes offer best performance hms hm hm hos hm 
multiple representations arise resident objects causing object fault versus non resident objects explicit residency checks distinguish 
efficient implementation residency checks key implementing high performance persistent programming language 
mechanism sufficiently lightweight represent marginal overhead frequently executed operations fine grained objects 
marginal overhead cumulatively significant impact performance 
opportunity exploited elide residency checks strictly necessary hm hm mh 
optimizations rely data flow analysis code transformations hoisting combining residency checks imposition special rules residency particular objects 
example rules ramifications include pinning objects resident guaranteed remain resident long directly referenced machine registers activation stacks local variables 
repeated residency checks object referenced local variable merged check time object accessed variable 
target residency argument object oriented method call target object automatically resident time call remain 
methods need contain checks residency target object 
object resident object resident 
constraint written contains accessed directly traversed residency check 
resident source constraint means resident 
swizzling purposes represented direct memory pointer 
note asymmetric pinning assumed apply situations enables residency check optimizations absence local variable guaranteed refer resident object despite prior residency checks 
effect target residency rules number residency checks executed program topic 
consider rule scenarios measure number residency checks required scenario execution suite object oriented persistent benchmark programs 
execution scenarios residency rules applied run time dictate statically residency checks needed elided 
experiments include results general execution scenarios procedural execution non object oriented procedural language proceeds invocation statically determined procedures 
ignoring possibilities optimization residency checks local global data flow analysis dereference requires residency check 
acc bc kk kae cm rms smr bbb ric rc ric scd wd hmb hos hm wk static oo object oriented programs execute invocation methods objects 
method typically accesses encapsulated state target object 
applying pinning target residency rules eliminates residency checks target object method 
residency check target performed time method invoked method invocation directed caller target object case check needed 
non virtual statically bound methods method code invoked directly target residency check performed explicitly prior call 
dynamic oo defining feature object oriented languages support inclusion polymorphism mechanisms subclassing subtyping inheritance 
polymorphism means call site may involve target objects number different compatible types classes 
virtual dynamically dispatched methods particular method code invoked determined dynamically type class target object 
assume pinning target residency possible fold target residency check dynamic method dispatch mechanism 
precise approach depends nature mechanism general additional overhead due residency checking 
inherent indirection dynamic dispatch subverted method invocations non resident objects directed proxy faulting routines target object resident forwarding call appropriate resident object method 
target object residency checks necessary called method 
note optimizations cha hu cg fer dgc dmm may convert indirect calls direct calls increasing number explicit checks required similarly aggressive optimizations discover eliminate redundant residency checks intra inter procedural data flow analysis 
addition general scenarios regarding target object residency program may benefit rules allow elimination residency checks 
rules depend particular execution patterns program 
consider effect specific rules context prototype persistent system experiments 
experiments instrumented execution benchmark persistent programs executing prototype persistent smalltalk system hos obtain dynamic counts residency checks performed scenarios 
consider effect additional constraints arising specific knowledge smalltalk bytecode instruction set execution semantics 
prototype implementation persistent smalltalk prototype implementation smalltalk gr extended persistence 
components virtual machine virtual image 
virtual machine implements bytecode instruction set smalltalk source code compiled certain primitive methods functionality built directly virtual machine 
typically provide low level access underlying hardware operating system virtual machine implemented 
example lowlevel floating point integer arithmetic indexed access fields array objects object allocation supported primitives 
primitive method invoked exactly way ordinary method expressed sequence smalltalk expressions implementation compiled method 
virtual machine performs primitive directly need separate smalltalk activation record 
primitives coded hand virtual machine able hand optimize primitives remove redundant checks 
compiler compiled persistent language discover optimizations automatically intra procedural data flow analysis 
virtual image derived xerox parc smalltalk image version minor modifications 
implements smalltalk functionality smalltalk development environment including editors browsers debugger bytecode compiler class libraries class objects smalltalk sense 
bootstrapping non persistent smalltalk environment entails loading entire virtual image memory execution virtual machine 
persistent implementation smalltalk places virtual image persistent store environment bootstrapped loading just subset objects image sufficient resumption execution virtual machine 
method dict 
superclass instance variables metaclass class class object selector method symbol literal frame class selector method class put class class bytecodes objects classes inheritance method dispatch retain original bytecode instruction set minor modifications virtual image 
efforts focus virtual machine carefully augmented residency checks fault objects memory needed executing image 
precise location residency checks depends particular execution scenario 
smalltalk method dispatch smalltalk object see encapsulation private state set operations called interface 
private state consists number data fields called instance variables directly accessible code implementing object operations 
object instance class object implements common behavior instances class object instance metaclass 
classes arranged hierarchy subclass inherit instance behavior superclass 
instance subclass behave instance superclass subclass overrides extends behavior 
computation smalltalk proceeds sending messages objects 
message consists message selector put number arguments represents request object carry operations 
effect sending message invoke methods object receiving message receiver 
invoking method may thought procedure call receiver argument procedure preceding arguments specified message 
particular method execute determined dynamically message selector class receiver 
class object contains method dictionary associating message selectors compiled methods 
compiled method consists virtual machine bytecode instructions implement method literal frame containing shared variables constants message selectors referred method bytecodes 
determining method execute response sending message proceeds follows 
method dictionary receiver class contains message selector associated method invoked 
search continues superclass object class hierarchy 
matching selector method dictionaries hierarchy run time error occurs 
shared variable object encapsulates object 
contents variable changed change visible compiled methods holding shared variable 
described far method lookup process expensive especially message may implemented method class high superclass hierarchy far removed class receiver 
method lookup cache reduces lookup cost significantly 
valid entry cache contains object selector class compiled method 
message sends consult method lookup cache hashing object selector receiver class index entry cache 
selector class cache entry match message cached compiled method invoked directly 
full method lookup locates compiled method loads cache entry selector class method invoking method 
bytecode instruction set retain standard smalltalk bytecode instruction set gr partitioned functionality follows stack bytecodes move object evaluation stack current activation 
named instance variables receiver activation 
temporary variables local activation 
shared variables literal frame active method jump bytecodes change instruction pointer current activation send bytecodes invoke compiled primitive methods return bytecodes terminate execution current activation return control calling activation benchmarks performance evaluation draws oo object operations benchmarks cs compare alternative execution scenarios 
operations retrieval oriented operate substantial data structures benchmarks simple easily understood 
execution patterns include phases intensive computation memory residence important 
benchmark database oo benchmark database consists collection part objects indexed part numbers range exactly connections part parts 
connections randomly selected produce locality connections closest parts remainder randomly chosen part 
closeness defined parts numerically closest part numbers 
implement part database benchmarks entirely smalltalk including tree index parts 
part objects bytes size including object header 
outgoing connections stored directly part objects 
string fields associated part connection represented separate smalltalk objects bytes 
similarly part incoming connections represented separate smalltalk array object containing parts source incoming connection 
tree index parts consumes kb 
benchmark operations oo benchmarks comprise separate operations lookup fetches randomly chosen parts database 
null procedure invoked part arguments type fields part ensure part resident 
traversal fetches parts connected randomly chosen part part connected hops total parts possible duplicates 
similar lookup benchmark null procedure invoked part arguments type fields part 
oo specifies reverse traversal operation reverse swaps directions 
reverse minimal practical random nature connections means number connections varies parts part outgoing connections number incoming connections varies randomly 
different iterations reverse vary randomly number objects traverse amount perform 
insert allocates new parts database connections randomly selected parts described section applying rules locality 
index structure updated entire set changes committed disk 
operation reasonable measure update overhead hampered lack control number distribution locations modified mixing updates parts index 
easily controlled benchmark update wd operates way traversal measure calling null procedure performs simple update part object encountered fixed probability 
update consists incrementing scalar integer fields part 
changes reflected back persistent store 
probability update vary run change frequency density updates 
benchmarks intended representative data operations engineering applications 
lookup benchmark emphasizes selective retrieval objects attributes traversal benchmark illuminates cost raw pointer traversal 
update variant measures costs modifying objects making changes permanent 
additionally insert benchmark measures update overhead cost creating new persistent objects 
metrics obtain dynamic counts number residency checks necessary execution benchmark operations instrumented version smalltalk virtual machine 
benchmark run consists iterations benchmark operation 
successive iteration accesses different set random parts characterize benchmark terms mean number residency checks iterations run calculate confidence intervals bound variation random iterations 
different counters possible scenario enables results scenarios gathered just run benchmark 
scenario sees run random iterations 
results initial statement results ignores residency check counts attributable smalltalk idiosyncratic treatment classes activation records compiled methods process stacks orthogonally persistent objects right 
counts reflect residency checks needed ascending class hierarchy method lookup dynamic method dispatch residency checks processes stacks process management checks activation records returns 
obtain closest possible analogy traditional languages modula dynamic method dispatch implemented indirect call method table associated target object treat processes activations classes types class objects 
intricacies residency checks complications discussed 
results appear table columns execution scenarios rows benchmark 
number residency checks required execution benchmark execution scenario appears fraction checks elided light scenario residency rules 
indicate percentage method invocations result primitive method executions 
recall primitive methods hand optimized minimize number residency checks necessary execution access patterns primitive 
primitives directly access objects target object non primitives invoke method non target objects 
target residency optimizations effective ratio primitives non primitives low fewer non target accesses occur 
clear target residency rule significantly reduces number checks necessary object oriented execution scenarios 
statically dispatched scenario method invocations objects caller target require check able eliminate checks depending benchmark 
remaining checks necessary execution scenario primitives benchmark procedural static oo dynamic oo versus checks elided checks elided checks elided non primitives lookup sigma sigma sigma traversal sigma sigma sigma reverse sigma sigma sigma update sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma sigma insert sigma sigma sigma interval confidence table residency checks execution scenario benchmark invocations objects caller target primitive accesses objects primitive callee target 
dynamic scenario eliminates need checks method invocation target residency checking folded indirect dynamic method dispatch 
result scenario requires fewer residency checks procedural execution 
remaining checks necessary result primitive access objects target 
fact turns benchmarks remaining checks solely arguments primitives 
variation ratio primitive non primitive checks illustrates directly primitive fraction low traversal higher fraction checks elided 
smalltalk complications mentioned earlier additional complications persistent smalltalk implementation arising smalltalk treatment control objects processes activation stacks classes class objects persist 
add rules eliminate checks objects follows class object class instances 
send bytecodes need perform residency check target object class probing method lookup cache 
sender stack frame object stack frame representing sender calling activation 
applying rule transitively results activations process stack active stack frame resident usually process resumed caller caller caller process stack resident 
return bytecodes directly manipulate active stack frame calling activation control returned sender eliminates need residency check caller return bytecodes 
method methods activation stack frame activation execute corresponding compiled method resident 
return bytecodes need check residency method execution resumes 
literal literals methods refer 
include selectors constants shared variables directly manipulated bytecodes method 
send bytecodes directly access literal selectors certain stack bytecodes directly access shared variables 
bytecodes need check residency literals manipulate 
multi methods cecil cha method dispatch occurs argument method submit folding residency checks qualified arguments indirection dispatch 
special rules smalltalk force preloading objects critical forward progress computation bytecode instructions persistent virtual machine execute residency checks 
persistent virtual machine check residency objects residency guaranteed rules 
example full method lookup requires checks class hierarchy ensure superclasses method dictionaries resident 
similarly primitive methods perform residency checks objects access directly excluding receiver guaranteed resident target residency rule 
examined impact execution scenarios residency checks necessary execution instrumented benchmark programs 
results indicate object oriented execution paradigm enables significant reduction residency checks simple application target object residency rule 
addition constraints specific persistent smalltalk prototype allow reduction number checks required bytecode instructions persistent smalltalk virtual machine able execute residency checks 
interesting consider application similar techniques persistence dynamic object oriented languages java gjs ly 
particularly promising avenue research optimization hinder aggressive elimination dynamic method dispatch promote exploitation rules specific application program discovery residency invariants data flow analysis elimination residency checks 
abc atkinson bailey chisholm cockshott morrison 
approach persistent programming 
computer journal november 
acc malcolm atkinson ken paul cockshott 
ps algol algol persistent heap 
acm sigplan notices july 
bbb francois bancilhon gilles benzaken claude delobel sophie christophe patrick pfeffer philippe richard fernando velez 
design implementation object oriented database system 
dittrich dit pages 
bc brown cockshott 
persistent object management system 
technical report university st andrews scotland 
cg brad calder dirk grunwald 
reducing indirect function call overhead programs 
conference record acm symposium principles programming languages pages portland oregon january 
cha craig chambers 
design implementation self compiler optimizing compiler object oriented programming languages 
phd thesis stanford university 
cha craig chambers 
cecil language specification rationale 
version 
www cs washington edu research projects cecil www papers cecil spec html december 
cm george copeland david maier 
making smalltalk database system 
proceedings acm international conference management data pages boston massachusetts june 
cs cattell skeen 
object operations benchmark 
acm transactions database systems march 
dgc jeffrey dean david grove craig chambers 
optimization object oriented programs static class hierarchy analysis 
proceedings european conference object oriented programming aarhus denmark august 
dit dittrich editor 
proceedings international workshop object oriented database systems volume lecture notes computer science bad am stein germany september 
advances object oriented database systems springer verlag 
dmm amer diwan eliot moss kathryn mckinley 
simple effective analysis statically typed object oriented programs 
proceedings acm conference object oriented programming systems languages applications san jose california october 
alan dearle gail shaw stanley zdonik editors 
proceedings international workshop persistent object systems martha vineyard massachusetts september 
implementing persistent object bases principles practice morgan kaufmann 
fer mary fernandez 
simple effective link time optimization modula programs 
proceedings acm conference programming language design implementation pages la jolla california june 
david grove jeffrey dean charles garrett craig chambers 
profile guided receiver class prediction 
proceedings acm conference object oriented programming systems languages applications pages austin texas october 
gjs james gosling bill joy guy steele 
java language specification 
addison wesley 
gr adele goldberg david robson 
smalltalk language implementation 
addison wesley 
antony hosking eric brown eliot moss 
update logging persistent programming languages comparative performance evaluation 
proceedings international conference large data bases pages dublin ireland august 
morgan kaufmann 
hm antony hosking eliot moss 
compile time optimisations persistence 
dearle pages 
hm antony hosking eliot moss 
compiler support persistent programming 
technical report department computer science university massachusetts amherst march 
hm antony hosking eliot moss 
object fault handling persistent programming languages performance evaluation 
proceedings acm conference object oriented programming systems languages applications pages washington dc october 
hm antony hosking eliot moss 
protection traps alternatives memory management object oriented language 
proceedings acm symposium operating systems principles pages asheville north carolina december 
hm antony hosking eliot moss 
lightweight write detection checkpointing fine grained persistence 
technical report department computer sciences purdue university december 
hmb antony hosking eliot moss cynthia bliss 
design object faulting persistent smalltalk 
technical report department computer science university massachusetts amherst may 
hms antony hosking eliot moss darko 
comparative performance evaluation write barrier implementations 
proceedings acm conference object oriented programming systems languages applications pages vancouver canada october 
hos antony hosking 
main memory management persistence october 
position oopsla workshop garbage collection 
hos antony hosking 
lightweight support fine grained persistence stock hardware 
phd thesis university massachusetts amherst february 
available computer science technical report 
hu urs holzle david ungar 
optimizing dynamically dispatched calls run time type feedback 
proceedings acm conference programming language design implementation pages orlando florida june 
kae ted 
virtual memory narrow machine object oriented language 
proceedings acm conference object oriented programming systems languages applications pages portland oregon september 
kk ted glenn krasner 
loom large object oriented memory smalltalk systems 
glenn krasner editor smalltalk bits history words advice chapter pages 
addison wesley 
charles lamb gordon landis jack orenstein dan weinreb 
objectstore database system 
communications acm october 
ly tim lindholm frank yellin 
java virtual machine specification 
addison wesley 
mh eliot moss antony hosking 
expressing object residency optimizations pointer type annotations 
malcolm atkinson david maier benzaken editors proceedings international workshop persistent object systems pages france september 
springer verlag 
rc joel richardson michael carey 
persistence language issues implementation 
software practice experience december 
ric joel edward richardson 
persistent systems implementation language 
phd thesis university wisconsin madison august 
available computer sciences technical report 
ric joel richardson 
compiled item faulting new technique managing persistent language 
dearle pages 
rms steve fred andrew straw 
integration database management object oriented programming language 
dittrich dit pages 
scd schuh carey dewitt 
persistence revisited implementation experiences 
dearle pages 
vivek singhal kakkad paul wilson 
texas efficient portable persistent store 
antonio albano ronald morrison editors proceedings international workshop persistent object systems pages san italy september 
springer verlag 
smr andrew straw fred steve 
object management persistent smalltalk system 
software practice experience august 
wd seth white david dewitt 
performance study alternative object faulting pointer swizzling strategies 
proceedings international conference large data bases pages vancouver canada august 
morgan kaufmann 
wk paul wilson kakkad 
pointer swizzling page fault time efficiently compatibly supporting huge address spaces standard hardware 
proceedings international workshop object orientation operating systems pages paris france september 
ieee 
