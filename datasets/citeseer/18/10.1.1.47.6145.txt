sense self unix processes stephanie forrest steven hofmeyr anil somayaji dept computer science university new mexico albuquerque nm cs unm edu thomas longstaff cert coordination center software engineering institute carnegie mellon university pittsburgh pa tal cert org method anomaly detection introduced normal defined short range correlations process system calls 
initial experiments suggest definition stable normal behavior standard unix programs 
able detect common intrusions involving sendmail lpr 
part research program aimed building computer security systems incorporate mechanisms algorithms natural immune systems 
interested developing computer security methods way natural immune systems distinguish self 
artificial immune systems richer notions identity protection afforded current operating systems provide layer general purpose protection augment current computer security systems 
important prerequisite system appropriate definition self subject 
view immune system inspired methods computer security complementary traditional cryptographic deterministic approaches 
analogy specific immune response secondary mechanism sits passive barriers skin membranes innate responses generalized inflammatory mechanisms 
related studied number immune system models secondary mechanisms provide inspiration project described :10.1.1.48.3258
proceedings ieee symposium security privacy ieee computer society press los alamitos ca pp 

fl ieee natural immune system properties believe important robust computer security 
include detection distributed copy detection system unique detection probabilistic line detectors designed recognize virtually foreign particle just previously seen 
properties significance discussed 
previously developed computer virus detection method principles 
method implemented file authentication level self defined statically terms files containing programs protected data 
want build generalpurpose protective capability need flexible sense self 
problem mean self computer system dynamic case natural immune systems 
example computer users routinely load updated software edit files run new programs change personal habits 
new users new machines routinely added computer networks 
cases normal behavior system changed dramatically successful definition self need accommodate legitimate activities 
additional requirement identify self way definition sensitive dangerous foreign activities 
known ability distinguish self 
narrow definition result false positives broad definition self tolerant unacceptable activities false negatives 
reports preliminary results aimed establishing definition self unix processes self treated synonymously normal behavior 
experiments show short sequences system calls running processes generate stable signature normal behavior 
signature low variance wide range normal operating conditions specific dif ferent kind process providing clear separation different kinds programs 
signature high probability perturbed abnormal activities attacks attack attempts occur 
results significant prior published intrusion detection relied complex definition normal behavior prior knowledge specific form intrusions 
suggest simpler approach described effective providing partial protection intrusions 
advantage simple definition normal behavior potential implementing line monitoring system runs real time 
related basic approaches intrusion detection misuse intrusion detection anomaly intrusion detection 
misuse intrusion detection known patterns intrusion intrusion signatures try identify intrusions happen 
anomaly intrusion detection assumed nature intrusion unknown intrusion result behavior different normally seen system 
detection systems combine approaches example ides 
concerned anomaly intrusion detection 
previous anomaly intrusion detection determined profiles user behavior 
intrusions detected user behaves character 
anomalies detected statistical profiles ides inductive pattern generation tim neural networks 
generation user profiles methods requires audit trail actions user 
typically slowly adaptive changing profiles gradually accommodate changing user behavior 
abrupt changes behavior flagged irregular identified intrusions 
alternative approach taken fink levitt ko 
trying build normal user profiles focus determining normal behavior privileged processes run root 
define normal behavior program specification language allowed operations system calls parameters process formally specified 
approach similar theirs consider processes run root 
differs simpler representation normal behavior 
rely examples normal runs formal specification program expected behavior ignore parameter values 
advantage approach determine behavioral specification program code simply accumulate tracing normal runs program 
defining self program code stored disk cause damage runs 
system damage caused running programs execute system calls 
restrict attention system calls running processes 
consider privileged processes 
monitoring privileged processes advantages monitoring user profiles 
root processes dangerous user processes access parts computer system 
limited range behavior behavior relatively stable time 
root processes especially listen particular port constitute natural boundary respect external probes intrusions 
limitations 
example difficult detect intruder masquerading user having previously obtained legal password 
program implicitly specifies set system call sequences produce 
sequences determined ordering system calls set possible execution paths program text 
normal execution subset sequences produced 
nontrivial program theoretical sets system call sequences huge execution program produce complete sequence calls observed 
local short range ordering system calls appears remarkably consistent suggests simple definition self normal behavior 
define normal behavior terms short sequences system calls running process currently sequences lengths 
idea build separate database normal behavior process interest 
database specific particular architecture software version configuration local administrative policies usage patterns 
large variability individual systems currently configured patched conjecture individual databases provide unique definition self systems 
stable database constructed process database monitor process ongoing behavior 
sequences system calls form set normal patterns database abnormal sequences indicate anomalies running process 
definition normal behavior ignores aspects process behavior parameter values passed system calls timing information instruction sequences system calls 
certain intrusions detectable aspects process behavior need consider 
philosophy see far go simple assumption 
details stages proposed algorithm 
stage scan traces normal behavior build database characteristic normal patterns observed sequences system calls 
forks traced individually traces included part normal 
second stage scan new traces contain abnormal behavior looking patterns normal database 
current implementation analysis traces performed line 
build database slide window size trace system calls record calls follow sliding window 
suppose choose sequence system calls define normal behavior open read mmap mmap open mmap close slide window sequence record call call follows position position forth position window index sequence index database produced call position position position open read mmap mmap read mmap mmap mmap mmap call occurs followed different possible calls 
recorded 
sliding window complete sequence produce expanded database call position position position open read mmap mmap close read mmap mmap open mmap mmap open open mmap close mmap close close database normal patterns check new traces method 
slide window size new trace determining sequence system calls differs recorded normal database 
date simply test presence absence legal sequences 
example suppose constructed database new trace calls differing location normal sequence open replaces mmap fourth call sequence due limitation tracing package currently virtual forks 
open read mmap open open mmap close trace generate mismatches ffl open followed open position ffl read followed open position ffl open followed open position ffl open followed position 
record number mismatches percentage total possible number mismatches 
maximum number pairwise mismatches sequence length lookahead gamma gamma gamma gamma example trace mismatches 
formula get maximum database size giving rate 
mismatches observable distinguish normal abnormal 
simple algorithm efficiently implemented run time length trace terms system calls 
example current implementation analyzes traces approximate rate system calls second 
experiments previous section introduced definition normal behavior short sequences system calls 
usefulness definition largely determined answers questions ffl size database need capture normal behavior ffl percentage possible system call sequences covered database normal system call sequences ffl definition normal behavior distinguish different kinds programs 
ffl definition normal detect anomalous behavior section reports preliminary answers questions 
experiments focus sendmail report data lpr 
sendmail program sufficiently varied complex provide initial test documented attacks sendmail testing 
successful sendmail conjecture successful privileged unix processes 
data date generated sun running versions sunos included sendmail 
package version gather information system calls 
building normal database idea collecting traces normal behavior sounds simple number decisions regarding kind normal behavior appropriate 
specifically generate artificial set test messages exercises normal modes sendmail monitor real user mail hope covers full spectrum normal spirit approach 
question especially relevant sendmail behavior varied 
fail capture sources legal variations easier detect intrusions unfair test false positives 
elected suite artificially constructed messages included normal variations possible 
messages produced combined trace length system calls 
window size messages produced database entries entry corresponds single pair system calls lookahead value read legal successor open position 
normal database defined decision measure new behavior determine normal abnormal 
easiest natural measure simply count number mismatches new trace database 
report counts raw number percentage total number matches performed trace reflects length trace 
ideally numbers zero new examples normal behavior jump significantly abnormalities occur 
real system threshold value need determined behavior said normal deemed anomalous 
study simply report numbers action making binary decision 
normal database covers variations normal mismatches principle significant 
returning earlier questions size normal database interest reasons 
database small defines compact signature running process practical check real time process active 
conversely database large approach expensive line monitoring 
second size normal database gives estimate variability normal behavior sendmail 
consideration crucial variability normal preclude type behavior msgs 
message length number messages message content subject sender receiver different forwarding bounced mail queuing vacation total table 
types number mail messages generate normal database sendmail 
detecting anomalies 
worst case possible sequences length show legal normal behavior anomalies detected 
related question normal behavior sampled provide coverage set allowable sequences 
procedure build normal database 
enumerate potential sources variation normal sendmail operation 

generate example mail messages cause sendmail exhibit variations 

build normal data base sequences produced step 
continue generating normal mail messages recording mismatches adding normal database occur 
considered variations message length number messages message content text binary encoded encrypted message subject line sender receiver 
looked effects forwarding bounced mail queuing 
lastly considered effects variations cases remote local delivery 
test generated databases different window size 
database incorporates features described producing zero mismatches mail features 
table shows messages type generate normal databases 
began message length tried different message lengths ranging line bytes 
selected followed similar procedure generate normal database lpr obtained database normal patterns 
shortest length produced varied pattern system calls bytes standard message length remaining test messages 
similarly number messages sendmail run sent message traced sendmail sent messages tracing sendmail forth messages 
intended test sendmail response bursts messages 
tested message content sending messages containing ascii text data data pgp encrypted file 
case number variations tested single default selected moving stage 
messages constituted corpus normal behavior 
reran set standard messages different os sendmail cf variant tried generating normal database tailored exact operating conditions sendmail running 
features considered little effect number messages message content subject line senders receivers queuing 
unusual features forwarded mail bounced mail affected remote traces far local traces 
shows new patterns added database time normal sendmail run 
data shown system calls worth behavior performed runs system calls data shown essentially zero mismatches 
variability behavior sendmail system call level smaller expected 
ask percentage total possible patterns sequences length covered normal database 
example database completely full possible patterns recorded normal system calls hardly surprising new patterns seen time 
discussed earlier variability useless identifying anomalous behavior 
consequently goal find database small respect space possible patterns 
initial data encouraging 
estimate sendmail database described covers theta gamma total possible patterns system calls sequences built possible system calls unix just invoked sendmail extremely small fraction 
somewhat misleading sendmail program capable generating sequences 
accurate comparison database contained patterns sendmail possibly produce 
require detailed analysis sendmail source code area investigation 
process sendmail ls ls ls ps ps ux finger ping ftp pine httpd table 
distinguishing sendmail processes 
column lists numbers percentage abnormal sequences labeled number abnormal sequences labeled typical trace process compared normal database sendmail 
columns labeled refer sequence length window size analysis 
sendmail data show misses sendmail compared database 
distinguishing processes determine behavior sendmail compares processes tested common processes normal sendmail database entries 
table compares normal traces common processes sendmail 
processes significant number abnormal sequences approximately sequences length actions perform considerably different sendmail 
tested normal database lpr achieved similar results data shown 
lpr shows separation shown presumably smaller program limited behavior 
results suggest behavior different processes easily distinguishable sequence information 
anomalous behavior generated traces types behavior differ normal sendmail traces successful sendmail intrusions traces sendmail intrusion system calls 
building normal database 
graph shows new patterns added database time 
running artificially constructed set standard messages wide variety normal behavior seen early part run system calls 
time virtually new patterns encountered normal sendmail conditions 
data concatenation logs generate normal database 
attempts failed traces error conditions 
cases compared trace normal sendmail database recorded number mismatches 
addition tested successful lpr intrusion compared trace normal database lpr 
table shows results comparisons 
row table reports data typical trace 
cases conducted multiple runs intrusion identical nearly identical results 
date able execute trace attacks syslog attack script decode alias attack 
script uses special command line option cause sendmail append email message file 
script file rhosts local user may obtain root access 
syslog attack uses syslog interface overflow buffer sendmail 
message sent sendmail victim machine causing log long specially created error message 
log entry overflows buffer sendmail replacing part sendmail running image attacker machine code 
new code executed causing standard root owned shell attached port 
attacker may attach port leisure 
attack run locally remotely tested modes 
varied number commands issued root successful attack 
older sendmail installations alias database contains entry called decode resolves unix program converts binary file encoded plain text original form name 
respects absolute filenames file bar uu says original file home foo rhosts bar uu attempt create foo rhosts file 
sendmail generally run semi privileged user daemon email sent decode overwrite file system file world writable decode alias entry allows files modified remote user 
anomaly syslog remote remote local local decode sm sm forward loop table 
detecting anomalies 
table shows results tracing sendmail lpr various anomalous situations successful intrusions syslog decode unsuccessful intrusions sm sm abnormal errors forward loop 
data attack show results tracing sendmail tracing 
column indicates percentage abnormal sequences typical intrusion column indicates number abnormal sequences 
attack script uses lpr replace contents arbitrary file 
exploit uses fact older versions lpr different names printer queue files remove old queue files reusing 
attack consists getting lpr place symbolic link victim file queue incrementing lpr counter times printing new file overwriting victim file contents 
results attacks shown table 
exploit clearly detected anomalous sequences length 
likewise syslog attack clearly detected run anomalous sequence rate varying sequence window 
decode attack detectable lpr attack detected 
second source anomalous behavior comes unsuccessful intrusion attempts 
tested remote attack scripts called sm sm 
sunos patches prevent particular intrusions 
results shown table 
percentage abnormal sequences low range successful attacks 
error conditions provide third source anomalous behavior 
general desirable error conditions produced deviation normal intrusions detectable 
case studied local forwarding loop observed excluding decode lpr exploits 
forwarding loop occurs set home forward files form logical circle 
considered simplest case setup email address forward file foo host bar host bar host foo host forwarding loops malicious adversely affect machine performance hundreds messages bounced machine machine 
results reported table 
differ normal small clear percentage 
discussion preliminary experiments suggest short sequences system calls define stable signature detect common sources anomalous behavior sendmail lpr 
measure easy compute relatively modest storage requirements plausibly implemented line system kernel checked system call processes running root 
scheme site generate normal database local software hardware configuration usage patterns 
achieved standard set artificial messages build normal database completely determined local usage patterns 
combination effective 
data reported preliminary 
addition testing processes especially common routes intrusion extend sendmail experiments ways 
include testing additional sendmail exploits conducting systematic runs sendmail cf variants testing effect system configurations normal behavior sendmail 
area study database normal behavior example choose behavior trace 
especially relevant sendmail behavior varied 
fail capture sources legal variation subject false positives 
hand allow different databases different sites variation desirable customizations local conditions satisfy uniqueness principle stated earlier 
study normal behavior sendmail running regularly mail server 
real world data help confirm nature sendmail normal behavior practice especially compared set artificial messages 
approach predicated important properties sequence system calls executed program locally consistent normal operation unusual short sequences system calls executed security hole program exploited 
believe chance condition met programs simply code programs static system calls occur fixed places code 
conditionals function calls change relative orderings invoked system calls necessarily add variation short range correlations 
optimistic second property 
program enters unusual error state attempted break error condition executes sequence system calls covered normal database notice attack 
code replaced inside running program intruder execute sequence system calls normal database expect see misses 
highly successful intruder need fork new process order take advantage system 
fork occurs detectable 
intrusion fit categories method certainly current definition normal 
example expect detect race condition attacks 
typically types intrusions involve stealing resource file created program running root program chance restrict access resource 
root process detect unusual error normal set system calls defeating method 
important avenue attack require revised definition self 
second kind intrusion case intruder user account 
user profiles potentially provide coverage class intrusions detectable root processes 
method describe provide cryptographically strong completely reliable discriminator normal abnormal behavior potentially provide lightweight real time tool continuously checking executing code frequency execution 
achieve reliable discrimination need ensure method flagging sequences abnormal produce false negatives false positives 
currently record number absolute misses monitored process normal database percentage misses total number calls trace 
exploits studied short terms length time anomalous behavior takes place 
appropriate measures especially line system length trace indefinitely long 
related question choice pattern matching rule 
currently monitor presence absence patterns relative frequency 
matching criteria tried 
example represent possible sequences legal system calls markov chain define criterion expected frequencies 
returning larger question build artificial immune system computer reported constitutes initial step direction 
identified signature self stable wide variety normal behavior sensitive common sources anomalies 
definition provides unique signature identity different kinds processes 
second form identity possible method collect normal traces allows unique database site 
successful intrusion site necessarily successful sites running software increase chance site noticing attack 
networks computers currently vulnerable intrusions part software run methods protect 
behavioral notion identity goes simple checksum login password ip address considers dynamic patterns activity just static components 
current system long way having capabilities natural immune system 
definition self basis lines 
example partial approximate matching immune system line learning case affinity maturation negative selection 
immune system uses host different mechanisms protection specialized deal different type intruder 
computer immune system mimic incorporating additional mechanisms provide comprehensive security 
example possible include kumar misuse intrusion detection methods form memory cells store signatures known intrusions 
provision definition self change time natural immune system continually protective cells molecules 
outlines approach intrusion detection quite different efforts date appears promising simplicity practicality 
proposed method defining self privileged unix processes terms normal patterns short sequences system calls 
shown definition compact respect space possible sequences clearly distinguishes different kinds processes perturbed different classes anomalous foreign behavior allowing anomalies detected 
results preliminary attacks method able detect 
computationally efficient monitor short range orderings system calls technique potentially provide basis line computer immune system consisting detection mechanisms inspired human immune system derived cryptographic techniques traditional intrusion detection systems 
acknowledgments authors david ackley patrik haeseleer andrew arthur maccabe kevin mccurley nelson minar helpful discussions ideas criticisms 
jim supporting need fiddle systems larry rodgers computer emergency response team cert helping syslog attack 
idea developing computer immune system grew ongoing collaboration dr alan perelson santa fe institute experiments performed computer facilities expertise cert 
supported national science foundation iri office naval research interval research 
lgm 
lgm advisory unix sendmail dec 
www lgm org advisories html 
lgm 
lgm advisory unix syslog aug 
www lgm org advisories html 
lgm 
lgm advisory unix lpr aug 
www lgm org advisories html 
anderson valdes 
generation intrusion detection expert system nides summary 
technical report sri csl computer science laboratory sri international may 
cert 
sendmail vulnerability 
ftp info 
cert org pub cert advisories ca 
sendmail vulnerabilities february 
cert 
sendmail vulnerability 
ftp info 
cert org pub cert advisories ca sendmail vulnerability august 
cert 
syslog vulnerability workaround sendmail 
ftp info cert org pub cert advisories ca syslog october 
denning 
intrusion detection model 
ieee transactions software engineering los alamos ca 
ieee computer society press 
fink levitt 
property testing privileged programs 
proceedings th annual computer security applications conference pages december 
forrest smith perelson 
genetic algorithms explore pattern recognition immune system 
evolutionary computation 
forrest perelson allen 
discrimination computer 
proceedings ieee symposium research security privacy los alamos ca 
ieee computer society press 
fox henning reed 
neural network approach intrusion detection 
proceedings th national computer security conference pages washington october 
hightower forrest perelson 
baldwin effect immune system learning somatic 
belew mitchell editors individual plasticity evolving populations models algorithms 
addison wesley press 
ko fink levitt 
automated detection vulnerabilities programs execution monitoring 
proceedings th annual computer security applications conference pages december 
kumar 
classification detection computer intrusions 
phd thesis department computer sciences purdue university august 
kumar spafford 
software architecture support misuse intrusion detection 
proceedings th national information security conference pages 
kumar spafford 
software architecture support misuse intrusion detection 
technical report csd tr department computer sciences purdue university march 
lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
computer science laboratory sri international menlo park california february 
teng chen lu 
security audit trail analysis inductively generated predictive rules 
proceedings sixth conference artificial intelligence applications pages piscataway new jersey march 
ieee 
