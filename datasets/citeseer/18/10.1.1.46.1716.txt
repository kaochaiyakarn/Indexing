lbl fast level set method propagating interfaces david adalsteinsson james sethian lawrence berkeley laboratory department mathematics university california berkeley ca september supported applied mathematical sciences subprogram office energy research department energy contract de ac sf supported part applied mathematical sciences subprogram office energy research department energy contract de ac sf national science foundation arpa dms fast level set method propagating interfaces david adalsteinsson james sethian september method introduced decrease computational labor standard level set method propagating interfaces 
fast approach uses points close curve time step 
describe new algorithm compare efficiency accuracy standard level set approach 
fast level set implementation level set technique introduced track moving interfaces wide variety problems 
relies relation propagating interfaces propagating shocks 
equation front propagating curvature dependent speed linked viscous hyperbolic conservation law propagating gradients fronts 
central idea follow evolution function oe zero level set corresponds position propagating interface 
motion evolving function oe determined partial differential equation higher dimension permits cusps sharp corners changes topology zero level set describing interface 
details see 
level set approach compute analyze broad array physical mathematical phenomena including singularities mean curvature flow motivated supported applied mathematical sciences subprogram office energy research department energy contract de ac sf supported part applied mathematical sciences subprogram office energy research department energy contract de ac sf national science foundation arpa dms crystal growth dendrite combustion shape recognition minimal surface generation fluid problems triple junction problems 
addition formed basis theoretical investigations see 
review level set approach may 
generality approach attractive especially problems space dimensions problems sensitive dependence curvature surface tension problems problems complex changes topology 
dimensional interface evolving space dimensions level set algorithm method time step number points spatial direction 
drawback technique stems expense embedding interface zero level set higher dimensional function dimensional interface problem transformed dimensional problem 
space dimensions considerable computational labor required time step 
provide technique reduce computational labor involved level set technique space dimensions 
central idea build adaptive mesh propagating interface thin band neighboring level sets perform computation grid points 
programming complexity introduced savings computational labor significant desirable certain applications 
substantial reason focus level set update narrow band zero level set 
problems velocity field interface see example boundary integral crystal growth formulation 
problems construction appropriate speed function entire domain identifies speed function zero level set significant modeling problem known extension problem see 
performing narrow band update level set need construct speed function close zero level set 
standard level set method fast tube approach brief summary level set approach follows suppose wish follow evolution curve fl propagates direction normal speed match parameter family moving curves fl parameter family moving surfaces way zero level sets yield moving front 
remains find equation motion evolving surface 
signed distance function defined rectangle 
follow derivation 
fl closed non intersecting curve 
assume oe scalar function time zero level set oe curve fl assume oe distance curve fl plus sign inside fl minus sign outside 
example initial front fl circle plane radius oe surface 
level set oe flow gradient field speed speed function match desired speed function zero level set oe 
consider motion level set oe trajectory particle located level set oe particle speed direction normal level set speed function delta normal vector 
vector pointing outward initialization oe 
chain rule oe delta roe oe solution differential equation oe gamma oe time moving front fl just zero level set oe 
speed function front depends curvature curvature may expressed terms oe oe yy oe gamma oe oe oe xy oe xx oe oe oe called eulerian formulation front propagation written terms fixed coordinate system physical domain 
advantages approach 
underlying coordinate system fixed discrete mesh points move stability problems plagued lagrangian approximations may avoided 
second topological changes handled naturally zero level set oe need simply connected 
third obviously extends easily moving surfaces dimensions appropriate expressions curvature mean gaussian curvature 
initial value partial differential equation may approximated spatial temporal derivatives fixed grid 
evolution equation admits non differentiable solutions corners cusps propagating front care taken choose approximation gradient produces conservative scheme satisfying entropy solution posed 
details construction 
modify level set technique way saves substantial computational expense 
consider points close curve time 
way choose points lie distance away curve confining computations points gives tube domain containing zero level set see example tube surface associated 
construction cut nk width tube 
careful programming commensurate reduction required memory possible 
building evolving narrow band section overview fast level set algorithm 
signed distance function defined tube 
tube execute fast level set approach building tube oe function defined 
tube containing points distance curve maxdist calculating distance function select points 
calculate distance grid point initial curve require operations extend initial curve approximately grid points accurately calculate distance function points requires nk operations 
oe function initialized signed distance function 
zero level set corresponding front evolves ensure stays tube 
way reconstruct new tube curve time step 
requires time step time consuming procedure determining points domain deciding take differentials edge points deciding define surface points inside domain 
tube iterations possible devise technique trigger tube reinitialization front close edge domain 
life tube initialization oe design data structure speed calculations 
calculating derivatives particular care taken calculating partial derivatives edge points tubular domain 
calculate order derivatives central sided differences points domain 
calculate second order derivatives standard interior get values edges linear extrapolation newly computed values see page 
smooth domain simplify analysis exclude points sided differences order derivatives available ambiguity direction extrapolation 
higher order derivatives evaluated repeated second order derivatives 
rebuilding tube algorithm detect curve getting close edge tube 
detection wait curve moved domain accuracy near tube edges 
additionally forms constructing boundary derivatives result slight instability 
avoided careful monitoring evolving front 
new tube required reinitialize current zero level set initial curve case observed instability undo time step 
computational labor may decreased noting tube lying inside rectangular array 
front propagates inward full square array unnecessarily large smaller decrease memory computational time 
conversely front expanding matrix size increased sure curve remains computational domain 
border tube kept ease calculation signed distance reinitialization 
algorithm initial curve 
calculate signed distance tube curve 
possible decrease computation time step 

calculate update matrix domain evolve function oe tubular domain 

curve set distance tube boundary instability developing tube boundary reinitialize surface going step resize rectangular square calculations 

go step 
outline follows 
section provide details update tube front 
section timing results comparing narrow band approach full level set technique 
technical details consider different methods updating values inside tube 
methods differ treatment boundary values edge tube 
fixes values boundary second extends values interior edges 
cases common steps calculating signed distance finding reinitialize surface storage techniques 
extra technical difficulties extending values edges described 
calculating signed distance tube signed distance function defined distance point curve sign chosen positive point inside curve negative outside 
case want calculate function tubular domain 
outside domain value defined depending point lies inside outside curve 
far field value signed distance function useful finding correct signs reinitialization 
mentioned computing signed distance function grid point turn roles go curve evaluate distance function points grid lie close curve 
technique places example extension speed function curve tube 
keep array containing current minimum distances 
initially entries set equal maxdist 
segments curve tested square segment points square calculating minimum distance curve segment 
yields matrix calculated distance possible points truncated values distance maxdist 
order construct initial tube proceed follows 
initialize points grid equal maxdist curve segment curve take box curve segment includes points closer maxdist point box calculate square distance curve segment point grid put grid 
segments treated take square root entry produce final matrix 
set signs correctly 
curve zero level set known array sign signed distance function sign array point 
define points outside domain time step 
initialization oe field determine sign means example finding curve intersections 
barriers design scheme detect curve getting closer edge preset minimum 
obvious technique calculate exact distance curve edge 
approach expensive dominate time spent iteration 
note real need know exact distance need check distance certain minimum distance 
oe value surface point grid negative value lies outside curve lies inside curve 
curve away edge find point away edge initially inside curve outside vice versa 
initialize domain find level sets heights sigma maxdist gamma round coordinates nearest points grid sign points 
constructs barrier approximately maxdist gamma away initial curve away edge 
store sets points barrier lying inside values barrier lying outside 
time step check points changes sign 
able detect instability forming edge edge points changes sign 
put edge points bins lying inside curve lying outside curve 
storage data structures curve gets close edge reinitialize prepare data structure speed calculation lifetime tube 
data structure includes ffl information interior domain derivatives 
ffl information total domain updating surface 
ffl barriers deciding reinitialization required 
majority values domain interior points 
part takes place essentially contiguous memory handled way standard method consecutive list numbers array 
lists different length start different locations 
implementation matrix stored lay side side memory coordinate store start coordinate list 
example coordinate store meaning delta delta delta delta delta delta interior 
just store offsets points segment 
edges barriers store offsets point array done pointers allow resizing 
considerably faster storing pairs 
know dimensions array easy find sigma sigma memory know location 
benefits tube method memory 
implementation easier surface stored full size grid derived quantities curvature gradients stored interior points 
reduces memory consumption considerably 
technical details extensions tube values fixed straight forward 
fixed obtained interpolating interior need store information interpolation done 
implementation linear interpolation closest points direction 
possible choose points interior points cases ambiguous 
example interior point exterior point drawing clear interpolate surface point marked removing points tube possible choose direction points interior points edge points interpolated interior points process called smoothing 
smoothing implementation need remove points neighborhood contains patterns remove effectively construct byte map matrix 
neighborhood point represented bit number neighboring points assigned different powers 
bit operations find neighborhood looks contains specific pattern 
bit removing points neighborhood 
example number bin correspond neighborhood starting upper left corner going clockwise direction choosing extension direction distinguish different types edge points doing extension 
edge point belongs types 

point type exterior point neighborhood corner point diagonal exploited interior points doing extrapolation 

point type horizontal vertical direction exploited interior points doing extrapolation 

point type side points exterior point diagonal exploited interior points points previous types doing extrapolation 
edge points sorted types extrapolation performed finding values type type edge points finding values type edge points 
requires sweeps 
sweep done order 
split bins depending type point direction extension 
information stored domain barrier information 
sorting simple determine type assume coordinate 
loss generality assume neighborhood forms fact excluded neighborhoods 
case point type type second case point type type third case point type 
precisely ffl case 
gamma gamma interior points put type bin 

point interior go right go 
gamma interior 
put type bin 
ffl second case 
gamma interior point put type bin 

gamma form go right 
go left 
put type bin 
ffl third case possible go right interpolating points type type point type 
proof proof algorithm edge points involves cases somewhat tedious straightforward 
show done cases 
need introduce technique proving cases 
imagine interior point point inside tube 
point defined closest point front domain 
take point exterior draw line equidistant interior point 
know side line interior point 
take exterior points interior point restrict area lie 
argument call triangle argument show certain point interior point 
example assume neighborhood schematically want show neighborhood fact type assume 
triangle argument point directly get picture arrows indicate side line point lie 
symbol point triangle argument 
picture gives contradiction indicates lies inside triangle know lie maxdist away exterior points 
introduce notation argument write point add interior point top 
point include picture notation example creates triangle lie 
note shape general rectangle 
note assumes point exterior point 
remove edge points necessarily true 
cases points side exterior points reduces area lie 
proof take neighborhood 
similar neighborhood looks point type possible extrapolate interior points going right 
point type 
case proof consists diagram cases similar 
results order method standard level set method step costs operations 
step tube method costs nk operations width tube 
time step calculate derivatives nk points update array nk points 
domain costs nk bulk computing signed distance tube 
sorting points different edges barriers costs nk 
calculation signed distance fairly simple calculation constant front nk fairly small 
signed distance calculated infrequently 
practice insignificant amount time calculate signed distance compared evolving surface 
topological changes figures run tests show ability change topology preserved 
approximately timesteps plotted curve 
reinitialized roughly times plotted curve 
tube radius cells examples approximately 
movement curvature start circle radius shrink curvature 
exact solution shows curve vanishes 
compare exact solution computed solution times compare extinction times 
estimate distance exact solutions calculate area path get average radius 
run test runs dx equal 
step sizes compute tube width cells tube width units 
comparison run test standard level set technique rectangular array 
results tables 
movement constant speed consider initial circle radius propagating outward speed perform tests 
time step fixed tests 
results tables 
alternate methods analyze variations method approach calculate derivatives interior 
calculate update matrix derivatives interior extend result edges get update matrix 
approach extension determine values derivatives domain 
derivatives produce update matrix domain 
approach fix values edge calculate update matrix interior 
description terms tables type gives tube radius cells cells path allowed move reinitialized 
timings execution time seconds 
number time took run second time required run 
dimensions dimension square matrix 
applicable tube method number points changes reinitialization 
stops error stopping time 
circle vanish numerical curve necessarily vanish exactly time 
extra time steps took vanish 
absolute time steps 
total time took curve vanish measured seconds 
number times domain reinitialized 
number times reinitialize curve gets close edge domain 
second number due instability edge 
error difference exact radius calculated radius 
measured radius exact radius error 
comparing different methods see keeping values fixed edges disastrous evolving curvature 
calculate update matrix derivatives interior extension get values edges get instability edges 
calculate derivatives extensions second order derivatives domain get instability edges 
best approach calculate derivatives interior standard compute update interior extend values edges 
dx dt timings dimensions stops total error table circle shrinking curvature square type dx timings stops total error case smoothing update case smoothing derivatives case fixed boundary table circle shrinking curvature tube 
dx dt timings dimensions error table expanding speed square type dx timings error case smoothing update case smoothing derivatives case fixed boundary table expanding speed tube 
circles expanding constant speed 
spiral growing constant speed 
spiral shrinking curvature 
merriman osher motion multiple triple junctions level set approach 
appear comp 
phys 
chopp computing minimal surfaces level set curvature flow 
comp 
phys may 
chopp sethian curvature flow singularity development 
submitted publication experimental mathematics 
evans motion level sets mean curvature 
diff 
geom 
grayson heat equation shrinks embedded plane curves round points 
diff 
geom 
kimmel bruckstein sub pixel distance maps weighted distance transforms 
appear 
malladi sethian vemuri shape detection scheme level sets 
appear ieee journal image analysis 
mulder osher sethian computing interface motion compressible gas dynamics 
comp 
phys jun 
osher sethian fronts propagating curvature dependent speed algorithms hamilton jacobi formulations 
comp 
phys 
sethian curvature evolution fronts 
comm 
math 
phys 
sethian review numerical algorithms hypersurfaces moving curvature dependent speed 
diff 
geom 
sethian strain crystal growth 
comp 
phys feb 
zhu simulation front propagation large non dimensional flow disturbance intensities 
appear combustion science technology 
