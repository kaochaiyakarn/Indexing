xm functional language constructing manipulating xml documents erik meijer university utrecht mailto erik cs uu nl www cs uu nl erik mark shields oregon graduate institute mailto mbs cse ogi edu www cse ogi edu mbs xml widely adopted standard language describing static documents data 
application domains require xml cousin html ltered generated dynamically domain adopted language tasks hand 
languages ill suited unsafe interact poorly 
xm small functional language xml documents basic data types 
expressly designed task generating ltering xml fragments 
language statically typed guarantees document generates run time conform dtd uses type inference avoid need tedious type annotations 
language higher order polymorphic allows common programming patterns captured small highly reusable library 
furthermore language uses pattern matching xml fragments may components just easily constructed 
language series worked examples 
formal de nition implementation preparation 
submitted usenix annual technical conference xml language specifying structure content documents standard representing domain speci metadata 
examples include xhtml describing html documents mathml describing mathematical expressions xsl describing style sheets xml documents svg describing graphical diagrams soap describing parameter information remote procedure calls 
applications xml arise standard gains wider acceptance 
key success xml notion document conformance 
document content may checked document type de nition dtd ill formed documents rejected 
xml suited describing static documents lacks support dynamic documents documents produced unfortunately application domains modus 
internet applications sql xql perform queries relational structured database response client request 
information typically processed server side cgi perl scripts active server pages asp java server pages jsp generate xml html query results 
separate languages xsl css apply layout font color graphical features resulting document 
need mix static documents dynamic behavior resulted proliferation languages ill suited manipulating fragments xml languages perl represent xml fragments raw strings 
documents constructed concatenating strings elaborate regular expressions 
clearly low level 
contrast languages represent xml fully abstractly dom programs tangle calls dom library making dicult understand going 
representation 
languages connection generated document dtd lost 
left programmer ensure generated document conforming 
large application languages typically infeasible just language xml documents basic data type 
try systematically apply techniques modern typed functional programming language design eld xml document processing 
resulting language xm stems key connections dtds xm types document fragments xm values document conformance type correctness dynamic documents xm programs don suggest xm replace xml build 
way documents dynamic involves embedded scripts activated clientside response user interaction 
resulted proliferation languages java script java applets 
results unsatisfactory 
believe xm appropriate setting extended constructs staged computation 
extension allow client side actions coded type safe language confusion code executed 
shall concentrate core features xm defer extensions 
overview start informal xm giving examples constructing dynamic documents section expressions higherorder functions 
section show transform take apart documents pattern matching discriminators 
section describes spam lter xm main example 
section introduce polymorphism extensible sums discuss subtleties associated advanced features 
close short overview related 
constructing xml section ll introduce key features xm constructing documents dynamically 
xml consider simple dtd describing mail messages subject body message element declaration describes xml document tree root children consist element followed zero bcc elements followed optional subject nally body 
primitive data type consider pcdata stands parsed character data character strings embedded elements 
bodies element declarations resemble arbitrary regular expressions xml standard restricts non ambiguous 
ensures document may checked conformance deterministic glushkov automaton section 
message dtd non ambiguous 
example ambiguous dtd bar sequence foo belong bar bar 
formed document conforms message dtd erik mark erik glushkov automaton email dtd deterministic 
unfortunately space message include proof 
note strings text entered directly tags escaped elements nested sequence elements top message bcc subject body valid regular expression expanding de nition recipients bcc subject body dtds xm rst task represent dtds types xm 
trend xml syntax dtd declarations xml schema specifying document templates xsl 
think idea write programs manipulate de ne syntax syntax 
syntax semantics 
xm modeled modern functional languages sml haskell 
message dtd appears xm number type element declarations type recipients bcc element message recipients subject body element string element bcc string element string element subject string element body element string recipients declared type abbreviation occurrence types simply replaced type bcc 
technical reasons see section delimit sums braces brackets 
message declared element body type 
element declaration simultaneously introduces tag type written identically 
elements declared similarly 
types resemble regular expressions just xml 
primitive type string corresponds xml pcdata 
documents xm documents xm written essentially xml 
document text retain feature xml text primitive tags escaped 
contrast programming languages program terms taken primitive strings escaped 
example message gave valid xm value typed type message 
escaped expressions xml entities simple abstraction mechanism 
instance de ne entities refer erik mark escape 
entities parametrized values computed dynamically 
xml entities purely abbreviation device 
xm uses technique similar jsp asp arbitrary expression may embedded document escaping 
binding variables values type string construct document string erik string mark 
unfortunately 
notice elements strings unescaped expressions includes program top level strings put inside quotation marks type string elements hello world 
expressions hello world 
xm strings document fragments may construct embedded expression 
document fragment whatsoever may constructed embedded expression provided typed 
includes sequences tuples sums elements 
example inside elements may construct sequence elements simple juxtaposition 
non ambiguity constraint ensures know sequence starts ends 
inside expressions enumerate elements explicit list type elements 
expressions 
naming list paragraphs constitutes body example message paras paras paras glushkov automaton email dtd deterministic 
unfortunately space message include proof 
may shorten message notice type paras consistent message element 
explore section 
tuples similar sequences 
inside elements may construct tuple elements simple juxtaposition 
inside expressions enumerate elements explicit tuple parenthesis commas 
inside elements write omit optional element 
non ambiguity constraint ensures know element left 
inside expression explicitly tag value options discriminators just type subject 
elements 
empty expressions just 
inside elements write member sum 
non ambiguity constraint ensures know alternatives chosen 
inside expression explicitly inject value sum type bcc elements 
expressions inj 
inj 
details xm sum types section 
thing construct ill bracketed element expression nal result conceivably yield bracketed element 
example illegal 
rejected 
program syntactically valid possible type give element 
far dealt embedded expressions 
embedded side ecting commands 
firstly documents just values free side ects need leave expression world order create 
contrast example asp documents created side ect calls procedures cf jsp brackets 
secondly eld functional programming developed technique monadic programming allows commands treated rst class values 
show technique may applied context xm programs 
little sophistication escaped expressions may expression just simple kind constant expression previous examples 
power higher order functional language disposal 
de ning paras list paragraphs consider slightly primitive representation list string fragments concatenated explicit string concatenation operator string glushkov automaton message dtd deterministic 
unfortunately insufficient space message include proof 
order de ne body message convert entry string library provides function form map case type string string 
function string map yields function string 
re done build function embed string inside easily done anonymous function signals constructing function argument yielding paragraph 
putting map example shows great power comes treating xml documents ordinary values 
particular may de ne functions dynamically create document fragments may created dynamically 
notice expression map appeared escape contained document contained embedded expression 
practical bounds static limit nesting elements expressions 
contrast asp jsp inherent notion document asp java jsp world 
escape re cold 
typedness approaches dynamic document generation provide guarantee generated documents con rm dtd 
usually value embedded expressions just inserted strings 
asp instance write script javascript syntax injects expression wrong type document generate syntactically invalid html 
response write strange response write 
asp processor happily run program send resulting html client 
xml entities lack protection strong type system 
entity just abbreviates piece string possible construct documents non formedness discovered dynamically parsing document mark 
important lessons learned software engineering catching errors early extremely important 
strong static typing ective means catch errors early viewed light fact popular scripting languages untyped disappointing 
xm type checker reject attempts build non conforming document constructed dynamically 
example rejected ill typed type error term type incompatible context type string type checker takes advantage constraint type checking elements embedded expressions glushkov automaton 
xml automaton transition tags automaton transition types 
suppose explicitly construct list recipients follows explicitly building sequence sum type inj recipients bcc recipients inj erik inj mark function explicitly constructs subject value string string subject 
just expression erik bill xm type checker runs glushkov automaton message body checking child appropriate type 
case automaton wants recognize element type zero elements type bcc possibly subject nally body 
automaton encounters recognizes zero elements type bcc expression recipients type bcc 
value recipients spliced guaranteed consist zero bcc elements 
similarly automaton recipients list nished expression type subject erik erik mark bill 
principle type checker uses standard technique checking validity xml documents extended take care embedded expressions 
see shortly section polymorphic functions documents life little complicated 
idea static type checking applications xml 
case server side dynamically generated documents contain embedded client side scripts 
example document may contain form embedded scripts entry validation 
case important guarantee resulting document correct browsers savvy bad html clever executing bogus script 
full xm language notion typed staged computation provide solid guarantees type correctness dynamically generated script fragments 
patterns discriminators generating documents scratch applications create new documents inspecting transforming documents 
xm pattern matching sum discrimination dissect documents 
patterns consider function match element return body string 
xm may written pattern just variable function argument string say variable bound function 
expression hello world 
evaluates string hello world 
get body message de ne similar function matches message returns list paragraphs body 
novelty nested pattern match inside children element message body variables subject body bound pattern 
technical reasons give xm type checker hints types rst variables pattern ambiguous 
example spam lter time put pieces substantial example 
nd messages mailbox morning hotmail com mark need home workers 
sick earning amount cash research student 
think re exploited child labor 
get rich fast comfort home 
need honest reliable research students stuff mail envelopes 
simple phd manage 
sure beats flipping 
get rid 
standard xm library contains case map string string concat string string string string words string string contains string string bool filter message bool message message bool bool words function breaks string list words contains ws ws yields true word ws appears ws filter discards element list yields false 
combining library functions xm pattern matching facilities easily construct function scan mailbox messages containing suspicious words spam 
rst need function extract normalise words message body message string words concat map denotes function composition yields 
de ning complicated functions composition simpler functions typical idiom functional programming 
similar spirit unix style writing complex shell scripts piping simpler scripts 
may think back front 
function easily de ne test lter away spam messages mailbox string money rich 
message bool message contains message message message filter imagine long code look xml syntax xm functions 
discriminators pattern matchers elements may combined order discriminate particular values 
example bool erik true false functions elements combined 
rst yields true applied value erik 
yields false 
combination function tests self addressed element 
discriminating function functions tried turn match argument body rst matching function evaluated 
functions type 
may discriminate alternatives sum type 
suppose want discard bcc recipients message 
rst de ne function combining functions pattern match bcc elements respectively single function accepts argument type bcc bcc bool true false depending actual type argument function alternatives chosen 
example erik evaluates true 
try calling argument type bcc type checker complain 
desired function discard bcc recipients simple recipients recipients filter function 
result type distinct argument type 
polymorphism far examples assuming library functions may reused different types 
example silently function map types map string string map string string practice give functions map type general type describe polymorphism map forall type type 
type variables kind type see section forall type type tells function map type arbitrary types notice types map instances general type 
common library functions exploit polymorphism include filter forall type 
bool contains forall type 
bool polymorphism essential utility xm users required rewrite functions time wished manipulate new element types 
polymorphism xm utility inheritance objectoriented languages tremendous aid reuse 
similar vein parameterize element type declarations types 
allows de ne generic elements element just may reuse functions types may reuse elements types 
done na 
regular expression inference 
far type annotations examples completely optional 
aid readability program xm type checker just comfortable inferring 
allow parameterized elements run severe type checking problems 
example type assigned strange problem possibilities subject string interpreting document element list type subject element list type string 
subject subject string interpreting document element list type subject subject int followed empty list arbitrary type subject subject string interpreting document empty list arbitrary type followed element list type subject subject string 
obviously best 
need provide type checker clues 
solution construct polymorphic elements explicit expressions 
element type means write strange problem alternatively tell type checker monomorphic non ambiguous instance see section type intend element 
case write strange problem course abbreviate element type synonym write type subject string strange problem ambiguity seen important condition element types non ambiguity 
related problem polymorphic elements determine element body type non ambiguous type suciently monomorphic 
look example polymorphic element element de ne function removes head lists pair tails tail forall type 
polymorphic function returns rst element sequence 
give tails fully polymorphic type tails forall type type 
instances string string ambiguous 
quali ed types situation reminiscent classical polymorphic equality problem languages miranda sml 
impossible na de ne truly polymorphic equality function equals forall type bool determines type values type equivalent 
example de ne equality function types user de ned types 
elegant way restrict polymorphism types admit equality 
standard ml type variables range types admitting equality written ml type equality function equals bool haskell type classes generalize idea allowing arbitrary type predicates constrain polymorphism type variables 
haskell write type equals equals eq bool indicates function equals instantiated types predicate eq holds 
happily reuse approach introduce type predicate deterministic restricts non ambiguous type 
give correct type tails function tails forall type type 
deterministic attempt tails ambiguous type caught type checker 
precise details typing rules sati ability deterministic predicate outside scope 
extensible sums recall function de ned earlier bcc bool true false function speci nicer polymorphic rest sum write true false question type give 
functional programming community provides solution 
type constants int bool string type variables type expressions int bool 
type expressions similar program expressions natural ask type type expressions 
call kinds 
example kind type int type option type constructor list type constructor kind type type function space constructor kind type type type 
note valid type assign kind 
deal extensible sums xm introduce new kind row extensible rows constant empty kind row binary sum extension operator kind type row row sum type constructor kind row type 
example int type int empty row int empty type abbreviate sum types omitting trailing empty 
seen type variables range types 
express type type variable ranging rows forall row 
bcc bool problem instantiate int empty argument type int int empty ambiguous 
solution problem simply extend deterministic type predicate reject ambiguous sum types forall row deterministic bcc bcc bool true false related expressive language far limited really suited real world applications 
extend xm support full xml particular element attributes 
believe implicit parameters elegant mechanism dealing attributes 
remarked staged computation type safe separation client side computation 
interact real world full xm support monads 
important topic research generic document transformations 
approach hinze promising respect 
programming large need name spaces modules 
interesting ideas specifying layout constraints real line 
xml related functional programming languages combinator libraries abound 
wallace runciman propose interesting set combinators transform xml documents represented haskell data types 
expression language xm close haskell straightforward implement combinators 
functional programming toolkits processing xml tony 
wadler mentions unpublished language proposals 
attempt typed generation dynamic documents sandholm schwartzbach 
deal monomorphic html documents 
partially supported dutch science foundation nwo contract allowed mark visit erik air force contract department defense allowed erik visit mark 
boehm 
software engineering economics 
prentice hall 
br klein wood 
unambiguous regular expressions sgml document grammars 
technical report computer science department university western ontario london ontario canada nov 
document object model dom level speci cation 
www org tr rec october 
jones 
polymorphic type system extensible records variants 
technical report tr university nottingham languages programming group department computer science nottingham ng rd uk nov 
group 
soap simple object access protocol 
msdn microsoft com workshop xml general soap asp 
hinze 
new approach generic functional programming 
popl 
jones 
quali ed types theory practice 
cambridge university press 
jones 
eds 
report language haskell 
www haskell org report february 
khare editor 
scripting languages automating web volume world wide web journal 
reilly associates spring 
landin 
programming languages 
cacm march 
lewis meijer launchbury 
implicit parameters dynamic scoping static types 
popl 
lie bos 
cascading style sheets edition 
addison wesley 
lindig 
tony xml parser pretty printer 
www cs tu bs de people lindig software tony html 
mathematical markup language mathml speci cation 
www org tr july 
neumann 
processing structured documents sml 
st scottish functional programming workshop 
www informatik uni trier de neumann papers sfp pdf gz 

programming world wide web pages scheme 
www cs auc dk scheme 
cable 
java server pages speci cation 
java sun com products jsp index html 
emy 
type inference records natural extension ml 
technical report department computer information science university pennsylvania philadelphia pa 
sandholm schwartzbach 
type system dynamic web documents 
popl 
shields sheard jones 
dynamic typing staged type inference 
conference record popl th acm sigplan sigact symposium principles programming languages pages san diego california jan 
scalable vector graphics svg speci cation 
www org wd svg august 
taha 
benaissa sheard 
multi stage programming axiomatization type safety 
lecture notes computer science 
tennent 
programming languages 
prentice hall 
wadler 
monads functional programming 
jeuring meijer editors advanced functional programming volume lncs 
springer verlag 
wadler 
markup languages invited talk 
usenix workshop domain speci languages october 
wadler blott 
adhoc polymorphism ad hoc 
th acm symposium principles programming languages austin texas january 
wall christiansen schwartz 
programming perl edition 
reilly associates 
wallace runciman 
haskell xml generic combinators type translation 
icfp 
wand 
complete type inference simple objects 
symposium logic computer science ithaca ny pages 
ieee june 
corrigendum third annual symposium logic computer science page 

asp technology feature overview 
msdn microsoft com workshop server asp asp august 
xhtml extensible hypertext markup language reformulation html xml 
www org tr xhtml november 
xml schema part structures 
www org tr xmlschema november 
extensible stylesheet language xsl speci cation 
www org tr wd xsl april 
