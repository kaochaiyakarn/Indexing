portable run time system sr concurrent programming language gregory benson ronald olsson department computer science university california davis ca cs ucdavis edu tel fax run time system glue compiler generated code underlying platform 
addition having significant impact performance run time systems largely responsible degree portability language implementation 
concurrent programming languages particularly dependent threads communication vary greatly platform platform 
presents current developing portable run time system sr programming language 
argue portability addressed multiple layers run time system just single virtual machine layer 
detailed design issues run time system especially respect thread interface 
performance results linux thread packages 
focused sr implementation approach general observations applicable implementations concurrent programming languages 
implementation concurrent programming language parallel distributed consists run time system rts addition compiler 
run time systems simplify code generation implement dynamic aspects complex language elements interface underlying operating system architecture 
gap semantics language underlying platform large accommodate direct translation source code object code 
run time system provides interfaces manipulating internal representation language elements 
compiler code generator responsible producing code properly invokes run time system interfaces 
sequential languages require run time systems reasons concurrent languages typically require extensive support threads communication 
run time systems large impact performance portability programs written concurrent programming languages 
performance primary concern language implementations portability increasingly important target platforms parallel distributed computing grows diverse 
current trends hardware indicate convergence networks workstations shared memory multiprocessors range software support thread packages communication interfaces operating system kernels remains flux 
addition portability reason concurrent programming language program portability limited actual number platforms supported language implementation 
common approach achieve portability define set interfaces low level functionality threads communication 
interfaces define virtual machine accessed higher level modules run time system 
platform dependencies restricted implementation virtual machine 
panda nexus approach :10.1.1.38.4298
systems demonstrated appears proceedings workshop run time systems parallel programming ir department mathematics computer science pages vrije universiteit amsterdam netherlands april 
conjunction th international parallel processing symposium ipps 
rts denote run time system run time support portability platforms support 
system developed finite number platforms 
implementor wants port language platform virtual machine layer support port virtual machine 
languages utilize virtual machine functionality approach may effort implementing language directly top new platform 
observation conjunction desire directly utilize different operating system interfaces led tackle portability isolating system dependencies specific components run time system 
approach philosophy methodology complementary virtual machine approach 
sr concurrent programming language vehicle explore various run time support issues 
particular investigating design implementation sr run time support top microkernel operating systems 
combined project sr implemented panda prompted develop flexible run time system intended run wide range platforms 
presents approach portability sr run time system general observations portable run time systems experience 
addition presenting specific design implementation details run time system give performance results thread packages custom user level package mit pthreads linuxthreads 
results reveal general performance implications thread packages performance differences thread package functionality 
focused sr implementation approach general observations applicable implementations concurrent programming languages 
rest organized follows 
section discusses various approaches dealing portability run time systems 
section briefly describes sr concurrent programming language 
section presents specific design issues encountered portable version sr runtime system 
section reports performance sr implemented various thread packages top linux operating system 
section offers concluding remarks directions 
dealing portability portability complicated software engineering problem handled different ways different types programs applications compilers operating systems 
example gnu compiler uses register transfer language simplify retargeting back different architectures 
ways run time system similar operating system kernel 
run time system provides set interfaces basic services 
interfaces abstraction underlying operating system architecture 
users rts interfaces compiler generated programs language interpreter 
programs achieve reasonable portability adhering ansi posix library functions 
concurrent programming languages extensive threads communication interfaces 
unfortunately interfaces threads communication vary greatly platform platform making difficult implement run time system multiple targets 
true despite standardization efforts mpi pthreads 
clear standard interfaces desirable 
example observed current thread interfaces including pthreads flexible 
portability viewed perspectives portability clients programs portability desired required portability providers programs libraries interfaces designed provide portability 
infeasible portability clients completely rely portability providers particular provider usually targets subset possible platforms 
clients take measures ensure multiple providers utilized 
example gnu program tool aid portability clients assessing capabilities target platform appropriate automatic adjustments source code 
tool necessary effectively target large number different platforms manual techniques result unwieldy number conditional compilation macros making code unmanageable 
generally take point view language implementation portability client concerned techniques allow language implemented quickly possible performance large number target platforms 
tools help manage portability extent especially domain run time systems proper structuring result portability 
section identifies structuring approaches dealing portability run time systems virtual machine approach component approach 
virtual machine approach efforts aim provide portable run time support utilizing standardized interfaces providing portable virtual machine see 
virtual machine simply layer run time system kernel primitives hardware 
layer provides abstraction underlying operating system architecture 
operating system architecture virtual machine layer run time system compiler generated code virtual machine approach panda system portable platform supporting parallel programming languages :10.1.1.38.4298
platform consists layers system layer panda layer 
system layer interfaces operating system kernel primitives level kernel dependent 
panda layer provides virtual machine supporting run time systems 
virtual machine supports threads message passing remote procedure call totally ordered group communication collective communication 
panda targets runtime systems provide distributed shared data distributed shared objects 
nexus distributed thread library provides virtual machine layer similar panda 
nexus designed back concurrent programming languages cc 
provides support creating threads processor specifying synchronization threads node communication threads active message paradigm 
component approach component approach illustrated attempts separate run time system functionality system dependent interfaces individual modules various forms component approach proposed 
basic idea isolate system dependencies components specialized platform basis 
note approach complementary virtual machine approach system dependent components may implemented terms virtual machine interfaces particular platform 
perspective language implementation bottom layer particular implementation chooses layer 
operating system architecture component rts component rts component compiler generated code threads communication rts component approach component general entity encapsulates type functionality 
place constraints components example component implemented object oriented class 
due performance requirements necessary avoid traditional black box techniques 
consequence components may exposed state manipulated components 
specific example consider run time system supports processes semaphores see 
implementations processes semaphores may implemented terms low level depicts levels components feasible arbitrary hierarchies components 
condition variables thread package processes semaphores low level semaphores thread package processes semaphores component specialization interfaces provided thread package 
particular processes may implemented threads semaphores may implemented condition variables 
basic thread primitives exist thread packages 
advanced thread package operating system kernel may provide efficient semaphores 
right hand side illustrates specialization 
example simple handled virtual machine layer conditional compilation illustrates kind flexibility component approach provide 
component approach facilitates specialization components desirable minimize number specialized components 
specialized components means portable runtime systems 
idea performance optimizations specialization incur cost portability 
view portability achieved locally individual components 
refining vision component approach 
issues need resolved approach generally useful 
important concern determination specification dependencies components 
straightforward approach clearly document dependencies state shared components component specialized information needed replacement provided 
approach successfully flux operating system toolkit toolkit building kernels 
crucial concern mitigation specialization costs 
foresee technique corresponding tool helps track components compositions 
model technique kernel architecture specifying composing micro protocols 
domain kernel constrained communication protocols demonstrates different functional components combined produce high performance systems 
comparison virtual machine component approaches important understand differences virtual machine approach component approach relative merits 
virtual machine approach presents fixed interface runtime system 
interface results complexity system independent rts layer cornerstone portability virtual machine approach 
addition virtual machines designed extremely modular underneath fixed interface 
modularity results virtual machines easier port panda nexus modular designs :10.1.1.38.4298
fixed interface hide system dependent details may important implementation run time system 
language implementor codes fixed interface advantages virtual machine lost 
component approach offers greater flexibility specializing performance critical portions run time system 
addition depending particular virtual machine component approach may lead quicker development time new platforms low level functionality required run time system implemented 
true compared virtual machines nexus support abstractions may needed particular runtime system 
component approach initially may result complex run time systems flexibility specialization 
sr programming language sr language writing concurrent programs parallel distributed 
sr abstractions correspond modern hardware including shared memory multiprocessors networks workstations 
sr provide expensive abstractions distributed shared memory distributed shared objects provide simple consistent mechanisms expressing forms explicit communication 
sr syntax semantics allow programmer concentrate communication synchronization structure program having concerned low level interfaces interface definition languages 
higher level abstractions built top sr communication mechanisms 
operation operation capability physical machine virtual machine resource process sr programming model main language constructs resources operations 
resources encapsulate processes variables share operations provide primary mechanism process interaction 
sr provides concept address space called virtual machine simply vm processes execute address space share variables operations 
resources virtual machines dynamically created destroyed 
illustrates main sr language constructs 
operation considered generalization procedure name take parameters return result 
operation serviced different ways proc statements invoked ways call send 
proc resembles conventional procedure having parameters body invoking proc causes new process created service invocation 
statement allows existing process accept operation invocations processes 
operation capabilities serve pointers operations passed variables allowing creation arbitrary communication topologies 
design implementation issues impetus developing portable run time system grew projects sr panda 
investigating directly support sr run time system top mach microkernel 
likewise sr panda project sr run time system modified run panda portability layer :10.1.1.38.4298
projects started original sr implementation refer 
run time system implementation monolithic tightly coupled custom user level thread interface unix unix sockets 
evident different rts structure required facilitate implementations sr panda platforms 
sought approach portability allows adapt sr rts wide range environments including virtual machines panda microkernels direct hardware :10.1.1.38.4298
observations virtual machine approach led general principles component approach section 
section describes design implementation issues encountered developing portable run time system sr incremental approach realizing component approach focused primarily thread component run time system 
new rts structure restructuring rts identified system dependent components 
rts divided system independent system dependent components see 
structure iso virtual machines component system independent level represents sr virtual machine language construct virtual machines sense section operating system dependent interfaces threads network communication structure fully realize component approach described section separation system dependent independent components 
system dependent rts components invocations resources virtual machines processes semaphores networking threads generated code operating system libraries architecture operations system independent rts components rts structure threads sr program may processes executing concurrently 
rts sr process implemented thread 
threads different semantics depending thread package operating system 
portable run time system aware differences thread systems 
examining differences formed thread interface specialized specific thread systems 
technique results thread component specialized affecting dependent components 
section describes handle different thread characteristics briefly discusses issues involved network components 
interface low level thread calls implemented set macros avoid procedure call overhead affect basic structure thread component 
example pr macro takes pointer internal sr process structure creates thread information structure function address arguments stack 
cases macro simply implemented thread creation function call supplied thread system 
example mit pthreads defined follows define pr void pr thread interfaces may complicated implemented real function 
defined macro interfaces mutex variables condition variables data thread priorities thread manipulation functions 
thread scheduling important aspect thread system schedules threads preemptively 
presence preemption true multiprocessing requires rts reentrant 
internal rts state protected critical sections threads executing rts interfere 
thread packages allocate stack automatically thread creation time 
handle case rts allocate deallocate thread stack explicitly include stack address field process structure 
contrast non preemptive thread system requires run time system selectively yield thread execution threads scheduled 
rts custom user level thread package non preemptive scheduling 
variant called supports true multiprocessing certain platforms 
version sr locks protect rts data structures 
locks defined macros 
non preemptive thread system lock macros defined empty 
portable thread component takes advantage lock macros 
replaced blocking unblocking operations previously custom user level thread package mutex variables condition variables 
modified internal synchronization interfaces manner order target common synchronization mechanisms thread packages operating systems 
thread creation way thread created varies different thread systems 
usually thread creation routine takes pointer function executed new thread created single void pointer argument passed function 
arbitrary data passed new functions pointer argument passed function 
thread creation routines take additional parameters including stack pointer stack size thread attributes 
section hides details thread creation routine called 
process creation sr run time system occurs phases setup phase activation phase 
setup phase internal data structure called proc allocated filled appropriate values function start executing arguments passed pointer stack pointer owning resource information 
proc setup routine called activate proc 
activation routine calls passing actual function create new thread intermediate function passed 
intermediate function executed creation new process 
intermediate function created pointer associated proc data structure argument 
purpose function hide thread creation details rest run time system aids implementing sr semantics establishing common place internal administration required low level thread creation execute 
intermediate function performs basic tasks 
associates proc structure passed argument new thread 
thread packages accomplished data 
implementation association operation hidden macro 
second intermediate function calls actual function called designated proc structure arguments extracted proc structure 
calling convention conforms code generated sr compiler 
reasons intermediate function calling function created directly 
allows function called arbitrary number arguments 
thread packages allow argument passed 
second performs initial association proc structure thread 
association take place inside newly created function functions called directly necessarily result process creation 
feasible eliminate intermediate function having sr compiler generate functions take single argument argument extract arguments needed 
approach require function called bit specifying function called result process creation function called directly 
unclear modifications result efficient code case direct calls function additional dereference phase arguments additional conditional statement determine function called directly 
thread identification thread identification needed sr run time system associate proc structure thread 
association needed allow threads determine resource executing threads access resource variables support certain sr constructs debugging 
thread packages association accomplished thread specific data 
communication begun develop communication components sr run time system 
porting sr mach panda encountered different types communication mechanisms hidden easily rest run time system thread interfaces 
example uses network idle thread poll incoming packets 
panda implementation uses upcall receive packets mach implementation uses blocking thread wait packets 
networking paradigms requires specialization network component 
addition panda provides optimized remote procedure call specialize higher level system independent remote operation invocation code 
approach remove notion unix rts components 
enables easily target non unix platforms windows windows nt mach fluke 
difficult issue dealing portable underlying thread package operating system supports blocking threads 
underlying interfaces allow threads block operations rts greatly simplified 
rts incorporate extra bookkeeping manage threads blocked management requires involvement thread scheduler possibly idle thread similar network idle thread 
implementation performance assess portability performance new run time system built implementations various thread packages linux operating system 
thread packages include custom user level thread package thread package mit pthreads version beta linuxthreads version 
packages support different thread features 
table lists prominent features tested thread packages 
table refers custom thread package original sr implementation 
support row indicates thread system allows multiple threads invoke operations blocking entire program 
feature mit pthreads linuxthreads thread level user user user kernel scheduling non preemptive non preemptive preemptive preemptive support table thread package features comparing thread packages determine overhead new rts structure show costs associated different linux thread packages 
implementations panda threads provide performance numbers results directly comparable results thread packages :10.1.1.38.4298
implementations currently run architectures differ linux test machine 
addition ported run time system platforms dec alpha running linux decstation running ultrix 
microbenchmark mit pthreads linuxthreads local call optimized inter resource call new process inter resource call new process process create destroy semaphore pair semaphore requiring context switch table process synchronization performance microseconds windows windows nt registered trademarks microsoft table presents benchmark results uses key language level mechanisms 
test machine pentium mhz mbs ram running linux 
microbenchmarks section come set benchmarks designed evaluate performance sr concurrency mechanisms 
benchmarks run lightly loaded system results medians runs run consisted iterations depending benchmark 
benchmarks include program startup time rts initialization 
comparing performance results see cost new portability structure 
recall low level context switching code 
portable thread interface adds relatively little overhead process creation 
extra overhead primarily due intermediate function start sr processes discussed section 
mit pthreads linuxthreads perform considerably worse 
performance difference partially due added cost thread identification locking 
added cost thread identification locking seen local call benchmark 
local call requires locking thread identification requires pointer dereference 
mit pthreads linuxthreads local call includes time required access data 
mit pthreads global pointer thread identifier access thread specific data access data protected internal mutex variables 
linuxthreads current thread stack thread identifier mit pthreads internal mutex locks protect access thread specific data 
combined added cost thread identification locking rts data structures see section seen inter resource call new process benchmark 
thread identification needed associate current thread associated process structure entry function information passed argument 
order inter resource call generated code allocates new invocation block 
allocation pool protected lock 
locking required preemptive thread packages mit pthreads linuxthreads 
determined individual costs thread identification locking different thread packages 
comparing mit pthreads linuxthreads interesting offer preemptive scheduling mit pthreads user level implementation linuxthreads takes advantage linux kernels 
locking thread identification perform better linuxthreads uses stack identification complicated implementations thread specific data mutex locks compared mit pthreads 
linuxthreads performs worse mit pthreads process creation context switching kernel boundary crossed operations 
important note added process creation time context switch time may worth ability utilize true multiprocessors mit pthreads lacks 
new portable run time system sr concurrent programming language 
particular shown designed portable interface utilizing different thread systems 
interface incurs slight performance penalty 
believe approach necessary facilitate high degree portability diverse platforms including different virtual machine layers 
approach handling thread interfaces applicable concurrent programming languages 
reported performance new run time system implemented various linux thread packages 
results indicate relative merits costs associated custom user level thread package mit pthreads linuxthreads 
include development communication components 
addition microbenchmarks performance analysis macrobenchmarks applications 
intend pursue component approach structuring run time systems 
acknowledgments anonymous referees helpful suggestions 
partially supported united states national security agency university research program 
accetta new kernel foundation unix development 
proceedings summer usenix conference pages june 
andrews olsson 
sr programming language concurrency practice 
benjamin cummings publishing redwood city california 
andrews olsson nilsen townsend 
overview sr language implementation 
acm transactions programming languages systems january 
atkins olsson 
performance multi tasking synchronization mechanisms programming language sr software practice experience september 
bal kaashoek tanenbaum 
orca language parallel programming distributed systems 
ieee transactions software engineering march 
benson olsson 
microkernel support sr concurrent language 
proceedings international conference parallel distributed processing techniques applications pages sunnyvale ca august 
benson olsson pandey 
decomposition run time support concurrent programming languages 
proceedings workshop high level programming models supportive environments pages honolulu hawaii april 
held conjuction th international parallel processing symposium ipps 
benson olsson 
design microkernel support sr concurrent programming language chapter pages 
languages compilers run time systems scalable computers 
kluwer academic publishing boston ma 
szymanski editors 
ruhl langendoen bal kaashoek :10.1.1.38.4298
panda portable platform support parallel programming languages 
symposium experience distributed multiprocessor systems iv pages san diego california september 
usenix 
cooper draves 
threads 
technical report cmu cs carnegie mellon university department computer science 
ford flux project members 
flux operating system toolkit 
department computer science utah 
www cs utah edu projects flux oskit html 
ford hibler lepreau back 
microkernels meet recursive virtual machines 
proceedings second symposium operating systems design implementation pages seattle wa october 
usenix association 
foster chandy 
language modular parallel programming 
journal parallel distributed computing 
foster kesselman tuecke 
nexus approach integrating multithreading communication 
journal parallel distributed computing august 
haines 
designing lightweight threads substrate software 
proceeding annual technical conference unix advanced computing systems anaheim california january 
usenix 
hutchinson peterson 
kernel architecture implementing network protocols 
ieee transactions software engineering january 
institute electrical electronic engineers 
posix threads extension portable operating systems 
milind sanjeev krishnan joshua 
converse interoperable framework parallel programming 
proceedings th international parallel processing symposium pages april 
kiczales 
foil workshop open implementation 
technical report xerox parc 
www parc xerox com parc spl eca io workshop foil main html 
leroy 
linuxthreads 
sunsite unc edu pub linux docs faqs threads faq html 
mackenzie 

free software foundation edition 

mit pthreads 
www mit edu people proven pthreads html 
ruhl bal langendoen benson 
experience portability layer implementing parallel programming systems 
proceedings international conference parallel distributed processing techniques applications pages sunnyvale ca august 
mpi forum 
mpi message passing interface standard 
international journal supercomputing applications 
