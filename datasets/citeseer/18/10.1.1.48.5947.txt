process synchronization workflow management systems alonso agrawal el abbadi institute information systems department computer science database group eth zentrum university california santa barbara ch zurich switzerland santa barbara ca alonso inf ethz ch cs ucsb edu workflow management systems wfmss automate execution business processes allowing concurrent execution multiple process instances 
existing systems provide mechanism guarantee correct concurrent execution result possible coordinate synchronize different process instances 
part problem conventional techniques entirely suitable workflow environments 
databases locks basic mechanism 
operating systems achieved semaphores monitors 
approaches appropriate workflow applications 
method proposed enforce correct interleavings guarantee mutual exclusion defined user concurrent workflow processes 
proposed protocol takes advantage semantic constructs associated workflow management solve complex problems dealing inherited restrictions coarse granularity workflow specifications 
currently commercial products workflow area fry 
systems allow users control automate execution business processes distributed heterogeneous network 
business process sequence activities may correspond different application program may invoked different users different computing environments 
important note activities external wfms 
range databases spreadsheets word processors ad hoc programs 
manual activities phone calls meetings activities business process long way record results wfms 
cases ac completed author ibm almaden research center 
partially funded nasa california department transportation 
autonomous main task wfms scheduler coordinator starting execution activities order specified process providing necessary interfaces users applications 
workflow management systems operations coarse granularity generally operation corresponds entire application spreadsheet text editor session 
granularity control exercised starting terminating applications 
possible detect updates external datasets invocations programs difficult exercise control execution access data 
workflow management systems operations may conflict having common relationship concrete semantics business process 
believe problem address workflow management systems concurrency control synchronization 
examples abound different process instances coordinated avoid inconsistencies due concurrent accesses application 
matter guaranteeing exclusive access applications 
workflow processes sophisticated semantics associated interference patterns may vary different processes accessing applications 
notation operating systems application critical section processes may third process 
address problem propose combine ideas database elm operating system worlds 
basic idea couple synchronization mechanism scheduling algorithms wfms way activities started consistency guaranteed 
consistency specified way commutativity relationships ex warehouse allocation item data supplies update item location supplies arrival inventory update item pending orders bill account delivery schedule customer request check inventory reserve items bill account delivery schedule processes corresponding matrix allowed interactions pressed databases added complexity having express commutativity relations sequences operations individual operations 
scheduling performed way resembling operating system semaphores added complexity having provide mechanisms deal multiple views critical section 
activities executed set reset semaphores form signatures 
activity executed corresponding application appropriate type signature 
organized follows 
section motivates need synchronization workflow processes 
section presents model 
section presents proposed protocol 
section contains example execution protocol 
section discusses related section concludes 
motivation shows workflow processes different views accesses potentially interfering 
supplies arrival process executed new shipment item arrives 
involves reorganizing inventory updating amount available getting list pending orders billing corresponding customers arranging delivery items 
customer request process corresponds order placed user 
involves checking inventory reserving item billing customer arranging delivery 
third process warehouse allocation studies current distribution items different warehouses items demand delivery schedules 
processes interact different ways 
instance supplies arrival process appear atomic unit processes prevent new orders precedence pending orders avoid items moved different warehouse chance satisfy pending orders 
matrix expressed entries 
instances supplies arrival process see single atomic unit shown entry 
particular supplies arrival process may allow supplies arrival process execute operations update item step pending orders step 
customer request process presents different atomic units depending processes interacts 
cases interfering operations determined semantics type operation particular service resource accessed 
note maintaining integrity atomic units implies specification processes may interact keeping track transitive dependencies inherited dependencies process allowed disseminate partial results processes violation atomicity requirements 
model object resource service accessed invoked activities process 
simplicity notation similar databases bhg 
objects reside outside wfms semantics methods object considered access treated update 
interactions objects take place processes 
process total order method invocations operations objects 
processes organized process classes 
process class specifies ordering operations performed processes belonging class 
wfms controls operation started control actual execution operation operations executed applications outside system 
control process execution data structures algorithms described coupled scheduling algorithms wfms 
specification protected operations process class respect process class list points execution process process access objects accessed class protected operations respect class including 
example consider customer request process 
assume customer request supplies arrival 
assume inventory item billing account delivery plan 
specification op op op op ae indicates processes class operations op op process class appear atomic action 
applies op op 
obvious problem approach specifications maintain number process classes 
similar commutativity relations semantic concurrency control protocols conflict relations pair operations need specified 
workflow systems process classes tend completely independent classes require coordination processes belonging classes 
general expect process class relatively process classes may interfere 
protocol maintain specifications protected operations discussed wfms regulate order execution way interfering accesses object avoided 
interference may potentially arise distinct processes access object 
main idea protocol proposed processes leave signature objects access 
signature specifies processes allowed access object 
protocol complicated need account restrictions imposed concurrent processes existence inherited restrictions avoid process access access restricted due transitivity 
data structures data structures facilitate coordination workflow processes 
execution plan process class execution plan describes operations process execution order operations 
processes shown assumed inventory item pending orders billing account delivery plan 
execution plans processes follows customer request hop op op op supplies arrival hop op op op op warehouse allocation hop op object signature associated object object signature specifying process classes allowed access 
object signature os array integer number process classes os access object signature contains entry process class defined system 
entry process class allowed access object 
entry greater process belonging corresponding class access object 
entry greater value represents number restrictions imposed object effectively acts counter processes imposed access restrictions particular process class object 
withdrawal restriction performed decreasing counter counter reaches object accessible 
protected operations specification process class protected operations specification list different steps processes class may take restrictions imposed execution step 
note step eliminated specification 
protected operations specification pos array array integer number operations process step execution pos read example consider customer request process 
specification follows hop op op op hop op op op op op op op ae op op op op ae pos set bracketed operations referred protected operations group 
processes belonging class share specification associate process pointer class specification represented follows state current integer process signature step execution process restricts certain process classes allows access intermediate results 
static information represented class specification 
dynamic information stored process signature contain restrictions process imposes point time 
note process may inherit restrictions signature corresponding step class specification 
process signature ps array integer ps read protected resources process finishes sequence protected operations restrictions imposed objects eliminated 
main issue point find objects involved operation 
trivial solution process may imposed revoked restrictions process class times involving different objects 
address problem data structures required access list lists data items accessed back list specifies process class restrictions modified 
accessed items list array objects accessed step back list bl array integer bl ps step ps step gamma note access restrictions modified particular object particular process class modified process accesses data item twice case access list consider access different object 
restriction eliminated looking state process back list possible determine objects affected 
done name actual objects retrieved access list 
inheritance restrictions process signature guarantee correct interleavings processes may access data items restrictions attached inherit restrictions 
process accesses object accessed class process propagate results operation directly indirectly processes classes 
record additional restrictions inherited restrictions list inherited restrictions list il array integer il read inherited restrictions remain duration execution process restrictions depend state process may change 
stored process signature counter mechanism necessary identify restrictions changed inherited state dependent 
complicate design unnecessarily 
process executes operation need determine executing operation resulted termination protected operations group respect process class 
need eliminate restrictions imposed process objects accessed protected operations group 
order accomplish class definition determine protected operations group objects accessed operations protected operations group 
objects process update object signatures reflect elimination restrictions 
process termination process terminates eliminates restrictions imposed propagated running processes 
avoid overhead inherited restrictions retained termination process restrictive process terminates process access data 
allow flexibility require communication process termination running processes inherited restrictions terminated process 
optimization easily incorporated proposed algorithm expense additional complexity 
algorithms detailed description proposed protocol 
initialization data structures need initialized enforce proper synchronization workflow processes 
object related data structures initialized point objects created configured wfms 
similarly process related data structures initialized processes execution 
object created configured signature initialized zero initially restrictions accessing object 
formally os process begins executing initializations take place ps current il fg bl accessing object process accesses object check access object 
done looking value corresponding class counter object signature counter access granted process access object time step 
process update pointer class specification find new restrictions impose step 
restrictions added inherited restrictions form new process signature 
object signature updated 
point possible protected operations group completed reflected transition process signature new 
happens process eliminate restrictions imposed objects protected operations group 
done examining objects involved protected operations group updating object signatures 
basic algorithm summarized follows 
access granted os delayed 

update current pointer current 

operation performed performed ps ii ps il pos current iii il il os iv os os ps ps il ps step saves old process signature determine restrictions changed due protected operations group 
step ii prepares signature current operation incorporates previous inherited restrictions new state 
step iii prepares new inherited restrictions list incorporating object signature 
step iv prepares new object signature note include new inherited list mean adding object signature twice 
step computes new process signature incorporating restrictions inherited object accessed state 

restrictions disappear eliminated corresponding objects 
examining ps completing operation restrictions identified 
need determine execution operation resulted protected operations group 
objects involved protected operations group object signature updated eliminate restrictions bl purpose 
objects identified process algorithm follows new ps release current gamma bl bl current repeat os current gamma release gamma gamma release gamma gamma release jj new new bl current bl current current execution example consider process classes shown 
corresponding specifications follows customer request hop op op op supplies arrival hop op op op op warehouse allocation hop op op op op op op op op op ae op op op op ae op op op op op ae op op op op op ae op op op op op ae op op ae op op ae op op results protected operation specifications pos pos pos consider example execution op op op op op op op op op op resulting history data structures involved shown 
operation data structures initialized assume previous operations left data structures state shown upper left corner 
op takes place process updates signature specification updates current pointer 
signature process left process issues op signature allow access processes operation delayed 
process access op issued 
procedure explained 
completing op process terminates releases restrictions imposed 
implies signature updated eliminate restrictions 
op triggers similar procedure protected operations group completed process class signature updated eliminate restrictions 
issuing op process inherits restriction imposed object restriction remain process termination 
signature previous inheriting restriction restricts access final object signature number restrictions imposed happens op op op 
op delayed contains restriction processes class related problem synchronizing controlling interactions concurrent executions pervasive 
appeared context operating systems allow simultaneous scarce resources multiple users 
extended general problems multiple solutions proposed 
mutual exclusion protocols semaphores monitors examples different existing approaches 
database applications nature operations requires involved approach 
context serializability common correctness criterion guarantee concurrent short duration transactions interacting database produce consistent results bhg 
main difference serializability operating system primitives serializability imposes ordering sequences operations operating system primitives solely concerned individual operations 
synchronization problem studied context shared memory systems correctness criteria cache consistency sequential consistency proposed dsb 
ideas related notion relative atomicity 
proposal notion garcia object signature ps il current object signature ps il current object signature ps il current object signature ps il current object signature ps il current object signature ps il current object signature ps il current object signature ps il current op op delayed op op op op op op object signature ps il current op op delayed example execution protocol 
molina gm suggested group transactions different classes 
transactions class interleaved arbitrarily transactions different classes viewed atomic units 
lynch lyn extended model allow transactions varying atomic units relative property called relative atomicity 
ozsu fo proposed flexible model breakpoints recognition executions equivalent correct executions model exponential complexity 
graph tool theory reasoning executions provided determine correctness executions 
proposed mechanism synchronizing workflow processes 
implemented structures similar standard transaction processing 
knowledge protocol incorporates operating system concepts address particular characteristics workflow environments 
meta level clearly identifies nature synchronization coordination necessary workflow management systems 
argued notion combination critical section mutual exclusion operating systems concurrency control notion employed transaction processing systems 
involves implementation experimentation proposed protocol actual workflow management systems 
specifications terms static definitions process classes extended allow dynamic parameterized definition processes 
issue failure recovery workflows general remains open problem 
agrawal bruno el abbadi krishnaswamy 
relative serializability approach relaxing atomicity transactions 
proceedings acm sigact sigmod symposium principles database systems pages may 
agrawal bruno el abbadi krishnaswamy 
managing concurrent activities collaborative environments 
proceedings rd international conference cooperative information systems pages may 
bhg bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
dsb dubois briggs 
synchronization coherence event ordering multiprocessors 
february 
elm elmagarmid editor 
transaction models advanced database applications 

fo ozsu 
semantic knowledge transactions increase concurrency 
acm transaction database systems volume pages december 
fry 
move workflow provokes business process scrutiny 
software magazine pages april 
georgakopoulos hornick manola 
customizing transaction models mechanisms programmable environment supporting reliable workflow automation ieee transactions knowledge data engineering april 
ghs georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases april 
gm garc ia molina 
semantic knowledge transaction processing distributed database 
acm transaction database systems volume pages june 
hsu hsu 
special issue workflow extended transaction systems 
bulletin technical committee data engineering ieee june 
hsu hsu 
special issue workflow systems 
bulletin technical committee data engineering ieee march 
ks krishnakumar sheth 
specifying multi system workflow applications meteor 
technical report tm bellcore may 
lyn lynch 
multilevel atomicity new correctness criterion database concurrency control 
acm transaction database systems volume pages december 
ms dennis mccarthy sarin 
workflow transactions inconcert 
ieee bulletin technical committee data engineering june 
tac attie meredith sheth singh woelk 
workflow support carnot 
bulletin technical committee data engineering june 
ieee computer society 
