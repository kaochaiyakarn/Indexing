aaai icml workshop predicting ai approaches time series analysis predicting sequences user actions brian davison haym hirsh department computer science rutgers state university new jersey new brunswick nj usa cs rutgers edu people display regularities 
proposes characteristics idealized algorithm applied sequences user actions allow user interface adapt time individual pattern 
describe simple predictive method characteristics show predictive accuracy large dataset unix commands considered fewer computational memory resources 
motivation predictable 
displays patterns actions 
occur conscious thought 
patterns widespread large communities taught rules reading left right driving correct side road 
patterns function lifestyle picking pizza way home friday programming vcr record favorite comedy week 
result way interfaces designed pattern movement finger phone dialing number call log computer check mail read news visit favorite website latest sports scores 
computers aspects lives need system able adapt user ways programmed explicitly system designer apparent 
car offer advice driving routes useful guess destination pizza friday leaving useful particularly didn program explicitly knowledge 
ability predict user action allows system anticipate user needs speculative execution intelligent defaults adapt improve user habits automating repetitive tasks 
additionally adaptive interfaces shown help disabilities greenberg mccoy 
considers mundane day activities user actions command line shell 
concentrated initially unix command prediction continued widespread unix shell provides excellent testbed experimentation automatic data collection 
interest general action prediction hypothesize successful methodologies applicable interfaces including futuristic ones anticipated menu selection guis voice mail url selection web browsers 
reflects focus underlying technology action prediction prediction effectively interface 
data user studies suggest relatively naive methods predict particular user command surprisingly 
generic task mind describe characteristics ideal algorithm action prediction 
analyze novel algorithm satisfies characteristics additionally performs better previous system 
background addresses task predicting element sequence sequence nominal unordered non numeric elements 
type problem series prediction studied machine learning researchers concept recognition boolean classification task sequence recognition common independent samples distribution examples 
unix commands user actions general independent nominal don fall domain traditional statistical time series analysis techniques 
evaluation criteria machine learning experiments single dataset cross validation standard method evaluating performance algorithm 
cross validation inappropriate partitioning data separate training test sets common 
sequential datasets obvious split training set contain portion sequence test set currently ignoring command arguments switches 
cd ls emacs exit blank cd cd rlogin exit blank cd telnet ps kill emacs cp emacs 
portion user history showing timestamp start session command typed 
token blank marks start new session 
contain portion algorithm trained data occuring test data 
proposing adaptive method evaluating performance online algorithm tested current command preceding commands training 
maximizes number evaluations algorithms unseen data reflects expected application algorithm 
considering performance multiple users differing amounts data methods compute averages 
macroaveraged results compute statistics separately user averages statistics users 
alternately microaveraged results compute average data determining number correct predictions users divided total number commands users combined 
provides equal weight users averages average performance user emphasizes users large amounts data 
people tend repeat order determine repetition recognizable regularities average user command line habits collected command histories users totaling commands executed period months davison hirsh see example data collected 
bulk users undergraduate computer science students internet programming course rest graduate students faculty 
users option disable logging access systems logging performed 
average user command instances history distinct commands time 
average users commands new logged previously 
new commands reflecting fact smaller samples larger numbers unique commands 
approximately commands previous command executed user repeated command time 
earlier results previous davison hirsh considered number simple studied algorithms 
learning problem examine commands executed previously predict command executed 
explicit domain knowledge naive method quinlan able predict command accuracy 
prediction trained series examples form command gamma command gamma command number examples seen far 
command command gamma defined value blank allow prediction second commands form 
prediction method relatively straightforward application standard machine learning algorithm number drawbacks including returned single command 
significant computational overhead 
generate new incrementally update improve decision tree receiving new information 
decision tree systems perform incremental updates utgoff achieved levels performance decision tree generation performed outside command prediction loop 
additionally machine learning algorithms incremental revisit past command situation causing decision tree generation require time computational resources number commands history grows 
treats command instance equally commands history just important commands executed 
note selected common studied decision tree learner excellent performance variety problems claim superiority algorithms applicable domain 
initial experiments dealt issues allowing learning algorithm consider command history fixed window 
prevented model generation time growing bound exceeding available system memory 
workaround caused learning algorithms forget relatively rare consistently predictable situations typographical errors restricted consideration commands 
incremental probabilistic action modeling ideal online learning algorithm experience mind intuition actions strongly affect actions older actions propose description ideal online learning algorithm 
order desirable characteristics best algorithms 
predictive accuracy best known resource unlimited methods 
operate incrementally existing model building new new data obtained 
affected events remembering uncommon useful events regardless time passed 
need retain copy user full history actions 
output list predictions sorted confidence 
adapt changes target concept 
fast interactive 
learn passively watching user mitchell mahadevan steinberg 
apply absence domain knowledge 
system ideally suited incorporation types user interfaces 
algorithm implicitly assumed patterns form multi command chains actions accordingly built algorithms recognize patterns 
simpler markov assumption command depends previous command patterns length previous command state history data collected count number times command followed command calculate probability command 
implemented simple structure table showing likelihood going command 
anticipated action prediction adaptive interface incremental method desirable 
table counts recorded updated periodically probabilities easily computed 
mentioned previous section believe useful weigh events highly calculating predictive model 
accomplished probabilistic model update function exponential decay occurrence full impact older occurrences decreasing contributions 
previous table probabilities table containing probabilities new data points combined new table may computed weighted average weights sum 
example weights new probabilities equal contributions old table new 
assuming table updates performed periodically data points making table contributing percent update call default row call row corresponding initial update copy distribution default row multiply probability column alpha add alpha column corresponds update function 
final weights number table updates far 
extend model algorithm starts empty table updates command 
empty table commands equally initially uniform probability distribution 
seeing command new row added command uniform distribution 
second command seen gets new row uniform distribution update row saw followed multiplying elements row constant alpha probability seeing increased adding gamma alpha 
way emphasize commands expense older actions sum probabilities row 
note alpha equates learner predicts saw command alpha corresponds algorithm changes probabilities case keeping uniform distribution 
prediction command probabilities appropriate row sorted highest value output command 
making prediction command empty row track probabilities additional default row mechanism updating apply commands seen far consideration preceding command 
keeping track likelihoods default row call row empty list number commands returned ask top commands default row exclude commands returned return combined set commands row sort probabilities row eliminate commands return top sorted list predict function parameter value range alpha values predictive accuracy incremental probabilistic action modeling algorithm shown 
rows new commands making assumption default statistics better uniform distribution 
see figures pseudocode update predict functions implement incremental probabilistic action modeling ipam algorithm 
determining alpha empirically determined best average alpha computing performance algorithm dataset values alpha increments 
best value alpha varied depending performance calculated dataset subjective choice best 
see graph parameter study alpha showing average user performance average performance commands 
value alpha rest experiments 
alpha controls amount influence commands earlier commands expect value vary problem domain 
evaluation algorithm applied data set discussed earlier performs better alpha 
achieves predictive accuracy versus respectively best guess predictions see bars labeled ipam 
comparison show method specialized update corresponds naive bayes predictor conditional probabilities select command strictly frequency pairs commands straightforward command predictor labeled mrc 
precise users ipam beat system times tied lost sixteen times task predicting command 
confidence level average difference scores sigma percentage points showing improvement predictive accuracy ipam statistically significant ideal value alpha 
ipam bayes mrc accuracy user predictive accuracy variety algorithms 
ipam keeps table memory size number distinct commands 
predictions performed constant time list command kept sorted probability updates requiring time 
applications method may able take advantage top predictive system method generates list commands associated probabilities prediction compute average accuracy top commands varying values compared single command 
shows get increased performance correct command listed time 
possible interface designer consider tradeoff increased likelihood listing correct command versus increased cognitive load interface showing multiple suggestions 
unix command prediction helpful able perform command completion characters typed produce command accuracy number commands suggested ipam bayes mrc average user accuracies top predictions 
likelihood including correct command goes number suggested commands increases 
number characters match ipam top ipam top ipam top bayes top bayes top bayes top command completion accuracies 
prefixed characters 
mechanism enable shells perform completion unique command prefix able perform completion multiple possibilities 
measures predictive accuracy initial characters match applied data 
note command completion initial characters just command prediction 
similar performance ipam seen figures shows command prediction accuracy completion larger csh dataset greenberg containing twice users approximately twice commands 
ipam outperforms simpler bayes mrc algorithms setting alpha determined parameter study dataset 
discussion shown results described apply performance shown figures performance slightly higher 
results dataset collected users argued showing potential method selection alpha set performance larger arguably representative greenberg dataset collected years earlier users csh demonstrates believable performance 
learning may performed history user actions cumulative accuracy user vary initial training period 
figures show performance ipam bayes respectively history user 
solid line depicts current average predictive accuracy command current command dashed line shows variations predictive accuracy measured commands 
consider initializing table ipam accuracy number commands listed ipam bayes mrc average user accuracies top predictions greenberg dataset 
ful values starting scratch 
example performance improved start table averaged users 
lets examine cross user training leverage experience 
unfortunately preliminary experiments indicate dataset starting average users command prediction tables improve predictive accuracy 
result matches greenberg lee individual users served systems tuned best average performance group users 
goal discover performance possible domain knowledge 
benchmark comparison strong methods base system domain specific knowledge built 
ipam implementation addition guided characteristics accuracy number characters match ipam top ipam top ipam top bayes top bayes top bayes top command completion accuracies greenberg dataset 
command number cumulative average point window average cumulative performance ipam time typical user 
benefits limited resources addition performance 
research possible extensions desirable investigate predicting entire command line commands plus parameters extending ipam recognize patterns longer 
incorporation ipam real world interface useful get user feedback performance underway extension 
related problem learning predict user action related number areas 
course similarities problems studied plan goal recognition user modeling community bauer lesh etzioni lesh 
attempts model users terms plans goals specific task domain 
efforts area require modeling system know set goals plans advance 
usually requires significant human investment acquiring representing domain knowledge 
contrast goal explore potential action prediction knowledge sparse environment user plans known easily developed 
smaller number researchers studied methods similar goals generality 
yoshida motoda motoda yoshida yoshida motoda yoshida apply specially developed machine learning techniques perform command prediction 
lets implement speculative execution report fairly high predictive accuracy albeit small amount real user data 
success comes knowing fair amount action user takes powerful extension operating system lets record accesses reading files command performs 
surface command prediction problem especially ipam approach may bear similarities markov decision processes reinforcement learning approaches sutton barto accuracy command number cumulative average point window average cumulative performance bayes time typical user 
choice reasons markov assumption motivate ipam approach state equal value task correctly predict state optimize sequence goal state similarly reward function transparent credit assignment difficulty domain noisy believe target concept changes time 
greenberg lee studied patterns usage unix domain focusing simple patterns repetitions 
recurrence rate likelihood repeating high command lines commands individual usage patterns varied 
tauscher greenberg extended greenberg recurrence analysis url revisitation world wide web browsers 
efforts consider simple methods offering top possibilities easy selection commands reactive keyboard witten james uses simple history matching methods prediction lower level 
stronger methods including genetic algorithm classifier system attempted andrews master thesis predict user commands small sample users fairly short histories batch framework unclear implications 
conference meyer report application presenting list potential urls addition web browser 
method goes recency selection methods tracks priority url updated visitation 
priority particular url computed essentially normalized averages count document usage relative frequency document usage count highest sequential document usage 
contrasts approach significantly consider relationships documents patterns usage 
adaptive short list computes simplistic set documents regard context 
number researchers studied machine learning developing intelligent interfaces incorporating action prediction 
example webwatcher joachims freitag mitchel predicts links page world wide web user select 
method context sensitive filtering systems rely precise nature artifacts manipulated decomposable pages text 
predictive methods automated form completion schlimmer wells schlimmer similarly tailored specifics application 
maes maes maes kozierok sheth maes considers broader task building intelligent agents serve information filters personal assistants 
agents learn program learning appropriate behavior user potentially agents 
agents designed helpful making suggestions gradually responsibility users trust grows 
maes uses variety learning methods designing agents including learning watching user 
mechanism learn better model user quite valuable context 
programming demonstration cypher similarities 
example cypher eager cypher automate explicitly marked loops user actions graphical interface 
concerned performance integrated user interface 
approach designed notice arithmetic progressions loops find patterns usage recur explicit loops require special training user 
learns repeated user patterns requiring user hit repeat button system learn execute macro 
sequence prediction strongly related data compression bell cleary witten algorithm predict item sequence compress data stream 
approaches describe fashion precisely apply user history available 
differ success compression interesting phenomenon explicitly target methods 
importantly target methods additional information sources easily injected 
methods designed responsive concept drift assumptions stability user actions time tends reduce usefulness dictionary grammar compression schemes nevill manning 
laird saul algorithm discrete sequence prediction apply number problems including text compression dynamic program optimization predictive caching 
markov trees limits growth storage discarding prediction contexts 
fast online algorithm explicitly consider problem concept drift point sequence essentially weight point 
distantly related anomaly detection computer systems kumar lunt develops ways quantify user normal behavior unusual activity flagged potential intrusion 
intrusion detection systems categorized statistical anomaly detection rule detection 
rule expert systems monitor known attack patterns trigger false alarms criticized encouraging development ad hoc rules require significant human engineering effort develop 
contrast statistical systems traditionally build profiles normal user behavior search unusual sequences events consideration 
systems perform anomaly detection audit trail processing line method works online incrementally updating users profiles additional data arrives augmented provide user recognition 
summary method fulfills requirements ideal online learning algorithm 
incremental probabilistic action modeling average predictive accuracy previously reported 
operates incrementally remember rare events typos retain copy user action history 
ipam generate top predictions weighing events heavily older events able react concept drift 
speed simplicity strong candidate incorporation adaptive interface 
acknowledgments probabilistic bigram model idea suggested corinna cortes 
research partially supported rutgers university special allocation strategic initiatives information sciences 
andrews 
computer command prediction 
master thesis university nevada reno 
bauer 
acquisition user preferences plan recognition 
chin ed proceedings fifth international conference user modeling um 
bell cleary witten 
text compression 
englewood cliffs nj prentice hall 
cypher 
eager programming repetitive tasks demonstration 
cypher 

cypher ed 

watch programming demonstration 
cambridge ma mit press 
witten james 
reactive keyboard predictive typing aid 
ieee computer 
davison hirsh 
experiments unix command prediction 
technical report ml tr department computer science rutgers university 
davison hirsh 
adaptive command line interface 
advances human factors ergonomics design computing systems social ergonomic considerations 
san francisco ca elsevier science publishers 
proceedings seventh international conference human computer interaction 
meyer 
adaptive short list documents world wide web 
proceedings international conference intelligent user interfaces 
orlando fl acm press 
mccoy 
generating text compressed input intelligent interface people severe motor impairments 
communications acm 

evidential reasoning network intrusion detection systems 
eds information security privacy australasian conference 
nsw australia springer verlag 
lecture notes computer science 
greenberg witten 
predictive interfaces think 
edwards ed extra ordinary human computer interaction interfaces users disabilities 
cambridge university press 
chapter 
greenberg 
unix collected traces users 
research report department computer science university calgary alberta 
includes tape 
greenberg 
computer user reuse organization computer tools 
new york ny cambridge university press 
schlimmer 
machinelearning apprentice completion repetitive forms 
proceedings ninth ieee conference artificial intelligence applications 
los alamitos ca ieee computer society press 

contextsensitive filtering hypertext browsing 
proceedings international conference intelligent user interfaces 
acm press 
joachims freitag mitchel 
webwatcher tour guide world wide web 
proceedings fifteenth international joint conference artificial intelligence 
morgan kaufmann 
kumar 
classification detection computer intrusions 
ph dissertation purdue university west lafayette 
laird saul 
discrete sequence prediction applications 
machine learning 
lee 
investigations history tools user support 
ph dissertation university toronto 
available technical report csri 
lesh etzioni 
sound fast goal recognizer 
proceedings fourteenth international joint conference artificial intelligence 
morgan kaufmann 
lesh 
adaptive goal recognition 
proceedings fifteenth international joint conference artificial intelligence 
morgan kaufmann 
lunt 
ides intelligent system detecting intruders 
proceedings symposium computer security threat countermeasures 
maes kozierok 
learning interface agents 
proceedings eleventh national conference artificial intelligence 
menlo park ca aaai press 
maes 
agents reduce information overload 
communications acm 
nakayama 
repeat predict keys efficient text editing 
proceedings conference human factors computing systems 
new york acm press 
mitchell mahadevan steinberg 
leap learning apprentice vlsi design 
proceedings ninth international joint conference artificial intelligence 
motoda yoshida 
machine learning techniques computers easier 
proceedings fifteenth international joint conference artificial intelligence 
morgan kaufmann 
nevill manning 
programming demonstration 
new zealand journal computing 
nevill manning 
inferring sequential structure 
ph dissertation university waikato new zealand 
quinlan 
programs machine learning 
san mateo ca morgan kaufmann 
schlimmer wells 
quantitative results comparing intelligent interfaces information capture case study adding name information electronic personal organizer 
journal artificial intelligence research 
sheth maes 
evolving agents personalized information filtering 
proceedings ninth ieee conference artificial intelligence applications 
los alamitos ca ieee computer society press 
sutton barto 
reinforcement learning 
cambridge ma mit press 
tauscher greenberg 
people revisit web pages empirical findings implications design history systems 
international journal human computer studies 
utgoff 
incremental induction decision trees 
machine learning 
yoshida motoda 
automated user modeling intelligent interface 
international journal human computer interaction 
yoshida 
user command prediction graphbased induction 
proceedings sixth international conference tools artificial intelligence 
los alamitos ca ieee computer society press 
