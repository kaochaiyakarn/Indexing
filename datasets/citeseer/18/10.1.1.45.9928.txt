submitted icsm international conference software maintenance clone detection syntax trees ira baxter andrew leonardo moura marcelo anna lorraine bier semantic designs research blvd suite austin texas com www com departamento de inform tica cia universidade cat lica rio de janeiro de vicente rio de janeiro brazil moura les inf puc rio br eaton seo spectrum drive austin tx aus com existing research suggests considerable fraction source scale computer programs duplicate code clones 
detection removal clones promises decreased software maintenance costs possibly magnitude 
previous limited detection exact textual matches near misses complete functions 
presents simple practical methods detecting exact clones arbitrary program fragments program source code syntax trees 
previous suggest practical means removing detected clones 
methods operate terms program structure clones removed mechanical methods producing inline procedure standard preprocessor macros 
tool techniques applied production software system source lines results confirm detected levels duplication previous 
tool produces macro bodies needed clone removal macro invocations replace clones 
tool uses variation known compiler method detecting common sub expressions 
method determines exact tree matches number adjustments needed detect equivalent statement sequences commutative operands nearly exact matches 
additionally suggest clone detection useful producing structured code reverse engineering discover domain concepts implementations 
keywords software maintenance clone detection software evaluation dms data previous baker suggests considerable fraction source large computer programs duplicated code 
programmers routinely perform ad hoc code reuse brute force copying code fragments implement actions similar current need performing cursory empty 
customization copied code new context 
act copying indicates programmer intent steal implementation abstraction 
act pasting breaking software engineering principle encapsulation 
cloning may unstructured commonplace disappear fiat 
suggests offer programmers tools allow apply abstraction implementations breaking encapsulation 
detection replacement redundant code subroutine calls inlined procedure calls macros equivalent shorthands effect result promises decreased software maintenance costs corresponding reduction code size 
software engineering focused finding small percentage process gains mechanical method achieving worth investigating 
define idiom program fragment implements recognizable concept data structure computation 
clone program fragment implements concept 
near clone implementation parameterized abstraction 
previous clone detection limited detection exact textual matches near misses complete function bodies 
presents practical methods syntax trees detecting exact near clones arbitrary fragments program source code 
detection terms program structure clones factored source conventional transformational methods 
tool techniques applied production software system sloc results confirm detected levels duplication previous 
tool uses variation known compiler method detecting common sub expressions aho determines exact tree matches essentially research hashing 
number adjustments needed detect clones face commutative operands near misses statement sequences 
additionally suggest clone detection useful producing structured code discovering domain concepts implementations 
section discusses causes clones 
section raises issues ast clone detection 
section discuss algorithms detecting clones syntax trees cast 
section discusses problems engineering clone detector scale 
section reports results applying clone detector running software system analyzes results 
section discusses relation clones domain concepts 
section reports possible 
section describes related 
clones 
state art software design structured design processes formal reuse methods 
legacy code alas far new code constructed means 
particular considerable amount code produced ad hoc reuse existing code 
programmers find sections code perform computation nearly identical coded copy section wholesale modify 
ubiquity event easily discerned noticing screen editors universally copy paste function keys 
large systems method may standard way produce variant modules 
building device drivers operating systems code boilerplate part driver dealing device hardware needs change 
context commonplace device driver author copy entirely existing known trusted driver simply modify 
reuse practice exacerbates maintenance problem fixing bug trusted driver replicating code bugs new drivers 
style coding regularly needed code fragment arise error reporting user interface displays 
fragment purposely copied maintain style 
extent fragment consists parameters practice fragment unnecessarily contains considerably knowledge program data structure case repeated computations payroll tax queue insertion simple point definitional 
consequence copying programmer mental macro write essentially code time operation needs carried 
mental operation frequent may develop regular style coding 
processes produce near clones code modulo irrelevant order variable names 
clones fact duplicate code intended separate data structure type consider insertion sort array 
clones indication data structure supported library pasting 
clones exist reasons performance 
systems tight time constraints replicating frequent computations especially compiler offer inlining arbitrary expressions computations 
lastly occasional code fragments just accidentally identical fact clones intended carry computation 
clone detection asts basic problem clone detection discovery code fragments compute result 
fragment program parts willing compare determine fragment pairs equivalent 
theory determining arbitrary program fragments simply halt impossible making impossible decide compute identical results 
practice willing give detecting complete semantic equivalence anyway clones come due copy paste editing processes 
false negatives acceptable engineers choice deep semantics conservatively bounded time limits equivalence detection considerable infrastructure form semantic definitions theorem provers required 
simpler equivalences false positives produced 
suggests clone detection syntactic methods 
go far comparing source lines baker 
source line equality assumes copy process introduces changes identifiers comments spacing non semantic changes limits clone detection exact matches fails detect near clones 
interesting possibility compare program representations control data flows explicit 
state tools chose investigate comparing syntax trees obviously removes confusing uninteresting changes lexical level 
step clone detection process source code parsed ast produced 
main algorithms applied 
purpose algorithm call standard algorithm detect subtree clones 
second call sequence detection algorithm concerned detection variable size sequences subtree clones 
third algorithm looks combinations clones generalized general unifier 
finding subtree clones developing tool finding clones asts important note principle large amount computation needed wants traverse search space filter 
filter typical order algorithm quadratic detecting single cubic sequences sibling subtrees clones detected 
talking large systems millions subtrees taken account amount computation prohibitively large 
order tackle problem possible factor search space categorizing subtrees hash values 
approach tree matching technique building dags expressions compiler aho 
buckets hash table pick hash function uniformly distributes entries factor applied search space 
large compared total number entries represents large saving terms computation 
factoring search space hash functions imposes problem dealing exact clones 
dealing near misses factoring hash function imposes incompleteness traversing search space 
case hash function characterized way main properties wants find near misses preserved 
described section near misses clones usually created copy paste procedures followed small modifications 
modifications usually generate small modifications shape tree associated copied piece code 
argue kind near clones different small subtrees 
sense hash function ignores small subtrees option 
experiment hash function ignores identifier names leaves tree 
detecting exact clones near clones algorithms third algorithm try find complex near clones result previous ones 
presents standard detection algorithm 
straightforward just comparing subtrees partitioning search space hash function 
sequence detection algorithm compares pair subtrees containing sequence nodes looking maximum length possible sequencing encompasses clone 
take account short example standard algorithm finds clones corresponding assignment statements variables detection process controlled user parameters 
similarity threshold parameter allows user specify similar subtrees 
similarity subtrees computed formula similarity number shared nodes number different nodes subtree number different nodes subtree mass threshold parameter specifies minimum subtree mass number nodes value considered small pieces code ex expressions ignored 
parameter filter standard algorithm 
lower sequence length threshold parameter defines minimum length subtree sequences considered 
parameter filter sequence detection algorithm 
finding clone sequences approach worthwhile detecting clones just subtrees compute hash codes subtrees hash codes children hash code root place trees hash buckets tree bucket similarity threshold standard algorithm sequences subtrees 
particularly interested sequences subtrees represent sequences program statements 
sequences subtrees trees reason require special treatment 
sequences subtrees appear asts consequence occurrence dialect grammar rules encapsulating sequences zero syntactic constructs 
sequence rules typically expressed left right recursion production rules 
parser generator produces parsers automatically generate asts common case trees right leaning shape 
just simple example shows pair short sequences statements corresponding trees 
note right leaning tree reverse order statements order parse reductions done determined controlling grammar rule 
example nodes labeled sequence nodes statements belonging compound statement 
void void example clone sequence build list structure information sequences minimum sequence length threshold maximum sequence length compute hash codes sequences length place sequences length buckets tree bucket similarity threshold sequence detection algorithm presents sequence detection algorithm 
algorithm compares pair subtrees containing sequence nodes looking maximum length possible sequencing encompasses clone 
take account short example standard algorithm finds clones corresponding assignment statements variables sequence detection algorithm finds sequence comprising assignments variables clone 
sequence immediately invalidates clone status atomic statements clones previous step 
initial clones building blocks sequencing algorithm discarded generic clone encompassing 
previous clones said sequence detection step 
said sequence detection process expensive build list structure element associated sequence program store subtree element associated sequence 
shows example list structure built 
list structure allows compute hashcode particular subsequence quickly void program sequences 
list structure 



list structure example finding exact near misses clones algorithm detect complex clones 
algorithm starts find new near misses clones clones 
basic procedure go parents nodes check parents near misses clones 
technique find near misses clones differ insertion deletion sequencing nodes 
current tool implement detection clones absence presence different sequencing nodes 
clone 
similarity db err stat db float voltage db float target value db float probe sensor db float old cal scale db get int db charge iv stat alm activate alm charge alm dont block alm dont ack int mdp null mdp null return fail db get float db target value av stat alm activate alm cal wrong target value alm dont block alm dont ack int mdp null mdp null return fail old cal scale db get float db cal kb av stat db float voltage db float target value db float probe sensor db float old cal scale db float old cal offset db get int db charge iv stat alm activate alm charge alm dont block alm dont ack int mdp null mdp null return fail db get float db target value av stat alm activate alm cal wrong target value alm dont block alm dont ack int mdp null mdp null return fail old cal scale db get float db cal kb av stat sequence clones tool clones detected generate macro general unifier mgu pair clones 
process essentially unification procedure described charniak 
step tool tries group instances clone order provide additional feedback number instances clone 
clones divided groups fit approach clone inserted group clone instances inserted 
macro db float db float db float db float db get int db charge iv stat alm activate alm charge alm dont block alm dont ack int mdp null mdp null return fail db get float db target value av stat alm activate alm cal wrong target value alm dont block alm dont ack int mdp null mdp null return fail old cal scale db get float db cal kb av stat macro bindings old cal scale old cal offset voltage target value probe sensor old cal scale stat voltage db err db float target value probe sensor unifying macro detector engineering building practical clone detector requires handling number issues parsing building ast preprocessor directives results reporting program scale parsing program suite interest requires parser language dialect interest 
nominally easy task practice acquire tested grammar dialect language hand 
legacy codes dialect unique developing organization need build parser 
worse legacy systems number languages parser needed 
standard tools lex yacc disappointment purpose deal poorly lexical language ambiguities 
dms tool baxter variation tomita style parser tomita parse ambiguous grammars cutting time develop usable parser significantly 
particular parsing algorithm wagner conveniently builds parse tree 
tomita style parser symbol nodes representing ambiguous parses taken account clone detection algorithm 
ignore ambiguous subtrees choosing canonical son grammar rule number 
preprocessor directives complicate processing source files 
handled various ways added preprocessor directives language syntax effectively extending language include directives ignored processed include directives concatenated include files input ran preprocessor get rid unstructured directives 
detecting clones presence include files included text treated part include file part including file 
program scale problem clone detection scheme 
experiment limited line chunks mb ram artificially large memory data structures prototype dms 
avoidable problem retention comments enable re printing detected clones exact source form 
believe perform clone detection lines gb careful design tree node processor cache line 
disk implementation handle larger size batch performance worse 
reasonable possibility batch compute incrementally compute hash codes clone detection changed modules 
clone detection applied clone detector applied control software system process control system having approximately code 
system created years ago reusing modifying year old code system similar functionality 
presently maintained programmers 
programmers port developed original system 
software partitioned subsystems function 
shows percentage cloned code different subsystems computed ratio redundant sloc subsystem sloc 
subsystems approximately cloned code 
subsystem believed erroneous data point clone detector erroneously reports overlapping sequences selfsimilar code clones note reviewers expect fixed final 
subsystem created cloning device driver code capable handling port allow handling second ports done schedule pressure known highly redundant 
observe schedule pressure prevented fixed clone tool automatically 
subsystem code services number devices created similarly subsystem confirmed developers 
average clone percentage subsystems 
software maintenance costs distributed evenly source suggests savings maintenance costs 
practice systems troublesome 
difficult maintain accounts large percentage defects written system 
reduction code disproportionate savings costs 
subsystems series clone percentages interesting question code copied copied 
shows number times clones various sizes sloc 
largest subsystems represented graph 
clone sizes larger rare shown 
subsystem unexpected clone size 
conclude clones relatively small size order sloc 
numberof occurrences clone size series series series clone size number occurrences hopes system matures better organized 
shows changes percentage clones fairly volatile subsystems releases periodicity approximately months 
subsystems show steady improvement clone density shows sharp increase 
clearly clone removal pass 
clone percentage time subsystem time series series series series clone percentage time hypothesized larger files larger clone percentages opportunity complexity 
compares clone percentage subsystem size 
largest files largest number clones pattern recognizable 
conclude clone ratios relatively independent subsystem size 
size clone percentage series size clone percentage draw data 
higher percentages cloned code newer subsystems expected free clones closer clean original design 
appears cloning get code code released soon working improved stabilizes 


examined clones code subsystems having higher clone percentages 
clones separate functions performing identical operations different data types devices having left vs right symmetry 
appears stylistic choice interests apparent modularity clarity cost maintaining copies argues actual modularity 
interesting notice subsystems having greater degree stylistic copying subsystems change infrequently largely low level utility programs data access data initialization 
supports finding utility code stable rarely modified cleaned 

correlation subsystem size clone percentage 
expect clones larger subsystem conceptual complexity grasping entire subsystem 
appears deadline pressures similarities functionality programmer style affect clone density code size 
clones domain concepts believe clone detector tool great value domain analyst capturing domain concepts source code similar systems 
key issue domain analysis need understand commonalities concepts implementations families software systems 
defined earlier idioms program fragments implement specific concepts application domain 
reasonable believe clones system realizations concepts precisely repeated demand carrying application 
understanding interesting starting point abstraction domain concepts source code 
domain analysis process step include running clone analysis similar systems followed interviews domain specialists 
interviews cloned code shown specialists asked provide possible abstractions motivating implementations 
results domain concepts implementations generalized clone instances 
tool represents step forward development auxiliary tools hard task finding similar systems 
example clone representing domain idiom shown 
lines repeated times source file 
control system commanding arm transfers product system move load position basic command device 
device mode move abs device xf position int db get int db xfer arm load iv move swap device xf data char device xf data size sizeof msg device move msg send process id di device data uint data size msg flags msg device xfer move printf xfer arm rotated load domain idiom clone detection obvious step remove clones subsystem 
organization maintaining code currently high software engineering costs appears motivated carry process manually clone detector shows replacement macros 
follow step insert clone detector software engineering check process eliminate clones arise 
number improvements clone detector including performance dags dataflow graphs trees operations 
current detector uses mb ram minutes cpu time compute exact near clones sloc code 
space demand determined essentially size syntax trees hash tables 
ast node size implementation reduced factor removing ambiguities grammar parse code reduce demand estimated reducing storage costs mb 
clone detection done comparing subtrees easily parallelizable 
clone detector sequentially coded parallel language easy accomplish expect nearly linear speedup processors available commercial servers reducing runtime minutes 
detector uses thresholds eliminate comparisons small trees 
prevents detecting near clones clone instance small large 
remove limitation 
algorithms effectively dags change trees 
dms plan convert identifiers tree leaves cross links syntactic construct defining identifier forming dags parse trees 
advantage preventing false positive exact clones accidentally textual name refer different identifiers language scoping rules 
near misses parameterized non identical names get 
order properly build dags required preprocessor primitives especially include directives normally handled 
program representation control data flows explicit allow semantic oriented clone detector insensitive variable names statement ordering 
dms construct representations able build sophisticated detectors 
incremental value detectors outlined clear 
related fast string method dup detecting exact clones near clones considered baker reported clones large application sloc 
algorithm easy implement operates nicely scale fails handle clones subtrees parameters text syntax 
producing clones programmers change white spacing blanks tabs newlines comments disable recognition 
simple lexical processor overcome particular problem 
name resolution accomplished parsing applying deeper knowledge language scoping rules 
considerable amount effort invested teaching dup lexical syntax language effort near detection possible 
going put energy teaching tool language syntax just build parser 
type string matching detect clones commutative operators near misses 
method apparently parses program text computes hash code function bodies forming vector predefined software metrics sloc halstead 
recognition appears hashing function unnecessarily complicated necessarily providing hash function 
implementing running clone detection process nearly fast straightforward implementation important scale clone detection interesting 
furthermore limited language constructs metrics applies hinting reason operates function bodies 
augment simple hashing schemes reasonably detect near misses sequence clones 
method detect cloned expressions statement sequences data declarations outlined method clone removal 
practical method detecting clones variations compiler common subexpression elimination 
method straightforward implement parsing technology detects clones arbitrary language constructs computes macros allow removal clones affecting operation program 
applied method real application confirmed previous estimates clone density suggesting manual software engineering process constant 
automated methods lower value constant concomitant savings software engineering maintenance costs 
clone detection tools potential aiding domain analysis 
aho alfred aho ravi sethi jeffrey ullman compilers principles techniques tools addisonwesley 
baker brenda baker finding duplication near duplication large software systems working conference reverse engineering 
baxter ira baxter christopher software change design maintenance international conference software maintenance ieee 
charniak eugene charniak drew mcdermott artificial addison wesley 
jean marc dare reengineering working conference reverse engineering ieee 
bruno international conference software maintenance ieee 
tomita generalized lr parsing masaru tomita ed kluwer academic publishers norwell massachusetts 
wagner tim wagner susan graham incremental analysis real programming languages proceedings sigplan conference programming language design implementation june acm 
