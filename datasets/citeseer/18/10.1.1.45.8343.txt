double description method revisited fukuda alain institute operations research ethz ch zurich switzerland department mathematics epfl ch lausanne switzerland 
double description method simple useful algorithm enumerating extreme rays general polyhedral cone ir despite fact hardly state interesting theorems time space complexities 
method introduce new ideas efficient implementations show empirical results indicating practicality solving highly degenerate problems 
pair real matrices said double description pair simply dd pair relationship ax holds 
clearly pair dd pair necessary column size equal row size say term double description introduced motzkin quite natural sense pair contains different descriptions object 
set represented fx ir ax simultaneously represented fx ir subset ir called polyhedral cone matrix matrix called representation matrix polyhedral cone 
shall simpler term cone polyhedral cone sequel deal cones 
cone represented say generating matrix matrix generates polyhedron 
clearly column vector generating matrix lies cone vector nonnegative combination columns minkowski theorem states polyhedral cone admits generating matrix 
theorem minkowski theorem polyhedral cones 
theta real matrix exists theta real matrix dd pair words cone generated row size finite number 
allow size infinite trivial generating matrix consisting vectors cone 
respect essence theorem statement cone finitely generated 
converse theorem known weyl theorem 
theorem weyl theorem polyhedral cones 
theta real matrix exists theta real matrix dd pair words set generated cone 
theorems suggest fundamental problems construct matrix matrix converse 
known problems computationally equivalent meaning linear time reducible 
fact easily prove farkas lemma dd pair dd pair 
treat problem problem reason shall concentrate problem find generating matrix clearly appropriate formulation problem require minimality meaning find matrix proper submatrix generating 
note minimal set generators unique positive scaling assume regularity condition cone pointed origin extreme point 
geometrically columns minimal generating matrix correspondence extreme rays problem known extreme ray enumeration problem 
problem main concern theoretically practically necessity importance generate redundant information 
extreme ray enumeration problem studied directly indirectly researchers mathematics operations research computational geometry considerable efforts devoted finding better algorithms problem 
despite efficient enumeration algorithm general problem known 
mean efficient enumeration algorithm runs time polynomial input size output size 
efficient algorithms exist certain special cases 
problem said degenerate vector satisfying inequalities ax equality nondegenerate 
avis fukuda af showed problem nondegenerate possible solve extreme ray enumeration problems time space md number extreme rays 
note problem treated af vertex enumeration problem non homogeneous version problem simple transformations 
implementation avis fukuda algorithm publicly available avi 
examine classical algorithm known double description dd method extremely simple algorithm 
primarily interested practicality algorithm applied highly generate problems 
describe algorithm briefly 
submatrix consisting rows easy find generating matrix small say 
general iteration algorithm constructs dd pair dd pair computed 
algorithm rediscovered repeatedly different names 
method known algorithm che basically method 
dual setting computing generating matrix known convex hull computation method essentially equivalent method see ede mul 
hand algorithm known fourier motzkin elimination general dd method considered method partly solve extreme ray enumeration problem 
algorithm essentially different crucial information double description associated convex polyhedra applied problem 
importance dd method understood theoretically moment worst case behavior algorithm known exponential sizes input output 
algorithm sensitive permutations rows exponential behavior exhibited column size explodes bad ordering rows certain class matrices see dye 
observed properly implemented certain heuristic strategy selecting ordering techniques competitive algorithm particular highly degenerate problems 
useful implementation techniques dd algorithm main purpose 
order argue necessity various implementation techniques list serious pitfalls naive dd method avoided possible algorithm terribly sensitive ordering rows practice random ordering leads prohibitive intermediate generator matrices especially highly degenerate problems generates enormous number redundant generators goes tractable limit computation quickly ordering known input data perturbed resolve degeneracy size perturbed output grow exponentially sizes original input output data structures computational methods part algorithm significantly improve efficiency computation appropriately chosen 
noted original gives satisfactory remedy explains generate minimum generating matrix implementations fact follow ideas 
point discussed ab shown perturbation dd method exponentially slower certain class polyhedra 
serves formal justification perturbation techniques find dd method exploit little assumptions 
implementations apply perturbations input data 
main contribution show practical ideas handle difficulties 
respect tested different orderings rows 
orderings divided classes static ordering dynamic ordering 
ordering prefixed computation procedure selects row dynamically computation proceeds 
typical static ordering lexicographic ordering lex min typical dynamic ordering max cut ordering amounts select row removes generators columns possible 
experimentally dynamic orderings max cut min cut perform worse lex min ordering relatively large set degenerate test problems 
study static ordering gradually increases dimension intermediate cones 
ordering motivates introduce decomposition technique dd method called column decomposition 
technique especially useful cones arising combinatorial optimization problems 
concerning proposing different data structures 
data structures efficient handling minimum generating matrix consisting extreme rays adjacency extreme rays 
implementations differ considerably data structure suggested books dual version beneath method algorithm stores complete adjacency extreme rays 
main idea implementations store necessary adjacency relations 
implementation expensive storage time 
report experimental results showing practicality implementations 
dd method store dd pair intermediate cone computation easily exhaust memory space available computers 
reason useful decompose problem smaller problems 
introduce row decomposition technique purpose 
technique useful reducing size problem parallelizing computation 
tested practicality technique subject research 
emphasize implementations quite competitive interest compare implementations existing implementations bdh ver wil 
difficult fair comparisons think comparisons useful 
concentrate showing learned experiences dd method techniques useful 
reproduce experimental findings implementations publicly available anonymous ftp 
double description method primitive form section give simplest form dd method 
suppose theta matrix fx ax 
dd method incremental algorithm construct theta matrix dd pair 
sequel assume simplicity cone pointed origin extreme point equivalently rank reduce problem pointed case simply restrict cone orthogonal subspace space fx describe section handle directly case 
assume system ax irredundant 
subset row indices mg ak denote submatrix consisting rows indexed suppose generating matrix ak equivalently ak dd pair 
ak clearly done 
select row index try construct dd pair ak information dd pair ak 
basic procedure described algorithm construct generating matrix 
procedure easily understood geometrically looking cut section cone ak appropriate hyperplane intersects extreme ray ak single point 
assume cone pointed bounded 
having generating matrix means extreme rays extreme points cut section cone represented columns cut section cone lying ir illustrated fig 

example cube abcdefgh 
fig 

illustration mechanism dd method 
newly introduced inequality partitions space ir parts fx ir fx ir gamma fx ir intersection new extreme points shown bold fig 

set column indices rays partitioned parts accordingly fj fj gamma fj gamma call rays indexed gamma positive zero negative rays respect respectively 
construct matrix generate new jj theta jj gamma rays lying ith hyperplane appropriate positive combination positive ray negative ray discarding negative rays 
lemma ensures dd pair ak provides key procedure primitive version dd method 
lemma main lemma double description method 
ak dd pair row index pair ak dd pair theta jj matrix column vectors defined theta gamma jj gamma theta gamma proof 
ak cone generated matrix prove construction jj theta gamma ae clear 
shall show ae nonnegative combination exist positive gamma expression suppose gamma 

implies 
construction hk hk gamma subtracting appropriate positive multiple obtain expression positive combination vectors new coefficients number positive gamma strictly smaller expression 
long gamma positive apply transformation 
find finite number steps expression gamma proves ae ut quite simple find dd pair ak jkj serve initial dd pair 
simple efficient way obtain initial dd form selecting maximal submatrix ak consisting linearly independent rows vectors obtained solving system equations ak identity matrix size jkj matrix unknown column vectors assumed rank gamma pair ak clearly dd pair ak gamma 
write dd method procedural form procedure obtain initial dd pair ak mg select index mg construct dd pair ak ak lemma output 
dd method primitive straightforward implementation quite useless size increases fast goes tractable limit 
reason vectors jj algorithm generates defined lemma unnecessary 
section show avoid generating redundant vectors 
dd method dual form constructing convex hull finite set points known beneath method studied extensively field computational geometry 
implementation proposed mul interpreted dd method basically random inequality ordering store complete adjacencies rays intermediate cones efficient updates 
serious problem analysis yields optimality depends assumption input nondegenerate dually points general position 
assumption efficient linear time algorithm af nondegenerate case problems dd method superior degenerate 
furthermore show necessary store adjacencies rays 
fact new technique essentially store adjacencies needed computation 
practical implementations section shall describe practical implementations dd method 
simplest called standard sense implementing dd method quite come implementation fact suggested original 
shall give new implementations efficient standard algorithm 
standard implementation introduce definitions properties strengthening lemma 
remember assuming pointed rank vector said ray ff positive ff 
identify rays ff positive number ff 
shall denote equivalence vector define zero set active set set inequality indices 
word zero comes slack variables zero associated inequalities 
proposition 
ray fx rank gamma rank fig gamma contains linearly independent rays nonnegative combination distinct rays rank gamma 
proof 
linear combination rows ak 
clearly contains linearly independent vectors ff vectors linearly independent ff 
coefficients ff chosen ff ff min gammaa vectors linearly independent vectors 

contains vector gammav rank rank gamma exist rank fi jg rank exist 
satisfies 
ff gammaff exist positive maximal values ff ff get oe ff ff ff ff 
holds 
ut ray said extreme nonnegative combination rays distinct proposition 
ray extreme ray rank matrix gamma nonnegative combination extreme rays proof 
observe exist belongs fx sum nonnegative terms 
rank gamma fkr irg gammar elements distinct extreme ray 
rank gamma proposition exist rays nonnegative combination rays extreme ray 
proves 
rank rank repeating argument rank gamma proves 
ut extreme ray certainly necessary generate corollary 
corollary 
minimal generating matrix set extreme rays observe assumption pointed important computing unique generating matrix formulated problem 
pointed infinitely minimal generating matrices 
say distinct extreme rays adjacent minimal face containing contains extreme rays 
equivalent say extreme ray proposition 
distinct rays statements equivalent adjacent extreme rays extreme rays rank matrix gamma 
ray oe proof 
distinct rays fx 
minimal face containing prove equivalence extreme rays pointed 
holds rank gamma dim generate written ffr ff implies ff ff nonnegative exists gamma respectively gamma ffa respectively ff 
nonnegative combination extreme ray holds 
observe dimensional face contains extreme rays proposition contains exactly extreme rays 
hold rank gamma proposition dim extreme rays necessary generate proposition 
adjacent 
equivalence prove 
holds rank gamma 
follows proposition oe imply rank gamma extreme ray proposition 
adjacent holds 
hold nonadjacent extreme rays extreme ray 
rank gamma exist extreme ray different serve rank gamma know contains extreme rays extreme rays different serve showing invalidity 
ut proposition statement called combinatorial characterization adjacency algebraic characterization 
main lemma strengthened practical purposes follows lemma strengthened main lemma dd method 
ak dd pair rank ak row index pair ak dd pair theta jj matrix column vectors defined theta gamma adjacent ak jj gamma furthermore minimal generating matrix ak minimal generating matrix ak 
proof 
assumptions satisfied 
know proposition extreme ray ak belong extreme rays ak necessary denote abbreviation observe jj fig 
adjacent extreme rays ak rank aw gamma 
proposition rank jj gamma 
jj extreme ray ak belong suppose adjacent extreme rays 
rank aw gamma get rank jj gamma jj necessary 
rank aw gamma know proposition extreme rays ak 
belong dimensional face containing exactly extreme rays ak belong adjacent pair produce new ray equal jj jj necessary 
new rays extreme rays ak minimal minimal 
ut lemma write straightforward variation dd method produces minimal generating set procedure obtain initial dd pair ak minimal mg select index mg construct dd pair ak ak lemma output 
implement check pair extreme rays ak adjacent ak 
state proposition ways check adjacency combinatorial algebraic way 
know theoretical reason conclude method efficient 
computational experiments indicate combinatorial method faster algebraic method 
see section 
asymptotic complexity algorithm depends strongly number extreme rays intermediate cones ordering rows assume number remains denoting size output number rows complexity dominating part coming combinatorial test applied iteration pair test comparisons vectors size new implementation prefixed row ordering computational experiences variation dd method described previous section reasonably efficient algorithm incorporates ordering inequalities 
method scans pairs rays ak iteration generates new ray identified adjacent ak 
natural imagine pairs non adjacent pairs scanning pairs inefficient 
way reduce unnecessary scanning store adjacencies rays scan adjacent pairs 
modification look efficient serious drawbacks 
storage space quite large number adjacencies quadratic number rays 
secondly clear select pairs rays scanning large adjacency data 
furthermore updating adjacency data quite expensive 
observations lead seek implementation dd method stores adjacent pairs rays ak produce new rays iterations 
shall show done ordering inequalities prefixed 
idea quite simple 
suppose fix ordering inequalities natural ordering 
convenience fx jg suppose ith iteration add ith inequality remaining inequality indices iteration minimal generating set cone gamma hand dd method produce new set rays satisfying ith inequality equality produce minimal generating set cone pair adjacent rays ordering inequalities fixed know exactly happen pair 
cases 
rays adjacency won create new rays stay rays gamma infeasible adjacency won create new rays stay rays gamma rays say infeasible 
new ray created ray satisfies kth inequality strict inequality 
furthermore easy recognize case holds pair adjacent rays minimum infeasible index defined minf ae feasible minfk mg stored ray clearly case occurs minf minf case occurs minf minf case occurs minf minf new ray created minf minf 
incorporate observations prepare linked list pairs adjacent rays generate new rays iteration sure general iteration adding ith inequality list contains exactly pairs adjacent rays create new rays 
know rays satisfy condition earlier iteration 
order construct linked list successfully free duplications simply check candidate adjacent rays earlier iteration satisfy chance condition checked 
case store pair pair adjacent rays adjacent previous cone gamma examined possible candidate membership newly born adjacencies types adjacency inherited previous cone gamma rays say old newly created old ray gamma adjacent gamma pair linked list ii adjacency new rays lie hyperplane fx iia rays newly created iib old adjacent gamma classification newly born adjacencies illustrated fig 
pairs type pairs type iia type iib 
enumeration pairs type simple linked list type ii trivial 
take pairs rays lying check adjacency 
algorithm described store newly created ray minimum infeasible index 
procedure simply checks new pair adjacent rays satisfies condition time stores adjacency case lists free duplicates 
procedure index adjacent store pair linked list endif endif 
procedure obtain initial dd pair ak minimal permute row indices sg initialize linked lists pair adjacent rays satisfying endfor obtain dd pair ak generating new rays pair linked list pair rays lying satisfying endfor endfor output 
new variation optimal sense generation new rays done efficiently possible linear time 
inefficiency exists comes line list new pairs adjacent rays 
computational experiments indicate considerable speed implementation standard algorithm 
see section 
implementation prefixed row ordering combinatorial adjacency test expansive checking point proposition linear number extremal rays current cone way try improve efficiency execute faster tests detect non adjacency 
tests may derived necessary conditions adjacency take advantage fact computing cardinality subset relatively cheap 
set row indices considered iterations 
point proposition get proposition nc 
necessary condition pair adjacent jz gamma property described previous section adjacency inherited new get usually stronger necessary condition 
extremal ray iteration created 
father defined element pair created feasible respect separating hyperplane 
proposition nc 
distinct extreme rays gamma separated hyperplane introduced iteration pair inherit adjacency gamma necessary condition adjacent gamma hyperplane introduced iteration contain gamma gamma gamma order implement test store ray pointer father recognize inherited adjacency pair extreme rays gamma inherited adjacency element father 
procedure obtain initial dd pair ak minimal mg select mg partition gamma obtain dd pair ak fr pair gamma inherited adjacency add jj nc nc add jj endif endif endif endif endwhile output observe fixed ordering rows proposed variations differ aspects pairs scanned iteration combinatorial adjacency test executed 
variation scans pairs lying current hyperplane variation scans pairs separated hyperplane 
iteration combinatorial test performed hyperplane containing rays variation preceding iteration separating hyperplane 
similar operations executed variations testing small subset zero set pair void conditional storage proposition second combinatorial test executed exactly pairs test nc introduced 
decomposition smaller subproblems large problems number rows expected number extreme rays large computing time may prohibitive running time iteration grows cube number extreme rays actual cone 
natural approach solve problem decompose smaller ones nice feature double description method flexibility handle cases 
paragraphs describe simple modifications basic method enumerate extremal rays facet cone preserve partial results successive computations 
row decomposition natural way decompose ray enumeration problem solve extreme ray enumeration problem cones associated defined fx ir mg subproblem fewer inequalities original problem equality constraint extreme ray enumeration easier 
output rays satisfy ignored inequalities strict inequality gamma extreme ray original cone output exactly 
furthermore subproblem solved independently parallel 
problem may solved equation eliminate variable destroy nice structure better way treat equalities double description method modify algorithm follows iteration corresponding equality iteration performed usual iteration extremal rays satisfy equality rays strictly feasible respect hyperplane eliminated 
construction rays created iterations satisfy equality 
theory row decomposition process applied recursively difficulty may occur rows redundant eliminated order enumeration problem really easier redundancy row checked solving linear program repeating procedure hardly efficient 
practice nice structure faster heuristic exact methods may exist check redundancy facets hardly inherit structure 
related technique enumerate extreme rays facet facet 
row decomposition technique eliminate considered inequalities ith subproblem 
technique efficient symmetries 
case appropriately choosing representative class facets may significantly decrease computing time 
occurs combinatorial problems specially variables associated edges complete graph 
block structure decomposition kind column decomposition matrix special structure 
special structure call block structure appears frequently combinatorial problems 
indices linearly independent rows row linear combination gamma say matrix block structure rows linear combination nonzero coefficient ii elements ik row vector satisfy ik block structure interesting property 
cone defined columns gamma rows system irredundant projection hyperplane 
number extreme rays greater ordering rows columns input matrix exists producing block structure maintained iterations algorithm provides control points number extreme rays actual cone successive dimension iteration gamma number extreme rays exceed number extreme rays observe exists ordering rows satisfying property having projection property 
block structure special case ordering projection property holds successive dimension cones generally direct interpretation typically solution main problem subgraph 
describe modify basic double description algorithm order maintain block structure general iteration cone 
gamma fx ir gamma described minimal set generators gamma fx ir fb basis space fr set representatives minimal proper faces faces dimension gamma minimal set generators fx ir ig determined rules obtained stated lemma generators adjacent contained dimensional face gamma choose fb delta gamma delta set fb gamma fr delta gamma delta initializing algorithm fx ir gamma ls als fa dg avoids computation case vectors satisfy required property 
matrix block structure may chosen canonical basis ir iterations particularly easy perform sign jth unit vector properly chosen 
note iteration 
pair adjacent block structure part ordering conjunction row decomposition reduce computing time iteration completed main problem generators saved computation subproblem corresponding facet may started iteration generators lying computational results section experiments carried different implementations dd method 
test examples part distribution cdd publically available anonymous ftp 
input matrices come various combinatorial geometric practical applications vertices hypercube cube dual cross complete cut cone ccc cut polytope ccp arborescences rooted directed trees small graphs vertices regular polytope reg ternary alloy ground state analysis mit 
cones hypercube degenerate 
experiments adjacency tests table contains running times algebraic combinatorial adjacency test examples 
shows combinatorial test faster 
partial explanation expect algebraic test perform better proving adjacency exhibit gamma linearly independent rows combinatorial proving exhibit extreme ray violating proposition number tests executed nonadjacent pairs usually larger 
table 
comparison algebraic combinatorial adjacency tests test problems sizes algebraic test combin 
test dim output seconds seconds reg reg cross ccc ccp cube ccc ccp mac running mach os cdd compiled gcc experiments row ordering different static dynamic strategies row ordering compared table 
dynamic strategies consist selecting hyperplane cuts maximum minimum number actual extremal rays 
hypercube strategies perform equally lexicographic ordering better dominating random 
problems large number rows higher dimension lexicographic ordering variant obtained example permuting columns useful 
table 
comparison different row orderings test problems sizes max intermediate size average size dim output random reg cross cube ccc ccp solved variation cdd experiments new edge data updates table shows speedup obtained improvements standard method 
clearly ratios depend dimensions ordering 
table 
comparison dd standard variation test problems sizes speedup ratio dim output seconds seconds times faster reg mit cube cross cube ccc ccp cube ccc ccp standard cdd variation cdd compiled gcc comparison dd variation variation relative performances variation table 
variations dominates variation usually slightly faster pairs lying common hyperplane pairs separated 
table 
comparison test problems reg ccp cross cube dimensions output pairs scanned pairs separated time sec pairs scanned time sec comb tests rays max rays total variations coded pascal run silicon graphics ab avis bremner 
convex hull algorithms 
technical report tr school computer science mcgill university montreal canada 
available anonymous ftp mutt cs mcgill ca directory pub doc 
af avis fukuda 
pivoting algorithm convex hulls vertex enumeration arrangements polyhedra 
discrete comput 
geom 
avi avis 
implementation reverse search vertex enumeration algorithm 
school computer science mcgill university montreal canada 
programs lrs qrs available anonymous ftp mutt cs mcgill ca directory pub 
bdh barber dobkin 
quickhull algorithm convex hulls 
technical report gcc geometry center minnesota 
avis fukuda 
ground states ternary fcc lattice model nearest nearest neighbor interactions 
physical review 
che 
algorithm finding general formula nonnegative solutions system linear inequalities 
computational mathematics mathematical physics 
dfl fukuda laurent 
cone 
discrete mathematics 
dye dyer 
complexity vertex enumeration methods 
math 
oper 
res 
ede edelsbrunner 
algorithms combinatorial geometry 
springer verlag 
fukuda 
cdd implementation double description method computing vertices extremal rays convex polyhedron system linear inequalities 
department mathematics swiss federal institute technology lausanne switzerland 
program available ethz ch directory pub fukuda cdd 
gru 
convex polytopes 
john wiley sons new york 
motzkin raiffa gl 
thompson 
double description method 
kuhn tucker editors contributions theory games vol 

princeton university press princeton ri 
ms shephard 
convex polytopes upperbound conjecture 
cambridge university press 
mul mulmuley 
computational geometry algorithms 
prentice hall 
sch schrijver 
theory linear integer programming 
john wiley sons new york 
ver le verge 
note algorithm 
technical report internal publication irisa rennes france february 
wil wilde 
library doing polyhedral operations 
technical report internal publication irisa rennes france december 
article processed macro package llncs style ii 
