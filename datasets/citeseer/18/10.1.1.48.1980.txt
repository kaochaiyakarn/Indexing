termination associative commutative rewriting dependency pairs claude march xavier lri cnrs ura universit paris sud centre orsay orsay cedex france phone fax email lri fr 
new criterion termination rewriting described arts giesl 
show criterion generalized rewriting modulo associativity commutativity 
show build weak ac compatible reduction orderings may criterion 
applications rewrite systems interested nite termination reductions property called termination strong normalization system 
rewriting model computation example relation functional programming termination insures existence result computation 
rewriting automated reasoning equational logic existence normal forms important terminating rewrite system basis noetherian induction 
checking termination rewrite system crucial issue 
property known computationally unsolvable general important automatic tools correct incomplete prove termination rewrite systems meets practice 
methods known proving termination trs implementable technique consisting building reduction ordering terms check automatically rewrite rules consider strictly decrease respect ordering 
implementing program checking termination consisted mainly implementing ways building reduction orderings 
arts giesl proposed new method proving termination consist anymore checking rules strictly decrease careful check structure rules important point remains purely syntactic nite test called dependency pairs implementable 
research supported part ccl ii hcm network console de programmation du 
propose generalization dependency pairs method rewriting modulo ac associativity commutativity important issue practice 
fact quite dioeerent notions ac rewriting section rst describe clearly kind ac rewriting going consider ac rewriting theorem shows ac rewriting important 
section show dependency pairs criterion standard rewriting lifted ac rewriting theorem corollary 
arts giesl shown dependency pairs criterion bit stronger dependency graph deeper analysis rewrite rules structure show section improvement lifted ac rewriting 
dependency pairs criterion amounts term ordering proving termination slightly larger class orderings allowed weak reduction orderings orderings need ful ll strict monotonicity property implies weak monotonicity implies 
case ac rewriting needs ac compatible weak reduction orderings section show orderings built 
section give small important new criterion completion procedures 
course give examples termination proved automatically new termination toolbox implemented inside cime system developed research team 
basic notions recall rst usual notions rewriting give notations 
focus de nition rewriting modulo ac 
signature nite set symbols arities set terms variables denoted 
root position denoted root symbol term denoted head tj denotes subterm position denotes term obtained putting term context position denote gamma gamma 
rewrites position rule gamma gamma 
rewrites set rules steps say rewrite system terminates nite sequence reduction exists 
say term strongly normalizable sn short nite sequence reduction starting say de ned symbol occurs top left hand side constructor 
terms ac symbols terms practice symbols ful ll commutativity axiom 
turned rule losing termination standard technique deal consider classes terms modulo commutativity 
ful lls associativity equation turned rule losing termination modulo commutativity delta delta delta case consider class terms modulo associativity 
call ac symbol denote fac set ac symbols 
consider symbols commutative specialized case 
formally speaking consider set terms ac symbols may arity greater 
form term denoted normal form rules gamma xn gamma xn ac symbol clear ac ioe equivalence permutations ac symbols arguments 
rewriting modulo ac de nition 
say rewrites rule modulo ac denoted gamma gamma gamma gamma gamma 
ac ioe ac ac gamma gamma 
deciding term rewrites modulo ac amounts searching instance rule term ac equivalent eoecient 
peterson stickel proposed restricted de nition wants match rule term position allowed position de nition 
ac extended rewrite relation de ned gamma gamma gamma gamma gamma 
ioe substitution oe sj ac loe roe ac extended rewriting may lead pathological examples rewrite system terminates ac 
case example fa ac symbol term irreducible ac extended rewriting reducible nitely class rewriting ac contains redex 
phenomenon arises system coherent ac sense de ned jouannaud kirchner ac gamma gamma gamma gamma 
imply exist gamma gamma gamma gamma 
ac gamma gamma gamma gamma fact may rewrite system ac coherent adding called extended rules rule ac add rule new variable 
variant ac extended rewriting sense builds rewriting relation extended rules considering terms 
de nition 
ac rewrite relation de ned terms gamma gamma gamma gamma gamma 
ac ioe substitution oe sj loe roe ac new variable sj oe oe second case called extended matching 
note extension rules la peterson stickel case necessary linear variable immediate subterm de nition dioeerent ac extended rewriting coherent systems fact important notion position term changed bit ac rewriting mean rewrite term position rewrite position extended matching 
change de nition shown quite powerful example ac completion completeness proof far simpler 
termination criterion described section detecting position term rewritten inde nitely notion position discussed really important 
flat ac rewriting coherent 
generally church rosser locally terminating 
shown jouannaud kirchner church rosser property valid class rewriting proved terminating 
fortunately proposition allows check termination ac rewriting 
theorem 
termination ac rewriting equivalent termination class rewriting 
proof 
assume term sn ac nite reduction starts gamma gamma gamma gamma gamma 
ac ac loe 
easy see contains extended instance rewrites ac term ac equivalent repeating construction build nite reduction ac 
reciprocal trivial 
term orderings termination general notions term orderings termination refer 
recall need 
de nition 
quasi ordering terms transitive relation 
strict part de ned ioe equivalence part de ned ioe said founded noetherian nite decreasing sequence delta delta delta exists 
said weakly monotonic implies context strictly monotonic implies 
said stable implies soe toe implies soe toe substitution oe 
strict reduction ordering founded monotonic stable weak reduction ordering weakly monotonic 
quasi ordering ac compatible ac ac imply known proposition gives termination criterion rewriting system modulo ac showing rules decrease ac compatible reduction ordering 
proposition 
ac terminates ioe ac compatible reduction ordering rules dependency pairs termination criterion basic criterion key idea show nite reductions particular form involving called dependency pairs 
de nition 
rewrite rule set dependency pairs set pairs terms form hf um um subterm de ned root symbol ac set ac extended dependency pairs union set standard dependency pairs set dependency pairs new variable occur rule 
note necessary head extended pair necessary linear variable initial rule rule need extended matching de nition 
chain dependency pairs sequence hs hs pairs substitution oe oe gamma gamma gamma gamma 
ac oe 
consider substitution assume renaming sets variables dioeerent pairs disjoint 
example pe arithmetic 
addition multiplication natural numbers successor de ned theta theta theta theta ac 
constructors dependency pairs trs hx yi hx yi hx zi second rule hx theta theta theta zi third hx theta theta yi hx theta theta xi hx theta theta theta yi hx theta theta theta hx theta theta theta theta zi fourth 
theorem 
rewrite system relation gamma gamma gamma gamma 
ac terminates nite chain 
give proof due lack space see 
essentially arts giesl simply take care may occur 
corollary 
ac compatible weak reduction ordering rule dependency pair hs ti ac terminating 
note weak monotonicity dependency pair corresponds rewrite step context chains 
dependency pairs criterion marked symbols arts giesl shown enhancement criterion marking chains top symbols non sn subterms 
de nition chains modi ed bit reason modi cation shown counter example 
de nition 
de ned extended signature de ned symbol copied mark 
rule set dependency pairs marks set pairs terms form um um subterm de ned root symbol marked symbols occur root position 
set marked ac extended dependency pairs de ned accordingly 
augmented rules rule form de ned ac symbol root position marked chain dependency pairs sequence hs hs pairs substitution oe oe gamma gamma gamma gamma 
ac oe 
proposition 
rewrite system nite marked chains ioe nite non marked chains 
proof 
chain marks remove marks reciprocally chain marks put marks possibly introducing rewrite steps rules marked symbols allow larger class orderings corollary 
corollary 
ac compatible weak reduction ordering rule marked dependency pair hs ti ac terminating 
counter example consider rules 
rewrite system fa ag terminating nite sequence appears nite non marked chain 
marked chain involving rewrite step see sense modi cation need example binary arithmetic 
computing natural numbers binary notation eoecient pe notation 
binary notation de ned constant unary post xed functions 
example written followed usual binary notation 
semantically denotes denotes denotes 
addition multiplication de ned trs theta 


theta 
theta theta theta theta ac 
trs marked ac extended dependency pairs give dependency pairs third rule middle 
hz hz hz computing system obtain chain yi substitution fx 



dependency graphs dependency graphs allow check dependency pairs strictly decrease 
lift re nement ac trs de ning ac dependency graphs 
de nition 
ac dependency graph rewrite system graph having ac extended dependency pairs vertices edge hs hs ioe substitution oe allows oe gamma gamma gamma gamma 
ac oe 
know terminates modulo ac ioe chain chain corresponds nite path graph 
graph nite nite paths depend cycles 
just check pairs decrease cycles 
corollary 
ac trs ac dependency graph 
ac compatible weak reduction quasi ordering rule cycle hs ti cycle contains strictly decreasing pair ac terminating 
unfortunately existence oe oe gamma gamma gamma gamma 
ac oe pairs hs hs undecidable general 
approximation dependency graph computed way criterion soundness preserved 
adapt approximation proposed arts giesl standard rewriting 
de nition 
term cap subterms headed de ned symbols variables replaced new distinct variables 
term said term cap unify modulo ac 
approximated ac dependency graph ac trs graph vertices ac extended dependency pairs edge hs hs ioe 
aim show approximated graph contains ac dependency graph 
lemma 
gamma gamma gamma gamma 
ac cap ac 
proof 
induction structure variable head de ned symbol cap variable uni es head constructor say cap cap cap sn 
constructor rewriting root occur gamma gamma gamma gamma 
ac necessary root symbol 
induction hypothesis cap ac uni es cap pairwise distinct variables uni ers combined single ac uni er corollary 
substitution oe soe gamma gamma gamma gamma 
ac toe terms example 
ff free terminates dependency pair cap unify cycle dependency graph 
ac situation dioeerent extended pair cap ac uni es lefthand sides pairs 
dependency graph fact uni er fx 


substitution gives counter example termination delta delta delta see example graph criterion may give diagnostic conclude termination 
example pe arithmetic continued 
shape ac dependency graph pairs theta hx thetas theta xi hx thetas theta theta xi pairs need orientation hx thetas theta xi hx thetas theta theta xi 
building ac compatible weak reduction orderings shown previous sections proving termination dependency pair criterion amounts building weak reduction orderings 
constructions exist going describe rst ac compatible path orderings strictly monotonic focus build weak orderings polynomial interpretations nally show orderings built recursive program schemes allow particular building weak reduction orderings rpo 
path orderings assume reader familiar recursive path orderings status 
ordering terms requiring ac symbols multiset status 
ordering monotonic need high restrictions precedence shown proposition 
proposition 
ac symbols minimal precedence rpo ac compatible simpli cation ordering 
associative path orderings extensions rpo allow general precedence built rpo comparing normal forms terms chosen rewrite systems 
modi ed associative path ordering de ned 
elaborated path orderings known don need powerful orderings 
assume precedence ac symbol precedence symbols form delta delta delta unary ac constant may course absent 
set rules proposition 
ac convergent 
ioe rpo ac compatible simpli cation ordering called modi ed associative path ordering 
example addition pe arithmetic 
precedence prove note second rule sides fact equivalent wants prove termination system dependency pairs criterion need compose polynomial interpretation 
note permit proving termination system multiplication precedence theta allowed 
orderings de ned strictly monotonic 
section see construction aimed making weak reduction orderings 
weak polynomial interpretations de nition 
polynomial interpretation symbol arity polynomial integral variables 
interpretation de nes interpretation term variables variable term polynomial function variables polynomial interpretation de nes strict ordering terms ioe integer ordering polynomial functions ioe abbreviates xn means 
say ioe ioe 
careful strict part proposition 
arity implies implies weak reduction ordering 
ac symbol form axy ac ac compatible 
rst part proposition straightforward second part known 
note methods exist checking polynomial greater 
example pe arithmetic continued 
need orientation hx thetas theta xi simple interpretation trick 
theta xy theta example binary arithmetic continued 
nite chain apply corollary polynomial interpretation theta xy gamma gamma gamma theta xy gamma example ternary integral arithmetic 
march proposed system addition multiplication integers balanced ternary notation semantically denote respectively gamma 






gamma opp opp opp 
opp opp 
opp opp 
opp theta theta 
theta theta theta theta 
theta opp prove system terminates modulo ac need quite complicated adhoc demonstration automatic proof termination known 
dependency pairs criterion termination checked automatically interpretation theta xy gamma theta xy gamma gamma gamma opp gamma opp recursive program schemes de nition 
rewrite system called recursive program scheme rps short rule form xn pairwise distinct variables term de ned symbol occurs left hand sides ac rps de ned ac symbol rule form ac rfx 

xg 
note easy check rewrite system form terminates recursive mutually recursive rules 
note allow rules ac symbols having variables lefthand side see counter example 
proposition 
terminating ac rps ac 
proof 
check ac critical pairs 
superpositions rules free symbols 
consider ac symbol rule renaming fx 

ac uni cation yields solutions considered reducible unblocked criterion oe fx 

oe fx 

roe ac oe trivially roe ac oe hypothesis 
proposition reformulation theorem terms weak reduction orderings generalized ac case 
proposition 
terminating ac rps ac compatible weak reduction ordering 
relation ioe ac compatible weak reduction ordering 
proof 
obviously founded quasi ordering 
order prove stability monotonicity need lemma lemma 
ac rps 
term substitution oe toe oe 
proof 
toe oe just prove oe normal form 
ac symbol arity left hand sides contain de ned symbol similarly oe oe contains de ned symbol reduced normal form 
stability oe oe reduction ordering 
lemma soe toe soe toe 
process strict part 
monotonicity fx 
fx 
reduction ordering 
lemma get fx 
sg fx 
tg 
prove ac compatibility 
suppose ac ac ac get ac ac ac compatible counter example 
allow rps rules ac symbols having variables lhs proposition wrong rps fx ag putting context get contradiction monotonicity 
example 
consider system computing intersection multisets numbers 
multisets constant unary symbol builds singleton union 
true false eq true eq false eq eq 
fxg fyg eq fxg ac eq commutative 
prove termination system idea precedence eq false eq true trick rules allowed 
idea say sense rst argument important fxg smaller left hand side 
evident computing dependency graph system problem pair hz fxg fyg eq fxg decrease 
done rps fif yg satis es ac rps conditions 
note graph improvement basic criterion add rps eq dependency pairs criterion theorem proving important question dependency pairs criterion theorem proving 
explain section knuth bendix completion ac completion inference rule orient fu vg fu vg replace hs ti dependency pair rule correct sure set constructors de ned symbols change completion assume set constructors xed user attempt new rule constructor root left hand side raise failure 
main question completeness procedure preserved theorem true 
theorem 
initial set equations weak reduction ordering 
resp 
set equations resp 
rules completion step completion succeeds fair cp ioe ac proof theorem uses fundamental way strict orientation rule nice way proving completeness preserved dependency pairs reducing usual case completion successful know terminates dependency pairs criterion reduction ordering proposition 
may suppose completion run ordering inferences computed obtain dependency pair criterion shown powerful proving termination rewrite systems problems studied 
firstly criterion completion procedures clear rst order theorem proving methods usually simpli cation ordering necessary 
secondly seen dependency pair criterion allows wider class term orderings means getting dioecult build systems try nd suitable ordering rps particular 
question studied arts proposed try rps certain form 
thirdly question termination modular hierarchical rewrite systems studied arts case innermost strategy promising hierarchy rules corresponds hierarchy parts dependency graphs 
interesting study normalized rewriting special case hierarchical rewriting 
acknowledgments useful comments preliminary version 

arts 
automatically proving termination innermost normalisation term rewriting systems 
phd thesis universiteit utrecht 

arts giesl 
automatically proving termination simpli cation orderings fail 
bidoit dauchet editors theory practice software development volume lecture notes computer science lille france apr 
springer verlag 

bachmair 
associative commutative reduction orderings 
info proc 
letters 

bachmair dershowitz 
commutation transformation termination 
siekmann editor proc 
th int 
conf 
automated deduction oxford england lncs pages july 

bachmair dershowitz 
critical pair criteria completion 
journal symbolic computation 

bachmair dershowitz hsiang 
orderings equational proofs 
proc 
st ieee symp 
logic computer science cambridge mass pages june 

bachmair plaisted 
termination orderings rewriting systems 
journal symbolic computation dec 

ben lescanne 
actual implementation procedure mechanically proves termination rewriting systems inequalities polynomial interpretations 
proc 
th int 
conf 
automated deduction oxford england lncs pages 
springer verlag july 

comon editor 
th international conference rewriting techniques applications volume lecture notes computer science barcelona spain june 
springer verlag 

march 
cime completion modulo ganzinger editor th international conference rewriting techniques applications volume lecture notes computer science pages new brunswick nj usa july 
springer verlag 
system description available www lri fr demons cime html 

march 
rewrite systems natural integral rational arithmetic 
comon 


extension associative path ordering chain associative commutative symbols 
proc 
th rewriting techniques applications montr lncs pages 

dershowitz 
orderings term rewriting systems 
theoretical computer science mar 

dershowitz 
termination rewriting 
journal symbolic computation feb 

giesl 
generating polynomial orderings termination proofs 
hsiang editor th international conference rewriting techniques applications volume lecture notes computer science kaiserslautern germany apr 
springer verlag 

huet 
complete proof correctness knuth bendix completion algorithm 
comput 
syst 
sci 


jouannaud kirchner 
completion set rules modulo set equations 
siam journal computing 

kapur sivakumar 
total ground path ordering proving termination ac rewrite systems 
comon 

knuth 
art computer programming volume 
addison wesley nd edition 

lescanne 
uniform termination term rewriting systems status 
proc 
th caap cambridge 
cambridge university press 

march 
modulo une th orie pr sent par un syst convergent des probl mes du mot dans classes de th 
th se de doctorat universit paris sud orsay france oct 

march 
normalized rewriting alternative rewriting modulo set equations 
journal symbolic computation 

nieuwenhuis rubio 
precedence total ac compatible ordering 
kirchner editor proc 
th rewriting techniques applications montr lncs 
springer verlag june 

peterson stickel 
complete sets reductions equational theories 
acm apr 

steinbach 
proving polynomials positive 
editor foundations software technology theoretical computer science volume lecture notes computer science pages new delhi india dec 
springer verlag 


de aide de de 
rapport de dea universit paris sud orsay france 
