constraint databases survey peter revesz department computer science engineering university nebraska lincoln revesz cse unl edu 
constraint databases generalize relational databases finitely representable infinite relations 
surveys state art constraint databases known results remaining open problems current research directions 
describes new algebra databases integer order constraints complexity analysis evaluating queries algebra 
memory paris kanellakis growing interest years database researchers constraint databases generalization relational databases finitely representable infinite relations 
constraint databases parametrized type constraint domains constraint 
news parameters constraint databases leave intact fundamental assumptions relational database framework proposed codd 
particular 
constraint databases queried constraint query languages semantics order fixpoint logics constraints 
evaluated closed form 
algebraic efficiently evaluated set time 

constraint databases efficiently indexed 

integrity constraints enforced constraint databases 

aggregate operators applied constraint databases 

constraint databases extended indefinite information 

constraint databases extended sets nesting complex objects 
supported nsf iri iri research 
survey emphasize points give extensive points 
point find books firstorder logic example surveys constraint logic programming fixpoint semantics :10.1.1.25.8566
introductions logic programming constraints database query languages constraints 
find earlier tutorial constraint databases applications oriented survey 
points illustrated new algebra constraint databases integer order constraints 
analyses computational complexity evaluating relational calculus queries integer order constraints 
survey organized follows 
section reviews order theories 
section reviews relational databases query languages 
section contains comparison relational databases logic programming 
section reviews constraint databases query languages 
section contains comparison constraint databases constraint logic programming 
section summarizes known complexity results 
section lists results expressive power languages 
section discusses various semantic extensions constraint databases 
section mentions prototype constraint database systems 
section lists outstanding open problems 
order theories predicate calculus define order predicate calculus language 
alphabet language consists countably infinite set variables 
usually denote variables 
countably infinite set ffi constants 
usually denote constants 
domain variable ffi 
set relation symbols 
usually denote relation symbols 
connectives conjunction disjunction negation 
quantifiers exists 
usual literature restrict consideration definitions proofs connectives quantifier expressed 
possible express implication double implication connectives 
relation symbol fixed arity number arguments 
denote arity ff 
ary relations permitted 
define predicate calculus formulas abbreviated pc formulas inductively follows ary relation symbol xn variables constants xn pc formula 
oe pc formula oe pc formula 
oe oe pc formulas oe oe oe oe pc formulas 
oe pc formula variable oe oe pc formulas 
line definition call occurrence variable oe bound variable 
variables bound called free formula 
older problems considered logicians decide predicate calculus formula satisfiable relations assigned relation symbols formula formula true 
problem interest area theorem proving possible assignments formula true 
formulas property called valid 
shown church unrestricted finite infinite assignments permitted predicate calculus sentence formula free variables valid undecidable 
precisely set valid sentences 
recursively enumerable restrict relations finite problem remains undecidable 
set valid sentences cor 

satisfiability problem undecidable formula satisfiable negation valid 
negative results imply hope order predicate calculus query language 
fortunately satisfiability solved subsets predicate calculus described survey 
order theories constraints survey constraints mean special named relations 
example suppose domain set integers 
equality constraint means infinite binary relation zg 
reals rationals natural numbers integers 
similarly addition constraint means infinite ternary relation sum arguments equal third argument 
keep usual infix notation common constraints 
order theories constraints mean various subsets firstorder predicate calculus relations constraints 
theories assignment interest constraint symbol corresponding constraint relation assigned 
past years quantifier elimination procedures developed various order theories constraints 
quantifier elimination mean rewriting formula quantifiers equivalent quantifiers 
scope survey review quantifier elimination procedures 
give chronological outline major results area 
works considered existentially quantified formulas 
table indicate qe 
example mark qe fourier method easily extended deal universal quantifiers 
remembered partial list 
qe th fourier 
qe boolean algebras boole 
qe th 
langford 
qe th presburger 
qe th godel 
qe th tarski 
qe th 
qe integers modulus constraints williams 
qe th exp van den 
decision problem problem identifying order formula free variables true false 
clear elimination quantifiers formula free variables leave value true false 
decision problem reduces quantifier elimination problem 
negative results quantifier elimination follow reduction undecidability decision problem corresponding theories 
relational databases query languages relational databases problems known relational data model enjoys great success business world 
causes success known 
wrongly assumed success solely due logic 
reality relational data model provides solutions practical problems complex logics solve 
see problems 
information market important problems databases need solve 

ad hoc user problem database users want enter ad hoc queries fly 
want answers syntactically correct ad hoc query 

application vendor problem application vendors sell libraries queries users 
application vendors guarantee termination queries valid database input 
theory may programming language writing queries 
guaranteeing termination difficult programming languages 
want restricted language query write terminates 

data vendor problem data vendors buy raw data form databases produce refined data form databases sell data vendors 
information market long chain data vendors raw data users 
data model serve common data communication standard 
data vendor uses queries transform raw data data product 
queries secret patented 
looking context database systems practice see important requirements met 
query terminate 
second query give output database 
call termination requirements 
requirements satisfied relational data model illustrated 
relational database finite set tables 
table data type relation containing finite set tuples 
requirement relational data model queries evaluable functions finite databases finite databases 
requirement met relational query languages review subsection relational calculus datalog stratified datalog 
relational db input relational query db output relational fig 

relational data model relational calculus syntactically relational calculus predicate calculus 
relational calculus order theories constraints interested assignment relations 
assign relation symbol input relation user 
semantics relational calculus query oe mapping relational databases relational databases 
xn set free variables oe fixed order oe denote formula obtained substituting input database assignment finite infinite number tuples ffi ff output database single relation arity defined 
ffi oe ffi means satisfaction respect domain ffi database defined follows 
set tuples assigned relation symbol ffi iff ffi oe iff ffi oe ffi ffi oe iff ffi oe ffi oe iff ffi oe ffi means instantiation free variable unfortunately relational calculus queries preserve finiteness 
example finite unary relation assigned relation symbol ffi infinite domain query 
ffi defines infinite relation 
approaches guarantee finiteness syntactically restricting relational calculus queries various safe subsets 
safe relational calculus queries translatable relational algebra procedural language 
datalog datalog fragment predicate calculus extending relational calculus intensionally defined relations 
relational calculus query defines single output relation named explicitly relations inputs 
contrast datalog query may define output relations referred name query 
datalog output relations defined 
syntactically datalog program pi finite set rules form rn kn rs relation symbols xs variables constants 
semantically datalog program mapping 
explain mapping associate rule form formula vm rn kn variables rule 
associate pi conjunction formulas associated rule pi pi denote formula 
call extensional database relations relations symbol occurs right hand side rules 
call relation symbols intensional database relations 
datalog query input relations assigned user output relations assignments sought 
disjoint datalog program 
call interpretation pi assignment finite infinite number tuples ffi ff occurs pi model pi interpretation pi satisfying pi model minimum model models call interpretation input database assigns occurs left hand side rule pi empty set tuples 
datalog program pi mapping input databases interpretations 
input database 
output pi denoted pi minimum model pi containing theorem assures really mapping 
proposition pi datalog program input database 
exists minimum model pi containing alternative operational semantics important alternative definition semantics datalog programs called fixpoint semantics 
call valuation function tuples variables tuples constants satisfying tuples constants immediate consequence operator datalog program pi denoted pi mapping interpretations interpretations follows 
interpretation tp iff valuation rule form rn kn pi xn ffi interpretation called fixpoint program pi iff pi proposition pi datalog program input database 
fixpoint pi model pi minimum fixpoint pi containing states model theoretic fixpoint semantics coincide 
proposition pi datalog program input database 
minimum fixpoint pi containing equals pi 
stratified datalog stratified datalog extends datalog negation 
intuitively expression means set difference relations problem say definite know full value negated relation 
motivates definitions 
call datalog programs negation allow negation 
see discussion 
semantically datalog program mapping databases interpretations 
define pi similarly case datalog 
proposition pi datalog program input database assigns non empty relations 
exists minimum model pi containing extension datalog class stratified datalog programs 
stratified datalog program pi union programs pi pi satisfying property relation symbol occurs negated pi idb pi usual associate stratified datalog program pi function oe rules positive integers 
function oe indicates grouping rules programs order satisfies property 
assume oe associated stratified datalog program 
stratified datalog program mapping databases interpretations 
particular pi union programs pi pi property composition pi pi semantics 
proposition pi stratified datalog program consisting union programs pi pi property 
database assigns non empty relations pi exists minimum model pi containing explicit specification oe required 
describes algorithm find oe satisfying property 
shows oe satisfying property semantically equivalent 
datalog programs negation right hand side rules assigned inflationary semantics 
semantics equivalent frequently 
relational databases vs logic programming goal review logic programming known similarities relational database queries 
point essential differences concepts 
logic program mapping finite set facts model 
logic programs terminate models finite set facts 
logic programs satisfy termination requirements saw crucial problems databases 
relational query expressed logic program reverse true 
unfortunately database point view higher expressive power logic programs expense practicality 
brief historical summary developments areas relational algebra proposed codd 
relational calculus shown equivalent relational algebra codd 
prolog colmerauer van kowalski 
fixpoint semantics prolog van emden kowalski 
datalog aho ullman chandra harel 
stratified datalog chandra harel prolog apt blair walker 
constraint databases query languages constraint programming programming constraints primitives programming language investigated early sutherland sketchpad system 
constraint programming applied various problems artificial intelligence graphical interfaces logic programming databases 
review developments areas logic programming mention developments relationship databases 
reader may find detailed surveys constraint logic programming 
constraint databases problems database applications deal infinite concepts time space 
practice databases finitely represented 
fortunately infinite data finitely represented constraint databases 
general framework constraint databases 
definitions 
generalized tuple quantifier free conjunction constraints variables ranging domain ffi 
generalized tuple represents finite way infinite set regular tuples 
example suppose relation contains set points line passes origin slope 
infinite number tuples finitely represented generalized tuple generalized relation arity finite set generalized tuples tuple variables 
generalized database finite set generalized relations 
generalized databases definitions query language semantics apply generalize meaning 
done follows 
generalized relation assigned associate formula disjunction formulas right hand side generalized tuple oe relational calculus formula 
satisfaction respect domain ffi database denoted ffi defined recursively follows ffi iff true ffi oe iff ffi oe ffi ffi oe iff ffi oe ffi oe iff ffi oe ffi alternative semantics equivalent discussed oe oe xm relational calculus program free variables xm relation symbols rn oe assigned generalized relations respectively 
oe rn rn formula obtained replacing oe database atom formula formula associated output database oe input database relation am 
ffi oe am oe oe rn rn relational db input constraint input db relational query constraint query relational constraint db output db output fig 

constraint data model generalized database model queries functions generalized databases generalized databases type constraints 
closed form requirement analogue termination requirements relational databases stems practical considerations discussed section 
constraint query languages generalizations relational query languages constraints built relations allowed 
ideas constraint data model summarized 
example constraint query language closed form evaluation section 
consequence alternative semantics proposition order theory constraint relations 
admits quantifier elimination output relational calculus query generalized relations containing constraints evaluated finite time 
output represented generalized relation containing constraints proposition implies quantifier elimination results section help realize goal closed evaluation 
relevant querying generalized databases 
relational calculus types constraint databases restriction safety problem concern 
datalog stratified datalog queries closed form evaluation difficult impossible see section 
broadly applicable sufficient conditions termination closed form evaluation datalog queries constraints 
example closed form evaluation quantifier elimination algorithms provide closed form evaluations queries 
unfortunately quantifier elimination algorithms computationally inefficient 
efficiency improved quantifier elimination procedure 
algebraic operators desirable provide efficient time computations generalized relations 
idea algebras simple quantifier elimination goes back tarski thompson 
codd relational algebra example query evaluation 
relational algebra procedural language equivalent expressive power safe relational calculus 
relational calculus queries translated relational algebra quicker evaluation 
algebraic operators considered case linear constraint databases case dense order constraints case discrete order constraints shows partial algebra select project join operators 
extend full set relational algebra operators give illustration algebras generalized databases 
definitions follow mainly 
definition integer variables constants 
assignment variables minimum gap order constraint gap value holds gammax holds assignment 
minimum gap order constraint holds equal assignment 
maximum gap order constraint holds gamma holds assignment 
definition xn integer variables integer constants 
graph vertices labeled xn undirected edge labeled directed edge labeled pair distinct vertices called mm 
may considered default values written explicitly mm graphs 
definition mm vertices labeled variables xn constant normal form 
furthermore set mm vertices labeled xn normal form 
easy see mm size put normal form time 
change constraint form respectively respectively 
cases right hand side minimum respectively maximum gap order constraint similar 
rest section assume gap graphs normal form 
furthermore assume order constraint minimum maximum bound 
true constraint add default values minimum maximum gap values 
definition mm vertices 
shortcut operation vertex transforms output mm vertices vn vn follows 

edges add undirected edge edges add directed edge edges add directed edge edges add gamma directed edge second edges form hk gk vertices delete edges replace edge min max edge remains vertices shortcut operation fails returns error message produce shortcut mm output 
incident edges deleted resultant mm returned 
part shortcut operation adds constraints follow transitivity set original constraints represented input mm 
second part simplification needed ensure graph remains mm form edge pair vertices 
note simplification edge remains pair vertices differently oriented directed undirected equality constraint 
clearly implies mm satisfiable 
note apart obvious case shortcut operation check mm satisfiability 
definition mm different subsets variables constant 
merge operation creates mm vertices follows 

edge 
edge add edge edge add edge edges add min max edge edges add min max edge case merge operation fails return graph 
merge operation want assignment satisfies output mm satisfy input mm 
operation guarantees checking corresponding edges input compatible combining stricter minimum stricter maximum gap order constraints corresponding edges adding combination output mm 
condition case includes cases compatible example variables specifies says greater cases clearly assignment satisfy graphs merge operation fail 
prove semantic correctness operations defined show shortcut valid existential quantifier elimination procedure join consistency preserving 
lemma mm variables constant 
mm obtained exists 
sequence integer numbers 
true exists true 
merge operation show input mm consistent output mm consistent 
lemma mm different subsets variables vn 
mm obtained merging exists 
sequence integer numbers 
true exists true 
operators define generalized project generalized join operators 
relations normal form 
generalized join denoted set assume ary relation argument symbols fx generalized project subset fx arguments set generalized selection operation denoted oe selection condition conjunction minimum maximum gap order constraints set graph rg 
graph function transforms conjunction gap order constraints mm 
generalized rename operation ae just renames argument vertices mm generalized relation 
ary generalized relations scheme 
generalized union operation defined union generalized difference denoted gammar defined set fr complement standard sense 
represents set regular tuples ffi set regular tuples ffi proven de morgan laws 
lemma ary relation represented set mm size generalized relation representing complement time 
defined generalized versions fundamental relational algebra operators 
note cross product case join overlaps arguments input relations 
definition join allows possibility 
give example generalized algebraic operators 
example suppose persons want schedule meeting month 
person free rd th th th 
second person free th th th th 
suppose don want meet th th 
days meet 
relation free telling person free days relation bad days represented normal form follows 
free person id day bad days day query finds days meeting day oe 
free day oe 
free gamma bad day oe 
free tuples free 
note selection condition added tuples result inconsistency 
projected day give temporary relation fg represents represents similarly day oe 
free yield fg represents represents generalized join merge merge merge temporary output generalized relation day show merge inconsistent 
take complement bad days 
yield complement bad days generalized relation tuples 
take generalized join complement bad days 
obtain day generalized relation expresses persons meet day th th th th inclusive 
constraint databases vs constraint logic programming briefly compare constraint databases constraint logic programming :10.1.1.25.8566
constraint logic program mapping finite set constraint facts model 
general framework constraint logic programming jaffar lassez show mild assumptions constraint predicates semantics prolog languages constraints changes slightly particular queries model semantics 
constraint query languages subset constraint logic programs 
jaffar lassez give criteria effectively evaluating model model finitely representable 
constraint query languages models effectively computable finitely representable 
constraint query languages solve user requirement data vendor problem solved constraint logic programs general 
main contribution constraint database research set algorithmic solutions problems 
important constraint programming languages prolog iii allows constraints valued boolean algebra linear arithmetic constraints rationals 
chip allows linear arithmetic constraints rationals bounded subsets integers 
clp provides polynomial constraints reals 
life allows constraints feature trees provides notion objects 
allows constraints strings integers real numbers 
brief historical outline developments constraint logic programming constraint databases prolog ii instance clp 
clp semantics jaffar lassez 
cql database framework kanellakis kuper revesz 
complexity issues section review known complexity results order theories constraints section 
review known data complexity results relational constraint query languages section 
discuss data complexity related closed form evaluation section 
section discusses optimization techniques speed query evaluation 
decision problem order theories constraints computational complexity decision problem order theories investigated depth past years 
list important results area 
computational complexity th investigated 
complexity th subset previous theory dspace cn size formula alternating turing machine class ta cn 
see definitions various complexity classes 
interesting subset theory allows difference constraints constraints form gamma variables constant 
complexity language considered shown pspace complete general sigma complete alternation quantifiers prenex form 
complexity theory rational order considered shown dspace log 
complexity presburger arithmetic considered 
complexity analyses ehrenfeucht fra ss game technique plays major role 
section illustrate simple case important technique applying order theory integer order 
general ehrenfeucht fra ss games show quantifiers ranging elements domain theory may restricted small finite subsets domain 
validity formulas theory decidable exhaustive search 
upper bounds size finite subsets yield upper bounds time space required evaluate formulas 
theory integer order provides simple case power general technique 
ferrante rackoff ehrenfeucht fra ss games compact proof show space upper bound deciding formulas size constants possibly 
analysis complex necessary concerned theories 
simplify proof case theory integer order add means deal constants 
infinite set possible integer tuples may satisfy order formula divided finite number equivalence classes 
goal show member equivalence class satisfies formula member equivalence class satisfies formula 
limits number possible cases needs considered evaluation pick just member equivalence class test solution 
look case formulas constants 
definition tuples integers 
write gamma gammak gamma gamma gamma gammak gamma gammak lemma mean satisfaction standard sense 
lemma formula theory integer order quantifier depth tuples 
proof prove lemma induction number operators assume base case single order constraint form clearly true false complex formulas cases 
suppose 
loss generality 
induction 


suppose 

induction 

zf 
suppose zf 

choose pair integers lies 
gamma gammak choose gamma gamma gammak choose gammak easy see cases choices induction 

cases prove part lemma 
arguing similarly prove part lemma 
lemma generalized case constants formula 
turned effective quantifier elimination procedure 
quantifier free formula returned gap order constraints atomic formulas form gamma nonnegative integer number 
theorem formula order theory integer order 
find quantifier free formula theory integer gap order true 
furthermore size gamma quantifier depth number distinct integer constants total size proof want find member equivalence class sense definition members satisfy lemma constants try gamma sequences integers 
ordering variables adjacent pair trying equalities gaps size 
contains constants relative ordering gap sizes constants variables known able evaluate atomic formulas contain constants extend definition follows 
write constant variable condition holds gamma gammak gamma gamma gamma gammak gamma gammak gamma gammak gamma gammak need possible ordering variables gap assignment respect constants occur formula 
respect constant variable placed distinguishable positions equal greater 
constants leaves choices variable 
upper bound gamma different equivalence classes constants 
may part gap choices consistent variable orderings part gap assignments respect constants consistent variable orderings gap choices 
similarly lemma shown member equivalence class satisfies formula member equivalence class satisfies formula 
pick representative equivalence class test satisfies formula 
clear equivalence class written quantifier free formula free variables conjunction gap order constraints 
formula disjunction conjunctive formulas representing equivalence classes satisfy clearly size conjunctive formula size proves theorem 
lemma shows formulas integer order distinguish gaps exponential size 
show example lower bound formula distinguish gaps exponential size formula 
possible formulas property 
example quite simple disjunctive normal form 
improvement previous examples hard formulas 
ferrante rackoff method writing short formulas define complicated properties exactly exploit fact formula normal form 
example put normal form size increase exponentially 
example gap gap gamma gap formula gap satisfied gamma easy prove induction follows 
gap gap satisfied gamma claimed 
gap loss generality reason follows 
suppose gamma gamma condition gamma gamma holds 
condition gamma gamma holds 
second condition holds 
gap holds 
suppose gamma gamma gamma gap gamma false gamma gamma gap gamma false false formula false formula false disjuncts fails query evaluation formulated decision problem analyzing complexity query evaluation common reformulate query evaluation problem decision problem 
data complexity fixed program pi define language pi pi language pi consists set strings pairs regular relational database tuple input database written string generalized relational database tuples semantically defined output pi independent particular representation 
chandra harel vardi call data complexity computational complexity deciding pair language pi data complexity commonly measure databases expresses intuition usually size database dominates orders magnitude size query program 
ffi constraints relational calculus datalog stratified datalog ac ptime comp ptime comp logspace 
ac ptime comp ptime comp logspace jk fixed ptime ptime comp ptime comp set nc pspace comp pspace comp ptime dexptime comp dexptime comp bm bm ptime comp nc dexptime comp non elem comp nc undec 
undec 
jk cn undec 
undec 
nc undec 
undec 
undec 
undec 
undec 
undec 
undec 
undec 
fig 

data complexity constraint query languages summarizes known data complexity results relational constraint query languages 
domain symbols table discrete domain example integers bm free boolean algebra elements sets integers 
means relational calculus considered means syntactical restrictions 
listed constraint row table assumed row 
complexity results assume turing machines computational model 
exceptions nc ness results assume pram model computation ac results assume random access alternating turing machines 
known data complexity results relational databases shown row 
relational databases safe relational calculus logspace ac data complexity pram alternating turing machine models respectively 
relational databases datalog stratified datalog ptime complete data complexity 
constraint nonnegative integer called gap order constraint 
variables constraint true true 
considered relational calculus constraints integers input database showed decidable ptime data complexity 
theorem improvement result nc remarks extension gap order constraints input database 
note extension closed form requirement satisfied 
koubarakis considered order language difference constraints constraints form gamma integer variables integer constant 
koubarakis shows expression complexity language pspace complete provides quantifier elimination method 
reals considered domain expression complexity remains 
turns expressive power languages case integers 
gamma equivalent equivalent 
gammac gamma 
furthermore constraint expressed subformula 
constraint usual modulus constraint integers true remainder divided equals remainder divided positive integer 
set solutions fc kn zg modulus constraint form called linear repeating point 
datalog successor function denoted table safety requirement addition applied argument relation 
distinguished argument relations called temporal argument 
languages express interesting temporally recurring events 
example express employees get paid week 
language paid employee paid languages different expressive power 
express transitive closure queries express difference relations 
expressive power languages compared undecidable language 
expressive power point interval query languages compared 
combines modulus constraints integer gap order constraints 
datalog gap order constraints shown closed form data complexity 
expression complexity language shown dexptime 
adds stratified negation datalog gap order constraints syntactical safety restrictions 
resultant language non elementary data complexity 
relationship syntactical safety semantical safety discussed shown syntactical safety extended include semantically safe queries 
datalog set order constraints form integer element infinite domain set variables sets constants considered 
shows conjunctive queries ptime show datalog safe stratified datalog dexptime complete data complexity 
data complexity relational calculus datalog queries boolean equality constraints free boolean algebra generators analyzed 
related results appear table works deciding set constraints 
set constraints considered general ones table 
quantifier elimination possible general case considered 
sets appear leaves functional terms unification methods considered decision problem 
addition multiplication express order relation case 
domain express exponentiation 
undecidability results table part observations 
decision problem closed form evaluation give example translate complexity results decision problem order theory constraints closed form evaluation result relational calculus queries 
theorem pi fixed relational calculus program 
pi evaluated nc size generalized database integer order constraints output generalized relation integer constraints 
proof proposition translate query evaluation problem quantifier elimination problem theory integer order 
transform formula prenex normal form quantifiers occur front 
formula put prenex form nc 
theorem follows theorem advantage fact quantifier depth number free variables fixed constants 
test representative equivalence class satisfies formula new existential variable need test gamma choices depending inserted current order variables gamma constants 
fixed constants employing exhaustive search possibilities total number cases 
total number cases polynomial size generalized database input 
case tested quantifier free formula done individually nc parallel nc 
value case known quantifiers evaluated nc 
possible improve result allowing generalized database input contain gap order constraints 
maximum gap value input database constant similarly example express formula adds log quantifier depth size 
problem gap order constraints input generalized database reduced evaluating theory integer order formula log quantifier depth 
problem nc 
theory integers successor relation reduced case theory integer order 
constraint form expressed subformula 
implies successor constraints query evaluation nc 
analogue theorem case algebraic queries 
theorem pi fixed generalized relational algebra query 
pi evaluated nc size generalized database input normal form 
proof proof induction parse tree relational algebra expression showing temporary relation associated internal node size polynomial size input relations leaves evaluated nc 
show polynomial size easy generalized select project rename decrease number mm temporary relation join return mm number mm input relations 
lemma number mm grow polynomially negation difference 
relational algebra expression fixed output relation root node number mm graphs polynomial size input generalized database 
note size mm bounded constant number arguments relation fixed 
show nc ness evaluation show generalized algebra operation evaluated nc size input relation 
select project rename join obvious 
negation done nc similarly theorem precompute test parallel mm satisfies negated formula disjunction mm input relation 
unfortunately general techniques data complexity results datalog stratified datalog bound time required closed form evaluation algorithm 
worse constraint query languages finite data complexity imply closed form evaluation 
optimization problems optimization methods idea transforming programs semantically equivalent ones evaluated faster 
transformation relational calculus query algebra discussed example 
examples includes propagation selection projection operators ordering join operators relational calculus similarly magic set techniques datalog 
extensions techniques constraint queries 
testing equivalence program transformations accomplished testing query containment 
recall relational calculus program oe defines mapping input database may represented finitely output database oe may represented finitely 
say program oe contained program oe denoted oe oe input database tuples oe oe 
containment problem programs oe oe decide oe oe containment problem particularly important subclass relational calculus queries formed connectives quantifier 
queries called conjunctive queries 
containment problem np complete conjunctive queries constraints 
remains np complete linear equality constraints 
problem pi complete dense linear order constraints 
containment problem conjunctive queries quadratic equation constraints reals pi hard 
query transformations indexing techniques generalized tuples input database relations improve efficiency query evaluation 
typical problem query evaluation dimensional range searching asks return tuples attribute values constants 
range searching regular relations implemented trees trees minimizing number accesses secondary storage 
range searching requires log secondary memory accesses worst case number tuples block total number tuples relation searched number tuples returned 
problem range searching generalized relations implemented grid files quad trees trees see books review spatial data structures 
idea index generalized tuple interval projection tuple axis 
data structures mentioned easily accommodate insertions deletions range searching 
unfortunately main memory storage give worst case guarantees number accesses secondary storage 
gives data structure algorithm optimal worst case performance regard secondary storage accesses 
data structure static sense allows insertions deletions 
considers multi dimensional searching range searching attributes involved 
expressive power relational calculus queries constraints see section evaluated quantifier elimination procedure order theory equality input database relation finite set regular tuples 
quantifier elimination procedure may slow compared usual evaluation safe relational calculus queries see definition safe 
efficiency safe queries due primarily fact quantifiers restricted range set constants occurring explicitly query called active domain denoted ffi change output relation 
version ehrenfeucht fra ss games stolboushkin schwartz showed relational calculus query safe unsafe suffices quantifiers range active domain plus number additional constants full domain ffi number quantified variables 
means evaluate unsafe relational calculus queries efficiently safe relational queries 
call active domain semantics mapping defined section ffi replaced ffi hull su considered relational calculus queries unrestricted active domain semantics expressive power 
input database consists relations finite set regular tuples answer unrestricted query possible find active domain query gives output 
paredaens van den bussche van gucht show equivalence input database consists generalized relations linear inequality constraints reals 
interesting question relative expressibility relational calculus queries different types generalized databases 
problem finding convex hull voronoi diagram expressible relational calculus polynomial inequality constraints reals 
queries expressed relational calculus generalized databases constraints 
queries generic isomorphism preserving input databases isomorphic outputs isomorphic 
clearly property genericity lost constraints added 
necessary modifications concept genericity investigated 
negative results interesting 
strongest negative result relational calculus polynomial constraints real numbers express simple recursive queries connectivity transitive closure parity relation 
results extends earlier linear inequality constraints rational numbers order constraints 
negative result valid sentences order predicate calculus relations range finitely representable databases undecidable 
case similar finite relations case validity extensions number extensions constraint data model 
addition integrity constraints aggregation operators indefinite information complex objects spatial topological databases 
integrity constraints play important part regular relational database design investigated great detail see 
dependency theory integrity constraints generalized databases fairly open area investigated 
defines constraint generating dependencies studies computational complexity implication consistency problems 
emp name salary boss relation storing information employees 
example simple case constraint generating dependency emp emp 
meaning earn employees 
general typical integrity constraints relational databases assumes domain second attribute interpreted domain order 
usual assumption uninterpreted domain constraint relations defined 
aggregation operators important practical database query languages sql 
challenging problem define meaningful efficiently evaluable aggregation operators generalized databases 
maximum minimum area proposed aggregation operators 
problem appears 
indefinite information represented null values practical concern 
null values represent unknown values 
evaluation constraint queries null values considered 
complex values important convenient representation kind real life data 
values booleans strings integer real rational numbers scalar values 
complex values built scalar values nested way set tuple constructors 
challenge define constraints find constraint solving algorithms complex objects 
set constraints quantifier elimination algorithm set variables considered preliminary step direction 
complex values enhanced object identifiers leading interesting combination constraint object oriented programming 
proposal combine constraints objects 
nested databases dense order constraints considered 
spatial topological databases extend constraint data model 
constraint queries variables range regions points considered 
constraint database knowledge base change operators including revision update arbitration described 
survey spatial databases 
prototype systems encouraging see prototype constraint database systems just starting appear 
constraint database system disco short datalog integer set constraints implements data types integers finite sets integers 
disco constraint relations allowed integers variables constants gap order constraint see section set variables constants integer constants set variables constants evaluation projection selection pushing implemented disco 
disco system example genomic database applications 
implementation datalog periodicity constraints described re compile time constraint solving method implemented database system 
constraint object oriented system implemented 
prototype systems important feasibility demonstrations theoretical ideas constraint databases 
may give interesting feedback theoretical study 
open problems obviously research topics need consideration 
list collects interesting difficult open problems concerning constraint query languages generalized databases 
relative expressive power relational calculus queries generalized databases polynomial inequality constraints reals unrestricted vs active domain semantics 
problem studied 
size generalized database output datalog queries integer order constraints th 
problem studied 
note constraints problem reduces obvious way data complexity problem 
similar reduction needs shown constraints 
data complexity relational calculus linear inequality constraints th 
bounded queries queries number occurrences addition symbol constraint bounded shown problem ac 
data complexity ac restriction 
ajtai gurevich showed queries expressible datalog relational calculus regular databases bounded 
bounded means number iterations needed naive evaluation query constant input database 
result true allow generalized databases 
upper bound computational complexity testing containment conjunctive queries quadratic equation constraints 
lower bound pi hard shown 
design data structure implements insertion deletion range searches optimal worst case access secondary storage 
problem investigated 
editors leonid libkin bernhard thalheim encouragement writing survey 
referees numerous helpful comments 

abiteboul beeri 
power languages manipulation complex objects 
inria research report 

abiteboul kanellakis 
database theory column query languages complex object databases 
sigact news pp 


abiteboul hull vianu 
foundations databases 
addisonwesley 

abiteboul vianu 
datalog extensions database queries updates 
comput 
system sci pp 


aiken 
set constraints results applications directions 
proc 
nd workshop principles practice constraint programming 

afrati cosmadakis grumbach kuper 
linear vs polynomial constraints database query languages 
proc 
nd workshop principles practice constraint programming 

aho ullman 
universality data retrieval languages 
proc 
th acm symp 
principles programming languages 

kaci podelski 
meaning life 
journal logic programming 

ajtai gurevich 
datalog vs order 
journal computer systems sciences 

apt 
logic programming 
handbook theoretical computer science vol 
chapter van leeuwen editor north holland 

apt van emden 
contributions theory logic programming 
acm vol 


apt blair walker 
theory declarative knowledge minker ed foundation deductive databases logic programming 
morgan kaufmann 

stolboushkin schwartz 
reduction relational model infinite domain case finite domains russian 
proc 
ussr acad 
science doklady 

barrington immerman 
uniformity nc journal computer system sciences 

chomicki wolper 
constraint generating dependencies 
proc 
th int 
conf 
database theory 

wolper 
representation infinite temporal data queries 
proc 
th acm symp 
principles database systems 

bayer mccreight 
organization large ordered indexes 
acta informatica 

benedikt dong libkin wong 
relational expressive power constraint query languages 
proc 
acm symp 
principles database systems 

ben kozen reif 
complexity elementary algebra geometry 
journal computer system sciences 

bell nerode ng subrahmanian 
implementing deductive databases linear programming 
proc 
acm symp 
principles database systems 

berman 
precise bounds presburger arithmetic reals addition 
proc 
th ieee focs pp 


borning 
programming language aspects constraint oriented simulation laboratory 
acm toplas 

brodsky jaffar maher 
practical constraint databases 
proc 
th vldb 

brodsky 
language querying constraint objects 
proc 
sigmod 

revesz 
disco constraint database system sets 
proc 
workshop constraint databases applications springer verlag lncs 

brodsky lassez lassez maher 
separability polyhedra optimal filtering spatial constraint data 
proc 
th symp 
principles database systems 

brodsky sagiv 
inference inequality constraints logic programs 
proc 
th acm symp 
principles database systems 

brodsky segal 
constraint object oriented database system overview 

meyer 
time space classes relation theory real addition 
proc 
th acm stoc pp 


buss 
formula value problem 
proc 
th acm stoc pp 


chandra harel 
computable queries relational data bases 
journal computer system sciences vol 


chandra harel 
structure complexity relational queries 
journal computer system sciences vol 


chandra harel 
horn clause queries generalizations 
journal logic programming vol 


chandra merlin 
optimal implementation conjunctive queries relational databases 
proc 
acm stoc 

chomicki 
polynomial time query processing temporal deductive databases 
proc 
th acm symp 
principles database systems 

chomicki 
functional deductive databases query processing presence limited function symbols ph thesis 
rutgers university 

chomicki goldin kuper 
variable independence aggregation closure 
proc 
th acm symp 
principles database systems 

chomicki imielinski 
relational specifications infinite query answers 
proc 
acm sigmod 

chomicki imielinski 
finite representation infinite query answers 
acm transactions database systems vol 


chomicki kuper 
measuring infinite relations 
proc 
th acm symp 
principles database systems 

codd 
relational model large shared data banks 
cacm 

cohen 
constraint logic programming languages 
cacm 

colmerauer 
prolog iii 
cacm 

colmerauer van 
prolog bases th 
techniques sciences 

collins 
quantifier elimination real closed fields cylindrical algebraic decomposition 
proc 
nd gi conference automata theory languages lncs pp 
springer verlag 

comer 
ubiquitous tree 
computing surveys 

cox mcaloon 
decision procedures constraint extensions datalog 
constraint logic programming mit press 

cox mcaloon 
computational complexity constraint logic programming 
annals math 
ai 

dincbas van hentenryck simonis graf berthier 
constraint logic programming language chip 
proc 
fifth generation computer systems tokyo japan 

doets logic logic programming 
mit press 

ehrenfeucht 
application games completeness problem formalized theories 
fund 
math 

van emden kowalski 
semantics predicate logic programming language 
acm vol 


enderton 
mathematical logic 
academic press 

ferrante 
efficient decision procedure theory rational order 
theoretical computer science 

ferrante rackoff 
decision procedure order theory real addition order 
siam comp 

ferrante rackoff 
computational complexity logical theories springer verlag 

fischer rabin 
super exponential complexity presburger arithmetic 
siam ams proc 
volume vii american mathematical society 

fourier 
reported analyse des de des sciences pendant de des sciences de institut de france vol 
lv 
partial english translation kohler 
translation report fourier linear inequalities 
vol 


fra ss 
sur les classifications des syst emes de relations 
publ 
sci 
univ 

freuder 
synthesizing constraint expressions 
cacm 

gaede brodsky gunther srivastava vianu wallace eds constraint databases applications proc 
second int 
workshop constraint database systems delphi greece january workshop constraints databases cambridge ma august springer verlag lncs 

godel 
uber formal der principia mathematica und systeme fur mathematik und physik 
vol 


gross marti 
compile time constraint solving constraint database system 
proc 
post ilps workshop constraints databases 

gurevich shelah 
fixed point extensions order logic 
annals pure applied logic 

grumbach su 
finitely representable databases 
proc 
th acm symp 
principles database systems 

grumbach su 
dense order constraint databases 
proc 
th acm symp 
principles database systems 

grumbach su 
practical constraint databases 
proc 
acm symp 
principles database systems 

grumbach su 
linear constraint databases 
proc 
lcc 

hansen hansen lucas van emde boas 
integrating relational databases constraint languages 
computer languages 

heintze jaffar 
set constraints set analysis 
proc 
nd workshop principles practice constraint programming 

helm marriott odersky 
constraint query optimization spatial databases 
proc 
th acm symp 
principles database systems 

hull su 
domain independence relational calculus 
acta informatica 

immerman 
relational queries computable polynomial time 
information control 

jaffar lassez 
constraint logic programming 
proc 
th acm popl 

jaffar maher 
constraint logic programming survey 
logic programming 

jaffar michaylov stuckey yap 
clp language system 
acm transactions programming languages systems 

johnson 
catalogue complexity classes 
handbook theoretical computer science vol 
chapter van leeuwen editor northholland 

kabanza 
wolper 
handling infinite temporal data 
proc 
th acm symp 
principles database systems 
final version appear journal computer system sciences 

kanellakis 
elements relational database theory 
handbook theoretical computer science vol 
chapter van leeuwen editor north holland 

kanellakis 
tutorial constraint programming database languages 
proc 
th acm symp 
principles database systems 

kanellakis goldin 
constraint programming database query languages 
proc 
nd tacs 

kanellakis kuper revesz 
constraint query languages 
journal computer system sciences vol 
pp 
august 
preliminary version proc 
th acm symp 
principles database systems 

kanellakis lassez saraswat eds proc 
workshop principles practice constraint programming 

kanellakis ramaswamy vitter 
indexing data models constraints classes 
proc 
th acm symp 
principles database systems 


polynomial algorithm linear programming 
soviet math 
dokl 

kifer 
safety domain independence database queries 
proc 
international conference databases knowledge bases jerusalem israel 

klug 
equivalence relational algebra relational calculus query languages having aggregate functions 
jacm 

klug 
conjunctive queries containing inequalities 
jacm 

kolaitis papadimitriou 
negation fixpoint 
proc 
th acm symp 
principles database systems 

koubarakis 
representing querying temporal databases power temporal constraints 
proc 
ninth international conference data engineering 

koubarakis 
complexity results order theories temporal constraints 
int 
conf 
knowledge representation reasoning 

kozen yap 
algebraic cell decomposition nc 
proc 
th ieee focs 

kuipers paredaens jan van den bussche 
topological elementary equivalence spatial databases 
proc 
th int 
conf 
database theory springer verlag lncs 

kuper 
expressive power relational calculus arithmetic constraints 
proc 
rd int 
conf 
database theory 

kuper 
aggregation constraint databases 
proc 
workshop principles practice constraint programming 


constraint programming languages 
addison wesley 

levy mumick sagiv shmueli 
equivalence query reachability satisfiability datalog extensions 
proc 
acm symp 
principles database systems 

levy sagiv 
constraints redundancy datalog 
proc 
acm symp 
principles database systems 

langford 
theorems deducibility 
annals mathematics 
vol 


libkin wong 
new techniques studying set languages bag languages aggregate functions 
proc 
acm symp 
principles database systems 

lloyd 
foundations logic programming 
spring berlin nd ed 
mackworth 
consistency networks relations 
ai 

maher srivastava 
chasing constraint tuple generating dependencies 
proc 
acm symp 
principles database systems 


enumerable sets diophantine 
doklady nauk ssr 
vol 


montanari 
networks constraints fundamental properties application picture processing 
information science 

mumick finkelstein pirahesh ramakrishnan 
magic conditions 
proc 
th acm symp 
principles database systems 

mumick shmueli 
universal finiteness satisfiability 
proc 
acm symp 
principles database systems 

papadimitriou suciu vianu 
topological queries spatial databases 
proc 
acm symp 
principles database systems 

paredaens bussche gucht 
theory spatial database queries 
proc 
acm symp 
principles database systems 

paredaens 
spatial databases final frontier 
proc 
th int 
conf 
database theory springer verlag lncs 

paredaens bussche gucht 
order queries finite structures reals 
proc 
lics 

preparata shamos 
computational geometry 
springer verlag 

presburger 
uber die eines systems der zahlen die addition als operation 
comptes rendus congr es des math 
des pays slaves warsaw 

ramakrishnan 
magic templates approach logic programs 
proc 
th international conference logic programming 

ramakrishnan srivastava sudarshan 
coral control relations logic 
proc 
vldb 

ramaswamy 
efficient indexing constraint temporal databases 
proc 
th int 
conf 
database theory springer verlag lncs 

ramaswamy subramanian 
path caching technique optimal external searching proc 
acm symp 
principles database systems 

reddy loveland 
presburger arithmetic bounded quantifier alternation 
proc 
acm symp 
theory comp 

renegar 
computational complexity geometry firstorder theory reals parts iii 
journal symbolic computation 

revesz 
constraint query languages 
ph thesis 
brown university 

revesz 
closed form evaluation datalog queries integer gap order constraints theoretical computer science vol 

preliminary version proc 
third international conference database theory springer verlag lncs 

revesz 
datalog queries set constraint databases 
proc 
fifth international conference database theory springer verlag lncs 

revesz 
safe stratified datalog integer order programs 
proc 
international conference principles practice constraint programming springer verlag lncs 

revesz 
safe query languages constraint databases 
acm transactions database systems march appear 

revesz 
evaluation computational complexity datalog queries boolean constraint databases international journal algebra computation appear 

revesz 
model theoretic minimal change operators constraint databases 
proc 
th int 
conf 
database theory springerverlag lncs 

revesz 
refining restriction enzyme genome maps 
constraints vol 
pp 
december 
preliminary version 

robinson 
definability decision problems arithmetic 
journal symbolic logic vol 
pp 


samet 
applications spatial data structures computer graphics image processing gis 
addison wesley reading ma 

samet 
design analysis spatial data structures 
addisonwesley reading ma 

saraswat 
concurrent constraint programming languages 
ph thesis carnegie mellon university 

srivastava 
subsumption indexing constraint query languages linear arithmetic constraints 
proc 
nd international symposium artificial intelligence mathematics 

srivastava ramakrishnan 
pushing constraint selections 
proc 
acm symp 
principles database systems 

srivastava ramakrishnan revesz 
constraint objects 
proc 
nd workshop principles practice constraint programming springerverlag lncs 

steele 
definition implementation computer programming language constraints 
ph thesis mit ai tr 

stolboushkin 
finite queries effective syntax 
proc 
th acm symp 
principles database systems 

stolboushkin 
linear vs order constraint queries rational databases 
proc 
acm symp 
principles database systems 

stuckey sudarshan 
compiling query constraints 
proc 
acm symp 
principles database systems 

sutherland 
sketchpad man machine graphical communication system 
spartan books 

trakhtenbrot 
impossibility algorithm decision problem finite models 
russian doklady nauk ssr 

tarski 
decision method elementary algebra geometry 
university california press berkeley california 

tarski thompson 
general properties cylindrical algebras 
bulletin ams 

thalheim 
dependencies relational databases 
teubner stuttgart leipzig 

toman 
top beats bottom constraint extensions datalog 
proc 
ilps 

toman 
foundations temporal query languages ph thesis 
kansas state university 

toman 
point vs interval query languages temporal databases 
proc 
acm symp 
principles database systems 

toman chomicki rogers 
datalog integer periodicity constraints 
proc 
ilps 

tsur zaniolo 
ldl logic data language 
proc 
vldb pp 

ullman 
principles database knowledge base systems 
computer science press vol 


van den 
remarks tarski problem concerning exp 
logic colloquium north holland 
elsevier 

van der meyden 
complexity querying indefinite data linearly ordered domains 
proc 
th acm symp 
principles database systems 

van gelder 
deriving constraints argument sizes logic programs 
proc 
th acm symp 
principles database systems 

van hentenryck 
constraint logic programming knowledge engineering review 

van hentenryck 
constraint satisfaction logic programming 
mit press 

vardi 
complexity relational query languages 
proc 
th acm stoc 


types 
proc 
th international conference logic programming 

williams 
fourier motzkin elimination extension integer programming problems 
journal combinatorial theory 
vol 

article processed macro package llncs style 
