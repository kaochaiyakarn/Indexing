advanced transaction models workflow contexts alonso agrawal el abbadi kamath institute information systems computer science department computer science department eth zentrum university california university massachusetts ch zurich santa barbara ca amherst ma switzerland usa usa mohan ibm european networking center ibm almaden research center postfach heidelberg harry road san jose ca germany usa years numerous transaction models proposed address problems posed advanced database applications models commercial products 
case models may centered databases useful real environments 
advanced applications raise variety issues addressed transaction models 
issues basis existing workflow systems having considerable success commercial products spite having solid theoretical foundation 
explore issues show aspects workflow models superset transaction models added advantage incorporating variety ideas date remained outside scope traditional transaction processing 
widely accepted fact conventional databases unsuitable applications 
address problem numerous advanced transaction models proposed elm implemented commercial products 
believe point want main reason limited success inadequacy advanced transaction models operate real working environments 
advanced transaction models database centric provides nice theoretical framework limits research reported completed authors ibm almaden research center agrawal el abbadi sabbatical visit kamath alonso visiting scientists 
ties scope 
furthermore tend remain theoretical models generally ignore large number important design issues moh 
paradoxically growing interest tools support applications similar nature envisioned designers advanced transaction models 
result interest considerable effort deliver workflow products intended management business processes point nowadays vendors claim systems fry 
goals workflow management systems wfmss bear strong resemblance advanced transaction models addressing richer set requirements 
discuss characteristics workflow models notion business processes comparing existing transaction models 
show workflow models general richer semantics apt commercial products 
aspects workflow models superset advanced transaction models 
show implementing advanced transaction models single workflow system 
main goal provide better perspective relationship advanced transaction models workflow models 
analyzing comparing characteristics developed better understanding inherent limitations identified points improving 
organized follows section presents related motivation 
section briefly describes characteristics workflow management systems 
section discusses implementation variety transaction models workflow system 
section concludes 
motivation related years transactions models proposed address non traditional applications dhl elm wr bdg name 
cases models developed database point view preserving consistency shared database transactions main concern 
models provide defined failure semantics sense concurrency control sophisticated recovery features 
acid properties transactions may relaxed basic idea traditional transactions building blocks 
advantage formalism inherent database transactions studies theoretical aspects combining transactions larger execution units kle cr 
currently provide execution platform flexible support variety advanced transaction models bdg bp 
clear relevant models combined 
existing models implemented extensions address realistic requirements 
trend changed focus transactional workflows sr attempt address realistic environments 
done lines transaction tac ms hsu ks ghs merging advanced transaction technology workflow management systems support business processes welldefined failure semantics recovery features 
parallel wide range workflow management systems wfmss commercial products open workflow wang laboratories fujitsu staffware action workflow action technology xerox inconcert ibm flowmark fry ghs 
commercial systems incorporates transactional notions 
conception design systems orthogonal advanced transaction models transactional workflows 
early systems concentrated automation office procedures document management 
modern wfmss provide support complex long running business processes executing distributed heterogeneous environments 
pointed ghs wfmss lack ability ensure correctness reliability workflow execution presence concurrency failures 
database concepts interpreted way workflow domain 
true existing systems need enhanced cope complex scenarios provide great deal support organizational aspects user interface monitoring accounting simulation distribution heterogeneity 
success existing systems features transactional aspects obviously lack today 
imply transactional workflow meaning workflow systems traditional transaction concepts database oriented play role systems 
ideas solutions derived transactional approach fraction picture way transaction management components current database systems 
workflow systems orders magnitude heterogeneous distributed databases databases just component workflow system problems pose terms performance complex 
successful systems required flexible able cope environments activities transactional nature 
tie workflow system particular transaction model combination models result major restrictions limit applicability usefulness workflow tool 
workflow management systems workflow general ill defined concept 
trying describe precisely follow workflow management coalition wfmc hol providing high level description model functionality wfms support considered 
discussing particular implementation details flowmark lr ibm workflow product briefly discussed 
flowmark follows closely model provided wfmc features implement different transaction models workflow systems 
similar results accomplished systems 
business processes core workflow systems notion business process 
business process general set activities common goal 
business process built linking diverse activities specifying flow data control 
business processes tend long duration involve users tools heterogeneous distributed environments 
individual activities range computer programs applications human activities meetings phone calls decision making 
workflow system way controlling application successive invocations 
sharp contrast assumptions transaction systems 
workflow model workflow model acyclic directed graph nodes represent steps execution edges represent flow control data different steps 
components described follow meta model proposed workflow management coalition hol 
model abstraction provide implementation details 
described flowmark model process description sequence steps completed accomplish goal 
process consists activities relevant data 
processes nested 
activity step process 
activities name type pre post conditions scheduling constraints 
activity input data container output data container 
flow control specified control connectors activities order activities executed 
corresponds transition conditions model 
input container sequence typed variables structures input invoked application 
output container sequence typed variables structures output invoked application stored 
flow data specified data connectors activities series mappings output data containers input data containers allow activities exchange information 
conditions specify circumstances certain events happen 
basic types conditions 
transition conditions associated control connectors specify connector evaluates true false 
control connector evaluates false trigger execution activity 
start conditions specify activity started incoming control connectors evaluate true condition evaluates true condition 
exit conditions specify activity considered terminated 
execution activity exit condition checked 
true activity terminated false activity rescheduled execution 
activity states ready execution activity starts running execution activity finished execution completed terminated execution completed exit condition satisfied 
activities started ready state manually automatically 
process activities incoming control connectors considered starting activities process set ready state process started 
activity finishes exit condition evaluated 
false activity reset ready state 
activity set terminated outgoing control connectors activity evaluated 
start condition activity met activity set ready 
activity executed start condition evaluates false activity marked terminated outgoing control connectors activity evaluated false 
procedure called dead path elimination 
process considered finished activities terminated state 
general conditions increase power expressibility model 
provide means discarding branches control flow implementing structures similar 
features transaction model contract model wr programming environment reliable execution sets activities 
exit conditions implement loops embedding subprocesses process 
purposes refer subprocesses blocks 
embedded blocks processes appear higher level process activity 
workflow features transaction models wfms considers different sets entities users activities programs data 
controls automates interactions elements set 
ability integrate groups sets wfmss apart transaction models 
outlined wfms automates flow control data activities maps activities users programs 
existing advanced transaction models limit part problem 
features provided wfmss relevant ability describe organization adapt definition execution workflow processes particular characteristics organization 
wfms organization described terms roles hierarchical levels persons associated 
person roles manager programmer assistant role assigned persons 
activities defined workflow designer specify responsible execution activity 
specified role case persons fit role eligible execute activity 
pro vides great deal flexibility executing process 
possible specify notified activity executed certain period time 
activities happen automatically assumed advanced transaction models direct user intervention 
activities corresponding programs require human input execution associated users monitor progress responsible execution 
user activity restart force finish forth independently rest process 
mapping users activities possible wfms granularity activities applications traditional transactions 
activities wfms type just computer programs long way report progress wfms 
wfmss designed transactions generic activities 
particular flowmark program registered invoked activity 
api interface provided programs access data containers 
activity set ready determined users eligible execute activity notification sent 
regular users interact system worklists 
worklist contains activities correspond user 
note activity may appear worklists simultaneously soon user selects activity execution disappears worklists 
effectively perform load balancing execution process 
ideas advanced transaction models 
major difference wfmss transaction models area correctness reliability 
current wfmss offer significant support recovery failure handling ghs 
cases user intervention required solve consistency problems specify activities needed recover exception 
transaction models hand cases motivated issues solutions proposed 
noted majority proposed models implemented feasibility cases unclear 
noted wfmss execution process persistent sense forward recovery guaranteed feature advanced transaction models 
case failures process execution 
failures repaired process execution resumed point failure occurred 
minor caveats behavior especially considering wfmss treat applications run activities completely autonomous entities activities necessarily failure atomic 
failure occurs possible activity halfway executed totally executed wfms notified 
cases activity rescheduled executed 
designer tasks appropriate checking book keeping handle problems 
related granularity wfmss operate 
implementing transaction models workflow tools section show transaction models implemented wfms 
important point note workflow models deal actual application semantics contents activities orthogonal workflow process 
result workflow models directly implement transaction models semantics internal operations transactions 
semantics models difficult translate workflow applications activities transactional nature 
translations described complex performed user time process built 
hide complexity designed middleware module exotica acts pre processor converts high level specifications advanced transaction models workflow processes 
conversion automated require manual intervention indicates wfmss programming languages construct particular execution model demanded application 
approach added advantage versatile provide features exist transaction models forward recovery optional execution paths clear separation flow data control transactions 
linear sagas linear sagas originally proposed garc salem way solve problems related long lived transactions gms 
model extended parallel sagas generalized sagas 
reasons space discussion limited linear sagas ideas apply general case 
basic idea saga model allow transaction release resources committing 
long lived transaction saga seen sequence subtransactions interleaved way transactions 
subtransaction acid transaction preserves database consistency 
partial executions saga undesirable saga aborts subtransactions committed compensated 
subtransaction compensating transaction associated undoes changes introduced subtransaction necessarily return database state subtransaction executed 
formally tn subtransactions saga cn corresponding compensating transactions 
system provides guarantee sequence tn executed sequence executed 
original proposal level nesting allowed top level saga subtransactions considered translation linear saga workflow process straightforward 
note phases execution linear saga 
subtransactions executed 
terminate successfully saga commits 
saga aborts reason second phase execution takes place compensating committed subtransactions 
idea translation 
ways perform translation prefer simplicity 
subtransactions saga grouped block 
flow control block reflects saga subtransaction represented activity 
control connectors condition associated previous activity terminated successfully corresponding transaction committed 
case control connector evaluates true execution proceeds forward 
transaction aborts corresponding control connector evaluate false dead path elimination activity block executed block terminates 
result execution transaction committed aborted captured return code program 
activity register status executed 
done mapping return code output data container activity appropriate variable output data container block 
block terminates output data container contain list status activity 
second phase implemented block containing compensating activities reverse order 
null activity purpose trigger execution compensation correct point 
activity operation control connectors compensating activities 
condition control connectors corresponding forward activity executed 
information obtained mapping output data container forward block input data container compensating block 
compensating block executed right forward block terminates starting null activity executed control connectors evaluated 
correspond activities executed activated compensation proceed reverse order execution starting activity executed 
shown 
note strictly speaking activity compensated 
original model activity commits entire saga commits 
possible users may require compensate completed saga 
cases activities compensated 
flexible transactions flexible transactions context heterogeneous multidatabase environments 
environments local database acts independently 
local database unilaterally abort transaction possible enforce commit semantics global transactions 
flexible transaction designed address problem 
flexible transaction provides alternative execution paths subtransaction aborted different subtransaction submitted hope successful 
flexible transaction commits main subtransactions alternatives commit 
flexible transaction partial order subtransactions 
subtransaction compensatable retriable pivot 
compensatable subtransaction effects undone commits executing compensation transaction 
retriable transaction subtransaction eventually commit retried sufficient number times 
pivot subtransaction retriable compensatable 
note possible subtransaction compensatable retriable 
flexible transaction wellformed possible orders execution violate data dependencies subtransactions flexible transaction atomic effects undone retrying subtransactions eventually commit 
shown wellformed flexible transaction contains pivot subtransaction 
furthermore subtransactions non retriable executed pivot linear saga flowmark process forward block compensation block ct ct ct activity activity activity activity activity activity rc rc rc fb rc rc nop output data container forward block rc fb state state state state state state state state state state activity terminated succesfully rc activity terminated succesfully translation linear saga flowmark process non compensatable subtransactions executed pivot 
assumed data dependencies subtransactions 
noted restrictions apply subtransactions commits 
long alternative case transaction aborts pivots retriable compensatable transactions interleaved 
correctness enforcing certain rules order execution subtransactions structure flexible transaction 
rules scope follows assume formed flexible transactions 
flexible transactions easily implemented wfms 
difficulty mask roll back involved compensation form forward progress 
characteristics flexible transactions simplify design 
instance pivot subtransaction associated way 
aborts way commit transaction compensate executed far 
pivot subtransaction branching point depending committed aborted 
note path pivot subtransactions contain compensatable transactions 
pivot subtransaction aborts subtransactions path compensated point reached optional path 
compensation may quite complex subtransactions may involved necessary account possible executions 
simplicity compensatable subtransactions path pivot subtransactions bifurcation points optional paths grouped single block 
status subtransactions committed aborted passed input data block 
assume subtransactions programs embedded return code indicating transaction committed aborted 
furthermore assume return code transaction aborted committed 
simplicity assume specification flexible transaction notation graphs better illustrate process 
translation process follows 
subtransaction compensating subtransaction flexible transaction corresponds activity 
mapping refer pivot compensatable compensating retriable activities 

ordering activities follows ordering corresponding transactions 
enforced introducing control connectors activities 

pivot activities outgoing control connectors 
transition condition connectors pivot transaction aborted pivot transaction committed respectively 

retriable activities exit condition evaluates false subtransaction aborts 
way activity repeated subtransaction commits 

compensatable activities bifurcation points optional paths lay path pivot activities transaction pivot activity grouped block 
control connectors capturing execution order 
activity terminates status corresponding subtransaction committed aborted recorded output data container block 
data container mapped input data container corresponding compensating block 

block compensatable activities corresponding block compensating activities 
input block result execution activities 
introduce operation activity compensating activities connecting control connector transition condition activity committed 
connectors compensating activities corresponding compensatable activities reversed 
information activities executed aborted input data container block 
similar case sagas 

changing execution path done compensating activities committed old path starting 
note point necessarily unique possible state path followed longer 
points flow redirected corresponding compensating activities execution new path started 
represented linear succession events advantage dead path elimination features flowmark 
reasons space example provided 
extensive translation procedure extended see acknowledgments section 
discussion wfmss provide broader functionality needed implement acid transactions goal coordinate activities users programs data just activities data 
critique advanced transaction models proposed literature belief workflow models appropriate framework address advanced applications 
fact wfmss flexible aspects general viewed providing ubiquitous programming environment implementing variety advanced models 
show case sagas flexible transactions 
areas wfmss need improved 
particular noted lack functionality cope failures ghs 
point deserves special attention 
conventional environments coping failures usually means provide failure atomicity transaction executed entirety 
sophisticated failure handling capabilities widely discussed advanced transaction models literature techniques currently commercial industrial strength systems 
wfmss provide forward recovery atomicity certainly required cases 
existing wfmss provide satisfactory solutions problem exception handling 
true transaction processing systems 
important distinction characteristics 
recovery database sense understood problem 
certainly area existing wfmss need improvement matter time products reaching mature state 
exception handling entirely different matter 
workflow designer predict single possible case may occur process executed 
problems advanced transaction models try address 
instance alternative execution paths flexible transaction compensation sagas 
shown existing advanced transaction models implemented wfms 
transaction models provide partial limited solution problem exception handling context wfms 
solve problem 
tried show transactional approaches workflow management adequate address issues workflow systems popular 
transactional properties workflow activities processes majority 
schemas sagas flexible transactions easily implemented wfms provides realistic opportunity models real environment 
solutions provide exception handling limited certainly inappropriate workflow environments main problem recovery semantic exception handling 
area issues pointed workflow systems offer comprehensive solution advanced transaction models 
acknowledgments partially supported funds ibm networking software division ibm vienna software solutions division 
refer specific ibm products drawn ibm product plans contents 
opinions expressed 
information exotica research project extended version url www almaden ibm com cs reports workflow exotica home page html bdg dar gehani jagadish ramamritham 
asset system supporting extended transactions 
proc 
sigmod international conference management data pages may 
bp calton pu 
practical modular method implement extended transaction models 
proceedings st international conference large databases vldb zurich switzerland september 
cr panos chrysanthis ramamritham 
formalism extended transaction models 
proceedings th conference large databases vldb pages barcelona spain september 
dhl dayal hsu ladin 
transaction model long running activities 
proceedings sixteenth international conference large databases pages august 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proc 
th vldb conference august 
elm elmagarmid editor 
transaction models advanced database applications 

fry 
move workflow provokes business process scrutiny 
software magazine pages april 
ghs georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases april 
garc ia molina gawlick klein salem 
coordinating activities 
proceedings ieee spring compcon 
garc ia molina gawlick klein salem 
modeling longrunning activities nested sagas 
bulletin technical data engineering ieee march 
gms garc ia molina salem 
sagas 
proc 
sigmod international conference management data pages may 
hol 
workflow model 
technical report tc workflow management coalition december 
accessible www aiai ed ac uk wfmc 
hsu hsu 
special issue workflow extended transaction systems 
bulletin technical committee data engineering ieee june 
kle klein 
advanced rule driven transaction management 
th ieee computer society international conference compcon spring pages san francisco california march 
ks krishnakumar sheth 
specifying multi system workflow applications meteor 
technical report tm bellcore may 
lr leymann roller 
business processes management flowmark 
proc 
th ieee computer society int conference compcon digest papers pages san francisco california february march 
ieee 
moh mohan 
advanced transaction models survey critique 
tutorial acm sigmod international conference management data 
mos moss 
nested transactions approach reliable distributed computing 
phd thesis laboratory computer science cambridge massachusetts mit press 
mehrotra rastogi silberschatz korth 
transaction model multidatabase systems 
proceedings international conference distributed computing systems pages june 
ms mccarthy sarin 
workflow transactions inconcert 
bulletin technical committee data engineering june 
ieee computer society 
sr sheth rusinkiewicz 
transactional workflows 
bulletin technical committee data engineering ieee june 
tac attie meredith sheth singh woelk 
workflow support carnot 
bulletin technical committee data engineering june 
ieee computer society 
wr reuter 
contract model 
elmagarmid editor database transaction models advanced applications chapter pages 
morgan kaufmann publishers san mateo 
zhang nodine bhargava 
ensuring relaxed atomicity flexible transactions multidatabase systems 
proc 
sigmod international conference management data pages 
