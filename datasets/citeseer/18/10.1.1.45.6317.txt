workflow evolution casati ceri pernici pozzi dipartimento di elettronica informazione politecnico di milano piazza da vinci milano italy ceri casati pernici pozzi polimi may basic step flexibility workflow systems consistent effective management workflow evolution changing existing workflows operational 
area challenging issue handling running instances schema modified simple solutions devised imply loosing done failing capturing advantages offered workflow modifications unacceptable applications 
address problem workflow evolution static dynamic point view 
define complete minimal consistent set modification primitives allow modifications workflow schemata introduce taxonomy policies manage evolution running instances corresponding workflow schema modified 
formal criteria introduced simple workflow conceptual model order determine running instances transparently migrated new version schema modified 
case study relating assembling desktop computer exemplify introduced concepts 
times need reorganization improvement business processes advances information technology created huge market request workflow systems 
modern workflow management systems wfmss enable design enactment monitoring workflows heterogeneous distributed environment allowing efficient process execution management 
widely recognized basic characteristics workflow system provide flexibility 
fast changing environment companies need constantly refine processes order effectively meet constraints opportunities proposed new technology new market requirements new laws 
furthermore particular executions process unplanned situations considered design urge modification workflow definition 
problem workflow evolution facets ffl static workflow evolution refers issue modifying workflow description 
wfms provide primitives allow progressive refinement workflow rewriting scratch guarantee new version workflow syntactically correct ffl dynamic workflow evolution refers problem managing running instances workflow description modified 
wfms assist designer providing mechanisms gently bring running instances meet new requirements 
challenging issues modification workflows management executions started old workflow model 
simple solutions letting processes finish research sponsored wide esprit project old model aborting inconvenient impossible applied depending notification change nature workflow 
instance new law forces modification workflow running instances need respect new constraints 
aborting running executions solve problem implies loss great amount 
furthermore certain processes pharmaceutical chemical industries example impossible activities order organize change 
focuses workflow modifications involving flow structure definition sequence activities executed process 
consider changes applied workflow characteristics assignment tasks agents organizational schema access external databases concepts introduced applicable minor improvements workflow components 
modifications applied specific instance workflow order cope exceptional unplanned event outside scope 
propose set primitives allow generic modification workflow preserving syntactical correctness criteria applied static workflow description dynamic workflow instances 
effort reuse concepts introduced analysis schema evolution object oriented databases recognize similar problems similar solutions 
introduce taxonomy describes running instances managed modification corresponding process description defining particular constraints instances meet order continue execution new modified model 
case study representing assembling personal computer fully automated factory exemplify concepts 
previous related problem schema evolution widely addressed field object oriented databases 
approach problem complete taxonomy schema modification operation introduced 
rules proposed put constraints schema evolution rules preserve invariants schema 
set primitives manage schema evolution objectoriented database system described proposes consistency properties maintained schema modification 
little done addressing problem workflow evolution particularly concerning dynamic evolution problem 
notable contribution comes correctness criteria workflow evolution proposed definition set valid task sequences 
restricts limited set modifications discuss handling instances meet correctness criteria 
theory evolving application models 
proposes concepts relating schema evolution independent particular modeling technique entity relationship extended entity relationship object oriented defines formalism able describe models provides constraints properties hold schema modifications deal problem instances managed 
outline outline section introduces simplified version workflow model focusing aspects relevant description approach workflow evolution 
section presents bird eye view workflow modification primitives defining characteristics complete listing syntax semantics primitives appendix section introduces taxonomy case evolution policies defining possible strategies followed managing evolution running workflow instances section contains concluding remarks 
overview workflow modeling enactment section contains simplified workflow conceptual model order introduce evolution issues defining number details irrelevant purpose 
complete model specification 
model introduced presenting case study exemplify problems possible solutions concerning workflow evolution 
pc assembling case study case study relates assembling desktop personal computers performed fully automated factory 
case simplified respect real process 
basically construction process begins preparing cabinet see 
cabinet may tower 
time motherboard prepared inserting cpu disk controller 
cabinet motherboard ready motherboard inserted cabinet 
step step components inserted 
fdd inserted condition variable set get cabinet task determines cd rom inserted releases cd roms tower models inserted cd rom 
hard disk video ram inserted workflow completed 
workflow denoted initial version workflow 
prepare motherboard insert fdd mb insert cd rom insert disk controller insert cpu get cabinet plug motherboard add gb hd plug video ram container tower container pc assembling wf schema initial version workflow definition introduces graphical representation wf schema computer model process real world 
boxes represent tasks units performed human automated agent 
symbols represent connectors define order tasks executed 
call wf instance wf case execution enactment wf schema 
instance pc assemble workflow new wf case created new computer begins assembled 
normally wf cases wf schema may active time 
wf cases state identified set running tasks wf variables 
wf variables local single case lifespan case 
state case determines path followed case execution 
workflows may access external database shared workflows store application data 
sequences dependencies tasks specified ways tasks directly connected edge intuitive meaning soon ends ready execution 
cases connections tasks performed special purpose routing tasks forks initiating concurrent executions joins synchronizing concurrent execution 
schema specification may include cycles case task executed times wf instance 
fork preceded task called predecessor followed tasks called successors 
forks classified ffl conditional successor associated condition predecessor ends conditions evaluated successors true condition activated 
ffl total predecessor ends successors activated 
total fork equivalent conditional fork successors true condition 
join preceded tasks called predecessors followed task called successor 
joins classified ffl total successor activated predecessors 
ffl iterative successor activated time predecessor ends 
wf schema start symbol symbols 
wf connectors represented 
workflow graphical description contain direct links connectors 
semantics brought back described ideally breaking link null task 
null task task performs action finishes immediately starts introduced conceptual device define semantics wf diagram 
graphical representation workflow items 
left right task total fork conditional fork iterative join start symbol 
total join symbol total fork formally workflow described quadruple sigma 
tasks vars oe tasks set tasks vars set variables oe successor function associating task tasks set tasks element powerset tasks condition function associating task tasks condition 
functions oe define flow structure 
meaning clarified describing workflow execution model 
intuitively task completed set oe considered task set holds task started 
condition expressed set pairs varname value yields true iff pair set value varname value 
domain codomain oe may contain special tasks signaling respectively start workflow 
functions oe meet certain constraints sigma legal syntactically correct 
formally define legality workflow schemata concepts introduce definitions ffl successor transitive closure transitive closure successor function denoted oe defined oe fp oe oe oe ffl reachability task reachable iff oe start 
ffl predecessor function predecessor function denoted represents set tasks successor ft oe wf schema legal iff tasks flow structure part domain codomain oe reachable 
definition reachability implies existence path connecting start symbol task workflow 
avoid existence tasks executed regardless particular schema instantiation due badly placed conditions instance task conditions false case execution 
workflow execution case executed scheduling tasks assigning proper executing agent 
scheduling performed workflow engine receives notification tasks completion determine task executed basis schema specifications case state 
simplified model assume 
task scheduled wf engine immediately assigned agent ready execution 
task executed proper agent completed 

time spent engine scheduling tasks compared task execution time 
task executions completed time 
engine process event time relating case execution workflow introduce definitions symbols ffl denotes th execution task ffl active denotes set active tasks case workflow set evolves case execution proceeds modified task completion 
active denotes value active set completion th execution task ffl vars denotes set values variables consists set pairs varname value values initialized possibly null default value case started vars denotes value vars set completion th execution task modifications wf variables task recorded vars set ffl completed denotes set completed task executions case set initialized empty set case started executions added completed 
ffl denotes set tasks completed completion task case start execution completed 
task set initialized empty set case started 
note completed set members tasks task executions 
ffl denotes state case represented sets active vars task 
denotes state case completion th execution task represented sets active vars task execution completed event generated signaling task completion wf engine 
events totally ordered case assumed task completions happen concurrently 
execution completed performed workflow engine 
removed set active tasks inserted completed set inserted set tasks 
effect task case variables registered set vars modified actions performed task started scheduled way oe tg vars start execution put set active tasks 

ff function sigma denote process described point scheduling tasks activate completion th execution task case schema schema evolution primitives section introduce characteristics workflow modification language constructs allow modification wf schema detailed description syntax semantics primitives appendix 
goal define set primitives complete minimal consistent 
completeness refers possibility transforming generic wf schema generic wf schema 
minimality refers achievement completeness minimal set primitives consistency relates problem modifying schemata causing compile time run time errors 
particular concepts typical schema evolution database systems introduce notions structural consistency behavioral consistency 
structural consistency refers static part wf schemata description 
structural consistency implies sequence modifications resulting schema legal 
behavioral consistency refers dynamic part wf population running cases 
behavioral consistency implies set primitives applied case execution results case execution different schema legal state 
state case schema legal iff evolve resulting run time errors behavior scheduler defined task completion active behavioral structural consistency guaranteed application single primitive implying validity properties sequence applied 
primitives divided parts ffl declaration primitives modify declaration wf variables tasks variables added removed default value changed tasks added tasks set tasks removal automatically performed tasks part flow structure 
declaration primitives varname varname task ffl flow primitives modify flow structure schema sequence task executed 
flow primitives task task adds replaces specified options successor task task task removes element set successor task task condition change condition associated task activation 
referring pc assembling workflow suppose management deals offers cd rom audio card price quality 
management decides produced computers carry suite assembling process modified new requirement 
wf schema describing new process depicted newly inserted tasks shadowed 
schema denoted final version pc assembling schema 
prepare motherboard insert fdd mb insert cd rom insert disk controller insert cpu get cabinet plug motherboard add gb hd plug video ram container tower container insert desktop assemble wf schema final version 
newly inserted tasks shadowed modifications example involve flow primitives variables tasks characteristics modified task removed tasks added flow structure 
primitives allow evolution insert cd rom insert cd rom insert cd rom insert insert fdd mb insert cd rom primitives append new tasks insert cd rom insert task insert cd rom instruction causes task insert cd rom skipped case executions 
operations executed atomically specified sequence order achieve desired result 
primitives static dynamic workflow evolution 
modification primitives transform schema initial workflow schema final workflow primitives applied running cases migrate running cases done modifying state running cases consistent way 
migration case performed atomically applying transformation running engine considering scheduling case completion task engine schedule tasks activated new schema new case 
intuitively main problems primitive relates tasks execution 
happens semantics primitives depending user choice allowed finish executions started suspended effect rolled back semantics rollback discussed assume database operations automatically rolled back real world operations undone ad hoc ways 
taxonomy case evolution policies section describes policies workflow administrator wfa adopt manage running cases modification workflow schema schema schema represents final version schema 
case evolution policies devised main policies manage case evolution ffl abort wf cases aborted newly created cases start ffl flush existing cases allowed terminate schema new case started 
cases finished new cases start schema ffl progressive different decisions different cases taken case state case history 
multiple schema version may exists time 
progressive policies detailed section 
solutions simplest wfms point view version schema exists time active cases follow schema version 
referring pc assemble case study abort policy corresponds interrupting current production assembling computers new specifications 
know moment modifications introduced pc exit production department assembled old specifications schema 
drawback policy useful lost existing cases aborted 
flush policy case study mean letting pcs construction assembled old specifications starting production pcs carrying suite 
policy lost solution unsatisfactory letting existing cases finish old schema inconvenient impossible 
case study instance management decide improvements offered suite immediately adopted competitive advantage offer high 
situation critical modifications caused new law 
consider example process building train cab suppose original design included coating 
new law states allowed coating lead cancer train building wf surely need modified 
running cases simply continue old schema hope new train 
case fact case allowed start existing ones ended causes reduced productivity flush policy 
previous policies managing case evolution urges better efficient solutions problem 
solutions represented progressive policy 
progressive policies progressive policies allows case dependent evolution management 
different decisions may taken case state execution history case 
consider train cab building example 
progressive policies allow gently bring old cases follow new schema modify case execution way allow build cab law dropping done 
progressive policies detailed follows ffl concurrent completion cases execution proceed schema version new cases start immediately new version 
case study means partially assembled computers include cd rom assembling computers carrying suite start immediately ffl migration final workflow existing cases migrated new version 
syntactically formally possible modifications primitives allow transformation correspondent case migration schema schema application running case migrate running case unfortunately guaranteed execution proceed said past 
pc assemble workflow instance wf case task insert cd rom executed migrate case new version solution satisfactory cd rom inserted 
hand task insert cd rom executed case execution early stages container variable set migration new version allow capturing full advantage modifications suite inserted pc cabinet tower 
examples suggest cases certain conditions hold effectively migrated new version 
intuitively required execution case seen instance scheduler scheduled task correspondence task completion occurred execution 
happens take full advantage modifications execution case past migration guarantees execution proceed 
cases property said compliant formal definition compliance appendix 
migration unconditional compliant desirable situation 
compliant wfa needs bring follow model conditional mapping required 
conditional migration undergoes modification order compliant modification typically involve undoing compensating law introduced italy tasks defined task executions order satisfy compliance condition 
worst situation case need rolled back 
case study case task execution insert cd gamma rom completed insert cd gamma rom completed compliant new schema modifications involve part schema part scheduler behave way 
cases cabinet variable set value compliant independently state modifications affect executed path 
cases migrated new version 
cases pc assemble wf insert cd rom task completed insert cd gamma rom completed brought follow version schema conditional immediate mapping 
compliant version fact rolled back situation task insert fdd mb completed 
ffl migration ad hoc workflow situations necessary roll back compliant state order achieve informally defined wf goal new specifications 
particular wfa may prefer case specific adjustment reach goal sub optimal procedure assume optimal represented 
obtained defining new hybrid temporary schemata handle specific cases cases migrated newly created schemata 
migration may unconditional conditional semantics previous policy 
considering pc assemble example task plug video ram execution cabinet tower type necessary roll back compliant situation satisfactorily solve problem 
efficient add task activities involving removal cd rom insertion suite 
hybrid schema called depicted 
reasonable solution problem migrate cases note case compliant modifications involve insert tasks workflow 
ffl abort case aborted 
semantics abortion dependent wf schema considered particular transactional properties schema 
highly automated factory may assume aborting case means undoing tasks disassembling pc re components 
managing case evolution progressive policies progressive policies adopted manage dynamic workflow evolution wfa analyze running cases group define progressive policy adopted 
process leads segmentation set running cases depicted 
evolutionary process population composed cases concurrent completion solution chosen population grow due migrated cases 
segmentation done basis case states case execution history 
system assist wfa determining cases compliant choice left wfa 
appropriate solution depends kind extent modifications wf goal motivation urged change case execution history 
case study segmentation population version done follows ffl segment unconditional migration final workflow composed cases insert cd gamma rom completed property determined wfms 
ffl segment conditional migration final workflow composed cases tasks insert cd rom insert gb hd completed insert cd gamma rom population population hybrid schema hybrid schema migration final schema migration ad hoc schemata abort concurrent completion partitioning old schema population manage evolving wf cases completed insert gb hd completed 
rolled back insert fdd mb task losing useful 
ffl segment migration hybrid workflow composed cases task plug video ram execution 
rolling back imply losing set tasks see added remove cd rom insert suite 
concluding remarks proposed approach problem static dynamic workflow evolution 
interest topic risen kick meeting esprit project wide held toledo november users hospital general de spain ing bank netherlands stressed importance effective management dynamic workflow evolution case migration 
results achieved research development wide project enrich functionalities provided wfms 
summary defined language allows generic modification wf schema respecting structural behavioral integrity 
introduced taxonomy offers wf designer set options manage cases modified workflow schemata defining criteria compliance met running case allows transparent migration new schema 
area includes extension analysis modification workflow characteristics development methodologies allow semi automatic derivation set modification primitives applied schema ad hoc workflow schemata allow migration non compliant cases 
banerjee kim kim korth semantics implementation object oriented databases proc 
acm sigmod conference management data san francisco ca may 
fuggetta ghezzi software process model evolution spade environment ieee transactions software engineering december 
bertino object oriented database systems concepts architectures 
addisonwesley international 
prepare motherboard insert cd rom insert disk controller insert cpu get cabinet plug motherboard container tower container insert fdd mb add gb hd plug video ram remove cd rom rom insert initial version ad hoc adjustment desktop assemble wf schema hybrid version cope case specific situations casati ceri pernici pozzi conceptual modeling workflows proc 
objectoriented entity relationship conf gold coast australia 
cohen human aspects office automation elsevier 
croft task support office system acm transactions office information systems july 
ellis keddara rozenberg dynamic change workflow systems acm conf 
organizational computing systems 
hsu process management infrastructure distributed parallel databases 
kappel lang workflow management object rules roles ieee data engineering march 
framework managing schema versioning object oriented databases proc 
dexa valencia spain 
proper van der weide general theory evolving application models ieee tkde dec 
rusinkiewicz sheth specification execution transaction workflows modern database systems object model interoperability kim 
ed addison wesley 
zicari framework schema updates proceedings th intl 
conference data engineering kobe japan april 
appendix detailed description schema evolution primitives section introduces primitives partitioned criteria defined section 
primitives clearly complete minimal consistent 
wf schema developed initially transforming null schema schema ends immediately starts 

primitives deal insertion removal distinct concepts 
workflows consistent primitives application remain legal set primitives introduce constitutes basis composing higher level user friendly primitives schema modification tools 
denote sigma consequently tasks vars oe schema resulting application single primitive schema sigma tasks vars oe 
effect application sequence primitives composition effects caused single primitive 
semantics defined static evolution modifications sigma dynamic evolution modifications 
static evolution performed application generating new workflow schema wfa decide chosen policy running cases migrated new schema perform dynamic evolution 
declaration primitives ffl varname adds variable schema declaration part 
formal semantics static evolution vars vars vars 
dynamic evolution vars vars vars 
ffl var removes variable schema declaration part 
semantics static evolution vars vars 
dynamic evolution vars vars 
value 
vars ffl task adds task set tasks schema 
operation effect flow structure dynamic evolution 
static evolution tasks tasks ftg ff flow primitives flow primitives affect static evolution operation required case state order migrate case 
ffl task task fork adds successor task fork specifies added parallel existing successors formally fork specified steps executed sequence static evolution 
oe fn null task 
oe fsg 
ff 
oe 
oe oe fn ff null task 
oe oe fork specified static evolution 
oe fn null task 
oe fsg 

oe fn null tasks 
oe oe 
oe fsg 
ff ff 
oe ff oe ffl task task primitive different effects depending symbol 
task predecessor primitive simple semantics simply transforms null task 
allow simple effective handling dynamic evolution cases state need modified case execution removed task active semantics allow completion competed engine knows schedule task part flow structure 
executions anyway inhibited null tasks conceptual devices correspond action real world 
static evolution transform null hand predecessors removed list successors provided task unreachable successor 
static evolution ae oe oe fsg operation effect dynamic evolution remains flow structure engine knows schedule task completion 
symbol removed set successors formally tasks oe oe oe modifications caused primitive rolled back resulting schema legal symbol 
applying primitives possible transform schema null schema making task null tasks 
ffl task condition sets condition task allowed task join predecessor 
static evolution tasks oe compliance having introduced semantics primitives formally define compliance case schema compliant iff completed sigma sigma 
