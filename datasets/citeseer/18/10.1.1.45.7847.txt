baltzer journals april planning temporally extended goals fahiem bacchus kabanza dept computer science university waterloo waterloo ontario canada mail logos uwaterloo ca dept de math informatique universite de quebec canada mail kabanza dmi ca planning goals traditionally viewed specifying set desirable final states 
plan transforms current state desirable states viewed correct 
goals form limited specify allow constrain manner plan achieves objectives 
propose viewing goals specifying desirable sequences states plan correct execution yields desirable sequences 
logical language temporal logic specifying goals semantics 
language rich allows representation range temporally extended goals including classical goals goals temporal deadlines quantified goals universal existential quantification safety goals maintenance goals 
formalism simple extends previous approaches area 
planning algorithm generate correct plans goals 
algorithm implemented provide examples formalism 
result planning system generate plans satisfy novel useful set conditions 
keywords planning temporal logic 
features distinguishes intelligent agents flexibility generally ability accomplish task variety ways 
flexibility course necessary agent able accomplish range tasks varying conditions 
supported canadian government nserc iris programs 
preliminary version appears proceedings aaai pp 

bacchus kabanza temporally extended goals flexibility poses problem communicate agent task want accomplished sufficiently precise manner really want 
area planning methods algorithms studied information current situation intelligent agent compose primitive abilities accomplish desired task goal 
afore mentioned problem problem designing sufficiently expressive precise ways specifying goals 
planning dealt goals specified conditions final state 
example specify goal list literals 
intent goals agent find plan transform current situation configuration satisfies literals goal 
plan achieves satisfying final state deemed correct 
major limitations expressive power goals 
goals final state goals 
example goals maintenance reaction agent try maintain condition respond limited time frame condition 
goals important specified commands reach certain final state 
second important constraints wish place agent behavior similarly expressed final state semantics goals 
example agent goal minimize disk usage want constrain deleting arbitrary files 
importance specifying safety constraints agent plans recognized 
particular weld etzioni strong arguments looking simple achievement final state suggest additional constraints plans notion don disturb restore 
notions tip iceberg general types constraints may need specify 
richer formalism specifying goals borrows verification mp develop planning algorithm generating plans achieve goals 
formalism suggests different way viewing goals planning 
viewing goals characterizing set acceptable final states plan correct achieves states view goal specifying set acceptable sequences states plan correct execution results sequences 
show formalism goals subsumes suggestions weld etzioni viewing don disturb restore constraints plans view simply additional goals 
formalism allows specify wide range temporally extended goals 
range includes limited classical goals achieving final state goals temporal deadlines safety maintenance goals discussed weld etzioni hh quantified goals universally existentially quantified 
furthermore formalism logical language carries precise quite intuitive semantics 
important precise semantics goals able analyze verify exactly agents accomplishing 
logic course previously planning 
included works logic planning green situation calculus gre rosenschein dynamic logic ros bauer temporal logic bacchus kabanza temporally extended goals bbd 
viewed planning theorem proving problem 
approach initial state action effects goal encoded logical formulas 
green plans generated attempting prove constructively plan exists 
planning theorem proving date suffered severe computational problems approach yielded effective planner 
logic completely different manner 
particular standard strips approach representing initial state database facts strips adl ped representations action effects 
plan generation accomplished searching spaces closely related structure plans space proofs searched theorem proving approaches 
logic solely express goals see search control information guide search 
approach uses tractable mechanisms model checking logical formulas intractable mechanisms generating proofs 
temporally extended goals previously examined literature 
haddawy hanks hh provided utility models types temporally extended goals 
kabanza kab gk developed methods generating reactive plans achieve temporally extended goals drummond 
planning systems theories specifically designed deal temporal constraints metric resources developed ver wil ct lan pw 
major difference previous works lies logical representation 
particular temporal logic supports unique approach computing plans approach formula progression 
method formula progression lends naturally specification utilization domain dependent search control knowledge 
argue approach domain dependent search control offers considerable promise motivated approach dealing temporally extended goals 
works constructed planners capable dealing temporally extended conditions utilized complex constraint management techniques deal temporal information zeno planner weld pw permit limited range temporally extended constructs specific extensions snlp suggested weld etzioni 
mechanisms logic compositional 
special purpose modifications underlying planning algorithm accommodate primitive temporally extended constructs constructs composed logical expressions 
approach develop general purpose algorithm take input temporally extended goal expressible logical formula subject computational limitations find plan satisfying goal 
compositional features logical language allow express wider range temporally extended goals previous approaches 
works kabanza cited closer approach 
particular authors utilized similar logics similar notions formula progression 
case main difference address classical plans finite sequences actions kabanza concentrated generating reactive plans fact temporal logic bauer shares features logic 
bacchus kabanza temporally extended goals mappings states actions called universal plans sch 
reactive plans specify going interaction agent environment pose quite distinct set problems 
generate plans achieve goals expressed planning algorithm alluded relies logical notion goal progression 
notion utilized previous bk 
examined generation plans classical goals simpler temporal logic express search control information 
implemented algorithm extension tlplan system developed 
planning algorithm sound complete able generate range interesting plans 
rest provide details logic propose expressing goals 
logic temporal logic previous alur afh 
approach planning provide examples demonstrate range goals system cope 
close discussion 
expressing goals mitl logical language expressing goals 
logic metric interval temporal logic developed alur afh extended allow order quantification 
syntax start collection ary predicates including equality ary predicate constants true false function symbols constants viewed ary functions variables boolean connectives 
add universal existential quantifiers modal operators fl 
collection symbols generate mitl language express goals 
mitl defined traditional rules generating terms atomic formulas boolean combinations taken ordinary order logic 
addition standard formula formation rules add 
oe formula fl oe 

oe oe formulas interval oe oe 
syntax intervals defined 

ff atomic formula variable free oe formula ff oe ff oe 
notice defined special syntax quantification 
particular language bounded quantification 
atomic formula ff specify range quantified variable ranges 
bounded quantification implementation computationally feasible 
precise semantics bounded quantifiers 
bacchus kabanza temporally extended goals syntax intervals expect 
allowed intervals intervals non negative real line specify interval giving endpoints required non negative numbers 
allow unbounded intervals allow right endpoint 
intervals open closed half open half closed traditional symbols denote closed bounds denote open bounds 
example specifies interval numbers specifies interval specifies interval point 
non negative intervals ones allowed formulas mitl semantics algorithms need utilize shifted intervals test negative intervals 
interval set numbers gamma gamma set numbers true iff numbers 
example new interval gamma new interval gamma gamma gamma gamma true 
introduce implication disjunction standard abbreviations 
introduce temporal modalities eventually abbreviations oe oe oe oe 
abbreviate intervals form written omit writing interval write oe oe oe oe intuitive meaning temporal modalities intuitively temporal modalities explained follows 
modality fl simply specifies true state 
semantics depend time states 
important realize requires true state may formula containing temporal modalities 
mitl gets expressive power ability nest temporal modalities 
modality subtle 
untimed form oe oe specifies oe hold oe achieved 
introduce timing constraint condition achieved oe additionally achieved interval specified 
formula oe oe example requires oe true state time units oe true states reach state oe true 
eventually modality take semantics oe requires oe true state time lies interval oe requires oe true states time lies formal semantics modalities 
semantics intend goals expressed sentences language mitl 
hinted formulas intended specify sets sequences states 
surprising underlying semantics assign formulas mitl terms state sequences 
model mitl timed sequence states hs particular model infinite sequence state order model fixed domain temporal modalities interval correspond precisely traditional untimed modalities linear temporal logic eme 
bacchus kabanza temporally extended goals state assigns denotation predicate function symbol domain furthermore timing function maps state point non negative real line real numbers exists means time required non decreasing strictly increasing 
time stall single point finite number states 
eventually time increase fixed bound 
ability sequence states time advancing allows deal concurrent actions 
variable assignment mapping variables elements oe oe oe formulas mitl mitl model 
semantics mitl defined clauses 

hm oe oe atemporal contains temporal modalities quantifier free iff hs oe 

hm fl oe iff hm oe 

hm oe oe iff exists hm oe hm oe 
hm ff oe iff hs ff hm oe 

hm ff oe iff exists hs ff hm oe 
difficult show formula mitl free variables called sentence truth value independent variable assignment sentence oe mitl say true model oe iff hm oe 
sentences mitl true false individual timed sequence states associate sentence set sequences sequences true 
express goals sentences mitl obtain desired semantics goals set acceptable sequences 
discussion important property semantics called snapshot semantics 
require state snapshot exists witnesses particular property 
witness fail exist reasons snapshot taken right time showed property false snapshot taken state appropriate time exists sequence 
example say model case hm oe case hm oe state exists time 
turning clauses bounded quantifiers see range quantifier restricted set domain elements satisfy ff 
ff true domain individuals bounded quantifiers equivalent ordinary quantification 
similarly express bounded quantification ordinary quantifiers note order model relationship hs oe defined standard rules order semantics 
bacchus kabanza temporally extended goals syntactic equivalences ff oe ff oe ff oe ff oe 
defined mitl bounded quantification need place finiteness restrictions quantification computing plans 
planning planning assumptions restrictions turn problem generating plans goals expressed language mitl 
specify assumptions 

input complete description initial state 

actions preserve completeness 
action applied completely described state resulting state completely described 

actions deterministic world produce unique successor world 

plans finite sequences actions 

agent executing plan changes world 
agents exogenous events 

quantifier bounds atomic formulas ff definition quantified formulas range finite subset domain 
assumptions allow focus particular extension planning technology 
essentially assumptions classical planning 
example assumption actions preserve completeness implied standard strips assumption 
possible weaken assumptions 
example approach accommodate degree incompleteness 
incomplete state descriptions suffice long complete determine truth preconditions action determine truth atemporal subformulas goal formula 
price may paid efficiency database lookup theorem proving may required determine truth items 
conservative notions incompleteness locally closed worlds utilized framework imposing large computational burden 
clear restricting deterministic actions mean actions conditional effects 
fact planner implemented handles full adl conditional actions ped including actions disjunctive existentially quantified preconditions actions update metric quantities functions 
plan correctness goal expressed sentence mitl need develop method generating plans satisfy sentences mitl satisfied timed state sequences described bacchus kabanza temporally extended goals 
determine plan satisfies provide semantics plans terms models mitl 
actions map states new states finite sequence actions generate finite sequence states states arise plan executed 
furthermore assume part action specification specification duration constrained non negative 
means consider commence time state visited plan time stamp 
plan gives rise finite timed sequence states suitable model mitl 
difficulty models mitl infinite sequences 
intuitively intend control agent finite time time agent completes execution plan 
assuming agent source change completed plan final state plan remains unchanged 
formally define mitl model corresponding plan follows definition plan finite sequence actions ha hs sequence states gamma initial state 
sequence states visited plan 
mitl model corresponding defined hs final state gamma duration time copies increases bound 
finite sequence actions generate corresponds unique model final state idling 
goal expressed sentence mitl determine semantics defined plan satisfies goal 
definition plan goal expressed formula mitl initial state model corresponding correct plan iff generating plans generate plans adopting methodology previous bk 
particular constructed forward chaining planning engine generates linear sequences actions linear sequences states 
linear sequences states generated incrementally check goal 
show achieving goal impossible particular sequence prune sequence possible extensions search space 
find sequence satisfies goal 
incremental checking mechanism reactive plans policies tr bd concerned going interactions agent environment 
applications want agent accomplish task finite horizon case plans finite sequences actions generally suffice 
bacchus kabanza temporally extended goals inputs state formula label oe time duration delta successor state 
output new formula oe representing formula label successor state 
algorithm progress oe delta case 
oe contains temporal modalities oe oe true oe false 
oe oe oe oe progress oe delta progress oe delta 
oe oe oe progress oe delta 
oe fl oe oe oe 
oe oe oe oe false oe progress oe delta progress oe delta oe gamma delta oe progress oe delta oe gamma delta oe 
oe ff oe oe fc ff progress oe delta 
oe ff oe oe fc ff progress oe delta table progression algorithm 
accomplished logical progression goal formula 
formula progression 
technique formula progression works labeling initial state sentence representing goal call successor initial state generated forward chaining new formula label generated progressing initial state label algorithm table 
new formula label successor states 
process continues 
time state expanded planning search successors new label generated progression 
intuitively state label specifies condition looking 
want find sequence states starting state satisfies label 
purpose progression algorithm update label extend state sequence 
takes input current state duration action yields successor state 
logical relationship input formula output formula algorithm characterized proposition proposition hs mitl model 
formula oe mitl hm oe hm progress oe gamma 
proof proof proposition follows directly semantics mitl formulas 
see argument proceeds consider case oe contains temporal modalities 
similar clause semantics oe section see hm oe iff oe 
progression algorithm produces progressed formula oe true bacchus kabanza temporally extended goals oe false 
hm true hm false see proposition holds case 
complicated case oe oe oe delta gamma 
see oe satisfied sequence starting time non decreasing sequence 
time expired oe false validates proposition 
oe true oe true current time 
current state falls interval oe true 
semantics oe true iff oe true oe true time shifted version oe true state 
induction oe true iff progress oe delta true state similarly oe see need time shifted version oe observe oe true interval move state delta time units oe true interval gamma delta putting obtain formula oe satisfied state 
oe true current state irrelevant current time fall required interval 
final case require oe true current state progress oe delta true state time shifted version oe true state 
final cases algorithm show handle quantification rewriting formula possible instantiations quantified variable 
assumption quantification ranges finite subset domain 
say label start state formula oe generate new labels sequence states hs si state progression algorithm 
furthermore say find sequence states hs starting state satisfies label 
simple induction proposition shows sequence leading followed sequence hs satisfies oe 
progression algorithm keeps labels date specify looking arrived 
insight identify important features formula progression mechanism 
find state idling satisfies label correct plan 
proposition hs sequence states generated forward chaining initial state state label 
labels states computed progression state sequence progress gamma hs iff hs 
proof induction proposition 
formula specifying goal proposition shows hs bacchus kabanza temporally extended goals inputs state formula oe 
output true state sequence hs time increases bound satisfies oe 
false 
algorithm idle oe case 
oe contains temporal modalities oe return true return false 
oe oe oe return idle oe idle oe 
oe oe return idle oe 
oe fl oe return idle oe 
oe oe oe return false return idle oe return idle oe idle oe 
oe ff oe return fc sj ff idle oe 
oe ff oe return fc sj ff idle oe table idling algorithm 
satisfies label plan leading satisfies goal 
method testing state formula oe mitl hs oe termination test planning algorithm guarantees soundness algorithm 
describe appropriate method 
furthermore long search procedure algorithm eventually considers finite sequences states planning algorithm complete 
second feature formula progression allows prune search space losing completeness 
compute progressed label simplify processing true false subformulas 
example label oe true generated simplify oe 
state receives label false prune search space avoiding searching successors 
proposition know label specifies requirement sequences start state 
sequence satisfy requirement false sequences starting state satisfy goal state successors safely pruned search space 
termination 
indicated detect plan satisfies goal detect idling state satisfies label 
computation accomplished algorithm table 
proposition idle oe returns true hs oe 
idle detects idling state satisfies formula 
bacchus kabanza temporally extended goals inputs initial state sentence mitl specifying goal 
returns plan consisting finite sequence actions 
algorithm plan 
open 
open empty 
oe remove element open 
idle oe return oe 
successors expand 
successors oe progress oe duration 
oe false parent oe oe 
open open oe table planning algorithm 
proof proposition easily proved definition semantics mitl 
example consider formula oe oe oe timed requires oe true 
state idling means satisfy oe induction tested calling idle oe 
similarly time gap time oe satisfied satisfy oe tested calling idle oe 
planning algorithm 
pieces developed previous sections specify planning algorithm table 
algorithm labels initial state goal searches space state formula pairs 
test termination running idle algorithm state formula 
expand state formula pair apply applicable actions state component returning pairs containing successor state action produced state accomplished expand 
compute new labels successor states progress algorithm 
noted treat action sequences visit state cyclic 
looking path final state classical planning eliminate cycles 
goals mitl easily require visiting state times 
view visiting state formula pair cycle standard techniques optimize search perform redundant expansions state formula pair 
intuitively visit example eliminate node search new path better old path 
considerations determine decide set parent oe step bacchus kabanza temporally extended goals state formula node arrived point search searching set extensions state 
planner implemented performs optimization 
proposition planning algorithm sound complete 
produces plan correct definition long nodes selected open manner node eventually selected find plan exists 
proof soundness algorithm follows directly soundness termination test propositions 
completeness obvious completeness underlying search algorithm 
argument optimize eliminating cycles proved formally 
implementation implemented planning algorithm extension tlplan system bac 
system provides general forward chaining engine number useful features 
requires set described predicates 
positive instances described predicates provided initial state completeness description preserved actions 
described predicates place system implements efficient order formula evaluator utilizing closed world assumption described predicates 
utilizing complete descriptions described predicates evaluator able test state satisfies arbitrary order formula theorem proving 
employs model checking hv process similar query evaluation databases 
formula evaluator provide number useful features 
additional predicates defined recursive order formulas described predicates 
example blocks world domain predicate defined recursive formula described predicates 
furthermore predicates invoke arbitrary computations defined 
additional defined predicates preconditions actions goal formulas 
second actions specified full adl formalism 
particular ucpop pw preconditions actions disjunction existential quantification 
functions fully supported 
particular described functions defined updated adl actions see ped details function updates functions invoke arbitrary computations defined formulas 
tlplan system designed plan classical achieve final state goals 
key component system ability express search control knowledge formulas temporal language 
formulas progressed algorithm similar progress 
temporal language simpler include specified algorithm progress run successor current state successor generated action different duration 
implementation able avoid run progress producing parameterized version progressed formula appropriate labeling successor states 
bacchus kabanza temporally extended goals robot room domain ability specify timing constraints 
implement algorithm tlplan system altered progression mechanism suitable mitl language implemented idle algorithm test termination 
algorithms utilized tlplan formula evaluator allow testing arbitrary order formula state progression idle algorithms bottom testing formula true current state 
example empirical results section examine simple example domain illustrate range types goals expressed planned approach 
domain variant classical strips robot rooms domain fn 
configuration rooms illustrated 
domain objects robot located locations corridor rooms 
robot move connected locations open close doors indicated gaps walls grasp carry object time 
operators characterize capabilities shown table 
table variables preceded question mark 
move operator adl operator conditional effects 
objects robot holding updates position 
indicated table notation add delete columns literal added deleted holds 
duration actions set 
implementation allows set duration action dependent instantiation parameters 
particular set duration completeness assumptions mentioned section come play 
complete descriptions tlplan evaluate order formulas state model checking 
complete state descriptions require form theorem proving 
bacchus kabanza temporally extended goals operator precondition adds deletes open robot connects closed door opened closed close robot connects opened door closed opened grasp robot object holding release holding holding move robot connects opened robot holding robot holding table operators robot room domain 
move move duration 
initial state domain specify location robot existence location objects domain 
specify door opened closed 
doors connect rooms corridor locations set connects relations specified connects 
door connects corridor location door connects doors dij connect rooms ri rj 
corridor locations connected corridor open 
literals connects corridor opened corridor initial state description 
types goals classical goals classical goals easily encoded untimed eventualities hold forever 
example classical goal fat robot obj expressed set literals encoded mitl formula robot obj classical goal encoded manner 
semantics plans idling final state formula satisfied plan final state satisfies goal 
generally specify classical achieve final state goal enclosing atemporal formula language eventuality 
specify disjunctive goals negated conditions quantified goals formula object robot bacchus kabanza temporally extended goals example specifies goal state object robot room 
safety maintenance goals weld etzioni discuss need safety conditions plans 
conditions studied verification literature mp 
mitl express wide range conditions 
maintenance goals hh involve keeping condition intact similar 
weld etzioni propose specific constructions don disturb restore start general goal expressing safety conditions 
constructions easily encoded goals mitl 
don disturb specifies condition oe 
plan defined satisfy don disturb condition execution instantiation oe changes truth value 
example constrain robot disturb open status doors setting oe opened 
prohibit plans closed doors 
conditions easily specified conjoining formula oe oe original goal 
example goal robot obj opened opened satisfied plan close doors open initial state 
restore specifies condition oe 
plan satisfies restore condition finished 
plan append new plan restore truth instantiations oe held initial state 
specify restore goals mitl conjoining formula oe oe specifies final state plan satisfy instantiations oe held initial state 
notice semantic distinction restore don goals clear formalism 
restore goals don disturb goals 
restore goals allow violation oe plan long conditions eventually restored final state 
conditions limited special cases 
mitl express 
example say want constrain robot close doors opens 
place don disturb condition closed prohibit robot moving rooms doors closed 
specify restore condition robot leave door opened long time finished rest plan 
mitl domain formula connects robot closed fl open robot closed formula specifies robot opens closed door closed fl open go door robot close door closed 
robot forced tidy respect doors appropriately rewrite oe terms bounded quantification additional quantifiers oe multiple free variables 
similar remarks hold encoding restore 
add formula conjunct original goal force planner find plan satisfies restore 
want give restore conditions lower priority discussed resort techniques replanning suggested 
bacchus kabanza temporally extended goals opens doors purpose moving closes doors opens 
timing deadlines mitl capable expressing goals timing conditions 
example oe requires condition oe achieved time units 
timed reactions possible 
example oe requires condition achieved time units condition oe true 
note oe temporally extended conditions 
empirical results tested different goals categories mentioned 
plans generated similar initial states 
particular state obj obj robot object obj object obj doors opened 
initial state set goal robot obj corresponds classical goal fat robot obj planner generates plan time action time action move release obj grasp obj move move move took planner seconds expanding worlds find plan 
initial state set goal object planner generates plan time action time action move move move release obj grasp obj case generated plan quantified goal making convenient choice object place 
plan took planner sec expanding worlds find plan 
timings taken sparc station best search strategy exploring cost plans find shortest plan 
planner tested duplicate state formula pairs search 
bacchus kabanza temporally extended goals change initial state doors closed set goal robot obj connects robot closed fl open robot closed simply classical goal additional constraint robot ensure closes doors 
goal planner generates plan time action time action open release obj move open close move grasp obj close open open move move close close plan took planner sec expanding worlds find 
reset initial state doors open set goal obj obj opened opened goal tight deadline 
robot move directly move obj 
stops grasp obj way fail get obj time 
conjoin subgoal closing open doors 
discuss safety constraint acts form search control stops planner useless goal close actions 
planner generates plan time action time action move move move grasp obj grasp obj move move move release obj move move plan took planner sec expanding worlds find 
change time deadlines previous goal set goal obj obj opened opened planner generates plan bacchus kabanza temporally extended goals time action time action move release obj grasp obj move move move move grasp obj move move took planner sec 
find plan expanding worlds way 
working initial state set goal obj obj robot planner generates plan time action time action move move grasp obj move move move move release obj move move took planner sec 
find plan expanding worlds way 
note obj fact required time period final state configuration initial state 
example temporally extended goal requires visiting state twice 
search control planner generate interesting range plans problems remain 
heuristically adequate planning problems 
example goal achieving final state resort blind search find plan 
similarly special mechanisms planning quantified goals simply searches finds state satisfying goal 
safety goals offer better performance goals prune search space sequences falsify 
included safety conditions open doors fourth fifth tests allow planner find plan faster 
goals complex timing constraints planner utilize special temporal reasoning 
mentioned major advantage approach lies ability planner utilize domain dependent search control information 
information expressed formulas mitl conjoined goal 
approach search control explored previous bk demonstrate impressive results 
particular able construct polynomial time domain dependent planners range domains adding domain specific control knowledge expressed temporal logic similar simpler mitl 
approach bacchus kabanza temporally extended goals increasing efficiency planners know able produce polynomial time behavior domains 
see control information utilize consider examples 
say modify described conjoining clauses robot obj object obj holding opened opened new goal simply takes advantage fact achieve goal moving obj necessary pickup object necessary close doors 
planner takes sec 
generate plan expanding worlds 
modifying conjoining clause opened opened goal require closing doors generate plan sec expanding worlds 
modifying conjoining clause object obj holding goal require picking moving object obj generate plan sec expanding worlds 
modifying conjoining clauses object obj holding opened opened goal require moving object obj closing doors generate plan sec expanding worlds 
summarize simple control formulas generate speedups example time worlds new time new worlds columns give planning time number worlds expanded add search control clauses 
note particular speedups obtained harder problem 
furthermore noted simplest obvious control formulas domain 
bacchus kabanza temporally extended goals clean expressive formalism expressing temporally extended goals 
formalism useful simply representation matter wants compute plans 
demonstrated formalism direct computational interpretation constructed implemented planning algorithm 
discussed key making practical approach planning temporally extended goals advanced lies utilizing search control information 
information shown examples domain dependent 
certain cases control information automatically derived domain description 
ability automatically derive control formulas approach feasible 
key component examine mechanisms automatically generating analyzing search control knowledge 
lot interesting questions arise dealing search control quantified goals goals complex quantitative temporal constraints 
avenue pursuing statically analyze goal formula employ sophisticated temporal reasoning prior planning construct control formulas 
hope experiment approach compare efficiency approach performing temporal constraint reasoning stage plan generation done temporal planners zeno system pw 
afh rajeev alur tomas feder thomas henzinger 
benefits relaxing 
tenth annual acm symposium principles distributed computing podc pages 
allen kautz tenenberg 
reasoning plans 
morgan kaufmann san mateo ca 
bac fahiem bacchus 
tlplan version user manual 
available url ftp logos uwaterloo ca pub bacchus tlplan manual ps 
bbd bauer koehler integrated plan generation recognition logic approach 
technical report rr dfki 
bd craig boutilier richard dearden 
abstractions decision theoretic planning time constraints 
proc 
national conference artificial intelligence aaai pages seattle 
bk fahiem bacchus kabanza 
temporal logic control search forward chaining planner 
proceedings rd european workshop planning 
available url ftp logos uwaterloo ca pub tlplan tlplan ps kabanza st denis 
synthesizing plant controllers realtime goals 
proc 
thirteenth international joint conference artificial intelligence ijcai pages 
ct currie tate 
plan open planning architecture 
artificial intelligence 
dean kaelbling nicholson 
planning deadlines bacchus kabanza temporally extended goals stochastic domains 
proc 
national conference artificial intelligence aaai pages 
drummond 
situated control rules 
proc 
international conference principles knowledge representation reasoning kr pages 
morgan kaufmann 
etzioni golden weld 
tractable closed world reasoning updates 
principles knowledge representation reasoning proc 
forth international conference kr pages 
eme emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume chapter pages 
mit 
fn richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
gk godefroid kabanza 
efficient reactive planner synthesizing reactive plans 
proc 
national conference artificial intelligence aaai pages 
gre green 
application theorem proving problem solving 
proc 
international joint conference artificial intelligence ijcai pages 
hh haddawy hanks 
utility models goal directed decision theoretic planners 
technical report university washington 
technical report 
hv halpern vardi 
model checking vs theorem proving manifesto 
allen fikes sandewall editors principles knowledge representation reasoning proc 
second international conference kr pages 
morgan kaufmann san mateo ca 
kab kabanza 
synthesis reactive plans multi path environments 
proc 
national conference artificial intelligence aaai pages 
lan lansky 
localized planning diversified plan construction methods 
technical report fia nasa ames research center 
technical report 
mp zohar manna amir pnueli 
temporal logic reactive concurrent systems specication 
springer verlag new york 
ped pednault 
adl exploring middle ground strips situation calculus 
proc 
international conference principles knowledge representation reasoning kr pages 
pw scott penberthy daniel weld 
ucpop sound complete partial order planner adl 
principles knowledge representation reasoning proc 
third international conference kr pages 
morgan kaufmann 
pw scott penberthy daniel weld 
temporal planning continuous change 
proc 
national conference artificial intelligence aaai pages 
morgan kaufmann 
ros stanley 
plan synthesis logical perspective 
proc 
international joint conference artificial intelligence ijcai pages 
sch schoppers 
universal plans reactive robots unpredictable environments 
proc 
tenth international joint conference artificial intelligence ijcai pages 
tr jonathan stuart russell 
control strategies stochastic planner 
proc 
national conference artificial intelligence aaai pages seattle 
ver vere 
planning time windows durations activities goals 
ieee trans 
pattern analysis machine intelligence 
daniel weld oren etzioni 
law robotics call arms 
proc 
national conference artificial intelligence aaai pages 
wil wilkins 
practical planning 
morgan kaufmann san mateo ca 
