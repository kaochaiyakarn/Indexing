van deursen domain specific languages versus object oriented frameworks financial engineering case study domain specific language help develop readable maintainable applications domain little effort 
alternatively aims achieved setting object oriented framework 
domain financial engineering independently objectoriented framework domain specific language developed 
opportunity contrast highlight differences discuss opportunities mutual benefits 
particular kind problem occurs worthwhile express instances problem sentences simple language ghjv 
idea introducing domain specific language dsl software developers resulting languages lex yacc postscript awk sql benefits dsl include improved readability maintainability flexibility portability software nj 
alternatively object oriented framework developed support construction families related programs jf joh 
framework set cooperating classes domain software engineer develop application domain 
frameworks dsls common 
fact frameworks shipped dsl access functionality available dsl joh 
try highlight differences approaches order arrive criteria deciding develop dsl framework ways dsl framework development benefit 
achieve study single application domain financial engineering object oriented framework domainspecific language risla ad adr dk developed 
related network protocol software area dsl morpheus language ap framework conduits hje developed 
hje includes short comparison concluded framework achieve execution efficiency special purpose programming language offers similar easily extensible composition facilities 
financial engineering domain financial engineering deals financial instruments called interest rate products 
aim products facilitate financial transactions place inter bank trade take overs 
products provide protection interest rate currency exchange rate fluctuations 
simplest interest rate product loan fixed amount certain currency borrowed fixed period interest rate 
complicated products financial forward rate agreement capped floater cog chapter aim risk reallocation 
banks invent new ways giving rise interest rate products 
surprisingly different interest rate products common making financial engineering area suitable incorporating domain specific knowledge tools languages libraries 
flexibility interest rate product market complicates task software engineer 
software systems dealing interest rate products include bank financial administration buying importantly management information system allowing decision makers assess risks involved products currently processed 
typical problems systems difficult introduce new type product quickly similar existing ones ensure instructions financial engineer correctly implemented software engineer 
problem leads long time market new products second leads potentially incorrect behavior 
risla language dutch bank software house cap gemini saw specific language describing interest rate products solution problems long time potentially inaccurate implementations 
language readable financial engineers descriptions language compiled cobol 
section summarize earlier detailed accounts adr dk development language 
language development development language called risla systeem language interest rate information system language started summarized follows ffl library cobol routines operating cash flows intervals interest payment schemes date manipulations ffl library directly cobol provide right level abstraction cumbersome encoding tricks needed lists fixed length ffl interest rate product considered class contains instance variables assigned creation time principal amount interest rate currency information methods inspecting actual products interest paid registration methods recording state changes pay 
language risla designed describe interest rate products lines 
instantiated product called contract fixing actual amount rate particular product sold 
language number built data types representing cash flows dates rates intervals balances large number built operations manipulating data types operations correspond subroutines cobol library 
product definition specifies contract parameters information methods registration methods 
risla translated cobol 
systems bank invoke generated cobol create new contracts ask information existing contracts update contract information 
initial version risla define interest rate products 
years working risla users experienced modularization features risla inadequate 
risla description defines complete product different products constructed similar components 
remedy situation project modular risla started 
risla extended small modular layer featuring parameterization renaming 
component library developed important products described library 
addition risla development team effort language accessible financial experts 
inter active questionnaire interface component library developed 
users combine existing components new product filling answers questionnaire 
answers select relevant risla components 
definition may contain holes specific product filled writing appropriate risla code 
modular definition expanded flat non modular definition turn compiled cobol 
point interest actual questionnaire defined second domainspecific language 
language defining questions permitted answers choice fixed set free text 
constructs indicating order questions asked sequencing may depend actual answers 
associate library components possible answers 
definition entered textual form generated tcl tk program 
program invoked financial engineer fill questionnaire generate corresponding modular risla 
assessment risla project met targets time costs introduce new product estimated months weeks 
financial engineers questionnaire compose new products 
furthermore easier validate correctness software realization interest rate products 
addition component library appears useful product families options 
years risla language actively 
risla survived mergers lifetime moment choice interest rate systems running merged banks 
risla easily connected systems new partner extending product descriptions methods providing new reports required required new systems 
negative side easy extend language 
new data type new built function required compiler cobol library needs adapted 
requires skills compiler construction technology typical background people working mainly cobol environment 
risla product definitions longer longer 
new software system requiring information products provided existing methods new methods added requiring new data types extensions risla language 
tool valuation swaps developed union bank switzerland 
challenges addressed similar risla project include short life cycles low time market providing management accurate analyses advantages similarities different applications intuitive human computer interfaces 
pilot study aimed showing various advanced technologies useful building banking applications 
technology evaluated included modern user interfaces object orientation domain specific frameworks design patterns 
risla project primary purpose develop production environment dealing interest rate products 
key abstractions financial instrument interest rate product discount function way computing instrument current value financial markets 
instrument characterized cash flows risla 
discount function manager position contract mix known products similar cash flows 
takes advantage called strategy pattern ghjv different ways compute instance number days year current market rate 
risla strategies encoded enumeration types values london offered rate bid rate 
evaluation expressiveness dsl provides natural way express non technical essence particular domain increasing readability portability 
hand full general purpose language framework provides flexibility adapting specific needs 
legacy libraries risla example dsl access existing library 
library functionally entirely adequate written legacy language 
dsl provide access legacy libraries 
principle wrapping achieve effect object oriented language basing framework existing legacy library 
calling framework framework active entity get called library calls functions provided application developer 
situation easily obtained dsl setting risla product description defines functions computing cash flows called systems running bank 
fact cobol generated risla easy legacy systems connect information defined risla 
overriding default behavior called white box frameworks allow application developer override default behavior inheritance 
encoded dsl natural framework setting 
language technology interactive dsl development requires tools supporting rapid prototyping scanners parsers type checkers interpreters compilers discussion techniques supporting dhk 
mutual benefits developing dsl scratch developing access legacy systems freedom choice target language natural base dsl implementation domain specific object oriented framework 
developing domainspecific framework extending dsl access functionality number advantages ffl guide design framework 
way express certain class method language construct class method correspond natural concept domain 
ffl encourages development black box frameworks composition white box frameworks inheritance 
ffl gives access framework hiding encapsulating language implement framework 
ad arnold van deursen 
algebraic specification language defining interest rate products 
cwi amsterdam international ter heide 
adr arnold van deursen res 
algebraic specification language describing financial products 
wirsing editor icse workshop formal methods application software engineering pages 
ieee april 
ap abbot peterson 
language approach protocol implementation 
ieee acm transactions networking 
van den brand van deursen klint van der meulen 
industrial applications asf sdf 
wirsing nivat editors algebraic methodology software technology amast volume lecture notes computer science pages 
springer verlag 

frameworks financial engineering domain experience report 
nierstrasz editor proceedings ecoop volume lncs pages 
springerverlag 
cog ph 

money machine city works 

third edition 
dhk van deursen heering klint editors 
language prototyping algebraic specification approach volume amast series computing 
world scientific publishing 
dk van deursen klint 
little languages little maintenance 
proceedings acm sigplan workshop domain specific languages kam pages 
th 
gamma 
object technology financial engineering domain 
oopsla pages 
acm 
sigplan notices 
ghjv gamma helm johnson vlissides 
design patterns elements reusable objectoriented software 
addison wesley 
hje johnson engel 
framework network software 
oopsla pages 
acm 
acm sigplan notices 
jf johnson foote 
designing reusable classes 
journal object oriented programming 
joh johnson 
components frameworks patterns 
editor proc 
symposium software reusability ssr pages 
acm sigsoft software engineering notes 
kam kamin editor 
proceedings acm sigplan workshop domain specific languages 
computer science report university illinois 
kieburtz mckinney bell hook lewis oliva sheard smith walton 
software engineering experiment software component generation 
proceedings th international conference software engineering icse pages 
ieee 
nj nakatani jones 
jargons 
proceedings acm sigplan workshop domain specific languages kam pages 
author address dr van deursen cwi box gb amsterdam netherlands tel fax email arie cwi nl url www cwi nl arie 
