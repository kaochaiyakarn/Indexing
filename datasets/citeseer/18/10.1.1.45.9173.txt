change detection hierarchically structured information sudarshan chawathe anand rajaraman hector garcia molina jennifer widom department computer science stanford university stanford california anand hector cs stanford edu detecting representing changes data important active databases data warehousing view maintenance version configuration management 
previous change management dealt flat file relational data focus hierarchically structured data 
cases changes computed old new versions data define hierarchical change detection problem problem finding minimum cost edit script transforms data tree efficient algorithms computing edit script 
algorithms key domain characteristics achieve substantially better performance previous general purpose algorithms 
study performance algorithms analytically empirically describe application techniques hierarchically structured documents 
study problem detecting representing changes hierarchically structured information 
detecting changes data henceforth referred deltas basic function important database facilities applications including active databases wc data warehousing ik view maintenance gm version configuration management 
example consider world wide web 
user may visit certain html documents repeatedly interested knowing document changed visit 
assuming saved old version document web browsers research supported air force wright laboratory aeronautical systems center arpa contract air force rome laboratories arpa contract equipment digital ibm corporations 
efficiency detect changes comparing old new versions document 
addition interested presenting changes meaningful way 
example paragraph moved marked old position highlighted new position 
similarly insertions deletions updates marked changes colors fonts 
change detection reported key characteristics ffl nested information 
focus hierarchical information flat information files containing records relations containing tuples 
flat information deltas may represented simply sets tuples records inserted deleted updated relations ghj lgm 
hierarchical information want identify changes just nodes data relationships 
example node children moved location represented move operation delta 
ffl object identifiers assumed 
maximum generality assume existence identifiers keys uniquely match information fragments versions 
example compare structured documents rely values sentences paragraphs come identifying keys 
similarly objects different design configurations may compared contents object ids may valid versions 
course information comparing unique identifiers algorithms take advantage quickly match fragments changed 
ffl old new version comparison 
database systems particularly active database systems build change detection facilities system wc focus problem detecting changes old new versions data 
believe common scenario change detection especially applications data warehousing querying browsing changes involves uncooperative legacy databases data management systems best hope sequence data snapshots dumps lgm 
ffl high performance 
goal develop high performance algorithms exploit features common applications large structures 
particular zs sz algorithms find compact deltas expensive run especially large structures 
running time quadratic number objects structure compared 
properties algorithms described detail section 
algorithms significantly efficient intuitively running time proportional number objects times number changes may find non minimal correct deltas 
show application domain certain property intuitively duplicate objects algorithm generates minimal deltas 
empirical studies suggest property hold practice 
describe delta versions hierarchical data notion minimum cost edit script 
minimum cost edit script trees defined node insert node delete node update subtree move basic editing operations 
interesting feature approach clean separation change detection problem subproblems finding matching objects versions computing edit script 
objects unique identifiers problem simplified property achieve speed 
minimum cost edit script formal notion delta trees convenient method displaying querying deltas 
developed second equivalent representation scheme called delta tree purpose 
due lack space describe delta trees described 
demonstrate approach algorithms implemented system detect mark display changes structured documents hierarchical structure 
system called takes versions latex document input produces output latex document changes marked 
system experimentally evaluate performance algorithms results section 
implemented algorithms change detection modules html pages simple nested object model pgmw 
remainder organized follows 
discuss related section 
section describes general approach divides problem distinct subproblems provides preliminary definitions 
algorithms solving subproblems discussed sections 
section describes application techniques hierarchically structured documents presents empirical performance study 
ongoing covered section 
due space constraints details proofs theorems may 
related previous change management dealt flat file relational data 
example lgm presents algorithms efficiently comparing sets records keys 
gnu diff utility compares flat text files computing lcs lines algorithm described mye :10.1.1.4.6927
number front ends standard diff program display results diff comprehensible manner 
program kif example 
standard diff program understand hierarchical structure data utilities suffer certain inherent drawbacks 
large data files changes diff mismatches regions data 
example comparing latex files item matched section sentence matched latex command 
furthermore utilities detect moves data moves reported deletions insertions 
commercial word processors facilities comparing documents marking changes 
example microsoft word revisions feature detect simple updates inserts deletes text 
detect moves 
mark changes facility detect move operations 
restrictions documents compared word phrase sentence paragraph basis 
furthermore approaches generalize data 
general problem finding minimum cost edit distance ordered trees studied zs 
compared algorithm algorithm restrictive assumptions nature data represented 
algorithm yields correct results assumptions hold may produce sub define longest common subsequence lcs section 
optimal results 
assumptions able design algorithm lower running time complexity 
particular algorithm runs time ne number tree leaves weighted edit distance typically 
algorithm zs runs time log balanced trees higher unbalanced trees 
uses different set edit operations zs 
sets edit operations equivalent sense state reachable set reachable 
detailed comparison sets edit operations 
believe approach zs complementary choice algorithm depends domain characteristics 
application amount data small small tree structures willing spend time biochemical structures thorough algorithm zs may preferred 
applications large amounts data object hierarchies database dumps strict running time requirements algorithm 
efficiency method exploiting certain domain characteristics 
domains characteristics may hold data may preferable get quick correct guaranteed optimal solution approach 
overview preliminaries section formulate change detection problem split subproblems discussed sections 
introduce problems informally example formal definitions terms rest 
hierarchically structured information represented ordered trees trees children node designated order 
address problem detecting representing changes context trees 
term tree mean ordered tree 
consider trees node label value 
assume tree node unique identifier identifiers may generated algorithms provided data 
note nodes represent real world entity different versions may identifier 
refer node identifier node conciseness 
efficient parallel unit cost editing sz presents uniprocessor variant runs time min tree sizes 
label value model useful semistructured data general pgmw 
defaults label value node specify explicitly 
running example running example consider trees shown ignore dashed lines moment 
number inside node node identifier letter node label 
interior nodes null values shown 
leaf nodes values indicated parentheses 
trees represent structured documents labels denote document paragraph sentence respectively 
values sentence nodes sentences 
interested finding delta trees 
assume represents old data new data want determine appropriate transformation tree tree task finding transformation determine nodes trees correspond 
intuitively nodes remain unchanged value updated transformation say deleting old node inserting new 
example node value node nodes probably correspond 
similarly nodes child node child nodes value nodes probably correspond 
notion correspondence nodes identical similar values formalized matching node identifiers 
matchings 
say matching partial nodes trees participate matching total nodes participate 
term matching mean partial matching stated 
problems find appropriate matching trees comparing 
call problem matching problem 
application domains matching problem easy data objects contain object identifiers unique keys 
domains structured documents matching labels values matching problem difficult 
furthermore want match nodes identical respect labels values nodes children want match nodes approximately equal 
instance node probably match node node missing children 
details matching problem including constitutes matching addressed section 
matching running example illustrated dashed lines 
say trees isomorphic identical node identifiers 
trees partial matching step find sequence change operations transforms tree tree isomorphic changes may include inserting leaf nodes deleting nodes updating values nodes moving nodes subtrees 
intuitively transformed partial matching extended total matching nodes total matching defines isomorphism trees call sequence change operations edit script say edit script conforms original matching provided 
seen edit script conforms partial matching long script insert delete nodes participating edit scripts defined detail shortly 
edit script transform tree little possible order obtain tree isomorphic capture minimality transformations introduce notion cost edit script look script minimum cost 
second main problem problem finding minimum cost edit script refer minimum conforming edit script problem 
remainder section formally defines edit operations edit scripts 
algorithm problem section section presents algorithm matching problem 
note consider problem matching problem despite fact method requires finding matching generating edit script 
seen definition matching relies certain aspects edit scripts presentation purposes consider details edit script algorithms 
edit operations ordered tree nodes vm children node call ith child node denote label denote value denote parent root 
assume labels chosen fixed arbitrary set 
definitions edit operations refers tree operation applied refers resulting tree 
edit operations trees insert insertion new leaf node denoted ins 
node label value inserted kth child node precisely um children gamma um children value optional assumed null omitted 
delete deletion leaf node denoted del 
result contain node del change relative ordering remaining children 
operation deletes leaf node delete interior node move descendents new locations delete 
update update value node denoted upd val 
val move move subtree parent denoted mov 
kth child entire subtree rooted moved shows examples edit operations trees 
node label value foo 
labels values nodes shown 
edit scripts informally edit script gives sequence edit operations transforms tree 
formally say result applying edit operation sequence edit operations say tm exist tm em tm sequence edit operations transforms isomorphic 
recall trees isomorphic differ identifiers nodes 
call sequence edit operations edit script respect notice edit script tell original matching modified obtain total matching done edit script generated see section 
example consider trees shown 
edit script transforms ins sec foo mov del upd baz shows intermediate trees transformation specified edit script 
update shown order save space 
foo ins foo del mov mov edit operations tree sec foo sec ins sec foo sec sec sec foo mov del applying edit script example cost model edit scripts trees general edit scripts transform tree 
edit script conform matching may correct scripts 
recall defined concept edit script conforming matching section 
example edit script applied initial tree example produces final tree produced edit script example ins sec foo del del del ins ins upd baz intuitively edit script necessary undesirable representation delta trees 
formalize idea introduce cost edit script 
define costs edit operations costs define cost edit scripts 
cost edit operation depends type operation nodes involved operation 
denote respectively cost deleting inserting updating node denote cost moving subtree rooted node general costs may depend label value position tree 
adopt simple cost model deleting inserting node moving subtree considered unit cost operations 
consider cost updating value node assume cost function compare evaluates different old value new value compare function takes nodes arguments returns number range 
nature compare function arbitrary consistent costs edit operations sense suppose moved value updated similar compare cost moving updating cost deleting replacing new node value different edit script contain delete insert pair update cost greater 
cost edit script sum costs individual operations 
generating edit script section consider minimum conforming edit script problem motivated previous section 
problem stated follows 
tree old tree tree new tree partial matching nodes generate minimum cost edit script conforms transforms algorithm starts empty edit script appends edit operations proceeds 
explain working algorithm apply edit operation added algorithm terminates transformed tree isomorphic addition algorithm extends partial matching adding new pairs nodes adds operations algorithm terminates total matching nodes outline algorithm algorithm easily explained consisting phases describe 
running example 
required find minimum cost edit script transforms matching shown dashed lines 
update phase update phase look pairs nodes values nodes differ 
pair order add edit operation upd recall node denotes value apply update operation update phase transformed pair nodes running example align phase running example insert phase align phase partner node denote node matched matching 
suppose say children misaligned matched children left partner right partner children root nodes misaligned 
align phase check pair matched internal nodes order see children misaligned 
find children misaligned append move operations align children 
explain move operations determined section 
running example append mov apply move operation new shown 
insert phase assume loss generality roots matched insert phase look unmatched node parent matched 
suppose parent partner create new identifier append ins position determined respect children aligned respect details section 
apply insert operation add running example append ins 
transformed augmented shown 
insert phase node matched may nodes unmatched 
running example delete phase move phase move phase look pairs nodes 
recall section denotes parent 
suppose 
know insert phase partner append operation mov apply move operation position determined respect children aligned insert phase 
move phase isomorphic unmatched nodes running example need perform actions phase 
delete phase delete phase look unmatched leaf nodes node append del apply delete operation 
note process result bottom delete descendents deleted ancestors 
delete phase isomorphic final edit script roots matched add new dummy roots matched 
total matching conforms 
shows trees matching delete phase 
aligning children align phase edit script algorithm presents interesting problem 
suppose detect children misaligned 
general sequence moves align children 
instance ways align children nodes 
consists moving nodes right node second consists moving nodes left node 
yield final configuration better involves fewer moves 
matching misaligned nodes ensure edit script generated algorithm minimum cost find shortest sequence moves align children algorithm finding shortest sequence moves notion longest common subsequence described 
sequence sequence subsequence obtained deleting zero elements sequences longest common subsequence lcs denoted lcs sequence pairs elements subsequence subsequence equal true predefined equality function equal sequence satisfies conditions longer length lcs denoted algorithm due myers mye computes lcs sequences time nd js js gamma treat myers lcs algorithm having inputs sequences compared equality function equal compare equality :10.1.1.4.6927
treat procedure lcs equal 
solution alignment problem straightforward 
compute lcs matched children nodes equality function equal true leave children fixed move remaining matched children correct positions relative aligned children 
lcs matching sequence 
moves generated mov mov 
show lcs strategy leads minimum number moves 
complete algorithm complete algorithm compute minimum cost edit script conforming matching trees algorithm combine phases section update insert align move phases breadth scan delete phase requires post order traversal visits node visiting children 
order nodes visited edit operations generated crucial correctness algorithm 
example insert may need precede move moved node child inserted node 
algorithm applies edit operations appended edit script algorithm terminates isomorphic algorithm uses matching initially adds matches total matching algorithm terminates 
mentioned earlier assume loss generality roots matched algorithm shown 
uses procedures shown 
claims statements algorithm marked substantiated proved algorithm generates minimum cost edit script conforming matching consider running time algorithm 
define notion misaligned nodes 
suppose 
move form called intra parent move node moves generated align phase algorithm 
number misaligned nodes respect minimum number moves minimum cost edit scripts 
show running time algorithm nd total number nodes total number misaligned nodes 
note typically smaller finding matchings section consider matching problem motivated section 
want find appropriate 
ffl 
visit nodes breadth order combines update insert align move phases current node breadth search 
partner 
partner ii 
append ins new identifier iii 
add apply ins 
root partner partner ii 
append upd apply upd iii 
partner 
append mov apply mov 

post order traversal delete phase current node post order traversal 
partner append del apply del 
minimum cost edit script total matching isomorphic algorithm matching nodes trees serve input algorithm applications data object ids keys match nodes object ids keys 
described section focus applications information may keys object ids match fragments objects version 
term data hierarchical data may identifying keys object ids 
comparing versions data may way match objects 
need define matching criteria matching satisfy considered appropriate 
general matching criteria depend domain considered 
way evaluating matchings desirable situations consider minimum cost edit scripts conform matchings transform 
intuitively matching allows transform tree lower cost better matching 
formally matchings say better minimum cost edit script conforms cheaper minimum cost edit script conforms goal find best matching matching satisfies matching criteria function 
mark children children order 

sequence children partners children sequence children partners children 
define function equal true 
lcs equal 

mark nodes order 


append mov apply mov 
mark order 
function 
partner 

leftmost child marked order return 
find rightmost sibling left marked order 

partner 
suppose ith child parent counting left right marked order 
return 
functions better matching satisfies criteria 
unfortunately matching criterion requires matched nodes label finding best matching difficulties 
difficulty matchings satisfy trivial matching criterion may unnatural certain domains 
example matching documents may want match textual units paragraphs sections subsections certain percentage sentences common 
second difficulty complexity algorithm known compute best matching defined post processing output algorithm zs runs time number tree nodes zha 
solve difficulty restrict set matchings consider introducing stronger matching criteria described 
criteria permit design efficient algorithms matching 
rest section describe matching criteria data structured documents example 
matching criteria data goal section augment trivial label matching criterion additional criteria simultaneously yield matchings meaningful domains data considered possible efficient algorithms compute best matching 
matching criterion states nodes dissimilar may matched 
leaf nodes condition stated follows 
matching criterion leaf nodes matching compare parameter 
recall denote label value node compare defined section function determining cost updating leaf node 
want disallow matching internal nodes common 
natural notion value null model number common descendants 
say internal node contains node leaf node descendent jxj denote number leaf nodes contains 
constraint allows internal nodes match certain percentage leaves match parameter matching criterion consider matching containing internal node internal node define common contains contains zg 
max jxj jyj satisfying 
recall section features domain characteristics design efficient algorithms 
introduce domain characteristics formalize stating assumptions 
hierarchical data comparing labels labels usually follow structuring schema defined acm 
structuring schemas satisfy acyclic labels condition formalized assumption assumption ordering labels schema node label appear descendent node label schemas condition satisfied domain semantics merge labels form cycle resulting schema satisfies condition 
assumption states informally compare function discriminator leaves 
states leaf old document leaf new document close vice versa 
example consider world wide web movie database source listing movies actors directors tree representation data may contain movie titles leaves 
assumption says comparing snapshots data movie title snapshot may closely resemble movie title 
assumption leaf leaf compare 
similarly leaf leaf compare 
assumption may hold domains 
example legal documents may sentences identical 
algorithms describe guaranteed produce optimal matching assumption holds 
assumption hold algorithm may generate suboptimal correct solution 
postprocess suboptimal solution obtain optimal solution 
discuss issue section 
matching criteria assumptions introduced allow simplify best matching problem follows 
recall best matching matching produce edit script lowest cost matchings satisfying matching criteria 
say matching maximal possible augment violating matching criteria 
show matching criteria imply unique maximal matching 
furthermore assumptions show unique maximal matching best matching 
statements formalized theorem proven theorem unique maximal matching trees satisfying matching criteria assumptions unique maximal matching nodes unique best matching satisfies matching criteria 
matching algorithm theorem allows design simple algorithm computing best matching 
algorithm called algorithm match runs quadratic time 
faster algorithm called computing unique maximal matching 
algorithm uses function equal compare nodes 
leaf nodes equal true compare parameter valued 
internal nodes equal true max jxj jyj parameter 
shows algorithm uses longest common subsequence lcs routine introduced earlier section perform initial matching nodes appear order 
nodes unmatched call lcs processed linear search 
assume nodes label tree chained left right 
chain denote chain nodes label tree node occurs left node chain appears order traversal siblings visited left right 

oe 
leaf label chain 
chain 
lcs lcs equal 
pair nodes lcs add 
unmatched node unmatched node equal add mark matched 

repeat steps internal node label algorithm analyze running time algorithm 
define weighted edit distance trees follows 
shortest edit script transforms weighted edit distance insert delete jxj move subtree rooted 
recall jxj denotes number leaf nodes descendants node intuitively weighted edit distance indicates different trees structurally degree difference associated move subtree depends number leaves subtree 
show running time algorithm proportional ne total number leaf nodes average cost comparing leaves compare function number internal node labels weighted edit distance implementation performance validate method computing representing deltas vehicle studying performance algorithms implemented program computing representing changes structured documents 
section describe implementation program called 
section study running time section discuss effect assumption section quality solution produced 
implementation description focus latex documents implementation handles kinds structured documents html 
takes input files containing old new versions latex document 
files parsed produce tree representations old tree new tree respectively currently parse subset latex consisting sentences paragraphs subsections sections lists items document 
easy extend parser handle larger subset latex plan 
edit script delta tree computed algorithms sections 
program takes match threshold section parameter 
comparison function leaf nodes sentences computes lcs recall section words sentences counts number words lcs 
interior nodes paragraphs items sections compared described section 
preorder traversal delta tree performed produce output latex document annotations describing changes 
implementation uses modified version lcs algorithm mye :10.1.1.4.6927
note lcs algorithm standard unix diff program requires inequality comparisons addition equality comparisons 
empirical evaluation recall section running time algorithm expression form expression represents number leaf node comparisons invocations function compare average cost comparing leaf nodes represents number node partner checks 
partner checks implemented integer comparisons 
know bounded ne bounded number tree nodes weighted edit distance trees number internal node labels 
parameter depends nature differences trees recall definition weighted edit distance section 
reasons studying performance empirically 
reason formula running time contains weighted edit distance difficult estimate terms input 
natural measure input size number edit operations optimal edit script call unweighted edit distance show analytically ratio bounded log large class inputs believe real cases value lower log study relationship empirically 
second reason test conjecture analytical bound running time loose practical situations algorithm runs faster 
performance study sets files 
unweighted edit distance weighted edit distance files set represent different versions document conference 
ran pairs files sets 
comparing files sets meaningful comparing completely different documents 
indicate weighted edit distance varies unweighted edit distance document sets 
recall number tree leaves number sentences document 
see relationship close linear 
furthermore variance respect document sets high suggesting sensitive size documents 
average value documents 
weighted edit distance running time plot running time varies weighted edit distance vertical axis running time measured number comparisons horizontal axis weighted edit distance 
note analytical bound number comparisons higher numbers depicted average approximately times fewer comparisons predicted analytical bound supporting conjecture analytical bound running time loose 
observe suggests approximately linear relation running time high variance 
variance may explained observation actual running time far predicted bound 
quality matching issue needs addressed effect assumption quality solution produced 
recall section guaranteed produce optimal matching assumption holds 
assumption hold algorithm may produce suboptimal matching 
describe post processing step added enables convert possibly suboptimal matching produced optimal cases proceeding topdown consider tree node turn 
partner current matching 
child matched node parent check match child compare parameter matching criterion 
change current matching match post processing phase removes may introduced assumption hold nodes 
post processing possible suboptimal solution follows recall begins matching leaves proceeds match higher levels tree bottom manner 
approach mismatch lower level may propagate causing mismatch higher levels 
post processing step correct mismatches propagated lower levels higher levels 
difficult evaluate precisely cases propagation occurs performing exhaustive computations 
derive necessary sufficient condition propagation measure condition experiments 
informally condition states order mismatched node certain number children violate assumption exact number depends match threshold condition weak node satisfy conditions possibility mismatch exist mismatch guaranteed 
document data analyzed earlier table shows statistics percentage paragraphs may mismatched value match threshold mismatched table mismatched paragraphs 
threshold example see may mismatch paragraphs 
lower value results lower number possible mismatches 
see number mismatched paragraphs low supporting claim 
condition determine mismatch may occur weak percentage mismatches expected lower suggested numbers 
furthermore note suboptimal matching compromises quality edit script produced final output correctness 
applications trade optimality efficiency reasonable 
example computing delta documents critical edit script produced slightly longer optimal 
summary motivated problem computing representing changes hierarchically structured data 
formal definition change detection problem hierarchically structured data uses idea matching minimum cost edit script transforms tree 
split change detection problem subproblems matching minimum conforming edit script problems 
algorithms problems studied algorithms analytically empirically 
application ideas implemented program computing representing changes structured documents 
details implementation including sample run 
working generalizing algorithms detect changes data represented graphs necessarily trees 
investigating matching criteria improve performance algorithms especially non document domains 
plan investigate tradeoff optimality efficiency produce parameterized algorithm parameter specifies desired level optimality 
improving implementation program extending html sgml documents 
plan incorporate diff program web browser users monitor web pages interest track changes time 
acm abiteboul cluet milo 
database interface file updates 
proceedings acm sigmod international conference management data 
chawathe rajaraman widom 
change detection hierarchically structured information 
available anonymous ftp db stanford edu directory pub chawathe 
ghj ghandeharizadeh hull jacobs implementing language specifying active database execution models 
proceedings nineteenth international conference large data bases dublin ireland august 
gm gupta mumick 
maintenance materialized views problems techniques applications 
ieee data engineering bulletin special issue materialized views data warehousing june 
hammer garcia molina widom zhuge 
stanford data warehousing project 
ieee data engineering bulletin special issue materialized views data warehousing june 
howard keller gupta krishnamurthy law tiwari ullman 
versions configurations constraints 
working center integrated facilities engineering stanford university april 
ik kelley 
rdb vms developing data warehouse 
qed publishing group boston massachussetts 
kif kifer 
comprehensive interface diff emacs 
available anonymous ftp ftp cs sunysb edu 
lgm garcia molina 
efficient algorithms compare snapshots 
manuscript available anonymous ftp db stanford edu pub 
mye myers :10.1.1.4.6927
nd difference algorithm variations 
algorithmica 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proceedings eleventh international conference data engineering pages taipei taiwan march 
sz shasha zhang 
fast algorithms unit cost editing distance trees 
journal algorithms 
wc widom ceri 
active database systems triggers rules advanced database processing 
morgan kaufmann san francisco california 
zhuge garcia molina hammer widom 
view maintenance warehousing environment 
proceedings acm sigmod international conference management data pages san jose california may 
zha zhang 
personal communication may 
zs zhang shasha 
simple fast algorithms editing distance trees related problems 
siam journal computing 
