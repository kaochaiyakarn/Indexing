ims int 
mathematica symposium southampton uk computational mechanics pub 
genetic system programming breeding evolving artificial flowers mathematica jacob jacob informatik uni erlangen de chair programming languages department computer science university erlangen erlangen germany parallel rewrite systems form systems modeling visualizing growth processes artificial plants 
package implementing context sensitive systems takes full advantage expression manipulation graphics capabilities 
furthermore demonstrated evolutionary algorithms inferring systems encoding structures characteristic properties 
describe mathematica genetic programming system system encoding expressions explain generate modify breed systems simulated evolution techniques 
modeling growth processes systems rewriting proved useful technique defining complex objects successively replacing parts simple initial objects set rewrite rules productions 
scope article focus special type character rewrite systems commonly termed systems lindenmayer systems theoretical biology describing simulating natural growth processes 
letters word replaced parallel simultaneously 
feature systems especially suitable describing fractal structures cell divisions multicellular organisms stages plants demonstrate sequel 
systems means deterministic context simplest type systems 
formally system defined triple dieses wurde mit framemaker 
ims int 
mathematica symposium southampton uk computational mechanics pub 
alphabet referred axiom element set finite words alphabet structure preserving mapping defined set productions rewrite rules shows simple example system describing growth sequences leaves artificial flower animation sequence depicted fig 

dol system encodes macros generating graphical representations leaves 
non italic terms pd represent commands move forward backward ori example parametrized system modelling stages artificial structure adapted ff 
sprout sprout developing leaves flower sprout stalk pd leaf pu pu sprout pd leaf pd pu sprout stalk bloom sprout sprout sprout stalk elongation stalk stalk changing leaf sizes leaf leaf leaf leaf leaf leaf leaf leaf growing bloom bloom bloom bloom bloom pd pu sprout stalk leaf leaf bloom ims int 
mathematica symposium southampton uk computational mechanics pub 
visualizing growth stages artificial plant modelled lsystem fig 
numbers brackets mark number production iterations starting axiom ims int 
mathematica symposium southampton uk computational mechanics pub 
drawing tool known turtle dimensional space rotate yaw pitch translating dimensional string object ling plant 
genetic system programming genetic programming gp introduced method automatically develop populations computer programs simulated evolution 
considering systems rulebased development programs easy define program evolution 
program encoded symbolic expression interpreted assigned fitness value dependent optimization task solved 
basis fitnesses individual programs struggle survival fittest chance members generation 
order introduce variations program encoding structures genetic operators mutation crossover gleaned natures mutating recombining operators cell genomes applied 
evolution process develops new populations programs generation generation interplay modifying operators selection hopefully lead ing better programs 
encoding systems order expression evolution systems proper encoding scheme defined done general case il systems referring number context symbols 
context sensitive rewriting letter depends left right neighbors fixed integers 
systems denoted systems resemble context sensitive chomsky grammars system rewriting parallel nature symbol rewritten derivation step especially important overlap context strings 
system representations package part 
il system rule form denoting left context predecessor right context successor respectively 
symbols separate context predecessor strings 
rule represented expression form lrule left pred right succ 
accordingly system axiom rule set encoded expression form lsystem axiom lrule mathematica pattern notation 
ims int 
mathematica symposium southampton uk computational mechanics pub 
stochastic generation system codings normally evolution loop starts population randomly generated individual genomes encodings systems case 
templates serve high level building blocks expression generation routines fig 

expression constructed start pattern tem axiom recursively inserting matching expressions expression pool pattern blanks replaced proper expressions 
course take care construction loop eventually ends 
pattern notation representation expression templates serving building blocks generate system encodings templates fig 
basically describe dol system fig 

additional seq pattern lrule expression en ables generation system create variations inserting new command sequences 
accordingly system description enhanced new rules lsystem axiom axiom sprout lrule left pred sprout right succ seq seq seq stalk stack pd leaf seq seq seq stalk bloom lrule left pred sprout right succ sprout 
lrule left pred bloom right succ bloom lrule lrule left pred right succ pred sprout succ seq stack seq sprout stalk leaf bloom yl yr pu pd rl rr seq seq sprout stalk leaf bloom yl yr pu pd rl rr leaf bloom ims int 
mathematica symposium southampton uk computational mechanics pub 
lrule pattern 
sequence expressions constructed alternative templates seq 
expressions matching pattern expressions selected probabilities proportional weights see bracketed numbers right expressions fig 

variations system expressions small collection operators generating variations expressions fig 
mutation replaces randomly selected subexpression expression head generated expression pool 
crossover recombination operator expressions 
subexpressions head selected expressions interchanged 
deletion erases expression arguments possible restrictions number arguments selected expression 
permutation interchanges sequence expression 
operators defined general expressions especially tailored system encodings 
subexpressions chosen operator specific selection schemes pattern matching mechanisms 
possible restrict recombinations succ term subexpressions permute lrule expressions changing ordering rules 
problem specificity taken account 
examples expression variations genetic operators lsystem axiom seq rr 
lsystem axiom seq stack 
rl 
mutation lsystem axiom seq stack 
rl 
lsystem axiom seq stack 
rl 
permutation ims int 
mathematica symposium southampton uk computational mechanics pub 
breeding artificial flowers generation snapshots evolution system encoded plants ingredients described able demonstrate structures specific characteristics developed help system evolution 
suppose want breed flowers spread far direction carry possible 
criteria incorporated fitness evaluation function arrive gen gen ims int 
mathematica symposium southampton uk computational mechanics pub 
comparing best individuals generations gen gen evolution sequence depicted fig 
fig 

initially small individuals widespread plants evolve carrying bunches leaves 
due huge amount system memory required generating graphics currently restricted small populations generations 
currently implementing package distributed evaluation mathematica kernels able tackle advanced breeding problems 
mathematica especially useful evolutionary algorithm applications described capabilities easy expression manipulation important defining genetic operators system interpretations comfortable flexible way 
mathematica graphics animation tools enjoyed playing evolu tion gained insight fascinating area system design 

jacob genetic system programming parallel problem solving nature ppsn iii lecture notes computer science springer berlin 

jacob modeling growth systems mathematica appear mathematica education telos springer 

koza genetic programming mit press 

koza genetic programming ii mit press 

lindenmayer mathematical models cellular interaction development parts ii journal theoretical biology 

prusinkiewicz lindenmayer algorithmic beauty plants springer new york 
