aaaaa lambda calculus henk barendregt erik barendsen revised edition october contents conversion power lambda reduction type assignment extensions reduction systems bibliography chapter history leibniz ideal 
create universal language possible problems stated 
find decision method solve problems stated universal language 
restricts oneself mathematical problems point leibniz ideal ful lled form set theory formulated language rst order predicate logic 
situation frege russell zermelo 
point leibniz ideal important philosophical question 
solve problems formulated universal language 
clear prove 
question known entscheidungsproblem 
entscheidungsproblem solved negative independently church alan turing 
order needed formalisation intuitive notion decidable equivalent computable 
church turing di erent ways introducing models computation 
church invented formal system called lambda calculus de ned notion computable function system 
turing invented class machines called turing machines de ned notion computable function machines 
turing proved models equally strong sense de ne class computable functions see turing 
concept turing machine day von neumann computers 
conceptually turing machines random access registers 
imperative programming languages fortran pascal etcetera assembler languages way turing machine instructed sequence statements 
functional programming languages miranda ml etcetera lambda calculus 
early somewhat hybrid example language lisp 
reduction machines speci cally designed execution functional languages 
lambda calculus reduction functional programming functional program consists expression representing algorithm input 
expression subject rewrite rules 
reduction consists replacing part expression rewrite rules 
schematic notation provided rules 
process reduction repeated resulting expression parts rewritten 
called normal form expression consists output functional program 
example example reduction rules consist tables addition multiplication numerals 
symbolic computations done reduction 
example rst sort append dog rabbit sort mouse cat 
rst sort append dog rabbit cat mouse rst sort dog rabbit cat mouse rst cat dog mouse rabbit cat necessary rewrite rules append sort programmed easily lines 
functions append rewrite rules called combinators 
reduction systems usually satisfy church rosser property states normal form obtained independent order evaluation subterms 
rst example may reduced follows 
evaluating expressions time application abstraction rst basic operation calculus application 
expression 
fa denotes data considered algorithm applied data considered input 
viewed ways process computation fa output process 
rst view captured notion conversion better reduction second notion models semantics 
theory type free allowed consider expressions ff applied 
useful simulate recursion 
basic operation abstraction 
expression containing depending denotes function 

application abstraction intuitive formula 
denotes function 
applied argument giving 
general 
equation preferably written denotes substitution remarkable essential axiom calculus resulting theory involved 
free bound variables abstraction said bind free variable say yx bound free variable 
substitution performed free occurrences yx yn calculus similar variable binding 
dx variable bound free 
sense substitute substitution sense dx 
reasons hygiene assumed bound variables occur certain expression di erent free ones 
ful lled renaming bound variables 
expressions act way fact denote intended algorithm 
expressions di er names bound variables identi ed 
lambda calculus functions arguments functions arguments obtained iteration application 
idea due sch called currying curry introduced independently 
intuitively depends arguments de ne fx equation shows convenient association left iterated application fm 
denotes 

equation fxy dually iterated abstraction uses association right 
denotes 

de ned xy xy xy arguments 


times 
equation convenient vector notation generally chapter conversion chapter calculus introduced formally 

definition 
set terms notation built nite set variables fv application function abstraction 
mn xm bn form variable variable term variable term term variable term 
example 
terms 

convention 
denote arbitrary variables denote arbitrary terms 
outermost parentheses written 
ii denotes term obtained renaming bound variables 

xy xy xx yy xx xx xy iii abbreviations fm 


lambda calculus 


terms example may written follows 
yx yx yx xy yx zw note yx yx 

definition 
set free variables notation fv de ned inductively follows 
fv fxg fv mn fv fv fv fv fxg variable bound free 
note variable bound occurs scope 
ii closed term combinator fv 
set closed terms denoted 
iii result substituting free occurences notation de ned follows 

example 
consider term xy xyz bound variables free variable 
term xy closed 

variable convention 
occur certain mathematical context de nition proof terms bound variables chosen di erent free variables 
note fourth clause de nition iii needed say provided fv 
variable convention case 
introduce calculus formal theory 
conversion 
definition 
principal axiom scheme calculus 
ii logical axioms rules 
equality compatibility rules mz zm zm iii provable calculus write consequence compatibility rules replace sub terms equal terms term context 


example yy xx yy xx 

identi ed terms di er names bound variables 
alternative add calculus axiom scheme provided occur 
prefer version theory identi cations syntactic level 
identi cations done mind 
implementations calculus machine deal called conversion 
way doing provided name free notation de bruijn see barendregt appendix 
lemma 



proof 
axiom induction result follows 
lambda calculus 
example standard combinators 
de ne combinators xy xy xyz xz yz lemma equations 
im kmn mn ml nl solve simple equations 

example 
gx xxx exists gx xx 
take xxx done 
recursive equations require special technique 
result provides way represent recursion calculus 

fixedpoint theorem 
fx 
means fx 
ii xed point combinator xx xx yf yf proof 
de ne xx ww ww xx ww fx ii proof 

example 
gx 
gx gx gx gx note take ys 
ii gx gg take gx gg 
solve 
conversion lambda calculus de ne numerals represent numeric functions 

definition 
de ned inductively follows 
ii church numerals de ned fx 
proposition rosser 
de ne xp xyz yz exp xy yx cm 
ii cm 
iii exp cm rosser started counting 
proof need 

lemma 

ii 
proof 
induction lhs rhs 
assume correct induction hypothesis ih 
ih ii induction 
lhs rhs 
ii correct ih lambda calculus proof proposition 
exercise 
ii exercise 
lemma 
iii lemma ii exp cm cm mx fv 
mx exercises 
rewrite ocial syntax xy zw yz ii rewrite simpli ed syntax vv 
prove substitution lemma 
fv 

prove exercise ii show 
prove proposition ii 

xyz yz 
simplify nd simple term 
simplify terms 
xyz aa pq ii yz zy xxx xxx iii 

show ki ii 
write closed term nm conversion ii construct term yz 
find closed terms fx xi ii fxy 

find closed terms fx term called eater denoted ii fx xf iii fk 

show take look exercises 


incompatible notation extended axiom proves equation terms case says inconsistent 
prove true false true false 
ii show 
iii find term fk 
iv show 
write grammar bn form generates terms exactly way written convention 
chapter power lambda seen function plus times exponentiation represented calculus church numerals 
show computable recursive functions represented calculus 
order rst di erent system numerals 
truth values conditional represented calculus 

definition 
true false 
ii considered boolean term true false represented bpq 
definition pairing 
write zmn true false serve ordered pair 
pairing construction alternative representation natural numbers due barendregt 

definition 
numeral de ned inductively follows 
pn false lambda calculus 
lemma successor predecessor test zero 
exist combinators zero pn pn zerop true false proof 
take false false zero true 
definition lambda de nability 
numeric function map case called ary 
ii numeric ary function called de nable combinator 
pn holds said de ned 
definition 
initial functions numeric functions de ned numeric relation 
usual denotes number holds number unde ned 

definition 
class numeric functions 
closed composition de ned 
ii closed primitive recursion de ned power lambda iii closed de ned 
definition 
class recursive functions smallest class numeric functions contains initial functions closed composition primitive recursion 
inductively de ned class 
proof recursive functions de nable fact corresponding induction argument 
result originally due kleene 

lemma 
initial functions de nable 
proof 
take de ning terms 
false see lemma 
lemma 
de nable functions closed composition 
proof 
de ned hm respectively 
de ned 
hm primitive recursion rst consider example 
addition function speci ed follows 
add add add add intuitive way compute add 
test 
give output compute add give successor output 
want term add add xy zero add equation solved combinator take add axy zero general case treated follows 
lambda calculus 
lemma 
de nable functions closed primitive recursion 
proof 
de ned de ned respectively 
want term fx zero say 
sucient nd fx fixedpoint theorem done 

lemma 
de nable functions closed 
proof 
de ned de ned fixedpoint theorem term xy zero xy xy xy say 
set xp 
de nes fp nq hp nqp gp nqp hp nqp gp nqp hp nqp 

theorem 
recursive functions de nable 
proof 
lemmas 
converse holds 
numeric functions recursive de nable 
partial functions notion de nability exists 
partial numeric function partial recursive de nable 
power lambda 
theorem 
respect church numerals recursive functions de ned 
proof 
de ne xyz xyz xyz pq py kz zero false true terms represent successor predecessor test zero 
recursive functions de ned 
alternative proof uses translators numerals 
proposition 
exist terms tc proof 
construct xs zero 
corollary second proof theorem 
recursive function arity say 
represent respect numerals 
de ne xy tx ty represents respect church numerals 
representation pairs lambda calculus solve multiple equations 

multiple fixedpoint theorem 
terms 
nd 


observe ordinary fixedpoint theorem 
proof 
treat case 
want term 
lambda calculus trick construct simultaneously pair 
ordinary fixedpoint theorem nd de ne 
result follows 
generalized arbitrary 
example 
exist hy kx hx xx xx replace equations xy hy kx xx xx apply multiple fixedpoint theorem hy kx xx xx 
exercises 
find term mult pn 
mq ii find term fac pn 
simple ackermann function de ned follows 
find term de nes 

terms cons head tail de ned cons xy head xk tail xk find terms nil null null nil true null cons xy false give representation lists terms nd term de nes append append lists lists lists 

construct terms mn mn mn 
verify see rst proof theorem de nes predecessor function respect church numerals 
chapter reduction certain asymmetry basic scheme 
statement interpreted result computing vice versa 
computational aspect expressed writing 
reads reduces 
apart conceptual aspect reduction useful analysis convertibility 
church rosser theorem says terms convertible term reduce 
cases terms proved showing reduce common term 

definition 
binary relation called compatible operations zm zn mz nz ii congruence relation compatible equivalence relation 
iii reduction relation compatible re exive transitive relation 

definition 
binary relations 
de ned inductively follows 


zm zn mz nz 
ii 







lambda calculus iii 



relations pronounced follows 

reduces reduces nin step convertible de nition compatible 
reduction relation congruence relation 

example 
de ne xx 
ii ki 
intuitively connected arrows disregarding directions 
picture looks follows 

example 
ki ii 
demonstrated reductions 
ki ii 
proposition 
proof 
easy induction 

definition 
redex term form case contractum 
ii term normal form nf redex subexpression 
iii term normal form nf reduction 
example 
xx nf nf term yy 
immediate property nf 

lemma 
nf 

proof 
true 
replaced result follows transitivity 

church rosser theorem 




diagram 

proof postponed 

corollary 


intuitive proof fact proceeds tiling procedure arrow path showing apply church rosser property repeatedly order nd common reduct 
example looks follows 


precise 
lambda calculus proof 
induction generation case 

take case 
ih common reduct take case 
ih ih cr 


corollary 
nf 

ii term nf 
proof 
suppose nf 
corollary 

lemma 

ii suppose nf 
corollary 

lemma 

consequences 
calculus consistent true false 
true false proposition impossible corollary true false distinct nf 
syntactic consistency proof 
ii nf 

nf 
reduces nf 
iii order nd nf term exists various subexpressions may reduced di erent orders 
corollary ii nf unique 
proof church rosser theorem occupies 
idea proof follows 
order prove theorem sucient show strip lemma 

order prove lemma step reduction resulting changing redex contractum reduction bookkeeping happens reduction 
reducing residuals term 
order necessary bookkeeping extended set reduction introduced 
underlining serves tracing 

definition underlining 
set terms de ned inductively follows 
mn ii underlined reduction relations 
step 
de ned starting contraction rules extended order compatible relation respect abstraction 

transitive re exive closure 
iii jm obtained leaving 
ii 

definition 
map de ned inductively follows 
mn words contracts redexes underlined inside outside 
notation 
jm denoted 
lemma 
lambda calculus proof 
suppose obtained contracting redex obtained contracting corresponding redex general statement follows transitivity 

lemma 

ii 
proof 
induction structure substitution lemma see exercise case condition lemma may assumed hold convention free variables 
ii induction generation 


lemma 

proof 
induction structure 
strip lemma 


proof 
result contracting redex occurrence obtained replacing reduction jm lemmas erect diagram 


proves strip lemma 

proof church rosser theorem 


cr property follows strip lemma simple diagram chase 




definition 
reduction graph notation directed multigraph vertices fn 
ng directed lambda calculus 
example 
ix simply drawn happen term nf time nite reduction path 
xx xx 

ki ki 
ki 
called strategy necessary order nd normal form 
state theorem proof see barendregt theorem 

normalization theorem 
normal form iterated contraction leftmost redex leads normal form 
words leftmost reduction strategy normalizing fact nd normal form term prove certain term normal form 

example 
nite leftmost reduction path viz 

normal form 
functional language pure lisp uses eager applicative evaluation strategy expression form fa evaluated reduced normal form rst calling calculus strategy normalizing shown reduction paths ki 
variant lambda calculus called calculus eager evaluation strategy normalizing 
calculus terms throwing away reduction ki 
exist 
ordinary calculus referred calculus see barendregt chapter 
remember combinator yf yf yf 
yf yf 
yf order solve reduction reduction equations turing combinator di erent reduction behaviour 

definition 
turing combinator de ned setting xy aa 
proposition 

proof 


example 
gx 
xg 
gx 
xg 
xg 
gx xg gx xg multiple fixedpoint theorem reducing variant 

theorem 
terms 
nd 




proof 
equational multiple fixedpoint theorem 
exercises 
show nf 


construct terms respectively follows 
lambda calculus 
show mn axz 
show contains subgraphs dimensional cube 
visser show redex follows 
ii show hint 
consider relative positions redexes 
ohm examine equal xy 
ii lli xy yy 
iii xy 
klop extend calculus constants 
reduction rules extended include mm 
show resulting system church rosser 
hint 
de ne terms cx 
cx 
cd 

extended reduction system common reduct 

show term axz normal form 

show www xy xxx 
ii show 

draw equal www xy 
ii xx 
iii xxx 
iv 
xx xx 
vi ii iii 

length term number symbols times cm 
write term length cm normal form light year 
hint 
proposition ii 
speed light cm chapter type assignment lambda calculus treated far usually referred type free theory 
expression considered function may applied expression considered argument 
example identity function may applied argument give result particular may applied 
typed versions lambda calculus 
introduced essentially curry called combinatory logic variant lambda calculus church 
types usually objects syntactic nature may assigned lambda terms 
term type assigned say type denotation example typed systems identity may get type means argument type value ix type general type functions analogy perfect type assigned term may compared dimension physical entity 
dimensions prevent wrong operations adding volt amp ere 
similar way types assigned lambda terms provide partial speci cation algorithms represented useful showing partial correctness 
types may improve eciency compilation terms representing functional algorithms 
example known looking types subexpression term representing program purely arithmetical fast evaluation possible 
expression executed alu machine slower way symbolic expressions evaluated general 
original papers curry church introducing typed versions lambda calculus give rise di erent families systems 
typed lambda calculi la curry terms type free theory 
term set possible types 
set may empty singleton consist possibly nitely elements 
systems la church terms annotated versions type free terms 
term equivalence relation unique type usually derivable way term annotated 
curry church approaches typed lambda calculus correspond lambda calculus paradigms programming 
rst program may written typing 
compiler check type assigned program 
case program correct 
known example language ml see milner 
style typing called implicit typing paradigm programming called explicit typing corresponds church version typed lambda calculi 
program written type 
languages type checking usually easier types constructed 
examples languages algol pascal authors designate curry systems lambda calculi type assignment church systems systems typed lambda calculus 
paradigms versions typed lambda calculus 
important systems especially la church case terms type possess normal form 
unsolvability halting problem implies computable functions represented typed term see barendregt theorem 
bad sounds order nd computable functions represented stand head 
example second order typed lambda calculus partial recursive functions represented happen total provably mathematical analysis second order arithmetic 
considering terms types programs speci cations possibility 
type viewed proposition term proof proposition 
called propositions types interpretation independently due de bruijn howard papers conceived 
hints direction curry feys 
systems proof checking interpretation propositions types proofs terms 
see de bruijn survey called automath proof checking system 
normalization terms corresponds formulas types interpretation normalisation proofs sense prawitz 
normal proofs give useful proof theoretic information see schwichtenberg 
section typed lambda calculus introduced style curry 
information see barendregt 
system curry originally implicit typing paradigm introduced curry theory combinators 
curry feys curry 
theory modi ed natural way lambda calculus assigning elements set types type free lambda terms 
reason calculi la curry called systems type assignment type assigned term writes subscript denote particular system 
usually set assumptions needed derive type assignment writes pronounce yields 
particular curry type assignment system depends parameters set rules type assignment 
example type assignment introduce system curry 

definition 
set types notation type inductively de ned follows 
write type 
set type variables 
convenient allow type constants basic types nat bool 
collection 
function space types 
de nitions convenient syntax form type variables 
notation 

stands 

association right 
ii denote arbitrary type variables 

definition 
statement form statement pronounced 
type predicate term subject statement 
ii basis set statements distinct term variables subjects 

definition 
type derivations system 
built assumptions inference rules 
mn 
definition 
statement derivable basis notation 
wish stress typing system derivation non cancelled assumptions 
ii shorthand 
lambda calculus 
example 
fx fx shown derivation 
fx fx fx fx fx indices bookkeeping devices indicate application rule particular assumption cancelled 
ii demonstrated follows 
xy iii similarly show iv example non empty basis statement iy properties 
properties type assignment 
valid 
rst analyses basis necessary order derive type assignment 

definition 
fx basis 
write dom fx 
considered partial function 
ii set variables 
fx 
iii substitution denoted 

basis lemma 
basis 
basis ii fv dom 
iii fv 
proof 
induction derivation 
proofs occur frequently spell simple situation order shorter 
type assignment case 
element 
case 
follows directly ih 
case 
follows directly variable convention may assumed bound variable occur dom 
basis extends ih 
ii induction derivation 
treat case follows directly fv fv ih dom dom 
iii induction derivation 
treat case follows directly ih fv fv follows fv fv fv 
second property analyses terms certain form get typed 
useful things show certain terms types 

generation lemma 
ii mn iii 
proof 
induction structure derivations 

proposition typability subterms 
subterm moral type subterm type 
proof 
induction generation 
substitution lemma 
ii suppose 
proof 
induction derivation 
ii induction derivation showing result states set having certain type 
closed reduction 

subject reduction theorem 
suppose 
lambda calculus proof 
induction generation 
generation lemma substitution lemma 
treat prime case 
follows generation lemma generation lemma substitution lemma terms having type closed expansion 
example ki xx see exercise 
stronger failure subject expansion observed van bakel 

observation 

proof 
take xy sk exercise 
typable terms normal form 
fact called strong normalization property holds typable term reductions starting nite 
decidability type assignment system type assignment questions may asked 
note fx 

taken 
typical questions 
exist 
exist 
type assignment problems called type checking typability inhabitation respectively denoted 
type checking typability decidable 
shown result independently due curry hindley milner 

theorem 
decidable term typable 
ii term typable principal type scheme type possible type substitution instance 
computable 
corollary 
type checking 
decidable 
proof 
order check suces verify typable instance principal type example principal type scheme 
polymorphism note 
polymorphic lambda calculus quanti cation internalized stating resulting system polymorphic second order lambda calculus due girard reynolds 

definition 
set types notation type speci ed syntax 
definition 
rules type assignment plus rule type variable may occur free assumption premiss depends 

example 

ii de ne nat 
church numerals fx nat 
due girard 

theorem 
subject reduction property holds 
ii strongly normalizing 
typability decidable see wells 
lambda calculus exercises 
give derivation sk ii give derivation ki iii show sk 
iv find common reduct sk ki 
general type term 

show xx ki xx type 

find general types exist terms 
xy 
ii sii 
iii xy yx 

find terms hold 

ii 

find types terms exercises 
chapter extensions chapter seen computable functions expressed lambda calculus 
reasons eciency reliability convenience language extended 
set terms extended constants 
constants selected represent primitive data numbers operations addition 
new reduction rules called rules introduced express operational semantics operations 
constants operations implemented lambda calculus worthwhile primitive symbols 
reason implementation lambda calculus addition church numerals runs ecient usual implementation hardware addition binary represented numbers 
having numerals addition primitives creates possibility interprete eciently 
allow constants terms 
set constants 

definition 
set lambda terms constants notation de ned inductively follows 
mn de nition syntax follows 

definition reduction 
set closed normal forms 
usually take externally de ned function 
order represent called rule may added calculus 
done follows 
special constant selected name say 
contraction rules added calculus 
lambda calculus note function contraction rule fact rule schema 
resulting extension calculus called 
corresponding notion step reduction denoted 
reduction absolute notion depends choice 
theorem 
function closed normal forms 
resulting notion reduction 
satis es church rosser property 
proof 
follows theorem barendregt 
notion normal form generalises normal form 
concept leftmost reduction 
leftmost reduction notation 

theorem 

nf 
proof 
analogous proof theorem normal forms 

example 
rst versions rule church 
set closed normal forms cmn true cmn false possible set rules booleans 

example 
constants selected true false ite 
rules introduced 
true false false true true true true true false false false true false false false false ite true true xy ite false false xy 
follows ite true 
ite false 
extensions introduce rules operations set integers 
example 
constant selected name 
express follows constant chosen 
constants selected plus minus times divide equal error introduce rules schemes 
plus nm minus nm times nm divide nm divide error equal nn true equal nm false may add rules plus error error similar rules introduced set reals 
set rules concerned characters 

example 
linearly ordered alphabet 
symbol choose constant choose constants formulate rules 
true precedes ordering false 
true false 
possible represent multiple valued functions putting rule provided course resulting calculus satisfy church rosser theorem deal non deterministic computations 
pursue possibility 
extend type assignment system 
deal constants adding typing axioms form lambda calculus system integers result 
basic type constants intended interpretation booleans respectively adds typing axioms 
true false error plus minus times divide equal 
example 
xy times plus xy shown derivation 
times times plus plus plus xy times plus xy times plus xy xy times plus xy strong normalization property plain 
implies recursive functions de nable system 
holds calculus integers 
system type assignment computable functions representable typed term 
system assigns types non normalizing terms introducing primitive combinator having type 

definition 
calculus extension calculus constant reduction rule ii type assignment terms de ned adding axioms resulting system denoted 
presence terms normal form 
proof state 

theorem 
calculus satis es church rosser property 
ii term calculus normal form leftmost reduction 
iii subject reduction property holds 
extensions 
theorem 
computable functions represented calculus term typable 
proof 
construction uses primitive numerals take plus minus zero equal proof theorem imitated combinator types functions de ned natural 
add system single axiom 
exercises 
kn de ned kn 
show kn recursive functions represented terms calculus 

write term system example fn 

write term system example 
true precedes lexicographical ordering 
false 

give suitable typing axioms 
constants example 
chapter reduction systems chapter consider alternative models computation rewriting 
objects models terms built constants arity variables application 

definition 
set constants 
set terms notation de ned follows 
arity 
recursive programming schemes simplest reduction systems recursive programming schemes rps 
general form rps language terms 
reduction relation de ned follows 

arity 
di erent constants 
free variables 
may arbitrary 
example system rps 
calculus powerful implement rps 
nd terms speci ed reduction behaviour 
lambda calculus 
theorem 
rps represented calculus 
example see terms cxy 
dxy 
cx dxy proof 
reducing variant multiple fixedpoint theorem 
proof mention 

theorem 
rps satis es church rosser theorem 
term rewrite systems general rps called term rewrite systems trs pattern matching function de nitions 
typical example example 

di erence rps trs arguments rewrite rule may structure 
constant trs contraction rule rewrite rule starts constant called constructor constants called functions 
trs satisfy church rosser property 
consider system reduces said rules overlap 
rule overlaps reduces 
see klop survey trs 
combinatory logic cl reduction system related calculus 
terms cl consist applications constants variables arity restrictions 
contraction rules ix kxy xz yz note ki nf 
kii sii sii normal form 
cl represented trs considering ary constructors function ap arity follows 
ap ap ap ap ap ap ap ap ap reduction systems cl term sii sii translated ap 
ap ap 
normalization theorem extend trs 
consider trs version cl rules true true true true false false false expression general normalized contracting leftmost redex 
fact evaluated parallel 
consider terms ap true ap true system called non sequential combinatory reduction systems general trs combinatory reduction systems crs introduced klop 
trs arbitrary variable binding operations 
fact crs trs rps exercises 
toyama 
see trs called strongly normalizing sn term nite reduction path 
trs version cl sn cl obvious reduction rules de ne trs 
lambda calculus show sn union 
bibliography abramsky gabbay maibaum eds 

handbook logic computer science vol 
ii oxford university press 
van bakel 

complete restrictions intersection type discipline theoretical computer science pp 

barendregt 

global representation recursive functions lambda calculus theoretical computer science pp 

barendregt 

lambda calculus syntax semantics studies logic second revised edition north holland amsterdam 
barendregt 

functional programming lambda calculus van leeuwen ed handbook theoretical computer science vol 
ii elsevier mit press 
barendregt 

lambda calculi types abramsky 
pp 

de bruijn 

mathematical language automath usage extensions eds symposium automatic demonstration inria versailles lecture notes computer science springer verlag berlin pp 

nederpelt 

de bruijn 

survey automath project hindley seldin pp 

church 

unsolvable problem elementary number theory american journal mathematics pp 

church 

formulation simple theory types journal symbolic logic pp 

church 

theory lambda conversion princeton university press 
curry 

functionality combinatory logic proceedings national academy science usa pp 

curry 

modi ed basic functionality combinatory logic dialectica pp 

bibliography curry feys 
combinatory logic vol 
north holland amsterdam 
curry hindley seldin 
combinatory logic vol 
ii north holland amsterdam 
girard 

interpr etation fonctionelle elimination des coupures dans arithm etique ordre sup erieur dissertation universit paris vii 
hindley 

principal object combinatory logic transactions american mathematical society pp 

hindley seldin eds 

curry essays combinatory logic lambda calculus formalism academic press new york 
howard 

formulae types notion construction hindley seldin pp 

kleene 

de nability recursiveness duke mathematical journal pp 

klop 

combinatory reduction systems dissertation utrecht university 
cwi tract amsterdam 
klop 

term rewrite systems abramsky 



notion realizability intuitionistic predicate logic complete myhill eds intuitionism proof theory proceedings summer school conference bu alo new york north holland amsterdam pp 

milner 

theory type polymorphism programming journal computer systems analysis pp 

milner 

proposal standard ml proceedings acm symposium lisp functional programming austin pp 

nederpelt geuvers de eds 

selected papers automath studies logic north holland amsterdam 
prawitz 

natural deduction proof theoretical study almqvist wiksell stockholm 
reynolds 

theory type structure colloque sur la paris lecture notes computer science springerverlag berlin pp 

sch 

uber die der mathematische logik mathematische annalen pp 

bibliography schwichtenberg 

proof theory applications cut elimination barwise ed handbook mathematical logic north holland amsterdam pp 

toyama klop barendregt 
termination direct sum left linear term rewriting systems proceedings rd international conference rewriting techniques applications chapel hill lecture notes computer science springer verlag berlin pp 

toyama klop barendregt 
termination direct sum left linear term rewriting systems technical report cs centre mathematics computer science cwi amsterdam 
turing 

computable numbers application entscheidungsproblem proceedings london mathematical society pp 

turing 

computability de nability journal symbolic logic pp 

wells 

typability type checking second order calculus equivalent undecidable proceedings th annual symposium logic computer science paris france ieee computer society press pp 

