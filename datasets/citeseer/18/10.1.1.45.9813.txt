parallel trees ibrahim kamel christos faloutsos department cs university maryland college park md consider problem exploiting parallelism accelerate performance spatial access methods specifically trees 
goal design server spatial data maximize throughput range queries 
achieved maximizing parallelism large range queries engaging disks possible point queries 
propose simple hardware architecture consisting processor disks attached 
architecture propose distribute nodes traditional tree cross disk pointers multiplexed tree 
tree code identical single disk tree addition decide disk newly created tree node stored 
propose examine criteria choose disk new node 
successful termed proximity index pi estimates similarity new node tree nodes disk chooses disk lowest similarity 
experimental results show scheme consistently outperforms heuristics node disk assignments achieving gains round robin 
experiments indicate multiplexed tree pi heuristic gives better response time disk stripping super node approach imposes lighter load sub system 
speed method close linear speed increasing size queries 
member umiacs 
research sponsored partially national science foundation iri iri department commerce joint statistical agreement jsa donation software donation thinking machines 
requirements database management systems dbmss ability handle spatial data 
spatial data arise applications including cartography computer aided design cad computer vision robotics traditional databases record attributes corresponds point space rule indexing expert database systems temporal databases time considered dimension scientific databases spatial temporal data applications typical queries range query rectangle retrieve elements intersect 
special case range query point query stabbing query query rectangle degenerates point 
study problem improving search performance parallelism specifically multiple disk units 
main reasons multiple disks opposed single disk applications bound 
measurements decstation showed cpu time process tree page brought core msec 
times smaller average disk access time msec 
important parallelize operation 
second reason multiple disk units applications involve huge amounts data fit disk 
example nasa expects terabyte data day corresponds bytes year satellite data 
geographic databases large example tiger database mentioned gigabytes 
historic temporal databases tend archive changes grow quickly size 
target system intended operate server responding range queries concurrent users 
goal maximize throughput translates requirements queries touch nodes possible imposing light load sub system 
corollary queries small search regions activate disks possible 
nodes qualify query distributed disks uniformly possible 
corollary queries retrieve lot data activate disks possible 
proposed hardware architecture consists processor disks attached 
consider multi processor architectures multiple cpus probably kill increasing dollar cost complexity system relieving bottleneck 
multi processor loosely coupled architecture gamma communication costs non existing proposed single processor architecture 
addition architecture simple requires widely available shelf components need synchronized disks multiple cpu specialized operating system 
architecture distribute nodes traditional tree 
propose study heuristics choose disk place newly created tree node 
successful heuristic proximity index estimates similarity new node tree nodes disk chooses disk similar contents 
experimental results showed scheme consistently outperforms heuristics 
organized follows 
section briefly describes tree variants 
surveys previous efforts parallelize file structures 
section proposes multiplexed tree way store tree multiple disks 
section examines alternative criteria choose disk newly create tree node 
introduces proximity measure derives formulas 
section presents experimental results observations 
section gives directions research 
survey spatial access methods proposed 
survey 
classification includes methods transform rectangles points higher dimensionality space methods linear quadtrees equivalently ordering space filling curves methods trees trees kd trees hb trees cell trees characteristic approaches class tree 
due space limitations data dark rectangles organized tree 
fanout dotted rectangles indicate queries omit detailed description method 
illustrates data rectangles black organized rtree fanout 
shows file structure tree nodes correspond disk pages 
root file structure tree previous fanout rest term node term page interchangeably discussing super nodes method subsection 
extensions variations improvements original tree structure include packed trees tree tree 
organize traditional file structures multi disk multi processor machines 
tree kim proposed pnb tree uses super node super page scheme synchronized disks 
seeger larson proposed algorithm distribute nodes tree different disks 
algorithm takes account response time individual query throughput system 
parallelization trees unexplored topic best authors knowledge 
software designs achieve efficient parallelization 
alternative designs underlying file structure tree 
goal design server spatial objects parallel architecture achieve high throughput concurrent range queries 
step decide hardware architecture 
reasons mentioned propose single processor multiple disks attached 
step decide distribute tree multiple disks 
major approaches independent trees disk stripping super nodes super pages multiplexed tree mx tree short describe propose 
examine approaches qualitatively independent trees scheme distribute data rectangles disks build separate tree index disk 
mainly works unsynchronized disks 
performance depend distribute rectangles different disks 
major approaches data distribution data rectangles assigned different disks round robin fashion hashing function 
data load number rectangles disk balanced 
approach violates minimum load requirement small queries activate disks 
space partitioning idea divide space partitions assign partition separate disk 
example tree assign nodes disks respectively 
children node follow parent disk 
approach activate disks small queries fail engage disks large queries uniform spread requirement 
super nodes scheme large tree node super node consisting pages th page stored th disk 
retrieve node tree read parallel pages constitute node 
words stripe super node disks page stripping 
identical performance obtained byte level stripping 
scheme synchronized unsynchronized disks 
scheme violates requirement regardless size query disks activated 
multiplexed mx tree scheme single tree node spanning disk page 
nodes distributed disks pointers disks 
example shows possible multiplexed tree corresponding tree 
root node kept main memory nodes distributed disks multiplexed tree root disk disk disk tree stored disks pointer consists disk id addition page id traditional tree 
fanout node affected disk id encoded bytes page id notice proposed method fulfills requirements example see small query activate disk level disk node disk node fulfilling minimum load requirement 
large query activate disks level disks level disks leaf level fulfilling uniform spread requirement 
careful node disk assignment mx tree outperform methods super nodes ones independent trees 
goal find heuristic assign nodes disks 
construction multiplexed tree fulfills minimum load requirement 
meet uniform spread requirement find heuristic assign nodes disks 
order measure quality heuristics shall response time criterion calculate follows 
denote response time query discuss search algorithm works 
range query search algorithm needs queue nodes manipulated follows algorithm range search 
insert root node tree processing queue 

nodes queue ffl pick node processing queue 
ffl process node checking intersections query rectangle 
leaf node print results send list requests disks parallel 
nodes disks retrieve inserted processing queue fifo 
cpu faster disk assume cpu time negligible compared time required disk retrieve page 
measure response time number disk accesses latest disk require 
disk time diagram helps visualize concept better 
presents disk time diagram query 
horizontal axis time divided slots 
duration slot time disk access considered constant 
diagram indicates disk busy page seeking time slot 
response time load retrieved pages total 
example huge query results disk time diagram response time load 
disk disk disk time page access time disk time diagram large query 
examples definition response time definition response time response time query response time latest disk disk time diagram 
disk assignment algorithms problem examine section assign nodes disks multiplexed tree framework 
goal minimize response time satisfy requirement uniform disk activation disk disk disk time page access time disk time diagram huge query 

discussed requirement fulfilled 
node page tree overflows split nodes 
nodes say assigned disk 
carefully select new disk improve search time 
function maps nodes disks reside 
ideally consider nodes level decide store 
require disk accesses 
consider sibling nodes nodes father father accessing father node comes extra cost bring main memory anyway insert notice need access sibling nodes information need extend mbr minimum bounding rectangle disk residence recorded father node 
problem informally abstracted follows problem disk assignment node rectangle set nodes assignment nodes disks function assign disk maximize response time range queries 
criteria considered data balance ideally disks number tree nodes 
disk pages hot spot query processing 
area balance storing points rectangles area pages stored disk factor 
disk covers larger area rest hot spot 
proximity factor affects search time spatial relation nodes stored disk 
nodes intersecting close stored different disks maximize parallelism 
satisfy criteria simultaneously may conflict 
describe heuristics trying satisfy criteria 
section compare heuristics experimentally 
round robin rr 
new page created splitting criterion assigns disk round robin fashion 
deletions scheme achieves perfect data balance 
example rr assign populated disk disk minimum area ma 
heuristic tries balance area disks new node created heuristic assigns disk smallest area covered 
example ma assign disk light gray rectangles disk smallest sum area 
disk disk disk father node assigned disks 
minimum intersection mi 
heuristic tries minimize overlap nodes belong disk 
assigns new node disk new node intersects little possible nodes disk 
ties broken criteria 
proximity index pi 
heuristic proximity measure describe detail subsection 
intuitively measure compares rectangles assesses probability retrieved query 
shall see soon related manhattan city block distance 
rectangles high proximity intersecting close assigned different disks 
proximity index new node disk contains sibling nodes proximity proximal node heuristic assigns node disk lowest proximity index disk similar nodes respect ties resolved number nodes data balance assigned disk fewest nodes 
setting pi assign disk contains remote rectangles 
intuitively disk best choice favorably prepared example indicates pi perform better rest heuristics 
show calculate exactly proximity rectangles 
proximity measure new tree node created placed disk contains nodes rectangles dissimilar possible 
try quantify notion similarity rectangles 
proposed measure trivially generalized hold hyper rectangles dimensionality 
clarity examine dimensional spaces 
intuitively rectangles similar qualify query 
measure similarity rectangles proportion queries retrieve rectangles 
proximity prob query retrieves formally proximity queries retrieving total queries jqj jqj avoid complications infinite numbers assume subsection address space discrete fine granularity case continuous address space limit infinitely fine granularity 
definition derive formulas proximity coordinates rectangles simplify presentation consider dimensional case 
case loss generality normalize coordinates assume data segments lie unit line segment 
consider line segments start start 
represent segment point start segments transformed dimensional points shown 
start start mapping line segments points area dashed lines measure number possible query segments queries size intersect unit segment 
cases consider depending intersect 
loss generality assume starts start start intersect denote intersection ffi length 
query intersects retrieve segments total number jqj possible queries proportional trapezoidal area dashed lines area jqj theta gamma theta 
total number queries jqj retrieve proportional shaded area start start shaded area contains segments intersect simultaneously jqj ffi gamma ffi theta theta ffi intersecting segments proximity jqj jqj theta theta ffi ffi length intersection disjoint delta distance see 
query start start shaded area contains segments intersect cover segment start order retrieve segments 
number queries proportional shaded area area theta gamma delta proximity measure proximity jqj jqj theta gamma delta notice formulas agree just touch case ffi delta proximity 
case previous formulas generalized assuming uniformity independence 
space data rectangles denoting projections query retrieve projection retrieves projection retrieves sizes query rectangles independent fraction queries meet criteria product fractions individual axis proximity measure proximity dimensions proximity proximity theta proximity generalization dimensions straightforward proximity projections th axis proximity function segments eqs 

proximity index measures similarity rectangle set rectangles fr need concept assess similarity new rectangle disk containing rectangles symbols definitions average area data rectangle cover quotient number disks maps nodes disks total number pages touched load number data rectangles size disk page kbytes proximity rectangles side query rectangle response time query relative response time compared pi speed table summary symbols definitions set proximity index proximity similar rectangle formally max dimensionality address space 
experimental results assess merit proximity index heuristic heuristics ran simulation experiments dimensional rectangles 
augmented original tree code routines handle multiple disks choose disk proximity code written ultrix simulation experiments ran decstation 
linear quadratic splitting algorithm guttman 
quadratic algorithm resulted better trees smaller father nodes 
exponential algorithm slow 
stated results trees quadratic split algorithm 
experiments assume ffl disk units identical 
ffl page access time constant 
ffl levels multiplexed tree root children fit main memory 
required space order kb modest requirement personal computers 
ffl cpu time negligible 
discussed cpu orders magnitude faster disk 
number disks examined disks delay caused cpu negligible 
loss generality address space normalized unit square 
factors affect search time 
studied input parameters ranging mentioned number disks total number data rectangles size queries theta ranged point queries page size kb kb 
important factor derived average area data rectangles cover quotient density data rectangles 
sum areas data rectangles unit square equivalently average number rectangles cover randomly selected point 
mathematically theta selected values cover quotient ranges 
data rectangles generated follows centers uniformly distributed unit square sizes uniformly distributed range max max query rectangles squares side centers uniformly distributed unit square 
experiment randomly generated queries asked results averaged 
data query rectangles completely inside unit square clipped 
proximity index heuristic performed experiments proposed approach 
comparison easier normalize response time different heuristics proximity index plot ratios response times 
subsections comparison node disk assignment heuristics mi ma rr pi recall multiplexed tree framework 
detailed study rr heuristic vs pi 
comparison pi vs super node method study speed achieved pi 
comparison disk assignment heuristics shows actual response time heuristics rr mi ma pi function query size parameters follows 
behavior typical combinations parameter values 
main observation pi mi heuristics take spatial relationships account perform best 
round coverage page size disks min area round robin min intersection proximity index response time sizeof comparison heuristics pi mi rr ma response time vs query size robin best minimum area heuristic worst performance 
comparing mi pi heuristics see mi performs proximity index heuristic small queries larger queries proximity index wins 
reason mi may assign disk non intersecting rectangles close 
proximity index versus round robin study savings proposed heuristic pi achieve rr 
reason chosen rr simplest heuristic design implement 
show extra effort design pi heuristic pays consistently 
cover rect disks prox ratio response time qs relative response time rr pi vs query size 
plots response time rr relative pi function query size number disks cover quotient page size disks prox cov cov cov cov ratio response time qs relative response time rr pi vs query size 
page sizes varied kb 
gains pi increase increasing page size 
pi heuristic considers sibling nodes nodes father larger page size heuristic takes nodes account better decisions 
illustrates effect cover quotient relative gains pi rr 
page size fixed kb cover quotient varied 

main observation decreases cover quotient explained follows large rectangles vicinity newly created rectangle means need take sibling nodes account disk units get better results 
observation common figures peaks medium size queries 
small queries number nodes retrieved small leaving little room improvement 
huge queries nodes need retrieved case data balance rr achieves results 
re emphasize figures reveal small fraction experimental data gathered 
performed experiments values number disks linear splitting algorithm tree 
experiments pi invariantly outperformed rr 
comparison super node method order justify claims advantages multiplexed mx tree super node method compared methods respect requirements uniform spread minimum load 
measure response time measure second load 
graphs respect measures 
compares response time multiplexed tree pi super node coverage rect supernode multiplexed tree response time sizeof response time vs query size multiplexed tree pi super nodes 
disks method 
notice difference performance increases query size general multiplexed tree outperforms super node scheme large queries 
situation super node scheme performs slightly better disks query small 
explanation large tree super nodes fewer levels multiplexed tree addition query small response time trees bounded height respective tree 
exactly situation super node method violates minimum load requirement imposing large load sub system paying penalties throughput 
order gain insight effect throughput plot load method various parameter values 
recall load query total number pages touched super page counts simple pages 
shows results setting 
multiplexed tree imposes lighter load small queries load times smaller load super node method 
interestingly absolute difference increases query size 
comparisons proposed method better response time supernode method large queries 
addition lead higher throughput tends impose lighter loads disks 
results agree intuition indicate proposed method offer higher throughput spatial object server 
coverage rect supernode multiplexed load sizeof total number pages retrieved load vs query size 
speed standard measure efficiency parallel system speed defined follows response time query system disks 
examined exclusively multiplexed tree method pi heuristic offer best performance 
due space limitations report details technical report 
major result speed high 
linear speedup cover quotient page size query side size 
speed increases size query 
studied alternative designs spatial object server trees underlying file structure 
goal maximize parallelism large queries time engage disks possible small queries 
achieve goals propose ffl hardware architecture cpu multiple disk simple effective inexpensive 
communication costs requires inexpensive general purpose components easily expanded simply adding disks take easily advantage large buffer pools 
ffl software architecture termed multiplexed rtree operates exactly single disk tree difference nodes carefully distributed disks 
intuitively approach better super node approach independent trees approach respect throughput 
ffl proximity index pi criterion decides distribute nodes tree disks 
specifically tries store new node disk contains nodes dissimilar new node possible 
extensive simulation experiments show pi criterion consistently outperforms criteria round robin minimum area performs approximately better minimum intersection criterion 
comparison super node disk stripping approach shows proposed method offers better response time large queries imposes lighter load leading higher throughput 
respect speed proposed method achieve near linear large queries 
multiplexed tree pi heuristic best method order implement spatial object server 
research focus proximity concept aid parallelization spatial file structures 
authors george help typesetting 
walid aref hanan samet 
optimization strategies spatial query processing 
proc 
vldb large data bases pages september 
ballard brown 
computer vision 
prentice hall 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
acm sigmod pages may 
bentley 
multidimensional binary search trees associative searching 
cacm september 
dewitt gerber graefe kumar 
gamma high performance dataflow database machine 
proc 
th international conference vldb pages kyoto japan august 
faloutsos roseman 
fractals secondary key retrieval 
eighth acm sigact symposium principles database systems pods pages march 
available umiacs tr cs tr 
garcia molina salem 
impact disk stripping reliability 
ieee database engineering march 

effective way represent quadtrees 
comm 
acm cacm december 
gunther 
cell tree index geometric data 
memorandum 
ucb erl univ california berkeley december 
guttman 
new features relational database systems support cad applications 
phd thesis university california berkeley june 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages june 
hinrichs nievergelt 
grid file data structure support proximity queries spatial objects 
proc 
wg intern 
workshop graph theoretic concepts computer science pages 
jagadish 
linear clustering objects multiple attributes 
acm sigmod conf pages may 
ibrahim kamel christos faloutsos 
parallel trees 
proc 
acm sigmod conf pages june 
available tech 
report umiacs tr cs tr 
curtis michael stonebraker 
segment indexes dynamic indexing techniques multidimensional interval data 
proc 
acm sigmod pages may 
david lomet betty salzberg 
hb tree multiattribute indexing method guaranteed performance 
acm tods december 
orenstein 
spatial query processing objectoriented database system 
proc 
acm sigmod pages may 
ousterhout mayo scott taylor 
magic vlsi layout system 
st design automation conference pages nm june 
robinson 
tree search structure large multidimensional dynamic indexes 
proc 
acm sigmod pages 
roussopoulos 
direct spatial search pictorial databases packed trees 
proc 
acm sigmod may 
samet 
design analysis spatial data structures 
addison wesley 
bernhard seeger ake larson 
multi disk 
proc 
acm sigmod pages may 
sellis roussopoulos faloutsos 
tree dynamic index multi dimensional objects 
proc 
th international conference vldb pages england september 
available src tr umiacs tr cs tr 
kim 
parallel processing large node trees 
trans computers 
stonebraker sellis hanson 
rule indexing implementations database systems 
proceedings international conference expert database systems charleston sc april 
white 
trees large ordered indexes multidimensional space 
application mathematics research staff statistical research division bureau census december 
