formal methods state art directions edmund clarke jeannette wing carnegie mellon university survey progress development mathematical techniques specifying verifying complex hardware software systems 
techniques capable handling industrial sized examples fact cases techniques regular basis industry 
success formal specification attributed notations accessible system designers new methodologies applying notations effectively 
success verification attributed development new tools powerful theorem provers model checkers previously available 
suggest general research directions believe lead technological advances 
difficult predict advances come optimism generation formal methods justified view progress past decade 
progress strongly depend continued support basic research new specification languages new verification techniques 
categories subject descriptors hardware control structure performance analysis design aids formal models hardware design aids verification arithmetic logic structures performance analysis design aids cation memory structures performance analysis design aids formal models input output data communications performance analysis design aids formal models verification register transfer level implementation design aids verification logic design design aids verification integrated circuits design aids verification software engineering requirements specifications software engineering program verification assertion checkers correctness proofs programming languages language classifications design languages high level languages logics meanings programs specifying verifying reasoning research sponsored part wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
views contained document authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory united states government 
address computer science department carnegie mellon university forbes avenue pittsburgh pa working group members rajeev alur edmund clarke chair rance cleaveland david dill allen emerson stephen garland steven german john guttag anthony hall thomas henzinger gerard holzmann cliff jones robert kurshan nancy leveson kenneth mcmillan moore doron peled amir pnueli john rushby natarajan shankar joseph sifakis prasad sistla bernhard steffen pierre wolper jeannette wing chair jim woodcock pamela zave 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
delta clarke wing programs mechanical verification specification techniques mathematical logic formal languages mathematical logic mechanical theorem proving general terms software engineering formal methods hardware verification additional key words phrases software specification model checking theorem proving 
hardware software systems inevitably grow scale functionality 
increase complexity likelihood subtle errors greater 
errors may cause catastrophic loss money time human life 
major goal software engineering enable developers construct systems operate reliably despite complexity 
way achieving goal formal methods mathematically languages techniques tools specifying verifying systems 
formal methods priori guarantee correctness 
greatly increase understanding system revealing inconsistencies ambiguities go undetected 
part report assesses state art specification verification 
verification highlight advances model checking theorem proving 
sections specification model checking theorem proving explain mean general technique briefly describe successful case studies known tools 
second part report outlines directions fundamental concepts new methods tools integration methods education technology transfer 
close summary remarks pointers resources information 

state art past formal methods practice hopeless 
notations obscure techniques scale tool support inadequate hard 
non trivial case studies convincing practicing software hardware engineer 
people training effectively job 
begun see promising picture formal methods 
software specification industry open trying notations document system properties rigorously 
hardware verification industry adopting techniques model checking theorem proving complement traditional simulation 
areas researchers practitioners performing industrial sized case studies gaining benefits formal methods 
specification specification process describing system desired properties 
formal specification uses language mathematically defined syntax semantics 
kinds system properties include functional behavior timing behavior performance characteristics internal structure 
far specification formal methods state art directions delta successful behavioral properties 
current trend integrate different specification languages able handle different aspect system 
handle non behavioral aspects system performance real time constraints security policies architectural design 
formal methods spivey vdm jones larch guttag horning focus specifying behavior sequential systems 
states described terms rich mathematical structures sets relations functions state transitions terms pre post conditions 
methods csp hoare ccs milner statecharts harel temporal logic pnueli manna pnueli lamport automata lynch tuttle focus specifying behavior concurrent systems states typically range simple domains integers left uninterpreted behavior defined terms sequences trees partial orders events :10.1.1.20.461
raise nielsen lotos iso wed different methods handling rich state spaces handling complexity due concurrency 
common methods mathematical concepts abstraction composition 
process specification act writing things precisely 
main benefit doing intangible gaining deeper understanding system specified 
specification process developers uncover design flaws inconsistencies ambiguities 
tangible product process artifact formally analyzed checked internally consistent derive properties specified system 
specification useful communication device customer designer designer implementor implementor tester 
serves companion document system source code higher level description 
notable examples cics 
oxford university ibm laboratories collaborated formalize part ibm customer information control system line transaction processing system thousands installations worldwide houston king 
measurements taken ibm development process indicated improvement quality product reduction number errors discovered earlier detection errors process 
ibm estimated reduction total development cost new release 
success known resulted queen award technological achievement 
inspired follow suit 
cdis 
praxis delivered uk civil aviation authority ccf display information system part new air traffic management system london airspace hall 
cdis distributed fault tolerant system implemented nearly computers linked dual local area network 
praxis formal methods integral part development process conjunction software engineering project management quality assurance techniques 
requirements analysis formal description supplemented infor delta clarke wing mal structured requirements notations 
system specification stage vdm model developed conjunction concrete user interface definitions semi formal definitions concurrent behavior definitions external interfaces 
design vdm refined concrete module specifications 
lower level software dual lan specified developed formally ccs 
productivity project better comparable projects carried informal methods 
words net cost formal methods 
perceived measured quality software higher 
delivered software defect rate faults lines code times better published projects comparable software air traffic control applications formal methods 
lockheed 
praxis working lockheed analyzing code software lockheed sutton supplied air force raf 
software coded spark annotated subset ada 
specifications written software productivity consortium core notation spc parnas tabular specifications 
expect spark add cost software improving quality 
added quality decreased cost software development huge savings testing 
spark annotations specify behavior modules led software close correct construction passes tests requiring expensive rework 
tcas 
early safety critical systems research group university california irvine university washington produced formal requirements specification traffic collision avoidance system tcas ii required commercial aircraft flying airspace 
requirements state machine language rsml statecharts changes overcome difficulties specification process 
industry group attempting provide english language specification time complexity tcas impeded process eventually english specification effort abandoned rsml specification adopted 
group industry university representatives produced draft tcas ii specification private behalf federal aviation administration took specification effort official tcas ii documentation uses rsml 
private original university researchers produced automated tools rsml including simulators test case generators test tools safety analysis tools 
tcas ii specification automatically checked mathematical completeness consistency heimdahl leveson provably correct code automatically generated rsml specifications 
tcas ii project demonstrated practicality writing formal requirements specification complex process control system formal methods state art directions delta bility building formal model system readable application experts special training 
case studies formal specification performed primarily commercial safety critical systems 
proprietary lack documentation cite 
give reader sense applicability formal methods list provide 
databases 
hp medical instruments real time database storing patient monitoring information bear 
devices 
tektronix family delisle garlan schlumberger line household electricity meters arnold 
hardware 
inmos floating point processor barrett virtual channel processor inmos transputer barrett 
see section medical 
clinical neutron therapy system university washington controller jacky 
nuclear 
argonne national laboratories reactor safety system experimental breeder reactor ii shutdown system darlington nuclear generating system canada 
security 
security policy model nato air command control system boswell secure transmission datagrams multinet gateway system token access control system national institute standards technology kuhn 
telephony 
various features ess telephone switching system esterel jagadeesan combinations csp zave zave zave jackson university passau siemens joint customizable telephone services features steffen done deutsche telekom 
transportation 
automatic train protection system paris metro carnot british rail signaling rules king board avionics software israel aircraft harel 
see craigen craigen craigen craigen description twelve case studies formal methods cited 
verification established approaches verification model checking theorem proving 
go step specification formal methods analyze system desired properties 
model checking 
model checking technique relies building finite model system checking desired property holds model 
roughly speaking check performed exhaustive state space search guaranteed terminate model finite 
technical challenge model checking devising algorithms data structures allow handle delta clarke wing large search spaces 
model checking primarily hardware protocol verification clarke kurshan current trend apply technique analyzing specifications software systems 
general approaches model checking practice today 
temporal model checking technique developed independently clarke emerson clarke emerson sifakis sifakis 
approach specifications expressed temporal logic pnueli systems modeled finite state transition systems 
efficient search procedure check finite state transition system model specification 
second approach specification automaton system modeled automaton compared specification determine behavior conforms specification 
different notions conformance explored including language inclusion har el kurshan kurshan refinement orderings cleaveland roscoe observational equivalence cleaveland fernandez roy de simone 
vardi wolper vardi wolper showed temporal logic model checking problem recast terms automata relating approaches 
contrast theorem proving model checking completely automatic fast producing answer matter minutes 
model checking check partial specifications provide useful information system correctness system completely specified 
model checking tour de force produces counterexamples usually represent subtle errors design aid debugging 
main disadvantage model checking state explosion problem 
mcmillan bryant ordered binary decision diagrams bdds bryant represent state transition systems efficiently increasing size systems verified :10.1.1.1.5124
promising approaches alleviating state explosion include exploitation partial order information peled localization reduction kurshan kurshan semantic minimization eliminate unnecessary states system model 
model checkers today routinely expected handle systems state variables 
checked interesting systems reachable states burch appropriate abstraction techniques check systems essentially unlimited number states clarke :10.1.1.116.9247
result model checking powerful widely industry aid verification newly developed designs 
notable examples ieee futurebus 
clarke students carnegie mellon smv mcmillan verify cache coherence protocol described ieee futurebus standard clarke long 
exhaustive state space search reachability analysis dates back earliest papers petri nets 
term model checking coined clarke emerson clarke emerson 
formal methods state art directions delta constructed precise model protocol smv input language smv show resulting transition system satisfied formal specification cache coherence 
number previously undetected errors potential errors design protocol 
appears time automatic verification tool find errors ieee standard 
development protocol began previous attempts validate entirely informal techniques 
ieee sci 
dill colleagues stanford developed murphi finite state verification system verified cache coherence protocol scalable coherent interface ieee standard dill 
sci standard defines protocols subset 
constructed model typical protocol supplied specification properties necessary cache coherence 
avoid errors translation model directly code definition sci standard 
number states model large verified small instances system 
simplification errors protocol ranging omissions variable initializations subtle logical errors 
errors existed basic subset defined protocol extensively discussed simulated implemented 
stereo components 
emerging application domains automatic verification design hybrid systems consist discrete continuous components 
polak vaandrager won award proving manually correctness control protocol philips stereo components 
ho wong toi verified abstraction protocol symbolic model checker hytech inferred fully automatically efficient timing protocol philips ho wong toi 
yovine verification tool kronos yovine check automatically properties stated bengtsson colleagues model checked entire protocol completing quest fully automating human proof little years ago considered far reach algorithmic methods bengtsson 
isdn project full scale application formal verification methods routine software design project holzmann 
project lasted 
formal modeling automated verification applied development international telecommunications union ccitt isdn isdn user part 
team verification engineers formalized requirements temporal logic rendered proofs help specialpurpose model checker holzmann holzmann patti 
total lines specification description language sdl source code excluding comments verified errors revealed fixed high level designs approximately original design requirements discovered logically inconsistent 

high level data link controller transmitter core designed bell labs microelectronics design center madrid spain delta clarke wing application specific integrated circuit library telecommunication 
standard design process included capture register transfer level vhdl simulation synthesis 
late process formal verification team bell labs offered run additional functional verification design 
design considered practically finished expected errors 
hours properties specified verified verification tool glaser 
sixth property fail uncovering bug reduced throughput channel 
bug confused higher level protocols causing lost transmissions 
took just minutes identify propose fix design error managed escape hours logic simulation 
error corrected correction formally verified 
plans works madrid design center include model checking part standard design process 
group bull collaboration researchers verimag laboratory lotos describe processors memory controller bus arbiter multiprocessor architecture called 
architecture ibm powerpc microprocessor bull series servers workstations identified correctness properties express essential requirements proper functioning arbitration algorithm formalized properties algorithm terms bisimulation relations modulo abstractions finite labelled transition systems 
compositional fly model checking techniques implemented caesar ald development package cadp toolbox correctness arbitration algorithm established automatically minutes 
buildings 
civil engineers north carolina state university concurrency workbench analyze timing properties distributed active structural control system 
system question designed buildings resistant earthquakes sampling forces applied structure hydraulic actuators exert forces 
engineers coded design timed version ccs language resulting model contained excess states directly analyzable 
semantic minimization feature concurrency workbench able construct automatically smaller system timing properties analyzed 
course analysis uncovered error timer setting undetected caused active structural control component worsen dampen vibration experienced buildings earthquakes 
successful industrial sized case studies model checking numerous list 
evidence model checking come age industry building model checkers simply existing ones 
listed wellknown model checkers roughly categorized specification registered trademarks bull 
formal methods state art directions delta check logical formula machine temporal logic model checkers 
model checkers emc clarke emerson clarke browne caesar sifakis fernandez 
smv mcmillan model checker bdds 
spin system gerth holzmann uses partial order reduction reduce state explosion problem holzmann peled peled 
murphi dill uv unity programming language chandy misra 
concurrency workbench cleaveland verifies ccs processes properties expressed mu calculus formulas 
sve format damm damm delgado cv focus hardware verification 
hytech alur model checker hybrid systems kronos yovine henzinger real time systems :10.1.1.52.484
behavior conformance checkers 
cospan system glaser har el kurshan showing inclusion omega automata 
fdr roscoe checks refinement csp programs verify debug authentication protocol lowe 
concurrency workbench cleaveland checks similar notion refinement ccs programs tool auto roy de simone may minimize systems respect observational equivalence determine systems observably equivalent 
combination checkers 
berkeley combines model checking language inclusion stanford step bjrner system deductive methods vis brayton logic synthesis 
pvs theorem prover owre model checker modal rajan 
steffen environment supports model checking entire software development process 
theorem proving 
theorem proving technique system desired properties expressed formulas mathematical logic 
logic formal system defines set axioms set inference rules 
theorem proving process finding proof property axioms system 
steps proof appeal axioms rules possibly derived definitions intermediate lemmas 
proofs constructed hand focus machine assisted theorem proving 
theorem provers increasingly today mechanical verification safety critical properties hardware software designs 
theorem provers roughly classified spectrum highly automated general purpose programs interactive systems special purpose capabilities 
automated systems useful general search procedures noteworthy success solving various combinatorial problems 
interactive systems suitable systematic formal development mathematics mechanizing formal methods 
contrast model checking theorem proving deal directly infinite state spaces 
relies techniques structural induction prove infinite delta clarke wing domains 
interactive theorem provers definition require interaction human theorem proving process slow error prone 
process finding proof human user gains invaluable insight system property proved 
notable examples srt division algorithm 
clarke german zhao automatic theorem proving techniques symbolic algebraic manipulation prove correctness srt division algorithm similar pentium clarke 
verification method runs automatically detected error pentium caused faulty quotient digit selection table 
rue shankar srivas sri general purpose theorem prover pvs owre example 
processor designs 
verity verification tool widely ibm design processors powerpc system 
applied hierarchical manner tool handle entire processor designs containing millions transistors 
tool functional behavior hardware system register transfer level gate level transistor level modeled boolean state transition function 
algorithms bdds check equivalence state transition functions different design levels 
motorola 
boyer yu constructed nqthm boyer moore boyer moore specification motorola microprocessor including user mode instructions boyer yu 
specification prove correctness binary machine code programs produced commercial compilers source code high level languages ada lisp example yu verified mc binary code produced gcc compiler programs berkeley string library 
amd 
moore kaufmann computational logic lynch advanced micro devices collaborated prove correctness lynch microcode floating point division amd 
starting informal proof correctness formalized argument acl logic kaufmann moore checked acl mechanical theorem prover 
gaps mistakes informal proof microcode mechanically shown correct moore 
entire effort took weeks 
mechanical proof ended doubt code correctness allowed testers focus routines 
acl check correctness floating point square root microcode 
bugs microcode fixed final version square root microcode mechanically proved correct 
motorola cap 
brock computational logic working collaboration motorola designers developed acl specification entire motorola complex arithmetic processor cap microprocessor formal methods state art directions delta digital signal processing dsp 
cap complicated microprocessor formalized stage pipeline independent memories multiplier accumulators programmer visible registers instruction set allowing simultaneous modification registers single instruction 
formal specification tracked evolving design included simpler non pipelined view proved equivalent certain class programs 
brock acl verify binary microcode dsp algorithms brock 

srivas stanford research institute miller rockwell international collaborated specification verification collins commercial avionics microprocessor 
pvs specify instructions verified microcode representative instructions miller srivas 
model checking increase number kinds theorem provers provides evidence growing interest theorem proving 
corresponding increase number kinds examples theorem provers applied 
list known theorem provers categorized roughly degree automation user guided automatic deduction tools 
systems acl kaufmann moore craigen lp garland guttag nqthm boyer moore lescanne rrl kapur musser guided sequence lemmas definitions theorem proved automatically built heuristics induction lemma driven rewriting simplification 
nqthm boyer moore theorem prover check proof godel incompleteness theorem variety large scale verification efforts 
proof checkers 
examples include coq cornes hol gordon lego luo pollack lcf gordon nuprl constable 
formalize verify hard problems mathematics program verification 
combination provers 
analytica clarke zhao combines theorem proving symbolic algebra system mathematica successfully proved hard number theoretic problems due ramanujam 
pvs owre step bjrner combine powerful decision procedures model checking interactive proof 
pvs verify number hardware designs reactive real time fault tolerant algorithms 

directions overarching goal formal methods help engineers construct reliable systems 
formal methods area cuts areas computer science 
foundations lie squarely mathematics intended applications hardware software systems potential users developers involved system engineering process 
tremendous advances past decade fronts 
technology improves feasible attack harder larger problems 
delta clarke wing progress area depends doing fundamental research inventing new methods building new tools integrating different methods making concerted efforts researchers practitioners transfer technology effectively 
fundamental concepts significant advances practical formal methods relied fundamental results drawn areas computer science necessarily directly intended formal methods 
needs done areas composition 
need understand compose methods compose specifications compose models compose theories compose proofs 
decomposition 
need develop efficient methods decomposing computationally demanding global property local properties verification computationally simple task decomposition localization reduction methods kurshan 
abstraction 
real systems difficult specify verify abstractions 
need identify different kinds abstractions tailored certain kinds systems problem domains need develop ways justify formally mechanical help 
reusable models theories 
defining models theories scratch time new application tackled better reusable parameterized models theories 
combinations mathematical theories 
safety critical systems digital analog components 
hybrid systems require reasoning discrete continuous mathematics 
system developers able predict system operate field 
care performance correctness 
performance modeling borrows strongly probability statistics queueing theory 
data structures algorithms 
handle larger search spaces larger systems new data structures algorithms concise data structures representing boolean functions needed 
methods tools method tool serve purposes 
need support different kinds 
past experience learned kinds impact 
attractive practitioners methods tools satisfy criteria 
realize criteria ideals strive 
early 
methods tools provide significant benefits soon people 
incremental gain incremental effort 
benefits increase developers get adept put effort writing specifications tools 
formal methods state art directions delta multiple 
possible amortize cost method tool uses 
example possible derive benefits single specification points program life cycle design analysis code optimization test case generation regression testing 
integrated 
methods tools conjunction common programming languages techniques 
developers buy new methodology completely receiving benefits 
tools formal methods integrated tools traditional software development compilers simulators 
ease 
tools easy compilers output easy understand 
efficiency 
tools efficient developer time 
turnaround time interactive tool comparable normal compilation 
developers patient completely automatic tools perform extensive analysis 
ease learning 
notations tools provide starting point writing formal specifications developers write 
knowledge formal specifications needed start realizing benefits minimal 
error detection oriented 
methods tools optimized finding errors certifying correctness 
support generating counterexamples means debugging 
focused analysis 
methods tools analyzing aspect system control flow protocol 
need analyzing aspects system 
evolutionary development 
methods tools support evolutionary system development allowing partial specification analysis selected aspects system 
build single tool build meta tools produce tools customized particular problem domain steffen formal notation cleaveland logic gordon wing 
meta tools compiler generators provide automatic way build specialized model checkers proof checkers 
new method tool developer state explicitly strengths limitations modeling assumptions ease integration methods tools start costs 
clear selection criteria help potential users decide method tool appropriate problem hand 
integration methods formal method suitable describing analyzing aspect complex system practical approach different methods combination 
combining methods important consider finding suitable style different methods finding suitable meaning different methods 
delta clarke wing addressed adequately 
failure find suitable style misses true advantages combining methods 
example school stresses importance presentation specifications accessible form plenty natural language 
emphasis helped notation 
combination preserve style presentation 
failure attend theoretical foundations combination misses true advantages formality 
chemistry distinction drawn mixture compound 
mixture ingredients merely compound ingredients chemically united 
combining different formal methods 
meaning combination properly explained result merely mixture deduced joint description separate ones 
meaning combination explained result powerful 
possible views system specification reason refine view understand consequences view 
model checking theorem proving 
promising directions method integration combining model checking theorem proving kurshan lamport rajan bjrner ideally benefit advantages approaches 
way employ model checking decision procedure deductive framework done tools pvs step 
example sufficiently expressive logic define temporal operators finite state transition systems terms maximal minimal fixed points 
finite state transition systems fixed points evaluated model checker decision procedure 
structures unbounded state spaces temporal properties verified means fixed point induction 
way combining deductive model checking approaches deduction obtain finite state abstraction implementation verified model checking 
abstractions commonly preparing problem model checking seldom rigorously verified 
deduction verify assumption commitment proof obligations generated composing component implementations separately verified means model checking 
induction combined model checking verify systems composed networks finite state processes 
integration system development process 
formal methods complement formal methods system development process 
addition informal methods done praxis cdis example 
far formal methods shown strength specification verification 
worth exploring requirements analysis refinement testing 
requirements analysis necessarily deals customers imprecise idea want formal methods help customers nail system requirements precisely 
refinement reverse verification process level specification implementation series correctness preserving formal methods state art directions delta transformations synthesizing lower level specification implementation 
theoretical refinement done results transferred practice 
testing area costly software projects 
formal methods play role validation process formal specifications generate test suites richardson model proof checking tools determine formal relationships specifications test suites test suites code 
education technology transfer education vital success formal methods 
different kinds audiences research peers 
greatest colleagues 
overcome skepticism collaborating students systems care 
practitioners 
technology transfer taken seriously 
spread formal methods directly related efforts researchers teaching techniques industry 
effective technology transfer keep mind success industry depends timely delivery continuously enhanced functionality understanding customers needs re legacy code commitment quality elimination errors cost effective development real time performance 
students levels 
graduate programs incorporate formal methods curricula garlan oxford 
educators starting consider teaching formal methods undergraduate level 
students need understand just build single stand programs scratch construct large systems shelf components maintain legacy code need know just code high level system design 

concluding remarks commercial pressure produce higher quality software increasing 
formal methods demonstrated success specifying commercial safety critical software verifying protocol standards hardware designs 
expect role formal methods entire system development process increase especially tools methods successful domain carry 
progress strongly depend continued support basic research new specification languages new verification techniques 
ideally system developers trained sufficiently think formal method tool 
routinely mathematics underlying notation formal specification language simply means communicating ideas team documenting design decisions 
routinely tools model proof checkers ease compilers 
researchers delta clarke wing educators formal methods strive notations tools accessible non experts 
ideal sense new career path specialists formal methods 
experts method tool knowledgeable offering advice application 
wing envisioned years ago idea specification firms wing analogous architecture law firms employees hired skills formal methods 
vision realized growth number house teams consult projects large corporations intel number independent companies computational logic kestrel institute ora specialize formal methods contract industry government agencies 
companies praxis formal methods routine part development process 
reading see april issue ieee computer contains roundtable discussion formal methods june issue ieee spectrum gives overview model checking 
line forums include net newsgroup comp specification specific methods formal methods mailing list cs uq oz au 
oxford university web page www comlab ox ac uk archive formal methods html points wealth information formal methods including papers reports tools conferences journals projects people 
alur henzinger ho 

automatic symbolic verification embedded systems 
ieee transactions software engineering 

formal verification powerpc microprocessor 
proceedings ieee international conference computer design iccd austin tx oct pp 


verification shutdown system software darlington nuclear generating system 
intl 
conf 
control instrumentation nuclear installations glasgow scotland may 
arnold 

embedded software electricity meter experience formal methods industrial project 
science computer programming 
barrett 
formal methods applied floating point number system 
ieee trans 
soft 
eng 
may 
barrett 
model checking practice virtual channel processor 
ieee trans 
soft 
eng 
feb 
bear 
overview hp sl 
proc 
vdm formal development methods volume lecture notes computer science 
springer verlag 
bengtsson griffioen larsen larsson pettersson yi 
verification audio protocol bus collision uppaal 
alur henzinger eds computer aided verification lecture notes computer science pp 

springer verlag 
bjrner 
step deductive reactive real time systems 
proc 
th international conference computer aided verification number lecture notes computer science july pp 

springerverlag 
formal methods state art directions delta polak vaandrager 
verification audio control protocol 
langmaack 
de roever eds formal techniques real time fault tolerant systems lecture notes computer science pp 

springer verlag 
boswell 
specification validation security policy model 
ieee trans 
software engineering feb 
boyer yu 
automated proofs object code widely microprocessor 
journal acm january 
boyer moore 
computational logic 
academic press new york 
boyer moore 
computational logic handbook 
academic press new york 
brayton 
vis system verification synthesis 
proc 
th international conference computer aided verification number lecture notes computer science july pp 

springer verlag 
brock kaufmann moore 
heavy inference theorems commercial microprocessors 
srivas eds formal methods computer aided design fmcad november pp 
appear 
springer verlag 
browne clarke dill mishra 
automatic verification sequential circuits temporal logic 
ieee transactions computers 
bryant 
graph algorithms boolean function manipulation 
ieee trans 
computers 
burch clarke long mcmillan dill 
symbolic model checking sequential circuit verification 
ieee trans 
computeraided design integrated circuits systems april 
roman palma 
practical design case formal verification 
proc 
design 
appear 
carnot 
error free software development critical systems methodology 
third international ieee symposium software reliability engineering 
chandy misra 
parallel program design 
addison wesley 

formal methods industrial usage report 
proc 
formal description techniques iv north holland pp 


specification verification bus arbitration protocol industrial experiment lotos 
proceedings forte kaiserslautern germany 
chapman hall 
smith 
approach verification fault tolerant computer reactor safety system case study automated reasoning volume interim report 
technical report np jan electric power research institute palo alto ca 
prepared argonne national laboratory 
clarke german zhao 
verifying srt division algorithm theorem proving techniques 
proc 
th international conference computeraided verification number lecture notes computer science july pp 

springer verlag 
clarke kurshan 

computer aided verification 
ieee spectrum 
clarke zhao 
analytica theorem prover mathematica 
mathematica journal 
clarke emerson 
synthesis synchronization skeletons branching time temporal logic 
logic programs workshop yorktown heights ny may volume lecture notes computer science 
springer verlag 
clarke emerson sistla 
automatic verification finitestate concurrent systems temporal logic specifications 
acm toplas 
delta clarke wing clarke grumberg jha long mcmillan ness 
verification futurebus cache coherence protocol 
proc 

clarke grumberg long 
model checking abstraction 
proc 
principles prog 
lang 

cleaveland sims 
generating front ends verification tools 
brinksma cleaveland larsen steffen eds tools algorithms construction analysis systems tacas volume lecture notes computer science aarhus denmark may pp 

springerverlag 
cleaveland parrow steffen 
concurrency workbench semantics tool verification concurrent systems 
acm toplas jan 
constable 
implementing mathematics nuprl proof development environment 
prentice hall 
cornes courant atre huet paulin mohring munoz murthy parent sa ibi werner 
coq proof assistant manual version 
technical report july inria 
pauillac inria fr coq systeme coq eng html 
craigen gerhart ralston 
international survey industrial applications formal methods 
technical report nist gcr vols 
march national institute standards technology 
published naval research laboratory formal rep 
atomic energy control board canada 
craigen gerhart ralston 
observations industrial practice formal methods 
proc 
th int 
conf 
software eng 
may 
craigen gerhart ralston 
formal methods critical systems 
ieee software jan 
craigen gerhart ralston 
formal methods reality check industrial usage 
ieee trans 
software engineering feb 
craigen meisels 
tool verifying software 
proceedings th international conference software engineering singapore april pp 

sutton 
breaking bottleneck 
proceedings ada europe 
springer verlag 
damm delgado 
practical formal methods hardware design 
lecture notes computer science 
springer verlag 
appear 
damm schl 
specification validation methods programming languages systems chapter specification verification vhdl system level hardware designs pp 

oxford university press 
yovine 
examples verification multirate timed automata kronos 
proc 
ieee real time systems symposium rtss pisa italy dec 
ieee computer society press 

semantics verification oriented subset vhdl 
eds correct hardware design verification methods volume lecture notes computer science frankfurt germany oct pp 

springer verlag 
delisle garlan 
formal specification oscilloscope 
ieee software sept 
glaser 
formal verification augments simulation 
electronic engineering times 
dill drexler hu yang 
protocol verification hardware design aid 
ieee international conference computer design vlsi computers processors pp 

formal methods state art directions delta 
multinet gateway certification 
ieee symp 
security privacy 
cleaveland 
modeling verifying active structural control systems 
science computer programming 
appear 
preliminary version appears proceedings real time systems symposium 
fernandez 
cadp caesar aldebaran development package protocol validation verification toolbox 
proc 
th international conference computeraided verification number lecture notes computer science july 
springer verlag 
schneider scholz 
sve user guide 
technical report bt se sve siemens ag corporate research development munich 
garlan abowd jackson wing 
cmu master software engineering core curriculum 
proceedings eighth sei conference software engineering education csee volume lecture notes computer science new orleans march pp 

springer verlag 
garland guttag 
inductive methods reasoning data types 
proc 
th symposium principles programming languages pp 

gerth peled vardi wolper 
simple fly automatic verification linear temporal logic 
proc 
ifip wg symp 
protocol specification testing verification warsaw poland june 
gordon 
hol proof generating system higher order logic 
vlsi specification verification synthesis 
kluwer 
gordon milner wadsworth 
edinburgh lcf volume lecture notes computer science 
springer verlag 

software validation 
twelfth international conf 
software engineering 
guttag horning 
larch languages tools formal specification 
springer verlag 
written garland jones wing 
hall 
formal methods develop atc information system 
ieee software march 
harel 
statecharts visual formalism complex systems 
science computer programming 
preliminary version tech 
report cs weizmann institute science rehovot israel february 
harel 
biting silver bullet brighter system development 
ieee computer jan 
har el kurshan 
software analytical development communications protocols 
bell laboratories technical journal jan feb 
heimdahl leveson 
completeness consistency hierarchical statebased requirements 
ieee transactions software engineering se june 

specifying software requirements complex systems new techniques application 
ieee trans 
soft 
eng 
jan 
henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
information computation 
ho 
wong toi 
automated analysis audio control protocol 
wolper ed computer aided verification lecture notes computer science pp 

springer verlag 
hoare 
communicating sequential processes 
prentice hall international 
brayton kurshan 
bdd debugging designs language containment fair ctl 
courcoubetis ed proceedings th international conference computer aided verification number lecture notes computer science pp 

springer verlag 
delta clarke wing holzmann 
design validation computer protocols 
prentice hall englewood cliffs new jersey 
holzmann 
practical methods formal validation sdl specifications 
computer communications special issue practical uses fdt 
holzmann 
theory practice formal method 
proc 
ifip world computer congress hamburg germany august 
holzmann patti 
validating sdl specifications experiment 
vissers brinksma eds proc 
th int 
conf protocol specification testing verification ifip twente june 
holzmann peled 
improvement formal verification 
proc 
forte berne switzerland october 
houston king 
cics project report experiences results proc 
vdm formal development methods volume lecture notes computer science 
springer verlag 
iso 

information systems processing open systems interconnection lotos 
technical report international standards organization dis 
jacky 
specifying safety critical control system ieee trans 
software engineering feb 
jagadeesan 
formal approach reactive systems software telecommunications application esterel 
formal aspects computing march 
parnas zucker 
tabular representations relational documents 
brink ed relational methods computer science 
springer verlag 
appear 
jones 
systematic software development vdm 
prentice hall international new york 

model checking unity 
technical report tr dec university texas austin 
kapur musser 
proof consistency 
artificial intelligence 
kaufmann moore 
acl computational logic applicative common lisp user manual version 
ftp ftp cli com pub acl acl sources doc html acl doc html 
wing 
fast automatic checking security protocols 
proc 
usenix workshop electronic commerce protocols 
appear 
king 
formalising british rail signalling rules 
fme industrial benefit formal methods volume lecture notes computer science pp 

springer verlag 
smith 
formal verification fault tolerance theorem proving techniques 
ieee transactions computers 
srinivasan 
verity formal verification program custom cmos circuits 
ibm journal research development 
kuhn 
formal specification verification control software cryptographic equipment 
sixth computer security applications conference 
kurshan lamport 
verification multiplier bits 
courcoubetis ed computer aided verification volume lecture notes computer science pp 

springer verlag 
kurshan 
computer aided verification coordinating processes 
princeton university press 
kurshan 
complexity verification 
proc 
th acm symposium theory computing stoc montreal pp 

lamport 
temporal logic actions 
acm toplas 
lescanne 
computer experiments term rewriting system generator 
proceedings th symposium principles programming languages formal methods state art directions delta austin texas jan pp 

long 
model checking abstraction compositional reasoning 
ph 
thesis carnegie mellon computer science department 
lowe 
breaking fixing needham schroder public key protocol fdr 
tools algorithms construction analysis systems volume lecture notes computer science march 
springer verlag 
luo pollack 
lego proof development system user manual 
technical report ecs lfcs may computer science dept university edinburgh 
lynch tuttle 
hierarchical correctness proofs distributed algorithms 
technical report april mit laboratory computer science cambridge ma 
manna pnueli 
temporal logic reactive concurrent systems 
springer verlag new york 
zave 
switching system 
hinchey bowen eds applications formal methods pp 

prentice hall international 
mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic publishers 
miller srivas 
formal verification microprocessor case study industrial formal methods 
workshop formal specification techniques boca raton fl pp 

ieee computer society 
milner 
calculus communicating systems volume lecture notes computer science 
springer verlag 
moore lynch kaufmann 
mechanically checked proof correctness amd floating point division algorithm 
devil ece utexas edu lynch divide divide html 
nielsen havelund wagner george 
raise language method tools 
formal aspects computing 
owre rushby shankar 
pvs prototype verification system 
kapur ed th international conference automated deduction cade volume lecture notes artificial intelligence june pp 

springer verlag 
oxford 

www comlab ox ac uk master science software engineering 
peled 
combining partial order reductions fly model checking 
journal formal methods systems design 
appeared proc 
th international conference computer aided verification stanford ca usa lecture notes computer science springer verlag 
pnueli 
temporal logic concurrent programs 
theor 
comp 
sci 

sifakis 
specification verification concurrent systems caesar 
proc 
fifth isp 
rajan shankar srivas 
integration model checking automated proof checking 
wolper ed computer aided verification volume lecture notes computer science liege belgium june pp 

springerverlag 
richardson malley moore 
approaches testing 
acm sigsoft third symposium software testing analysis verification dec 
roscoe 
model checking csp 
roscoe ed classical mind essays honour hoare 
prentice hall 
roy de simone 
auto 
clarke kurshan eds computer aided verification volume dimacs series discrete mathematics theoretical computer science piscataway nj june pp 

american mathematical society 
delta clarke wing rue shankar srivas 
modular verification srt division 
proc 
th international conference computer aided verification number lecture notes computer science july pp 

springer verlag 

mechanically checked proof correctness amd floating point square root algorithm 
submitted 
spc 

consortium requirements engineering guidebook 
technical report spc cmc version software productivity consortium herndon va spivey 
introducing specification language formal semantics 
cambridge university press cambridge 
steffen margaria braun 
meta environment 
computer aided verification lecture notes computer science new brunswick nj july 
springer verlag 
experience report industry day 
steffen margaria braun 
environment creation intelligent network services 
consortium ed intelligent networks ain technologies operations services applications comprehensive report chicago il pp 

invited contribution 
invited annual review communications iec pp 

vardi wolper 
automata theoretic approach automatic program verification 
proc 
logic computer science 
wing 
specification firms vision 
proceedings third international workshop software specification design london aug pp 

zave 
secrets call forwarding specification case study 
proceedings eighth international ifip conference formal description techniques distributed systems communications protocols forte pp 

chapman hall 
zave jackson 
operations come 
multiparadigm specification technique 
ieee transactions software engineering july 
