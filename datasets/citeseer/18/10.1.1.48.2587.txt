ieee tse november evolving philosophers problem dynamic change management 
jeff kramer jeff magee major challenges provision distributed systems major challenges provision distributed systems accomodation accomodation evolutionary evolutionary change 
may involve modifications extensions change 
may involve modifications extensions system envisaged design time 
furthermore system envisaged design time 
furthermore application domains requirement system accomodate change application domains requirement system accomodate change dynamically dynamically stopping disturbing operation parts stopping disturbing operation parts system unaffected change 
description software structure system unaffected change 
description software structure components interconnections provides clear means system components interconnections provides clear means system comprehension construction appropriate changes comprehension construction appropriate changes specified structural change terms component creation deletion specified structural change terms component creation deletion connection disconnection 
changes applied operational system connection disconnection 
changes applied operational system produce modified system 
presents model dynamic change management separates presents model dynamic change management separates structural concerns component application concerns 
separation structural concerns component application concerns 
separation concerns permits formulation general structural rules change concerns permits formulation general structural rules change configuration level need consider application state configuration level need consider application state specification application component actions prior knowledge actual specification application component actions prior knowledge actual structural changes may introduced 
addition changes applied structural changes may introduced 
addition changes applied way leave modified system consistent state cause way leave modified system consistent state cause disturbance unaffected part operational system 
model applied disturbance unaffected part operational system 
model applied example problem evolving philosophers 
principles described example problem evolving philosophers 
principles described model implemented tested conic environment distributed model implemented tested conic environment distributed systems 
department computing imperial college science technology medicine queen gate london sw bz uk 
evolving philosophers page august 
distributed computing systems widespread commercial industrial distributed computing systems widespread commercial industrial research establishments 
major difficulties development maintenance research establishments 
major difficulties development maintenance systems systems management particularly respect management systems systems management particularly respect management change 
change 
distributed systems need evolve human needs change technology changes application distributed systems need evolve human needs change technology changes application environment changes 
argued computing system environment changes 
argued computing system stimulus change 
changes may require modification function provided stimulus change 
changes may require modification function provided system extension new functions 
general changes termed system extension new functions 
general changes termed evolutionary evolutionary difficult accomodate predicted time system difficult accomodate predicted time system designed 
consequently systems sufficiently flexible permit arbitrary designed 
consequently systems sufficiently flexible permit arbitrary incremental change 
addition believe systems capable supporting incremental change 
addition believe systems capable supporting change change dynamically dynamically interrupting processing parts system interrupting processing parts system directly affected 
possible direct changes operational system 
distributed systems potentially offer flexible environment dynamic modification distributed systems potentially offer flexible environment dynamic modification extension 
underlying support mechanisms change software component creation extension 
underlying support mechanisms change software component creation binding deletion readily available 
little suggestion binding deletion readily available 
little suggestion dynamic change specified managed controlled 
describes dynamic change specified managed controlled 
describes approach separation concerns functional concerns application processing approach separation concerns functional concerns application processing components provided general capability change independent components provided general capability change independent structural changes introduced structural configuration concerns specifying structural structural changes introduced structural configuration concerns specifying structural change need consider application state 
configuration management change transaction functional application concerns structural configuration concerns configuration change specification system system configuration change management distributed software specification construction confirms benefits distributed software specification construction confirms benefits separating software component programming concerns system configuration separating software component programming concerns system configuration evolving philosophers page august 
separate configuration specification useful description system 
separate configuration specification useful description system structure generate actual system 
software construction believe change structure generate actual system 
software construction believe change handled configuration level terms software components interconnections handled configuration level terms software components interconnections 
identifies central role configuration management required 
identifies central role configuration management required interface functional view application programming structural view system interface functional view application programming structural view system configuration 
changes specified declaratively terms system structure 
system configuration 
changes specified declaratively terms system structure 
system modified application procedural change transactions include ordered sets modified application procedural change transactions include ordered sets structural control actions 
change transactions derived management structural control actions 
change transactions derived management change specifications 
system evolves incrementally application change change specifications 
system evolves incrementally application change specifications shown 
alternatively change specification derived specifications shown 
alternatively change specification derived comparing desired configuration specification current system 
configuration specification system configuration management configuration changes configuration specification system evolution system incremental changes 
addition means specifying performing change necessary addition means specifying performing change necessary provide facilities controlling change application consistency preserved provide facilities controlling change application consistency preserved change applied subsequent change 
role change management 
exactly required characteristics configuration management system exactly required characteristics configuration management system managing dynamic change 
section identifies objectives change management defines managing dynamic change 
section identifies objectives change management defines precisely distributed system environment expected operate 
form precisely distributed system environment expected operate 
form interaction management application nodes software components interaction management application nodes software components section defining management view node states desirable properties section defining management view node states desirable properties provides 
leads development management protocol section describes provides 
leads development management protocol section describes change management applied illustrating process simple examples 
change management applied illustrating process simple examples 
briefly discusses required application contribution change process 
followed briefly discusses required application contribution change process 
followed section detailed example evolving philosophers 
section extends cover section detailed example evolving philosophers 
section extends cover systems interdependence illustrates principles evolving philosophers systems interdependence illustrates principles evolving philosophers problem 
concluding section discusses approaches dynamic change problem 
concluding section discusses approaches dynamic change management range pragmatic support procedure replacement formal management range pragmatic support procedure replacement formal evolving philosophers page august transformational approach 
examine adequacy approach transformational approach 
examine adequacy approach discuss implications 

dynamic change management section identifies objectives change management defines precisely section identifies objectives change management defines precisely distributed system environment expected operate 
objectives represent distributed system environment expected operate 
objectives represent approach clearly separates application specific functions structural configuration approach clearly separates application specific functions structural configuration functions 
mentioned intention provide application independent configuration functions 
mentioned intention provide application independent configuration management facility 
objectives changes specified terms system structure 
systems particular distributed systems constructed modular way systems particular distributed systems constructed modular way consisting configuration software nodes 
propose system evolution level consisting configuration software nodes 
propose system evolution level programming small low level detailed impractical due programming small low level detailed impractical due tight coupling program elements 
change supported component node tight coupling program elements 
change supported component node level levels possibility exists understanding effects change level levels possibility exists understanding effects change inter node coupling change possible pragmatic 
change specifications declarative 
mean responsibility configuration management mean responsibility configuration management system user determine specific ordering actual change operations applied system user determine specific ordering actual change operations applied system 
clearly separates change required application specific system 
clearly separates change required application specific executed 
configuration management exploit parallelism implementing changes 
executed 
configuration management exploit parallelism implementing changes 
declarative specifications leave decisions implementation mechanisms 
change specifications independent algorithms protocols change specifications independent algorithms protocols states application 
order provide generic configuration management configuration management order provide generic configuration management configuration management system carries changes independent application 
changes system carries changes independent application 
changes specified terms configuration structure demonstrate dependence specified terms configuration structure demonstrate dependence aspects application state abstracted general requirement application aspects application state abstracted general requirement application quiescence dependence application algorithm need component connection quiescence dependence application algorithm need component connection initialisation actions 
changes leave system consistent state 
informally consistent application state system continue informally consistent application state system continue processing normally progressing error state 
usually expressed terms processing normally progressing error state 
usually expressed terms global system invariant 
system viewed moving consistent state global system invariant 
system viewed moving consistent state 
fact application transactions modify state application progress 
fact application transactions modify state application progress transient state distributed system 
transactions progress internal states transient state distributed system 
transactions progress internal states evolving philosophers page august nodes may mutually inconsistent 
order avoid loss application transactions nodes may mutually inconsistent 
order avoid loss application transactions achieve consistent state change consistent application state required affected part achieve consistent state change consistent application state required affected part system change changes minimise disruption application system 
necessary running application system modify necessary running application system modify part 
management system change specification able determine part 
management system change specification able determine minimal set nodes affected change 
rest system able minimal set nodes affected change 
rest system able continue execution normally 
objectives number consequences application objectives number consequences application configuration management system 
particular management system give affected part configuration management system 
particular management system give affected part system opportunity reach consistent state change performed 
system opportunity reach consistent state change performed 
management system force changes waits application reach consistent state 
management system force changes waits application reach consistent state 
consistent state requires communication progress affected nodes consistent state requires communication progress affected nodes environment 
node said environment 
node said quiescent quiescent state 
nodes state 
nodes remain quiescent change executed 
gives newly created nodes opportunity remain quiescent change executed 
gives newly created nodes opportunity initialised state consistent rest system nodes initialised state consistent rest system nodes removed opportunity leave system consistent state 
sections describe removed opportunity leave system consistent state 
sections describe affected nodes identified controlled management discuss application level affected nodes identified controlled management discuss application level responsibilities 
distributed system model 
order provide sound basis discussion change management order provide sound basis discussion change management describe environment assumptions 
briefly define terms 
system system system assumed consist set processing nodes directed connections system assumed consist set processing nodes directed connections indicating communication paths nodes 
node node processing entity initiate service transactions 
connection connection connection directed communication path initiator connection directed communication path initiator communication exchange recipient initiator recipient connection connection 
evolving philosophers page august system may represented directed graph 
edges system may represented directed graph 
edges indicate node may initiate receive transactions 
may indicate node may initiate receive transactions 
may initiate transactions may receive transactions nodes 
transaction transaction transaction exchange information transaction exchange information nodes nodes initiated nodes 
transactions means state node affected initiated nodes 
transactions means state node affected connected nodes system 
transactions consist sequence message connected nodes system 
transactions consist sequence message exchanges connected nodes 
assumed transactions complete bounded exchanges connected nodes 
assumed transactions complete bounded time initiator transaction aware completion 
illustrates valid examples transactions 
practice may consist illustrates valid examples transactions 
practice may consist remote procedure call rpc request reply message exchange sequence remote procedure call rpc request reply message exchange sequence combination rpc message passing shown 
requirement combination rpc message passing shown 
requirement parties identifiable initiator transaction informed completion parties identifiable initiator transaction informed completion transaction 
completion transactions initiator required ensure correct termination transaction 
completion transactions initiator required ensure correct termination management protocol described 
assume management protocol described 
assume independent independent transactions transactions completion transaction depend possibly nested transactions completion transaction depend possibly nested transactions nodes 
section discusses implication relaxing restriction permit nodes 
section discusses implication relaxing restriction permit dependent dependent transactions completion dependent consequent transactions nodes 
initiator recipient complete complete 
examples party transactions change change change described terms modifications structure configuration change described terms modifications structure configuration application system 
changes take form node creation deletion connection application system 
changes take form node creation deletion connection establishment removal 
changes effected configuration manager 
previous establishment removal 
changes effected configuration manager 
previous identified set management primitives specifying modifying identified set management primitives specifying modifying structure systems 
form evolving philosophers page august create create node type optionally specify physical location name unique system 
simplicity omitted examples type obvious 
remove remove node link create connection node node 
simplicity omit detail multiple connections nodes alter algorithms 
unlink remove connection node node 
consistency consistency determined relationship node application states determined relationship node application states usually described global invariant constraint preserved 
local usually described global invariant constraint preserved 
local consistency node necessary partially complete transactions node 
section describes interface management application nodes section describes interface management application nodes refines notion quiescence 

application management interaction performing configuration changes important application information performing configuration changes important application information lost application left consistent state 
management system lost application left consistent state 
management system interface application allows direct application interface application allows direct application appropriate state reconfiguration 
management system able confirm appropriate state reconfiguration 
management system able confirm application reached state 
interface application management system application reached state 
interface application management system generic management independent particular application 
meet generic management independent particular application 
meet objective application state abstracted set configuration management states objective application state abstracted set configuration management states node 
set states provides sufficient information application state allow node 
set states provides sufficient information application state allow management system perform changes leave application consistent state 
management system perform changes leave application consistent state 
configuration states transitions outlined 
node configuration states transitions state transition diagram specifies possible states application state transition diagram specifies possible states application node configuration viewpoint cf 
process states operating system viewpoint 
node configuration viewpoint cf 
process states operating system viewpoint 
interaction configuration management node indicated transitions 
interaction configuration management node indicated transitions 
transitions configuration management cf 
control actions transitions configuration management cf 
control actions distinguished normal application level transactions basic communications 
evolving philosophers page august passive active link unlink activate create remove node state transitions transitions transition depicted represents management action initiates transition depicted represents management action initiates transition 
node application actions required reach destination management state transition 
node application actions required reach destination management state 
management action assert state perform node actions node transitions temporary state involved transition gives node opportunity perform temporary state involved transition gives node opportunity perform initialisation actions necessary preserve application consistency initialisation actions necessary preserve application consistency created removed created removed connections connections linked unlinked linked unlinked application indicates application indicates actions complete asserting destination state transition change actions complete asserting destination state transition change management system 
management system 
activate activate transitions active transitions active passive states described 
states node active state initiate accept service transactions 
node passive state continue accept service transactions currently engaged transaction ii initiate new transactions 
particular state identified necessary reconfiguration passive state 
particular state identified necessary reconfiguration passive state 
node passive state continue node passive state continue accept accept service service transactions passive transactions passive evolving philosophers page august state state initiate initiate new transactions result accepting servicing transactions 
new transactions result accepting servicing transactions 
passive state defined permit connected nodes progress passive state passive state defined permit connected nodes progress passive state completing outstanding transactions 
addition contributes system consistency completing completing outstanding transactions 
addition contributes system consistency completing transactions 
passive state sufficient reconfiguration may transactions 
passive state sufficient reconfiguration may processing transactions initiated nodes 
node quiescence consistency change require stronger property viz 
node consistency change require stronger property viz 
node transaction receive initiate new transactions 
property called transaction receive initiate new transactions 
property called quiescence quiescence node state node passive outstanding node state node passive outstanding transactions accept service 
state depends node transactions accept service 
state depends node connected nodes 
consequently node quiescent currently engaged transaction initiated passive ii initiate new transactions properties iii currently engaged servicing transaction iv transactions nodes require service node 
quiescent configuration state application state node quiescent configuration state application state node consistent consistent frozen 
frozen 
consistent application state contain results partially consistent application state contain results partially completed transactions frozen application state change result new completed transactions frozen application state change result new transactions 
quiescence significant dynamic configuration changes cases transactions 
quiescence significant dynamic configuration changes cases unlinking permits node decisions stable consistent state regarding unlinking permits node decisions stable consistent state regarding particular actions take unlinked 
instance node may pass consistent particular actions take unlinked 
instance node may pass consistent version application state environment unlinked 
notion quiescence loosely earlier specified node notion quiescence loosely earlier specified node behaviour quiescent invariant stable steady state properties node characterised behaviour quiescent invariant stable steady state properties node characterised local invariant preserved node 
quiescence related defined misra local invariant preserved node 
quiescence related defined misra discussion focuses traces termination focus node state discussion focuses traces termination focus node state consistency 
misra defines node quiescent consistency 
misra defines node quiescent may may produce output 
notion produce output 
notion stronger sense trace produced quiescent node stronger sense trace produced quiescent node extended extended output 
resultant properties systems independent transactions passive quiescent states desirable node management states passive quiescent states desirable node management states show achieved systems constructed show achieved systems constructed independent independent transactions 
transactions 
section independent transaction party transaction completion section independent transaction party transaction completion depend transaction 
systems transaction serviced node may cause depend transaction 
systems transaction serviced node may cause node initiate transactions nodes completion service may node initiate transactions nodes completion service may depend depend evolving philosophers page august completion transaction node may initiate 
section discusses extensions completion transaction node may initiate 
section discusses extensions required dependent transactions 
propositions justifications demonstrate reachability passive propositions justifications demonstrate reachability passive state relationship passive quiescent states reachability quiescent state relationship passive quiescent states reachability quiescent state 
proposition reachability passive state independent systems node move active passive state bounded independent systems node move active passive state bounded time irrespective configuration state active passive nodes connected 
justification passive node satisfy conditions currently engaged transaction initiated node complete bounded time transaction initiated transactions node complete bounded time transaction initiated transactions complete bounded time completion independent completion transactions complete bounded time completion independent completion transactions nodes 
transactions complete bounded time recipient node passive state nodes 
transactions complete bounded time recipient node passive state passive nodes accept service transactions 
ii initiate new transactions 
property immediately satisfied application 
systems independent transactions define passive set systems independent transactions define passive set ps ps node node denoted denoted ps consist node nodes directly initiate transactions nodes connection arcs directed proposition passive requirements quiescent state systems independent transactions quiescent nodes ps systems independent transactions quiescent nodes ps passive state 
justification node quiescent currently engaged transaction initiated ii initiate new transactions iii currently engaged servicing transaction iv transactions nodes require service node 
conditions ii follow passive state 
ps 
conditions iii iv follow passive states nodes ps nodes conditions iii iv follow passive states nodes ps nodes initiate transactions passive transactions involving initiate transactions passive transactions involving complete new ones initiated 
quiescent state 
proposition reachability quiescent state systems independent transactions node move active systems independent transactions node move active quiescent state bounded time nodes ps directed move quiescent state bounded time nodes ps directed move passive state 
evolving philosophers page august justification nodes achieve passive state bounded time proposition nodes achieve passive state bounded time proposition passive state nodes ps imply quiescence proposition achieve passive state nodes ps imply quiescence proposition achieve quiescent state bounded time 
section defined interface configuration manager section defined interface configuration manager communicates controls application node 
communication configuration communicates controls application node 
communication configuration management node synchronous sense management action management node synchronous sense management action confirmed node 
confirmed node 
pragmatic reasons may necessary support forced removal pragmatic reasons may necessary support forced removal rogue nodes obey react correctly configuration commands 
rogue nodes obey react correctly configuration commands 
added added remove remove transitions active state 
note node configuration state transitions active state 
note node configuration state way configuration management affect application state 
passive state way configuration management affect application state 
passive state carefully defined readily achievable node completion transactions carefully defined readily achievable node completion transactions initiated 
transactions complete bounded time passive state achieved bounded initiated 
transactions complete bounded time passive state achieved bounded time 
similarly passive state permits servicing transactions initiated connected time 
similarly passive state permits servicing transactions initiated connected nodes permitted progress passive state 
configuration nodes permitted progress passive state 
configuration manager achieve quiescence target node necessary target node passive manager achieve quiescence target node necessary target node passive create region passive nodes passive set 
achieve stable create region passive nodes passive set 
achieve stable situation incomplete active transactions 
abstraction situation incomplete active transactions 
abstraction application state configuration management states forms basis change protocol application state configuration management states forms basis change protocol outlined section 

change management protocol management view section outline change protocol systems constructed independent section outline change protocol systems constructed independent transactions 
protocol meets change management objectives section 
particular transactions 
protocol meets change management objectives section 
particular objective declarative opposed imperative change specification means changes objective declarative opposed imperative change specification means changes specified structural actions specified structural actions create create remove remove link link unlink unlink see section 
see section 
activate activate actions nodes essentially implementation device actions nodes essentially implementation device visible user 
outlines change protocol change visible user 
outlines change protocol change transactions transactions including activate actions ordering execution automatically derived including activate actions ordering execution automatically derived change specification see 
change rules change protocol involves establishing region quiescence specified set change protocol involves establishing region quiescence specified set nodes required passive change occur 
mentioned section changes nodes required passive change occur 
mentioned section changes involve node creation deletion connection establishment removal 
examine involve node creation deletion connection establishment removal 
examine possible changes turn rules contributing nodes passive set 
evolving philosophers page august node deletion remove rule precondition removing node precondition removing node isolated isolated isolated mean isolated mean connections directed nodes nodes 
justification isolated node affect system independently removed 
ii connection link unlink rule precondition linking unlinking node precondition linking unlinking node connection directed quiescent state 
proposition know connection directed quiescent state 
proposition know achieved requiring nodes ps passive state 
justification justification quiescence initiator node ensures state consistent frozen quiescence initiator node ensures state consistent frozen respect connection enabling connection initialisation occur stable respect connection enabling connection initialisation occur stable environment 
iii node creation create rule precondition trivially true 
justification justification node created initially isolated consequently quiescent node created initially isolated consequently quiescent state respond initiate transactions nodes 
change transactions change transaction consists set partially ordered configuration actions change transaction consists set partially ordered configuration actions commands derived structural change satisfy pre conditions outlined commands derived structural change satisfy pre conditions outlined 
possible algorithm deriving change transactions outlined 
step step determine set connections determine set connections cs cs unlinked isolate nodes unlinked isolate nodes removed satisfy removed satisfy 
set connections 
set connections ls ls directly specified directly specified link unlink directives determine set nodes link unlink directives determine set nodes qs qs quiescent set quiescent set quiescent satisfy ii 

cs connections connection node removed ls connections connection link unlink directive qs nodes initiator node connection cs ls step form change passive set cps union passive sets ps node qs 

cps ps forall qs step perform configuration actions order unlink remove create performed time link link activate evolving philosophers page august noted change management system permits multiple change noted change management system permits multiple change transactions performed parallel set nodes locked change transactions performed parallel set nodes locked change superset change passive set 
detail lock set cps nodes recipient node connection cs ls lock set includes nodes connections directed change transaction lock set includes nodes connections directed change transaction attempt connection node deleted concurrent transaction 
simple example order illustrate management view change protocol briefly describe order illustrate management view change protocol briefly describe possible changes simple client server system 
system graph client server possible changes simple client server system 
system graph client server system shown 
simple client server system adding client change passive set ii unlinking removing client change passive set iii removing server change passive set passive client transactions completed 
order replace server passive client transactions completed 
order replace server modified server change specification provided change specification remove create link derived change transaction follows change transaction create unlink remove link activate application contribution description far concentrated management view change 
system description far concentrated management view change 
system consistency application dependent notion general requires nodes contribute consistency application dependent notion general requires nodes contribute evolving philosophers page august preservation 
main contributions application node preservation preservation 
main contributions application node preservation passive passive state application initiate new transactions prepared state application initiate new transactions prepared service transactions nodes 
change active passive state implemented service transactions nodes 
change active passive state implemented node converting general description passive state invariant constraint node converting general description passive state invariant constraint application terms 
referring local node variables preserved node 
application terms 
referring local node variables preserved node 
passive state node confirms responding passive state node confirms responding assert passive assert passive management 
furthermore order newly connected application node preserve consistency furthermore order newly connected application node preserve consistency opportunity initialise consistent new environment 
opportunity initialise consistent new environment 
similarly node disconnected opportunity clean similarly node disconnected opportunity clean order leave environment consistent state 
opportunities provided order leave environment consistent state 
opportunities provided management protocol management protocol link link unlink unlink transitions node transitions node necessary execute actions necessary 
actions may include communication necessary execute actions necessary 
actions may include communication nodes 
completion actions confirmed nodes 
completion actions confirmed assert passive assert passive response response management 
obviously actual actions need executed times application obviously actual actions need executed times application dependent 
simplified fact change rules described dependent 
simplified fact change rules described transient information node 
general actions may include initiation transient information node 
general actions may include initiation queries connected nodes 
complexity depends complexity application queries connected nodes 
complexity depends complexity application autonomy node 
confirms intuition system designed autonomy node 
confirms intuition system designed constituent nodes tightly coupled interdependent connection constituent nodes tightly coupled interdependent connection initialisation actions correspondingly complex 
application contribution illustrated detailed example section 
evolving philosophers page august 
evolving philosophers illustrate management scheme developed preceding sections applied illustrate management scheme developed preceding sections applied dining philosopher problem 
philosophers arranged ring dining philosopher problem 
philosophers arranged ring neighbouring philosophers sharing fork 
philosopher thinking hungry eating 
neighbouring philosophers sharing fork 
philosopher thinking hungry eating 
move hungry eating state philosopher acquire lefthand righthand move hungry eating state philosopher acquire lefthand righthand fork 
solution modification fully distributed solution due fork 
solution modification fully distributed solution due chandy misra permit dynamic change 
outline chandy misra solution chandy misra permit dynamic change 
outline chandy misra solution static number philosophers describe modifications necessary permit arbitrary static number philosophers describe modifications necessary permit arbitrary changes dining philosopher system addition deletion birth death philosophers changes dining philosopher system addition deletion birth death philosophers merging splitting communities philosophers 
coping dynamic changes merging splitting communities philosophers 
coping dynamic changes evolving philosophers problem 
change model solution described 
evolving philosophers problem 
change model solution described 
solution implemented tested conic environment distributed programming solution implemented tested conic environment distributed programming 
chandy misra solution problem philosopher philosopher implemented process communicates left implemented process communicates left righthand neighbours asynchronous message passing 
system structure depicted righthand neighbours asynchronous message passing 
system structure depicted 
schematic structure system chandy misra describe solution informally follows chandy misra describe solution informally follows fork clean fork clean dirty 
fork eat dirty remains dirty cleaned 
clean fork dirty 
fork eat dirty remains dirty cleaned 
clean fork remains clean eating 
philosopher cleans fork mailing remains clean eating 
philosopher cleans fork mailing 
eating philosopher satisfy requests forks finished eating 
eating philosopher satisfy requests forks finished eating 
eating philosophers defer requests forks clean satisfy requests forks eating philosophers defer requests forks clean satisfy requests forks dirty 
solution considered implement precedence graph edge dirty 
solution considered implement precedence graph edge directed node indicates precedence evolving philosophers page august hungry eating precedence graph solution philosopher node solution philosopher node precedence neighbour precedence neighbour holds fork clean holds fork clean holds fork dirty fork holds fork dirty fork transit transit chandy misra showed initially forks dirty located chandy misra showed initially forks dirty located philosophers precedence graph acyclic remain acyclic direction philosophers precedence graph acyclic remain acyclic direction edge edge change change starts eating edges philosopher starts eating edges philosopher simultaneously directed starts eating 
chandy misra prove simultaneously directed starts eating 
chandy misra prove immediately finishing eating philosopher yields precedence neighbours hungry immediately finishing eating philosopher yields precedence neighbours hungry philosophers commence eating finite time philosopher remains hungry forever 
precisely algorithm described follows messages passes fork neighbour shares take value left right passes request token fork neighbour boolean variables fork philosopher holds fork philosopher holds request token fork dirty fork philosopher dirty thinking hungry eating state philosopher initialisation forks dirty forks distributed philosophers precedence graph acyclic 
neighbours holds fork request token vice versa 
algorithm philosopher described set rules algorithm philosopher described set rules guard action guard action form single guarded command 
requesting fork hungry fork send false releasing fork eating dirty send dirty false fork false receiving request token receive true receiving fork token receive fork true dirty philosopher hungry eating transition hungry fork left fork right evolving philosophers page august eating true hungry false dirty left true dirty right true philosopher eating thinking transition eating eating time expired thinking true eating false philosopher thinking hungry transition thinking thinking time expired hungry true thinking false evolving community dining philosophers consider creation ring community philosophers consider creation ring community philosophers addition new philosopher birth deletion existing philosopher death 
major addition new philosopher birth deletion existing philosopher death 
major changes community performed merging splitting communities philosophers 
application contribution dynamic change permit philosopher nodes subject change extend algorithm permit philosopher nodes subject change extend algorithm support management application interface described section 
particular algorithm support management application interface described section 
particular algorithm support passive state provide initialisation actions support passive state provide initialisation actions linked unlinked philosopher 
consistency requirements system fork shared adjacent connected philosophers ii precedence graph remains acyclic 
base case single philosopher node taken care connecting base case single philosopher node taken care connecting permitting possess forks 
philosopher passive state definition passive section philosopher passive state firstly definition passive section philosopher passive state firstly currently engaged transaction initiated sent currently engaged transaction initiated sent answered answered secondly initiate new transactions 
secondly initiate new transactions 
hungry hungry 
active true philosopher active management state passive true philosopher passive state 
activate management request philosopher active management request philosopher passive 
philosopher thinking hungry transition active thinking thinking time expired hungry true thinking false passive active transition activate assert active active passive management transition hungry assert passive modified rule ensures philosopher move hungry state modified rule ensures philosopher move hungry state active active rule ensures philosopher passive rule ensures philosopher passive hungry 
philosopher initiate engaged transactions hungry 
philosopher initiate engaged transactions hungry state rules satisfy management requirements active passive states 
hungry state rules satisfy management requirements active passive states 
note neighbouring philosophers passive hungry 
case note neighbouring philosophers passive hungry 
case evolving philosophers page august shared fork dirty precedence edge directed holder dirty shared fork dirty precedence edge directed holder dirty fork 
philosopher link unlink actions rules deal actions required unlink link connection rules deal actions required unlink link connection philosophers 
messages new passes new fork neighbour shares connection initialisation new passes new request token fork neighbour link management request initialise connection philosopher shares fork philosopher unlink management request connection philosopher shares fork philosopher unique identity philosopher fork uses left right connection unlink fork false false dirty false assert passive initialising connection philosopher link fork true false dirty true assert passive initialising connection philosopher allocates fork link fork philosopher fork fork true dirty true send new true send new assert passive initialising connection link receive new true receive new fork true dirty true assert passive rule ensures connection philosophers unlinked rule ensures connection philosophers unlinked shared fork removed 
rules responsible allocation forks shared fork removed 
rules responsible allocation forks connections linked 
rule deals trivial case philosopher rule deals trivial case philosopher connected 
case philosopher allocated dirty forks eat 
rules connected 
case philosopher allocated dirty forks eat 
rules ensure global consistency requirements system ensure global consistency requirements system philosophers violated 
philosophers connected satisfy fork philosophers violated 
philosophers connected satisfy fork sharing ensuring fork allocated 
achieve assume sharing ensuring fork allocated 
achieve assume evolving philosophers page august unique identity identities total ordering 
unique identity identities total ordering 
philosopher precedes neighbour total ordering decides fork philosopher precedes neighbour total ordering decides fork allocated 
consequently fork allocated 
satisfy preservation acyclic precedence allocated 
consequently fork allocated 
satisfy preservation acyclic precedence graph allocation philosopher ends having dirty forks 
graph allocation philosopher ends having dirty forks 
demonstrate rules maintain acyclic precedence graph demonstrate rules maintain acyclic precedence graph arbitrary changes 
creating community philosophers configuration specification describes ring philosopher processes ring forall create forall link mod mod corresponding change transaction case simply specification added activate corresponding change transaction case simply specification added activate actions follows forall activate 
preserve precedence graph invariant forks distributed asymmetrically preserve precedence graph invariant forks distributed asymmetrically philosopher forks correspondingly forks see philosopher forks correspondingly forks see conditions original algorithm 
rules achieve identity conditions original algorithm 
rules achieve identity philosopher precede total ordering 
philosopher allocate forks philosopher precede total ordering 
philosopher allocate forks neighbours consequently forks 
birth new philosopher configuration specification adds new philosopher configuration specification adds new philosopher existing existing neighbours neighbours respectively unlink unlink create link link link link applying change algorithm previous section change specification applying change algorithm previous section change specification produces change transaction 
pre conditions unlink link produces change transaction 
pre conditions unlink link quiescent set qs determined neighbours quiescent set qs determined neighbours node created node created change change passive set passive set initiate transactions initiate transactions request request forks forks decisions state forks change 
decisions state forks change 
example insert new philosopher example insert new philosopher system depicted system depicted quiescent linked linked new quiescent linked linked new 
change passive set includes 
change passive set includes 
note change transaction 
note change transaction evolving philosophers page august outlined actions line may executed parallel 
create unlink unlink link link link link activate fork shared discarded unlinked 
linking fork shared discarded unlinked 
linking pairs allocation shared fork case pairs allocation shared fork case pair pair forks forks 
instance pair pair forks forks 
instance example addition example addition perform allocation precede perform allocation precede total ordering 
fork shared total ordering 
fork shared currently held currently held retain retain dirty fork shared dirty fork shared fork shared fork shared allocate allocate shared dirty fork fig 
clearly preserves acyclic graph 
addition addition addition philosopher death philosopher removal philosopher removal philosopher neighbours neighbours opposite neighbours opposite neighbours respectively specified program remove link link results change transaction unlink unlink remove link link activate transaction ensures transaction ensures quiescent state quiescent state unlinked unlinked removed 
consequently linking removed 
consequently linking decisions state decisions state forks change 
allocation ensure pair ends forks change 
allocation ensure pair ends forks 
example removed philosopher forks 
example removed philosopher retain dirty retain dirty evolving philosophers page august fork shared fork shared preserving acyclic precedence 
removal 
removed 
removal philosopher merging communities ring pa ring pb link unlink merging philosopher rings communities rings philosophers called communities rings philosophers called pa pa size size pb pb size size respectively shows connections unlinked linked respectively shows connections unlinked linked merge rings philosophers 
shaded nodes indicate change passive set 
change merge rings philosophers 
shaded nodes indicate change passive set 
change specified follows merge unlink pa pa mod pa mod pa pb pb mod pb mod pb link pa pb pb pa pa mod pb mod pb mod pa mod corresponding change transaction merge transaction evolving philosophers page august pa pa pa pa pb pb pb pb unlink pa pa pa pa pb pb pb pb link pa pb pb pa pa pb pb pb activate pa pa pa pa pb pb pb pb justify change maintains acyclic precedence graph need justify change maintains acyclic precedence graph need concerned connection completes ring 
concerned connection completes ring 
performed pa pb pa pb 
rules defined performed pa pb pa pb 
rules defined linking unlinking philosophers ensure philosopher allocates fork linking unlinking philosophers ensure philosopher allocates fork connection retains fork shared fork allocates fork connection retains fork shared fork allocates fork neighbour 
case allocating philosopher dirty forks neighbour 
case allocating philosopher dirty forks forks 
fact situation allocating philosopher newly connected forks 
fact situation allocating philosopher newly connected neighbour fork matter new fork allocated neighbour fork matter new fork allocated philosopher forks 
easily argued follows philosophers forks philosophers connected fork philosophers forks philosophers connected fork consequently remaining philosophers forks 
consequently remaining philosophers forks 
philosophers forks 
original algorithm ensures philosopher hold philosophers forks 
original algorithm ensures philosopher hold clean dirty fork simultaneously consequently precedence graph acyclic 
note inserting new philosopher existing ring philosophers equivalent note inserting new philosopher existing ring philosophers equivalent merging ring philosopher ring existing ring 
splitting ring merging ring philosopher ring existing ring 
splitting ring smaller rings requires change specification opposite merge 
smaller rings requires change specification opposite merge 
connection completes ring preserves global invariant 
section shown management protocol applied specific application 
section shown management protocol applied specific application 
philosophers change passive set affected change allowing rest philosophers change passive set affected change allowing rest system proceed normal execution 
changes carried parallel stable system proceed normal execution 
changes carried parallel stable states ensured node quiescence permits consistent decisions linking states ensured node quiescence permits consistent decisions linking unlinking 
different cases example prototyped validated unlinking 
different cases example prototyped validated conic environment distributed programming 
required integrate conic environment distributed programming 
required integrate change management states current environment 

dependent transactions discussions considered party independent transactions 
discussions considered party independent transactions 
relax restriction independence discuss systems relax restriction independence discuss systems dependent dependent transactions transactions involve consequent transactions 
general systems include independent involve consequent transactions 
general systems include independent dependent party transactions 
evolving philosophers page august dependent dependent transaction party transaction completion may depend transaction party transaction completion may depend completion consequent transactions 
described precisely follows described precisely follows dependent transaction exists chain dependent transaction exists chain transactions transactions exception exception may depend completion may depend completion completion consequent successor transaction 
forbid cycles chain completion consequent successor transaction 
forbid cycles chain require progress ensure transaction bounded ii deadlock avoided example cycle nested transactions 
require initiator dependent transaction informed completion require initiator dependent transaction informed completion consequent transactions 
enables node determine transactions initiated consequent transactions 
enables node determine transactions initiated completed achieved passive state 
extension independent transaction approach consider number client nodes ci access printer server agent ai consider number client nodes ci access printer server agent ai server manager node 
case transaction may consist sequence server manager node 
case transaction may consist sequence message interactions involving ci ai instance may initiate transaction message interactions involving ci ai instance may initiate transaction request print service completion dependent consequent transactions request print service completion dependent consequent transactions initiate print lines 
dependent transactions initiate print lines 
dependent transactions potential consequent denoted potential consequent denoted dependent consequent dependent consequent illustrated illustrated si dependent ri dependent change transaction discussed relation independent transactions removal change transaction discussed relation independent transactions removal require quiescent agents ai passive state 
require quiescent agents ai passive state 
implies removed complete current party transactions ri implies removed complete current party transactions ri completes associated processing 
ci may lines completes associated processing 
ci may lines send si complete may require ri transactions clearly sufficient send si complete may require ri transactions clearly sufficient maintain system consistency 
client agent manager interaction dependent transactions evolving philosophers page august change passive set nodes consists set nodes change passive set nodes consists set nodes initiate transactions target quiescent node plus node guarantee initiate transactions target quiescent node plus node guarantee node quiescent state 
nodes may initiate consequent transactions target node node quiescent state 
nodes may initiate consequent transactions target node satisfy completion arriving transactions 
main approaches providing quiescence satisfy completion arriving transactions 
main approaches providing quiescence systems dependent transactions 
require consequent transactions recognised application 
recognise transactions part consequence wider recognise transactions part consequence wider transaction passive state reached client transaction completes transaction passive state reached client transaction completes wait completion client printer passive 
wait completion client printer passive 
approach disadvantage having embed application knowledge approach disadvantage having embed application knowledge transaction dependencies 
addition information hidden configuration transaction dependencies 
addition information hidden configuration view 
transactions implicitly ripple back require time complete view 
transactions implicitly ripple back require time complete require bounded time 
possibility abort transactions require bounded time 
possibility abort transactions consequents passive state 
example abort client transaction consequents passive state 
example abort client transaction carries overhead complicating regain consistency transaction carries overhead complicating regain consistency transaction abortion cf 
recovery 
aborting reduces dependent transactions independent transactions abortion cf 
recovery 
aborting reduces dependent transactions independent transactions expense complicating application code 

expand passive set include nodes initiating dependent transactions result 
expand passive set include nodes initiating dependent transactions result transactions link node targeted change requires transaction dependencies reflected taken account requires transaction dependencies reflected taken account configuration level 
configuration level wish manage changes configuration level 
configuration level wish manage changes preferred approach 
generalised passive state systems dependent transactions proposed approach systems dependent transactions expand proposed approach systems dependent transactions expand passive set ps include nodes initiate transactions consequent passive set ps include nodes initiate transactions consequent transactions node required quiescent 
passive state may transactions node required quiescent 
passive state may reachable nodes utilising dependent transactions 
consider example 
reachable nodes utilising dependent transactions 
consider example 
system suppose system suppose passive state passive state initiated transaction initiated transaction situation situation transaction transaction complete transaction complete transaction complete initiate complete initiate consequently consequently move passive state bounded time requested 
move passive state bounded time requested 
proposition hold dependent systems 
system cyclic dependencies 
consider providing consider providing ordering ordering passive set nodes passive set nodes passive order dependence graph 
example passive order dependence graph 
example evolving philosophers page august order 
order determined general 
order 
order determined general 
example transaction requires requires followed example transaction requires requires followed 
system mutual dependencies 
appropriate approach generalise definition passive state include appropriate approach generalise definition passive state include means dependent transactions complete node node general passive general passive state accept service transactions state accept service transactions initiate initiate consequent transactions currently engaged non consequent transaction initiated ii initiate new non consequent transactions 
node general passive state respond transactions passive state node general passive state respond transactions passive state initiate consequent transactions required completion transactions initiate consequent transactions required completion transactions responds 
independent transactions definition general passive state reduces responds 
independent transactions definition general passive state reduces passive 
example node example node general passive state initiate general passive state initiate result responding result responding may initiate may initiate permit completion permit completion 

conciseness henceforth passive mean general passive unambiguous 
independent dependent transactions node resultant properties systems dependent transactions proposition reachability passive state generalised definition passive state proposition holds systems generalised definition passive state proposition holds systems independent dependent transactions 
justification proposition added justification dependent transactions complete proposition added justification dependent transactions complete bounded time recipient nodes general passive state respond bounded time recipient nodes general passive state respond initiate consequent transactions 
definition definition quiescence quiescence systems dependent transactions remains systems dependent transactions remains independent transactions see section 
discussed passive independent transactions see section 
discussed passive evolving philosophers page august set expanded order account dependent transactions lead consequent set expanded order account dependent transactions lead consequent transactions node 
enlarged passive set eps node eps defined follows nodes ps eps 
nodes initiate dependent transactions result consequent transactions nodes initiate dependent transactions result consequent transactions eps 
proposition passive requirements quiescent state generalised definition passive state enlarged passive set proposition generalised definition passive state enlarged passive set proposition holds independent dependent systems node nodes enlarged holds independent dependent systems node nodes enlarged passive set respect passive quiescent 
justification proposition added justification nodes initiate transactions proposition added justification nodes initiate transactions independent dependent consequent passive transactions involving independent dependent consequent passive transactions involving complete 
proposition reachability quiescent state generalised definition passive state enlarged passive set proposition generalised definition passive state enlarged passive set proposition holds independent dependent systems 
justification follows directly propositions 
change rules change rules remain region quiescence change change rules remain region quiescence change occur results enlarged set passive nodes specified eps 
composition rules foregoing concerned flat level graphs connected foregoing concerned flat level graphs connected nodes 
general concerned hierarchic graph structure nodes nodes 
general concerned hierarchic graph structure nodes level may implemented graphs connected nodes level detail 
level may implemented graphs connected nodes level detail 
example conic system represents systems configurations logical nodes example conic system represents systems configurations logical nodes logical nodes implemented graph subnodes tasks 
conic logical logical nodes implemented graph subnodes tasks 
conic logical node unit change allocation task unit concurrency 
ensure node unit change allocation task unit concurrency 
ensure change management system need concerned level configuration change management system need concerned level configuration graph time able derive transaction dependency relations node graph time able derive transaction dependency relations node subnodes 
node composed subnodes referred subnodes 
node composed subnodes referred composite node 
substitution rule determine dependencies composite nodes composite node 
substitution rule determine dependencies composite nodes dependencies constituent nodes node composition substitution composing nodes substitute consequents occurrence dependent composing nodes substitute consequents occurrence dependent transaction hidden composition see evolving philosophers page august derived dependencies simple node composition complex structures rule connection repeated complex structures rule connection repeated application node composition 
example consider fork structure application node composition 
example consider fork structure potentially dependent bc de derived dependencies repeated node composition internal transactions visible composite nodes 
example philosopher internal transactions visible composite nodes 
example philosopher node evolving philosophers problem implemented composite node node evolving philosophers problem implemented composite node shown 
solution structure follows addresses original shown 
solution structure follows addresses original dining philosophers problem 
philosopher servant phil phil composite philosopher node philosopher subnode implements simple state machine control transitions philosopher subnode implements simple state machine control transitions evolving philosophers page august thinking hungry eating servant subnode encapsulates protocols thinking hungry eating servant subnode encapsulates protocols necessary acquire forks 
internal transactions necessary acquire forks 
internal transactions visible visible composite node composite node phil phil noted dependency philosopher transaction noted dependency philosopher transaction consequent transactions consequent transactions transactions request left transactions request left right fork visible composite node 
dependency means node right fork visible composite node 
dependency means node phil passive subnodes philosopher servant passive 
prototype implementation change management conic adopted prototype implementation change management conic adopted simplified pragmatic strategy 
change management system views system simplified pragmatic strategy 
change management system views system level graph logical nodes 
mentioned logical nodes unit change level graph logical nodes 
mentioned logical nodes unit change unit allocation conic 
logical nodes constrained design communicate unit allocation conic 
logical nodes constrained design communicate independent transactions management system need aware dependency independent transactions management system need aware dependency information 
structure logical node fixed node instantiation time 
transactions information 
structure logical node fixed node instantiation time 
transactions subnodes independent dependent shown 
simplify local node subnodes independent dependent shown 
simplify local node management implemented rule logical node passive management implemented rule logical node passive constituent constituent nodes passive 
local entity management state logical node 
composition provides coarser grain system configuration dynamic change composition provides coarser grain system configuration dynamic change management 
finer grain decomposition appropriate expose management 
finer grain decomposition appropriate expose internal structure connected nodes accessible change 

discussion comprehensive model change management clearly comprehensive model change management clearly separates management responsibilities view application see fig 

separates management responsibilities view application see fig 

particular objectives section approached follows changes specified terms system structure 
changes specified terms primitives changes specified terms primitives create create remove remove link link unlink unlink refer system 
fact changes specified primitives derived refer system 
fact changes specified primitives derived difference specifications current desired system structures 
change specifications declarative 
derived change transactions include change control actions derived change transactions include change control actions activate activate specify parallelism sequencing actual change execution 
change specifications independent algorithms protocols change specifications independent algorithms protocols states application 
node configuration states node configuration states active active passive passive away specific application away specific application states provide convenient means viewing controlling application 
evolving philosophers page august changes leave system consistent state 
passive quiescent states possible inclusion connection passive quiescent states possible inclusion connection initialisation code provide application means preserve application initialisation code provide application means preserve application consistency convenient pragmatic manner 
changes minimise disruption application system 
change passive set identifies set nodes affected change 
fact set change passive set identifies set nodes affected change 
fact set currently minimal 
instance client server example section clients need currently minimal 
instance client server example section clients need passive respect particular server removed need prevented passive respect particular server removed need prevented initiating transactions nodes 
consider connection level 
current model provides change consider connection level 
current model provides change form creation deletion nodes connection changes 
change involves form creation deletion nodes connection changes 
change involves connections place emphasis connection entire node initiates connections place emphasis connection entire node initiates connection 
state connection disconnected connected passive 
state connection disconnected connected passive modelled consistency preserving actions associated active modelled consistency preserving actions associated connection 
leads finer grain model node active respect connection 
leads finer grain model node active respect connection passive respect 
approach appears promising ability connection passive respect 
approach appears promising ability describe connection changes finer level granularity require passive describe connection changes finer level granularity require passive substates 
furthermore design connection level actions difficult substates 
furthermore design connection level actions difficult node environment may partially active making consistency difficult node environment may partially active making consistency difficult attain 
current approach requiring complete node quiescence may attain 
current approach requiring complete node quiescence may minimal terms disruption system sufficient far simpler minimal terms disruption system sufficient far simpler reason 
dependent independent transactions approach adopted dependent transactions generalises passive state node approach adopted dependent transactions generalises passive state node permit initiation consequent transactions enlarges passive set include nodes permit initiation consequent transactions enlarges passive set include nodes initiate dependent transactions consequents nodes previously set 
initiate dependent transactions consequents nodes previously set 
expansion passive set corresponds intuition changes systems expansion passive set corresponds intuition changes systems interdependent require global quiescence cause disturbance close coupling interdependent require global quiescence cause disturbance close coupling change difficult 
believe model confirms extent quantifies change difficult 
believe model confirms extent quantifies interdependence 
approach alleviating interdependence compose dependent interdependence 
approach alleviating interdependence compose dependent nodes composite nodes communicate independent transactions 
changes nodes composite nodes communicate independent transactions 
changes performed coarse grain level composite nodes constituent performed coarse grain level composite nodes constituent dependent nodes 
alternatively dependent systems reduced independent systems dependent nodes 
alternatively dependent systems reduced independent systems purpose management transactions aborted passive nodes 
cost purpose management transactions aborted passive nodes 
cost extra complexity incurred application preserve consistency presence aborted extra complexity incurred application preserve consistency presence aborted transactions atomic transactions 
real systems cost may inevitable deal transactions atomic transactions 
real systems cost may inevitable deal failure 
detection passive state evolving philosophers page august transactions model require initiator aware completion transactions model require initiator aware completion transaction dependent independent see definition section 
required transaction dependent independent see definition section 
required order node determine outstanding transactions initiated complete order node determine outstanding transactions initiated complete passive 
case possible node assume passive 
case possible node assume completion transaction delayed communication outstanding 
completion transaction delayed communication outstanding 
requirement relaxed permit instance asynchronous messages node requirement relaxed permit instance asynchronous messages node management system method detecting termination transactions 
management system method detecting termination transactions 
require distributed termination algorithm diffusing detection algorithm require distributed termination algorithm diffusing detection algorithm francez 
assuming messages overtake management system francez 
assuming messages overtake management system initiate detection sending queries dependency chains nodes passive set initiate detection sending queries dependency chains nodes passive set obtaining confirmation nodes agree passive 
related changes described model directed operational system terms changes described model directed operational system terms changes software components interconnections 
contrasted changes software components interconnections 
contrasted model change incorporated inscape environment concentrates change model change incorporated inscape environment concentrates change validation relation static definition system 
inscape utilises semantic interconnection validation relation static definition system 
inscape utilises semantic interconnection model form useful adjunct model permitting static change validation model form useful adjunct model permitting static change validation application system 
promising related approach model application system 
promising related approach model analyse dynamic configuration changes suggested graph grammars garp analyse dynamic configuration changes suggested graph grammars garp grammars provides formal graphical description system structure grammars provides formal graphical description system structure equivalent configuration specification 
changes specified terms equivalent configuration specification 
changes specified terms transitions transitions act system structure produce new structures 
approach act system structure produce new structures 
approach chosen model aspects message passing structural level making chosen model aspects message passing structural level making specification changes complex configuration level 
model specification changes complex configuration level 
model appears purely specification purposes gives indication appears purely specification purposes gives indication realised 
instance clear detailed consistency constraints preserved realised 
instance clear detailed consistency constraints preserved actions evolving philosophers modelled grammars 
pragmatic approaches dynamic change management tended concentrate pragmatic approaches dynamic change management tended concentrate code replacement 
simple strategies little traditional object code patching code replacement 
simple strategies little traditional object code patching relies recovery ensure system consistency 
frieder segal relies recovery ensure system consistency 
frieder segal suggested scheme procedure replacement require recovery 
ensure suggested scheme procedure replacement require recovery 
ensure component quiescence occur rely detecting procedure quiescence component quiescence occur rely detecting procedure quiescence performing change 
continuously active procedures replaced scheme 
performing change 
continuously active procedures replaced scheme 
concerned arbitrary restructuring system scheme firmly concerned arbitrary restructuring system scheme firmly focussed replacement 
transformational approach advocates changes dealt transformational approach advocates changes dealt formal specification level 
new system regenerated changed specification formal specification level 
new system regenerated changed specification transformational techniques 
order avoid regenerating entire system transformational techniques 
order avoid regenerating entire system evolving philosophers page august changed parts need identified generated 
dynamic changes changed parts need identified generated 
dynamic changes operational system need supported way 
operational system need supported way 
transformational needs describe non trivial systems composition transformational needs describe non trivial systems composition components model provides means obtaining required structural changes components model provides means obtaining required structural changes new structural specification deriving change transactions integration new structural specification deriving change transactions integration changes dynamically 
sight approaches appear changes dynamically 
sight approaches appear incompatible model provides systematic pragmatic basis incompatible model provides systematic pragmatic basis conjunction transformational approach 
concentrated evolutionary change change concentrated evolutionary change change agent external system 
change protocol equally invoked internally agent external system 
change protocol equally invoked internally application 
application minimise disruption caused change application 
application minimise disruption caused change change quiescence detected externally imposed 
change occur result failure 
explicitly handled change occur result failure 
explicitly handled model believe failures handled nodes incorporate necessary recovery model believe failures handled nodes incorporate necessary recovery actions 
restore remaining system consistency conjunction actions 
restore remaining system consistency conjunction reconfiguration actions triggered detection failure 
area requires reconfiguration actions triggered detection failure 
area requires investigation 
management evolutionary change difficult important issue 
management evolutionary change difficult important issue 
essential techniques adopted practical soundly 
believe essential techniques adopted practical soundly 
believe approach clear separation structural management application concerns approach clear separation structural management application concerns promising regards 
small case studies prototyped tested conic promising regards 
small case studies prototyped tested conic environment distributed programming provides textual graphical facilities environment distributed programming provides textual graphical facilities performing dynamic configuration changes 
remains refined formalised performing dynamic configuration changes 
remains refined formalised tested larger case studies 
authors acknowledge discussions colleagues morris sloman authors acknowledge discussions colleagues morris sloman dulay kevin keng ng formulation ideas 
dulay kevin keng ng formulation ideas 
particular acknowledge contribution andrew young prototyping refining particular acknowledge contribution andrew young prototyping refining change management model 
gratefully acknowledge serc acme directorate change management model 
gratefully acknowledge serc acme directorate ge cec rex project financial support evolving philosophers page august andrews overview sr language implementation andrews overview sr language implementation acm toplas vol january pp 

balzer year perspective automatic programming balzer year perspective automatic programming ieee transactions ieee transactions software engineering se nov 
barbacci weinstock wing programming barbacci weinstock wing programming processor memory switch level processor memory switch level proc 
ieee th int 
conf 
software eng proc 
ieee th int 
conf 
software eng singapore april pp 
bloom dynamic module replacement distributed system technical report bloom dynamic module replacement distributed system technical report mit lcs tr mit laboratory computer science march 
chandy misra drinking philosophers problem chandy misra drinking philosophers problem acm acm toplas vol october pp 

de programming large versus programming programming large versus programming proc 
conf 
reliable software pp 

dijkstra hierarchical ordering sequential processes operating systems dijkstra hierarchical ordering sequential processes operating systems techniques hoare eds academic press 
francez distributed termination francez distributed termination acm toplas acm toplas vol january vol january pp 

frieder segal dynamic program updating distributed frieder segal dynamic program updating distributed computer system computer system proc 
ieee conf 
maintenance proc 
ieee conf 
maintenance phoenix arizona phoenix arizona pp 
friedberg transparent reconfiguration requires third party connect friedberg transparent reconfiguration requires third party connect tr computer science department university rochester new york nov 
kaplan kaiser garp graph abstractions concurrent kaplan kaiser garp graph abstractions concurrent programming esop nancy france march springer verlag pp 

kaplan campbell specifying concurrent systems kaplan campbell specifying concurrent systems grammars proc 
th international workshop software specification grammars proc 
th international workshop software specification design pittsburgh may pp 

kramer cunningham notation functional kramer cunningham notation functional design distributed processing systems design distributed processing systems ieee proc 
int 
conf 
parallel ieee proc 
int 
conf 
parallel processing aug pp 

kramer magee dynamic configuration distributed systems kramer magee dynamic configuration distributed systems ieee ieee transactions software engineering se april pp 

kramer magee sloman conic toolkit building kramer magee sloman conic toolkit building distributed systems iee proceedings vol 
pt 
march pp 
kramer magee ng graphical configuration programming ieee kramer magee ng graphical configuration programming ieee computer vol october pp 
leblanc friedberg hpc model structure change leblanc friedberg hpc model structure change distributed systems distributed systems ieee trans 
computers ieee trans 
computers vol 
december pp vol 
december pp 
lehman program evolution lehman program evolution proceedings symposium empirical proceedings symposium empirical foundations information software science atlanta georgia nov 
magee kramer sloman constructing distributed systems magee kramer sloman constructing distributed systems conic ieee trans 
software engineering se june pp 

misra reasoning networks communicating processes inria advanced misra reasoning networks communicating processes inria advanced evolving philosophers page august nato studies institute logics models verification specification nato studies institute logics models verification specification concurrent systems nice france 
perry software interconnection models proc 
th int 
conf 
software perry software interconnection models proc 
th int 
conf 
software engineering april pp 
evolving philosophers page august 
