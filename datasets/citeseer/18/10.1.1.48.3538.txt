proving implications algebraic approximation michael codish department mathematics computer science ben gurion university pob beer israel bgu ac il applies techniques algebraic approximation provide effective algorithms determine validity universally quantified implications lattice structures 
generalize known result states semilattice approximated element lattice 
show validity universally quantified implication possibly infinite domain determined examining validity simpler domain size related number constants 
known new results high potential providing practical automated techniques various areas application computer science 
applies techniques algebraic approximation provide effective algorithms determine validity universally quantified implications identities lattice structures 
approximation main methods scientific process common practice various branches mathematics computer science 
basic idea approximating mathematical structure properties objects complex structure may investigated examination simpler structure preserves important features structure 
methods approximation algebra developed works ma birkhoff 
computer science approximation applied context semantic program analysis formalized terms galois connections cousot cousot 
universally quantified formula form domain structure obeys axioms theory set theory propositional logic group theory familiar general approaches applied trying determine true proof theoretic approach suitable system axioms reduce solved form model theoretic approach interpretations enumerated interpretation satisfies checked determine satisfies approaches general computationally hard case finite domain 
proof theoretic approach generally seeks proof exponential search space 
number interpretations examined naive model theoretic approach may grow exponentially number variables occurring formulae 
course approaches may support efficient algorithms 
example search guided specific strategy proof theoretic approach necessary examine interpretations model theoretic approach 
programmer perspective model theoretic approach attractive straightforward programming language enumerate interpretations 
examples illustrate trivial implementation prolog 
hand proof theoretic approach attractive enables consideration search strategies heuristics 
show implication valid class algebraic structures need check substitutions variables elements structures structures follows results algebraic approximation sufficient check validity called irreducible structures generate ones complicated 
example irreducible boolean algebra element boolean algebra 
required irreducible structures substructures members case validity exactly defined validity corresponding irreducible structures 
words valid valid corresponding irreducible structures 
know description irreducible structures subclasses classical algebraic structures semigroups groups lattices see example 
want apply results determine validity implications specific structures contain constants names elements structure run problems 
classical algebraic theories formulae explicitly arbitrary elements underlying structures 
example lattice theory may mention top bottom elements lattice usually refer explicitly elements 
signature consists special symbols 
case lattices contrast proving theorems context specific applications common refer explicitly arbitrary elements underlying structure 
means want prove properties structure necessarily general class objects structure 
example consider lattice types context programming language type declarations 
context natural ask program typed respect type declaration 
particular program constructs belong corresponding declared types specific underlying lattice types 
consequently may question validity implication contains explicit elements underlying lattice types 
express validate theorems refer explicit constants underlying structure enrich signature language 
done including names constants additional ary functions signature 
models constructed signature marked elements correspond constants signature 
particular wish discuss lattice structures explicit constants longer classic lattice theory 
dealing structure consisting marked elements 
worthwhile notice addition constant signature change crucially properties models 
set quasi identities non trivial boolean algebra coincides set quasi identities class boolean algebras 
course property true boolean algebra marked elements 
shall give additional examples 
note determine validity formula need consider elements underlying domain marked elements 
sufficient consider marked elements correspond constant symbols formula 
investigate practical approach determine truth implications possibly infinite semilattice distributive lattice formula constants identify minimal class objects validity implies validity size objects related number constants occurring 
particular contains constants contains single object valued boolean lattice 
case result known provides decision procedure implications underlying structure infinite 
case naive approach enumeration course exponential 
number cases reduced jd jd size domain number variables formula 
cases exist efficient techniques determine validity specific types propositional formula 
examples include binary decision diagrams circuit design propositional formulae program analysis 
techniques shown remain effective domain extended contain small number additional constants 
lattices semilattices play central role domain theory provide foundation denotational semantics various formal techniques computer science 
need determine validity implication common various application areas computer science general applicability results 
particular results importance context static program analysis example central question determine program state implies precondition conditional statement type analysis set constraints implications set constraints arise semantic techniques program analysis successive approximations solution evaluated long approximation implied previous 
potential area application context constraint languages constraint satisfaction basic operations computations 
main contribution formal justification enables provide effective algorithms determine validity universally quantified implications possibly containing constants spirit examples section 
important consider case constants common case practical applications 
approach quickly impractical number constants increases 
consequently approach mainly applicable cases number constants appear formulae small 
case example context polymorphic type analysis investigated involves implications form illustrated example 
implementation application principles described illustrated considerable improvements 
application aware zero principle described example involve marked elements 
believe results described general interest high potential applications computer science 
rest organized follows 
section illustrates motivating examples 
section provides necessary preliminary background 
section provides main contribution 
section describes application section presents short 
preliminary version unsuitable notion homomorphism 
current refines notion homomorphism making explicit mapping elements implicitly assumed proofs 
motivating examples examples illustrate spirit results 
example determine truth equality form possibly infinite boolean algebra sets sufficient test equality values ranging viewing set union intersection completion respectively propositional disjunction conjunction negation 
surprising known boolean algebra sets approximated element boolean algebra 
interesting observe concise prolog program prove disprove equations form prove 
prove 
prove neg 
prove 
prove 
prove neg 
prove 
prove 
prove 
prove 
prove prove prove 
imply prove prove 
equiv imply imply 
predicate prove specifies proven conjunctions formula specified relations neg 
program defines relations correspond equations clause imply prove prove specifies implication form verified 
definition simple intuition logically equivalent 
prolog program expresses terms provability substitutes logical negation non provability negation failure 
relation implies interpreted follows case truth assignment true true 
observe true provable defined executing prove constructs backtracking truth assignment true 
false stated goal prove fail 
clause equiv imply imply specifies equivalence determined checking implies implies knowledgeable prolog programmer observe negation failure context correct queries form imply variables may assume loss generality case contain variable replace 
determine truth equation query program goal equiv prove prove 
check query program goal equiv prove neg prove neg neg 
example comparison network network constructed wires comparators inputs outputs 
comparator device inputs outputs min max 
typically refer sequences inputs outputs comparison network 
sorting network comparison network output sequence monotonically increasing input sequence 
zero principle cf states comparison network sorting network correctly sorts sequences 
network correctly sorts correctly sorts numeric inputs 
generalize notion comparison network accept inputs distributive lattice 
comparator device inputs outputs follows comparison network transforms sequences ordered chain transforms sequence inputs ordered chain 
see consider comparison network transforms inputs outputs output expressed formula involving inputs fx operators exercise 
prove comparison network transforms inputs chain prove tw illustrates true inputs ranging true inputs ranging distributive lattice 
particular proves zero principle sorting networks 
known application justified results involves implications contain constants underlying domain illustrated example consider arbitrary possibly infinite semi lattice contains element 
show determine truth implication 
sufficient test implication element chain 
prolog program implements theorem prover implications involving constant upper bound operation obtained adding facts program example 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
lub corresponds atb prolog query determine valid imply prove lub lub lub lub prove lub 
prove order prove implications kind sufficient test implication element chains chain 
implication variables reduces cost naive enumeration 
element chains dual may consult single element chain twice replacing definition lub prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove lub 
prove check dual queries imply prove lub lub lub lub prove lub 
imply prove lub lub lub lub prove lub 
cases implication verified considering marked elements 
example valid element chain viewing constant universally quantified variable 
consequence techniques example suffice determine validity 
hand results show invalidity implication semilattice marked element determined testing element chain 
consider implication 
easy verify valid element chain previous approach applicable 
testing validity element chains determine valid semi lattice bottom element consider implication te 
valid element chain 
test validity element chains 
fact invalid chains determine invalid semilattice marked elements 
preliminaries review basic algebraic concepts obtain results 
detailed discussion see example 
semilattices lattices lattice algebra binary operations associative commutative idempotent satisfy axioms add axiom distributivity dual equivalent obtain distributive lattice 
semilattice algebra single binary operation associative commutative idempotent 
write semilattice refer upper semilattice binary operation corresponds upper bound operator 
results equally stated lower semilattice binary operation corresponds greatest lower bound operator 
identity lattices semilattices partially ordered sets pair elements upper bound greatest lower bound upper bound known 
correspondence operations partial order characterized atb different elements semi lattice 
may assume loss generality marked elements consider concrete structure example computer science applications usually assume element name language formulae 
typically formulae interest contain explicitly referenced constants course ground formula pose problem symbol unique interpretation domain 
case formula contains variables constants confronted problem attempting determine validity formula non classical object 
structure additional ary operations marked elements correspond constants formula 
mentioned adding ary operation signature may change greatly properties 
example obvious implication example valid element lattice 
examples nontrivial known fact finite group finite basis identities turns wrong finite groups marked element known result part elementary theory ordered field real numbers decidable turns wrong ordered field real numbers constant corresponding non recursive real number 
lattice marked elements lattice set additional ary operations set names marked elements 
purposes may assume finitely marked elements 
reasoning validity formula may contain finitely constants 
semi lattice marked elements denote sub semi lattice generated denote unit te homomorphisms congruences lattices marked elements fa fb mapping called homomorphism 
satisfies 


note add new axioms marked elements definitions classical structures 
homomorphisms structures marked elements required preserve marked elements condition 
semilattices definition third condition 
follows definition number marked elements homomorphism preserves marked elements element sub semi lattice generated marked elements 
associate homomorphism binary relation defined 
known congruence cf 
congruence named kernel homomorphism 
say congruence trivial ideals filters closed filters semilattice 
upper lower semilattice refer filters ideals respectively 
filter named closed filter observe filter closed 
homomorphism semilattices unit join irreducible closed filter 
nontrivial unit join irreducible closed filter exists homomorphism denote ideal filter fi fi fi fi denote maximal filter contain observe closed filter 
denote maximal filter contain observe algebraic approximation say universal algebra approximated class universal algebras exists homomorphism algebra 
homomorphism said separate elements lattice marked elements approximated class lattices 
follows definition approximation intersection congruences corresponding homomorphisms separating elements trivial 
quasi identities denote signature algebra set variable symbols 
tl denotes term algebra corresponding free algebra 
mapping uniquely extended homomorphism tl denoted 
quasi identity universally quantified formula form tl 
say valid denoted homomorphism tl true 
known validity quasi identity preserved direct products subsystems 
particular class semilattices marked elements product approximating semi lattices quasi identity semilattice section show validity determined inspection smaller sub semilattice size determined number constants occurring 
known semilattice approximated class isomorphic copies element semilattice 
show semilattice marked elements constants approximated class semilattices constructed semilattice generated marked elements 
distinguish cases depending number marked elements 
show result minimal respect size ongoing research addresses general result 
results hold distributive lattices semilattices 
proofs similar 
approach problem determining validity quasi identity proposition follows birkhoff known theorem subdirect decomposition 
proposition semilattice marked elements approximated class semilattices marked elements 
quasi identity valid semilattice valid proof 
stated section validity quasi identity preserved direct products subsystems 
approximated follows definition algebraic approximation intersection kernels homomorphisms semilattices separate elements trivial 
follows birkhoff theorem represented subdirect product semilattices valid semilattice valid semilattice marked elements approximated class proposition reformulated follows quasi identity valid valid word semilattice proposition replaced word universal algebra 
particular result true distributive lattices marked elements 
ma proves axiomatizable class universal algebras generated coincides generated class consisting finite number finite semi lattices marked elements axiomatizable 
consequently quasi identity valid valid semi lattice approximated semilattice contains elements elements preserved homomorphism may viewed marked elements 
marked elements mean additional elements 
semilattice marked elements results case known included completeness 
element chain 
proposition birkhoff distributive lattice approximated fc proposition folklore semilattice approximated fc semilattice marked element semilattice marked element element chain 
possible consider semilattices approximate particular denote marked element letter proposition semilattice marked element approximated class proof 
consider cases 
case consider mapping defined ae 
case consider mapping defined ae cases homomorphism separates element chain approximated element chains 
formula containing variables marked letter constant 
examine validity element chain fulfill examinations 
examine validity element chains fulfill examinations 
approximation semilattice marked element element chains usually efficient 
cases contain isomorphic semilattices marked element approximated chain 
prove approximation minimal number elements 
assume contains element 
case contains isomorphic proposition semilattice marked element 
approximated fc contains exactly element 

proof 
proof direction analogous proof proposition prove direction observe separate element need element chain separate element need element chain chains approximated 
change previous statements word semilattice word distributive lattice 
proofs 
define distributive lattice case closed filter 
semilattice marked elements semilattice marked elements loss generality assume switch names 
denote chains respectively element semilattice fa cg element lattice fa denoted obtained adding bottom element lattice obtained adding top element semilattices illustrated 
proposition semilattice marked elements approximated class semilattices proof 
consider cases semilattices 
case consider mapping defined 
prove homomorphism show consider cases elements consequently true 
assume 
elements consequently true 
remaining case 
case consequently true 
homomorphism separates 
consider subcases case consider mapping defined prove homomorphism consider cases 
elements consequently true 
assume 
elements lnf tz consequently true 
consequently true 
homomorphism separates second case similar 
examine third case consider mapping defined prove homomorphism 
consider cases elements consequently true 
elements consequently true 
consequently true 
consequently true 
consequently true 
homomorphism separates observe empty obtained homomorphism 
case consider mapping defined ae obvious homomorphism separates corollary quasi identity valid class semilattices marked elements valid class semilattices observe semilattices mentioned proposition approximated 
semilattices consequently determine truth quasi identity constants semilattice sufficient determine validity convenient semilattices determine validity 
worthy notice statement proposition depend relationship elements general simplify class semilattices approximate case case proposition distributive lattice marked elements approximated class distributive lattices proof 
proof similar proposition 
corollary quasi identity valid class distributive lattices marked elements valid class distributive lattices application codish describe polymorphic type analysis logic programs 
context domain types lattice depicted 
ordering lattice reflects inclusion sets terms described type 
types represented called lub clauses form body body conjunction atoms form lub atom specifies upper bound form underlying domain types 
example lub clause append list list list lub specifies type append relation arguments respectively lists type atb type form applied determine result concatenating list real numbers list int integer numbers list numbers 
list int list real list char real int numbers list list numbers char simple domain types performing type analysis inference engine repeatedly adds new current approximation type new information added 
stage analysis current approximation type set lub clauses candidate lub clause lubs considered 
analysis determine contains new information 
approximation obtained checking clause lubs lubs lubs 
practice details 
topic 
bottom line need determine validity implication form lubs lubs lubs lubs conjunctions upper bound operations typically contain small number marked elements 
application principles described led substantial orders magnitude examples tested gains efficiency type analysis described 
addressed question determining validity universally quantified implications algebraic structures semilattices distributive lattices 
start goal determining truth quasi identity structure goal achieved determining validity general class objects belongs enriched marked elements correspond constants 
consequently obtain stronger result determine truth structure elements observation important practical consequence 
assume simple domain types depicted determined techniques program typed 
assume change underlying domain types adding new type represent complex numbers 
new domain contains marked elements check typed new domain 
previous result holds 
approach fact validity quasi identity universal algebra preserved direct products subalgebras 
sufficient decompose subdirect product determine validity components decomposition 
applies techniques algebraic approximation obtain decompositions 
birkhoff proves universal algebra decomposed subdirect product irreducible universal algebras irreducible components belong variety generated example known irreducible boolean algebra boolean algebra irreducible stone algebras element element stone algebras 
determine validity quasi identity constants boolean stone algebra sufficient determine validity element boolean algebra stone algebras 
corresponding results algebras signature enriched marked elements quasi identities constants follow results 
ip pi 
family irreducible lattices mention classes lattices approach described fails proof theoretic approach preferred 
example easily verified lattices depicted irreducible 
domains simplified trying determine implications case constants 
hand proof theoretic approach straightforward observe distinct elements including 
observe structures viewed semi lattices obviously reducible 
results birkhoff generalized ma proves general assumptions class models models decomposed subdirect products irreducible models 
apply approach determine validity quasi identities general form kn known definite horn clauses 
particular interest consider predicates set inclusion set membership predicate equality 
case clear case marked elements decompose algebraic structure obtain useful results 
topic ongoing research 
acknowledgments useful discussions bart gratefully acknowledged 
avraham pointed zero principle sorting networks 
comments anonymous referees gratefully acknowledged 
aiken wimmers 
solving systems set constraints extended 
proceedings seventh annual ieee symposium logic computer science pages santa cruz california june 
ieee computer society press 
barwise ed 
handbook mathematical logic 
north holland publishing 
birkhoff 
subdirect unions algebras 
bull 
amer 
math 
soc 
birkhoff 
lattice theory 
ams colloquium publication third ed 
bryant 
laws finite pointed groups 
bull 
london math 
soc 
bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
bryant 
ordered binary decision diagrams 
acm computing surveys 
codish 
analysing logic programs prop logic programs magic wand 
journal logic programming december 
codish 
deriving polymorphic type dependencies logic programs multiple incarnations prop 
proceedings international static analysis symposium pages lecture notes computer science vol springer verlag sept 
codish 
proving implications algebraic approximation 
proceedings fourth international conference algebraic logic programming pages lecture notes computer science vol springerverlag sept 
le charlier 
efficient bottom interpretation prolog means constraint solving symbolic finite domains 
proceedings fifth international symposium programming language implementation logic programming lecture notes computer science aug 
springer verlag 
cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
proceedings fourth acm symposium principles programming languages pages jan 

universal algebra 
van nostrand 

general lattice theory 
akademie verlag berlin 
kennedy 
survey data flow analysis techniques 
pages 
chapter 
knuth 
art computer programming volume 
addison wesley 
le charlier hentenryck 
groundness analysis prolog implementation evaluation domain prop 
proceedings symposium partial evaluation semantics program manipulation 
ma 
subdirect products models 
dokl 
akad 
nauk sssr 
russian chapter english translation 
ma 
homomorphisms finite groups 
ivanov volume pages 
ped 
inst 
russian 
english translation amer 
math 
soc 
translations series volume pages 
ma 
metamathematics algebraic systems 
north holland publishing 
ma 
algebraic systems 
springer verlag 
melton schmidt strecker 
galois connections computer science applications 
editor category theory computer programming pages 
springer verlag 
lecture notes computer science 
muchnick jones 
program flow analysis theory applications 
prentice hall 

recursive adic numbers elementary theories finitely generated pro groups 

akad 
nauk sssr ser 
mat russian 
neuman 
varieties groups 
springer verlag berlin heidelberg new york 
ore galois connections 
trans 
ams volume pages 

irreducible semigroups 
dokl 
akad 
nauk sssr russian 
