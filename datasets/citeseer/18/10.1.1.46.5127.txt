transformation documents schemas patterns contextual conditions makoto murata fuji xerox information systems ksp ku kawasaki shi japan 
basis tree regular language theory study document transformation schema transformation 
document represented tree schema represented atree regular language document transformation de ned composition marking function linear tree homomorphism pattern contextual condition 
pattern tree regular language contextual condition pointed tree representation 
marking function marks node subtree rooted node matches envelope rest tree satis es linear tree homomorphism rewrites tree example deleting renaming marked nodes 
schema transformation de ned naturally extending document transformation result transforming schema denoted fh lg 
tree automaton accepts ectively construct tree automaton accepts 
observation provides theoretical basis document transformation engines document database systems 
study tree transformations document information 
tree transformations require powerful patterns contextual conditions tree transformations programs see wilhelm 
furthermore tree transformations document information accompany transformations tree schemas 
preparation give general background documents 
document models notably sgml introduce tree structures documents 
document processing generation new documents assembling components existing documents computerized writing tree transformation programs 
furthermore document models including sgml introduce schemas documents 
schemas describe types nodes may appear documents hierarchical relationships nodes may 
described information helps programmers write tree transformation programs 
schema typically represented context free grammar 
tree permitted schema parse tree grammar 
important schemas extended context free grammars simple context free grammars specify section may arbitrary number gures paragraphs 
consider challenges tree transformations document processing 
need powerful patterns specify relevant nodes trees 
example assume papers want retrieve sections containing word preliminaries titles 
subordinates section node section title node signi cant type number subordinates irrelevant 
needed powerful pattern allows section arbitrary number subordinates type 
result pattern single tree don care characters 
speci cation nite number trees number subordinates 
input document document transformation output document permit pattern contextual condition permit schema transformation input schema output schema fig 

document transformation schema transformation second need introduce conditions contexts context node superior nodes sibling nodes subordinates sibling nodes 
instance assume previous example interested sections automaton papers 
contextual condition section node directly indirectly subordinate root node title node summary node contains word automaton 
contextual condition concerns node section node directly indirectly superior node root node subordinate nodes superior node title node summary node 
third need transform schemas trees 
schemas input documents tree transformation program able create schema output documents 
document permitted output schema document generated transforming documents permitted input schemas 
creation output schema crucial output schema helps programmers write programs transformations 
example boeing wants create documents boeing maintenance assembling documents written boeing written ge engine maker 
bled documents accompanied schemas purchasing airline northwest wants update documents incorporating information speci northwest 
researchers number attempts overcome challenges see survey 
attempts programming languages documents data models documents 
commercial products standard dsssl developed 
best knowledge attempt ful lled requirements powerful patterns powerful contextual conditions transformation schemas 
completely ignore schema transformation 
provide schema transformation allow weak patterns contextual conditions 
di cult ful ll requirements simultaneously 
reason contextual conditions lead schemas expressed extended context free grammars 
example suppose wewant delete footnote nodes appendix nodes nodes contextual condition 
deletion paragraph nodes appendix nodes subordinate footnotes sections 
extended context free grammar capture context dependencies 
reason class local sets mathematically intractable 
set trees local set parse trees extended context free grammar 
boolean operators applied local sets result local 
nite sets local 
overcome problems formalize schema tree regular language extended context free grammar 
believe approach appropriate reasons 
schema existing document models represented local set tree regular 
second tree regular language localized tree regular construct unique minimum local set 
third pattern formalized tree regular language 
fourth class tree regular languages forms boolean algebra apply boolean operators schemas patterns 
particular construct intersection automaton schema automaton deterministic tree automaton pattern identifying pattern matches occur 
research pointed trees provides basis study contextual conditions 
represent contextual condition pointed tree representation 
construct unambiguous non deterministic tree automaton representation 
automaton intersection identify contextual condition satis ed 
key contributions follows class patterns class contextual conditions algorithm testing time linear size tree construction minimally su cient output schema 
third contribution probably signi cant 
provides theoretical basis document transformation engines document database systems 
remainder organized follows 
section limit concerns strings trees 
introducing preliminaries rst formalize patterns contextual conditions transformation rules 
introduce algorithms pattern matching contextual condition checking 
show construction output schemas 
section extend observations section binary trees 
extension general trees require new ideas left reader 
transformations strings preliminaries string nite alphabet element free monoid addresses length character denoted bys 
pre string 
su iss 
mirror image denoted bys deterministic string automaton dsa tuple qf nite set states function initial state element ofq nal states subset ofq 
qf computation string length 
qf computation successful accepted 
set strings accepted denoted 
set strings accepted lis string regular 
non deterministic string automaton nsa tuple qf relation andq initial states subset ofq 
qf string length isn 
qf computation successful 
successful computation sis accepted 
known language string regular accepted nsa 
string successful computation unambiguous 
unambiguous denote successful computation 
transformation rules rst de ne marking functions linear string homomorphisms de ne transformation rules 
marking functions 
string regular language 
string pre ifs condition string regular language 
su esc ifs 
weintroduce marked 
marked alphabet de ned 
marking mapping intuitively mp marks symbol pre de ned su esc 
formally linear string homomorphisms 
replacement strings string fzg occur ins occurs rst symbol 
result 
leth function set replacement strings linear string function de ned length ofs length ofs transformation rules 
transformation rule triplet wherep pattern contextual condition linear string homomorphism 
result applying rule de ned ash 
applying transformation rules strings implement transformation rules need algorithms pattern matching contextual condition testing 
contextual strings nd alli thats ands 
simple nd alli thats 
pm pf dsa 
fors obtain computation th state computation nal state pf 
dsa nd alli thats 
cf dsa accepts mirror image ofc accepts ifs 
fors words tail head obtain cif th character computation nite state cf 
algorithms pattern matching contextual condition testing simple matter write computer program applies transformation rule string 
marking easily derived algorithms linear string simple recursive program 
schema transformation formally state schema transformation problem 
want prove theorem 
theorem 
image string regular transformation rule string regular theorem directly follows lemmas 
lemma 
image string regular lemma implies constructing image longer need original contextual condition consider constructed image 
lemma 
image string regular lemma special case theorem linear tree homomorphism 
prove lemma 
proof lemma 
ectively construct nsa accepts image depicted 
key idea construction match identifying nsa identi es matches schema level 
recall pf 
allowing state nal state obtain dsa pi obviously pi accepts string 
furthermore strings pf likewise recall cf js cg 
dsa obtained allowing state nal state pattern dsa pm dsa pi contextual condition nsa unambiguous nsa match identifying nsa output schema nsa fig 

constructing image string case input schema dsa accepts string 
introduce simulates dsa reverse order tail head 
formally de ned fc easily seen successful computation mirror image computation ofs furthermore ks ks ks cf ks cf suppose accepted dsa qf de ne match identifying de ne state initial state nal state 
fq gfp second de ne transition relation simulates 
de ne match identifying marked state set rm follows rf rm obviously unambiguous 
furthermore rm matches ks rm ready construct accepts image 
rst extend alphabet second de ne transition relation tor intuitively speaking mark labels transitions lead marked states 
formally de ned follows rf rm rm easily seen ks km js lg ut transformations binary trees section extend observations binary tree case 
say binary trees simply say trees 
preliminaries tree nite alphabet null tree symbol trees 
assume thata identical 
set trees denoted assign set addresses fg example 
address ifd andd 
example leaf address 
symbol denoted byt 
ift andt 
example ht ht iit ht iii example 
deterministic tree automaton dta tuple qf nite set states function initial state element ofq nal state set subset ofq 
qf computation tree mkt mkt qf computation successful accepted 
set trees accepted denoted 
set trees accepted lis tree regular 
non deterministic tree automaton nta tuple qf relation andq initial state set subset ofq 
qf tree vi computations respectively 
qf computation successful 
successful computation tis accepted 
known language tree regular accepted nta 
tree successful computation unambiguous 
furthermore unambiguous accepts denote successful computation 
rest borrowed nivat podelski 
pointed tree nite alphabet occurs occurrence leaf 
set pointed trees denoted result replacing pointed denoted byt 
example bh ii 
obviously monoid 
envelope pointed tree obtained 
example ah di 
pointed base tree pointed tree ti pointed decomposes sequence pointed base tk tk 
example ii uniquely decomposes ah pointed base tree representation triplet triplet wherea ands tree regular language represented language de ned sg sg example 
pointed tree representation pair bijection nite alphabet nite set pointed base tree representations ande string regular language domain represented language de ned ft ei ek example 
ande 
transformation rules rst de ne marking functions linear tree homomorphisms de ne transformation rules 
marking functions 
tree regular language 
subtree ift language represented pointed tree representation 
envelope esc ift 
weintroduce marked 
marked alphabet de ned 
marking mapping intuitively 
de ned follows formally ht ht iit ht iii ii iii linear tree homomorphisms 
replacement tree fz andz occur int leaf nodes occurs occurs 
example iz replacement trees bg 
result andz andt respectively 
leth function set replacement trees linear tree function de ned hh example fa bg iz andh 
transformation rules 
transformation rule triplet pattern contextual condition linear tree homomorphism 
result applying rule de ned ash 
applying transformation rules trees implement transformation rules need algorithm pattern matching contextual condition testing 
string case rest straightforward 
simple nd 
pm pf dta 
fort obtain computation qf 
string case complicated cient nd 
preparation rst introduce de nitions introduce lemma provides algorithm contextual condition testing 
pseudo dta tuple wheres nite set states function tos ands initial state element ofs 
di erence dta pseudo dta nal set state 
computation pseudo dta de ned similarly dta 
pseudo function nite alphabet de ne wheret tk decomposition ti tk ti ah ui ti ahu lemma 
exist pseudo function sf nite alphabet string regular 
proof 
ectively leave rest proof reader 
key idea pseudo dta accepts tree regular language appears constituent pointed base tree representation inrange 
enumerating constituent tree regular languages obtain sequences sn fs sng range range xn inf subset yn yi si xi si xi obviously ifx andb disjoint 
furthermore gm mi si sf de ne pseudo 
de ne state sets initial states 
sns second de ne transition function 
sn de nen sn vector xn inf subset ofs zn zi si isi sn xi si si si sn xi obviously ifx ands disjoint 
furthermore dta created ton nal state set construct function nite set ja observe exists 
sound de nition 
thats thats de ne string regular substitution function domain powerset jx xi 
si gm xi 
si de ned image ofe ff ei fj ej jig lemma yields algorithm contextual condition testing 
initialization rst lemma shown proof construct ff accepts mirror image 
evaluation ofn construct 
evaluation evaluating construct 
ifd ifd 
value important 
evaluation root leaf nodes construct ifd isf ifd ord 
ifv ff 
initialization depend ont steps require time linear size oft evaluate node 
algorithm linear time 
ut schema transformation theorem 
image tree regular transformation rule tree regular theorem directly follows lemmas 
lemma 
image tree regular lemma 
image tree regular prove lemma special case theorem linear tree homomorphism 
proof lemma 
ectively construct nsa accepts image depicted 
proof theorem key idea construction match identifying nta 
pattern pm pi contextual condition match identifying nsa output schema nsa fig 

constructing image tree case input schema dsa recall pf 
allowing state nal state obtain dta pi obviously pi accepts tree 
furthermore qf suppose unambiguous nta cf ofc accepts kt cm ift andf lemma 
suppose accepted qf de ne match identifying de ne state initial state nal state 
fq gfp gc rf second de ne transition relation simulates 
de ne match identifying marked state follows rf rm obviously unambiguous 
furthermore rm matches kt rm ready construct accepts image 
rst extend alphabet second de ne transition relation tor intuitively speaking mark labels transitions lead marked states 
formally de ned follows rf rm rm easily seen kt km jt lg 
remains show construction nta cf ofc andf lemma 
rst idea section construct unambiguous ff 
formally de ned ff second idea simulate execution ofn andf root 
state ofc pair ofs andf sf rst 
second path 
notice need state paths merge 
nta fail 
initial state pair initial state ofn initial state fs gf nal state pair state ofn nal state cf sff marked state pair state ofn nal de ne transition relation cm sff proof satis es assumptions left reader ut 
language document queries transformations 
electronic publishing origination dissemination design 
baeza yates navarro integrating contents structure text retrieval 
sigmod record 
abiteboul cluet structured documents novel query facilities 
sigmod 
colby van gucht concepts modeling querying data 
information processing management 

tree automata 
budapest hungary 

gonnet tompa mind grammar new approach modelling text 
proceedings vldb 
gyssens paredaens van gucht grammar approach unifying hierarchical data models 
siam journal computing 
ho mann donnell pattern matching trees 
journal acm 

international organization standardization 
information processing text ce systems standard generalized markup language sgml 

international organization standardization 
information technology text ce systems document style semantics speci cation language dsssl 

nivat podelski variation common subexpression problem 
theoretical computer science 
podelski monoid approach automata 
nivat podelski editors tree automata languages studies computer science arti cial intelligence 
north holland 
wilhelm tree transformations functional languages attribute grammars 
pierre martin jourdan editors attribute grammars applications springer verlag 
