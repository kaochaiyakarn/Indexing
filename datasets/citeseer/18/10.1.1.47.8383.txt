appl 
math 
lett 
vol 
pp 
printed great britain 
rights reserved copyright fl pergamon press plc turing computability neural nets siegelmann department computer science rutgers university new brunswick nj eduardo sontag department mathematics rutgers university new brunswick nj received june 
shows existence finite neural network sigmoidal neurons simulates universal turing machine 
composed synchronously evolving processors interconnected linearly 
high order connections required 

addresses question ultimate limitations imposed neural nets computing devices 
particular ignoring issues training practicality implementation know problem solved digital computer solvable principle net 
question asked literature 
jordan pollack showed certain recurrent net model called machine neural turing universal 
model neurons synchronously update states quadratic combination past activation values 
general calls high order nets activations combined multiplications see related nets 
pollack left open question establishing high order connections really necessary order universality feeling people working area 
contrast point standard linear connections construct networks computationally powerful turing machine 
note classical mcculloch pitts clear simulate logic gates networks threshold binary valued neurons obtain finite automata nets see problem 
simulate turing machines allows potentially unbounded number neurons see variations theme relations cellular automata 
insist fixed number neurons increase computation problem different 
supported part air force afosr siemens corporate research 

statement result recursive net arbitrary interconnection synchronously evolving processors 
processors say singled output node net external input signal feeds processor 
finitely threshold neurons simulate finite automata behavior neurons required 
model net dynamical system scalar inputs 
instant state system vector rational numbers ith coordinate keeps track activation value ith processor 
precisely define processor net having equations form oe ax bu simply oe ax bu shorthand notation 
positive integer thetan oe 
oe oe oe simple sigmoid saturated linear function oe oe oe 
processor nets appear frequently neural network studies dynamic properties interest see instance continuous time analogue studied literature see comments concluding section 
infinite sequence rational numbers thought external inputs defines state time integer value obtained recursively solving equations initial condition 
obvious simulate processor net turing machine took values rational 
main conversely function computable turing machine computed processor net 
state precise result need introduce notion unary input signal definition sequence consists string followed infinite string theorem 
oe recursively computable partial function 
exists processor net property holds 
pick consider unary input signal 
starting zero inactive initial state coordinates resulting states form sequence form may zero positive 
iff oe undefined oe gamma 
describe main ideas proof details technical report 
textbook approach counter machines encode infinite tape real valued activations problem preserving purely linear interconnection architecture 
starts realization oe push automaton unary stacks known sufficient simulate turing machines 
equally possible start binary stacks satisfactory computational complexity point view construction slightly involved case 
control unit easily simulated net basically old automata result care taken seeing possible inputs enter additively multiplicatively 
contents stack summarized natural number turn represented rational number binary expansion represent integer 
representation affine operations sufficient stack push operation increment counter corresponds 
pop decrement corresponds 
gamma 
reading stack encodes stack value oe stack empty oe 
different encoding stack read simple manner 
critical point show design integrated stack operations state transitions gated states control unit symbols tops stacks introducing high order connections products 
achieved basically negative values act inhibitors fed activation function oe 
preliminary step proves easy fact allows expression function control unit binary state variables boolean functions fi obtained reading stacks actual stack values terms sigmoids lemma 
function fi theta theta exist vectors scalars fi xq oe oe delta oe gamma oe delta gamma delta dot product illustration consider just op pop actions assume binary control signal computed current states stacks required effect stack having value gamma guaranteed second case doesn attempt pop empty stack 
may update oe oe oe gamma gamma oe oe redundant needed order obtain desired form 
note particular follows obtain behavior universal turing machine net 
rough bound constructions shows processors far sufficient computing function 

remarks note simulation result interesting consequences regarding decidability generally complexity questions recursive nets type consider 
instance determining neuron assumes value effectively undecidable halting problem easily reduced details full hand problem appears decidable linear activation halting case equivalent fact widely conjectured follow classical results due skolem rational functions see page decidable pure threshold case finitely states 
function oe sense combination thresholds linear functions gap decidability remarkable 
obvious question deals activation functions 
standard sigmoid gammax presents technical difficulties rational numbers harder deal 
instance requiring ouput sequence exact stringent obvious modifications done 
hand equation type ax bu hard threshold heaviside function simulate finite automaton states essentially binary 
types machines may universality see especially chapter general definitions continuous machines 
instance similar proof show systems evolving equations ax bu takes sign coordinate universal precise sense 
interesting note equations represent euler approximation differential equation suggests existence continuous time simulations turing machines 
closing note idea continuous valued neurons order attain gains computational capabilities compared threshold gates explored special case feedforward nets see instance questions approximation function interpolation questions boolean circuit complexity 
see continuous valued models computation 

alon ott efficient simulation finite automata neural nets 
appear 

berstel reutenauer rational series languages verlag berlin 

blum shub smale theory computation complexity real numbers np completeness recursive functions universal machines bull 


franklin garzon neural computability progress neural networks vol ed ablex norwood nj pp 


maass schnitger sontag computational power sigmoid versus boolean threshold circuits proc 
nd annual symp 
foundations computer science san juan pr october 

marcus dynamics iterated map neural networks phys 
rev ser 


pollack connectionist models natural language processing ph dissertation computer science dept univ illinois urbana 
available computing research laboratory nmsu las cruces nm 

siegelmann sontag neural nets universal computing devices report rutgers center systems control rutgers university may 

sontag mathematical control theory deterministic finite dimensional systems springer new york 

sontag remarks interpolation recognition neural nets advances neural information processing systems lippmann moody touretzky eds morgan kaufmann san mateo ca pp 


sun 
chen 
lee giles turing equivalence neural networks second order connection weights proc 
int 
joint conf 
neural networks seattle july 
