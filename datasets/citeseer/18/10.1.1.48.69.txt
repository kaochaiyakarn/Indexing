prototypical objects implement shared behavior object oriented systems henry lieberman artificial intelligence laboratory massachusetts institute technology cambridge mass usa electronic mail henry ai ai mit edu henry mit ai published proceedings acm conference object oriented programming systems languages applications portland september 
traditional philosophical controversy representing general concepts sets classes representing concepts concrete prototypes reflected controversy mechanisms sharing behavior objects object oriented programming languages 
inheritance splits object world classes encode behavior shared group instances represent individual members sets 
class instance distinction needed alternative prototypes adopted 
prototype represents default behavior concept new objects re part knowledge stored prototype saying new object differs prototype 
prototype approach hold advantages representing default knowledge incrementally dynamically modifying concepts 
delegation mechanism implementing object oriented languages 
checking idiosyncratic behavior object forward message prototypes invoke general knowledge 
class objects created instances behavior associated classes inheritance fixes communication patterns objects instance creation time 
object prototype messages forwarded time delegation flexible general techniques 

sets vs prototypes philosophical dilemma practical consequences people represent knowledge generalizations experience concrete situations 
philosophers concerned theory knowledge debated question shall see issue practical consequences task representing knowledge object oriented systems 
object oriented programming involves constructing representations objects real world mechanisms storing real world knowledge get reflected mechanisms dealing objects computer languages 
ll examine traditional controversy representing concepts sets versus representing concepts prototypes gives rise mechanisms inheritance delegation sharing behavior related objects object oriented languages 
person experience particular situation say concerning particular elephant named clyde facts clyde prove useful encountering elephant say fred 
mental representations concept clyde concept fred question representations clyde fred share knowledge 
answer questions fred color number legs size know clyde 
absence mechanism sharing knowledge related concepts repeat knowledge clyde representation fred 
points view consider adopting 
idea sets 
learning clyde construct concept set class elephants abstracts believe true individual animals sufficiently similar clyde called elephants 
description set enumerate essential properties elephants 
view clyde member instance class 
object oriented system set approach involves creating object represent set elephants establishing link representing membership relation object representing clyde set object 
description set represents true members answer questions clyde referring description set 
establishing kind membership link fred set elephants enables fred clyde share knowledge 
fred clyde share additional properties indian elephants shared elephants embodied subclass object shares properties elephant set adjoining additional properties relevant india 
alternative point view 
consider clyde represent concept prototypical elephant 
ask think elephant doubt mental image particular elephant pop mind complete characteristics gray color trunk clyde elephant familiar prototypical elephant image clyde 
ask question legs elephant way answer question assume answer legs clyde reason think 
concept fred connection marking prototype clyde mechanism sharing information 
description fred store information unique fred 
ask legs fred assume answer fred clyde absence contrary evidence 
learn fred legged elephant knowledge stored fred searched prototype 

prototypes advantages incremental learning concepts concept set proven fruitful mathematics prototype approach ways corresponds closely way people acquire knowledge concrete situations 
difficulty sets stems abstractness people lot better dealing specific examples generalizing absorbing general principles applying particular cases 
prototype systems allow creating individual concepts generalizing saying aspects concept allowed vary 
set oriented systems require creating description set individual instances installed members 
mathematics sets defined enumerating members describing unifying principles identify membership set 
enumerate elephants making definitive lists essential properties elephant 
major impetus creating new concepts experience examples 
clyde experience elephants concept elephant really different concept clyde 
meeting elephants analogies concepts fred clyde serve pick important characteristics elephants 
prototypes better expressing knowledge defaults 
assert identifying characteristics membership set elephants say exceptional white elephants risking contradictions 
easy say fred white elephant just clyde white 
wittgenstein observed difficult say advance exactly characteristics essential concept 
new examples arise people new analogies previous concepts preserve defaults concept ignore 

inheritance implements sets delegation implements prototypes having set stage philosophical discussion issues concept representation turn issues affect mundane details implementation object oriented programming systems 
implementing set theoretic approach sharing knowledge object oriented systems traditionally done mechanism called inheritance pioneered language simula adopted smalltalk flavors loops 
object called class encodes common behavior set objects 
class description characteristics allowed vary members set 
classes power generate instance objects represent members set 
instances class share behavior maintain unique values set state variables class 
represent clyde create description class elephant instance variable elephant name values distinguish clyde fred 
class give rise subclasses add additional variables behavior class 
implementing prototype approach sharing knowledge object oriented systems alternative mechanism called delegation appearing actor languages lisp object oriented systems director kahn rees orbit steels 
delegation removes distinction classes instances 
object serve prototype 
create object shares knowledge prototype construct extension object list containing prototypes may shared objects personal behavior idiosyncratic object 
extension object receives message attempts respond message behavior stored personal part 
object personal characteristics relevant answering message object forwards message prototypes see respond message 
process forwarding called delegating message 
fred elephant extension object stored behavior unique fred personal part referenced prototype clyde shared part 

tools representing behavior internal state building blocks object oriented systems object oriented system provide linguistic mechanisms defining behavior objects 
philosophy object oriented programming object representation encode procedures data conventional languages 
define procedural behavior data content object convenient break aspects object set parts accessed modified individually name 
object internal state consists variables acquaintances accessed object oriented systems sending object message consisting variable name 
object procedure responding messages actors say script composed set procedures called methods specialized handling certain subset messages object receives identified name 
breaking object state named variables means different portions state modified incrementally affecting 
breaking object behavior named methods means different portions behavior modified incrementally affecting 
language provide ways combining groups methods variables form objects means allowing object share behavior implemented methods variables residing previously defined objects 
call composite objects extensions 
building blocks represented illustration tools sharing knowledge icons discussion 
object oriented languages supply primitive linguistic mechanisms creating objects methods variables extensions 
alternative approach advocated actor formalism define methods variables extensions objects right behavior determined message passing protocol 
obviously object representing method methods infinite recursion result 
simple objects primitive system variable defined object remembers name value responds access modification messages 
method responds messages designed rejecting 
extension objects delegation forward messages part object locate appropriate response 
convinced utility object oriented programming shouldn trouble discerning advantages object oriented programming implementation knowledge sharing mechanisms 
foremost ability define kinds objects implement alternatives standard versions 
ordinary variable active variables take action changed read variables variables defined different type variable object 
alternative kinds method objects differing strategies combine behavior contributing components replacing called method combination feature flavors system making multiple inheritance easier 
different kinds extension objects different efficiency tradeoffs issue copying versus sharing 
tools sharing knowledge methods objects procedure responding particular kind message variables objects store value respond messages change extensions objects personal set methods variables pointer object shared knowledge mechanisms sharing knowledge object oriented languages grown complicated impossible reach universal consensus best mechanism 
object oriented programming implement basic building blocks state behavior best approach allowing experimentation existence competing formalisms 

logo example illustrates differences delegation inheritance example domain logo turtle graphics illustrate choice delegation inheritance affects control data structures object oriented system 
delegation approach illustrated titled sharing knowledge delegation 
thing create object representing pen remembers location screen moved different location drawing lines old new locations 
sharing knowledge delegation pen delegates delegates pen turtle heading draw forward heading draw start creating prototypical pen object specific location screen behavior respond draw message 
create new pen object need describe different new pen case variable 
behavior draw message need repeated 
draw method value variable important correct value 
draw method delegated new pen old pen draw method original pen invoked new pen 
insure message delegated pass object originally received message 
called self variable simula smalltalk flavors find term self little misleading method originally defined kind object winds sending self different kind 
actor terminology object called client object delegated thought performing service original object 
pen delegates draw message prototypical pen saying don know handle draw message 
answer questions value variable need done come back ask 
message delegated questions values variables requests reply messages inferred object delegated message place 
suppose create turtle location original pen original pen prototype 
turtle different pen 
turtle shares behavior pen additional state heading 
remembering heading essential implementing additional behavior able respond forward back messages relying behavior response draw message 
may choose provide new behavior turtle draw operation rely draw operation provided original pen 
look example inheritance approach sharing knowledge simula smalltalk delegation 
illustrated titled sharing knowledge inheritance 
inheritance necessary create objects representing classes 
pen necessary pen class object specifies behavior names variables 
individual pens created supplying values instance variables pen class creating instance object 
values variables specified unique values instance 
new behavior may attached individual pen 
extending behavior accomplished different operation creating new subclass 
step goes instance behavior stored class performed hardwired lookup loop systems simula smalltalk message passing delegation approach 
extend pens new behavior create new class object 
turtle class adds new heading new behavior forward message 
notice variables pen class copied turtle class 
individual turtle instance supply values variables class superclass 
copying leads larger instance objects classes inheritance hierarchy 
lookup methods performed primitive routine message passing starts search methods class object proceeds subclass superclass chain 
method inherited pen class turtle class access method implemented turtle class 
inheritance systems usually message passing communicate subclass superclass pass turtle object message delegation 
sharing knowledge inheritance pen cla ss ass en instance heading forward heading draw heading draw heading en draw heading ce turtle class variable binding bind special variable self object originally receives message 
shall see leads trouble 
addition inheritance systems allow shortcut binding variables instance referenced directly code naming methods free variables 
efficient short circuits message passing mechanism defeating independence internal representation hallmark object oriented programming 
variable different linguistic syntax message sends wanted change coordinate representation polar coordinates rho theta change referencing methods 
sticking message passing access means coordinates changed polar provide methods compute rectangular coordinates polar change transparent 
hope diagrams leave impression delegation approach simpler 
create pens turtle inheritance approach requires additional steps creating pen class objects turtle class objects 
different kinds links objects subclass link instance link delegation approach requires message passing relationship linked objects 

inheritance delegation equally powerful 
obvious question ask preceding discussion inheritance delegation techniques expressive power 
answer 
delegation easy see implement functionality inheritance 
create special class objects respond messages create new instances 
need arrange class objects observe copying variables superclass chain create instances 
instance objects behavior implements lookup methods roughly follows 
instance object receive message selector arguments selector matches variable names class superclass return corresponding value stored 
look method name matches selector message list local methods class 
find bind variable self instance object 
bind names variables class variables superclass chain values instance 
invoke method 
method class method list try find method superclass superclass chain 
way 
inheritance implement delegation 
unfortunately 
reason little tricky understand treatment self variable prevents proper implementation forwarding messages 
method handling message may need ask object originally received message perform service 
turtle object receives back message turn forward message sent object negating number steps back forward 
delegation method delegated message receives component called client delegate message object originally received message 
inheritance systems distinguished variable named self automatically bound recipient message execution code method 
method search proceeds original class superclass value self variable doesn change superclass methods reply message methods original object 
user sends message self variable re bound generally possible user designate object reply place object originally received message 
true delegation implemented systems 
example illustrated self problem clear 
suppose extend particular turtle object create turtle draws dashed solid lines 
obvious way dashed turtle intercept forward message break interval pieces delegating message draw series shorter lines solid line turtle 
inheritance system dashed line turtle simply sends forward message solid line turtle self bound solid line turtle 
earlier implementation back terms forward working message dashed line turtle go back try send forward message self draw solid line 
careful confusing example alternative implementation inheritance systems create dashed turtle class subclass solid turtle class 
implementation correct behavior respect back message wouldn count implementation delegation 
remember trying see object forward messages existing object 
dashed turtle instance wouldn forwarding messages instance solid turtle just inherit copies variables methods solid turtle 

efficiency 
efficiency comparison delegation inheritance boils time space tradeoffs 
argued inheritance efficient requires fewer messages comes cost increasing size objects 
variables copied superclass subclass instances larger larger farther get inheritance hierarchy 
delegation object need specify different existing prototypes size objects necessarily depend depth hierarchy shared objects 
look diagram illustrating data structures pen turtle objects confirm inheritance speed advantage delegation space advantage 
smaller objects faster object creation times important systems create large numbers small objects short lifetimes opposed small numbers large objects long lifetimes 
reducing size objects may improve efficiency virtual memory improving locality allowing higher density frequently referenced objects primary memory 
copying garbage collector described lieberman hewitt smaller objects improve efficiency garbage collection reducing copying overhead 
implementors shouldn get scared away search required find methods variables delegation approach 
simple effective trick reducing search time caching result lookups 
caches way trading space speed mitigating negative effects speed space tradeoff delegation 
caches effective extra memory indiscriminately copying instance variables memory sure constant 
caches don restrict flexibility interactively modifying programming environment way copying compilation optimizations 
self problem turtle draws solid lines asked go back steps send forward message negating number steps got back message self 
turtle draws dashed lines fo rw ard back fo rw ard asked go forward ask turtle draws solid lines go forward short distances alternately pen distance covered 
conventional machines probably implementation delegation going surpass variable lookup registers stack indexing raw speed 
speed variable lookup implementors forced decisions large object size object oriented languages adversely affect efficiency 
parallel machines large address spaces attractiveness register oriented optimizations fade 
smalltalk krasner reports hit rate moderately sized cache objects 
means savings inheritance delegation lookup best affect remaining 
best thing keep global cache invalidate changes sharing hierarchy 
change slow system messages time cache takes fill 
smarter alternatives object caches probably worth extra trouble cause incremental software modification hit rate global cache high 
inheritance delegation implemented equally efficiently little reason sacrifice extra flexibility delegation efficiency grounds 

re directing streams illustrates important application delegation object oriented systems object oriented programming techniques implement input output streams 
stream object receives messages input output character line text expression 
systems usually global variables designating current sources input output default bound object representing stream characters displayed window screen interactive display 
name stream suggests continual flow characters pixels user system 
useful kind object implements dam divert stream destinations plumbing connects stream 
dribble file sequential file maintaining record disk history inputoutput interactions provide permanent recording interactions ephemeral pixels 
dribble file implemented replacing stream represents interactions terminal writes disk 
dribble stream needs ability masquerade terminal stream 
responses messages ordinary terminal stream provide additional behavior writing disk 
streams considered indistinguishable point view programs perform input output 
implement dribble stream cleanly case implementation dribble stream shouldn know precise details implementation stream replacing 
example single dribble stream stream directly connected interactive terminal stream interacting network 
dribble stream masquerade terminal stream 
terminal stream streams protected queues timing errors due parallel writes disk stream delegates dribble stream read char char ut print char ou char char implementation delegation convenient straightforward 
messages character output intercepted disk output interposed 
dribble stream object logs interaction stream records disk filename dribble stream get massage input output character output character disk stream filename 
delegate message output character original stream 
dribble stream get message simply delegate message stream 
works take care single character input output messages presumably higher level messages print object ultimately implemented terms single character versions 
method performs higher level print operation ultimately send character output message client send self 
surprisingly inheritance systems difficult implement simple extension behavior streams 
villain insistence systems flavors smalltalk defining separate procedures handling type message 
attempting try implement dribble stream subclass stream systems ilk find easy way say send irrelevant messages original stream 
forced define method intercept character output message write disk intercept print message intercept print line message relevant message 
time message added original stream method added dribble stream repetitive code 
unfortunate effect making implementation dribble stream sensitive details exactly messages embedded stream accepts inhibiting ability re implementation different types streams 
adding system definition class flavor give ability create new instances dribble stream objects 
possible create dribble stream previously existing stream object 
new terminal streams network streams kind streams able take advantage recording functionality 
shouldn reproduce kind stream system just dribble capability 
attempt dribble stream holds interaction stream instance variables face problem way dribble stream correctly forward message print value variable 
way systems handle self variable forwarding messages original stream won reason turtle example 
sending print message instance variable re bind self variable result sending lower level messages directly interaction stream dribble stream 
straightforward attempt implement dribble stream simple behavioral extension inheritance systems doomed 

parallelism causes problems inheritance systems self variable additional problem case stream accept messages parallel process 
stream holds modifiable state screen bitmap stream protected timing errors resulting processes trying write stream time 
technique serializer objects hewitt attardi lieberman monitors 
means stream receives write message locks subsequent messages stream wait queue stream finish processing write message 
message dribble stream tries process print message sending character output message self variable find self bound stream locked waiting print message complete 
deadlock 
delegation uses message passing dribble stream delegates terminal system supply client delegate message version process message waiting 

delegation flexible inheritance combining behavior multiple sources object want utilize behavior appears existing object 
behavior system needs implement particular feature packaged single object object want combine features implement behavior 
example window objects titles borders size adjustments particular window object may choose features 
features may independent may interact 
solution inheritance systems create class object mentions list classes behavior wishes 
methods variables mentioned classes inherited combined object 
systems flavors allow optionally method basis supplying option combine behavior component contributes method 
typical options invoke contributing methods impose order return list results 
problem style combining behavior multiple sources fixes pattern communication objects time instance object created 
limits extent behavior previously existing objects dynamically 
contrast delegation communication patterns determined time message received object 
delegation method extension object simply access prototypical objects derives behavior shared list 
window wants invoke draw action previously defined rectangle object acting borders simply delegate draw message rectangle object 
delegation doesn require method combination inventory esoteric combining operations 
behavior simply programmed method combined extension object 
programmer wish build library common combination techniques easily done constructing variants standard method object delegation concise method combination inheritance systems 
inheritance window class includes borders mixin window contain independent object representing borders possible send message borders window independent window object 
window class merely contains mixture methods variables inherited borders contributing components 
highly responsive interactive systems necessary wait message received determine behavior component objects utilized 
simple example dynamic utilization behavior multiple sources required illustrated delegation allows communication patterns decided run time 
bordered bitmap built rectangle display borders bitmap transfer array pixels screen 
draw response bordered bitmap 
inheritance create bordered bitmap class inherits rectangle bitmap saying draw methods 
fine 
suppose give user option changing dynamically behavior 
bitmap dragged screen transfer entire array mouse movement slow preferable give user option just dragging outline bitmap 
reasonable thing give user screen toggle switch decide behavior user potentially change behavior time 
behavior bordered bitmap decided object created 
delegation bordered bitmap gets draw message decide delegate message rectangle object contains bitmap object 
delegation allows communication patterns decided run time rectangle bitmap bordered bitmap say draw compile time object creation time drag bitmap drag borders draw draw draw inheritance systems plagued call instance class problem 
systems composed large numbers objects slightly varying behavior wind having create new class objects just instances 
necessary create ad hoc classes window wide border times roman font title just combine features single instance 

delegation advantageous highly interactive incremental software development important issue consider evaluating tradeoffs inheritance delegation consequences incremental software development 
seen inheritance tends encourage copying variables methods delegation encourages sharing 
prototypical object changes behavior objects mention prototype shared list automatically feel change 
changes inheritance hierarchy adding new instance variable changing class structure information copied old data structure may rendered obsolete 
broadcasting result changes copies puts burden operations incremental changes software environment 
extreme example occurs flavors system simply adding method vanilla flavor root inheritance hierarchy results recompilation flavor entire system 
effectively prohibits modifications objects near top inheritance hierarchy 
delegation minority viewpoint object oriented languages slowly recognized important added power flexibility 
part reason neglect delegation approach historical 
simula object oriented languages adopted inheritance technique 
fixed communication patterns objects compile time appropriate compiled language algol family 
specific mechanisms inherited smalltalk reconsidering approach appropriate interpretive language highly interactive programming environment 
hope preceding discussion convinced approach modeling concepts prototypes implementing behavior object oriented languages delegation distinct advantages alternative point view classes inheritance 

acknowledgments major support described provided system development foundation 
related mit artificial intelligence laboratory supported part darpa onr contract 
carl hewitt ideas concerning actors especially impact parallelism object oriented programming important influences 
kenneth kahn luc steels implemented object oriented languages adopted delegation mechanisms influenced ideas 
alan borning reached similar context system implemented smalltalk 
koen de provided helpful critique talk gave issues nijmegen netherlands 
birtwistle dahl nygaard birtwistle dahl nygaard 
simula 
van nostrand reinhold new york 
bobrow bobrow kahn stefik kiczales 
common loops 
technical report xerox palo alto research center 
bobrow stefik daniel bobrow mark stefik 
knowledge programming loops 
magazine august 
borning alan borning 
classes venus prototypes object oriented languages 
fall joint computer conference 
acm ieee dallas texas november 
goldberg robson adele goldberg david robson 
smalltalk language implementation 
addison wesley reading ma 
hewitt carl hewitt 
viewing control structures patterns passing messages 
winston brown eds artificial intelligence mit perspective 
mit press cambridge ma 
hewitt attardi lieberman carl hewitt giuseppe attardi henry lieberman 
security modularity message passing 
conference distributed computing 
ieee huntsville 
kahn kenneth kahn 
creation computer animation story descriptions 
ph thesis massachusetts institute technology 
krasner glenn krasner editor 
smalltalk bits words advice 
addison wesley new york 
lieberman henry lieberman 
concurrent object oriented programming act 
yonezawa tokoro eds concurrent object oriented programming 
nut press cambridge ma 
lieberman henry lieberman 
delegation inheritance mechanisms sharing knowledge object oriented systems 
cointe eds eme etudes languages objets 
paris france 
lieberman hewitt henry lieberman carl hewitt 
real time garbage collector lifetimes objects 
cacm june 
moon weinreb david moon daniel weinreb lisp machine manual 
symbolics mit cambridge ma 
rees jonathan rees manual 
technical report yale university 
steels luc steels 
applicative view object oriented programming 
technical report memo schlumberger doll research march 
