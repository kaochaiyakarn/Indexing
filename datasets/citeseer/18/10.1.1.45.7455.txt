algorithms analysing firewall router access lists scott programme highly dependable systems department computer science university private bag wits scott cs wits ac za july network firewalls routers rule database decide packets allowed network 
filtering packets firewalls routers improve security performance 
size rule list increases difficult maintain validate rules lookup latency may increase significantly 
ordered binary decision diagrams bdds compact method representing manipulating boolean expressions potential method representing rules 
presents new algorithm representing lists bdd shows resulting boolean expression analyse rule sets 
network routers firewalls play important role network traffic management 
regulating packets accepted firewall router security performance network improved 
routers firewalls usually rules indicate packets accepted rejected 
network manager express complex rules accepting rejecting packets 
efficacy traffic management depends rules 
practice rules develop period time evolve needs changes 
problems emerge ffl list rules complex difficult understand 
person maintains list may leave replaced 
understand rule base scratch difficult 
maintaining rule base difficult changes operational performance needs may obvious effect changing deleting adding rule may 
changing position rule rule list change semantics list 
ffl cost performing look rule list may expensive particularly routers may add significantly latency network 
terminology simplify notation rest term filter cover routers firewalls term rule set refer list rules implement filter policy 
rule sets filter rules come formats typically proprietary formats 
expressiveness syntax formats differ generic description gives feeling rules sets look 
rule set consists list rules form condition action action accept reject 
example 
rule access list cisco router say access list permit tcp range says tcp protocol packet coming ip address destined ip address 
accepted provided destination port address range 
detail 
rules searched see condition matches incoming packet packet accepted rejected depending action accept reject condition match rule search continues rules 
rules match packet rejected 
rules checked order order specified critical 
changing order rules result packets previously rejected accepted vice versa 
uses cisco access list format specifying rule set methods proposed generalise formats 
research goals explored binary decision diagrams bdds representing access rule lists showed potential bdds speeding look performing analysis possible hardware support 
extends focusing problem analysing access rule lists 
contributions ffl improved technique representing rule set boolean expression bdds ffl set algorithms analyse rule set help validate understand effect changes rule set 
ffl prototype graphical interface help analyse rule set 
techniques allow complex sophisticated rule sets greater confidence 
improve security traffic management 
content structure section introduces bdds 
section shows rule set converted bdd representation 
section explores visualisation analysis techniques bdd representations 
section presents simple graphical interface prototype filter analysis tool 
section describes status discusses possible research 
binary decision diagrams decision diagram method representing boolean expression 
example boolean expression represented decision diagram 
evaluate expression interpretation variables start root move downwards 
variable value choose path dashed line variable value choose path line 
rule easily evaluate function 
bryant introduced concept reduced ordered binary decision diagram obeys rules 
ffl duplicate terminals removed shall terminal labelled labelled simple decision diagram ffl duplicate non terminals removed ffl redundant tests removed edges leaving vertex go place delete vertex implies value variable node represents irrelevant point ffl total order placed variables expression edge label comes label order variables encountered order path root leaf 
reduced ordered binary decision diagrams simply called binary decision diagrams abbreviated bdds 
efficient algorithms known manipulating boolean expressions conjunction implication 
important properties bdds 
compact representations boolean expressions heuristic sense expressions compact 
second variable ordering bdd representation expression canonical 
simple example means build bdds get exactly bdd 
practice means checking equivalence done cheaply bdd constructed 
shows bdd representation seen significantly smaller 
practice uncommon expressions bdds tens megabytes size 
expressions efficiency benefits gained bdds orders magnitude difference size boolean expressions manipulated 
number representation integers represented bit vectors vectors bdds 
symbolic manipulation numbers done bit operations 
addition comparison efficiently implemented 
reasons symbolic numerical expressions efficiently implemented bit vectors bdds common sub expressions shared 
complexity issues size bdd dependent variable ordering chosen 
problem finding optimal bdd ordering np complete practice rules thumb finding variable orderings bdd packages come heuristic routines dynamic variable ordering 
emphasised bdds worked applications areas panacea boolean satisfiability problem easily represented bdds immediately indicates bdds solve boolean problems efficiently 
stronger result fact known problems require exponential space 
converting rule sets boolean expressions section describes rule set converted boolean expression represented bdd 
section describes individual rule rule set converted boolean expression bdd 
section shows boolean expressions individual rules combined give boolean expression entire list 
initial experimental results section 
description cisco access lists illustration 
methods modified fit approaches 
rule conversion cisco access rule form access list permit tcp range key components rule ffl permit reject indicates packets matching rule accepted 
field described section 
ffl protocol packet case tcp 
possible examples udp icmp 
ffl source address segments number range 
ffl mask source address segments 
ffl destination address format source 
ffl destination mask 
ffl range port addresses 
port component empty ports match 
eq short hand range representing numbers bit vectors key technique numbers represented bit vectors 
example address segment number 
lower level address segment just vector bits 
bdds represent sets numbers symbolically perform operations efficiently 
example represent bit number symbolically introduce bit vector hx boolean bdd variables 
condition vector equal just hx hf ti 
definition equality vectors yields boolean expression bits high low 
help presentation formulas compact formula confusing negation shown prime tick juxtaposition conjunction 
condition represented condition represented just large expressions represented compactly bdds 
boolean variables components rule introduce number boolean variables expressions represent information rule 
assign protocol number gamma 
numbers represented log bits introduce variables mp gamma encode protocol 
examples protocols represented bits 
example rule refers tcp protocol protocol packet represented expression hf ti just segment source address introduce variables form sax sax segment number 
example segment source address refers number encoded sa sa sa sa sa sa sa sa 
segment destination address introduce variables form dax dax segment number 
encoding destination addresses similar encoding source address 
ports specified port numbers represented bits introduce boolean variables significant bit encode port number 
variables possible succinctly represent individual ports ranges ports 
examples 
moment ignore effects mask section discusses mechanisms handle masks 
example example source address encoded boolean expression sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa sa destination address encoded similar way 
representing range ports needs little care 
port def hp conditions expressed boolean operations 
similarly parts rule condition port number just port int bv int bv function converts number bit vector representation 
range operations represented efficiently 
example greater equal operation easily defined 
ml language defined letrec geq geq geq port range information example rule encoded port geq int bv port leq int bv boolean expression represents may appear complicated bdd representation compact 
masks source destination addresses rule components base address mask 
mask gives rule specifier flexibility specify number possible matches rule 
effect mask indicates bits base address matched ignored 
masks extensively mechanism representing rule set able deal 
base address rule mask packet address matches exactly operation bit wise ing vectors 
segments mask typically means segment match exactly means segment ignored 
example source address ffl means packet match exactly coming machine concave cs wits ac za ffl means packet come machine wits domain 
cope masks mechanism dealing addresses described needs generalised 
easily accomplished direct implementation equation 
conversion entire rule set methods described entire rule set principle represented boolean expression 
suppose function converts rule boolean expression 
function defined recursively 
ffl rule set empty packets accepted corresponding boolean expression ffl rule accept rule packet accepted matches rule accepted rest rule set 
corresponding boolean expression disjunction boolean expression representing rule boolean expression representing rest rules 
ffl rule reject rule packet accepted match rule accepted rest rule set 
corresponding boolean expression conjunction negation boolean expression representing rule boolean expression representing rest rules 
pseudo code ruleset empty ruleset return false curr ruleset rest tail ruleset typeof curr accept return curr rest elsif typeof curr reject return curr rest binds tighter 
results algorithm described implemented tool built top voss system 
system lazy functional language called fl front uses bdds internally represent symbolic boolean expression 
voss system heuristics finding bdd variable orderings 
simple perl script processes rule set read prototype tool 
fl front user analyse rules various ways described detail section 
algorithm converting rule sets boolean formula tested synthetic test cases large real rule set supplied internet service provider 
set just rules provided commercial internet service provider converted boolean expressions simple algorithms described 
total time taken produce bdd represent rule set sun ultra yielding bdd size text file access list size 
maximum depth bdd determined number variables means check packet accepted requires worst case bit operations 
result encouraging shows bdd representation feasible lookup done quickly 
experimental evidence needed rule sets real log data 
worst case important average case important 
average case depends real data looks pattern incoming packets particularly important assessing cost lookup original rule set 
advantages boolean expression shape bdd effect semantics cost look 
changing variable ordering may mean size bdd greater length maximum path bdd grows semantics remains 
statistical analysis traffic indicate variable ordering minimise average lookup worst case lookup suffers 
doing linear representation rules difficult importance linear order access lists 
analysing bdd representations rule set section examined bdds compact representation lookup rule sets 
section presents bdd representation analysis 
analysis fully automated main point proposed tool provide human user ability interact rule set understand effect possible changes 
tool act oracle means exploring rule set 
display rule set cornerstone algorithms analyse rule sets routine boolean expression representing rule set displays human user 
bdd representation rule set compact machine friendly way representing rules far human friendly 
tool algorithm presents boolean formula human readable way tabular form 
simple example presenting rule set containing rules 
examples follow lines start colon input user prototype tool 
sc proto port cond proto ports src src src src dest dest dest dest table displays condition cond showing values source address destination address port protocol packets allowed 
argument sc gives order columns chosen routine default order user specify order argument 
size table depends order columns 
experience shown listing port protocol yields smallest tables addresses leads huge tables 
changing order user view rules different ways 
displaying table large set rules produces large tables 
instantiating conditions useful ways validating rule set ask questions 
example ffl accept packets port 
type packets 
ffl ports accept tcp packets 
ffl packets accept address 
ffl type packets accept sent address 
ffl queries expressed boolean conditions depending user goal results displayed routine described 
boolean combination conditions allowed 
examples ffl type udp packets accept 
sc port proto proto ports proto src src src src dest est dest dest ffl packets accept segment destination address icmp packets 
sc port proto dest ports proto src src src src dest dest dest dest ffl list packets accept network 
sc source ports proto src src src src dest dest dest dest ffl possible gs routine summarise results 
gs routine lists columns specified argument range values packet specified condition accepted 
example gs port proto dest dest proto shows range protocols protocols third fourth destination address segments tcp packets accepted giving details 
useful allows user view rule set different levels abstraction 
ffl packets accepted 
condition acceptance boolean expression look negation discover packets accepted 
example call tool lists order asked gre packets destined ports accepted 
sc proto port dest dest dest dest port range proto dealing modifications probably useful part tool ability analyse changes rule set changes changes particular rule change order rules removal addition rule 
original rule set represented boolean formula modified rule set represented boolean formula formulas perform desired analysis example formulas equivalent logically implies 
example tool 
example rule set file real read stored internally bdd accessible boolean variable cond analysed techniques previously described 
rule set real read stored internally time done boolean variables set boolean expression indicates packets allowed new rule set old indicates packets refused new rule set allowed new 
example packets displayed useful order 
rule real new rule real sc port proto dest dest dest dest source source source ports proto dest dest dest dest src src src src analysing access file category automatic validation automatic validation algorithm implemented 
rule goes list rules detects redundant rules done efficiently redundant rule detected user 
redundant rule necessarily error may result slower necessary lookup user expects rule useful may indicate problem rule set 
detection routine synthetic examples real rule set containing approximately rules 
case redundant rules detected 
cases redundant rule caused rule appearing rule set 
cause redundancies caused mask values rule cover subsequent rules 
automatic validation techniques possible 
example possible show deny rule list rules affected 
user interface issues methods previous sections packaged easy way hides underlying algorithm 
interface developed textual interface fl provides user simple expressive query language 
prototype graphical interface developed tcl tk illustrated figures 
shows analysis access file 
user types name file box 
information showing analysis shown 
display options shows order information 
clicking options user change order presentation 
user restrict analysis entering values boxes 
example rules pertaining tcp packets network displayed 
shows results comparing rule sets 
user enters file names chooses appropriate options displaying results 
differences displayed window 
industrial strength front care needs taken design 
ideal system probably provide important functionality graphical interface allow advanced user issue powerful queries textual interface 
analysing access file category examined problem filter rule sets routers firewalls 
rule sets important security performance 
unfortunately size filter rule sets grow difficult understand rules 
shown large rule sets represented boolean expression compact way bdds 
boolean expression easily manipulated various ways allows rule set manipulated analysed 
ffl rule set displayed various levels abstraction different perspectives 
enables user understand rule set allows allow 
ffl range queries performed rule set 
allows human user test rule set ensure behaviour rule set expected 
ffl effect changing rule set easily seen 
help reduce possibility errors introduced 
ffl automatic analysis rule set possible 
ffl simple graphical interface tool enables algorithms easily user having understand underlying theory 
cases computational resources required modest 
techniques network manager gain greater confidence rule set correct 
allow larger complex rule sets improving performance security network 
number areas research 
rules tabular form compact way needs 
nave algorithm works reasonably table size grow dramatically 
possible table compactly 
integrating tool tools possible information way 
practical point view lot spent graphical interface 
possibility boolean formula generate set rules cisco access list accept deny rules 
prototype tool efficiently implemented collection fl perl tcl tk code 
acceptable prototype industrial strength tool need efficiently reimplemented 
experience case studies lead ways automatically analysing rule sets 
related research areas bdd representation fast lookup possible hardware support 
gratefully acknowledge help internet solution posed question initially provided examples real access lists 
andrew anton worked previous version tool 
supported university research committee national research foundation 
done author sabbatical leave laboratoire analyse architecture des systemes centre national de la recherche scientifique 
shortened version appears south african telecommunications networks application conference 
wegener 
improving variable ordering obdds np complete 
ieee transactions computers september 
bryant 
complexity vlsi implementations graph representations boolean functions application integer multiplication 
ieee transactions computers february 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys september 
cisco systems configuring ip systems 
published cisco web site 
www cisco com cc td doc product software 

binary decision diagram representations firewall router access lists 
technical report tr wits cs department computer science university october 
proceedings 
seger 
voss formal hardware verification system user guide 
technical report department computer science university british columbia november 
available anonymous ftp ftp ftp cs ubc ca pub local techreports tr ps gz 
