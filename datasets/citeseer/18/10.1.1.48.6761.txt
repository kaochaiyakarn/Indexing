singular loop transformation framework non singular matrices wei li keshav pingali department computer science cornell university ithaca new york tr june discuss loop transformation framework integer non singular matrices 
transformations included framework called transformations include permutation skewing reversal transformation called loop scaling 
framework general existing ones difficult generate code framework 
shows integer lattice theory generate efficient code 
added advantage framework existing ones simple completion algorithm partial transformation matrix produces full transformation matrix satisfies dependences 
completion procedure applications parallelization generation code numa machines 
supported cornell theory center nsf presidential young investigator award ccr nsf ccr hewlett packard 
appear proceedings fifth annual workshop language compilers parallelism new haven august 
importance loop transformations generating code vector parallel machines widely recognized 
advance area banerjee showed important loop transformations permutation skewing reversal modeled unimodular matrices 
unimodular matrices integer entries determinant closed matrix product 
follows sequence loop transformations represented unimodular matrix conversely unimodular matrix interpreted representing sequence permutation skewing reversal transformations 
main benefit unimodular abstraction provides approach tackling called phase ordering problem problems obvious order transformations performed possible generate unimodular matrix desired order loop transformations determined easily 
banerjee framework address problem generating parallel loops wolf lam framework extensively address problem promoting data reuse improving cache performance 
propose non singular matrices unimodular matrices foundation modeling loop transformations 
non singular matrices include unimodular matrices special case permit include new transformation called loop scaling framework 
real pay easier non singular matrices unimodular matrices 
typical algorithm uses matrix framework generation parallel outermost loops exploitation locality numa architectures determines rows matrix pads remaining rows generate matrix represents legal transformation 
easier generate non singular matrix unimodular matrix fewer constraints satisfied give completion procedure produces non singular matrix rows 
completion procedure non trivial ensure result matrix respects dependencies loop nest 
surprisingly turns generating transformed loop nest somewhat intricate non singular matrices unimodular matrices main concern 
rest organized follows 
section define problem formally outline loop restructuring framework discuss difficulties generating transformed loop nest 
section sketch code generation technique case unimodular matrices discuss directly non singular matrices 
section solve code generation problem non singular matrices 
key technical result non singular matrix decomposed product lower triangular matrix positive diagonal elements unimodular matrix 
matrices generate transformed loop nest 
section give completion procedure non singular matrices 
section discusses related 
linear loop transformations section introduce integer lattices model iteration space loops non singular matrices model loop transformations 
iteration spaces integer lattices consider loop nest iteration space shown 
points iteration space loop modeled integer vectors dimensional space zz zz set integers 
example iteration represented vector 
general points iteration space loop nest depth represented integer vectors space zz convenient theory integer lattices view points iteration space generated integral linear combinations set basis vectors 
example easy see points iteration space shown generated integral linear combinations integer vectors similarly iteration space generated linear combinations integer vectors gamma define concepts precisely 
definition am set linearly independent integer vectors 
set mam called integer lattice generated basis am call integer matrix basis matrix columns basis 
loop nest property integer point loop bounds point iteration space loop nest 
call dense iteration space 
contrast shows sparse iteration space integer point example loop bounds represent point iteration space loop 
notion dense sparse formally defined follows 
definition iteration space dense integer vectors representing loop iterations integer vector gamma represents loop iteration 
iteration space sparse dense 
significance classification iterations spaces considerably difficult generate code loop nest iteration space sparse dense show section 
dimensional vector ith entry 
theorem integer vectors dimensional dense iteration space form integer lattice basis proof obvious 
step gamma max gamma min step original code target code original iteration space target iteration space gamma max gamma min gamma loop bounds image bounds working example loop transformations focus transformations represented linear toone mappings iteration space source program iteration space target program 
class transformations includes permutation skewing reversal new transformation called scaling 
examples transformations shown 
transformations standard scaling corresponds replacing loop iteration variable integer multiple 
linear mappings iteration spaces modeled integer non singular matrices 
reader verify matrices shown perform original loop nest loop interchange gamma loop reversal loop skewing loop scaling primitive transformations desired mappings source iteration space target iteration space integer non singular 
similarly points target iteration space image source iteration space points integer non singular matrix gamma definition loop transformation called transformation modeled integer non singular matrix 
performing sequence transformations corresponds composing mappings iteration spaces turn modeled product matrices representing individual transformations 
product number integer nonsingular matrices integer non singular follows set transformations closed composition 
conversely show transformation represented integer non singular matrix viewed composition basic transformations 
precisely result 
theorem transformation represented integer non singular matrix viewed composition permutation skewing reversal scaling 
proof applying appropriate elementary row column operations integer non singular reduced diagonal matrix 
elementary operations represented multiplying interchange reversal skewing matrices left hand side right hand side non singular matrix 
diagonal matrix reduced product scaling matrices 
mentioned earlier unimodular transformations subset transformations loop scaling 
important property unimodular transformations 
theorem unimodular transformations map dense sparse iteration space dense sparse iteration space 
proof lattice remains basis changed 
legality transformations transformation valid respect data dependencies original loop nest 
data dependencies represented distance direction vectors lexicographically positive 
example distance vector means iteration depends iteration gamma gamma 
td dependence vector new iteration space transformations linear 
transformation legal td lexicographically positive 
generating code generate code target loop nest generate loops scan points target iteration space lexicographic order replace occurences loop body old loop indices new loop indices 
problem non trivial discussed sections 
hand problem transforming loop body relatively straight forward sketch solution completeness 
vectors represent source target iteration variables notice gamma just set equations expressing old subscripts terms new ones eliminate occurrences source iteration variables body loop favor new ones 
running example set equations gamma transformed loop body shown 
note gamma integer point gamma may rational matrix expressions strength reduced 
difficulties generating code difficulty generating loops scan target iteration space transformation general preserve lexicographic order iterations may performed order source loop nest different order target loop nest obvious way source loop nest generate code 
attempt find image original bounds inclined lines running example generate loop nest visits lexicographical order integer points area bounded image 
section show approach works target iteration space dense sparse iteration spaces require additional machinery 
computing image bounds ways compute image original bounds describe simple method uses fourier motzkin elimination 
non singular matrix representing transformation image bounds target loop computed inverse transformation 
source target loop indices respectively non singular transformation loop bounds loop affine function loop indices gamma lower bound form gamma gamma may lower bounds maximum lower bound similarly upper bounds may affine bounds minimum upper bound bounds loop nest written matrix form theta theta matrix vector length 
identity matrix rows replicated theta theta matrix 
row plus corresponding row form lower upper bound 
source iteration space bounded inequalities gamma gamma gammab bounds replacing gamma gamma inequalities directly loop bounds bounds loop function outer loop indices 
fourier motzkin elimination algorithm suggested compute suitable bounds :10.1.1.48.7820
fourier motzkin algorithm may introduce redundant constraints may eliminated :10.1.1.48.7820
fourier motzkin algorithm quite simple 
consider system linear inequalities ij system partitioned sets inequalities sign coefficient linear functions gamma 
eliminate system get reduced system 
gamma max min gamma max min image bounds exact bounds dense iteration space process repeated exactly variable left 
bounds variable determined inspection reduced system equations 
going back problem consider system inequalities loop bounds computed solving inequalities bounds computed eliminating system fourier motzkin elimination solving consider working example 
iteration space represented integer vectors bounded system linear inequalities 
computing terms replacing inequalities fourier motzkin elimination image source bounds 
unfortunately inequalities directly generate code target loop nest 
problems 
lower upper bounds may integers example lower bound furthermore source iteration space dense target iteration space sparse 
means find way skip points example iteration space target loop nest 
dense spaces special case target iteration space dense unimodular matrix transform loop nest dense iteration space theorem problems solved easily 
target iteration space dense need skip points iteration space target loop nest 
furthermore floor ceiling operations get nearest integers image bounds 
example consider unimodular transformation gamma working example 
source bounds compute image bounds shown 
target space dense ceiling floor operations compute exact bounds shown 
discussion sparse iterations spaces ceiling floor operations solve problem 
example closest integer point boundary starting point target loop nest 
possibility conditional tests loop body avoid executing loop body points correspond points target iteration space 
approach researchers involves visiting integer points necessary conditional tests expensive 
algorithm code generation key insight solving general problem integer non singular matrix decomposed product lower triangular matrix positive diagonal elements unimodular matrix decomposition related hermite normal form transformation matrix 
show transform program resulting program executes iterations lexicographic order program obtained transformation matrix 
show diagonal elements correspond loop step sizes 
putting observations gives algorithm generates efficient code general case non singular matrices 
auxiliary iteration space applying column operations integer non singular matrix reduce integer lower triangular matrix positive diagonal elements 
lower triangular matrix related hermite normal form matrix follows written product lower triangular matrix positive diagonal elements unimodular matrix represents composition column operations 
decomposition unique purpose decomposition adequate avoid abuse terminology refer hermite form transformation matrix shows compute hu source space target space define ts hus hs definition iteration space called auxiliary iteration space respect decomposition hu theorem auxiliary iteration space dense space source space dense 
proof follows theorem unimodular 
exact loop bounds auxiliary space computed algorithm section 
important property auxiliary space executes iterations lexicographic order target iteration space 
see consider running example 
gamma gamma gamma lower triangular positive diagonal elements unimodular 
consider transform source program 
input theta integer matrix output hermite form unimodular matrix algorithm hermite theta identity matrix 
consider submatrix apply elementary column operations positive zero 
gamma computing hermite form unimodular transformation considered section bounds auxiliary iteration space shown 
develop readers insight relationship source auxiliary target iteration spaces mappings spaces shown notice traversed lexicographical order order different source 
seen comparing iteration space diagrams figures 




















show property true general oe lexicographical order 
theorem auxiliary iteration space traversed lexicographical order target iteration space traversed lexicographical order 
proof hs lower triangular matrix positive diagonal 
oe iterations auxiliary iteration space gamma distance vectors 
clearly 
see lexicographical order preserved consider new distance gamma gamma ith element leading nonzero positive 
leading nonzero ii positive 
oe result yields technique code generation decompose hu generate loops traversing auxiliary space technique section technique works unimodular matrices compute target iteration space variables loop body 
bounds auxiliary space computed earlier target code running example max min gamma ji code avoids making conditional tests improved considerably 
notice computation invariant inner loop linear function outer loop index strength reduced 
similarly linear function strength reduced 
optimizations left optimization phase preferable induction variables directly loop control variables show 
target iteration space lower triangular easy convert bounds auxiliary space bounds target space 
example relation spaces equation gamma equation follows bounds bounds multiplied 
bounds input hermite form bounds auxiliary space output bounds target space algorithm bounds gamma compute offset replacing gamma 
gamma gamma gamma gamma compute lower bound gamma replaced 
gamma gamma ii compute upper bound gamma replaced 
gamma gamma ii computing loop bounds gamma bounds bounds multiplied offset gammap gamma bounds gamma max gamma min bounds constant bounds depend bounds directly construct loop nest shown 
general algorithm 
proof correctness algorithm depends lemma fact diagonal elements positive omitted 
lemma point target iteration space image point auxiliary space 
ordinate written function similarly written function proof follows observation leading principal sub matrix lower triangular non singular inverse lower triangular matrix lower triangular 
complete generation code need skip points bounds target iteration space 
difficult points appeared irregular pattern loop nest bounds fortunately show case 
fact show suffices loops constant step sizes step sizes integers diagonal hermite form 
working example diagonal means loop step outer loop inner loop 
generally theorem 
theorem positive integers diagonal hermite form gaps dimension 
proof consider points auxiliary space ordinates gamma dimensions 
images target space 
lemma follows ordinate gamma dimensions difference ith dimension ii lower triangular 
loop nest constructed traverse target space directly 
running example target program step gamma max gamma min step notice auxiliary space compute bounds target space 
sparse source iteration space far considered case source iteration space dense 
technique works source iteration sparse long source space regular 
regular sparse space represented integer lattice base space dense 
lattice basis thought transformation bounds computed fourier motzkin elimination 
transformation considered new base space transformations closed composition 
observation lets handle source loops lower bounds affine functions loop indices upper bounds piece wise affine functions loop indices step sizes constant shown 
theorem loop nest constant steps regular 
ub step ub step gamma gamma ub step proof loss generality loop nest shifted loop point 
just changes origin lattice 
easy show triangular matrix jth row comes coefficients lower bound loop step jth loop forms basis lattice loop points 
completion procedure advantage integer non singular matrices simple completion procedure takes rows desired transformation matrix generates complete transformation matrix respects dependences 
example illustrates need completion procedure consider parallelizing program mimd machine 
dependence matrix program outermost loop parallel carry dependences entry dependence vector 
example outermost loop parallel loop iteration depends iteration gamma 
transform loop nest outermost loop parallel find transformation entry row td 
condition satisfied transformation achieve goal gamma delta 
condition satisfied choosing gamma 
determines row transformation matrix add additional row get non singular matrix respects dependences loop nest 
expr transformation data locality second example illustrates need completion procedure generation code numa architecture starting language fortran userspecified data distributions 
problem discussed length companion simply show example 
consider program 
assume dimensional array wrapped column distribution columns array distributed round robin manner processors number processors processor gets columns processor gets columns distributing iterations outer loop processors results processor executing iterations consider accesses elements array remote memory accesses 
consider transformed program 
distribute outermost loop processors remote accesses particular goal need transform loop nest subscript column index new outer loop index 
means transformation row transformation 
need invoke completion procedure add additional row get full matrix 
refer completion partial transformation 
completion procedure completion procedure requires precondition satisfied 
precondition partial transformation full row rank violate dependences 
conditions reasonable row transformation matrix linearly dependent clearly impossible generate non singular matrix adding additional rows 
similarly row partial transformation violates dependences rectified extending matrix additional rows 
delete dependence vectors carried loops corresponding rows partial transformation considered filling rest matrix 
completion procedure works finding vector independent existing row vectors partial transformation degrees dependence vector 
vector appended new row partial transformation dependencies carried loop corresponding row dropped consideration 
technique repeatedly applied dependencies satisfied point apply standard linear algebra techniques complete generation non singular matrix 
find desired rows invariant invariant dependence vectors orthogonal complement subspace spanned rows partial transformation 
find vector degrees dependence vector strictly degrees dependence vector 
vector looking row dependence matrix nonzero entries 
row index 
lemma degrees dependence vector strictly degrees dependence vector 
proof easy check satisfy condition dependence vector necessarily linearly independent rows partial transformation 
project orthogonal complement subspace spanned rows partial transformation projected vector linearly independent existing rows 
partial transformation easy see projector gamma gamma 
projected vector qe cy positive scaling number entries integers relative primes 
projection shown 
theorem projected vector linearly independent rows degrees dependence vector 
proof ffl linear independence prove stronger result orthogonal rows gamma gamma ffl degrees dependence vector symmetric orthogonal complement invariant 
means qd degrees dependence vector lemma 
extending partial transformation projection complete algorithm 
theorem algorithm completion generates legal transformation 
proof immediately follows theorem 
apply algorithm examples previous section 
example satisfied choosing 
new dependence vector means new outer loop parallel loop 
matrix gamma satisfies conditions 
second example dependence full transformation gamma discussion completion technique discussed works dependences represented direction vectors 
considerable flexibility choice projector input theta partial transformation matrix dependence matrix output theta legal transformation matrix algorithm completion matrix row column empty nonzero row gamma gamma positive number integer vector entries relative primes 
dependence vector theta identity matrix 
consider submatrix apply elementary column operations nonzero zero 
columns exchanged exchange rows return append computing legal full transformation shown just possibility choice desirable projector depend application 
related generalized loop transformations studied banerjee showed unimodular matrices model loop interchange skewing reversal 
wolf lam extended unimodular framework deal distance direction vectors transform loop nests cache locality 
irigoin developed algorithms scanning polyhedra loop nests :10.1.1.48.7820
considered dense iteration spaces 
lu chen injective functions model loop transformations conditional tests target code technique eliminates need tests 
aware prior general completion procedures partial transformations 
introduced loop transformation framework called transformations integer non singular matrices 
efficient code generated target loop nests integer lattice theory 
simple completion algorithm generates correct transformations partial transformations 
acknowledgments mark tom coleman shmuel onn danny ralph paul eva tardos mike todd charles van loan wu listening ideas comments 
allen kennedy 
automatic translation fortran programs vector form 
acm transactions progamming languages systems october 
irigoin :10.1.1.48.7820
scanning polyhedra loops 
third acm symposium principles practice parallel programming pages april 
banerjee 
unimodular transformations double loops 
proceedings workshop advances languages compilers parallel processing pages august 

geometry numbers 
berlin springer 
dantzig 
fourier motzkin elimination dual 
journal combinatorial theory 
golub van loan 
matrix computations 
johns hopkins university press 
li pingali 
access normalization loop restructuring numa compilers 
proc 
th international conference architectural support programming languages operating systems 
lu 
unified framework systematic loop transformations 
rd acm sigplan symposium principles practice parallel programming pages april 
padua wolfe 
advanced compiler optimizations supercomputers 
communications acm december 
schrijver 
theory linear integer programming 
john wiley sons 
wolf lam 
data locality optimizing algorithm 
proc 
acm sigplan conference programming language design implementation pages june 
wolf lam 
loop transformation theory algorithm maximize parallelism 
ieee transactions parallel distributed systems october 
michael wolfe 
optimizing supercompilers supercomputers 
pitman publishing london 
