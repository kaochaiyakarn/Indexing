fast bit vector algorithm approximate string matching dynamic programming gene myers march approximate string matching problem find locations query length matches substring text length fewer differences 
simple practical bitvector algorithms designed problem notably agrep 
algorithms compute bit representation current state set difference automaton query asymptotically run time word size machine practice 
algorithm comparable simplicity requires nm time virtue computing bit representation relocatable dynamic programming matrix problem 
algorithm performance independent efficient previous results useful choices small algorithm dependent rapidly compute blocks dynamic programming matrix russians algorithm wu manber myers 
gives rise kn expected time algorithm case may arbitrarily large 
practice new algorithm computes region matrix theta blocks basic algorithm subroutine significantly faster previous russians algorithm computes region theta blocks table lookup 
performance improvement yields code superior existing algorithms filtration algorithms sufficiently small 
problem finding substrings text similar query string central problem information retrieval computational biology name applications 
intensively studied years 
common incarnation problem find substrings match query fewer differences 
algorithm addressing exactly problem attributable sellers sel claim effectively solved early string comparison 
sellers algorithm requires mn time length query length text 
subsequently refined kn expected time ukkonen ukk kn worst case time space landau vishkin lv space galil park gp 
dept computer science university arizona tucson az mail gene cs arizona edu 
partially supported nlm lm early algorithms kn expected time algorithm universally best practice 
algorithm achieves efficiency computing region zone underlying dynamic programming matrix entries equal refining basic design chang cl went devise faster algorithm conjectured run kn oe expected time oe size underlying alphabet 
wu manber author wmm developed practical realization russians approach mp applied ukkonen zone gives kn log expected time algorithm space dedicated universal lookup table 
practice algorithms superior ukkonen zone design faster different regions oe input parameter space 
time new thread practice oriented results exploited hardware parallelism bit vector operations 
letting number bits machine word sequence results began algorithm exact matching case gonnet byg culminated algorithm differences problem wu manber wm 
authors interested specifically text retrieval applications quite small small expression ceiling braces 
circumstances algorithms run kn time respectively 
baeza yates navarro byn realized variation wu manber algorithm implying performance mk 
final thrust development filter algorithms eliminate regions text match query 
results broadly divided line algorithms wm cl line algorithms mye permitted preprocess presumably static text performing number queries 
filtering presumably small segment text methods invoke algorithms verify match portion remains 
filtration efficiency percentage text removed consideration methods increases mismatch ratio approaches point dependent oe algorithm provide fastest results practice 
improvements verification capable algorithms desirable results improve filter algorithms large number matches needed applications filtration ineffective 
verification capable algorithms inspired russians approach bit vector computation table lookup 
develop bit vector algorithm approximate string matching problem 
asymptotically superior prior bit vector results practice shown superior bit vector algorithms choices brief previous algorithms bit vectors model maintain state set non deterministic finite automaton states exactly matches strings differences fewer query 
method uses bit vectors different way encode list arithmetic differences successive entries column dynamic programming matrix 
second algorithm comes observation result thought subroutine computing theta block matrix time 
may embed zone paradigm ukkonen algorithm exactly russians technique wmm 
result kn expected time algorithm show practice outperforms previous chang cl regions oe parameter space 
preliminaries assume query sequence text positive threshold 
ffi unit cost edit distance strings approximate string matching problem find positions suffix matching fewer differences min ffi classic approach problem sel compute theta dynamic programming matrix min ffi mn time computation known recurrence minfc gamma gamma gamma gamma subject boundary condition follows solution approximate string matching problem locations basic observation computation done space computing column requires knowing values previous column gamma leads important conceptual realization may think column state automaton algorithm advancing state gamma state scans symbol text 
automaton started state 
state entry fewer considered final state 
automaton just introduced states 
follows matrix property difference adjacent entries row column gamma 
formally define horizontal delta deltah gamma gamma vertical delta deltav gamma gamma theta 
lemma mp ukk deltav deltah gamma 
follows know particular state suffices know relocatable column deltav deltav replace problem computing problem computing relocatable matrix deltav 
potential difficulty determining deltav final requires time computes sum sigma deltav explicitly order 
algorithm compute block vertical deltas time afford compute sum 
fortunately simultaneously maintain value score computes deltav fact score score score gamma deltah 
note horizontal delta row matrix required horizontal delta block vertical delta seen natural product block computation 
illustrates basic dynamic programming matrix formulation relocatable terms 
basic algorithm representation 
seek compute successive deltav time bit vector operations assumption choosing represent column deltav bit vectors pv mv bits set corresponding delta deltav gamma respectively 
formally pv deltav mv deltav gamma notation denotes th bit integer note deltav exactly pv mv true 
value legend value value dv matrix relocatable matrix dynamic programming matrices match 
cell structure 
consider individual cell matrix consisting square gamma gamma gamma gamma 
vertical deltas deltav deltav deltah deltav gamma horizontal deltas deltah deltah deltah deltah gamma associated sides cell shown 
define eq eq 
definition deltas basic recurrence values follows deltav minf deltav deltah gamma deltah deltah minf deltav deltah gamma deltav case may view deltav deltah eq inputs cell deltav deltah outputs 
eq xv dv eq xv cell structure input output function 
cell logic 
observe choices deltav deltah possible values eq 
possible inputs cell 
crucial idea lead simple observation case able devise logical circuits formulas capturing functional dependence outputs inputs formulas apply universally cells 
suggests find conceptually easiest think deltav function deltah modulated auxiliary boolean value xv eq deltav gamma capturing net effect deltav eq deltav brute force enumeration possible inputs may verify correctness table describes deltav function deltah xv 
table value gamma denoted order emphasize logical opposed numerical relationship input output 
px io mx io bit values encoding deltax io px io deltax io mx io deltax io gamma 
definition xv eq mv table verify pv mv mh xv ph ph xv symmetry xh eq mh follows ph mh mv xh pv pv xh alphabet preprocessing 
evaluate cells treatment needs boolean value eq cell 
terms bit vectors need integer eq eq 
computing integers scan require time defeat goal 
fortunately preprocessing step performed scan begins compute table vectors result possible text character 
formally sigma alphabet originate build array sigma 
constructing table easily done time occupies sigmaj space continuing assumption 
assuming course sigma finite 
small loss efficiency algorithm operate infinite alphabets 
scanning step 
central inductive step compute score bit vector pair pv mv encoding deltav information column gamma symbol keeping automata conception refer step scanning illustrate left 
basis induction easy know start scan pv mv score scanning step accomplished stages illustrated 
vertical delta column gamma compute horizontal delta bottom respective cells formula 

horizontal delta cell compute vertical deltas column formula 
stages score row updated horizontal delta available stage horizontal deltas shifted pushing horizontal delta introducing delta row 
think stage pivot pivot stage lower left cell pivot second stage upper right 
delta swing arc depicted produce results modulated relevant values 
logical formulas cell schematic lead directly formulas accomplishing scanning step 
note horizontal deltas stage recorded pair bit vectors ph mh encodes horizontal deltas exactly pv mv encodes vertical deltas ph deltah mh deltah gamma 
ph mv gamma xh pv gamma mh pv gamma xh stage score score score score mv pv mv pv mv pv mh ph mh ph mh ph mh ph mv pv mv pv mv pv mv pv mv pv scan xh xh xh xv xv xv stage stage stages scanning step 
score score gamma ph gamma mh ph mh pv mh gamma xv ph gamma mv ph gamma xv stage point important understand formulas specify computation bits bit vectors bits computed parallel appropriate machine operations 
example express computation ph ph mv xh pv 
factors 
induction incomplete show compute xv xh definition xv mv gamma xh mh gamma precomputed table supplying eq bits 
bitvector xv directly computed start scan step vector mv gamma input step 
hand computing xh requires value mh turn requires value xh cyclic dependency unwound 
lemma gives formulation xh depends values pv gamma 
lemma xh gamma pv gamma 
basically lemma says th bit xh set preceding eq bit say th run set pv bits covering interval gamma 
words think eq bit propagated run set pv bits setting positions xh vector 
brings mind addition integers carry propagation similar effect underlying bit encodings 
illustrates way addition desired effects bits summarize lemma prove precisely full 
lemma je gamma 
general case horizontal delta row gamma bits set accordingly 
general case horizontal delta row gamma replaced mh 
carry false start reset carry far goal method illustration xv computation 
complete algorithm 
remains just put pieces 
gives complete specification style program give feel simplicity efficiency result 

precompute sigma 
pv 
mv 
score 

eq 
xv eq 
xh eq pv pv pv eq 
ph mv xh pv 
mh pv xh 
ph gamma 
score 
mh gamma 
score 
ph 
pv mh 
xv ph 
mv ph xv 
score 
print match delta basic algorithm 
complexity algorithm easily seen moe oe size alphabet sigma 
bit operations performed character scanned 
contrasted wu manber bit vector algorithm wm takes moe kn prevailing assumption baeza yates navarro bit vector algorithm byn complexity assumption improves moe time assumes gamma 
consider case unrestricted 
situation easily accommodated simply modeling bit bit vector dm words 
operation bit vectors takes time 
directly follows basic algorithm section runs moe nm time oem space 
contrasted previous bit vector algorithms wm byn take moe time asymptotically 
leads say algorithm represents true asymptotic improvement previous bit vector algorithms 
unrestricted algorithm 
blocks model 
just think computation single cell realizing input output relationship deltas borders may generally think computation theta rectangular subarray block cells resulting output deltas lower right boundary deltas upper left boundary input 
basic observation russians approaches sequence comparison mp wmm output resulting possible input combination effect computation blocks encountered particular problem instance 
similarly modify basic algorithm effect computation blocks bitvector computation opposed table lookup careful observe context horizontal input delta may gamma 
sequence comparison results involve computing region zone underlying dynamic programming matrix ukk 
depicts hypothetical zone tiling theta blocks 
provided effectively delimit zone performing block computation tiling gives factor speedup underlying zone algorithm 
example take ukkonen kn algorithm improve kn 
note blocks restricted max dm levels oem eq vectors need precomputed 
note internal boundary tiling delta 
max 

bw bw bw bw zone level block block dynamic programming 
block algorithm approximate string matching 
ukkonen improved expected time standard mn algorithm approximate string matching computing zone matrix consisting prefix column column 
kg algorithm takes time proportional size zone shown cl expected size kn 
computing just zone easily accomplished observation gamma kg 
block algorithm kn expected time algorithm devised earlier wmm blocks computed time russians lookup table 
proposing exactly thing bit vector approach compute theta blocks time 
see section results factor improvement performance russians table lookups limited theta blocks large tables involved result poorer cache coherence compared bit vector approach storage required typically fits board cpu cache 
describe small modifications necessary tile full 
empirical results report sets comparisons run dec alpha 
study basic bit vector algorithm previous bit vector results wm byn approximate string matching second set experiments involves algorithms unrestricted 
experiments determine range filter algorithms superior performed preliminary study 
expected time complexity algorithm form theta oe experiments aimed empirically measuring full detail specific trials noting design guarantees measurement error search texts obtained randomly selecting characters alphabet size oe equal probability 
set experiments compare bit vector algorithms case results shown 
left show best estimate algorithm 
basic algorithm constant true baeza yates navarro algorithm save applied region parameter space gamma 
algorithm extended treat greater range linking automata extension run twice slowly case measured clearly competitive basic algorithm remainder region 
wu manber algorithm performs linearly squares regression line fits results trials save fit roughly values see 
hypothesize due effect branch prediction instruction pipeline hardware 
depicts values method superior 
zone baeza yates navarro algorithm requires automata linking faster basic algorithm algorithm manber wu faster 
remaining choices basic algorithm gives best performance 
second set experiments aimed comparing verification capable algorithms accommodate unrestricted choices case need consider algorithm results cl wmm competitors known dominated practice wmm 
algorithms suitably large zone reaches row matrix running time depend set trials ran trials oe theta theta 
choices oe graph time function curve algorithm 
immediately clear block algorithm superior choices oe tried 
change algorithm may eventually overtake oe number printable ascii characters 
baeza yates navarro wu manber basic baeza yates navarro wu manber basic performance summary regions superiority bit vector algorithms 
byg baeza yates gonnet 
new approach text searching 
communications acm 
byn baeza yates navarro 
faster algorithm approximate string matching 
proc 
th symp 
combinatorial pattern matching 
springer lncs pages 
cl chang 
theoretical empirical comparisons approximate string matching algorithms 
proc 
rd symp 
combinatorial pattern matching 
springer lncs pages 
cl chang lawler 
sublinear expected time approximate matching biological applications 
algorithmica 
gp galil park 
improved algorithm approximate string matching 
siam computing 
lv landau vishkin 
fast string matching differences 
computer system sciences 
mp paterson 
faster algorithm computing string edit distances 
computer system sciences 
mye myers 
sublinear algorithm approximate keywords searching 
algorithmica 
sel sellers 
theory computations evolutionary distances pattern recognition 
algorithms 
ukk ukkonen 
finding approximate patterns strings 
algorithms 
wm wu manber 
fast text searching allowing errors 
communications acm 
wmm wu manber myers 
subquadratic algorithm approximate limited expression matching 
algorithmica 
differences wmm differences wmm differences wmm differences wmm differences wmm timing curves kn block algorithm versus chang wu manber myers wmm alphabet sizes oe oe oe oe oe 
