visual query systems taxonomy batini catarci costabile levialdi dipartimento di informatica sistemistica universit di roma la sapienza salaria rome italy istituto di scienze dell informazione universit di bari bari italy dipartimento di scienze dell informazione universit di roma la sapienza salaria rome italy visual query systems vqs query systems visual representations denote domain interest express related requests may seen evolution query languages adopted database management systems 
vqs investigated solve day problems conventional query systems 
significant needs provide friendly man machine interaction allow database search non technical users introduce mechanism comfortable navigation cases incomplete ambiguous queries 
order explain compare evaluate different features existing suggested vqs taxonomy proposed expressive power usability classes potential users 
clarify taxonomic criteria examples representative vqs 

studies performed improve man machine interaction allowing fruitful friendly complex programs 
traditionally order teach specific programs set handbooks written material provided user newcomer field expert may incorporate required knowledge program utilization 
approach commonly schematically may represented series steps aiming developing mental model program computing platform 
contrary order obtain effective man machine communication information directly perceivable research partially supported national research council cnr italy progetto sistemi eec esprit project kim 
human conveyed system efforts requested user reduced intermediate learning mean required 
sense new approach proposed visualization representation drawings images metaphors cater information adequate level abstraction concise form 
visual approach advantageous due reduction mental load immediate availability descriptions computation processes interrelationships 
approach programming environments languages systems developed years showing interesting properties friendly easy understand 
database area proved particularly fruitful applying visual techniques specifically accessing stored data 
visual query systems vqs may defined query systems essentially visual representations depict domain interest express related requests 
vqs provide user friendly query interfaces database management system 
include language express queries pictorial form variety functionalities facilitate man machine interaction 
oriented wide spectrum users having limited technical skills generally ignoring inner structure accessed database 
years vqs proposed literature adopting range different visual representations interaction strategies 
proposes taxonomy vqs expressive power usability classes potential users 
survey existing proposed vqs classified proposed taxonomy reported illustrate examples vqs exploiting different visual representations 
section introduces basic concepts visual interaction database defining metaphors icons diagrams visual query languages vqs 
section describes main features vqs pointing evolution traditional query systems 
section illustrates taxonomy vqs section addresses open problems 

basic concepts visual interaction databases basic paradigm visual interaction metaphor quality terms understandability clarity effectiveness extremely important raising abstraction level communication enlarging class potential users system 
century linguists started investigating different figures speech particularly metaphor 
pioneering area done peirce firstly defined sign basic language component 
peirce sign may establish natural correlation correspondence fact referent object may concrete 
furthermore sign may refer object arbitrary convention relate resemblance metaphor defined sign explicit latent object may derived 
role metaphor widely recognized exploits user knowledge domains 
done metaphor general field linguistics little performed metaphor bidimensional representations 
fact formal definition visual metaphor lacking speculation topic necessary 
generally visual metaphor includes part object represents visually remind object part may amplified significant feature object caricature face border object outline city block metaphor represent concept red cross white background refers availability medical care black cross recalls catholic religion 
times metaphors refer properties fragility broken glass label box low temperature stylized snow application visual metaphor visual programming interested computational metaphors representing typical programming language constructs assignment iteration recursion concurrency synchronization different data types forms records files originally icons associated religious images paintings russian orthodox religion years word primarily denote visual metaphor referring concrete object action 
examples universal set traffic icons icons denote services locations airport 
icon characteristics listed taxonomy icons reported 
people refer iconic languages iconic interfaces iconic systems languages interfaces systems icon 
icon belongs bidimensional world information represented form structure color numbers text advantages image representation expressive power images illustrations maps plans reduced mental load due limited amount information stored compared long string characters cultural independence viewer icons loose connection user natural language specific background 
icons may user defined user may tailor shape mental representation tasks performed 
attempt formalize theory icons chang introduced concept generalized icon object icon representing object process icon representing action computational process procedure 
cases icon pair distinguish pictorial part image seen screen semantic part xm meaning image conveys 
example object icon known icon indicating restaurant pictorial part image fork knife semantic part implies presence restaurant 
example process icon home icon hypercard tm indicating return basic card 
object icons easily understood stylized objects process icons generally difficult understand 
pointed difficulty designing action icons limitation development iconic languages 
third basic element vqs diagram widely visual systems tool representing categories objects 
main feature provide structure piece reality 
instance database area diagrams typically represent structuring categories available data models means specially defined symbols 
entity relationship model entities represented rectangles relationships entities diamonds 
meaning diagram objects provided association symbol text instance entity person represented rectangle labeled person 
diagrams show state transitions system circles denote different states labelled edges indicate transitions states 
diagrams employ different paradigm respect icons diagrams seen convention tools icons seen tools 
order give concise definition visual language may say authors implies systematic visual expressions icons diagrams gestures convey meaning formal way 
frequently people visual languages iconic languages graphical languages synonyms 
follow definition visual languages prefer call iconic languages images icons extensively graphical languages primarily diagrams graphs flow charts block diagrams 
classification visual languages languages subdivided different classes interested class visual programming languages 
languages programming constructs rules visual handle non pictorial objects superimposed visual representation 
objects traditional data types arrays lists stacks application oriented data types forms documents class visual programming languages subclass exists deals particular kind non visual objects data databases subclass languages visual query languages 
systems including languages environments called vqs taxonomy provided 

visual query systems section describe main features query systems show vqs seen evolution traditional systems aim overcoming typical limitations respect expressive power ease 
query languages query language set formally defined operators suitably composed allow express requests database execution query produces extraction database data consistent meaning request 
query language works database set files containing integrated minimally redundant representation data regarding reality interest object system 
database defined terms data model set structuring mechanisms describing information interest object system 
possible description levels extension corresponds concrete stored data intension schema database corresponds classes terms data classified related 
example relational model extension set tuples populating tables intension formed relation names attribute names plus keys dependencies defined attributes 
data model provides set structuring mechanisms order perceived user expressed terms data representation language provides syntactic rules describing structuring mechanisms data model 
representation languages may associated data model 
database expressed specific data model call representation description terms representation language 
example different representations provided relational database concerning suppliers supplied parts projects parts supplied corresponding quantities 
queries formulated composing set operators parallel data model form query model data model turn represented terms query representation language 
query model query representation language component parts query language introduced 
term query language interested distinguishing components 
example query model relational algebra operators perform set theoretic operations union intersection difference select join query described relational algebra may state query terms representations shown 
relational database corresponding representations traditional query languages inherit limitations corresponding dbms data models hierarchical network relational representations available corresponding systems put market 
data models semantics object oriented improve interaction user system allow user focus attention directly objects 
having disposal representation data easy user isolate information type subtypes properties follow semantic connections objects find closely related objects 
query languages developed semantic object oriented data models allow selection manipulation navigation complex objects conceptual level 
common restriction traditional query models lies expressive power operators usually limited respect general purpose languages 
semantic object oriented logical models datalog common effort improve expressive power query language retaining friendliness efficiency 
worth noting query languages developed far syntax resembles programming languages query expressed linear string operators operands denoted terms furthermore syntax operators usually complex learn interaction user system keyboard writing text 
representations query visual query languages reason introducing visual query languages respect previous generation languages desire improve effectiveness data query representation languages 
achieved enlarging communication bandwidth language wider range communication media relying senses human visual acoustic tactile 
initiate comparative analysis traditional visual query languages means example 
illustrate query expressed known traditional languages sql qbe examples visual query languages 
database query applies concerns customers bank accounts transactions performed accounts 
customers types persons companies respectively 
goal query find amounts transactions performed persons 
may observe 
query sql expressed linear string operators data referred names 
links objects expressed relational systems means replicated keys user explicitly compare keys order traverse relation 
concept person explicitly appear object schema selected means restriction query 

qbe dimensions express query exploiting space usage 
furthermore query description directly superimposed schema representation improving user perception reality interest 
object identification schema traversal suffer mentioned abstraction weakness relational model 
comparison relational query languages graphical languages iconic languages query 
graphical languages semantic models objects relationships defined conceptually represented means high level abstractions aggregations generalizations 
example entity relationship schema entity customer seen level aggregation attributes customer address name relationship possess second level aggregation customer account 
time generalization customer person explicitly represented schema 
principle object real world application represented means specific concept schema 
furthermore concept schema represented means graphical symbol diagram 
consequence user released syntactic implementation details query naturally expressed pointing directly objects spatially navigating 

iconic languages reality interest directly represented schema means visual metaphors icons 
query performed selecting combining icons producing new icons 
example query amount transactions expressed connecting icon representing transaction icon person means icon possess overlapping icon amount icon transaction note query require specific information person accounts 
previous example allows compare traditional query systems vqs 
visual systems full power new technologies dimensional representations colors multiple windows extending man machine communication bandwidth directions 
time object system represented natural way data representation language shortening perception path user follow order recognize reality interest computer oriented representation 
holds activity expressing query process icons navigation diagrams substitute names commands 
furthermore visual languages flexible traditional monolithic languages usually learning language significant part needed able express range queries simple ones complex ones 
opposite side visual languages manifest limitations deriving partly paradigms partly form available technology 
concerning specifically iconic languages standard established set icons different applications consequence number icons increases potential ambiguity arises interpretation set icons discrimination power tends decrease 
icons controlled composition mechanisms syntax rules mature standardization presently available contrast established syntax traditional languages 
weakness side holds formal definition semantics paradoxically fully achieved visual language aim represent directly reality interest inherently ambiguous 
limits available technology allow visual languages inherent power 
limitations screen size definition impose cluttered drawings images decreasing readability scrolling mechanisms may override problem paying price loosing comprehensive representation reality interest 

classifying visual query systems section define general criteria comparing classifying vqs 
query environments offer user integrated set functionalities final goal extraction suitable information database 
query system classified terms done system expressive power environment 
system may order build query concept usability determined available strategies interaction representation models 
terms classes users systems addressed 
deal features separately 
survey existing proposed vqs classified proposed taxonomy reported 
expressive power expressive power query system defined ability system extract meaningful information database 
formally expressive power concept computable query 
fixed countable set called universal domain finite set includes elements appearing database query partial function giving output relation 
query said computable partial recursive satisfies consistency criterion databases isomorphic corresponding outputs isomorphic isomorphism 
words result query independent organization data database treat elements database uninterpreted objects 
excluding queries expressing undecidable problems computable queries seen general class reasonable queries 
meaningful classes queries investigated giving rise called chandra hierarchy 
significant class queries inside hierarchy class order queries due codd examined basic ways querying relational database order logic relational algebra 
codd showed query expressed order logic expressed relational algebra vice versa 
fact formalisms equivalent meant robust concept 
order logic fairly expressive term completeness indicate query language express order queries 
apparent early amount expressive power provided language adequate expressing useful queries transitive closure generally fixpoint queries queries obtained augmenting standard order operators construct fixpoint 
hand languages friendly express queries simpler order queries significant average database users elementary requests 
consequence remarks expressive power visual query languages developed far lower equal classes order fixpoint queries 
precisely iconic languages fall lowest level classes directed casual user mainly interested friendly expression simple queries queries 
hand graphical languages equally expressive relational algebra placed upper levels hierarchy see 
order exactly characterize expressive power vqs worthwhile refine chandra hierarchy terms new classes shown gray hatched boxes 
generalized transitive closure queries correspond class queries obtained extending relational algebra generalized transitive closure operator denotes transitive closure operation cycle conditions extended boolean expressions equality inequality operators 

stratified linear queries correspond class queries obtained augmenting linear horn clause programs programs rule recursive subgoal stratified negation 
class includes common recursive queries find descendants person descendants person proven equivalent order logic transitive closure queries non deterministic logarithmic space queries assuming ordering domain 
order queries enriched special purpose operators correspond class queries obtained enriching relational algebra operators compute new database values applying aggregation counting functions 
example queries find global amount salaries employees answering query requires ability recognize numbers database add produce number output 

calculus queries correspond class queries obtained calculus calculus similar relational calculus defined difference atoms containing different object sets entity sets relationship sets allowed object sets explicitly related schema interest 
assumption reflects property entity relationship schemas semantic links real world modelled explicitly represented 

restricted join queries correspond class queries obtained relational operators select project join operator applied object classes explicitly related database 
enriched chandra hierarchy usability concept usability may specified terms models vqs denoting data queries corresponding visual representations strategies provided system order formulate query 
features described sequel 
vqs may distinguish types models external internal representing data queries 
external data model set structuring mechanisms express data semantics internal data model model production environment example qbd provides entity relationship model external data model relational model internal model 
similarly external query model set operators adopted formulate query internal query model query language production environment qbd external query model set pointing traversing primitives defined entity relationship model internal query model sql language 
fundamental goal representation clarify elicit far possible meaning schema queries expressed terms model 
friendly representation starting point effective visual communication database user 
consequence aspects representation inspired general criteria naturalness model independent aspects strictly related specific characteristics model 
visual representation referred data queries 
query representation generally dependent data representation consider unique classification scheme data query representations includes different paradigms choice organization chosen symbols tabular form oriented diagrammatic iconic hybrid 
briefly illustrate paradigms 
tabular paradigm attempt leave linear string representation exploiting bidimensional coordinates order provide user easy interfaces data manipulation 
tabular representations usually proposed framework relational model 
main characteristic consists visualizing prototypical tables queries formulated filling fields 
early systems adopting tabular representation qbe show user intensional part relations extensional part filled user order provide example requested result 
tabular representations escher embs intensional extensional part database coexist 
systems adopt non normal form relational models allowing visualization nested tables zooming mechanisms order focus different parts relational schema 
different approach provided embs form oriented interface designed specific applications link oriented data model data management 
choice model aims provide convenient tool representing associations objects overcoming typical problem relational model 
typical elements displayed screen cells buttons 
cells contain data values organized tabular shape user may specify providing example values place cell values 
button selection changing cell value triggers data manipulation action primitive functions provided may combined define complex actions propagates inside database logical links 
action cells refreshed new values change immediately reflected screen image 
diagrammatic paradigm uses limited set symbols usually corresponding simple geometrical figures squares rectangles circles associated specific concept type plus limited set connections associated specific logical relationship type concepts 
symbols connections generally visualizing database schema queries expressed navigating schema 
referring aspects related data model representation maps concepts available model corresponding graphical symbols 
instance known original representation entity relationship model uses rectangles entities correspond classes objects real world diamonds relationships corresponding classes facts defined entities small circles attributes properties entities relationships 
entity relationship diagrams type concept represented distinct symbol 
referring aspects related query model diagrammatic representations adopt typical operators selection symbols traversal adjacent symbols creation bridge disconnected symbols 
example qbd user interested finding students part journey boston starting schema may select entity student follow path picking relationship involved entity travel putting condition value attribute city entity travel equal boston 
order specify conditions attributes separate window provided qbd see list attributes displayed left side window right elements involved comparison constants names attributes example constant boston shown conditions specified user displayed means labelled edges 
iconic paradigm uses sets icons denote entities database operations performed query expressed primarily combining icons 
generally systems database schema shown fact vqs mainly addressed casual users familiar concepts data models may find difficult interpret entity relationship diagram 
interested knowing objects database visualized icons screen 
example taken shown icons represent objects electrical appliances database 
initial display shown clicking icon representing class objects example vcr icons representing operations applicable vcr objects shown pop menu see 
vqs paradigm represent improvement friendliness man machine interaction 
fact icons allow user easily grasp scenario manipulations 
fig 
diagrammatic approach qbd example iconic representation 
hybrid paradigm uses arbitrary combination approaches 
diagrams describe database schema entity person corresponding class persons icons represent specific prototypical objects generic instance person indicate actions performed 
instance represents version entity relationship model diagrams icons 
user may visualize schema diagram select entity type express complex query may simply formulate query selecting appropriate icons 
cases result query set occurrences entity shown means copies icon identification text distinguish occurrences 
user finds entity occurrence special interest may obtain connected relationship occurrences represented terms icons 
strategies observe vqs provide user different modalities interacting database distinction shot stepwise modalities 
adopted systems working simple application domains immediate conceive final expression simple query terms available information shown screen schema contained display 
hand general applications process query synthesis may need different steps 
stepwise modality tries simplify approach focusing different steps required expressing query understanding 
goal phase precise definition fragment schema involved query 
generally schema richer subset concepts needed query find result identification concepts useful query required 
result phase query subschema 
query formulation 
query subschema static representation concepts involved query 
concepts manipulated ways available query operators 
goal query formulation formally express operands involved query relative operators 
testing 
goal testing verify query expression precisely matches user intention 
systems allow iterate different steps combine modalities query 
comparison vqs strategies available phases reported 
classes users visual query language various types interfaces suitable types database users 
query systems provide querying paradigms various levels complexity expressiveness order suitable various classes users 
existing systems possess versatility clear priori types user classes addressed system 
users initially distinguished type training working activity 
professional users incorporate wide spectrum skills database management systems query manipulation languages typical figures falling category dbms users data database administrators users generally addressed existing vqs take profit iconic diagrammatic systems expressing intensional queries 
non professional users invest specific time training usually learn query languages doing 
non professional users obtain major benefits easy query systems may facilitate incremental learning process 
criteria may defined relating kind users different types vqs iconic diagrammatic tabular shown 
non professional users distinguished possibility advance query type query need formulate accessing database 
query known user tabular representation looks suitable access performed simple menus may denote names bounded set queries queries iconic diagrammatic systems superior 
strictly related criterion frequency interaction user system 
iconic systems look suitable casual users guided interaction simplified process 
diagrammatic systems look helpful casual users request learning specific data model 
interaction process frequent diagrammatic systems competitive users frequent interaction require fast access best provided menu oriented interaction 
third criterion orthogonal previous ones concerns structural complexity query 
naive users range needed operations limited may require full power query language interaction computer extremely simple 
sophisticated users need express queries may require deep understanding underlying computation process query language disposal 
iconic languages appropriate naive users provide immediate mechanisms express simple queries long structural complexity query increases powerful operators needed consequently diagrammatic languages suitable 
unfortunately intrinsic limitations presently available visual languages force full programming languages express complex computations 
classification criteria non professional users comparison types vqs final criterion concerns amount knowledge user possesses semantic domain involved query 
expert users detailed knowledge available data problem express needs meaning transparent terms query language 
conversely uninformed users general idea contents database need help system understanding reality interest 
uninformed users greatly gain iconic interface may easily perceive representation reality interest 
especially true simple widely diffused semantic domains 
contrary piece reality involved information system complex detailed number icons needed cover domain increases consequently discriminating power tends decrease 
cases diagrammatic systems offering immediate representation suffer saturation phenomenon 
tabular vqs apply expert users query databases known contents 

open problems goal vqs design build interfaces user easily communicate request obtain satisfactory answer 
general objective creating friendly powerful query systems implications instance system interface allow user interact system previous training query language powerful permit principle computable queries expressed type data retrieved implicit information deduced system provide user right answer declare ignorance certain fact 
order sure query successfully answered system provided metrics user satisfaction 
unfortunately open problems exist presently available systems respect issues currently investigated researchers 
enrichment expressive power powerful classes chandra hierarchy 
provision formal semantics 
extension available data types natural language texts drawings geographic maps images sounds 
mechanisms inferring implicit knowledge stored facts 
handling indefinite knowledge metaknowledge multiple agents approximate questioning queries allowed specify exactly desired result 
creating user profile formally describes user interests skills dynamically maintained system analysis story interactions 
definition appropriate metrics evaluate user satisfaction 
worth noting issues peculiar vqs whilst ones common generality query systems 
furthermore research necessary order build effective metaphors useful vqs ease learning effort user help mental model data query enabling user fully understand software environment easily perform correct queries 
issues significant design successful vqs related technical technological progress particular evolution special purpose fast processors risc cisc extended memory planes devoted color new interactive devices sophisticated mouse types gestural tactile sensors pointing tools allow integrate multimedia system possibilities improved man machine communication oriented expression simple natural correct queries 

aho ullman 
universality data retrieval languages proc 
th acm symposium principles programming languages 
catarci santucci 
qbd graphical query language recursion 
ieee transactions software engineering 
apple 
hypercard script language guide addison wesley reading ma 
atzeni chen 
completeness query languages entity relationship model proc 
nd intl 
conference entity relationship approach information modelling analysis chen ed washington north holland 
batini catarci costabile levialdi 
visual query systems 
technical report dipartimento di informatica sistemistica universit di roma la sapienza 
batini catarci costabile levialdi 
visual strategies querying databases appear proc 
ieee workshop visual language 
chandra 
programming primitives database languages 
proc 
th acm symp 
principles database systems 
chandra 
theory database queries 
proc 
acm symp 
principles database systems 
chang 
principles pictorial information systems design 
prenticehall englewood cliffs nj 
chen 
entity relationship model unified view data 
acm transactions data base systems 
codd 
relational completeness database sub languages 
data base systems ed prentice hall englewood cliffs 
consens mendelzon 
graphlog visual formalism real life recursion proc 
acm symp 
principles database systems 
date 
database systems vol addison wesley publishing 
nilsson 
icon presentation module database 
proc 
th int 
conf 
entity relationship approach 
roma italia 
houben paredaens 
graphical interface formalism specifying nested relational databases 
visual database systems 
eds 
north holland 

criteria iconic languages 
visual languages chang ichikawa eds 
plenum press new york 
levialdi cognition models metaphors keynote address ieee workshop visual languages chicago 

iconic interfacing 
ieee computer graphics applications march 
peirce 
division triadic relations 
collected papers vol 
ii harvard university press cambridge mass 
soininen 
generalized transitive closure relational queries 
proc 
international conference principle database systems 
shirai kunii 
sophisticated form oriented database interface non programmers 
visual database systems 
eds 
north holland 
tsuda hirakawa tanaka ichikawa 
iconic browser iconic retrieval system object oriented databases 
journ 
visual languages computing 
ullman 
principles database knowledge base systems vol 
computer science press rockville md wegner 
escher interactive visual handling complex objects extended nf database model 
visual database systems 
eds 
north holland 
zloof 
query example database language 
ibm syst journal 
