explaining type errors polymorphic languages mike department computer sciences purdue university west lafayette indiana internet cs purdue edu ryan department computer sciences university north texas texas internet cs edu january strongly typed languages programmers compile time feedback type correctness programs 
errors polymorphic type checking take form unification failure types 
finding source type error code difficult error may occur far spot inconsistency detected 
functional languages complex type systems difficulty interpreting locating errors increase 
locate source type errors programmer unravel long chain deductions type instantiations type reconstruction 
describes approach maintains deductive steps type inference reasons type instantiations 
approach interactive system guide programmer source type error explain compiler assigned particular type expression 
categories subject descriptors software engineering programming environments programming languages language constructs data types structures logics meanings programs studies program constructs type structure general terms languages additional keywords phrases polymorphic type reconstruction type errors annoying aspect strongly typed languages parametric polymorphism unclear expression typed 
programmers experienced feeling arises expression rejected compiler 
reason compiler forthcoming type checking analysis 
describe way type analysis explained programmer may led source type errors 
particular consider case type reconstruction essential constructs programming language ml 
programming language ml strongly typed functional language polymorphism 
interesting type system property types identifiers deduced popular model type systems languages 
focus language object study implemented approach language standard ml new jersey 
inspired concerning british nationality act 
authors described capturing legal requirements establishing british citizenship prolog program 
requirements british citizenship complex useful system explains appeared acm letters programming languages systems volume numbers march december pages 
steps taken reach 
idea appropriate deductions type reconstruction 
want ask type system arrived particular type expression 
answer question useful type analysis led unexpected type expression particularly useful case type errors 
case type analysis arrived inconsistent types programmer may find difficult understand 
programmer assumes probably erroneously expressions constructed correctly intended type 
place inconsistency may part program mistake 
nature type system widely separated parts program affect types expressions 
part program mistake point view programmer inconsistency depends arbitrary order traversal syntax tree type analysis 
interesting information may obtained examining contextual evidence 
approach johnson walz 
usage minority candidate mistake 
clear minority isolated errors form correct usage incorrect usage 
ways introducing errors minority usage may correct type despite preponderance majority usages 
way error program copied locations program text editor 
trickier situation expression bound variable statement incorrectly typed locations location causes typed correct usage 
approach take entirely different 
try find wrong context want ability explain context right wrong 
approaches heuristic system explains deductions suggests error may 
popl wand suggested aiding programmers search source type errors presenting list expression fragments cause binding type variables type reconstruction 
approach called collection application subexpressions unification step type analysis 
type error detected list application sites issued cause error 
improve wand doing finer analysis 
maintain deductions reconstruction algorithm location source fragments leading individual bindings unification process 
forms explanation space traversed explain individual deduction steps flow information part program 
addition consider effects milner statement greatly complicates deductive process 
type reconstruction interested simple functional language 
sake concreteness ml syntax 
syntax language shown 
function definition function application language constructs pairing conditional expressions expressions 
consistent practice standard ml nj replace subexpressions language character space show top part particular expression 
expressions language consider meaningful type collection described grammar 
type variables written type reconstruction process deducing type expression context 
type checker language pascal identifiers explicitly type 
checked consistent usage program 
type reconstruction algorithm merely check declared types combined consistently finds consistent type 
identifiers initially type variable type 
type variable stands type represents totally unconstrained type 
type checking requirements constrain types expressions completely type variables left unspecified 
polymorphic type achieved 
proved theorem prover complete set typing rules language 
call algorithm typeof 
modified version original algorithm basis explanation system 
function typeof takes expression type assignment substitution input integer constants boolean constants pair function application fn 
function definition conditional expression expression syntax simple functional language int type integers bool type boolean values cartesian product 
function type syntax types produces type substitution 
typeof postorder traversal syntax tree enforces typing rules construct essentially building proof tree typing judgments 
details algorithm 
crucial insight designing theorem prover lies recognizing unification insure types 
example typing rule function application requires domain function type actual argument 
algorithm find substitution exists types equal called unification 
substitution specialize proof tree making type instance original type 
long types unifiable appropriate proof trees result appropriate types syntactically identical 
ways represent substitution fv 

vn 
particular represent substitution function list pairs 
normally issue great consequence 
purposes modifying unification function keep extra information substitution represented list 
reasons efficiency common list vn represent substitution fv 

vn 
gamma ng substitution fv 


gamma list representation specialize substitution simply adding atomic binding 
need update previous bindings 
purposes crucial value representation atomic binding explained particular unification 
possibly unifications contribute value single type variable 
case keep list reasons binding wand impossible explain instantiation type step step 
approach approach take elements annotations parse tree augmented substitutions augmented type assignments explanation functions information 
information add syntax tree types subexpressions captured node analyzed 
syntactic construct requires individualized set information 
basic constructs integers truth values need store extra information simple structures 
conditionals pairs need store types subexpressions 
statement stores type body type data structure representing function definition fn 
stores type body original type variable assigned formal parameter 
original type variable starting point atomic bindings account instantiation domain 
function application keep pieces information types unified type analysis 
information possible report unification took place application construct 
identifier keep pieces information 
reason case function definition identifier keeps type variable originally assigned type assignment 
identifier construct keep list type variable renamings 
renamings generic type variables type identifier 
generic type variables introduced statement implement special effect statement polymorphic types 
part information kept substitution 
data structure substitution list atomic bindings types type variables unification process 
analysis functions atomic bindings trace evolution types original form final form 
bindings augmented pointer annotated expression tree tag 
expression referenced pointer responsible unification call bound type variable atomic binding 
tag adds information analysis distinguish unification calls typing conditional statement unify type test expression boolean ensure branches conditional type 
typeof calls unification passes current location syntax tree stored atomic binding resulting invocation 
normally running function typeof produces type expression 
typeof recursive traversal syntax tree 
encounters type inconsistency stops reports error 
occur calls unification 
modified typeof parse tree recursive traversal syntax tree 
calls unification system keep pointers appropriate places tree 
inconsistency detected program reports problem 
problem caused types expressions failing unify ask sort question twice expression type written function answers question decorated parse tree augmented substitution point analysis stopped 
program main purpose explain typing rules specifically expression interest 
example expression fn 
fn true type ml 
error detected body outermost function plus function applied arguments 
point type analysis detects domain plus int int match type actual argument 
error report standard ml nj standard ml new jersey version november fn 
fn true stdin error operator operand don agree tycon mismatch operator domain int int operand bool int expression fn rule true case programmer may find clear operator plus right domain argument operand wrong 
may clear system thinks type actual argument bool int 
interested question type bool int 
kind question function answers 
explains typing rules constructs 
example constructs listed table 
pair function application fn 
true function definition fn 
conditional actual output explanation system example shown fully 
turns explanation types identifiers conditional 
structurally identifiers alike 
get types environment 
variable originally assigned type 
completely answer question come assigned type bool 
question function answers 
function different sort task 
explains flow information point program 
case previous example explain came bound bool 
information substitution know bound bool meet requirement conditional test type bool 
jump node syntax tree 
point structural information asked 
structural explanations follow structure proof tree typing judgements built typeof function see section typing rules 
fortunately structure proof tree corresponds closely parse tree expression 
explanations may require explain flow information expression 
explanations break levels 
function explains instantiation types progress type reconstruction trail atomic bindings substitution 
secondly atomic binding maps node annotated syntax tree 
constructs nodes ones analysis required call unification 
nodes language function application call unification conditional expression 
function explains circumstances required unification 
explanation circumstances structural question 
important note leap part syntax tree annotated 
pointers syntax tree places unification called 
typeof function annotates node calls unification function 
recursive annotation subtrees completed 
implemented print depth explanation piece deduction 
loops detected broken ad hoc manner 
output shown figures 
clearly full length explanation suitable error message 
envision sort programmer interaction system navigate explanation space 
interaction may go system explains step deduction 
deduction may depend zero deductions 
programmer may find deductions dubious choose investigate deduction 
instance prior example function plus programmer probably satisfied type concentrated type actual argument 
interface programmer quickly focus part program contrary programmer understanding program 
actual output explanation system questions explored marked elaboration indented 
type errors require process explanation continue structural analysis program binding part program 
example designed illustrate 
consequence explanation may jump back part expression explained explanation 
potentially infinite explanation space appears major shortcoming necessary justify approach 
explanations primitive pieces type reconstruction process goes certain finite steps reach 
type error detected application 

domain function 
unifiable type argument 
true 
domain function 
int int 
argument type 
bool int 
function 
type 
int int int 
identifier 
assigned type 
int int int 
part initial environment 
argument 
true 
type 
bool int 
type pair 
true 
determined type element 
element 
fn 
true 
type 
bool 
type application range function 
function 
fn 

type 
bool bool 
function 
fn 

type 
bool bool 
type function definition determined type inferred formal parameter 

type function body 

formal parameter 

type 
bool 
type formal parameter inferred 
variable 

initially assigned type variable 

type variable 

come bound type 
bool 
binding arose analysis 

expression 

type 
bool 
type variable 

type type variable 

stand 
bool 
expression 

type 
bool 
elided 
function body 

type 
bool 
type conditional determined types branches unify 
branch 

type 
bool 
elided 
branch 

type 
bool 
elided 
second element 

type 
int 
integer constants type 
int 
explanation space fn 
fn true fn 
fn 
error bool fn 
error bool error fn 
bool error true bool fn 
bool error true bool bool bool bool bool bool int int int error bool bool true int bool int error fn 
bool int bool true bool bool int bool fn int bool int bool syntax tree fn 
fn 
keeping current substitution point program possible trace back steps 
piece explanation time unification types current substitution explain specifics 
explanation depend order type analysis 
programmer want know implementation type analysis intermediate steps analysis 
explanation coherent perspective final substitution 
fact type error may comprehensible global point view 
local step perfectly consistent 
chosen explain piece process perspective final substitution 
consider expression fn 
fn 
true fn 
fn 
fn 
true long expression containing pair pairs tuples simple language best comprehended examining syntax tree 
expression typed 
explanation space 
elements pairs contributes binding type formal parameter 
third binding bool assume suspicious 
appropriate question asked line 
expression fn 
fn 
introduces type bool understood analysis 
crucial question asked line type bool 
system answer question point detects answered question context explaining binding type variable 
part analysis omitted lack space 
interesting part goes formal parameter 

type 
bool 
type formal parameter inferred 
variable 

initially assigned type variable 

type variable 

come bound type 
bool 
binding arose analysis application 
fn true 
type 

time analysis type function 
fn 
fn 

type argument 
true 
determined 
bool 
function fn applied argument true result function returns boolean value 
seen lines function domain bool 
type line applying integer type error 
milner construct construct complicates explanation identifier type gets instantiated 
identifiers initial type variable assigned analysis function definition 
describes instantiation type variable gathering list atomic bindings affect 
expression identifier initially assigned just type variable type type type may contain generic variables 
occurrences body get initial types renaming generic variables new unused type variables distinct distinct occurrences 
explain type bound identifier necessary know type variables generic variables bound 
information kept syntax tree identifier 
checks list see generics instantiated user name changes 
proceeds explain instantiation type 
consider example fn true type error detected application 

domain function 

unifiable type argument 

domain function 
bool 
argument type 
int 
function 

type 
bool 
type bound identifier inferred 
variable 

introduced function 
fn fn 
variable 

initially assigned type variable 

type bool obtained 

bindings type variable 

bound type 

type variable 

bound type 

type variable 

bound type 
bool 
type variable 

bound type 

type variable 

come bound type 

elided 
type variable 

come bound type 

elided 
type variable 

come bound type 
bool 
binding arose analysis application 

type 

time analysis type function 

type argument 
true 
determined 
bool 
domain function equal type argument 
binding arose unification type 

type 
bool 
type variable 

introduced stand range function 
function 

type 
bool 
elided 
argument 
true 
type 
bool 
type application range function 
function 
fn true 
type 
int bool 

fn true 
type 
int bool 
type application range function 
function 
fn fn 
type 
bool int bool 

fn fn 
type 
bool int bool 
type function definition determined type inferred formal parameter 

type function body 
fn 
formal parameter 

type 
bool 
elided 
function body 
fn 
type 
int bool 
elided 
type variable 

come bound type 

elided 
argument 

type 
int 
integer constants type 
int 
explanation space fn fn fn type expression type body 
body 
true 
type 
int bool 
type pair 
true 
determined type element 
element 

type 
int 
type application range function 
function 

type 
int int 
function 

type 
int int 
identifier 

introduced binding 
fn 

analysis expression 
fn 

determined type 


stands expression initially received type 
renaming generic type variable 

new variable get type 

type int int obtained 

binding type variable 

bound type 
int 
type variable 

come bound type 
int 
binding arose analysis application 

type 

time analysis type function 

type argument 

determined 
int 
domain function equal type argument 
binding arose unification type 

type 
int 
type variable 

introduced stand range function 
function 

type 
int int 
elided 
argument 

type 
int 
integer constants type 
int 
expression 
fn 

type 

type function definition determined type inferred formal parameter 

type function body 

formal parameter 

type 

type formal parameter 

remained unconstrained initial assignment type variable 

function definition body 

type 

type bound identifier 

remained unchanged initial assignment type variable 

function definition 
fn 

second element 
true 
type 
bool 
type application range function 
function 

type 
bool bool 
function 

type 
bool bool 
similar 
explanation space fn true expression typed 
typed example time emphasize explanations produced useful explaining type errors useful understanding type expression 
ask expression type int bool 
output 
explanation begins statement explaining type construct type body case pair true 
explanation describes element type int describes type describe generic nature type 
note states generic type variable renamed proceeds explain type unified type int 
goal develop approach maintaining deductive steps type inference order provide programmer meaningful explanations circumstances type errors 
approach taken explain reasoning type reconstruction process relation program 
cases lead programmer insight necessary repair program 
useful explaining type system finds typed expression 
useful programmers unfamiliar polymorphic type reconstruction programming errors type system finds unexpected way deduce type expression 
described modifications traditional type analysis algorithm milner style polymorphism 
modifications store critical parts analysis process 
keep track atomic bindings comprising substitution 
permits refined explanation deductions wand 
described functions information explain steps inference type expressions 
useful understanding type errors understanding type obtained particular expression 
chose explanation programmer perspective reached point type inconsistency detected 
choice explanations understandable explanations bindings current different times type analysis 
fact consistently final bindings inconsistency carried part expression programmer considered error 
insight kinds errors improved explanations guide novice expert programmers relevant parts program easily 
opportunities synthesize special cases higher level explanations meaningful programmer 
experience navigation explanation space improved 

anonymous referees aided considerably improving 
particular devoted extraordinary effort analyzing making suggestions improvements 
referee brought attention master thesis topic 
appel macqueen standard ml new jersey 
programming language implementation logic programing berlin wirsing ed springer verlag pp 

cardelli basic polymorphic type checking 
science computer programming april 
johnson walz maximum flow approach anomaly isolation unification incremental type inference 
conference record th annual acm symposium principles programming languages january pp 

milner theory type polymorphism 
journal computer system sciences 
milner tofte harper definition standard ml 
mit press 
elements functional programming 
addison wesley 
sergot sadri kowalski hammond cory british nationality act 
communications acm may 
explanation polymorphic type check standard ml 
master thesis heriot watt univeristy edinburgh 
wand finding source type errors 
conference record thirteenth annual acm symposium principles programming languages january pp 


