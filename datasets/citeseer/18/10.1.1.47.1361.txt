quickcheck lightweight tool random testing haskell programs koen claessen john hughes chalmers university technology claimed advantages purely functional languages haskell simple semantics easy reason 
haskell functions satisfy simple algebraic properties correctness arguments optimising transformations 
thinking properties valuable formulating laws defining function help clarify supposed behave formulating fact help evaluate improve design 
agrees formulating laws thing functional programmers 
functional programming courses laws play minor role 

believe major reason cost formulating laws short term benefits doing greater understanding opportunity prove correctness long term 
may quicker just write function definition waste time specifying laws 
goal encourage specifications functional programming practice creating short term pay doing 
ideally stated laws automatically verified theorem prover 
difficult costly require represent entire semantics haskell form amenable proof 
laws find bugs programs automatic testing 
course useful valuable show easy cheap 
entire system lines haskell code 
hope simple tool provide sufficient incentive programmers specifications matter course 
programs tested anyway involves writing extra code hope programmers spend time formulating specifications 
simple tool able complete testing time 
course testing guarantee laws hold case 
prepared accept program tested proved correct programmers testing basis formal specification surely 
section introduce tool quickcheck series small examples 
describe implementation discuss larger case studies tool 
quickcheck simple example example take standard function reverse reverses list 
satisfies number useful laws reverse reverse xs ys reverse ys reverse xs reverse reverse xs xs list concatenation operator 
fact characterise reverse uniquely 
order check laws quickcheck represent haskell functions 
define reverse xs ys reverse xs ys reverse ys reverse xs xs reverse reverse xs xs haskell equality test 
functions return true possible argument properties hold 
load hugs interactive haskell interpreter call example main 
quickcheck ok passed tests function quickcheck takes law parameter applies large number randomly generated arguments fact reporting ok result true case 
law fails quickcheck reports counter example 
example mistakenly define xs ys reverse xs ys reverse xs reverse ys checking law produce main 
quickcheck test failed st attempt fact programmer provide little information function quickcheck overloaded order able handle laws varying number variables overloading resolved law polymorphic type examples 
programmer specify fixed type law tested 
simply give type signature law example int 
int 
bool reader familiar haskell note laws hold finite total values 
haskell lazy language variables denote partially undefined values laws state fail 
quantify completely defined finite values 
prefer just state types law arguments soon defining properties result types bool wish concern exact result type 
idiom xs ys reverse xs ys reverse ys reverse xs types xs int ys int fact sufficient give type xs ys type definition type check 
name types keyword simply attached dummy local definition function body give natural place restrict type xs ys 
convenient course restrict types formal parameter list haskell allow type restrictions may appear expressions idiom 
course property holds polymorphically specify monomorphic instance test generate test cases 
turns quite important case overloaded functions 
example associative type int double 
practice quickcheck follows 
develop module define properties functions mention 
add import quickcheck head module bring quickcheck scope 
load module hugs test laws described 
addition implemented stand program quickcheck checks properties module finding functions name begins prop running hugs generated script applies function quickcheck 
easy properties change 
implemented interface quickcheck emacs editor permits user check property cursor key strokes 
conditional laws laws simple equations conveniently represented boolean function seen general laws hold certain conditions 
quickcheck provides implication combinator represent conditional laws 
example law max represented definition 
max types int likewise insertion function ordered lists satisfies law xs ordered xs 
ordered insert xs types int conditional laws checked generating test cases satisfy precondition checking 
checking law succeeds usual checking produces output main 
quickcheck arguments exhausted tests 
note way generate test cases property generating random ones selecting property satisfied 
raises question test cases generated 
precondition law seldom satisfied generate test cases finding holds 
report law verified having tested data strange 
quickcheck continues generating test cases hope finding cases precondition satisfied 
possible programmer write false precondition predicate satisfied extremely rarely 
cases hopeless search cases precondition holds 
allow test case generation run forever generate limited number candidate test cases 
find valid test cases candidates simply report number successful tests able perform 
example know insert function passed test cases 
programmer decide insert tested thoroughly 
subtle problem successful tests establish law credibility 
careful 
modify follows xs ordered xs 
null xs ordered insert xs types int checking law produces message arguments exhausted tests trivial 
combinator change meaning law classifies test cases trivial case xs empty list 
see large proportion test cases tested insertion empty list 
modify triviality condition length xs result testing arguments exhausted tests trivial 
see cases tested insertion list element 
provide fairly strong evidence law holds worrying short lists dominate test cases strongly 
easy define erroneous version insert works lists element 
notation function application body law equivalent null xs ordered insert xs 
reason notation frees need enclose second argument parentheses syntactically convenient 
reason behaviour course precondition ordered xs skews distribution test cases short lists 
generated list length ordered lists length 
test cases longer lists rejected precondition 
lists length probably represented actual tests 
risk kind problem time conditional laws important investigate proportion trivial cases tested 
best solution replace condition custom test data generator ordered lists 
write forall xs 
ordered insert xs types int specifies values xs generated test data generator 
checking law gives ok passed tests 
expect 
quickcheck provides support programmer define test data generators control distribution test data explain detail look quickcheck works internally 
implementing quickcheck testable properties overloading implementation quickcheck uses haskell overloading mechanism heavily 
function quickcheck overloaded type quickcheck testable 

io means quickcheck applied value type class testable may perform input output compute result 
class testable defined class testable property 
property declares testable type supports function property converts value type property 
need concerned details type property suffice say property tested producing information seen 
haskell lets declare type instance class giving implementation function property 
course booleans instance functions haskell notation expression body example ordered insert xs 
apply combinator forall test data generator function applied generated value 
instance testable bool property instance arbitrary show testable 
testable property forall arbitrary type classes arbitrary show type testable type testable 
types class arbitrary implement overloaded test data generator called arbitrary define test function generate arbitrary argument test function result 
types class show converted strings argument types class counter examples printed 
instances enable test property represented boolean valued function number arguments 
operators seen properties 
produce results types implication interpretation tests defined giving instances class testable 
test data generation focus generation test data part quickcheck implement 
test data generated automatically type class arbitrary defined class arbitrary arbitrary generator generator type representing generator type programmer generators built quickcheck instances class supply custom generator forall combinator 
define type generator newtype generator rand 
declares new type represented function type rand 
constructor maps representation new type 
rand random number seed generator just function manufacture pseudo random way 
treat generator type define primitive generator choose int 
int 
generator int choose random number interval program generators terms 
need combinators build complex generators simpler ones declare generator instance haskell class monad 
involves implementing methods monad class return 
generator generator 

generator 
generator constant generator second monadic sequencing operator generates passes second argument generate definition needs pass independent random number seeds arguments passed seed luckily haskell random number library provides operation split seed 
monads heavily haskell useful overloaded standard functions monad syntactic sugar monadic sequencing notation 
making generators monad able features construct 
defining generators types straightforward 
examples give generators integers pairs instance arbitrary int arbitrary choose instance arbitrary arbitrary 
arbitrary arbitrary liftm arbitrary arbitrary second case standard monadic function liftm defined terms return generator applies pairing operator results generators 
quickcheck contains declarations predefined types 
generators user defined types define test data generation instance class arbitrary type rely user provide instances user defined types 
principle try generate automatically pre processor polytypic programming chosen leave task user 
partly want quickcheck lightweight tool easy implement easy standard programming environment don want oblige users run programs pre processor editing testing 
strong reason hard construct generator type knowing desired distribution test cases 
producing generators automatically provide combinators enable programmer define generators easily 
simplest called oneof just choice list alternative generators uniform distribution 
example type colour defined data colour red blue green suitable generator defined instance arbitrary colour arbitrary oneof return red return blue return green example generate arbitrary lists instance arbitrary 
arbitrary arbitrary oneof return liftm arbitrary arbitrary liftm apply cons operator arbitrary head tail 
definition really satisfactory produces lists average length element 
adjust average length list produced allows specify frequency alternative chosen 
define instance arbitrary 
arbitrary arbitrary return liftm arbitrary arbitrary choose cons case times nil case leading average list length elements 
general data types turns need finer control distribution generated values 
suppose define type binary trees generator data tree leaf int branch tree tree instance arbitrary tree arbitrary liftm leaf arbitrary liftm branch arbitrary arbitrary want avoid choosing leaf 
definition chance terminating 
reason generation branch terminate recursive generations terminate 
recursions choose branches generation terminates recursive generations terminate chance small 
generation terminates generated test data large 
want avoid perform large number tests want test small quick 
solution limit size generated test data 
notion size hard define general arbitrary recursive datatype may include function types 
give responsibility limiting sizes programmer defining test data generator 
change representation generators newtype generator int 
rand 
new parameter interpreted kind size bound 
define new combinator recursive int 
generator 
generator programmer access size bound recursive generates passing current size bound parameter 
programmer interpret size bound reasonable way test data generation 
example generate binary trees instance arbitrary tree arbitrary recursive liftm leaf arbitrary liftm leaf arbitrary liftm branch div div definition size bound limits number nodes generated trees quite reasonable 
introduced notion size bound sensibly generators types integers lists absolute value respective length bounded size 
definitions earlier need modified accordingly 
stress size bound simply extra global parameter test data generator may access recursive sees bound 
attempt divide size bound generators example longer generated list smaller elements keeping size structure 
reason wish avoid correlations sizes different parts test data distort test results 
vary size different test cases testing property small test cases gradually increase size bound testing progresses 
greater variety test cases testing effective improves chances finding test cases satisfying precondition conditional properties 
generating functions check properties involving function valued variables able generate arbitrary functions 
surprisingly able 
understand notice function generator type generator represented function type int 
rand 

reordering parameters isomorphic type 
int 
rand 
represents 
generator define promote 
generator 
generator produce generator function type provided construct generator result type depends argument value 
take care dependence defining new class class 
generator 
generator method modifies generator way depending parameter 
think producing generator transformer argument 
class define instance arbitrary 
arbitrary arbitrary promote 
arbitrary generates arbitary function uses argument modify generation result 
order define instances need way construct generator transformers 
define function variant int 
generator 
generator variant splits random number seed times passing variants generator independent 
define instances choose generator transformers depending argument value 
example boolean instance instance bool variant variant transforms generator independent ways true false generators true false independent 
similar way define suitable instances types 
example integer instance just converts integer argument sequence bits generator transformers turn 
instances recursive datatypes defined standard pattern 
example list instance just instance 
variant xs variant xs goal different lists mapped independent generator transformers achieve mapping constructor independent transformer composing transformers derived component 
recursive datatypes treated way 
programmer responsible making definitions user defined types important straightforward 
interpret functions generator transformers instance form instance arbitrary 

idea apply function arbitrary argument result transform generator 
way functions different give rise different generator transformers 
definitions able define test data generators types 
check equality functions 
define extensional equality check example function composition associative 
types int int difficulty function types cause counter example example try check function composition commutative function values printed just function 
case discover law checking false 
experience quickcheck checking mutants evaluate effectiveness program testing method 
accepted way deliberately inject faults programs see detected 
generates large number variants correct program called mutants measures proportion mutants fail test 
applied idea small example 
generated mutants insertion function ordered lists insert insert ys ys insert ys mutating comparison comparisons mutating variables variables type mutating conditionals branches mutating nil 
properties checked quickcheck forall xs 
ordered insert xs types int xs bag insert xs bag xs types int mutants rejected 
mutants passed test original definition variant test mutated simply efficient definition function 
incorrect mutant rejected 
certainly small example hand quickcheck intended fine grain check correctness individual functions example unrealistic 
result obtained certainly encouraging 
specification libraries formulating specifications rapidly discovers need library functions implement common mathematical abstractions 
example previous section specified insert xs elements xs converting lists bags requiring bags equal 
developing implementation finite set theory quickcheck abstractions inefficient programs specifications object state properties clearly simply possible come 
difference purpose need libraries specifically targeted specifications 
case study unification slightly larger example developed unification algorithm quickcheck specification 
case study quite revealing regards impact quickcheck programming pitfalls avoided 
large detail just discuss lessons learned 
impact type definitions quickcheck impact design types program 
defined type terms unified data term var var constr name term newtype var variable nat newtype name name string equivalent data term var int constr string term probably chosen 
type distinguishes string constructor name string contexts natural number variable name integer contexts 
reason chose distinctions type enabled define different test data generator names example strings 
generated terms default test data generator strings generate unifiable terms generate constructor name twice 
chose generate constructor names instance arbitrary name arbitrary lift name oneof gives chance generated terms partially unifiable 
likewise limited unification variables test data small set 
course second term type specified custom test data generator explicit forall property 
convenient quickcheck generate test data automatically arbitrary encouraged distinctions explicit types 
advantages doing permits type checker detect errors 
say case quickcheck forced sloppy programmer improve programming style 
checking functional properties unifier needs manage current substitution possibility failures recursive calls 
convenient way monad 
defined unification monad represented function operations var 
term 
var 
term read write variables 
able define extensional equality operator monadic values check monad laws properties return checking properties proved expensive able complete tests pleasing able check properties complex types 
errors nice able report quickcheck large number errors example 
fact errors unifier 
probably reflection number times authors programmed unifiers previously effectiveness quickcheck know quite simply 
hand find errors specification 
example defined substitution function repeatedly substitutes variables domain substitution remain stated obvious property subst subst subst quickcheck revealed property false holds acyclic substitutions infinite term generated equality test loops 
obliged correct specification acyclic 
subst subst subst quickcheck think harder properties code document correctly 
downside formulating specification correctly turned quite lot writing implementation 
partly predicates acyclic non trivial define set theory library helped 
false sense security serious pitfall uncovered experiment false sense security engendered program passes large number tests trivial cases 
referred problem discussed conditional properties example bit hard 
properties unification apply case unification succeeds 
stated conveniently form 
unifier unifier returns fails 
little reflection see randomly chosen terms fairly unifiable variables occur quite term variable unification certainly succeed 
hand term variable probability unify small 
case term variable heavily represented test cases satisfy precondition test cases property 
quickcheck succeeded verifying property hardly consider thoroughly tested 
solution custom test data generator forall 

unifier generated probably unifiable pairs generating random term replacing random subterms variables different ways 
usually generates unifiable terms may fail variables inconsistently terms 
modification proportion trivial cases fell reasonable 
experience underlines importance investigating distribution actual test cases conditional properties 
quickcheck lava system lava nutshell lava tool describe simulate formally verify hardware 
lava called embedded language means circuit descriptions properties happen existing programming language case haskell 
idea view hardware circuit function signal inputs signal outputs 
lava system provides primitive circuits xor latch 
simple examples circuits primitive circuits half adder full adder 
halfadd xor fulladd xor carry carry sum carry sum halfadd carry sum halfadd sum circuits defined lava simulated follows provides inputs outputs calculated 
main 
simulate fulladd high low high high low furthermore lava system defines combinators circuits 
mention sequential composition composition column takes circuit lines column circuits connecting carry wires 
example define sorts adders adds bit binary number adds binary numbers define column halfadd column fulladd properties lava properties circuits defined similar way 
example define property certain circuit commutative say circ circ 
circ 
logical equivalence lifted arbitrary types containing signals booleans case pair 
properties formally verified 
providing symbolic inputs circuit property calculating concrete expression haskell datatype representing circuit 
write expression file call external theorem prover 
done overloaded lava function verify 
main 
verify halfadd prover 
valid 
lava system provides number functions combinators conveniently express properties formally verify 
quickcheck lava able verify properties circuits lava greatly benefit extending testing tool quickcheck 
main reasons 
calling external theorem prover heavyweight process 
verifying say bit multiplier formulas generate external theorem proving quite big wait long time get answer 
feedback theorem prover low level hard map back haskell world 
easy get feedback testing done inside haskell 
typical development cycle write specification circuit implementation quickcheck obvious bugs lastly call external theorem prover verifying correctness 
test binary adder commutative 
map swap swap argument list pairs swap pair list check commutativity 
adding testing methodology lava turned quite straightforward defined properties lava overhead minimal 
testing done circuit types sequential circuits containing latches 
simply check circuit property sequence inputs 
higher order testing second reason testing lava simply test properties formally verify 
external theorem provers connected lava deal order logics lava system able generate formulas type 
need exists verify properties combinators 
example proving column distributes circ circ inp column circ 
circ inp 
column circ 
column circ inp simply impossible verify lava circ circ 
fact properties hard verify automatically general 
randomly generate functions test kind properties arbitrary circuits 
drawback fix types circuits combinators properties polymorphic circuits input output types 
errors authors quickcheck library developing collection arithmetic circuits 
previously testing development process ad hoc tests really circuit 
profound testing way possible 
errors particular circuits kinds 
firstly logical errors circuits 
errors formal verification methods 
secondly errors due fact implement arithmetic circuits general kind 
example adder able add binary numbers lengths 
verify fixed sizes 
random testing course logical errors multiplying binary numbers different length testing simply crashed adding numbers forgotten define case 
concluding adding systematic random testing lava system initial big success include streamlined integration verifiable properties testable properties lava 
discussion software testing course substantial field right 
wealth papers automatic test data generation 
test data may generated randomly intelligent choice test cases goal maximising probability detecting fault 
fault hard define precisely taken mean maximising path coverage test data set choosing test data ideally path program tested exercised 
techniques include conditions constraint solver find test case leads program point 
area applied imperative nowadays object oriented programming languages 
may approach randomly generated test data naive extreme comparison 
classic duran ntafos showed statistical reasoning random testing effective intelligent choice test data easier 
random testing respectable test method implemented commercial products focus current 
far aware apply automatic testing functional programs 
close link establish testing specifications unusual emphasis literature generating test cases interpreting results tests 
functional programs generate random values richer set types usually considered generation random functions instance probably studied 
think embedding quickcheck tool language provides powerful concept 
function tests property haskell function write haskell program checks property hold analyses processes counter model providing user definable interface test results 
convinced interesting done adapting software testing ideas functional context 
easy 
example constraint solving choose test cases difficult constraints involve complex data types numeric inequalities 
notion path coverage hard define functional programs 
experimented combinators measuring path coverage discovered notion path easy define haskell 
defined haskell programs contain infeasible paths paths followed condition yield true false different conditionals coverage hard measure 
technique intrusive needed call path coverage combinators code tested unsuitable lightweight tool trying develop 

roland backhouse patrik jansson johan jeuring lambert meertens 
generic programming 
lecture notes computer science volume 

claessen sheeran singh 
lava hardware design haskell 
international conference functional programming baltimore 
acm 

claessen sands 
observable sharing functional circuit description 
asian computer science conference thailand 
acm sigplan 

duran ntafos 
evaluation random testing 
ieee transactions software engineering volume se july 

jones 
hugs distribution 
currently available haskell org hugs 

simon peyton jones john hughes editors lennart augustsson dave barton brian boutel warren burton joseph fasel kevin hammond ralf hinze paul hudak thomas johnsson mark jones john launchbury erik meijer john peterson alastair reid colin runciman philip wadler 
report programming language haskell non strict purely functional language 
available haskell org february 
