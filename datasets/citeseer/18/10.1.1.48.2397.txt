improved parity declustered layouts disk arrays eric schwabe ian sutherland department eecs northwestern university evanston il preliminary version appeared proceedings th annual acm symposium parallel algorithms architectures pp 
june 
supported national science foundation ccr 
author mail address schwabe eecs nwu edu 
author mail address ian eecs nwu edu 
parity declustered layouts studied tool reducing time needed reconstruct failed disk disk array :10.1.1.49.7954
construction layouts large disk arrays generally involves balanced incomplete block design bibd type subset system set disks 
research somewhat hampered dearth effective easily implemented constructions bibds large sets inefficiencies parity distribution methods create layouts larger necessary 
progress problems ways 
particular ffl demonstrate new bibd constructions generalize previous constructions yield simpler bibds optimally small cases 
ffl show relaxing balance constraints data layouts leads constructions approximately balanced layouts greatly increase number feasible layouts large arrays 
ffl give new method distributing parity produces smaller data layouts resulting tight bounds size data layouts derived bibds 
results variety algebraic combinatorial graph theoretic techniques greatly increase number parity declustered data layouts appropriate large disk arrays 
data parity units parity stripe 
disk arrays provide increased throughput large data sets distributing data collection small disks single large disk allowing parallel access 
disk array may fail independently probability unit time probability disk large array fail unit time greatly increased 
method achieving fault tolerance needed ability reconstruct contents failed disk important feasibility large disk arrays 
approach address problem addition parity check information 
corresponding blocks data disks grouped parity stripe consists gamma data units parity unit exclusive gamma data units written parity unit stripe 
reading entire contents remaining disks contents failed disk reconstructed 
see 
parity units usually distributed array residing single disk avoid having single disk updated data unit modified 
drawback approach reconstructing contents failed disk requires reading entire contents remaining disks 
reading remaining data may feasible repair fault especially array servicing system highly available 
way reduce reconstruction overhead change definition parity stripe consist blocks data subset disks 
value called parity stripe size 
trade additional overhead storage parity fraction space fraction ability reconstruct contents failed disk quickly reading entire contents remaining disks 
technique known parity declustering decouples size parity stripes size array 
see 
parity declustering introduces new problem select parity stripes placement parity units stripes 
problem designing data layout disk array 
disks divided number data units call size layout 
set vs units divided parity stripes units gamma units data units parity unit stripe 
holland gibson described conditions ideal data parity declustered layout :10.1.1.49.7954
layout satisfy 
restate conditions 
conditions describe measure deviation ideal described condition 
metrics measure quality layouts discuss sections 
ability reconstruct failed disk 
disk array fails able reconstruct contents contents remaining disks 
terms layout means stripe contain unit disk 

distribution parity units 
stripe contains parity unit units 
unit updated data unit stripe written parity units evenly distributed disks minimize write contention 
disk parity units worst bottleneck single set writes 
define parity overhead disk fraction units disk parity units 
measure data layout satisfies condition maximum value parity overhead disks array 

distribution reconstruction workload 
disk fails fraction remaining disks read order reconstruct lost data 
disk fraction depends number stripes unit disk unit failed disk 
minimize maximum amount read disk reconstruction fraction pairs disks array 
define reconstruction workload pair disks fraction disks read reconstruction fails 
measure data layout satisfies condition maximum value reconstruction workload pairs disks array 

efficiency mapping 
mapping logical address data unit position disk array take long compute 
amount memory required store algorithm data perform mapping small reside continuously memory 
layouts considered mapping consist table lookup plus small constant number arithmetic operations 
lookup tables fairly large lookup dominating term time required mapping 
simply size lookup table measure efficiency mapping 
fifth sixth conditions holland gibson large write optimization maximal parallelism conditions concerned mapping large blocks data cover stripe units array :10.1.1.49.7954
depend data layout way files mapped logical disk units 
consider measures stockmeyer considered data layouts discussed satisfy additional conditions 
muntz lui suggested conditions stated satisfied balanced incomplete block designs 
balanced incomplete block design bibd collection tuples subsets elements taken set elements element appears exactly tuples pair elements appears exactly tuples 
note conditions satisfied collection tuples consisting subsets set 
called complete block design holland gibson gave approach constructing parity declustered data layouts bibds :10.1.1.49.7954
associating elements bibd disk tuple parity stripe conditions satisfied 
replicating bibd times choosing parity unit different position tuple copies bibd see condition satisfied 
section discuss replication bibd reduced 
result method layout array disks kr units 
arrays larger disks multiple copies layout needed 
mapping data array computed table lookup table representing bibd 
table reside continuously memory desirable small possible requirements condition 
size kr layout smaller number units disk 
value vary big choose data unit 
choose data units track size kr greater number tracks disk roughly gb disk 
general data layouts considered feasible require tracks disk 
value approximate affected factors 
bound limits number block designs lead feasible layouts method holland gibson effectively eliminates complete block designs consideration particularly increases 
layout discussed explicit expression size 
expressions quite simple determine values layout feasible condition 
question number units disk multiple kr scope 
approach problem described :10.1.1.49.7954
disk disk disk disk tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple tuple bibd layout 
construction parity declustered data layouts far depends entirely existence appropriate bibds 
unfortunately effective easily implemented general constructions bibds rare requiring strict conditions values bibds larger values results sparse 
disk arrays grow larger complete block designs feasible need bibds improved layout design techniques pronounced 
goals develop general techniques constructing feasible layouts useful disk arrays large numbers disks constructed improve current methods constructing layouts known bibds small disk arrays 
cases success mean increasing number feasible layouts 
take approaches increasing number feasible data layouts ffl construction new smaller bibds 
prove new algebraic results existence bibds generalize results bose case number disks prime power 
results give constructions simple implement cases give designs optimally small 
ffl approximately balanced layouts 
show permit small imbalances distribution parity units reconstruction workload relax conditions greatly increase number feasible layouts 
methods constructing approximately balanced layouts different trade offs size resulting layouts imbalance tolerated 
approximately balanced layouts vastly wider range currently possible bibd layouts 
ffl improvements derivation layouts bibds 
data layouts derived bibds method holland gibson parity balancing step increase size final layout substantially 
undesirable reasons discuss section 
holland gibson developed methods balance parity increase size layout 
methods proven correct appear practice 
conjecture limits improvements 
techniques network flow prove conjecture give method prove efficient possible parity balancing 
method increase size layout allow small parity imbalance 
techniques contribute increasing number parity declustered data layouts feasible disk arrays 
remainder organized follows 
section give new constructions bibds techniques commutative algebra 
section introduces approximately balanced layouts discusses size imbalance trade offs constructions layouts 
section show reduce increase layout size involved construction data layouts bibds prove bounds limits reductions 
section contains open problems 
constructions bibds section describe construction ring block designs 
describe general construction prove fact generate bibds 
characterize exactly values achieved ring block designs 
observe designs may larger number tuples theoretical minimum due tuples appearing multiple times 
help remedy techniques removing redundancy yields bibds minimum size 
ring block designs elements ring block design taken commutative ring unit commutative ring algebraic object consisting set elements addition operation associative commutative identity element additive inverses multiplication operation delta associative commutative distributes addition 
order commutative ring number elements ring 
commutative ring unit commutative ring multiplicative identity element 
word ring mean commutative ring unit explicitly noted 
suppose finite ring gamma elements gamma multiplicative inverse denoted gamma gamma 
pair ring elements associate set ring elements fx gamma gamma ring block design gamma block design tuples sets associated pairs defined 
call gamma generators design 
note tuple occurs ring block design times pairs fx gamma gamma 
theorem ring block design generators gamma balanced incomplete block design equal order gamma gamma gamma 
proof consider tuple pair ring elements 
gamma gamma gamma 
multiply sides gamma gamma get contradiction 
tuple contains exactly elements 
generators element tuple indexed exists unique generator gamma 
case say th element tuple indexed 
possible values gamma possible values gamma tuples gamma 
show balanced incomplete block design stated values show element occurs exactly gamma tuples pair distinct elements occurs exactly gamma tuples 
note ffl occurs exactly tuples corresponding pairs form gamma gamma gamma 
gamma tuples containing corresponding different choices stated value follow show gamma gamma gamma gamma implies 
suppose gamma gamma gamma gamma 
implies gamma gamma gamma gamma 
subtract left side equation right side simplify get gamma 
multiply sides gamma gamma get contradiction 
suppose distinct elements consider possible solutions equations gamma gamma notation emphasize specific ring operation element pertains 
ring unambiguous denote multiplication simply concatenation 
solution gamma gamma gamma gamma gamma gamma gamma gamma conversely distinct values equations solutions equations 
need show different pairs give rise different pairs 
suppose different pairs give pair equations 
element th th element tuple indexed earlier element th th element tuple indexed earlier contradicts assumption different 
exactly tuples containing distinct gamma 
aim investigating ring block designs expand possible pairs find bibds 
know exactly pairs achieved ring block design 
result characterizes 
theorem positive integers delta delta delta delta delta en distinct prime numbers positive 
ring block design element set tuples size ng proof way stating theorem exists ring order containing set generators size condition holds 
denote right hand side 
show ring block design arbitrary constructing ring order containing set generators size 
subset generators size generate desired ring design 
giving construction introduce relevant notions commutative algebra 
field ring nonzero element multiplicative inverse 
finite field order prime finite field order prime positive integer unique isomorphism 
note field subset set generators 
rings define ring called cross product denoted theta theta follows 
elements theta theta tuples ffl ng 

addition multiplication operations defined rn delta delta delta rn straightforward verify operations satisfy axioms ring additive identity rn multiplicative identity rn gamma gammar gammar gamma gamma gamma note multiplicative inverse defined components multiplicative inverses respective rings 
consequence cross product field field merely ring 
lemma positive integer exists ring order contains set generators size 
proof delta delta delta delta delta en factorization powers distinct primes 
ng finite field order distinct elements theta theta clearly order set size 
distinct elements ng gamma nonzero element multiplicative inverse 
implies gamma gamma gamma multiplicative inverse set set generators 
prove ring order contains set generators size greater 
complete proof theorem 
need introduce relevant notions commutative algebra 
ring ffl positive integer denote result adding times 
order element smallest number exists 
note different meaning word order order ring 
reader distinguish carefully meanings order 
denote set ffl exists ffl subset closed addition multiplication operations commutative ring unit respect operations say trivial prove positive integer need facts elementary commutative algebra state completeness 
proofs may 
facts applies commutative rings unit 
algebra fact finite ring order ffl order divides particular implies algebra fact finite ring ffl positive integer multiple order algebra fact finite ring prime divides order exists ffl divides order algebra fact order divides order delta delta delta delta delta en statement theorem ring order integer ffl ffl algebra fact algebra fact order ffl divides algebra fact prime dividing order element order divisible contradiction 
order power order divides order algebra fact order 
suppose contains set generators fg gamma 
elements fn gamma implies gamma 
note gamma invertible multiplicative inverse gamma gamma prime divides order algebra fact exists element ffl divides order delta gamma gamma delta gamma delta gamma gamma delta gamma delta gamma gamma delta algebra fact implies order divides contradicts fact divides order note result ring block designs prime power case get ring block designs large number small prime divides small number times 
case small prime power factor upper bound sections explore methods modifying ring block designs deal bad 
results primarily ring block designs ring field subset ring set generators positive number equal ring block design construction special case construction block designs supplementary difference sets initial blocks tuples corresponding pairs 
strength ring construction tuples defined effectively construction easy implement 
reducing redundancy definition ring block design tuples distinct pairs contain elements 
number times tuple appears block design multiple reduce number occurrences tuple factor result bibd parameters reduced factor method removing redundancy similar notion partial block development described 
clearly desirable remove redundancy possible 
show power prime number choose ring generators way resulting redundancy easily identified removed 
prime number choose ring field elements 
choose generators distinct elements symmetric generators results arise reasoning permutation generators ring block design oe permutation pairs 
suppose th element tuple th element tuple oe 
implies tuples indexed oe 
cycles permutation oe size factor redundancy ring block design 
theorems proved approach 
theorem power prime construct bibd gamma gcd gamma gamma gamma gcd gamma gamma gamma gcd gamma gamma 
proof ring finite field size element multiplicative order gcd gamma gamma gcd gamma gamma smallest number 
element exists nonzero elements finite field form cyclic group multiplication 
ax oe gamma 
function permutation types cycle set sets nonzero elements form wa wa wa gcd gamma gamma gamma 
choose generators union cycle gamma gcd gamma gamma cycles 
function permutation generators 
generator elements 
need show th element tuple indexed th element tuple indexed oe 
gamma gamma yg cycles oe size gcd gamma gamma result follows reasoning section 
theorem power prime construct bibd gamma gcd gamma gamma gcd gamma gamma gcd gamma 
proof ring finite field size element multiplicative order gcd gamma nonzero element gamma oe zy gamma gamma zy gamma 
function permutation types cycle set fzg sets form gamma gamma gcd gamma gamma gamma set gcd gamma type cycle includes cycle containing 
choose generators union cycles 
function permutation generators 
generator elements 
need show th element tuple indexed th element tuple indexed oe 
zy gamma gamma zy gamma zy gamma gamma zy gamma gamma zy gamma gamma zy gamma yz gamma ya gamma zy yg gamma yz yg cycles size gcd gamma oe zy gamma gamman zy gamman result follows reasoning section 
block design produced theorem identical 
block design theorem 
case proof technique appears new generalizes results bose merely list fixed block designs parameters 
generators forming subfield specific case different algebraic technique allows improve previously known results remove redundancy block design 
theorem power prime power construct bibd gamma gamma gamma gamma 
proof ring field size elementary galois theory power implies unique subfield size 
generators elements part proof looks similar proofs section 
elements define ij gamma gamma oe ij mapping ij takes subfield permutation subtraction multiplication nonzero element invertible operations 
similarly oe ij permutation pairs elements 
claim th element tuple indexed oe th element tuple indexed gamma gamma gamma yg gamma yg gy generators oe ij index tuple 
define relation indices tuples follows oe ij generators 
proved index tuple 
show equivalence relation 
subfield contains suppose loss generality tuple index oe delta delta 
reflexive 
tuple indices exist generators oe ij 
subfield gamma exists nonzero element implies gammag gamma exists element gammag gamma gamma oe oe oe ij oe gamma gamma gamma 
symmetric 
suppose tuple indices 
definition exist oe ij oe 
definition oe subfield nonzero nonzero element element oe 
transitive 
claim equivalence classes size gamma 
show show generators nonzero tuple index oe ij oe 
suppose oe ij oe 
expanding definitions get multiply sides gamma get subtract multiply sides gamma get possible choices gamma possible choices yield gamma distinct elements equivalence class factor gamma redundancy block design 
removing redundancy yields desired result 
theorem shows bibds constructed theorem optimally small 
theorem number tuples bibd tuples size taken element set gamma gcd gamma gamma proof bibd bk gamma gamma dividing sides gcd gamma gamma yields gamma gcd gamma gamma gamma gcd gamma gamma fractional expression left relatively prime right multiple gamma gcd gamma gamma power theoretical minimum derived gamma gamma bibds constructed theorem optimally small 
block designs appear previously unknown 
preparata constructed block designs values specific case power prime 
result theorem general permitting prime power 
approximately balanced data layouts results previous section increase set known bibds somewhat results restrictive terms section introduce data layouts relax balance conditions distribution parity units reconstruction workload 
approach best knowledge considered 
apply construction layouts block designs applied 
recall section define parity overhead disk fraction units disk parity units 
measure space disk available store data 
disks layout parity overhead refer parity overhead layout 
instance layout derived bibd tuple size method described section parity overhead allow parity overhead vary disks saying parity overhead layout fractional values ff fi disk layout fraction units parity units ff fi 
keep mind bottleneck due competition update parity disk highest parity overhead 
recall section define reconstruction workload pair disks fraction disks read reconstruction fails 
equivalently fraction stripes units disks units disk 
bibd layout reconstruction workload gamma gamma pair disks 
allow vary saying reconstruction workload layout fractional values ff fi pair disks layout fraction disks read fails ff fi 
section give results showing take ring block design disks derive layouts nearby values approximately balanced parity overhead reconstruction workload 
removing disks layouts decrease note ring block design simple way choosing element tuple parity unit corresponding stripe parity distributed perfectly evenly array 
simply assign parity unit stripe corresponding tuple stripe unit disk disk parity unit tuple 
disk exactly gamma parity units parity perfectly balanced 
reconstruction workload perfectly balanced pairs appear number times block design 
call resulting layout size gamma ring layout construction advance approach described section 
approach distributed parity copies block design rotating parity construction require replicating bibd 
approach works ring block designs 
general techniques see section 
demonstrate perturb layout get layout perfect parity overhead reconstruction workload balance fewer disk 
theorem ring block design exists construct layout gamma disks size gamma parity stripes size gamma parity overhead delta gamma reconstruction workload gamma gamma proof start ring layout just described 
choose disk remove layout 
stripes contain units contain gamma 
stripe corresponding tuple parity unit stripe removed reassigned 
choose new parity unit stripes unit disk gamma 
straightforward verify assigns gamma parity units removed remaining disks 
properties follow immediately structure ring block design 
fact remove disk ring block design cost incurring imbalance parity overhead reconstruction workload 
theorem ring block design exists construct layout gamma disks size gamma parity stripes size gamma parity overhead gamma gamma gamma gamma reconstruction workload gamma gamma proof start ring layout choose disks remove layout reassigning parity units disk proof theorem 
point remaining disk total gamma parity units assigned parity units removed disks successfully reassigned 
removed disks gamma parity units reassigned disks original layout gamma gamma parity units reassigned disks removed 
total gamma parity units successfully reassigned 
parity units belongs stripe spanned disks original layout unit gamma remaining disks parity unit 
long gamma gamma parity unit able choose gamma candidate disks way disk chosen 
assign remaining gamma parity units remaining gamma disks way disk contains total gamma parity units 
yields desired parity overhead 
remaining properties follow structure bibd 
stairway transformation increase section describe way block design perturbing approximately balanced design nearby 
state results terms ring layouts apply arbitrary layouts modifications 
considering case ring layout stripe size number disks construct layout 
simple case described theorem 
theorem suppose ring layout exists layout disks size kq gamma parity stripe size parity overhead reconstruction workload gamma proof start constructing layout consisting copies ring layout 
divide layout pieces new layout top half layout shifting right 
process illustrated 
keep division stripe units assignment parity original layout transformation stripe units different positions layout 
new layout disks 
stripes new layout size contain stripe unit disk 
disk new layout consists pieces piece corresponds data parity units single disk original ring layout 
piece fraction units parity units disk fraction units parity units 
parity overhead compute reconstruction workload new layout imagine th disk new layout fails 
disk corresponds th column left lower layout 
examination shows pieces column disk layout correspond top gamma pieces column gamma disk layout bottom gamma pieces column disk layout 
reconstruct pieces disk layout read gamma gamma fraction top gamma pieces layout columns gamma bottom gamma pieces layout columns translating pieces back disk layout find read gamma gamma fraction gamma pieces surviving disk 
surviving disk total pieces read disks copies stairway transformation 
stairway transformation gamma divides gamma gamma delta gamma gamma fraction surviving disk disk layout 
piece corresponds single disk ring layout piece gamma units high 
disk new layout pieces high kq gamma units high 
size layout kq gamma 
suppose want perturb layout disks get layout disks exceeds 
gamma divides slight modification transformation yield layout perfectly balanced parity approximately balanced reconstruction workload 
theorem suppose ring layout exists layout disks gammaq integer 
layout size gamma gamma parity stripe size parity overhead reconstruction workload gamma gamma gamma gamma gamma gamma proof start copies ring layout divide layout pieces steps gamma disks long 
construct new layout top half moving right gamma illustrated 
theorem transformed layout consists collection pieces fraction units parity units parity overhead transformed layout calculating reconstruction workload slightly complicated 
imagine th disk transformed layout fails 
examination shows pieces column disk layout correspond top dj gamma gamma pieces column gamma disk layout bottom gamma dj gamma pieces column disk layout 
reconstruct pieces disk layout read gamma gamma fraction top dj gamma gamma pieces layout columns gamma bottom gamma dj gamma pieces layout columns translating pieces back disk layout find surviving disk step failed disk read gamma gamma fraction gamma disk pieces 
surviving disks different step read gamma gamma fraction gamma disk pieces 
reconstruct failed disk disk layout read gamma gamma fraction surviving disks step failed disk gamma gamma delta gamma gamma fraction surviving disks steps 
theorem piece gamma units high 
disk new layout gamma pieces high gamma gamma units high 
size layout gamma gamma 
situation difficult wish transform disk layout disk layout gamma divide case simple stairway transformation fit number steps disk layout 
possible variation stairway transformation steps size 
suppose divide disk layout steps gamma disks wide gamma disks wide 
start copies disk layout number wider steps case sum widths adds gamma move top part layout gamma 
wider steps result small overlap top bottom parts layout 
started ring layout remove disk copy ring layout overlap occurs perfectly balanced parity described theorem 
apply transformation row containing wide step remove overlap 
result valid layout disks illustrated 
summarize construction theorem stairway transformation different sized steps overlap shaded 
theorem suppose ring layout exist nonnegative integers satisfying exists layout disks size gamma gamma parity stripes size gamma parity overhead delta gamma gamma gamma delta gamma gamma reconstruction workload gamma gamma gamma gamma gamma gamma proof construction described 
calculate parity overhead reconstruction workload 
parity overhead disk depends disk normal step wider step 
disk normal step consist pieces ring block designs disk removed 
pieces gamma fraction units parity units shown theorem 
gamma gamma pieces disks fraction units parity units 
parity overhead disks delta gamma gamma gamma delta gamma delta gamma gamma disk wider step consist gamma pieces gamma fraction units parity units gamma pieces fraction units parity units 
parity overhead disks gamma delta gamma gamma delta gamma delta gamma gamma gamma calculations reconstruction workload size layout theorem 
conditions restrictive 
done computations show prime power values satisfy 
fact perturb design get allow wide steps wider gamma 
steps cause overlap top part layout moved gamma 
remedied eliminating multiple disks copy layout overlap occurs technique described section 
trade stairway transformation size transformed layout amounts imbalance parity overhead reconstruction workload 
close imbalances parity overhead reconstruction workload small 
number copies disk layout large resulting disk layout large 
large perturbations disk layout result smaller layouts greater imbalances layout 
large imbalances relatively small 
reducing size bibd layouts methods holland gibson take layout parity stripe size increase size factor order balance distribution parity units disks :10.1.1.49.7954
expanding size data layouts way undesirable reasons 
size layout larger size certain type disk impossible layout type disk 
second parity balanced expanded layout small localized workloads may incur large performance penalty due parity updates 
reasons desirable balance parity small layout possible 
section describe method network flow distributing parity approximately evenly layout stripes fixed size generally apply layouts generated bibds method partition disk array stripes fixed size contain stripe unit disk 
method distributing parity helps reduce size data layouts ways 
holland gibson developed algorithms intended balance parity bibd layouts 
algorithms proven correct practice appear able balance parity layout size block design multiple number disks array 
conjectured achieve perfect parity balance replicate original design exactly lcm times fewer times original construction 
method proves conjecture lcm copies block design necessary sufficient construct layout perfectly balanced parity 

method possible turn single copy bibd layout approximately balanced parity 
particular number parity units pair disks differ possible parity perfectly balanced 
bibd construct layout replication block design parity evenly distributed possible bottleneck arises single set writes due uneven parity distribution worse necessary 
method follows data layout parity units assigned stripes construct graph call parity assignment graph edges assigned upper lower bounds amount flow carry 
show obtain maximum flow parity assignment graph transformed distribution parity layout 
prove bounds number parity units assigned disk 
gives practical method computing locations parity units stripes 
consider layout divides collection disks size stripes 
stripe contains unit disk parity units assigned stripes 
stripe contains unit disk say crosses denote set disks set stripes cross disk set disks crossed stripe size stripe define parity load disk denoted ffl parity assignment graph layout constructed follows bipartite graph vertices left corresponding stripe vertices right corresponding disk 
edge vertices stripe left crosses disk right 
degree vertex stripe degree disk vertex addition source vertex connected stripe vertex sink vertex connected disk vertex 
assign upper lower bounds flow carried edge follows edge source stripe vertex carries zero units flow 
edge vertex disk sink carries bl dl units flow 
edges original bipartite graph carry zero units flow 
parity assignment graph pictured 
flow said integer valued flow edge graph integral 
show flow value source sink parity assignment graph flow greater value 
furthermore integer valued maximum flow easily computed 
theorem value maximum flow parity assignment graph integer valued maximum flow computed efficiently 
proof call parity assignment graph question clearly value maximum flow total flow source node construct feasible flow value follows edge incident source receives unit flow 
edge vertex stripe vertex disk receives units flow 
edge vertex disk sink receives units flow 
value maximum flow know flow network integral lower upper bounds flow edge integer valued feasible flow integer valued maximum flow 
maximum flow repeatedly finding augmenting paths network adding current feasible flow augmenting paths exist 
augmenting path add integral amount flow edge total flow step process integer valued feasible flow 
augmenting paths exist resulting flow maximum flow integer valued maximum flow 
see proof correctness approach 
reduced problem finding integer valued maximum flow finding integer valued feasible flow define auxiliary graph edges different capacities follows leave bounds edges incident source 
sink 
flow flow flow edges stripe vertices disk vertices edges parity assignment graph 
source edges bipartite graph unchanged assign edge vertex disk sink lower bound zero units flow upper bound bl units flow 
compute integer valued maximum flow integer valued feasible flow clearly flow value greater ffl bl maximum amount flow reach sink 
exists feasible flow value constructed follows edge incident sink receives bl units flow 
edge vertex stripe vertex disk receives bl units flow 
edge source vertex stripe receives ffl ds bl units flow 
easily verified feasible flow correctness ford fulkerson method constructing maximum flows flow network integral capacities edges integer valued maximum flow 
flow value ffl bl resulting integer valued maximum flow assign bl units flow edge incident sink zero units flow edges feasible integer valued flow original parity assignment graph feasible flow starting point find integer valued maximum flow value shown integer valued flow value parity assignment graph 
look 
edges source carry unit flow 
flow edge integral flow stripe vertex consist unit flow exactly outgoing edges 
bl dl incoming edges vertex disk carry unit flow units leave reach sink 
knowing structure flow allows prove parity distribution result 
theorem layout size way choose parity unit stripe total number parity units disk bl dl proof number stripes layout 
find integer valued flow value parity assignment graph 
note edge bipartite graph corresponds unit stripe disk stripe units chosen parity units stripes precisely corresponding edges carry unit flow 
stripe exactly units chosen parity unit disk parity assigned bl dl units 
theorem natural extension applies general problem selecting number distinguished units stripe balancing disks 
choose units stripe statement theorem holds just change definition ffl modification allows address case disks may different sizes simple form theorem sufficient 
theorem derive upper lower bounds number parity units disk independent corollary layout size min size smallest stripe max size largest stripe way choose parity unit stripe total number parity units disk kmax kmin proof clearly disk max min max bl dl min theorem parity units assigned number parity units inner expressions inequality outer 
result important layouts fixed stripe size ring layouts described section 
corollary layout size disks consists stripes size way choose parity unit stripe total number parity units disk proof stripes size bv rk minimum maximum stripe sizes result follows corollary 
layouts fixed stripe size multiple network method assigns number parity units disk 
multiple layout fixed stripe size numbers parity units pair disks differ 
balance numbers parity units clearly best achieved minimizes bottleneck arise due parity updates single set writes 
corollary suffices establish part corollary 
part trivial 
corollary parity balanced perfectly data layout fixed stripe size multiple corollary establishes lcm conjecture holland gibson smallest number copies bibd size needed total number stripes resulting layout multiple lcm open problems advances previous methods deriving parity declustered data layouts disk arrays 
advances enable construction feasibly small layouts wider range array parity stripe sizes previously possible improving generalizing known results bibds establishing method reducing replication bibds data layouts theoretical minimum 
introduced approximately balanced data layouts offer alternative approach cases bibd constructions available 
situation arise frequently larger disk arrays built 
layouts derived virtually array parity stripe sizes tolerating imbalances parity distribution reconstruction workload inversely related size layout 
step research series experiments simulation software developed holland gibson investigate performance layouts developed section :10.1.1.49.7954
particularly interested studying performance approximate layouts values exact layouts exist 
case compare performance approximate layouts corresponding exact layouts measure difference giving idea relationship imbalances layout actual performance degradation 
observe parity balancing method discussed section allows decouple partitioning collection disks parity stripes assignment parity units stripes 
allow investigate various methods partitioning collection disks parity stripes balance reconstruction workload isolation parity distribution concerns 
methods plan consider randomized methods similar discussed merchant yu able establish theoretical bounds reconstruction workload combinatorial approaches simulated annealing 
begun investigating extensible data layouts additional disks introduced layout minimal reconfiguration data existing disks little impact parity overhead reconstruction workload 
important concern build disk arrays satisfactorily addressed level layout design 
interesting unsolved problems area data layouts 
instance room improvement remains construction bibds 
values known upper bound size bibd far lower bound gamma gcd gamma gamma 
course know constructions bibds general interesting consider role combinatorial designs bibds approximate counterparts layout problems disk arrays 
possible area application distributed space reconstruct failed disk distributed array way similar parity distributed 
garth gibson mark holland carnegie mellon university helpful discussions give take problem 
acknowledge anonymous referees helpful comments shorter proof theorem 
ahuja magnanti orlin 
network flows theory algorithms applications 
prentice hall englewood cliffs nj 
bose 
construction balanced incomplete block designs 
ann 
vol 
pp 

cormen leiserson rivest 
algorithms 
mit press mcgraw hill cambridge ma 
gibson hellerstein karp katz patterson 
coding techniques handling failures large disk arrays 
proc 
rd international conference architectural support programming languages operating systems pp 


balanced incomplete block designs related designs 
discrete mathematics vol 
pp 

holland gibson :10.1.1.49.7954
parity declustering continuous operation redundant disk arrays 
proc 
th international conference architectural support programming languages operating systems pp 

holland gibson 
personal communication 
holland gibson 
architectures algorithms online failure recovery redundant disk arrays 
journal distributed parallel databases vol 
july 
jacobson 
basic algebra freeman san francisco ca 
merchant yu 
design modeling clustered raid 
proc 
nd international symposium fault tolerant computing pp 

muntz lui 
performance analysis disk arrays failure 
proc 
th conference large data bases pp 

patterson gibson katz 
case redundant arrays inexpensive disks raid 
proc 
conference management data pp 

preparata 
worst case time solution granularity problem 
proc 
th symp 
theoretical aspects comp 
sc lncs 

theory groups 
allyn bacon boston ma 
stockmeyer 
parallelism parity declustered layouts disk arrays 
ibm technical report rj 
wallis 
combinatorial designs 
marcel dekker new york ny 
