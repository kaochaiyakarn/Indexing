hilbert tree improved tree fractals ibrahim kamel christos faloutsos department computer science institute systems research isr university maryland college park md february propose new tree structure outperforms older ones 
heart idea facilitate deferred splitting approach trees 
done proposing ordering tree nodes 
ordering sense group similar data rectangles minimize area perimeter resulting minimum bounding rectangles mbrs 
chosen called method sorts rectangles hilbert value center rectangles 
ordering node welldefined set sibling nodes deferred splitting 
adjusting split policy hilbert tree achieve high utilization desired 
contrary tree control space utilization typically achieving 
designed manipulation algorithms detail full implementation hilbert tree 
experiments show split policy provides compromise insertion complexity search cost giving savings gamma tree real data 
requirements database management systems dbmss near ability handle spatial data 
spatial data arise applications including cartography computer aided design cad computer vision robotics traditional databases record attributes corresponds point space temporal research partially funded institute systems research isr national science foundation iri iri pyi matching funds software thinking machines databases time considered dimension scientific databases spatial temporal data ones grand challenge applications applications typical queries range query rectangle retrieve elements intersect 
special case range query point query stabbing query query rectangle degenerates point 
focus tree family methods contains efficient methods support range queries 
advantage method rest treebased methods methods linear quad trees ordering trees treat data objects quad tree methods typically divide objects quad tree blocks increasing number items stored 
successful variant trees tree 
main contributions idea forced reinsert deleting rectangles overflowing node 
main idea impose ordering data rectangles 
consequences important ordering tree node defined set siblings algorithms deferred splitting 
adjusting split policy drive utilization close desirable 
notice tree control utilization typically achieving average 
requirement ordering lead small tree nodes 
organized follows 
section gives brief description tree variants 
section describes hilbert tree 
section presents experimental results compare hilbert tree tree variants 
section gives directions research 
survey spatial access methods proposed 
survey 
methods fall broad classes methods transform rectangles points higher dimensionality space methods linear quadtrees equivalently ordering space filling curves methods trees tree trees trees hb trees cell trees promising approaches class tree compared transformation methods trees native space lower dimensionality compared linear quadtrees trees need divide spatial objects pieces quadtree blocks 
tree extension tree multidimensional objects 
geometric object represented minimum bounding rectangle mbr 
non leaf nodes contain entries form ptr ptr pointer child node tree mbr covers rectangles child node 
leaf nodes contain entries form obj id obj id pointer object description mbr object 
main innovation tree father nodes allowed overlap 
way tree guarantee space utilization remain balanced 
guttman proposed splitting algorithms linear split quadratic split exponential split 
names come complexity quadratic split algorithm achieves best trade splitting time search performance 
subsequent trees includes greene tree trees minimum bounding polygons tree best performance tree variants 
main idea tree concept forced re insert 
node overflows children carefully chosen deleted re inserted usually resulting tree better structure 
hilbert trees section introduce hilbert tree discuss algorithms searching insertion deletion overflow handling 
performance trees depends algorithm cluster data rectangles node 
propose space filling curves fractals specifically hilbert curve impose linear ordering data rectangles 
space filling curve visits points dimensional grid exactly crosses 
order morton key order bit interleaving peano curve hilbert curve gray code curve examples space filling curves 
shown experimentally hilbert curve achieves best clustering methods 
provide brief hilbert curve basic hilbert curve grid denoted shown 
derive curve order vertex basic curve replaced curve order gamma may appropriately rotated reflected 
shows hilbert curves order 
order curve tends infinity resulting curve fractal fractal dimension 
hilbert curve generalized higher dimensionalities 
algorithms draw dimensional curve order 
algorithm higher dimensionalities 
path space filling curve imposes linear ordering grid points 
shows hilbert curves order ordering theta grid see curve 
example point curve hilbert value point hilbert value 
hilbert value rectangle needs defined 
experiments choice definition hilbert value rectangle defined hilbert value center 
preliminary material position describe proposed methods 
description main idea create tree structure ffl behave tree search 
ffl support deferred splitting insertion hilbert value inserted data rectangle primary key 
goals achieved follows node tree store mbr largest hilbert value data rectangles belong subtree root specifically hilbert tree structure 
leaf node contains entries form obj id capacity leaf mbr real object low high low high obj gamma id pointer object description record 
main difference trees nonleaf nodes contain information 
non leaf node hilbert tree contains entries form ptr capacity non leaf node mbr encloses children node ptr pointer child node largest hilbert value data rectangles enclosed notice calculate hilbert values mbrs 
illustrates rectangles organized hilbert tree 
hilbert values centers numbers symbols shown parent node ii 
brackets 
shows tree stored disk contents parent node ii shown detail 
data rectangle node hilbert value node ii hilbert value greater 
ii iii data rectangles organized hilbert tree xl yl xh yh xl yl xh yh xl yl xh yh xl yl xh yh xl yl xh yh xl yl xh yh xl yl xl yl xh yh xh yh xl yl xh yh ii iii file structure previous hilbert tree continue list definitions 
plain tree splits node overflow turning node 
call policy splitting policy 
propose defer split waiting turn nodes 
refer splitting policy 
general splitting policy refer order splitting policy 
implement order splitting policy overflowing node tries push entries gamma siblings full split 
refer gamma siblings cooperating siblings node 
describe detail algorithms searching insertion overflow handling 
searching searching algorithm similar tree variants 
starting root descends tree examining nodes intersect query rectangle 
leaf level reports entries intersect query window qualified data items 
algorithm search node root rect 
search nonleaf nodes invoke search entry mbr intersects query window 
search leaf nodes report entries intersect query window candidate 
insertion insert new rectangle hilbert tree hilbert value center new rectangle key 
level choose node minimum siblings 
leaf node reached rectangle inserted correct order new rectangle inserted leaf node called fix mbr values upper level nodes 
algorithm insert node root rect inserts new rectangle hilbert tree 
hilbert value rectangle 

find appropriate leaf node invoke select leaf node place 
insert leaf node empty slot insert appropriate place hilbert order return 
full invoke return new leaf split inevitable 

propagate changes upward form set contains cooperating siblings new leaf 
invoke 
grow tree taller node split propagation caused root split create new root children resulting nodes 
algorithm rect int returns leaf node place new rectangle 
initialize set root node 

leaf check leaf return 
choose subtree non leaf node choose entry ptr minimum value greater 
descend leaf reached set node pointed ptr repeat 
algorithm set set nodes contains node updated cooperating siblings overflow occurred newly created node nn split occurred 
routine leaf level root adjusting mbr nodes cover nodes siblings 
propagates splits 

reached root level 

propagate node split upward parent node split nn new node 
insert nn correct order hilbert value room 
invoke nn 
split pp new node 

adjust mbr parent level set parent nodes nodes adjust corresponding mbr appropriately nodes 
move level set parent nodes nn pp split 
repeat 
deletion hilbert tree need re insert orphaned nodes father node underflows 
borrow keys siblings merge node siblings 
able nodes clear ordering largest hilbert value contrast trees concept sibling node 
notice deletion need cooperating siblings insertion need gamma 
algorithm delete 
find host leaf perform exact match search find leaf node contain 
delete remove node 
underflows borrow entries cooperating siblings 
siblings ready underflow merge nodes adjust resulting nodes 

adjust mbr parent levels 
form set contains cooperating siblings underflow occurred 
invoke 
overflow handling overflow handling algorithm hilbert tree treats overflowing nodes moving entries gamma cooperating siblings splitting nodes nodes 
algorithm node rect return new node split occurred 

set contains entries gamma cooperating siblings 

add 
gamma cooperating siblings full distribute evenly nodes hilbert value 

cooperating siblings full create new node nn distribute evenly nodes hilbert value 
return nn experimental results assess merit proposed hilbert tree implemented ran experiments dimensional space 
method implemented unix 
compared methods quadratic split tree gamma tree 
cpu time required process node negligible comparison number nodes pages retrieved range queries 
loss generality address space normalized unit square 
factors affect search time studied ones data items points rectangles line segments represented mbr file size ranged records query area area theta ranged area address space important factor derived average area data rectangles data density cover quotient data rectangles 
sum areas data rectangles unit square equivalently average number rectangles cover randomly selected point 
mathematically theta selected values data density ranges 
compare performance proposed structures data files contained different types data points rectangles lines mixed 
specifically real data real data tiger system bureau census 
important observation data tiger datasets follow highly skewed distribution 
file consists line segments representing roads montgomery county maryland 
minimum bounding rectangles segments obtained rectangles data density 
refer dataset dataset 
consists line segments representing roads long beach california 
data density mbrs cover line segments 
refer dataset dataset 
synthetic data reason synthetic data control parameters data density number rectangles ratio points rectangles 
points file contains uniformly distributed points 
file contains rectangles points 
centers rectangles uniformly distributed unit square 
data density mix file contains mix points rectangles specifically points rectangles data density 
query rectangles squares side centers uniformly distributed unit square 
experiment randomly generated queries asked results averaged 
standard deviation small plotted graphs 
page size kb 
compare hilbert tree original tree quadratic split gamma tree 
experiments compare method tree variants show effect different split policies performance proposed method evaluate insertion cost 
points rectangles split policy hilbert tree tree quad tree pages touched points rectangles mix dataset disk accesses vs query area rectangles split policy hilbert tree tree pages touched rectangles dataset disk accesses vs query area points split policy hilbert tree tree pages touched points points dataset disk accesses vs query area comparison hilbert tree vs tree variants section show performance superiority hilbert tree gamma tree successful variant tree 
experiments datasets mix points see figures respectively 
experiments split policy hilbert tree 
experiment hilbert tree clear winner achieving savings response time best contender gamma tree 
maximum gain achieved dataset 
interesting notice performance gap larger real data main difference synthetic skewed opposed uniform 
conjecture data favors hilbert tree 
plots results quadratic split tree expected outperformed gamma tree 
rest figures omit quadratic split tree consistently outperformed gamma tree 
effect split policy performance shows response time function query size split policies 
corresponding space utilization respectively 
comparison plot response times gamma tree 
expected response time range queries improves average node utilization 
point diminishing returns increases 
reason recommend splitting policy strikes balance insertion speed deteriorates search speed improves insertion cost higher space utilization hilbert tree comes expense higher insertion cost 
employ higher split policy number cooperating siblings need inspected overflow increases 
see policy compromise performance insertion cost 
section compare insertion cost hilbert tree split insertion cost gamma tree 
show effect split policy insertion cost 
cost measured number disk accesses insertion 
table shows insertion cost hilbert tree gamma tree different datasets 
main observation clear winner insertion cost 
montgomery county line split policy hilbert tree tree pages touched montgomery county dataset disk accesses vs query area long beach line split policy hilbert tree tree pages touched long beach dataset disk accesses vs query area montgomery county line different split policies tree pages touched effect split policy disk accesses vs query area table shows effect increasing split policy hilbert tree insertion cost dataset 
expected insertion cost increases order split policy 
designed implemented superior tree variant outperforms previous tree methods 
major idea introduce ordering rectangles 
simply defining ordering tree structure amenable deferred splitting utilization approach mark closely want 
better packing results shallower tree higher fanout 
ordering happens group similar rectangles tree addition nodes small mbrs eventually fast response times 
idea designed detail implemented hilbert tree dynamic tree structure capable handling insertions deletions 
experiments real synthetic data showed proposed hilbert tree splitting policy consistently disk accesses insertion dataset hilbert tree gamma tree split points mix table comparison insertion cost hilbert tree split gamma tree disk accesses insertion split policy disk accesses insertion table effect split policy insertion cost dataset outperforms tree methods savings best competitor tree 
focus analysis hilbert trees providing analytical formulas predict response time function characteristics data rectangles count data density 
walid aref hanan samet 
optimization strategies spatial query processing 
proc 
vldb large data bases pages september 
ballard brown 
computer vision 
prentice hall 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
acm sigmod pages may 
bentley 
multidimensional binary search trees associative searching 
cacm september 

space filling curves generation application bandwidth reduction 
ieee trans 
information theory november 
faloutsos 
gray codes partial match range queries 
ieee trans 
software engineering october 
early version available umiacs tr cs tr 
faloutsos roseman 
fractals secondary key retrieval 
eighth acm sigart symposium principles database systems pods pages march 
available umiacs tr cs tr 
michael 
bang file new kind grid file 
proc 
acm sigmod pages may 

effective way represent quadtrees 
comm 
acm cacm december 
grand challenges high performance computing communications 
fy research development program 
greene 
implementation performance analysis spatial data access methods 
proc 
data engineering pages 
griffiths 
algorithm displaying class space filling curves 
software practice experience may 
gunther 
cell tree index geometric data 
memorandum 
ucb erl univ california berkeley december 
guttman 
new features relational database systems support cad applications 
phd thesis university california berkeley june 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages june 
hinrichs nievergelt 
grid file data structure support proximity queries spatial objects 
proc 
wg intern 
workshop graph theoretic concepts computer science pages 
jagadish 
spatial search polyhedra 
proc 
sixth ieee int conf 
data engineering february 
jagadish 
linear clustering objects multiple attributes 
acm sigmod conf pages may 
kamel faloutsos 
packing trees 
proc 
nd international conference information knowledge management cikm pages arlington va november 
curtis michael stonebraker 
segment indexes dynamic indexing techniques multi dimensional interval data 
proc 
acm sigmod pages may 
david lomet betty salzberg 
hb tree multiattribute indexing method guaranteed performance 
acm tods december 
mandelbrot 
fractal geometry nature 
freeman new york 
orenstein 
spatial query processing object oriented database system 
proc 
acm sigmod pages may 
ousterhout mayo scott taylor 
magic vlsi layout system 
st design automation conference pages nm june 
robinson 
tree search structure large multidimensional dynamic indexes 
proc 
acm sigmod pages 
samet 
design analysis spatial data structures 
addison wesley 
sellis roussopoulos faloutsos 
tree dynamic index multidimensional objects 
proc 
th international conference vldb pages england september 
available src tr umiacs tr cs tr 
avi silberschatz michael stonebraker jeff ullman 
database systems achievements opportunities 
comm 
acm cacm october 
white 
trees large ordered indexes multi dimensional space 
application mathematics research staff statistical research division bureau census december 
