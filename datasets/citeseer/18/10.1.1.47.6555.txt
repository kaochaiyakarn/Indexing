glasgow haskell compiler technical overview simon peyton jones cordy hall kevin hammond partain phil wadler department computing science university glasgow qq 
email simonpj dcs glasgow ac uk december appears proceedings uk joint framework information technology technical conference keele 
give overview glasgow haskell compiler focusing especially way able exploit rich theory functional languages give practical improvements compiler 
compiler portable modular generates code freely available 
computer science scientific engineering discipline 
scientific discipline seeks establish generic principles theories explain underpin variety particular applications 
engineering discipline constructs substantial artefacts software hardware sees fail develops new theory underpin areas inadequately supported 
milner argues dual approach computer science 
functional programming research area offers unusually close interplay aspects peyton jones 
theory immediate practical application practice leads directly new demands theory 
describes experience building substantial new compiler purely functional language haskell 
discuss motivations major design decisions achievements paying particular attention interaction theory practice 
scaling prototypes large real systems appears valued academic community small systems demonstrate concepts dismissed just development 
believe research problems exposed act constructing large complex systems 
hope serves substantiate point 
compiler described strands serc funded grasp project 
concerns parallel functional programming grip multiprocessor space precludes coverage 
goals haskell purely functional non strict language designed international group researchers hudak 
de facto standard non strict lazy functional programming community compilers available 
goals writing new compiler ffl freely available robust portable compiler haskell generates quality code 
goal easily stated achieved 
haskell large language incorporating rich syntax new type system supports systematic overloading called type classes wadler blott wide variety built data types including arbitrary precision integers rationals arrays module system input output system 
ffl provide modular foundation researchers extend develop 
experience researchers unable evaluate ideas sheer effort building framework required great 
tried hard build compiler documented modular way find relatively easy modify 
ffl learn real programs 
intuition implementor notoriously poor basis critical design decisions 
risc revolution computer architecture partly simple idea measuring real programs implementing operations hennessy patterson 
lazy functional programs execute particularly non intuitive fashion plan careful quantitative measurements behaviour 
overview compiler compiler runtime system major characteristics ffl written entirely haskell 
exception parser written yacc ffl generates target code 
relatively common conferring wide portability 
big question course efficiency penalty paid matter discuss section 
ffl extended language allow programming supporting arbitrary inline statements written course possible completely secure way example procedure overwrite haskell heap technique referentially transparent usual program transformations remain valid 
mixed language working allows extend haskell easily example provide access existing procedure 
general way calling extension require separate modification code generator 
ffl haskell monolithic arrays fully implemented access time 
addition extended language incrementally updatable arrays monolithic arrays implemented mutable arrays 
ffl interface storage manager compiler carefully defined highly configurable 
example storage manager comes fewer different garbage collectors including generational 
ffl compiler runtime system support comprehensive runtime profiling space time user level evaluation model level sansom peyton jones 
organisation organisation compiler quite conventional 
driver program runs sequence unix processes literate script pre processor main module lines major passes main parser renamer type inference desugaring core language transformation stg language transformation code generation data type definition manipulation haskell syntax core language stg language identifier representations type representations prelude definitions utility modules utilities profiling total breakdown module sizes parser compiler compiler unix assembler unix linker 
main passes compiler shown 
follows summarises sizes 
simple recursive descent parser recognises simple syntax output separate main parser process 
syntax tree produced parser faithfully represents construct haskell source language distinction purely syntactic 
improves readability error messages type checker 

renamer resolves scoping naming issues especially concerned module imports exports 

type inference pass annotates program type information transforms overloading 
details transformation wadler blott discuss 

converts rich haskell syntax simpler functional language call core language 
notice desugaring follows type inference 
result type error messages expressed terms original source appear quickly 

variety optional core language transformation passes improve code 
typechecker prefix form reader renamer codegen code flatten compiler native code front ends lex yacc parser transform transform haskell source generators overview glasgow haskell compiler 
simple pass converts core shared term graph stg language simpler purely functional language 

variety optional stg language transformation passes improve stg code 

code generator converts stg language internal data type printed syntax preferred done assembly language syntax particular machine 

target code printer prints form acceptable compiler 
compilation transformation consistent theme runs design decisions compilation process expressed correctness preserving transformations purely functional program 
wide variety conventional imperative program optimisations simple counterparts functional language transformations replaces equals equals 
just examples stg language originally short spineless tagless machine language fact language entirely independent machine model implement 
ffl copy propagation special case inlining bound variable variables 
special case rule remains valid arbitrary expression certainly true imperative language 
ffl procedure inlining example beta reduction 
defined xy expression call 
ffl lifting invariant expressions loops corresponds simple transformation called full laziness transformation hughes peyton jones lester 
idea compilation transformation new appel fradet metayer kelsey particularly applicable non strict language 
non strict semantics carries implementation cost means transformation rules applied globally wholesale fashion side conditions 
true strict language language side effects 
suppose example mention evaluation terminate 
strict language semantics original call non termination inlining may 
short tried gain maximum leverage purity language compiling 
gone developed new techniques express purely functional notation number matters commonly left implicit 
expressing way exposes transformations 
particular ffl developed idea unboxed data types order expose degree evaluation value transformation system peyton jones launchbury 
ffl developed stg language number usually implicit matters just closure constructed updated exposed peyton jones 
ffl developed monads support input output calling procedures side effects incrementally updatable arrays peyton jones wadler 
formulation allows arbitrary transformation side effecting computations performed affecting meaning 
completed overview compiler 
rest gives details selected aspects 
core language secondorder lambda calculus core language meant just large express efficiently full range haskell programs larger 
obvious choice language lambda calculus augmented letrec case expressions 
prime consideration preserve type information entire compiler right code generator despite wholesale transformation expected applied program 
various ways type information desirable essential stages compilation example higher order strictness analyser may need accurate type information order construct correct fixed points 
trouble program transformation involves type manipulation 
consider example function compose type compose fi fl 
ff fi ff fl function defined untyped core language compose 


written definition little curiously expression reasons apparent 
suppose wished unfold particular call compose say compose show double int double doubles show converts result string 
result unfolding call compose instance body compose double show want able identify type variable sub expression calculate type case type int application compose may different type 
type body compose just type variable fi 
clear polymorphic world insufficient merely tag variable original program type information survive program transformations 
compiler known polymorphically typed language preserves type information arbitrary transformations 
done 
clearly program decorated type information way program transformation sure preserve 
deciding exactly decorate program maintain decorations correct transformation difficult realised developed shelf solution available computer science theory second order lambda calculus 
idea polymorphic function compose receives type argument polymorphic variable type ff fi fl case compose polymorphic function called passed extra type arguments indicate types polymorphic type variables instantiated 
definition compose compose 



function takes type arguments value arguments types explicitly type local variable call compose extra type arguments instantiate just normal arguments instantiate example call compose looked earlier written compose int int string show double simple unfold call instantiating body compose supplied arguments give expression int double show notice bound variable automatically attributed correct type 
short second order lambda calculus provides founded notation express transform polymorphically typed programs 
type inference pass produces translated program extra type abstractions applications explicit 
monads monads idea category theory number fruitful applications writing compiler encapsulate side effecting operations code compiled moggi wadler 
focus monads compiler 
monads compiler take particular example slightly simplified code compiler type checking application ap fun arg fun 
arg 

unify arrow 
informal level code legible readers experience type inference 
read typecheck application ap fun arg typecheck fun inferring type typecheck arg inferring type 
invent fresh type variable unify 

return type application 
type follows expr 
tcm type expr 
function expressions types 
quite lot plumbing required scenes 
firstly type error program type inference process fail type checking fun arg unification step 
secondly unique name supply manufacture new type variable 
thirdly way collecting displaying error messages 
fourthly unification process works incrementally augmenting substitution mapping type variables types 
usually handled imperative language side effects sort exception handling mechanism 
handle monad 
tcm type constructor encapsulates plumbing 
easily seen looking definition tcm type tcm uniq 
subst 
uniq subst data just value type tcm function takes unique name supply substitution delivers indicating failure just triple value type depleted name supply augmented substitution 
omitted gathering error messages definition tcm reduce clutter 
benefits monadic programming programming monads number benefits 
firstly plumbing implicit program easier read write 
secondly plumbing encapsulated place easy modify 
example year type checker working added error recovery mechanism single type error cause entire type checker halt 
possible recover error gather accurate type error messages run compiler 
achieved single afternoon modifying localised parts type checker 
target language generate code language primary target generating native code direct 
way gain instant portability implemented wide variety architectures benefit directly improvements code generation 
approach high level assembler gained popularity bartlett miranda 
particular tarditi compiling sml developed independently concurrently addresses essentially problems tarditi acharya lee 
approach compiling translate entire program giant procedure 
turns utterly impractical 
compilers trouble compiling line procedures approach defeats separate compilation 
simply compile extended basic block parameter procedure giving rise large number easily compiled procedures 
registers evaluation model heap pointer stack pointer environment pointer mapped global variables 
temporary variables mapped local variables scope procedure basic block 
turn usually mapped registers compiler 
major problem approach need able jump extended basic block block implemented procedure call 
unfortunately call return stack grow word certain cause stack overflow 
solve problem neat completely portable trick 
parameterless function representing extended basic block returns code pointer jump calling 
execution entire program controlled line interpreter true cont cont cont address code block function executed 
function points called returns address 
turns idea old reinvented 
clever oft reinvented ideas steele inventor called handler rabbit compiler scheme steele 
efficiency remaining big question course efficiency 
price paid going 
restricted completely standard compiler answer certainly considerable 
exploiting language extensions provided gnu compiler gcc available wide range architectures get miranda trade mark 
name researcher queen mary westfield college london 
code appears significantly better generate hand built code generator prepared enormous amount effort 
architecture want fast code provide header file defining handful macros customise compilation particular architecture 
really important things get right ffl register mapping 
gcc allows specify particular global variable kept register allows keep say heap pointer permanently register 
ffl jumps 
returning interpreter discussed jumps compiled genuine jump machine instructions gnu inline assembly facility 
eliminates entirely overhead interpreter 
debugging originally target confer portability reduce code generation effort 
design decision major unexpected benefit debugging code generator easier particular ways ffl extensive language gdb debugger stepping compiled code 
ffl interpreter executed jump easy add code record trail dozen jumps perform hygiene checks state system stack contents look reasonable jump 
simple technology catches heap corruption happens millions instructions causes crash 
difficult convey importance matter 
finding obscure code generation errors done enormously time consuming 
level debugging regular hygiene checking huge contribution development code generator 
profiling knows possible substantial improvements performance program changing small proportion code 
trick course know just part code pay attention 
question particularly difficult answer lazy functional program demand driven evaluation mechanism leads non execution order 
essentially profiling tools lazy functional languages runciman wakeling york begun change situation 
runciman wakeling space profiling tool displays regular census contents heap lead directly discovery space leak runciman wakeling 
developed related technique called cost centres enables time consumption program profiled space consumption sansom peyton jones 
briefly idea 
programmer identifies expressions costs accumulated call scc set cost centre example call scc sorting sort xs attribute costs evaluating sort xs cost centre sorting 
costs doing sorting attributed particular costs evaluating xs evaluation may occur interleaved sorting process 
furthermore costs call sort attributed including costs executing calls sort separately compiled library functions 
applies library functions called especially common polymorphic functional language cost calls sort attributed sorting 
implementation simple 
heap allocated thunk suspended computation extra field identifies cost centre computation allocated thunk 
cost centre currently executing computation identified global register stored thunk constructed 
thunk evaluated cost centre register saved value set thunk evaluation complete cost centre register restored previous value 
profilers lazy functional languages infancy regard extremely important widespread functional languages 
generational garbage collection systems symbolic computation haskell implementation built top heap 
decade generational garbage collection widespread symbolic computation community lieberman hewitt 
generational collectors exploit fact objects die young dividing heap generations collecting young generations old ones 
generational collectors behave badly write operations old generations 
unfortunately implementations lazy functional languages tend perform lots write operations update suspended computations thunks values looks interact badly generational collectors 
result garbage collectors lazy functional languages tended variant classic baker space collector 
apart seward literature generational garbage collection lazy languages 
begun investigation variety technology lazy languages including generational schemes 
findings surprising summarise briefly give flavour 
fuller details sansom peyton jones 
ffl little care possible build space inplace compacting garbage collector efficient better space collector live data small fraction heap size 
space collector big advantage allow heap twice large space collector paging system starts thrash 
ffl objects die younger lisp systems 
example typically objects die kbytes heap allocated 
ffl similarly objects updated young typically updates objects kbytes old 
ffl large majority updates unnecessary thunk updated referenced 
indicates substantial scope program analyses detect avoid unnecessary updates 
ffl simple generational schemes implemented far considering paging effects generational garbage outperforms space space collectors live data exceeds heap size 
ffl paging taken account improved locality generational collector degrade gracefully heap size increased 
short contrary popular belief lazy functional language implementations subjects generational garbage collection 
benchmarks test suites lack standard language long hindered development serious benchmark suite lazy functional languages 
number obvious reasons suite desirable ffl encourages implementors improve aspects compiler give benefits real applications merely improving performance toy programs 
ffl give concrete basis comparing different implementations 
part developed nofib benchmark suite partain collection application programs written people view getting particular task done 
range applications wide including example theorem prover particle cell simulation solid geometry application strictness analyser 
size ranges lines haskell 
quite separate question benchmarking particular haskell implementation complete correctly implements obscure corners language 
developed test suite consisting large number tiny programs 
time bug compiler added new program test suite shows bug 
night automated system rebuilds compiler source code compiles test suite benchmark suite runs resulting programs 
simple technology catches large number errors ensures bug inadvertently re introduced 
process surprisingly compute disc intensive 
program compiled run different combinations options profiling enabled optimisation enabled usually retain debugging symbol tables binaries 
full run takes weekend mbyte sparc workstation local gbyte disc 
availability glasgow haskell compiler profiling tools test suite nofib benchmark suite available free ftp 
anonymous ftp username anonymous password mail address hosts find things pub haskell subdirectories animal cs chalmers se ftp dcs glasgow ac uk nebula cs yale edu summary successes failures lessons learned experience 
selection ffl act building large system forced addressing research issues addressed 
resulted collection new ideas applicable far widely implementation unboxed values monads second order lambda calculus stg language update analysis 
ffl haskell type class system caused enormous amount extra simple hindley milner types far satisfied efficiency resulting programs 
compiler technology required recover acceptably efficient implementation considerable 
ffl consistently underestimated long take job largely scale compiler 
apparently small changes cause chain effects chased compiler rebuilt 
ffl certainly write core language lint pass check type consistency core programs 
obscure compiler bugs turned caused core transformation failed maintain type information properly 
ffl attempt build compiler way form framework researcher quite successful 
prior compiler official release researchers manchester imperial queen mary westfield college just way phd students glasgow 
turn directly benefitted 
example storage management system profiling technology program transformation system contributed students 
project carried funding serc grasp project gr gr 
partner project flare jointly funded dti serc 
benefit enormously interaction functional programming group glasgow especially john launchbury 
gallant users denis howe jon hill julian seward deserve particular 
aw appel compiling continuations cambridge university press 
jf bartlett jan scheme portable scheme compiler dec wrl rr 
fradet le metayer jan compilation functional languages program transformation acm transactions programming languages systems 
jl hennessy da patterson feb computer architecture quantitative approach morgan kaufman isbn 
hudak sl peyton jones pl wadler arvind boutel fairbairn fasel guzman hammond hughes johnsson kieburtz rs nikhil partain peterson may report functional programming language haskell version sigplan notices 
hughes july design implementation programming languages phd thesis programming research group oxford 
kelsey may compilation program transformation yaleu dcs rr phd thesis department computer science yale university 
lieberman hewitt june real time garbage collector lifetimes objects cacm 
milner june computer science core research discipline lab foundations computer science edinburgh 
miranda apr machine independent fast threaded code dept computer science queen mary westfield college london 
moggi june computational lambda calculus monads logic computer science california ieee 
wd partain nofib benchmark suite haskell programs functional programming glasgow launchbury ed workshops computing springer verlag 
sl peyton jones apr implementing lazy functional languages stock hardware spineless tagless machine journal functional programming 
sl peyton jones autumn uk research functional programming serc bulletin 
sl peyton jones launchbury sept unboxed values class citizens functional programming languages computer architecture boston hughes ed lncs springer verlag 
sl peyton jones lester may modular fully lazy lambda haskell software practice experience 
sl peyton jones pl wadler jan imperative functional programming th acm symposium principles programming languages charlotte acm 
runciman wakeling profiling compiler functional programming glasgow launchbury ed workshops computing springer verlag 
sansom sl peyton jones profiling lazy languages functional programming glasgow launchbury ed workshops computing springer verlag 
pm sansom sl peyton jones dec generations lazy functional languages department computing science university glasgow 
seward march generational garbage collection lazy graph reduction department computer science university manchester 
gl steele rabbit compiler scheme mit lab computer science 
tarditi acharya lee july assembly required compiling standard ml school computer science carnegie mellon university 
pl wadler june comprehending monads proc acm conference lisp functional programming nice acm 
pl wadler blott jan ad hoc polymorphism ad hoc proc th acm symposium principles programming languages austin texas acm 
