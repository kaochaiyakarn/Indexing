call name cps translation binding time improvement kristian nielsen morten heine rensen diku department computer science university copenhagen dk copenhagen denmark 
mail diku dk 
attention call value continuation passing style cbv cps translation tool partial evaluation call name cbn cps translation investigated 
undertake systematic investigation effect cbn cps connection partial evaluation deforestation 
give example cbn cps translation acts binding time improvement achieve effects deforestation partial evaluation 
effect achieved cbv cps 
second prove formally cbn cps translation partial evaluation power achieve effects deforestation 
consequence results practical tool cbn cps improving results partial evaluation improved understanding relation partial evaluation deforestation 
partial evaluation jon program transformation technique automatically perform variety program improvements 
partial evaluation partial success elimination intermediate data structures 
particular problem deforestation wad applicable :10.1.1.30.9032
standard example elimination intermediate data structures function appending lists 
expression xs ys zs constructs intermediate list result xs ys 
efficient equivalent expression xs ys zs construct intermediate list 
deforestation transform partial evaluation 
cbv cps translation plo partially solve shortcoming partial evaluation 
consel danvy con dan show cbv cps translating source program applying partial evaluation improve specialization 
instance typical partial evaluator return term unchanged dynamic 
cbv cps translation term gives roughly partial evaluation transform 
similar effect obtained partial evaluator adopts explicit context distribution rule moves context branches conditional 
bondorf bon shows manipulations incorporated elegantly writing specializer cps 
lawall danvy adopt language control operators include manipulations direct style ds specializer law 
methods handle dynamic recursive data structures con achieve full power deforestation 
example intermediate structure number double append example fail intermediate structure list 
investigate effect cbn cps translation partial evaluation connection deforestation 
show cbn cbv cps possible eliminate intermediate data partial evaluator dynamic recursive ones 
section presents example cbn cps translation partial evaluator similix obtain nontrivial deforestation program 
remaining sections prove detail cbn cps translation followed partial evaluation gives result deforestation original program 
cbn cps binding time improvement section case study cbn cps partial evaluation obtain better specialization 
experiments performed similix bon partial evaluator scheme 
readability programs miranda ml syntax 
section informal style assumes familiarity partial evaluation cps translation corresponding instance jon con 
compiler interpreter algebraic expressions consider language algebraic expressions grammar gamma denotes numerical constant stack machine language push add neg instructions pushing constants stack adding top elements stack negating top stack sequencing 
defines compiler comp expressions stack machine code 
interpreter int stack function comp simple syntax directed translation 
function int stack executes instruction turn maintaining stack returns top stack result evaluation 
comp int stack define stack interpreter int exp composition functions fig 

interpreter inefficient constructs intermediate compiled program example inspired dus 
comp push comp seq comp neg comp seq comp seq comp add int stack hd int int push int neg gamman int add int seq int int int exp int stack comp fig 

stack machine compiler interpreter 
interpreted int stack 
goal partial evaluation automatically transform expression int exp dynamic pass interpreter construct intermediate program 
failure cbv techniques applying similix program fig 
yields program back unchanged improvement achieved 
consel danvy con explain saying producer comp consumer int stack separated dynamic conditional dynamic cases expression syntax comp describe cbv cps translation solve problems bringing producer consumer similarly example 
note technique handle recursive dynamic data structures comp cause infinite specialization respect growing continuation 
similix applied cbv cps version program binding time analysis indicates intermediate data structure eliminated infinite specialization result 
order ensure termination similix generalize growing continuation case program improved 
effect cbn techniques con cbv cps translation exclusively similar results conjectured cbn cps 
subsection show fact key success example cbn cbv cps 
want apply cbn cps translation program cbv semantics sure translated program equivalent original 
problem program cbn cps translated counter part necessarily equivalent cbv semantics side effects may happen different order ii may efficient duplicated computation iii may non terminating terminating 
iii probably problem practice instance transformers choose ignore possibility changing non terminating programs terminating ones fuse wei supercompiler tur 
ii known deforestation 
gives cbn cps version program fig 

idea cbn cps expression translates function expects continuation argument 
applying function continuation evaluates expression weak head normal form applies result 
keeping parts appear residual program direct style input variables stack result int stack obtain residual program ds 
comp push comp seq comp neg comp seq comp seq comp add int stack hd int int case push neg gamman add seq int int int exp int stack comp fig 

cbn cps version pass interpreter 
applying similix program fig 
gives desired efficient stack interpreter fig 

rewriting program cbn cps succeeded eliminating dynamic intermediate data structure similix data structure recursive 
int exp hd int int int int gamman int int int fig 

efficient specialized interpreter 
summary overview seen cases safe apply cbn cps translation better results obtained partial evaluation 
cbv cps 
sections characterize phenomenon generally proving partial evaluation cbn cps translated program equivalent deforestation original program 
structure proof follows 
define unfolding relations cbn cbv transformer corresponding deforestation partial evaluation respectively sects 

prove simulation indifference sects 
unfolding transformer programs cbn cps cbn unfolding programs ds 
simplify presentation simulation proved order language proof extends higher order case deforestation usually restricted order programs anyway 
sect 
introduce folding extend simulation indifference results deal folding 
language notational conventions language fig 
lambda calculus extended recursive function definitions constructors case expressions simple patterns written brevity 
assume denumerable disjoint sets variable names fixed arity constructor names fixed arity function names 
firstorder fragment language language obtained omitting lambda abstractions applications fig 

constr fname term delta delta delta tn delta delta delta tn fp delta delta delta xn delta delta delta xm fig 

language program set definitions fd 
usual require variable occurs definition left hand side pattern 
require variables definitions right hand side left side 
require function program definition patterns case expression distinct 
constructors function calls supplied correct number arguments 
vector notation list terms delta delta delta instance means delta delta delta case expressions abbreviates delta delta delta pn fx tg denote result replacing free occurrences tg denotes simultaneous substitution 
application associates left delta delta delta abbreviates delta delta delta delta delta delta 
simplicity consider error terms terms form application constructor term fp case fp pattern form cases transformers simply halt 
development extends general case restrictions fundamental changes cost complicated definitions 
cbn cps translation translation plo defined fig 
higher order language 
programs cps translated translating right hand sides function definitions delta delta delta xn delta delta delta xn delta delta delta tn delta delta delta tn delta delta delta tn delta delta delta tn fp fp fig 

cbn cps translation cbn unfolding section introduce cbn unfolding higher order language order fragment 
order fragment unfolding mechanism essentially unfolding wadler deforestation wad :10.1.1.30.9032
higherorder unfolding similar higher order deforestation mar ham san presentation similar san 
introduce unfolding mechanism rewrite relation term theta term generalizes normal cbn rewrite semantics closed terms unknown dynamic values represented free variables 
sets ctxt redex traditional cbn evaluation contexts cbn redexes respectively means cbn redex form 
normal cbn evaluation terminated outermost constructor stuck application case expression 
may redexes 
dval set terms redexes 
term form dval form dead context allow get hold subterms fp tg fp tg delta delta delta tm fp tg delta delta delta tn fp tg fp delta delta delta vn delta delta delta fp vg delta delta delta vm delta delta delta tn delta delta delta vm delta delta delta tn fp tg delta delta delta fp pm vm pn tng fig 

higher order cbn contexts lambda constructor stuck applications branch stuck case expression 
formalized fig 

definition satisfies central unique decomposition property lemma 
term dval exists unique triple theta ctxt theta redex proof 
induction structure term lemma allows definitions induction structure unique decomposition respectively 
cbn unfolding relation defined fig 

relation defines pure evaluation contains extends operations evaluate normal dead contexts 
note deterministic virtue lemma 
fx fp fx pk fx tg definition delta delta delta tm fp delta delta delta tm fp delta delta delta fp fp delta delta delta fp fp fig 

higher order cbn unfolding state simulation result order language subset need restriction order terms 
defined figs 

definition justified unique decomposition property similar way higher order case 
ctxt redex dval fp tg fp tg fp tg fp fp vg fp pm vm pn tng fig 

order cbn contexts fp tk fx pk fx tg definition fp fp fp fp fig 

order cbn unfolding simulation section prove cbn cps translated terms simulates ds terms 
letting denote reflexive transitive closure prove essentially equivalent classify reductions cps world classes administrative reductions proper reductions 
reduction direct style corresponds cps zero administrative reductions followed proper reduction 
intuitively proper reductions perform real computation administrative reductions form overhead introduced cps translation 
called colon translations associate ds redex proper cps redex definition essentially equivalent precise 
proof parts corresponding normal dead contexts unfolding mechanisms 
part concerns evaluation restatement plotkin proof language plo 
second part extends proof dead contexts 
part uses colon translation fig 

consists lemmas ranges terms lemma 
terms lemma 
terms 

lemma 
terms 


proofs lemmas straightforward inductions lemma uses ones see plo 
delta delta delta tn delta delta delta tn delta delta delta tn delta delta delta tn delta delta delta tn fp delta delta delta tn fp fp fp delta delta delta tn fig 

colon translation colon translation assigns ds term unique term result reducing administrative redexes 
extend simulation unfolding relation second colon translation assign finite set possible terms administrative redexes reduced 
example fc xg fc xg set terms assigned include likewise administrative redexes branches stuck case expressions may reduced different orders 
complicates second part proof somewhat 
residual program may contain subexpressions just simulation holds conversion variables problem plotkin translation proof plo discovered hatcliff danvy hat 
second colon translation defined fig 

different mappings 
delta delta delta tn denote set fc delta delta delta set terms corresponding proper redex 
set terms corresponding proper redex delta set terms appear residual case expressions 
fe fx delta delta delta vm delta delta delta tn delta delta delta vm delta delta delta tn fp pm vm tng fp pm vm delta tn delta dval ae fx delta ae ft delta fp fp ft fig 

second colon translation 
need prove number properties colon translations 
lemma 
ae dval ae dval proof 
simple induction lemma 
fp fp delta 
proof 
induction lemma 
delta 

proof 
induction definition delta lemma prove simulation property lemma 




delta 
proof 
simultaneous induction part typical case delta delta delta vm delta delta delta dval 
induction hypothesis lemma dval delta delta delta vm delta delta delta delta delta delta um delta delta delta part part lemma 
part part lemma 
part part lemma lemma 


proof 
simultaneous induction definition part prove case fp fp 
lemma fp delta dval choose minimal dval lemma lemma dval means fp fp pn part part lemma says result reducing administrative redexes lemma says unfolding preserved cbn cps translation simulation result theorem simulation 
cbv unfolding introduce cbv unfolding 
set val ranged consists usual cbv values dynamic terms dyn stuck applications case expressions 
relative set values ctxt redex usual sets cbv contexts redexes means redex values dynamic terms may contain redexes instance value redex 
dval sets values dynamic terms respectively redexes 
term val form dead context allow get hold subterms lambda branch residual case term 
formalized fig 

redex val ctxt dyn dval fp fp fp fp fp fp fig 

cbv contexts redexes values hard see unique decomposition property holds 
similarly cbn unfolding property define cbv unfolding fig 

similar unfolding mechanism similix bon 
note arguments function calls constructors unfolded call unfolded rules distributing contexts 
vg definition vg fp tg fx vg fig 

cbv unfolding indifference show cbn cbv unfolding mechanisms behaviour cps translated terms term iff give syntax cps translated terms lemma 
second term syntax unfolding stops cbn cbv unfolding steps cbn cbv 
lemma 
third syntactic class closed unfolding transformers lemma unfolding step new term class 
step 
class cps terms appears fig 

assume set continuation variable names 
lemma 
term term proof 
induction term cont fp fp fig 

syntax cps terms step 
introduce cps contexts cps redexes cps values fig 
show cps term cps value decomposes uniquely cps context redex lemma 
show cps value dead value cbn cbv decomposition cps form dead context context redex cbn cbv lemma 
gives desired lemma 
lemma 
term 
term val unique pair ctxt theta redex 

cont unique pair theta redex 
proof 
prove simultaneously induction 
lemma 

val dval dval term term cont redex val ctxt fp fp fp fp fig 

cps contexts redexes values 
ctxt ctxt ctxt proof 
note cont val term val redex redex redex proceed follows 

prove induction simultaneously val dval 
suppose form 
induction prove clearly case ctxt ctxt lemma 
term dval dval unique triple theta ctxt ctxt theta redex redex 
proof 
preceding lemmas step 
class cps terms closed cbn cbv unfoldings 
lemma 

term term term tg term 
cont tg cont 

term cont term lg term 
cont lg cont 
proof 
prove simultaneously induction lemma 
term term proof 
induction term preceding lemma theorem 
term iff proof 
lemmas folding section extend simulation indifference results folding 
add folding strategy order cbn unfolding arriving firstorder cbn transformation essentially known order deforestation algorithm 
argue cbv folding behaves cbn cps translated programs similar cbn folding ds programs 
folding cbn transformation terms calls recursively defined functions sequence infinite 
order get term program defining functions called new equivalent term program introduce folding 
idea introduce new function definitions applying relation letting rewrite free variables introduce new function 
transform idea 
question arises term 
term redexes newly introduced call unfolded 
solution view new syntactic construction add set dval easy see unique decomposition property holds 
transforming term check term previously encountered 
transform call introduced time saw 
similarly wad consider folding proper redexes terms fp tg :10.1.1.30.9032
fig 
defines algorithm 
example recall double append term see fig 

applying cbn transformer term program gives term program fig 
unfolded calls functions called exactly post unfolding 
program improved intermediate list constructed 
simulation indifference folding extend simulation indifference results transformers folding 
prove order cbn transformer possibility fold corresponding folding possibility transformation cbn cps translated program 
general fold steps occur transformation direct style program term form fp tg encountered 
lemmas characterize corresponding terms encountered transformation cbn cps translated program 
ff tg fx fv oe tg fz yg yi oe fp tg ff ff fg oe oe yi fyg fv fresh name return term program fig 

cbn transformation folding vs ws xs ys xs ys zs zs fig 

double append lemma 


ctxt redex 
proof 
induction part prove part lemma 
cont 
fp fp lg 
proof 
induction structure consider general situation fold step possible xs ys zs xs ys zs xs 
ys zs ws ws zs vs vs ys zs ws zs ws zs fig 

improved double append term renaming fp tg 
simulation corresponding situation cbn cps lemma 
indifference passive contexts cbn cbv 
furthermore easy see fig 
renaming case renaming lemma see forms fp lg summarise seen cbn transformer possibility fold step cbv transformer meet terms renamings simple forms 
long folding strategy cbv transformer able fold simple situation cbv transformer able fold cbn transformer 
particularly popular folding strategy partial evaluation community fold dynamic conditionals terms form fp tg dynamic lambda expressions 
rationale strategy transformation reduction sequence eventually meet term transforming infinite loop completely static control bon section 
strategy able fold 
renaming dynamic conditional lambda expression encountered transformation renaming dynamic conditional lambda expression encountered transformation strategy folding just occurs bit exact placement residual calls result 
example example folding cbn cps consider cps translated version double append term append function fig 

xs ys zs xs ys xs ys zs 
zs ys kg fig 

cbn cps version double append result cbn transforming term program seen fig 
post unfolding 
shows corresponding ds program cps program arises ds program cps translation followed reduction administrative redexes 
ds program essentially improved double append term program fig 

xs ys zs xs ys zs xs ys zs zs bs bs ys zs zs zs bs bs zs lg vs ws vs ws 
vs ws zs zs ys ys vs ws zs ws zs ws ys ys fig 

improved double append cbn cps ds related step current efforts diku better understand relationship different transformation techniques sor glu glu jon 
efforts facilitate exchange ideas different techniques 
results related previous partial evaluation cbv cps translation 
con dan explained cbv cps improve specialization programs allowing static information propagate dynamic contexts 
bon bon law describes extension standard partial evaluation called cps specialization cps specialization program achieves effect plain partial evaluation cbv cps translated program 
explains analogous situation cbn cps translation cbn cps deforestation cbv cps 
approach due gluck rgensen glu 
start cbn interpreter context distribution rules show specializing interpreter programs yield results applying deforestation directly programs 
points cbn cps translation replace certain special reductions dynamic conditionals performed deforestation 
sabry felleisen explain generally cbv cps cps translation corresponds certain extra reductions direct style sab 
cbn cps translation tool improving partial evaluation possible previous techniques binding time improvement including cbv cps 
furthermore argued general effect cbn cps partial evaluation wadler deforestation algorithm 
results practical interest application partial evaluation real problems theoretical interest relating partial evaluation deforestation 
important application results development stronger program transformers combine effects plain partial evaluation cbv cps translation 
cps specialization cbn cps translation 
deforestation main difficulty automate decision safe transform cbn cps cbv cps necessary plain partial evaluation avoid infinite specialization code explosion 
related problem occurs dan result strictness analysis determine cbv cps translate programs cbn semantics 

comments discussions indebted danvy gluck hatcliff jones rgensen mogensen sands turchin 
chin 
bon bondorf danvy 
automatic higher order recursive equations 
esop 
lncs vol 
pp bon bondorf 
self applicable partial evaluation 
ph thesis diku rapport department computer science university copenhagen 
bon bondorf 
improving binding times explicit cps conversion 
acm lisp functional programming conference 
san francisco california june 
bon bondorf 
improving cps partial evaluation writing cogen hand 
pepm 
orlando florida 
con consel danvy 
better support static data flow 
fpca 
ed 
john hughes lncs vol pp 
dan danvy 
semantics directed compilation non linear patterns 
information processing letters 
vol pp march 
dan danvy hatcliff 
cps transformation strictness analysis 
acm letters programming languages systems 
vol september 
dus 
proving program transformers correct program transformation 
workshop logic domains programming languages darmstadt germany may 

glu gluck rgensen 
generating transformers deforestation driving 
static analysis symposium namur belgium 
lncs vol 
glu gluck rensen 
partial deduction driving equivalent 
plilp madrid spain 
lncs vol 
ham hamilton 
higher order deforestation 
unpublished manuscript 

hat hatcliff danvy 
thunks calculus 
diku rapport department computer science university copenhagen 
jon jones gomard sestoft 
partial evaluation automatic program generation 
prentice hall 
jon jones 
essence program transformation partial evaluation driving 
jones hagiya sato eds logic language computation 
lncs vol 
springer verlag 
law lawall danvy 
continuation partial evaluation 
acm sigplan symposium lisp functional programming june 
orlando florida 
mar marlow wadler 
deforestation higher order functions 
functional programming glasgow 
ed 
launchbury workshops computing 
plo plotkin 
call name call value calculus 
theoretical computer science 

sab sabry felleisen 
reasoning programs continuation passing style 
lisp symbolic computation 
kluwer academic publishers 
san sands 
total correctness improvement transformation recursive functions 
tapsoft 
appear lncs 
sor rensen gluck jones 
unifying deforestation supercompilation partial evaluation generalized partial computation 
esop 
lncs vol 

tur turchin 
concept supercompiler 
acm transactions programming languages systems 
vol 
pp 

wad wadler :10.1.1.30.9032
deforestation transforming programs eliminate trees 
theoretical computer science 
pp 
wei weise ruf seligman 
automatic online partial evaluation 
fpca 
ed 
john hughes lncs vol pp 
article processed macro package llncs style 
