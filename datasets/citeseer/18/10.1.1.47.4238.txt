efficient compilation lazy evaluation thomas johnsson describes principles underlying efficient implementation lazy functional language compiling code ordinary computers 
combinator graph reduction user defined functions rewrite rules graph 
function compiled instruction sequence graph reduction machine called machine code reduces function application graph value 
machine instructions translated target code 
speed improvements orders magnitude previous lazy evaluators measured provide performance figures 
background functional programming emerging alternative conventional imperative style programming lan bac 
lazy evaluation call need normal order evaluation proposed method executing functional programs advantages unbound data structures infinite lists easily handled interactive input output possible functional programs fri 
functional programming languages pleasing properties obstacle wider lack efficient implementations 
turner combinator approach tur programs transformed expressions containing combinators combinatory logic removing variables program 
combinator expression evaluated ski machine normal order graph reduction 
problem combinators combinator defines small interpretative step combinator expressions tendency cumbersome non trivial programs 
lazy evaluation method similar combinator reduction regime standard fixed set combinators user defined function combinator rewrite rule graph 
functions compiled code sequences graph reduction machine called machine instructions explicitly construct manipulate expression graphs reduce expressions values shared cyclic graphs directly constructed 
target code generation ordinary computers machine code straight forward 
say compiler constructs specialised machine language coded combinator interpreter program 
graph reduction graph reduction approach program expression value appear general stream basic values integers booleans output file 
expressions evaluated normal order graph reduction carried performing transformations graph reduce canonical form 
canonical form expression reduced outermost level subexpressions may reducible 
canonical forms integer boolean constants list expressions arbitrary expressions function applications delta delta delta function takes curried arguments reduction application take place curried arguments functions 
general expression completely reduced subexpressions reduced canonical form instance elements list 
evaluation function application amounts corresponding function definition graph rewrite rule repeatedly rewriting application graph instance right hand side function definition arguments substituted formal parameters having reached canonical form 
illustration consider functional program value infinite list natural numbers 
letrec succ ffl succ output succ ffl succ succ ffl succ delta delta delta succ graph reduction 
output shown left graph 
succ predefined successor function infix list construction operator juxtaposition denotes function application 
graph reduction program shown figures function application denoted 
start expression transformed rewrite rule function defined pointer integer substituted parameter expression canonical form head part 
head value output dropped graph 
rewrite rule applied graph form canonical 
step reduce head part succ canonical form rewrite rule succ 
resulting integer written output dropped graph 
execution continues way ad infinitum 
note shared expression succ replaced value 
general expression graphs evaluated reduced canonical forms expressions share particular subexpression benefit evaluation call need 
introductory example machine execution graph reduction scheme function definition compiled sequence machine instructions 
graph rewrite function definition carried executing code function 
illustrate execution machine reduction step 
machine state transitions shown 
start reduction pointer expression graph top pointer stack stack grows downwards 
reduction started execution machine instruction eval case print mechanism 
eval causes new stack frame created previously topmost pointer single entry saving old stack stack called dump shown unwind state pushes pointers application nodes left backbone having reached function node 
stack rearranged topmost pointer stack points argument second pointer top left untouched point apply node updated code result application 
machine starts execute code see section table obtain push succ push cons update ret 
instructions instruction sequence essentially postfix representation right hand side 
push instruction pushes mth pointer stack relative top starting note different offsets push pointers formal parameter depending current depth stack reason explained section 
succ instruction pushes pointer succ function node 
constructs application node topmost subparts similarly cons 
having constructed graph right hand side definition cons node copied result apply node update instruction having transformed succ succ succ succ graph canonical expression 
ret instruction pops element stack top graph canonical form old stack restored dump control returned instruction eval 
general top graph canonical form application node function node restoring old stack returning machine unwind state continue reduction new expression graph 
short circuiting graph reduction previously indicated graph reduction repeatedly rewriting graph right hand sides functions 
machine code precisely cases take considerable shortcuts away intermediate graph rewritings 
consider function definition succ 
compile code constructs graph right hand side add executed expression graph succ rewritten add leaving task reduction add reduce expression integer value 
efficiency gained compile succ code reduces parameter computes value apply node integer node value 
avoids construction intermediate graph add 
code sequence function succ accordingly delta succ delta succ eval delta delta succ unwind delta delta succ rearrange delta delta delta succ push delta delta delta delta succ delta delta delta delta delta succ succ succ delta delta delta delta delta delta succ succ push delta delta delta delta delta succ succ delta delta delta delta succ succ delta delta delta succ ffl succ cons delta ffl delta succ succ update delta ffl succ succ ret machine reduction succ 
delta delta succ delta delta deltaa unwind delta delta succ delta delta deltaa delta push delta delta succ delta eval delta delta succ get delta delta succ delta delta succ add delta delta succ delta mkint delta delta update delta ret shortcut evaluation function succ 
succ push eval get add mkint update ret 
execution code sequence shown 
addition done separate stack basic values called instructions mkint get transfering values graph 
pushes basic value constant stack 
similar reasoning applied predefined primitive functions right hand side expression example code compute value condition true proper apply node updated value expression updated value expression 
line reasoning section having different compilation schemes giving code computes value expression giving code constructs graph expression 
direct method significantly faster compiler implementation measured speedup factor typical programs compared naive graph reduction 
technical details machine compiler section give complete set compilation rules simple functional language compiling machine code 
give description machine describing effects machine instructions machine state 
source language program language described consists set recursive functions expression value value program summarised table 
normal order evaluation assumed 
function takes curried arguments free variables set fx delta delta delta operators gamma viewed syntactic sugar applications predefined functions add sub deal ones table 
table syntax programs program delta delta delta function definitions 
delta delta delta nm value program identifiers constants delta delta delta xm multiple simultaneous local definitions letrec delta delta delta xm multiple simultaneous local recursive definitions table predefined functions add sub mul div binary arithmetic operators neg unary negation lt le eq ne ge gt binary relational operators conditional logical negation cons binary list construction hd tl unary head tail list null unary test empty list ternary note lambda expression syntax expressions functions defined globally 
functional programs local function definitions lambda expressions free variables transformed form super combinators hug algorithm effect compiler implementation program resulting transformation exhibit full laziness main issue hughes 
compilation rules compiler table subdivided compilation schemes delta delta delta xm gives code function reduces graph application canonical form 
gives code constructs graph leaves pointer result top stack 
gives code computes value canonical form leaves pointer value top stack 
yields result followed eval instruction embodies short circuiting described section 
computes basic value leaves result basic value stack yielding result followed get instruction 
idea avoid construction new node intermediate result arithmetic logical expression 
value transferred graph entire expression evaluated mkint instruction 
table compilation rules delta delta delta xm update ret delta delta delta xm scheme evaluate 


nil 
push gamma eval 

add add mkint similarly sub mul div 
neg neg mkint 
eq eq similarly lt gt ne ge le 

false 
true 
cons cons 
null null 
hd hd eval similarly tl 
jmp label label new unique labels 
slide gamma 
letrec slide gamma 
eval scheme evaluate basic value 


add add similarly sub mul div eq ne lt gt ge le 

neg neg 

null null 
false jmp label label new unique labels 
pop gamma 
letrec pop gamma 
get scheme construct graph 


nil 

push gamma 
cons cons 
matched 
slide gamma 
letrec slide gamma miscellaneous schemes local definitions delta delta delta delta delta delta vm delta delta delta delta delta delta vm delta delta delta delta delta delta vm delta delta delta gamma delta delta deltac gamma delta delta delta delta delta delta vm alloc update delta delta delta update gamma delta delta delta update addition help functions local definitions returns pair extended environment new stack depth gives code extend stack local definitions 
translation schemes mapping identifiers parameters location stack current depth stack 
show compilation function cons cons update ret cons update ret push cons update ret push push cons update ret 
machine state machine tuple ho di output produced far shown example 
consists sequence integers booleans 
actual implementation printed standard output 
code sequence currently executed 
stack node names pointers graph 
stack basic values integers booleans arithmetic logical operations performed shown section 
graph mapping node names nodes 
nodes types int integer nodes bool boolean nodes nil empty list nodes cons list nodes pointer head graph pointer tail graph ap application nodes pointer function graph pointer argument graph fun node compiled function hole node filled value constructing cyclic graphs letrec expressions 
global environment mapping function names pairs consisting number curried arguments function code sequence 
corresponds code segment conventional machines constant execution program 
dump recursive calls eval stack pairs consisting ffl stack node names eval ffl code sequence eval 
table summarises state transition rules machine instructions compilation rules table 
table state transition rules machine instructions 
ho print int di ho int di 
ho print bool di ho bool di 
ho print cons di ho eval print eval print cons di 
ho print nil di ho nil di 
ho eval ap di ho unwind ap di 
ho eval int di ho int di similarly nodes bool nil cons fun 
ho unwind ap di ho unwind ap di 
ho unwind delta delta delta fun ap delta delta delta ap di ho delta delta delta fun ap delta delta delta ap di 
ho unwind delta delta delta fun di ho fun di 
ho ret delta delta delta nm int di ho int di similarly nodes bool nil cons 
ho ret delta delta delta nm ap di ho unwind ap di similarly fun 
ho di ho int di 
ho di ho bool di 
ho di ho nil di 
ho di ho fun di 
ho push delta delta delta di ho nm delta delta delta nm di 
ho mkint di ho int di 
ho di ho bool di 
ho di ho ap di 
ho cons di ho cons di 
ho alloc di ho delta delta delta hole delta delta delta hole di 
ho update delta delta delta nm nm nm di ho delta delta delta nm nm di 
ho slide delta delta delta di ho di 
ho get int di ho int di 
ho get bool di ho bool di 
ho di ho di 
ho add di ho di similarly sub mul div eq ne lt gt le ge putting boolean values 
ho neg di ho gammai di 
ho di ho di 
ho true di ho di 
ho false di ho jmp di 
ho jmp delta delta delta label di ho di 
ho label di ho di 
ho hd cons di ho cons di similarly tl 
ho null cons di ho false cons di 
ho null nil di ho true nil di 
ho pop delta delta delta di ho di fg print delta delta delta 
fm nm delta delta delta nm add add sub sub 
initial state machine 
machine state denotes empty stack empty code sequence 
semicolon appends values output sequence 
period infix cons instruction sequences push stacks 
updating graph written inti 
node named previously node updated new value new node created 
notation pattern matching situations instance state transition rule applicable top stack points integer node 
instructions parameters push binds push node name occurs right hand side transition rule considered new unique transition rule 
machine states match rule considered run time errors 
definition machine certain similarities definition secd machine lan new model describe lazy output handle updating sharing graph framework machine 
initial final state machine initial configuration machine program shown 
machine starts empty output code sequence evaluating printing start expression empty pointer stack empty basic value stack empty graph environment containing compiled code functions arity empty dump 
operators gamma represented applications predefined functions add sub unevaluated expression graphs code functions machine stops state ho reached 
evaluation mechanism evaluation program driven print case list starts evaluation head tail part list see transition rules 
leaves printed data structure appears output instance list nil nil nil gives output sequence 
eval instruction reduces graph pointed pointer top delta delta gamma delta delta delta delta gamma delta delta rearrangement stack unwind 
stack canonical form 
top stack apply node transition rule rest code sequence stack top element pushed dump unwind state entered function parts apply nodes pushing function pointers way transition rule 
function node reached stack deep contain curried arguments function rule stack arranged 
top elements stack points curried arguments function pointer apply node updated value application 
reason stack manner firstly function arguments easily accessible secondly access function arguments local variables introduced letrec expressions uniformly 
stack rearrangement function code executed see compilation rule curried arguments application premature return performed rule 
ret instruction performs return eval function code updated apply node return value integer boolean nil cons node rule 
updated node apply node function node unwind state continue reduction new graph example happens shown illustrates reduction expression nil hd theta value nil function extra argument supplied 
eval unwind transitions configuration shown top stack point ot argument 
code computes value hd function updates apply node application nil function node 
entire graph eval called fully reduced ret instruction code machine reenter unwind state top stack point argument 
code computes value updates top apply node integer 
ret instruction function performs proper return eval 
fact extra curried arguments applied function manner general know advance extra reason accessing parameters variables relative top stack relative bottom sight natural 
hd push eval hd eval update ret 
theta push eval get mul mkint update ret delta ffl delta delta delta nil eval delta delta delta ffl nil delta delta delta ffl delta delta delta nil update delta delta delta ffl nil ret delta delta delta delta delta delta delta update delta delta ret delta graph reduction function returns function 
letrec expressions code letrec expression constructs graphs locally defined expressions puts pointers graphs stack 
leaving code letrec expression stack elements removed slide instruction see compilation rules recursive local definitions letrec expressions implemented constructing cyclic graphs see scheme table example consider code sequence letrec slide alloc push update push push slide 
shows intermediate machine states executing code sequence 
construct graph pointer purpose hole node allocated alloc instruction constructed hole node updated graph 
improvements machine code section discusses kinds improvements machine code embodied compiler previous section improved tail recursive behaviour exploiting knowledge variable previously evaluated 
kinds improvements included compiler implementation 
delta delta update delta delta delta delta delta delta slide delta delta delta delta construction cyclic graph 
tail recursion graph reduction rewritings right hand sides gives loop behavior tail recursive calls 
desirable property preserved compilation scheme table compilation scheme emits code computing value right hand side updating result 
scheme advantageous right hand side application primitive predefined function add sub bring proper tail recursive behaviour right hand side application user defined function 
instance compilation rules table update ret eval update ret 
eval instruction unnecessary fact harmful create stack frame evaluation 
eval instruction removed code update instruction update apply node ret instruction machine reenter unwind state additional stack frame created 
proper tail recursive behaviour reinstated compilation schemes introducing compilation scheme return value preserves context result returned value current function evaluation 
starting compilation function fx delta delta delta xm delta delta delta xm code emitted performs updating returning 
return value application user defined function simplistic graph fe delta delta delta fe delta delta delta update ret gamma 
propagate branches expression label expression letrec expressions delta delta 
delta delta delta 
delta delta deltaa delta delta delta delta delta delta delta deltaa delta rearranging stack tail calls 
letrec default case update ret gamma 
return value application fe delta delta delta better unwind action case follows ret instruction 
provided arity condition apply node updated calling function delta delta delta delta delta delta new scheme emits code sequence rearrange stack manner shown direct jump performed instruction turning tail recursion loops machine code 
method little example assuming takes argument get move new instructions move defined ho move delta delta delta nm gamma di ho delta delta delta nm gamma di ho di ho di 
evaluated variables time eval executed particular variable graph reduced canonical form subsequent evals variable effect 
keeping count variables evaluated function avoid emitting eval instructions variable 
example compute basic value expression theta table gives code sequence mul mul push eval get push eval get mul 
second eval instruction clearly useless eliminated 
apart having removed useless eval instruction conditions better target code generation code get longer code sequences unbroken calls eval may keep things machine registers bit longer 
cost involved construction reduction expression graphs cheaper evaluate expressions directly construct graphs value going 
case expressions involving constants variables evaluated previously arithmetic logical primitive functions ignore problem overflow exceptions 
example consider construction expression theta compilation rules table gives add mul add mul push push 
variable previously evaluated safe compute value theta code sequence add push get mul mkint push 
previously evaluated code sequence push get mul push get add mkint 
dealing expressions list values situation similar 
instance consider construction expression tl function definition null delta delta delta tl test condition part expression know sure evaluated part expression assert cons form 
construct expression tl tl push code sequence push tl 
avoid allocation apply node removes overhead executing code tl function function calls evaluation argument 
variable list value determined statically cons form test dynamically instructions compilation rules 
hd tl test top stack cons form case behaves hd tl instructions respectively constructs graphs 
instruction defined ho cons di ho cons di ho di ho ap fun hd di similarly 
analysis shown detect call name call value transformations locally function 
general method global analysis method described myc 
version compiler may include analysis phase 
implementation section discusses features compiler implementation machine concept 
source language completely function variant ml gmw call name semantics 
phase compiler translates machine code target code vax computer 
compiler organisation compiler organised parts syntax analysis builds syntax tree program 
type checking checks program typed polymorphic type checking algorithm mil 
program transformation transforms program set functions possibly mutually recursive described section 
user defined data types pattern matching transformed simpler constructs 
value analysis performs analysis evaluated variables discussed section 
code generation translates functions machine code 
target code generation translates machine code assembly code vax computer 
entire compiler syntax analysis written fc aug functional language lazy evaluation implementation earlier ideas compiled graph reduction joh 
currently process rewriting compiler language 
target code generation target code generation components machine state mapped target computer way printed standard output 
target code currently executed function program counter 
data area pointer stack stack pointer register called ep 
system stack stack pointer sp 
large heap area divided equally sized halves register called hp heap pointer pointing free location see 
target code functions code performs nr arguments check 
system stack stack pointer sp 
pointers stack system stack pushed entire stacks dumps description machine suggests 
stack dump mapped stack target machine possible things pushed stack locally functions pushed value 
garbage collector variant fenichel copying garbage collector fy vary sized cells works follows 
heap divided equally sized areas 
memory allocated area time simply incrementing heap pointer hp running memory area entire graph copied heap area leaving garbage updating pointers pointer stack target code instruction sequence allocates certain amount memory check amount memory available heap garbage collector invoked 
disadvantage method memory management half total available memory utilised computers large virtual address spaces serious problem 
advantage time garbage collection proportional size graph size heap area mark scan methods little time small graphs 
target code generation done deferring operations pointer stack basic value stack simulate contents topmost elements 
instructions pushes constants code generator push constants simulated stacks 
instruction instance take arguments simulated stack nonempty real stack 
bring main idea simple example target code generation shown constructs graph expression 
simulated stack fun refers pointer function node int refers integer node value heap refers pointers heap location code newly created nodes heap referred relative hp register node allocation changes value hp need carry current relative value hp called hp 
function nodes integer nodes boolean nodes nil node allocated time heap pointers nodes constant area 
simulated stack irrelevant example shown 
possibility shown example allocate machine registers entries simulated stacks particularly stack entries result usual arithmetic operations 
code vax assembler code hp simulated stack start configuration int push pointer integer constant fun int push pointer function node int fun int push pointer integer constant movl apply hp tag apply node heap movl hp fun 
part fun heap movl hp heap int arg 
part int heap 
cons movl cons hp tag cons node heap movl hp head part int heap hp hp heap tail part result heap hp ep move result real stack 
target code generation graph construction code 
target code assembled usual manner loaded runtime system executable file 
runtime system contains code print eval unwind garbage collector target code primitive predefined functions add sub performance compared implementation couple implementations functional languages available strict lazy evaluation 
implementations table 
implementation lazy evaluation executes vax code 

cardelli ml system car strict evaluation executes vax code 

lisp compiler unix strict evaluation executes vax code 

ml implementation lcf system strict evaluation interprets lisp 

secd machine tur lazy evaluation interpretative 

compiler unix applies fibonacci program 
table shows execution time seconds programs fib fib fib gamma fib gamma primes sieve insertion sort random elements 



fibonacci primes insert sort programs chosen results independent lazy strict evaluation general lazy evaluation permits direct programming style 
noted fibonacci program recursive call fib arguments passed value due analysis evaluated variables described section 
related jones muchnick jm gives alternative evaluation mechanism combinator expressions compilation algorithm translates combinators fixed program code stack machine 
hudak combinator compiler hk resembles respects 
uses standard combinators convenient intermediate language performing program transformations optimisations 
program converted containing macro combinators similar hughes super combinators hug global function definitions 
macro combinator translated code conventional machine 
dick kieburtz oregon graduate center currently process designing implementing vlsi chip machine 
supported swedish board technical development stu 
compiler implemented lennart augustsson ideas grown close cooperation 
wish alan mycroft helpful comments earlier drafts members programming methodology group numerous nice cake parties 
aug augustsson 
fc 
technical report memo programming methodology group chalmers university technology goteborg sweden 
bac backus 
programming liberated von neumann style 
functional style algebra programs 
communications acm august 
car cardelli 
ml unix 
polymorphism ml lcf hope newsletter january 
fri friedman 
cons evaluate arguments pages 
edinburgh university press 
book automata languages programming 
fy fenichel 
lisp garbage collector virtual memory computer systems 
communications acm november 
gmw gordon milner wadsworth 
edinburgh lcf 
volume lecture notes computer science springer verlag 
hk hudak kranz 
combinator compiler functional language 
proceedings th acm symposium principles programming languages pages 
hug hughes 
super combinators new implementation method applicative languages 
proceedings acm symposium lisp functional programming pages pittsburgh 
jm jones muchnick 
fixed program machine combinator expression evaluation 
proceedings acm symposium lisp functional programming pages pittsburgh 
joh johnsson 
code generation lazy evaluation 
technical report memo programming methodology group chalmers university technology goteborg sweden 
lan landin 
mechanical evaluation expressions 
computer journal 
lan landin 
programming languages 
communications acm 
mil robin milner 
theory type polymorphism programming 
journal computer systems sciences 
myc mycroft 
theory practice transforming call need call byvalue 
proceedings th international symposium programming lecture notes computer science pages springer verlag paris april 
tur turner 
implementation 
technical report university st andrews 
tur turner 
new implementation technique applicative languages 
software practice experience 

