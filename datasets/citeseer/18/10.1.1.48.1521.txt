autopilot adaptive control distributed applications randy jeffrey vetter daniel reed jsv cs uiuc edu department computer science university illinois urbana illinois increasing development applications heterogeneous distributed computing grids focus performance analysis shifted posteriori optimization homogeneous parallel systems application tuning heterogeneous resources time varying availability 
shift profound implications performance instrumentation analysis techniques 
autopilot new infrastructure dynamic performance tuning heterogeneous computational grids closed loop control 
describes autopilot model distributed sensors actuators decision procedures reports preliminary performance benchmarks presents case study autopilot library utilized development adaptive parallel input output system 

programming models parallel computer systems continue evolve rapidly performance analysis remains grounded process developed years ago ffl application instrumentation 
application code may instrumented automatically object code patching compilers manually inserting calls instrumentation library rou supported part defense advanced research projects agency darpa contracts dabt sio initiative dabt national science foundation nsf cda asc department energy contracts doe eng 

subsequent execution instrumentation library records pertinent performance data including procedure loop basic block execution counts times 
ffl performance data extraction 
instrumentation performance data captured program executions 
ideally executions involve input data computing resources typical encountered production environment 
ffl analysis visualization 
post processing performance data visualized analyzed identify application program performance bottlenecks text profiling tools visualization systems ips aims pablo 
ffl application optimization 
measurement analysis program modified alleviate perceived bottlenecks runtime system policies adjusted better match program resource requests 
effective application codes repeatable behavior posteriori tuning model complex multidisciplinary applications time varying resource demands execute heterogeneous collections geographically distributed computing resources 
may execution context repeatable program executions resource availability may change execution 
consequently believe performance tuning systems evolve reflect changing requirements applying real time adaptive control techniques dynamically adapt changing application resource demands system resource availability 
real time performance data adaptive systems steered interactively intelligent decision support system 
model goal performance analyst formulate general purpose performance optimization rules applied adaptive infrastructure 
hypothesis remainder organized follows 
briefly describe related adaptive control followed description autopilot toolkit closed loop adaptive performance tuning resource management 
report results initial performance experiments autopilot followed summary experiences ppfs ii major application autopilot 
briefly describes research plans 

related software mediated dynamic adaptation applied domains including real time faulttolerant systems dynamic load balancing line configuration management adaptive input output systems 
autopilot toolkit differs emphasizing portable performance steering closed loop adaptive control decoupling steering infrastructure policy domain 
likewise interactive application steering long rich history particularly context scientific immersive visualization 
separating performance measurement control decision making autopilot enables system designers replace software decision procedures real time visualization interactive steering rate change admits human control 
plethora techniques distributed decision making proposed ranging decision tables trees standard control theory fuzzy logic 
strengths fuzzy logic targets precisely attributes performance optimization problem challenge classic techniques conflicting goals poorly understood optimization spaces 
autopilot builds observation coupling configurable fuzzy logic rule base distributed decision making wide area performance sensors policy control actuators 

autopilot software components adaptive control system implicitly explicitly monitor pertinent system state determine changes needed realize changes meet desired goals 
dynamically optimize application runtime system behavior distributed computational grids closed loop adaptive performance system include variant ffl distributed performance sensors capture quantitative application system performance data generate qualitative descriptions resource demands quantitative performance metrics 
ffl software actuators enable configure application behavior resource management policies 
ffl decision procedures local parallel task global parallel program selecting resource management policies enabling actuators observed application resource requests system responses captured performance sensors 
ffl distributed name servers support registration remote sensors actuators property requests sensors actuators remote clients 
ffl sensor actuator clients interact remote sensors actuators monitoring sensor data issuing commands actuators 
ffl robust decision mechanisms exploit data distributed sensors balance conflicting optimization goals 
describe autopilot components design rationale greater detail 
nexus toolkit successful nexus communication substrate autopilot toolkit embodies sensors actuators decision procedures servers clients policy platform independent infrastructure 
nexus creates global address space encompasses processes executing network 
nexus term endpoint refers address global address space term identifies pointer endpoint 
addition global address nexus endpoints specify set message handlers invoked messages sent endpoint 
client communicate sensor actuator obtain sensor actuator 
similarly sensors actuators obtain clients 
autopilot manager described daemon process acts name server providing remote clients ability obtain sensors actuators 
sections describe autopilot components design rationale greater detail 

sensors sensors extract qualitative quantitative performance data executing applications providing requisite data informed decision making 
measurement perturbs system study sensor implementation minimize overhead data capture extraction 
distributed collection sequential parallel systems forming computational grid subset sensor data extracted transmitted remote sites global decision making 
avoid oscillating decisions due stale sensor data lag data collection processing small 
sensor design principles ideal sensor lightweight minimally perturbing remotely accessible applicable multiple architectures programming models 
approaching ideal possible sensor implementation tailored execution environment trading computation communication available resources acceptable perturbation 
example sensors capture transmit raw data stream file request sizes compute periodically transmit derived metrics sliding window average request sizes 
sensor data sink located metric computation extraordinarily expensive critical path calculation calculating metric values sensors usually invasive 
appropriate choices depend execution context application perturbation constraints metric complexity sensor implementation include configuration options adjusting balance 
raw sensor data stream monitored transmission overhead reduced data buffering albeit expense increased lag 
sensors provide controls adjusting buffer sizes transmission frequencies 
distributed resource availability application demands change requisite performance data change necessitating deactivation current sensors activation new ones 
dynamically change mix performance data detailed knowledge physical location software components remote clients able locate sensors descriptions properties tcp sensors sensor infrastructure support sensor registration dynamic activation 
autopilot sensor features design principles just outlined autopilot implements suite configurable sensors dynamically activated managed deactivated 
property lists 
sensor set associated properties defined time sensor created 
typically include sensor name type identifier network ip address user defined attribute value pairs 
remote clients specify property lists queries autopilot manager 
manager provides client start points remote sensors currently satisfy query 
additionally clients request notification time sensor specified set properties created 
capabilities allow clients acquire manage remote sensors embedded knowledge physical location creation times 
activation modes 
sensor creation associates set application runtime system variables sensor monitoring software 
activation remote client sensor periodically records values variables optionally applies set realtime reductions values transmission remote sites 
sensors collect data threaded modes 
threaded mode monitoring thread records values associated variables intervals specified sensor creation remote client 
monitoring mode relies insertion sensor monitoring calls source object application library code 
data reduction 
local data reduction sensors apply data transformation functions captured data prior recording 
attached functions accept raw sensor data input record function output transmission 
attached functions compute simple statistics sliding window averages complex transformations 
example set attached functions generates qualitative file access pattern descriptions input output request measures converting sequence file offsets sequential strided random access descriptions 
define properties sensor name application ppfs ii construct 
register sensor autopilot manager 
sensor registration code 
sensor creation example illustrate properties autopilot sensors shows creation sensor named syntax 
sensor monitor application level variable 
constructor specifies program name name host executing autopilot manager 
method assigns properties sensor keyvalue pairs 
sensor monitoring integer sensor variant 
autopilot supports scalar array sensors basic data types multisensor monitor aggregates variables different data types 
parameters specify sensor name sensor properties memory location monitored number integers comprise monitored location size buffer hold sampled values prior transmission clients 
case samples scalar integer may buffered 
method completes sensor production process transmission sensor property list autopilot manager 
sensor destructor inform autopilot manager sensor demise 

software actuators autopilot actuators allow clients modify values application variables remotely invoke application level functions 
typically actuators modify parameter values change resource management policies changing file caching policies 
simplify management code development autopilot actuators share features sensors including property lists attached functions dynamic insertion control 
actuators identified set properties managed autopilot managers inserted deleted dynamically 
actuator creation follows basic model sensor creation demonstrated 
actuator attached functions mediate remote command manipulations context local data bounding remote request increase cache size local memory availability 

distributed name servers clear autopilot manager coordinates connections sensors actuators remote clients 
managers function sensor actuator name servers clients acquire remote sensors actuators knowledge physical logical location 
generality allows client objects dynamically attach geographically distributed software components exercise control relinquish attachment 
sensors actuators register properties nexus autopilot manager immediately creation inform manager destroyed 
clients specify set desired properties manager provides sensors actuators match request 
allows client establish direct communication application instrumentation 

remote clients remote clients exploit sensors actuators realize distributed control 
described previously clients connect remote sensors actuators obtained autopilot manager 
connection sensors send data connected remote clients data receipt activates client specified callback process data 
clients change sensor behavior modifying attributes activation buffer size sampling rate 

flexible decision mechanisms sensors provide requisite data decision making actuators implement decisions distributed decision making final component closed loop adaptive control 
implement decision procedures algorithmic decision table techniques experience parallel resource management policies suggests flexible mechanisms needed accommodate complex poorly understood policy spaces 
simply put constructing decision tables presumes deep understanding resource optimization space relation system controls locations space 
contrast classic decision procedure techniques emphasis consistent parameter space division fuzzy logic allows elegantly balance potentially conflicting goals minimize response time maximize throughput 
changing fuzzy logic rule base adjust control system retarget new domain extensive software development 
autopilot includes fuzzy logic engine accepts sensor inputs values rule application computes relative truth rule rule consequents activate remote actuators 

autopilot performance performance adaptive steering system autopilot depends interplay great variables configuration options including sensor buffer sizes threaded non threaded sensor modes sensor fan number clients sensor dynamic data reduction attached functions fuzzy logic rule base complexity proximity sensors actuators clients available network bandwidth data throttling sensor enablement actuator synchronization 
briefly discuss implications important issues 
report results initial performance study illustrate autopilot adaptive parallel file system 

data buffering data reduction described autopilot sensor records data buffered raw data processed attached function 
case choice buffer size determines transmission frequency overhead buffering latency experienced data transmission 
small buffers reduce latency transmission albeit increasing transmission frequency overhead 
absence constraints acceptable data buffering latency transmission costs communication substrate determine lower bounds efficient buffer sizes 
sizes point communication latency dominate total transmission overhead 
attached functions reduce data transmission costs aggregating sequence raw sensor values computing means minima maxima 
fixed buffer size aggregation increases buffering latency prior transmission 
reason autopilot attached functions force immediate data transmission necessary bound buffering latency 

performance evaluation just described optimal choice performance buffer size depends parameters communication substrate acceptable buffering latency prior transmission 
identify effective operating points conducted series experiments contexts geographic area local area interprocessor control 
cases measured round trip delay send data sensor remote client back sensor process 
experimental testbed basis performance analysis conducted experiments sun ultra model mhz ultrasparc processor mb memory sgi origin mhz processors gb memory 
communication overhead experiments showed local cost sensor monitoring single variable sun ultra modest microseconds 
autopilot sensor overhead comparable state art measurement systems paradyn making possible conduct fine grained measurements 
shows round trip delay data buffering transmission geographic local area intra system contexts function sensor buffer size 
cases underlying nexus communication tcp case mpi final case shared memory 
expected small buffer sizes communication overhead dominated communication latency ranging roughly millisecond processes single system milliseconds wide area 
transmissions little advantage buffer sizes smaller kb data size bytes round trip latency data size sun wan tcp sun local machine tcp sgi mpi sun fast ethernet tcp sgi local machine tcp sgi shared memory 
round trip communication latency sensor data buffering delays mandate frequent transmission 
interestingly communication latency single sun ultra longer latency systems connected fast ethernet 
table suggests primary cause disparity context switch overhead system traps page faults 
measure local fast ethernet minor page faults system traps context switches table 
relative system overhead nexus supports variety wide area communication protocols native atm udp tcp ability choose specialized low latency protocols specific contexts shared memory mpi dynamically configure autopilot communication minimize communication costs 
decision procedure overhead assess overhead fuzzy logic control measured time needed evaluate rule base function number rules resolution fuzzy sets 
specifies number sample points interpolate individual fuzzy autopilot performance studies led efficient nexus implementations 
number rules point resolution number rules point resolution point resolution 
fuzzy rule evaluation overhead sets determines precision fuzzy logic operations defuzzification process 
shows fuzzy logic evaluation cost rule base rules inputs outputs evaluated sun sparc ultra 
determine performance scaling function number rules replicated entire rule base times 
clearly shows rule evaluation overhead linear number rules fuzzy set resolution 
believe application resource policy steering decisions realized time scale measured seconds minutes 
results preliminary experiments autopilot prototype fuzzy logic provide effective infrastructure closed loop adaptive control 

ppfs ii autopilot testbed characterization studies parallel input output patterns shown parallel applications exhibit wide variety input output request patterns small large request sizes sequential non sequential access variety temporal variations 
interactions applications file system software change application executions difficult impossible determine globally optimal input output configuration statically configure runtime systems resource management policies parallel input output 
small input output requests best managed aggregation prefetching caching write rule base defines set adaptive file caching policies ppfs ii parallel file system prototype described 
timestamp seconds sequential writes random reads timestamp seconds sequential writes random reads non adaptive autopilot adaptive 
ppfs ii input output benchmark large requests better served streaming data directly storage devices application buffers 
complementary performance measurements experimental parallel file systems confirmed exploiting runtime knowledge input output access patterns real time performance data control data placement caching prefetching dramatically increase achievable input output performance 
experiences designing implementing second generation parallel file system called ppfs ii supports real time adaptive control file system policies policy parameters 
ppfs ii designed operate atop parallel systems pc workstation clusters provides flexible testbed high performance input output experiments 
includes automatic behavioral classification techniques identify group application resource request patterns flexible set fuzzy logic rule bases intelligently select file system policies input output resource demands supplies 
example potential power adaptive parallel file system autopilot infrastructure consider caching policies parallel input output systems 
policies ensure data reused near retained cache caching disabled degrade input output performance 
policy selection method implemented ppfs ii fuzzy logic rule base contains rules similar 
rule base obtains inputs autopilot sensors policy parameters changed actuators 
way caching system adapt changes access pattern 
shows effect adaptive caching policies performance 
experiments shown mb file written sequentially kb units 
mb section file read randomly times kb access sizes 
experiment ppfs ii uses default caching parameters kb cache blocks mb client cache 
second experiment fuzzy logic decision procedure continuously monitors file system autopilot sensors obtains access pattern information neural network classification 
sequential pattern ppfs ii chooses small cache mru replacement policy write sequential accesses 
access pattern transitions small random reads decision procedure chooses larger mb cache kb blocks 
comparison figures reveals advantages choosing cache parameters dynamically 
dynamic adaptation decreases benchmark execution time seconds seconds decreases mean response time request 

status initial autopilot prototype operational remains 
developing extensive suite sensors sensor attached functions experiments conducted ultrasparc solaris western digital gb scsi hard disk 
readonly sequentiality nonsequential large disabled readonly sequentiality nonsequential tiny enabled huge blocksize large 
sequentiality sequential enabled small blocksize large 
adaptive rule base real time data reduction coupling autopilot immersive virtual environment interactive steering pablo self describing data format conducting extensive set performance studies instrumented applications libraries 
ambitious application autopilot implementation ppfs ii adaptive parallel file system experiments interactive steering distributed software immersive virtual environments 

acknowledgments ruth christopher tara eric shaffer contributed important ideas autopilot design 
grateful ian foster carl kesselman steve tuecke guidance nexus 
crandall chien reed 
characterization suite input output intensive applications 
proceedings supercomputing dec 
foster kesselman 
computational grids high performance distributed computing 
morgan kaufmann 
foster kesselman tuecke 
nexus approach integrating multithreading communication 
journal parallel distributed computing 
gu vetter schwan 
annotated bibliography interactive program steering 
sigplan notices 
huber reed chien blumenthal 
ppfs high performance portable parallel file system 
proceedings th acm international conference supercomputing pages july 
reed 
exploiting global input output access pattern classification 
proceedings supercomputing nov 
miller callaghan hollingsworth irwin 
paradyn parallel performance measurement tools 
ieee computer nov 
miller clark hollingsworth 
lim 
ips second generation parallel program measurement system 
ieee computers apr 
reed 
experimental performance analysis parallel systems techniques open problems 
proceedings th international conference modelling techniques tools computer performance evaluation pages may 
reed smirni 
performance analysis performance data immersion 
proceedings mascots pages feb 
reed smirni 
frontier interactive closed loop performance steering 
proceedings international conference parallel processing workshop pages august 
reed 
comparison logical physical parallel oa patterns 
international journal supercomputer applications appear 
smirni reed 
performance modeling parallel system application driven approach 
proceedings eighth siam conference parallel processing scientific computing mar 
vetter schwan 
high performance computational steering physical simulations 
proc 
int parallel processing symp pages geneva 
yan 
performance tuning aims automated instrumentation monitoring system multicomputers 
proceeedings th hawaii international conference system sciences pages jan 
zadeh 
fuzzy sets 
information control june 
