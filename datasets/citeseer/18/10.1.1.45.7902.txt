parallel program development environment jes girona vincent toni cortes jose maria upc report 
rr february supported ministry education spain cicyt contract tic 
parallel program development environment jesus girona vincent toni cortes jose maria departament de universitat polit de catalunya jesus ac upc es february describes programming environment aimed developing tuning message passing applications running real system large number processors 
basic tools environment simulator visualization analysis tool closely integrated 
developing tuning message passing programs expensive programmer time hardware resources 
regarding development time lot controversy shared memory distributed memory programming model better 
shared memory frequently easier clear commonalities shared distributed memory approaches performance highly parallel machines desired 
issues data distribution minimization communication considered 
interestingly fact message passing programming model widely shared memory machines 
result lot current effort funding devoted develop message passing applications 
tools ease reduce cost required 
regarding hardware support parallel program development access large platforms easy cost inefficient utilization 
networks workstations frequently development platform availability low cost 
pose problems granularity problem small large numbers processors required 
developing workstations convenient adequate predictions performance achievable parallel computer processors faster communication 
minimize time required tune program target machine 
presents environment aimed reducing cost parallel program development time hardware requirements 
achieved set tools enable sequential machine development tuning parallel applications 
way finite element packages minimize need prototyping experiments objective eliminate tests real machines minimizing able focus selective way 
environment originated wish study problems possibilities short medium term scheduling policies distributed memory message passing computers networks running multiprogrammed loads parallel programs gir 
environment single application development tuning side effect uses subset functionalities available tools 
aspects visualization program behavior related existing tools paragraph environment aims extending possibilities analysis prediction frequently encountered 
focus quantitative analysis main motivation approach 
environment development environment currently fixed tools 
ffl instrumented communication libraries 
ffl distributed memory machine simulator 
ffl analysis visualization tool 
basic structure development environment described 
principle corresponds typical known kra process line debug visualize parallel program approach currently widely tools paragraph pablo 
pvm data collection sequential machine parallel machine execution mp library code trace file display window visualization analysis file simulation simulated environment structure basic difference typical approach 
case different types traces describes local behavior task parallel application contains absolute times events visualization 
typical approach instrumented library directly generates visualization trace system trace file generated simulator models architecture scheduling policies features interest parallel system 
enables important loops development system 
possible analysis tool generate modified application traces fed simulator 
second lot flexibility typical loop goes modification source code 
example section demonstrate possibilities direction 
level process model application task thread superset frequently encountered programming models 
example pvm mpi support multithreading possible run applications network workstations 
transputers support multithreading frequent applications concurrently 
models mapped supported environment 
instrumented communication library library versions generate local task process parallel application 
current status records sequence cpu burst communication requests task 
absolute times relation tasks put trace relationships rebuilt simulator 
communication libraries currently instrumented pvm gdb bert proprietary library 
advantage registering cpu bursts absolute time avoidance probe effects related writing 
important issue instrumentation precision accuracy measurement duration cpu bursts offered operating system mechanisms 
microsecond precision desirable appropriate characterization message passing programs frequent bursts consecutive communications minimal computation 
proper accuracy time measurements required order achieve reconstruction behavior parallel program 
currently machine available purpose accurate time measurement mechanism convex 
machines accurate clocks usability tool may restricted applications sufficiently coarse granularity case current platforms 
approach running instrumented code single processor machine normal multiuser operation convenient possible problem related cache pollution context switches 
quantitative effect final results simulator estimated accurate predictions desired 
instrumented program run parallel machine problem measuring process appear results accurate 
functions implemented addition standard interface communication library order control tracing process 
includes switching possibility inserting user defined events mechanisms specify operations independent executed different threads 
traces generated typical simple preprocessing done feeding simulator 
case basically implies merging sorting different trace files single 
simulator traces tasks rebuilds behavior parallel program certain architectural scheduling model 
current architectural model simple flexible 
features selected configuration file included 
simulator rebuilds parallel program behavior level accuracy considered relevant possibility controlling different factors influence performance parallel application 
basic features current version ffl communication synchronization semantics blocking non blocking semantics modelled 
frequently rendez vous blocking receive non blocking send communications included 
ffl processor speed parameter modified study influence application performance 
different processors simulated way estimate relative speeds 
ffl communication times simple linear model latency bandwidth communication time function message size 
accordance state art networks influence distance processors considered irrelevant 
interference network currently considered features added detailed analysis effect factor required 
ffl links actual number ports network processor varied 
value limits maximum number concurrent communications processor 
parameter varies different machines transputers cs 
influence performance interested analysing 
ffl application mapping configuration file specifies mapping tasks applications physical processors 
ffl scheduling policy case task different application mapped processor configuration parameter specifies short term scheduling policy priorities round robin fifo 
structure simulator modular new functionalities levels detail added 
example currently adding file system module order study caching policies parallel environment interaction scheduling policies 
graphical displaying tool environment 
works window terminal motif library 
basic view display window supported gantt diagram object activity time plus communication events lines user supplied events 
information contained simulation trace view single type object example application tasks application threads task processors displaying activity processor irrelevant actual task thread may active 
simple view control mechanism filter enables control colour level coding display object state communications events shown 
example level display applications shows evolution parallelism profile time 
standard features visualization tools included ease handling view 
examples ability move forward backward simulation trace zooming create new views possibility measure times points different windows leading precise measurements long periods 
apart basic view analysis functionalities provided timing event counts critical path computation display user implement analysis modules receive input subset simulated trace selected mouse views 
user modules compute statistics returned display 
possible analysis modules generate new fed simulator 
execution processors task processor example example environment 
application iterative solver cfd code developed esprit project 
solver domain decomposition block data distribution iterative method ilu preconditioning 
preconditioning implies solution triangular system iteration block distribution matrix leads important load unbalanced 
shown simulated trace view 
communication simulation considered instantaneous interested quantitative estimate load unbalanced 
analysis module tells utilization different cpus 
study influence start communication times application execution time 
table shows results obtained 
importance load balance problem fact ilu preconditioner usually parallel solver type unbalanced long dependence chains introduces rarely compensated improvement convergence achieves interesting study predict improve efficiency domains allocated processor 
environment rapidly done modifying rerunning code running simulation tasks mapped processor round robin applied processor 
window infinite micros 
micros 
ms ms table seconds iteration different start bandwidth combinations processors shows resulting processor utilization window tasks shows tasks active moments tasks ready time time share processor task 
scheduling policies mappings studied 
execution processors describe example demonstrate tool useful reduce code development time 
idea estimate improvements certain code restructuring report spending effort 
practical case somewhat different solver application 
analysing behavior apparent static communication scheduling forced communication library bert causing performance problems 
points processor waited message messages arrived 
form algorithm know operations different messages commutative question performance improvement implement receive communication library modify solver accordingly 
doing just instrumented static scheduling code computation associated received message tagged different thread 
requires minimal effort result simulator able modification included functionality dynamically schedule threads 
result expected improvement performance statically scheduled communication system 
performance prediction weighted estimated development cost decision taken 
performance prediction useful code development tuning 
environment developed european center parallelism barcelona reduce costs parallel program development tuning 
environment trace driven simulator visualization analysis tool aims predicting performance message passing application machines readily available doing development workstation 
shown examples functionalities provided environment industrial project 
ongoing extending functionalities tool specially areas related automatically detecting bottlenecks application providing hints programmer concentrate effort 
design tools modular objective enabling support study factors parallel program performance locality cache utilization file systems 
environment industrial projects great success 
bert bertin january gdb geist adam beguelin jack dongarra jiang pvm user guide manual oak ridge national laboratory technical report ornl tm may kra kraemer stasko 
visualization parallel systems overview 
journal parallel distributed computing vol 
pp 

gir girona cortes perez lopez 
deliverable ops project basic research effect short term scheduling message passing multiprogrammed systems 
august 
