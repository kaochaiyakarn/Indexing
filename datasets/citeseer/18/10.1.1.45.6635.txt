network working group jacobson request comments lbl rfc rfc braden isi borman cray research may tcp extensions high performance status memo rfc specifies iab standards track protocol internet community requests discussion suggestions improvements 
please refer current edition iab official protocol standards standardization state status protocol 
distribution memo unlimited 
memo presents set tcp extensions improve performance large bandwidth delay product paths provide reliable operation high speed paths 
defines new tcp options scaled windows timestamps designed provide compatible interworking tcp implement extensions 
timestamps distinct mechanisms round trip time measurement paws protect wrapped sequences 
selective acknowledgments included memo 
memo combines supersedes rfc rfc adding additional clarification detailed specification 
appendix summarizes changes earlier rfcs 
table contents 


tcp window scale option 

round trip time measurement 

paws protect wrapped sequence numbers 

acknowledgments 


appendix implementation suggestions 
appendix duplicates earlier connection incarnations 
appendix changes rfc rfc 
appendix summary notation 
appendix event processing 
security considerations 
jacobson braden borman page rfc tcp extensions high performance may authors addresses 

tcp protocol postel designed operate reliably transmission medium regardless transmission rate delay corruption duplication reordering segments 
production tcp implementations currently adapt transfer rates range bps bps round trip delays range ms seconds 
tcp performance shown tcp variety internet paths ranging mbit sec channels bit sec dial modems jacobson 
fiber optics resulting higher transmission speeds fastest paths moving domain tcp originally engineered 
memo defines set modest extensions tcp extend domain application match increasing network capability 
rfc jacobson rfc jacobson 
line answer question fast tcp go 
separate kinds issues performance reliability depends different parameters 
discuss turn 
tcp performance tcp performance depends transfer rate product transfer rate round trip delay 
bandwidth delay product measures amount data fill pipe buffer space required sender receiver obtain maximum throughput tcp connection path amount unacknowledged data tcp handle order keep pipeline full 
tcp performance problems arise bandwidth delay product large 
refer internet path operating region long fat pipe network containing path lfn pronounced 
high capacity packet satellite channels darpa wideband net lfn 
example ds speed satellite channel bandwidth delay product bits corresponds outstanding tcp segments bytes 
terrestrial fiber optical paths fall lfn class example cross country delay ms ds bandwidth mbps exceeds bits 
fundamental performance problems current tcp lfn paths jacobson braden borman page rfc tcp extensions high performance may window size limit tcp header uses bit field report receive window size sender 
largest window bytes 
circumvent problem section memo defines new tcp option window scale allow windows larger 
option defines implicit scale factor multiply window size value tcp header obtain true window size 
recovery losses packet losses lfn catastrophic effect throughput 
properly operating tcp implementations cause data pipeline drain packet loss require slow start action recover 
fast retransmit fast recovery algorithms jacobson introduced 
combined effect recover packet loss window draining pipeline 
packet loss window typically results retransmission timeout resulting pipeline drain slow start 
expanding window size match capacity lfn results corresponding increase probability packet window dropped 
devastating effect throughput tcp lfn 
addition congestion control mechanism form random dropping introduced gateways randomly spaced packet drops common possible increasing probability dropping packet window 
generalize fast retransmit fast recovery mechanism handle multiple packets dropped window selective acknowledgments required 
normal cumulative acknowledgments tcp selective acknowledgments give sender complete picture segments queued receiver arrived 
evidence favor selective acknowledgments published nbs selective acknowledgments included number experimental internet protocols vmtp cheriton netblt clark rdp proposed osi tp nbs 
non lfn regime selective acknowledgments reduce number jacobson braden borman page rfc tcp extensions high performance may packets retransmitted improve performance making complexity questionable value 
selective acknowledgments expected important lfn regime 
rfc defined new tcp sack option send selective acknowledgment 
important technical issues worked concerning format semantics sack option 
sack omitted package extensions 
hoped sack catch standardization process 
round trip measurement tcp implements reliable data delivery retransmitting segments acknowledged retransmission timeout rto interval 
accurate dynamic determination appropriate rto essential tcp performance 
rto determined estimating mean variance measured round trip time rtt time interval sending segment receiving acknowledgment jacobson 
section introduces new tcp option timestamps defines mechanism option allows nearly segment including retransmissions timed negligible computational cost 
mnemonic round trip time measurement mechanism distinguish uses timestamps option 
tcp reliability turn performance reliability 
high transfer rate enters tcp performance bandwidth delay product 
high transfer rate threaten tcp reliability violating assumptions tcp mechanism duplicate detection sequencing 
especially serious kind error may result accidental reuse tcp sequence numbers data segments 
suppose old duplicate segment duplicate data segment delayed internet queues delivered receiver wrong moment sequence numbers falls current window 
checksum failure warn error result undetected corruption data 
reception old duplicate ack segment transmitter slightly serious jacobson braden borman page rfc tcp extensions high performance may lock connection progress forcing rst connection 
tcp reliability depends existence bound lifetime segment maximum segment lifetime msl 
msl generally required reliable transport protocol sequence number field finite sequence number may eventually reused 
internet protocol suite msl bound enforced ip layer mechanism time live ttl field 
duplication sequence numbers happen ways sequence number wrap current connection tcp sequence number contains bits 
high transfer rate bit sequence space may wrapped cycled time segment delayed queues 
earlier incarnation connection suppose connection terminates proper close sequence due host crash connection pair sockets immediately 
delayed segment terminated connection fall current window new incarnation accepted valid 
duplicates earlier incarnations case avoided enforcing current fixed msl tcp spec explained section appendix case avoiding reuse sequence numbers connection requires msl bound depends transfer rate high rates new mechanism required 
specifically maximum effective bandwidth tcp able transmit particular path bytes second constraint satisfied error free operation msl secs table shows value seconds important values bandwidth jacobson braden borman page rfc tcp extensions high performance may network bits sec bytes sec secs arpanet kbps kbps days ds mbps kbps hours ethernet mbps mbps mins ds mbps mbps fddi mbps mbps gigabit gbps mbps clear wrap sequence space problem kbps packet switching mbps ethernets 
hand ds fddi speeds comparable minute msl assumed tcp specification postel 
moving gigabit speeds small reliable enforcement internet ttl mechanism 
bit window field tcp limits effective bandwidth rtt rtt round trip time seconds mckenzie 
rtt large limits value meets constraint large msl value 
example consider backbone rtt ms set laws physics 
bandwidth delay product limited kb tcp window size limited mbps matter high theoretical transfer rate path 
corresponds cycling sequence number space secs safe today internet 
important understand culprit larger window high bandwidth 
example consider large fddi lan diameter km 
speed light compute rtt ring microseconds delay bandwidth product bytes 
tcp connection lan window bytes run full mbps wrap sequence space minutes close msl tcp 
high speed cause reliability problem sequence number wrap extended windows 
watson delta protocol watson includes network layer mechanisms precise enforcement msl 
contrast ip jacobson braden borman page rfc tcp extensions high performance may mechanism msl enforcement loosely defined loosely implemented internet 
unwise depend active enforcement msl tcp connections unrealistic imagine setting msl smaller current values seconds specified tcp 
possible fix problem cycling sequence space increase size tcp sequence number field 
example sequence number field acknowledgment field expanded bits 
done changing tcp header means additional option 
section presents different mechanism call paws protect wrapped sequence numbers extend tcp reliability transfer rates foreseeable upper limit network bandwidths 
paws uses tcp timestamps option defined section protect old duplicates connection 
tcp options extensions defined memo new tcp options 
address possible issues concerning tcp options compatibility overhead 
pay careful attention compatibility interoperation existing implementations 
tcp option defined previously mss may appear syn segment 
implementation expect ignore unknown options syn segments 
buggy tcp implementation crashed appearance option non syn segment 
extensions defined tcp options sent non syn segments exchange options syn segments indicated sides understand extension 
furthermore extension option sent segment corresponding option received initial segment 
question may raised bandwidth processing overhead tcp options 
options occur syn segments cause performance concern 
opening tcp connection requires execution significant special case code processing options increase cost significantly 
hand timestamps option may appear data ack segment adding bytes byte tcp header 
jacobson braden borman page rfc tcp extensions high performance may believe bandwidth saved reducing unnecessary retransmissions pay extra header bandwidth 
issue processing overhead parsing variable byte aligned format options particularly risc architecture cpu 
meet concern appendix contains recommended layout options tcp headers achieve reasonable data field alignment 
spirit header prediction tcp quickly test layout verified fast path 
hosts canonical layout effectively options set fixed format fields appended tcp header 
retain philosophical protocol framework tcp options tcp prepared parse arbitrary options field albeit efficiency 
observe mechanisms defined memo important lfn high speed networks 
low speed networks performance optimization mechanisms 
tcp vendor concerned optimal performance low speed paths consider turning extensions low speed paths allow user installation manager disable 

tcp window scale option window scale extension expands definition tcp window bits uses scale factor carry bit value bit window field tcp header seg wnd rfc 
scale factor carried new tcp option window scale 
option sent syn segment segment syn bit window scale fixed direction connection opened 
design choice specify window scale tcp segment 
incorrect send window scale option scale factor changed tcp option segment delivered reliably ack happens piggy backed data direction 
fixing scale connection opened advantage lower overhead disadvantage scale factor changed connection 
maximum receive window scale factor determined maximum receive buffer space 
typical modern implementation maximum buffer space set default jacobson braden borman page rfc tcp extensions high performance may overridden user program tcp connection opened 
determines scale factor new user interface needed window scaling 
window scale option byte window scale option may sent syn segment tcp 
purposes indicate tcp prepared send receive window scaling communicate scale factor applied receive window 
tcp prepared scale windows send option scale factor 
scale factor limited power encoded logarithmically may implemented binary shift operations 
tcp window scale option kind length bytes kind length shift cnt option offer promise sides send window scale options syn segments enable window scaling direction 
window scaling enabled tcp sent option right shift true receive window values shift cnt bits transmission seg wnd 
value shift cnt may zero offering scale applying scale factor receive window 
option may sent initial segment segment syn bit ack bit 
may sent segment window scale op tion received initial segment 
window scale option segment syn bit ignored 
window field syn segment scaled 
window scale option model implementation window scaling follows notation rfc postel windows treated bit quantities storage jacobson braden borman page rfc tcp extensions high performance may connection control block local calculations 
includes send window snd wnd rcv wnd values congestion window 
connection state augmented window shift counts snd wind scale rcv wind scale applied incoming outgoing window fields respectively 
tcp receives segment containing window scale option sends window scale option segment 
window scale option sent shift cnt value tcp receive window 
receiving syn segment window scale option containing shift cnt tcp sets snd wind scale sets rcv wind scale sets snd wind scale rcv wind scale zero 
window field seg wnd header incoming segment exception syn segments left shifted snd wind scale bits updating snd wnd snd wnd seg wnd assuming conditions rfc met notation window field seg wnd outgoing segment exception syn segments right shifted rcv wind scale bits seg wnd rcv wnd rcv wind scale 
tcp determines data segment old new testing sequence number bytes left edge window discarding data old 
insure new data mistakenly considered old vice versa left edge sender window away right edge receiver window 
similarly sender right edge receiver left edge 
right left edges sender receiver window differ window size sender receiver windows phase window size constraints imply max window size jacobson braden borman page rfc tcp extensions high performance may max window max window scaling shift count times maximum unscaled window maximum window guaranteed count limited allows windows gbyte 
window scale option received shift cnt value exceeding tcp log error specified value 
scale factor applies window field transmitted tcp header tcp extended windows maintain window values locally bit numbers 
example congestion window computed slow start congestion avoidance affected scale factor window scaling introduce quantization congestion window 

round trip time measurement accurate current rtt estimates necessary adapt changing traffic conditions avoid instability known congestion collapse nagle busy network 
accurate measurement rtt may difficult theory implementation 
tcp implementations base rtt measurements sample packet window 
yields adequate approximation rtt small windows results unacceptably poor rtt estimate lfn 
look rtt estimation signal processing problem data signal frequency packet rate sampled lower frequency window rate 
lower sampling frequency violates nyquist criteria may introduce aliasing artifacts estimated rtt hamming 
rtt estimator conservative retransmission timeout calculation tolerate aliasing sampling frequency close data frequency 
example window packets sample rate data frequency order magnitude different 
window tens hundreds packets rtt estimator may seriously error resulting spurious retransmissions 
dropped packets problem worse 
zhang jacobson braden borman page rfc tcp extensions high performance may zhang jain jain karn karn shown possible accumulate reliable rtt estimates retransmitted segments included estimate 
full window data transmitted prior retransmission segments window acked rtt sample taken 
means additional window worth time rtt measurements error rate approaches window data errors bit wideband satellite network effectively impossible obtain valid rtt measurement 
solution problems simplifies sender substantially follows tcp options sender places timestamp data segment receiver reflects timestamps back ack segments 
single subtract gives sender accurate rtt measurement ack segment correspond data segment sensible receiver 
call round trip time measurement mechanism 
vitally important mechanism big windows door opened dangerous instabilities due aliasing 
furthermore option probably useful tcp simplifies sender 
tcp timestamps option tcp symmetric protocol allowing data sent time direction timestamp echoing may occur direction 
simplicity symmetry specify timestamps sent echoed directions 
efficiency combine timestamp timestamp reply fields single tcp timestamps option 
jacobson braden borman page rfc tcp extensions high performance may tcp timestamps option kind length bytes kind ts value ts echo reply timestamps option carries byte timestamp fields 
timestamp value field contains current value timestamp clock tcp sending option 
timestamp echo reply field valid ack bit set tcp header valid timestamp value sent remote tcp field timestamps option 
valid value zero 
value generally timestamp option received exceptions explained 
tcp may send timestamps option initial segment segment containing syn bit ack bit may send segments received initial segment connection 
mechanism timestamp value sent obtained virtual clock call timestamp clock 
values approximately proportional real time order measure actual rtt 
example illustrates way data flow segments arriving sequence loss 
represent data blocks occupying successive blocks sequence numbers ack represent corresponding cumulative acknowledgments 
timestamp fields timestamps option shown symbolically field contains value received field 
jacobson braden borman page rfc tcp extensions high performance may tcp tcp 
dotted line marks pause time units long send 
note pause inflates rtt infer receiving data segment way data flows reverse direction measures value inflated gaps sending data 
rule prevents resulting inflation measured rtt value received segment update averaged rtt measurement segment acknowledges new data advances left edge send window 
tcp sending data data segment acknowledge new data arrives inflated measurement update measurement 
timestamp echo timestamps option received reply segment sent tcp choose echo ignoring 
minimize state kept receiver number unprocessed receiver required retain timestamp connection control block 
jacobson braden borman page rfc tcp extensions high performance may situations consider delayed acks 
tcp acknowledge kth segment group segments arriving short time interval policy known generally delayed acks 
data sender tcp measure effective rtt including additional time due delayed acks retransmit unnecessarily 
delayed acks receiver reply field earliest unacknowledged segment 
hole sequence space segment lost 
sender continue sending window filled receiver may generating acks order segments arrive aid fast retransmit 
lost segment probably sign congestion situation sender conservative retransmission 
furthermore better overestimate underestimate rtt 
ack order segment contain timestamp segment advanced window 
situation occurs segments re ordered network 
filled hole sequence space 
segment fills hole represents measurement network characteristics 
hand rtt computed earlier segment probably include sender retransmit time badly biasing sender average rtt estimate 
timestamp latest segment filled hole echoed 
algorithm covers cases described rules timestamps option processing synchronized connection connection state augmented bit slots ts holds timestamp echoed segment sent ack sent holds ack field segment sent 
ack sent equal rcv nxt acks delayed 
jacobson braden borman page rfc tcp extensions high performance may ack sent falls range sequence numbers incoming segment seg seq segment copied ts ignored 
sent field set current ts value 
examples illustrate rules 
represent data segments occupying successive blocks sequence numbers ack represent corresponding acknowledgment segments 
note ack sequence number show direction timestamp echoing clarity 
packets arrive sequence acks delayed 
case timestamp oldest unacknowledged segment echoed 
ts packets arrive order packet acknowledged 
case timestamp segment advanced left window edge echoed missing segment arrives echoed case 
sequence occur segments lost retransmitted 
jacobson braden borman page rfc tcp extensions high performance may ts 
paws protect wrapped sequence numbers section describes simple mechanism reject old duplicate segments corrupt open tcp connection call mechanism paws protect wrapped sequence numbers 
paws operates single tcp connection state saved connection control block 
section appendix discuss implications paws mechanism avoiding old duplicates previous incarnations connection 
paws mechanism paws uses tcp timestamps option mechanism described earlier assumes received tcp segment including data ack segments contains timestamp seg values monotone non decreasing time 
basic idea segment discarded old duplicate received timestamp seg timestamp received connection 
paws mechanism timestamps jacobson braden borman page rfc tcp extensions high performance may bit unsigned integers modular bit space 
defined way tcp sequence numbers implementation techniques apply 
timestamp values unsigned bit arithmetic 
choice incoming timestamps saved comparison guarantee value monotone increasing 
example save timestamp segment advanced left edge receive window segment 
choose value ts introduced section mechanism common value paws simplifies implementation 
section explained ts differs timestamp sequence segment case delayed acks window 
choice protect sequence number wrap 
specified symmetrical manner timestamps carried data ack segments echoed fields carried returning ack data segments 
paws submits incoming segments test protects duplicate ack segments data segments 
alternative un symmetric algorithm protect old duplicate acks sender data reject incoming ack segments values saved segment ack field advanced left edge send window 
algorithm deemed lack economy mechanism symmetry 
timestamps sent syn syn ack segments initialize paws 
paws protects old duplicate non syn segments duplicate syn segments received synchronized connection 
duplicate syn syn ack segments received connection discarded normal way handshake sequence number checks tcp 
recommended rst segments carry timestamps rst segments acceptable regardless timestamp 
old duplicate rst segments exceedingly cleanup function take precedence timestamps 
basic paws algorithm paws algorithm requires processing performed incoming segments synchronized connection jacobson braden borman page rfc tcp extensions high performance may timestamps option arriving segment seg discussion treat arriving segment acceptable send reply specified rfc page drop segment 
note necessary send ack segment order retain tcp mechanisms detecting recovering half open connections 
example see rfc 
segment outside window reject normal tcp processing arriving segment satisfies seg seq see section record timestamp ts 
arriving segment sequence left window edge accept normally 
treat segment normal window outof sequence tcp segment queue delivery user 
steps normal tcp processing steps specified rfc 
important note timestamp checked segment arrives receiver regardless sequence queued delivery 
consider example 
suppose segment sequence sent letter indicates sequence number digit represents timestamp 
suppose segment lost 
timestamp ts considered acceptable queued 
retransmitted segment latest timestamp fills hole causes segments acknowledged passed user 
timestamps queued segments inspected time accepted 
accepted ts stamp set 
rule allows reasonable performance loss 
full jacobson braden borman page rfc tcp extensions high performance may window data transit times loss full window packet show sequence queued receiver bytes data timestamp option result discarding data 
certain circumstances algorithm rules lead discarding segments unnecessarily shown example suppose segments sent sequence segment lost 
furthermore suppose delivery 
delayed retransmission arrives receiver 
delayed segments discarded unnecessarily arrive timestamps date 
case occur 
retransmission triggered timeout segments 
delayed longer rto time 
presumably event spurious timeouts retransmissions 
retransmission triggered fast retransmit algorithm duplicate acks queued segments caused acks received 
segment delayed past rto fast retransmit mechanism jacobson cause delayed packets retransmitted time avoiding extra rtt causing small performance penalty 
know case significant probability occurrence timestamps cause performance degradation unnecessarily discarding segments 
timestamp clock important understand paws algorithm require clock synchronization sender receiver 
sender timestamp clock stamp segments sender uses echoed timestamp measure rtt 
receiver treats timestamp simply serial number necessary connection clock 
receiver viewpoint timestamp acting logical extension high order bits sequence number 
jacobson braden borman page rfc tcp extensions high performance may receiver algorithm place requirements frequency timestamp clock 
timestamp clock slow 
tick bytes sent 
fact order useful sender round trip timing clock tick window worth data rfc window extension bytes windows 
quantitative clock faster tick sec reject old duplicate segments link speeds gbps 
ms timestamp clock link speeds bps 
timestamp clock fast 
recycling time greater msl seconds 
clock timestamp bits worst case msl seconds maximum acceptable clock frequency tick ns 
desirable establish longer recycle period order handle outdated timestamps idle connections see section relax msl requirement preventing sequence number wrap 
ms timestamp clock bit timestamp wrap sign bit days 
reject old duplicates connection msl days 
appears safe msl days longer probably assumed gateway system requiring precise msl enforcement ttl value ip layer 
considerations choose timestamp clock frequency range ms sec tick 
range matches requirements mechanism need resolution granularity retransmit timer tens hundreds milliseconds 
paws mechanism puts strong monotonicity requirement sender timestamp clock 
method implementation timestamp clock meet requirement depends system hardware software 
hosts hardware clock guaranteed monotonic hardware resets 
jacobson braden borman page rfc tcp extensions high performance may clock interrupt may simply increment binary integer periodically 
timestamp clock may derived system clock subject abruptly changed adding variable offset value 
offset initialized zero 
new timestamp clock value needed offset adjusted necessary new value equal larger previous value saved purpose 
outdated timestamps connection remains idle long timestamp clock tcp wrap sign bit value saved ts old result paws mechanism cause subsequent segments rejected freezing connection timestamp clock wraps sign bit 
chosen range timestamp clock frequencies sec ms time wrap sign bit days days 
tcp connection idle days comes life exceedingly unusual 
undesirable principle place limitation tcp connection lifetimes 
require implementation paws include mechanism invalidate ts value connection idle days 
alternative solution problem outdated timestamps send keepalive segments low rate wrap time timestamps day 
impose negligible overhead 
tcp specification included solution invalidation chosen 
note tcp know frequency time tcp assume worst 
validity ts needs checked basic paws timestamp check fails seg ts 
ts invalid segment accepted regardless failure timestamp check rule updates ts new segment 
detect long connection idle tcp may jacobson braden borman page rfc tcp extensions high performance may update clock timestamp value associated connection ts updated example 
details implementation dependent 
header prediction header prediction jacobson high performance transport protocol implementation technique important high speed links 
technique optimizes code common case receiving segment correctly order 
header prediction receiver asks question segment sequence 
question answered fewer machine instructions question segment window 
adding header prediction timestamp procedure leads recommended sequence processing arriving tcp segment check timestamp step header prediction segment sequence special conditions requiring additional processing accept segment record timestamp skip 
process segment normally specified rfc 
includes dropping segments outside window possibly sending acknowledgments queueing window sequence segments 
possibility interchange steps perform header prediction step perform header prediction fails 
performance improvement timestamp check step fail requires interval arithmetic finite field relatively expensive operation 
perform check single segment contrary philosophy header prediction 
believe change reduce cpu time tcp protocol processing high speed networks 
putting create hazard segment bytes past arrive exactly wrong time accepted mistakenly header prediction step 
reasoning introduced jacobson show probability failure negligible 
jacobson braden borman page rfc tcp extensions high performance may segments equally show old duplicates probability old duplicate exactly matching left window edge maximum segment size mss divided size sequence space 
ratio mss fddi link 
older segment retained internet reasonable model segment lifetime probability old duplicate exactly left window edge smaller 
bit tcp checksum allows basic unreliability part 
protocol mechanism reliability exceeds reliability tcp checksum considered won contribute significantly error rate 
believe ignore problem old duplicate accepted doing header prediction checking timestamp 
probabilistic argument universally accepted consensus performance gain justify hazard general case 
recommended follow 

duplicates earlier incarnations connection paws mechanism protects errors due sequence number wrap high speed connection 
segments earlier incarnation connection potential cause old duplicate errors 
cases tcp mechanisms prevent errors depend enforcement maximum segment lifetime msl internet ip layer see appendix rfc detailed discussion 
case sequence space wrap msl required prevent old duplicate errors earlier incarnations depend transfer rate 
ip layer enforces recommended minute msl tcp tcp rules followed tcp connections safe earlier incarnations matter high network speed 
paws mechanism required case 
may ask paws mechanism provide additional security old duplicates earlier connections allowing relax enforcement msl ip layer 
appendix explores question showing assumptions mechanisms required paws 
part current extension 
jacobson braden borman page rfc tcp extensions high performance may 
acknowledgments memo set extensions tcp provide efficient operation large bandwidth delay product paths reliable operation high speed paths 
extensions designed provide compatible interworking tcp implement extensions 
mechanisms implemented new tcp options scaled windows timestamps 
timestamps distinct mechanisms round trip time measurement paws protect wrapped sequences 
window scale option originally suggested mike st johns usaf dca 
form option suggested mike karels uc berkeley response cumbersome scheme defined van jacobson 
lixia zhang helped formulate paws mechanism description rfc 
originated result discussions task force theoretical limitations transport protocols general tcp particular 
task force members interest list valuable contributions pointing flaws algorithms documentation 
authors grateful contributions 

clark clark lambert zhang netblt bulk data transfer protocol rfc mit march 
rom postel issues reliable host host protocols proc 
second berkeley workshop distributed data management computer networks may 
hamming hamming digital filters isbn prentice hall englewood cliffs 
cheriton cheriton vmtp versatile message transaction protocol rfc stanford university february 
jacobson jacobson congestion avoidance control sigcomm stanford ca august 
jacobson jacobson braden tcp extensions long delay paths rfc lbl usc information sciences institute october 
jacobson braden borman page rfc tcp extensions high performance may jacobson jacobson bsd header prediction acm computer communication review april 
jacobson jacobson braden zhang tcp extension high speed paths rfc lbl usc information sciences institute october 
jacobson jacobson modified tcp congestion avoidance algorithm message interest mailing list april 
jain jain divergence timeout algorithms packet retransmissions proc 
fifth phoenix conf 
comp 
comm scottsdale arizona march 
karn karn partridge estimating round trip times reliable transport protocols proc 
sigcomm stowe vt august 
mckenzie mckenzie problem tcp big window option rfc bbn stc august 
nagle nagle congestion control ip tcp internetworks rfc january 
nbs colella mills performance improvements iso transport ninth data comm symposium published acm sigcomm comp comm review vol 
september 
postel postel transmission control protocol darpa internet program protocol specification rfc darpa september 
sax reliable data protocol rfc bbn july 
watson watson timer mechanisms reliable transport protocol connection management computer networks vol 

zhang zhang tcp timers don proc 
sigcomm stowe vt august 
jacobson braden borman page rfc tcp extensions high performance may appendix implementation suggestions layouts recommended sending options non syn segments achieve maximum feasible alignment bit bit machines 
nop nop timestamp timestamp appendix duplicates earlier connection incarnations cases considered system crashing losing connection state restarting connection closed loss host state 
described sections 
system crash loss state tcp quiet time msl system startup handles loss connection state system crash restart 
explanation see example keep quiet tcp protocol specification postel 
msl required depend transfer speed 
current tcp msl minutes acceptable operational compromise host systems take long boot crash 
timestamp option may ease msl requirements provide additional security data corruption 
timestamps timestamp clock guaranteed monotonic system crash restart value sender timestamp clock crash restart guaranteed greater value restart quiet time unnecessary 
dispense totally quiet time require host clock synchronized time source stable crash restart period accuracy timestamp clock tick better 
back strict requirement take advantage approximate clock synchronization 
suppose clock re synchronized timestamp clock jacobson braden borman page rfc tcp extensions high performance may ticks booting extended quiet time necessary takes ticks 
guarantee monotonicity timestamps reject old duplicates enforced msl 
closing connection tcp connection closed delay msl time wait state ties socket pair minutes see section postel 
applications built tcp close connection open new ftp data transfer connection stream mode choose new socket pair time 
delay serves different purposes implement full duplex reliable close handshake tcp 
proper time delay final close step really related msl depends rto fin segments rtt path 
argued side sending fin knows degree reliability needs able determine length time wait delay fin recipient 
accomplished appropriate tcp option fin segments 
formal upper bound rtt common network engineering practice rtt greater minute 
minute delay time wait state works satisfactorily provide reliable full duplex tcp close 
note independent msl enforcement network speed 
time wait state cause indirect performance problem application needed repeatedly close connection open high frequency number available tcp ports host 
high network speeds major contributor problem rtt limiting factor quickly connections opened closed 
problem worse high transfer speeds 
allow old duplicate segments expire 
replace function time wait state mechanism operate connections 
paws defined strictly single connection timestamp ts kept connection control block jacobson braden borman page rfc tcp extensions high performance may discarded connection closed 
additional mechanism added tcp host cache timestamp received connection 
value paws mechanism reject old duplicate segments earlier incarnations connection timestamp clock guaranteed old connection open 
require time wait delay plus rtt tick sender timestamp clock 
extension part proposal rfc 
note variant mechanism proposed rom postel required host maintain connection records containing highest sequence numbers connection 
timestamps necessary keep quantity remote host regardless number simultaneous connections host 
jacobson braden borman page rfc tcp extensions high performance may appendix changes rfc rfc protocol extensions defined document differ important ways defined rfc rfc 
sack deferred memo 
detailed rules sending timestamp replies see section differ important ways 
earlier rules result estimate rtt certain cases packets dropped order 
value ts shared distinct mechanisms paws 
simplification possible change 
ambiguity rfc resolved favor putting timestamps ack data segments 
supports symmetry underlying tcp protocol 
echo echo reply options rfc combined single timestamps option reflect symmetry simplify processing 
problem outdated timestamps long idle connections discussed section realized resolved 
rfc recommended header prediction take precedence timestamp check 
scepticism probabilistic arguments section decided recommend timestamp check performed 
spec modified extended options sent segments received corresponding segments 
provides conservative possible conditions interoperation implementations extensions 
addition substantive changes rfc attempts specify algorithms unambiguously presenting modifications event processing rules rfc see appendix jacobson braden borman page rfc tcp extensions high performance may appendix summary notation notation document 
options tcp window scale option tcp timestamps option option fields shift cnt window scale byte 
bit timestamp value field 
bit timestamp reply field 
option fields current segment seg field current segment 
seg field current segment 
seg bit value clock values local source bit timestamp values rate period ms sec 
connection state variables ts latest received timestamp ack sent ack field sent snd ts ok bit flag snd ws ok bit flag rcv wind scale receive window scale power snd wind scale send window scale power jacobson braden borman page rfc tcp extensions high performance may appendix event processing event processing open call 
initial send sequence number iss selected 
send syn segment form 
send call closed state tcb exist 
listen state foreign socket specified change connection passive active select iss 
send syn segment containing options set snd una iss snd nxt iss 
enter syn sent state 
syn sent state syn received state 
established state close wait state buffer send piggybacked acknowledgment acknowledgment value rcv nxt 
urgent flag set 
snd ts ok flag set include tcp timestamps option data segment 
scale receive window transmission segment header seg wnd snd wnd rcv wind scale 
jacobson braden borman page rfc tcp extensions high performance may segment arrives 
state listen check rst second check ack third check syn syn bit set check security 

seg prc tcb prc continue 
check window scale option save seg snd wind scale set snd ws ok flag 
set snd wind scale rcv wind scale zero clear snd ws ok flag 
check option save seg variable ts turn snd ts ok bit 
set rcv nxt seg seq irs set seg seq control text queued processing 
iss selected syn segment sent form snd ws ok bit include option segment 
snd ts ok bit include segment 
ack sent set rcv nxt 
snd nxt set iss snd una iss 
connection state changed syn received 
note incoming control data combined syn processed syn received state processing syn ack repeated 
listen fully specified foreign socket fully specified unspecified fields filled 
jacobson braden borman page rfc tcp extensions high performance may fourth text control 
state syn sent check ack bit fourth check syn bit 
syn bit security compartment precedence acceptable rcv nxt set seg seq irs set seg seq retransmission queue acknowledged removed 
check window scale option save seg snd wind scale set snd wind scale rcv wind scale zero 
check option save seg variable ts turn snd ts ok bit connection control block 
ack bit set seg initial rtt estimate 
snd una iss syn acked change connection state established form ack segment send 
snd echo ok bit include option ack segment 
ack sent set rcv nxt 
data controls queued transmission may included 
controls text segment continue processing sixth step bit checked return 
enter syn received form syn ack segment send 
snd echo ok bit include option segment 
jacobson braden borman page rfc tcp extensions high performance may snd ws ok bit include option segment 
ack sent set rcv nxt 
controls text segment queue processing established state reached return 
fifth syn rst bits set drop segment return 
check sequence number syn received state established state fin wait state fin wait state close wait state closing state ack state time wait state segments processed sequence 
initial tests arrival discard old duplicates processing done seg seq order 
segment contents straddle boundary old new new parts processed 
rescale received window field seg wnd place seg wnd steps 
check segment contains timestamps option bit snd ts ok 
seg idle days true segment acceptable follow steps unacceptable segment 
seg seq equal ack sent save seg variable ts 
jacobson braden borman page rfc tcp extensions high performance may cases acceptability test incoming segment 
incoming segment acceptable acknowledgment sent reply rst bit set drop segment return ack sent set seg ack acknowledgment 
snd echo ok bit include timestamps option ack segment 
set ack sent seg ack send ack segment 
sending acknowledgment drop unacceptable segment return 
fifth check ack field 
ack bit drop segment return 
ack bit 
established state snd una compute new estimate round trip time 
snd ts ok bit seg elapsed time segment retransmission queue sent 
segments retransmission queue entirely acknowledged 
seventh process segment text 
established state fin wait state fin wait state 
send acknowledgment form jacobson braden borman page rfc tcp extensions high performance may snd ts ok bit include timestamps option ack segment 
set ack sent seg ack acknowledgment send 
acknowledgment piggy backed segment transmitted possible incurring undue delay 
security considerations security issues discussed memo 
authors addresses van jacobson university california lawrence berkeley laboratory mail berkeley ca phone email van lbl gov bob braden university southern california information sciences institute admiralty way marina del rey ca phone email braden isi edu dave borman cray research lone oak drive mn phone email dab cray com jacobson braden borman page 
