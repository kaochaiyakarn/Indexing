problems rewriting applied categorical concepts example computational comonad wolfgang gehrke research institute symbolic computation johannes kepler university linz austria wolfgang gehrke risc uni linz ac 
canonical system comonads extended notion computational comonad bg crucial point find appropriate representation :10.1.1.45.4952
canonical systems checked help larch prover gg exploiting method huet hue represent typing untyped rewriting system 
resulting decision procedures implemented programming language elf pfe typing directly supported language 
outline incomplete attempt solve problem benchmark rewriting tools 
starting point provide methods checking commutativity diagrams arising category theory 
diagrams context visual description equations morphisms 
check commutativity diagram amounts check equality morphisms involved 
way support task solve uniform word problem category 
course decidable 
monoid useful mathematical notion described equationally decidable uniform word problem 
equations characterized diagrams fig 

monad categorical generalization concept ml 
gives evidence canonical system monads 
application monads computer science mog exploited structure semantics programming languages structure purely functional programs wad 
reduced uniform word problem monads uniform word problem adjunctions exploiting theorems category theory bw 
sponsored austrian science foundation fwf esprit brp ii american national science foundation 
ccr theta theta theta theta theta theta theta oe theta theta theta theta associativity identity laws fig 

laws monoid form diagrams doing comonad resulting system extended notion computational comonad bg study intensional semantics programming languages :10.1.1.45.4952
describe canonical system computational comonads different canonical system comonads 
main difficulty handling equational theories consists appropriate reformulation problem help equivalent theory cartesian closed categories known instance hue 
case decision problem transferred language ccc language typed lambda calculus 
morphisms category come type depending objects source target 
taken account doing rewriting 
verification canonical system deal types frame larch prover gg suggested hue 
resulting decision procedures implemented programming language elf pfe directly supports dependent types applied examples bg :10.1.1.45.4952
briefly describe attempt solve problem help rewriting congruence 
main contributions consist representation comonads suitable rewriting extended notion computational comonad providing canonical system presentation method encoding types untyped framework example computational comonad demonstration usability elf tool typed rewriting 
conclude suggest 
definitions section definition comonad bw computational comonad bg :10.1.1.45.4952
furthermore notion kleisli category introduced 
assume morphisms objects form set 
ffi ffi id ffi ffi ffi ffi ffl ffl associativity unit laws fig 

comonad laws definition comonad 
category 
comonad cm ffl ffi endofunctor natural transformations ffl ffi 
ffi laws satisfied com ffi ffi ffi ffi ffi ffi com ffl ffi ffi id com ffl ffi ffi id laws comonad visualized diagrams fig 
similar diagrams monoid cf 
fig 
real correspondence better seen monads 
note 
category 
comonad cm ffl ffi characterized equational specification idb ffi fa fa ffi ida fa ffi ga ffi ha ffi ffi ida id fa ffi ga ffi ffl ffi fa ffi ffl fa ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffi ffi id ffl ffi ffi id definition kleisli category 
cm ffl ffi comonad category corresponding kleisli category defined objects objects morphisms homc identity object ffl composing ffi ffi ffi ffi 
easily verified construction category cf 
bw 
kleisli category useful characterizing comonads way 
definition computational comonad bg :10.1.1.45.4952
category cm ffl ffi comonad computational comonad ccm ffl ffi fl comonad having additionally natural transformation fl fulfilling laws ffl ffi fl ida ffi ffi fl fl ffi fl note 
category 
computational comonad ccm ffl ffi fl characterized equational specification equations fa ffi fl fl ffi ffl ffi fl ida ffi ffi fl fl ffi fl extensible canonical system comonad section rewriting system comonads proved canonical 
particular representation comonads suitable extended notion computational comonad canonical system achieved 

problem original equational specification comonad comes fact endofunctor 
means iterated 
iteration requires treatment integer exponents difficult 
problem ffl interacts ffi interacts ffi difference gives rise complications 
note 
take advantage kleisli category formulated terms category 
law multiplication kleisli category suggests auxiliary definition ffi ffi called kleisli star ffi ffi formulating categorical laws kleisli category new function get id ffi ffl ffi ffi id ffi ffl ffi ffi ffi ffi ffi ffi ffi ffi setting ae ffl called unit kleisli category equations reformulated ckl ae ffi ckl ae id ckl ffi ffi lemma 
comonad completely characterized id ffi ae level morphisms assuming known acts objects 
proof cf 
man 
components expressed ffl ae ffi id ffi ae ut 
gives compact way presenting comonad previously described terms id ffi ffl ffi 
action object level plays role typing information rules ckl 
presentation formulate canonical system comonads 
proposition 
assuming known acts objects canonical system com comonad idb ffi fa fa ffi ida ae id ae ffi fa ffi ga ffi ha ffi ffi ffi 
ffi ae ffi ffi ffi ffi ffi ha 
ffi ffi proof 
correctness result verified help larch prover 
check critical pairs seen appendix 
done twice firstly typing morphisms account secondly including typing 
give termination argument help polynomial interpretation cf 
lan id id id ffi ffi ffi ae ae ae triples natural numbers ordered lexicographically component highest priority 
ordering expressible larch prover appendix 
section give details typing 
ut 
termination argument case need information typing 
different typed calculus mainly types prove termination 
starting canonical system com try extend result computational comonad 
note 
additional equations computational comonad reformulated fit new representation 
especially ffi avoided 
key observation comes equation ffi fl ffi ffi ffi fl ffi fl ffi fl fl ffi ffi fl rules original presentation involve ffi applied leading single equation ffi fl fl ffi ffi fl equation ae ffi fl id suffices describe computational comonad 
lemma 
computational comonad completely characterized terms id ffi ae fl level morphisms assuming known acts objects fl described equations gam ae ffi fl ida gam ffi fl fl ffi ffi fl proof 
shown previous equations fl derived fa ffi fl ffi ae ffi fl fl ffi ffi ae ffi fl fl ffi ffl ffi fl ae ffi fl id ffi ffi fl id ffi fl fl ffi id ffi fl fl ffi fl ut theorem 
assuming know acts objects canonical system computational comonad extending canonical system com ae ffi fl ida ffi fl fl ffi ffi fl ae ffi fl ffi fa ffi fl ffi ha fl ffi ffi fl ffi ut proof 
check critical pairs done larch prover seen appendix 
typing refer section 
previous polynomial interpretation extended fl fl fl ut 
point stressed choice representation comonads obvious 
auxiliary necessary succeed 
example test rewrite tools allow extension signature kz see extent may automated 
encoding types lp method due huet cf 
hue demonstrated concrete example computational comonad 

category important check compatibility morphisms order compose 
assume start compatible morphisms application untyped rules describing categorical axioms coincides application typed version 
functors natural transformations act level morphisms treat additional information 
problem 
check critical pairs rewriting system describing categorical notions level objects account 
morphism type depending objects source target 
solution 
level objects usually simple test equality done check compatibility morphisms 
unification mechanism rewriting exploited perform check 
typing information encoded new function symbol representing dependent typing 
case categories looks mor untyped form morphism source target resp 
example 
example consider computational comonad presentation yields canonical system 
way example choose specification language larch prover 
sort variable definitions cases untyped case declare sort morphisms declare variables declare operators id 
identity 
composition counit 
counit costar 
kleisli typed case declare sort typed morphisms declare sort untyped morphisms declare sort objects declare variables declare variables declare operators id 
identity 
composition counit 
counit costar 
kleisli mor 
explicit typing 
functor objects table demonstrates translation untyped case typed case 
morphism untyped typed fo mor ido id mor id fo ffi go mor mor mor ae counit mor counit costar mor costar mor exploiting translation rewriting system computational comonad verified respecting typing 
seen appendix 

typing information hand coded errorprone 
unfortunately larch prover support kind type processing 
implemented final decision procedures comonads computational comonads logic programming language elf supports dependent types directly 
implementation elf application shown canonical system computational comonads applied examples taken bg :10.1.1.45.4952
actual run test appendix 
difficulty represent dependent types conventional rewriting tool larch prover implemented rewriting logic programming language elf 
think approach advantages types help encode morphisms correctly represent judgments propositions types principle 
elf give answer substitution term representing proof inspection proof achieved 
programming language rewriting strategies implemented fit problem best just outermost leftmost chosen 
elf allows additionally treatment higher order rewriting language supports higher order types 
possible formulate concept critical overlaps language unfortunately possible check convergence critical pairs possible forthcoming extension elf 
elf allows prove meta theorems soundness rewriting respect axiomatic definition equality 
pointed elf completion proof termination 
done conveniently frame larch prover 
hand easy formulate queries coming example elf 
elf program split static dynamic part 
type checking proof search 
appendix parts program shown 
dynamic part definitions static part cases type explicit 
sample queries seen trace correspond bg :10.1.1.45.4952
pair functors defined relating category kleisli category alg defined alg fa ffi ffl fun defined fun ffi fl queries test alg fun functors 
furthermore equalities checked fun ffi alg ic alg ffi fun ik fun fun test equality proceeds steps translation representation normalization second normalization 
knowledge definition alg fun coded translation process 
incomplete attempt rewriting congruence section sketch attempt achieve canonical system comonads extended computational comonads 
attempt motivated trying remain specification comonad terms id ffi ffl ffi 
approach take equational specification comonad orient equations left right congruence generated associativity endofunctor composed morphisms 
working congruence results finite congruence classes computed canonical representation orienting rules left right 
reducibility terms decidable cf 
bac 
furthermore easy find polynomial interpretation decreasing rules remains constant congruence 
hard part show confluence 
left linear rule method huet cf 
hue tried rules left linear resulted critical pairs 
existence unification algorithm homomorphism described associativity suffice cover entire congruence class 
structure rules simple composition occurs 
usual critical overlaps new ones considered due congruence example ffi ffl ffi ffi ffl ffi ffi ffi ffl ffi ffi ffi attempted formalize rules involving exponentiation endofunctor example ffl ffi fa ffi ffl fa ffi ffi ffi ffi rule comes completed version arising overlapping associativity 
really required treatment natural numbers addition exponents complicates situation ac unification necessary 
hand exponents ground concrete decision problem 
amount rules constantly growing looked appropriate formulation theory comonad structure rules computational comonad follow pattern 
possible formalization redux bun system able handle inductive completion presence ac operators may succeed 
literature new methods try handle infinite sets rules arising completion 
uniform word problem computational comonads shown decidable extending appropriate canonical system comonads 
critical pair check take presence types account come source target morphism 
suggested logic programming language elf implement typed rewriting direct support dependent types 
furthermore user direct influence strategy rewriting 
want continue directions theoretical practical 
notion monad functional programming wad investigated 
requires treatment higher order rewriting nip elf suitable tool supports higher order types 
give right frame reason certain monadic functional programs 
practice helpful allow diagrams compact visual encoding equations input prover 
output displayed appropriate form 
fs find suitable graphical language context categories 
acknowledgments am indebted frank pfenning hospitality visit cmu possible learn programming language elf allowed fruitful discussions ideas 
furthermore wish andrzej filinski providing insight monads 
am grateful advisor jochen constant encouragement 
bac bachmair 
canonical equational proofs 
progress theoretical computer science 
birkhauser 
bg brookes geva :10.1.1.45.4952
computational comonads intensional semantics 
fourman johnstone pitts editor categories computer science number london mathematical society lecture notes pages 
cambridge university press 
bun 
reduce redex redux 
kirchner editor rewriting techniques applications number lecture notes computer science pages 
springer verlag 
bw barr wells 
toposes triples theories 
number der mathematischen wissenschaften 
springer verlag 
fil filinski 
representing monads 
proceedings st annual acm sigplan sigact symposium principles programming languages pages 
acm 
fs freyd scedrov 
categories allegories 
elsevier science publishers 
gehrke 
proof decidability uniform word problem monads assisted elf 
technical report risc 
gg garland guttag 
guide lp larch prover 
mit 
hue huet 
confluent reductions 
journal association computing machinery october 
hue huet 
cartesian closed categories lambda calculus 
hue pages 
addison wesley 
hue huet 
logical foundations functional programming 
university texas austin programming series 
addison wesley 
kz kapur zhang 
rrl rewrite rule laboratory user manual revised edition may 
lan lankford 
proving term rewriting systems noetherian 
technical report louisiana technical university la 
man manes 
algebraic theories 
number graduate texts mathematics 
springer verlag 
ml mac lane 
categories working mathematician 
number graduate texts mathematics 
springer verlag 
mog moggi 
computational lambda calculus monads 
fourth annual symposium logic computer science pages 
ieee june 
nip nipkow 
higher order critical pairs 
sixth annual symposium logic computer science pages 
ieee july 
pfe pfenning 
elf language verified meta programming 
fourth annual symposium logic computer science pages 
ieee june 
vogel 
von german 
diplomarbeit universit karlsruhe 
wad wadler 
monads functional programming 
broy editor program design calculi volume nato asi series computer system sciences pages 
springer verlag 
appendix lp traces check termination confluence larch prover shown 
termination typing taken account termination argument types 
check critical pairs repeated setting includes types 
termination lp larch prover march logging january home data lp termination 
lp execute termination lp declare sort mor lp declare variables mor lp declare operators id counit 
mor costar mor 
mor mor mor 
mor 
lp set ordering polynomial ordering method polynomial 
lp register polynomial id lp register polynomial counit lp register polynomial costar lp register polynomial lp assert id id counit costar costar counit id costar costar costar costar 
added equations named user user system 
system contains rewrite rules 
lp complete equations critical pairs rewrite rules user user 
user counit costar system contains equation rewrite rules 
equations critical pairs rewrite rules user user 
user costar costar costar costar system contains equation rewrite rules 
system contains rewrite rules 
system complete 
lp declare operator gamma 
mor lp register polynomial gamma lp assert counit gamma id added equation named user system 
system contains rewrite rules 
lp assert costar gamma gamma gamma added equation named user system 
system contains rewrite rules 
lp complete equations critical pairs rewrite rules user user 
user counit gamma system contains equation rewrite rules 
equations critical pairs rewrite rules user user 
user gamma gamma costar gamma system contains equation rewrite rules 
system contains rewrite rules 
system complete 
lp display rewrite rules user id 
user id 
user 
user counit costar 
user costar counit 
id user costar costar 
costar costar user counit costar 
user costar costar 
costar costar user counit gamma 
id user costar gamma 
gamma gamma user counit gamma 
user costar gamma 
gamma gamma input file home data lp termination lp 
lp quit typing lp larch prover march logging january home data lp typing 
lp execute typing lp declare sort mor mor obj lp declare variables mor lp declare variables obj lp declare operators id counit gamma 
mor costar mor 
mor mor mor 
mor obj 
obj mor mor obj obj 
mor 
lp set ordering left right ordering method left right 
lp assert category mor mor id mor mor mor mor mor id mor mor mor mor mor mor mor mor mor mor mor comonad mor mor counit mor costar mor mor mor costar mor counit mor id mor mor costar mor mor costar mor mor costar mor mor mor costar mor completed rules mor mor counit mor mor costar mor mor mor mor mor mor mor costar mor mor mor costar mor mor mor mor costar mor mor mor costar mor mor 
added equations named user user system 
system contains rewrite rules 
lp complete system guaranteed terminate 
terminate complete 
lp assert computational comonad mor mor counit mor gamma mor id mor mor costar mor mor gamma mor mor gamma mor mor mor gamma completed rules mor mor counit mor mor gamma mor mor mor mor costar mor mor mor gamma mor mor mor gamma mor mor mor mor gamma mor 
added equations named user user system 
system contains rewrite rules 
lp complete system guaranteed terminate 
terminate complete 
input file home data lp typing lp 
lp quit elf traces parts elf program illustrate usage elf rewriting making dependent types 
trace shows automated proof examples taken bg printing proof term :10.1.1.45.4952
current implementation elf embedded image sml nj compiler accessible functions top level 
static part elf program category obj type 
name obj mor obj 
obj 
type 
name mor id obj mor mor 
mor 
mor 
infix right comonad eps del obj 
obj 
mor 
mor 
eps obj mor del obj mor 
comonad counit costar kleisli category counit obj mor costar mor 
mor 
missing ingredient computational comonad gamma obj mor 
checks brookes geva alg mor 
mor fun mor 
mor dynamic part elf program rules computational comonads kleisli category rule mor 
mor 
type 
comon rule id comon rule id comon rule 
comon rule counit costar comon rule costar counit id 
comon rule costar costar costar costar 
comon rule counit costar 
comon rule costar costar costar costar 
comp rule counit gamma id 
comp rule costar gamma gamma gamma 
comp rule counit gamma comp rule costar gamma gamma gamma 
rewrite relation computational comonad rew mor 
mor 
type 
try rewrite step mor 
mor 
type 
step simple step rule 
step step step 
step step step 
step step costar costar step 
try rew step rew 
fini rew dynamic equality id counit costar gamma mor 
mor 
type 
name eq infix rew rew translation morphisms help kleisli category trans mor 
mor 
type 
tr trans trans trans 
tr trans costar costar trans 
trans alg mor counit trans 
trans fun mor gamma trans 
trt trans mor costar counit trans 
tre trans eps counit 
trd trans del costar id 
tr trans morphisms id counit costar gamma eps del alg fun mor 
mor 
type 
name equ infix trans trans 
sample run standard ml new jersey version february elf version july saved tue jan met val unit static elf dynamic elf 
static elf static dynamic elf dynamic val unit top dynamic elf solving rule rew step trans alg id counit 
alg id solving solved mor mor alg alg costar alg 
alg solving solved fun counit id 
fun id solving solved mor mor fun costar fun fun 
fun solving solved mor fun alg solving solved mor fun alg fun fun 
solving solved article processed macro package llncs style 
