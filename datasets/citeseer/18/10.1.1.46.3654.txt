dynamic load balancing hpdc case study movie system requirements dynamic load balancing homogeneous platforms heterogeneous hpdc case study movie chris faigle geoffrey fox janusz simoni northeast parallel architectures center npac college place syracuse university syracuse ny submitted nd international symposium high performance distributed computing hpdc wa july 
january heterogeneous hpdc systems powerful difficult program load balance 
new software tools required provide tractable homogenized software layers top heterogeneous hardware 
includes code data workload homogeneity support 
set general constraints homogeneous platforms heterogeneous hpdc facilitate analysis existing models inspire design new models 
shown dynamic load balancing provides stringent requirement driving specific model hpdc operating environment interpretative multitasking architecture 
particular implementation model case study movie system developed npac 
contents 
requirements 
implementation movie 
current status movie 


rapid advances network technology possible fast efficient interconnection local resources geographically dispersed computing machinery 
networks typically heterogeneous due large growing variety computing platforms ranging pcs workstations parallel supercomputers 
resulting hpdc model contains potential eventually offer powerful user friendly environments 
programming heterogeneous networks complex task calls new generation software tools order exploit power hpdc efficient manner 
natural strategy cope complexity heterogeneous systems impose homogeneity terms suitable system software layer 
apparently unique solution problem fact homogeneous platforms heterogeneous computing proposed 
models usually address selected aspects distributed computing existing systems considered established broadly accepted model hpdc operating programming environment 
attempt identify minimal set basic requirements constructing homogeneous hpdc environments 
constraints extracted existing models satisfies entire set constraints 
proposed set guidelines utilized evaluation comparison framework existing solutions specification framework new designs 
particular general observation current models satisfactorily addresses issue general purpose support dynamic load balancing shape set constraints enforce capability 
claim natural solution interpretative multitasking architecture 
case study particular implementation concept terms multitasking object oriented visual interactive environment movie currently development syracuse university northeast parallel architectures center npac 
homogeneous layer hpdc typically follows software models faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie full fledged distributed operating system mach amoeba runtime server distributed operating shell software emulation full operating system news gra network extensible file system sun programming environment runtime library pvm express para data parallel language model compiler runtime library high performance fortran hpf concurrent 
desirable ultimate solution represent practical strategies allow designer factor focus programmer view distributed computing 
distinction subtle somewhat ambiguous server models offer api libraries api libraries internal network servers daemons 
similar way ambiguity overlap parallel language environments typically developed top operating programming environment 
analysis attempt treat various software strategies listed uniform fashion 
implicit working model network software entities nodes 
aim extract existing implementations enumerate natural homogeneity constraints virtual machine software layer operating top heterogeneous network computing machines 
homogeneity imposed different levels node homogeneity requirement nodes follow identical software design data homogeneity requirement parallel data structures decomposed heterogeneous hardware form homogeneous layer load homogeneity requirement computational load dynamically balanced decomposing individual processing tasks homogeneous fashion nodes 
aspects discussed stressing fact load homogeneity imposes severe constraints hpdc system design 

requirements system intended run machines exist transparently machines ranging pcs workstations massively parallel simd mimd systems 
necessary calls machine specific services appropriately encapsulated appear user 
means system naturally exist middle layer operating system application possibly language level 
system tuned take advantage particular machine salient features simd parallelism 
constraint assures type node homogeneity defined underestimated 
guideline resulted example popularity express communication library programs directly ported distributed memory mimd machine network homogenous workstations vice versa 
economical way implementing middle layer discussed achieved compute server technology 
resulting server easy port facilitates code encapsulation re helps keeping application binaries shorter 
sense repeat arguments designers news windowing domain 
general case hpdc provides grounds compelling arguments favor technology 
particular order deliver dynamic load balancing system needs support automatic services moving code data nodes 
typical client server approach generates inherent bottleneck server side architecture employed 
participating nodes able provide local processing data nodes acting server requesting processing services data nodes acting client providing load balancing services 
multitasking general purpose solution problem dynamic load balancing aware obtained partitioning entire job tasks convenient granularity allowing suitable load monitoring balancing service drive appropriate inter nodal task migration 
exist reasons see multitasking essential requirement multitasking natural way expressing parallelism program allows overlap communication computation precludes idle tasks absorbing precious cpu cycles 
furthermore system may tasks processors context switching regular os processes prohibitively expensive 
problem recognized addressed modern operating systems 
mach amoeba systems lightweight units scheduling called threads 
threads process boundaries share data access system resources context switching performed efficiently 
multitasking rely os support portability system requires 
task switching occur preemptive priority driven scheduling scheme 
non preemptive scheduling proven insufficient simple time slice allow faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie implementation movie scheduling important tasks need start immediately run uninterrupted certain amount time 
adaptive local load fluctuations substantially degrade performance distributed algorithm 
processing node able dynamically adapt load balance requirements indicated suitable controller 
requires multitasking discussed system support task mobility 
task binaries moved nodes heterogeneous network portable intermediate representation required 
task moved converting local memory representation portable protocol sending protocol node converting remote site back native memory representation 
representative examples environments support load balancing heterogenous nodes system level include amoeba distributed operating system pvm programming environment 
new application started systems try assign node lightest load 
statistical method balancing systems extended truly dynamic form 
interpretative intermediate representation required implement thread mobility discussed viewed interpreted language protocol 
fact system examined heterogenous machines appear homogenous interpretative level 
interpreters range low level linear thread control windows protocol full fledged high level object oriented programming languages postscript asi 
dynamic load balancing supported customized low level user transparent binary binary conversion protocol solution terms high level language economical attractive 
arguments favor providing user level interpretative access hpdc software infrastructure include analogy operating system interfaces typically structured command interpreter rapid prototyping support interactive interface monitoring distributed computation 
advantages interpretative access driving forces implementation network extensible file system programmable file servers interpret client request request sent tokenized postscript stream 
high performance interpreted environments suggested typically introduce substantial system overhead especially execution simple operations scalar arithmetic 
high performance constraint apparently obvious hpdc systems stressed suitably enforced 
way satisfy goal consistently data structures objects sufficiently large granularity 
natural strategy compatible onset data parallel languages high performance fortran provide support enforce vector scalar constructs interpreter design 

implementation movie suggested preceding discussion natural model supporting general purpose dynamic load balancing interpretative multitasking architecture 
explicit implementations constructed specifying language syntax scheduling mechanism communication protocol 
describe particular embodiment model multitasking object oriented visual interactive environment 
short overview system followed complete discussion implementation details relate directly set requirements listed section 
movie system network multithreading servers may reside heterogenous network pc workstations simd mimd parallel systems 
server performs tasks independently standalone computational unit cooperates servers enhance processing efficiency entire ensemble 
server functional layers kernel layer interpretative layer 
kernel layer written provides base postscript interpreter scheduling communication memory management services 
interpretative layer constructed scripts written superset postscript 
movie servers regular user processes toto implement virtual assembler 
machines run appear interpretative level server highly tuned take advantage characteristics particular hardware platform 
example movie built matrix algebra 
movie server simd machine execute matrix multiplication differently running multicomputer workstation 
completely transparent thread invokes operation 
interpreter translates thread code coded kernel functions 
scheduler controls interpreted threads communication manager ensures communication threads movie server threads belonging movie servers 
movie highly portable implementation assumptions underlying hardware os support 
movie kernel hides hardware os differences written principle ported machine faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie implementation movie compiler exists 
system dependent aspects kernel system calls unix socket library carefully encapsulated 
movie server implemented single heavyweight process 
advantage multitasking capabilities platforms simplified implementation temptation resisted environment ported single tasking nodes dos machines processing elements mimd platforms 
set required system dependent functions contains non blocking operations timer interrupts interrupt signaling readiness devices 
resulting level support experiment movie ported ncube multicomputer npac completed man hours single graduate student earlier experience specifics target machine 
unix dependent services substituted vertex interrupts calls unix socket library replaced calls vertex message passing library 
multitasking types low overhead interpreted threads exist units scheduling movie regular threads unrestricted access objects protected threads access objects owned threads 
threads scheduled preemptive fashion priority level assigned types multilevel queues real time queues computational queues 
real time threads higher priorities preempt lower priority threads 
internal scheduling policy fixed working policy may modified specifying appropriate parameters thread descriptors 
scheduling functions accessible interpretive level users easily build custom scheduler replace default run time 
order thread execution may altered tickets special kinds messages 
problem inherent single process environments provide multitasking capabilities internally threat blocking operation requested local thread completed 
case underlying os suspends entire process spite fact may local threads run 
situation concern context hpdc systems possibly large number operations distributed nodes execution compute bound threads may needlessly hampered 
danger relatively easier control movie models movie threads os services directly 
operation successfully completed invoking thread blocked ready thread scheduled 
movie kernel avoid suspended non blocking system calls 
avoid polling movie uses software interrupts notify kernel perform complete outstanding operation 
movie server controls local resources 
cooperating threads need synchronize activities may semaphores direct addressed synchronous asynchronous message passing lowest level communication method 
access shared objects required send wait operation proper way synchronize 
message passing introduces lowest overhead threads perform time critical operations necessarily bound particular node movie network communicate method 
application demands operations shared cooperative objects linda communication layer appropriate 
model global tuple space accepts newly created tuples allows inspection threads 
tuple contains object particular thread code may content tuple 
kernel able satisfy thread requests contacts appropriate movie server order obtain particular requested service time maintains server status striving satisfy requests originated movie servers 
movie server pre remotely sending message subsequently installed remote service 
model shows great flexibility system resources 
example thread needs access file belongs different file system contacts movie server access file system installs program 
program executes operations file 
remote server programmability gained attention lately network extensible file system concept 
ensemble movie servers assumption structure functionality file system automatically incorporate benefits distributed file systems workstations parallel subsystems mimd machines 
communication threads belonging different movie servers handled designated layer kernel called communication manager 
communication manager sends messages addressed server receives messages putting thread queues 
threads may exchange information synchronous asynchronous message passing mailboxes linda style communication 
message passing fastest method communication convenient sender specify physical location receiver server name thread name 
mailbox model similar convention followed mach appears flexible sender submit name globally declared mailbox 
local faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie implementation movie communication manager doesn know physical location specified mailbox tries get information servers 
mailbox accessed address cached easily resolved 
mailboxes provide abstraction transparent location independent communication required feature thread mobility automatic load balancing 
mailbox communication reasonable compromise performance programming convenience 
comparison linda style communication costly 
convenient method generated events tuples placed global space tuple space accessed thread resides entire network 
adaptive threads interpreted migrate movie server response requests suitable dynamic load balancer 
data code equivalence postscript language model particularly useful implementing transfers 
internal state postscript interpreter correspondence suitable chunk postscript code generate state 
feature retained extensions particular applies threads objects 
thread moved converted equivalent sent required remote server re interpreted results internal remote site 
movie servers provide uniform computational communication platform threads 
threads bound specific machine required hardware software support existence specific matrix graphics accelerator may freely executed available machine running movie 
example parallel programs may developed tested network workstations moved changes mimd parallel machine running movie server computing elements vice versa 
homogeneity movie network exploited making thread location transparent run time 
possible message passing parallel distributed domain addressing mailboxes tuples 
advantage transparency thread location thread may moved node participate performed computation 
migration useful reduce imbalance movie network exclude particular node keeping computation going 
discuss system requirements dynamic load balancing internal server functionality necessary implementing load balancing algorithms 
algorithms typically collective character including techniques neural networks simulating annealing fos genetic algorithms heuristic combinatorial techniques scope analysis 
algorithms suitable metaphor processing unit neuron spin gene represents appropriate self organizing activity large ensemble units 
dynamic constraint global balance built algorithms results suitable state changes selected units spin flip neuron firing gene mutation 
effectively translated threads processing units thread migration state change operation 
interpretative essential part movie kernel dedicated highly optimized interpreter 
superset postscript functionality extended support computation areas originally intended graphical domain 
current content summarized section 
postscript language model chosen interpreted environment movie reasons original design driven requirements graphics device independence robust printer communication dynamics apply generalize readily hpdc context stack model natural virtual assembler design data code equivalence supports code mobility previously discussed built extensibility model supports interface design variety computational domains system integration large programming 
high performance movie achieve performance context executing cpu intensive hpdc applications 
taken account implementation process memory management interpreter inner loop performance optimized supported internal caches example speed dictionary requests small object creation 
movie server faster news dps interpreted server basic operations control flow arithmetic factor 
spite optimization efforts interpreted model slower compiled implementation 
case slower factor elementary operations loops scalar arithmetic 
suitable strategy build elaborate support vector arithmetic enforce vectorized programming techniques style apl fortran 
basic numerical types provide index free operations fields grids 
field dimensional array typed elements numbers records object handlers 
fields large interpreted overhead negligible elementary operations executed continuous stream statements 
grid untyped dimensional array plays role field template 
grids construct field pointers sections regular regions 
field fox simoni npac syracuse university dynamic load balancing hpdc case study movie implementation movie movie functionally equivalent matrix algebra fortran 
equivalence exploited new project npac aimed developing high performance fortran interpreter top movie layer 
convenient think layer portable assembler virtual multicomputer constructed mesh movie server chips 
consequence layer source language machine independent 
sense approach shares features efforts factorizing back ends compiler software terms standardized universal intermediate layer 
examples include vcode intermediate layer nesl parallel language yr yale intermediate representation parallel fortran compilers andf architecture neutral distribution format promoted osf generic compilers 
machine independence implies porting amounts simply porting movie server written portable operation amounts simply recompiling server new architecture 
applies multicomputers heterogeneous networks message passing call passing stress language packet communication ascii insensitive architectural differences byte ordering source language independence implies field grid algebra employed equally developing interpreters data parallel languages versions concurrent lisp 

current status movie movie system custom high performance skeleton postscript interpreter graphics interfaces news dps servers currently includes computational domains structured extensions postscript preemptive multithreading multilevel queue scheduling real time support uniform communication protocol networking distributed computing message passing support style interpretive object oriented programming multiple inheritance dynamic binding index free matrix algebra apl fortran type interfaces xlib gui toolkits motif graphics model portable pex gl drivers interface dataflow scientific visualization systems avs 
components available integrated documented form internal release movie scheduled may 
developing high performance fortran interpreter top movie demonstrated supercomputing 
preliminary movie demos available summer fall 
builds top npac active involvement national hpc programs aimed developing hpf language protocol prototype hpf compiler 
extend npac expertise domains parallel processing science industry fox applications advanced dynamic simulations type pursued follow programs zyda 
new vr lab planned spring summer npac start exploring detailed connectivities movie current generation vr development environments include trix sense systems near term application area intend explore educational potential gore nrc 
selected grand challenge applications installed npac hpc facilities include cm intel touchstone ncube running parallel oracle restructured terms movie tools dynamic object oriented formats required vr suitable levels education delivered local area schools 
fiber optic oc line currently developed nynex central new york corridor connect hpc facilities syracuse university cornell university rome laboratories 
network linked stage corridor aurora testbed national research education network 
expect early access new consumer vr products developed abrams gentile entertainment age plan explore relevant concepts installing devices selected schools line linking video lines virtualized grand challenge simulations running npac 
example current vr peripheral research mention ongoing efforts simo implementing static gesture recognition content addressable memory cam hpf 
cost operating cam increases number gestures number sensor signals obvious need computational resources allocated exclusively recognition task 
ongoing research effort involves exploration hpdc resources applied type vr interface pioneered krueger 
method reduces image processing techniques coupled image interpretation system 
tasks involved efficiently implemented hpf 

baron golub rashid tevanian young mach new kernel faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie foundation unix development proc 
summer usenix conf pp 
asi adobe systems postscript language manual addison wesley 
choudhary fox haupt ranka distributions forall sccs tr preparation blelloch chatterjee zagha implementation portable nested data parallel language cmu technical report october 
cerf cerf networks communications computers networks play thrive cyberspace special issue scientific american september 
chen prototyping fortran compilers massively parallel machines proceedings acm sigplan conference programming language design implementation 
choudhary 
fox haupt ranka applications high performance fortran fortran industry standard data parallel languages proceedings fith australian supercomputing conference melbourne australia dec available syracuse university tr sccs choudhary fox ranka kennedy tseng compiling fortran mimd distributed memory machines tr rice university sccs syracuse university fox load balancing loosely synchronous problems neural network fox editor proceedings third conference hypercube concurrent computers applications acm 
fox interpreted run time fortran environment syracuse center computational science internal report 
movie multitasking objectoriented visual interactive environment fox messina williams editors parallel computing works morgan kaufman preparation 
supercomputing virtual reality conference virtual reality san jose ca sept 
faigle haupt simoni movie model open systems high performance distributed computing proceedings international symposium high performance distributed computing hpdc sept syracuse ny ieee computer society press 
faigle fox haupt software integration global computing submitted th acm international conference supercomputing tokyo japan july 
faigle fox simoni integrating virtual environments high performance computing submitted st ieee virtual reality annual international symposium seattle wa 
fox kennedy koelbel ch kremer chau wen tseng wu fortran language specification tr rice university sccs syracuse university 
fos flower otto salama preprocessor irregular finite element problems proceedings symposium parallel computations impact mechanics asme winter meeting dec boston ma 
gelernter generative communication linda acm trans 
programming languages systems 
gore gore infrastructure global village communications computers networks play thrive cyberspace special issue scientific american september 
gra gosling rosenthal arden news book springer verlag 
hpf high performance fortran language specification draft version 
available anonymous ftp minerva npac edu cs rice edu 
available rice university technical report january 
jaco jacobson status projects world talk conference virtual reality washington dc june 
kahn kahn keynote address nd industry symposium virtual worlds technology seattle wa oct 
structure andf principles examples open software foundation technical faigle fox simoni npac syracuse university dynamic load balancing hpdc case study movie january 
para express manuals 
saltz das choudhary runtime data mapping scheme irregular problems proceedings scalable high performance computing williamsburg va april ieee computer society press tr sccs syracuse university 
scam communications computers networks play thrive cyberspace special issue scientific american september 
simo simoni polynomial network static gesture recognition virtual environments preparation environments concept applications implications sandra ed virtual reality report sept 
sunderam pvm framework parallel distributed computing concurrency practice experience 
sun sun microsystems network file system protocol specification draft tanenbaum van renesse staveren van sharp mullender jansen rossum van experiences amoeba distributed operating system commun 
acm vol 
pp 
zyda zyda software required computer generation virtual environments talk rd conference virtual reality washington dc dec 
faigle fox simoni npac syracuse university 
