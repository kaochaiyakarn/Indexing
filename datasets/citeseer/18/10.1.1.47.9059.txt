coevolutionary computation jan paredis university nl maastricht netherlands mail jan nl proposes general framework coevolution boost performance genetic search 
combines coevolution biologically inspired technique called life time fitness evaluation ltfe 
unrelated problems neural net learning constraint satisfaction illustrate approach 
problems predator prey interactions boost search 
contrast traditional single population genetic algorithms gas populations constantly interact 
algorithm different types coevolutionary interactions 
example symbiotic coevolution solutions genetic representations shown provide elegant solution problem finding suitable genetic representation 
approach greatly profits partial continuous nature ltfe 
noise tolerance advantage 
important ltfe ideally suited deal coupled fitness landscapes typical coevolution 
keywords arms races coevolution constraint satisfaction epistasis genetic algorithms life time fitness evaluation neural networks relations symbiosis 

general gas highly simplified computational models inspired natural selection 
differences fitness calculation gas nature clearly illustrate 
standard gas apply priori defined fitness function function wants optimize individual 
typically calculation individuals evaluated immediately creation birth 
fitness calculation nature substantially different 
consists continuous series tests individual life 
furthermore tests strictly pre defined 
originate complex environment 
environment influenced animal actions individuals processes occurring world geophysical changes 
summarizing say contrast gas nature uses far partial continuous fitness evaluation order adapt complex world 
nature various feedback mechanisms individuals undergoing selection provide strong driving force complexity 
predator prey relations known examples 
strong evolutionary pressure prey defend better running quicker growing bigger shields better 
response generations predators develop better attacking strategies stronger better eye sight 
arms races success side felt side failure responded order maintain chances survival 
turn calls reaction side 
process coevolution result stepwise increase complexity predator prey 
far author aware hillis propose computational predator prey coevolution 
see partial continuous fitness evaluation results robust fine grained algorithm significantly increased performance 
gives rise general coevolutionary framework able address traditional problems computer science artificial intelligence 
new type ga called coevolutionary genetic algorithm cga 
earlier applications predator prey interactions illustrate approach search classification neural networks search solutions constraint satisfaction problems 
earlier papers describe applications greater detail compare performance cga gas 
applications illustrate cga introduced 
examples predator prey relations improve power artificial search 
obviously mechanisms necessarily inverse fitness interaction members different species exist nature 
symbiosis important widely occurring counterexample 
consists positive fitness feedback success side improves chances survival 
see general framework exploit symbiotic interactions 
structure follows 
section describes general cga 
section briefly describe applications mentioned 
section describes symbiotic cga evaluates performance 
section focuses robustness cga 
seventh section explores connections research 
closes avenues research 

coevolutionary genetic algorithm large class problems artificial intelligence computer science involve search solution meets certain priori criteria 
term test solution problems refer class problems 
inductive learning example test solution problem 
involves searching concept description generalizes examples excludes counterexamples 
constraint satisfaction example type searches solution satisfies constraints 
section introduce coevolutionary algorithm illustrate class test solution problems 
clearly search algorithm manipulates types elements potential solutions concept descriptions potential solutions constraint satisfaction problem tests examples constraints 
basic population structures cga reflect duality 
contrast traditional single population gas cgas operate interacting populations consists potential solutions contains tests 
depicts population structures ga cga 
population structures ga cga description traditional ga helps introduce characterize main features cga 
genitor example traditional single population ga described follows 
initial population solutions created 
furthermore solution associated fitness 
test solution problems fitness number tests satisfied solution 
genitor repeats steps select parent solutions solution population 
selection biased highly ranked individuals population sorted fitness new individual generated parents application mutation crossover operators examples described adaptive mutation see standard point crossover fitness child calculated counting number tests satisfies fitness higher minimum fitness population child inserted appropriate rank location solution population 
time individual minimum fitness removed 
way population remains sorted fitness 
pseudo code describes basic cycle traditional single population ga sol select sol pop parent sol select sol pop parent child mutate crossover sol sol fitness child number tests satisfied insert child sol pop double population structure cga allows extend traditional ga ways 
replace fitness calculation ga partial continuous fitness evaluation occurs entire life time individual 
regime called life time fitness evaluation ltfe 
second allow populations 
extensions described motivated 
cga set tests plays prominent role traditional ga described 
fitness solution calculated basis tests encounters see life time tests 
fitness solution defined number tests satisfied solution encounters 
solution history contains results encounters test 
furthermore tests fitness 
fitness defined number times test violated solutions encountered 
tests solutions inverse fitness interaction just predator prey systems 
complete algorithm described follows 
solution test populations created 
typically members initial solution population randomly generated 
tests hand known come problem specification 
initial test population typically contains tests 
order calculate fitness initial solution counts total number satisfied tests randomly chosen tests 
similarly fitness test number solutions randomly chosen set solutions violate test 
cycle repeated 
solutions tests paired 
encounter solution checked respect test 
result encounter test satisfied case violation 
pay pushed history solution involved encounter 
time pay encounter removed solution history 
fitness solution updated set equal sum elements history 
corresponds number satisfied tests 
tests inverse happens get zero pay satisfied 
pushed history 
cases pay resulting oldest encounter history removed 
fitness sum pay offs history 
note just traditional single population ga populations kept sorted fitness 
consequence individual test solution move population result update fitness 
continuous partial fitness feedback resulting frequent execution encounters called life time fitness evaluation ltfe 
introduced 
execution encounters standard approach followed solution parents selected child created inserted solution population 
typically fitness new born solution initialized sum pay offs obtained encounters selected tests 
code describes basic cycle cga 
function toggle basic cycle implements inverse fitness interaction tests solutions 
changes vice versa 
times sol select sol pop test select test pop res encounter sol test update history fitness sol res update history fitness test toggle res enddo sol select sol pop parent sol select sol pop parent child mutate crossover sol sol fitness child insert child sol pop code solution population truly evolves 
test solution problems addressed require solutions satisfy fixed number priori tests 
general course evolve populations 
fact case example discussed section 
look benefits gained ltfe 
continuous partial nature allows early detection bad solutions solutions need checked respect tests 
chosen highly informative tests provide sufficient information 
true different stages genetic search 
general solutions generated run bad 
case need extensive testing 
rough indication quality sufficient 
due unlucky choice tests initial encounters fitness rated bit low encounters tend raise fitness 
stages ltfe advantageous immediately weeds clearly inferior offspring minimal computational expense 
solutions high fitness satisfy tests clearly inferior solutions spotted quite easily 
need check tests 
cga fitness tests allows biased selection tests 
consequence fit tests tests satisfied members solution population involved encounter 
words algorithm focuses difficult solved tests 
way ltfe negative fitness interaction coevolution nicely complement 
demonstrated applications described sections 
code additional parameters introduced number encounters reproduction number encounters calculate fitness solutions tests 
code experiments rest parameters set 

coevolutionary neural net learning classification section illustrates cga classification task depicted left part 
cga find appropriate connection weights nn represents correct mapping set classes pre classified randomly selected examples 
problem designed regions instance space corresponding different classes different degrees complexity class consists circular convex region class union disjoint convex regions consists non convex region union non convex regions 
left classification problem right neural net classifier right part depicts nn architecture standard layered feed forward network hidden layer consisting hidden nodes 
seen correct neural net classify example point belonging class classification pro follows coordinates clamped associated input nodes nn feed forward propagation executed standard sigmoidal activation function result classification class corresponding output node highest activity level 
nn said classify example correctly output node associated class active 
traditional ga cga applied classification task 
algorithms encode nns linear string weights weights belonging links feeding node located 
algorithms solution population nns 
traditional ga tests new born nn training examples 
fitness defined number training examples correctly classified nn 
table describes performance traditional ga classification task 
shows number offspring thousands generated nn level classification accuracy examples correctly classified obtained 
experiments repeated different crossover operators reproduction nns mutate crossover 
crossovers algorithms traditional cga point point point point twelve point uniform crossover 
crossover followed adaptive mutation operator 
probability mutating weight depends difference value weight parents 
difference larger results mutation rate 
smaller differences probability increases linearly reaching parents identical weight value 
mutation replaces weight offspring random value drawn interval 
crossover runs executed 
best far averaged runs 
traditional algorithm allowed generate total offspring 
table shows example average point crossover reaches solution correctly classifies examples generating offspring 
clearly crossover operators reaches average best far correct classifications allowed offspring 
pt pt pt pt pt uniform table traditional ga empirical results 
row gives performance ga particular crossover 
shows number offspring generated nn level accuracy obtained 
data obtained averaging best sofar runs cycles 
table shows performance cga 
addition solution population cga test population 
population contains pre classified training examples 
encounter nn classifies example paired 
result encounter classification correct incorrect 
discussed section basic cycle cga consists encounters followed generation nn 
due partial nature ltfe execution basic cycle cga times faster traditional algorithm 
cga allowed generate offspring 
uses little bit half time allocated traditional algorithm 
pt pt pt pt pt uniform table cga empirical results 
row gives performance ga particular crossover 
shows number offspring generated nn level accuracy obtained 
data obtained averaging best far runs cycles 
tables allow compare approaches dimensions computational demand solution quality 
measured number offspring needed attaining accuracy level 
difference execution time basic cycles computational demand algorithms equal cga requires times offspring traditional ga reach accuracy level 
comparison table clearly shows cga needs far triple ga number offspring 
outspoken higher levels accuracy 
levels cga needs generate roughly number offspring traditional algorithm point crossover 
times need offspring traditional algorithm achieve accuracy 
computational demand cga considerably smaller traditional ga addition cga clearly beats traditional algorithm terms solution quality 
despite shorter running time attains higher levels accuracy 
experiments easily reach accuracy level 
detailed empirical comparisons including performance increase resulting ltfe coevolution separately 
basically reasons considerable performance increase 
ltfe drastically reduces amount computing time spend fitness evaluation 
allows early detection bad solutions 
nn considered potentially put closer scrutiny 
second coevolution forces cga focus solved examples fitness proportional selection examples involved encounter 
point easily observed classification task examples situated near boundaries different classes high fitness value reside top population 
points hardest classify training examples neighbourhood belong different classes 
clearly shows 
left part depicts distribution training examples instance space 
right part hand shows fittest difficult examples intermediate stage search 
left distribution examples right distribution fittest examples summarising say combined ltfe coevolution cgas leads solutions reasonable time 
ltfe reduces computation demand coevolution increases solution quality 
results confirmed uses cga find neural network capable controlling 

coevolutionary constraint satisfaction investigation efficient algorithms solving combinatorial problems active area research 
large number real world problems combinatorial nature 
consider example area industrial planning looks order acceptance scheduling line balancing capacity planning project planning immediately confronted combinatorial nature 
problems belong class constraint satisfaction problems csps 
csps typically consist set variables associated domain possible values 
set constraints describe relations values 
value different value 
valid solution consists assignment values constraints satisfied 
example csp consider queens problem 
consists placing queens chess board queens attack row column diagonal 
frequently representation problem consists variables variable represents column chess board 
assignment example indicates queen positioned third row second column 
take value domain 
constraints problem simple row constraint diagonal constraint line prohibits queens placed row 
second line ensures queens diagonal 
column constraint queen allowed column implicit representation 
csps fit nicely cga framework 
problem solution population consists dimensional vectors containing integers constraints row constraints diagonal constraints constitute test population 
inverse fitness interaction 
solution receives reward satisfies constraint receives penalty case constraint violated 
constraint involved encounter result encounter opposite gets penalty solution encountered satisfies reward case violation 
fit solutions constraints involved encounter 
words solutions prove 
time algorithm concentrates satisfying difficult solved constraints 
queen problem example diagonal constraints rapidly move population 
check diagonals 
occupied board location constrain locations 
row constraints hand constrain board locations row 
experiments done queens problem 
constraints 
algorithms trad cga solution population size 
mutation changes component solution vector integer randomly drawn set 
furthermore point crossover 
cga clearly outperforms traditional ga cga finds times valid solution queens problem 
standard ga finds correct solution runs 
additional empirical results show combination ltfe coevolution boosts power cga 
mechanisms yields clearly inferior results 
total accordance findings obtained nn classification application described previous section 
application cga provides interesting approach known research issues gas 
involves problems high degree epistasis 
problems typically hard solve choices search solution closely coupled 
general highly epistatic problems characterized fact decomposition independent subproblems possible 
case difficult combine solutions subparts manipulation called building blocks solution problem 
bad news genetic algorithms gas typically search combining features different solutions 
small change solution highly epistatic problem drastically change quality solution 
holland showed problems relatively low degree epistasis operators splice parts different individuals yield solutions 
problems sets functionally dependent genes relatively small 
case possible string representation correlated genes placed near 
ga finds values genes split apart sexual reproduction 
values proliferate population 
analogously independent genes located far apart string 
little exploration suboptimal values genes get dis 
case typically results premature convergence 
general linear string sufficient place interacting bits near place non interacting bits far apart 
particularly case addressing problems high degree epistasis csps constraints induce interactions large number variables 
csp cga application described constraint checks consistency number genes variables 
values sets correlated genes combined order obtain global solution 
case approaches traditional positional crossover tends disrupt genes located far apart 
fortunately constraints checking difficult genes rapidly fit 
way search effort devoted genes 
particularly relevant problems consisting dependencies packed linear string 
queens problem example variable related variable 
uniformity constraints allow say variables tightly coupled 
matter fact degree interaction variables constant search space 
strongly depends assignment variables 
ltfe coevolution enables cga concentrate run time relevant difficult sets genes 
cga application contrasted approaches penalty functions take account degree invalidity solution 
success approaches critically depends choice penalty function 
ideally strike balance convergence suboptimal valid solutions penalty function harsh invalid solutions tolerant penalty function 
cga gives rise auto adjusting penalty function 
fitness evaluation kind penalty function counts number constraint violations 
changing ranking constraints biased selection constraints solutions tested allows cga focus difficult satisfied constraints 
words penalty function harsh better solutions 
informally say penalty function step quality solution population 
schoenauer observed gradually adding constraints evolutionary search improves results obtained 
cga automatically performs gradual tightening problem focusing satisfied constraints 
years gas extended deal specifically constrained optimization 
paredis proposed general method introducing domain knowledge constraint programming guide evolutionary search solving constraint problems 
michalewicz define genetic operators designed tackle problems involving numerical linear equalities 
fortunately cga incorporate domain knowledge just way ga code traditional single population ga integral subpart code cga 
extensions genetic representation operators ga incorporated cga 

symbiotic coevolution cgas section investigates symbiotic evolution solutions genetic representations ordering genes 
discussion building blocks previous section stressed importance difficulties choice genetic representation 
sec tion gave factors complicate choice 
know epistatic interactions advance 
matter fact weak search methods gas typically attack problems little knowledge available 
linear ordering sufficient express epistatic interactions 
problems suggest combine search solution search representation 
goal find optimal representation exist anyway 
important representation particular moment reflects state search process 
certain subproblem solved individuals population correct values genes encoding subproblem 
genes put apart 
crossover disrupts genes receive different value individual 
reason representation reflect state search process 
certain subproblem solved reordering allows concentrate subproblems epistatic linkages 
symbiotic coevolution offers way obtain tight interaction solutions representations 
consists positive fitness feedback success side improves chances survival 
representation adapted solutions currently population speeds search better solutions turn progress optimally representation 
section describes symbiot symbiotic cga tested problems varying degrees epistasis 
test problems described 
companion investigates performance symbiot known deceptive problem fixed degree epistasis 

test problems class test problems taken 
goal solve matrix equation ax matrix dimension ndimensional vector 
dimensional real valued vector 
equivalently system linear equations solved ij 
sign inversion allows fitness function identical reported ij diagonal elements randomly chosen set 
diagonal elements zero problem epistatic component contributes corresponding setting diagonal entries non zero degree epistasis increased non zero diagonal elements higher degree epistasis 
elements diagonal ii immediately non zero th equation couples due transitivity means components coupled 
array non zero diagonal elements gradually increase degree epistasis setting elements immediately diagonal non zero 
procedure order control degree epistasis 
order allow easy experimentation chosen components solution system equations equal 
experiments reported equal matrix contain components 
instances belonging class problems described performance traditional single population ga critically depends representation 
extreme cases choice representation irrelevant 
epistasis non diagonal elements zero 
case different orderings string give average performance 
extreme elements immediately diagonal different zero representation perform equally poorly 
main problem traditional single population ga uses priori defined representation 
subsection describes symbiot gets problem 
symbiot just cga described symbiot uses coevolving populations 
population contains permutations orderings consists proposed solutions problem solved 
member solution population represented dimensional vector containing real numbers 
vector uses priori chosen representation 
th element representation represents value clear representation 
main purpose canonical representation allow uniform fitness calculation 
vectors initial solution population filled real numbers randomly drawn interval 
permutation represented dimensional vector describes re ordering solution genes 
permutation represented vector example reorders genes solution fifth bit canonical solution comes place seventh bit place permutation 
example reverses ordering genes solution 
code describes basic cycle symbiot 
immediately observe strong resemblance code cga section 
matter fact symbiot simple extension cga 
encounters involve solutions permutation 
individuals involved encounter selected respective population 
fitter individuals selected 
selected permutation perm applied solutions 
resulting gene strings processed standard point crossover mutation order generate offspring 
permutation constructs representation operated crossover 
applies perm child order canonical representation fitness calculated 
formula section calculate fitness 
canonical representation child inserted population solutions appropriate rank 
encounter results birth new solution 
times sol select sol pop sol select sol pop perm select pop sol child mutate crossover perm sol perm sol sol child inv sol child perm sol fitness sol child insert sol child sol sol pop fitness sol fitness sol sol update history fitness perm enddo perm select pop perm select pop perm child enhanced edge recomb perm perm perm init perm fitness perm child insert perm child perm perm pop step fitness permutation needs defined 
previous cga applications fitness sum pay offs received encounters permutation involved 
fitness give indication quality permutation 
described permutation puts relevant functionally correlated genes near 
unfortunately symbiot priori knowledge epistatic interactions genes 
discover correlations 
solution fitness feedback 
encounter permutation receives pay equal average fitness parents divided fitness child permutation average generate children 
case pay fitness permutation relatively large 
obviously measure highly noisy tested large number encounters 
ltfe takes care lifetime individual frequently involved encounter 
difference predator prey cga applications discussed population permutations undergoes lifetime fitness evaluation 
solutions rated immediately birth formula 
difference predator prey cgas populations really reproduce evolve 
reproduction permutations remains discussed 
reproduction occurs encounters 
important information permutation exact position genes relative order adjacency information genes placed nearby 
child permutation inherit information parents 
starkweather introduces enhanced edge recombination genetic operator designed specifically purpose 
operator 
remember fitness values solutions negative 
order initialize fitness permutation init encounter executed permutation selected solutions 
elements history new born permutation initialized pay encounter 
major advantage ltfe permutations prove time 
way ltfe averages noise fitness evaluation permutation 
mutation source noise 
may change fitness child considerably especially dealing highly epistatic problems pay received permutations 
fortunately biased selection individuals involved encounter permutation considered prove 
ltfe allows permutations keep changes solution population vice versa 
subsection introduces traditional single population gas 
empirical performance comparison algorithms symbiot allows get better understanding symbiot power 
fixed rand single population algorithms 
algorithm called fixed traditional ga described section 
uses best possible representation dimensional vector ordered ascending index 
representation give lower performance extreme low high degrees epistasis representations bound perform average equally poor 
contrast symbiot fixed advantage uses best possible representation 
symbiot hand find representation 
words symbiot solve set linear equations solve representation problem 
symbiot expect strong competition fixed 
experiments subsection allow compare performance algorithms problems different degrees epistasis 
second single population ga called rand generates couple parents random permutation applied crossover mutation 
inverse permutation applied child 
order calculate fitness insert population appropriate rank 
code describes rand basic cycle sol select sol pop sol select sol pop perm random perm sol child mutate crossover perm sol perm sol sol child inv sol child perm sol fitness sol child insert sol child sol sol pop fixed rand priori defined representation reproduction 
random ordering generated reproduction ensures average genes equal probability transmitted coming parent child 
performance comparison rand symbiot subsection allows assess value symbiot evolutionary accumulation groupings genes permutation population 
empirical results mentioned symbiot concurrently performs searches solution permutation 
intuitively expect constitutes considerable overhead solving problems low degree epistasis 
high degrees epistasis problem crop fitness calculation permutations reliable 
small changes solutions highly epistatic problems give rise large changes fitness 
fitness landscape epistatic problems rugged uncorrelated 
permutation alleviate problem representation correlation fitness child parents remain low 
symbiot unfair confronted high degrees epistasis blames permutation bad offspring generated 
experiments described section allow determine degrees epistasis symbiot performs 
experiments size solution permutation populations respectively 
accordingly single population algorithms rand fixed solution population size 
results averaged runs 
series experiments reported 
compares symbiot single population algorithms described 
done problems different degrees epistasis 
second series experiments shows grouping functionally related genes symbiot 
performance comparison different problems 
ascending degree epistasis problems named trivial simple medium complex 
matrix non zero diagonal elements 
differ number non zero elements immediately diagonal 
problems elements zero 
trivial problem epistasis diagonal elements zero 
simple slightly epistatic variables linked pairwise 
pairs non overlapping 
formally set linkages 
linkages realized setting elements tot non zero assigned values randomly drawn set 
examples linkages 
set linkages medium complex respectively 
medium variables completely interlinked 
addition linked complex variable depends variable 
series problems gradually adds epistatic links 
graphs show evolution average fitness solution population time problems described 
graph scale size 
allows easy comparison 
axis represents number solutions generated 
unfair number executions algorithm basic cycle axis 
symbiot generates solutions cycle encounters initialize fitness new permutation 
fixed rand hand generate solution cycle 
observations data depicted 
clearly lower fitnesses obtained degree epistasis increased 
takes longer average fitness solution population large depicted 
choice representation influence performance solving non epistatic trivial problem 
independence 
accordingly upper left graph shows algorithms rand fixed symbiot comparable performance 
looking simple small differences start appear 
fixed symbiot perform equally 
rand slightly worse 
expect performance fixed 
representation placed ascending order ideal problem strictly neighbouring genes interact 
looks symbiot able keep fixed rand random representations starts difficult time keeping 
trend pronounced medium 
fixed unable cater tight interactions variables 
symbiot clearly outperforms fixed 
performance evolution average population fitness test problems rand hand poor 
addition standard deviation performance rand fixed considerably larger symbiot 
arrive complex completely epistatic problem 
algorithms perform poorly 
standard deviation performance data considerably larger fixed rand symbiot 
say comparison rand fixed symbiot able operate larger range degrees epistasis 
results indicate symbiotic evolution helps symbiot focus representations 
experiments subsection investigate greater detail 
obviously maximally epistatic problems rugged uncorrelated fitness landscape solutions permutations provides little information guide search 
symbiot grouping related genes 
second set experiments allows assess degree permutations group functionally related genes 
term average defining length set pairs genes introduced 
step central calculation permutation pair genes computes far permutation puts genes apart 
words distance genes calculated 
example certainly clarify consider permutation puts gene position position 
distance points 
average defining length set pairs genes average distance pair genes set member permutation population 
measures degree permutations group pairs genes 
bit problem described means permutation population size distances averaged compute average defining length set containing pairs genes 
simple problem 
remember simple set linkages 
curve labelled related depicts evolution average defining lengths set paired genes time 
axis represents number solution offspring generated thousands 
results averaged runs 
sees steep drop average defining lengths 
drop initial just 
words initially related variables average distance apart gene string 
average separation drops little bit 
curve labelled unrelated depicts average defining lengths pairs unrelated variables 
sees curve fluctuates 
difference curves shows symbiot clearly exhibits clear selective pressure grouping related variables leaving unrelated genes apart 
grouping genes solving simple 
solution offspring unrelated related point requires explanation average defining length linked variables gradually increase initial drop 
reason search pairs related variables solved different moments 
time solution important permutations group variables involved 
way genetic material spread quickly population 
words individuals population get values pairs variables 
happened probability losing genetic material crossover fairly low 
selection pressure keeping values 
selection pressure promote permutations group frequently solved variables 
stages run solutions get similar 
result selective pressure group particular genes decreases 
experiment repeated problem higher degree epistasis 
problem called consists sets variables 
exactly set linkages 
problem linkage away total epistasis 
variables completely interlinked 
true variables 
curve labelled related gives average defining length shortest schema substring containing shortest schema containing example permutation puts variables positions respectively defining length equal 
curve unrelated hand averages defining lengths variables trend seen related curve quickly drops gradually increases 
unrelated curve hand remains fairly stable initial value 
curve smooth 
mainly due higher level epistasis 
explained subsection fitness evaluation permutations reliable higher degrees epistasis 
grouping genes solving 
solution offspring unrelated related experiments described show symbiot exhibits distinct selective pressure grouping interacting genes 
important point remains 
experiments symbiot point crossover recombine solutions 
operator high positional bias probability genes inherited parent strongly positively correlated proximity gene string 
operators lower positional bias point worse uniform crossover negatively influence performance symbiot 
crossover high positional bias large probability leave genes grouped permutation 
words relation fitness child parent estimator goodness permutation 
consider extreme happens uniform crossover create offspring 
case fitness child completely independent permutation applied parents crossover 
selective pressure permutations group related genes 
experiments described quantify influence positional bias crossover performance symbiot 

steady state reproduction noise ltfe 
syswerda introduced term steady state reproduction atime reproduction systems genitor 
systems robust 
perform best problems deterministic fitness evaluation function 
noisy fitness functions pose serious problems steady state reproduction systems 
consider example individual due noise assigned high fitness 
steady state systems fitness remains associated individual long stays population 
time overestimated genetic material may spread population 
problem occur generational replacement 
case generation creates entirely new population calculates fitness members anew generation 
individual re evaluated time survives generation 
way noisy evaluations substantially decrease reliability sampling 
ltfe provide way deal noise steady state reproduction 
due continuous fitness feedback averages noise fitness evaluation 
symbiotic cga application described clearly illustrates 
currently author setting experiments demonstrate quantify noise tolerance 
research described takes challenge described davis published steady state reproduction noisy evaluation functions possible modifications steady state algorithm devised outperform generational replacement problems 
fertile topic research 

related research reported differs lot research field artificial life uses coevolution solve known problems computer science artificial intelligence 
coevolution emerge built 
furthermore cgas designed solve problems 
constructed find adequate survival behaviors simulated world 
approach followed hillis provided basic inspiration 
predator prey interactions sorting network architectures sets lists numbers sorting networks tested 
ltfe cgas robust fine grained 
incorporation ltfe important difference hillis 
defined large class problems solved cga 
addition cga easily extended incorporate symbiotic interactions 
various links research genetic algorithms pointed 
competitive fitness 
angeline pollack describe competitive fitness follows competitive fitness function calculation fitness dependent current population degree 
cgas new type competitive fitness function differs aspects previous approaches 
cga operates populations containing different types individuals neural networks versus training examples solutions csp versus constraints 
second bias encounters continuous nature ltfe 
pair wise competition pattern cgas best called biased continuous 
described relevant respect symbiotic cga 
introduces cooperative coevolutionary genetic algorithms 
algorithms tested domain function optimization 
way natural decomposition fixed number subcomponents parameters function optimized exploited 
population contains values parameter 
fitness particular value estimate cooperates populations produce solution 
involves global synchronous communication populations 
multiple interacting species solve existing man problems 
basic mechanisms quite different identity individuals fitness calculation 
cgas require knowledge decomposition solutions 
particular application symbiotic cga addresses known problem finding genetic representations 
inversion operator randomly changes ordering genes probably oldest approaches problem 
unfortunately proven unsuccessful 
probably due random nature inversion operators 
contrast inversion genetic algorithms symbiot reorderings random 
solutions 
advantages 
allows incremental construction permutations permutations 
way symbiot exploits evolutionary accumulation small improvements 
symbiot finds permutations reflect state search process 
words concentrates solved subproblems 
contrast static approaches determine run representation 
symbiot gets rid traditional fixed coding approach 
stick usual fixed length coding 
contrast messy gas described 
price paid dropping fixed length coding fitness needs defined incomplete solutions 
fixed length coding symbiot rely assumption 
research text introduces coevolutionary genetic algorithms 
combines coevolutionary framework life time fitness evaluation 
partial continuous nature ltfe ideally suited deal coupled fitness landscapes 
coevolutionary interacting species typically give rise coupled landscapes 
ltfe combination coevolution advantages increased performance terms solution quality computation demand noise tolerance 
interestingly predator prey cga symbiotic cga offer different ways dealing problems relatively high degrees epistasis 
symbiotic approach totally knowledge free 
approach hand uses domain knowledge form constraints 
clearly cga inspired coevolution occurs nature 
hand cga solve man problems 
result coevolution mechanism cga differs ways nature 
difference cga fixed population size coevolving populations 
excludes possibility species going extinct 
notion topology spatial distribution individuals simplified 
furthermore problem characteristics lead various differences nature 
predator prey models test solution problems example tests evolve 
test population contains time tests 
hand argue ltfe closer reality traditional fitness calculation 
problem characteristics impose type fitness calculation 
case symbiot example ltfe rate permutations 
solutions evaluated fitness calculation 
different avenues research cgas open exploration 
cgas applied different problems problem classes 
case classes cgas predator prey symbiotic ones 
second usefulness complex coevolutionary interactions remains studied 
example think interacting populations symbiotic relations possibly coexist 
topics briefly mentioned need investigation 
parallel implementation cga 
fine grained nature cga allows easy parallel implementation 
massively parallel architecture processor containing solution copy test 
efficient machine level shift operations change partners involved encounters 
local selection reproduction implemented fine grained parallel genetic algorithm de scribed 
point certainly warrants research 
life time learning integration ltfe deserves investigation 
results initial experiments integration learning cga reported 
acknowledgments author melanie mitchell comments suggestions 
author indebted roos marie bal proofreading 
research sponsored part european union brite project 
psycho 
angeline pollack 

competitive environments evolve better solutions complex tasks 
forrest ed proceedings fifth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
davis 
ed 

handbook genetic algorithms new york van nostrand reinhold 
eshelman caruana schaffer 

biases crossover landscape 
schaffer ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
fogel atmar 
comparing genetic operators gaussian mutations simulated evolutionary processes linear systems journal biological cybernetics pp 

springer verlag 
goldberg korb deb 

messy genetic algorithms motivation analysis results complex systems pp 

hillis 

coevolving parasites improve simulated evolution optimization procedure 
langton taylor farmer rasmussen 
eds artificial life ii pp 

redwood city ca addison wesley 
holland 

adaptation natural artificial systems ann arbor univ michigan press 
michalewicz 

handling constraints genetic algorithms 
belew booker eds proceedings fourth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
paredis 

genetic state space search constrained optimization problems 
proceedings thirteenth international joint conference artificial intelligence pp 

san mateo ca morgan kaufmann 
paredis 

steps coevolutionary classification neural networks 
brooks maes eds proceedings fourth international workshop synthesis simulation living systems artificial life iv pp 

cambridge mass mit press bradford books 
paredis 

coevolutionary constraint satisfaction 
davidor 
schwefel manner eds proceedings third conference parallel problem solving nature lecture notes computer science vol 
pp 

berlin heidelberg springer verlag 
paredis 

symbiotic evolution solutions representations 
eshelman ed proceedings sixth international conference genetic algorithms 
san mateo ca morgan kaufmann 
paredis 
submitted 
coevolutionary process control 
paredis 
submitted 
coevolutionary life time learning 
potter de jong 

cooperative coevolutionary approach function optimization 
davidor 
schwefel manner eds proceedings third conference parallel problem solving nature lecture notes computer science vol 
pp 

berlin heidelberg springer verlag 
richardson palmer liepins 

guidelines genetic algorithms penalty functions 
schaffer ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
schoenauer 

constrained ga optimization 
forrest ed proceedings fifth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
manderick 

massively parallel genetic algorithm implementation analysis 
belew booker eds proceedings fourth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 


fine grained parallel genetic algorithm applications ph dissertation free university brussels 
starkweather mcdaniel mathias whitley 

comparison genetic sequencing operators 
belew booker eds proceedings fourth international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
syswerda uniform crossover genetic algorithms 
schaffer ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
whitley 

genitor algorithm selection pressure rank allocation reproductive trails best 
schaffer ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
whitley 

optimizing neural networks faster accurate genetic search 
schaffer ed proceedings third international conference genetic algorithms pp 

san mateo ca morgan kaufmann 
