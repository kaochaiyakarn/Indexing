object fault handling persistent programming languages performance evaluation antony hosking eliot moss object systems laboratory department computer science university massachusetts amherst ma key mechanism persistent programming language ability detect handle non resident objects 
ideally mechanism hidden programmer allowing transparent manipulation data regardless potential lifetime 
term mechanism object faulting deliberate analogy page faulting virtual memory systems 
presents number mechanisms detecting handling persistent objects evaluates relative performance implementation persistent smalltalk 
persistent programming features database systems programming languages allow seamless manipulation data regard potential lifetime transient persistent 
achieve language provide mechanism detection handling persistent data 
ideally mechanism hidden programmer persistent data transparent possible 
term supported national science foundation ccr ccr digital equipment western research laboratory systems research center sun microsystems 
authors reached internet addresses hosking moss cs umass edu 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
proceedings acm conference object oriented programming systems languages applications washington dc sep pp 
mechanism object faulting :10.1.1.34.5174
analogy page faulting virtual memory deliberate intent provide illusion persistent virtual heap objects potentially larger physical virtual memory 
access objects detected managed object faulting mechanism triggers automatic retrieval objects persistent storage disk demand 
effect persistent objects cached memory manipulation program 
considers number implementations object faulting 
divide attention mechanism non resident objects detected way object faults handled 
compare schemes detecting non resident objects checks software exploiting page protection mechanism operating system detect non residency trapping non resident objects 
explore orthogonal design choice just objects resident object fault 
naturally faulting object object available program number additional objects available 
making object resident may require objects resident 
constraints observed object fault handler program execution resume 
advantage faulting object object fault straightforward may reduce number object faults required execution program 
may result data available program absolutely necessary execution 
addition comparison alternative implementations object faulting contributions include description architecture persistence performance evaluation established benchmarks prototype persistent programming language implemented framework 
remainder organized follows 
section surveys related distinguishing study previous ones 
succeeding sections describe system architecture rationale competing implementations object faulting benchmarks comparison experimental setup methodology results 
related systems attempted extend address space programs addressed directly available hardware 
virtual memory represents extension memory address space program physical memory 
virtual address translation allows transparent access data regardless physical memory location 
operating system responsible trapping pages resident physical memory non resident page fetched disk process caused fault resume execution 
object oriented programming languages typically allow dynamic allocation data objects heap 
objects referred unique object identifiers oids just virtual memory referred virtual addresses 
entire heap fit virtual memory oids represented direct virtual memory pointers 
limits size heap virtual address space 
extending size heap addressed virtual memory requires oids virtual memory addresses 
systems ultimately perform translation oids memory pointers allow program manipulate data 
loom represents earliest attempts extend size heap addressable machine word 
goal provide extended virtual memory support smalltalk systems machines narrow bit word width 
object pointers stored bits disk object table translate short long forms 
object brought memory bit persistent pointer hashed find entry object table 
memory object indirected object table entry 
object contains objects converted short form process termed swizzling 
resident objects converted memory short object pointer 
non resident objects represented memory pointer leaf lambda 
leaf resident proxy object represents object disk containing sufficient information locate object 
lambda place holder null pointer pointer object assigned short pointer 
suppose particular object field contains lambda 
determine object field refers means accessing long form stored disk obtain long address 
object faults loom triggered explicit checks isolated certain operations smalltalk interpreter 
leaves distinguished bit object table entry 
objects containing lambdas specially marked 
object fault handled retrieving object disk converting memory format 
object time transfer objects memory disk major loom system smalltalk objects small unit transfer 
implementors loom acknowledge speculate refinements system group objects transfer memory disk 
system takes similar approach loom implementation persistent smalltalk system object table translate object pointers memory addresses 
performs swizzling object pointers external identifiers translated dereferenced 
gemstone effort expand smalltalk heap include objects disk 
extends smalltalk provide considerable database functionality including queries query execution model 
gemstone integration smalltalk systems totally seamless virtual image modified include proxy objects act forwarders gemstone objects 
proxies full blown objects virtual image fully visible applications programmers 
carry additional burden delivering database functionality supported gemstone 
systems extended smalltalk way provide form persistence 
consider performance overheads persistence accepting costs necessary support functionality desire 
interested exploring design space implementing persistent programming languages evaluating performance number mechanisms object faulting 
white dewitt compared performance number architectures systems perform object faulting pointer swizzling 
systems considered study include objectstore commercially available object oriented dbms number software architectures exodus storage manager esm 
architectures esm require program manipulate objects call interface modifications performed client buffer pool esm opposed virtual memory space application 
white dewitt introduce new scheme epvm avoids call overhead object caching 
objects retrieved client buffer pool esm interface 
copied virtual memory application originals buffer pool 
modifications directly virtual memory 
transaction commit modified object virtual memory corresponding original pinned updated esm buffer pool call esm 
white dewitt explored versions caching scheme 
copies objects time buffer pool virtual memory accessed application 
second copies objects page buffer pool object page accessed 
white dewitt object caching scheme performs pointer swizzling objects resident cache converted direct memory pointers 
object includes bit table indicating slots contain direct pointers contain unswizzled oids 
translating oid means probing hash table containing pointers cached objects caching object resident 
epvm performs swizzling discovery location containing unswizzled persistent object discovered usually result loading perform operation location updated direct pointer object 
objectstore final architecture considered white dewitt takes dramatically different approach 
objects faulted pointers swizzled page mapping scheme similar virtual memory 
exact details proprietary mechanisms object faulting swizzling approach similar texas system described detail 
results obtained white dewitt indicate object caching attractive architecture persistent programming languages 
small databases entire database fit main memory caching objects page time best little extra overhead copying pages versus objects fewer copying operations needed 
larger databases fit main memory page caching copy objects unnecessarily 
results double paging pages cached virtual memory object caching mechanism paged virtual memory manager 
comparison objectstore produced mixed results 
cold database performance obtained running benchmarks database starts entirely disk possibly remote database server worse objectstore architectures esm 
small database objectstore exhibited best warm performance large database performance worst 
white dewitt suggest results indicate cost mapping data process address space 
speculate due high overhead fielding page protection traps operating system fault non resident pages 
contrast white dewitt consider performance different architectures chosen keep basic architecture fixed varying mechanisms detect handle object faults 
architecture described section similar object caching architecture white dewitt 
representations non resident objects lightweight white dewitt mechanisms fault detection 
round trip measured tight loop ultrix decstation 
note generally acknowledged best operating system implementations trapping page protection faults 
segments application memory space database server possibly remote objects old new objects segment segment client buffer pool memory mneme swizzle system architecture texas system uses page mapping scheme similar objectstore fault objects swizzle pointers 
persistent object assigned virtual address page virtual memory reserved access protected page persistent store contains object 
offset object persistent page known allowing virtual address object reserved virtual memory page calculated 
accessing page triggers virtual memory page trap 
texas handles trap reading persistent page store mapping previously reserved virtual page 
pointers page swizzled reserving virtual memory pages objects refer assuming referenced pages mapped virtual memory 
persistent replaced virtual memory addresses faulted page unprotected execution resumes 
execution proceeds pages reserved wave front just ahead faulted swizzled pages guaranteeing application see virtual memory addresses 
wilson kakkad report promising preliminary performance results implementation persistent texas 
beauty texas requires little modification existing language support persistence 
indicated fielding page protection trap operating system expensive operation 
software mediated object faults realized augmenting programming language implementation offer competitive performance question explore 
system architecture rationale architecture see bears close resemblance object caching architecture white dewitt 
objects copied demand virtual memory address space program buffer pool persistent storage manager case mneme persistent object store 
copying includes translation needed convert objects form acceptable program including pointer swizzling 
choice architecture driven desire give language implementation maximum control objects manipulated application having go restrictive interface underlying storage manager 
particular standard programming language techniques memory management including garbage collection manage objects resident program virtual address space 
unit transfer permanent database mneme buffers physical segment may arbitrary size large limit 
physical segment may contain number objects 
objects physical segment grouped logical segments 
logical segment may contain objects logical segments physical segment full possibly new objects allocated 
grouping objects transfer disk memory eliminates performance bottleneck experienced loom retrieved objects time 
target object faulted fault blocks stand non resident objects fault block indirect block non resident object resident object indirect block bypassed garbage collector node marking detecting object faults mentioned previously object faulting requires mechanism distinguish resident non resident objects 
mechanisms may loosely divided categories depending strategy adopt 
purposes discussion view persistent heap directed graph objects nodes objects edges 
edge marking schemes take approach tagging objects 
tagged swizzled direct pointer corresponding object memory non swizzled consists oid 
approach epvm 
apparent disadvantage edge marking oids fetched pointer fields objects passed stored accessing target object 
target object accessed origin may longer known 
white dewitt got swizzling discovery loaded location assuming load precursor performing operation target object 
solution may swizzle eagerly ultimate reason loading determined time load 
node marking schemes require object resident objects converted pointers 
objectstore texas achieved reserving necessarily allocating virtual pages objects referred pointers protecting pages trap access pages 
approach similar loom leaf objects small proxy objects call fault blocks stand non resident objects illustrated 
fault block contains oid target object distinguishable ordinary object 
followed refers fault block target object resident copied swizzled necessary 
fault block changed point resident object see 
call updated fault block indirect block 
followed refers indirect block target object located cost indirection 
occasional scanning possibly garbage collector bypass indirect blocks shown 
tagged oids fault blocks may detected explicit checks pointer dereference 
alternatively fault blocks allocated protected virtual memory pages dereferencing pointer fault block trapped handled making target object available 
approach exploit indirection implicit method invocation schemes object oriented programming languages folding residency checks overhead method invocation approach effect persistent smalltalk system study described detail section 
swizzling object resident pointer fields swizzled mechanism employed fault detection 
fields referring objects resident converted point directly objects mneme supports mapping efficiently hash table 
edge marking convert tagged oid node marking converted point fault block non resident object fault block allocated exist target object 
architecture leaves open possibility copying swizzling number objects time mneme buffer pool memory 
study consider granularities naturally inherent architecture individual objects logical segments physical segments 
swizzling just object time advantage copying swizzling objects needed immediately program continue execution 
serve minimize object fault latencies including swizzling memory consumption 
swizzling logical physical segment time may take advantage clustering physical layout objects database 
objects segment mapped swizzled intra segment converted direct pointers 
static clustering approximation dynamic locality access program speed program execution improve fewer object faults occur 
persistent smalltalk prototype persistent programming language experiments implementation smalltalk extensions support persistence 
underlying permanent storage managed mneme persistent object store 
smalltalk implementation definition goldberg robson consists components virtual machine virtual image 
virtual machine implements bytecode instruction set smalltalk source code compiled primitive functionality 
retained standard bytecode instruction set goldberg robson implementation virtual machine differs somewhat original definition 
virtual image derived early commercial version smalltalk minor modifications 
implements smalltalk functionality smalltalk development environment including editors browsers bytecode compiler class libraries class objects smalltalk sense 
booting smalltalk environment involves loading virtual image memory execution virtual machine 
persistent implementation smalltalk places virtual image mneme database smalltalk environment booted loading subset objects image sufficient resume execution virtual machine 
retained original bytecode instruction set changes virtual image minor 
extensions persistence virtual machine carefully augmented persistent objects resident needed executing image 
object faulting computation smalltalk proceeds sending messages objects 
message consists message selector number arguments 
effect sending message invoke method receiver message 
invoking method may thought procedure call 
method executed determined dynamically message selector class receiver 
class object smalltalk pointer method dictionary associates selectors compiled methods 
compiled method consists bytecodes implement method literal frame containing shared variables constants message selectors method bytecodes 
determining method execute message sent proceeds follows 
receiver class checked see method dictionary contains message selector 
method invoked 
search continues superclass object class hierarchy 
matching selector run time error signalled 
described far method lookup process expensive 
reduce lookup cost method lookup cache 
entries cache store selector class compiled method 
proceeding full method lookup selector class hashed index entry cache 
selector class cache entry match message send compiled method 
full lookup takes place updating corresponding cache entry 
discussion message sends illustrated just objects accessed computation proceeds 
performance reasons crucial bytecode interpreter perform residency check object follow 
overcome impose certain residency constraints critical objects restricting residency checks message sends follows 
computation driven sending messages objects resident message sent 
send bytecodes load receiver class method lookup 
object resident require class resident class field swizzled direct pointer 
way eliminate need residency check class probing method lookup cache 
edge marking smalltalk implementations typically avoid allocating individual objects things integers tagging object pointers representing integer value directly tagged pointer 
objects termed immediate value may obtained immediately object 
cope message sends check pointer tag receiver 
immediate values mapped class tag dereferencing object pointer obtain class 
edge marking non resident objects represented tagged immediate oids immediate representation character nil true false 
mneme oids bits leaving plenty room map special class represented null pointer method responds messages faulting target object forwarding message 
method lookup cache loaded response time message sent oid subsequent message sends proceed explicit residency check 
full method lookup deal case class null priming method cache appropriately 
node marking similar trick obtain check free message sends node marking 
fault indirect blocks distinguished objects class field containing direct pointer class contains tagged oid indirect pointer 
similarly implementation edge marking arrange fault blocks respond messages faulting corresponding object forwarding message resident object 
full method lookup performs residency checks detect fault indirect blocks priming method cache appropriately sends fault indirect block occur additional checks 
implementation page protection variation fault blocks achieves effect sure virtual machine sees resident objects 
loading class fault indirect block cause trap 
trap handler pages containing fault indirect blocks overwrites offending fault block indirect block arranges load instruction caused fault restarted direct pointer resident object 
fault indirect block pages resuming execution virtual machine 
addition elimination indirections garbage collector fault block implementation aggressive elimination indirections 
object fault system scans transient non persistent objects including active stack frames eliminate fault blocks converted indirect blocks 
maintain remembered set page allocated fault blocks recording persistent objects pointer tag bit machine 
mneme bit oids allow keep size fault blocks bits 
fields swizzled refer fault block page 
object fault objects remembered set scanned fields contain pointers ex fault indirect blocks updated bypass indirection 
way source locations fault block swizzled avoiding repeated loading faulting adopt eager swizzle discovery approach white dewitt 
expect particularly important page protection variant preempting unnecessary expensive page traps 
residency constraints addition constraint object contain direct pointer class impose restrictions elide residency checks bytecodes virtual machine 
method resident usually invocation literals literal frame resident 
forces selectors constants shared variables referred bytecodes resident 
force objects referred shared variables resident 
permits bytecodes accessing selectors constants shared variables literal frame performing residency checks 
short need residency checks stack bytecodes 
stack frames objects smalltalk system may persistent 
requiring stack frames active process resident eliminates residency checks return bytecodes 
summary preloading objects critical forward progress computation able restrict residency checks message sends 
experiments compared versions virtual machine varying schemes object fault detection tagged oids fault blocks page protection granularity swizzling object logical segment physical segment time virtual machine shared variables represented association objects fields name value 
primitive methods perform additional residency checks objects need access receiver message 
running completely resident virtual image ordinary non persistent smalltalk image faulted demand persistent smalltalk 
table enumerates variants 
mentioned earlier fault block schemes fb pf variants eliminate indirections object fault scanning transient space processing remembered set page containing faulted fault block 
apply technique explicitly checked fb schemes page trapping pf counterparts order obtain straight comparison 
despite fact explicitly checked fb schemes cheaply bypass indirections encountered scanning remembered set processing adds substantial additional overhead fault 
contrast page trapping pf schemes aggressive eliminating indirections indirect blocks reside protected pages access trapped 
benchmark database benchmarks drawn oo object operations benchmarks 
oo benchmark database consists collection part objects indexed part numbers range exactly connections part parts 
connections randomly selected produce locality connections closest parts remainder randomly chosen part 
closeness defined parts numerically closest part numbers 
part database benchmarks implemented entirely smalltalk including tree index parts 
mneme database including smalltalk image parts data consumes physical segments total size just mbytes 
physical segment kbytes size may larger smalltalk objects larger kbytes allocated private segment 
average logical segments physical segment 
newly created objects clustered segments encountered essentially breadth traversal similar copying garbage collectors 
part objects bytes size including object header 
outgoing connections stored variant description non persistent non persistent id resident non persistent augmented checks needed tagged oids fb resident non persistent augmented checks needed fault blocks pf resident non persistent augmented page trap handling code plus necessary support decode load instructions cause trap id obj persistent tagged oids swizzle object time id persistent tagged oids swizzle logical segment time id persistent tagged oids swizzle physical segment time fb obj persistent fault blocks swizzle object time fb persistent fault blocks swizzle logical segment time fb persistent fault blocks swizzle physical segment time pf obj persistent fault blocks allocated protected pages swizzle object time pf persistent fault blocks allocated protected pages swizzle logical segment time pf persistent fault blocks allocated protected pages swizzle physical segment time table schemes measured experiments rectly part objects 
string fields associated part connection represented separate smalltalk objects bytes 
similarly part incoming connections represented separate object containing parts source connections 
tree index parts consumes kbytes 
benchmarks lookup traversal portions oo benchmarks operate follows ffl lookup fetches randomly chosen parts database 
part null procedure invoked arguments type fields part 
ffl traversal fetches parts connected randomly chosen part part connected hops total parts possible duplicates 
similarly lookup benchmark null procedure invoked part arguments type fields part 
benchmarks intended representative data operations engineering applications 
lookup benchmark emphasizes selective retrieval objects attributes traversal benchmark illuminates cost raw pointer traversal 
measure typically run times system cold database cached apart schema system information necessary initialize system 
successive iteration fetches different set random parts 
run series benchmark iterations chill program executed client sequentially read mbyte file server 
ensures operating system file buffers client server flushed database segments iteration truly cold 
addition cold warm iterations measured elapsed time hot iterations traversal benchmark hot iteration initial part warm iterations 
hot runs guaranteed traverse resident objects free overheads due swizzling retrieval non resident objects 
varied number hot iterations performed data point gathered order obtain linear measure cpu overheads fault detection excluding swizzling disk accesses schemes 
experimental setup client machine benchmarks run decstation mips cpu clocked mhz running ultrix 
system mbytes main memory operating system disk buffers 
smalltalk interpreter coded compiled gnu compiler gcc version optimization level 
benchmarks run client system single user mode process address space locked main memory prevent paging 
database accessed remotely nfs 
server sparcstation running sunos mbytes main memory database resides gbyte external scsi disk 
client server connected private ethernet 
measured elapsed time client machine custom timer board having resolution ns 
fine grained accuracy timer allowed measure elapsed time phase execution separately running time swizzling time spent retrieving physical segments disk 
experiments repeated times configuration results averaged 
run exactly database updates committed 
note nth iteration benchmark run access parts nth iteration benchmark run script controls execution benchmarks presents sequence random part identifiers run 
results report results benchmarks 
times reported seconds exclude mips trademarks mips computer systems 
decstation ultrix registered trademarks digital equipment 
operating system official patches installed fix bugs mprotect system call 
sparcstation trademark sparc international licensed exclusively sun microsystems 
sunos trademark sun microsystems 
scheme elapsed time average non persistent id resident fb resident pf resident cold warm id obj id id fb obj fb fb pf obj pf pf table lookup smalltalk initialization time prior benchmark 
figures schemes identified names specified table 
lookup results lookup benchmark summarized table 
give average elapsed time iterations non persistent variants database resident warm cold warm times persistent variants 
variants exhibit marginal variation performance indicating overhead runtime residency checks negligible 
curious id resident fb resident schemes perform slightly better non persistent smalltalk augmented residency checks 
speculate improvement due underlying cache effects 
results persistent schemes naturally interesting 
fb obj pf obj schemes clear loss object time faulting results frequent object faults fewer objects resident fault 
iteration object time schemes experience object faults 
performance poor object iteration cold warm non persistent id obj id id fb fb pf pf lookup fault incurs significant overhead eliminate indirections 
fb obj better pf obj page trapping approach incurs significant overhead trap object faults manipulate page protections swizzling 
fb obj behaves poorly refrain eliminating indirections object fault indirect blocks frequently encountered traversing dereferencing extra level indirection performed relatively cheaply 
similarly cold times fb schemes improved substantially performing indirection elimination outperform id schemes cold starts 
may preferable expend effort eliminate indirections fb schemes system gets warmer cost traversing indirections important 
contrast pf schemes expensive page protection trap occurs time indirect block encountered making early elimination indirections important 
compare schemes effectively plotted performance expanding scale focus warm run performance omitting poorly performing fb obj pf obj variants 
non persistent smalltalk results plotted baseline 
id schemes ranked eagerness swizzle swizzling objects time reduces number locations containing oids 
id schemes significantly competitive 
fb pf schemes behave similarly warm performance close optimal due aggressive approach taken eliminate indirect blocks 
software mediated fb schemes marginally better page trapping pf approach runs incur object faults swizzling 
reason page trap handler decode contents registers time fault order fix faulting impose natural code sequence potential fault site interpreter 
yields slight run time performance penalty pf schemes 
schemes illustrated show immediate warmup iteration touches database bring database physical segments mneme client buffers objects swizzled quickly 
fb pf schemes exhibit noticeable warming effects iteration additional objects swizzled buffers 
fifth iteration iteration cold warm non persistent id obj id id fb fb pf pf traversal schemes sufficient objects resident proceed object faults 
id schemes dominated overhead convert oids direct pointers masking faults occur 
traversal summarize traversal benchmark results table 
non persistent variants show marginal differences elapsed time indicating overhead run time residency checks slight 
results persistent variants show object time faulting schemes worst performance due increased fault swizzling costs imposed indirection elimination 
omit fb obj pf obj plotting results 
warming effect slower lookup benchmark despite fact iteration accesses parts 
due locality encoded connections parts replicated clustering group objects physical segments 
traversals touch parts physical segments resident mneme client buffers connection scheme elapsed time average non persistent id resident fb resident pf resident cold warm id obj id id fb obj fb fb pf obj pf pf table traversal hot iterations non persistent id obj id id fb obj fb fb pf obj pf pf hot traversal traversals needing serviced disk access 
id schemes warm quickly performance bounded overhead translating oids pointers fb pf schemes penalized indirection removal 
indirection removal pays fourth iteration pf eighth iteration pf resident part converted direct pointers database resident execution proceed object faults 
hot traversals hot traversal results plotted give idea run time cpu costs schemes absence object faults swizzling overheads 
obtained excellent linear regression fits results model bx elapsed time number hot iterations run 
expected fitted axis intercepts close zero 
interesting slope measure time traversal table 
results confirm drawbacks id schemes showing oid conversion significant run time scheme slope non persistent id resident fb resident pf resident id obj id id fb obj fb fb pf obj pf pf table estimated elapsed time hot traversal overhead 
id schemes ranked eagerness swizzle swizzling physical logical segment time allows converted direct pointers oids recall oids updated direct pointers 
fb pf schemes hot performance close non persistent smalltalk convert resident object direct pointers 
importantly software mediated residency checks fb schemes pose insignificant overhead hot execution 
results conclusive establishing software object fault detection mechanisms provide performance close optimal surpassing performance comparable hardware assisted schemes 
achieved careful assumptions residency 
particular object oriented execution paradigm allows residency checks elided residency checks restricted method invocation 
approach applied language includes dynamic binding method calls arranging fault blocks respond methods faulting target object forwarding invocation 
shown pays eager object swizzling swizzling related objects advance application need 
compilation fact results obtained interpreted language taken lightly run time overheads times higher compiled programs 
see reason results carry compiled setting relative overheads object fault detection handling change respect total execution time 
languages modula enforce pure object oriented style execution enables residency checks piggy backed method invocation 
operations object performed necessarily invoking method 
means explicit residency checks compiled code advance operations ensure object resident 
compiler optimizations may allow explicit residency checks merged eliminated 
example control flow information may reveal multiple traversals particular object execution path require residency check check traversal 
look forward exploring effect techniques forthcoming implementation persistent modula 
architectures acknowledge architectural framework considered 
example chosen copy swizzling approach may possible applications manipulate objects directly client buffer pool 
discussed reasons choice grounds flexibility management resident objects 
performance study white dewitt indicated architecture superior considered 
recognize page trapping approach allocates fault blocks protected pages compare directly memory mapped file approaches objectstore texas 
particular objectstore effort allow objects mapped directly memory locations originally allocated reducing eliminating need swizzle pointers object fault 
results stand relative comparison object faulting techniques fixed architectural framework 
reasonable assume relative standing fault detection mechanisms remain underlying persistent object storage architecture changes 
summary summary explored design space mechanisms detecting handling persistent objects compared performance prototype persistent programming language 
importantly demonstrated object faulting viable alternative hardware assisted techniques adding persistence programming language necessarily imply degradation performance 
eric brown enhancements mneme support 
western research laboratory digital equipment jeff mogul particular giving high resolution timing board necessary supporting software 
atkinson bailey chisholm cockshott morrison 
approach persistent programming 
computer journal nov 
carey dewitt richardson shekita 
storage management objects exodus 
kim lochovsky editors object oriented concepts databases applications chapter pages 
acm press addison wesley new york new york 
cattell skeen 
object operations benchmark 
acm trans 
database syst mar 
cheney 
nonrecursive list compacting algorithm 
commun 
acm nov 
dearle shaw zdonik editors 
proceedings fourth international workshop persistent object systems martha vineyard massachusetts sept 
published implementing persistent object bases principles practice morgan kaufmann 
goldberg robson 
smalltalk language implementation 
addison wesley 
harbison 
modula 
prentice hall new jersey 
hosking 
main memory management persistence oct 
position oopsla workshop garbage collection 
hosking moss 
compile time optimisations persistence 
dearle pages 
hosking moss 
compiler support persistent programming 
coins technical report university massachusetts amherst ma mar 

virtual memory narrow machine object oriented language 
proceedings conference object oriented programming systems languages applications pages portland oregon sept 
acm sigplan 
nov 
krasner 
loom large object oriented memory smalltalk systems 
krasner editor smalltalk bits history words advice chapter pages 
addison wesley 
lamb landis orenstein weinreb 
objectstore database system 
commun 
acm oct 
moss 
design mneme persistent object store 
acm trans 
inf 
syst apr 
nelson editor 
systems programming modula 
prentice hall new jersey 
object design objectstore user guide oct 
release 
maier 
integrating object server worlds 
acm trans 
office inf 
syst jan 
richardson 
compiled item faulting new technique managing persistent language 
dearle pages 
richardson carey 
persistence language issues implementation 
software practice experience dec 
schuh carey dewitt 
persistence revisited implementation experiences 
dearle pages 
singhal kakkad wilson 
texas efficient portable persistent store 
proceedings fifth international workshop persistent object systems pages san italy sept 
straw 
object management persistent smalltalk system 
software practice experience aug 
stroustrup 
programming language 
addison wesley 
ungar 
generation scavenging non disruptive high performance storage reclamation algorithm 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments pages pittsburgh pennsylvania apr 
acm sigplan 
may 
ungar 
design evaluation high performance smalltalk system 
acm distinguished dissertations 
mit press cambridge ma 
ph dissertation university california berkeley february 
white dewitt 
performance study alternative object faulting pointer swizzling strategies 
proceedings eighteenth international conference large data bases pages vancouver canada aug 
morgan kaufmann 
wilson kakkad 
pointer swizzling page fault time efficiently compatibly supporting huge address spaces standard hardware 
proceedings international workshop object orientation operating systems pages paris france sept 
ieee press 
