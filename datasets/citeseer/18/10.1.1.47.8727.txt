laborious way data mining web log mining spiliopoulou institut fur wirtschaftsinformatik humboldt universitat zu berlin str 
berlin germany phone fax email hu berlin de web large source information turned knowledge 
part knowledge concerns usage web invaluable organization web sites meet purposes prevent disorientation 
data mining throw light various aspects web utilization 
major aspect discovery navigation patterns show new mining model necessary 
formalize notion navigation pattern introduce model navigation pattern discovery extending classical model association rules discovery establish processing framework model 
conventional tools association rule discovery sequence analysis deal discovery problem 
show preprocessors reduce search space actual mining phase 
information offered web grows daily obtaining information tedious 
attempts tame web human dimensions aim discovering structure hidden semistructured pages exploiting discover semantics 
main difficulty lays unstructured web content easily amenable external regulations enforcing standards structure 
time web rigid network structure main information acquisition mechanism navigation 
network pages connected obvious obvious reasons providers may fail ensure important offers reached interested users users subject disorientation due lost hyperspace 
deal problem families tools emerge 
family includes tools accompany user navigation learn behaviour suggestions way occasionally customize way 
alexa www alexa com sophisticated members family 
second family tools analyze activities users line 
goal provide insights semantics web site structure discovering structure utilized 
long term goal customization web site knowledge past usage family provide intelligence previous group tools 
software available nowadays task performs basic analysis web log files including statistical results traffic load access pages small page sequences 
detailed discussion concluding thorough analysis access patterns :10.1.1.2.3343
data mining methodology choice perform type analysis 
new field emerges issues discovery analysis web access patterns discussed cpy cms pe sf 
goal common discovery knowledge navigational behaviour users predict trends 
viewpoints quite different 
related 
miner proposed earliest works area cpy discovers statistically dominant paths methodology discovery association rules 
footprints tool records footprints left web site visitors accumulates frequently accessed paths 
pagegather tool pe uses clustering methodology discover web pages visited place group 
tool proposed ppr groups semantically relevant web pages 
considers text similarity topological proximity web pages frequency access individual links 
uses technique field information retrieval called spreading activation similarities measuring flow pipelines 
results grouping individual source page target page pairs achieved straightforward way generalizing approach longer paths 
webminer cms provides query language user initiate searches paths conforming sophisticated criteria high frequency access 
miners invoked process queries designed cope criteria cms miner association rules miner sequential access patterns incorporated webminer conventional tools slightly customized improve performance 
disadvantage approach necessity postprocessing module computes information required verify criteria language supported miner 
web log miner exploits olap technology prediction classification time series analysis web log data :10.1.1.2.3343
obtain interesting results web traffic analysis evolution user behaviour preferred pages time 
orthogonal issue assessing users behaviour detect prevent disorientation site redesign left open 
studies mining methodology borrowed known model clustering association rules sequence discovery adjusted pre postprocessing activities necessary 
generic problem pattern discovery addressed sa mt wan frequent patterns size discovered stepwise extended patterns larger sizes patterns satisfy threshold pruned step 
depending pattern sequence generic structure size increased step length sophisticated measure 
problem approaches dominant role assigned accesses page 
intuitively page visited user depends pages accessed 
better drr impact problem discuss small example 
example home page institution links anchors location guest 
anchor guest 
points postal address location points tour institution premises 
visitors looking postal address may take wrong turn navigate buildings different routes go back select link 
assume accessed time visitors looked postal address wrong turn 
tools assuming page revisit indicates new session cpy ppr navigation pattern 
tools clustering relevant pages pe may may find home page postal address semantically relevant interesting 
association rule guest 
little interest 
low confidence visited times total 
miner discovering sequences confidence find sequence second access postal address sequence special 
really strange sequence access postal address considered frequent visitors followed route wrong turn decided go back node route 
need miner distinguishes second visit skips nodes belonging tour buildings 
fact need miner discover generalized form sequence guest denotes visit propose miner 

study focus theory navigation patterns users web 
aim model navigation patterns attempting discover 
discussed necessary formalize known facts navigation pages path equal importance users tend revisit pages previously accessed tg 
formal model notion generalized sequence template variables 
providing formal model navigation patterns turn question discover mining techniques 
propose miner alleviates shortcomings techniques mentioned 
miner discovers generalized sequences conform template variables satisfy statistical thresholds 
operates tree structure original log file aggregated 
part web utilization miner project wum mining language sf visualization interface developed www hu berlin de wum 
navigational hints 
study organized follows section provide base definitions formalism modelling navigation pattern generalized sequence introducing statistical properties defining templates variables generalized sequences 
sequence discovery process applied aggregated version log file 
aggregation described section 
section describes miner 
section compare new mining paradigm existing paradigms appropriate discovery navigation patterns web logs association rule discovery sequence discovery 
show shortcomings discovery process depict useful ways exploiting pruning uninteresting data 
section concludes study 
routes reading sequential reading described 
alternative reading cover sections returning description log file aggregation presentation miner 
support reading kept section fairly self contained 
generalized notion sequence navigation pattern web conceived sequence web page accesses 
members sequence equal importance 
indicator fact frequently accessed pages site serving link collections 
noted missing link may hide relevance pages lend importance pages 
mining context summarizing behaviour users moving web 
formally describe navigation patterns way summarization parts traversed sequences performed traffic parts simply ignored 
achieve task define navigation pattern web generalized notion sequence materialization directed acyclic graph 
generalized sequence sequence may contain wildcards match element subsequence 
conventional sequences definitions section close models describing matching strings regular expressions 
aim different 
looking strings matching regular expression find sequences match expression containing wildcards variables subject restrictions number matches 
model problem rule discovery adjusting extending definitions domain necessary 
web log file sequences definitions set elements log file data entries kleene star operator 
denote empty sequence obviously web log mining set web pages site providing log mined 
pages keep meta data useful specify potentially interesting pages described sf 
study properties interest 
log file multiset recorded sequences 
simple set sequence may appear 
combination data entries sequences part data preparation phase described detail cms sf 
definition set elements 
sequence vector function length returns length function prefix returns subsequence comprised elements prefix say prefix denote array notation referring elements sequence denotes th element sequence want observe concatenation subsequences notation delta 
aspect stress context web access sequences concerns multiple occurences page sequence 
tauscher greenberg show tg web users tend move backwards revisit pages high frequency 
revisits may part guided tour may indicate disorientation 
case existence precious information retained 
model cycles sequence label element sequence occurence number sequence distinguishing second third occurence page 
augmentation implies pages sequences generalizations introduced distinct 
statistics sequences introduce statistics context sequences adjust measures proposed association rules discovery ats 
context association rules rule confidence probability event event exceeds avoid trivial rules required ab minimum support appear times log file 
definition sequences log file 
support support number sequences form delta arbitrary possibly empty subsequence 
notation support log file constant discussion 
lemma support empty sequence equal cardinality support jlj sequence form delta definition sequences log file 
confidence conditional probability delta equivalently percentage sequences contain delta containing confidence support delta support extended definition restrictive 
particular specify rule need directly concatenated separated third subsequence contents interest 
particular structure minimum maximum length appear specific position sequences recorded 
fact define support number sequences enforce appear position 
remove limitations extensions allow specifications structure sequences generalize notion sequence permitting wildcards 
second allow specification statistical structural restrictions subsequence context predecessors 
generalized sequences generalized sequences sequences elements belong set wildcards 
section formally define type sequence notion template vector variables ranging generalized sequences 
sequences wildcards outside set elements specify wildcard denoted low high having semantic matched sequence elements length low high low 
little abuse notation high may take special value indicating sequence arbitrary length 
denote wildcard range low high interest 
particular wildcard symbol furthermore specify outside set root symbol denoted having semantic indicating sequence prior element 
definition set elements root wildcard special symbols selected belong generalized sequence vector element belongs ii element element iii element equal root iv adjacent elements wildcards 
lemma sequence form 
gn fg gn statement holds insert dummy wildcard consecutive elements lemma introduce notion length sequences 
definition length sequence number non wildcard elements 
introduce notion match sequence part sequence 
intuitively element sequence wildcard matches wildcard matches sequence length falls range specified wildcard range 
formally definition sequence low high low high low subsequence subsequence segment needs say sequence matches iff delta delta xn deltay arbitrary sequence length low high 
delta length low 
holds say subsequence segment matches th segment low high 
segment treated particular way 
contains arbitrary element element may appear sequence contains root matched empty sequence implies segment matched example set web pages identified lowercase letters latin alphabet 
log file comprised sequences delta symbol concatenation omitted abcd delta delta delta 

sequence matched abcd matched abcd 

sequence bd matched 
sequence bd matched semantics bd 

subsequence matched sequences subsequence matched abcd elements qualify 
notion sequence introduced def 
formalizes intuitive term navigation pattern sequence accessed web pages interest 
discovery interesting access patterns web log discovery sequences satisfying statistical contextual criteria interestingness 
statistics sequences introduce statistic measures sequences 
notion support important measures computed 
generalize notion support introduced def 
follows 
definition log file sequences sequence 
see def 

support support number sequences form delta matches def 

lemma support empty sequence support equal cardinality support support jlj 
prefix sequence may form low high 
may wonder support values elements subsequence 
noted example matches elements support jlj 
prefix low high matched sequences having low high elements 
support prefix number sequences 
example set web pages identified lowercase letters 
log file comprised sequences abcd abcd 
note sequence appears twice jlj 
support abc abc appears sequence support ab sequence start abc second fifth start ab followed arbitrary subsequence resp 
de appears 

support cd sequence contain cd 
support cd sequence starts cd 

support ab forth sequence contain ab position 
support ab third sequence element ab 
example see lemma holds lemma sequence log file holds support support 
notion support define derived measures sequences similar way defined association rules 
definition log file sequences sequence sequence 
confidence equivalently confidence delta probability appearing confidence support delta support consider quality measure improvement adjusted respective measure association rules bl 
definition sequence sequence log file 
improvement improvement ratio improvement support deltas support support jlj support delta theta jlj support theta support measure takes importance account 
pointed bl improvement rule indicates better predicting improvement assuming occur anyway improvement 
context measure specifies better predict appearance assuming appear independently note closely related measure area classification models name lift bl 
templates generalized sequences introduced sequences extensions sequences 
sequence refers explicitly specified elements set discover sequences log file need notion template sequences 
definition sigma set symbols special symbols root wildcard belong sigma sigma sigma function sigma binding sigma iff 
sigma obviously sigma set variables 
fact sigma contains wildcard means allow anonymous variables 
binding mapping variables elements assigns anonymous wildcard variable 
definition template vector sigma conditions hold elements belong sigma distinct 
ii exists binding sigma delta delta delta length sequence 
call elements belong sigma named variables 
template vector variables distinct names mapped sequence binding function 
similarly lemma draw structure template 
lemma sigma template 
sigma fg sigma 
lemma says template vector segments element template wildcard 
follows def 
sequences 
stated element sequence element root definition sigma template length set solutions set fg uj sigma delta delta delta solution template sequence matching template 
member set sequence non wildcard elements bound named variables recalling def 
sequences matching sequence definition template length sequence satisfies iff function binds named variables elements way delta delta delta sequence matched general functions wildcard bound element wildcard ignoring elements example template fa dg abcd sequence 
sequence satisfies function produces sequence matched sequence abc satisfies binding function sequence cd satisfy listing possible binding functions see bind element implies sequence elements length 
practice interested solutions template certain interestingness criteria criteria may refer threshold values support confidence improvement sequence solution described subsection 
additional criteria may concern properties elements appear solution 
sf described language specifying criteria 
specification interestingness criteria reduces set solutions set interesting solutions 
solutions template far introduced notion generalized sequence specified sequence log file matches sequence def 

finding sequences match known string matching problem 
web log mining sequence discovery general sequence known advance 
find sequences matching template user generated template generator satisfying criteria 
sequences find sequences matching 
sequence discovery miner gsm extracts sequences satisfying set userspecified criteria 
criteria may concern statistical thresholds minimum support confidence improvement 
restrictions meta data web pages supported 
structure sequences terms number named variables possible restrictions wildcards specified template described 
example want discover solutions template support confidence 
formulate mining query mint sf 
node template support support support criteria specified url contents 
url contains environment url contains frame gsm processes line aggregated version log file extracts sequences conforming criteria human mining expert displays graph form 
section introduce semantics aggregated log file input gsm 
section contains analysis gsm 
obviously interest established mechanisms discovery association rules conventional sequences purpose 
section discuss shortcomings conventional miners show serve preprocessors actual mining phase 
section read sections 
aggregating sequences log file log file may contain duplicates 
sequences may common prefixes 
merge common prefixes transform log tree node annotated number sequences having prefix including node 
tree contains information initial log 
look sequences matching sequence satisfying template scan tree original multiset 
tree prefix shared sequences appears gets tested 
notion aggregate tree aggregate tree tree representation multiset sequences common prefixes merged 
formally definition set elements multiset sequences aggregate tree agt ree tree labeled nodes set edges set ae theta labels pairs set fg theta named element support respectively 
conditions hold 
label root root jxj 

tree branch sequence tree nodes 
root parent tree branches belong branch 

vector tb belongs agt ree iff edge root tb 
sequence length tb length tb element length tb 
length tb tb support equal number sequences form delta delta delta possibly empty subsequence 
sequence tree branch tb element parts labels tb constitute sequence having prefix 
agt ree directed root leaves 
definition sequences mapped tree branches 
condition states tree branch sequence starting including dummy root leaf node 
condition describes tree branch tb built sequence node tb tb annotated number sequences starting prefix number sequences support prefix def 

condition states sequences mapped tree branches way 
recorded sequences number accesses sequence 






element occurence support dummy node aggregate tree example log constructing aggregate trees example left side fig 
show multiset sequences 
avoid repeating sequence list annotated number times recorded multiset 
right side show agt ree accommodating sequences 
event sequences 
denotes occurence denotes 
retain page occurences explicitly reasons efficiency 
adding appearances sequences compute support sequence element 
similarly support sequence element 
event occurred respective aggregate tree node support 
example replaced set elements set theta element extended positive integer 
integer denotes occurence element sequence intended flatten cycles 
sets interchangeably explicit elements sequence 
aggregated log aggregate tree log file called aggregated log forms basis computations sequence discovery 
log file mining process 
reason aggregated log nodes useful aggregated information labels 
higher number common prefixes log lower number nodes aggregated log 
web log files common prefixes frequent site fixed number entry pages accessed 
usage aggregated log mining ensures potentially nodes accessed original log file 
sf describe aggregated log built log file web access entries 
short aggregated log constructed scan log 
initial scan grows incrementally merging new sequences recorded log tree branches 
algorithm sequence discovery sequence discovery miner gsm operates aggregated log tree described previous section 
goal discovery sequences conforming template variables see subsection satisfying number user defined constraints statistical thresholds 
gsm algorithm input gsm template possibly empty list predicates restricting statistics contents named variables gsm traverses aggregated log named variable gradually constructs tree branches constitute set solutions set sequences satisfying template criteria specified user mint query 
aggregated log trees denote nodes nodes avoid ambiguities 
definition multiset set multisets node tree node labelled pairs set theta label named content second label named support 
input template 
possibly empty set constraints output tree solutions satisfy constraints 
branches length constitute solutions named variables procedure gsm constraints 
scan aggregated log find nodes satisfy def 


create node oe nodes refer element set oe content equal multiset nodes 
set oe support equal oee content support recall def 
names labels aggregate tree nodes 

support new node satisfy statistic thresholds specified discard 

place remaining nodes dummy root contents interest 
nodes form level output tree node oe level gamma ffl node aggregated log belongs oe content 
scan subtree aggregated log rooted find path prefixes satisfy prefix element matching 
create node oe nodes match refer element 
node satisfy statistic threshold involved discard 

place remaining nodes oe 
nodes created form level traverse branch display graph gsm algorithm gsm algorithm proceeds constructing aggregated log shown fig 

gsm builds tree solutions breadth way 
traverses aggregated log find nodes satisfying template variable 
nodes referring element set correspond variable binding put constituting node nodes containing bindings variable form level subsequent step need scan aggregated log 
binding th variable possible subtrees nodes gamma th variable bound 
binding variable represented node level gamma gsm needs search subtrees aggregated log nodes contained node 
step gsm presentation solutions graph form 
describing algorithm explain behaviour gsm means example 
example assuming aggregate tree fig 
gsm described fig 
find templates form conditions hold mint syntax support support support order draw tree nodes trivial fit restrict support variable confidence variables build level nodes satisfying conditions violating 
tree solutions depicted fig 
explained 
level level level tree sequences solutions step build nodes level traverse aggregated log fig 
build node comprised nodes referring element 
fig 
see exist distinct elements resulting nodes oe oe oe oe oe oe oe 
built tested predicate variable discarded immediately predicate satisfied 
nodes remain shown level fig 

point see advantage aggregated log original log file node oe contains single node aggregated log build log file merge sequence elements 
similarly oe comprised nodes aggregates sequence elements log file 
level traverse subtree node belonging node level see ancestors node appearing node level arbitrary number content 
oe gsm builds nodes containing appearances rejected support 
oe nodes built discarded 
fig 
show retained discarded 
oe gsm builds node element appearing 
see support lower threshold variable discarded 
level proceed similar way 
show nodes built including rejected 
see nodes content built 
issue elaborated analysis 
tree nodes branches solutions input template 
solution sequence 
graph representation built algorithm display graph delta shown fig 

input branch tb length tb refers element output directed acyclic graph dag tb 
procedure gamma 
empty aggregate tree 

aggregated log node node tb insert aggregated log starts ends node tb 

aggregated log node node tb insert aggregated log starts common prefix branch belong node tb 
step root node tb support 

replace leaf nodes pointer root built 
aggregate tree tn single node tree root tb support 
algorithm display graph example continuing example build graph solution branch tb tb referring tb referring tb referring 
fig 
branch middle support values nodes computed adding supports individual nodes node tb support tb support tb support 
left side fig 
show branches contributing obviously branches common prefix prefix considered twice 
demonstrate show subtrees separate branches 
graph produced merging aggregate trees shown lower part fig 

small enhancement gsm 
example building nodes level removing satisfying conditions second variable left node level children 
implies node contribute solution second third variable template 
observation generalized templates variables 
particular node level children discarded memory construction subsequent levels starts 
removal parent candidate removal recursive fashion 
activity incorporated step loop counter fig 

graph representation sequence particular start node ptr oe level children perform loop moving root node ffl ptr children 
go parent ptr say parent previous level 

remove node pointed ptr 

set ptr parent 
loop improve space utilization removing useless nodes small computational overhead 
obviously expert interested solutions variables solutions subject removal copied temporary cache presentation discarded gsm versus apriori 
reader may noticed parallels gsm classic apriori algorithm discovery association rules 
levels built gsm counterpart frequent datasets extracted apriori level corresponds rules length containing items 
differences nature problems methods 
gsm maintain order sequences order preserving association rules order insensitive 
impact fact see example input template solution 


knowing assessments solutions start contain position 
search space gsm larger search space miner discovering association rules 
second gsm generate sequences cope wildcards 
order insensitive rules trivial requirement 
sequences 
particular see impact wildcards example nodes considered level different levels 
effect correctness results node refers aggregated log nodes 
considering branch subtree multiple times affects performance 
tackle problem designed optimized version gsm 
optimizing gsm optimized version gsm gsm reduces number subtrees considered follows 
augment nodes aggregated log properties reused available 
property reused counter initial value zero available boolean flag initialized false 

step scan subtree node belonging node level gamma look bindings satisfy binding ends aggregated log node matches add new existing node level 
ii create edge call edge edge 
iii increase value reused 
process nodes node level gamma way 

build nodes level processing node level gamma follows ffl node belonging process aggregated log node subtree rooted follows appropriate binding add sorted list list nodes 
value available false build sorted list nodes appropriate bindings list available 
merge list list 
decrease value reused 
reused threshold min reuse set available true 
discard list 
sort merge list build groups nodes identical place nodes gsm attempts better utilization resources trading space time 
lists bindings marked reusable cached reused quite memory space available 
space available keep reusable list cache long needed gsm scans subtree aggregated log 
gsm currently applicable templates node list described reusable branch yw xw yw satisfy wildcard upper boundary may qualify binding respect respect wildcard low boundary may qualify respect respect optimizations tradeoffs considered general case 
analysis compare processing cost discovering sequences gsm aggregated log cost processing original log file directly sequential way 
input template 
jlj number sequences length longest sequence max flength estimate number sequences solutions observe sequence contributes length matches potential solutions maximum sequence length upper boundary compute upper limit number combinations choose total number multiply number binomial coefficient total number sequences log getting delta sequences sequences matching put form output graph 
noted sequences length contribute solution increasing support common prefixes 
construction solutions accomplished pass log file 
upper boundary sequential discovery solutions ptime delta sequential mechanism apt optimizations 
instance keep track identical sequences avoid generating solution 
keeping track identical prefixes implies larger overhead tests temporary storage 
prefix solution violates statistical threshold automatically reject solutions prefix 
computing effect enhancement necessary purpose computation comparison gsm enhancement incorporated corresponds removal nodes children 
gsm applied aggregated log original log file 
sequences common prefixes merged aggregated log nodes number leaf nodes compute number leaf nodes define set set fx xn consisting sequences enumerated arbitrary way mask duplicates 
need measure decrease number nodes original log file aggregated log 
assume sequences inserted aggregated log order enumeration sequence set appears aggregated log sequence lower index number content generally prefix appears aggregated log sequence lower index number prefix 
note ordering sequences significant common prefix appear aggregated log independently enumeration 
length define ae set prefix prefix specify function returns minimum position sequence contributes elements aggregated log length function returns position largest suffix common sequences index smaller computations need function returning degree non overlap predecessors minfk gamma mg maximum length sequence gsm traverses aggregated log build solutions template accesses branches individual sequences 
equivalently say gsm accesses sequence far aggregated log degree non overlap variable gsm extract gamma bindings appears aggregated log elements considered potential matches extreme identical sequence considered case elements need considered 
variable gsm extract gamma gamma bindings upper limit 
binding variable gamma position gsm starts looking binding position 
possible tree sequential scan file strings 
number bindings extracted gsm sequence set upper bounded gamma delta gamma gamma delta delta gamma gamma delta 
gamma number zero gamma calculate total number bindings sum binomial coefficient sequences sequences skipped degree non overlap equal build graph solution gsm scans part aggregated log 
upper limit part scanned number aggregated log branches number leaf nodes ln fact gsm scans ln branches binding variables gamma nodes aggregated log branch subtree rooted considered node 
subtrees ignored 
upper limit processing time gsm finding solutions template aggregated log computed ptime gamma delta ln example consider log file aggregated log fig 

enumerate sequences listed left hand side abe bce adb abe bce adb abe bce adb abe bef cardinality log maximum length 
aggregated log branches ln 
degrees non overlap sequences easily calculated table template variables example processing time limit log file delta observing sequences length reduce number better upper limit delta delta delta recognizing identical sequences limit reduced aggregated log upper limit gamma delta eq 
example see gsm performs best sequences small low degree non overlap 
long sequences binomial coefficient tends dominant factor 
degree non overlap remains low negative effects trend performance remain limited 
conventional miners discover rules nature sequence discovery problem places discovery conventional association rules discovery frequent sequences 
mining models designed discover sequences 
section describe methods miner conforming models part sequence discovery process 
denote mining model association rules discovery asr sequential patterns discovery odel spm 
asr discover sequences rule discovered asr form ff ff conjunction elements negations elements belonging set rule ffl support support support ff defined similarly def 

ffl confidence confidence confidence ff defined ratio support ffb support ff goal guide rule discovery mechanism asr construction sequences 
input log 
input file asr set transactions 
transaction sequence log file depending algorithm may need observe transaction set timestamped ordered entries 
cases events occuring sequence augmented occurence number removed duplicates 
denote input file template asr 
sequence discovery specify template 
named variables subject statistical thresholds form support confidence asr template implies looking rules having form gamma condition support template translates new condition support respectively predicates confidence 
invoke asr find groups elements satisfying conditions 
association rule template solution 
rule produced asr necessarily solution original template wildcards restrictions formed foremost asr guarantee order conjunction supported sequences appears appears asr discovers superset solutions template 
fact invoke asr preprocessing step sequence discovery phase 
particular select sequences corresponding rules discovered asr smaller log input mechanism sequence discovery described sections 
extending asr 
asr model shows shortcomings sequence discovery recognize ordering consequence treat wildcards 
amend shortcoming extend miner augment sequences information reflect ordering way asr understand 
simple solutions augmenting element sequence position sequence 
presupposes asr understand predicate requiring position element larger value position element positions explicitly 
best knowledge miners asr model designed functionalities mind 
sophisticated solutions extending sequences encoding positions elements 
rule extended boolean expressions describing position element sequence 
questionable encoding exploited explicitly restricting positions elements 
dramatic increase rule length inclusion negations encoding prohibitive 
spm discover sequences conventional miner discovers classical sequences trails satisfying statistical property usually dominance 
principle followed miners sequential pattern discovery mt lays stepwise construction longer longer sequences long statistic properties sequences built satisfy threshold values set human expert 
possible spm preprocessing filter reduce original log frequent sequences 
may loose solutions way 
see small example 
example fa dg set elements web pages log file distinct trails abc appearing times adc appearing times 
sequence 
see support def 

support computation reflects fact subsequences matching wildcard interest 
conventional spm miner recognize wildcards 
instructed find sequences support return sequence single element adequate support taken account 
recognized trails meet 
spm filter non frequent sequences starting discovery process 
spm templates wildcards 
particular consider template effectively having wildcards prior variable spm find subsequences satisfy statistical constraints subsequences prefixes sequences may satisfy template 
extract complete sequences containing subsequences build new smaller log sequence discovery performed described section 
conventional miners 
procedures described discovery rules asr spm reveal types miners discover rules respectively sequences occasionally input actual discovery phase 
asr model advantage affected existence wildcards permitting generation rules length 
order rules generates restrictive desired sequences 
spm model advantage producing sequences guaranteeing order 
disadvantage wildcards parts desired sequences constructed 
decision asr spm appropriate preprocessor depends types rules desired 
input template contains wildcards asr 
part template consists adjacent named variables spm discover subsequences containing 
ee 
shown sequences discovered solely miners asr spm model 
miners invoked preprocessors reduce size input sequence discovery requires dedicated mechanism section 
mechanism applied aggregated form original log file aggregated log described section 
study formal model discovery navigational patterns web 
modelled graph navigation pattern generalized sequence sequence introduced notion template basis discovery sequences web log 
discovery process provided analytical procedure support web utilization miner wum 
existence excellent miners public domain commercial market considered possibilities exploiting building new software 
purpose studied capabilities mining models close problem hand requirements posed problem 
substantial extensions models sequences discovered 
hand existing models assist improving efficiency dedicated miner reducing search space 
study formal model sequence discovery step direction assessing knowledge web 
technical improvements necessary sequences expensive discover conventional association rules sequences 
theoretical needed produce models quality verification exploitation results 
area web log mining see major challenge proper exploitation knowledge human experts 
navigational behaviour users vital survival goals 
web opened new opportunities areas distance learning computer supported cooperative information dissemination large heterogeneous information systems 
proper exploitation mining technology assist success 
acknowledgment 
author wishes dept computer science fu berlin numerous useful comments establishment theory contribution wum project 
karsten winkler student berlin implementation wum design user interface persistent storage manager 
grateful anonymous referees useful comments nice example suggestion 
aef aumann oren etzioni ronen feldman mike perkowitz 
predicting event sequences data mining prefetching web pages 
submitted kdd mar 
rakesh agrawal ramakrishnan srikant 
fast algorithms mining association rules 
vldb pages 
rakesh agrawal ramakrishnan srikant 
mining sequential patterns 
icde taipei taiwan mar 
ats rakesh agrawal imielinski arun swami 
mining association rules sets items large databases 
sigmod pages washington usa may 
bl michael berry gordon 
data mining techniques marketing sales customer support 
john wiley sons 
cms robert cooley mobasher srivastava 
grouping web page transactions mining world wide web browsing patterns 
technical report tr dept computer science univ minnesota minneapolis usa june 
cms robert cooley mobasher srivastava 
web mining information pattern discovery world wide web 
dec 
cpy ming chen jong soo park philip yu 
data mining path traversal patterns web environment 
icdcs pages 
mt heikki mannila hannu toivonen 
discovering generalized episodes minimal occurences 
kdd pages 
pe mike perkowitz oren etzioni 
adaptive web pages automatically synthesizing web pages 
submitted aaai 
ppr peter pirolli james pitkow ramana rao 
silk sow ear extracting usable structures web 
chi www acm org sigchi chi proceedings vancouver canada april 
sa ramakrishnan srikant rakesh agrawal 
mining sequential patterns generalizations performance improvements 
edbt avignon france mar 
sf spiliopoulou wum tool web utilization analysis 
edbt workshop webdb valencia spain mar 
springer verlag 
extended version appear lncs 
spiliopoulou karsten winkler 
discovering interesting navigation patterns web usage data 
technical report 
tg linda tauscher saul greenberg 
revisitation patterns world wide web navigation 
chi atlanta georgia mar 
wan ke wang 
discovering patterns large dynamic sequential data 
intelligent information systems 
alan wexelblat 
environment aiding information browsing tasks 
proc 
aaai spring symposium acquisition learning demonstration automating tasks users birmingham uk 
aaai press 
zaiane man xin jiawei han :10.1.1.2.3343
discovering web access patterns trends applying olap data mining technology web logs 
advances digital libraries pages santa barbara ca apr 
