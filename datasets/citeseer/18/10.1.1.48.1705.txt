syntactic abstraction scheme robert hieb kent dybvig carl bruggeman dyb cs indiana edu indiana university computer science department technical report june revised july naive program transformations surprising effects due interaction introduced identifier previously existing identifier bindings introduced bindings previously existing 
interactions result inadvertent binding capturing identifiers 
complication results fact transformed program may little resemblance original program making correlation source object code difficult 
address capturing problem problem source object code correlation 
previous approaches capturing problem inadequate overly restrictive problem source object code correlation largely unaddressed 
approach new algorithm implementing syntactic transformations new representation syntactic expressions 
allows programmer define program transformations unrestricted general purpose language time helps programmer avoid capturing problems maintains correlation original code transformed code 
fundamental problem lisp macro systems respect lexical scoping 
expression substituted apparent bindings shadowed resulting unintended capture variable 
source serious difficult find bugs 
problem addressed kohlbecker friedman felleisen duba proposed hygiene condition macros macro expansion algorithm enforces condition 
unfortunately algorithm increases computational complexity macro expansion process 
additional problem equal practical importance lisp macro systems track source code macro expansion process 
order compiler run time system debugger communicate programmer terms original program necessary able reliably correlate source code macro expanded code 
source object correlation problem addressed optimizing compiler writers 
macro robert hieb died automobile accident april expansion process loses correlation source macro expanded code efforts compiler writer regard may wasted 
especially problematic scheme nearly syntactic forms implemented macros 
unfortunately techniques applied optimizing compilers directly applicable macro processors transformations performed known compiler writer transformations written user general purpose language 
presents macro system scheme preserves hygiene automatically adding constant overhead macro expansion process solving source object correlation problem 
system maintains referential transparency defined local macros clinger rees see section :10.1.1.53.5184
mechanism supports controlled form variable capture allows common capturing macros written violating spirit hygiene 
system notion syntax objects algorithm core lazy variant original algorithm 
algorithm extended support pattern variables controlled variable capture source object correlation 
system applicable macros written general purpose programming language scheme extends macros written high level pattern languages extend syntax 
systems proposed solve problems described section 
system proposed date ffl enforces hygiene macros written general purpose language constant overhead ffl solves source object correlation problem variables constants structured expressions ffl supplies hygiene preserving mechanism controlled variable capture ffl maintains referential transparency local macros 
remainder structured follows 
section discusses related 
section describes interface macro system examples 
section presents algorithm 
begins variant algorithm applied syntax demonstrates delaying part algorithm reduces expansion overhead constant shows correlation source object code maintained 
background various ad hoc techniques developed help prevent unintended variable captures 
capturing problems avoided generated names special naming conventions careful lexical scoping combined local procedure definitions 
unfortunately approaches capturing default programmer special avoid fact capturing rarely desired 
worse macros cause unintended captures immediately lie dormant program waiting unsuspecting programmer insert just right wrong 
variable name macro call context 
problems addressed kohlbecker friedman felleisen duba develop algorithm macro system automatically renames bound variables prevent inadvertent capturing 
fundamental notion underlying algorithm alpha equivalence equates terms differ names bound variables 
alpha equivalence basis barendregt variable convention assumes bound variables terms definitions proofs chosen different free variables page 
algorithm respects variable convention said hygienic 
traverses expression rewritten order give identifiers time stamps alpha conversion distinguish identifiers introduced different times transformation process 
unfortunately algorithm completely traverses expression rewritten increases worst case time complexity macro expansion process linear quadratic respect number expressions source code introduced macro expansion 
serious problem large programs heavy macros nearly large scheme programs 
clinger rees algorithm hygienic macro transformations quadratic time complexity original algorithm :10.1.1.53.5184
mark new identifiers introduced iteration macro transformation process opposed identifiers original algorithm 
system allows macros written restricted high level specification language easy determine new identifiers appear output macro 
macros expressed easily language developed low level interface requires new identifiers marked explicitly :10.1.1.18.3867:10.1.1.53.5184
bawden rees approach capturing problem different angle :10.1.1.18.3867
providing automatic hygiene system forces programmer explicit decisions resolution free identifier scope identifier bindings 
borrowing notion closures procedures embody environments free identifiers allow programmer create syntactic closures 
result system allows programmer avoid unwanted capturing introduce arbitrary capturing 
traditional closures syntactic closures environments constructed explicitly 
result mechanism difficult definitions created difficult understand verify 
alleviate hanson demonstrated restricted high level specification language supported clinger rees built top modified version syntactic closures 
clinger rees syntactic closures approaches responsibility enforcing hygiene convention placed macro writer underlying transformation algorithm large class macros written high level specification language 
furthermore convenient pattern matching facilities provided specification language completely abandoned class macros 
algorithms support local macro definitions referentially transparent sense macro introduced identifier refers binding point definition macro point macro 
extends notion hygiene local macro definitions handled algorithm 
automatic hygiene transparency low level system 
griffin describes theory syntactic definitions context interactive proof development systems 
supports high level definitions derived notations way definitions certain formal properties easy reason 
result system restrictive respect sort macros defined 
dybvig friedman haynes address source object correlation problem demonstrating proposed macro expansion protocol expansion passing style capable maintaining source object correlation presence arbitrary user defined macros :10.1.1.50.4332
mechanism handles structured expressions particular handle variable 
revised report scheme includes appendix contains proposed macro system scheme 
high level syntax rules system described version kohlbecker extend syntax restrictions imposed clinger rees :10.1.1.53.5184
revised report appendix describes low level system automatically preserves hygiene referential transparency requires manual destructuring input restructuring output 
low level system described revised report appendix proposed authors predecessor system described 
new system provides high level pattern language similar provided syntax rules powerful provide functionality low level system maintaining automatic hygiene referential transparency source object correlation 
detailed description features available system described extensive set annotated examples 
language new syntactic forms defined associating keywords transformation procedures transformers 
top level syntactic definitions take form define syntax keyword transformer expression transformer expression expression evaluates transformer 
expander encounters expression form keyword expression passed associated transformer processed expansion process repeated result returned transformer macro forms left 
scope syntactic definitions limited lexical binding forms syntax keyword transformer expression body letrec syntax keyword transformer expression body forms keyword denotes new syntax body case letrec syntax binding scope includes transformer expression 
language level fundamental characteristic system nature arguments passed macro transformers 
argument macro transformer syntax object contains contextual information expression addition structure 
contextual information expander maintain hygiene referential transparency 
traditional lisp macro systems ordinary list structured data represent syntax 
list structures convenient manipulate crucial syntactic information maintained 
macro writer ability distinguish different identifiers share name paramount importance 
information allow distinctions drawn contained syntax object 
transformers compare identifiers intended free identifiers bound identifiers symbolic data 
syntax objects may contain syntactic information direct interest macro writer 
system example syntax objects contain source annotations allow evaluator correlate final object code source code produced 
discussed section syntax objects may contain information efficiency reasons fully processed 
transformers decompose input syntax case rebuild output syntax 
syntax case expression takes form syntax case input expression literal pattern output expression syntax case evaluates input expression attempts match resulting value pattern clause 
value usually syntax object may scheme list structure 
value matches pattern output expression evaluated value returned value syntax case expression 
value match pattern value compared clause 
error signaled value match patterns 
list structure pattern specifies basic structure required value returned input expression 
identifiers literals list literal pattern variables match arbitrary substructure 
literals constants specify atomic pieces match exactly 
ellipsis represented special identifier specifies zero occurrences subpattern follows 
output expression pattern variables may syntax expressions matching portions input expression 
pattern variable bindings created syntax case shadow shadowed lexical macro keyword bindings pattern variables referenced syntax expressions 
syntactic construct syntax template introduce syntax objects 
form evaluates syntax object representing template way quote expression expression evaluates raw representation expression 
important differences values pattern variables appearing template inserted output contextual syntactic information contained template retained 
expressive power syntax case syntax renders low level system unnecessary 
simple rewrite rule systems syntax rules input patterns associated output expressions output patterns 
arbitrary transformations may performed output expression may scheme expression 
restriction raw symbols construction result identifiers introduced syntax 
low level proposals syntax case relieves programmer tedium pattern matching destructuring restructuring expressions provides level syntax checking macro programmers usually provide 
lost providing syntax case syntax place syntax rules fact syntax rules easily defined macro define syntax syntax rules lambda syntax case syntax rules lambda syntax case syntax syntax case syntax rules examples written syntax rules cases choice matter taste 
identifiers syntax expression ordinary variable refer closest lexical binding 
example gamma syntax minus lambda syntax case minus syntax gamma gamma minus returns gamma inserted macro minus refers outer binding case global case captured inner binding 
identifier system referentially transparent sense discussed section 
symbolic names distinguish identifiers symbolic data 
predicates free identifier 
bound identifier 
compare identifiers intended free bound variables context 
predicate free identifier 
determine identifiers equivalent appeared free identifiers output transformer 
identifier lexically scoped means free identifier 
id id true identifiers id id binding 
literal identifiers appearing syntax case patterns cond matched free identifier 
similarly predicate bound identifier 
determine identifiers equivalent appeared bound identifiers output transformer 
words bound identifier 
returns true identifiers binding capture scope 
general identifiers bound identifier 
original program introduced macro application implicitly see implicit identifier 
predicate bound identifier 
detecting duplicate variable names binding construct preprocessing binding construct requires detecting instances bound variables 
identifiers bound identifier 
free identifier identifiers free identifier 
may bound identifier 
consequence fundamental premise hygienic macro expansion identifier introduced macro transformer bind bound identifier input transformer 
identifier introduced macro transformer may refer binding identifier introduced transformer refer lexical top level binding 
possible distinguish identifiers intended symbolic data procedure syntax object gamma datum 
procedure strips syntactic information syntax object returns corresponding scheme datum 
identifiers stripped manner converted symbolic names compared eq 
symbolic identifier 
defined follows define symbolic identifier 
lambda eq 
syntax object gamma datum syntax object gamma datum macro definition uses bound identifier 
detect duplicate identifiers 
order macro completely robust ensure bound variables identifiers predicate identifier returns true argument identifier 
define syntax lambda define unique ids 
lambda ls null 
ls 
car ls ls cdr ls null 
ls bound identifier 
car ls 
cdr ls unique ids 
cdr ls syntax case unique ids 
syntax syntax lambda error syntax object gamma datum duplicate identifier occasionally useful define macros introduce bindings identifiers supplied explicitly macro call 
example wish define loop macro binds implicit variable exit escape procedure loop body 
strict automatic hygiene prevents introduced bindings capturing existing variable 
previous hygienic systems provided mechanisms explicit capturing typically allowing macro insert symbol expansion part original source program 
unfortunately means macros reliably expand macros explicit capturing 
system provides consistent way accommodate macros 
macro may construct implicit identifier behaves macro call 
implicit identifiers created providing procedure implicit identifier template identifier symbol 
template identifier typically macro keyword extracted input symbol symbolic name identifier constructed 
resulting identifier behaves introduced template identifier introduced 
example loop macro mentioned may defined follows define syntax loop lambda syntax case loop syntax exit id implicit identifier syntax loop exit syntax call current continuation lambda exit id syntax form introduces pattern variable bindings scope body definition shown 
mechanism may create aggregate identifier names typically required defining structure definition constructs common lisp macros 
procedure constructs implicit identifier aggregate name form namei namei structure name identifier id field name identifier id define aggregate identifier lambda id id name symbol string syntax object gamma datum id name symbol string syntax object gamma datum id sym string symbol string append name name implicit identifier id sym form expand set definitions including accessors field names constructed aggregate identifier 
syntax form loop example provides easiest way establish new pattern variable bindings 
possible syntax case usually results readable code 
example loop macro defined follows define syntax loop lambda syntax case loop syntax case implicit identifier syntax loop exit exit id syntax call current continuation lambda exit id syntax case manner surprising syntax defined macro terms syntax case define syntax syntax lambda syntax case syntax syntax syntax case list detailed description macro language examples 
algorithm traditional macro systems traditional lisp macro systems rely fact programs data representation textually internal structures 
shared representation exploited macro expansion program evaluation lisp systems provide evaluation procedure programs construct execute programs 
consequently concrete syntax lisp best seen consisting internal data structures text 
assume concrete syntax expressions exp defined data type consisting unspecified set constants const symbols sym structures built pairing 
signature specifies data type exp sym ae exp const ae exp cons exp theta exp exp car exp exp cdr exp exp pair 
exp bool sym 
exp bool subset sym symbols exp atomic elements 
const includes traditional lisp constants booleans numbers empty list 
variables range exp sym const respectively 
usual equations elements exp hold car cons cdr cons pair 
cons true sym 
cons false pair 
false sym 
true pair 
false sym false expand exp theta env expand case parse constant symbolic data variable variable application application expand expand symbolic data symbolic data function function expand variable macro application expand traditional macro expansion algorithm 
parse exp theta env parse constant parse variable variable parse application sym parse application variable parse macro application transformer parse quote symbolic data quote special parse lambda function lambda special traditional macro expansion parser 
shows traditional expansion algorithm simplified language 
expander assumed part standard evaluation process value program obtained eval expand init 
symbols quote lambda bound special initial expansion environment init symbols bound variable 
env sym transformer variable special transformer exp exp macro expansion parsing inextricably intertwined lisp 
shows expander driving parser relationship just reversed 
parser shown 
pattern matching hide details accessing expression parts 
constructors symbolic data communicate parser expander fully specified definition trivial 
ae constructors communicate expander evaluator 
hard see expansion algorithm serious hygiene problems 
prevent free variables inserted macro application captured program bindings expand exp theta env expand case parse variable variable resolve application application expand expand symbolic data symbolic data strip syntax data symbolic data function function expand subst variable fresh function expand subst pattern variable fresh macro application expand mark mark resolve fresh syntax binding expand subst eval expand fresh rec syntax binding expand subst eval expand subst fresh substitution macro expansion algorithm 
prevent bindings introduced macros capturing free identifiers program 
substitution macro system calculus alpha conversion circumvent hygiene problems caused program transformations 
actual name bound variable immaterial binding expression converted equivalent expression different names bound variables 
algorithm uses alpha conversion preserve hygiene macro expansion 
symbols data symbols variables distinguished reliably macro expansion name symbol data important naive alpha conversion viable traditional macro expansion algorithms 
algorithm alpha conversion possible abandoning traditional lisp identification variables symbols 
introduce new abstraction identifier maintains symbolic names variable names identifier role program determined 
alpha conversion accomplished replacing variable names bound identifiers 
shows substitution macro expansion algorithm 
parser shown modified operate identifiers symbols recognize new forms syntax letrec syntax syntax 
simplify presentation syntax letrec syntax restricted single binding 
restricted syntax expression single identifier 
identifier pattern variable syntax form evaluates value pattern variable result identifier 
unrestricted version straightforward generalization 
chosen parse exp theta env parse symbolic data parse variable resolve variable parse application sym parse application resolve variable parse macro application resolve transformer parse quote symbolic data quote special parse lambda function lambda special parse special parse syntax syntax data resolve pattern variable parse syntax variable resolve pattern variable parse syntax syntax binding syntax special parse letrec syntax rec syntax binding letrec syntax special substitution macro expansion parser 
add binds single pattern variable body syntax case defined terms 
pattern variables bound pattern variable expansion environment 
env sym transformer variable pattern variable special function resolve expand complete alpha substitution determine actual variable name identifier 
variable name output program variables look transformers syntactic variables keywords 
expanding binding expression subst replaces variable name bound identifier fresh variable name 
distinguish new identifiers introduced transformer input transformer output transformer freshly marked 
identical marks cancel new syntax retains mark 
expander handles sorts data symbolic introduced quote expressions syntactic introduced syntax expressions 
symbolic data stripped identifier substitutions markings syntactic data left intact 
mark subst generate elements exp treated constructors extended exp algebra 
mark exp theta mark exp subst exp theta ident theta sym exp simplified language considered adequate mark input transformer 
approach complex language constructs internal definitions expanded separately recombined binding expression 
cause complexity problems delayed substitution mechanism described section 
marks mark countably infinite set 
identifiers ident subset expanded exp domain 
identifier symbol subjected zero marking substitution operations 
intent subst replace variable name identifier expression symbol marking substitution operations interest insofar affect identifiers convenient think identity operations constants immediately propagated components pair 
assume case abandon assumption order avoid complexity problems 
mark subst mark cons cons mark mark subst cons cons subst subst function resolve determine variable name identifier 
resolves substitutions criterion substitution take place identifiers marks variable name 
resolve ident sym resolve resolve mark resolve resolve subst resolve resolve resolve auxiliary function determines identifier mark set ident mark theta fmg subst operator theta forms exclusive union cancels identical marks 
function strip simply undoes marking substitution operations strip exp exp strip strip strip cons cons strip strip strip mark strip strip subst strip identifiers free identifier 
resolve resolve 
identifiers bound identifier 
resolve subst fresh symbol far exp algebra considered abstractly 
concrete algebra ensure primitive accessors behave specified 
virtue equations constants pairs traditional representations 
identifiers represented distinguished triples form hs fm gi symbolic name variable name fm possibly empty set marks 
representation takes advantage fact strip interested symbolic name identifier resolve interested final variable name identifier 
intermediate substitutions substitutions succeed discarded affecting behavior accessors 
mark set identifier just 
marks represented integers 
representation identifiers implementation primitive operators straightforward 
mark adds mark mark field case removes 
subst replaces variable name field variable names marks leaves identifier unchanged 
strip extracts symbolic name identifier resolve extracts variable name identifier capturing procedure implicit identifier construct new identifier behaves introduced template identifier introduced 
implicit identifier called identifier symbol symbolic name implicit identifier create identifier resulted appeared place original input 
definition captures semantics imp id ident theta sym ident imp id imp id mark mark imp id imp id subst subst imp id supporting imp id means representation identifiers discard failed substitutions new accessor imp id observe 
intermediate substitutions unimportant substitutions fail mismatched marks discarded 
representation identifiers triples adapted replacing variable name identifier triple environment maps sym sym 
resolve apply environment symbolic name get variable name 
imp id simply builds new identifier triple environment marks lazy substitution macro system substitution macro system virtue providing intuitive alpha solution hygiene problem 
unfortunately implementation suggested expensive 
expense arises desire pairs transparent hygiene operations 
maintain transparency mark substitution operation propagated immediately identifiers expression 
consequently overhead incurred hygienic algorithm expansion step uses operations proportional size expression compared constant overhead traditional system 
precisely source complexity problem algorithm 
solve problem making substitutions markings lazy structured expressions 
eventually propagating identifier operations 
exp syntax reasonable structure accessors 
instance car mark cons mark alter definitions car accessors provide accessor exposes outermost structure expression pushing identifier information constituent parts expose exp exp expose strip expose mark cons cons mark mark functionality expose required implementation syntax case uses input value far necessary match input patterns 
remains construct concrete exp algebra 
expressions pending substitutions marks represented distinguished triples wrapped expressions form fm gi expression environment mapping ident sym fm set zero marks 
pairs symbols constants traditional representations 
avoid complexity problems additional constraints imposed 
particular expression component wrapped expression wrapped expression 
property maintained having expose combine mark sets environments pushes wrapping wrapped expression 
marks stick new elements introduced macro transformers wrapped expression mark generated macro definition generated macro 
practice mark field wrapped expression rarely mark 
consequently handling marks cheap complexity problems caused eager mark propagation algorithm avoided 
source object correlation note lazy substitution model adapted easily support source object correlation 
allow expression annotated information source extending exp additional constructor source exp theta annotation exp annotation annotation unspecified data structure provides information source expression location file 
source annotations passed expander evaluator provide debugging information 
add definition expand expand source source expand expander source annotations report errors detects 
operations ignore drop source annotations 
instance expose source expose mark source source mark id 
source id 
resolve source resolve expose drops annotations invisible procedures need examine structure expression 
previously constants sole class expressions unaffected syntactic operations 
constants annotated exposed examined 
source annotations implemented adding field wrapped expression structure section 
system syntactic closures augmented hanson clinger rees explicit renaming system compatible high level facility syntax rules described revised report scheme :10.1.1.18.3867
systems differ primarily treatment low level macros 
system extends automatic hygiene referential transparency low level systems require explicit renaming identifiers construction syntactic closures tedious error prone 
addition extended automatic syntax checking input destructuring output restructuring previously available highlevel macros low level 
fact system draws distinction high low level macros need completely rewrite macro originally written high level style needs perform low level operation 
provided mechanism correlating source object code introduced hygiene preserving mechanism controlled variable capture unique system 
important aspect treatment identifiers 
identifiers treated simple symbolic data hygienic systems macro writer tools respect essential properties 
provide tools introducing new identifiers hygienic referentially transparent manner constructing macros implicitly bind identifiers comparing identifiers intended free identifiers bound identifiers symbolic data 
designed provide macro system automatic hygiene scheme lisp dialects adapted languages programs data share structure 
providing mechanisms translate syntactic structures standard data structures accessors constructors different types syntax objects necessary express syntactic constructs language provided 
macro system described fully implemented implementation available ftp cs indiana edu 
contact second author details 
barendregt 
lambda calculus syntax semantics 
elsevier science publishers revised edition 
alan bawden jonathan rees :10.1.1.18.3867
syntactic closures 
proceedings acm conference lisp functional programming pages july 
william clinger :10.1.1.18.3867:10.1.1.53.5184
hygienic macros explicit renaming 
lisp pointers 
william clinger jonathan rees :10.1.1.53.5184
macros 
conference record eighteenth annual acm symposium principles programming languages pages january 
william clinger jonathan rees revised report algorithmic language scheme 
lisp pointers 
coutant 
doc practical approach source level debugging globally optimized code 
proceedings sigplan conference programming language design implementation pages july 
kent dybvig 
scheme programming language 
prentice hall 
kent dybvig 
writing hygienic macros scheme syntax case 
technical report indiana computer science department june 
kent dybvig daniel friedman christopher haynes 
expansion passing style conventional macros 
proceedings acm conference lisp functional programming pages 
kent dybvig daniel friedman christopher haynes 
expansion passing style general macro mechanism 
lisp symbolic computation 
timothy griffin 
definition top refinement interactive proof development systems 
phd thesis cornell university august 
chris hanson 
syntactic closures macro facility 
lisp pointers 
hennessy 
symbolic debugging optimized code 
acm transactions programming languages systems july 
eugene kohlbecker 
syntactic extensions programming language lisp 
phd thesis indiana university bloomington august 
eugene kohlbecker daniel friedman matthias felleisen bruce duba 
hygienic macro expansion 
proceedings acm conference lisp functional programming pages 
guy steele jr common lisp language 
digital press second edition 
joseph stoy 
denotational semantics scott strachey approach programming language theory 
mit press 
zellweger 
interactive high level debugger control flow optimized programs 
proceedings acm software engineering symposium high level debugging pages august 
