es shell higher order functions paul adobe systems incorporated byron network appliance fall re implemented plan command interpreter rc unix shell 
experience shell led wonder general approach design shells possible describes result experimentation 
applied concepts modern functional programming languages scheme ml shells typically concerned unix features language design 
shell simple highly programmable 
exposing internals adopting constructs functional programming languages created shell supports new paradigms programmers 
users think shell interactive command interpreter really programming language statement runs command 
satisfy interactive programming aspects command execution strange language shaped history design 
brian kernighan rob pike shell programming language core interactive environment 
ancestor current shells th edition bourne shell characterized simple semantics minimal set interactive features syntax reminiscent algol 
shell rc substituted cleaner syntax kept bourne shell attributes 
developments shells csh ksh focused improving interactive environment changing structure underlying language shells proven resistant innovation programming languages 
rc experiment adding modern syntax bourne shell semantics es exploration new semantics combined rc influenced syntax es lexically scoped variables class functions exception mechanism concepts borrowed modern programming languages scheme ml 
es standard shell constructs pipes redirection translated uniform representation function calls 
primitive functions implement constructs manipulated way functions invoked replaced passed arguments functions 
ability replace primitive functions es key extensibility example user override definition pipes cause remote execution path searching machinery implement path look cache 
superficial level es looks unix shells 
syntax pipes redirection background jobs unchanged bourne shell 
es programming constructs new reminiscent rc tcl 
es freely available anonymous ftp ftp white toronto edu 
es commands simple commands es resembles shells 
example newline usually acts command terminator 
familiar commands es cd tmp rm ex ps aux grep byron awk print kill simple uses es bears close resemblance rc 
reason reader referred rc discussion quoting rules redirection 
examples shown try aim lowest common denominator shell syntax understanding rc prerequisite understanding 
functions es programmed shell functions 
simple function print date yy mm dd format fn date functions called arguments 
es allows parameters specified functions placing function name open brace 
function takes command cmd arguments args applies command argument turn winter usenix january san diego ca es shell higher order functions fn apply cmd args args cmd example es apply echo testing 


testing 


note apply called arguments es assigns arguments parameters oneto assigned parameter 
example es fn rev echo es rev fewer arguments parameters es leaves leftover parameters null es rev far seen simple strings passed arguments 
es functions take program fragments enclosed braces arguments 
example apply function defined program fragments typed directly command line es apply cd rm tmp usr tmp command contains lot understand break slowly 
shell command usually split separate commands es fn cd rm cd rm es apply cd rm tmp usr tmp construct cd rm just way inlining function examples es es prompt 
default prompt may overridden interpreted es null command followed command separator 
lines including prompts cut pasted back shell 
examples italic fixed width font indicates user input 
command line 
called lambda 
takes form parameters commands effect lambda procedure waiting happen 
example possible type es cd rm tmp directly shell runs inlined function directly argument tmp 
thing notice inline function supplied apply parameter named apply function variable called note uses conflict es function parameters lexically scoped variables scheme 
variables similarity shell functions lambdas accidental 
fact function definitions rewritten assignments lambdas shell variables 
es commands entirely equivalent fn args echo args fn args echo args order conflict regular variables function variables prefix fn prepended names 
mechanism execution time name apply seen es looks symbol table variable name fn apply 
course possible execute contents variable dereferencing explicitly dollar sign es silly command echo hi es silly command hi previous examples show variables set contain program fragments simple strings 
fact intermixed es mixed ls hello wc world es echo mixed mixed hello world es mixed mixed variables hold list commands list lambdas 
variables versatile tools 
example variable function dispatch table 
keyword introduces lambda 
special character es surrounded white space 
poor substitute letter characters left standard keyboard special meaning 
winter usenix january san diego ca es shell higher order functions binding section functions mentioned function parameters lexically scoped 
possible lexically scoped variables directly 
example order avoid interfering global instance scoping syntax var value commands var lexical binding useful shell functions important shell functions variables 
es code fragments arguments commands stored variables capture values enclosing lexically scoped values 
example es hello world hi echo es hi hello world lexical binding redefining functions 
new definition store previous definition lexically scoped variable available new function 
feature define function tracing calls functions fn trace functions func functions old fn func fn func args echo calling func args old args trace function redefines functions named command line function prints function name arguments calls previous definition captured lexically bound variable old 
consider recursive function echo nl prints arguments line es fn echo nl head tail head echo head echo nl tail es echo nl applying trace function yields es trace echo nl es echo nl calling echo nl calling echo nl calling echo nl calling echo nl reader note cmd es command inverts sense return value cmd subject pattern matches subject pattern returns true subject pattern 
fact matching bit sophisticated pattern may include wildcards 
shells bourne shell rc support form local assignment known dynamic binding 
shell syntax typically var value command notation conflicts es syntax assignment zero words assigned variable dynamic binding syntax local var value commands var difference forms binding seen example es foo es bar echo fn lexical echo bar es lexical bar es local baz echo fn dynamic echo baz es dynamic foo variables addition prefix fn function execution described earlier es uses prefix search variables 
variable set foo variable gets evaluated time variable foo changes value 
example variable watch function winter usenix january san diego ca es shell higher order functions fn watch vars var vars set var echo old var var echo new var return watch establishes function parameters prints old new values variable set es watch es foo bar old new foo bar es old foo bar new return values unix programs exit single number reported statuses 
es notion exit status rich return values 
es function return number object string program fragment lambda list mixes values 
return value command accessed prepending command es fn hello world return hello world es echo hello world hello world example shows rich return values implement hierarchical lists fn cons return fn car return fn cdr return function cons returns function takes argument function run parameters car cdr invoke kind function returned cons supplying argument function returns second parameter respectively 
example es echo car cdr cons cons cons nil exceptions addition traditional control flow constructs loops conditionals subroutines es exception mechanism implementing non structured control flow 
built function throw raises exception typically consists string names exception arguments specific named exception type 
example exception error caught default interpreter loop treats remaining arguments error message 
es fn dir cmd dir throw error usage dir cmd fork run cd dir cmd es usage dir cmd es tmp ls webster socket yacc providing routine catches error exceptions programmer intercept internal shell errors message gets printed 
exceptions implement break return control flow constructs provide way user code interact unix signals 
error types known interpreter special meanings set arguments passed throw 
exceptions trapped built catch typically takes form catch args handler body catch executes body exception raised catch simply returns passing body return value 
hand invoked body throws exception handler run bound exception caused problem 
example lines replaced catch msg error echo dir msg throw msg cd dir cmd better identify user error came es temp ls temp chdir temp file directory winter usenix january san diego ca es shell higher order functions spoofing es versatile functions variables half story part es shell syntax just front calls built functions 
example ls tmp foo internally rewritten create tmp foo ls evaluated 
create built function opens tmp foo file descriptor runs ls 
value rewriting create function just shell service spoofed overridden user new create function defined default action redirection overridden 
es pipe fn pipe fn pipe rest time pipe time pipe rest es cat tr cs za sort uniq sort nr sed cat tr cs za sort uniq sed sort nr timing pipeline elements furthermore create really builtin file redirection service 
hook primitive create overridden 
means possible access underlying shell service hook reassigned 
keeping mind spoof redirection operator discussing 
spoof simple file created exists determined running test command run similar shell option fn create fd file cmd test file throw error file exists create fd file cmd fact redefinitions refer forms explicitly capture lexical scoping 
redefinition usually appear create fn create fn create fd file cmd test file throw error file exists create fd file cmd form preferable allows multiple redefinitions function version throw away previous redefinitions 
overriding traditional shell built ins common example spoofing 
example cd operation places current directory title bar window hypothetical command title written winter usenix january san diego ca es shell higher order functions cd fn cd fn cd cd title pwd spoofing tasks shells example timing element pipeline spoofing pipe lines pipeline profiler suggested jon bentley see 
search fn fn prog file search prog file file path cache path cache prog fn prog file return file fn path cache fn path cache path caching fn interactive loop result catch msg eof return result error echo msg echo uncaught exception msg throw retry prompt cmd parse prompt result cmd default interactive loop shells provide mechanism caching full pathnames executables looked user path 
es provide functionality shell easily added user wants 
function see invoked look non absolute file names commands 
piece es replaced interpreter loop 
fact default interpreter written es see 
details example need explanation 
exception retry intercepted catch exception handler running causes body catch routine re run 
winter usenix january san diego ca es shell higher order functions parse prints argument standard error reads command potentially line long current source command input throws eof exception input source exhausted 
hook prompt provided user redefine default 
spoofing functions suggested active include version cd asks user create directory exist versions redirection program execution try spelling correction files pipe run pipeline elements different remote machines obtain parallel execution automatic loading shell functions replacing function tilde expansion support alternate definitions home directories 
debugging purposes trace hook functions 
implementation es implemented lines estimate lines devoted portability issues different versions unix number workarounds es order blend unix 
path variable example 
es convention path searching involves looking list elements variable called path 
advantage usual list operations applied equally path variable 
unix programs expect path colon separated list stored path 
es maintain copy variable change reflected change 
initialization es initialization done es script called initial es converted shell script character string compile time stored internally 
script illustrates default actions es parser set features path path aliasing mentioned 
script consists lines fn fn append append fn background background bind shell services short backgrounding prefixed hook variables 
set assignments bind built shell functions hook variables fn 
dot fn break break fn catch catch difference names invoked directly user bourne compatible command sourcing file 
functions defined unix path searching conventions 
example set path local set path path flatten return set path local set path path return note implementation functions temporarily assign opposite case cousin null making assignment variable 
avoids infinite recursion functions 
environment unix shells typically maintain table variable definitions passed child processes created 
table loosely referred environment environment variables 
traditionally environment pass values variables duality functions variables es possible pass function definitions 
rc offered functionality arising restriction separate space environment functions having functions environment brings conceptual framework variables follow identical rules creation deletion presence environment 
additionally functions environment optimization file parsing time 
nearly shell state encoded environment superfluous new instance es started xterm run configuration file 
shell startup quick 
consequence support environment fair amount es devoted unparsing function definitions may passed environment strings 
complicated bit lexical environment function definition preserved unparsing 
best illustrated example es fn foo echo lexically binds variable scope function definition 
external representation function information explicit 
encoded winter usenix january san diego ca es shell higher order functions es whatis foo closure echo note cultural compatibility shells functions named parameters binding arguments 
interactions unix traditional shells feature sets dictated unix system call interface es contains features interact unix 
example rich return values sense shell functions run inside shell returned shell scripts external programs exit wait interface supports passing small integers 
forced build things shell external 
exception mechanism similar problems 
exception raised shell function propagates expected raised propagated message printed exit false exit status returned 
consider unfortunate reasonable way tie exception propagation existing unix mechanism 
particular signal machinery unsuited task 
fact signals complicate control flow shell cause special cases shell nuisance benefit 
unfortunate consequence es unix systems interaction lexically scoped variables environment 
functions example may defined lexical scope 
modifies lexically scoped variable change affect variable seen function 
hand functions run connection lexical scopes lost consequence exported separate environment strings 
turn significant problem intuitive programmer background functional languages 
restriction es arose traditional unix environment lists hierarchical lists may contain lists elements 
order able pass lists external programs semantics passing shell functions restrict lists structure exec style argument vectors 
lists flattened rc csh 
garbage collection es incorporates true lambda calculus includes ability create true recursive structures objects include pointers directly indirectly 
feature useful programmers unfortunate consequence making memory management es complex shells 
simple memory reclamation strategies arena style allocation counting unfortunately inadequate full garbage collection system required plug memory leaks 
experience rc memory decided copying garbage collector appropriate es 
observations leading separate commands little memory preserved roughly corresponds storage environment variables command execution consume large amounts memory short time especially loops involved memory working set shell typically smaller physical memory available 
picked strategy traded relatively fast collection times somewhat wasteful amount memory exchange 
generational garbage collector sense reasons picked copying collector decided avoid added complexity implied switching generational model 
normal execution shell memory acquired incrementing pointer preallocated block 
block exhausted live pointers outside garbage collector memory examined structure point copied new block 
scanned freshly copied data scanned similarly process repeated reachable data copied new block 
point memory request triggered collection able succeed 
larger block allocated collection redone 
parts shell execution notably yacc parser driver running possible identify garbage collection disabled 
allocation request time memory available arena new chunk memory grabbed allocation continue 
garbage collectors developed reputation hard debug 
collection routines typically source difficulty 
sophisticated algorithms es usually lines code 
common form gc bug failing identify elements open ended problem implications routine 
find form bug modified version garbage collector key features collection initiated allocation collector disabled collection finishes access memory old winter usenix january san diego ca es shell higher order functions region disabled 
pointer garbage collector space invalidated collection immediately causes memory protection fault 
strongly recommend technique implementing copying garbage collector 
performance implications garbage collector occasionally shell running action collector invoked 
takes roughly running time shell 
serious time potential allocation collector disabled pointers structures garbage collector memory identified effectively requiring memory known addresses defeats optimizations required performance modern architectures 
hard quantify performance consequences restriction 
garbage collector consists lines code collector plus lines debugging code numerous declarations identify variables part small typically line procedures allocate copy scan structure types allocated collector space 
places es expect able redefine built behavior hook exists 
notable wildcard expansion behaves identically traditional shells 
hope expose remaining pieces es versions 
satisfying pieces es parser 
talked distinction core language full language fact translation syntactic sugar convenient unix shell syntax user core language features done yacc generated parser recognition core language 
unfortunately ties full language core tightly offers little room user extend syntax shell 
imagine system parser recognizes core language set exposed transformation rules map extended syntax es feel shell core language 
extend syntax system scheme provides example design mechanism macro systems designed lisp languages mesh free form syntax evolved unix shells 
disabling depends operating system support 
current implementation es undesirable property function calls cause stack nest 
particular tail calls consume stack space optimized 
properly tail recursive functions echo nl scheme ml programmer expect equivalent looping hidden costs 
implementation deficiency hope remedy near 
es addition language shell programming candidate embeddable scripting language lines tcl 
es fact borrows tcl notably idea passing blocks code unparsed strings requirements languages similar surprising syntaxes similar 
es advantages embedded languages code shell programs functions identical supports wide variety programming constructs closures exceptions 
currently working library version es stand shell linked programs shell features wildcard expansion pipes 
central ideas es 
system programmable exposing internals manipulation user 
allowing spoofing heretofore shell features es gives users great flexibility tailoring programming environment ways earlier shells supported modification shell source 
second es designed support model programming code fragments treated just form data 
feature approximated shells passing commands strings approach requires resorting baroque quoting rules especially nesting commands layers deep 
es construct surrounded braces stored passed program fear 
es contains little completely new 
synthesis attributes admire shells bourne shell tom duff rc programming languages notably scheme tcl 
possible tried retain simplicity es predecessors cases control flow constructs believe simplified generalized earlier shells 
believe es ultimate shell 
cumbersome non extensible syntax support traditional shell notations forced winter usenix january san diego ca es shell higher order functions unfortunate design decisions es features exceptions rich return values interact unix 
think es successful shell programming language features extensibility forced revert shells 
people helped development es writing 
dave hitz supplied essential advice focus efforts 
chris maintained es mailing list ftp distribution source 
donn cave peter ho noel hunt john bruce steven rich scott schwartz alan watson contributors list provided suggestions willingness experiment ready prime time shell vital es development 
susan karp beth read drafts put es development 

brian kernighan rob pike unix programming environment prentice hall 

bourne unix shell bell sys 
tech 
vol 
pp 


tom duff rc shell plan unix systems conference proceedings pp 
summer 

william clinger jonathan rees editors revised report algorithmic language scheme 

robin milner mads tofte robert harper definition standard ml mit press 

john ousterhout tcl embeddable command language usenix conference proceedings pp 
winter 

jon bentley programming pearls addison 

david hanson fast allocation deallocation memory object lifetimes software practice experience vol 
pp 
january 

kent dybvig scheme programming language prentice hall 
author information paul computer scientist adobe systems incorporated works font rendering technology 
interests include programming languages window systems computer architecture 
paul received computer science princeton university 
reached electronic mail adobe com surface mail adobe systems incorporated charleston road mountain view ca 
byron system programmer network appliance works design implementation network file server 
spare time works shells window systems 
free software contributions include unix version rc plan shell pico version gerard holzmann picture editor code generators sparc mips 
received physics princeton university 
cats bah try rule home life 
byron reached byron com network appliance drive suite santa clara ca 
winter usenix january san diego ca 
