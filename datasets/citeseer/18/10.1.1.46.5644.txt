subexponential bound linear programming ji matou sek department applied mathematics charles university am 
czechoslovakia mail matousek kam mff cz micha sharir school mathematical sciences tel aviv university tel aviv israel mail sharir math tau ac il courant institute mathematical sciences new york university new york ny usa emo welzl institut fur informatik freie universitat berlin berlin germany mail emo inf fu berlin de simple randomized algorithm solves linear programs constraints variables expected ln ln time unit cost model count number arithmetic operations numbers input precise algorithm computes lexicographically smallest nonnegative point satisfying linear inequalities variables 
expectation internal author supported humboldt research fellowship 
second third authors supported german israeli foundation scientific research development 
second author supported office naval research national science foundation ccr ccr israeli binational science foundation fund basic research administered israeli academy sciences 
preliminary version appeared proc 
th annual acm symposium computational geometry pages 
carried author visiting institute computer science berlin free university performed algorithm holds input 
conjunction clarkson linear programming algorithm gives expected bound ln algorithm framework facilitates application related problems computing smallest enclosing ball smallest volume enclosing ellipsoid points space computing distance vertex facet polytopes space 
subexponential running time established problems relies results due gartner 
keywords computational geometry combinatorial optimization linear programming smallest enclosing ball smallest enclosing ellipsoid randomized incremental algorithms 
linear programming basic problems combinatorial optimization received considerable attention decades 
algorithms proposed solution starting simplex algorithm relatives dan proceeding polynomial time solutions khachiyan karmarkar kar continuing techniques reviewed 
proposed algorithms proven extremely efficient practice analysis running time fully satisfactory far 
example simplex algorithm shown exponential worst case klm 
algorithms khachiyan karmarkar polynomial number arithmetic operations perform depends size coefficients defining input bounded solely terms number constraints number variables 
assume different model computation real ram widely computational geometry 
input may contain arbitrary real numbers arithmetic operation real numbers charged unit cost 
distinguish complexity bounds model bounds bit complexity model call combinatorial 
best known combinatorial bounds exponential subexponential randomized bound kalai kal 
major open problems area find strongly polynomial algorithm combinatorial polynomial complexity linear programming 
describe simple randomized algorithm solves linear programs inequalities variables expected minfd ln ln arithmetic operations 
conjunction clarkson linear programming algorithm cla gives expected bound ln expectation running time respect internal performed algorithm holds input 
complexity matches algorithm due kalai kal 
constant exponent significant difference kalai version algorithm runs long linear guarantee bound 
chronologically speaking algorithm published weaker analysis running time kalai analysis subexponential bound came immediately realized algorithm subexponential running time 
algorithm framework facilitates application algorithm large class problems including computation smallest enclosing balls ellipsoids finite point sets space computing largest balls ellipsoids convex polytopes space computing distance polytopes space 
guarantee subexponential running time problems see details 
compare complexity algorithm techniques brief survey relevant literature 
megiddo meg deterministic algorithm running time form linear fixed factor algorithm improvement dye cla 
number randomized algorithms problem see cla sei better dependence best expected running time clarkson cla log 
dependence exponential 
algorithm seidel sei worse expected complexity extremely simple randomized incremental algorithm 
wel algorithm enhanced move front heuristic practice drastically improved performance algorithm difficult analyze 
algorithm variant techniques sei wel 
interesting examples linear programs constraints adding move front heuristic new algorithm gives significantly worse performance mat 
algorithm behave practice analysis provides considerably improved worstcase upper bound expected complexity 
derandomization techniques applied clarkson algorithm obtain deterministic time lp algorithms order log chm 
framework considers set constraints function maps subset optimal solution satisfies simple conditions turns needed prove correctness algorithm analyze expected running time terms primitive operations violation tests basis computations 
turns primitive operations easily implemented polynomial time linear programming means clear instances problems framework 
example case computing smallest enclosing ball basis computation amounts computing smallest ball enclosing points space 
gartner gar able show done expected arithmetic operations 
clarkson algorithm cla shown framework algorithm seidel sei generalization applications wel needs explicit geometry problems 
different framework developed dyer dye yields deterministic algorithms linear larger constants 
organized follows 
section introduce notations review basic observations linear programming required presentation analysis algorithm section 
analysis recurrence relationship solution nontrivial interesting task section devoted solution 
section describe framework mention examples 
notation basics prepare notation required presentation 
model case linear programming objective function defined vertical vector gamma problem maximize delta intersection halfspaces 
lexicographical ordering 
ordering extended gamma gamma special symbols convention gamma set closed halfspaces space call constraints space 
vh denote lexicographically smallest point feasible region fh vh called value 
standard look backwards lexicographically smallest point case gamma reader accustomed may prefer think backwards 
fh empty vh 
fh nonempty contains minimum vh gamma 
intuitively view point lies halfspaces dominates points 
gamma may seen point minus infinity simply symbol undefined 
basis set constraints gamma vb vb vb proper subsets gamma vh basis minimal subset vb vh constraint violated vh fhg gamma vh equivalent vh constraint extreme vh note extreme violated gamma fhg 
properties trivial ii standard linear programming theory iii 
cite explicitly constitute needed correctness time analysis algorithms described 
lemma sets constraints space constraint space 
vg vh 
ii gamma vg vh violated violated 
iii vh basis exactly constraints extreme constraints 
algorithm set constraints set constraints algorithm compute basis basis exists gamma 
vh 
algorithm works initial basis particular take basis available take set constraints gamma symbolic value gamma 
representing arbitrarily small number 
assume vh constraint sets consider 
known condition obtained cost extra dimension extra constraint 
note general position assumptions require bases unique 
set constraints consider trivial approach 
remove random constraint compute basis gamma fhg recursively 
violated equivalently violated gamma fhg basis done 
violated try removing hopefully different random constraint 
note probability violated gamma fhg extreme constraints basic idea find seidel lp algorithm sei order guarantee efficiency need additional ingredients 
procedure subex lp solving problem parameters set constraints basis general basis call candidate basis 
viewed auxiliary information get computation solution 
note influence output procedure influences efficiency 
problem computing basis solved function procedure subex lp set constraints space subex lp returns basis return pseudocode subex lp uses primitive operations test violated constraint basis violation test operation implemented time keep vb basis second subex lp assumes availability operation basis computes basis fhg element basis constraint basis computation 
step corresponds pivot step appropriate representation performed arithmetic operations 
note gamma vb gamma vb fhg gamma vh constraint sets considered execution 
function procedure subex lp set constraints space basis return returns basis choose random gamma subex lp gamma fhg violated return subex lp basis return simple inductive argument shows procedure returns required answer 
happens finite number steps recursive call decreases number constraints second call increases value candidate basis finitely different bases 
analysis expected behavior algorithm take closer look probability algorithm second recursive call candidate basis basis 
noted happens exactly extreme choose gamma elements follows probability extreme gammad gamma extreme constraints bound improves gammad fact bad choices choices bound lowered minfn gammad kg gammad want show numerator decreases rapidly go recursion entail subexponential time bound 
key notion analysis hidden dimension 
basis hidden dimension pair measures close solution basis hidden dimension minus number constraints contained basis value greater equal value lemma hidden dimension gamma vc gj 
proof 
need show constraint satisfies vc iff appears bases vb vc vg vc basis vb vc gamma fhg vb vc contradiction 
conversely vc basis gamma fhg 
vb vc completes proof lemma 
hidden dimension depends value intuitive interpretation local optima defined constraints lying level vc contained flat defined gamma bounding hyperplanes constraints hidden dimension 
hidden dimension zero implies basis enumerate constraints way vh vh delta delta delta vh gammak vc vh gammak delta delta delta vh ng ordering unique parameter emerging ordering unique definition equals hidden dimension 
note gamma vc gammak choices possibly entail second call gammak vh 
suppose constraint gammak chosen call candidate basis returns basis vb vh gammak compute basis gammak 
vh gammak vb vc hidden dimension pair second call gamma hidden dimension monotone hidden dimension exceed hidden dimension 
holds constraints gammak vg vh denote maximum expected number violation tests basis computations respectively entailed call subex lp constraints hidden dimension discussion yields recurrence relationships gamma gamma minfn gammad kg gammai gamma gamma minfn gammad kg gammai simple proofs induction show gamma gamma 
turns larger gross overestimate section show ln ln gamma constraint tested violation basis appearing computation tha factor gamma test elements violation add account initial basis recall account arithmetic operations violation test arithmetic operations basis computation 
note computation vh add nonnegativity constraints initiate subex lp 
anticipating solution recurrences section conclude theorem set constraints space 
lexicographically smallest nonnegative point vh intersection halfspaces computed randomized algorithm expected number nd ln lnn arithmetic operations 
clarkson cla shows linear program constraints space solved expected log log arithmetic operations stands complexity solving linear program constraints space 
replace bound observe replacement middle term dominated terms omit log factor term changing asymptotics expression 
obtain corollary lexicographically smallest nonnegative point vh intersection halfspaces space computed randomized algorithm expected number log arithmetic operations 
solving recurrence section prove promised bounds 
put function satisfies recurrence equality 
solution recurrence gamma min gamma 
prove upper bound lemma holds 
exp ln ip ln large range values bound essentially tight leading term 
order avoid various technicalities lower bound proof restrict range try get tight bound concerning order magnitude lower order terms 
show lemma tending infinity exp gamma ln emphasize lower bound 
lower bound conceivable smaller 
see mat related lower bounds 
upper bound 
proof lemma apply technique generating functions easy inductive proof bound mentioned previous section omitted 
define multiply recurrence sum obtain gamma min gamma gamma gamma gamma gamma gammaj gamma delta words recurrence gamma gamma gammaz follows gamma delta gamma regarding complex variable want find value coefficient taylor expansion 
known equal fl dz integral closed curve fl contains origin contain pole 
choose fl circle jzj 
easily checked denominators product defining vanish jzj follows inequality jzj implies gamma gamma gamma jzj yields bound gamma delta gamma delta delta delta gamma gamma gamma integer parameter determined set gamma estimate terms product 
distinguish cases 
estimate gamma gamma gamma gamma gamma stirling formula delta delta delta delta gamma 
gamma delta delta delta gamma 
calculate gamma gamma gamma gamma gamma absolute values terms alternating sum parentheses form decreasing sequence 
summation term error sign omitted term 
gamma gamma gamma gamma 
estimate gamma gamma gamma gammak gammak get qe exp ln values set ln yields bound exp ln ip ln extreme cases 
definition gives happens exponentially large compared easy bound lnn comes close smaller set obtain bound 
playing estimates somewhat get better bounds 
case observe product goes gets better choice possible large 

establishes lemma 
lower bound 
proof lower bound explicit form lemma sum tuples delta delta delta second sum tuples 
contributes term equal sum 
formally interpret term corresponding unique tuple term empty product equal 
proof 
initial conditions term sum yielding value 
similarly get nonzero term gives 
consider difference gamma gamma defined 
terms appear gamma precisely sum terms delta delta delta gamma iq min mq delta delta delta gamma gammam gamma gamma min gamma function defined satisfies initial conditions recurrence relation 
proof lemma define auxiliary parameters 
function tending slowly instance log log set ln assume large may neglect effect truncating integers similarly integer parameters sequel 
assumption log guarantees 
consider inner sum tuple delta delta delta sum mi iq 
mi 
delta delta delta easily verifies induction say delta delta delta ln 
furthermore stirling formula get estimate 
estimate expression ln gammao known easy prove number tuples delta delta delta denote number tuples additional condition claim gamma gamma see suffices encode tuple contributing gamma tuple contributing 
encoding performed follows gamma leave element replace bm gamma elements equal element equal gamma gamma bm gamma gamma instance tuple transformed note replaced block elements sum 
number elements resulting vector bm gamma gamma gamma may pad vector ones get exactly elements 
easy see encoding reversible 
just observed sum elements resulting vector exceed sum initial tuple proves 
value may choose gamma show number tuples delta delta delta gamma gamma gamma gamma gamma gamma gamma 
ke gammao combining observing ln ln ln obtain ln gammao gammao proves lemma 
framework consider optimization problems specified pairs finite set function values linearly ordered set assume minimum value gamma 
elements called constraints called value goal compute minimal subset bh value general value easy determine assuming availability basic operations specified 
turns algorithm section perform computational task long axioms satisfied axiom 
monotonicity 
axiom 
locality gamma fhg implies fhg 
axioms hold call lp type problem 
obviously linear programming lp type problem set vg constraint set axioms coincide lemma ii 
notions needed section carry obvious way basis set constraints gamma proper subsets gamma basis minimal subset 
constraint violated fhg 
constraint extreme gamma fhg 
efficiency algorithm parameter crucial maximum cardinality basis called combinatorial dimension denoted dim 
assume primitive operations available 
violation test violated constraint basis tests violated 
basis computation basis constraint basis computes basis fhg 
note checking violates equivalent checking basis 
shows primitive operations closely related 
ingredients necessary apply algorithm lp type problem provided initial basis call subex lp 
show simpler inductive argument mentioned section expected number primitive operations performed algorithm ffi jhj ffi dim combinatorial dimension 
order ensure subexponential time bound need extra condition axiom 
basis regularity basis jbj dim constraint basis fhg exactly dim elements 
axioms satisfied call basis regular lp type problem 
seen linear programming space basis regular lp type problem combinatorial dimension provided program feasible lemma iii provides stronger property basis cardinality 
treatment section careful properties linear programming formulated lemma 
glad properties obtain faster algorithm know 
course extra computational assumption order start algorithm 
initial basis initial basis exactly dim elements available 
case linear programming nonnegativity constraints play role initial basis 
may conclude theorem basis regular lp type problem jhj combinatorial dimension ffi initial basis jb dim algorithm subex lp computes basis expected number ffi ln gammaffi ffi ffi ln violation tests basis computations 
turns clarkson algorithm formulated analysed framework basic cases involving ffi constraints solved algorithm expected number required violation tests ffin ffi log ffi expected number required basis computations ffi log ffi log problems shown satisfy axioms see list problems linear programming basis regularity naturally satisfied 
artificially enforce axiom trick due bernd gartner gar lp type problem combinatorial dimension ffi value set define pair gamma gamma new value set gamma gamma gamma theta ffig lexicographical ordering 
straightforward proof lemma omitted 
lemma lp type problem pair defined basis regular lp type problem combinatorial dimension dim 
basis complemented arbitrary dim gamma jbj elements serve initial basis 
transform lp type problem basis regular careful new interpretation violation tests basis computations 
obtain algorithm expected subexponential number violation tests basis computations primitive operations quite expensive 
exhibit examples lp type problems successfully apply algorithm including efficient implementation primitive operations 
smallest enclosing ball 
problem computing disk smallest radius containing set points plane goes back sylvester 
linear time solution problem provided megiddo meg see short guide previous log solutions 
general problem computing smallest ball enclosing set points space solved linear time long dimension considered fixed see meg meg deterministic algorithm wel simple randomized algorithm algorithms exponential set points space define smallest radius closed ball containing known smallest radius exists ball realizing radius unique 
subset containing points see jun 
basic facts hand easy show lp type problem combinatorial dimension clearly adding points constraints set decrease radius smallest enclosing ball monotonicity holds violated lies outside unique smallest ball containing easily implies locality 
problem basis regular apply transformation validate analysis 
violation test easy point ball test basis computation amounts non trivial task basically compute smallest ball enclosing points space 
gartner gar able show problem solved expected arithmetic operations 
obtain corollary smallest enclosing ball points space computed expected number minf ln lnn arithmetic operations 
combining clarkson algorithm complexity reduces bound linear programming 
distance polytopes 
closed polytopes want compute distance dist min dist denoting euclidean distance points polytopes intersect distance 
intersect distance equals maximum distance parallel hyperplanes separating polytopes pair hyperplanes unique orthogonal segment connecting points dist dist 
easy exercise prove sets vertices respectively dist dist conv conv conv denotes convex hull point set jb jb distance positive bound holds 
formulate problem lp type problem follows vertex set assume subset unique representation 
convention define dist conv conv empty define 
pair constitutes lp type problem inequalities go way round implies plays role gamma 
order see locality observe violated lies unique pair parallel hyperplanes separate distance shows perform violation test 
mentioned combinatorial dimension problem polytopes intersect 
basis computation compute distance polytopes space altogether vertices 
invoke gar ensure performed expected arithmetic operations 
corollary distance convex polytopes space altogether vertices computed expected number minf ln lnn arithmetic operations 
best previously published result expected bd randomized algorithm considered fixed cla 
result corollary established polytopes intersections halfspaces combining result clarkson yields bound 
examples 
quite number examples fit framework solved time linear number constraints dimension considered fixed 
mentioned subexponential bound delicate issue depends efficiently solve small problems 
just provide list examples giving details 
smallest enclosing ellipsoid points space compute ellipsoid smallest volume containing points combinatorial dimension see dll wel 
problem treated number papers pos wel dye chm 
constraints points value set points volume smallest enclosing ellipsoid affine hull 
ellipsoid called john ellipsoid known unique dll locality easily follows monotonicity obviously satisfied 
primitive operations treated applying general methods solving systems polynomial inequalities claim subexponential time bounds course bound linear number points holds 
largest ellipsoid polytope polytope space intersection halfspaces compute ellipsoid largest volume contained polytope combinatorial dimension 
smallest intersecting ball closed convex objects space compute ball smallest radius intersects combinatorial dimension 
order see combinatorial dimension observation 
consider minkowski sum convex object closed ball radius centered origin 
ball radius intersecting objects intersection minkowski sums nonempty 
helly theorem intersection nonempty intersection nonempty 
smallest radius intersection nonempty interiors minkowski sums common point set common point 
corresponding set objects contains basis cardinality claimed combinatorial dimension follows easily 
angle optimal placement point polygon star shaped polygon vertices plane polygon star shaped point inside polygon sees edges vertices locus points called kernel 
want compute point kernel connecting vertices straight edges minimal angle adjacent edges maximized combinatorial dimension 
previous examples obvious constraints problem 
assume polygon allows placement angles occurring ff 
restricts locus intersection convex regions vertex polygon incident edges inner respect angle fi wedge angle fi gamma ff apex forced lie 
ii edge incident vertices circular arc contains points see vertices angle ff lie inner side point forced lie region bounded circular arc suggests take vertices incident edges edges incident vertices constraints purpose algorithm ignoring stem polygon 
number constraints combinatorial dimension reasoning helly theorem 
integer linear programming halfspaces vector space compute point integer coordinates intersection halfspaces maximizes delta combinatorial dimension see oi bel sca 
integer linear programming fits framework bad example sense basis computation bound unit cost model 
problems mention far may occur reader natural examples largest ball polytope polytope space intersection halfspaces compute ball largest radius contained polytope 
smallest volume annulus points space find concentric balls symmetric difference contains points minimal volume 
problems lp type problems directly formulated linear programs respectively variables transformation smallest volume annulus problem dor 
subexponential time bounds hold 
chazelle matousek chm gave deterministic algorithm solving lp type problems time ffi ffi provided additional axiom holds additional computational assumption 
extra requirements satisfied natural lp type problems 
matousek mat investigates problem finding best solution satisfying constraints lp type problems defined 
nina amenta ame considers extension framework suppose family lp type problems parameterized real parameter underlying ordered value set maximum element representing infeasibility 
goal find smallest feasible 
ame provides conditions problem transformed single lp type problem gives bounds resulting combinatorial dimension 
related ame 
discussion randomized subexponential algorithm solves linear programs related problems 
clearly challenging open problem improve bounds provided kal find polynomial combinatorial algorithm linear programming 
section shown bound give tight recursion derived analysis 
stronger mat gives examples lp type problems combinatorial dimension constraints algorithm requires omega gamma primitive operations 
order show better bound algorithm linear programming properties axioms 
rote rot megiddo meg suggest dual permutation variants algorithm 
interesting examples linear programs permutation variant algorithm suggested mat behave worse certain linear programs original algorithm fact substantiated experimental results mat seen contrast situation seidel linear programming algorithm wel 
acknowledgments 
authors gil kalai providing draft copy nina amenta boris aronov bernard chazelle ken clarkson bernd gartner nimrod megiddo gunter rote comments useful discussions 
ame amenta helly type theorems generalized linear programming discrete comput 
geom 

ame amenta bounded boxes hausdorff distance new proof interesting helly type theorem proc 
th annual acm symposium computational geometry 
bel bell theorem concerning integer lattice stud 
appl 
math 

chm chazelle matousek linear time deterministic algorithms optimization problems fixed dimensions technical report dept mathematics freie universitat berlin proc 
th siam acm symposium discrete algorithms 
cla clarkson linear programming theta time information processing letters 
cla clarkson new applications random sampling computational geometry discrete comput 
geom 

cla clarkson las vegas algorithms linear integer programming dimension small manuscript 
preliminary version proc 
th ieee symposium foundations computer science appear assoc 
comput 
mach 
dll lenz uber das ellipsoid und sein unter den einem arch 
math 

dan dantzig linear programming extensions princeton university press princeton 

dor approximation durch algorithmen zur der mit diplomarbeit ulm 
dye dyer multidimensional search technique application euclidean center problem siam comput 

dye dyer class convex programs applications computational geometry proc 
th annual acm symposium computational geometry 
dyer frieze randomized algorithm fixed dimensional linear programming mathematical programming 
gar gartner personal communication 
gar gartner subexponential algorithm optimization problems proc 
rd ieee symposium foundations computer science appear siam comput 

algebra geom 

jun jung uber die die eine reine angew 
math 

kal kalai subexponential randomized simplex algorithm proc 
th acm symposium theory computing 
kar karmarkar new polynomial time algorithm linear programming combinatorica 
khachiyan polynomial algorithm linear programming comput 
math 
math 
phys 

klm klee simplex algorithm inequalities iii pp 
ed 
academic press new york 
mat matousek lower bounds subexponential optimization algorithm random structures algorithms 
mat matousek geometric optimization violated constraints proc 
th annual acm symposium computational geometry 
meg megiddo linear time algorithms linear time programming related problems siam comput 

meg megiddo linear programming linear time dimension fixed assoc 
comput 
mach 

meg megiddo note subexponential simplex algorithms manuscript 
oi 
convexity lattices geom 

pos post minimum spanning ellipsoids proc 
th annual acm symposium theory computing 
rot rote personal communication 
sca scarf observation production sets proc 
national academy sciences united states america 
sei seidel low dimensional linear programming convex hulls easy discrete comput 
geom 

sharir welzl combinatorial bound linear programming related problems proc 
th symposium theoretical aspects computer science lecture notes computer science 
sylvester question geometry situation quart 
math 

wel welzl smallest enclosing disks balls ellipsoids new results new trends computer science maurer ed lecture notes computer science 

