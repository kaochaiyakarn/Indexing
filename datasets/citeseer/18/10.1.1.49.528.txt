formal model extant task knowledge representation panos markopoulos department computer science queen mary westfield college university london london ns uk tel 
fax 
mail dcs qmw ac uk 
discusses models extant task knowledge design user interfaces 
majority cognitive models clear contribute design 
argued methods specifically geared support prescriptive task models adept jsd central question task model relate constructed system adequately addressed 
notion task conformance heart problem 
presents scheme formal representation user task knowledge tks process algebraic framework 
methodological problems involved constructing formal representation cognitive model raised example taken domain air traffic control briefly 
notion task conformance discussed framework 
keywords task knowledge formal specification lotos user interface design task conformance 

research human computer interaction hci persistently sought produce theories methods enable cognitive science contribute design interactive systems 
research cognitive models design user interfaces resulted analytic 
cognitive engineering aims explore describe mental activity users point conditions domain knowledge possessed individual accessed task performance 
hopefully provide contextualised understanding cognitive support need 
cognitive engineering models geared support generation interactive system designs systematic method deriving requirements models 
instructive quote de report cognitive activity operators controlling incidents nuclear plant reflects potential cognitive models system design 
ask objective building cognitive models operators know model example decision support system know useful psychological knowledge state predicting operator behaviour 
experience 
process developing model may useful model focuses researchers attention inputs outputs processing mechanisms parameters defined modelled implemented 
traditional research task analysis hci perspective concentrates post design construction predictive models user behaviour particular system card 
tasks defined syntactic level drawing simple shape typing sentence 
models produce predictions performance users transfer training system 
methods demonstrated potential attract attention system designers aspects usability interface 
resulted considerable body expertise concerning constitutes usable system evaluate predict designed system usability help designer process constructing system model 
lim 
propose structured systems design method called jsd aims incorporate results cognitive task modelling 
wilson 
describe adept prototyping method design user interfaces modelling user tasks task knowledge structures tks 
methods mentioned specifically cognitive models knowledge people tasks design interactive systems 
methods provide process model design task models guide designer task model representations relate designed system creates 
heart problem idea conformance interactive system user task knowledge 
notion task conformance vague 
importance extant task knowledge representations definition discussed sections 
extant task knowledge knowledge people tasks prior newly designed system artefact support 
performing task may involve existing tool support aim task models capture device independent task knowledge interaction person task domain 
efforts propose software quality criteria relating usability abowd suggest need task conformance explicated expressed software engineering terms 
formal model tks introduced attempt meet goal 
ideas described evolution earlier reported attempts construct formal model tks 
provide framework complete accurate description tks previously reported markopoulos debate notion level abstraction formalisation description tks 
rest tks briefly compared approaches task modelling reasons formalising explained section 
formal framework tks introduced example section domain air traffic control 
section relates design interactive systems discusses concept task conformance 
section summarises issues raised points research 

formalisms task model representation section contrasts tks approaches task modelling 
discussion limited methods describe actions necessary cognitive activity opposed making predictions time task performance behaviour models employ main types representation formal grammars hierarchical goal structures 
extended task action grammar etag uses grammar describe knowledge competent idealised user particular computer system terms tasks performed tauber 
etag design specification notation early evaluation designed systems preliminary specification users tasks representation computer domain de haan de veer 
de haan proposes etag user model design focusing design activity description construction user task model 
brings etag design close ideas adept method 
user action notation uan notation describes combined physical behaviour user interface perform task hix hartson 
interface represented quasi hierarchical structure asynchronous tasks sequencing task independent 
lowest level abstraction user actions system feedback state change information represented design considered terms observable user system behaviour 
task structure built composing low level entities 
extension uan hartson grey employs set temporal ordering operators describing multitude possible temporal relationships segments interaction 
etag describes tasks users perform ideally proposed existing design 
contrary etag uan concerned descriptions observable interaction knowledge users tasks 
uan useful descriptive tool design evaluation interfaces appropriate user requirements capture 
mad de description takes hierarchical approach description task models includes temporal relations activities 
mad focuses users planning activities treats plans actions 
mad adopts object oriented representation task model model state task domain 
tks theory johnson assumes knowledge person task structured represented task knowledge structure 
knowledge activated processed association task execution structure reflected observed behaviour task performance 
central components tks goals procedures actions objects 
exemplify consider person working domain 
domain characterised state 
person aware meaningful state achieved constitutes person goal 
process achieving goal may identifiable meaningful intermediate states constitute subgoals 
structure decomposition goals 
goal structure contains important temporal information captured utilised formal framework proposed section 
basic element activity identified task performance single action 
actions applied objects 
actions combined procedures 
objects reflect knowledge task domain described terms characteristics attributes relationships objects 
reader referred previous publications exposition tks johnson johnson 
coarse visualisation main elements tks 
task sub task sub task sub task sub task sub task sub task procedure action action action action object object action 

schematic view main elements tks 
aspects task knowledge captured tks scheme modelled formally order examine observations give rise study increase understanding user interface design 
formal model introduced section cover aspects task knowledge discussed johnson johnson 
example centrality typicality task objects frequency actions modelled 
reasons constructing formal model tks model precise internally consistent model validated subject analysis model communicated people analyst tempting disregard reasons commonplace ought pointed introducing people task analysis presenting results task analysis invariably results communication interpretation problems 
formal definition modelling scheme disperse ambiguity possible implications representation fully understood 
possible remedy animate model arguably enable analysts understand models better 
drawbacks constructing formal model tks guaranteed effort put formalising task model worthwhile investment analyst developer realistic project setting 
formal method design interface task model 
little added value resulting formalisation justify practice developer 
formal notations tend obscure prohibits users particular inspect validate models 

formal model tks 
conceptual formal framework process algebraic approach chosen representation task models 
process ccs milner csp hoare model dynamic behaviour systems concentrating concurrency communication 
process entity performs participates actions events 
specification processes consist describing observational behaviour separately combinations 
description task performance capture interaction takes place users intention evolution task domain 
tks state task domain represented set objects task domain 
formal model tks course action person modelled series atomic task events occurrences task actions 
state domain modelled composite behaviour set objects 
simplifying assumption purposes study consider task object descriptions independently 
mean composite behaviour seen simply interleaving logical parallelism task events 
reality particularly complex logical behaviours involved behaviours independent 
assumption maintained purposes simplicity representation 
ideas mind goal structure set objects tks modelled processes evolving parallel 
linked set task actions brief exposition tks mentioned sequence task actions compose procedure subgoal task actions related task objects 
proceeding discuss formal model reader reminded aim exercise reach deterministic formal model intentions user prediction course action task execution 
behaviour evolve expected behaviour contextual factors may lead unpredictable course action 
task model provides structural information activity promotes user oriented representation task domain interface design 
modelling scheme evolution formal representation tks resulting adept project reported markopoulos 
lotos formal specification technique iso representation tks model 
lotos hybrid language parts basic lotos process algebra ccs csp data type language act ehrig 
reader referred logrippo lotos 
elements language summarised appendix 
sections task conflict detection air traffic controllers example 
action action action 
user goal structure objects 
abstracting goal structure object set processes interacting actions 
description tks objects actions step constructing model specify task objects 
process expression considered define object type instantiation process expression object 
process possibly imposes constraints order actions performed 
level actions simply described lotos action identifiers 
example taken task analysis task conflict detection air traffic controllers 
task analysis examined current system uses flight strips radar display 
conflict defined potential violation minimum separation aircraft 
flight strips contain record information regarding aircraft controller uses radar screen derive real time data position speed aircraft 
radar object task objects considered examined order introduce representation task objects lotos 
express basic lotos operator may read radar screen sufficient write process radar read read radar read endproc convention objects considered non terminating processes indicated keyword 
body process definition line shows recursion directly read event 
radar modelled passive display object controller read information repeatedly 
extract basic lotos says information read radar 
action read structure associating information read 
purposes conflict detection controller interested flight level code identification secondary radar label 
model call sign aircraft actual flight level aircraft lotos uses act data types see appendix 
convention data types describing object state action se mantics defined global data types lotos text 
example simply seen identifier data type specification contrived type identifier sorts id opns id afl id load id complexity id specification radar process radar read read afl radar read endproc advantage approach information model symbolic simulation model meaningful 
go detail call sign represented concatenation initials standing airline oa olympic bm british flight number oa flight level identified natural numbers indicating hundreds feet stands feet case data types interesting type naturals sorts fl opns nat fl fl nat eqns nat sort nat type naturals sorts opns nat nat eqns nat sort nat type string sorts str opns str str eqns str sort sort str type label sorts lbl opns fl lbl lbl lbl fl eqns forall fl fl hierarchy data types constructed summarised 
object specification radar process radar read read lbl lbl radar read endproc flight number string call sign flight level label 
hierarchy data types 
data types easily get complex example minimum maximum flight levels information specified 
domain air traffic control controllers know rare conflict feet flight levels feet deep call signs strings characters long elements task domain relevant task may judged important model may useful take account designing interaction new system 
point obvious fact easy confine area responsibility modeller opposed analyst freedom allowed modeller interpretation results analysis 
questions arise modelling solutions inevitably arbitrary degree 
inherent lowest level decomposition task activity actions assumed may determined analysis lowest level decomposition subjects analysis describe tasks 
shown simple action reading information radar objects decisions modeller 
reasonable practice modeller represent detail level model understandable dynamics task performance obscured 

describing goal structure tks activity user represented tks series actions performed objects 
action task model specification may semantic effect described act language described 
goal structure tks combines actions procedures subgoals goals described lotos processes 
composition processes achieved lotos operators summarised appendix 
representation goal structure terms lotos operators extensively discussed markopoulos 

structure specification described 
goals combined process expression interacts objects actions listed synchronisation gates lotos specification 
specification action data type specification specification act semantics actions behaviour specification process expression specifying goal structure process composition operators lotos actions task object object 
object 
structure lotos specification tks structure description example task conflict detection 
top level decomposition task shown subtask descriptions included appendix completeness 
sake simplicity descriptions basic lotos 
task conflict detection consists subtasks scan resolve conflict arrive strip scan evokes controller decides traffic load tries look ahead airspace conflicts occur 
occurrence abstracted event traffic scan evokes resolve conflict conflict identified represented event conflict processes 
task subtask identifiers highlighted extract lotos 
synchronisation events enclosed vertical bars square brackets 
scan traffic sort read conflict doubt traffic traffic conflict conflict read decide new read mark traffic new read doubt mark sort radar read strip new read mark read conflict doubt bay traffic sort conflict detection scan arrive strip traffic conflict general scan scan bay look unusual monitor parameters directed arcs represent subgoal relation black blobs represent event synchronisation 
top levels goal structure conflict detection task 
provides visualisation decomposition conflict detection task 
clarity synchronisation events shown trigger processes 

basing design models task knowledge systematic method deriving design recommendations task model 
best methods define potential inputs concerns possible outputs process task design 
arguably model useful process creating 
section design methods attempt overcome shortcoming examined 
adept jsd methods models extant task knowledge users design artefacts support user tasks 
adept puts forward design method tasks important element method part design activity expected take place task level 
designer edits task model modifying reflect envisioned changes task performance target system perform task allocation human machine 
wilson 
describe model new interface derived designed task model producing hierarchy interaction objects similar tks goal structure 
logical abstractions interactive techniques support basic actions task model hierarchically structured groups abstractions support subgoals goals 
hierarchy groups annotated temporal operators define interaction sequences user interface 
similar task model 
adept method goes examine design rules influence transition model concrete prototype 
transfer knowledge task model interface model facilitated support models practical guidance offered designer mission 
leaves unanswered questions respect mapping ought maintained extant task model designed task extant task description designed task artifact model user group description concrete artifact model resultant task description task analysis user group analysis design requirements design principles requirements design principles design commitment design abstraction consequences design artifact task evolution 
visualisation adept process model task user interface design 
adapted wilson model designed task model interface model central issues contribution cognitive model software design 
jsd method lim 
designer constructs target task model support design extensions corresponding new target system tasks 
composite task model derived generalisations target task model task model represents device independent extant task knowledge 
decomposed user system task models 
approaches overlooking differences notations methods terminology recognised design activity takes place task level elements extant task model maintained relation designed task model adept system task model jsd extant task model defined 
attempt software engineering standpoint provide structured classification properties principled design interactive systems proposed abowd 

define task conformance criterion related usability 
pertains issues task completeness system address tasks interest 
task adequacy support users tasks user understands 
implements interaction task model extant task model interface model resultant task model extends 
relationship initial task model resultant task model ensure task conformance 
fully agree abowd 
support view existing user interface generators ensure criteria note factors relate relationship task models extant resulting mentioned 
abowd proposes formalisation relationships task systems domains refinement relationship making simplifying assumption correspondence operations interface actions task domain 
notion task ill defined probably corresponds lim term interaction task model required abstraction system model 
useful result define task conformance adequately 
idea creating design conformant task knowledge precise meaning context task design 
regardless method representation scheme entities implicit explicit necessary discuss notion task conformance users extant task knowledge task knowledge resulting designed artefact system model 
resulting task knowledge considered level abstraction relevant task domain lower level including knowledge internal secondary tasks relating operation designed system 
sake argument representations needed extant task model etm resultant task model rtm expressed level abstraction relevant task domain detailed representation resultant task knowledge interaction task model itm 
approaches uan tag address level description 
rtm abstracts interaction detail away say itm model implements rtm 
designed system assumed represented interface model im 
relationship itm im corresponds abowd describes refinement relationship 
itm structured reflect user task knowledge structure im reflect structure software architecture 
comparing itm im process specifications suggested set action sequences described itm subset action sequences described im 
action sequence defined itm fail deadlock im fail itm 
notion formalised conformance relationship processes 
brinksma im conforms itm 
combination means im process specification extension itm 
critical issue definition task conformance relation etm rtm 
assuming ideal user representations model adequately task knowledge notion task conformance harder define 
notion task completeness mentioned simplistically interpreted process algebraic framework follows possible perform action sequences described etm rtm 
set traces process etm subset set traces rtm 
hard assumptions claims action sequences precluded models deadlocks reach 
formal description relationship etm rtm attempted question requires better theoretical understanding resultant task knowledge formed 
underlined process model design 
fact task conformance strict requirement design 
may adopted criterion related usability doing preclude successful design 
ensuring task conformance practice harder implied 
difficult ensure models adequate representations task knowledge wrong suggest single form representation adequate types tasks task domains 
practically impossible design process model ensure relationships identified maintained 
tractable theory comparison itm im hard support practice important detail abstracted models notion users perception interaction addressed 
task knowledge design interface practical impossibility predicting resultant task model 
follows impossible design process model ensure task conformance mind fact desirable 
best offered designer centre activity task knowledge elements captured etm 
discussion may help guide designers conceptualisation task 
content representation models extremely important factors success design method tool support provided manipulate models 

issues raised regarding task analysis methods prior design implementation system long standing goal research hci fact task analytic modelling approaches geared 
tks model task knowledge formal model tks proposed adopted process algebraic framework 
lotos formal specification language example tks domain air traffic control appendix 
aim formalisation introduce precision debate task design 
model claim model aspect tks centrality typicality elements frequency action obscurity lotos language notation analyst noted markopoulos provides appropriate semantics description tks 
research directed producing comprehensible notation tool support facilitate communication results task analysis validation purposes 
idea task conformance discussed suggested explicitly mentioned goal methods tools proposed past converge 
underlying aim research approaches obvious purpose attempted succeeded providing appropriate definition 
software engineering attempts define task conformance considered give appropriate emphasis users knowledge task 
adept jsd approaches task design contrasted 
closest hci research arrived providing methodological guidelines achieve task conformance 
prescribing process design model users extant task knowledge possible contingencies best provided practitioner 
discussion compared appear disparate approaches common conceptual framework provided formalism 
hopefully may contribute designers perception task understood design method ensuring formally expressed relationships models 

described undertaken authors worked european community project aegis atm european group improvement scenarios 
aegis carried framework research programme financial contribution european commission 
companies universities involved aegis project europe national technical university athens queen mary westfield college university london sextant sa 
abowd 
formal methods specification user interfaces selby ed proceedings second irvine software symposium iss pp 
abowd coutaz 
structuring space interactive system properties 
larson unger eds engineering human computer interaction ifip conf 
proc elsevier science publishers bv north holland pp 
brinksma 
theory derivation tests van eijk vissers diaz eds formal description technique lotos north holland pp 
card moran newell 

psychology human computer interaction lawrence erlbaum 
de haan der veer 
analysing user interfaces etag validation studies proc 
th interdisciplinary workshop informatics psychology austria 
de 
operator strategies dynamic environment relation operator model ergonomics vol pp 
de haan 
etag approach design user interfaces 
th interdisciplinary workshop psychology informatics 
austria 
ehrig hansen 
act algebraic specification levels semantics 
report institut fur software und theoretische technische univ berlin 

elements conflict detection task card tool aegis project internal document ref 
ag sy 
hartson gray 
temporal aspects tasks user action notation human computer interaction vol 
lawrence erlbaum associates pp 
hix hartson 
developing user interfaces 
ensuring product process wiley 
hoare 
communicating sequential processes 
prentice hall international 
iso information processing systems open systems interconnection lotos formal description technique temporal ordering observational behaviour iso geneva 
johnson johnson 
task knowledge structures psychological basis integration systems design acta psychologica north holland pp 
johnson johnson waddington 
task related knowledge structures analysis modelling application people computers iv cambridge university press pp 
lim long 
integrating human factors jackson system development method illustrated overview 
barber laws eds 
ergonomics pp 
logrippo hussein 
lotos learning examples computer networks isdn systems vol 
markopoulos wilson johnson representation task knowledge user interface design environment iee proceedings computers digital techniques vol 
pp 
milner 
concurrency prentice hall international 
tauber etag extended task action grammar language description user task language human computer interaction interact 

method task description proceedings display units conference montreal canada elsevier publishers wilson johnson kelly cunningham markopoulos hacking model approach user interface design diaper guest eds people computers viii proc 
hci cambridge university press pp 
appendix concepts elements lotos system described lotos set interacting processes 
simple process definition formulated process parameter list endproc gate list set gates interaction points process may communicate values occurrences events 
sequencing information events behaviour expressions 
simplest behaviour expression just process instantiation 
built processes exit processes 
implies events offered exit implies successful termination 
behaviour expression process ends exit process defines functionality process exit 
recursive processes processes terminating characterised functionality 
perform perform process action prefix boolean expression true perform guard perform choice processes independent performed simultaneously multithreaded interleave completing performance enables performance process enable perform termination point performed interrupting disable processes communicate synchronously gates brackets 
table 
summary elements lotos language 
suppose composed parallel gate offers value gate true offers event bool value passed data communication may take place process definition specify type data passed gate 
data types defined separately type definition component specification act language 
schema process definition shows process defined parameters 
value taken parameters process instantiation combination set events process ready offer characterises state process point 
entering details particular constructs act language outline specification data type act outlined 
data type combines data closely related defines syntax semantics operations data 
sorts data type distinct sets values 
fact similar concept types programming language convey information hierarchical relationships data types 
operations way accessing modifying data need model representation data 
equations define expressions considered equal doing give semantics operations 
basic template data type specification type data type name sorts operations equations constructs act language extension parameterisation data types build complex specifications 
discussed interested reader referred ehrig 
clarification examples 
appendix 
example task model specification section specification top level goal structure shown specification radar object examined closely 
remaining subtasks object specifications 
subtask scanning accomplished moving general specific 
controller evaluates general traffic demand looking bays particular bay complexity traffic demand aircraft ascending descending cruising proceeds look individual flight strips looking unusual 
decomposition modelled follows process scan traffic sort read conflict doubt exit traffic traffic sort read conflict doubt process general scan involves checking layout rack flight strips 
process traffic exit traffic exit layout bays deduce traffic load endproc subtask involves looking complexity traffic bay sorting flight strips 
process traffic sort exit traffic cue complexity airspace exit sort exit sort strips time endproc top level subtasks handling arrival new strip fired event new traffic fired event traffic fired event conflict 
process new read mark exit new read read read afl mark strips exit endproc process traffic exit traffic exit exit endproc process conflict read decide exit conflict read read decide exit endproc looking unusual core scanning activity flight strips may read 
couple flight strips may compared modelled consecutive read events see route time subsequently flight level 
couple flight strips suspect controller doubt engage monitoring activity flight strips radar modelled process process read conflict doubt exit read strip read neighbouring strip doubt read conflict exit check right bay exit process read conflict exit read afl read afl calculate conflict exit exit endproc endproc specification task objects process strip new read mark new read exit read exit mark exit exit strip new read mark endproc new strip may accepted denoted new read placed right bay denoted read simply read fields checked verify right bay denoted 
bay object simple object general traffic information extracted 
types information extracted need defined algebraically distinct actions reading general traffic load sector estimating complexity traffic time horizon area interest 
process bay traffic sort traffic exit traffic load cue traffic demand traffic exit traffic complexity cue different strategies sort exit bay traffic sort endproc analysis identified object representing potentially conflicting pair aircraft 
controller scans flight strips rack front sees flight strips indicate flight direction close arrival times flight level 
pair aircraft forms conceptual object controller cocks strips tries determine conflict occur 
process triggered occurrence event doubt process signifying operator doubt event new create instance 
physically corresponds strips 
pair strips read annotated 
depending evolution parameters result conflict 
non determinism resolved real time development environment 
process new read conflict doubt exit new new possible conflict read parameters conflicting pair new read conflict doubt conflict exit exit doubt exit endproc 
