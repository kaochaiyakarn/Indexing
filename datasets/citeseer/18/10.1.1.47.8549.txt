attribute grammars functional programming paradigm thomas johnsson department computer science chalmers university technology goteborg sweden purpose twofold 
firstly show attributes attribute grammar simply efficiently evaluated lazy functional language 
class attribute grammars deal general ones possible attributes may depend arbitrary way long truly circular data dependencies 
secondly describe methodology attribute grammars fairly straightforward way develop efficient functional programs direct conventional solutions yield efficient programs 
review examples bird circular programs eliminate multiple traversals data acta informatica transforms simple inefficient multipass programs efficient single pass ones hard understand 
show efficient tangled programs natural formulations attribute grammars 
propose language construct called case rec akin case expression standard ml lazy ml defines attribute grammar data structure language 
effect case rec expression defines recursion operator handle multiple values upwards propagating downwards propagating ones 
occasionally functional language bit pain imperative programming solution simple obvious corresponding functional program awkward inefficient 
typical example want organize compiler follows compiler multiple passes syntax tree pass computes information assigned nodes tree 
straightforward program imperatively 
straightforward functional solution pass build new tree additional information nodes 
may define set different tree types result tree pass 
example vein task assigning unique numbers node tree 
imperative program simply traverses tree update nodes obtaining unique number incrementing global counter 
corresponding functional program drag unique number recursion structure program bit messy 
describe shortcomings overcome programming paradigm attribute grammars 
coupled simple efficient method attribute evaluation lazy evaluation obtain efficient programs 
attribute grammars knu originally conceived method specifying semantics programming languages nowadays regarded convenient means specifying syntax directed translations compilers see aus 
surprisingly design efficient attribute evaluators active area research great number papers field indicates see annotated bibliography 
efficient attribute evaluation systems determine evaluation order evaluation generation time impose constraints attributes may written may depend able particular evaluation scheme purely bottom left right ness strong non circularity determine evaluation order runtime usually efficient 
see survey main results existing systems classified bibliography 
turns attribute evaluation done particularly simple way lazy functional language imposing constraints attribute dependencies 
difficulties conventional languages stem fact imperative program strict functional specifies exactly order values computed consequently evaluation order attributes figured evaluation generation time attribute grammar 
hand lazy functional language implementation actual order expressions evaluated determined runtime data dependencies demand lazy evaluation machinery 
organized follows 
section give brief attribute grammars 
section describe simple method attribute evaluation 
section discuss attribute grammars convenient means expressing algorithms traversing data structures multiple passes general describe turn attribute grammars functional programs traverse data structure 
review examples bir describe different methodology obtaining programs compare approaches 
section discuss implementation issues characteristic features graph reduction implementation 
section develop language construct analogous attribute grammar called case rec analogy case expression lml sml 
section discusses circular attribute definitions 
section concludes 
assume reader familiarity lazy functional languages tur miranda tur lazy ml 
program examples lazy ml lml lazy completely functional variant ml gmw 
sml mil lml borrowed concrete data types pattern matching hope bms 
lml source language compiler compiles efficient machine code performs graph reduction aug joh 
brief attribute grammars attribute grammar context free grammar augmented semantic rules 
nonterminal symbol grammar fixed set attributes associated 
attribute synthesized inherited 
semantic rules production delta delta delta delta delta delta specify values synthesized attributes left hand nonterminal inherited ones nonterminals right hand side production rules 
evaluation attribute grammar respect parse tree thought decorating nodes parse tree values attributes 
synthesized attribute values propagate upwards parse tree inherited ones downwards 
synthesized attribute nonterminal written similarly write inherited attribute 
attributes may depend possible lexical values numerical value lexical symbol intconst case act synthesized attributes assigned lexical analyzer 
written 
give schematic example attribute grammar expressions expr integer constants intconst single binary operator plus 
synthesized attributes called inherited attribute called distinguish different occurences nonterminal expr production indexing expr expr expr expr plus expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr intconst expr expr expr expr intconst expr expr expr expr intconst stand arbitrary expressions define values attributes 
allow arbitrary attribute dependencies expressions may occurences attributes expr expr expr expr expr expr expr expr expr 
similarly may occurences expr expr expr lexical value intconst 
traditionally attribute grammar systems language attribute values expressed conventional imperative 
clear functional languages perfect expressing attribute definitions provide natural value oriented view implicit attribute grammars 
languages general notion value 
values expressions things lists infinite ones trees functions languages perfect expressing attribute definitions value attribute code sequence symbol table contrast doing thing conventional language pascal example requires side effecting output code sequences update symbol tables evaluation method normally parser generator systems yacc joh unix provide simple means handling values 
yacc constructs bottom lalr parser single upwards propagating synthesized attribute handled 
method constitutes transforming attribute grammar new single attribute synthesized 
straightforward put scheme top existing parser generator provided produce parser lazy functional language 
parser generator lml attribute grammar system method described currently implemented 
new single attribute function original inherited attributes arguments returns tuple original synthesized attributes 
show works transforming attribute grammar previous section form 
new synthesized attribute called fn function original inherited attribute expr argument returning pair original attributes expr expr 
turn attribute identifiers expr ordinary identifiers 
simply replacing attribute operators character may occur identifier underscore purpose 
slightly rewritten definitions simply inserted structure handling administrative task obtaining inherited attribute values left hand nonterminal symbol expr synthesized ones nonterminals right hans side grammar rule 
definitions grammar rule inserted expr fn expr rec expr expr expr fn expr expr expr expr fn expr attribute definitions expr expr 
expr substituted expr attribute definitions 
rewritten attribute grammar schematic example follows expr expr plus expr expr fn expr rec expr expr expr fn expr expr expr expr fn expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr expr intconst expr fn expr rec expr expr expr expr expr expr expr expr expr expr shift reduce parser lr parser aus parsing values associated terminal non terminal symbols kept stack 
performing reduction grammar rule new value stack computed old follows 
reduce rule expr fn expr fn expr 
rec expr expr expr fn expr expr expr expr fn expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr delta delta delta expr expr expr key applicability method possibility lazy functional language recursive definitions non function values 
definitions lazy defined values computed needed 
definitions left hand side variable pattern rec delta delta delta treated rec fst snd delta delta delta fst snd functions returning second component pair respectively 
attribute grammar evaluation method reasonably efficient coupled efficient implementation lazy functional language lazy ml compiler joh aug probably efficient 
kat accepts restricted set attribute grammars 
method constrast advantage full generality 
similar idea mentioned kl tree attributes built nodes returned result parsing 
related idea function function inherited attributes particular synthesized attribute 
idea papers semantics may cm implementation purposes idea useless special cases lead large amount recomputation attribute values 
recomputation avoided functions memoized hug 
evaluator jou thought limited form lazy evaluator imperative program constructed evaluator generator 
functional programming paradigm parse trees objects type generated grammar attribute grammar paradigm defining values associated nodes tree available dealing context free grammars parse trees defining functions data structure 
context apt refer bird bir 
describes technique transforming functional programs repeatedly traverse data structure efficient ones traverse data structure 
essential requirement possible functional language lazy local recursion provided rec rec language able define circular data dependencies 
fold unfold transformations bd transform straightforward inefficient program program efficient hard understand 
bird program derivations elegant applications fold unfold transformation method coupled circular programming definite disadvantage accessible fairly sophisticated programmers hardest bit probably find right eureka definitions 
review examples bir 
show exactly efficient programs obtained simpler straightforward means expressing programs attribute grammars data structures translating attribute grammars functional programs idea described 
tangled programs reveal attribute grammar formulations algorithms 
attribute grammar may specifying inherently multipass algorithm data structure resulting evaluator program pass data structure 
idea specifying attribute grammars data structures context free grammars entirely new 
similar idea basis attribute coupled grammars gg algebraic approach taken attribute grammars viewed specifying translations source language terms target language terms 
similar ideas appear pau 
introductory example task replace tips binary tree minimum tip value shape new tree old 
tree constructors tip fork type tree tip int fork tree tree straightforward solution bir follows 
transform replace tmin rec replace tip tip replace fork fork replace replace tmin tip tmin fork min tmin tmin lml keyword separates definitions definition list separates different cases function 
program passes tree performed tmin find value performed replace replacements 
single pass version program derived bir follows 
transform rec rec tip tip fork fork min functions replace tmin replaced single function doing 
program obtained firstly defining replace tmin eureka step function synthesized standard application fold unfold transformation method bd secondly coupling components result value local recursion transform 
recast tangled version program form analogous attribute grammar 
assigning attributes nodes parse tree context free grammar look constructors tree type 
example patterns tip fork correspond production rules context free grammar 
compare pattern construct sml lml fork binds value matched pattern variable 
variables correspond nonterminal symbols attribute values assigned semantic rules 
constructor symbols correspond terminal symbols 
need distinguish start production written understanding pattern match root tree 
define synthesized attribute min minimum tip value subtree fork min min min min tip min want min value final result attribute evaluation need define min start production 
define inherited attribute rep obtained minimum value replace previous tip values simply passed tree tips 
rep min fork rep rep rep rep tip define synthesized attribute tree new transformed tree 
tree tree fork tree fork tree tree tip tree tip rep merging attribute definitions attribute grammar get 
rep min tree tree fork min min min min rep rep rep rep tree fork tree tree tip min tree tip rep attribute grammar evaluated single pass tree technique shown section 
purpose define function takes arguments tree traversed inherited attribute rep returns pair synthesized attributes tree min tree 
int tree theta int need function operates top level tree traversed returning attribute tree final answer programming problem ftop tree tree functions defined follows 
ftop rec tree min rep rep min tree tree tree fork rep rec tree min rep tree min rep min min min min rep rep rep rep tree fork tree tree tree min tip rep rec min tree tip rep tree min particular example definitions recursive function ftop 
suitable simplification renaming program exactly identical program derived bir ftop transform 
example previous example number traversals tree reduced small constant factor going straightforward solution transformed version attribute grammar version marginal improvement best 
technique power improving complexity algorithm example bir show 
transform binary tree shape time require tip values new tree tip values old tree sorted ascending order 
direct solution problem formulated follows 
transform replace sort tips rec replace tip tip replace fork fork replace take size replace drop size tips tip tips fork tips tips size tip size fork size size tree traversed time function tips obtain list tip values tree 
list sorted tree traversed second time function replace obtain new tree 
interior node take chunks sorted list functions take drop takes respectively elements list pass tree 
program worst time behaviour number tips tree 
separate reasons cause program time complexity repeated calculation sizes internal node functions take drop concatenation collect list tip values 
bird transforms away inefficiencies 
inefficiency concatenation tips dealt defining tips away need concatenation entirely fork 
little foresight rest taken care definition 
replace take size drop size definition laws functions take drop program arrived omit lengthy derivation details see bir 
transform rec sort rec tip tip hd tl fork fork rec derive program attribute grammar formulation 
efficiency improvement embodied definition formulated terms attributes follows 
collect list tips having attributes visiting tips reverse order tip current tip value prepended hitherto obtained list tips 
start root tree empty list 
requires attributes synthesized inherited appropriately called definition cases 
top case 
tip fork prepend ones left 
ones right distribute list sorted tips traverse tree manner time order left right 
tip head sorted list taken rest passed 
require attributes call show construction new tree carried attribute tree 
sort top case sort tips pass tree tree tip tl consume element sorted list tree tip hd fork distribute left 
right 
pass left 
tree fork tree tree attribute grammar sets definitions merged translated evaluation functions ftop manner previous example 
function ftop takes tree traversed synthesized attribute value tree 
function similarly takes tree traversed inherited attributes returns triple synthesized attributes tree 
ftop rec tree sort tree tree tree tip rec tl tree tip hd tree fork rec tree tree tree fork tree tree tree simplifying definitions possible done compiler get ftop rec tree sort tree tip tl tip hd fork rec tree tree fork tree tree program essentially derived bird variable function names 
function corresponds function ftop transform 
ftop fork tip tip fst snd fork tip tip fst snd fork min fst snd fst snd tip tip fork snd fork min fst snd fst snd tip tip fork snd fork min fst snd fst snd tip tip fork snd fork min tip snd fst snd tip tip fork fork tip fst tip tip graph reduction ftop fork tip tip introductory example 
seen definite disadvantage darlington burstall method requires great sophistication find right eureka definition part user second example example 
method straightforward respect 
hand right eureka definition transformations provide correctness proof 
attribute paradigm thought systematic method obtaining definitions 
implementation graph reduction show graph reduction implementation lazy functional language behaves executing programs ones previous section 
illustrates graph reduction la machine joh expression ftop fork tip tip ftop defined section 
shows graph initial expression 
reducing function application body function contains recursive data definitions function ftop compiled machine code function builds cyclic graphs corresponding circular data 
example code ftop rewrites graph 
reduction continues application fst 
fst calls eval argument causing reduction application reduces application pair form 
fst calls eval component pair case constructor form fork eval immediately returns 
fst copies fork constructor node fst application 
having reduced entire expression fork form original call eval completed 
assume value left component fork requested fst calls eval reduce argument application tip delta delta delta pair form calls eval component resulting pair copies tip node fst application figures 
assume integer value tip requested 
evaluation minimum tip value takes place resulting graph shown 
lazy evaluator taken job normally done special purpose attribute evaluation machinery 
normally attribute grammar systems order attributes evaluated determined evaluator generation time 
scheme order implicitly determined lazy evaluator runtime 
order entirely determined data dependencies may vary depending order values various attributes demanded 
similar behaviour exhibited attribute evaluation machinery incorporated parser shown section 
explicit parse tree built 
happen tree structured graph built representing function inherited attributes synthesized ones 
function tree structure parse tree 
function applied initial inherited attributes evaluation demanded obtain values attributes root graph reduction proceed manner similar 
graph reduction proceeds function tree gradually disappears 
language construct section demonstrated attribute grammar paradigm useful constructing functional programs 
far appealed readers intuition issues instance attribute grammar rule simply dubbed start production top case attribute grammar translated functions mind 
time formalize hitherto informal notation 
section define lml language construct called case rec analogy case expression sml lml 
want language construct simple translate ordinary lml anyway 
firstly providing specific notation programming paradigm easier learn data types modular programming structured programming 
secondly mere existence certain language feature attracts programmers attention solution method occur particularly important consideration case programs involved counter intuitive 
programmer trying understand program program ones derived may appear completely incomprehensible knows program derived 
want design lml language construct regarded syntactic sugar translation evaluation functions manner described previous sections 
want faithful polymorphic typing scheme lml sml 
attempt looks follows transform case rec tree tree rep min fork min min min min tree fork tree tree rep rep rep rep tip min tree tip rep intended value case rec expression value tree root 
simple minded construction obvious problems 
ffl exactly value case rec expression general 
just stipulate root single synthesized attribute inherited case value case rec expression obviously value attribute 
unnecessary restriction 
generally value case rec expression function inherited attributes tuple synthesized ones just resulting evaluation function 
case programmer needs know order apply initial inherited attributes case rec expression order synthesized attributes comes tuple value case rec expression 
ffl clear pattern intended match root scrutinized data structure 
ffl case rec expression may want traverse data different types instance type expr id id apl list expr 
case rec id delta delta delta apl el delta delta delta el delta delta delta delta delta delta patterns expressions types expr list expr 
get typed program case rec expression translated functions traversing objects type expr data type list expr 
example section 
ffl different sets attributes may interest different places 
exemplified transform program different sets attributes associated left hand variables productions 
cause typing problem attempt translate case rec expression single evaluation function 
ffl may want different sets attributes attributes associated variables right hand side patterns far means expressing intentions respect 
instance example want associate attributes rep min tree variables pattern fork interested attributes tip deal shortcomings propose programmers intentions explicit annotating case rec expression attribute sorts 
attribute sort mean enumeration inherited synthesized attributes associate variable 
example case fork attribute sort rep min tree associated variables annotate 
similarly case tip attribute sort associated attributes associated case annotate sort receive annotation tree single synthesized attribute tree 
order notation cumbersome give names attribute sorts annotate names attribute sorts 
general attribute sort declaration look delta delta delta delta delta delta stands name attribute sort delta delta delta names inherited attributes delta delta delta names synthesized attributes 
example need attribute sort declarations general case rep tree min top case atop tree 
indicate attributes interested top case put corresponding attribute sort name atop case conjunction expression scrutinized case 
doing roughly corresponds indicating starting nonterminal context free grammar 
arrived final form proposed case rec construct 
give transform program anew attribute sort declarations annotations added 
transform case rec atop sort atop tree rep tree min atop tree tree rep min fork min min min min tree fork tree tree rep rep rep rep tip min tree tip rep semantics case rec expression far semantics case rec expression described terms translated 
section give semantics independent translation albeit similar spirit 
case rec expression general form 
case rec sort scrutinized expression name attribute sorts declared list attribute sort declarations syntax delta delta delta id id synthesized attribute list cases syntax kd delta delta delta id id pattern decl pattern ordinarily case expression variable may annotated name attribute sort id decl declaration ordinarily rec expression lml 
case expression functions defined cases lml patterns tested match value scrutinized expression sequential order pattern 
want hold case rec expression consider left hand variable annotation part pattern 
match scrutinized expression matches pattern ordinary sense sort name annotating left hand variable pattern variable annotating scrutinized expression checked try match pattern 
define value case rec expression follows 
find pattern matching scrutinized expression explained 
assume pattern decl match 
assume pattern annotated variables defined delta delta delta jm delta delta delta jn delta delta delta delta delta delta value case rec expression value delta delta delta rec delta delta delta case rec sort delta delta delta 
vn delta delta delta vn nnn case rec vn sort vn delta delta delta vn decl delta delta delta 
attribute identifiers status ordinary identifiers allowed occur annotated variable want attribute values valid attribute translation case rec expression case rec expression translated set mutually recursive evaluation functions attribute sort declaration 
annotated expression match pattern semantics required sort annotating left hand variable pattern sort requested annotated scrutinized expression attempting match need try patterns correct annotation 
translate case rec delta delta delta function application fe function fe tries match patterns pattern test match function fe need include cases identifier goes evaluation functions 
function fe fe pattern translation decl fe pattern translation decl 
places attribute sort name pattern pattern annotations removed 
translation decl function expression analogous 
case pattern decl assuming pattern annotated variables declared delta delta delta jm delta delta delta jm declared delta delta delta delta delta delta corresponding case evaluation written fe pattern delta delta delta rec delta delta delta fe delta delta delta 
vn delta delta delta vn nnn fe vn vn delta delta delta vn decl delta delta delta decl decl attribute operators translated identifiers variables inherited attributes moved left hand side equal sign bound right hand side meaning 
entire case rec expression translated fe rec declarations evaluation functions 
transform example section scheme translated program 
transform fe atop rec fe atop rec tree min fe rep tree tree rep min tree fe fork rep rec tree min fe rep tree min fe rep min min min min tree fork tree tree rep rep rep rep tree min fe tip rep rec min tree tip rep tree min examples example case rec expression offer assigning unique names identifiers identifiers bound rec different names 
tree traversed type expr id id ap expr expr letrec list id theta expr expr attribute sort traversal expr traversal list id theta expr 
note wanted wanted attributes defined types necessary sort declarations 
note sorts may name variables causing confusion mind programmer 
rename case rec sort ren map iu ren su map iu ren su ren ren map su ap ren ap ren ren map map map map iu iu iu su su su id id ren id newid newid lookup id map su iu letrec ren letrec ren ren map map map iu iu iu su su su id ren newid ren ren newid iu map map map map id newid iu iu iu su su su ren su iu notion attribute sorts quite general powerful device 
specify different computations done different contexts 
example case rec expression value true scrutinized list number number elements false 
case rec sort odd true odd false odd odd circular attribute definitions classical problem attribute grammars determine particular attribute grammar formed non circular possible parse tree circular data dependencies 
test proved intrinsically exponential jor 
usual assumption attribute definition expression values attribute occurences expression computed value computed 
true lazy functional language instance circular attribute definition traditional sense perfectly defined lazy functional language value infinite list ones 
furthermore attribute value totally defined totally undefined partially defined values 
computation value terminates cons element defined tail list undefined 
lazy functional language problem attribute grammar diversified 
subject research determine extent existing algorithms circularity check usefully adapted attribute grammar systems lazy functional languages 
practical road open detect circularities run time fortunately done little extra cost 
machine joh done changing tag apply node going updated anyway value function application 
concluding remarks described particular way advantage normal order semantics obtain non obvious solutions programming problems 
implemented case rec expression lml style circular programming implied programming lml compiler entirely written lml 
circular style programming lambda lifting part functional program joh kind 
discovered attribute grammars provided clear explanation going 
technique subsequently machine code target code generator propagating information backwards forwards code stream 
opinion barely learn full power lazy evaluation functional programming construct functional programs just efficient conventional imperative solutions 
conventional wisdom conventional languages semantic evaluation methods attribute grammars currently efficient compared ad hoc algorithms usual hand written compilers quote kat functional languages reverse may true conventional functional program multiple passes syntax tree process build intermediate structures store intermediate information passes functional attribute evaluator pass parse tree intermediate values stored closures representing data dependencies 
efficient implementation lazy functional language lazy ml compiler joh aug optimized handle closures central mechanism lazy evaluation 
find surprising attribute evaluator implemented manner compete successfully conventional attribute evaluator implemented conventional language 
lennart augustsson john hughes bengt nordstrom phil wadler provided comments suggestions improvements earlier versions 
aug augustsson 
compiler lazy ml 
proceedings acm symposium lisp functional programming pages austin 
aus aho ullman sethi 
compilers principles techniques tools 
addison wesley publishing reading mass 
bd burstall darlington 
transformation system developing recursive programs 
journal acm 
bir bird 
circular programs eliminate multiple data 
acta informatica 
bms burstall mcqueen sannella 
hope experimental applicative language 
proceedings acm symposium lisp functional programming pages stanford ca august 
cm martin 
order algebraic definition semantics 
math 
systems theory 
pierre martin jourdan bernard 
survey attribute grammars part iii classified bibliography 
rapport de recherche inria rocquencourt france june 
pierre martin jourdan bernard 
survey attribute grammars part ii review existing systems 
rapport de recherche inria rocquencourt france march 
pierre martin jourdan bernard 
survey attribute grammars part main results attribute grammars 
rapport de recherche inria rocquencourt france january 
gg ganzinger giegerich 
attribute coupled grammars 
proceedings sigplan symposium compiler construction pages montreal 
gmw gordon milner wadsworth 
edinburgh lcf 
volume lecture notes computer science springer verlag 
hug hughes 
lazy memo functions 
proceedings conference functional programming languages computer architecture nancy france 
joh johnson 
yacc compiler compiler 
technical report bell labs 
unix programmer manual volume 
joh johnsson 
efficient compilation lazy evaluation 
proceedings sigplan symposium compiler construction pages montreal 
joh johnsson 
lambda lifting transforming programs recursive equations 
proceedings conference functional programming languages computer architecture nancy france 
jor mehdi jazayeri william ogden william rounds 
intrinsically exponential complexity circularity problem attribute grammars 
communications acm 
jou jourdan 
optimal time recursive evaluator attribute grammars 
proceedings th int 
symp 
programming lncs pages springer verlag april 
kat katayama 
translation attribute grammars procedures 
acm trans 
programming languages systems july 
kl keller lindstrom 
applications feedback functional programming 
technical report university utah salt lake city april 
knu donald knuth 
semantics context free languages 
math 
systems theory 
may 
attribute grammars mathematical semantics 
siam computing august 
mil milner 
standard ml proposal 
polymorphism ml lcf hope newsletter january 
pau paulson 
semantics directed compiler generator 
proc 
th popl 
tur turner 
language manual 
technical report university st andrews 
tur turner 
miranda non strict language polymorphic types 
proceedings conference functional programming languages computer architecture pages nancy france 

functional parser generator 
preparation 
