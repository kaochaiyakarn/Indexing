assigning appropriate meaning database logic negation jeffrey ullman department computer science stanford university stanford ca usa deductive database systems database systems query language logical rules allow negated subgoals rules express adequate range queries 
adherence classical deductive logic rarely offers intuitively correct meaning rules 
variety approaches defining right meaning rules developed 
survey principal approaches including stratified negation founded negation stable model semantics modularly stratified semantics 

motivation database query languages logic form promising trend development modern database systems 
building sql language logical nature hidden syntax logical query languages preserve declarative say want get nature sql extending expressiveness language sql provides 
see ramakrishnan ullman survey languages systems logical deductive approach 
simple forms logic horn clause rules rules unique natural meaning fixpoint minimal model rules 
interesting queries require general forms rules subgoals appear negatively 
extensions focus 
problem logic involves negative subgoals rarely unique minimal model 
conventional logic rules said mean logically inferred rules 
saying meaning intersection minimal models 
intersection rarely programmer intuitively expects rules mean 
research deductive databases negation seen series proposals define particular minimal model meaning rules negation 
degree program research successful important classes logical rules negation widely accepted meaning 
cases proper choice meaning clear 
subject negation deductive databases related matter nonmonotonic reasoning discussed literature artificial intelligence 
tendency database community value issues efficiency fast answer queries definition correct minimal model 
ai approaches hand tend focus correctness model regardless tractability 
difference emphasized compare founded stable model approaches 

logical rules usually expressed form head body head atomic formula predicate arguments body logical literals atomic formulas negation 
literal called subgoal 
collection rules called logic program just program 
predicates divided classes supported nsf iri aro daal 

edb extensional database predicates stored relations database 
edb predicate corresponding relation say database true tuple relation edb tuples called data 

idb intensional database predicates defined rules 
idb predicates appear head rule 
idb edb predicates appear body 
example rules computing transitive closure graph 
arc edb predicate arc means arc node node idb predicate path represents path facts path intended true path arcs node node path arc path arc path prolog style notation capital letters variables lower case letters constants 
operator means comma subgoals rule interpreted 
rule says path arc says path node arc path relations edb predicates logic program certain models fixpoints rules 
interpretations selections ground atoms facts idb predicates consist idb predicate constant arguments 
interpretation model respect selection edb facts program constants substituted variables rules true 
rules form way rule false subgoals true head false 
example forces include model edb fact path fact arc edb 
rule forces add path model fact path fact arc edb 
facts need idb 
compute idb starting edb adding idb facts forced add rules 
model minimal sense proper subset missing edb fact fails model substitution constants variables subgoals true head false 
example minimal model expected set path facts path true exactly path exists graph set arcs edb relation arc 
rules negated subgoals collection horn clauses rules negated subgoals assured unique minimal model model universally accepted meaning rules 
form rule limited regardless interested logic programming prolog deductive database systems focus 
soon introduce negation rules longer guarantee unique minimal model fact normal 
example bus lines red blue runs buses pairs cities 
predicate blue true blue line runs bus city city red corresponding meaning red line 
president red line wants find red monopoly pair cities red runs bus blue buses travel sequence intermediate cities 
rules express idea blue monopoly red bus lines directed arcs practice expect undirected edges 
liberty example clearer carried realistic case undirected edges 
suppose data relations predicates red blue blue red red suggested fig 

red red blue edb fig 

edb example 
interestingly minimal models edb fig 

idb components models listed 
monopoly sense 
blue path follows data rule 
monopoly fact follows rule 
sense 
involves facts appear come 
minimal model 
substitution constants necessary rules true true ground atomic formulas listed plus data 

delete facts point longer holds 

approaches selection models see example fundamental question coping negation nonmonotonic reasoning select appropriate model satisfy logic program data 
need develop model preference theory shoham 
rules involve negated subgoals argument whatsoever preferred model fixpoint 
negated subgoals question preferred model 
approaches defining preferred model presence negation eschew classical negation favor version negation failure clark 
classical negation rules equivalent negation failure approaches direction implication significance 
example readily infer infer 
stratified logic controversy surrounds stratified negation recursion involving negated subgoals 
idea arrived independently year van gelder apt blair walker naqvi 
idea logic program stratified find order predicates may solve predicate solved predicates depends negatively 
instance program example stratified 
monopoly depends negatively depend monopoly 
find relation rules example rule find relation monopoly 
process red blue data mentioned example yields model confirming intuition model right 
result computing predicates ways called perfect model 
alternative view going concerns circumscription mccarthy approach coping negation allows declare facts true predicate follow rules 
example stratified negation approach allows circumscribe predicate effect declaring true follows rules blue data 
assert true pairs values negated facts rule infer monopoly facts 
przymusinska przymusinski extended idea stratification locally stratified programs data predicates may depend negatively long rules logic program instantiated constants cycles occur 
program locally stratified edb 
surely stratified logic program locally stratified regardless data 
example introduce important paradigm problem win rule win move win rule describes board game 
suppose move true legal move position position move 
suppose game won opponent lose position legal move 
rule says position win choice move position win 
clearly win depends negatively rule stratified 
suppose move acyclic move sequence moves leading back instantiate rule possible ways way fact win particular board depend negatively 
put way acyclic move nim example game decide win true expanding game tree reach positions 
way sequence moves avoid long number positions finite move predicate represents acyclic graph 
win rule locally stratified provided move acyclic 

founded semantics competing thrusts founded stable models attempt provide sensible preferred model logic programs locally stratified 
founded semantics van gelder ross schlipf published valued semantics ground atoms declared true declared false remainder unknown 
shall give definition founded semantics shortly 
focus importance valued models observe example win rule founded model intuitively correct move cycles 
position win true best play yields win position win false player forced move position forced lose best play sides win truth value unknown best play leads draw position construction founded model logic program data proceeds follows 
principle instantiate rules constants possible ways practice efficient approaches przymusinski ross van gelder morishita 
start positive negative ground atoms model facts edb positive ground atoms model 
add positive negative facts rounds kinds inference 
consider instantiations rules 
subgoals rule true current model add head instantiated rule model 
fact positive ground atom 
compute largest unfounded set ground atoms 
intuitively unfounded set collection positive ground atoms instantiated rule head subgoal negation model constructed far 
case know instantiated rule infer head 
ii subgoal fact inferred instantiated rule member subgoal member proved 
shall infer members unfounded set ordinary body head deduction described step 
shall prove member model take metalogical leap place negations model 
manner infer negative atoms 
shall give examples process give idea ways inference proceeds 
examples deal circuits founded model natural interpretation 
third example shows types inference alternate times founded model reached 
example example shall represent circuits consisting unusual sort logic gate positive input negative input 
gate positive input negative input output true false 
edb predicate says gate type positive input negative input output may think inputs outputs terminals wire nets 
edb predicate true input terminals set externally 
input terminals set appear idb predicate intended significance positive ground atom model circuit value terminal 
model value terminal 
value terminal ambiguous depends critical race circuit oscillates normal circuit operation 
expect third unknown value valued founded semantics 
rules define operation gates 
data edb consist facts representing circuit fig 
second input set true 
fig 

circuit example 
instantiations known false subgoal initially know edb facts database false convenience subgoal true eliminate body instantiated rule 
way know type inference body rule empty 
eliminate known true subgoals bodies get round infer heads rules empty body 
infer 
convenience eliminate rules head inferred eliminate rules false subgoal 
round left round find maximal unfounded set 
case rules belong maximal unfounded set 
mutually dependent belong unfounded set 
general find maximal unfounded set looking poison positive facts unfounded set 
way fact poison head rule negative subgoals subgoal 
recursively fact poison head rule positive subgoals poison 
note positive subgoals poison 
way find maximal unfounded set find poison facts 
positive ground atoms negation model maximal unfounded set 
example poison facts facts depend body negative subgoals 
remaining facts belong maximal unfounded set ft rounds add done 
founded model case unknown facts valued founded model 
model output gates 
example example circuit complicated get unknown values 
see deal possibility may instantiated rules ground atom 
gates different means output input input 
rules describing operation circuit data representing circuit fig 

instantiations known false subgoal fig 

circuit example 
eliminate known true subgoals bodies get round infer heads rules empty bodies 
true 
eliminate rule infer 
inferences type possible 
eliminate rules heads inferred eliminate rules false subgoal rule leaving instantiated rules round poison rules negated subgoals remaining 
rule poison subgoal poison 
ft maximal unfounded set 
infer 
round eliminate rules false subgoals 
remaining rules empty bodies inferences 
round poison depends inferences 
founded model ft ground atoms unknown truth value 
notice eventual value terminals depends conditions circuit turned 
gates arrive true output output false 
tell circuit answer depends physical phenomena modeled circuit 
output gate complement output gate 
example example rounds necessary shall propositional order logic 
founded semantics applies propositional logic order logic may imagine instantiated order rules letters stand ground atoms 
round infer heads empty bodies 
round poison depend 
remaining set propositional variables fq rg maximal unfounded set 
infer round eliminate rules false subgoals eliminate true subgoal body rule 
result inferred follows round eliminate rules inferred heads rule false subgoal leaving ft ug maximal unfounded set 
infer resulting founded model fp ug 
stable models time founded semantics proposed gelfond lifschitz proposed stable model semantics 
original form valued model ground atom true false 
model stable logic program data 
true edb ground atoms exactly data 
rules instantiated possible ways resulting bodies evaluated model set heads rules true bodies exactly set true idb ground atoms example return win rule example 
move acyclic valued founded model win true false depending player move force win position call model claim stable model move acyclic 
win true position move true win false instantiated rule win move win body true win proved 
hand win false win position move true win player move win true follows instantiation head win true body 
logic program may may stable model may 
unique stable model model taken preferred model stable model semantics mute question preferred model 
valued founded model ground atom assigned value unknown model unique stable model van gelder ross schlipf 
example illustration phenomenon 
stable founded approaches generalizations local stratification sense program locally stratified resulting model wellfounded model valued unique stable model 
founded model valued possible unique stable model 
example example taken propositional logic stable model true false 
assuming rule lets infer rule lets infer inferred 
get model started back proving stable 
founded model leaves unknown 
important difference founded stable approaches tractability 
founded models computed time polynomial size database 
wellfounded model valued stable model polynomial time algorithm finding stable model telling exists 
number developments modifying relating stable founded semantics 
example zaniolo look intersections stable models 
baral subrahmanian consider sets stable models meaning programs 
przymusinski gives valued extension original valued definition stable models shows coincide founded model 

modularly stratified semantics modular stratification idea ross attempts find subset logic programs founded semantics implemented efficiently 
efficiency concerns magic sets rule transformation allows queries bound arguments answered looking parts database irrelevant 
instance example answer query win true particular board looking move data positions reachable shall go magic sets techniques see ullman motivation 
define modularly stratified programs give examples 
order logic program data modularly stratified possible divide predicates modules properties 

possible order modules predicates module depend predicates module previous modules 
put way may recursion predicates takes place solely modules 

module locally stratified perfect model instantiate rules treat subgoals predicates previous modules true false founded model module 
compute locally stratified model module order results previous modules determine truth falsehood subgoals outside module 
module valued model ambiguity truth value subgoals outside module 
example consider rules augment rule example introducing idb predicate move really edb predicate move 
win move win move move example acyclic move relation rules modularly stratified 
reason instantiate rules get rules win move win win move win move acyclic move move true apparent cycle resolved compute move 
definition locally stratified fails immediately place win win strata 
hand rules modularly stratified 
place move move module win higher module 
module lets compute move copy move 
win module move behaves edb predicate acyclic compute locally stratified model win just example 
founded models perception shared author founded models stable models depending beliefs right interpretation put logic programs negation 
subject received exploration anomalies surfaced approaches 
clearest expression problem torres example 
example designers complex buildings wish put cafeteria lounge building 
reduce number put adjacent buildings sure building adjacent building cafeteria 
logic program expresses situation 
lounge adjacent cafeteria cafeteria lounge program equivalent win program introduced example expect adjacent symmetric games symmetric move relation uninteresting 
similarity may clearer introduce win program intermediate predicate loss win move loss loss win win problem need founded semantics logically identical semantically different cafeteria problem really solved set stable models pointed subrahmanian correspond case maximal independent sets undirected graph edges adjacent 
direction geffner torres generalize notions stable founded models considering assumption sets sets negative literals 
set candidate assumption 
instantiate rules possible ways substituting constants variables needed rules predicate logic propositional logic 
delete bodies instantiated rules negated subgoals assumption set instances assumption set case predicate logic 
remove rule instances negated subgoals body resulting rules logically imply negation negative literal assumption set 
note ffl deduction delete certain negated subgoals instantiated rules delete certain rule instances applies set rules different original rules 
example consider rules propositional logic sg argument delete bodies bodies empty rules reduce heads fp rg 
prove contradicting member assumption set 
hand sg argument delete bodies get third remaining negated subgoals go away leaving trivial rule rules infer facts prove implication possible model original rules fq sg geffner torres approach generalizes founded stable semantics previous approaches treat negative subgoals uniform way 
newer approach free assume subset negative ground atoms true leave open 

summary shows relationship principal classes logic programs considered 
line directed downward class class means 
program data pair class program data pair class 
program data pair classes selected models classes 
bibliography apt blair walker 
theory declarative knowledge foundations deductive databases logic programming minker ed morgan kaufmann san mateo pp 

baral subrahmanian 
dualities alternative semantics logic programming non monotonic reasoning proc 
international workshop logic programming nonmonotonic reasoning mit press 
clark 
negation failure logic databases minker eds pp 
plenum new york 
geffner 
negation failure proc 
nd intl 
conf 
principles knowledge representation reasoning pp 

gelfond lifschitz 
stable model semantics logic programming proc 
fifth iclp mit press cambridge ma pp 

kemp stuckey srivastava 
magic sets bottom evaluation founded models intl 
conf 
logic programming pp 

semantics stratified modularly semantics founded valued negation negation stratified stratified negation locally semantics stable semantics founded fig 

relationships semantics classes 

efficient query answering stratified databases proc 
intl 
conf 
fifth generation computer systems pp 

mccarthy 
circumscription form non monotonic reasoning artificial intelligence pp 

morishita 
alternating fixpoint tailored magic programs proc 
twelfth acm symposium principles database systems pp 

naqvi 
negation failure order queries proc 
fifth acm symposium principles database systems pp 

papadimitriou yannakakis 
tie breaking semantics structural totality proc 
eleventh acm symposium principles database systems pp 

przymusinska przymusinski 
semantic issues deductive databases logic programs formal approaches artificial intelligence banerji ed przymusinski 
founded semantics coincides valued stable semantics fundamenta informaticae pp 

przymusinski 
logic program natural stratification iterated fixed point model proc 
eighth acm symposium principles database systems pp 

ullman 
survey research deductive database systems submitted logic programming 
ross 
procedural semantics founded negation logic programs proc 
eighth acm symposium principles database systems pp 

ross 
modular stratification magic sets datalog programs negation proc 
ninth acm symposium principles database systems pp 

zaniolo 
stable models non determinism logic programs negation proc 
ninth acm symposium principles database systems pp 

shoham 
nonmonotonic logics meaning utility ijcai pp 

torres 
right semantics negation failure third intl 
symp 
deductive approach information systems databases 
torres 
hypothetical semantics logic programs doctoral thesis stanford univ dept cs 
ullman 
database knowledge base systems vol 
ii computer science press new york 
van gelder 
negation failure tight derivations general logic programs proc 
symp 
logic programming ieee pp 

van gelder 
alternating fixpoint logic programs negation proc 
eighth acm symposium principles database systems pp 

van gelder ross schlipf 
founded semantics general logic programs acm pp 

