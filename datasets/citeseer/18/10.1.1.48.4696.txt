advanced video information system data structures query processing candan su shing chen erol subrahmanian institute advanced computer studies institute systems research department computer science university maryland college park md 
candan cs umd edu nsf gov describe video data may organized structured facilitate queries 
develop formal model video data show spatial data structures suitably modified provide elegant way storing data 
develop algorithms process various kinds video queries show cases complexity algorithms linear 
develop algorithms update video databases 
prototype system called avis advanced video information system designed university maryland concepts 
years advent cd rom high bandwidth communications networks caused spectacular explosion availability large video libraries 
great deal effort invested problems effectively utilize bandwidth communicate large bodies data network relatively little effort gone organize access video databases 
primary aim study methods indexing video databases efficiently store retrieve video data number diverse ways 
example queries retrievals may query find video frames john wayne appears query find video frames murdered complicated ones research supported army research office daal air force office scientific research arpa rome labs contract nr 
order nr 
nsf young investigator award iri 
su shing chen information technology organizations program national science foundation wilson blvd arlington va 
query find video frames dean martin appears fred dancing rogers query find people appear frames gene kelly rogers getting married query find video frames showing rogers dancing fred room note fred may visible frames fact room time may known advance query find video frames alfred hitchcock appears killed 
examples kinds complex queries may asked multimedia database system 
designing indexing schemes store multimedia data need take account kinds queries asked system 
primary contributions 
show certain kinds existing spatial data structures adequate efficiently storing certain kinds information 
particular show problem storing objects occur frames may viewed equivalent problem storing line segments 

second show may spatial database intuition efficiently index multimedia data able handle kinds queries listed particular show combination spatial database technology relational database technology merged efficiently solve kinds queries 

third describe updates information video data may efficiently implemented data structures defined 

describe prototype implementation called avis advanced video information system data structures algorithms 
implementation suggests theoretical algorithms practice 
video databases spatial databases motivating example movie hitchcock go give example 
example introduce alfred hitchcock movie rope 
movie minutes duration 
movie friends philip brandon farley granger john decide commit perfect crime 
want prove privileged group people allowed kill just sake killing receive punishment 
kill friend david hide inside chest living room 
sign give party invite friends david david girlfriend janet joan chandler janet old boyfriend kenneth douglas dick parents david father sir cedric david aunt collier 
individuals talk david little david body room 
addition people invite challenge old mentor rupert james stewart known intelligent suspicious 
rupert prove worthy reputation immediately understand extraordinary circumstances 
movie progresses rupert keep asking questions gather clues find wrong 
come back example sections main example 
distribute clues progression movie 
progresses careful reader learn rupert learns happens 
entities video database look queries section notice types information queried 
type set entities things interest movie 
second type information video frames entities 
section list types entities video interest explain notion occurrence entity mapped spatial domain 
entities video database may different structures 
example correspond visible objects characters video answer question 
query involves objects scene visible 
queries hand deal entities certain set attributes activity getting married related attributes groom best man may specified 
similarly may entities different media audio 
list different types entities claim way exhaustive list reader invited add entities list ffl video objects entities video frames 
video objects may characters movie philip rupert may objects chest body hidden murder weapon 
similarly objects may invisible video frames 
example body david room guests movie seen 
fact fact constitutes ultimate irony plot 
restrict visible objects time shortly explain invisible objects handled 
ffl activity types informally speaking activity describes subject video frame sequence 
instance movie rope murder activity similarly giving party activity 
reason multiple activities may simultaneously occur video frame sequence instance party may open chest containing body 
ffl event event may thought instantiation activity type 
instance activity type opening chest may refer separate events philip brandon opening chest put body wilson opening chest put books different events involving activity viz 
opening chest 
note activity types general groups containing events stored implicitly form set events activity type 
roles events activity type differentiated set objects involved 
role description certain aspect activity 
roles may involve objects example victim murderer roles activity murder 
roles may descriptions murder motive murder weapon 
teams team set objects descriptions jointly describe event instantiation roles activity type 
instance talk event murder david philip brandon team involved consists david role victim philip brandon role murderer rope plays role murder weapon proving committed perfect crime role murder motive 
members team called player 
note conceptually video objects may special activity type teams empty 
entities accessed frequently decided represent separately 
example example movie chosen video objects activity types corresponding events numbers parentheses show unique number video database 
video objects philip brandon wilson rupert janet kenneth chest rope murder weapon 
events david rope philip brandon giving party philip brandon hosts people objects guests different events activity type opening chest actors philip brandon body placed chest wilson opens put books doesn see body rupert opens movie see body really suspected 
events type find clues 
frame sequences area video databases observe video data may classified follows body raw video data short set entities called frames 
purposes frame may thought piece video short duration 
addition raw video data set ent entities objects interest domain 
association map specifies objects occur video frames 
marcus subrahmanian series papers specified multimedia database systems may formally modeled lines briefly outlined 
order formally specify association map need elementary definitions assumptions assumption assume set frames set ng arbitrarily chosen fixed integer likewise assume set objects set kg arbitrarily chosen fixed integer loss generality making assumption convenient providing formal mathematical framework reasoning multimedia systems 
frame sequence pair represents set frames inclusive non inclusive 
words fk jg 
resp 
said start resp 
frame sequence 
may define partial ordering set frame sequences follows iff intuitively means sequence frames denoted precedes sequence frames denoted 
usual denote set frame sequences said ordered iff 
finite integer 

example set ordered set frame sequences 
hand ordered 
set frame sequences said solid iff 
ordered 
pair frame sequences form 
instance take solid 
may converted equivalent solid set frame sequences replacing solid 
intuitively requirement solidity says abutting frame sequences merged form frame sequence 
association map function entity ent ent ent solid set frame sequences 
intuitively ent means entity ent occurs frames frame sequences 
example recall movie rope 
purposes annotation divided movie frames minutes 
note granularity division coarser ideal case 
determined object event occurs specifying association map movie 
object philip appears movie association map philip indicates philip seen frames 
atwood come party stay leave 

examples frame sequences objects events appear brandon wilson rupert philip brandon opening chest wilson opening chest rupert opening chest association maps segment trees section show association maps correspond exactly line segments axis cartesian plane association maps may stored method store collinear line segments known segment tree cf 
samet 
example consider association map depicted corresponding movie rope definitions earlier section 
types entities discussed seen video objects events 
seen may represent set line segments associated segment tree 
difference segment trees ordinary segment trees cf 
samet single object name may label multiple line segments 
differentiate refer data structure frame segment tree 
observation association maps correspond line segments new individuals multimedia community 
diagram fact video object number example philip appears video frames represented shaded horizontal lines associated object number 
key observations object frame map just set line segments horizontal 
consequently frames object appears may viewed set line segments axis obtained projecting shaded line segments shown axis 
appropriate data structure problem contain ffl segment tree representing set line segments ffl additional arrays provide additional indices nodes tree denoting corresponding data located 
specifies data structure interval applied association map shown 
explain construction data structure shown 
legend object event video entities frame numbers association map rope philip brandon wilson rupert janet kenneth atwood chest murder weapon murder victim david murderer philip murderer brandon host philip host brandon guest rupert 
open chest actor brandon actor philip give party object array linked segment tree frame segment tree representation video frames 
node frame segment tree represents frame sequence starting frame including frames including frame 
number inside node may viewed pointer node 

set numbers boldface placed node denotes id numbers video objects events appear entire frame sequence associated node 
example node represents frame sequence object occurs frames object labels node object labels ancestor node tree 
object array array th element denotes video object number denoted oi 
associated element array ordered linked list pointers nodes frame segment tree 
example shows linked list associated object number contains pointers nodes respectively 
nodes frame segment tree described labelled object number 
nodes represent respectively frame sequences 
nodes stored order shown astute reader may wonder frame segment tree contains information necessary order capture association map 
necessary store object array 
answer queries may formed multiple keys object array facilitates efficient handling certain kinds queries 
consider instance elementary membership queries 
wish find frames object occurs 
object array relatively simple matter just return entire list associated video object locating entry constant time operation case 
case event array stores frame sequences form links frame segment tree different event 
events uniformly numbered en 
event information stored activity type team list pairs form role player list tree nodes indicates frame sequences event occurs 
index simply stores activity type list events type 
facilitate queries certain activity type opposed certain event type 
similarly simply lists name roles roles stored unique id number video database 
addition assume hash tables objects activity types roles map names unique id numbers 
give details tables re locate id numbers 
full description video databases position formally describe video database 
assume obj set video objects evt set events video database 
ent obj evt ent set entities 
association map maps elements ent sets frame sequences 
event evt exists mapping maps event activity type 
example movie example murder 
assume activity type set role associated members set role strings denoting names roles associated activity example role murder murderer role 
event activity type assume mapping players maps role set obj evt str str set possible strings 
range map players specifies team involved event 
definition video database tuple obj evt act role players ffl set integers ng ffl obj set members called objects ffl evt set elements called events ffl assigns entity ent obj evt solid set frame sequences ffl act set elements called activity types ffl set elements called roles ffl map assigns event activity type ffl role map takes input frame sequence evt obj activity role assigns output member obj ffl players map takes input event activity type output returns mapping roles activity entities database strings 
data structures section define data structures necessary order store video data interested dealing 
types structures need defined frame segment tree allows specify events relevant players teams video objects occur segments video allows accessing video segments objects keys allows accessing video segments activity types keys facilitates accesses events keys 
key component special kind segment tree 
frame segment trees section define special kind segment tree called frame segment tree fs tree short multimedia data 
structure nodes frame segment tree may defined follows 
note data structure players restricted video objects straightforward augment data structures allow players type 
type record start integer starting frame number finish integer frame number list objects associated node list activities associated node left child right child type record objid integer object number node list type record integer activity number node activity list assumption assume node type maintained ascending order object number event number respectively 
example consider node associated node stored order 
arrays may defined arrays elements record structures respectively 
assume val val val val constants 
type record name string name object frames pointer list tree nodes type record name string events type record integer frames type record player integer object number role integer role number player team type record segments points tree node node list array val array val array val array val string formal description data structures may proceed 
listing elementary queries posed system 
development algorithms execute queries 
complexity analysis algorithms query 
formal rendering algorithms efficiently update data structure new entities existing videos important 
query processing preceding section specified data structure store video information 
section try show data structure facilitates efficient execution different types queries 
give examples queries explain answered data structure 
addition developing algorithms handling queries analyze algorithmic complexity procedures 
elementary object queries query form name object find video frames object occurs 
example find video frames murder weapon object seen 
query return answer video frames may simply return set frame sequences capturing video frames similarly query find video frames brandon seen return answer method query may processed finding id object question name query hash table mentioned earlier 
follow link frames create set frame sequences corresponding start points tree nodes object merge frame sequences obtain solid set 
complexity finding object done constant time time required proportional linear number segments object appears size output 
elementary activity type queries query form find video frames events activity type occurs 
example find video frames opening chest 
different events corresponding activity type practice activity types general open object open chest example movie 
actor philip brandon wilson rupert 
find frame sequences events merge 
get answer method query may solved locating events corresponding activity type 
done examining hash table list pointed events 
set frame sequences events obtained links merging results solid sets frame sequences 
sets frame sequences merged final solid set give final output 
complexity case elementary object queries time required proportional linear number segments associated events activity type consideration 
detailed activity queries event queries query form find video frames set events occurs events specified activity type roles specific objects involved activity players provided query may partial list players event may event satisfying query 
example find video frames rupert clue philip 
philip brandon cold brandon brains team philip helper 
philip nervous person inadvertently give away clues rupert closely move 
brandon tells story chicken kids shows unexpected reaction 
rupert hand knows story true cf 
frame 
second brandon gives books ties rope murder weapon 
philip sees rope frame course questioned rupert events 
original query return method query similar elementary activity query search locate relevant events complex 
activity type question located ex 
finding clue 
events listed activity type searched 
events checked see teams contain necessary players ex 
finder rupert giver philip 
events link frame segment tree followed solid set frame sequences formed 
sets merged give final result 
complexity time required proportional number segments events satisfying conditions plus cost checking event activity type role object pairs query 
cost check number role object pairs events activity type 
object occurrence queries query form find objects occur set frame sequences 
example find objects frame sequence 
incidentally frame sequence corresponds duration party movie 
give everybody involved party way 
query return video objects database including chest murder weapon 
reader may notice invisible object david body stored database returned query 
ironically part party 
method query may solved searching frame segment tree starting root set frame sequences 
node visited intersects frame sequences set objects stored node added output set objects left right children node visited 
possible split set frame sequences children sequences may possibly intersect corresponding child included call 
time set new objects added output list duplicates need removed 
costly operation 
bag clusters objects step reducing complexity operation 
complexity information computed segment tree cost involved proportional number nodes segment tree parents interval overlaps frame sequence query times log plus number objects nodes 
computed faster node needs checked 
log factor cost checking node interval overlaps frame sequence query 
activity type occurrence queries query form find activities occur set frame sequences 
example find activities occur frames 
give activities murder opening chest giving party playing piano 
method complexity similar object occurrence query 
tree searched algorithm 
time events collected search collected events grouped respective activity types list returned 
conjunctive queries examine queries see queries grouped query types queries take input specification return output set frame sequences queries take input set frame sequences return set objects type input returns output set events queries discussed take types input return output return activity types role specific object examples queries query takes input set frame sequences returns output objects events frames 
similarly query takes input object event returns output set frames object seen event occurs 
example find frames people eating time chest seen 
happens movie brandon moves table top chest guests arrive 
rupert suspicious learns talk wilson 
method algorithms depends specific query posed 
conjunction execute simple object event queries relevant parts query 
intersect frame sequences obtain result 
note frame sequences returned queries ordered intersection operation costly 
approach particularly useful previous code 
complexity time required equals sum time required component plus cost intersection answers 
answers components happen sorted intersection order size 
intersection log sum sizes individual queries 
compound queries queries involve relationship different objects events 
section consider non temporal queries 
example suppose consider query find objects video certain event specified activity type team occurs 
general answers compound queries directing output function input function 
example find people scene brandon rupert discuss murder privilege reserved small group people 
happens frames 
objects seen frames philip brandon rupert kenneth janet 
types queries discussed earlier may different types video objects invisible objects 
may audio events events referring dialogues movie singing 
queries involving objects similar ones invisible objects objects audio events events properties 
specify stored may easily think straightforward extensions data structure handle objects 
query processing algorithms may modified slightly process queries involving entities previous ones 
query type general query user specifies complex condition combination queries 
solving queries scope 
addition may ask temporal queries query number 
semantics queries specified authors addressed 
example operators right overlaps included cf 

addition semantics operators established clearly 
instance consider query find events rupert involved finds brandon murderer david told kenneth janet old boyfriend feels kenneth may better chances janet david girlfriend 
suppose specified event happens places may mean occurrence occurrence event 
deferred treatment queries 
updates real world video database system organized lines described far change period time 
classified changes categories 

insertion deletion entity examples insertions insertion new object new activity type new event database insertion new player event 
similarly objects events may need deleted corresponding information stored entity video database 
may various reasons operations 
example may case object occurred frame significance may realized earlier need store fact occurred may realized 
far fetched assume annotation movie rope experienced movie watcher immediately ask query find frames hitchcock appears personally 
hitchcock annotation video query answered 
may decide object needs added database 
reason change movie database possibility entities wrongly annotated 
instance objects may identified incorrectly 
object may need deleted altogether reinserted data structure 
consider case elvis look alike categorized elvis inspection may show fact elvis may necessitate deletion object elvis 

modification frame sequences databases may contain incomplete information may find object event occurs additional frames weren initial list 
need modify database inserting new frame sequences necessary data structures 
similarly may find mistake objects events listed occurring certain frames fact occur 
reason may need delete frame segment tree frame sequences associated object corresponding array 
easy see updates pretty straight forward 
particular updates relational nature involve temporal properties 
updates require modifications frame segment tree broken elementary operations 
updates include inserting set frame sequences frame segment tree specific object deleting set frame sequences specific object database inserting deleting event 
updates listed earlier section encoded treating operations elementary ones 
example deleting object done locating object retrieving set frame sequences object deleting sequences 
sections give operations detail 
subsequently quickly outline methods implementing similar 
insertion set frame sequences object operation name object inserted solid set frame sequences object appears input 
data structure modified way object appears specified frames 
method 
object create entry 

frame sequence input list put frame sequence tree mark necessary tree nodes id object 
step described 
tree node marked object insert node frames list object pointer tree node note frames lists preserved sorted order 
recall restrict boundaries nodes frame segment tree start points frame sequences entities occur 
frame sequence inserted may fit nodes tree completely 
case need split boundaries nodes 
frame sequence inserting tree boundaries 
cases consider ffl case leaf tree boundaries case node new children boundaries 
ffl case leaf tree boundaries 
case new children node boundaries 
ffl case leaf tree boundaries case children boundaries child child 
addition child children boundaries 
note boundaries parent node changed cases objects pointing parent node affected change tree 
updates easily accomplished 
hand tree may unbalanced insertions type 
standard tree balancing techniques may easily adapted balance trees necessary 
complexity task performed time nh height segment tree cardinality solid set frame sequences associated object inserted 
deletion set frame sequences object case insertion operation takes input name object solid set frame sequences object appears deleted 
algorithm operation method deletion algorithm may implemented follows 
object halt report failure 

frame sequence input list exists node segment tree frame sequence form frames list remove object corresponding tree node 
ii 
remove fs list 
iii 
insert object tree frame sequence set note omitted set 
exists frame sequence form corresponding frames list remove object corresponding tree node 
ii 
remove frames list corresponding node 
iii 
insert object tree frame sequence set note omitted set 
exists frame sequence form corresponding frames list remove object corresponding tree node 
ii 
remove frames list corresponding node 
iii 
insert object tree frame sequence set note omitted set 
exists frame sequence form corresponding frames list remove object corresponding tree node 
ii 
remove frames list 

frame sequences frames removed release corresponding slot 
insertion deletion set frame sequences event case event id provided input 
event may identified activity type team correct execution operation unique id event question provided 
event identified set frame sequences operations exactly access previous cases 
give details operations 
operations briefly mention simple updates may performed video database 
player insertions insert new player database name object role object id relevant event input 
corresponding event located new node inserted players list id object hash table role 
player deletions order delete player certain events video database name role player corresponding event id input 
entry event located 
player playing role searched players list id node containing information deleted list players 
storing multiple videos far focused storing single video 
users need ability query video library certain objects 
user may ask queries find video frames database necessarily specific movie alfred hitchcock appears 
handle queries possible maintain global list objects events activity types kind array structure similar arrays 
array contain list object example list videos contain object 
similarly global event arrays global role arrays maintained case single video 
query may answered locating relevant videos directing elementary object query indices associated individual videos 
possible advantage different processes sharing global hash name server entities database 
system implement capability quite easily 
implementation avis advanced video information system algorithms described implemented prototype system called avis advanced video information system 
subsequently avis hooked powerful system software integration called hermes heterogeneous reasoning mediator system 
advantage hooking avis hermes parsing capabilities hermes automatically available avis 
furthermore hermes allows complex queries integrate data reasoning multiple domains possible ask queries form find frame sequences actor actor appeared movie actor appears frame sequences query may require access relational database say ingres specifies actors occured movie access video content rope provided avis 
video content rope may stored data structures described 
quickly describe implementation avis followed integration hermes avis 
avis avis implements query processing algorithms described 
consists approximately lines code runs unix platform 
basic functionality avis captured pre defined predicates access functions having name predicate described 

event frames event event complex type predicate succeeds just case list frames specified event occurs 
particular event consists activity type players names roles 
output frame list solid set frames 
frames objects frame ranges objects predicate succeeds just case object set objects occur frame occurring list frame ranges frame ranges 
example call frames objects 

obj asks objects occur frames 

frame lists objects frame range list objects list lists ranges frames function returns objects occur lists 
instance call predicate query frame lists objects 



objs find objects occur ffl frames ffl frames 

object frames frames predicate find frames specified object occurs 
instance query object frames rupert frames returns list say 

specifying rupert appears frames 

objects events frames predicate takes list objects list events possibly specified players specified roles 
succeeds just case list frames events occur specified characters specified roles specified objects occur frames 
arguments predicate complex types 

frames activities frame range activities similar frames objects predicate 

frame lists activities frame range lists activities similar frame lists objects predicate 
hermes multiple databases data structures software packages need integrated typically accomplished writing chunk program code called mediator program uses source code databases data structures involved order glue 
hermes system developed university maryland creating mediators 
hermes mediator program written logic language shall describe 
particular set software packages databases integrated mediator author charged responsibility writing mediator tools mediator development toolkit 
mediator language able extract information different databases software packages details implementation packages may hard discover integration model existing operations implemented packages integrated results computations performed software packages involved logical manipulations 
avis hermes quickly describe example avis hermes providing functionality provide 
see consider query find frame sequences movie rope actor acts specified movie appears 
suppose relation called portfolio stored ingres dbms schema name movie specifying movies acted actor 
furthermore suppose flat file relation called cast associated just single movie rope schema name role specifying actor played role rope 
query encoded special predicate call actor movie results succeeds just case results appropriate set frame sequences associated query 
encoded rule mediator form movie results ingres equal portfolio movie movie equal cast name name object frames role results query illustrates features integrated hermes avis system 
particular ffl constraint relation equal portfolio movie movie performs select operation ingres relation portfolio producing set records related movie 
ffl constraint equal cast name name performs select operation flat file relation cast identifying tuples associated objects appeared movie 
ffl avis search data structures appropriate video frame ids rope contain character role played actor 
note predicate object frames role results accesses avis algorithms avis data structures way described 
shows window query issued 
shows solution returned query 
particular video frames returned part answer system merges composite low resolution image answer user may view convenience composite picture sequence video 
instance user clicks mouse button answer comp list video frames showed screen 
shows 
user may subsequently request see specific image say frame ras gz clicking mouse button frame ras gz cf 

brings shown 
related couple years small noticeable spurt activity area video databases 
primary aim develop techniques video may organized queried 
works closely related gibbs study stream temporal multimedia data may modeled object methods 
concepts roles players distinction activities events integration video systems traditional database systems addressed 
develop generic data model capturing video content structure 
idea video included data type relational databases systems paradox ingres augmented handle video data 
particular study temporal queries 
contrast innovation approach studied spatial temporal data structures suitably modified query video data 
intuitions develop techniques processing queries updating video data structures algorithms know incorporating updates video data 
tanaka developed language called accessing video data 
contrast effort develop indexing structures query processing algorithms querying video data logical query language cf 
hermes query data 
video includes davenport argue segmenting video done frame level 
consistent rendition video frame level corresponds known data structure called unit tree cf 
just segment tree described leaves represent unit intervals intervals form 
contrast segment trees allow leaves granularity needed best represent content video annotated 
works video indexing include specific disk techniques methods dealing compression image processing synchronization structures 
deal picture retrieval systems works deal static images contrast studied ways organizing temporal sequences images video 
years ability deliver movies homes increased substantially 
cable tv phenomenon enhanced slowly steadily systems support pay view paradigm 
years rapid concomitant evolution information super highway expect see widespread video demand services available 
services likelihood just encompass commercial movies entertainment industry broad include movies travel destinations movies educational items movies advertising material consumer products training manuals electronically accessible video library exists libraries exist today national archives college park md need access database content assumes great importance 
primary aim develop techniques content movies stored line facilitate accesses 
accomplish succinct theoretical description video databases 
shown video databases may stored electronically furthermore designed polynomial time query processing algorithms traverse data structures 
addition content video databases may updated time time developed methods implement updates 
developed implemented system called avis advanced video information system implements various video queries described 
hsu chiu 
image processing compressed data large video databases acm intl 
conf 
multimedia pps 
berson ghandeharizadeh muntz ju 
staggered striping multimedia information systems proc 
acm sigmod conf 
management data pps 
chen little 
physical storage organizations time dependent multimedia data proc 
foundations data organization algorithms fodo conf oct 
davenport smith 
cinematic primitives multimedia ieee comp 
graphics applications july 
gibbs tsichritzis 
data modeling time media proc 
acm sigmod conf 
management data pps 
gibbs tsichritzis 
multimedia programming objects environments frameworks acm press addison wesley 
raghavan 
design evaluation algorithms image retrieval spatial similarity appear acm transactions information systems 
raghavan 
unified approach data modeling retrieval class image database applications appear multimedia database systems eds 
jajodia subrahmanian springer 

modeling querying video data proc 
intl 
conf 
large databases pps santiago chile 
day 
object oriented model spatiotemporal synchronization multimedia information proc 
intl 
conf 
multimedia computing systems pps ieee press 
lu nerode subrahmanian hybrid knowledge bases ieee transactions knowledge data engineering 
appear 
available technical report cs tr university maryland 
marcus subrahmanian multimedia database systems 
submitted publication 
niblack qbic project querying images content color texture shape ibm research report feb 
tanaka 
design implementation database system ieee trans 
knowledge data engineering pps 
samet design analysis spatial data structures addison wesley 
subrahmanian 
hermes heterogeneous reasoning mediator system submitted journal publication 
wiederhold mediators architecture information systems ieee computer pp 
march 
wiederhold intelligent integration information proceedings acm conference management data pp 

