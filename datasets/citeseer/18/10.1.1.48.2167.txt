intensional programming languages rondogiannis department computer science university ioannina box gr ioannina greece mail cs gr wadge department computer science university victoria box victoria bc canada mail lucy uvic ca article introduces basic notions intensional programming paradigm 
intensional logic underlying theoretical framework intensional languages described motivated examples 
dimensional multi dimensional intensional languages discussed existing intensional systems surveyed 
article concludes presentation successful application areas intensional programming 
keywords intensional logic intensional languages dataflow functional programming 
major challenges computer science design programming language paradigms free programmers low level machine related tasks 
paradigms usually sound mathematical foundations allow cleaner declarative way programming 
intensional programming paradigm relatively foundations area intensional logic tho 
easy give brief non technical explanation intensional language really say main characteristics paradigm deals infinite entities ordinary data values 
entities stream numbers dimensional table characters tree strings 
entities treated class objects intensional languages streams numbers added ordinary data values functions applied infinite tables trees 
due characteristic intensional languages especially appropriate describing behaviour systems change time physical phenomena depend parameters time space temperature 
intensional languages solid mathematical foundations 
intensional logic promote purer declarative way programming traditional imperative programming languages 
article introduce basic principles underlying intensional languages 
section presents intuitive level area mathematical logic known intensional logic 
section introduces lucid intensional language notion stream glu extension lucid supports multidimensional entities 
section discusses main issues implementing intensional languages 
section surveys existing intensional programming systems applications 
article concludes discussion interesting research problems area intensional programming 
intensional logic intensional logic tho branch mathematical logic order describe concisely context dependent entities 
initial motivation development intensional logic formal description meaning natural languages 
sentences languages everyday life ambiguous interpreted different ways different situations different people 
led scientists believe natural languages formal mathematical point view impossible analyze study systematically 
montague father intensional logic firmly believed natural languages mathematical basis analogous artificial languages 
computer languages 
montague extremely technical difficult detail subject 
intuitively speaking say montague developed formal system effectively describing entities value depends implicit contexts 
meaning natural language expressions depends hidden parameters 
consider example expression athens capital greece truth value sentence depends time uttered 
today certainly true existed time points past greece different capital 
words truth value sentence time dependent formally meaning sentence function set time points set boolean values 
easily think sentences expressions depend hidden contexts time space audience 
example meaning expression value temperature thought dimensional table form london paris rome delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta words meaning expression function theta set time points set space points set values temperature obtain 
generalizing discussion say cases meaning natural language expression function contexts called possible worlds values 
function called intension expression 
value intension particular context called extension expression particular context 
temperature example intension expression table extension expression time point space coordinate rome 
context dependent character natural languages possibly due practical reasons talk completely impractical explain explicitly context sentences true 
example say prime minister probably mean prime minister time talk place talk usually specify explicitly parameters 
characteristic natural languages context manipulation operators order alter context 
example say yesterday temperature order refer value temperature previous day 
words north tomorrow change context 
operators avoid referring new context explicitly specify function context 
concluding brief unavoidably informal intricacies natural language reader keep mind expressions everyday talk context dependent 
intensional logic branch mathematical logic captures context dependent characteristics natural languages 
intensional logic close real languages order design new powerful expressive programming languages 
topic discussed coming sections article 
intensional languages existing programming languages machine oriented programmer obliged know aspects architecture underlying machine order able write simplest programs 
consider example notions variable assignment imperative language 
programmers usually think variables memory locations assignments commands alter contents locations 
example arrays programmers usually think consecutive memory locations access alter 
aspects traditional programming languages widely usually understood operationally 
words traditional programming languages architecture underlying machine explicit design 
interested programming paradigm hide unnecessary operational ideas programmer way natural language helps people hide unnecessary context details everyday talk 
idea comes mind develop programming languages intensional logic 
describing detail philosophy language simple intensional program computes infinite sequence natural numbers result nat nat fby nat notice operator fby read followed program 
semantics operator soon defined precisely 
time provide intuitive reading program result program sequence natural numbers 
value natural number sequence 
value sequence produced adding previous value sequence 
notice usual mathematical definition sequence natural numbers involves time index nat nat nat intensional program avoids explicit time index 
sequence natural numbers defined temporal operator fby subscripts 
indices 
example program intensional language lucid wa probably language 
value lucid expression depends hidden time parameter 
words meanings entities lucid programs ordinary data values infinite sequences ordinary values 
statements lucid program equations defining individual function variables required true context time point 
ordinary data operations referentially transparent 
means example value time point sum values time point basic lucid context switching operators fby 
operator switches time point takes 
operator fby takes back giving value second operand point giving value operand 
sequences 
ideas formalized semantic equations fby gamma equations constitute call indexical semantics operations define extensions result operation terms extensions operands 
lucid intension thought value varying time example loop variable iterative computation 
initial value value iteration step values subsequent steps 
fby operator allows express iterative algorithms concisely operand fby gives initial value second operand specifies way succeeding value determined current value 
example program computes stream fibonacci numbers result fib fib fby fib fby fib lucid language supports user defined functions operate sequences return sequences results 
example consider program result fact nat nat fby nat fact fact fi output program infinite stream factorials natural numbers sequence language lucid far obviously differs aspects usual imperative programming languages 
example notion variables change values assignment commands imperative programming modeled lucid sequences possess different values different time points 
similarly notion infinite sequence lucid supports model dimensional arrays traditional programming languages 
generally dimensional arrays 
lucid described dimensional intensional language 
applications language 
exist natural problems better thought solved viewed multi dimensional perspective 
lucid extended support dimensional entities 
new extended language named glu implementation developed sri 
glu allows user declare new dimensions define multidimensional entities vary dimensions 
dimensional entity thought infinite table threedimensional cube extending infinitely dimensions 
perform various operations arguments higher dimensional entities define functions take parameters return new entities results 
new language supports intensional operators different dimension 
illustration expressive power glu consider simple program appeared fw models problem heat transfer solid 
suppose long thin metal rod initially temperature left hand touches heat source temperature 
heat transfered temperature various points rod changes 
words temperature thought dimensional entity depends spatial position rod interested time point temperature increases time passes 
shown temperature rod function time space recurrence relations small constant related physical properties rod temp temp gamma gamma temp temp temp temp glu program models equations dimension time space result temp temp fby space fby time temp space temp space space temp line example declares program uses dimensions time space 
notice new operators appear definition temp fby space fby time space 
semantics operators straightforward generalizations semantics corresponding lucid operators 
syntax slightly different actual glu syntax 
noted temperature example described expressed compactly naturally glu formalism 
solution problem traditional imperative language probably require dimensional array loops order fill entries array 
example conclude brief syntax informal semantics intensional languages 
clearly easily propose alternative intensional languages underlying context space complicated different application domains 
branching time intensions tree 
branching time intensional languages proposed literature shown interesting applications rw wad rw rw 
discussion outside scope article 
implementation intensional languages infinite nature intensional programming languages suggests implementation problematic 
example know output lucid program infinite sequence ordinary data values 
sequence computed delivered user 
obviously possible require infinite amount time 
expect able compute larger larger parts desired output program 
implementation start computing value output sequence second 
traditional implementation lucid programs computational model known eduction wa 
illustrate main idea eduction example 
suppose want calculate fibonacci numbers 
assume implemented simple interpreter ev computes output lucid programs successive time points 
interpreter uses definitions program semantics lucid operators order calculate output sequence 
output fibonacci program previous section time calculated follows ev fib ev fby fib time output program calculated follows ev fib ev fby fib ev fib ev fib ev ev fby fib ev fby fib careful examination steps reveals computations take place 
suggests efficient implementation intensional language store values variables computed specific contexts results available demanded evaluation 
process storing intermediate results known warehousing data structure purpose usually hash table known warehouse 
maintaining warehouse execution easy task garbage collection required table tends get full old entries may useless calculations 
techniques devised managing warehouse component implementation interested reader referred wa bag 
considers multidimensional version lucid 
glu things complicated terms implementation 
evaluator compute values variables dimensions 
warehouse complicated stores values variables complicated contexts 
new problem appears called dimensionality variables 
knowing advance exactly dimensions variable depends 
knowing exact dimensionality program variables important helps reducing cost associated warehouse operations 
promising dimensionality algorithm reported dod 
notice main characteristic eduction computes value expressions respect contexts 
exists class hardware architectures dataflow efficiently supports execution respect context 
words dataflow machines ideal candidates eduction implemented 
concluding section mention dataflow architectures probably appropriate hardware platforms intensional language executed easy implement eduction efficiently traditional architectures see example rw rw 
existing intensional systems applications seen previous sections article lucid wa aw knowledge intensional language developed 
lucid functional intensional language sense supports order user defined functions operate streams 
comprehensive description language semantics applications potential extensions wa lucid book 
programs lucid book obvious language especially appropriate dataflow computations 
due temporal nature language appears appropriate developing interactive software potentially real time applications 
appendix lucid book describes implementation interactive vi screen editor lucid notice time book written existing functional programming languages capable efficiently executing applications type 
inception lucid extended ways 
variants specify spreadsheets dw attribute grammars tao real time systems fl jpl database systems pp 
vital extension language addition multiple dimensions resulted language glu granular lucid 
glu program consists declarative part fact program multidimensional lucid imperative part 
declarative part sequential functions specified imperative language 
glu development real world applications agi rj chapter 
logic programming programming paradigm benefited interaction intensional logic 
intensional logic programming languages proposed org 
temporal logic programming language influenced style lucid wad 
theory understood developed org ow 
extensions basic proposed handle integer time owd provide multiple dimensions style glu od choice predicates support dataflow style computations ow provide branching time allow uncertainty expressed rules disjunction heads grp 
despite theoretical advances evaluated practical applications significant size help reveal potential deficiencies 
area intensional programming appears offer significant benefits area version control pw 
intensional versioning approach described pw applications evolving area internet computing 
example application domain development language intensional html high level web authoring language 
advantage conventional html allows practical specification web pages exist different versions 
web sites created easier maintain require significantly space compared sites created cloning conventional html files 
article basic principles intensional programming languages 
distinguishing characteristic intensional languages basic entities manipulate intensions functions context space set data values 
depending context space obtain different languages serve different types applications 
article examples language lucid context space set time points language glu allows dimensions time 
area intensional programming continuously evolving new interesting problems posed 
important ones techniques efficient implementations intensional languages relationship web programming application domains benefit interaction intensional programming relationships traditional programming paradigms 
answers problems result better understanding field reveal real potential 
ashcroft jagannathan 
intensional language parallel applications programming 
szymanski editor parallel functional languages compilers pages 
acm press 
ashcroft jagannathan wadge 
multidimensional programming 
oxford university press 
agi agi 
glu multidimensional signal processing 
orgun ashcroft editors intensional programming pages 
world scientific 
arvind nikhil 
executing program mit tagged token dataflow architecture 
ieee transactions computers mar 
aw ashcroft wadge 
lucid language iteration 
communications acm july 
bag 
compilation dataflow language lucid 
master thesis department computer science university victoria 
dod dodd 
rank analysis glu compiler 
orgun ashcroft editors intensional programming pages 
world scientific 
dw du wadge 
spreadsheet intensional logic 
ieee software pages july 
dowty wall peters 
montague semantics 
reidel publishing 
fl lewis 
real time dataflow language 
stankovic editors hard real time systems pages 
ieee 
fw wadge 
intensional programming 
technical report dcs ir department computer science university victoria 
intensional programming concept generalizes ideas lucid 
grp rondogiannis 
disjunctive 
guo ida editors proceedings jicslp workshop multi paradigm logic programming pages bonn sept 
watson 
manchester prototype dataflow computer 
communications acm pages january 
jpl plaice 
time real time 
proceedings sixth international symposium lucid intensional programming pages 
od orgun du 
multi dimensional logic programming theoretical foundations 
theoretical computer science 
org orgun 
intensional logic programming 
phd thesis department computer science university victoria canada 
org orgun 
temporal modal logic programming 
sigart bulletin july 
ow orgun wadge 
unified theory intensional logic programming 
journal logic programming august 
ow orgun wadge 
extending temporal logic programming choice predicates non determinism 
journal logic computation 
owd orgun wadge du 
linear time logic programming 
chang editors proc 
fifth international conference computing information pages 
ieee computer society press 
pp plaice 
design indexical query language 
proceedings seventh international symposium lucid intensional programming pages 
pw plaice wadge 
new approach version control 
ieee transactions software engineering 
rondogiannis 
cactus branching time logic programming language 
proc 
international joint conference qualitative quantitative practical reasoning ecsqaru bad germany lecture notes artificial intelligence lnai pages 
springer june 
rj rao jagannathan 
developing scientific applications glu 
proceedings seventh international symposium lucid intensional programming pages 
rw rondogiannis wadge 
dataflow implementation technique lazy typed functional languages 
proceedings sixth international symposium lucid intensional programming pages 
rw rondogiannis wadge 
compiling higher order functions 
proceedings ifip international conference parallel architectures compilation techniques pages 
north holland august 
rw rondogiannis wadge 
higher order dataflow implementation stock hardware 
proceedings acm symposium applied computing pages 
acm press 
rw rondogiannis wadge 
order functional languages intensional logic 
journal functional programming january 
tao tao 
indexical attribute grammars 
phd thesis department computer science university victoria canada 
tho thomason editor 
formal philosophy selected papers montague 
yale university press 
wa wadge ashcroft 
lucid dataflow programming language 
academic press 
wad wadge 
tense logic programming respectable alternative 
proc 
international symposium lucid intensional programming pages 
wad wadge 
higher order lucid 
proceedings fourth international symposium lucid intensional programming 

intensional implementation technique functional languages 
phd thesis department computer science university warwick coventry uk 

intensional html 
master thesis department computer science university victoria 
