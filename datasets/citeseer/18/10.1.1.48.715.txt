appear proceedings sixth usenix technical conference static type determination pande barbara ryder tata research development department computer science design centre rutgers university road india new brunswick nj ryder cs rutgers edu lcsr tr static type determination involves compile time calculation type object pointer may point particular program point execution 
show problem precise interprocedural type determination np hard presence inheritance virtual methods pointers 
highlight significance type determination improving code efficiency precision static analyses 
safe approximate algorithm programs single level pointers conditional analysis technique lr 
discuss generalization approach analyze programs multiple levels pointer dereferencing 
emphasis static analysis community expanding compile time analysis include interprocedural information bur cal cbc mlr ck ck hs hrb mey 
historically compile time analysis intraprocedural context code optimizations 
emphasis shifting including interprocedural static analysis phases software life cycle including debugging integration testing fw hs hrb lak ow rw wei 
software analysis tools performed interprocedural static analysis employed grossly approximate techniques languages pointers 
landi ryder shown theoretical difficulty static analysis presence pointers introduced new technique interprocedural analysis programs lr 
developed safe approximate algorithm solve aliasing problem restricted subset excludes pointers functions casting union types exception handling lr 
arrays treated single aggregate distinguishing individual elements 
analysis programs prl plr represents attempts obtain highly precise static interprocedural information programs apply successfully software tool test analysis coverage tool tactic ow 
encouraged results obtained analyzing concentrating employ static analysis techniques beneficially programs 
concentrated efforts developing new techniques handle features distinguishing inheritance virtual methods object orientedness subtyping overloading polymorphism 
significant feature affecting compile time analysis virtual methods 
virtual methods type receiver invocation site dynamically determines method invoked 
static type determination late binding may replaced function call appropriate method inlined code suitable circumstances eliminating overhead late binding improving execution efficiency 
empirical studies dynamic behavior research supported part funds nsf ccr siemens corporate research 
author current address department computer science rutgers university new brunswick nj 
email pande cs rutgers edu simple casting malloc handled 
actual programs indicate opportunity avoid late bindings cases cg 
additionally statically determined list possible types receiver focus analyses selected methods entire pool methods name 
exclusion statically un invocable methods analysis eliminate spurious side effects improving precision subsequent analyses 
describes initial results research type determination 
algorithm type determination uses technique data flow analysis making gross approximations distinguishing features mentioned 
contributions seen levels increased efficiency precision compile time analyses ii improved run time performance programs analyzed 
general type determination done separately due interaction aliasing 
type determination algorithm restricted case single level pointers problems separable 
details generalized version appear pr 
true programs source source transformed programs 
claim able analyze able analyze programs incarnation 
desirable distinguishing constructs map constructs general gross approximations analysis inevitable 
particular virtual method mechanism expressed terms function calls arrays function pointers 
algorithms attempt precise analysis presence function pointers procedure variables handle limited usage constructs resort possibly worst case exponential analyses ghi hk lak 
motivated develop new techniques analyze virtual methods domain increase generality reduce construct semantically equivalent construct 
example transform class constructor malloc followed appropriate initializations express principle encapsulation concepts scope visibility overview section mention related especially analysis introduce program representation terminology theoretical problem complexity section 
show problem np hard presence single level pointers intractability problem inherent restricted case generalizing multiple level pointers 
section describe polynomial time algorithm determine points information class object pointed pointer program point 
provide running example derive points values key program points bring significance type determination 
section briefly describe interaction type determination aliasing general case 
conclude summarizing results 
related program point specific type determination object oriented languages attempted varying degrees success 
suzuki algorithm handles languages smalltalk objects serve receivers methods problem alleviated significant absence pointers objects 
algorithm palsberg schwartzbach ps infers types expressions object oriented language inheritance assignments late bindings 
set type constraints compute solution worst case exponential time 
algorithm perform control flow analysis track values objects 
suggest type determination data flow analysis orthogonal way aid algorithm performing optimizations type safety checks 
improving run time efficiency dynamically typed language self uses customization iterative type analysis inline caches replace dynamic binding procedure calls inlined code cu cu hcu 
algorithm lar rendered imprecise fact factors side effects method invocations aliasing due parameter bindings pointers 
suggested algorithms problems ck wei grossly approximate unsuitable context 
show aliasing type determination inseparable general case factored approach desirable 
ramesh developed algorithm performs alias analysis knowledge receiver type invocation site assuming corresponding virtual methods invocable par 
uses precalculated alias information type determination 
ss concept virtual method keep information virtual methods name 
approach leads loss context distinguishes virtual method 
vitek algorithm discovers potential classes objects simple object oriented language safe approximation lifetimes 
problem definition program representation control flow graph cfg method consists nodes represent single entry regions executable code edges represent possible execution branches code regions 
represent program interprocedural control flow graph icfg intuitively union cfgs individual methods comprising program lr 
formally icfg triple ae set nodes set edges ae entry node main 
contains node simple statement program entry exit method call return node invocation site 
intraprocedural edge call node represents execution flow invocation site intraprocedural edge return node represents control flow invocation site invoked method returned 
terms call invocation interchangeably 
non virtual method call represent control flow called method interprocedural edge call corresponding entry node 
similarly represent return control called method interprocedural edge exit node return node 
virtual method invocation impossible determine analysis correspondence call entry method invoked depends type receiver call site 
establishing interprocedural edge call node representing virtual method invocation appropriate entry node exit node return node part algorithm 
terminology ffl define icfg path ae realizable method path returns returns call site invoked 
paths icfg realizable 
analysis tries restrict realizable paths unrealizable paths correspond possible execution sequence 
ffl objects locations store information object names provide ways refer 
object name variable name possibly empty sequence dereferences member accesses 
ffl alias occurs exists realizable path program point names exist location program point 
represent aliases unordered pairs object names 
order unimportant aliases symmetric 
ffl type determination problem involves calculating type object pointed pointer program point result execution ends program point 
ffl pointer type pair 
holds realizable path aen points object class execution program point execution defined path occurs 
theoretical complexity problem theorem presence single level pointers virtual functions precise specific type determination np hard 
prove theorem polynomial reduction np complete problem satisfiability type determination presence single level pointers virtual functions pr 
easy corollary follows theorem involves subproblem problem 
corollary presence multiple level pointers virtual functions precise specific type determination np hard 
approximate type determination algorithm algorithm uses idea conditional analysis lr 
execution flow method analyzed assuming information hold entry method 
sense resulting analysis conditional assumed information entry 
algorithm rendered practical doing computation assumptions reach entry node execution path 
algorithm described applied programs allowing single level dereferencing pointers 
assume description receiver method call actual parameter corresponding formal denoted 
define predicate points interpretation points assumption fact true exists realizable path entry node procedure containing node assumption holds ii true exists realizable path entry node fact holds 
assumption pointer type pair fact pointer type pair 
running example discussing algorithm list program segment 
section illustrate significance type determination practical issues run time efficiency benefits optimizations 
section running example algorithm description 
practical issues node pointer point object class base immediately node receiver virtual method invocation 
circumstances base foo invoked executions notwithstanding virtual nature invocation 
virtuality base foo utilized invocation compiled function call reducing run time overhead virtual invocation 
limiting scope invocation base foo eliminating derived foo consideration may benefit analyses 
assignment node printing hello world appear possible side effects invocation node 
significant implication algorithm able determine call base bar derived bar receiver may point object type base 
call site considered non virtual 
potential disparity side effects virtual methods share name type determination significantly improve precision analysis 
resolving virtual method invocation unique function call may create possibilities inlining resulting elimination function call overhead 
inlining function call provide opportunities various intraprocedural optimizations 
transformation virtual invocation function call possible complete resolution receiver type 
example node receiver may point object class base derived 
receiver type unique naive approach may result retaining invocation virtual 
class derived inherits method baz class base redefining may safely compiled function call base baz 
general receiver virtual invocation site point unique class receiver types utilize virtual method virtual invocation may compiled function call 
architectures deep pipelining speculative execution issue accurate control flow prediction assumes significant importance 
static type determination replace virtual invocations function calls target method known compile time yield benefits comparable obtained profile prediction cg 
algorithm description determine type object pointer variable may point program point perform fixed point computation equations describing statement side effects class base class derived public base public public virtual foo foo virtual bar bar virtual baz base foo derived foo new base new derived printf hello world base bar 
derived bar base baz main new base new derived derived bar foo new base foo bar baz example type determination algorithm predicate points described 
underlying analysis data flow framework defined simple true false lattice 
elements lattice describe values points predicates program point 
algorithm safe approximate 
exists path node ptr 
holds execution algorithm report true predicate points apt ptr 
apt guaranteeing safety calculation 
owing intractability problem polynomial time algorithm justifiably approximate reporting overestimate actual solution 
worklist fixed point computation 
predicate points apt pt true time placed worklist 
marked true predicate stays true 
true predicate goes worklist exactly guaranteeing termination algorithm 
refer action true denote algorithm true points apt pt 
describe algorithm phases initialize information ii phase annotate node appropriately information obtained locally node iii propagate information icfg stabilization 
points predicates assumed false initially 
efficiency designed algorithm way performed points apt ptr 
true 
solution points node information pointer type pairs easily computed follows node icfg 
new true points 
true points type type returns type object name 
foo param true points entry foo type type param form pointer variable corresponding formal call non virtual 
phase worklist empty remove apt ptr 
worklist call node type implies type call call apt ptr 
exit node type implies type exit exit apt ptr 
type implies type apt ptr 
propagation phase pointer type info ptr 
fi fi apt points apt ptr 
true conceptually start information icfg nodes initializing possible points predicate false 
initialize worklist empty 
time complexity initialization entire points predicate may appear proportional number predicates possible constant time initialization lazy approach lr plr 
entries worklist come phase 
phase certain predicates node looking local information available node 
lists nodes examined phase associated actions 
note item restrict non virtual method calls 
knowledge receiver type educated guesses method invoked 
handle virtual method calls propagation phase 
program segment list examples type 
exists path entry main base 
holds assuming information entry main item true points base 
exists path entry main derived 
holds assuming information entry main item true points derived 
node item fact object class derived true points derived 
propagation phase worklist entries processed time 
processing worklist entry implies propagating effects pair pt holding node assumption apt successors node removing entry worklist 
new entries true result action placed worklist 
computation reaches fixed point worklist empty 
describe phase case analysis kind logical successor worklist entry 
illustrates propagation phase high level help propagation functions type implies type type call type implies type exit 
discussion explicate high level view describing propagation function 
type implies type apt ptr 
function captures intraprocedural aspects type propagation described cases 
case successor assignment ptr ptr points propagate ptr pointed node encountered immaterial 
case successor assignment ptr pointer variable ptr casting inheritance hierarchy ptr ptr ptr class ptr true points apt ptr true points apt ptr 
type casting appears node assignment type correct unimportant analysis ptr points object class irrespective cast type 
case successor node defines uses pointer variable ptr type ptr preserved true points apt ptr 
case simple propagation information change 
example type inferred true values points base 
points derived 
propagating information successor node preserves type true points base 
points derived 
applications case information propagates successors points call base points base 
points call derived points derived 
points call derived points derived 
type implies type call call apt ptr 
function responsible propagating pointer type pair call site appropriate entry return nodes 
consider cases 
case propagation simpler corresponding entry readily known typically call represents non virtual method invocation 
saw points derived 
visible called method derived bar true points entry derived bar derived derived 
call site actual parameter corresponds formal derived bar 
points derived 
true true points entry derived bar derived derived 
ptr visible called method type pointed ptr change case propagate predicate points call apt ptr 
directly corresponding return node points return apt ptr 
true single level pointers 
case call virtual 
suppose call node rec fun 
entry nodes effects worklist entry propagated depend type objects receiver rec may point call site 
circumstances possible typing information available virtual call site resolving method invocable case ii method resolved invocable typing information propagated reached virtual call site case 
case ptr rec ptr variable receiver rec 
effect points needs propagated method invocable receiver points object class example points call base 
propagates entry base foo true points entry base foo base base entry derived foo hand points derived 
propagates entry derived foo true points entry derived foo derived derived entry base foo 
effects accumulated information call site propagated appropriate method follows method call involves passing object address actual pointer formal true points entry type type 
note case handled phase method call node known 
points call apt ptr 
ptr rec determine corresponding entry perform actions case 
propagating points base propagate predicate points call derived true call true points entry base foo derived derived case ptr rec distinct variables suppose points information currently available receiver rec call node points call apt rec 
true points call apt rec 
true information receiver rec may point object type call site depending execution path 
virtual method call rec fun may lead invocation distinct virtual methods name fun 
effects worklist entry need propagated entry nodes invocable methods 
done fashion case considering entry node time 
example suppose points derived 
candidate propagation call seen points base 
points call derived 
true call receiver distinct methods base foo derived foo may invoked call result propagate points call derived 
corresponding entry nodes true points entry base foo derived derived true points entry derived foo derived derived pointer variable ptr visible invocable methods predicate worklist propagates directly return node true points return apt ptr 
type implies type exit exit apt ptr 
lastly describe type information propagates exit node corresponding return node 
exit exit node method fun return nodes corresponding exit instant processing worklist entry 
new return nodes may added method determined invocable virtual method call sites 
consider time 
explained earlier new virtual method determined invocable call node propagate effects call exit called method return node corresponding call node case type implies type call 
call nodes corresponding return nodes return node ptr visible method containing return node take propagation action 
variable goes scope need know type 
ptr visible method containing return node cases case apt non implying apt holds entry order ptr points object class exit call node responsible imposing apt entry turn leads ptr 
holding corresponding return node apt imposed entry invoked method requiring points predicate call node points entry apt apt true phase simply propagate ptr 
case true points ptr 
hand suppose took points apt apt impose apt entry true points apt ptr 
example suppose propagating points exit base foo base base 
return nodes viz 
takes points call base 
impose base 
entry base foo information available call exit base foo true points base assignment path call call points base 
true 
predicate imposes base 
entry base foo information available call propagating points exit base foo base base true points base case apt implying ptr 
holds exit assumption entry method directly propagate ptr 
true points ptr 
algorithm complexity considerations significant determining complexity algorithm 

values points initialized unit time representation dependent 

value predicate changes false true stays true 
true predicate added worklist value just changed false true 

total time complexity actions performed introductions intraprocedural propagation order number icfg edges number icfg nodes 

icfg node relevant solution third argument points predicate 
example points apt points apt 
yield inference may point object class node assuming average number assumptions apt pair derived node bounded constant algorithm linear solution size 
alias implies alias alias implies type 

obj 
type obj 
type implies type type implies alias 


mem mem member mem class intraprocedural type alias propagation extension multiple level pointers presence single level pointers pointer aliased pointer 
result pointer changes type point object type pointer changes type 
type determination aliasing receiver types decide virtual method invoked call site invoked method affect aliasing 
aliasing plays part type determination 
separation occur case multiple level pointers 
example node creates alias 
suppose subsequently execution path creates type pair type 
absence information alias pair 
holds node able infer points type type determination rendered incorrect unsafe 
recall unsafe underestimate set possible types receiver object 
illustrate intraprocedural aspects interaction type determination aliasing 
fact propagated appears followed node list appropriate resulting fact 
algorithm described section extend handle general case multiple level pointers involves interleaved type determination aliasing calculations 
implemented prototype general algorithm perform type determination aliasing programs multiple level pointer dereferencing 
detailed description general algorithm preliminary implementation results pr 
current results encouraging extending implementation analyze broader range larger programs order definitive empirical assessment algorithm 
polynomial time approximate technique perform program point specific interprocedural type determination shown theoretical difficulty problem demonstrated utility solution virtual method name resolution 
static analysis algorithm type determination accounts pointers virtual methods gross approximations 
ease explanation restricted problem domain programs single level pointer dereferencing virtual name resolution separable analyses 
currently gathering data implementation general algorithm determine practicality 
plan extend solve analysis problems useful applications debugging testing programming environment 
research benefited greatly discussions william landi siemens corporate research 
rakesh ghiya input design algorithm 
indebted ashok venkatesh feedback algorithm invaluable help implementation 
tata consultancy services letting source code front prototype implementation 
bur burke 
interval approach exhaustive incremental interprocedural data flow analysis 
acm transactions programming languages systems july 
cbc 
choi burke carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
proceedings twentieth annual acm symposium principles programming languages january 
cg calder grunwald 
reducing indirect function call overhead programs 
proceedings annual acm symposium principles programming languages january 
ck cooper kennedy 
interprocedural side effect analysis linear time 
proceedings sigplan conference programming language design implementation pages june 
ck cooper kennedy 
fast interprocedural alias analysis 
conference record sixteenth annual acm symposium principles programming languages pages january 
cu chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
proceedings sigplan conference programming language design implementation pages june 
cu chambers ungar 
iterative type analysis extended message splitting optimizing dynamically typed object oriented programs 
proceedings sigplan conference programming language design implementation pages june 
cal callahan 
program summary graph flow sensitive interprocedural data flow analysis 
proceedings sigplan conference programming language design implementation pages june 
fw frankl weyuker 
data flow testing tool 
proceedings ieee ii december 
ghi rakesh ghiya 
interprocedural analysis presence function pointers 
mcgill university school computer science acaps technical memo december 
hcu holzle chambers ungar 
optimizing dynamically typed object oriented languages polymorphic inline caches 
proceedings european conference object oriented programming july 
hk mary hall ken kennedy 
efficient call graph analysis 
acm letters programming languages systems vol 
september 
hrb horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems 
january 
hs harrold soffa 
interprocedural data flow testing 
proceedings third testing analysis verification symposium pages december 
hs harrold soffa 
computation interprocedural definition dependencies 
proceedings international conference computer languages pages 
lr landi ryder 
pointer induced aliasing problem classification 
conference record eighteenth annual acm symposium principles programming languages pages january 
lr landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
landi ryder zhang 
interprocedural modification side effect analysis pointer aliasing 
proceedings sigplan conference programming language design implementation june 
lak arun lakhotia 
graph theoretic foundations program slicing integration 
center advanced computer studies university southwestern louisiana technical report cacs tr 
lak arun lakhotia 
constructing call multigraphs dependence graphs 
proceedings twentieth annual acm symposium principles programming languages january 
lar 
interprocedural type propagation object oriented languages 
proceedings fourth european symposium programming february 
mlr marlowe landi ryder choi burke carini 
aliasing clarification 
acm sigplan notices september 
mey myers 
precise interprocedural data flow algorithm 
conference record eighth annual acm symposium principles programming languages pages january 
ow ostrand weyuker 
data flow test adequacy analysis languages pointers 
proceedings symposium software testing analysis verification tav october 
plr pande landi ryder 
interprocedural def associations systems single level pointers 
appear ieee transactions software engineering april 
prl pande ryder landi 
interprocedural def associations programs 
proceedings symposium software testing analysis verification tav october 
pr pande ryder 
static type determination aliasing programs 
technical report laboratory computer science research rutgers university preparation 
ps jens palsberg michael schwartzbach 
object oriented type inference 
proceedings conference object oriented programming systems languages applications oopsla pages october 
par ramesh 
interprocedural alias type analysis pointers 
masters thesis department computer science university wisconsin madison 

rw weyuker 
selecting software test data data flow information 
ieee transactions software engineering se april 
ryder 
constructing call graph program 
ieee transactions software engineering se may 
ss mario christopher 
interprocedural data flow analysis object oriented languages 
proceedings international conference compiler construction germany 
suzuki 
inferring types smalltalk 
eighth symposium principles programming languages pages january 
jan vitek nigel james uhl 
compile time analysis object oriented programs 
proceedings international conference compiler construction germany 
wei mark weiser 
program slicing 
ieee transactions software engineering se july 
yang horwitz reps program integration algorithm accommodates semantic preserving transformations 
proceedings fourth acm sigsoft symposium software development environments pages december 
