department computer science lund institute technology lund university box lund sweden identifying conflicts structural merge ulf lu cs tr nordic workshop programming environment research lund sweden june identifying conflicts structural merge ulf dept computer science lund university box lund sweden mail ulf dna lth se 
presents model controlling evolution documents concurrently developed teams authors 
optimistic check revisions alternatives hierarchic merge making default rules 
particular different situations occurring merge parallel development lines benefit storing full evolution history discussed 
cooperate hard 
cooperating persons may spread world world wide networks support people working urgent 
different systems different approaches constructed reduce problems distinction cases different place different time egr 
system concentrated cases different place independent time 
specifically tried possible intuitive way provide smooth transition different time time mm 
revision handling fundamental systems users storing history document evolution 
single evolution line involves file locking prevent persons modify file time 
avoid persons blocked file locking optimistic check approach locking file creating new revision resulting alternative revisions consequence 
parallel development person involved cooperation changes revision disturbed changes 
drawback approach fact changes persons merged 
reduce problem fine grained revision control approach making fragments changed small possible 
support technique keeping persons cooperating aware changes 
way expect unintentionally conflicting changes minimized merge simpler 
system referred developed part ongoing project collaborative software development environments 
previous mj project project object oriented software development 
environment developed lund mj orm supports collaborative software development limited extent configuration management gus 
aim current project support teams programmers working system 
focus merge situation information system provide user retrieved internal structure system 
section general description model 
creation different kinds revisions especially merged revision discussed section 
section contains depth description internal representation supporting requirements requested previous sections 
model model hierarchically structured documents 
typically program structured blocks classes procedures functions 
instance chapters sections paragraphs 
example structure shown 
nodes example program fragments structured hierarchically module containing classes class containing procedures 
connected node node data containing information stored node 
example program fragments program code stored string bytes 
node data contents document stored nodes building structure document 
new revision hierarchical document document copied 
edited node data stored full data new copy backward deltas stored original revision node data depicted 
system integrated editor recording operation differences deltas ols 
change oriented deltas described lvo lie larger potential supporting merging variants state deltas calculated edited files rcs tic sccs roe 
hierarchically structured program class rectangle node node data program module class circle procedure draw procedure move revision revision edited added revisions document delta system organized client server architecture 
database server stores documents synchronizes access client applications run users 
interpretation node data data handled string bytes 
system integrated client application understand revision control mechanisms server knows hierarchical structure 
editor example aware revision document edited supply deltas document edited 
editor functionality re construct old revision deltas 
server hand operations add delete nodes able follow history node manage store retrieve deltas corresponding node 
mentioned want avoid locking 
experience people working optimistic check technique traditional environments conflicts rare 
cases file touched person kan 
approach system time prevent user creating new revision 
programmer wants fix bug add new function creates new revision changes 
locking document done 
programmer wants add revision document creates new revision leading alternative 
users changes respective alternatives consequently lock 
changes revision frozen sure changes revision changes cycle creation changing freezing stored server database deltas 
revisions levels deltas occur result changes node data structure delta due changes node data created client application editor 
delta stored server database sequence bytes 
server understand changes node data fact node data changed 
structural deltas deltas due changes structure node added deleted 
structural deltas stored server internal representation retrieved client 
discuss structural deltas 
detailed description deltas created integrated editor see ols 
creating revisions section discussion consequences new revisions created 
focus done server structural changes document considered 
discuss changes structure revisions discuss merge changes alternatives identified compared 
level cal structure node sons approach applied recursively way entire document 
creation revisions revisions node sons depicted 
see son unchanged son added revisions resulting structural delta added 
son deleted changed 
node changed reasons node data corresponding node shown changed son added deleted sons changed item combination hierarchic structure change node propagate hierarchy right root 
reflection new revision created identical predecessor delta empty 
editing delta grows 
creation alternatives original revision succeeding revision alternative created parallel development enabled 
case case new revision equal predecessor delta empty 
original revision succeeding revisions deltas stored revision 
deltas changed independently changes alternatives respectively 
difference way deltas created new revisions frozen compared single evolution line 
creation merged revisions creation merged revision different mentioned 
exactly changes alternatives merged revision identical predecessors 
consequently decisions structural change revisions revision revision selecting changes include merged revision 
furthermore deltas predecessor updated merge 
sons recursively entire document traversed detect differences conflicts alternatives 
addition included changes edit operations eventually revision frozen 
conflict 
traditional merge systems unix diff revisions merged information available detecting conflicts 
comparing alternatives different situations occur son exists alternatives son exists alternative son exists alternative 
depicting revisions merged node exists alternatives node exists alternative 
possibility check node added alternative deleted alternative 
systems define cases conflict user decide detailed description problem 
benefit storing history deltas 
deltas alternative revisions back common revision fork revision identify sons follow evolution 
example depicted information fork revision included 
exists fork revision problem identify son deleted alternative 
revisions merged alternative alternative merge fork revision alternative alternative fork revision merge example little complex situation depicted 
example deleted alternatives new node added alternative 
son unchanged alternative changed alternative 
course result large number changes revisions fork revision revisions merged 
affect possible merge situations specific son 
systems unix diff emacs version emerge supports way merge 
systems line support structured documents compare revisions full documents 
example depicted think nodes lines textual document 
comparison fork revision alternative result delta changed 
retrieving deltas operations structure clearly points deleted new node added 
default rules examples show possible merge situations specific son 
son states changed changed added deleted 
alternatives states leads permutations 
occur 
son added alternative example deleted 
remaining cases retrieved application user better basis decisions basis making decisions automatically 
system defined default rules suggest merged result 
user modify temporary result create desired merge freezing revision 
table possible cases son listed temporary result default rules shown column default 
complex merge situation alternative alternative fork revision node changed merge example predefined default rule system incorporate changes additions deletions occurring alternative development lines 
rule propose solution cases table 
cases son changed alternatives unchanged exist 
going back example node included rule node remains deleted alternative rule 
default merge include change rule added son rule remain deleted rule 
cases depicted 
solve case number course incorporate change delete son proposed merge unsymmetric 
merge requested alternatives defined main alternative added alternative 
table alternative defined main alternative added 
way default rules prefer changes table eleven possible cases specific son alt main alt added default changed changed changed changed changed changed changed deleted deleted changed changed changed changed changed conflict changed deleted changed deleted changed deleted deleted changed deleted deleted deleted deleted added exist added exist added added adding deleting changing sons alternative main alternative added fork revision node changed default merge main changes added 
accordance way main developing line alternatives different approaches new techniques developed tested 
testing finished alternative new function merged main development line 
changes alternative included merged revision new merge 
changes included merge time changes alternative 
call mechanism incremental merge 
case number son changed alternatives trickier 
mentioned change depend changes node data son changes subtree propagated hierarchy 
change due propagation method recursively changes merged default 
hand changes node data client application integrated editor solve conflict node data level give server resulting deltas 
revision tree model section described different situations occur merge situations decision base default merge 
section revision tree server internal representation server database described 
focus cases occurring merge representation allows identify 
section client server communication merge described merge done lazy 
section short general description server database representation 
done briefly detailed description mam 
section example show representation detect eleven merge cases 
client server communication merge merge done hierarchically lazy controlled client application 
application orders merge tells server revision number revisions merged 
server creates new revision finds common revision revisions compare root node sons 
eleven cases server preliminary default merge sons 
returns list client sons merge case belong 
example son reported changed alternatives case client know reason node marked changed 
client order merge son making server procedure son sons 
way merge done lazy application browse real conflicts 
server database representation depicts database representation succeeding revisions 
conceptually new copy entire document created new revision created 
depicted changes node data edited added node affect new revision 
avoid replication data nodes changed shared previous revision 
unchanged subtree shared revisions 
depicts change propagates tree father node changed node shared particular root node document considered changed modification tree 
due change propagation nodes duplicated despite corresponding node data unchanged 
avoid replication node data unchanged node data shared 
shown dashed shadowed line 
shows node data edited node revision replaced delta produced client application changes revision 
delta edited node data revision client application re create replaced node data 
sharing nodes revisions revision revision edited revision revision conceptual view sharing node revisions edited added added revision revision sharing node data edited added delta representation example show representation detect different cases occurring merge 
depicts representation merge 
example simple possible shortest possible evolution revisions including merge depicted 
revision common revision alternatives respectively merged revision 
starting top level examining sons see son folder changed 
son shared common older revision son exist may shared common revision changed 
son changed alternatives case duplicated merged revision enable merge continue recursively son 
son folder shared alternatives obviously changed 
default rule include share son case table 
level lazy merge 
level starts client application wants see reason folder marked conflict 
exactly algorithm folder father sons examination 
example son doc changed alternatives marked conflicting son folder shared consequently unchanged 
son doc shared exist 
depending existence doc common revision son added deleted 
example doc doc consequently marked added 
client wants go level selects doc server detects conflict node data level 
node data retrieved alternatives including deltas back common revision 
information client application merge node data level produce required deltas stored old nodes respectively marked 
full merged node data stored marked 
dashed lines folder folder depicts subtrees nodes 
subtrees influence approach 
revision tree representation folder folder folder doc doc folder folder folder doc doc doc summary research revisions fundamental systems supporting collaborative 
integrating revisions system making client application server database knowing revisions enables advanced support 
particular merging alternative developing lines hierarchical document involves decisions alternatives 
valuable system place helps identify cases conflicts occur second give support solving conflicts 
server knows evolution graph find common ancestor alternative revisions needed deltas predefined default rules propose preliminary merge 
client application interactively agree modify automatic preliminary merge 
step development server support multiple servers order improve speed stability geographically distributed teams 
involves developing automatic merging structures network server failure protocols keep duplicated database consistent sites 
questions access policies protection urgent access data revisions 
far ignored questions focused enabling sharing collaboration place 
mentioned supporting merge alternatives time inherent problem merging alternatives time default rules 
fact interesting facility hypothetically merge existing alternatives system get overview system develops including merge conflicts prepare 
long run aim technique storing structured program information syntax tree ast form 
involve things development algorithms representing applying deltas trees 
needed algorithms documented gus 
mj orm environment need store asts decorated semantic information 
includes designing representations deltas semantic information avoid long re calculations take place revision focus changed 
investigate semantic information making intelligent diff merge functionality lexical changes account semantic consequences change hpr 
acknowledgment want members software development research group dept computer science lund university stimulating discussions contributed substantially 
particular want sten min constructive comments earlier drafts 
supported part swedish national board industrial technical development 
lie conradi tor karlsson 
change oriented versioning software engineering database 
proceedings nd international workshop software configuration management volume pages 
acm sigsoft software engineering notes october 
egr ellis gibbs rein 
groupware 
issues experiences 
communication acm january 
gus gustavsson 
software configuration management integrated environment 
licentiate thesis lund university dept computer science lund sweden 
hpr horwitz prins reps integrating noninterfering versions programs 
acm transactions programming languages systems july 
kan 
nineties exciting time software development 
keynote address tools europe versailles march 
knudsen madsen magnusson editors 
object oriented environments 
mj approach 
objectoriented series 
prentice hall 
lvo ernst norbert van 
operation merging 
weber editor sigsoft proceedings tyson corner va december 
acm 
sigsoft software engineering notes 
mam boris magnusson ulf sten min fine grained revision control collaborative software development 
acm sigsoft symposium foundations software engineering los angeles california december 
mm sten min boris magnusson 
model semi synchronous collaborative editing 
proceedings third european conference computer supported cooperative milano 
kluwer academic publishers 
boris magnusson sten min rel overview mj orm environment 
editors proceedings nd international conference tools technology object oriented languages systems paris june 

ols torsten olsson 
group awareness fine grained revision control 
proceedings nordic workshop programming environment research lund 
roe 
source code control system 
ieee transactions software engineering december 
tic walter tichy 
rcs system revision control 
software practice experience july 
