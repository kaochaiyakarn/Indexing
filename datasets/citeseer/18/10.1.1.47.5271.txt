lazy imperative programming john launchbury computing science department glasgow university jl dcs glasgow ac uk argue importance lazy state sequences imperative destructive actions actions delayed results required 
enables state computations take advantage control power lazy evaluation 
provide examples describe implementation glasgow haskell 
long tension functional programming languages traditional imperative counterparts 
hand functional languages commonly expressive easier reason imperative languages hand certain algorithms interactions rely fundamentally state computation 
clearly worth attempting combine strengths 
languages scheme ml incorporated imperative actions side effects 
approach sense call value language order evaluation statically defined 
lazy functional languages haskell miranda evaluation order dynamically determined immensely difficult predict 
languages obtained imperative actions side effects evaluation serious reasoning difficulties result 
determining side effects performed worse order rely determining exact order evaluation thing laziness tends hide 
consequently lazy evaluation side effects mix 
way forward 
moggi mog showed monads structure denotational semantics including handling state imperative languages 
wadler recognised principles apply functional programs particular showed state monad incorporate imperative operations purely functional language wad 
clear lazy evaluation imperative actions coexist quite happily able pass values 
glasgow haskell compiler incorporates extensions lazy functional language haskell 
extensions implement imperative actions pw 
implementation important shortcoming imperative actions performed results returned 
parallels strict evaluation arguments function evaluated result values arguments required 
non strict languages implemented lazy evaluation example functions may return results requiring successful evaluation arguments values required 
see retain philosophy nonstrict computation presence imperative actions 
see relevance worth distinguishing distinct classes state computation 
necessary manipulate global world state accessing files communicating outside world interactive program communicating programs 
externally state computations 
times computations require purely local state 
may ease programming passing name supply example algorithm relies constant time update achieve asymptotic complexity 
cases state purely internal computation utterly invisible outside world 
state internally state computation may discarded computation sense ask imperative actions performed affect final value discarded freely 
may generalised making state thread entirely lazy 
hughes argues true power laziness decouple control calculation hug show arguments apply internally state computations 
provide examples give implementation lazy state glasgow haskell 
contribution show 
lazy state provides better fit lazy evaluation strict state particular usual expressiveness associated lazy evaluation applies internally state computations 
lazy state may implemented provide access update penalty compared strict state creation extra unevaluated closures exactly usual penalty paid moving strict lazy function application 
builds directly peyton jones wadler pw sense review 
imperative haskell imperative features introduced glasgow haskell expressing input output type constructor state computations called io 
state computation produces purely functional value type type io value type io computation 
recipe performing certain actions returning appropriate result 
fact elements io type functions awaiting argument representing world state 
applied world state evaluation function produces result paired world state 
making io data type limited built operations possible guarantee state single threaded 
state argument needs passed explicitly real external world may updates may performed place 
main operations provided io type familiar monadic combining forms 

io io 
io 
io packages value computation return value 
form function application 
performs computation yielding value type result passed function argument receiving value type returns computation designed produce value type value returned arguments performed 
io primitives may built ccall construct allows calls function 
example ccall putchar call function outputs character standard output 
particular value returned type io 
hand ccall getchar type io char computation returns character value 
meaning haskell program definition identifier type io 
execute program applied external world state returning updated world state result 
delayed side effects important aspect io monad imperative actions forced 
consequently io expressions poor match lazy evaluation 
consider expression 

expression performed applied world state performed returning boolean values bound respectively 
values ed produce final result 
contrast behaviour purely functional expression foo baz 
non strict language foo evaluated returns false baz evaluated 
io type provided external state computations behaviour quite reasonable 
main line io actions imperative action performed program terminates meaning program defined total effect world 
means io operation specified performed immediately 
benefit delaying performed program terminates 
hand example provide argument expressions state purely internally lazy way 
way encapsulating state example performed false 
result encapsulated lambda bindings 

scope expression 
expression defined purely functional values returns imperative actions performs 
function uses state produce result hides state including invocations function reason perform state operations 
required data dependency performed 
important caveat 
order imperative actions performed important 
ensure order performed remains unchanged value action required earlier actions performed 
passing state io type strict state actions different name lazy state operations 
restriction operations performed performed sequence name type constructor actions seq 
seq built standard monad state transformers 
state transformer function state produces pair results value new state 
type st 
provide standard unit return sequence combinator called bind 
return 
st bind st 
st 
st return bind single threading state state monad ensures state operations sequenced 
demand state operations performed 
consider example 
st bool bind 
return true final value true depend state computations performed 
initial state demanded 
sequenced code say require state order define final value state operations performed order originally specified state operations performed 
discarding state define lazy sequences state transformers state data type representing encapsulated state 
type seq st world achieve encapsulation function 
seq 
takes sequence expression opens new empty imperative context sequences imperative computation extracts final value discarding final state 
evaluation computation mirrors usual lazy evaluation computations state actions occur point result sufficiently defined external demand performed remainder suspended 
result demanded computations imperative actions may performed value sufficiently defined satisfy consumers 
usual computations required performed recall imperative actions extra data dependency single threaded state 
eventually final value discarded remaining actions garbage performed 
continue take faith lazy imperative actions performed truly imperatively manner destructive update turn examine examples showing sort behaviour want achieve 
monad syntax rest syntactic sugar refer monad operations 
extend haskell expressions expression form expanded follows bind bind haskell uses symbols layout markers 
monad syntax 


init xs newvar init ys scan xs scan return scan xs val readvar writevar val rest scan xs return val rest final readvar return ys final imperative scan left see action consider example op op op return translated expression op bind 
op bind 
op bind 
return semicolon translated monad sequence operation bind explicit pattern converted pattern trailing lambda expression causing names scope remainder expression 
pattern written trailing lambda wildcard pattern matches binds 
scan left example exhibits updatable variable 
example commonly written purely functional style value example state computation demonstrate state restrict results may returned 
assume operations variables treat var simply data type variables type newvar 
seq var readvar var 
seq writevar var 

seq initial value say newvar sequence operation performed allocates variable state having initial value returns variable 
similarly variable state readvar performed applied state returns value state 
may expected writevar updates value variable 
implement function 
function starting value list applies function repeatedly list working left right returns list partial results paired final answer 
example important result generated demand 
initial portion result list required computed 
particular front portion input list defined rest undefined equivalent front portion result list defined 
example parts code 
interfaces main loop outside functional world 
creates new imperative context generates variable hold running total 
main loop function called 
returns list partial results reading final value function returns pair consisting list ys final result final 
main loop updates value variable element list returning list value start loop followed list returned rest loop 
strict imperative framework io monad imperative languages value returned list traversed 
lazy sequences case 
head list required little computation performed variable allocated initialised read list returned value head 
required merely final list empty example variable allocated xs needs examined order give structure ys 
said example usually written purely functional style 
important behaviour may obtained state algorithm state monad need change semantics 
example quite different state crucial obtaining linear efficiency 
depth search implement depth search graph efficiently number vertices number edges retaining usual expressiveness flexibility afforded lazy functional languages 
problem motivating application lazy imperative actions describe detail 
decomposing graph algorithms major shortcoming graph algorithms rely depth search dfs dynamically process performing search 
means reasoning results search depend tracing computation dynamically 
furthermore code particular algorithm mixed traversal code dfs code largely 
may said implementations tree algorithms lazy functional languages common express tree traversal problems flattening tree list traversing list 
flattening performed variety standard functions preorder postorder list processing likewise defined terms standard components 
complex algorithms expressed composition understood simpler components 
intermediate list provides channel communication standard components 
technique particularly viable list may consumed produced large intermediate structure created 
behaviour lazy evaluation able 
idea applicable graphs 
expressing algorithm part depth traversal possible imagine decomposition similar tree algorithms 
graph traversed produce depth spanning forest nodes may reachable start node secondly forest traversed compute required information 
practicable forest produced demand consumed 
forest list general trees tree consisting node value forest sub trees 
type forest tree data tree node forest representing graphs number ways represent directed graphs 
want explicit sharing represent graphs adjacency lists 
standard haskell monolithic array indexed vertices element list vertices reachable step vertex 
way build graph association list vertices representing directed edges pair indicating range valid vertices type graph array vertex vertex type vertex int graph 
vertex 
vertex vertex vertex 
assoc vertex vertex 
graph es accumarray flip es low high low high bounds representation takes linear amount space respect size graph sum number vertices number edges 
access list edges takes constant time 
note graph represented purely functional value subject imperative actions particular altered way depth search 
may pass graph freely perform separate searches wish 
vertex int needs haskell index class ix 
dfs graph 
vertex 
tree vertex dfs vs marks bounds false search vs search return search vs visited marks visited search vs marks true search bs search vs return node bs lazy depth search depth search standard von neumann model impossible produce linear time depth search element update place 
place required setting mark particular node visited 
mark variable defined extra field original graph couple related reasons undesirable 
process performing search side effect graph may need explicitly removed search commence 
secondly component algorithm necessarily imperative identified mixed rest data 
alternative array marks vertex 
start search allocate new array initialised false available update search 
search completed array may discarded 
operations updatable arrays correspond variables ix ix 
ix ix 
ele 
seq ix ele ix ix 
ix ele 
ix 
seq ele ix ix 
ix ele 
ix 
ele 
seq way value may obtained array sequence operations 
stress sequence operations necessarily strict imperative actions performed required data dependency including retaining relative linear order 
definition depth search 
function dfs list vertices search useful number algorithms begins 
searched edges vertex descendents rest vertices explored 
recursive call search returns forest 
call search edges leading produces forest built tree root nodes reachable second recursive call search vs produces forest vertices reachable previously visited 
tree rooted added front forest giving complete depth forest 
exploring forest give examples dfs 
detects presence cycles graph second identifies strongly connected components 
detecting cycles traditionally order find graph contains cycle depth traversal performed looking back edges edges predecessor particular depth tree 
soon back edge search stopped 
effect obtained function dfs 
construct depth forest graph traverse forest looking back edges need refer original graph obtain edges 
express forest traversal mapping tree traversal list trees 
define tree traversal function say takes graph sub tree graph 
traverses tree returns true soon spots back edge original graph continues traverse rest tree eventually returns false 
assuming cycle detection program simply cycle map dfs soon tree graph back edge function returns true discarding rest forest produced 
furthermore assuming data dependency tree traversal matches dfs generation left branches portion dfs tree traversed produced 
taken full advantage lazy evaluation ability provide dynamic control separate functions lazy state possible decouple traversal graph mark bits detection back edges retaining ability halt dfs soon back edge 
strongly connected components demonstrate flexibility dfs provide second example time strongly connected components algorithm due kosaraju unpublished sha 
example take particular advantage laziness show reuse dfs code 
purposes algorithm originally specify graph pair bounds vertices low high list edges 
algorithm performs depth search graph generating forest vertices 
flattened list postorder reversing list seed order second depth search time reversed graph 
tree resulting depth forest corresponds strongly connected component 
squash list vertices 
complete implementation scc vertex vertex 
assoc vertex vertex 
vertex scc low high edges map postorder dfs reverse concat implementation postorder linear repeated appends may converted standard compilation techniques 
done little clear naive version relevant main interest 
map postorder dfs low high low high edges low high map switch edges switch postorder node ts concat map postorder ts seen examples dfs 
dfs algorithms implemented similar ease 
implementing lazy state lazy state implemented safely efficiently 
safely mean guaranteeing relative ordering imperative actions remains unchanged efficiently mean true destructive update obtain constant time update access 
turns answer implementation surprisingly easy done source level glasgow haskell 
start review current implementation io 
implementation io far viewed io type constructor abstractly 
see definition type io world 
data world elements type io functions take world token type world return pair values type second new world token 
world unboxed data type pl 
suffix lexical convention semantic content unboxed types different normal types 
particular unboxed types bottom element undefined 
consequently computation involving elements unboxed values produce value explicitly stage computation may proceed 
benefit types expose compiler issues data representation evaluation order leaving purely functional framework 
fact world unboxed forces strict world token glasgow haskell compiler currently development actual names may subject changes 
case 
turn forces imperative actions specified performed evaluated 
truly primitive io operation ccall applied world token implemented relevant call 
course common accesses provided standard io prelude 
include operations allocating reading writing arrays 
section 
boxing world far left nature world token type world unspecified 
fact part compiler knows definition world code generator 
views data type albeit unboxed representing total state world 
code generator takes advantage fact real external world may instantiates world point type 
sequences want little information contained world token 
start boxed io monad world token passed unboxed value typechecker ensures unboxed arguments strict computations forcing imperative actions io monad occur immediately 
boxing world token means passing token effect granting permission perform imperative action pass pointers suspended computations evaluated yield token 
allows define lazy sequencer bind 
want 
philosophy sequences run local state independent computations state purely functional 
ensure sequence operations provide may way 
cross supposedly independent state threads banned 
result program depend order evaluation thing trying avoid 
best solution certainly stronger type system effects system tj 
determine supposedly pure calculation internal state 
absence extension solution adopt state thread unique identifier operations state check correct world 
data world world type int new imperative thread created state token type world created having unique world token number 
independent threads implementing independent thread comes implementing 
done defining primitive compiler arguably correct place 
obtain useful insight defining system programmer level haskell 
io monad provides potentially dangerous primitive value world representing world 
world token thread 
need generate unique identifier 
problem known just gensym 
implement gensym slightly dirty tricks dangerous 
interestingly odersky shown lambda calculus may safely extended gensym operator ode 
term introduces new name operation provided names equality 
resulting calculus church rosser 
concrete syntax odersky proposes new 
provides exactly want adopt syntax 
seq 
fst new 
world arrays order implement arrays primitive operations supplied glasgow haskell 
detail need understood merely appreciate going 
implementation 
perform array operation pattern match structure state token 
usual forces computations defining value performed 
effect forcing previous imperative actions performed token available appropriate state changes occurred 
data ix ele ix ix ele ix ix 
ix ix 
ele 
seq ix ele ix ix 
ix ele 
ix 
seq ele ix ix 
ix ele 
ix 
ele 
seq init case index mkint 
case init arr new 
arr new arr case index mkint 
case arr new 
new arr ele case index mkint 
case arr ele new 
new 


val val true error illegal state access array operations type var int newvar 
seq var readvar var 
seq writevar var 

seq newvar init init readvar writevar val val variable operations case newarray size array computed standard ix class method index maps arbitrary ix types integers 
call primitive io operation providing appropriate world token 
returns unboxed array new world token 
packaged constructor second current world identifier 
notice current world identifier packaged array array tagged identifier representing world belongs 
array read state token forced 
world token number built array checked confirm array created world accessed 
check corresponding check ensures pass apparently independent threads 
primitive operations seq provided similar check included 
check successful primitive io operations read array result packaged appropriately 
writing array comparable 
ml implement variables arrays single element 
detail 
converting io seq fair degree mess definitions array primitives 
encapsulated generic conversion function 
io 
seq case new 
new partial application io operation yields function expecting value type world 
results operation required world value forced pattern matching demands view outer constructor 
may provoke cascade earlier computations performed having imperative effects 
world token visible previous imperative effects performed 
io action applied world token imperative effect performed io result returned 
components extracted new world token boxed 
may viewed providing step improving interface functional imperative worlds allow data dependency determine imperative actions performed delayed significant advantages semantic second practical 
semantic advantage purely functional program may re expressed terms state monad changing semantics 
practical advantage power lazy evaluation decoupling calculation control may functions internal state 
builds directly top io glasgow reported peyton jones wadler pw summarised section 
strong similarities var odersky rabin hudak orh influenced swarup reddy ireland sri 
peyton jones wadler var provides strict imperative actions purely functional result returned structure content state resolved 
surprising aspect may implemented source level glasgow haskell albeit level typically reserved systems programming 
particular changes compiler required 
provides considerable evidence power flexibility built io monad unboxed values 
number obvious developments 
var type allows flexibility pointers value type var var int pointer integer variable sense augment variables arrays unique tags allow pointer equality defined 
instance var simply compare tags variables 
data dependency requires imperative actions state thread performed result returned 
case sense perform operations strictly lazily 
corresponds replacing lazy function application strict application function provably strict 
case achieved replacing bind combinator version important recall imperative actions forced occur order specified 
may room clever imperative language implementations imperative actions reordered actual dependency scope 
currently example specifying computation sets mutable array element read preceeding imperative actions performed merely required determine particular element value 
performs case analysis constructing binding 
easy obtain necessary information existing strictness analysers 
andy gill david king partain simon peyton jones phil wadler discussions 
simon particular provided observations improved content presentation immensely 
approach graph algorithms briefly described result joint research david king 
hug hughes functional programming matters computer journal vol cup april 
mog moggi computational lambda calculus monads proc 
ieee 
logic computer science asilomar california 
orh odersky rabin hudak call name assignment lambda calculus proc 
acm principles programming languages carolina 
ode odersky making gensym safe functional programming dept computer science yale univ unpublished 
pl peyton jones launchbury unboxed values class citizens proc 
acm functional computer architecture boston lncs 
pw peyton jones wadler imperative functional programming proc 
acm principles programming languages carolina 
sha sharir strong connectivity algorithm application data flow analysis computers mathematics applications pp 

sri swarup reddy ireland assignments applicative languages proc 
fpca lncs london 
tj talpin jouvelot polymorphic type region effect inference functional programming vol part cup july 
wad wadler comprehending monads mscs vol pp cup 
