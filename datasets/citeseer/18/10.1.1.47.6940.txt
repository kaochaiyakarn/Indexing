methodological view constraint solving hubert comon mehmet dincbas jean pierre jouannaud claude kirchner constraints popular decade 
constraints allow define sets data means logical formulae 
goal survey notion constraint system give examples constraint systems operating various domains natural rational real numbers finite domains term domains 
classify different methods solving constraints syntactic methods transformations semantic methods adequate representations constraints hybrid methods combining transformations enumerations 
examples illustrate concepts methods 
discuss applications constraints various fields programming operations research theorem proving 
cnrs lri bat 
universit de paris sud orsay cedex france lri lri fr parc club orsay universit rue jean orsay cedex france dincbas fr inria lorraine rue du jardin bp es nancy cedex france claude kirchner loria fr partly supported esprit bra ccl erard rousseau france fax 
constraints tremendously popular decade 
constraints allow define sets data means logical formulae 
example set numbers described formula interpreted set natural numbers 
representations familiar users correspond comprehensive definition sets 
example defines set fy xg 
reason success constraints 
comprehension axiom allows define sets logically definable extension axiom 
true constraints course pragmatic argument favor constraints allow express manipulate large sets data reasonably handled extension 
familiar aspect appeals users constraints enjoy declarative aspect computer scientists academia 
ways defining numbers saying set natural numbers contains closed successor twice 
definition procedural sense algorithm enumerating numbers starting 
assume odd numbers defined similarly set natural numbers containing closed successor twice 
express empty intersection sets setting 
procedural definition sets require enumerate check value enumerated twice 
may course terminate 
constraints handle effectively part concept explained sequel 
declarative aspect opposed efficiency 
second important reason constraints popular reconcile efficiency 
domain constraint computes known advance efficient algorithms chosen solve general purpose procedures case example usual logic programming languages 
example standard prolog implementation solve system linear equations rationals resolution language allowing rational constraints gauss elimination efficient 
third reason success constraints easily combined logic programming paradigm generally logic computation model 
compatible dynamic generation case applications 
characteristic called incrementality 
course quite difficult identify precisely notion constraint explicitly computer science 
far combination logic programming paradigm concerned play key role prolog ii general formulation jaffar lassez finite domain constraints chip 
far explained major aspect constraints directly related title 
general infinitely ways represent set data means constraints 
example set numbers defined set natural numbers odd constraint course complicated equivalent formula complicated mean 
definite answer question formula interested defines empty set case surely complicated trivial expression empty set formula usual abbreviation false 
major problem avoid useless computations operating constraints defining empty sets 
algorithm deciding constraint defines empty set major requirement 
summarize informal discussion constraint system comes parts 
syntax logical formulae expressed 
cases order language fragment thereof closed conjunction denoted 
common existential fragment free universal quantifier positive fragment negation disjunction allowed 
constraints logical connectives called atomic 
consider example conjunctions linear equations rational numbers 

structure formulae interpreted 
structure domain values hand operations relations hand interpreting symbols syntax 
example domain values set rational numbers usual operations 
solution constraint assigns free variables values domain way formula evaluates true 
example solution 

constraint solving algorithm computes particular representation set solutions constraint structure important particular case algorithm allows decide solution called constraint satisfaction 
general algorithm needed called constraint entailment decides set solutions constraint included set solutions constraint example procedures known solve linear equations rational numbers 
operations research important area application 
describe details constraints finite domains 
problem constraints np hard impossible deal large application problems 
consequence practice favors incomplete algorithms may fail detect constraint solution 
hand constraint solving algorithm sound pretend solution 
far examples deal numbers 
constraints numbers booleans industrial applications operations research hardware verification 
applications computer science important domain expressions called terms context 
typical example known problem unification terms appears classical logic programming 
unification solving conjunctions equations set terms explain section 
call symbolic constraints terms 
symbolic constraints years computer science applications ffl represent sets formulae 
constrained formula pair oe stands set instances oe solutions consider arithmetic expressions built addition multiplication programming languages 
subset expressions sums different expressions expressed formula xy means stand syntactically different expressions 
example shows expressive power constraints set defined regular tree grammar equivalently recognized bottom tree automaton 
ffl avoid useless processing identical subterms sharing 
interpreters compilers name environment binding variables 
example may large expression 
ffl represent infinite terms structure implementations logic programming languages called occur check 
example infinite list zeros represented constraint list cons 
ffl express strategies automated deduction object level contrast meta level allowing prune search space 
need complex combined constraints involving domains interpretation arises applications 
example integers describe parameterized families terms indicating repetition subexpression 
constraints operating terms components integer constraint symbolic constraint 
example details sequel provided bibliographic data bases 
querying data base titles containing word expressed entailment problem language combining feature constraints expressing record definitions word constraints expressing search word 
listing constraint systems impossible task 
organize notion constraint solving method 
distinguish complete syntactic methods commit particular representation problem domain set solutions complete semantic methods rely particular representation problem domain set solutions hybrid methods combine incomplete syntactic semantic steps non deterministic steps partial enumeration set solutions 
methods described respectively sections 
applications areas considered section 
syntactic transformations syntactic methods simple principle repeatedly transform constraint equivalent called solved form obtained 
illustrates concepts example solving constraints rationals 
technique attributed gauss celebrated german mathematician th century 
apparently different problem obtained inequalities equalities 
problem reduced adding called slack variables express difference sides equation 
example constraint equivalent constraint 
course formula transformation 
linear programming comes difficult problem linear function optimized respect set solutions constraint form 
example described general principles simplex algorithm invented dantzig 
exponential algorithm prefered polynomial algorithms interior point methods main reasons 
performs quasi linearly average efficient incremental version 
strategy eliminating variables set linear equations eventually yield result 
situation quite different simplex method looping sequences hopefully terminating 
strategies non deterministic deterministic total priori order variables guiding choice pivoting variables step 
examples show ingredients transformation method 
constraint logical formula 
rule transforms constraint equivalent 
equivalence proof trivial erard prefers supreme quality big profit uses 
grand 
extremely years 
don mind 
may difficult amounts show transformation relies algebraic property constraint domain 
solved form obtained transformation applies anymore normal form respect transformation rules 
assumes termination proof particular strategy strategies 
formalizing approach steps necessary 
choose set solved forms set formulae solution syntactically equal 

design set transformation rules show properties correctness applying rule set arbitrary input constraint results new constraint set solutions 
proving correctness usually manageable breaks elementary correctness proof transformation rule 
completeness rules constraint solved form rule applies 
consequence algorithm fails detect constraint solution 
property usually simple prove new rules may added satisfied 
uniform resp 
weak termination arbitrary constraint resp 
fixed sequence transformation originating results solved form finite number steps 
property may hard prove 
case weak termination sequence transformations course depend input 
characterizing sequence uniform termination satisfied may difficult task 
part conceptual simplicity important advantage approach provide systematic guide constraints solving 
applies method yields algorithm inherently incremental new constraints added conjunction solved form yielding new constraint equivalent conjunction starting constraint new 
approach variety problems starting herbrand interested solving equations terms automated deduction purposes 
classical formulation known unification algorithm rediscovered late martelli montanari formulated operational point view 
presentation borrowed 
general approach applied systematic way eighties different directions show power approach reformulate existing constraint solving algorithm generalize unification algorithm number directions 
mention generalizations 
equational unification consists solving equations terms function symbols considered satisfy certain equational axioms 
problem decompose rule longer correct 
example head symbol rule binary commutative right hand side split possibilities correct particular case check rule correct general 
investigations boosted practical need building theories resolution theorem provers 
case example commutativity associativity occurs useful algebraic structures case systematically studied point view kirchner 
important axioms considered authors distributivity arnborg shown decidable schmidt 
automated deduction application area techniques eventually important theory arising context library search related axiomatization cartesian closed categories investigated theory originating type inference records investigated remy 
remy kirchner syntactic theories decomposition schemas automatically obtained adequate presentation theory allowing give general solution class 
motivated verification problems theory boolean rings considered simonis 
roughly speaking unification constraints quantifier negation free 
quantifiers occur course naturally expression various problems general constraints arise applications 
arbitrary order constraints built equality predicate interpreted terms called equational constraints 
method building counter examples theorem proving uses equational constraints negations 
method jouannaud kounalis inductive theorem proving needs equational constraints universal quantifiers negations 
case inductive inference problems studied lassez 
case equational constraint reduced solved form shown independently maher comon 
solved forms purely existential quantifier elimination rules necessary 
limited amount negations solved forms negation elimination rules 
important problem area negations eliminated equivalent negation free solved form existed 
positive answer important problem applications compilation rewrite rules inductive inference examples counter examples 
course operators may satisfy certain axioms associativity commutativity important 
unfortunately undecidable know arbitrary equational constraint solutions particular case true algebraic structures 
case solved positively comon jouannaud case syntactic theories 
interest high theoretical 
important predicates practice 
term orderings example surface naturally automated deduction reduce search space eliminating inferences satisfy certain reducing condition 
membership predicates important typed languages interpreted set inclusion 
set predicates defining computing partial interpretations logic programs 
cases investigated thoroughly authors including comon jouannaud 
problem difficult general undecidable operators satisfy certain equational axioms 
order terms lack possibility bind functional variables 
doing binder higher order logic functional programming 
unfortunately unification constraints undecidable called lambda terms 
semi decidable turns huet semi decision procedure proof development systems 
important decidable subcase terms called pattern miller language prolog powerful extension ordinary prolog 
function symbols fixed number arguments 
convenient represent term record numeric keys retrieving subterms 
expressions quite time natural language processing generally knowledge representation name features 
subtyping area programming languages model inheritance 
describes possible syntax feature constraints suggests unification rules may adapted case 
area feature constraints active years resulted complete constraint solver mechanism order theory features hand prototype implementations feature languages hand 
note efforts symbolic constraint solving surveyed reader referred details 
see 
semantic methods semantic methods opposed syntactic ones simply rely translation constraint syntax 
representation solutions constraint specific data structure 
typical example automata constraint solving 
method described survey max dauchet 
idea goes back buchi early sixties consists associating formula automaton accepting solutions constraint 
finite state automaton simple computation model includes finite memory states finite control transition rules 
automaton moves state depending input symbol transition rules 
automaton backtrack input output device 
visits input symbol 
automaton associated atomic constraint logical connectives correspond set operations solution sets 
instance solutions conjunction constraints intersection set solutions respectively 
assume class automata consideration closed intersection case known automata classes 
automaton associated accept solutions respectively 
general rule logical connective corresponds closure property automata conjunction yields intersection disjunction yields union negation yields complement existential quantification yields projection 
operation algorithmically simple explained little bit automata recognize tuples words trees graphs elements tuple free variables constraint 
come back problem 
automaton associated constraint satisfaction problem equivalent emptiness decision solution iff accepts word tree graph 
automaton representation set solutions 
cleaned corresponds reduce solved forms reused constraint solving method incremental 
precise far objects automata working 
depends representation constraints domain elements words trees graphs 
idea case class automata enjoy closure properties emptiness decidable 
automata designed literature solving particular kind constraint 
mention classical finite state automata words finite tree automata automata equality disequality constraints tree automata free variables tree matching automata refer details 
efficiency automata techniques follow directly efficiency operations automata emptiness decision 
order get idea computational complexity recall classical word automata union computed constant time intersection quadratic time projection linear time complement linear time resp 
exponential time worst case deterministic resp 
non deterministic automata 
emptiness decision linear 
behaviour automata classes expensive step usually reduction non determinism possible complement 
time give explicit examples constraint solving automata 
consider instance presburger arithmetic formulae order formulae say existential quantification atomic formulae built constants 
addition multiplication constant 
interpretation domain set natural numbers 
instance defines set numbers 
assume natural numbers written base right left 
example number thirteen written 
formula associated word automaton 
example associated automaton 
general construction bit complicated formulae may free variables 
case numbers encoded words example pair thirteen represented word reading right left lower word find thirteen base reading right left upper word find 
height stack numbers number free variables 
convention possible build automaton accepting pairs numbers satisfy see set triples numbers see 
combining automata intersection projection operation forgets component tuples corresponds existential quantification get back automaton 
automata techniques large variety constraints really actual softwares high computational complexity relatively discovery area constraint solving 
example tree automata equality disequality constraints successfully solve constraints 
constraints related term rewriting 
refer details 
simpler example tree automata typing constraints formulae consists combinations atomic formulae recognized finite tree automaton 
example want restrict integers values variable take 
assuming function symbols 
int int theta int int real int 
express typing condition constraint int int interpreted set trees recognized state int specified automaton 
include real value 
constraints constraint concurrent logic programming language oz developed dfki saarbrucken 
typing constraints inferred compile time logic programming language advantage structure program 
automata techniques devoted particular piece program yields efficient execution 
order theory typing called membership constraints proved decidable comon 
related typing constraints set constraints introduced mishra area program analysis 
constraints correspond approximation programs allow infer types compile time detect inconsistencies programs 
refer details 
set constraints combinations formulae set expressions intersection union complement application function symbol 
interpreted possibly infinite subsets set terms 
contribution french school area see demonstrate kind tree automata tree automata free variables adequate representation solutions constraint solving 
set constraints kozen part constraint logic programming language 
automata techniques complete constraints methods extensively representation constraints 
example equational unification introduced section consider case associative commutative function symbols 
alternative syntactic methods described associate semi ring equational axioms reduce unification constraints solving equations semi ring 
method systematically investigated baader nutt 
mention old semantic algorithm lowenheim boolean ring unification rediscovered martin nipkow 
example importance concerns linear diophantine equations 
particular constraint solving problem uses semantic methods solving equations terms presence associative commutative function symbols 
typical example diophantine equations system gammax gamma gammax gamma gamma coefficients integers looking positive integer solutions 
seen solved means automata 
particular situation specific methods efficient 
idea initialized equation developed represent solutions vectors real space dimension number equations example 
constraint solving algorithm consists starting origin repeat addition default vectors reach back origin 
default vectors computed equation system 
example borrowed thesis default vectors represented 
step addition default vectors current vector considered scalar product delta negative 
process shown terminating complete sense solution system combination solutions obtained way 
example shows solution reached algorithm 
number times added default vector number times added default vector number times added default vector number times added default vector 
hybrid methods seen previous sections complete constraint solving methods allow solve constraints various computation domains example herbrand terms boolean algebras linear rational terms 
decision procedure exists computation domain reasonable inference step computation 
problem complexity step depends complexity constraint solving method turn depends input contrast conventional languages 
problem common logic programming languages crucial constraint solving linear 
complexity may high usually exponential testing satisfiability step computation expensive 
led practically inclined people design incomplete constraint solvers 
incomplete solver checks step computation relaxed version set constraints idea quite common operations research name relaxation comes 
practice checking conjunction large number elementary constraints possibility check possible combinations conjunctions elementary constraints technique known local consistency 
local consistency imply existence solutions technique usually combination enumeration procedure operating locally consistent constraints order completeness constraint solving process 
enumeration taken broad sense relations values may enumerated 
practice efficiency hybrid methods heavily depend enumeration procedure various heuristics 
pretty fail principle variables domain splitting values context finite domains constraints best strategy applicable types problems 
finite domain constraints described constraint solving method local consistency checking 
techniques root success constraint logic programming environments chip solving combinatorial problems 
finite domain constraints defined allow easily specify solve complex problems areas planning scheduling placement 
new predicates logical connectives negation disjunction introduced price efficiency problems hardly solved 
constraints low level allow modelling problems easy natural way 
alternative explored chip cumulative constraint introduce called global constraints order reach expressivity means high level abstractions 
cumulative constraint generalises disjunctive constraints order model finite capacity scheduling problems may copies kind resource resources shared 
scheduling application areas include packing placement 
second goal global constraints take advantage interactions different constraints runtime order reach better pruning search tree 
just values bound propagation previous method global constraints take account structural properties constraints order deduce propagate information 
usually done semantic representation constraints graphs 
simple arithmetic logic knowledge methods deeper finite mathematics graph theory operations research knowledge required 
global constraints generalization disequality constraint dimensional objects introduced chip permitted solve quite difficult combinatorial problems 
symbolic constraints may enumerations form domain splitting rule herbrand domain usually infinite 
case ordering constraints conjunctions atomic constraints form studied comon jouannaud okada nieuwenhuis rubio 
context simplification rules obtained expressing recursive definition ordering terms set transformation rules operating atomic constraints enumeration rules compare terms 
saturate system developed nieuwenhuis rubio implements constraints solving mechanism form lazy enumeration rule 
kind hybrid method arises application uses complex constraints operating computational domains supposed syntax constraint solving method 
problems called combination problems 
case constraint syntax course built different pieces coming different constraints involved combination 
course desirable derive constraint solving algorithm combination algorithms known primitive constraints 
turns problem thoroughly investigated unification case main difficulty associative commutative unification associative commutative function symbols problem seen combination unification algorithms symbols 
technique elaborated years transformation rules step aimed splitting combined constraint homogeneous pieces 
second non deterministic step guessed homogeneous fragment variable take value 
homogeneous piece oe solved method local consistency check resulting value variable propagated constraints share variable oe ensure global consistency 
third step repeated homogeneous sub constraints eventually solved 
technique adapted general framework constraints baader schulz decidability condition positive existential fragment constituent constraint system 
describes example 
similar techniques comon nieuwenhuis rubio solve ordering constraints operating associative commutative equivalence classes terms 
problem ordering terms generated total ordering function symbols domain interpretation depending ordering associated associative commutative function symbol 
querying bibliographic data base articles satisfying certain constraints interesting practical example application kind techniques 
assume item data base records information particular article authors title affiliation bibtex format 
item represented feature term finite data base big conjunction phi feature terms 
note easy augment data base adding new element conjunction 
querying data base particular entry example papers containing word unification title expressed entailment problem form phi oe oe represents query 
problem feature terms homogeneous contain subexpressions strings certain vocabulary involves solving associative commutative pattern matching constraints 
see details 
application contexts constraints natural way specify mathematical problems number potential applications ideas 
numerical constraints heavily operations research robotics generally area applied mathematics physics mechanical engineering 
symbolic constraints arise naturally computer science applications type verification inference partial interpretations logic programming deduction artificial intelligence 
order ease description constraint solving processing formalisms softwares designed mention elan developed nancy logical framework rewriting logic allowing describe transformation rules way examples developed constraints handling rules developed ecrc extension eclipse clp system 
concentrate main applications tools constraints deduction constraints computations 
constraints deduction developed new promising field research constraint logic programming specific instance 
constraints particular importance theorem proving deduction process underlying theorem provers greatly integrating constraint handling deduction process 
constraints allows particular prune search space spectacular way 
assume associative commutative operator situation quite occur practice think example union operator sets 
advanced automated deduction techniques ones require solving equations terms involving operators subgoals logical deduction 
equation simple exactly minimal solutions results general formula 
course realistic engage current computers number deductions 
fortunately turns necessary really needed solutions equations explicit computation 
keeping equation constraint dramatically reduce search space hand save time avoiding explicit computation solutions may need exponential time previous case 
simple observation leads consider constrained logical formulas adapt deduction mechanisms framework 
general description deduction constraint formulated kirchner kirchner rusinowitch 
completeness property method required new proof techniques investigated bachmair ganzinger lynch snyder hand nieuwenhuis rubio hand 
area research currently active 
ideas deduction process express structure sharing simply recording value variables constraint part formula substituting explicitly 
allowed formally study complexity deductions presence structure sharing yielding polynomial complexity results various deduction processes operating horn clauses equality shown lynch 
constraint solving techniques key application constraint logic programming framework especially solving combinatorial search problems 
examples problems occurring different economical areas mention project management production scheduling crew assignment tour planning problems np hard general hard model hard program 
constraint logic programming brings ideal solution problem supporting different types constraint systems symbolic numeric allowing powerful constraint solving algorithms combined domain oriented heuristic search 
successful industrial applications developed areas described volume 
overview constraint logic programming described applications circuit design symbolic verification test pattern generation logic synthesis diagnosis decision problems management option trading analysis portfolio management :10.1.1.25.8566
developments proceedings events 

extending chip order solve complex scheduling placement problems 
journal mathematical computer modelling 
pergamon press 
kaci 
lattice theoretic approach computation calculus type structures 
phd thesis university pennsylvania 
colmerauer 
equations inequations finite infinite trees 
proceedings fgcs pages november 
comon 
survey 

lassez plotkin editors computational logic 
essays honor alan robinson chapter pages 
mit press cambridge ma usa 
comon lescanne 
equational problems 
kirchner editor unification pages 
academic press london 

efficient algorithm solving systems diophantine equations 
information computation august 
dantzig 
linear programming extensions 
princeton university press 
dauchet 
rewriting tree automata 
comon 
jouannaud editors proc 
spring school theoretical computer science rewriting volume lecture notes computer science france 
springer verlag 
dincbas van hentenryck simonis graf berthier 
constraint logic programming language chip 
proceedings international conference fifth generation computer systems volume pages 
institute new generation computer technology 
heintze 
set program analysis 
phd thesis carnegie mellon university 
herbrand 
recherches sur la th eorie de la 
de la soc 
des sciences des de iii 
huet 
unification algorithm typed lambda calculus 
theoretical computer science 
jaffar 
lassez 
constraint logic programming 
proceedings th annual acm symposium principles programming languages munich germany pages 
jaffar maher :10.1.1.25.8566
constraint logic programming survey 
journal logic programming 

jouannaud editor 
proceedings st international conference constraints computational logics munich germany volume lecture notes computer science 
springer verlag 

jouannaud kirchner 
solving equations algebras rule survey unification 

lassez plotkin editors computational logic 
essays honor alan robinson chapter pages 
mit press cambridge ma usa 
karmarkar 
new polynomial time algorithm linear programming 
combinatorica 
kirchner 
ethodes de conception syst ematique algorithmes unification dans les th 
th ese de doctorat etat universit de nancy 
kozen 
set constraints logic programming 
information computation 
appear 
martelli montanari 
efficient unification algorithm 
acm transactions programming languages systems 
editor 
constraint programming basics trends volume lecture notes computer science 
springer verlag 
rounds kasper 
complete logical calculus record structures representing linguistic information 
proceedings symposium logic computer science pages cambridge massachusetts june 
ieee computer society 
smolka 
foundation higher order concurrent constraint programming 

jouannaud editor proceedings st international conference constraints computational logics munich germany volume lecture notes computer science pages 
springer verlag 
van hentenryck saraswat editors 
principles practice constraint programming 
mit press 
contents syntactic transformations semantic methods hybrid methods application contexts list figures 

unification constraints feature constraints automaton accepting numbers automaton formula automaton formula default vectors computation solution system finite domains bibliographic search assume twice age age 
knowing am 

expressed constraint rational numbers gamma gamma transformation proceeds expect choosing variable say replacing equations yielding new equivalent system having set solutions gamma gamma gamma gamma system simplified elementary rational number theory yielding equivalent system gamma gamma proceed eliminating existential quantifier solved form 
solutions 

erard rousseau wine maker just bought acres soil planted red 
options changed chosen 
bringing father farm investment acre year equal rise uses chemical 
acre kind produce bottles year sold dollars second produce sold 
investment years limited 
acres chemicals order maximize profit 
take number acres number acres chemicals number non acres unused investment slack variables 
variables positive 
gamma gamma process repeats steps choose distinct variable equation ii solve system respect choosen variables iii replace left hand side variables profit function 
choice variables step ensure right hand side constants equations obtained step ii positive constant profit function obtained step iii decreased 
gamma gamma gamma gamma pivoting yields gamma gamma gamma gamma profit function clearly maximized coefficients negative 
yields profit 
unification transformation rules parameterized vocabulary building expressions called terms 
arbitrary function symbols variables arbitrary terms 
conjunctions equations terms called unification constraints 
solved forms chosen terms variables constraints form variables occurs exactly see choices 
obtain solved form arbitrary unification constraint transformation rules needed important decomposition simplifies equation left right hand side terms rooted function symbol elimination propagates necessary value variable rest unification constraint 
set transformation rules unification delete decompose conflict 
check 
occurs non variable term eliminate pfx 
sg occur occurs swap variable variable rules conjunction supposed associative commutative allowing single equation leftmost place constraint 
rule pfx 
sg denotes unification constraint variable replaced term example unification constraint transformed follows decompose decompose eliminate decompose eliminate solved form 
associated assignment fx 

zg called general unifier starting unification constraint 
solution constraint obtained general appropriate specialization 
unification constraints features constructed sets set sorts called basic types set keys called features set sort variables 
set feature expressions terms follow syntax form context free grammar example feature term person age nat meant represent set persons age natural number purpose feature constraints conjunctions equalities feature terms 
example specify constraint set persons blue eyes married person age person age nat eyes blue colour married person person age nat ordinary trees feature terms may arbitrary number subterms sort name identified function symbol 
feature terms unification looks pretty ordinary unification 
give decomposition conflicting rules decompose key key key key key key different keys different sort names rules stand constants variables appropriate categories 
example may sort person variable 
formulation conflicts different sort names arise stage 
example age nat person age nat person describe set persons having age 
feature constraints read know number written base 
enter final state marked double circle 
read number stay final state 
automaton accepting numbers possible transitions labeled pairs identical symbols 
automaton formula states correspond carry final state carry non final state 
initially enter carry 
reading triples stay final state 
carry transition state carry 
transitions built way 
automaton formula theta theta theta theta theta theta gamma gamma gamma psi default vectors gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma psi theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta gamma gamma gamma gamma gamma gamma psi gamma gamma gamma gamma gamma gamma psi theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma psi computation solution system consider structure fd domain set natural numbers variables range 
setting finite domain constraints existential positive formulae built predicates interpreted infinitely membership predicates finite interval 
precise syntax grammar ax gamma denotes variable ranging values 
atomic constraint interpreted atomic constraints identified 
solving finite domain constraints np complete important practice favored practically efficient technique constraint propagation described form set transformation rules atomic ordering equality constraint variables var fx domains defined membership constraints induces new restrictions domains resulting new membership constraints 
call reduced domain rd variable smallest interval containing constraint obtained substituting satisfiable fd 
forward checking gamma rd gamma var fxg look ahead gamma rd gamma var rd eliminate gamma 
ag var gamma falsity gamma 
enumerate gamma 
ag gamma rules applies forward checking rule easy variable solved modifies original domain allows eliminate uses look ahead rule principle lift constraint variables domain 
example constraint cx dx entails relation ca db choose largest natural number cm db bigger 
consider constraint lookahead normal form unsatisfiable current context forces making false 
enumerate obtain understood non deterministic branching lookahead needs applying enumerate 
see crucial role enumerations case enumerating largest values speed process 
popular schema domain splitting similar binary search 
finite domains syntax features defined 
sorts types set person identity university augmented built types list string nat 
set keys clear context syntax basic types article key string title string authors aa list person university univ string city string adr address address city string street string nat person name identity affiliation university identity string string clear context recall constant sorts feature term 
consider query article key title unification authors letters denote variables appropriate types 
solutions constraints values constraint entailed data base expression 
course entailment problem cause enumeration elementary formulas data base corresponding various bibliographical data allowing resolve entailment problem bibliographical datum turn 
assume bibliographical data base contains entry article key title efficient unification algorithm authors person name ident martelli alberto person name ident montanari ugo order variables match appropriate information constraint split homogeneous pieces pieces domain 
domains domain feature terms domain strings domain natural numbers 
obtain new entailment constraint key key title unification title efficient unification algorithm authors authors person name ident martelli alberto person name ident montanari ugo turn decomposed efficient algorithm appropriate string matching algorithm 
bibliographic search 
