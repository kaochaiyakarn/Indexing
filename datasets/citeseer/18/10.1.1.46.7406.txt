new results local inference relations robert givan david mcallester mit artificial intelligence laboratory technology square cambridge mass ai mit edu dam ai mit edu consider concept local set inference rules 
local rule set automatically transformed rule set bottom evaluation terminates polynomial time 
local rule set transformation gives polynomial time evaluation strategies large variety rule sets terminating evaluation strategies known automatic technique 
discusses new results 
shown polynomial time predicate defined local rule set 
second new machine recognizable subclass local rule sets identified 
show locality property rule sets undecidable general 
appeared kr 
postscript electronic source ftp ai mit edu pub dam kr ps 
bibtex internet file ftp ai mit edu pub dam dam bib 
conditions set inference rules define computationally tractable inference relation 
syntactic question syntactic inference rules 
variety motivations identifying tractable inference relations 
tractable inference relations provide decision procedures semantic theories 
example equational inference rules reflexivity symmetry transitivity substitutivity define tractable inference relation yields decision procedure entailment relation sets ground equations kozen shostak example set equational horn clauses valid lattice theory 
special case results show automatically validity lattice theoretic horn clause decidable cubic time 
deductive data bases provide second motivation studying tractable inference relations 
deductive data base designed answer queries simple inference rules set declared data base facts 
inference rules deductive data base usually define tractable inference relation 
inference rules usually special form known datalog program 
datalog program set order horn clauses contain function symbols 
datalog program defines tractable inference relation ullman ullman interest generalizing inference rules deductive databases special case datalog programs 
general case function symbols allowed horn clause inference rules set inference rules viewed prolog program 
considerable done bottom evaluation strategies programs source source transformations bottom evaluation strategies efficient naughton ramakrishnan bry local inference relations viewed extension optimization techniques 
example locality testing provides automatic source source transformation inference rules equality symmetry reflexivity transitive substitution allows completely evaluated bottom fashion cubic time 
know automatic transformation inference rules provides terminating evaluation strategy rule set 
third motivation study tractable inference relations role relations play improving efficiency search 
practical search algorithms form incomplete inference prune nodes search tree knuth mackworth pearl korf incomplete inference plays important role pruning search constraint logic programming jaffar lassez van hentenryck mcallester siskind tractable inference relations define notion obvious inference proof verification systems require proofs reduced obvious steps mcallester givan mentioned inference rules syntactically similar order horn clauses 
fact inference rules syntactically represented horn clause sorted order logic 
set horn clauses sigma set ground atomic formulas phi ground atomic formula write sigma phi sigma phi order logic 
write think set syntactic inference rules inference relation generated rules 
term rule set synonym set horn clauses 
technically phrase refers finite set horn clauses 
give nontrivial conditions ensure inference relation polynomial time decidable 
noted rule set contain function symbols called datalog program 
known inference relation defined datalog program polynomial time decidable 
vardi immerman independently proved essence datalog programs provide characterization complexity class polynomial time predicate finite data bases written datalog program provided successor relation defines total order domain elements vardi immerman papadimitriou datalog programs provide interesting class polynomial time inference relations class tractable rule sets larger class datalog programs 
generalize concept datalog program concept superficial rule set 
call set horn clauses superficial term appears clause appears antecedent clause 
superficial rule set property forward chaining inference introduce new terms 
superficial rule sets provide different characterization complexity class datalog programs encode polynomial time predicate finite data bases superficial rule sets encode polynomial time predicate order terms 
predicate order terms constructed finite signature 
define dag size order term number distinct terms appear subexpressions possible show computed polynomial time sum dag size arguments represented superficial rule set 
specifically prove predicate order terms exists superficial rule set input accept input predicate symbol accept distinguished proposition symbol 
characterization terms superficial rule sets differs immerman characterization terms datalog programs ways 
result stated terms predicates terms predicates dag size term size directed acyclic graph representation term 
databases 
second datalog characterization separate total order domain elements required 
superficial rule sets special case general class local rule sets mcallester set horn clauses local sigma phi exists proof phi sigma term proof mentioned sigma phi 
local polynomial time decidable 
superficial rule sets local local rule sets superficial 
set inference rules equality local superficial 
local inference relations provide third characterization complexity class predicate order terms constructed finite signature 
computed polynomial time sum dag size arguments exists local rule set terms predicate symbol representing note superficial rule set property forward chaining inference superficial rule set introduce new terms 
find characterization polynomial time predicates terms local rule sets particularly pleasing yields direct mapping semantic predicates predicates inference rules 
locality difficult recognize 
set inference rules equality local proof fact nontrivial 
fortunately large classes mechanically recognizable local rule sets 
notion bounded local rule set defined mcallester procedure automatically recognize locality bounded local rule set 
set basic rules equality bounded local 
example bounded local rule set give rules reasoning monotone operator sets sets 
set inference rules monotone operator 
simple source source transformation local rule set converts rule set superficial rule set losing completeness 
example consider rules monotone operator 
transform rules derive information terms explicitly mentioned query 
introduce predicate symbol intuitive meaning mentioned 
rules rewritten follows 
transformed rule set note superficial bottom forward chaining evaluation terminate polynomial time 
determine sigma rf determine bottom evaluation fm sigma analogous transformation applies local rule set 
variety bounded local rule sets mcallester example rule set local bounded local give rules reasoning lattice 
xy xy xy xy xy xy rules remain local monotonicity rule added 
monotonicity rule rule set bounded local 
construct machine recognizable subclass local rule sets call inductively local rule sets 
bounded local rule sets mcallester inductively local 
procedure recognizing inductively local rule sets implemented determine rule set inductively local 
inference relation defined rules polynomial time decidable 
rules complete lattices result implies validity lattice theoretic horn clauses polynomial time decidable 
able show bounded local rule sets inductively local examples somewhat artificial 
natural examples local rule sets fail inductively rule set bottom evaluation run completion cubic time 
local 
inductively local rule sets provide variety mechanically recognizable polynomial time inference relations 
settle open question previous analysis mcallester show locality general property rule sets undecidable 
optimization logic programs recognition locality necessarily somewhat heuristic process 
basic terminology section give precise definitions concepts discussed 
definition horn clause order formula form psi psi delta delta delta psi phi phi psi atomic formulas 
set horn clauses finite set sigma ground terms ground atomic formula phi write sigma phi sigma phi order logic set universal closures horn clauses variety inference relations defined 
inference relation sets ground formulas sigma gamma write sigma gamma sigma psi psi gamma 
inference relation direct syntactic characterization 
syntactic characterization useful determining locality 
definition derivation phi sigma rule set sequence ground atomic formulas psi psi psi psi phi psi exists horn clause theta theta theta psi ground substitution oe oe psi psi formula form oe theta member sigma formula appearing earlier derivation 
lemma sigma phi exists derivation phi sigma rule set restricted inference relation plays important role analysis locality 
definition write sigma phi exists derivation phi sigma term appearing derivation appears subexpression phi subexpression formula sigma 
lemma finite rule set inference relation polynomial time decidable 
proof number terms appear subexpressions phi formula sigma 
predicate arguments appears inference rules formulas form sigma 
finite maximum arity predicate symbols appear total number formulas derived restrictions definition order maximum arity predicates clearly sigma phi sigma phi 
converse hold general 
definition converse holds local 
definition mcallester rule set local restricted inference relation unrestricted relation clearly local polynomial time decidable 
characterizing superficial rules section consider predicates order terms computable polynomial time 
results stated require somewhat careful definition polynomial time predicate order terms 
definition polynomial time predicate terms predicate order terms computed polynomial time sum dag sizes arguments 
superficial rule set representation theorem polynomial time predicate order terms exists superficial rule set order terms true arguments input accept 
example consider acyclic predicate directed graphs predicate true directed graph graph cycles 
known acyclicity polynomial time property directed graphs 
property simple definition superficial rules level stratification graph cyclic acyclic 
theorem implies acyclicity predicate defined superficial rules stratification 
rule set acyclicity somewhat complex give sketch proof general theorem 
proof technical casual readers advised skip section 
consider predicates argument 
proof predicates higher arity similar 
argument polynomial time predicate terms predicate terms determine polynomial time dag size term holds 
construct data base represents term subterm introduce data base individual new constant symbol unique term assumed predicate defined terms constructed fixed finite signature fixed finite set constant function symbols 
consider constants functions arguments 
function symbol arguments finite signature introduce database relation arguments ary predicate symbol 
term define sigma set ground formulas form sn subterm possibly equal 
set sigma viewed data base individuals relations gamma set formulas form subterms represents successor relation individuals sigma exists bijection ae individuals sigma consecutive integers gamma ae ae 
result immerman vardi immerman vardi implies polynomial time property set sigma gamma exists datalog program sigma gamma property sigma gamma accept 
term easily recovered set sigma exist datalog program sigma gamma accept 
assume loss generality rule derive new formulas involving data base predicates add rule set superficial rules construct analogues formulas sigma gamma 
define mentioned predicate provable subterm input xn mx second rule schema rules form finite number function symbols signature variables xn give rules simulate formula set sigma xn xn xn write rules simulate formula set gamma define successor relation terms start defining simple subterm predicate su su provable subterms subterm su xn su su xn define equal predicate ne ne provable distinct subterms input xn ym ne xn ym xn xn ne ne xn xn rule distinct function symbols second rule occur argument position arguments terms 
define predicate ni ni subterm give rules constants functions arguments 
rules functions numbers arguments similar 
rule constant 
ne ni ne ni ni ni subterm input simultaneously define place walk relation binary relation 
provable subterms successor left right preorder traversal subterms elimination duplicates 
provable term left right preorder traversal subterms elimination duplicates 
definitions auxiliary place relation viewed try conclude checking duplicates 
constant 
ni ni ni su ni su su ni ni define successor predicate input datalog program plus superficial rules 
sigma gamma accept input accept proof complete 
local rules theorem previous section provide somewhat different characterization complexity class terms local rule sets 
local rule set representation theorem polynomial time predicate order terms exists local rule set order terms true arguments predicate symbol representing giving proof theorem give simple example local rule set polynomial time problem 
context free language recognized cubic time 
fact easily proven giving translation grammars local rule sets 
represent string words constant symbol word binary function cons construct terms represent lists words 
nonterminal symbol grammar introduce predicate symbol pa arguments pa indicate strings words result removing prefix parses category production terminal symbol construct rule antecedents pa cons 
grammar production bc inference rule 
pb pc pa monadic predicate true strings generated distinguished start nonterminal grammar add rule 
ps nil set inference rules 
local rule set proof locality entirely trivial 
rule set property string language generated grammar 
general methods analyzing order running time local rule sets immediately give clauses run completion order time length input string 
implemented compiler converting local rule sets efficient inference procedures 
compiler automatically generate polynomial time parser inference rules 
prove theorem local inference relations preceding theorem superficial rule sets 
preceding theorem exist superficial rule set order terms input accept input predicate symbol accept distinguished proposition symbol 
predicate symbol arguments appearing new predicate symbol arguments 
define rule set rule set containing clauses 
ffl input analysis order running time decision procedures local inference relations mcallester ffl clauses form delta delta delta mn clause delta delta deltaq mn ffl clause accept 
definition easily show input 
follows input accept 
remains show local 
suppose sigma phi 
show sigma phi 
arguments phi 
inference involves formulas arguments 
sigma phi sigma phi sigma set formulas sigma arguments 
sigma phi result replacing formula 
sigma phi sigma phi superficial implies term derivation underlying sigma phi appears appears sigma implies term derivation appears sigma phi 
implies sigma phi 
locality section give alternate characterization locality 
characterization locality plays important role definition bounded local rule sets mcallester notion inductively local rule sets 
definition bounding set set upsilon ground terms subterm member upsilon member upsilon 
definition ground atomic formula psi called label formula bounding set upsilon term psi member upsilon 
definition bounding set upsilon define inference relation upsilon sigma upsilon phi exists derivation phi sigma formula derivation label formula term set upsilon 
sigma phi sigma upsilon phi upsilon set terms appearing subexpressions phi formulas sigma 
inference relation upsilon give characterization locality 
suppose local 
case exist sigma phi sigma phi sigma phi 
upsilon set terms appear sigma phi 
sigma upsilon phi 
sigma phi sigma upsilon phi finite superset upsilon upsilon 
consider growing bounding set term time starting terms appear sigma phi 
definition step extension bounding set upsilon ground term ff upsilon proper subterm ff member upsilon 
definition feedback event consists finite set sigma ground formulas ground formula phi bounding set upsilon containing terms appear sigma phi step extension ff upsilon sigma upsilon fffg phi sigma upsilon phi 
abuse notation feedback event written sigma upsilon fffg phi 
lemma mcallester local feedback events proof note feedback event local sigma upsilon fffg phi sigma phi sigma upsilon phi sigma phi 
conversely suppose local 
case sigma phi sigma phi sigma upsilon phi finite upsilon 
considering upsilon show feedback event exists concepts bounded locality inductive locality involve concept feedback event 
define bounded locality defining cr sigma upsilon set formulas psi sigma upsilon psi 
bounded local local exists natural number sigma upsilon fffg psi exists derivation psi cr sigma upsilon term derivation member upsilon fffg derivation longer mentioned set basic inference rules equality bounded local exists procedure recognize locality bounded local rule set 
definition inductive locality somewhat involved section 
inductive locality define inductive locality define notion feedback template 
feedback template represents set potential feedback events 
define backward chaining process generates feedback templates rule set show exists feedback event event backchaining process 
furthermore define inductive termination condition backchaining process show backchaining process achieves inductive termination local 
section fixed arbitrary set horn clauses 
inference relation upsilon written upsilon understanding implicit parameter relation 
define feedback templates ground objects contain ground order terms formulas 
process generating feedback templates defined ground process deals ground instances clauses ground process lifted lifting transformation 
lifting largely mechanical arbitrary ground procedures mcallester siskind lifting operation discussed briefly 
definition feedback template consists set ground atomic formulas sigma multiset ground atomic formulas gamma ground atomic formula phi bounding set upsilon step extension ff upsilon phi formula sigma label formula upsilon formula gamma label formula upsilon fffg contains ff sigma gamma upsilon fffg phi 
abuse notation feedback template written sigma gamma upsilon fffg phi 
gamma multiset ground atomic formulas label formula upsilon fffg containing ff union sigma gamma allow derivation phi relative bounding set upsilon fffg 
feedback template potential feedback event sense extension sigma allows derivation formulas gamma may result feedback event 
requirement gamma multiset needed induction lemma 
feedback templates constructed backward chaining 
procedure generating template 
psi psi delta delta delta psi phi ground instance clause 
ff term appears clause appear phi appear proper subterm term clause 

upsilon bounding set contain ff contain term clause ff 

sigma set antecedents psi contain ff 

gamma set antecedents psi contain ff 

return feedback template sigma gamma upsilon fffg phi 
set feedback templates derived application procedure 
leave reader verify set feedback templates 
consider feedback template sigma gamma upsilon fffg phi 
construct new template backward chaining sigma gamma upsilon fffg phi procedure 
procedure backchaining sigma gamma upsilon fffg phi 
theta member gamma 
psi psi delta delta delta psi theta ground instance clause theta psi label formula upsilon fffg 

sigma sigma plus antecedents psi contain ff 

gamma gamma minus theta plus antecedents psi contain ff 

return template sigma gamma upsilon fffg phi 
step procedure gamma constructed multiset operations 
example multiset gamma contains occurrences theta gamma minus theta contains occurrence theta 
need gamma multiset order guarantee backchaining operations commute proof induction lemma particular fact sequence backchaining operations remove element theta gamma point exists permutation sequence backchaining operations producing resulting template removes theta 
set feedback templates define plus templates derived element application backchaining procedure 
important keep mind definition contains delta delta delta applications definition feedback template called critical gamma empty 
sigma upsilon fffg phi critical template sigma upsilon fffg phi 
sigma upsilon phi sigma upsilon fffg phi feedback event 
abuse notation critical template sigma upsilon fffg phi sigma upsilon phi called feedback event 
lemma provides motivation definition feedback template backchaining process 
lemma exists feedback event exists contains feedback event 
proof prove lemma suppose exists feedback event sigma upsilon fffg phi minimal feedback event feedback event minimizes length derivation phi sigma bounding set upsilon fffg 
fact feedback event minimal implies formula derivation phi contains ff 
see suppose theta formula derivation phi involve ff 
sigma upsilon fffg theta sigma thetag upsilon fffg phi 
feedback event sigma upsilon phi 
feedback event involves smaller derivation sigma upsilon fffg phi contradicts assumption sigma upsilon fffg phi minimal 
formula phi derivation underlying sigma upsilon fffg phi contains ff template sigma upsilon fffg phi derived backchaining 
lemma implies rule set local backchaining uncover feedback event 
primarily interested cases rule set local 
backchaining process establish locality find termination condition guarantees locality 
set feedback templates 
practice taken finite define self justification property sets feedback templates prove self justifying contain feedback event 
defining self justification property treat template independent induction hypothesis 
template justified set templates induction hypotheses set self justifying 
definition write sigma gamma upsilon phi contains templates sigma gamma upsilon fffg psi sigma gamma upsilon fffg psi 
sigma gamma upsilon fffg psi sigma subset sigma gamma subset gamma sigma psi psi psi upsilon phi 
definition said justify template sigma gamma upsilon fffg phi exists theta gamma template sigma gamma upsilon fffg phi generated backchaining sigma gamma upsilon fffg phi selecting theta step backchaining procedure sigma gamma upsilon phi 
definition set called self justifying member critical justified contain feedback events 
induction theorem self justifying set form contains feedback event 
proof show critical template sigma upsilon fffg phi sigma upsilon phi 
proof induction consider critical template sigma upsilon fffg phi assume theorem critical templates critical template sigma upsilon fffg phi derived backchaining template sigma gamma upsilon fffg phi note sigma subset sigma 
gamma empty sigma equals sigma sigma upsilon phi assumed contain feedback events 
gamma empty self justifying exist theta gamma template sigma gamma upsilon fffg phi derived sigma gamma upsilon fffg phi backchaining theta sigma gamma upsilon phi 
noted backchaining operations commute 
commutativity backchaining steps exists backchaining sequence sigma gamma upsilon fffg phi sigma upsilon fffg phi step sequence backchaining step theta 
sigma gamma upsilon fffg phi template results backchaining step sigma gamma upsilon fffg phi 
note sigma subset sigma 
sigma gamma upsilon phi 
definition contain templates sigma gamma upsilon fffg psi sigma gamma upsilon fffg psi 
sigma gamma upsilon fffg psi sigma subset sigma gamma subset gamma sigma psi psi psi upsilon phi 
note sigma subset sigma 
gamma subset gamma sequence fewer backchaining steps leads sigma gamma upsilon fffg psi critical template sigma upsilon fffg psi note sigma subset sigma 
critical template member sigma upsilon psi sigma upsilon psi sigma upsilon psi psi sigma psi psi psi upsilon phi sigma upsilon phi 
come main definition theorem section 
definition rule set called inductively local exists self justifying 
theorem exists procedure finite set horn clauses terminate feedback event local terminate success inductively local fail terminate cases local inductively local 
procedure derived lifting ground procedure computing 
lifting formalized mechanical operation arbitrary nondeterministic ground procedures mcallester siskind lifted version infinite set represented finite set template schemas consists template expression sigma gamma upsilon fffg phi involving variables plus set constraints variables 
locality undecidable prove locality undecidable reducing halting problem 
specification turing machine 
show mechanically construct local rule set property machine halts exists term rh monadic predicate symbol 
turing machine computations represented order terms formula intuitively states term representing halting computation prove preliminary result construct superficial rule set halts exists term input 
mechanical construction superficial rule set turing machine fairly straightforward 
convert superficial rule set local rule set follows 
predicate symbol arguments appearing new predicate symbol arguments 
rule set constructed just case input 
define rule set rule set containing clauses 
ffl input ffl clauses form delta delta delta mn clause delta delta deltaq mn ffl clause 
input directly follows input 
turing machine halts rh term proof rule set local closely follows proof local rule set representation theorem proven 
constructed local rule set property halts exists term rh 
plus single clause halts halts new proposition symbol 
claim local halt 
note halts halts halts local 
conversely suppose halt 
case show local 
suppose sigma phi 
show sigma phi 
suppose phi formula halts 
case sigma phi equivalent sigma phi 
local sigma phi sigma phi 
suppose phi formula halts 
halts member sigma result trivial assume halts sigma 
sigma halts sigma term show sigma halts suffices show mentioned sigma 
preceding argument sigma 
rule set generated construction inference clause formula inference argument 
implies sigma sigma subset formulas sigma argument 
assumed halt 
sigma empty 
sigma mention sigma sigma halts 
open problems closing note open problems 
known examples rule sets local corresponding inference relation polynomial time decidable 
cases studied exists conservative extension rule set local 
conjecture rule set polynomial time decidable exists local conservative extension problems precise 
find natural rule set local inductively local 
related question useful machine recognizable subclasses local rule sets classes bounded local inductively local rule sets 
franz baader invaluable input discussions 
support described provided part mitsubishi electric research laboratories support laboratory artificial intelligence research provided part advanced research projects agency department defense office naval research contract 
robert givan supported fannie john hertz graduate fellowship 
bry francois bry 
query evaluation recursive databases bottom top reconciled 
data knowledge engineering 
givan robert givan david mcallester sameer 
natural language inference procedures applied schubert 
aaai pages 
morgan kaufmann publishers july 
immerman neal immerman 
relational queries computable polynomial time 
information control 
jaffar lassez jaffar lassez 
constraint logic programming 
proceedings popl pages 
knuth donald knuth 
estimating efficiency backtrack programs 
mathematics computation january 
kozen dexter kozen 
complexity finitely algebras 
proceedings ninth annual acm symposium theory pages 
mackworth mackworth 
consistency networks relations 
artificial intelligence 
mcallester siskind david allen mcallester jeffrey mark siskind 
lifting transformations 
mit artificial intelligence laboratory memo 
mcallester david mcallester 
knowledge representation system mathematics 
mit press 
mcallester mcallester 
automatic recognition tractability inference relations 
jacm april 
naughton ramakrishnan jeff naughton raghu ramakrishnan 
bottom evaluation logic programs 
jean louis lassez gordon plotkin editors computational logic 
mit press 
papadimitriou christos papadimitriou 
note expressive power prolog 
eatcs bulletin 
pearl korf judea pearl richard korf 
search techniques 
ann 
rev comput 
sci 
shostak shostak 
algorithm reasoning equality 
comm 
acm july 
ullman ullman 
principles database knowledge base systems 
computer science press 
ullman ullman 
bottom beats top datalog 
proceedings eigth acm sigact sigmod sigart symposium principles database systems pages march 
van hentenryck pascal van hentenryck 
constraint satisfaction logic programming 
mit press 
vardi vardi 
complexity relational query languages 
th symposium theory computation pages 

