metamodel object oriented statecharts stefan mann phone mail stefan mann fhg de marcus phone mail marcus fhg de fraunhofer institute software engineering systems engineering 
berlin germany february th metamodel object oriented statecharts stefan mann fraunhofer 
berlin germany stefan mann fhg de marcus fraunhofer 
berlin germany marcus fhg de approach definition object oriented modeling languages metamodel 
order achieve precise semantics formal specification language object metalanguage 
considering syntax static semantics order define concepts models constraints different models 
behavior models determined dynamic semantics 
especially behavioral models statecharts interaction diagrams dynamic semantics important 
object single metalanguage defined independently uml aspects syntax static semantics dynamic semantics 
approach define object oriented statecharts proposed harel uml 
object oriented statecharts specification complete behavior classes 
syntax static semantics define structure statecharts instance state hierarchy built 
dynamic semantics deals conflicting transitions priorities transitions transition selection execution 
keywords object oriented statecharts uml metamodeling semantics object widely generally accepted technique modern software engineering combination different models views description software systems 
primary benefit approach model related aspects structure behavior 
principle called separation concern different specialized techniques diagrammatic nature developed 
different models clarifies different important aspects system taken consideration models independent semantically overlapping 
necessary state models related 
appropriate determine models constitute system 
new approach investigation relationships different models 
metamodel task give precise meaning model relation formal object oriented specification language object 
contrast existing approaches investigate syntax static semantics dynamic semantics single formalism 
different models object oriented modeling different models object oriented modeling obviously independent semantically overlapping 
shows models constraints indicated arrows 
sequence diagram body statechart boolean attr class diagram private boolean attr private void class programming language different models system different views system see semantically compatible con straints 
example ffl statechart related class features class may statechart 
ffl sequence diagram operation call related operation declaration class diagram 
ffl statecharts sequence diagrams provide means modeling behavior compatible 
ffl naturally models impact implementation main purpose approach investigate connections models syntactical semantic levels 
major problem object oriented modeling lack precise integration different modeling techniques 
consequence weak integration interpretation concepts object oriented modeling differs considerably 
completeness consistency checks applicable topics tools 
consider model objectoriented modeling statecharts developed structured analysis design techniques 
authors proposed statecharts object oriented modeling give precise semantics object oriented statecharts 
significant done order statecharts object oriented modeling resulting new possibilities simulation code generation 
formal semantics object oriented statecharts open questions concerning relation structural models behavioral models inheritance reflected statecharts constraints order ensure behavioral compatibility 
metamodel want metamodel integration different models give brief explanation basic terminology 
metamodel model information expressed software modeling 
basically metamodel model models 
consists entities defining model elements modeling language 
main purpose metamodel relate model elements 
different levels abstraction illustrated 
data process level entities run time objects instances classes processes running concrete system 
level models different models describing underlying physical system employee employer classes structure diagram 
note objects may occur model level consequently entities level 
abstraction metamodel level describes model entities class object statemachine example 
example consider employee instance class metamodel statechart employee instance statemachine 
order express concepts need level defining language metamodel 
level called meta metamodel level 
class statemachine object instance model instance metamodel class diagrams object specification model concepts model level metamodel level meta metamodel level data process level employee employer robert chris chris employee language metamodeling different levels abstraction integration different models metamodel depicted 
elements model interpreted metamodel 
interpretation depicted dashed lines done implicitly definition modeling language 
metamodel modeling entities relationship entities described association consists 
furthermore entities different models may related 
example consider association modelelement statemachine establishes relation structural class behavioral elements statemachine 
relation exemplifies need constraints order ensure state machine related state machine 
generally constraints important order state relationship different entities metamodel 
models uml object oriented analysis design techniques deeply influenced modern software engineering 
years different notations proposed authors 
concepts quite similar differ graphical representation 
uml effort started propose modeling language unifying concepts popular methods 
current version unified modeling language uml concepts association statemachine modelelement state class behavior metamodel class diagram statechart metamodel integration different models proposed authors integrated 
generally uml consists models ffl static structure diagrams class object diagrams ffl case diagrams ffl sequence diagrams ffl collaboration diagrams ffl statechart diagrams ffl activity diagrams ffl implementation diagrams course give motivation models refer literature 
concrete programming language scope uml useful consider constructs modeling language respect programming language 
example labels transitions object oriented statecharts statements programming language interpreted order compute effect transition 
investigation relation implementation design specification reason treating concepts programming language metamodel 
allows define simple computational model necessary state dynamic semantics aspects static model 
additional definition programming language continuity objectoriented software development 
important methodological point view order yield smooth development process 
object definition metamodel practice class diagrams entityrelationship diagrams description metamodel 
way information represented models described constraints model entities stated 
convinced class diagrams useful order get overview entities additionally propose object definition metamodel order define constraints entities metamodel 
class diagrams entity relationship diagrams easily translated object 
associations class represented attributes corresponding object class 
furthermore interprete object inheritance 
interpretation straightforward see 
able map class diagrams object semantics metamodel determined object definitions class diagrams explanatory character 
able express constraints entities metamodel predicate logic 
typically class invariants purpose 
furthermore considering dynamic semantics model 
behavioral models dynamic semantics essential entities static model impact behavior 
argue important consider dynamic semantics metamodel 
purpose operations object classes 
way achieve precise mathematical description metamodel short object appendix 
syntax static semantics dynamic semantics uml approach class diagrams ocl natural language object approach object class specs object predicates object operation class diagrams class specs specs comparison uml object approach entities 
object single formalism syntax static semantics dynamic semantics 
comparison uml approach metamodel uml object constraint language ocl express constraints entities metamodel 
major progress compared version 
authors distinguish syntax static semantics dynamic semantics 
agree conceptual distinction 
uml approach different syntax aspects see 
consequently relation different aspects expressed loosely informal level 
approach proposed abbreviated object approach describe aspects formalism leading common vocabulary 
closely related distinction aspects clear classes attributes associations describe syntax natural mapping class diagrams object specification 
uml approach constraints attributes associations described predicates 
dynamic semantics defined operations object classes 
advantage approach self referencing problems object logical basis foundation completely independent uml 
example consider generalization relationship metamodel 
reflect generalization relationship metamodel inheritance mechanism explained syntactically enrichment class 
way able structure metamodel avoid self referencing problems 
relationship class diagrams ocl quite unclear 
example consider constraint defined superclass inheriting class fulfill constraint 
possible redefine operations ocl 
important questions order understand metamodel 
general concept ocl semantics described ocl support value semantics semantics object 
type system ocl clear 
uml metamodel basis investigations uml quasi standard object oriented modeling 
convinced case tools support uml standard uml important impact software engineering 
purely scientific point view chosen uml provides elaborated metamodel 
structure sections describe metamodel object oriented statecharts class diagrams object 
section gives short overview concepts object oriented statecharts 
syntax static semantics introduced section dynamic semantics section 
section 
basic concepts formal object oriented specification language object sketched appendix 
object oriented statecharts statecharts behavioral description classes specifying intra object dynamics objectoriented methods 
different methods different dialects statecharts 
dialects differ syntax semantics semantics precisely defined method 
fundamental done precise description statecharts object oriented modeling especially executable modeling 
conceptual tool developed 
allows specification simulation code generation object oriented statecharts 
uml metamodel statecharts object oriented version 
notation object oriented statecharts essentially standard statecharts semantics differs considerably 
metamodel object oriented statecharts formalizes statecharts described specifying syntax static semantics dynamic semantics 
call classes assigned statechart reactive 
behavior instances reactive classes depends internal control state 
states statechart represent situations life cycle objects define temporary invariants 
communication mechanisms provided 
reactive objects able communicate asynchronously synchronously 
asynchronous communication established sending events synchronous communication established operation calls 
statechart defines reaction received event asynchronous communication reaction fulfill operation request 
kinds reactions expressed firing transitions triggered event operation request 
type events asynchronous communication called signals events signal events 
signals class receive send belong interface class 
operations effects specified transitions called triggered operations 
received request triggered operation 
additional features reactive class shown class diagram 
operations operation owner class opns signal triggered owner primitives owner owner receive send tr opns pr opns statemachine statemachine reactive class difference requesting operation object sending signal event object effects statechart client object case requesting object operation done firing transition execution client object statechart frozen mid transition thread control immediately passed server object 
operation request satisfied requested operation performed server object thread control passed back client object proceeds firing rest suspended transition 
case sending signal event client object retains thread control order complete transition execution 
syntax static semantics oo statecharts approach syntax static semantics object classes state schemas attributes class invariants defined 
better understanding overview class diagrams 
call object requesting operation object client object 
analogously object provides requested operation called server object 
part metamodel syntax static semantics object oriented statecharts illustrates approach metamodeling integration different models 
complete metamodel 
statechart syntactically consists hierarchy vertices set transitions 
transitions directed edges vertices 
statecharts kinds vertices distinguished states pseudo states connectors 
common kinds vertices source target transitions general 
states decomposed different ways 
statemate statecharts xor states basic states :10.1.1.20.5519
xor state active exactly substates active 
active substates active 
basic states atomic refined 
pseudo states default history symbols subnodes xor state 
specification entering modes xor state 
connectors transition structuring 
basic elements structuring transition transition segments 
sequence transition segments connected connectors constitutes compound transition 
source target compound transitions consist state vertices 
metamodel state abstraction states pseudo states 
example statechart reactive class shown 
various states drawn basic xor 
names states identify type states belong 
hierarchy states shown encapsulation states 
direct substates xor xor 
states called components state 
state xor decomposed states basic xor 
edges named transition segments 
sequence constitutes compound transition 
transition segments connected junction connector drawn black filled circle 
transition segment starts default symbol drawn black filled circle incoming edges constitutes default transition xor state xor 
transition segment goes history symbol circled 
circled statechart condition connector 
transition segment example transition source vertex 
transitions label consisting trigger guard action optional 
guard written inside brackets transition label see example statechart 
action written slash 
trigger transition spec terminology statecharts vertices differs notions uml 
basic basic basic signal anobject gen signal guard action guard action signal basic op anobject op basic basic xor xor xor basic xor xor basic basic basic basic statechart ified guard slash 
guards actions written style programming language specification language possible 
subset formal specification language specifying actions guards transitions 
states connector vertex context subnodes parent substates state subnode substate parent vertices statecharts different metaclasses vertices depicted 
decomposition states results state hierarchy strong aggregation relation subnode state aggregates direct subnodes 
instance direct subnodes state xor default symbol source vertex transition segment history symbol states basic xor 
aggregation relation substate view subnode substates default history symbol referenced 
note strong aggregation symbol metamodel interpreted object containment 
contained object indicated object fl symbol shared containment relations 
define metaclasses state 
metaclasses defined 
state name identifier subnodes fl static reactions fl entry action statement fl exit action statement fl delta substates state subnodes subnodes substates substates state context self subnodes ffl parent static reactions ffl source target static reactions en trans ex trans substates ffl name name entry action exit action substates fs state subnodes subnodes fs substates subnodes ffl ng subnodes subnodes definitions substates substates omitted state state vertex metaclass state derived metaclass defines attribute parent referencing parent state state subnode generally state refined number subnodes states pseudo states 
property expressed aggregation relation subnode state 
name attribute corresponds rolename subnodes aggregation subnode class diagram 
attribute subnodes denotes set direct subnodes state 
attributes subnodes subnodes defined secondary object derived attribute subnodes 
attribute subnodes denotes set direct indirect subnodes state represents transitive closure relation subnode 
instance set direct indirect subnodes state xor statechart consists states basic xor basic basic default symbols xor xor history symbol xor 
subnodes denotes closure subnode 
secondary attribute substates role substates aggregation relation substate denotes set direct substates respective subset set referenced subnodes 
described state may entry exit action executed time state entered exited 
entry exit actions statements actions transitions 
additionally incoming outgoing transitions state static reactions 
static reactions similar transition segments compound transitions 
trigger guard action 
contrast transition segments compound transitions enter exit state see section 
additional constraints subclass state xor state state default symbol subnodes 
contrast basic state subnodes 
states refined xor states 
xor states components state exit entry actions static reactions entering exiting transitions entered exited parent state entered exited 
state subnodes subnodes ffl static reactions entry action exit action en trans ex trans attribute parent metaclass represents inverse direction subnodes 
object secondary attributes declared symbol delta declaration part state schema 
properties states statechart state hierarchy defined 
common ancestor state set states lowest state state hierarchy states set direct indirect substates 
property stated partial function lca set states common ancestor state 
function partial common ancestor state exists set consisting states statechart 
lca state state ss state ffl ss dom lca state ffl ss substates ss dom lca state ffl lca ss ss substates substates ffl ss substates example consider statechart 
common ancestor state states xor basic state 
states orthogonal belong different components state states hierarchically related common ancestor state 
property defined relation different states state state state ffl fs dom lca substates substates instance states xor basic statechart orthogonal xor basic common ancestor state 
transitions transitions specify state changes statechart 
metaclass transition defines properties common kinds transitions 
transition source target vertices attributes source target 
transition triggered event 
events occurrences time types specify events trigger transition 
trigger signal non empty set states statechart common ancestor root state statechart 
contrast statemate statecharts object oriented statecharts described single event processing conjunctions negations events provided instance :10.1.1.20.5519
triggered operation time 
transition triggered signal event triggered call event op provided triggered operation 
trigger signal timeout transition trigger trigger source target vertex trigger ict cct ordered statement action trans seq action guard guard en trans target ex trans source vertex trigger transition entering exiting trigger signal timeout transitions shows kinds transitions metaclasses static reactions transition segments compound transitions 
described 
transition segments static reactions transition segment edge kind vertices 
element structuring compound transitions 
transition segment source target vertex source vertices target vertices states orthogonal 
static reaction state defines reaction executed state active 
static reactions considered special transitions enter exit state 
static reactions exactly source state target state 
static reaction belongs set referenced attribute static reactions source state 
additionally properties defined metaclass transition static reactions transition segments uml called internal transitions called static reactions 
guard action 
guard boolean condition specifying precondition firing transition 
action statement executed transition fires 
instance action generate signal event invoke operation manipulate variables 
described properties transition segment formalized object schema 
object specification static reactions shown 
transition guard fl action statement fl guard action source source source state source ffl target target target state target ffl context context compound transitions compound transitions basic entities define reaction received event 
atomic terms execution connectors states 
compound transitions introduced semantics :10.1.1.20.5519
ff 
description dynamic semantics 
static properties compound transitions considered 
effects firing compound transition topic dynamic semantics 
syntactically compound transition non empty sequence transition segments attribute trans seq finishing state vertices satisfying constraints ffl source compound transition equivalent source transition segment sequence transition segments 
source consist state vertices connectors 
target compound transition equivalent target transition segment sequence 
target compound transition consist states history symbols connectors default symbols 
sequence transition segments constitutes compound transition going state basic state basic 
ffl source transition segments sequence consists exactly connector 
target transition segments sequence consists exactly connector 
ffl transition segments sequence connected target transition segment source see example transition segments connected junction connector ffl sequence transition segments cycle transition segment sequence occurs exactly 
ffl compound transition trigger 
trigger may occur exactly transition segment 
segments trigger 
trigger compound transition ht specified trigger transition segment 
transition trans seq seq delta scope source source head trans seq source target state target trans seq target ran trans seq head trans seq ffl source ae connector source ran trans seq trans seq ffl target ae connector target trans seq ffl trans seq target trans seq source ran trans seq ffl ffl trans seq ran trans seq ffl trigger ran trans seq ffl trigger trigger trigger ran trans seq ffl trigger trigger scope state source target ffl ffl state parent compound transitions named constituting sequence transition segments object notation ht denotes described compound transition 
furthermore kinds compound transitions distinguished initial compound transitions icts continuation compound transitions full compound transitions :10.1.1.20.5519
fct combination ict describes complete legal state change complete state configuration specifies basic states new state configuration ict cct generally specify states new state configuration 
syntactically icts differ source 
source ict consists states source cct consists pseudo state 
compound transition ht ict compound transition ht cct 
example statechart consists ict ht ht ht 
ict ht fires state entered ict 
components state entered automatically 
ht ht default transition components xor xor respectively executed substates xor states entered 
example basic basic entered complete state configuration reached 
metamodel constitute metaclass underlying semantics defined operationally dynamic semantics 
contrast icts defined subclasses metaclass 
icts trigger 
icts trigger called null transitions specific importance run completion semantics statecharts see section 
example statechart trigger signal transition segment trigger icts ht ht 
segments may trigger 
trigger complete reaction occured event triggered ict get complete state configuration 
common icts scope state localizes effects firing state hierarchy 
scope compound transition lowest xor state hierarchy states source target vertices direct indirect subnodes 
scope ict localizes state changes state hierarchy statechart 
determines part actual state configuration changed ict fires 
instance scope called null transitions completion transitions uml 
way static reactions trigger null transitions 
scope transition called arena uml called common ancestor state lca transition 
ict ht xor ict fires actual state configuration xor orthogonal xor unchanged 
ict causes exit exactly state direct substate scope 
state called maximally exited state ict attribute exit max 
source vertices directly indirectly subnodes state maximally exited state source state ict 
analogously exactly direct substate scope maximally entered state ict attribute enter max 
ict delta exit max enter max state source ae state target ae state exit max scope substates fn source ffl substates enter max scope substates fn target ffl substates case maximally entered state defined exit state 
specification enter max icts 
order define execution compound transitions dynamic semantics part secondary attributes states entered explicitly default compound transition defined omitted 
state machine state machine metaclass statemachine describes statechart reactive class defines execution 
syntactically consists vertices transitions statechart 
root state explicitly aggregated see state vertices aggregated implicitly direct indirect subnodes root state sm root 
connectors aggregated state machine belong state 
object oriented systems objects created destroyed aspects considered statecharts 
reason special kinds states introduced metamodel see class diagram initial state metaclass statechart represents object life cycle final state metaclass represents object life cycle 
init entrance final state transition lifetime root sm root statemachine owner statemachine transitions lifetime connector connectors metaclass statemachine transitions initial state describe initialization object similar initialization object constructors object oriented programming languages 
analogously transitions final state represent destructor 
top level default symbol statechart interpreted initial state example statechart source transition 
symbol circled denotes final state see target transition 
state referenced attribute lifetime root aggregates states object life cycle drawn states statechart state sm root aggregates life time root state initial state final state subnodes 
statemachine owner sm root fl transitions transition fl connectors connector fl delta lifetime root initial state final state sm root subnodes root initial state final sm root en trans sm root ex trans sm root static reactions sm root entry action sm root exit action lifetime root substates transitions vertex source target ffl sm root subnodes connectors vertex sm root subnodes connectors ffl en trans ex trans transitions object class specification consistency constraints formulated source vertices target vertices statechart transitions belong state machine 
entering exiting transitions vertices state machine belong state machine 
initial final states direct substates state machine root state sm root 
constraint ensures maximally entered state compound transition exiting initial state life time root state 
analogously maximally exited state compound transition entering final state life time root state 
consistency constraints state machine reactive class 
triggers transitions declared received signals provided triggered operations reactive class 
furthermore actions transitions operate attributes operations known reactive class server class navigable associations client class 
generated signals declared sent client class declared received server class 
analogously invoked operations provided server class 
formalization constraints omitted requires formalization association inheritance dynamic semantics objectoriented statecharts run time object characterized current state consists current values attributes existing relations links objects 
state reactive object additionally characterized currently active state configuration assigned statechart 
state configuration consisting active states determines current behavior reactive object 
dynamic semantics object oriented statecharts consider topics ffl instantiation reactive class state machine instances 
ffl statechart reaction event 
run stable transient configurations null transitions step conflicting transitions priorities transition selection execution single transition relevant keywords 
ffl signal event queueing passing thread control considered order define interconnection objects 
instantiation state machine run completion semantics described 
signal event threads control considered 
instantiation state machine state machine instance reactive object manages object specific information statechart represented state machine active state configuration metaclass attribute conf set active states history configuration stored information active state configurations xor states history symbol 
see 
owner config direct type instances statemachine owner direct instance statemachine state machine instance owner statemachine config fl fl details omitted reaction received signal call defined operation execute metaclass statemachine task described section 
necessary object specific information active state configuration history configuration received event considered reactive object part input operation 
object specific information considered environment state machine interpreted 
operation state machine instance builds environment promotes operation execute state machine execute 


config 
specified deep history semantics known statemate statecharts :10.1.1.20.5519
run completion semantics dynamic semantics object oriented statecharts define object statechart reacts received request received signal call event timeout event 
reaction statechart signal call timeout event run completion semantics processing reaction event completely executed statechart react new received event 
reaction completely executed statechart reaches stable state configuration state configuration state outgoing enabled null transition 
reaction defined step step basis 
order reach stable configuration steps may need taken 
step starts finishes legal complete state configuration 
step reaction received call signal timeout event starts stable configuration 
transitions executed step triggered received signal call timeout event 
resulting configuration transient states outgoing enabled null transitions step needs taken 
transitions executed step null transitions triggered called 
null event trigger null transitions signal call timeout event trigger transitions trigger null transitions 
event valid step 
transition selection step step orthogonal transitions icts static reactions triggered current event received signal call timeout event null event executed 
set transitions executed step fulfill constraints ch 
ffl transitions set enabled 
ffl conflicts set transitions orthogonal 
ffl transition outside set higher priority transition set 
priorities state hierarchy order define conflicting transitions chosen 
case conflicting transitions defined priority selected transition arbitrary 
specify transition selection operationally traversal active state configuration 
algorithm sketched section 
conflicts priorities formalized 
conflicts transitions icts static reactions assuming active state configuration statechart consists states basic basic icts ht ht ht enabled transitions conflict source states hierarchically related 
formally icts static reactions potentially conflict maximally exited states orthogonal substate 
conflict ict ict ict ffl conflict exit max exit max priorities order solve situations transitions conflict statemate statecharts priorities transitions state hierarchy introduced transitions leaving higher level states higher priority transitions lower level states :10.1.1.20.5519
object oriented statecharts described definition priorities changed transitions lower level states higher priority 

conflicting transitions definition priorities specified relation higher priority transitions icts static reactions distinguishes described cases case icts exactly source state priority ict lower level state higher priority 
priority defined icts source state source state hierarchically related 
example consider transition higher priority priority defined 
case static reactions exit state source state considered maximally exited state 
case icts source state specify priority determine relevant state ict source states order compare icts 
specify priority transitions 
case ict source state exactly source state priority defined iff source state substate source state 
consider 
case defines priorities transition pairs transition pair higher priority second transition 
priority defined 
case static reaction executed source state substates source state outgoing enabled ict 
case priority static reactions corresponds priority definition icts source state case static reaction lower level state higher priority 
priority defined static reactions source state source states hierarchically related 
higher priority ict ict case icts exactly source state ict ict ict ict source ict source ffl ict higher priority ict ict source ict source ffl substates case icts source state ict ict ict ict source ict source ffl ict ict higher priority case ict source state ict exactly source state ict ict ict ict source ict source ffl ict higher priority ict ict source ffl ict source ffl substates case ict static reaction ict ict sr ffl ict higher priority sr ict ict source sr sr source ffl ict sr substates case static reactions sr sr ffl sr higher priority sr sr source sr source ffl substates algorithm selection algorithm description bottom traversal active state configuration ch 

transition selection metamodel specified recursion subset active states statechart 
algorithm detail 
initializing set set consisting active basic states belong active state configuration step 
object question newly created set consists initial state statechart 

selection state removing state selection arbitrary 

test selected state enabled outgoing icts static reactions 
enabled outgoing ict fired 
static reactions selected state tested 
enabled static reaction executed 
case enabled ict static reaction selection enabled icts static reactions arbitrary 
task realizes priority icts static reactions source state see case priority definition 

updating set ffl case ict static reaction executed 
case states orthogonal source states executed transition tested states belong new active state configuration tested 
ffl case transition executed 
parent state selected state added parent state xor state parent state state direct indirect substates belongs longer set unchanged 
priority definition case realized 
state added active substates tested removed 
empty set consists root state algorithm terminates 
state selected 
operation metaclass statemachine specifies operationally selection algorithm described step execution statechart 
operation described detail formally defined object 
transition execution order fire transition generally source states exited action transition executed target states entered 
ff 
concept full compound transitions introduced describes complete state change complete state configuration complete state configuration 
generally sequence activities executed full compound transition execution 
exiting necessary states executing exit actions proper order substates exited parent states 
executing actions transition segments sequence ct specified order 
entering necessary states executing entry actions proper order parent states entered substates metamodel icts defined metaclasses 
viewed explicit entity metamodel 
tasks expressed metamodel 
done assigning responsibilities icts states specified corresponding operations 
instance defined operation exit metaclass state subclasses state state active substates exited 
execution compound transitions static reactions described 
execution compound transition action action compound transition consists actions constituting sequence transition segments 
specified operationally operation metaclass execution defined sequential execution action transition segment sequence specified object distributed sequential composition operator 
trans seq ffl trans seq execution ict execution ict defined follows maximally exited state ict referenced attribute exit max exited 
forces exiting active substates maximally exited state done operation exit metaclass state subclasses 
action ict executed operation defined metaclass target states states entered additionally order yield complete state configuration entered operation 
ict execute exit max exit execution cct execution cct forced xor states entered default history 
execution cct consists execution action entering necessary states similarly icts 
cct execute execution static reaction execution static reactions consists execution action state exited entered static reaction 
execute approach formalizing metamodels 
purpose object oriented specification language object 
state schemas object classes defined syntax static semantics expressed uml metamodel class diagrams ocl constructs 
dynamic semantics defined object operation schemas 
current metaclass provides operation order execute action 
uml metamodel dynamic semantics described informally 
defined major parts object oriented statecharts approach 
emphasize treat objectoriented statecharts rich syntax version 
generally quite difficult express concepts object oriented statecharts 
quite satisfied approach possible treat aspects object oriented statecharts 
think metamodel objectoriented statecharts shows applicability approach 
opinion important reflect structure uml metamodel order provide unique terminology 
important order achieve understandable metamodel 
opinion metamodel understandable treat complicated modeling language 
related related practicability object definition semantics objectoriented programming languages shown 
semantics different object oriented models stream processing functions proposed 
approach sketched main difference consider metamodel basis foundation 
quite different uml approach lead different interpretations syntactical constructs 
approach formalization uml sketched specification language metalanguage 
main advantage approach considering dynamic semantics covered approach 
useful define object oriented specification language object oriented programming language basis metamodel 
technique propose serve sound basis task 
main advantage specification language integrated existing object oriented methods 
acceptance specification languages increased 
currently scope uml uml provides open slot specification operations 
behavioral conformity important modern object oriented software development design patterns frameworks 
order define compatibility relations introduce semantical objects reflecting behavior system notions implementation refinement relationships defined 
attempt define behavioral conformity proposed statemate statecharts 
object object state specification language supports object oriented features objects object identities classes inheritance polymorphism 
semantics contrast value semantics provides adequate means express aggregation sharing objects encapsulation idea state object particular class may altered operations defined class 
objects external view persistent identity 
class declaration declares variable value identity object class distinct identify distinct objects 
major difference semantics objects value automatically identified 
internal view semantics object class comprises set attribute bindings consistent types class invariant set initial bindings operations set relations attribute bindings input output parameters 
term att denotes value attribute att object referenced term op denotes operation transforms object referenced definitions operation op 
operations provide mechanism transforming internal view objects 
object class specification consists list inherited classes state schema initial state schema operation schemas 
class template objects state object instantiation class state schema 
state changes object correspond operation schemas class 
class schema shows constructs object class specification classname super classes class state schema class declaration primary attributes delta declaration secondary attributes class invariants init initial state schema operation schema class delta changed attributes class input output variables definition relation pre post state composite operations class op infix operator op distributed operator ffl op state schema state schema specifies attributes class predicates attributes 
predicates called class invariant 
declaration attributes class invariant included initial state schema operation schema 
object attributes distinguished primary attributes secondary attributes 
written symbol delta declaration part derived primary attributes written symbol delta 
relationship primary secondary attributes specified predicates state schema 
initial state schema initial state schema defines possible initial states objects class 
class invariant predicates initial state schema conjugated 
operations operation schemas specify operations relating pre post states object 
variables belong pre state decorated variables belong post state 
input variables annotated question mark output variables exclamation mark 
contrast delta list declares primary variables changed operation 
secondary attributes included delta list 
mayor difference standard opportunity define complex potentially recursive operation expressions including sending messages objects 
object provides instance infix operators allow composition operations ffl conjunction operator op op constraints operations conjoined variables name equated 
ffl parallel operator op op construct behaves conjunction equates inputs outputs base name 
equated variables hidden environment 
ffl sequence operator op op construct behaves forward relational composition relations defined op op communication left right hidden outputs op equate inputs op hidden 
ffl choice operator op op construct denotes nondeterministic choice operation operations satisfied precondition 
ffl operation enrichment schema ffl op construct denotes environment enrichment schema enriches environment op interpreted 
object allows distributed application conjunction parallel sequence 
general distributed operator form operator schema ffl operation 
argument operator sequence obtained evaluating operation environment enriched binding schema model schema finite 
ffl distributed conjunction schema ffl op expression interpreted expression form op op op operation op enriched valuation schema 
ffl distributed parallel composition ffl op expression interpreted expression form op op op operation op enriched valuation schema 
ffl distributed sequential composition schema ffl op expression interpreted expression form op op op operation op enriched valuation schema 
ffl distributed choice schema ffl op expression interpreted expression form op op op operation op enriched valuation schema 
course give complete object refer reading 
booch 
object oriented analysis design applications 
benjamin cummings redwood city california nd edition 
breu hofmann klein rumpe 
formalization unified modeling language 
aksit matsuoka editors ecoop object oriented programming volume lncs pages 
springer june 
th european conference 
coleman hayes bear 
introducing statecharts objectoriented design 
ieee transactions software engineering jan 
cook daniels 
designing object systems object oriented modelling 
objectoriented series 
prentice hall 
dong 
formal object modelling techniques denotational semantics studies 
phd thesis department computer science university queensland may 
dong duke 
object specify object oriented programming languages 
technical report software verification research centre department computer science university queensland st lucia qld australia feb 
duke rose smith 
object specification language description standards 
technical report software verification research centre department computer science university queensland queensland australia dec 
ehrig geisler padberg 
horizontal vertical structuring techniques statecharts 
proceedings concur th international conference concurrency theory warsaw poland volume lncs 
springer july 
france evans lano 
uml formal modeling notation 
kilov rumpe simmonds editors oopsla workshop object oriented behavioral semantics emphasis semantics large oo business specifications tum pages 
technische universitat munchen sept 
gamma helm johnson vlissides 
design patterns elements reusable objectoriented software 
addison wesley professional computing series 
addison wesley reading massachusetts usa 
harel 
statecharts visual formalism complex systems 
science computer programming aug 
harel 
executable object modeling statecharts 
ieee computer july 
harel naamad :10.1.1.20.5519
statemate semantics statecharts 
technical report logix july 
published acm trans 
soft 
eng 
method october pages 
logix riverside drive massachusetts 
version 
logix tour guide version 
jacobson jonsson 
object oriented software engineering case driven approach 
addisonwesley 
lano 
formal object oriented development 
springer 
mann 
statecharts zur systeme 
diploma thesis department computer science technical university berlin 
berlin germany oct 
german 
rational rose software 
uml semantics version 
rational rose software 
object constraint language specification version 
rational rose software 
uml notation version sept 
rational rose software 
uml semantics version sept 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design prentice hall englewood cliffs new jersey 
selic ward 
real time object oriented modeling 
john wiley sons new york 
spivey 
notation manual 
prentice hall 
