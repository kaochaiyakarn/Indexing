programming satan computer ross anderson roger needham cambridge university computer laboratory pembroke street cambridge england cb qg 
cryptographic protocols distributed systems identify users authenticate transactions 
may involve exchange messages think program size fairly easy get right 
absolutely case bugs routinely known protocols years published 
problem presence hostile opponent alter messages 
effect task program computer gives answers subtly maliciously wrong inconvenient possible moment 
fascinating problem hope lessons learned programming satan computer may helpful tackling common problem programming murphy 
cryptography widely embedded distributed systems automatic teller machines pay view tv utility meters gsm telephone network 
primary purpose prevent carried people forging payment tokens manipulating network messages distributed client server systems replace mainframes introduced general systems products kerberos server identify remote clients authenticate requests resources 
increasing proportion gross world product accounted transactions protected cryptography important understand goes wrong systems 
common misconception clever opponent break cryptographic algorithm 
true algorithms broken second world war effect military outcomes 
fielded systems algorithms broken wealthy opponent rare actual attack involve head assault algorithm 
surveys conducted failure modes banking systems ande utility meters ab showed fields great majority actual security failures resulted opportunistic exploitation various design management 
quite common designers protect wrong things 
example modern electricity meter systems allow customer buy token shop convey units electricity meter home replace coin operated meters vulnerable theft 
clearly ought prevent tokens may magnetic tickets suitably packaged altered duplicated way customer get free electricity 
system protected value encoded token protecting tariff code result tokens produced tariff fraction cent hour keep meter running 
lot recorded result kind blunder management pure simple 
significant number cases designers protected right things cryptographic algorithms broken systems successfully attacked 
brings fascinating subject cryptographic protocol failure 
simple protocol failures section look simple protocol failures highlight improper shared key encryption 
tutorial cryptographic algorithms may consult schn section simply assume alice bob share string called key shared key encryption algorithm transform plaintext message ciphertext 
assume algorithm strong opponent conventionally called charlie deduce plaintext ciphertext vice versa knowing key 
write encryption symbolically problem mechanism safely real system 
simple bank fraud simple protocol failure allowed criminals attack automatic teller machine systems britain largest banks 
bank wished offer offline service customers get limited amount money mainframes doing overnight batch processing 
customer personal identification number pin encrypted written magnetic strip card 
teller machines copy key check pins customers entered 
villain access card encoding machine discovered alter account number card pin withdraw money victim account 
taught trick due course fraud led criminal trials bad publicity forced bank move fully online processing 
protocol failure lack linkage pin account number 
fact standards call pin encryption include account number bank system standards 
illustrates fact encryption straightforward looks 
number purposes including keeping data secret guaranteeing authenticity person transaction producing numbers appear random binding parts transaction 
clear trying case encryption synonymous security improper lead errors 
hacking pay view tv turn offline online systems assume opponent charlie controls network modify messages 
may bit extreme borne hard experience satellite tv industry 
satellite tv signals encrypted customers pay subscription decoders usually personalised secure token smartcard 
card processing power decrypt data video rates usually find decoder 
decoders microcontroller passes messages card replaced attackers 
hard hackers easily interpose pc decoder card manipulate traffic 
customer stops paying subscription system typically sends message air instructs decoder disable card 
kentucky fried chip hack microcontroller replaced blocked particular message 
possible message encrypted 
crypto key obtained clear possibly attack single card card serial numbers protected key cards disabled 
system communications decoder card synchronous users people video record encrypted programme decrypt protocol log posted internet valid card kuhn 
attacks just academic matter cost industry hundreds millions pounds 
sections model alice wishes communicate bob help sam trusted network owned charlie 
satellite tv alice user smartcard bob decoder charlie compromised microcontroller pc sitting set top box smartcard sam broadcaster distributed system alice client bob server charlie hacker sam authentication service 
breath wide frog time plays role cryptographic protocols 
want limit exposure staff equipment capture system components keys give access valuable resources long lifetime revocation complicated expensive 
common solution user share key authentication server sam 
write key alice shares kas bob kbs 
alice wishes set secure session bob gets sam help share session key say kab strictly limited lifetime 
charlie caught selling secrets competition access revoked completely having sam delete authentication protocols designed context turned wrong 
simplest called wide frog protocol ban alice chooses session key communicate bob gets sam translate kas kbs symbolically gamma 
fta kab gkas gamma 
fts kab ta timestamp supplied alice ts supplied sam 
understood time window bob prepared accept key kab fresh 
protocol fails 
flaw sam updates timestamp alice time ta time ts effect sam keeps list working keys timestamps charlie keep key alive sam oracle 
example observing exchange charlie pretend bob wanting share key alice send sam fts kab get back ft kab gkas new timestamp 
pretend alice get ft kab 
practical effect flaw depend application 
users ran protocol smartcards passed session key clear software bulk encryption routine open attack 
charlie observes alice bob setting session keeps session key alive steal smartcards 
alice bob careless cards having thought message plaintext kab destroyed validity period timestamps expired 
lesson careful ensure temporal succession association 
challenge response systems challenge response technique party sends random number subjected cryptographic transfor mation sent back 
purpose may identify wishing log system may play role similar timestamp ensuring freshness protocol 
follows write na random number challenge issued alice 
widespread application password calculators 
log system uses user enters name system displays digit challenge screen user enters calculator secret pin calculator concatenates challenge pin encrypts stored key displays digits result user types logon password 
users logging single system simple robust way avoid problems common passwords 
picture changes number systems involved attempts concentrate calculator keys single security server 
example consider protocol woo lam attempts alice prove presence bob machine despite fact share key bob sam gamma 
gamma 
nb gamma 
fnb gkas gamma 
fa fnb gkas gamma 
fnb protocol wrong 
connection bob query sam sam reply coincidental fact comes shortly insufficient opponent manipulate messages 
charlie impersonate alice trying log bob machine time swapping translations sam gives alice charlie replies 
proposed message gamma 
fa nb sam goes know name host alice attempting log 
charlie alice log start logon alice name bob gets answer challenge sent 
ought put bob name explicitly protocol gamma 
gamma 
nb gamma 
fb nb gkas gamma 
fb nb gkas gamma 
fnb overkill applications manipulate network take established session 
risk depend closely circumstances 
anyway lessons learn firstly careful stating security goals assumptions secondly identity principal essential meaning message mentioned explicitly message 
attacks shared key protocols see ban 
problems public key protocols shared key encryption algorithms protocols tools public key algorithms different keys encrypting decrypting data 
called public key private key gamma respectively 
public key algorithm additional property charlie deduce gamma best known public key algorithm rsa scheme rsa 
straightforward sense encryption decryption operations mutual inverses holds fcg gamma take message subject decryption gamma reversed recover original message context decryption message usually referred digital signature computed person possessing gamma anybody knows check 
decryption signature quite thing shall postpone discussion 
anyway alice bob publish encryption keys ka kb respectively keeps corresponding decryption key ka gamma kb gamma secret ensure integrity privacy messages elegant way dh 
send message bob alice signs private key ka gamma encrypts bob public key kb gamma gkb bob receives message strip outer encryption private key kb gamma recover message applying alice public key ka 
hoped technology design cryptographic protocols lot easier 
course lot problems solve real implementation 
example bob know received real message 
charlie replaced ciphertext completely random value bob calculate ffc kb gamma reason usually want insert redundancy message 
systems suffer lack redundancy 
thing go wrong public key protocol 
denning sacco disaster obvious problem public key cryptography charlie generate keypair kx gamma place kx directory legend alice public key kx 
security requirement key management reduced confidentiality authenticity 
common solution trusted third party sam certification authority public key equivalent authentication server 
sam issue user certificate containing name public key access rights credentials capabilities expiry date signed sam secret key corresponding public key assume known 
write ca fa ka ra ea gamma public key certificates answer easy design faulty protocols 
example public key protocols proposed denning sacco provides mechanism distributing conventional shared encryption keys runs follows gamma 
gamma 
ca cb gamma 
ca cb kab gamma gkb disastrous flaw noticed abadi 
bob receiving alice message masquerade long timestamp ta remains valid 
see suppose bob wants masquerade alice charlie 
goes sam gets fresh certificate cc charlie strips outer encryption kb fromthe third message protocol 
re encrypts signed key fta kab gamma charlie public key gets cc bogus third message gamma 
cb cc kab gamma failure seen violation principle names mentioned explicitly messages 
attack john conway pointed easy beat postal chess 
just play white black act message relay 
idea attack crypto protocols 
example proposed ns authenticated key exchange carried follows 
assume sake brevity alice bob copy key certificate 
gamma 
fna gamma 
fna nb gamma 
fnb gkb known vulnerable replay attack ban 
lowe pointed attack lowe 
charlie sits alice bob 
appears charlie alice alice bob gamma 
fna gamma 
fna gamma 
fna nb gamma 
fna nb gamma 
fnb gamma 
fnb gkb fix straightforward just put principals names explicitly messages 
ccitt problem burrows abadi needham ccitt protocol ccitt 
described ban briefly idea alice signs message form fta na fy gkb sends bob ta timestamp na serial number user data 
problem order encryption signature reversed encrypted signed possible charlie strip alice signature add 
attack public key encryption algorithms possible message ciphertext find key mechanics key spoofing attack described depend quite closely mathematics underlying public key encryption algorithm go detail consider example rsa bit modulus 
alice sends bob modulus public exponent private exponent party ff ff ff ff ignore hashing difference argument signed encrypted message fm mod nb mod na 
bob factor nb factors bits long discrete logarithms respect chinese remainder theorem get discrete logs modulo nb get alice signature finding mod nb registering nb public key 
effect encrypt data signing lay open opponent swapping message thought signed 
example bob wants convince judge alice sent message find key fy gkb register key certification authority 
provides direct attack ccitt alice signs message form fta na fy eb mod nb sends bob 
ta timestamp na serial number user data 
breaks draft iso cd consists name concatenated random challenge session key 
actual attack system usual depend application detail case interaction timestamps serial numbers mechanisms establish temporal succession association 
clearly bad idea bring application code security perimeter absolutely necessary 
case lesson learned signature affixed encrypted data assume signer knowledge data 
third party certainly assume signature authentic nonrepudiation lost 
simmons attack tmn false key attacks protocol failures exploit mathematical properties underlying algorithms 
failures quite subtle interesting example attack simmons tmn scheme tmn 
users want set session key trusted server doing users smartcards 
alice bob users trusted server sam factor protocol goes follows gamma 
mod gamma 
mod gamma 
phi party chooses random number cubes sends sam 
factor extract cube roots xor random numbers send result alice 
idea alice bob shared secret key 
simmons pointed charlie david conspire david just generates predictable random number charlie get hold way simm gamma 
mod gamma 
mod gamma 
phi lessons learned trust secrecy people secrets careful signing decrypting data oracle opponent 
difference decryption signature nonrepudiation complicated fact signature decryption operation rsa people mental model public key cryptography 
quite different semantics decryption simulated signature 
mean opponent exhibit ciphertext decryption meaningful message exhibit meaningful message signature seen previously 
consider example protocol suggested woo lam wl gamma 
gamma 
cb gamma 
fa gamma 
fna gks gamma 
ca kab gamma gkb gamma 
kab gamma gamma 
number problems protocol including obvious bob assurance freshness check nonce see timestamp 
subtler serious problem alice signs secret decrypt message sent bob 
consequence bob prove alice presence prove outsider easily simulated entire protocol run 
effect details beliefs third parties interesting difficult features public key protocols standards provide robust nonrepudiation mechanism real risk may 
careful entities distinguished 
particular careful mean bob 
may controls bob signing key may controls bob decryption key 
keys written kb gamma standard notation despite subtly different effect 
avoid key different purposes careful distinguish different runs protocol 
examples attacks public key protocols see 
saved 
described crypto protocols design problem programming satan computer network control adversary possibly computer build 
may give answers subtly maliciously wrong inconvenient possible moment 
seen light surprising protocols turned contain serious errors errors took long time discover twelve years bug denning sacco seventeen years attack needham schroeder 
hard simulate behaviour devil check protocol commit old familiar sins comes new twist 
natural ask saved 
circumstances say positive things crypto protocol 
possible prove protocol correct 
protocol verification logics attempts reduce security claims specific protocols intractability problem factoring strength underlying encryption algorithm predicated 
systematic approach involved modal logic burrows abadi needham 
series rules believes shares key sees message encrypted believe said believes message fresh believes said believe believes rules applied protocols essentially tries follow back chains belief freshness key shared finds flaw concludes proper assumptions believe authentication goal met 
full details seen ban 
logic looks done making assumptions freshness 
application systems electronic banking question said said example electronic equivalent bill exchange 
curiously public key algorithms mathematics shared key algorithms public key protocols proved harder deal formal methods 
example encryption signature 
easy principle normally sign letter put envelope putting unsigned letter envelope signing flap 
intuitively clear practice recipient evidential force expect normal letter possess 
encryption signature cause serious problems formal verification 
ban logic logic fooled complex tools try deal algorithm properties discussed kmm able deal key spoofing attacks 
curious thing formal methods gains come early 
ban logic simple number protocols analyse 
attempts build complex logics met mixed success problems ranging inconsistent axiom schemes sheer difficulty computation rules choose 
ban logic far belt 
experience logic lies formalising protocol 
done usually pretty obvious bug 
benefit brings forcing think clearly going intrinsic mathematical leverage 
robustness principles approach try encapsulate experience bad practice rules thumb help designers avoid pitfalls equally help attackers find exploitable errors 
number examples text clear security goals assumptions clear purpose encryption secrecy authenticity binding producing pseudorandom numbers 
assume synonymous security careful ensure temporal succession association identity principal essential meaning message mentioned explicitly message sure include redundancy careful protocol unexamined assumption properties underlying cryptographic algorithm signature affixed encrypted data assume signer knowledge data 
third party certainly assume signature authentic nonrepudiation lost trust secrecy people secrets careful especially signing decrypting data oracle opponent confuse decryption signature sure distinguish different protocol runs 
means complete list comprehensive analyses desirable protocol properties 
experience shows approaches formal proofs structured design rules complementary led wonder overarching principle underlies success formal methods crypto protocol context points instances 
propose explicitness principle robust security explicitness 
cryptographic protocol necessary naming typing freshness information explicit messages designers explicit starting assumptions goals algorithm properties attack 
discussed greater detail ande 
going sloppy expression truths self evident liable day proved theorems 
matter educating call commonsense 
commonsense misleading contradictory 
example consider adhere kiss principle keep simple stupid 
erroneous protocol design appears consequence trying minimise amount cryptographic computation done omitting names principals order shorten encrypted parts messages 
description optimisation act replacing works works cheaper 
resolving conflicts intuition goals research robustness principles formal methods useful provide small amount support need order commonsense take rest way 
tried give accessible complex fascinating world cryptographic protocols 
trying program computer control intelligent malicious opponent challenging tasks computer science programs lines turned contain errors discovered decade 
basically approaches problem 
uses formal methods typically involves manipulation statements believes believes key 
techniques helpful led discovery large number flaws tackle protocols verify break 
complementary approach develop series rules thumb guide practice away bad 
claim robustness principles necessary sufficient just useful formal methods help educate intuition 
way important appears explicitness means example smartcard satellite tv set top box say key decode signal received random challenge response key smith authorised decode clock news decoder number th june 
wider relevance 
system engineering assume computer program probably fairly bad 
may helpful consider case computer thoroughly wicked particularly developing fault tolerant systems trying find robust ways structure programs encapsulate code 
words black art programming satan computer may give insights commonplace task trying program murphy 
ande rj anderson second generation electronic wallet computer security esorics springer lncs ande rj anderson cryptosystems fail communications acm november pp ab rj anderson sj cryptographic credit control metering systems ieee symposium security privacy pp abadi rm needham prudent engineering practice cryptographic protocols dec src research report june rj anderson rm needham robustness principles public key protocols crypto appear ban burrows abadi rm needham logic authentication proceedings royal society london pp earlier version published dec src research report ccitt ccitt iso directory authentication framework ccitt blue book geneva march dh diffie hellman new directions cryptography ieee transactions information theory november reasoning accountability protocols electronic commerce ieee symposium security privacy pp kuhn kuhn private communication kmm kemmerer meadows millen systems cryptographic protocol verification journal cryptology spring pp lewis rob bank way sunday telegraph th april lowe lowe attack needham schroeder public key authentication protocol preprint may black book university press ns rm needham schroeder encryption authentication large networks computers communications acm dec pp rsa rl rivest shamir adleman method obtaining digital signatures public key cryptosystems communications acm feb pp schn schneier applied cryptography john wiley 
simm gj simmons cryptanalysis protocol failures communications acm november pp tmn db newman key distribution protocol digital mobile communication systems advance cryptology crypto springer lncs pp wl woo ss lam authentication distributed systems ieee computer january pp hut story breaking codes mcgraw hill ross anderson learned program ibm 
worked computer security years starting commercial applications senior research associate cambridge university computer laboratory 
interests centre performance reliability security systems 
roger needham learned program 
head cambridge university computer laboratory interested distributed systems 
number contributions computer security years working cryptographic protocols 
inventors burrows abadi needham logic busy elucidating nature robustness context security protocols 
article processed macro package llncs style 
