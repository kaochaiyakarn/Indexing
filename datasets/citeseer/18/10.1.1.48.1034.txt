multiframe model real time tasks mok chen department computer sciences university texas austin austin tx cs utexas edu known periodic task model liu layland assumes worst case execution time bound task may pessimistic worst case execution time task longer average 
give multiframe real time task model allows execution time task vary instance specifying execution time task terms sequence numbers 
investigate schedulability problem model preemptive fixed priority scheduling policy 
show significant improvement utilization bound established model 
supported office naval research number 
known periodic task model liu layland assumes worst case execution time bound task 
reasonable assumption process control type real time applications may overly conservative situations average case execution time task significantly smaller worst case 
case critical ensure completion task deadline worst case execution time price excess capacity 
approaches considered better system resources substantial excess capacity 
example algorithms developed schedule best effort tasks resources unused hard real time periodic tasks aperiodic task scheduling studied extensively different aperiodic server algorithms developed schedule periodic tasks 
imprecise computation model system schedule desired computation 
investigated adaptive scheduling model timing parameters real time task may parameterized 
mentioned addresses real time tasks execution time task may vary greatly follows known pattern 
propose multiframe task model takes account execution time patterns shall show better schedulability bounds obtained 
multiframe model execution time task specified finite list numbers 
repeating list periodic sequence numbers generated execution time instance frame job task bounded corresponding number periodic sequence 
consider example 
suppose computer system track vehicles registering status vehicle time units 
get complete picture computer takes time units perform tracking execution computer utilized 
suppose addition computer required execute routine task takes time unit task executed time units 
obviously computer handle tasks 
routine tracking schedule vehicle tracking system tracking task relaxed requires time unit execute period computer able perform tracking routine tasks see timing diagram 
solution obtained model worst case execution time tracking task periodic task set model component pair execution time second period 
task set utilization factor 
notice replace tracking task pair periodic tasks scheduler may defer execution task execution extends past interval fact finished time 
shall investigate schedulability tasks multiframe task model preemptive fixed priority scheduling policy 
generality allow tasks sporadic periodic 
sporadic task requests may occur periodically minimum separation successive requests task 
periodic task limiting case sporadic task requests arrive maximum allowable rate 
shall establish utilization bounds model shown subsume result 
obtain results require execution times multiframe tasks satisfy fairly liberal constraint 
seen schedulability bounds improved substantially large variance peak non peak execution time task 
multiframe model safely admit real time tasks model 
organized follows 
section presents multiframe real time task model multiframe task model defines terminology prove basic results scheduling multiframe tasks 
section investigates schedulability bound fixed priority scheduler multiframe model 
section 
multiframe task model rest shall assume time values domain set non negative real numbers 
timing parameters definitions non negative real numbers 
results hold domain time non negative integers 
definition multiframe real time task tuple gamma gamma array execution times gamma minimum separation time ready times consecutive frames requests time units apart 
execution time ith frame task gamma mod deadline frame ready time 
example multiframe task minimum separation time 
execution time alternates 
separation consecutive ready times ready time frame task time task reduces periodic task 
proofs follow shall associate multiframe task gamma element periodic task model execution time period minimum separation multiframe task 
example task execution time corresponding task 
shall call periodic task model task confusion shall call multiframe task simply task 
consider task gamma execution time 
max gamma shall call peak execution time task shall call pair multiframe task model corresponding task multiframe task definition set tasks ft call sigma peak utilization factor call sigma sigma gamma delta maximum average utilization factor scheduling policy call utilization bound task set note utilization factor corresponding task set 
example consider task set ft corresponding task set peak utilization factor 
maximum average utilization factor 
pessimistic way analyze multiframe task set consider schedulability corresponding task set 
may result rejecting task sets 
example task set example rejected model fixed priority scheduler rma rate monotonic assignment shall show 
definition respect scheduling policy task set said fully utilizing processor increasing execution time frame task result modified task set note greatest lower bound fully utilizing task sets respect scheduling policy lemma scheduling policy 
multiframe task model proof 
shall prove contradiction 
suppose larger arbitrarily form task set gamma gamma gamma sigma peak execution time sigma peak frames tasks start time finished scheduler violates definition exceed 
qed 
lemma suppose scheduling policy schedule multiframe task sets 
utilization bound multiframe task sets 
utilization bound corresponding task sets proof 
proof contradiction 
consider task set size suppose set 
corresponding task set utilization factor 
suppose ith frame task deadline time task locate time point ready time latest frame transform ready time pattern follows 
interval push ready times frames separation times consecutive frames equal set execution times peak execution time 
gamma add peak frames maximum rate interval transformed ready time pattern stringent original case 
ith frame misses deadline 
transformed case ready time pattern contradiction qed 
inequality lemma strict 
intuitively task set larger frame frame variance execution times tasks set task set 
variance sufficiently big scheduling policy admit tasks 
quantified determining utilization bound task model 
shall show establish exact bound execution times tasks fixed priority scheduling satisfy liberal restriction 
definition maximum array execution times gamma 
array said am monotonic sigma mod sigma mod gamma gamma 
task gamma said am array execution times am 
intuitively am task task total execution time sequence frames largest size frame sequences frame sequence frame peak execution time 
instance tasks example am 
note tasks multimedia applications usually satisfy restriction 
section assume tasks satisfy am property 
seen loss generality assume component array execution time task peak execution time fixed priority scheduling section shall show preemptive fixed priority scheduling policy multiframe task model higher utilization bound model consider execution time variance explicitly 
utilization bound model theorem cited 
theorem theorem task sets size utilization bound preemptive fixed priority policy gamma 
definition critical instance multiframe task period peak execution time requested simultaneously peak execution times higher priority tasks higher priority tasks request execution maximum rate 
fixed priority scheduling theorem preemptive fixed priority scheduling policy multiframe task critical instance 
proof 
suppose task gamma critical instance 
shall prove frames regardless ready times 
prove frame 
ready time frame finishes trace backward time time locate point higher priority tasks executed 
exists time task scheduled 
pretend frame ready time finish time shift ready time pattern higher priority task frame ready ready postpone finish time frame point earlier say words higher priority task shift ready time frame time separation consecutive frames minimum separation time 
postpone finish time frame earlier say words shift higher priority tasks frames peak frame starts gamma am shifting effect postponing finish time construction resulting request pattern critical instance critical instance gamma gamma means frame 
prove frames 
done induction 
induction base case frame 
induction step suppose frames 
consider th frame apply argument 
suppose frame starts time finishes trace backward time line hit point higher priority tasks executed 
exists higher priority task executed finish time ith frame 
th frame start time finish time shift requests higher priority task frame starts fixed priority scheduling starts postpone finish time th frame point time earlier say higher priority task shift ready time frame time separation time consecutive frames minimum separation time task 
postpone finish time th frame earlier say words higher priority tasks shift frames peak frames start gamma am finish time th frame case critical instance critical instance gamma gamma means th frame 
proved theorem 
qed 
shall say task passes critical instance test critical instance 
corollary task set fixed priority scheduler tasks pass critical instance test 
assume loss generality peak execution time task affecting schedulability task set 
replace task peek execution time frame execution time array obtained rotating array peek execution time argument proof theorem clear task replacement affect result critical instance test 
example task set rate monotonic assignment 

tasks pass critical instance test 
corresponding task set fixed priority assignment 
example task set utilization factor obviously scheduling policy 
requirement task relaxed fixed priority scheduling frame needs time unit task set rma 
relaxed case multiframe task set passes critical instance test 
example specifies vehicle tracking system mentioned 
argument establish schedulability 
examples show total peak utilization exceeds task set may schedulable 
course average utilization larger 
complexity test corollary biggest period 
theorem feasible priority assignment exists multiframe task set rate monotonic priority assignment feasible task set 
proof 
suppose feasible priority assignment exists task set 
tasks adjacent priority assignment higher priority 
suppose interchange priorities difficult see resultant priority assignment feasible checking critical instances 
rate monotonic priority assignment obtained priority ordering finite sequence pairwise priority reordering 
qed 
compute utilization bound need lemma 
definition psi ff denote minimum expression sigma gamma gamma ff delta gamma subject constraint ff delta ff 
lemma psi ff delta ff gamma proof 
substitution log log ffp pn compute psi ff fixed priority scheduling minimize sigma gamma subject sigma log ff strictly convex problem 
unique critical point absolute minimum 
symmetry minimization problem variables means equal solution 
log ff psi ff sigma gamma sigma log ff gamma delta ff gamma 
qed 
definition task set said extremely utilizing processor increasing peak execution time lowest priority task amount result task set 
shall denote greatest lower bound extremely utilizing task sets 
important note distinction fully utilizing extremely utilizing task sets 
crucial proof lemma lemma 
lemma consider task sets size satisfying restriction min 
delta delta gamma 
proof 
theorem theorem need consider case tasks start time request maximum rates 
rate monotonic priority assignment check interval time know involved critical instance tests 
utilization bound corresponds case equals increase changing increasing take cpu time 
proof assume ratios equal extremely utilizing task set shall prove claims 
claim second request finished fixed priority scheduling suppose ffi scheduled derive new task set changing execution times gamma ffi delta gamma ffi ffi delta ffi arbitrarily reducing execution times maintain am property execution time arrays 
easy show schedulable extremely utilizes processor 
gamma gamma ffi delta delta gamma contradicts assumption minimum extremely utilizing task set 
second request completed claim 
derive new task set changing execution times arbitrarily reducing execution times maintain am property execution time arrays 
delta delta fixed priority scheduling easy check extremely utilizes processor 
gamma gamma gamma delta delta delta contradicts assumption minimum 

claim 
finished proving claim prove equivalent claim consider extreme utilizing task set satisfying claim claim 
part finishes 
correspond minimal case 
claim derive new task set changing execution times arbitrarily reducing execution times maintain am property execution time arrays 
delta ffi ffi gamma ffi gamma ffi suppose smallest value satisfying 
claim claim second requests tasks scheduled gamma know requests tasks scheduled extremely utilizes cpu know part scheduled larger scheduled guarantees new task set extremely utilizes cpu 
fixed priority scheduling gamma gamma ffi gamma delta task set minimal case 
establishes claim 
claim 
second request completed exactly time second request completes ahead processor idle completion time shows extremely utilize processor 
true 
ffi second request completes derive new task set changing execution times arbitrarily reducing execution times maintain am property execution time arrays 
gamma delta ffi gamma ffi delta ffi ffi easy check schedulable extremely utilizes process 
gamma gamma delta ffi delta gamma fixed priority scheduling contradicts assumption minimum 
second request completed exactly time claims lemma conclude min delta psi delta psi delta delta gamma 
qed lemma min 
task sets size delta delta gamma 
proof 
assume equals tasks request maximum rate 
task extremely utilizing task set delta 
replace delta gamma increase amount needed extremely utilize processor 
increase smaller delta gamma 
old new utilization factors respectively 
gamma delta gamma delta gamma delta gamma delta conclude minimum utilization occurs task sets longest period larger twice shortest period 
establishes lemma 
qed theorem min 
task sets size utilization bound delta delta gamma 
proof 
definition upper bound minimum task sets size ranging min delta delta gamma delta delta gamma 
qed observe liu layland theorem special case theorem frame separation time equals period 
tables summarize relative advantage multiframe model model determining set task 
column ul gives utilization bound model 
fixed priority scheduling ul table utilization bound percentage improvement research table shows percentage improvement bound liu layland bound 
specifically table entries denote ul gamma different combination ratio peak execution time execution time second frame number tasks task set 
example suppose system capable processing gigabyte data second set tasks needs process megabyte data second 
utilization bound ln allow tasks 
theorem allow tasks improvement 
increases bound improvement increases 
simple calculation shows bound 
says model excels execution time task varies sharply 
interesting compare maximum average utilization bound 
maximum average utilization factor may arbitrarily low maximum utilization factor high 
simple example take average frames task 
table calculate ratio biggest possible maximum average utilization factor liu layland bound 
table shows maintain system utilization task execution time varies 
research give multiframe model real time tasks amenable specifying tasks execution time varies instance 
model execution times successive instances task specified finite array numbers single number worst case execution time classical liu layland model 
new model derive utilization bound preemptive fixed priority scheduler assumption execution time array tasks satisfies am accumulative research ul table ratio maximum average bound monotonic property 
property liberal consistent common encoding schemes multimedia applications execution times array dominates 
show significant improvement utilization bound liu layland model results model 
useful dynamic applications number tasks vary merit resource allocation number tasks system admit causing timing failures 
way apply model real life applications video stream scheduling reported 
liu james layland scheduling algorithms multiprogramming time environment journal acm vol 
january 
mok fundamental design problems distributed systems hard real time environment ph thesis mit tei wei kuo mok load adjustment adaptive real time systems ieee th real time systems symposium december 
lehoczky sha ding rate monotonic scheduling algorithm exact characterization average case behavior proceedings ieee real time system symposium oh son assigning real time tasks homogeneous multiprocessor systems technical report cs university virginia computer science department january jay john lehoczky lui sha server algorithm enhanced aperiodic responsiveness hard real time environments ieee transactions computers vol 
january burns welling dual priority assignment practical method increasing processor utilization proceedings fifth euromicro workshop real time systems oulu pp 
baker aperiodic servers deadline scheduling environment realtime systems vol 
july sha lehoczky aperiodic task scheduling hard real time systems real time systems international journal time critical computing systems vol 
pp 
jen yao chung liu jay lin scheduling periodic jobs allow imprecise results ieee transactions computer vol 
september 
