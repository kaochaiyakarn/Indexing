aus den fur betriebswirtschaftslehre der universitat kiel experimental evaluation state art heuristics resource constrained project scheduling problem hartmann kolisch september invited informs spring conference may hartmann dr rainer kolisch lehrstuhl fur und institut fur betriebswirtschaftslehre christian universitat zu kiel 
kiel germany email hartmann bwl uni kiel de kolisch bwl uni kiel de url www uni kiel de prod hartmann html www uni kiel de prod kolisch html ftp ftp uni kiel de pub operations research resource constrained project scheduling problem rcpsp stated follows 
single project consists activities activity processed order complete project 
fictitious activities correspond project start project respectively 
activities interrelated kinds constraints 
precedence constraints force activity started immediate predecessor activities finished 
second performing activities requires resources limited capacities 
altogether set resource types number resource types 
processed activity requires units resource type time instant non preemptable duration resource type limited capacity point time 
parameters assumed non negative deterministic project start activities objective rcpsp find precedence resource feasible completion times activities makespan project minimized 
advent rcpsp interest practitioners researchers 
years witnessed tremendous increase research rcpsp terms heuristic optimal procedures 
refer surveys provided ozdamar ulusoy herroelen kolisch padman brucker 
kolisch hartmann specific overview heuristics rcpsp 
focuses building blocks schedule generation schemes priority rules schedule representations operators search strategies way building blocks combined methods pass methods single pass methods multi pass methods sampling procedures different type metaheuristics simulated annealing genetic algorithms tabu search 
follow study provides depth investigation performance rcpsp heuristics 
give detailed performance heuristics provide explanations performance 
observations subsequently give recommendations directions research efforts 
proposed heuristics section gives short survey tested heuristics 
start description schedule generation schemes exception baar core building block procedures 
schedule generation schemes schedule generation schemes sgs start scratch build feasible schedule stepwise extension partial schedule 
partial schedule schedule subset activities scheduled 
different sgs available distinguished activity time incrementation 
called serial sgs performs activity incrementation called parallel sgs performs time incrementation 
give brief non technical description sgs 
details cf 
kolisch hartmann 
serial schedule generation scheme list scheduling 
serial sgs consists stages non dummy activity selected eligible set scheduled earliest precedence resource feasible completion time 
eligible set comprises unscheduled activities eligible scheduling predecessor activities scheduled 
time complexity serial sgs delta cf 
pinson 
serial sgs generates active feasible schedules resource unconstrained scheduling problem optimal cf 
kolisch 
active schedules property activities started earlier delaying activity cf 
sprecher 
scheduling problems regular performance measure definition cf 
sprecher makespan minimization optimal solution set active schedules 
serial sgs exclude optimal schedules priori 
variant serial sgs list scheduling 
activities project ordered list hj denotes activity list position list precedence feasible activity network predecessors list predecessors cf 
hartmann 
activities scheduled order list earliest precedence resource feasible start time 
special case serial sgs list scheduling properties serial sgs 
generates active schedules list list scheduling generate optimal schedule regular measure performance considered 
parallel schedule generation scheme 
parallel sgs time incrementation 
iteration schedule time set eligible activities 
activity eligible precedence resource feasibly started schedule time 
activities chosen eligible set started schedule time eligible activities left 
scheduling scheme steps schedule time earliest finish time activities process 
time complexity parallel sgs delta 
parallel sgs generates precedence resource feasible non delay schedules optimal resource unconstrained case cf 
kolisch 
non delay schedule schedule activity preemption allowed activities started earlier delaying activity cf 
sprecher 
set non delay schedules subset set active schedules 
average smaller cardinality 
severe drawback contain optimal schedule regular performance measure 
kolisch shown known instance set instances optimal solutions set non delay schedules 
parallel sgs exclude optimal solution priori 
pass methods pass methods known priority rule heuristics employ sgs order construct schedules 
dependant schedules generated distinguish single pass methods multi pass methods 
time schedule generated pass methods start scratch considering knowledge previously generated solutions 
order select stage generation procedure activity consequently scheduled priority rule employed 
defined mapping assigns activity eligible set value objective stating activity large small value desired 
single pass methods 
single pass heuristics select iteration activity maximizes minimizes value 
case ties tie breaking rules employed 
simple way resolve ties choose activity smallest activity label 
overwhelming amount research priority rules rcpsp extensive survey kolisch hartmann 
computational analysis selected priority rules shown favourable results experimental studies alvarez vald es tamarit davis patterson kolisch lft latest finish time wcs worst case slack 
lft known priority rule 
wcs introduced kolisch parallel scheduling scheme 
rule calculates activity slack remains worst case selected current iteration 
multi pass methods 
possibilities combine sgs priority rules multi pass method 
common ones kolisch hartmann multi priority rule methods cf 
ulusoy ozdamar thomas forward backward scheduling methods cf 
li willis ozdamar ulusoy sampling methods cf 
alvarez vald es tamarit cooper kolisch 
multi priority rule methods employ sgs times 
time different priority rule 
forward backward scheduling methods employ sgs order iteratively schedule project alternating forward backward scheduling 
approaches considered study 
sampling methods generally sgs priority rule 
different schedules obtained biasing selection priority rule random device 
addition priority value selection probability computed 
dependent probabilities computed distinguished random sampling biased random sampling regret biased random sampling cf 
kolisch 
random sampling rs assigns activity eligible set probability 
biased random sampling brs cf 
alvarez vald es tamarit cooper employs priority values directly order obtain selection probabilities 
objective priority rule select activity largest priority value probability calculated dividing priority value activity consideration sum priority values eligible activities 
regret biased random sampling uses priority values indirectly regret values 
objective select activity largest priority value regret value absolute difference priority value activity consideration worst priority value activities eligible set 
calculating selection probabilities regret values modified adding ffl 
assures activity eligible set selection probability greater zero schedule population generated 
schirmer propose variant ffl determined dynamically 
called adaptive proposed kolisch drexl schirmer 
essence adaptive sampling select sgs priority rule way selection probabilities calculated characteristics problem instance hand 
refer characteristics number activities resource strength resource factor henceforth problem parameters cf 
subsection 
method kolisch drexl applies serial sgs lft priority rule parallel sgs wcs priority rule employing deterministic regret sampling activity selection 
decision specific method analysis problem hand number iterations performed 
schirmer extended approach employing schedule generation schemes different priority rules different sampling schemes variant 
metaheuristic approaches metaheuristic strategies genetic algorithms simulated annealing tabu search applied solve hard combinatorial optimization problems 
subsection briefly describe metaheuristic approaches rcpsp computational study 
heuristic mention underlying representation method produce initial solution operator generate new solutions existing ones 
detailed representations operators refer kolisch hartmann 
includes description metaheuristic algorithms rcpsp considered experimental analysis 
baar develop tabu search ts algorithms 
analysis approach called schedule scheme representation tested 
schedule scheme consists disjoint relations 
relations specify activities precedence related conjunctions may processed parallel disjunctions processed parallel relations subject restrictions flexibility relations 
schedule scheme represents necessarily feasible schedules relations maintained 
order transform current schedule scheme schedule baar employ decoding procedure constructs feasible schedule conjunctions disjunctions large number relations schedule scheme satisfied 
neighborhood definition moves transform flexibility relations relations relations flexibility relations 
neighborhood size reduced critical path calculation impact estimations moves 
tabu search procedure uses dynamic tabu list priority rule start heuristics 
propose simulated annealing sa procedure 
solution represented activity list assumed precedence feasible activity appear list predecessors cf 
subsection 
decoding procedure serial sgs 
current activity list neighbor activity list neighbor solution obtained applying called shift operator 
operator selects activity list inserts position resulting activity list precedence feasible 
initial solution constructed priority rule heuristic 
hartmann proposes genetic algorithm ga activity list representation described compares genetic algorithms random key priority rule representations respectively 
representations serial sgs decoding procedure 
random key priority value representation encodes solution vector real numbers th number relates activity random key array transformed schedule successively scheduling activity highest random key eligible activities 
random keys play role priority values 
priority rule representation solution list priority rules 
schedule obtained successively selecting activity set eligible activities 
activity scheduled selected priority rule list 
approaches employ point crossover operators related respective representation 
activity list ga regret biased random sampling method serial sgs lft rule determine initial generation 
leon ramamoorthy introduce local search approaches genetic algorithm 
outperforms heuristics genetic algorithm computational investigation 
employs called problem space representation similar random key representation described 
decoding procedure extended version parallel sgs restrict search space set non delay schedules 
standard point crossover determine generation artificial evolution 
initial random keys computed priority rule 
metaheuristic procedures included study proposed cho kim kohlmorgen lee kim naphade pinson sampson weiss 
computational results test design test instances employed standard sets rcpsp kolisch 
sets consist projects resource types activities respectively 
levels independent problem parameters network complexity resource factor resource strength systematically altered define full factorial experimental design 
network complexity nc defines average number precedence relations activity 
resource factor rf gives average percent different resource types non dummy activity non zero resource demand 
resource strength rs defines scarce resource 
rs value defines capacity resource maximum demand activities rs value defines capacity resource equal demand imposed earliest start time schedule 
levels realized nc rf rs 
set consists projects activities resource types 
full factorial design independent problem parameters nc rf rs 
levels parameters nc rf rs 
heuristics included experimental investigation cf 
subsections deterministic single pass heuristics employed wcs parallel sgs lft parallel serial sgs cf 
kolisch 
methods employed variants cf 
kolisch 
pure random sampling parallel serial sgs cf 
kolisch 
adaptive sampling approaches included due kolisch drexl schirmer 
metaheuristics tested study include schedule scheme ts method baar activity list sa procedure 
furthermore ga methods activity list random key priority rule representation hartmann problem space ga leon ramamoorthy considered 
gives altogether heuristics tested 
algorithm tested author original implementation 
allowed authors adjust parameters order obtain results 
consequence tests performed different computer architectures operating systems 
impose bound computation time provide basis comparison 
limited tested non single pass heuristics number generated evaluated schedules respectively 
decision assumption effort needed generating schedule similar tested heuristics 
exception schedule scheme representation ts approach baar algorithms considered investigation sgs described subsection 
assumption justified 
subsection give observations regarding computation time 
influence project size tables display results computational comparison obtained evaluation schedules respectively 
table heuristics sorted descending performance respect iterations 
table summarizes percentage deviations optimal makespan instance set 
instance sets optimal solutions known measured sets average percentage deviation upper lower bound respectively 
upper bound set lowest makespan tested heuristics lower bound selected critical path lower bound cf 
stinson 
employed lower bound order allow researchers compare results ones obtained study 
lower upper bounds obtained authors request 
set percentage deviations upper lower bounds reported tables respectively 
tables provide respective deviations set 
order detect significant differences heuristic performance iterations heuristic best pairwise comparison wilcoxon signed rank test spss 
significant difference performance level confidence marked star column tables 
best heuristics 
heuristics performed best study sa ga hartmann 
procedure performs best set approach hartmann dominates instance sets larger projects 
set difference procedures significant 
hand procedures significantly outperform heuristics instance set 
comparison metaheuristics pass methods 
generally results show best metaheuristics outperform best sampling approaches 
increasing number generated schedules results stronger superiority metaheuristic results 
mainly sampling procedures generate schedule anew considering information visited solutions metaheuristic algorithms typically exploit knowledge gained previously evaluated schedule 
random sampling benchmark 
included simple sampling procedures eligible activity scheduled selected pure random choice 
note schedule scheme ts heuristic baar additionally run original termination criterion allows trials terminated improved solution iterations 
way deviation upper bound lowered 
iterations algorithm sgs sa activity list ser 
ga activity list ser 
hartmann sampling adaptive ser par 
schirmer ts schedule scheme spec 
baar sampling adaptive ser par 
kolisch drexl single pass sampling lft ser 
kolisch ga random key ser 
hartmann sampling random ser 
kolisch ga priority rule ser 
hartmann single pass sampling wcs par 
kolisch single pass sampling lft par 
kolisch sampling random par 
kolisch ga problem space ext 
par 
leon ramamoorthy table average deviations optimal solution iterations algorithm sgs ga activity list ser 
hartmann sa activity list ser 
sampling adaptive ser par 
schirmer ga priority rule ser 
hartmann sampling adaptive ser par 
kolisch drexl ga random key ser 
hartmann ts schedule scheme spec 
baar single pass sampling lft ser 
kolisch single pass sampling wcs par 
kolisch single pass sampling lft par 
kolisch ga problem space ext 
par 
leon ramamoorthy sampling random par 
kolisch sampling random ser 
kolisch table average deviations best solution project scheduling knowledge contained sgs due knowledge results bad may expect 
random procedures serve benchmarks allow evaluate results improved incorporating project scheduling knowledge 
employing random sampling methods benchmark solutions common evaluation scheduling heuristics cf conway 
generally procedure perform considerably better pure random procedure especially sgs 
results set show genetic algorithms yield higher average deviation optimal makespan respective random sampling procedure sgs 
instance sets random sampling procedures perform worst heuristics iterations considered 
iterations algorithm sgs ga activity list ser 
hartmann sa activity list ser 
ga priority rule ser 
hartmann sampling adaptive ser par 
schirmer single pass sampling lft par 
kolisch single pass sampling wcs par 
kolisch sampling adaptive ser par 
kolisch drexl ga problem space ext 
par 
leon ramamoorthy single pass sampling lft ser 
kolisch ga random key ser 
hartmann sampling random par 
kolisch sampling random ser 
kolisch table average deviations best solution iterations algorithm sgs ga activity list ser 
hartmann sa activity list ser 
sampling adaptive ser par 
schirmer ga priority rule ser 
hartmann sampling adaptive ser par 
kolisch drexl ga random key ser 
hartmann ts schedule scheme spec 
baar single pass sampling lft ser 
kolisch single pass sampling wcs par 
kolisch single pass sampling lft par 
kolisch ga problem space ext 
par 
leon ramamoorthy sampling random par 
kolisch sampling random ser 
kolisch table average deviations critical path lower bound performance metaheuristics 
comparison results obtained metaheuristics shows choice underlying representation crucial 
best procedures different metaheuristic strategies employ activity list representation 
metaheuristic paradigm necessarily lead consistently solutions 
seen results ga hartmann ga leon ramamoorthy 
activity list ga yields best results project sizes outcome random key ga moderate quality set worse set 
performance priority rule ga hand improves increasing project size 
combining priority rules strategy huge search spaces 
shown hartmann exclude optimal solutions search space severe disadvantage small project sizes 
note hartmann reports priority rule ga hardly exploits benefits genetic inheritance 
iterations algorithm sgs ga activity list ser 
hartmann sa activity list ser 
ga priority rule ser 
hartmann sampling adaptive ser par 
schirmer single pass sampling lft par 
kolisch single pass sampling wcs par 
kolisch sampling adaptive ser par 
kolisch drexl ga problem space ext 
par 
leon ramamoorthy single pass sampling lft ser 
kolisch ga random key ser 
hartmann sampling random par 
kolisch sampling random ser 
kolisch table average deviations critical path lower bound performance deterministic single pass heuristics 
instance sets see wcs priority rule parallel sgs performs best followed lft priority rule parallel sgs lft priority rule serial sgs 
line results documented kolisch 
performance sampling methods 
analyzing priority rule sampling procedures observe rules wcs lft give identical results employed parallel sgs 
instance sets significant difference 
hand strong influence sgs explained 
evident sampling capable improving results associated deterministic single pass approaches 
performance adaptive sampling methods 
considering adaptive sampling strategies see approach schirmer outperforms kolisch drexl 
due fact procedure accurate partitioning solution space terms problem parameters 
approach schirmer problem parameters number activities resource factor rf resource strength rs heuristic kolisch drexl employs resource factor 
furthermore adaptive method kolisch drexl tested instances activities design phase 
explains simple non adaptive sampling procedures outperform approach kolisch drexl set 
impact sgs 
lft pure random sampling approach tested serial parallel sgs 
observe strong influence sgs depends problem size serial sgs better choice sampling approaches instance set parallel takes lead set 
result explained follows parallel sgs implies subset active schedules non delay schedules searched 
promising strategy search space huge case set 
set smaller search space possible find optimal solutions small time limits 
restriction non delay schedules disadvantageous may exclude optimal solutions search space serial sgs choice 
similar findings reported kolisch 
computation times 
metaheuristic algorithms activity list representation fastest approaches 
due fact underlying serial sgs activity lists cf 
subsection computes eligible set selects activity basis priority values 
done approaches 
additional effort may arise priority rule methods pass methods metaheuristics priority rule representation 
stage eligible activity priority value calculated dynamic priority rule cf 
kolisch hartmann employed 
biased random sampling approaches spend additional computational effort priority value computation selection probabilities random selection 
consequently heuristics show different computation times constructing number schedules 
order give impression computation times occurred study mention computation times obtained pentium computer mhz linux operating system 
activity list ga needs average seconds computing schedules set 
lft sampling method serial sgs needs seconds priority rule ga requires seconds 
considering set time needed activity list ga compute schedules increases seconds 
note linear relationship number activities computation times cf 
complexity statements subsection 
instance set heuristic computing schedules takes approximately times longer computing 
observation reasoned fact schedule construction requires far computational effort components heuristics selection operator ga influence problem parameters order assess influence problem parameters resource strength resource factor network complexity performed tested heuristic multi variate linear regression analysis 
employed average deviation optimal solution iterations benchmark set dependent variable problem parameters independent variables 
table provides method resulting value constant const coefficient problem parameter 
value indicates coefficient significant level confidence star indicates coefficient significant level confidence 
resulting values range 
indicates problem parameters explain variance parameters allow predict performance heuristic specific project instance 
interesting observations 
const values significant level confidence 
low const value goes average heuristic performance high const value indicates average poor performance 
best const values obtained activity list approaches hartmann having slightly better const value 
worst const value due random sampling parallel sgs 
significant nc coefficients negative indicating increasing nc level average algorithm sgs const nc rs rf sa activity list ser 
ga activity list ser 
hartmann ts schedule scheme spec 
baar sampling adaptive ser par 
kolisch drexl sampling lft ser 
kolisch ga random key ser 
hartmann sampling random ser 
kolisch ga priority rule ser 
hartmann sampling wcs par 
kolisch sampling lft par 
kolisch sampling random par 
kolisch ga problem space ext 
par 
leon ramamoorthy table results multivariate regression performance heuristics increases 
confirms findings kolisch 
explanation precedence relations activities lower number possible activity sequences size solution space 
influence network complexity low 
highest coefficient obtained random sampling serial sgs 
narrower shape project network smaller set eligible activities risk randomly selecting activity leads poor schedule 
rs coefficients highly significant range ga activity list hartmann ga priority rule list hartmann 
negative sign coefficients reasoned fact higher rs levels assign resource capacity problems easier 
coefficient indicates sensitive performance heuristics terms resource problem 
insensitive heuristics activity list approaches hartmann 
analysis rf coefficients separated 
coefficients serial sgs approaches positive highly significant ones parallel sgs approaches non significant negative level confidence 
performance serial sgs heuristics negatively affected increasing density resource demand array performance parallel sgs heuristics slightly positive affected 
observation originally pass heuristics kolisch 
explanation high resource density arrays serial sgs capable building compact schedules activities put close 
contrary parallel sgs generating non delay schedules inherently build compact schedules 
focus effect resource strength rs resource factor rf 
tables display average deviations optimal makespan iterations parameter setting set respectively 
procedures average deviation decreases monotonically increasing resource strength declining resource availability confirming results obtained multivariate regression 
rs problems resource unconstrained allowing heuristic find optimal solution 
observe ga hartmann yields better results sa procedure hard instances low rs value performs better moderately resource constrained problems 
analyzing performance heuristics resource rs algorithm sgs sa activity list ser 
ga activity list ser 
hartmann ts schedule scheme spec 
baar sampling adaptive ser par 
kolisch drexl sampling lft ser 
kolisch ga random key ser 
hartmann sampling random ser 
kolisch ga priority rule ser 
hartmann sampling wcs par 
kolisch sampling lft par 
kolisch sampling random par 
kolisch ga problem space ext 
par 
leon ramamoorthy table average deviations optimal solution resource strength rf algorithm sgs sa activity list ser 
ga activity list ser 
hartmann ts schedule scheme spec 
baar sampling adaptive ser par 
kolisch drexl sampling lft ser 
kolisch ga random key ser 
hartmann sampling random ser 
kolisch ga priority rule ser 
hartmann sampling wcs par 
kolisch sampling lft par 
kolisch sampling random par 
kolisch ga problem space ext 
par 
leon ramamoorthy table average deviations optimal solution resource factor factor see low rf value procedures serial sgs perform better parallel 
line multivariate regression results 
summary guidance research findings give recommendations development improvements project scheduling heuristics 
successful approaches numerical evaluation metaheuristics simulated annealing procedure genetic algorithm hartmann 
priority rule sampling methods indispensable construct initial solutions metaheuristics 
research directions sampling metaheuristics remain promising field research 
metaheuristics procedures activity list representation performed best 
underlying metaheuristic strategy influential representation genetic algorithm simulated annealing approach share top ranks analysis 
indicates development new representations may interesting incorporation existing representations metaheuristic strategies 
mentioned best heuristics computational analysis metaheuristics activity list representation serial sgs 
experiences sampling methods show parallel sgs outperforms serial larger problems 
question arises pay develop variant parallel sgs activity lists 
possibly lead improved metaheuristics large problems 
adaptive sampling methods may outperform simple sampling approaches 
key success appropriate partitioning solution space terms problem parameters number activities resource factor resource strength 
equally important consideration possibly relevant parameter settings designing adaptive method 
keep mind proposed adaptive sampling procedures adapted test instances designer fixed incapable learning previously evaluated schedules 
inferior metaheuristics inherent property learning self adaptation 

indebted baar peter brucker university kamel henri university li ege jorge leon balakrishnan ramamoorthy texas university andreas schirmer sven university kiel help research 
furthermore andreas drexl continuous support 
alvarez vald es tamarit 
algoritmos heur en de con 

alvarez vald es tamarit 
heuristic algorithms resource constrained project scheduling review empirical analysis 
lowi nski editors advances project scheduling pages 
elsevier amsterdam 
baar brucker 
tabu search algorithms resource constrained project scheduling problem 
technical report zur mathematik fachbereich mathematik informatik 

efficient multi heuristic procedures resource constrained project scheduling 
european journal operational research 

new efficient simulated annealing algorithm resource constrained project scheduling problem 
technical report service de universit de li ege 
brucker drexl mohring neumann pesch 
resource constrained project scheduling notation classification models methods 
european journal operational research appear 

cho 
kim 
simulated annealing algorithm resource constrained project scheduling problems 
journal operational research society 
conway maxwell miller 
theory scheduling 
addison wesley massachusetts 
cooper 
heuristics scheduling resource constrained projects experimental investigation 
management science 
davis patterson 
comparison heuristic optimum solutions resource constrained project scheduling 
management science 
hartmann 
competitive genetic algorithm resource constrained project scheduling 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
naval research logistics appear 
herroelen demeulemeester de resource constrained project scheduling survey developments 
computers operations research 
appear 

project scheduling problems survey 
international journal operations production management 
kohlmorgen haase 
experiences fine grained parallel genetic algorithms 
annals operations research 
kolisch 
project scheduling resource constraints efficient heuristics problem classes 
physica heidelberg 
kolisch 
efficient priority rules resource constrained project scheduling problem 
journal operations management 
kolisch 
serial parallel resource constrained project scheduling methods revisited theory computation 
european journal operational research 
kolisch drexl 
adaptive search solving hard project scheduling problems 
naval research logistics 
kolisch hartmann 
heuristic algorithms resource constrained project scheduling problem classification computational analysis 
editor handbook advances project scheduling 
kluwer amsterdam appear 
kolisch padman 
integrated survey project scheduling 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
kolisch schwindt sprecher 
benchmark instances project scheduling problems 
editor handbook advances project scheduling 
kluwer amsterdam 
kolisch sprecher drexl 
characterization generation general class resource constrained project scheduling problems 
management science 

lee 
kim 
search heuristics resource constrained project scheduling 
journal operational research society 
leon ramamoorthy 
strength adaptability problem space neighborhoods resource constrained scheduling 
spektrum 

li willis 
iterative scheduling technique resource constrained project scheduling 
european journal operational research 
naphade wu storer 
problem space search algorithms resource constrained project scheduling 
annals operations research 

spss guide data analysis 
spss chicago 
ozdamar ulusoy 
survey resource constrained project scheduling problem 
iie transactions 
ozdamar ulusoy 
note iterative forward backward scheduling technique procedure li willis 
european journal operational research 
pinson prins 
tabu search solving resource constrained project scheduling problem 
proceedings 
international workshop project management scheduling pages leuven 
sampson weiss 
local search techniques generalized resource constrained project scheduling problem 
naval research logistics 
schirmer 
case reasoning improved adaptive search project scheduling 
technical report aus den fur betriebswirtschaftslehre der universit kiel 
schirmer 
parameterized heuristics project scheduling biased random sampling methods 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
sprecher kolisch drexl 
semi active active non delay schedules resource constrained project scheduling problem 
european journal operational research 
stinson davis 
multiple resource constrained scheduling branch bound 
transactions 
thomas 
investigation relationship heuristic performance network resource characteristics 
journal operational research society 
ulusoy ozdamar 
heuristic performance network resource characteristics resource constrained project scheduling 
journal operational research society 
