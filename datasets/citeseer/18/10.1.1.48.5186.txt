empirical measurements allocation intensive programs benjamin zorn dirk grunwald department computer science campus box university colorado boulder cu cs july xi university colorado boulder technical report cu cs department computer science campus box university colorado boulder colorado copyright fl benjamin zorn dirk grunwald department computer science campus box university colorado boulder empirical measurements allocation intensive programs benjamin zorn dirk grunwald department computer science campus box university colorado boulder july dynamic memory management important part large class computer programs high performance algorithms dynamic memory management continue considerable interest 
presents empirical data collection programs 
extensive statistics allocation behavior programs measured including distributions object sizes lifetimes interarrival times 
data valuable reasons data programs design highperformance algorithms dynamic memory management 
second programs benchmark test suite evaluating comparing performance different dynamic memory management algorithms 
data gives readers greater insight storage allocation patterns broad range programs 
data abbreviated version extensive statistics publically available internet 
presents empirical data allocation behavior allocation intensive programs 
data describes distributions objects sizes holding times interarrival times programs measured 
data valuable designers dynamic memory management dmm algorithms reasons ffl long observed tailoring dmm algorithm observed empirical behavior programs results efficient algorithm 
data programs provides designers specific information allocation behavior broad class unix programs 
ffl data specifically allocation behavior programs rarely published 
ffl programs measured study provide dmm algorithm designers test suite allocation intensive programs fairly compare alternative dmm algorithms 
programs purpose 
ffl data provides readers insight allocation behavior broad class programs 
insight may help reader understand trade offs dmm implementations including relative advantages disadvantages automatic memory management techniques garbage collection 
material supported national science foundation 
ccr ccr cda cfrac cfrac program factor large integers continued fraction method 
input digit number product primes 
espresso espresso version logic optimization program 
input file larger example inputs provided release code cps 
ghostscript ghostscript version publicly available interpreter postscript language 
input users guide gnu libraries pages 
execution ghostscript run interactive application executed option simply forces interpretation postscript displaying results 
gawk gnu awk version publicly available interpreter awk report extraction language 
input script processes large file containing numeric data computing statistics file 
perl perl publicly available report extraction printing language commonly unix systems 
input perl script reorganizes internet domain names located file hosts 
cham chameleon level channel router multi level printed circuit boards 
input file example inputs provided release code ex 
measured channel router yacr results obtained significantly different cham 
table general information test programs dynamic memory management important part large class computer programs 
interest field increased evidenced number workshops devoted entirely subject garbage collection workshops object oriented programming languages systems oopsla conferences international workshop memory management name 
reason increased interest object oriented design encourages programming large interconnected dynamic structures broadens class programs dynamic memory allocation 
increasing dynamic memory management brings need reevaluate performance old algorithms memory management consider new ones 
studies relative performance dmm algorithms published years 
addition comparing performance dmm algorithms number papers empirical measurements allocation behavior particular programs systems 
particular empirical measurements dynamic allocation patterns observed time sharing operating system 
empirical data subsequent dmm measurement studies 
empirical data concerning distribution program segment sizes operating system 
book data structure techniques standish presents data charles weinstock thesis showing distribution size requests bliss compiler 
standish mentions weinstock uses empirical data comparing performance different dmm algorithms 
empirical data segment sizes holding times collected algol programs 
compared performance large number dmm algorithms empirical data gathered days execution different multiuser operating systems 
empirical data gathered including average interarrival time holding time block sizes allocated 
data represents complete information published date performance evaluation dmm algorithms 
detreville published results extensive empirical measurements heap usage topaz computing environment 
discussion conclude things 
empirical measurements actual programs valuable designing evaluating dmm algorithms 
long algorithms proposed evaluated empirical data measurement process 
second relative lack empirical data data years program cfrac espresso ghostscript gawk perl cham lines code execution time instructions theta objects allocated max objects allocated bytes allocated max bytes allocated size classes sc mean size median size mode size interarrival time classes itc mean interarrival time median interarrival time mode interarrival time holding time classes mean holding time median holding time mode holding time table test program performance information 
sc itc values indicate number distinct size interarrival times holding times respectively sample programs 
times instructions 
published 
general empirical measurements dynamic storage allocation systems relatively scarce algorithm evaluators take available 
intent additional empirical measurements allocation intensive programs widely available 
companion investigate different models allocation behavior empirical data accurately evaluate dmm algorithms 
remainder organization section describes programs measured section presents empirical measures programs including distribution object sizes object holding times object interarrival times 
section conclude summarizing data indicating obtained internet 
programs gather data instrumented allocation intensive programs described table 
programs represent wide range memory intensive tasks including number factoring interpreters logic optimizers cad vlsi tools 
case collected data input data sets program 
order simplify presentation show data input data sets 
data input sets publically available internet 
data gathered tracing execution program ae sun sparc processor 
ae efficient program tracing tool captures instruction data special indicators calls malloc free procedures memory allocation 
large complex traces distilled time ordered memory allocation trace including calls malloc free 
memory allocation trace event time stamped number instructions program 
version cham measured release allocated memory calling free 
program monitored data traced program artificially deallocated memory longer referenced 
artificial free events inserted memory allocation trace essentially modeling perfect memory deallocation 
gathering allocation trace allocate free events measured data distributions trace object size object holding time object interarrival time 
distributions capture allocation behavior programs allowing empirical behavior characterized 
table summarizes vital statistics program presents basic measures distributions including total number objects bytes allocated program maximum number objects bytes allocated time program 
programs allocation intensive allocating object instructions 
fraction time spent doing memory allocation programs depends dmm implementation ranges approximately 
table shows mean median mode distributions mentioned 
cases median smaller mean indicating distribution greatly skewed large range values 
table shows size distribution skewed holding time distribution greatly skewed 
size distribution heavily skewed smaller objects table indicating program common size class bytes smaller 
table shows number distinct sizes interarrival times holding times sc itc respectively 
values indicate number distinct values observed distribution small compared total number instructions executed program 
interarrival times holding time distribution result suggests program behavior relatively regular resulting smaller number distinct classes 
data section presents complete information observed data distributions test programs 
previous distribution object sizes widely reported distribution partly easiest measure 
describe distributions object size interarrival time iat holding time ht equally 
set tables tables show distinct classes size iat ht required cover observed data 
coverage data indicates skewed distributions classes really represent important aspects program behavior 
tables show data distribution accounted small number classes 
particular table shows size classes required cover observed data test programs 
furthermore observed data covered classes 
algorithms adaptive exact fit allocator exploit empirical behavior adapting allocation policies commonly observed object sizes 
interestingly observe small number iat classes ht classes account large percentage allocation programs measured 
empirical result indicates large degree regularity exploited proposed dmm algorithms 
important statistical characterization distribution listing quantiles 
quantiles distributions tables 
program number size classes cover cfrac espresso ghostscript gawk perl cham table size classes required cover percentages objects test programs 
program number iat classes cover cfrac espresso ghostscript gawk perl cham table iat classes required cover percentages objects test programs 
program number ht classes cover cfrac espresso ghostscript gawk perl cham table ht classes required cover percentages objects test programs 
program quantile cfrac espresso ghostscript gawk perl cham min median max table quantiles object sizes test programs 
sizes bytes 
program quantile cfrac espresso ghostscript gawk perl cham min median max table quantiles object interarrival times test programs 
times measured sparc machine instructions 
program quantile cfrac espresso ghostscript gawk perl cham min median max table quantiles object holding times test programs 
times measured sparc machine instructions 
quantile tables show distributions greatly skewed 
particular median small fraction maximum case 
jain points skew suggests median value characterization central tendency distributions 
seen small size classes dominate size distributions programs quantile plot object sizes relatively uninteresting 
iat quantiles show interarrival time object allocations test programs frequent median time ranging instructions 
likewise allocated objects short lived holding time quantiles show 
median object lifespan programs ranges cycles th percentile cycles cases 
final set tables tables section common classes observed distributions 
tables illustrate small number classes cover large fraction total observations distributions 
percentages table see top sizes account object allocation test programs 
ghostscript interesting size distribution common objects size bytes 
programs exhibit predictable distribution object sizes large fractions total objects equal bytes size 
interarrival times indicated table show programs dominated single small interarrival time order cycles 
regularity probably arises allocation occurring small frequent loop 
table shows approximately allocations separated single small iat 
frequent iat programs captured total distinct iat top 
see ghostscript program showed regularity programs measured 
table shows top holding times program represent significant percentage total holding time distribution 
gawk particular shows great deal regularity object holding time objects lived cycles 
surprisingly ghostscript shows cfrac rank size frequency pct 
cum 
pct 
espresso rank size frequency pct 
cum 
pct 
ghostscript rank size frequency pct 
cum 
pct 
gawk rank size frequency pct 
cum 
pct 
perl rank size frequency pct 
cum 
pct 
cham rank size frequency pct 
cum 
pct 
table frequency common size classes test programs 
sizes bytes 
cfrac rank iat frequency pct 
cum 
pct 
espresso rank iat frequency pct 
cum 
pct 
ghostscript rank iat frequency pct 
cum 
pct 
gawk rank iat frequency pct 
cum 
pct 
perl rank iat frequency pct 
cum 
pct 
cham rank iat frequency pct 
cum 
pct 
table frequency common iat classes test programs 
times measured sparc machine instructions 
cfrac rank ht frequency pct 
cum 
pct 
espresso rank ht frequency pct 
cum 
pct 
ghostscript rank ht frequency pct 
cum 
pct 
gawk rank ht frequency pct 
cum 
pct 
perl rank ht frequency pct 
cum 
pct 
cham rank ht frequency pct 
cum 
pct 
table frequency common ht classes test programs 
times measured sparc machine instructions 
regularity iat distribution shows substantial regularity holding time distribution 
interesting note holding times table indicating objects applications short lived 
result implications generation garbage collection algorithms collect objects 
summary data input data set programs measured 
trace extraction reduction techniques described collected similar data inputs programs 
collected statistical characterizations test programs compared accuracy different synthetic models program allocation companion 
collected data program input file declarations distributions object size holding time files easily compiled linked program intended manipulate data 
files representing inputs programs described publically available anonymous ftp ftp cs colorado edu directory pub cs misc 
compressed files labeled cfrac number represents different input 
addition header file included declares data structures defined files 
please feel free data provided directory appreciate sending mail cs colorado edu indicating intend data intend 

segment sizes lifetimes algol programs 
communications acm january 
ju wood 
measurements segment size 
communications acm march 
daly tetzlaff 
analysis free storage algorithms revisited 
ibm systems journal 
brent 
efficient implementation fit strategy dynamic storage allocation 
acm transactions programming languages systems july 
john detreville 
heap usage topaz environment 
technical report digital equipment system research center palo alto ca august 
dirk grunwald benjamin zorn 
efficient synthesized memory allocators 
technical report cs cs department computer science university colorado boulder boulder july 
raj jain 
art computer systems performance evaluation 
wiley professional computing 
john wiley sons new york 
james larus 
execution technique efficiently tracing programs 
software practice experience december 

analysis free storage algorithms 
ibm systems journal 
rodney stephen allan 
adaptive exact fit storage management 
communications acm may 
thomas standish 
data structures techniques 
addison wesley publishing 
charles weinstock 
dynamic storage allocation techniques 
phd thesis carnegie mellon university pittsburgh pa 
benjamin zorn 
measured cost conservative garbage collection 
technical report cu cs department computer science university colorado boulder boulder february 
benjamin zorn dirk grunwald 
evaluating models memory allocation 
technical report cs cs department computer science university colorado boulder boulder july 
