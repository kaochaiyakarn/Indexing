functional programming dynamic binding laurent september dynamic binding runtime operation looks names environments examples quote eval lisp object oriented message passing 
functional language spirit ml haskell supports dynamic binding 
surface level language supports constructs extensible records variants extensible case selection quoted terms encode various forms objects 
underlying execution model lambdacalculus name labels keywords parameter passing 
type system supports subtyping extension hindley milner type inference recursively constrained types 
keywords functional object oriented subtyping record concatenation quoting environments contexts dynamic binding denotes family programming constructs runtime system includes notions names environments associations names values operation looking name environment performed dynamically 
number popular languages dynamic binding various forms quote eval lisp stacks dictionaries forth postscript message send object oriented languages 
functional programming languages ml haskell hudak support 
key aspects languages parametric polymorphism higher order composition type inference pattern matching easy combine dynamic binding 
argue level integration possible demonstrated research language hop main issues terms language design underlying execution model type inference discussed 
clearly dynamic binding associated cost terms computing resources memory store environments time perform lookup operations appealing aspect extensibility possibility add functionality existing piece code affecting previous behaviour 
comes author address centre universitaire informatique rue en eral ch gen eve switzerland tel 
fax email cui unige ch partially supported swiss esprit project coordination fact environment defining set names replaced bigger environment defining names name lookup operations involving original set names valid addition new lookup operations possible 
result modified code compatible original code convenient software evolution 
name lookup operations performed runtime system modifications occur source code available 
notions central spirit object oriented programming key factors success 
support dynamic binding extensibility may embodied different ways different languages benefits similar come essentially basic principles 
programmers switching object oriented world functional world discover unexpected due absence dynamic binding 
example versions ml records possible write function takes argument supposed record selects field fields record may 
names fields known run time dynamically looked 
similarly haskell datatype declaration data pet cat dog extended data domestic pet cow horse names data constructors belong semantics datatype 
order introduce dynamic binding change fundamental execution model 
theoretical foundation calculus arguments passed functions basis names labels keywords 
top basic formalism build higher level constructs extensible records variants extensible case statements dynamic association quoted terms environments 
extensibility property type system deal subtyping difficult infer principal types 
solution extension hindley milner type inference known recursively constrained types thatte 
constraints appear promising way handling inference subtyping 
open issue design algorithms simplification sets constraints stay manageable size typing large programs 
heuristics borrowed system incorporated prototype yielding acceptable results small programs optimal solution known moment 
encouraging results emerge pottier 
earlier proposal incorporating dynamic binding functional languages lamping proposed calculus contexts 
expressive power comparable discuss interesting possible applications 
compact deeper ramifications go way language design type inference formal semantics 
contrast label selective calculus seemingly similar surface quite different properties combines label selection currying support extensibility far understand 
approach contrasts researchers try directly add primitive object oriented constructs see survey 
start primitive records variants known constructs model objects card 
propose fundamental extension functional model build top 
go far modelling objects checked known approaches objects classes records functions amenable language hand explored alternative interesting ways software reusability example extensible case selection statements may closer spirit traditional functional programming 
short hop research language purpose demonstrate feasibility new constructs language designers explore novel ways composing software extensibility higher order combinators provide framework studying various object interpretations 
pure functional language sense side effects uses lazy evaluation tradition lml miranda haskell 
prototype interpreter type checker written gofer jones dialect haskell available www address unige ch osg hop 
basic constructs start informal presentation main high level constructs language 
full syntax appendix knowledge functional language assumed 
functions records named abstractions functions written lambda abstractions haskell syntax 
usual parsing conventions apply usual properties currying partial application 



records written curly brace notation example true foo order fields irrelevant 
field selection expressed usual dot notation yields foo 
just abbreviation expression 
shows unusual aspects hop records functional position coded internally functions second argument record call named abstraction lambda abstraction set names enclosed parenthesis 
functions take arguments single abstraction level parameter passing done basis names usual variables names belong semantics function 
named abstractions simultaneously extract fields record 
example expression 
yields values named parameters taken record substituted inside body lambda abstraction 
named abstraction passed record needs fields record fundamental feature extensibility support 
function 

polymorphic double sense subtype polymorphism accept argument record containing field possibly fields parametric polymorphism field contain value type 
aspects integrated type system explained section 
note functional languages support parametric polymorphism object oriented languages support subtype polymorphism combination single typed language usually impossible fairly limited scope escape lexical scoping treated programming languages local declaration takes precedence previous declaration name 
previous declaration lost 
variables preceded occurrences scope escape operator order specify ignore abstraction levels looking corresponding declaration 
expression 
summand corresponds innermost declaration summands correspond outermost declaration summand error crossing abstraction levels declaration name 
quote eval quoting mechanism abstracting free names expression similarity lisp written quote character 
closed expression abstracts free names bound name quoted expressions encoded functions 
evaluating context extremely simple just application record 
example yields 
scope escape operator quoted expressions finely tune names statically scoped quoted achieving similar backquote operator lisp 
example known object oriented language construct called templates parametric polymorphism template instantiation restricted uncomfortable ml haskell polymorphic functions 

names abstracted summand refer parameter function 
contrast name escapes quoting operation statically bound second parameter function 
record extensions concatenation operator stands record concatenation 
hello yields new record additional field field value words record concatenation right preferential 
note types fields change concatenation 
right hand side concatenation operation record called record extension denoted symbol right opening curly brace 
record extensions class values obviously records concatenation empty record reverse true possible transform record record extension 
record extensions concatenated yielding record extension 
may obvious need notion record extensions just concatenating ordinary records 
reason cause difficult problems implementation type checking discussed 
hand imagine forget ordinary records just record extensions 
close record abstractions emy 
loose important property subsumption foo context 
seen easily expression 

correct assuming field type int yield type error substitute foo 
contrast record foo subsumes record context 
record concatenation quoting offers interesting possibilities modelling state operations function mem 
mem 
mem takes memory just record argument adds contents locations puts result back location distinction called rvalues lvalues imperative languages clearly reflected different uses name variants case selection mathematically records labelled products 
dual notion labelled coproducts called variant 
notation cardelli card write square brackets 
simple case just set labels enumerated types pascal example encode boolean values true false colors red green blue variants construct complex datatypes nil nil cons head tail 
cons head tail empl 
employee name salary manager dpt 
employee name salary dpt student sch 
student name school sch notice similarity datatype declarations functional languages 
difference haskell example write data list nil cons list implicitly declares constructors nil cons time specifies list built constructors 
variants hop constructor independent entity 
expression square brackets start name label variant followed sequence applications 
order variant identify label built 
depending label may access internal data pursue computation 
usually kind deconstruction coproducts functional languages performed case construct 
need additional syntactic construct case selection simply achieved records 
start simple example true false false true true false false function performs case selection argument yielding false true true false 
similarly function proceeds case selection argument 
examples involves simple variants just labels 
complex variants need able access internal data 
done putting functions record fields head list nil error empty list cons 
list language syntactic sugar records write example length list 
nil cons head tail tail list descr 
employee name name employee student name school name studies school restricted form pattern matching 
notice explicit combinator recursive function length 
consider definitions 
functions take argument applying 
experienced functional programmers immediately tempted perform called conversion rewriting true false false true 
true false false big advantage functions extended operator 
imagine discover need valued logic unknown value 
encode just need incremental extensions 
unknown unknown andu 

unknown true unknown false false unknown unknown andu functions designed value logic fully compatible previous versions usual logic existing code old logic needs modification 
exactly kind software extensibility offered object oriented programming 
done just extensible case statements classes inheritance machinery 
claim form software reuse totally subsume object oriented mechanisms complement cases example natural handle booleans lists way defining class list concrete subclasses nil cons 
formal semantics lambda calculus time give formal treatment constructs seen far 
dynamic binding expressed traditional calculus hop modified calculus called functions named parameters abstraction level 
start condensed presentation untyped calculus discuss aspects translation section 
typing postponed section 
knowledge traditional calculus assumed 
proofs sketched involve aspects specific syntax rewrite rules calculus constructed set variables set names labels 
letters range letter ranges letters range set terms built syntax 
err variables carry values different names expression form corresponds value carried variable name lambda abstractions exactly standard lambda calculus notions free bound variables see 
write fv set free variables occurring fn set names index free occurrences occurs free fv fn 
term closed iff free variables set closed terms denoted usual application split different parts expression form called bind expressions passes value name abstraction expression form 
close expression ends sequence bind expressions 
err constant representing run time errors message understood error object oriented systems 
errors generated trying access variable name variable value corresponding bind expression name 
usual syntactic conventions apply abstractions extend right far possible multiple abstractions form abbreviated capture avoiding substitution occurrences written 
similarly denotes substitution occurrences variable label index may 
avoidance variable capture handled standard lambda calculus considering equivalence classes ff substitution renaming bound variables 
context fi reduction defined rules fi lambda bind 
fi err lambda close err fi err err bind err 
fi err err close err fi err lambda err usual fi reduction rule standard calculus split bind reduction rules additional rules propagation run time errors 
notice lambda bind rule performs substitution removing outermost lambda close rule removes substitutes remaining occurrence corresponding variable err 
contrast fi reduction standard lambda calculus substitutes variable removes single step 
reflexive transitive closure fi written fi fi symmetric closure 
theorem confluence fi fi fi fi proof 
standard calculus substitution lemma strip lemma 
full development 
assume invisible name inv denote set traditional 
embedded function ln gamma ln inv ln ln ln ab ln inv ln 
freely traditional calculus syntax convenient assuming translation implicit 
translation exactly preserves usual fi equality lemma 
fi ln fi ln 
ln fi fi fi ln proof 

induction length fi 
initial redex ln comes redex redexes involved derivation ln fi contract corresponding redex resulting term term ordering dynamic binding extensibility need way tell term subsume safely replace context 
done observing error generation behaviour terms arbitrary contexts applicative contexts standard calculus operationally extensional means orderings coincide 
common definitions context obtained extending syntax gamma hole 
context gamma term obtained plain syntactic substitution occurrence hole gamma plain syntactic substitution means free variables may captured context 
definition contextual order ctxt defined ctxt gamma fi err fi err definition applicative operation bind operation closed close operation 
applicative sequence finite list applicative operations 
closing oe terms finite list atomic substitutions aoe boe closed 
applicative order appl defined closed appl fi err fi err ii arbitrary appl oe aoe appl boe lemma context lemma operational extensionality ctxt appl proof 
induction length reductions abramsky ong proof operational extensionality lazy calculus details 
orderings coincide simply write symmetric closure 
lemma 
precongruence gamma 

fi 
term omega err omega delta delta delta xx 
proof 
immediate definition ctxt immediate definition appl applicative sequence err fi err omega fi omega err 
theorem binding equations 





fv proof 

suppose closed 
omega err result immediate fi 
fi 
substitutions capture free occurrence variable fi similarly fi 
general case follows directly quantifying closing substitutions 
suppose closed fi 

fi err 
err precongruence err err fi 

applicative sequence prove induction length fi err fi err allowing permutation bindings different names part theorem justifies intuition argument name acts channel operates parallel words functions receive arguments simultaneously different names 
hand name channel sequentially receive values taken account second part theorem says binding immediately close operation harm supplying information name best useful worse ignored generate run time errors 
part counterpart traditional calculus 
inequality full equality finite set bindings cover possible arguments safely perform reductions page expansions 
translation hop briefly comment particular aspects translation hop full translation appendix hop uses single set names treated variables names depending context 
example expression translated xyz inv inv understand encoding records briefly recall tuples encoded usual lambda calculus tuple xa postfix projection function ith component similarly fl 
theorem permutation bindings yields observationally equivalent function justifies fact order fields record irrelevant 
furthermore second part theorem 

proves record fields place record fewer fields 
property called width subsumption depth subsumption possibility replace value field value iff derived directly fact precongruence 
translation record extensions similar records subtle detail final close 
operation part theorem applies permutation fields valid 
part theorem apply record extensions support width subsumption stated section 
translation variants similar coproducts usual lambda calculus data constructor takes list arguments calls appropriate 
example standard encoding lists nil nc cons nc analogy nil nil cons cons uses abstraction level constructors distinguished name explains new constructors added 
contrast standard encoding uses abstractions constructors number constructors changed 
quoted terms translated abstractions take environment record apply named abstraction 
previous example 
inv inv knowing define operators reflexive programming allowing build new quoted terms quoted terms 





takes quoted terms creates new term application second 
equivalent context gamma takes quoted term creates new term lambda abstraction capturing free occurrences type inference dynamic binding requires extensions traditional hindley milner type inference 
important due subtyping subsumption complicates inference principal types 
solution recursively constrained types technique adopted number researchers thatte 
difficulty comes fact typing bind operation name assumptions names function 
order capture information families type variables indexed names bear similarity row variables systems typing records emy wand 
implementation polymorphism constraints follows exactly thatte aspect discussed 
type assignment syntax types type constant type including errors type variable family index arrow type mapping parameter type type 
parameter types associations names types 
different forms closed open 
closed parameter type finite association names types name explicitly mentioned set implicitly associated 
open parameter type closed parameter type contains default association family type variables name mentioned set explicit associations implicitly mapped type variable formally define operations parameter types name extraction name cancellation pnl remapping nl jl lg nl jl lg parameter types treated modulo syntactic equivalence relationship adopt syntactic sugar convention types corresponds similar convention terms page types form inv names inv left hand side mapped may abbreviated convention types usual lambda terms terms contain names inv look exactly usual lambda calculus 
set constraints set inequalities types parameter types families type variables fc fl constraints third form stand infinite set instantiations set fl constraint written abbreviation pair constraints 
appendix define rules subtyping judgements form rc fairly obvious extraction set constraints reflexivity type variables contravariant propagation arrow types ensuring type subtype 
unusual rule top arrow says type arrow type 
motivation rules error propagation term erroneous applicative sequence yields error term function 
basis gamma finite association variables parameter types set variables parameter type associated gamma denoted dom gamma 
gamma gamma associates type labelled variable written gamma 
furthermore gamma denotes extension basis gamma association assuming dom gamma 
typing judgements form gamma rc saying type basis gamma constraints 
subscript rc stands recursive constraints 
typing judgements derived rules gamma rc 
top gamma rc rc gamma rc subs gamma rc var gamma rc gamma rc abs gamma rc gamma rc gamma rc pnl bind gamma rc gamma rc 
close type system unusual aspect comparison systems type constructor elimination rule 
arrow type introduced rule abs eliminated steps type progressively reduced multiple invocations bind rule eliminated close rule 
obviously related asymmetry lambda abstractions introduce named parameters time bind close constructs supply parameters steps 
soundness type system proved appendix term non trivial type type different reduce err 
type inference type derivations rc unique 
contrast algorithm inf entirely syntax directed infer correct principal types shown theorems 
gamma inf gamma var gamma inf err 
err gamma inf gamma inf abs fl fn new gamma inf gamma inf gamma inf bind ft new gamma inf gamma inf 
close ft xg new theorem correctness gamma inf gamma rc proof 
easy induction structure theorem completeness inference algorithm yields gamma inf type assignment gamma rc type substitution oe gamma gammaoe coe rc fg rc oe proof 
induction derivation gamma rc line thatte 
typing examples implementation uses heuristics borrowed system simplify constraints union intersection types 
cases constraints totally disappear type looks ordinary ml haskell type 
example factorial function 
int 
int type expect 
hides fact constraints typing process 
ml haskell need basic support inferring type recursive definitions system simply known combinator type simplify resulting constraints 
types inferred prototype number differences usual functional languages 
currently constructors arrow type reflects decision translate functions 
exploratory stage advantage flexibility experimentation clearly constructs record variant types added implementations type expressions readable 
second user defined datatypes information collection constructors 
example bool type 
types keep information possible variants involved datatype amounts kind flow analysis 
type function true false false true course readable just bool bool 
knows read informative type exactly tells function returns false receives true argument vice versa case captures behaviour function 
recursive datatypes approach constraints eliminated precisely express recursion 
example type length function lists section list nil int cons tail int int int nil int cons tail int int nil int cons tail int int verbose expressive example correctly infer type int expression length cons cons foo nil applies length function heterogenous list ml haskell fail example 
heterogeneous list type cons int cons string nil tells list consisting integer string constraining equal type variable yields desired result 
concluding remarks basic support dynamic binding offers wealth interesting possibilities flexible software construction 
examples shown quoting extensible records variants demonstrate wide range design directions taken 
tuning design provide attractive set useful constructs single high level language require experimentation 
fact basic underlying formalism understood equational inequational properties type inference algorithm proves tool exploring various paths language design 
example realize working case statements construct necessary subsumed records 
similarly current design record operations clear separation records record extensions possibility records functional position view elegant powerful long list operations invented seeing 
proceed fronts 
need go exploring interaction dynamic binding high level functional programming constructs 
particular see current pattern matching techniques apply extensible data structures 
second need design efficient ways interpreting compiling languages dynamic binding current implementation just performs naive substitutions de bruijn indices highly inefficient needed lazy evaluation form graph reduction machine name interaction 
need improve type system readable types better simplification algorithms sets recursive constraints 
non trivial task hopefully pottier provide starting directions 
samson abramsky 
luke ong 
full abstraction lazy lambda calculus 
information computation 
alex aiken edward wimmers 
type inclusion constraints type inference 
proceedings conference functional programming languages computer architecture copenhagen denmark june pp 

henk barendregt 
lambda calculus syntax semantics 
studies logic foundations mathematics north holland 
card luca cardelli 
semantics multiple inheritance 
information computation pp 
luca cardelli john mitchell 
operations records 
pp 
appeared math 
structures comp 
sc pp 
laurent 
software composition integration functional object oriented approaches 
phd thesis university geneva april 
jonathan scott smith trifonov 
type inference recursively constrained types application oop 
mathematical foundations programming semantics appear elsevier electronic publication 
kathleen fisher john mitchell 
notes typed object oriented programming 
proceedings tacs pp 
springer verlag lncs 
jacques hassan kaci 
typed polymorphic lambda calculus 
proceedings st acm symposium principles programming languages pp 
carl gunter john mitchell eds 
theoretical aspects objectoriented programming types semantics language design 
mit press foundations computing series 
hudak paul hudak haskell report haskell tutorial 
acm sigplan notices may 
jones mark jones 
qualified types theory practice 
cambridge university press 
lamping john lamping 
unified system parameterization programming languages 
proceedings acm conf 
lisp functional programming pp 
der lee daniel friedman 
enriching lambda calculus contexts theory incremental program construction 
draft 
milner tofte harper 
definition standard ml 
mit press 
patrick keefe mitchell wand 
type inference partial types decidable 
proceedings esop pp 
springer verlag lncs 
pottier fran cois pottier 
type inference simplification recursively constrained types 
working 
emy didier emy 
typing record concatenation free 
proceedings acm popl pp 
acm press 
john 
uniting functional object oriented programming 
proceedings pp 
springer verlag lncs 
thatte satish thatte 
type inference partial types 
theoretical computer science pp 
wand mitchell wand 
type inference record concatenation multiple inheritance 
information computation pp 
syntax syntax denotes zero occurrences production denotes occurrences 
conciseness lexical rules associativity rules explicitly listed usual conventions apply 
instr term simple expression name term global definition term name variable int string constant params 
term abstraction term term application field field record field field record extension term 
term record concatenation term name field selection term quoting name term variant term parenthesized expression term unary minus term op term binary operators term term term statement error string error params name usual abstraction name named abstraction field name params term op operator string concatenation boolean connectives 
currently overloading supported comparison operators integer values 
translation hop translation function gamma gamma subscripted stack declarations recording names declared lambda abstraction 
declaration may shape ffl saying name corresponds variable inv ffl fl saying name corresponds variable ffl saying name corresponds variable pushing declaration top stack written translation top level expressions starts empty stack 
cases abstraction generated implicitly understood new variable 





fl ng err inv fl ng tf tf tf tf 
true false 
ab inv 
tf lp 
type system subtyping rules rc 
top rc tvar rc rc top gamma arrow rc rc rc trans rc rc rc arrow rc rc ptype rc constr rc rc rc break gamma right rc rc break gamma left rc rc break gamma ptype fl fl rc lemma subtyping relation reflexive transitive 
proof 
induction structure types 
soundness working sets constraints usually important check consistency constraints self contradictory 
obvious solution set constraints map type variable interesting solution guarantee absence errors prove soundness type system 
approach show existence non trivial solution typically requires sophisticated mathematical tools limits contractive maps ideal model 
easier approach show soundness operational level subject reduction property 
line show types preserved reductions show types assigned err shape trivial types conclude terms having non trivial types reduce err 
theorem subject reduction suppose fi gamma rc gamma rc proof 
induction generation fi standard techniques generation lemma substitution lemma see 
definition set constraints normal form iff 
constraints form type variable type variable arrow type 
rc type variable notion normal form weak imply unicity normal form simplifications done 
definition sufficient proving soundness type assignment 
definition set triv trivial types defined inductively 
triv 
triv triv lemma gamma rc err normal form triv 
proof 
proofs err top axiom subsumption 
normal form contains constraint form possible subsumption rule top arrow necessarily trivial antecedent rule 
lemma type derivation gamma rc transformed derivation gamma rc normal form 
proof 
normalization constraints achieved adapting algorithm 
iterate steps conditions applicable 
ffl remove constraints form 
ffl replace constraints form ffl remove constraints form perform corresponding substitutions gamma ffl replace constraints form constraints ffl replace constraints form constraints parameter types set individual type constraints fp jp ffl transitively add constraint pair constraints algorithm terminates new gamma normal form gamma rc gamma rc theorem soundness gamma rc norm gamma gamma triv fi err 
proof 
subject reduction theorem fi err gamma rc err implies gamma rc err non trivial impossible lemma 
