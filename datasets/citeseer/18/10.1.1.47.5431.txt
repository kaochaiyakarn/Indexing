decides kind storage device balance load data 
workload behavior device capabilities specified describing attributes load device respectively 
refer approach attribute managed storage 
view extension system managed storage gelb 
workload attributes include performance requirements mean throughput maximum latency jitter resiliency needs availability reliability fault models cost bounds data sizes 
device attributes expressed similarly 
attribute managed storage system maps data devices requirements associated data item met 
new resources added old ones fail system detect storage accordingly 
investigating construction storage systems 
part working answer questions specify workload requirements 
specify device capabilities 
algorithms automatically mapping storage objects devices attributes 
assignment object device translate low level resource reservation 
reservations mean run time 
big picture current storage systems file systems databases backup archival tools require significant administration 
time number configuration management choices increasing number components configurability increasing 
example experience raid systems shows users expertise information configure disk array initial installation timeconsuming process 
worse system adapt changing workloads 
increased load sophistication required administrators invariably means systems constructed optimally configured cost provide adequate service 
address problems believe storage systems self managing adapt workload resources requiring human intervention 
experience hp autoraid system wilkes dynamically select raid layout policies usage indicates performance ease improved doing 
system self managing set goals manage 
approach parts storage system specification workload support data needs store storage devices disposal 
attribute managed storage richard golding elizabeth shriver tim sullivan john wilkes storage systems program computer systems laboratory hewlett packard laboratories palo alto ca storage systems continuing grow shared resources advent networks 
managing resources meet performance resiliency goals significant challenge 
believe completely automatic attribute managed storage way address issue 
approach declarative specifications application workloads device characteristics 
combined mapping engine generate provides optimal performance meets availability guarantees minimum cost 
position workshop modeling specification san antonio texas october 
authors may contacted golding shriver sullivan wilkes hpl hp com 
copyright hewlett packard 
rights reserved 
initially limiting focus subset problem modelling transaction processing multimedia scientific computing applications modelling capabilities disk drives tapes 
attribute managed storage part larger investigation distributed storage systems 
systems consist smart network attached storage devices shared systems 
model principles concentrating problem assigning storage objects appropriate devices model shown 
attributed managed storage system concerned reserving low level resources meet application requirements 
reservations maintained ways persistent reservations associated stored data transient reservations associated streams access data 
storage objects basic persistent unit applications access assigned storage devices 
objects files tables parts tables database recorded continuous media streams blocks scientific data set 
objects carry sets attributes 
specify quality service qos requirements guaranteed anticipated applications object 
attributes indicate expected application behaviors system better layout decisions 
attributes initially components model 
assignment devices objects mapping engine throughput mb mh open latency sequential reads size mb sequential throughput mb mttf mh max latency ms size gb streams throughput mb open latency sequential reads system may infer observed usage patterns 
separately applications access storage objects streams 
stream represents application workload object resources workload uses 
stream carries set requirements behaviors 
objects stored devices 
devices set low level resources modelled capability attributes 
device resources reserved streams objects 
system allow creation object stream sufficient resources available meet requirements 
system maintains assignment metadata mapping objects devices 
algorithms automatically finding mappings part research 
important note existing distributed file systems object constrained particular device part volume 
object assigned appropriate device system 
attributes reservations describe objects streams devices attributes 
attributes allow specify abstractly requirements behaviors streams objects capabilities devices 
important attributes intelligible human user 
attributes things map objects devices manage streams 
device assignment object device uses concrete resources set resources determined finding minimum set meet attribute level performance requirements 
limitation important keeping system modular extensible 
kinds attributes involved mapping objects streams devices 
object provides set requirements indicating needs behaviors indicating 
device similarly provides capabilities model lowlevel resources allocated object throughput capacity 
object assigned device system negotiates object requirements device capabilities form contract 
contract part assignment system guarantees hold applications objects behaviors recorded contract 
attributes represent behaviors applications follow 
mapping system behaviors better selection devices 
example object guaranteed read sequentially probably organized sequentially disk 
device capabilities measure resources available object stream 
example sequential throughput bytes sec capacity bytes consumed objects throughput size requirements stored device 
capabilities mean time failure represent device characteristics consumable resources 
attributes measured single numbers require complex specification 
application indicate needs throughput mb jitter value disk indicate requests satisfied ms complex attributes account effect failures values wilkes 
systems qos attributes represent requirements 
example llnl high performance storage system louis attaches data structure containing usage hints requirements stored files storage classes 
storage objects streams storage objects represent persistent static allocation data streams represent transient dynamic data 
reserve device resources 
storage objects carry persistent resource reservations 
reservations derived attributes applications place object 
mapping engine uses attributes pick devices object stored determine fraction device resources allocated object 
example video stream file particular playout rate time streams able access stream 
resource need allocated object playout rate available things 
attributes 
sequential throughput mb size gb requirements behaviors capabilities negotiation contract mttf mh max latency ms sequential reads throughput mb open latency similarly vitally important data file carry long mean time data loss attribute 
stream hand short term reservations 
stream created uses object consumes resources reserved object 
video file example third throughput resources reserved file allocated new stream 
system practices admission control objects streams 
reject creation new object isn resource allocate space throughput 
new streams opportunistically allocate resources possible streams video stream previous example fourth stream admitted system resources support stream 
wants reservations group objects applications guaranteed access subset objects 
example video file service guarantee video streams active concurrently subset hundreds video files stored 
reservation require far fewer device resources requiring file accessible streams 
applications flexible cope range different performance levels 
attributes include desired performance level minimum acceptable level goodness function indicating value supplying resources minimum 
example application function properly stream having kb throughput additional throughput mb better stream throughput attribute carry goodness function increased linearly throughput ranged kb mb stream created system may initiate execution prefetch policy migrate copy object faster media 
expressing complex prefetching inter level migration understood 
devices devices set capabilities resources provide objects streams 
capabilities mapping objects devices 
underlying resources reserved objects streams run time stream reserved resource 
devices costs 
cost includes cost purchasing device ongoing costs providing power cooling maintenance 
mapping algorithms assign objects devices attempt minimize total cost devices 
devices simple obvious disks tapes cache memories 
important devices include interconnection network device controllers power supplies 
model virtual devices 
virtual device modifies capabilities physical device usually optimize particular stream behavior 
example device driver improve disk performance scheduling concurrent requests efficiently 
capability attributes virtual device derive capabilities device devices uses way modifies devices 
virtual devices parameterizable mapping engine select parameters match objects assigned virtual device 
example generic disk striping device vary stripe depth width match application throughput requirements 
mapping problem considering storage management problems 
planning device capacity required support set objects streams 
planning set streams objects best supported set devices 
batch reorganization objects system 
incrementally adding new objects system changing object requirements cases call mapping problem allocate device resources object requirements met device cost low possible objects optional requests met possible 
goodness values optional attributes high possible 
solutions trade cost goodness may take extra devices satisfy optional requests bandwidth minimum 
system administrator specify trade additional device cost acceptable perform analyses find right trade 
mapping engines batch planning problems deferring problem incremental assignment intuition mapping problem 
number mapping engines traditional approximate resource allocation algorithms appear promising 
particular looking knapsack problem simulated annealing genetic algorithms 
conducting series experiments compare different mapping engines 
assembling number test cases small population objects devices 
engine solves test case compare resulting assignment speed execution device cost solution goodness assignment distance optimal cost goodness fraction test cases assignment 
distributed storage systems coming include large numbers configurable shared resources networks directly attached storage devices available 
causing number complexity management options grow point manual administration longer feasible 
working self managing storage systems attribute managed storage 
approach uses declarative specifications application requirements device capabilities guide automatic management mechanisms 
system includes mapping engine automatically maps objects devices ensuring performance requirements met minimizing cost 
enables transparent object migration fault tolerance performance enhancement hierarchical storage management 
gelb gelb 
system managed storage 
ibm systems journal 
louis louis 
class service high performance storage system 
proceedings rd international ifip tc conference open distributing processing pp 
february 
wilkes john wilkes raymie stata 
specifying data availability multi device file systems 
position th acm sigops european workshop bologna september 
published operating systems review january 
wilkes john wilkes richard golding carl staelin tim sullivan 
hp autoraid hierarchical storage system technology 
proceedings th acm symposium operating systems principles copper mountain resort december 
published operating systems review 
