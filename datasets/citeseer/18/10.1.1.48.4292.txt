closest point problems computational geometry michiel smid fakultat fur informatik otto von universitat magdeburg magdeburg germany mail michiel isg cs uni magdeburg de september preliminary version chapter appear handbook computational geometry edited 
sack urrutia 
comprehensive overview algorithms data structures proximity problems point sets ir particular closest pair problem exact approximate post office problem problem constructing spanners discussed detail 
contents static closest pair problem preliminary remarks 
algorithms optimal algebraic computation tree model algorithm voronoi diagram 
divide conquer algorithm 
plane sweep algorithm 
deterministic algorithm uses indirect addressing 
degraded grid 
randomized algorithms 
rabin algorithm 
sieve algorithm 
randomized incremental algorithm 
extensions closest pair problem 
nearest neighbors problem 
separated pair decomposition 
closest pairs problem 
point clustering problems 
line closest pair problem algorithms logarithmic method 
algorithm optimal dimension 
algorithm optimal dimensions 
dynamic closest pair problem deletions case 
fully dynamic data structure sublinear update time 
solution polylogarithmic update time 
randomized data structure polylogarithmic update time linear space 
deterministic solution polylogarithmic update time linear space 
dynamic solution simplicial cones 
dynamic solution separated pair decomposition optimal dynamic closest pair data structure 
post office problem post office problem simple metrics 
solution quadrant approach 
solution metric uses range trees 
approximate post office problem 
data structure quad trees 
randomized data structure neighborhood graphs data structures range trees 
optimal solution approximate post office problem results proximity problems approximating complete euclidean graph spanners 
spanners simplicial cones 
greedy spanners 
spanners separated pairs 
spanners small degree 
results closest point problems 
open problems ii geometric proximity problems closest point problems popular topic computational geometry 
problems deal distances sets ir chapter consider proximity problems point sets 
distance metrics consider minkowski metrics defined follows 
distance points defined jp gamma defined gamma dg example standard euclidean metric manhattan metric 
chapter assume dimension parameter fixed constants 
denote distance points 
introduce type problems considered chapter 
closest pair problem simplest version problem stated follows 
problem set points ir find closest pair points minfd qg problem appeared time shamos papers computational geometry 
pairs distinct points distance points computed time problem trivially solved time 
early years computational geometry researchers felt problem quadratic lower bound 
see bentley 
solutions geometric problems contain closest pair implied quadratic lower bound problems 
examples computing voronoi diagram delaunay triangulation minimum spanning tree point set 
determining complexity problem important problem theoretical point view 
moment algorithms known solve problem log time fixed dimension fact certain models computation problem solved linear time 
give overview algorithms 
fair say problem solved theoretical practical point view 
obvious generalizations closest pair problem treated chapter 
set points ir problem want compute point point closest fixed radius near neighbors problem 
problem set positive real number ffi report pairs points distance ffi 
closest pairs problem integer report distances smallest ones 
consider point clustering problem integer find subset size minimizes closeness measure 
examples finding points diameter enclosing circle minimum 
consider different versions dynamic closest pair problem maintain closest pair set dynamically changed insertions deletions points 
closest pair problem generalizations arise areas statistics pattern recognition see books andrews hartigan molecular biology 
example solution fixed radius near neighbors problem essential preprocessing step algorithm triangulating contact surface molecule 
see smid 
application 
applies dynamic closest pair data structure give efficient implementation greedy minimum weight matching algorithm 
problem set points 
task match points pairs sum lengths distances pairs minimized 
greedy algorithm matches closest pair removes points set 
closest pair resulting set matched matched points 
practice heuristic gives approximation optimal matching 
post office problem post office problem due knuth 
stated follows 
problem set points ir store data structure query point ir efficiently find nearest neighbor point closest minfd sg planar version post office problem solved optimally log query time space 
higher dimensional case impossible give data structure size log answers queries polylogarithmic time 
open problem exists dynamic data structure planar problem having size log polylogarithmic query update times 
consider weaker versions problem 
consider post office problem simple metrics metric 
second consider variant find exact nearest neighbor query point satisfied approximate neighbor point ffl positive constant ffl 
see weaker versions dynamic data structures designed having polylogarithmic query update times having size close linear 
post office problem applications areas pattern recognition data compression 
important example vector quantization compressing speech images 
see arya mount 
assume take samples signal group vectors length assume constructed set typical code vectors ir training set vectors 
new vector encoded index nearest neighbor rd code vectors need rd bits encode new vector 
rate vector quantizer equal fix grow performance quantizer increases 
number points increases solve post office problem large dimension important efficient exact approximate data structures problem 
related problems final part chapter mention related results proximity problems 
particular consider problem approximating complete euclidean graph 
set points ir consider graph having points vertices 
weight edge graph defined distance weight path graph defined sum weights edges path 
definition real constant 
graph having points vertices called spanner pair points path graph weight times distance spanners introduced computational geometry chew 
papers published problem efficiently constructing spanners additional properties 
give overview important results area 
spanners degree vertex bounded constant data structure closest pairs problem fixed radius near neighbors problem 
see arya smid 
precise spanner query integer resp 
query value ffi ir efficiently enumerate closest pairs resp 
pairs distance ffi 
introduce notation chapter 
set points ir denotes minimum distance distance closest pair 
ir denotes minimum distance point fpg 
sets denotes minimum distance point point point ffi positive real number ffi grid subdivision ir cells sides length ffi defined hyperplanes delta ffi ranges integers 
neighborhood cell defined cell plus gamma cells border 
neighborhood point defined neighborhood cell contains mentioned dimension assumed constant 
implies constant factors appear big oh notations depend stated 
general factors form cd constant static closest pair problem mentioned algorithms proposed solving problem static closest pair problem 
section give overview algorithms 
preliminary remarks turns complexity closest pair problem heavily depends machine model 
algorithms chapter implemented algebraic computation tree model 
see ben 
model operations gamma comes finite subset positive integers take unit time 
note operations perform exact arithmetic real numbers 
comparisons real numbers takes unit time 
indirect addressing possible algebraic computation tree model 
closest pair problem omega gamma log lower bound algebraic computation tree model 
consider ffl closeness problem real numbers ffl decide jx gamma ffl 
lower bound technique ben shown problem takes omega gamma log time model 
see preparata shamos 
implies lower bound closest pair problem 
fact agarwal prove omega gamma log lower bound closest pair problem points vertices simple polygon 
section see algorithms solve closest pair problem log time 
powerful machine model design faster algorithms 
precisely add randomization non algebraic floor function power indirect addressing 
see section close section important sparseness lemma heavily closest pair algorithms 
basically lemma says box having side lengths small compared minimum distance point set contains points set 
lemma set points ir ffi distance closest pair metric positive integer 
dimensional cube having sides length contains cd points proof proof contradiction 
assume cube contains cd points partition cube cd subcubes sides length cd 
subcubes contains points points distance diameter subcube equal diameter turn equal delta cd ffi 
clearly contradiction 
algorithms optimal algebraic computation tree model algorithm voronoi diagram optimal algorithm solving planar version closest pair problem due shamos shamos hoey 
algorithm follows 
log time compute voronoi diagram edge diagram compute distance points voronoi regions share takes linear time 
smallest distance way determines closest pair details refer chapter voronoi diagrams handbook 
divide conquer algorithm bentley shamos gave optimal log time algorithm closest pair problem dimension 
algorithm uses conquer paradigm 
bentley planar version algorithm due shamos idea divide conquer suggested strong 
simplicity consider planar case 
set points plane 
compute median coordinates points partition subsets equal size points resp 
left resp 
right vertical line algorithm recursively solve closest pair problem sets separately 
ffi resp 
ffi minimum distance resp 
ffi smaller numbers 
compute closest pair set remains find pairs theta distance ffi having minimum distance 
resp 
set points resp 
right resp 
left vertical line gamma ffi resp 
ffi 
clearly consider points sort points coordinates 
scan points 
point resp 
compare points resp 
coordinates gamma ffi ffi 
pair points theta distance ffi scan find pair theta having minimum distance 
pair closest pair set pairs encountered merge step distance larger ffi ffi minimum distance difficult see algorithm correctly solves closest pair problem 
denote running time set points 
lemma implies merge step point compared constant number points 
satisfies recurrence relation log 
follows log 
merge step consists parts 
sorting step log time 
second step scan points takes linear time 
algorithm improved making step 
start algorithm sort points coordinates 
having computed median walk points sorted order obtain sets sorted coordinates 
similarly obtain points sorted order 
way merge step takes time running time set points sorted coordinates satisfies recurrence solves log 
easy see entire algorithm uses linear space 
turns non trivial extend algorithm higher dimensional space 
bentley shamos bentley ph thesis showed divide conquer approach lead optimal log time algorithm fixed dimension 
see bentley 
set points ir step sort points coordinates log log time 
time compute hyperplane perpendicular coordinate axes subsets side contain points ii ffi denotes smallest minimum distances ffi ffi respectively slabs width ffi contains gamma points 
note ffi known hyperplane computed 
recursively compute ffi ffi resp 
points resp 
side distance ffi merge step find pairs theta distance ffi pair minimum distance 
note sets sparse sense cube sides length ffi contains constant number points 
bentley solves merge step divide conquer algorithm 
denotes size set step takes log time 
note gamma 
running time step entire algorithm computing closest pair satisfies recurrence solves log 
plane sweep algorithm hinrichs nievergelt gave elegant algorithm planar case plane sweep paradigm 
sort points coordinates 
sweep vertical line plane left right 
sweep maintain invariant computed closest pair points left sweep line 
ffi distance closest pair points distance ffi left sweep line stored leaves balanced binary search tree sorted coordinates 
leaves tree linked pointers 
sweep line moves point actions performed 
search tree follow pointers link leaves find points coordinates gamma ffi ffi 
lemma constant number points 
compare distances points way necessary update ffi 
insert tree delete tree points having distance larger ffi new position sweep line 
easy see algorithm correctly solves closest pair problem 
running time bounded log 
deterministic algorithm uses indirect addressing previous section saw algorithms solve closest pair problem 
planar case algorithms easily implementable 
fast practice 
saw algorithm optimal fixed dimension bentley 
algorithm complicated uses multi dimensional divide conquer merge step multi dimensional conquer 
smid gave practical algorithm solving closest pair problem fixed dimension algorithm fact suffices construct grid cell contains points ii cell contains points 
ffi side length cells grid 
property implies minimum distance equal dffi 
ffi grid suffices compare point points contained cell gamma neighboring cells 
property ii implies way point compared constant number points 
ffi grid compute closest pair log time linear time represent grid appropriate way 
main problem compute grid size ii holds 
grid size exist 
ffi side length smallest axes parallel dimensional cube contains points ffi grid ffi ffi cell containing points ffi grid ffi ffi cell containing points particular ffi defines grid ii hold 
note ffi contained set differences jp gamma range points binary search set 
course set size theta 
maintain implicitly linear space technique similar developed johnson mizoguchi 
array contains th coordinates points sorted order 
element store integers ij ij invariant maintained ffi contained set differences ij gamma ij ij 
initially ij ij sequence log iterations 
iteration 
ij ij take difference ij ij gamma give weight ij gamma ij 
gives gamma weighted differences 
time compute weighted median ffi differences 
construct ffi grid compute maximum number points contained cell grid 
cases 
correct grid size 
second assume ffi ffi ij ffi assign ij ij ij gamma 
guarantees invariant holds 
know ffi ffi case ij ffi assign ij ij ij 
invariant correctly maintained way 
choose weighted median set differences reduced factor quarter 
logarithmic number iterations algorithm correct grid size 
note algorithm necessarily find ffi grid size ii hold purposes 
step iteration performed linear time 
entire algorithm takes log time 
remarks machine model 
need indirect addressing access entries arrays clear avoided 
algorithm need non algebraic floor function order count maximum number points grid cell 
need floor function determining grid cell containing point 
avoided degraded grid basically properties standard grid 
build search degraded grid floor function 
degraded grid give intuitive idea standard ffi grid divide space slabs width ffi 
grid defined fixing arbitrary point ir lattice point grid 

lattice point slab th axis consists set points space th coordinates ffi ffi integer degraded ffi grid slabs 
difference slabs necessarily start multiples ffi 
slabs width ffi slabs contain points width exactly ffi 
ffi grid may defined independently point set fixing arbitrary point ir lattice point degraded ffi grid defined terms point set stored 
give formal definition treating case 
definition set real numbers ffi positive real number 
sequence real numbers 
ffi 

point ffi 
collection intervals called dimensional degraded ffi grid construct dimensional degraded ffi grid sort elements sorted sequence 
assume defined 
element lies half open interval ffi set ffi 
set value smallest element larger construction stops visited elements extend definition degraded grid higher dimensions 
definition set points ir ffi positive real number 
set th coordinates points ij dimensional degraded ffi grid set collection dimensional cells ij called dimensional degraded ffi grid see example 
lemma follows immediately 
oe oe ffi ffi ffi ffi ffi ffi example degraded ffi grid 
lemma point cell degraded ffi grid contains integer 
points distance contained gamma cells surround give simple algorithm constructing dimensional degraded ffi grid 
assume points stored dimensional array sort elements give element pointer occurrence construct dimensional degraded ffi grid ij set algorithm 
construction element denotes th coordinate point ij follow pointer store point numbers ij point stores vectors length point vectors contained cell lower left corner 
cell part th ffi slab th axis 
vectors implicitly define degraded ffi grid 
note integer range sort vectors time radix sort 
gives non empty cells degraded grid sorted lexicographical order 
randomized algorithms section give algorithms solve closest pair problem log time 
course algorithms implemented machine model powerful algebraic computation trees 
algorithms section randomization floor function indirect addressing 
algorithms basic approach similar section 
step grid constructed closest pair contained grid cell neighboring cells ii total number pairs contained cell neighboring cells bounded high probability worst case 
second step compute closest pair minimum distance pairs 
perfect hashing second step takes expected time 
main problem find grid size 
rabin algorithm oldest randomized closest pair algorithm dates back due rabin 
fact considered seminal randomized algorithms 
algorithm uses random sampling 
random subset having size ffi minimum distance consider grid cells size ffi 
total number pairs contained cell gamma neighboring cells 
note random variable 
rabin proves bounded probability gamma gamman omega gamma high probability ffi gives grid size 
compute value ffi 
rabin proposes choosing random subset size js compute minimum distance ffi brute force algorithm time 
high probability ffi gives grid size set ffi find ffi expected time 
entire algorithm takes expected time 
rabin wrote implementation hashing procedure left open 
gap filled perfect hashing scheme fredman koml os szemer edi 
dietzfelbinger gave complete description implementation rabin algorithm 
particular provide details hashing procedure modify algorithm random bits needed 
fortune hopcroft gave alternative algorithm find grid size 
assume special operation ffi available computes unit time cell ffi grid contains point model give recursive algorithm computes grid size log log worst case time 
grid size closest pair computed linear time 
unbounded space available gives closest pair algorithm log log worst case running time 
brief description algorithm computes grid size 
start grid size ffi equal times side length smallest axes parallel cube containing insert points ffi grid cell contains points points inserted 
cell containing point call algorithm recursively points 
recursive calls completed set ffi smallest value returned recursive calls 
start algorithm new value ffi 
points inserted current grid call algorithm recursively cells containing point 
sieve algorithm khuller matias give randomized sieve algorithm find grid size 
algorithm iteratively discards points known far away points 
clearly points play role determining closest pair 
description algorithm 
recall notion neighborhood grid defined section 
sequence iterations 
initially set 
th iteration pick random point compute nearest neighbor brute force 
distance perfect hashing store points grid determine set points contain points neighborhoods 
set proceed iteration 
algorithm stops outputs consider th iteration 
point properties hold 

point neighborhood belongs 
neighborhood empty belong claim 
proved follows 
point neighborhood grid 
note 
contained set result 
particular sequence decreasing 
number iterations algorithm 
claim right inequality trivially holds distance prove left inequality closest pair resp 
index resp 

assume 
note 
property belong 
algorithm computes grid size approximates minimum distance constant factor 
grid size find closest pair hashing techniques linear expected time 
analyze expected running time sieve algorithm 
note perfect hashing th iteration takes js expected time 
expected size define 
note 
show 
implies gamma total expected running time iterations proportional js js gamma entire algorithm takes linear expected time 
remains show 
claim holds 
assume 
consider conditional expectation js js 
point second property implies take points label 
point chosen randomly set equal probability 
js js follows js js delta pr js 
randomized incremental algorithm final algorithm section due golin 
follows randomized incremental construction paradigm 
see seidel 
number points randomly fp algorithm computes order 
assume ffi computed 
assume points stored ffi grid 
compute 
point minimum distance ffi points neighborhood cell 
lemma constant number points neighborhood 
find points perfect hashing compute distances distances equal ffi know ffi 
case just add point grid proceed iteration 
smallest new distance equal 
case store points new grid 
worst case build new grid iteration leading quadratic running time 
show expected running time algorithm linear 
sake analysis assume run algorithm backwards 
iteration viewed picking random point deleting possibly current grid 
possible cases 
case point part closest pair set contains closest pair part 
case current grid deleting iteration takes constant expected time 
second case set contains closest pairs contain point removal increases minimum distance current grid expected time 
random point happens probability 
iteration takes constant expected time 
remaining case set contains exactly closest pair part 
removal increases minimum distance current grid expected time 
random point happens probability 
iteration takes constant expected time 
follows entire algorithm takes linear expected time 
shown high probability running time bounded log log log 
shown algorithm implemented randomized algebraic computation tree model degraded grids 
expected running time increases log high probability 
optimal model 
see schwarz 
extensions closest pair problem nearest neighbors problem set points ir looked problem computing minimum distance obvious generalization compute point nearest neighbor point closest consider planar case 
shamos hoey algorithm section easily extended solve nearest neighbors problem optimally log time linear space 
hinrichs nievergelt extend plane sweep algorithm section solves problem complexity bounds 
nearest neighbors problem turns complicated higher dimensions 
bentley shows divide conquer algorithm section adapted solves dimensional problem log gamma time 
particular optimal 
important property merge step fact point nearest neighbor constant number points 
see proof 
log time algorithm nearest neighbors problem arbitrary dimension clarkson 
algorithm uses randomization running time expected floor function 
vaidya solves problem deterministically log time 
algorithm implemented algebraic computation tree model optimal 
algorithms carefully constructed subdivisions ir rectangles 
callahan kosaraju defined called separated pair decomposition captures important notions algorithms 
shown decomposition solving proximity problems nearest neighbors problem 
view give algorithm separated pair decomposition 
separated pair decomposition separated pair decomposition appeared time callahan kosaraju 
see full version 
callahan ph thesis contains detailed discussion 
mention salowe notion implicitly 
intuitively separated pair decomposition point set partition set pairs distinct points collection pairs sets distances points points large compared distances define notion precisely denote fixed positive constant called separation constant 
sets points smallest axes parallel rectangles containing respectively 
sets said separated dimensional balls bx having radius say containing rectangles respectively minimal distance balls equal sr definition set points ir constant 
separated pair decomposition wspd set pairs nonempty subsets ffa fa fam bm gg 

unordered pair distinct elements fa bg exists unique pair fa decomposition 
separated integer called size wspd 
describe algorithm callahan kosaraju constructing decomposition 
construct binary tree called fair split tree recursively defined follows 
consists point tree consists node 
assume contains point 
consider smallest axes parallel rectangle contains dimension rectangle longest side 
split rectangles cutting th interval equal parts 
subsets contained new rectangles 
note non empty 
fair split tree consists root subtrees fair split trees respectively 
leaves fair split tree correspondence points node tree subset corresponds leaves subtree say represents fair split tree need balanced may depth large omega gamma naive implementation recursive definition leads quadratic running time 
callahan kosaraju show reduce construction time log 
partial fair split tree defined way fair split tree sets represented leaves may size larger 
main idea efficient construction construct partial fair split tree leaf represents points 
leaf fair split tree constructed points represented leaf algorithm recursively 
precise consider set sequence splits 
split results non empty subsets 
split sequence performed larger sets 
larger sets result th split st split consists splitting smallest axes parallel rectangle containing equal parts longest side 
process set size 
list storing points sorted th coordinates cross lists sequence splits performed time 
key observation split th dimension walking ends th list split takes time proportional size smaller resulting subsets 
algorithm correctly computes fair split tree log time 
detailed proof refer reader 
sketch fair split tree order obtain wspd need notation 
set points denotes length longest side smallest axes parallel rectangle contains sets points represented different nodes fair split tree 
write oe node representing precedes node representing postorder 
extend ordering obvious way 
internal node fair split tree denote sets points represented children wspd obtained calling procedure internal node fair split tree 
procedure 
separated returns pair fa terminates 
assume oe 
swap note contains point separated 
node representing children 
call recursively call procedures return union outputs output 
pairs reported procedure calls gives wspd entire set note pair represented just pointers appropriate nodes fair split tree 
analyze size computed wspd running time algorithm claim follows packing argument subset represented non root node fair split tree denote subset represented parent node 
claim subset represented non root node computed wspd contains constant number pairs form fa bg oe 
implies wspd computed size 
time needed compute fair split tree bounded 
set points ir log time compute separated pair decomposition show optimal 
need lemma proof trivial 
lemma assume separation constant larger 
fa bg pair wspd assume pair points nearest neighbor fag 
closest pair lemma implies pair wspd wspd find closest pair time proportional size wspd 
proves computing wspd takes omega gamma log time algebraic computation tree model 
wspd solving nearest neighbors problem 
lemma consider pairs wspd sets singleton 
important observation lemma generalization fact point nearest neighbor constant number points 
lemma sets points ir fag separated 
assume pairs distinct points distance smallest sphere containing equal distance size bounded constant depends dimension separation constant node fair split tree set points pair ffag contained wspd ancestor define set points distance smallest sphere containing equal smallest distance point 
lemma implies set size 
compute sets top 
root fair split tree empty 
node parent initially set union set points ffag pair wspd 
remove elements satisfy definition 
computing takes constant time 
need linear time compute sets 
point nearest neighbor leaf fair split tree represents easy see contained set 
considering leaves find nearest neighbors linear time 
proves solve nearest neighbors problem log time 
closest pairs problem version problem set points ir integer compute smallest distances set algorithms problem due smid 
gives incremental algorithm space efficient variant range trees solves problem log log time 
planar case improved log log straightforward generalization sweep algorithm section 
case result improved computing point nearest neighbor selecting pairs distance smallest 
gives set points contains closest pairs set apply algorithms small set 
result algorithm solving closest pairs problem log log time 
dickerson sack give simple algorithm planar case uses delaunay triangulation 
description algorithm 
set points plane compute delaunay triangulation dt point sort edges dt incident increasing order length 
sort edges dt length 
insert shortest edges dt heap 
larger number edges dt insert edges heap 
start enumerating closest pairs 
delete pair say stored heap minimum distance report pair th closest pair 
delaunay edges form ii pair reported insert heap 
similarly delaunay edges form ii pair reported insert heap 
correctness algorithm property delaunay triangulation 
points edge dt points xm edges dt ii iii iv xm 
property dickerson show th closest pair pair contained heap time distances smaller reported 
show running time algorithm bounded log log 
efficiency algorithm dickerson heavily depends fact delaunay triangulation linear size 
hold dimensions greater 
dickerson eppstein circumvent result bern eppstein gilbert set points ir superset having size delaunay triangulation dt size bounded degree 
superset computed log time 
applying algorithm dt gives closest pairs 
clearly correctness proof complicated planar case delaunay triangulation see 
entire algorithm solves closest pairs problem log log time 
note algorithm reports closest pairs sorted order 
variant reports closest pairs particular order log time 
optimal algebraic computation tree model 
arya smid shown algorithm works replace delaunay triangulation bounded degree spanner 
see section optimal algorithm closest pairs problem due salowe 
combines variant vaidya algorithm parametric search technique compute th smallest distance 
variant vaidya algorithm enumerates pairs points distance equal dffi 
number pairs bounded closest pairs 
selection algorithm get closest pairs 
entire algorithm takes log time 
salowe algorithm optimal complicated uses parametric search technique 
smid give algorithm complicated data structures 
algorithm basically section 
consider degraded ffi grid set 
see section number cells grid arbitrarily 
denote number points contained th cell sigma ffi algorithm smid computes grid size ffi sigma ffi 
grid size computed log time simple variant search procedure sketched section 
degraded dffi grid constructed pairs points contained cell neighboring cells enumerated 
number enumerated pairs bounded include closest pairs 
total running time algorithm log 
indirect addressing algorithm falls outside algebraic computation tree model 
approach solves fixed radius near neighbors problem ffi pairs points distance ffi enumerated time proportional log plus number reported pairs 
see 
algorithms implemented von 
turns algorithm faster 
algorithm performs higher dimensions 
mention separated pair decomposition wspd solve closest pairs problem optimally 
recall set points denotes smallest axes parallel rectangle contains ffa fa fam bm gg wspd listed increasing order 
report closest pairs find smallest index ja delta jb compute pairs fa bg wspd separation constant 
gives sequence pairs points contains closest pairs 
selection algorithm find closest pairs 
details see 
point clustering problems previous sections closeness measures distances pairs points 
section consider point clustering problems closeness measure defined subset points 
precise set points ir integer want find subset size minimizes closeness measure 
example may want minimize diameter points smallest enclosing circle smallest enclosing axes parallel cube clearly different closeness measures lead different optimal point subsets 
mention results area 
dobkin guibas technique find point subset perimeter convex hull minimized 
give polynomial time algorithm solving problem 
give improved algorithm constructs ck order voronoi diagram points suitable constant show optimal point subset contained set ck points corresponding region diagram 
kn regions apply algorithm corresponding subset size ck 
aggarwal improved technique showing suffices consider regions ck order voronoi diagram 
closeness measures diameter enclosing square perimeter enclosing rectangle considered 
smid simple plane sweep algorithm finding points set planar points enclosing axes parallel square minimal 
efrat sharir ziv apply parametric search technique finding points enclosing circle minimal 
matousek gives simpler algorithm problem replaces parametric search randomized search technique 
algorithms point clustering problems inefficient large values matousek gives algorithms especially efficient close generalizing lp type problems optimization problems violated constraints 
eppstein erickson improve general framework 
main idea replace expensive order voronoi diagram sets nearest neighbors points way number size subsets expensive algorithm applied reduced 
framework improved datta 
consider closeness measure point subset minimizes measure 
technique works provided measure satisfies condition value proportional size smallest axes parallel dimensional cube contains points examples diameter radius enclosing ball size enclosing axes parallel cube perimeter enclosing rectangle 
area enclosing rectangle satisfy condition 
algorithm constructs degraded ffi grid cell contains points ii cell contains points grid computed log time applying search technique section 
cell grid set sc points contained inside cell constant number neighboring cells collected 
js compute optimal point subset sc expensive algorithm 
point subset way having minimum value optimal subset entire set clear way expensive algorithm called times 
detailed description algorithm applications closeness measures 
line closest pair problem section give algorithms line closest pair problem 
problem maintain closest pair set insertions points 
want design data structure efficiently updates closest pair points inserted data structure compute closest pair point set elements available 
get point just insert data structure update closest pair 
saw algebraic computation tree model omega gamma log lower bound static closest pair problem 
immediately implies omega gamma lower bound insertion line version problem 
main result section data structure linear size matches lower bound 
current point set ffi minimum distance point inserted 
assume contained clearly minimum distance new set fpg ffi part closest pair 
order update closest pair perform steps 

find point ffi 
point closest pair change insertion find point closest case new closest pair 

insert new point data structure 
ball radius ffi centered lemma implies contains constant number points strategy implementing step find subset contains points size small 
ideally size bounded constant size logarithmic jsj suffices 
subset trivially update closest pair computing distances points finding subset efficiently achieved maintaining subdivision ir cells cell contains points ball overlaps cells 
set obtained performing point location queries subdivision 
having performed step add point cell subdivision contains necessary update subdivision 
turn concrete implementations insertion procedure 
algorithms logarithmic method algorithms applying bentley logarithmic method 
application appeared smid 
see schwarz 
current set points ir denote size 
write binary number system 
partition arbitrarily subsets subset size real number ffi ffi 
data structure consists 

closest pair distance ffi 

ffi grid storing points assume non empty cells grid stored balanced binary search tree sorted lexicographically lower left corners 
consider insertion new point find cell ffi grid contains gamma neighboring cells 
compute distances points contained cells 
find distance ffi update ffi closest pair 
remains update rest data structure 
index gamma 
fpg gamma ffi ffi 
build ffi grid set discard grids sets gamma implicitly making sets empty 
prove correctness algorithm note ffi suffices compare points neighborhood ffi grid 
closest pair updated correctly 
new value ffi satisfies fpg ffi fpg ffi 
updated data structure contains grid storing points binary representation contains position analyze complexity insertion algorithm 
note ffi neighborhood ffi grid contains constant number points spend log time grid 
data structure contains logarithmic number grids part insertion algorithm takes log time 
consider second part algorithm build ffi grid 
step takes js log js time sorting 
store points appropriate sorted order grid built js time 
see details 
take value zero blog nc insertion time fluctuates widely 
claim amortized time second step bounded log 
prove claim assume start empty set perform sequence insertions 
number times insertions build grid subset size equal number integers consisting blog nc bits significant bits equal st bit equal zero 
blog nc gammaj total time spent second step insertions bounded blog nc delta blog nc delta log proves claim 
shown running time entire algorithm maintaining closest pair bounded log worst case time plus log amortized time insertion 
standard techniques see overmars pages transform data structure second step takes logarithmic time worst case 
data structure maintains closest pair log worst case time insertion 
structure size 
note step algorithm takes log time second step takes log time 
suggests improvement possible 
writing binary number system number system base log 
see overmars pages schwarz 
way steps take log log log time space remains linear 
data structure linear size maintains closest pair log log log worst case time insertion 
note algorithm uses floor function order find grid cell containing new point replacing grid degraded grid algorithm implemented algebraic computation tree model 
possible improve data structure 
consider data structure representation binary number system 
main observation insert point find cell ffi grid contains plus neighboring cells 
perform point location queries logarithmic number grids query point schwarz smid shown fractional cascading technique extended queries solved log log log time 
main problem grids different grid sizes 
ordering grid cells introduced compatible sizes 
ordering defined 
result locating point grids takes log comparisons 
ordering quite complicated comparison takes log log time 
get data structure size maintains closest pair log log log amortized time insertion 
note need floor function result 
probably worst case details tedious 
clear ordering grid cells defined degraded grids standard grids 
mention extension data structure 
structure described heavily uses fact insert points 
turns structure adapted dealing semi online updates defined dobkin suri 
sequence updates called semi online insertions line arrive unknown order point inserted told updates moment insertion deleted 
extra information deletions guarantee point deleted contained grid storing small subset 
deletion minimum distance may increase store extra information data structure updating closest pair efficiently 
way get data structure size maintains closest pair log worst case time insertion 
details refer reader dobkin suri smid 
algorithm optimal dimension section give data structure maintains closest pair log gamma amortized time insertion 
algorithms implemented algebraic computation tree model result optimal planar case 
results section appeared smid 
previous section maintained sequence subdivisions ir subdivision grid 
store point set subdivision maintained way need floor function 
tree see edelsbrunner hilbert 
data structure stores collection non overlapping axes parallel dimensional rectangles point location queries performed log gamma time 
tree uses space 
shown data structure dynamic operations performed log amortized time insert rectangle collection rectangles new collection non overlapping split rectangle axes parallel rectangles 
deletions merges supported complexity increases factor log log usage dynamic fractional cascading 
current set points denote size 
data structure consists 

closest pair distance ffi 

subdivision ir non overlapping dimensional axes parallel rectangles 
rectangle subdivision sides length ffi contains log gamma points 
rectangles subdivision stored tree 
rectangle store list points contained assume insert new point update data structure follows 
perform point location queries tree query points ffl ffl ffl ffl gammaffi ffig 
compute distances points contained rectangles 
find distance ffi update ffi closest pair accordingly 
see 
insert list rectangle belongs 
updated list contains log gamma points perform sequence split operations second property data structure satisfied additionally ii new rectangles contains half points contained details split operations refer reader 
section describe split operation slightly modified subdivision 
split operation suffices 
mentioned property dynamic trees follows entire insertion procedure takes log gamma log amortized time 
consider new rectangle subdivision 
moment contains log gamma points 
rectangle split insertions ffl ffl ffl ffl ffl ffl ffl ffl ffl point location queries planar case 

insertions split operation necessary 
amortized insertion time entire data structure bounded log gamma 
clear uses linear space 
algorithm optimal dimensions section give optimal data structure maintaining closest pair insertions 
result due schwarz smid snoeyink 
basically subdivision previous section 
improvement stems better point location data structure 
sequence insertions maintain hierarchical collection dimensional rectangles 
data structure stores information 

closest pair distance ffi 

binary tree representing hierarchical collection 
node stores rectangle 
rectangles stored leaves form partition ir represent current subdivision 
leaf store list points contained corresponding rectangle 
internal node rectangle stored equal union rectangles stored children 

current subdivision consists non overlapping rectangles rectangle sides length ffi ii rectangle contains points note order solve point location query current subdivision walk tree query time proportional height see may linear assume moment query algorithm 
insert new point perform point location queries section update closest pair 
insert rectangle containing 
rectangle contains points split follows 
form theta theta points new set contained compute value resp 
minimum resp 
maximum th coordinate point index gamma ffi 
follows lemma index exists 
gamma 
split rectangles theta theta gamma gamma theta theta theta theta theta theta gamma gamma theta theta theta theta tree give leaf storing new children corresponding give new leaves appropriate lists points 
hard see algorithm correctly maintains closest pair 
estimate running time observe perform constant number point location queries split operation 
tree may linear height worst case running time insertion algorithm 
possibilities improve running time 
centroid decomposition represent tree balanced tree 
fi centroid node removal results components containing fraction fi nodes 
centroid decomposition obtained repeatedly choosing centroids components 
guibas show decomposition computed linear time 
centroid decomposition point location queries solved logarithmic time 
maintain efficiently apply partial rebuilding technique 
see lueker overmars chapter iv 
way split operation takes log amortized time 
get algorithm maintaining closest pair log amortized time insertion space 
version algorithm implemented 
second improvement obtained storing hierarchical subdivision dynamic trees 
cohen tamassia give general technique maintain hierarchical subdivisions point location queries operations split operation take log time worst case 
detailed discussion application technique problem see schwarz 
technique get main result data structure maintains closest pair log worst case time insertion 
data structure uses linear space algorithms fit algebraic computation tree model 
solves line closest pair problem optimally 
mention techniques section generalized get efficient line solutions point clustering problems large class closeness measures 
see section datta schwarz 
dynamic closest pair problem turn fully dynamic closest pair problem 
maintain closest pair point set insertions deletions allowed 
note intuitively insertions easier handle deletions point inserted check neighborhood new point 
hand delete point part closest pair find new closest pair 
deletions case showed divide conquer algorithm section turned data structure maintains closest pair deletions supported 
sketch structure planar case 
set points plane 
store points leaves balanced binary search tree sorted coordinates 
node tree denote sw subset stored subtree internal node contains additional information 
left right child respectively 
store minimum distance set sw value ffi min value mw maximum coordinate minimum coordinate store tree tw storing points sw distance ffi vertical line mw points stored leaves tree sorted coordinates 
store heap hw storing distances points tw positions tree 
note minimum ffi smallest element hw maintain heap contains smallest elements heaps hw clear smallest element stored minimum distance set delete point search tree coordinate 
node encountered update relevant information 
important observation values ffi increase 
point sw inserted tree tw 
point inserted tw causes constant number updates heaps hw shows data structure maintains closest pair log amortized time deletion 
clearly structure uses log space 
result generalized dimension way algorithm section generalizes 
result data structure size log gamma maintains closest pair log amortized time deletion 
fully dynamic data structure sublinear update time planar voronoi diagram maintained time insertion deletion see overmars aggarwal maintain closest pair planar point set time update 
fully dynamic data structure maintains closest pair sublinear time smid 
idea 
maintaining minimum distance start sorted list smallest distances 
point deleted distances occurs deleted 
easily shown distances 
theta deletions list non empty contain minimum distance current set 
gets empty compute new list continue 
initial list computed log time 
distances deleted deletion space efficient variant range tree 
see smid 
range tree insertions points supported easily 
resulting data structure maintains closest pair log amortized time insertion deletion uses space 
standard techniques update time worst case 
solution polylogarithmic update time fully dynamic closest pair data structure having polylogarithmic update time due smid 
describe detail technique solving problems dynamic point clustering problems constructing spanners 
moment clear dynamic closest pair data structures solving problems 
description data structure follows arya smid simpler 
simplicity assume section 
data structure range tree see lueker willard lueker 
set points plane 
data structure form layered range tree 
balanced binary search tree called layer tree storing points leaves sorted coordinates 
node tree subset stored subtree contains pointer root balanced binary search tree called layer tree storing points leaves sorted coordinates 
define third layer data structure need introduce notation 
node layer tree 
root layer tree 
node layer tree contains pointer denoted real number maximum coordinate left subtree minimum coordinate right subtree similarly real number maximum coordinate left subtree minimum coordinate right subtree denote point coordinates define third layer data structure 
node layer tree consider corresponding point set points stored subtree ui subset contained th quadrant point ui subset ui consisting points closest measured metric 
node contains pointers 
balanced binary search trees 
th tree contains points ui leaves sorted distances point 
variable having value ui 
case pair points ui realizes 
done description data structure 
saw layer structure corresponding value 
node layer tree 
leaf stores variable having value 
leaf left right child respectively 
variable stored layer structure corresponds node stores variable having value min case pair points realizes 
concludes description data structure 
lemma value stored root layer tree 

proof note delta variables value subset entire data structure contains layer structures substructures 
show variable layer structures value follows 
show layer structure exists 
consider closest pair highest node layer tree contained different subtrees similarly highest node layer tree pointed contained different subtrees node contains pointer layer structure ds claim variable stored ds value 
complete proof lemma 
consider point assume point origin coordinate system 
set points stored ds contained th quadrant 
note contained consider subset note 
show contained 
assume case 
assume belong lies quadrant coordinates positive 
note contains points 
ffi maximum distance point origin 
contained box ffi partition sides length ffi 
contains points ffi 
consider point point distance ffi origin 
index th coordinate equal ffi 
choice nodes implies th coordinate negative 
distance greater ffi implies ffi 
contradiction 
shown contained completes proof 
data structure stores minimum distance point set insert delete point search coordinate layer tree 
node search path search coordinate corresponding layer tree 
node encountered update corresponding layer structure 
walk back paths update values delta 
guarantee data structure remains balanced take binary trees class bb ff trees rotations 
see mehlhorn page 
way amortized update time entire data structure bounded log 
easy show structure uses log space 
turns orderings layer structures similar dynamic fractional cascading applied 
way amortized update time reduced log log log 
details reader referred 
standard techniques result generalized fixed dimension result data structure size log maintains closest pair log log log amortized time insertion deletion 
datta shown data structure section extended dynamic point clustering problem maintain optimal point subset insertions deletions points 
see section schwarz 
arya smid data structure constructing spanners 
see section randomized data structure polylogarithmic update time linear space data structure previous section polylogarithmic update time uses linear space 
appeared goal obtain polylogarithmic update time space 
goal achieved golin randomized sense 
basically extend static closest pair algorithm khuller matias section 
algorithm khuller matias data structure built making sequence iterations 
order algorithm dynamic maintain information computed sequence 
data structure defined randomized procedure 

th iteration pick random point called pivot compute nearest neighbor distance perfect hashing store points grid 
determine set consisting points contain points neighborhoods 
perfect hashing store set grid 
point compute value min ji store values heap algorithm stops 
set proceed iteration 
results section imply 
number iterations algorithm 
entire algorithm takes linear expected time 
difficult see minimum distance set equal smallest element contained heaps 
say 
min gammad gammad compute value suffices perform constant number search operations grids grids 
value computed constant time 
second minimum distance equal smallest element contained heaps gammad gammad happens insert new point 
goal update data structure way looks built procedure 
updated data structure statistical properties data structure fqg built scratch procedure 
brief intuitive description insertion algorithm 
assumption pivot random element generate pivot fqg suffices retain pivot probability js js choose probability js 
chosen discard build completely new data structure procedure 
case insertion algorithm terminates 
note happens probability js expected cost 
assume remains unchanged pivot 
check nearest neighbor changed 
known nearest neighbor points 
see 
means changes points 
chosen uniformly follows probability changing js changes algorithm build completely new data structure terminate procedure 
expected cost 
left case remain unchanged 
denote fqg need determine set containing points contain points neighborhood 
contain points neighborhood go needs done 
case terminate procedure 
contains possibly points set points deleted due insertion called need insert gives rise set fqg inserted insertion algorithm certain points move levels data structure 
shown total number points move bounded constant 
particular total number query update operations grids bounded log total number update operations heaps bounded constant 
implement grids dynamic perfect hashing entire insertion algorithm takes log expected time 
deletion algorithm basically reverse insertion algorithm 
particular points move lower levels insertion move back previous locations deleted directly 
details refer reader 
shown expected time deletion bounded log dynamic perfect hashing 
result randomized data structure stores set points ir minimum distance time 
expected size structure maintain insertions deletions log expected time update 
algorithms assume floor function available unit cost 
dynamic perfect hashing assumed points come bounded region ir note result randomization coin flips algorithms 
particular assumption points inserted deleted come bounded region arbitrary 
degraded grids remove floor function machine model 
way searching updating grid takes log time 
result get randomized data structure having expected size maintains closest pair log expected time insertion deletion 
details modified data structure tedious see 
data structure implemented randomized algebraic computation tree model 
data structures section high probability bounds proved 
see 
deterministic solution polylogarithmic update time linear space deterministic data structure maintains closest pair polylogarithmic time linear space due kapoor smid 
give deterministic data structure maintaining closest pair improves result section 
space saving transformation transforms dynamic closest pair data structure super linear size uses space 
applying transformation times leads dynamic closest pair data structure linear space 
describe result need introduce notation 
set points ir point ir box denotes smallest axes parallel cube centered contains points fpg 
words side length box twice distance th resp 
th neighbor resp 

point ir denotes set points fpg contained interior box 
data structure lemma proof straightforward 
lemma set contains closest pair lemma implies suffices maintain distances heap 
smallest element contained heap minimum distance note heap stores linear number elements 
order maintain heap points inserted deleted maintain set sg 
see done insert new point able compute box corresponding set 
computing neighbors section see standard range tree 
find boxes box contain 
constant number boxes 
box replaced smaller box contains points new point set 
support operations standard segment tree see dynamic variant tree see extended support dynamic fractional cascading 
efficiency query algorithms data structures depends fact set sg constant overlap sense box contains centers boxes interior 
centers precisely points fqg 
data structures efficiently update heap delete point set assume segment tree store elements set sg 
insertion deletion point perform constant number query update operations range tree segment tree heap 
amortized update time entire data structure bounded log gamma log log 
size data structure bounded log gamma 
see 
reduce space complexity additional techniques needed 
solution just sketched range tree segment tree log gamma space 
need range tree computing boxes box 
unfortunately linear space solution problem having polylogarithmic query update times known 
order reduce space complexity avoid range tree 
replace segment tree tree uses linear space 
update time increases slightly 
transformation dynamic closest pair data structure ds having linear size produces dynamic closest pair structure uses space 
transformed data structure composed sets partition current point set boxes box points remain fixed sequence updates need range tree set set stored dynamic data structure ds reduce space subset entire set contains points involved updates 
order guarantee amortized behavior entire data structure periodically rebuilt 
result follows 
ds data structure dynamic closest pair problem 
denote size amortized worst case update time ds respectively 
non decreasing integer function 
assume smooth 
function called smooth theta theta 
transformation produces data structure dynamic closest pair problem having 
size 
amortized update time log gamma log 
applying transformation twice closest pair data structure log gamma log log log log log respectively get data structure size maintains closest pair log gamma log log amortized time insertion deletion 
apply transformation times constant appropriate choices function gives data structures sizes log log log having amortized update times log log log log log log respectively 
dynamic solution simplicial cones section describes solution dynamic closest pair problem due 
main idea reduce entire problem certain range searching problems standard data structures solve 
technique appeared time gabow bentley tarjan 
solving post office problem simple metrics 
see section simplicity consider planar case 
denotes set points plane 
sufficiently large integer constant rotate positive axis angles delta gives rays 
cones bounded successive rays 
fixed ray emanates origin contained define approximate distance function ffi follows 
points plane 
gamma contained cone ffi 
gamma ffi defined distance origin orthogonal projection gamma ray 
note general ffi ffi 
distance functions property 
points gamma gamma contained cone assume ffi ffi 

proof see 
set pairs ffi ffi set size property just mentioned contains closest pair 
order maintain closest pair suffices maintain pairs heap ordering distances 
point plane cone translated apex point fpg ffi minimal computed selecting points bounding rays point furthest left consider ray horizontal 
range searching techniques compute point unfortunately difficult maintain set efficiently 
shows subset contains closest pair maintained insertion deletion constant number query update operations range searching data structure performed 
technique generalized fixed dimension simplicial cones angular diameter 
cone bounded hyperplanes range searching methods applied 
constant depending dimension number cones suffice 
explicit construction cones see yao 
standard range tree get dynamic closest pair data structure size log gamma update time log 
hand data structure due chazelle get data structure size log gamma maintains closest pair log log log time insertion deletion 
dynamic solution separated pair decomposition saw sections separated pair decomposition wspd solve proximity problems 
order apply dynamic problems clearly need efficient ways update wspd 
callahan kosaraju show maintain fair split tree section logarithmic time insertion deletion linear space 
main idea similar developed described section 
give solution 
main problems maintaining information closest pair fact may points contained pairs 
callahan kosaraju show get problem introducing dummy points 
framework describes main properties algorithms wspd show maintain computations framework 
show problem maintaining closest pair fits framework 
result get dynamic closest pair data structure linear size log update time 
optimal dynamic closest pair data structure problem designing optimal dynamic closest pair data structure solved shows maintain closest pair log worst case time data structure size 
algorithms belong algebraic computation tree model optimal 
important ingredient hierarchical subdivision ir axes parallel rectangles 
define subdivision need definitions 
axes parallel rectangle side length th dimension 
call box theta theta rectangle 
boxes obtained replacing th interval respectively set obtained cut 
axes parallel rectangles 
say equal exists sequence boxes obtained gamma cut 
hierarchical subdivision represented binary tree node store boxes sb 
algorithms conditions satisfied 

node sb boxes 

node sb 

node sb contain points 
internal node children boxes obtained sb cut 

leaf sb boxes contain exactly point leaf point contained denote box 
see maintain tree insert delete points assume want delete point walking find leaf 
parent child leaf set sb delete leaves leaf delete leaf set delete node making child parent 
insertions difficult describe 
assume want insert point walk cases occurs contained root ii reach leaf contained iii reach internal node contained sb 
explain third case handled 
cases easier 
goal find box boxes obtained cut ii sb iii contained box update tree follows children give new children called set sb sb sb sb gets children 
easy see way tree correctly maintained 
remains describe box computed 
done performing iterations 
initially set 
maintain invariant box ii sb iii contained describe iteration 
index side th dimension maximal 
resp 
interval sb resp 
th dimension 
resp 
contained interval set resp 

definition cut implies interval intersect interval 
assume contained 
case set max gamma 
partition box th dimension value resulting boxes contains sb take box new proceed iteration 
sb contained different case box looking iteration terminate 
completes description hierarchical subdivision way updated 
time needed insert delete point bounded constant plus time walking order find node local changes 
tree maintaining closest pair 
pair points called neighbor pair nearest neighbor nearest neighbor maintain set consisting pairs points contains neighbor pairs 
clearly contains closest pair 
store distances pairs heap smallest element heap equal minimum distance denote diameter box maximum distance points ir diam 
minimum resp 
maximum distance point point ir denoted resp 

algorithm invariant hold pair contained node tree 

diam delta diam 
delta diam 

clear set contains neighbors pairs 
point denote set points pair belongs order guarantee set maintained linear size proves result 
lemma set edges invariant holds 
point assume contains elements 
point invariant holds set set satisfies invariant point occurs constant number pairs set clearly linear size 
course problem maintain set 
assume want delete point delete distances heap delete set 
update tree described 
note delete nodes consider deletion node order restore invariant assume deletion pair contained existence node diam diam delta diam 
follows simple packing argument number points bounded constant 
denote set fa diam diam delta diam tree set computed searching neighborhood box 
point search neighborhood compute set insert corresponding distances heap 
algorithm inserting point similar 
compute set insert new distances heap 
moment invariant holds may points occur times points neighborhood 
points remove corresponding pairs heap 
implement algorithm efficiently dynamic trees represent tree similar way section 
details refer reader 
shown entire algorithm inserting deleting point takes log time worst case 
entire data structure uses linear space 
post office problem turn problem post office problem 
set points ir solve post office problem follows 
construct voronoi diagram query point ir nearest neighbor locating voronoi region contains point associated region nearest neighbor 
order implement solution efficiently need fast algorithms constructing voronoi diagram ii solving point location queries 
planar case voronoi diagram constructed log time 
data structure constructed log time point location queries solved logarithmic time 
entire data structure uses linear space 
gives optimal solution planar post office problem 
higher dimensions situation complicated voronoi diagram points ir size theta dd 
details dimensional post office problem refer reader chapter voronoi diagrams handbook 
just mention best results currently known large amount space query time linear 
precisely clarkson gives randomized data structure finds nearest neighbor query point log expected time 
structure size dd ffi ffi arbitrarily small positive constant 
arya mount solve problem expected query time gamma log log log space 
dimension impossible obtain solution problem having polylogarithmic query time log space 
planar case dynamic data structure known polylogarithmic query update times uses log space 
view negative results natural study weaker versions problem 
weaker versions considered literature 
version distances measured simple metric complicated metric 
second version suffices find approximate nearest neighbor query point exact nearest neighbor 
sections consider versions post office problem detail 
post office problem simple metrics solution quadrant approach section consider post office problem metric 
basic approach reduce problem range searching minimum 
approach time gabow bentley tarjan 

fact approach section 
describe planar case 
query point 
consider quadrants defined point 
clearly neighbor quadrants compute neighbor constant time 
neighbor say north east quadrant determined follows points line right line point minimal 
follows apply standard range searching techniques solve problem 
dimensional version post office problem solved data structures 
th data structure find neighbor query point contained th quadrant 
gabow bentley tarjan give static data structure problem uses log gamma space query time log gamma 
alternatively standard range tree get dynamic solution 
data structure uses log gamma space 
query update times bounded log 
chan snoeyink obtain bounds variation technique 
chazelle data structure get data structure size log gamma query update times log log log 
approach works metric 
clear metric obtained metric rotation scaling 
dimensional case gabow bentley tarjan reduce problem delta 
subproblems range searching minima 
reduced number delta 
metric complexity obtained metric 
solution metric uses range trees section show standard range tree solving post office problem 
query algorithm due kapoor smid 
finding neighbor query point visualized growing cube centered boundary hits point see growing process simulated range tree 
describe query algorithm planar case 
set points plane 
recall range tree 
data structure consists main tree balanced binary search tree storing points leaves sorted coordinates 
node main tree denotes subset stored subtree node main tree contains pointer root balanced binary search tree called secondary tree storing points leaves sorted coordinates 
query point 
give algorithm computing neighbor points right call neighbor right neighbor symmetric way neighbor left computed 
clearly neighbors determine neighbor constant time 
stage decompose set points right log pairwise disjoint subsets initialize 
starting root main tree search leftmost leaf storing point coordinate equal search time move node left child add right child set leaf search ends 
point stored leaf coordinate equal add set number nodes final set closer root gamma easy see fr moment know sets contains right neighbor second stage algorithm sequence iterations 
start sequence initialize false 
long false 
search associated structure find point call coordinate nearest find point stored rightmost leaf main subtree ffi gamma rectangle theta gamma ffi ffi 
contained insert point set increase 
set true 
concludes description second stage 
assume variable value false stage completed 
set contains right neighbor case complete query algorithm going set point having minimum distance happens variable value true second stage 
case right neighbor contained proceed third stage algorithm 
third stage sequence iterations 
maintain invariant set contains right neighbor long leaf 
left child search associated structure find point call coordinate nearest find point stored rightmost leaf main subtree ffi gamma rectangle theta gamma ffi ffi 
assume contained right neighbor contained subtree equal insert set set right child proceed iteration 
assume contained case right neighbor contained subtree right child set proceed iteration 
iteration leaf 
know right neighbor contained stored find right neighbor going set point having minimum distance concludes description algorithm finding right neighbor correctness proof reader referred 
easy see stages implemented log time 
fractional cascading improved log 
range tree maintained dynamically log log log amortized time insertion deletion 
need dynamic fractional cascading query time log log log 
generalization dimensional post office problem straightforward 
get dynamic data structure size log gamma having log gamma log log query time log gamma log log amortized update time 
see details 
approximate post office problem set points ir ffl positive constant 
point ir denote point closest point called ffl approximate neighbor ffl 
section give data structures solving approximate problem 
see problem solutions polylogarithmic query update times log space 
recall bounds impossible exact post office problem see discussion section 
data structure quad trees result approximate post office problem due bern 
scaling may assume set contained cube build quad tree set 
see finkel bentley 
node tree stores axes parallel cube points subtree contained cube 
root quad tree contains cube consider node cube 
split equal sized subcubes give children subcube 
node leaf contains point leaf store point exists contained order save space remove nodes cubes contain points remove nodes child attaching child directly grandparent 
clearly results tree having linear size 
data structure way 
consider query point contained return point follow path tree obvious way node storing smallest cube containing 
note necessarily leaf 
return point contained subtree see approximation returned point assume query point lies outside 
follows returned point approximate neighbor case reasonably approximation 
describe case need definitions 
consider cube split cube equal sized subcubes 
subcubes contains call subcube answer cube axes parallel cube sides length center point said central contained cube centered sides length 
claim approximation central answer cube 
prove answer cube sides length 
contained central contain points 
point approximate neighbor course case central answer cube 
solve problem 
binary representation gamma 
vector 
build quad trees root cube th tree translated claim query point contained central answer cube quad trees 
query point ir query quad trees 
point th tree compute closest return point 
point approximate neighbor special metrics approximation better 
example euclidean metric solution computes approximate neighbor centroid decomposition represent quad trees see section query algorithm takes log time 
entire data structure uses linear space 
algorithm similar section entire data structure built log time 
randomized data structure neighborhood graphs efficient data structure solving ffl approximate post office problem constant ffl arya mount 
data structure arya mount directed graph constructed randomized manner 
point cover space ir constant number cones having apex 
apply procedure adds cone apex expected number log directed edges form gamma random permutation point set fqg 
cone apex consider points contained data structure contains directed edge point set fr having minimum distance graph constructed way called randomized neighborhood graph 
standard arguments probability theory imply point expected degree log 
expected size data structure bounded log 
data structure built time straightforward way 
ir query point point ffl approximate neighbor arya mount show choosing cones angular diameter small edge data structure 
implies algorithm solving approximate post office queries 
start point consider edges choose point closest set repeat process 
report point ffl approximate neighbor unfortunately difficult prove bound expected running time query algorithm 
arya mount propose modification 
associate directed edge data structure cone having apex contains directed path called pseudo linear cone associated gamma contains cone associated 
path resembles path skip list relatively easy analyze 
particular query point point ffl approximate neighbor pseudo linear path containing expected number log edges starts ends point 
path computed log expected time 
resp 
denotes number points resp 
probability 
having computed expected number log pseudo linear paths ffl approximate neighbor expected running time complete query algorithm bounded log 
arya mount give practical variant algorithm 
experiments variation compared running time practical algorithms gamma trees simple bucketing techniques dimensions 
details refer 
data structures range trees kapoor smid gave efficient dynamic data structure ffl approximate post office problem 
algorithm works approximating euclidean neighbor query point 
ir query point euclidean neighbor neighbor ffi 
consider axes parallel cube centered having sides length ffi 
clearly lies inside boundary cube 
delta ffi 
ffi infer delta approximate neighbor range tree corresponding algorithm section solve approximate euclidean post office problem 
improve solution making observations 
consider planar case 
point better approximation angle vector pp positive axis 
metric depends coordinate system 
rotate xy system metric changes 
euclidean metric invariant rotations 
store set constant number range trees range tree stores points coordinate system 
query point range trees compute neighbors coordinate systems 
choosing coordinate systems appropriate way neighbors ffl approximate euclidean neighbor 
planar case take care coordinate system angle vector pp positive axis planar case coordinate systems obtained follows 
oe tan oe ffl ffl 
oe resp 
directed line angle delta oe positive axis resp 
axis 
th coordinate system axes higher dimensional case cones yao 
get data structure ffl approximate euclidean post office problem having size log gamma query amortized update times bounded log gamma log log 
gives alternative solution approximate distance functions section 
technique applies metric 
problem finding ffl approximate neighbor reduced range searching minimum 
range trees get dynamic data structure size log gamma query update times log 
chazelle data structure gives data structure size log gamma query update times log log log 
completely different approach chan snoeyink 
result applies metric gives efficient dynamic data structures planar case 
assume 
start sketching exact post office data structure special case query points lie axis 
consider intersection voronoi diagram axis 
lifting map dualization see intersection corresponds planar lower convex hull 
algorithm overmars van leeuwen store maintain lower hull log time insertion deletion linear space 
exact post office queries axis answered binary search logarithmic time 
solution give approximate post office structure case points left axis query points right axis 
query point 
gammad ffl gamma ffl gamma intersection axis ray angle delta ffl negative axis 
exact nearest neighbor exact neighbors ffl approximate neighbor query point exact nearest neighbor assume index ray angle delta ffl just neighbor satisfies ffl 
proof see 
follows solve version problem log query time log update time space 
general approximate post office problem solved applying range tree techniques solution 
result data structure size log having update time log solves ffl approximate post office queries log time 
data structure constants space update time bounds depend ffl 
fact data structure queries input consists point approximation bound ffl 
optimal solution approximate post office problem ffl approximate post office problem solved optimally arya 
give data structure size answers queries log time built log time 
data structure constants space building time bounds depend ffl 
answering queries degrees precision 
course constant factor query time depend ffl 
data structure hierarchical subdivision space cells similar ones seen section 
dealing query problem previous techniques adapted somewhat 
define fat box dimensional axes parallel rectangle ratio longest side shortest side bounded constant 
construct subdivision ir pairwise disjoint cells cell fat box set theoretic difference fat boxes 
cells called box cells doughnut cells respectively 
construction operations fat boxes 
split operation fat box split fat boxes cutting longest side equal parts 
split called fair resulting boxes contain points fat boxes contained say sticky sides distance side corresponding side zero width dimension 
second operation shrink operation 
defined fat box fair split possible 
operation returns smallest fat box sticky contains points lemma proved easily 
lemma fat box contains points fair split operation shrink operation performed shrink operation applied fair split possible resulting shrunken fat box 
describe construction subdivision 
start smallest axes parallel cube containing points possible cases 
assume contains point cube box cell subdivision construction stops 
assume contains points fair split possible 
perform shrink operation shrunken box 
create doughnut cell recursively apply construction assume contains points fair split possible 
perform fair split yielding fat boxes recursively apply construction respectively 
construction defines binary tree natural way 
node tree stores cell 
cells stored leaves form subdivision ir lemma implies path consecutive shrink nodes 
tree size 
order solving approximate post office queries need store additional information 
leaf storing cell subdivision store point box cell unique point doughnut cell form arbitrary point define size box cell resp 
doughnut cell subdivision length longest side resp 
length longest side outer box 
clear cell subdivision point ir distance times size give query algorithm remarks 
mention lemma proof follows packing arguments 
lemma point ir positive real numbers number cells subdivision having size intersecting ball radius center bounded 
centroid decomposition represent tree see section answer point location queries log time 
query find cell subdivision containing query point 
note size data structure remains linear 
basically algorithm section entire data structure built log time 
point ir cell subdivision 
define distance minimum distance point ir lemma important query algorithm 
lemma ir query point positive integer 
log time enumerate cells subdivision closest increasing order distance value need known moment enumeration starts 
proof give algorithm enumerating cells 
correctness proof time analysis refer 
algorithm priority search technique time 
say cells subdivision neighbors share common gamma dimensional boundary 
cell subdivision gamma dimensional facets 
point closest clearly computed constant time 
cell subdivision closest neighbor find cell point location logarithmic time 
give algorithm 
maintain heap stores cells subdivision sorted distances initially heap empty 
assume cells unmarked 
point location find cell contains mark insert heap 
sequence iterations 
iteration remove cell closest heap report 
face compute cell case unmarked mark insert heap 
give algorithm answering approximate post office queries 
query point 
algorithm lemma enumerate cells subdivision increasing order distance cell enumerated compute distance associated point maintain smallest distance ffi encountered far 
enumerating cells soon distance current cell larger ffi ffl 
report ffi point distance equal ffi 
prove correctness algorithm cell subdivision contains exact nearest neighbor note box cell 
enumerated fact exact neighbor assume enumerated 
visit cells increasing order distance know distance ffi ffl 
ffi ffl ffl approximate neighbor remains analyze query time 
cell visited need log time 
show constant number cells enumerated algorithm terminates 
cell subdivision denote size size 
denotes distance consider query algorithm 
current cell enumerated ffi size 
claim ffi ffl cell enumerated causes query algorithm terminate 
prove point ir ffi know ds 
triangle inequality ffi ds 
ffl ffi particular current value ffi satisfies ffi 
ffl ffi cell enumerated distance ffi ffi ffl proves claim 
bound number cells enumerated remains consider cells size ffl define minimum value size minimized cells subdivision 
lemma consider value ffi reported algorithm 
ffi 
ffl proof cell size enumerated algorithm ffi size 
ffl enumerated know ffi ffl implies ffi 
ffl ffl ffl completes proof 
lemma cells enumerated possibly intersect ball radius ffl centered proof consider final value ffi 
cell subdivision 
ffl cell enumeration resulted ffi 
ffi 
ffi 
ffl ffi 
follows enumerated happens enumerated 
moment enumerated ffi ffi ffl 
algorithm terminates moment 
cell size ffl definition immediately implies size size size ffl equivalently size ffl 
proves number cells enumerated equal plus number cells size ffl intersect ball centered having radius ffl lemma constant number cells completes proof claim running time query algorithm logarithmic 
conclude section arya extend algorithm approximate nearest neighbors query point enumerated log time 
case points chosen carefully 
results experiments simplification algorithm dimensional point sets 
details refer 
results proximity problems approximating complete euclidean graph spanners section give overview algorithms designed constructing spanners 
see definition distances denote euclidean distances 
problem constructing spanner omega gamma log lower bound algebraic computation tree model 
follows simple fact spanner closest pair connected edge 
lower bound fact proved constant chen das smid 
spanners introduced computational geometry chew 
set points plane 
chew shows delaunay triangulation euclidean spanner 
pair points path triangulation weight times euclidean distance dobkin friedman proved euclidean delaunay triangulation spanner 
keil gutwin improved cos levcopoulos lingas generalized result way 
euclidean delaunay triangulation planar points positive real number plane graph constructed linear time spanner cos total weight times weight minimum spanning tree points 
spanners simplicial cones simplicial cones give simple construction spanner constant 
construction appeared time clarkson cases 
discovered independently keil gutwin case 
ruppert seidel generalized construction arbitrary dimension 
describe planar version construction 
section choose integer constant rotate positive axis angles delta yielding rays 
cones bounded successive rays 
fixed ray emanates origin contained define graph way 
point translate cone corresponding ray apex starting point respectively 
take point contained translated cone projection translated ray closest add directed edge graph 
graph obtained way called theta graph 
clearly contains kn edges 
prove graph spanner consider points construct path way 
assume constructed path construction stops 
index cone translated apex contains theta graph contains edge point translated cone 
extend path setting shown gamma cos gamma sin result point path closer previous 
particular point reached 
rewriting inequality shows entire path weight times distance cos gamma sin 
note choosing large value gets arbitrarily close 
construction easily generalized dimension simplicial cones yao 
sweep technique range trees theta graph constructed log gamma time 
details see 
spanner diameter spanner defined smallest integer pair points path weight times distance contains edges 
theta graph spanner diameter gamma take points real line 
points theta graph just list storing points sorted order 
arya mount smid show combine theta graph skip lists get spanner having edges log spanner diameter high probability 
show maintain spanner efficiently insertions deletions points model random updates defined mulmuley 
degree vertex theta graph bounded constant maximum degree large gamma take gamma points circle th point center 
corresponding theta graph point circle edge center vertex 
arya give log time algorithm transforms spanner bounded degree spanner bounded degree bounded degree 
applying transformation theta graph gives log gamma time algorithm constructing spanner bounded degree 
greedy spanners simple greedy algorithm constructing spanners 
set points ir 
sort point pairs increasing order distances 
start empty graph consider point pairs sorted order 
current pair add edge current graph contain path weight delta 
clear algorithm constructs spanner 
properties spanner analyzed sequence papers 
chandra showed vertex spanner degree bounded constant 
results das narasimhan das narasimhan salowe prove weight proportional minimum spanning tree greedy algorithm looks pair points explicitly running time omega gamma 
das narasimhan variant greedy algorithm graph clustering techniques runs log time 
applying results shows algorithm produces spanner weight proportional minimum spanning tree 
degree large 
mentioned vaidya feder nisan gave alternative greedy algorithm constructing spanner bounded degree 
see salowe 
real number 
sort pairs increasing order distances start empty graph consider pairs sorted order 
current pair add edge edge angle rpq ii edge angle 
resulting graph spanner cos gamma sin clearly bounded degree 
weight spanner large 
arya smid gave efficient implementation variant feder nisan greedy algorithm uses data structure section 
result log time algorithm constructs spanner bounded degree weight bounded log times weight minimum spanning tree 
apply results spanner get log time algorithm constructing spanner bounded degree weight constant factor minimum spanning tree 
spanners separated pairs optimal log time algorithms constructing spanner set points ir constant vaidya salowe 
algorithms related hierarchical subdivisions 
surprise separated pair decomposition wspd section giving similar construction 
due callahan kosaraju 
prove ffa fa fam bm gg wspd 
choose arbitrary representative points add edge points 
defines graph 
clear built log time 
prove spanner consider points know index consider corresponding representatives recursively construct paths final path consists path followed edge followed path definition wspd implies edge long compared distances 
observation easily shown choosing separation constant large graph spanner 
shown modifying wspd spanner spanners constructed variety properties 
representatives chosen carefully edges graph directed spanner bounded degree 
see 
applying transformation arya mentioned section shows build log time spanner bounded degree 
arya mount smid prove choosing representatives way spanner wspd log spanner diameter 
arya show weight spanner bounded log times weight minimum spanning tree 
note spanner bounded degree 
arya simplicial cones prune wspd spanner 
analyze pruned graph theorem das narasimhan salowe 
result algorithm constructs spanner bounded degree weight proportional weight minimum spanning tree 
algorithm constructs spanner log time 
main results technique decomposes wspd constant number hierarchically organized sets separated pairs 
decomposition give class spanners viewed union constant number trees 
spanner paths arises unique path leaves trees 
alon schieber bodlaender tel santoro algorithms adding edges tree diameter reduced 
applying gives spanner spanner diameter log edges spanner spanner diameter log log edges spanner spanner diameter log edges 
fact possible obtain spanner spanner diameter ff edges ff inverse ackermann function 
spanners constructed log time 
trade offs spanner diameter number edges optimal 
true spanners dimensional point sets 
optimality follows results 
papers consider spanners explicitly results easily translated spanners 
mention results 
decomposition mentioned preceding paragraph combined topology trees order get spanner bounded degree log spanner diameter 
spanner constructed log time 
shown weight spanner bounded log times weight minimum spanning tree 
spanners small degree seen spanner bounded degree constructed 
upper bound degree depends dimension typically form gamma constant dobkin friedman posed problem determining smallest integer set points ir spanner degree constructed constant 
course depend 
prove 
salowe proves 
gives algorithm transforms spanner degree spanner degree bv delta starting bounded degree spanner applying transformation repeatedly proves salowe result 
problem determining solved das 
prove 
precise give polynomial time algorithm set points ir ffi constructs spanner constant degree contains ffin edges 
results closest point problems algorithms data structures closest point problems complexity depend geometry points 
complexity bounds depend number points constants dimension authors developed algorithms running time depends measures ratio maximum distance minimum distance 
mention algorithm clarkson solving nearest neighbors problem data structures clarkson chen snoeyink solving approximate post office problem 
designing simple algorithms especially efficient input points come probability distribution 
example friedman bentley finkel bentley weide yao give algorithms post office problem closest pair problem 
hinrichs analyze expected running time simple algorithm nearest neighbors problem point sets uniformly distributed unit cube 
golin gives simple data structure maintains closest pair logarithmic expected time update points drawn wide class distributions 
considered problem computing minimum distance smallest distances point set gave optimal algorithms problems 
problem selecting th smallest distance turns difficult 
salowe shows select th smallest distance set points ir log time 
agarwal give efficient randomized algorithm selecting th euclidean distance planar set points 
algorithms parametric search technique 
problem selecting largest distance diameter set points ir solved log time 
see 
best result known due amato goodrich ramos 
show diameter computed log time 
bichromatic closest pair problem sets red blue points ir respectively want find pair distance minimal 
denote total number red blue points 
voronoi diagrams planar version problem easily solved log time 
problem difficult 
agarwal show relationship bichromatic closest pair problem minimum spanning tree problem 
give efficient algorithm compute bichromatic closest pair 
callahan kosaraju pair decomposition improve running time 
katoh give general technique compute closest bichromatic pairs furthest bichromatic pairs 
agarwal introduced variation bichromatic closest pair problem 
collection point sets point find nearest neighbor belong set 
denotes total number points planar version solved log time 
see graf hinrichs 
mention research proximity problems sets objects points 
mention sharir solves closest pair problem set planar disks graf hinrichs give plane sweep algorithm solving nearest neighbors problem set convex planar objects 
open problems preceding sections seen optimal solutions closest point problems 
particular complexity static dynamic versions closest pair problem completely settled 
remain challenging open problems field 
mention 
static post office problem solved optimally planar case 
exist dynamic data structure planar post office problem having polylogarithmic query update times log space 
mentioned dimension complexity static problem determined 
conjectured data structure size log polylogarithmic query time exist 
important open problem prove disprove conjecture 
seen nearest neighbors problem solved optimally log time 
non trivial results known maintaining neighbors insertions deletions planar case 
note point inserted deleted constant number nearest neighbor pairs changed 
problem course finding pairs 
mentioned section problem selecting th smallest distance set points ir solved log time 
problem solved log time 
complexity selecting th euclidean distance planar set points 
section optimal algorithms mentioned constructing spanners properties 
general result log time algorithm constructing spanner bounded degree log spanner diameter weight bounded log times weight minimum spanning tree 
log time algorithm constructs spanner bounded degree log spanner diameter weight bounded log times weight minimum spanning tree 
algorithm optimal saw omega gamma log lower bound time construct spanner 
shown spanner log spanner diameter weight omega gamma times weight minimum spanning tree 
clear distances set points ir sorted log time 
improved written author max planck institute computer science saarbrucken germany 
author supported esprit basic research actions program contract project alcom ii 
author arya sergei klaus hinrichs ravi hans peter david mount comments preliminary version 
agarwal aronov sharir suri 
selecting distances plane 
algorithmica pp 

agarwal edelsbrunner schwarzkopf welzl 
euclidean minimum spanning trees bichromatic closest pairs 
discrete computational geometry pp 

aggarwal edelsbrunner raghavan tiwari 
optimal time bounds proximity problems plane 
information processing letters pp 

aggarwal guibas saxe shor 
linear time algorithm computing voronoi diagram convex polygon 
discrete computational geometry pp 

aggarwal imai katoh suri 
finding points minimum diameter related problems 
journal algorithms pp 

alon schieber 
optimal preprocessing answering line product queries 
report tel aviv university 
amato goodrich ramos 
parallel algorithms higherdimensional convex hulls 
proceedings th annual ieee symposium foundations computer science pp 

andrews 
mathematical techniques pattern recognition 
wiley interscience new york 
arya das mount salowe smid 
euclidean spanners short thin 
proceedings th annual acm symposium theory computing pp 

arya mount 
algorithms fast vector quantization 
proceedings data compression conference dcc ieee press pp 

arya mount 
approximate nearest neighbor queries fixed dimensions 
proceedings th annual acm siam symposium discrete algorithms pp 

arya mount netanyahu silverman wu 
optimal algorithm approximate nearest neighbor searching 
proceedings th annual acm siam symposium discrete algorithms pp 

arya mount smid 
randomized deterministic algorithms geometric spanners small diameter 
proceedings th annual ieee symposium foundations computer science pp 

arya mount smid 
dynamic algorithms geometric spanners small diameter randomized solutions 
report mpi max fur informatik saarbrucken 
arya smid 
efficient construction bounded degree spanner low weight 
algorithmica pp 

aurenhammer 
voronoi diagrams survey fundamental geometric data structure 
acm computing surveys pp 

hinrichs 
plane sweep algorithm finding closest pair convex planar objects 
proceedings th symposium theoretical aspects computer science lecture notes computer science vol 
springer verlag berlin pp 

hinrichs 
probabilistic analysis algorithm solving dimensional nearest neighbors problem projection 
bit pp 

ben 
lower bounds algebraic computation trees 
proceedings th annual acm symposium theory computing pp 

bentley 
divide conquer algorithms closest point problems multidimensional space 
ph thesis university north carolina chapel hill 
bentley 
decomposable searching problems 
information processing letters pp 

bentley 
multidimensional divide conquer 
communications acm pp 

bentley shamos 
divide conquer multidimensional space 
proceedings th annual acm symposium theory computing pp 

bentley weide yao 
optimal expected time algorithms closest point problems 
acm transactions mathematical software pp 

bern 
approximate closest point queries high dimensions 
information processing letters pp 

bern eppstein gilbert 
provably mesh generation 
journal computer systems sciences pp 


region approach dynamic closest point problems 
proceedings th canadian conference computational geometry pp 


optimal algorithm closest pair maintenance 
proceedings th annual acm symposium computational geometry pp 

bodlaender tel santoro 
trade offs non reversing diameter 
nordic journal computing pp 

callahan 
dealing higher dimensions separated pair decomposition applications 
ph thesis johns hopkins university baltimore maryland 
callahan kosaraju 
decomposition multi dimensional applications nearest neighbors body potential fields 
proceedings th annual acm symposium theory computing pp 

callahan kosaraju 
faster algorithms geometric graph problems higher dimensions 
proceedings th annual symposium discrete algorithms pp 

callahan kosaraju 
algorithms dynamic closest pair body potential fields 
proceedings th annual symposium discrete algorithms pp 

callahan kosaraju 
decomposition multidimensional point sets applications nearest neighbors body potential fields 
journal acm pp 

chan snoeyink 
algorithms approximate nearest neighbor queries 
manuscript 
chandra das narasimhan soares 
new sparseness results graph spanners 
international journal computational geometry applications pp 

chazelle 
functional approach data structures multidimensional searching 
siam journal computing pp 

chazelle guibas 
fractional cascading data structuring technique 
algorithmica pp 

chew 
planar graph complete graph 
proceedings nd annual acm computational geometry pp 

clarkson 
fast algorithms nearest neighbors problem 
proceedings th annual symposium foundations computer science pp 

clarkson 
approximation algorithms shortest path motion planning 
proceedings th annual acm symposium theory computing pp 

clarkson 
randomized algorithm closest point queries 
siam journal computing pp 

clarkson 
algorithm approximate closest point queries 
proceedings th annual acm computational geometry pp 

cohen tamassia 
combine conquer general technique dynamic algorithms 
proceedings st annual european symposium algorithms lecture notes computer science vol 
springer verlag berlin pp 

das 
constructing degree spanners sparseness properties 
proceedings th international symposium algorithms computations lecture notes computer science vol 
springer verlag berlin pp 

das narasimhan 
optimally sparse spanners dimensional euclidean space 
proceedings th annual acm computational geometry pp 

das narasimhan 
fast algorithm constructing sparse euclidean spanners 
proceedings th annual acm computational geometry pp 

das narasimhan salowe 
new way weigh euclidean graphs 
proceedings th annual acm siam symposium discrete algorithms pp 

chen das smid 
lower bounds computing geometric spanners approximate shortest paths 
proceedings th canadian conference computational geometry pp 

datta 
schwarz smid 
static dynamic algorithms point clustering problems 
journal algorithms pp 

day edelsbrunner 
efficient algorithms agglomerative hierarchical clustering methods 
journal classification pp 

dickerson scot sack 
simple algorithms enumerating interpoint distances finding nearest neighbors 
international journal computational geometry applications pp 

dickerson eppstein 
algorithms proximity problems higher dimensions 
computational geometry theory applications pp 

dietzfelbinger hagerup 
reliable randomized algorithm closest pair problem 
report department computer science university copenhagen 
dietzfelbinger karlin mehlhorn meyer auf der heide rohnert tarjan 
dynamic perfect hashing upper lower bounds 
siam journal computing pp 

dobkin iii guibas 
finding smallest polygons 
computational geometry advances computing research vol 
jai press london pp 

dobkin friedman 
delaunay graphs complete graphs 
discrete computational geometry pp 

dobkin suri 
maintenance geometric extrema 
journal acm pp 

edelsbrunner 
algorithms combinatorial geometry 
springer verlag berlin 
edelsbrunner hilbert 
rectangular point location dimensions applications 
computer journal pp 

efrat sharir ziv 
computing smallest enclosing circle related problems 
computational geometry theory applications pp 

eppstein erickson 
iterated nearest neighbors finding minimal polytopes 
discrete computational geometry pp 

finkel bentley 
quad trees data structure retrieval composite keys 
acta informatica pp 

fortune hopcroft 
note rabin nearest neighbor algorithm 
information processing letters pp 

frederickson 
data structure dynamically maintaining rooted trees 
proceedings th annual acm siam symposium discrete algorithms pp 

fredman koml os szemer edi 
storing sparse table worst case access time 
journal acm pp 

friedman bentley finkel 
algorithm finding best matches logarithmic expected time 
acm transactions mathematical software pp 

gabow bentley tarjan 
scaling related techniques geometry problems 
proceedings th annual acm symposium theory computing pp 

golin 
dynamic closest pairs probabilistic approach 
proceedings rd scandinavian workshop algorithm theory lecture notes computer science vol 
springer verlag berlin pp 

golin raman schwarz smid 
randomized data structures dynamic closest pair problem 
proceedings th annual acm siam symposium discrete algorithms pp 

golin raman schwarz smid 
simple randomized algorithms closest pair problems 
nordic journal computing pp 

graf hinrichs 
plane sweep algorithm nearest neighbors problem set convex planar objects 
proceedings rd workshop algorithms data structures lecture notes computer science vol 
springer verlag berlin pp 

graf hinrichs 
algorithms proximity problems colored point sets 
proceedings th canadian conference computational geometry pp 

guibas hershberger sharir tarjan 
linear time algorithms visibility shortest path problems inside triangulated simple polygons 
algorithmica pp 

hartigan 
clustering algorithms 
wiley new york 

triangulation algorithms representation molecular surface properties 
comp 
aided mol 
des 
pp 

hinrichs nievergelt 
plane sweep solves closest pair problem elegantly 
information processing letters pp 

hinrichs nievergelt 
round sweep algorithm dimensional nearest neighbors problems 
acta informatica pp 


ein fur das line closest pair problem im dim 
raum 
master thesis universitat 
johnson mizoguchi 
selecting kth element xm siam journal computing pp 

kapoor smid 
new techniques exact approximate dynamic closest point problems 
siam journal computing pp 

katoh 
finding farthest pairs closest farthest bichromatic pairs points plane 
international journal computational geometry applications pp 

keil gutwin 
classes graphs approximate complete euclidean graph 
discrete computational geometry pp 

khuller matias 
simple randomized sieve algorithm problem 
information computation pp 

knuth 
art computer programming volume sorting searching 
addison wesley reading ma 

smid 
animation fixed radius nearest neighbors algorithm 
rd annual video review computational geometry 
see proceedings th annual acm symposium computational geometry page 

smid 
sequential parallel algorithms closest pairs problem 
international journal computational geometry applications pp 

levcopoulos lingas 
planar graphs complete graphs short minimum spanning trees 
proceedings international symposium optimal algorithms lecture notes computer science vol 
springer verlag berlin pp 

lueker 
data structure orthogonal range queries 
proceedings th annual ieee symposium foundations computer science pp 

matousek 
enclosing points circle 
information processing letters pp 

matousek 
geometric optimization violated constraints 
discrete computational geometry pp 

mehlhorn 
data structures algorithms volume sorting searching 
springer verlag berlin 
mehlhorn 
data structures algorithms volume multi dimensional searching computational geometry 
springer verlag berlin 
mehlhorn 
dynamic fractional cascading 
algorithmica pp 

mulmuley 
computational geometry randomized algorithms 
prentice hall englewood cliffs 
overmars 
order decomposable set problems 
journal algorithms pp 

overmars 
design dynamic data structures 
lecture notes computer science vol 
springer verlag berlin 
overmars van leeuwen 
maintenance configurations plane 
journal computer systems sciences pp 

preparata shamos 
computational geometry 
springer verlag new york 
pugh 
skip lists probabilistic alternative balanced search trees 
communications acm pp 

rabin 
probabilistic algorithms 
algorithms complexity new directions results 
traub ed 
academic press pp 

ruppert seidel 
approximating dimensional complete euclidean graph 
proceedings rd canadian conference computational geometry pp 

salowe 
infinity selection parametric search 
information processing letters pp 

salowe 
constructing multidimensional spanner graphs 
international journal computational geometry applications pp 

salowe 
enumerating space 
international journal computational geometry applications pp 

salowe 
euclidean spanner graphs degree 
discrete applied mathematics pp 

schwarz 
data structures algorithms dynamic closest pair problem 
ph thesis universitat des saarlandes saarbrucken 
schwarz smid 
log log log algorithm line closest pair problem 
proceedings rd annual acm siam symposium discrete algorithms pp 

schwarz smid snoeyink 
optimal algorithm line closest pair problem 
algorithmica pp 

seidel 
backwards analysis randomized geometric algorithms 
new trends discrete computational geometry 
pach ed 
springer verlag berlin pp 

shamos 
geometric complexity 
proceedings th annual acm symposium theory computing pp 

shamos hoey 
closest point problems 
proceedings th annual ieee symposium foundations computer science pp 

sharir 
intersection closest pair problems set planar discs 
siam journal computing pp 

sharir welzl 
combinatorial bound linear programming related problems 
proceedings th symposium theoretical aspects computer science lecture notes computer science vol 
springer verlag berlin pp 

sleator tarjan 
data structure dynamic trees 
journal computer system sciences pp 

smid 
algorithms semi online updates decomposable problems 
proceedings nd canadian conference computational geometry pp 

smid 
worst case algorithm semi online updates decomposable problems 
report fachbereich informatik universitat des saarlandes 
smid 
maintaining minimal distance point set linear time 
algorithms review pp 

smid 
range trees slack parameter 
algorithms review pp 

smid 
rectangular point location dynamic closest pair problem 
proceedings nd annual international symposium algorithms lecture notes computer science vol 
springer verlag berlin pp 

smid 
maintaining minimal distance point set polylogarithmic time 
discrete computational geometry pp 

smid 
finding points smallest enclosing square 
report mpi max planck institut fur informatik saarbrucken 
smid 
dynamic rectangular point location application closest pair problem 
information computation pp 


new techniques dynamic closest point farthest point problems 
proceedings st annual acm siam symposium discrete algorithms pp 

vaidya 
log algorithm nearest neighbors problem 
discrete computational geometry pp 

vaidya 
sparse graph complete graph points dimensions 
discrete computational geometry pp 

willard lueker 
adding range restriction capability dynamic data structures 
journal acm pp 

yao 
constructing minimum spanning trees dimensional spaces related problems 
siam journal computing pp 

von 
das closest pair problem 
master thesis universitat des saarlandes saarbrucken 
