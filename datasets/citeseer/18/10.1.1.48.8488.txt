agrep fast approximate pattern matching tool preliminary version sun wu udi manber department computer science university arizona tucson az sw udi cs arizona edu searching pattern text file common operation applications ranging text editors databases applications molecular biology 
instances pattern appear text exactly 
errors text query result misspelling experimental errors text dna sequence 
approximate pattern matching limited specific applications 
text editors searching programs support searching errors complexity involved implementing 
describe new tool called agrep approximate pattern matching 
agrep new efficient flexible algorithm approximate string matching 
agrep competitive tools exact string matching include options searching powerful convenient 

common string searching problem find occurrences string inside large text file 
assume string text sequences characters finite character set characters may english characters text file dna base pairs lines source code angles edges polygons machines machine parts production schedule music notes tempo musical score famous algorithms problem knuth morris pratt algorithm kmp boyer moore algorithm bm see ba hs 
extensions problem example may looking set patterns regular expression pattern wild cards string searching unix done grep family 
instances pattern text exact 
may remember exact spelling name searching name may misspelled text text may correspond sequence numbers certain property exact pattern text may sequence dna molecules looking approximate patterns approximate string matching problem find substrings close measure closeness 
concentrate measure known levenshtein measure 
string said distance string transform equal sequence insertions single characters arbitrary places supported part nsf presidential young investigator award dcr matching funds nsf ccr 
deletions single characters substitutions characters 
wants vary cost different edit operations say deletions cost insertions substitutions 
different approximate string matching algorithms suggested list widely mainly complexity lack generality 
new tool called agrep approximate grep similar user interface grep family compatible supports important extensions grep 
version agrep available anonymous ftp cs arizona edu ip agrep agrep tar developed sun sparcstation successfully ported decstation sequent hp silicon graphics workstations 
expect version available place discussion refers version 
significant features agrep supported grep family searching approximate patterns searching records just lines searching multiple patterns logic queries 
features available version features include searching regular expressions errors efficient multi pattern search unlimited wild cards limiting errors insertions substitutions combination allowing deletion example counted say substitutions insertions restricting parts query exact parts approximate 
examples agrep section 
agrep supports large number options efficient 
experiments agrep competitive best exact string matching tools find hume gre hu gnu grep ha cases orders magnitude faster approximate string matching algorithms 
example finding occurrences allowing errors mb bibliographic text takes seconds sun sparcstation ii 
example misspelling bib file 
fast exact string matching 
organized follows 
start giving examples agrep illustrate flexible general briefly describe main ideas algorithms extensions 
details technical report man pages available ftp 
give experimental results close 

agrep agrep months find indispensable tool 
sample uses 
said significant features agrep supported grep family 
ability search approximate patterns example agrep bib find homogeneous word obtained substitutions insertions deletions 
possible assign different costs insertions deletions substitutions 
example agrep phone find numbers differ digit 
option sets cost insertions deletions case setting prevents insertions deletions 

agrep record oriented just line oriented record default line user defined example agrep pizza mbox outputs mail messages contain keyword pizza 
example agrep pattern foo output paragraphs separated empty line contain pattern 

multiple patterns logic queries example agrep burger pizza mbox outputs mail messages containing keywords stands agrep pizza mbox outputs mail messages containing keywords stands 
putting options ask queries agrep curriculum bib file outputs paragraphs referencing articles cacm dealing curriculum 
error allowed sub patterns cacm year brackets forbid errors pattern 
features enable users compose complex queries easily 
give examples daily agrep experience 
complete list options see manual pages distributed agrep 

finding words dictionary common tool available unix finding correct spelling word program look outputs words dictionary prefix 
times looked spelling words know prefix 
alias alias agrep usr dict web web large collection words mb long usr dict words 
example authors remember correct spelling bureaucracy wanting remember 
searches occurrences errors 
web contains match 
option matches pattern complete word possibly subword example extra match match option count extra errors 

searching mail file frequent uses agrep search inside mail files mail messages record option 
alias alias agrep notice possible alias complicated queries example mail food gov october surprise mail searches mail messages gov matches character include keywords 

extracting procedures usually possible easily extract procedure large program defining procedure record agrep 
example agrep routine prog routine assuming routines line routine uniquely identifies routine 
careful dealing people programs conventions may followed 
programming languages ways identify procedure 
option puts record delimiter record appropriate mail messages example 

finding interesting words point needed find words dictionary characters 
done agrep command agrep 
usr dict words 
prevents deletions pattern stands character 
section cute example important shows flexible agrep 
query finds words dictionary contain letters alphabet order agrep usr dict words symbol stands wild card size 
try 
answer starts word academia ends mean 

algorithms agrep utilizes different algorithms optimize performance different cases 
simple exact queries variant boyer moore algorithm 
simple patterns errors partition scheme described section hand hand boyer moore scheme 
complicated patterns patterns unlimited wild cards patterns uneven costs different edit operations multi patterns arbitrary regular expressions new algorithms altogether 
section briefly outline basis interesting new algorithms algorithm arbitrary patterns errors algorithm multi patterns 
details algorithms see wm wm 

arbitrary patterns errors describe main idea simplest case algorithm finding occurrences string text 
algorithm shift algorithm baeza yates gonnet bg 
bit array size size pattern 
denote value array character text processed 
array contains information matches prefixes suffix text ends precisely characters pattern match exactly characters text 
partial matches may lead full matches 
read need determine extend partial matches far 
transition summarized follows initially 
output match ends position transition compute text character quite complicated 
suppose usually case practice represented bit vector bit word 
character alphabet construct bit array size 
sufficient construct arrays characters appear pattern 
easy verify transition amounts right shift operation transition executed simple arithmetic operations shift 
suppose want allow substitution error 
introduce array denoted indicates possible matches substitution 
transition array 
need specify transition cases match substitution characters assume right shift fills position 
filled shifts available case add operation mask bit 
alternatively indicate match operation way filled shifts sufficient 
counterintuitive explain adaptable extensions opted easier definition 

exact match characters case corresponds substituting equal equality indicated matching characters 

match characters substitution turns cases handled arithmetic operations allow insertions deletions substitutions need operations want allow error maintain additional array 
number operations proportional number errors 
better 
suppose pattern size errors allowed 
divide blocks size call matches text errors match text exactly 
search time discuss paragraph matches check pattern directly previous scheme neighborhood size position match 
looking exact match need maintain additional vectors 
scheme run fast number exact matches high 
main advantage scheme algorithm exact matching adapted elegant way support 
illustrate idea example 
suppose pattern 
divide pattern blocks abc def ghi jkl 
need find appears text 
create combined pattern interleaving blocks 
build mask vector usual interleaved pattern 
difference shifting step shift 
match bits 
shift need fill positions better shift 
match blocks done exactly way regular matches takes essentially running time 
algorithm described far efficient simple string matching 
important adaptable extensions basic problem 
example suppose want search abc followed digit defined agrep abc 
thing need preprocessing digit allow match position 
remains exactly 
extensions include arbitrary wild cards combination patterns errors different costs insertions deletions substitutions probably important arbitrary regular expressions 
room describe implementation extensions see wm 
main technique additional masking preprocessing 
relatively easy case wild cards requires clever ideas case arbitrary regular expressions errors 
describe fast algorithm multiple patterns leads fast approximate matching algorithm simple patterns 

algorithm multi patterns suppose pattern consists set simple patterns string characters fixed alphabet text large string characters 
assume subpatterns size simplicity description agrep assumption 
string matching problem find substrings text match patterns set 
efficient algorithm solving problem aho corasick ac solves problem linear time 
algorithm basis 
walter cw algorithm combines boyer moore technique aho corasick algorithm 
walter algorithm substantially faster aho corasick algorithm number patterns big 
pattern matching tool gre hu covers functions egrep grep developed andrew hume incorporated walter algorithm multi pattern string matching problem 
algorithm uses hashing technique combined different boyer moore technique 
building shift table single characters build shift table block characters 
idea block characters proposed knuth morris pratt section kmp 
boyer moore style algorithms algorithm preprocesses patterns build data structures search process speeded 
denote size alphabet log 
assume 
preprocessing shift table shift hashing table hash built 
look text characters time 
values shift table determine far shift forward search process 
shift table shift array size entry shift corresponds distinct substring length 
string corresponding th entry shift 
cases appears 
case store shift 
case find rightmost occurrence contain suppose ends position store shift 
shift value safely shift 
possible current substring looking text matches pattern pattern list 
avoid comparing substring pattern pattern list hashing technique minimize number patterns compared 
preprocessing build hash table hash pattern hash value put linked list pointed hash 
search process going compare current aligned substring patterns compute hash value substring compare substring patterns hash value 
algorithm searching text sketched 
multi pattern matching algorithm described solve approximate string matching problem 
pattern string text string 
partition fragments size 
ij substring pigeonhole principle ij differs errors fragment match substring ij exactly 
approximate string matching algorithm conducted phases 
phase partition pattern fragments multi pattern string matching algorithm find places contain fragments 
match fragment position text mark positions candidate area 
phase done apply approximate matching algorithm described section find actual matches marked area 
pattern size algorithm multi patterns current position text position text blk idx map 
map transforms string size integer shift value shift blk idx shift value shift value compute hash value 
compare 
pattern hash value match reports 
sketch algorithm multi pattern searching 
ukkonen nk expected time algorithm uk 
algorithm fast pattern long number errors high assuming 
approximate boyer moore string matching algorithm tu performance degrades greatly size alphabet set small algorithm sensitive alphabet size 
example dna patterns size allowing errors algorithm orders magnitude faster ukkonen nk expected time algorithm uk algorithm mn gp fastest algorithms algorithms compared cl 
experimental results section 
algorithm fast practical applications searching english text dna data 

experimental results brief experiments 
numbers taken caution 
results depend architecture operating system compilers mention patterns test files 
tests means comprehensive 
show agrep fast large files 
differences running times significant 
boyer moore type programs simple patterns 
agrep better multi patterns 
approximate matching agrep orders magnitude faster programs tested 
believe main strength agrep flexible general convenient previous programs 
tests run sun sparcstation ii running unix 
files size mb sub dictionary collection bibliographic data 
numbers seconds averages experiments 
measured time facility unix user times taken adds considerably 
table compares agrep programs exact string matching 
programs boyer moore type algorithms 
original egrep 
words varying sizes patterns averaged results 
text size agrep gre grep egrep mb kb table exact matching simple strings 
table shows results searching multi patterns 
line pattern consisted words words table searched inside dictionary second line pattern consists separate titles words long searched bibliographic file 
pattern agrep gre grep words titles table exact matching multi patterns 
table shows typical running times approximate matching 
patterns matching string matching tested errors denoted er 
programs tested come close 
pattern er er er string matching matching table approximate matching simple strings 
table shows typical running times complicated patterns including regular expressions 
agrep boyer moore type filtering patterns 
result running times slower simpler patterns 
best algorithm know approximate matching arbitrary regular expressions myers miller mm 
running times cases tested order magnitude slower algorithm fair test myers miller algorithm handle arbitrary costs handle running time independent number errors competitive better number errors large 
pattern er er er er jacm graph prob tic algo prob tic trees ees table approximate matching complicated patterns 

searching text presence errors commonly done hand tries possibilities 
frustrating slow guarantee success 
agrep alleviate problem searching general robust 
searching convenient having spell precisely 
agrep fast general find numerous applications 
collaboratory system hps new tool development locating files unix system new algorithm finding information distributed environment fm 
applications agrep modified novel way search inside specially compressed files having decompress 
ricardo baeza yates gene myers rao helpful conversations approximate string matching comments improved manuscript 
ric anderson cliff andrew hume david sanderson shu ing help comments improved implementation agrep 
william chang andrew hume kindly providing programs experiments 
ac aho corasick efficient string matching aid bibliographic search communications acm june pp 

ba baeza yates improved string searching software practice experience pp 

bg baeza yates gonnet new approach text searching proceedings th annual acm sigir conference information retrieval cambridge ma june pp 

bm boyer moore fast string searching algorithm communications acm october pp 

cl chang lawler approximate string matching sublinear expected time th annual symp 
foundations computer science october pp 

cw walter string matching algorithm fast average proc 
th international colloquium automata languages programming pp 

fm finkel manber design implementation server retrieving distributed data preparation 
finkel manber wu tool locating files large file system preparation 
gp galil park improved algorithm approximate string matching siam computing december pp 

ha gnu grep usenet archive comp source unix volume february 
hps hudson peterson schatz systems technology building national collaboratory university arizona technical report tr july 
hs hume sunday fast string searching software practice experience november pp 

hu hume personal communication 
kmp knuth morris pratt fast pattern matching strings siam journal computing june pp 

mm myers miller approximate matching regular expressions bull 
mathematical biology pp 

tu tarhio ukkonen approximate boyer moore string matching technical report dept computer science university helsinki march 
uk ukkonen finding approximate patterns strings journal algorithms pp 

wm wu manber fast text searching errors technical report tr department computer science university arizona june 
wm wu manber filtering search approach string matching problems preparation 
biographical sketches sun wu ph candidate computer science university arizona 
research interests include design algorithms particular string matching graph algorithms 
udi manber professor computer science university arizona 
received ph degree computer science university washington 
research interests include design algorithms computer networks 
author algorithms creative approach addison wesley 
received presidential young investigator award best award seventh international conference distributed computing systems distinguished teaching award faculty science university arizona 
