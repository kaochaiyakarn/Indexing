static semantic analysis theorem proving casl till mossakowski bernd krieg bruckner bremen institute safe systems universitat bremen box bremen 
email kol informatik uni bremen de 
presents static semantic analysis casl common algebraic specification language 
syntax trees generated including subsorts overloaded functions predicates 
static semantic analysis implementation overload resolution algorithm checks qualifies syntax trees 
result fully qualified casl syntax tree overloading resolved 
syntax tree corresponds theory institution underlying casl subsorted partial order logic sort generation constraints subpcfol 
ways embedding subpcfol higher order logic hol logical framework isabelle discussed subpfol hol pfol partial order logic drops subsorting partiality second counterpart subsorted order logic 
subpcfol stands sort generation constraints translated separately 
sketch integration embedding casl uniform workbench 
past decades large number algebraic specification languages developed diversity basic algebraic specification concepts 
goal cofi common framework initiative algebraic specification development get common agreement algebraic specification community basic concepts provide family specification languages different levels development methodology tool support 
family specification languages comprises central common language called casl various restrictions extensions casl 
design proposal casl completed representatives algebraic specification language groups tentatively approved ifip working group foundations systems specification 
final version expected shortly 
variety tools experience available sensible feasible build casl tools anew scratch 
casl acronym common algebraic specification language pronounced castle 
promising strategy build bridges existing tools transform casl specification format recognizable existing tool 
important property bridges course sound complete way 
complicated preserve structure possible possible bi directional order able re transform intermediate steps appear application target tool visualize casl formulae theories 
provide set tools casl theorem proving transformation development 
bridge casl existing theorem proving tool perform syntactic analysis static semantic analysis encoding casl logic tool logic 
want tool allows integrate steps 
isabelle generic tool suited doing 
represent institution underlying casl isabelle hol spirit shallow embedding encoding isabelle hol 
comprises minimal set tools small part casl amenable machine support 
outline follows preliminaries casl isabelle describe embedding casl isabelle presenting parsing techniques static semantic analysis including overload resolution algorithm encoding isabelle hol enables borrow theorem prover facilities 
concludes sketching extensions encoding integration possibilities development tool environment pursued uniform project 
preliminaries section preliminaries casl isabelle 
casl casl common algebraic specification language language common framework initiative cofi major novelty lies combination existing concepts constructs 
casl encompasses basic specifications structured specifications architectural specifications libraries 
focus concentrate basic specifications small features particular partiality 
functions may partial value function application term possibly undefined 
total functions may declared 
underlying logic valued 
subsorts overloading 
subsort inclusions represented injective embedding functions 
injections subsort supersort may left implicit allowing concise notation projections supersort subsort inserted explicitly may partial 
furthermore functions predicates may overloaded symbol declared profile argument result sorts 
formulae 
usual order quantification logical connectives provided sort generation constraints 
basic specification casl consists list basic items 
basic item may declaration sorts subsorts partial total functions predicates axiom 
axioms usual order formulae atomic formulae existential strong equalities terms applications predicates list terms definedness tests defined check term defined membership tests check term belongs subsort 
terms built variables function symbols usual way additionally term may forced certain sort ways sorted term forces term sort implicitly adding injections term specified sort cast projects term subsort note undefined value term belong subsort 
function predicate symbols may qualified profile argument result sorts 
kind axioms sort generation constraints specifying set sorts set functions 
list casl signature declarations leads signature subpcfol subsorted partial order logic sort generation constraints see formal definition institution underlying casl 
signature sigma tf pf consists set sorts theta indexed sets tf pf total partial function symbols indexed set predicate symbols subsorting relation pre order reflexive transitive relation notation write tf 
pf pw write gamma 
tf pf just gamma 
signature associated overloading relations indicate pairs profiles function predicate symbol interpreted way models 
definition guided principle arguments valid different profiles say interpreted way interpretations profiles 
specifically model arguments intersection lead result union subsorts injections approach taken casl approximate intersection considering argument common subsort union considering injection result common supersort forms basic items 
easily translated signature axioms 
formally subpfol signature sigma tf pf consider profiles gamma 
gamma 
tf pf function symbol gamma 
gamma 
iff exist profiles predicate symbol iff exists overloading relations play role formedness terms formulae ambiguity due overloading formed formula harmless sense possible fully qualified expansions profiles explicit injections inserted interpreted way 
order formula formed built formed atomic formulae usual way 
atomic formula context variables formed sorted expands atomic formula constructing sentences subpfol unique equivalence atomic formulae terms 
equivalence fully qualified terms congruence relation including cases application embedding sort applications different compositions embedding functions term profiles function symbols overloading relation embedding 
equivalence fully qualified atomic formulae equivalence relation including cases formulae identical replacement equivalent terms formulae profiles predicate symbols overloading relation embedding 
finishes overview casl small 
casl incorporates large concepts structured architectural specifications libraries 
subject hope experiences gained extended casl large 
isabelle isabelle interactive tactic generic theorem prover supports family logics order logic fol zermelo frankel set theory zf constructive type theory ctt logic computable functions lcf higher order logic hol 
logics encoded isabelle metalogic 
isabelle supports natural deduction style 
principal inference techniques resolution higher order unification term rewriting 
approach encode casl isabelle hol style hol encodings 
allows re rich set hol theorems tactics casl 
furthermore aim isabelle basis transformational development framework proposed 
isabelle host development transformation rules basic tactics proof scripts representing casl isabelle hol text 
parsing fflffl casl syntax pretty printing oo static semantic analysis fflffl institution subp fol 
standard representation oo encoding fflffl higher order logic 
decoding oo 
architecture representing casl isabelle hol representation casl isabelle hol consists steps cf 
fig 

parsing input text yielding syntax tree represented ml data structure 

static semantic analysis including overload resolution checks syntax tree corresponds formed casl specification parallel constructs theory subpcfol underlying institution casl 
static semantic analysis follow static semantic rules casl language semantics 

encoding subpcfol isabelle hol 
encoding achieved map underlying institutions logics 
subsection concentrate steps discuss steps reversed 
parsing example consider specification stacks bags casl fig 

concrete syntax casl see easily represented parsing machinery isabelle 
keep static analysis written ml simple ml function converts syntax tree isabelle format spec stacks bags sort stack ops empty stack push elem theta stack stack pop stack 
elem pred isempty stack vars elem stack axioms isempty empty isempty push pop push sorts elem bag bag ops empty bag add elem theta add elem theta bag pred isempty bag vars elem bag axioms isempty empty isempty add add add add 
specification stacks bags casl concise ml format 
furthermore isabelle easily implement called print translations pretty printing casl syntax trees 
static semantic analysis static semantic analysis follow static semantic rules casl semantics 
rules encoded straightforward way exception overload resolution described 
outcome static analysis theory signature set sentences subsorted partial order logic sort generation constraints subpcfol underlying institution casl 
sentences subpcfol fully qualified means function predicate symbol qualified profile 
consequence ambiguities caused overloading completely resolved 
task overload resolution generate fully qualified subpcfol sentence unqualified partially qualified casl formula sentence called fully qualified expansion casl formula 
overload resolution arbitrary closed casl formula proceeds inductively structure formula environment sorts variables current scope carried 
suffices design overload resolution algorithm atomic formulae receives atomic formula environment input returns expansion atomic formula message resolvable 
atomic formula overload resolution check just fully qualified expansion atomic formula equivalences defined sect 

simple naive overload resolution algorithm collect set expansions atomic formula check semantically equivalent definitions bears lot redundancy 
sort parse algorithm regular signatures described just picks expansion minimal profiles forgets ones 
course regularity defined precisely way algorithm works 
casl impose condition signatures expect get simple algorithm 
expect algorithm behaves simple sort parse signature happens regular 
atomic formula signature sigma context sorted variables overload resolution algorithm inductively computes set minimal expansions follows constant variable term set sigma computed follows consider set fc fc pf 
take subset minimal 
divide subset equivalence classes equivalence relation generated function application inductively compute sigma set equivalence classes 
sigma theta delta delta delta theta sigma consider set possible profiles cn op gamma 
gamma 
tf pfg define equivalence relation generated gamma 
gamma 
op gamma 
op gamma 
theta delta delta delta theta gamma 
tf pf op gamma 
op gamma 
note distinguish constants variables overload resolution 
simplicity projection casts considered special partial function symbols 
get subpcfol formula algorithm refined inserting injection inj term context term sort required 
due full qualification insertion injections unambiguous 
take fp cn cn erm sigma theta delta delta delta theta erm sigma replace subset minimal chooses set subsets sigma 
sorted term inductively compute sigma 
sigma sigma contains set ft sg predicate application compute set way parallels computation function applications output sigma 
sigma contains exactly equivalence class element equivalence class serve fully qualified expansion 
ambiguous output element equivalence class show set possible user 
regular case sets just singletons consist sort parse 
exceptional non regular cases algorithm complicated 
computing minimality equivalence inductive step algorithm avoids exponential time traps typical runs polynomial time 
example fig 
analyzed overload resolution algorithm returns error disambiguate pred isempty bag op empty bag pred isempty stack op empty stack error repaired replacing unqualified axiom isempty empty qualified expansions respectively 
correction sorts inferred correctly overload resolution algorithm 
example add add add add analyzed op add elem theta op add elem theta bag op add elem theta op add elem theta bag note different case constant variable terms factor select minimal expansions 
simplicity equality definedness subsort membership considered overloaded predicates 
minimal expansion equivalent possible expansions 
reverse process static semantic analysis subpcfol theory construct casl specification 
done follows declare sort symbols subsorting relations total partial function symbols predicate symbols 
represent subpcfol sentence casl axiom 
options 
represent subpcfol sentence directly possible allowed fully qualify function predicate symbol profile casl 

remove qualifications function predicate symbols necessary disambiguation 
advantage axioms cluttered qualifying profiles readable 
example second option yields original input 
encoding hol central point bridge casl existing tools encoding subpcfol underlying institution casl higher order logic subpfol order logic sort generation constraints omitted 
logics number theorem proving tools available 
technically achieved simple map institutions sense surjective model translation 
setting application borrowing technique proposed allows re theorem provers sound complete way 
moment ignore sort generation constraints concentrate subpfol 
basically ways encode subpfol fol partial order logic pfol subsorted firstorder logic subinstitution subpfol singles signatures partial function symbols sentences partial projection symbols 
pfol subpfol fol encoding subpfol pfol 
translation subpfol pfol built definition subpfol pfol defined subpfol signatures translated pfol signatures adding explicit total injection partial projection functions subsorts membership predicates testing membership image injection subpfol sentences models defined certain pfol sentences models respectively 
encoding pfol fol 
translation pfol fol described 
refine translation 
main idea add carrier set new element represents undefined partial functions 
signature translation pfol signature sigma tf pf translated fol theory having signature sign phi sigma tf pf theta sg fd sg set axioms ax phi sigma ffl tf 
pf plays role definedness predicate role existential equality 
axioms signature translation state exactly undefined element total operations total operations predicates strict 
sentence translation sigma sentence pfol translated phi sigma axiom ff sigma ff sigma defined ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma false false ff sigma ff sigma ff sigma ff sigma true true ff sigma ffl ffl ff sigma ff sigma ffl ffl ff sigma kinds sentence translation non trivial existential equality mapped congruence relation definedness mapped definedness predicate quantifiers relativized set defined elements 
model translation phi sigma structure fol translated partial sigma structure fi sigma pfol fi sigma sigma gamma phi sigma sigma gamma phi sigma reduct obvious map sigma gamma 
phi sigma interpreted partial sigma structure 
quotient taken 
note subset equality relation quotient effect take subset defined elements define operations partial restrictions original operations 
model translation easily shown surjective partial sigma structure just add element carriers functions map behave undefinedness partial functions mapped 
predicates false new element 
representation condition proved 
encoding subpfol signature translation sigma tf pf subpfol signature 
fs exists variable system sigma term sort built partial function symbol projection sg ae sigma translated signature sign phi sigma consisting sort set ordered augmented function symbols tf 

pf 
gamma 
tf pf fs pr 
pr 
predicate symbols fs theta axioms ax phi sigma ffl ffl pr ffl ffl pr ffl pr pr ffl tf ffl 
pf ffl assume contain sorts form higher order extension type constructor behaving 
idea add new element represents undefined retain old sorts undefined element 
sort set doubled sort gets companion supersort contains values plus undefined element 
keep old sorts definedness predicate just membership old sorts 
add companion supersort sorts necessary term involving partial operation symbols exists 
signature translation introduce versions function predicate symbol original overloaded strict extension just propagates undefined element 
strict extension necessary want apply function predicate symbol term involving partial operation symbols term translated term sort partial projections introduce new special function symbols existential equality introduce new predicate symbols 
sentence translation sigma sentence subpfol translated phi sigma sentence inductively follows ff sigma ff sigma op tf ae op ff sigma ff sigma ff sigma op 
ff sigma ff sigma ff sigma op 

pf ae op 
ff sigma ff sigma ff sigma op 
ff sigma ff sigma ff sigma pred ae pred ff sigma ff sigma ff sigma pred ff sigma ff sigma ff sigma pr ff sigma ff sigma defined ae ff sigma ff sigma true ff sigma ff sigma ff sigma ff sigma ff sigma ae ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma easily extended atomic formulae 
apart mapping definedness projection special symbols introduced translation mainly checks original version function predicate symbol strict extension propagates undefined element 
strict extension necessary argument term involves partial operation symbol 
model translation phi sigma structure translated partial sigma structure fi sigma subpfol having carriers sets total functions predicates inherited partial functions fi sigma result sort 
straightforward inverse sigma structure extended adding new carriers adding strict extensions map 
representation condition proved easy induction structure sentences 
encoding fol 
restriction translation subpfol pfol described leaves partial projection symbols 
problem connected membership predicate originally axiomatized partial projections definedness ffl defined pr definedness translated membership avoid vicious circle axiom replaced ffl ffl inj comparison ffi ffi comparing ways encoding subpfol fol see way disadvantage new sorts introduced advantage original sort system interpretation kept 
sorted total specifications left unchanged encoding pfol may adapted property 
encoding subpcfol hol 
subpcfol adds sort generation constraints subpfol 
expressed fol translated usual induction schemes expressed hol secondorder quantification predicates 
way back previous section ways encoding subpfol subpcfol fol hol described allow re hol theorem provers subpcfol underlying institution casl 
intermediate steps axiom universal horn form form limit theory admits initial models see 
composition ffi written entirely universal horn form 
hol proof visualized user subpcfol casl formulae interpreting special operation predicate symbols introduced translation original meaning 
decoding displaying pretty printed hol formulae occur goals isabelle theorem proving sessions casl syntax 
target decoding set sentences original signature signature enriched sorts form value sort may undefined value sort variable sort may interpreted potentially undefined variable sort resembles partial logic scott 
standard proof calculi partial logics notion possibly undefined variable 
means application substitution rule preceded proof definedness term substituted 
advantage working possibly undefined variables usual substitution rule higher order logic remains valid just substitution rule hol inherited encoding 
developed static semantic analysis casl including overload resolution algorithm described implemented 
result overload resolution fully qualified casl tree involving subsorts partiality considered theory subsorted partial order logic sort generation constraints subpcfol underlying institution casl 
second part described translations going subpfol casl sort generation constraints fol order logic subpcfol full casl logic hol higher order logic 
translation drops subsorts partiality partiality subsorts 
allows usual substitution resolution theorem provers fol hol doing proofs casl 
shown intermediate proof steps fol hol proof translated back slight extension subp fol 
realized prototype implementation uses system providing interactive window user interface 
results depend specific features isabelle designed encoding casl connection theorem prover higher order logic 
important task prove derived rules design tactics isabelle hol encoding particularly suited theorem proving casl 
example think simplifier sets isabelle term rewriting machinery automatically deal injections projections 
direction restriction casl encoding suitable subsets casl axioms universal horn formulae just equations 
slight modifications embedding target universal horn theories means paramodulation conditional term rewriting applicable 
third direction extension current encoding extensions casl higher order casl 
important challenging field research remains casl large 
think ways extending embedding working syntax structured specification syntactical level encoding large model theory hol 
transformational program development embedding casl isabelle hol integrated universal formal methods workbench uniform project 
integration just instantiation generic graphical user interface generates transformational program development environment transformation application system tas 
theorem prover isabelle prove correctness particular development correctness transformation rules see 
main topic tackled development suitable transformations casl 
bunch transformations developed 
range simple transformations complex ones split postcondition finite differencing adapted algebraic approach program development proved correct casl embedding 
participants cofi 

bidoit choppy krieg bruckner mosses 
concrete syntax casl basic structured specifications 
postscript december 

burmeister 
model theoretic approach partial algebras 
akademie verlag berlin 

cerioli krieg bruckner mossakowski 
permissive subsorted partial logic casl 
johnson editor algebraic methodology software technology th international conference amast volume lecture notes computer science pages 
springer verlag 

cerioli meseguer 
may borrow logic 
transporting logical structures maps 
theoretical computer science 

cerioli mossakowski reichel 
total equational partial order 
astesiano 
kreowski krieg bruckner editors algebraic foundations systems specifications 
appear www brics dk projects cofi documents casl www informatik uni bremen de ifip chapters chapters html 
cofi task group language design 
casl cofi algebraic specification language summary 
cofi document casl summary 
www ftp september 

cofi task group semantics 
casl cofi algebraic specification language version semantics 
cofi note 
www ftp july 

goguen meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
theoretical computer science 

hoffmann krieg bruckner 
program development specification transformation 
lncs 
springer verlag 

luth meier wolff 
tas generic interfaces transformational program development theorem proving 
bidoit dauchet editors proceedings seventh international joint conference theory practice software development tapsoft pages 
springer verlag lncs 

mossakowski 
implementation casl isabelle hol 
bremen university 

santen wolff 
correct user friendly implementations transformation systems 
gaudel woodcock editors formal methods europe lncs pages 
springer verlag 

santen wolff 
structure preserving encoding isabelle 
von 
wright grundy harrison editors theorem proving higher order logics lncs pages 
springer verlag 

krieg bruckner 
olderog balzer baer 
uniform workbench fur formale methoden 
technischer bericht universitat bremen 
english version bmbf 
meseguer 
general logics 
logic colloquium pages 
north holland 

mossakowski 
equivalences various logical frameworks partial algebras 
editor computer science logic 
th workshop csl 
paderborn germany september selected papers volume lecture notes computer science pages 
springer verlag 

mosses 
cofi common framework initiative algebraic specification development 
bidoit dauchet editors tapsoft volume lncs pages 
springer verlag 

paulson 
isabelle generic theorem prover 
number lncs 
springer verlag 

scott 
identity existence intuitionistic logic 
fourman mulvey scott editors application sheaves volume lecture notes mathematics pages 
springer verlag 
www brics dk projects cofi documents casl summary ftp ftp brics dk projects cofi documents casl summary www brics dk projects cofi notes ftp ftp brics dk projects cofi notes www informatik uni bremen de cofi www informatik uni bremen de uniform 
