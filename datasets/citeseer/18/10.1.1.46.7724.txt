proceedings second international conference coordination models languages lncs springer berlin checking assumptions component dynamics architectural level paola inverardi alexander wolf daniel dipartimento di matematica department computer science universit di aquila university colorado aquila italy boulder usa de computaci universidad de buenos aires buenos aires argentina 
critical challenge faced developer software system understand system components correctly integrate 
type theory provided substantial help detecting preventing errors mismatched static properties remains area dynamics 
particular components assumptions behavioral interaction components currently limited ways state assumptions analyze assumptions correctness 
begun formulate method addresses problem 
method operates architectural level behavioral integration errors deadlock revealed early development 
component specification interaction behavior assumptions interaction behavior external context expects operate 
defined algorithm specifications set components performs adequacy checks component context assumptions component interaction behaviors 
configuration system possible successful way matching actual behaviors assumptions 
effect extending usual notion type checking include checking behavioral compatibility 
critical challenge faced developer software system understand system components correctly integrate 
type theory provided substantial help detecting preventing errors mismatched static properties remains area dynamics 
particular components assumptions behavioral interaction components currently limited ways state assumptions analyze assumptions correctness 
previous developed specification analysis method software architectures cham chemical machine formalism 
cham formalism primarily describe semantics various models concurrency semantics various concurrent programming languages 
showed describe actual software systems 
method proven useful uncovering variety errors architectural level 
method defined significant shortcoming 
shortcoming limits method usefulness developing system assembling existing architectural components 
particular method depends specification analysis system global component interaction behavior 
appropriate method permit specification local interaction behavior individual component 
include actual behavior component assumptions expected interaction behavior components 
method component specifications discover mismatches components system integration configuration time 
begun formulate new method takes approach 
currently cham formalism method wider applicability 
method specifying systems global behavior specify individual components local behavior 
defined algorithm specifications set components performs adequacy checks component context assumptions component interaction behaviors 
configuration system possible successful way matching actual behaviors assumptions 
effect extending usual notion type checking include checking behavioral compatibility 
give initial demonstration feasibility approach describing application system compressing proxy investigated garlan wing compare inverardi wolf 
system contains incompatibilities assumptions interaction behaviors components 
algorithm successfully reveals known fact error result deadlock 
related software architectures structures individual components behave independently interact 
dynamics structures interest 
line unexpected languages express concurrency semantics borrowed describe software architectures 
csp cham models pi calculus posets 
believe approach independent particular specification language advantage cham formalism embedded particular form interaction 
languages synchronous asynchronous broadcast point point communications chosen 
perspective module interconnection languages informal semiformal languages describe software architectures 
cases difficult prove properties systems 
perry presents model semantics connections taken account check modules match 
semantic information modules predicates verify properties 
aimed modules assembly modules dynamics system considered 
sequences actions associated locally modules components describe behavior allowed interactions introduced path expressions 
description potential behavior regular expression atomic elements represented calls module 
idea behavioral equivalence check dynamics software system architectural level explored allen garlan 
architectural description language wright component ports represent points interaction components 
interacting directly components interact indirectly special components called connectors 
connectors special ports called roles 
interaction occurs components placing connector associating port component role connector 
semantics ports roles wright subset language csp 
notion consistency introduced behavioral equivalence csp agents describing semantics corresponding ports roles 
roles introduced explicitly support connector reuse idea related notion expected behavior 
roles sense describe expected behavior particular port 
consistency checked port level possible verify properties require ports interact 
words internal behavior component taken account complex evolutions captured equivalence 
example introduced show behavior component order find anomalies 
illustrate point roles ports analogy call guest analogy 
suppose invited party 
expect host receive door invite 
expect host partner take living room offer drink 
host partner know expect host introduce partner 
individual behaviors host partner satisfied host disappears introducing partner uncomfortable situation 
perspective insufficient behavior interaction host interaction partner described assumptions global party context host introduce partner described 
background cham formalism developed berry boudol domain theoretical computer science principal purpose defining generalized computational framework 
built chemical metaphor proposed banatre le illustrate gamma gamma formalism parallel programming programs seen multiset transformers 
cham formalism provides powerful set primitives computational modeling 
generality power utility clearly demonstrated formally capturing semantics familiar computational models csp ccs process calculus 
boudol points cham formalism demonstrated modeling tool concurrent language definition implementation 
cham specified defining molecules defined terms syntactic algebra derive set constants set operations solutions molecules 
molecules constitute basic elements cham solutions multisets molecules interpreted defining states cham 
cham specification contains transformation rules define transformation relation gamma 
dictating way solutions evolve states change cham 
chemical metaphor term reaction rule interchangeably term transformation rule 
transformation rules kinds general laws valid chams specific rules depend particular cham specified 
point cham apply rules possible solution provided premises conflict molecule involved rule 
way possible model parallel behaviors performing parallel transformations 
rule apply molecule set molecules nondeterminism case cham nondeterministic choice transformation perform 
may able completely control sequence transformations specify rules enabled 
rules applied solution solution said inert 
applying formalism software architecture structure specifications parts 
description syntax components system molecules represented 
solution representing initial state system 
set reaction rules describing components interact achieve dynamic behavior system 
syntactic description components algebra molecules words syntax molecules built 
perry wolf distinguish classes components data elements processing elements connecting elements 
processing elements components perform transformations data elements data elements contain information transformed 
connecting elements glue holds different pieces architecture 
example elements involved effecting communi cation components considered connecting elements 
classification reflected syntax appropriate 
initial solution subset possible molecules constructed syntax 
corresponds initial static configuration system 
transformation rules applied initial solution define system dynamically evolves initial configuration 
compressing proxy problem section design compressing proxy system 
description derived garlan wing 
improve performance unix world wide web browsers slow networks create hyper text transfer protocol server compresses data sends network 
purpose compressing proxy gzip compression decompression program standard server available cern 
cern server consists filters strung series 
filters communicate function call stream interface 
functions provided interface allow upstream filter push data downstream filter 
filter said read data previous filter series invokes proper interface function interface provides function close stream 
interface filters function filters reside single unix process 
gzip program filter level unix process 
uses standard unix input output interface communication gzip occurs unix pipes 
important difference unix filters gzip cern filters unix filters explicitly choose read cern filters forced read data pushed 
assemble compressing proxy existing cern server gzip modification insert gzip filter stream appropriate point 
gzip proper interface create adaptor shown 
adaptor acts pseudo cern filter communicating normally upstream downstream filters function call interface gzip pipes connected separate gzip process creates 
proper understanding assumptions component mismatch interaction behavior components occur integrated single system 
consider straightforward method structuring adaptor 
adaptor simply passes data gzip receives data upstream filter 
stream closed upstream filter data compressed adaptor reads compressed data gzip pushes data downstream filter 
filter filter pseudo filter adaptor gzip compressing proxy process component channel function call interface unix pipe interface fig 

compressing proxy 
perspective adaptor local behavior sense 
making assumptions interactions gzip incompatible actual behavior gzip 
particular gzip uses pass compression algorithm may attempt write portion compressed data internal buffer full adaptor ready blocking 
gzip blocked adaptor blocked attempts pass data gzip leaving system deadlock 
obviously way avoid deadlock situation adaptor handle data incrementally non blocking reads writes 
allow adaptor read data gzip attempt write data gzip blocked 
compressing proxy simple example understood solution 
note system initially developed approach architectural mismatch detected system implemented 
see representative common problem software development 
specifying component behavior assumptions section show specify behavior component architectural level possible derive representation actual behavior assumptions external context 
essence component modeled separate cham refer component cham 
conceptually complete system specified combining separate chams single integrated system cham 
details composition process scope 
concerned specify component chams checked pairwise compatibility 
component chams specify component cham give syntax molecules representing component rules describing behavior component initial solution molecules representing initial state component 
compressing proxy specify component chams table 
important note justification choosing particular specifications compressing proxy component behaviors germane topic 
fact detailed understanding specifications unnecessary follow discussion 
give high level incomplete description specifications 
upstream cern filter cfu downstream cern filter cfd syntax pi cfu phi pi cfd phi trans 
rules pi pi gamma 
pi pi pi gamma 
pi cfu pi pi gamma 
pi pi pi gamma 
pi cfd init 
sol 
cfu pi cfd pi gzip gz adaptor ad syntax pi gz phi eof eof pi ad phi eof eof trans 
rules pi pi gamma 
pi pi pi pi gamma 
pi pi eof pi pi eof pi pi gamma 
pi pi eof pi pi eof eof pi gamma 
pi eof pi gamma 
pi gz pi pi gamma 
pi pi pi pi gamma 
pi pi eof pi pi eof pi pi gamma 
pi pi eof pi pi eof eof pi gamma 
pi eof pi pi gamma 
pi eof pi pi ad pi pi gamma 
pi pi eof pi ad init 
sol 
pi eof pi pi eof pi gz pi pi eof pi ad table 
component chams compressing proxy example 
consider upstream cern filter cf syntax molecules representing component consists set representing name component processing element cf placeholder phi refer components cfu interacts 
includes set representing connecting elements 
connecting elements component operations input output act elements third set general elements refer channels component communicates components 
case cf need consider channel output channel upstream filter 
notice cf downstream filter consider channel case representing input filter 
syntax includes infix operator pi express status component respect communication behavior 
status understood reading molecule left right 
left position left operand left pi operator molecule indicates action molecule prepared take 
position occupied communication operation kind communication represented operation take place 
interaction behavior upstream filter component captured transformation rules 
rule general inter element communication rule generically describes pairwise input output communication processing elements 
notice rule component chams 
second rule allows cfu iterate communication behavior 
initial solution cfu quite simple 
indicates component starts state waiting output data 
second transformation rule applied solution carry communication 
chams components follow similar structure share similar rules 
critical issue example interaction behaviors gzip adaptor explain bit 
specifications gzip adaptor syntaxes include set elements communications adaptor ad gzip gz take place eof denotes input file eof denotes output file 
component chams share transformation rules govern iteration input output behaviors involving data markers eof eof rule gzip component cham describes simple iterative behavior 
iterative behavior adaptor hand complex changing structure rule particular characterized phased behavior component switches mode accepting raw data passing data presumably gzip fact component acting adaptor mode receiving data presumably gzip adapted component passing data stream 
mentioned component chams integrated form system certain amount configuration occur 
instance compressing proxy example symbolic communication channels referred individual chams elements instantiated channel numbers diagram resulting actual connections established components 
obvious preceding discussion configuration operation cause symbolic channel upstream filter symbolic channel adaptor identified actual channel labeled diagram 
deriving actual assumed behaviors order check compatibility components need suitable representations actual behavior ac component assumed behavior external context 
component derive representations component cham specification 
model representations directed rooted graph nodes arcs labeled 
formally ta set nodes set arcs set natural numbers set node labels taken cham molecule set set arc labels taken set obtained syntax components plus special labels ff 
compressing proxy example labels set ffg label appear ac graphs label ff appear graphs 
addition sets source node function ta target node function node labeling function arc labeling function 
graphs enriched relation arcs called 
ac graphs model behaviors intuitive manner 
nodes represent states component molecules 
root node initial state component 
note current formulation allow dynamic creation components 
arc represents possible transition new state transformation rule component cham 
label arc part molecule deleted transformed rule refer label consumed label 
molecule occur transformation label arc transition occur interaction external context 
example transformation rule cf definition ac graph component cham ac graphs defined constructively follows 
root node associated initial molecule component cham 
node molecule associated node child node exists rule application solution requires labels relation constructed follows 
ffl molecule associated molecule obtained modifying ffl arc connecting labeled applied solution contains ffl arc labeled label consumed applied ffl application results component molecule arcs connecting node labeled component molecule identified arcs 
informally arcs identify alternative subgraphs component 
discussed corresponds concurrent multi threaded behavior component 
respect proving absence deadlock sufficient show active alternative subgraph derivation 
graphs intuitively counterpart ac graphs 
model assumed behavior external context 
ac graph corresponding graph models behavior context required perform derivations modeled ac graph 
general context provided components graphs refer behavior component 
structured graph step actual behavior molecule context expected transformation ac graph take place 
informally ac nodes represent states component nodes represent states components permit reaction occur solution 
number nodes graph number nodes ac graph 
correspondence node ac graph node graph describe reaction 
assumption graphs nodes labeled differently order distinguish molecules participate transformation 
graph structure allows recover ordering component asks molecules context 
general molecules participate producing required total context 
identify nodes numbers replicate node potentially different molecule provide required context 
words nodes number refer solution associated node corresponding ac graph considered different required context come different molecules 
helps matching phase 
single molecule produces subset context actual behavior structure subgraph 
ac graph component cham define corresponding graph 
graphs nodes labeled natural numbers 
definition graph component cham gac ac graph component cham corresponding graph constructed follows 
nodes ac replicated nodes 
root node label associated root node gac node label associated node ac outgoing arc node labeled due application rule outgoing arc node corresponding labeled conjunction labels consumed label corresponds consumed label molecule required context perform reaction reached node exist label gamma children outgoing arc gac labeled outgoing arc labeled ff 
general node replicated possible show external molecule participating reaction transformation preceding 
arcs corresponding arcs 
ac arcs labeled corresponding arcs labeled ff 
intuitive meaning ff label graphs abstracting away requirements actual behaviors 
ff transition means care requirement matched sequence transformations actual behavior graph ac 
construction purposes ff arcs model cycles fact certain molecule spontaneously offered infinitely times context 
ff arcs label arcs transformation actual behavior graph required context 
ac graphs component chams compressing proxy example appear figures 
ac ac fig 

ac graphs upstream top downstream bottom filters 
eof eof eof eof ac fig 

ac graphs gzip 
checking assumptions primary goal provide way architect check configuration components results correct system 
essence means comparing assumptions external context component actual behavior exhibited components interacts 
concentrated deadlock freedom correctness criterion developed algorithm performs check 
checking algorithm equivalence relation ac graphs graphs 
informally goal configuration phase find way match components 
means component assumptions fulfilled component actual behavior 
general course multiple actual behaviors contribute fulfilling assumptions single component 
example true adaptor component 
configuration phase succeeds system deadlock free 
configuration phase fails means way satisfy assumptions component component block derivation possible match components 
conclude system blocks iterate checking phase reducing actual behavior blocking components 
words eliminate part block see affects components 
eof eof eof eof ac fig 

ac graphs adaptor 
checking algorithm checking algorithm built notion equivalence allows compare ac graphs graphs 
equivalence relation allows nodes arcs put relation 
graph fulfilled ac graph try put relation graph ac graph 
idea arcs nodes graph covered exist possibility actual behavior provide required information 
denote fl sequence transformations suitably labeled including empty transformation 
consider equivalence transformations ff fl fl analogously holds 
fl ff fl definition gac actual behavior graph assumption graph fl ff nodes related fl fl ff fl covered node 
fl fl 
exists node fl exists ta arc descendant graphs related nodes ac relation nodes 
nodes relation called covered nodes 
nodes covered graph completely covered partially covered 
extend notion arcs saying arc covered source target nodes covered 
definition allows compare ac graphs 
note way require actual behavior completely match part assumption 
definition derives extent known milner bisimulation 
require complete matching components take account potential concurrent behavior component 
respect condition definition says actual behavior performs required assumptions harmful derivation possible reach solution allows required context exists concurrent component behavior provide context 
define matching algorithm 
define notion substitution 
definition substitution substitution set pairs ac 
denote ffl empty substitution generic substitution oe ac asn 
configuration gamma set components identify notation oe gamma system built component gamma association substitution oe 
definition matching algorithm gamma fc cng configuration oe empty substitution 

gamma graphs match gamma true oe 

try find pair 
partially covered obtain new graph cj reflects partial match labeling covered arcs ff oe oe go step 
remove gamma assumptions go step 
propositions give proof hold 
proposition gamma configuration match gamma bool oe succeeds bool true oe ffl system oe deadlock free 
proposition gamma configuration component assumption graph arcs actual behavior ac gamma satisfies assumptions ac possible substitution ac exists computation block 
proposition generalized case arcs showing algorithm complete 
case arcs complex requires detailed analysis 
see apply definitions example 
aim define single system components specified table 
start configuration gamma ad cf cf try apply algorithm 
thing try find possible pair ac 
try pair ac cfu ad 
pair succeeds put relation nodes ac cfu nodes ad obtain result partially covered assumption graph adaptor ad analogously happens pair ac cf ad resulting assumption graph ad attempt match actual behavior gzip remaining part assumption graph adaptor 
case able relate nodes ac gz nodes ad illustrates mismatch problem 
worth noticing mismatch occurs exactly deadlock system appears 
fact satisfy assumption adaptor corresponds state adaptor requires eof context 
adaptor blocked producing eof turn cause gzip block achieving state deadlock 
adaptor modified eliminate deadlock introducing parallelism behavior discussed section 
modified component cham adaptor shown table 
replaces phased behavior adaptor non blocking reads writes 
eof eof ac ac eof eof eof eof ac fig 

mismatch actual assumed behavior leading deadlock 
adaptor ad syntax pi ad phi eof eof trans 
rules pi pi gamma 
pi pi pi pi gamma 
pi pi eof pi pi eof pi pi gamma 
pi pi eof pi pi eof eof pi gamma 
pi eof jm delta delta delta mk gamma 
mk pi gamma 
pi ad init 
sol 
pi pi eof pi ad pi eof pi pi ad table 
modified component cham adaptor 
algorithm check properties system architectural level 
level properties interest mainly dynamic properties related coordination components component potential behavior order successfully integrated architecture expects context behave particular way 
introduced notion assumptions formalize component expects components 
words order components agree actual behaviors agree communication protocol port naming assumptions 
checking algorithm introduced uses assumptions actual behavior verify differences actual behavior component assumptions components behavior produce deadlock situation 
shown algorithm works case study 
clearly needs generalized 
introduced notions needed algorithm check particular problem particular situation 
example shows algorithm useful real context 
properties interest analyzed algorithms developed perform verification properties 
idea associating assumptions components may interesting consequences deadlock checking 
general components assembled form system verification performed type checking interfaces 
mentioned done checking dynamics components 
notion checking assumptions actual behavior may lead general way verifying assembly system architectural level correctly done 
information interfaces operations ports types operations potential behavior enriched assumptions component context behaves 
considerations give additional motivation generalize results 
acknowledgments wolf supported part national science foundation int air force material command rome laboratory defense advanced research projects agency contract number 
content information necessarily reflect position policy government official endorsement inferred 
inverardi supported part cnr bilateral project esprit project 

allen garlan 
formalizing architectural connection 
proceedings th international conference software engineering pages 
ieee computer society may 

allen garlan 
case study architectural modeling aegis system 
proceedings th international workshop software specification design pages 
ieee computer society march 


banatre le 
gamma model discipline programming 
science computer programming 


banatre le 
programming multiset transformation 
communications acm january 

berry boudol 
chemical machine 
theoretical computer science 

boudol 
chemical machines 
decade concurrency number lecture notes computer science pages 
springer verlag may 

campbell habermann 
specification process synchronization path expressions 
proceedings international symposium operating systems number lecture notes computer science pages 
springer verlag april 

compare inverardi 
modelling interoperability cham case study 
proceedings international conference coordination models languages number lecture notes computer science pages 
springer verlag april 

compare inverardi wolf 
uncovering architectural mismatch dynamic behavior 
technical report cu cs department computer science university colorado boulder colorado february 

garlan wing 
interoperability sample problems solutions 
technical report carnegie mellon university pittsburgh pennsylvania preparation 

hoare 
communicating sequential processes 
prentice hall englewood cliffs new jersey 

inverardi wolf 
formal specification analysis software architectures chemical machine model 
ieee transactions software engineering april 

inverardi 
relating cham descriptions software architectures 
proceedings th international workshop software specification design pages 
ieee computer society march 

luckham augustin vera bryan mann 
specification analysis system architecture rapide 
ieee transactions software engineering april 

milner 
communication concurrency 
prentice hall englewood cliffs new jersey 

perry 
inscape environment 
proceedings th international conference software engineering pages 
ieee computer society may 

perry wolf 
foundations study software architecture 
sigsoft software engineering notes october 

eisenbach 
get pi calculus semantics 
proceedings parle parallel architectures languages europe number lecture notes computer science pages 
springer verlag 

shaw garlan 
software architecture perspectives emerging discipline 
prentice hall englewood cliffs new jersey 

wolf clarke wileden 
tool set supporting interface control analysis software development process 
ieee transactions software engineering march 
article processed macro package llncs style 
