verified model checker modal calculus coq christoph computer networking laboratory swiss federal institute technology lausanne switzerland di epfl ch 
report formalisation correctness proof model checker modal calculus coq constructive type theory 
coq extraction mechanism obtain executable caml program added safe decision procedure system 
example illustrates application combination deduction 
obvious advantage combining theorem proving model checking techniques verification reactive systems 
expressiveness theorem prover higher order logic accommodate variety program modelling verification paradigms infinite state parametrised designs verified 
theorem prover transparent may require fair amount expertise 
hand model checking transparent exponential number concurrent components 
application limited systems small state spaces 
combination techniques alleviate problems inherent isolation 
integration pays combination reduction techniques transform infinite state parametrised systems finite state ones preserving properties interest 
small amenable model checking 
examples techniques interpretation inductive reasoning process level 
various model checkers integrated theorem proving environments 
common cases model checker external program invoked needed importantly results trusted 
question correctness model checker rarely posed 
take position important question proof environment highly reliable 
question gains importance context provers intuitionistic type theory coq alf lego explicit proof objects terms constructed proof 
proof objects verified inference engine implementing basic proof rules 
rules correctness proof depends correct implementation rules systems regarded reliable 
see possibilities integration model checker framework implement external program generates necessary proof object add tactic system prove model checker formally correct consider trusted decision procedure 
approaches proof system temporal modal logic implemented prover available deductive proofs 
approach followed yu luo closest 
implemented model checker modal calculus lego way 
integrating smoothly prover approach problem inefficient 
size generated proof objects grows linearly number applications proof rules 
generates large proof objects quite small examples 
second approach efficient integrates somewhat smoothly proof environment results produced model checker introduced safe axioms prover 
approach compromise 
formalised modal calculus specification model checker proved correct coq 
coq program extraction mechanism proof translated executable caml program 
possibility directly run proof model checker coq generate proof object 
see contribution fold 
firstly specification correctness proof model checker provides case study developing provably correct sequential functional programs 
best knowledge formally verified model checker 
secondly formalisation calculus prove properties possibly infinite transition systems 
finite state systems model checker provides useful decision procedure relieves user tedious details proof 
reduction techniques reduce infinite state systems finite state proved automatically model checker 
illustrate example 
outline rest follows 
section gives overview coq system 
section recalls syntax semantics modal calculus 
section describe formalisation modal calculus proof system underlying model checker correctness proof algorithm 
section reports example illustrating combination deductive proof automatic proof model checker 
overview coq coq interactive proof development system implementing calculus inductive constructions cic 
underlying pure calculus constructions powerful system barendregt cube 
combines polymorphic higher order dependent types 
additional inductive types provide powerful natural mechanism definition data types spec predicates proofs structural induction 
formally cic typed lambda calculus 
natural deduction style proof rules derive judgements form gamma meaning context gamma term type proving context gamma involves explicit construction term inhabiting curry howard correspondence allows identify proofs programs types specifications 
pure calculus coq notation basic term type constructions abstraction usually noted denotes application dependent product noted pi 
function space special case product occur free function application associates left products right 
write dependent product order improve readability 
constants prop set type called sorts 
pure calculus specified pure type system sorts fprop set typeg axioms fprop type set typeg rules theta inductive types recursion positive inductive type specified arity set constructors 
arity type form xn sort 
say arity sort inductive type structural induction principle automatically generated 
purpose definition inductive types best explained couple examples 
example 
natural numbers data type natural numbers specified inductive definition inductive nat set nat nat nat type arity set constructors nat nat nat 
case induction principle term nat ind familiar type nat prop nat nat construct cases defines function case analysis may combined fixpoint construct define primitive recursive functions 
instance addition natural numbers defined primitive recursion fixpoint add nat nat nat nat cases add note emphasising argument named system able verify structurally smaller recursive call guaranteeing termination 
example 
predicates predicate natural numbers defined inductive le nat nat prop le le le nat le le fact defines family inductive predicates indexed nat greater equal example 
logical connectives defined non recursive inductive types 
types constructors take role rules induction principle provides elimination rule 
example take existential quantification inductive ex set prop prop ex intro ex associated induction principle reminds elimination rule known natural deduction ex ind set prop prop ex program development extraction heyting constructive interpretation propositions proof formula function value proof constructs value proof 
formula understood specification program precondition input output relation proof specification valid implementation 
computational point view interested input output values proofs purely logical content 
sorts set prop mark terms computational logical content respectively 
extraction mechanism strips sub terms type sort prop keeping types sort set 
extraction function forgets dependencies types terms 
codomain subsystem cic dependent types called ind 
cic specification language ind programs 
may translated executable caml programs coq type sig isomorphic ex arity sort set 
replaces ex specifications 
sig written fx extraction yields inductive type sig arity set set constructor type sig 
type simplified isomorphic type set proof specification fy extracts function correctness justified realisability provided typable caml case practical applications interpretation ensuring case satisfies 

decision procedures specified variant logical disjunction arity sort set inductive prop prop set left right notation fag fbg 
extraction isomorphic type booleans 
example nat fx yg yg specifies decision procedure equality natural numbers 
proof methods 
possibilities prove program specification 
usual tactics tacticals provided coq 
primitive recursive functions constructed structural induction arguments 
sophisticated pattern matching requires stating proving specialised induction principles applied obtain desired control structure 
idea second method roughly give desired program system right apply special program tactic tries synthesise computational parts proof generates logical lemmas necessary complete proof 
inverse extraction process 
extraction invertible raw ind program sufficient tactic needs hints annotating program specifications 
annotated programs called realizers language realizers called real 
propositional modal calculus modal calculus subsumes expressive power modal temporal logics ltl ctl 
interpreted labelled transition systems lts structures form st act st set states act set actions st theta act theta st transition relation 
write 
assume countable sets ar variables ap atomic propositions 
model pair ae consisting lts environment ae assigns variable atomic proposition set states 
syntax modal calculus defined oe oe oe oe oe ff oe oe oe ar variable ap atomic proposition ff act action 
fixed point operators tagged finite set states 
write oe mean semantics inductively defined follows kxk ae ae kak ae ae ak ae st kak ae koe oe ae koe ae koe ae koe oe ae koe ae koe ae ae fs ff koek aeg ff oek ae fs ff koek aeg oek ae psi oek ae psi psi koek ae 
usual oex oe defined oe 
note false true propositions definable respectively 
presentation calculus negation occurs front atomic proposition called positive normal form 
implementation model checker section describes formalisation calculus coq implementation correctness proof model checker described 
fixed points assume arbitrary type ensemble type sets implemented predicates prop 
abbreviate type 
suppose monotone function inclusion ordering 
define operators mu nu definition mu included definition nu included tarski theorem operators define greatest fixed points respectively easily proved coq 
ingredient winskel reduction lemma forms basis model checker theorem reduction lemma included nu included nu union states set contained greatest fixed point monotone function exactly contained certain kind unfolding fixed point added fixed point operator 
calculus syntax semantics development model checker parametrised labelled transition system 
assume set states finite function state action computes list successors expressed lines parameter act st set parameter trans st act st prop 
axiom finite state finite full set st axiom post spec st act fl list st st elem trans inductive type defining syntax defined inductive muform set var nat muform lit st bool muform muform muform muform muform muform muform box act muform muform dia act muform muform mu list st muform muform nu list st muform muform 
variables encoded standard way de bruijn indices 
valuation atomic propositions directly coded syntax form computable predicates type st bool 
type closed negation drop negation altogether syntax 
fixed point operators tagged list states 
type env environments defined nat seen infinite lists sets states 
introduce operation env cons 
env env env cons ae returning ae 
function recursively computing semantics formula oe respect environment ae defined fixpoint sem oe muform env ae env cases oe var ae lit cf ens st oe oe intersection st sem oe ae sem oe ae oe oe union st sem oe ae sem oe ae box oe sem oe ae dia oe sem oe ae mu oe sem oe env cons ae nu oe sem oe env cons ae function cf ens st transforms predicate type st bool set states type verifying predicate 
predicate transformers defining semantics modalities 
cases fixed point operators second argument de bruijn version koek ae variable bound fixed point operator 
env cons effect shifting interpretation free variables accounting increased abstraction depth operators 
illustration give definitions 
inductive act dia intro st trans st st definition list st list st phi nu st union st list ens st phi substitution 
define type substitutions subst functions type nat muform assigning variable calculus formula 
substitution function subst muform subst muform 
table introduces notation useful context de bruijn coded variables notation definition name id nat var identity nat var shift oe delta nat cases oe cons ffi nat subst composition delta ffi lift order improve readability usual notation oe subst oe 
subst cases fixed point operators lift push substitution inside oe fi oe 
cons operator useful unfolding fixed point formulas nu delta id corresponds unfolding nu 
definitions prove lemma 
oe delta ffi ffi oe delta lemma establishes standard semantical correspondence substitution environment 
proved structural induction oe 
lemma substitution lemma oe muform ae env subst sem oe ae sem oe nat sem ae correctness assertions satisfaction relation sat states formulas defined inductive sat st oe muform prop sat intro ae env st sem oe ae sat oe call proposition sat oe correctness assertion write oe 
coq prove lemma lemma 
oe closed formulas 
oe oe oe oe 
oe oe oe oe 
dia oe st trans oe 
box oe st trans oe 
elem mu nu 
elem oe nug oe oe oe cons delta id proof 
items follow directly semantic definition 
need reduction substitution lemmas 
case fixed point dual version reduction lemma 
ut equivalences cast proof rules establish properties arbitrary possibly infinite state transition systems deductively 
algorithm section describe specification correctness proof winskel local model checking algorithm coq 
decides truth falsity correctness assertions exploring neighbourhood state interest 
idea exploit equivalences previous lemma considering simplification rules going left right 
specification 
closed formula oe calculus state transition system model checker supposed decide satisfies oe 
leads coq specification oe muform closed oe st fs oeg oe apply lemma order gradually transform decision problem boolean combinations simpler ones 
fixed point operators dealt unfolding adding current state tag 
cases structural reduction going left right 
case provides base 
case reduction obvious 
means correctness proof proceed founded induction 
proof requires extend specification arbitrary formulas open closed 
leads generalised specification plus auxiliary predicates definition muform set oe muform st fs oeg oe definition muform set oe muform subst gamma nat elem fv oe closed delta gamma nat elem fv oe delta oe plus oe muform oe condition definition means substitute free variable oe closed formula 
second condition expresses assumption know decide satisfaction problem substitutes 
closed formula trivially satisfies conditions equivalent case 
definitions original specification reads oe muform closed oe oe 
correctness proof 
prove generalised specification plus founded induction 
founded induction principle theorem part coq library 
stated 
founded induction set prop founded 
set gamma px delta computational content proof founded induction principle obtained extraction general recursor 
type set 
note recursive realisability interpretation program extracted proof founded induction guaranteed terminate arguments satisfying specified preconditions 
proof main theorem plus 
follow basically proof try point application proof method provided realizers program tactic 
definition 
oe proper step subformula relation calculus formulas 
relation muform muform prop defined oe oe muform gamma oe oe oe st list st muform elem oe oe cons oe oe delta foundedness follows assumption set states st finite 
founded induction principle plus follows oe muform muform oe oe proof proceeds case analysis form oe generates subgoals constructor muform 
pick case greatest fixed point state lemma oe oe oe oe oe oe oe oe oe lemma chk nu plus list st oe muform muform nu oe nu oe unfolding definitions introducing hypothesis context pushing substitution inside nu obtain sequent muform nu oe subst nat elem fv nu oe closed 
nat elem fv nu oe subst nat elem fv nu oe closed nat elem fv nu oe st fs nu oe nu oe realizer goal depends lemmas proved context 
lemma nu cons elem nu cons oe realizer nu cons automatically proved program 
second corresponds right hand side lemma lemma nu unfold elem gamma oe theta nu cons oe delta id delta lemma rewrite oe nu cons oe delta 
lemma nu cons know decide nu cons oe convertible nu cons oe hypothesis know induction hypothesis construct realizer realizer gamma oe nu cons oe delta nat cases nu cons delta applying tactic program leaves subgoals easily solved 
lemma mind ready give realizer goal original sequent realizer elem spec true nu unfold elem spec st list st elem elem subgoals generated program easily proved lemmas 
realizer control structure steps taken proof application case analysis replaced realizer plus realizer rec plus frg oe muform cases oe var chk var plus lit chk lit plus constr args chk constr plus args plus notation rec frg name induction hypothesis syntactic sugar founded induction 
identifiers chk constr plus constr name recursive constructor muform denote lemmas proving different cases oe subgoal 
application notions section formalised coq 
usual mathematical notation brevity 
ccs specification preorder 
recall basic definitions 
detail refer reader 
set names complements fl ag set labels set define set actions act fg invisible silent action 
relabelling function suppose set process constants 
set processes defined syntax nil pnl act relabelling function transition system act transition relation inductively defined rules ffg pnl nl def partiality predicate complement defined nil ii iii pnl iv def 
intuitively denotes processes 
definition 
act 
define 

iff 
iff complements 
say process totally defined reachable 
partially defined 
definition 
define specification preorder theta greatest fixed point function relations defined iff act 


denote weak bisimulation equivalence 
lemma 
theta totally defined totally defined theorem 
preorder theta precongruence parallel composition restriction relabelling theta theta theta pnl theta 
verification theta model checker 
introduce transition system theta act act gamma 
gamma 
defined gamma 
gamma 
define left right modalities calculus interpreted transition system hai oe ioe oe oe hi fv oe hh ii oe oe hhii oe oe define right versions hai oe ioe 
introduce left right versions partiality predicates theta hhii hhaii similarly right versions defined theta 
supposing set act finite function definition expressed calculus formula act gamma hhaii hhaii delta define theta 
result lemma 
act finite theta theta simple protocol 
simple protocol pn composed sender synchronously transmitting signals buffer size receiver def definition def def def send ack def recv ack def pn def outg define specification protocol spec def send recv spec 
want show behaviour protocol independent size buffer 
theorem 
spec pn proof 
proof decomposed steps 
find network invariant theta 
verify spec theta outg result follows theorem lemma fact proved deduction coq 
define def def 
step proved implicit induction theta base case theta inductive step 
steps proved model checker characteristic formula theta imply proved hand coq 
step delegated model checker 
ut property expressed version modal calculus weak modalities preserved weak bisimulation equivalence verify specification spec conclude holds pn 
augustsson coquand nordstrom 
short description logical framework 
huet editors preliminary proceedings logical frameworks 

barendregt 
lambda calculi types 
abramsky gabbay maibaum editors handbook logic computer science volume background computational structures pages 
oxford university press 

barras cornes courant 
gim enez herbelin huet coq proof assistant manual version 
projet coq inria rocquencourt cnrs ens lyon dec 

clarke grumberg long 
model checking abstraction 
acm transactions programming languages systems sept 

cleaveland steffen 
preorder partial process specifications 
concur volume lecture notes computer science 
springer verlag 

coquand huet 
calculus constructions 
information computation 

dams grumberg gerth 
interpretation reactive systems 
acm transactions programming languages systems 


model checking infinite state systems data abstraction assumption commitment style reasoning theorem proving 
cav volume lecture notes computer science 
springer verlag 


girard lafont taylor 
proofs types volume tracts theoretical computer science 
cambridge university press 

kurshan mcmillan 
structural induction theorem processes 
th acm symposium principles distributed computing pages 

graf sifakis bouajjani property preserving abstractions verification concurrent systems 
formal methods system design 

luo pollack 
lego proof development system user manual 
technical report ecs lfcs department computer science university edinburgh 

milner 
communication concurrency 
prentice hall international series computer science 
prentice hall 

muller nipkow 
combining model checking deduction 
tacas volume lecture notes computer science pages 
springer verlag 

parent 
synth ese de de programmes dans le calcul des constructions 
phd thesis ecole normale sup erieure de lyon jan 

paulin mohring 
extracting 
programs proofs calculus constructions 
sixteenth annual acm symposium programming languages austin texas jan 

paulin mohring 
extraction de programmes dans le calcul des constructions 
phd thesis universit de paris vii jan 

paulin mohring 
inductive definitions system coq rules properties 
technical report laboratoire de informatique du parall ens lyon france dec 

paulin mohring werner 
synthesis ml programs system coq 
journal symbolic computation 

rajan shankar srivas 
integration model checking automated proof checking 
cav volume lecture notes computer science pages 
springer verlag 

werner 
une th eorie des constructions 
phd thesis universit de paris france 

winskel 
note model checking modal calculus 
theoretical computer science 

wolper 
verifying properties large sets processes network invariants 
sifakis editor international workshop automatic verification methods finite state systems volume lecture notes computer science pages 
springer verlag 

yu luo 
implementing model checker lego 
formal methods europe 
