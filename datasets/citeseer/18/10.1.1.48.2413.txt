atomic updates replicated data rachid guerraoui rui oliveira andr schiper epartement informatique ecole polytechnique ed erale de lausanne lausanne switzerland mail guerraoui di epfl ch 
replication strategies described compared literature published underlying protocols needed support strategies 
fact classical transactional protocols usually assumed fault tolerant create window vulnerability faulttolerant strategies intend support 
point issue quorum voting replication strategies 
describe faulttolerant protocol enables adequately support strategies 
performance figures showing addition higher resilience protocol provides better performance possible alternatives 
compared hardware techniques replication considered software cheap way ensuring fault tolerance 
availability data objects increased replication 
object replicated sites available despite failures 
concurrent updates different replicas object may lead inconsistent states 
replicated database considered correct behaves object copy far user tell 
property called copy equivalence 
great effort put finding strategies ensure copy equivalence 
strategies usually classified stressing trade consistency availability resilience site failures 
focusing strategies necessary underlying support protocols usually overlooked 
implicitly assumed underlying protocol condition characteristics strategy 
fact strategy tightly dependent system services reliable communication commit protocols concurrency control contradicts assumption 
focus quorum voting replication strategies shown preserve availability consistency despite unreliable failure detections 
sake simplicity presentation loss generality consider simplest version quorum voting strategies majority voting single object static configuration 
point fact classical transactional protocols usually assumed support replication strategies blocking fault tolerant 
show existing non blocking alternatives suffer unilateral abort missing opportunities drawbacks abort transactions unnecessarily case false failure suspicions 
protocol called replica majority commit rmc intended commit time transactions updating replicated objects 
rmc viewed variation decentralized phase commit protocol dedicated update replicated objects 
rmc preserves fault tolerance majority voting replication strategy exploits commit opportunities transactions 
furthermore shown performance figures rmc provides better performance alternatives 
give precise characterization correctness rmc showing safety violated liveness ensured long majority replica managers correct ii failure detector class 
assumption majority replica managers correct necessary non blocking commit protocols assuming unreliable failure detectors necessary liveness majority voting strategy 
failure detectors class ensure eventually process crashes suspected correct processes eventually correct process suspected correct process 
failure detectors unreliable sense infinity false failure suspicions 
shown failure detectors weakest ones allow solve consensus problems non blocking atomic commitment 
rest organized follows 
section discusses related point characteristics rmc protocol 
section describes model asynchronous system augmented unreliable failure detectors defines problem solved precise way 
section rmc protocol prove correctness 
section give performance figures compare rcm possible alternatives 
section discuss extensions rmc general quorum voting replication strategies 
section summarizes main contributions 
appendix discusses termination protocol rmc protocol 
related motivation replication strategies replication strategy viewed rule way data objects accessed read written 
available copy strategy ensures copy equivalence read write rule read operation performed available copy write operation performed available copies 
copy crashes removed set available copies 
major limitation strategy assumption reliable failure detectors false suspicions exclude possibility partitions 
shown unreliable failure detections lead reading old inconsistent replicas 
quorum voting strategies overcome limitation 
basic idea initially introduced gifford consists assigning votes replica defining read quorums write quorums object read quorums write quorums intersect write quorums intersect 
discuss underlying protocol needed updating data objects quorum voting strategy 
show section section choosing protocol preserves fault tolerance strategy exploits commit opportunities straightforward 
sake simplicity presentation consider simplest version quorum voting strategies majority voting strategy single object static configuration 
words assume single object accessed quorum simply defined majority weights set replicas majority reached statically defined 
section consider general models 
underlying protocols blocking problem replication strategies majority voting usually assume underlying transactional system 
rely traditional protocols locking ensure serialisability phase commit pc ensure failure atomicity 
locking protocol introduces window vulnerability fault tolerant 
locking protocol block replica managers holder lock crashes 
way circumvent blocking issue locking optimistic technique concurrency control conflicts resolved commit time atomic commitment protocol 
locking issued transaction execution 
time commit replica manager concurrency control conflict refuses commit transaction 
case serialisability failure atomicity transaction rely atomic commitment protocol 
atomic commitment protocol generally pc fault tolerant leads block replica managers coordinator crashes replica managers waiting decision 
unilateral abort problem alternative non blocking atomic commitment protocol phase commit pc 
shown pc designed systems unreliable failure detectors resilient minority crash failures 
careful look pc reveals limitation context replication 
unilateral abort aspect pc leads transaction aborted single replica manager crashes 
precisely pc leads transaction aborted replica crashes step protocol 
contradiction aim majority voting strategy enable data object updates commit despite crash minority replica managers 
missing opportunities problem way circumvent nested transactions prior execution pc 
model access replicas done line nested transactions 
nested transaction abort parent transaction commit 
majority nested transactions commit parent transaction commit 
commit protocol involves replicas nested transactions 
involve strict majority replicas unilateral abort problem remains 
choosing strict majority set successful nested transactions introduces subtle problem missing opportunities 
chosen replicas crashes transaction aborted discarded replicas correct 
example suppose initial set replica managers fp nested transactions replicas commit aborts crashes commit protocol started say fp strict majority initial set 
replica managers crashes instance transaction aborts 
correct opportunity commit choosing fp missed 
phenomena occur unreliable failure detectors false suspicions reconsider 
basically intuitive idea underlying rmc protocol enables reach commit minority replica crashes 
rmc avoids unilateral abort missing opportunities drawbacks alternatives discussed 
rmc viewed variation pc protocol precisely decentralized version pc integrating nested transactions 
integration leads messages communication steps different purposes leads better performances alternatives discussed see section 
model problems system model consider distributed system composed finite set processes 
processes fail crashing consider byzantine failures 
correct process process fail 
processes completely connected set channels 
communication message passing asynchronous reliable 
asynchrony means bound communication delays 
reliable channel ensures message sent process process eventually received correct 
assumption exclude link failures require link failure eventually repaired 
assume asynchronous system augmented failure detector 
failure detector viewed distributed oracle 
process access local failure detector module 
module maintains list processes currently suspects crashed 
assumption failure detector implemented 
example simply time outs failure detector modules consult process 
failure detectors abstractly characterized completeness accuracy properties 
consider failure detectors class eventually strong 
failure detectors guarantee strong completeness eventually process crashes permanently suspected correct process eventual weak accuracy eventually correct process suspected correct process 
notice failure detectors class unreliable mistakes false failure suspicions 
fundamental characteristic weakest class failure detectors allow solve consensus problems 
majority voting replication strategy majority voting replication strategy read write logical object transaction access majority replicas 
ensure read returns written value copy equivalence replica assigned version number incremented time replica written 
read logical object transaction accesses majority replicas chooses highest version number returns replica value 
write logical object transaction access majority replicas 
calculate version write transaction chooses replica highest version number increments 
write replicas accessed majority updated new version number 
version management done write access need embedded replica update protocol 
read accesses hand effect update protocol 
due common need choose replica highest version number optimizations envisioned read write transactions 
goal concentrate solely write transactions 
update majority problem precisely define problem solved updating replicated object majority voting strategy 
call problem update majority problem show rmc protocol section solves exactly problem 
problem consists set replica managers agree outcome transaction 
outcome depends votes provided replica managers 
vote reflects ability replica manager perform updates 
replica manager vote detects local concurrency control conflict 
outcome commit number abort 
meaning commit number outcome replica managers agreed commit transaction new version number number 
case majority replica managers vote 
meaning abort outcome majority obtained 
case example replica managers vote suspected crashed 
order exclude trivial situations replica managers decide abort exclude unilateral abort missing opportunities situations require transaction committed majority replica managers vote suspect 
define update majority problem properties 
uniform agreement replica managers decide differently 

non blocking correct replica manager starts protocol eventually decides 

uniform validity decision commit number majority replica managers voted number highest version number plus ii decision commit number majority replica managers vote suspect 
uniform agreement property safety property non blocking property liveness property 
uniform validity property viewed liveness safety property defines conditions replicas updated 
replica majority commit protocol section describe replica majority commit protocol simply rmc show solves update majority problem 
give global overview rmc section describe detail sections prove correctness section 
overview rmc structure rmc similar decentralized phase commit pc protocol skeen 
difference way deciding commit abort transaction rmc requires majority vote pc requires vote 
unilateral abort permitted rmc 
second difference rmc integrates version number management majority voting replication strategy 
reach commit rmc protocol needs communication steps 
illustrates steps set replica managers fp example section 
simple description assume coordinator replica managers crash sending votes replica managers fp correct vote suspect 
step coordinator asks replica managers vote 
receiving request vote message replica manager sends vote version number replica managers 
step replica manager receives votes members sends commit proposal replica managers 
step replica manager receives commit proposal members decides commit note commit decided despite crash assume unreliable failure detectors messages sent replica managers including suspected ones 
example messages sent step step step vote request commit proposal vote version number commit fig 

communication steps rmc coordinator negative votes failure suspicions prevent reaching commit decision 
replica manager collect votes majority step invokes termination protocol proposing abort transaction 
replica manager collect commit proposals majority step invokes termination protocol proposing commit transaction 
termination protocol guarantees replica managers agree decision commit majority proposed commit 
describe rmc protocol details 
assume existence termination protocol invoked case failure suspicions 
discuss termination protocol section 
description rmc detailed rmc protocol function rmc 
function periodically called correct replica manager receive perform updates 
termination protocol encapsulated inside function termination takes argument commit number abort returns values 
executing rmc protocol replica manager informed local failure detector module crash suspicions notation 
line indicates process suspects process replica manager maintains number number indicates version number replica handled replica manager 
number updated replica manager updates transaction 
replica manager vote vote reflecting ability commit transaction 
discuss vote determined 
vote function rmc cobegin task step coord coordinator executes send coord step replica managers received coord step starting protocol send coord step replica managers send step vote number replica managers step wait received step vote number gamma wait received step vote number dp replica managers received step number number largest number received step number send step commit number replica managers send replica managers outcome termination abort deciding termination protocol outcome commit number number number return outcome protocol step wait received step commit number received gamma wait received step commit number received replica managers received step commit number send decide commit number replica managers number number return commit number protocol send replica managers outcome termination commit number deciding termination protocol outcome commit number number number return outcome protocol task wait received decide outcome send decide outcome outcome commit number number number return outcome protocol coend fig 

rmc protocol replica manager detected concurrency control conflict 
function rmc triggers concurrent tasks noted task lines task lines terminates execution return statement commit number abort lines 
executes return decides outcome transaction 
task decision task 
waits decision message decide outcome forwards outcome replica managers line 
ensures correct replica manager decides outcome correct replica managers decide outcome 
task executes main protocol step step step 

step lines line coordinator sends message 
protocol decentralized coordinator 
replica manager receives message coord step starts protocol forwards message 
ensures correct replica manager starts protocol correct replica manager starts protocol despite failure coordinator 
sends vote version number replica managers moves step line 

step lines replica manager starts step waits receives votes participants majority ii receives votes suspects rest gamma replica managers lines 
received majority votes sends notification starts termination protocol invoking termination function abort initial value 
value returned termination value decided 
received majority votes defines new version number maximum numbers received sends number commit notification line moves step line 

step lines replica manager starts step waits receives commit proposals notifications participants ii receives commit proposal notification suspects rest gamma replica managers 
received majority commit proposals sends notification starts termination protocol invoking termination function commit number initial value 
value returned termination value decided 
received majority commit proposals informs commit decision updates version number decides commit number 
termination protocol assumed existence termination protocol handle bad terminations 
section discuss protocol 
problem solved termination protocol majority consensus problem introduced 
problem variation known uniform consensus problem 
problems set processes resp 
replica managers propose initial binary value resp 
abort commit number decide common final binary value resp 
abort commit number 
uniform consensus problem defined properties agreement processes decide differently non blocking correct process eventually decides uniform validity value decided initial values proposed majority consensus problem defined agreement non blocking properties uniform consensus majority validity property decided process proposed initial value ii decided majority processes proposed initial value 
presenting complete majority consensus protocol adopt modular approach show obtain protocol uniform consensus protocol 
space limitation reasons algorithm transforms uniform consensus protocol majority consensus protocol appendix 
transformation applied example centralized uniform consensus protocol chandra toueg described 
chandra toueg protocol solves uniform consensus majority correct processes failure detector class exactly assumptions 
assume termination protocol rmc majority consensus protocol 
termination protocol invoked function termination satisfies agreement non blocking properties 
correctness rmc show rmc protocol solves update majority problem defined section assuming failure detector class majority replica managers correct 
introduce lemma property update majority problem 
lemma 
uniform agreement replica managers decide differently 
proof 
replica manager decides abort resp 
commit number task replica manager decided abort resp 
commit number task line 
show replica managers decide task decide outcome 
assume replica manager decides commit number line 
means received majority commit number messages line implies half replica managers started termination abort initial value line 
majority validity property termination replica manager decide abort line 
replica manager decides line replica manager decides decides termination line 
agreement property termination replica managers decide differently 
lemma 
non blocking majority replica managers correct failure detector class replica manager starts protocol eventually decides 
proof 
assume correct replica manager starts protocol 
reliable channel assumption correct replica manager receives message line starts protocol correct replica manager receives message starts protocol 
reliable channel assumption correct replica manager decides line task correct replica manager eventually receives decision message decides task 
assume correct replica manager decides line task 
assumption majority correct replica managers strong completeness property assumption reliable channels correct replica manager remains blocked forever line 
replica manager starts termination line proceeds step 
similar way assumption majority correct replica managers strong completeness property assumption reliable channels correct replica manager remains blocked forever line 
assume replica manager decides line correct replica manager starts termination 
non blocking property termination correct replica manager eventually decides 
lemma 
uniform validity decision commit number majority replica managers voted number highest version number plus ii decision commit number majority replica managers vote suspect 
proof 
replica manager decide commit number task task 
decide commit number task replica manager decided commit number task 
replica manager decides commit number task line 
decide commit number line got commit number result termination line 
majority validity property termination participant started termination commit initial value line 
reach lines received vote majority replica managers line 
construction commit number decided number higher version number plus 
ii replica manager reach decision majority replica managers started protocol 
majority replica managers correct correct replica manager started protocol 
implies correct replica managers start protocol 
majority correct replica managers vote suspected replica managers send messages line 
consequently correct replica manager receives commit number messages line line sends decision decides commit number 
lemma correct replica manager decides commit number replica manager decides abort 
lemma lemma lemma proposition 
majority correct replica managers failure detector class rmc protocol solves update majority problem 
evaluation rmc section compare performances rmc alternatives pc phase commit pc phase commit pc decentralized phase commit considering system replica managers 
pc algorithm really viewed alternative fault tolerant 
consider od pc optimized decentralized phase commit optimization pc optimization applied rmc protocol 
pc pc pc consider extensions nested transactions 
compare protocols case commit directly decided passing termination protocol 
corresponds frequent case 
table recalls resilience characteristics protocol section shows protocol number communication steps number messages required reach commit 
reach commit pc pc rmc require communication steps pc needs communication steps 
nested transactions additional communication steps required 
establishing number messages distinguish cases point point communication broadcast communication broadcast network 
instance point point communications pc requires messages nested transactions messages required 
tables compare performances protocols point point communication broadcast communication 
measures obtained fddi mb sparc machines running solaris udp transport protocol 
different replica managers located different machines 
protocol pc pc pc pc pc pc number steps number messages number messages point point communication broadcast communication rmc resilience blocking non blocking unilateral abort missing opportunities blocking missing opportunities non blocking unilateral abort non blocking unilateral abort non blocking missing opportunities non blocking fig 

steps messages direct commit measures convey average time commit transaction 
precisely replica manager turn initiator transaction 
replica manager commits transaction new coordinator starts new rmc protocol 
figures show point point communications broadcast communications rmc provides better performances non blocking alternatives 
furthermore broadcast communications price pay having non blocking protocol rmc high compared pc blocking 
reason rmc provides sensibly better performances pc number communication steps messages required rmc replica manager needs majority votes move step pc votes received 
fact rmc suffer unilateral abort missing opportunities drawbacks protocols rmc provides better performances 
extensions rmc sake clarity presentation better focus relevant issues considered model simplifications protocol 
precisely considered simplest version quorum consensus strategies majority strategy static configurations 
furthermore considered transactions accessing single objects 
show rmc easily extended cover general model 
point point communication protocol pc ms ms ms ms pc ms ms ms ms pc ms ms ms ms managers managers managers managers ms rmc ms ms ms pc ms ms ms ms pc ms ms ms ms pc ms ms ms ms broadcast communication ms ms 
ms ms ms ms ms ms ms ms ms ms ms ms ms ms protocol pc pc pc managers managers managers managers rmc pc pc pc ms 
ms ms ms ms 
ms ms 
ms 
ms 
ms 
ms 
ms 
fig 

time commit transaction 
quorum consensus general quorum strategy quorum conditions read quorums write quorums intersect write quorums intersect 
strict majority smallest permitted write quorum 
read availability increased reducing size read quorums 
protocol easily tuned accommodate different quorums 
required number messages decision stages algorithm changed accordingly 
property termination protocol need take write quorum size consideration 
size write quorum establishes trade resilience protocol 
assuming set physical replicas object resilience gamma 
trade availability resilience protocol 
dynamic configuration static configuration replica crashes compromise liveness system 
cope problem maintain availability dynamic adjust quorums usually adopted 
ensure consistency required update quorum includes majority replicas 
quorum depends set replicas participated commit system keep track set 
achieve version number replica holds set replicas composed versioned update 
algorithm set recorded lines outcome termination lines part decide commit number message 
deciding majority lines condition strengthened ensure majority highest versioned quorum 
majority validity property termination need changed 
enlarging number replicas arise problems providing new replica updated read quorum 
multiple objects order handle multiple object transactions algorithm involve logical objects accessed transaction 
means commit transaction aggregate logical commitment object majority replicas 
coordinator accessed object requests replicas vote start rmc 
outcome rmc commit object replica set outcome commit 
algorithm obtained line broadcast vote replica involved object waiting votes object repeating loops lines decisions lines logically object termination invoked objects lines returning logical outcomes 
concluding remarks ensure mutual consistency replica management prevent concurrent updates replicas 
ensuring replica strategy said preserve equivalence 
quorum strategies appealing trade availability resilience failures 
proposals replica update strategies overlook necessary underlying protocols 
contribution fold 
pointed inadequacy traditional atomic commitment protocols 
argued intrinsic lack fault tolerance compromising supported strategies 
second fault tolerant rmc protocol simple transaction model viewed integrating nested transactions inside atomic commitment protocol 
rmc ensures promised resilience quorum strategies provides figures 
protocol relies canonical asynchronous system augmented unreliable failure detectors 
interesting characteristic protocol accommodates wrong suspicions exploiting commitment opportunities 
adequate adaptations rmc clearly suited optimized quorum strategy 
voting witnesses voting ghosts 

bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 


chandra toueg 
unreliable failure detectors reliable distributed systems 
technical report department computer science cornell univ 
preliminary version appeared proceedings th acm symposium principles distributed computing pp 
acm press 
august 

chandra hadzilacos toueg 
weakest failure detector solving consensus 
proceedings th acm symposium principles distributed computing pp 
acm press 
august 

ceri keller samarati 
classification update methods replicated databases 
technical report cs tr department computer science stanford univ 


chen pu 
structural classification integrated replica control mechanisms 
technical report cucs department computer science columbia university 

goldman lynch 
quorum consensus nested transaction systems 
acm transactions database systems pp 
december 

gifford 
voting replicated data 
proceeding th acm symposium operating system principles pp 
acm press 


guerraoui schiper 
reducing cost non blocking atomic commitment 
appear proceedings th ieee conference distributed computing systems 
hong kong may 

gray 
notes database operating systems 
operating systems advanced course pp 
lecture notes computer science springer verlag 


jajodia 
dynamic voting algorithms consistency replicated databases 
acm transactions database systems pp 
june 


paris 
voting witnesses consistency scheme replicated files 
proceedings th international ieee conference distributed computing systems pp 


skeen 
nonblocking commit protocols 
proceedings acm sigmod international conference management data pp 
acm press 


skeen 
quorum commit protocol 
proceedings berkeley workshop distributed data management computer networks pp 
february 

van renesse tanenbaum 
voting ghosts 
proceedings th international ieee conference distributed computing systems pp 

appendix termination protocol simple algorithm transforms uniform consensus protocol majority consensus protocol termination rmc protocol 
transformation applied example chandra toueg protocol described solves uniform consensus majority correct processes failure detector class 
consider function solves uniform consensus problem 
function called process takes binary value argument initial value returns binary value decision value uniform consensus 
solution majority consensus problem obtained follows 
replica manager broadcasts initial value replica managers 
initial value calls decides returned value 
initial value waits receives initial values majority replica managers 
values calls decides returned value 
received values calls decides returned value 
proposition 
majority correct processes uniform consensus protocol transformation solves solves majority consensus problem 
proof 
uniform agreement non blocking properties majority consensus trivially ensured uniform agreement non blocking properties uniform consensus 
majority validity property majority consensus satisfied uniform validity property uniform consensus decided proposed ii majority initial values process call 
property uniform consensus correct process decides 
article processed macro package llncs style 
