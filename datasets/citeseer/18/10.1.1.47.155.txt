cayenne language dependent types lennart augustsson department computing sciences chalmers university technology teborg sweden email cs chalmers se www www cs chalmers se 
cayenne haskell language 
main dioeerence haskell cayenne cayenne dependent types result type function may depend argument value types record components types values may depend components 
cayenne combines syntactic categories value expressions type expressions reducing number language concepts 
having dependent types combined type value expressions language powerful 
powerful special module concept unnecessary ordinary records 
powerful encode predicate logic type level allowing types specications programs 
power comes cost type checking cayenne undecidable 
may appear steep price pay practice 
keywords type systems language design dependent types module systems languages haskell hud sml mth type systems advanced language 
despite things inexpressible type systems 
dependent types having types depend values increases expressiveness type systems problems hindley milner typing overcome 
cayenne haskell language combines dependent types rst class types types values 
syntax value type expressions 
cayenne separate notion modules records modules means language combining modules usual expression language 
contrast haskell sml 
haskell similar dioeerent syntax type value expressions denitions 
sml dioeerent syntax value type module expressions denitions 
argued look dioeerent dioeerent 
want argue opposite facilities types expressions similar dioeerent 
cayenne exactly program constructs levels reducing number concepts need master 
dependent types proof systems ch knowledge rst time full power dependent types integrated programming language 
give motivating examples show problems haskell solved cayenne 
dioeerences haskell cayenne explained occur 
type printf standard library useful function doing output printf 
function printf takes formatting string rst argument additional arguments 
number arguments types depends formatting string 
simple write similar function haskell type check 
printf fmt pr fmt pr res res pr cs res 
pr cs res show int pr cs res 
pr cs res pr cs res pr cs res pr cs res pr cs res version printf real version substring dj marks integer argument sj marks string argument 
type printf clearly varies rst argument printf int 
string printf owes sek string 
int 
string 
string see function easy write works perfectly type haskell 
cayenne solution type printf easily computed rst argument 
need write function computes right type 
type types called cayenne 
code easy remedy 
olivier danvy shown dan functions similar printf type hindley milner typing clever trick 
familiar notation type types 
possible interacts badly inx operator 
string 
string cs int 
cs cs string 
cs cs cs cs cs printf fmt string 
fmt printf fmt pr fmt pr fmt string 
string 
fmt pr res res pr cs res int 
pr cs res show pr cs res string 
pr cs res pr cs res pr cs res pr cs res pr cs res function mimics recursive structure printf computes type value 
gamma 
int 
string typing printf printf fmt string 
fmt example haskell rst argument type string name fmt type expression 
minor point note expressions cayenne explicit type bound variable haskell 
example function dependent type appendix set record types haskell sml contain values types inconvenient 
show example simple set integers 
support creating empty set singleton set union testing set membership 
possible ways implement sets want multiple implementations program choose dynamically depending pattern 
able able store dioeerent set implementations data structure 
want dene set type data intset intset type empty singleton int union member int bool unfortunately possible type record name scope 
kind construct available module level haskell modules rst class objects haskell operations modules importation 
sml allows kind denitions module level rich language combining rst class objects put run time data structure 
cayenne solution cayenne records dioeerent haskell records respects cayenne records data types contain types dening record object labels bound record expression 
sig keyword starts record type struct keyword starts record value 
intset type dened type intset sig type empty singleton int union member int bool implementation look na intset na struct type int bool empty false singleton union member kind record borrows features haskell modules rst class objects 
eq class eq class haskell denition obvious rst class modules proposed extend easily language sml supports side 
denition example disregard 
class eq 

bool quite correctly states takes arguments type returns boolean surely expect equality 
expect equality want equivalence relation 
equivalence property equality expressed haskell 
best comment hope equality dened program really equivalence relation 
cayenne solution cayenne type classes eq class problem reformulated slightly 
class denition haskell correspond type denition record cayenne instance declarations haskell correspond values type 
dictionaries passed cayenne 
eq cayenne type eq sig 

bool include equivalence proof rst way expressing logical properties 
fact easy cayenne types isomorphism encode predicate calculus types see gure 
terms dioeerent types correspond proof corresponding properties 
known constructive type theory nps 
predicate calculus cayenne type absurd empty type non empty type pair 
data absurd data pair pair data left right fig 

predicate logic cayenne types 
encode absurd proposition falsity empty type types elements encode truth 
dependent function type encodes universal records encode existential 
proving property correspond nding element constructing value type 
better congruence relation 
false logical statements correspond empty type nd values constructively true logical statements 
way solving problem cayenne extend eq type type eq sig 

bool equiv equiv function maps binary operation yielding boolean corresponding relation 
equiv predicate relations stating relation equivalence relation 
auxiliary denitions 
dioeerences haskell cayenne appear type variables bound hidden arguments introduced 
function arrow see section discussion 
data absurd data truth truth lift bool 
lift false absurd lift true truth 


bool 
rel op 

lift op type rel 

refl 
rel 
refl 
symm 
rel 
symm 


trans 
rel 
trans 




equiv 
rel 
equiv sig refl refl symm symm trans trans appendix contains complete code example instances 
core cayenne cayenne basic type forming constructs dependent functions data types sums dependent records products 
core cayenne subset cayenne syntactic bells just basic constructs 
start looking core cayenne various syntactic shorthands 
syntax core cayenne gure 
grammar disregards certain minor concrete syntax issues 
syntactic distinction expressions types cayenne grammar 
expr varid type 
expr function type varid type 
expr expression expr expr application data type sum type type constructor case varid arm type sum sig sign record type struct defn record formation expr record selection id variable type types arm varid 
expr varid 
expr sign type type expr defn vis type expr vis private public abs abs concrete type expr varid id id id fig 

core cayenne syntax grammar 
denote repetition arbitrary number items 
functions function expressions written expressions 
bound variable type 
function type written expression leading terminology little confusing constructive type theory usually called dependent products called dependent functions ctt called dependent sums called dependent records 
terminology tradition programming languages 
big dioeerence cayenne function type haskell function bound variable available right arrow result type function may depend value argument 
function application written juxtaposition usual 
example int 
type int 
int data types haskell data type sum type name expression denotes data type 
idata false type booleans 
constructors written way dioeerent haskell 
constructor names data type expression name restrictions haskell capitalized need unique 
consequently name constructor impossible tell type constructs 
constructors types cayenne 
data false true constructors boolean type dened written 
constructor names part usual name space occur expressions case expressions type construct deduced 
case expressions core cayenne look little dioeerent haskell 
simple patterns allowed constructor patterns distinguish variable patterns 
apart scrutinized variable case arms case expression type attached 
type expression gives type arms case expression 
note expression contain scrutinized variable type may depend 
reason having type dependent types general possible gure type case expression 
example case nil 
true cons xs 
false bool example dependent type case true 
false 
hello case true 
int false 
string records record type product type cayenne complicated type formers 
reason records serve purpose modules languages 
record type written sig followed signature component record 
signature normally gives type component give value 
feature called translucent sum described detail section 
record formed struct keyword followed bindings record components 
binding gives type value component visibility 
names record components labels scope record expression 
means bindings mutually recursive 
visibility record component determines show type record 
private component show type record public component type public concrete component type value type record 
record component occurs private type record extracted usual dot notation 
examples struct private int public int public concrete int type sig int int selection type types type types type type type reasons type system twofold rst absence recursion cayenne type system unsound logic allow girard paradox second type system impossible type checking determine expression corresponds type real value impossible remove types runtime see section 
note elimination construct type construct 
possible useful construct cayenne currently lacks partly having impossible remove runtime type information see 
restrictions recursion may occur signatures ensure type viewed xpoint sigma type 
full cayenne core cayenne feasible quite tedious just bare calculus cayenne syntactic constructs palatable closer ordinary functional language 
hidden arguments functions type arguments serve purpose user 

bool 


type branches rst argument 
lessen problem cayenne uses mechanism leaving certain arguments application site 
arguments function dened 
hidden arguments introduce new version function type function abstraction function application 
function arrow type abstraction notation written 
hidden arguments 
application hidden argument uses inx normally hidden argument need 
function denitions hidden arguments left hand side preceded left hand side looks application 
example 
bool 


true false function iif true explicitly iif int true 
concept hidden arguments syntactic device deep semantic properties 
function type hidden arguments viewed new type 
completely compatible normal function type 
serves marker aid insertion hidden arguments 
view hidden arguments systems lego lp concept formalized 
similar mechanism exist quest car russell bdd 
current implementation hidden arguments quite weak nd hidden arguments reasonable 
nd hidden argument variable example occurs argument type result type 
probably switch powerful method introduces metavariables sense logical frameworks tries derive values powerful methods 
syntactic sugar brief list syntactic extensions regarded mere 
variable bound function type occur dropped function type written haskell 
int intj written intj 
inx operators xed set precedences 
conventions haskell 
patterns case arms written normal haskell style nested patterns type part case expression necessary type right hand sides depend scrutinized expression 
public omitted default 
concrete default type denitions denitions 
function denitions written normal haskell style type signatures pattern matching 

list 

list 
case nil 
xs 
xs written 
list 
nil xs xs denition preceded keyword type assumed type arguments default type 


bool written type bool data type denition written way haskell 
corresponds bindings 
type constructor type 
denition data just denitions 

data just 

just 



just cayenne expression haskell expression 
translated record expression 
access record components convenient open expression record components available 
open construct explicitly names components visible 
dist yj 
expression easily translated expression 
value record type coerced value dioeerent record type result type original fewer elds 
coercion written translates expression 
type signatures omitted places 
basic rule cayenne denitions type signature easy relax rule somewhat 
relaxed rule cayenne programs number type signatures corresponding haskell program place big burden programmer 
written 
haskell notation monads 
haskell layout rule avoid braces semicolons 
keywords case sig struct triggers 
modules cayenne really modules traditional sense named expressions exist global name space 
module names having names 
module name space viewed hierarchical name separator unix path names java names 
module freely expressions explicit import declaration just java 
module denition looks simple denition keyword module 
type denition necessary left 
module concrete visibility 
plays role records value module known type 
sample modules module foo bar struct data nat zero succ nat module foo baz open system int int struct int 
int dec int 
int dec modules units separate compilation 
compile module types modules refers need known 
cayenne type system translucent sums haskell modules export types non way type exported name type constructors known 
module tree tree depth data tree leaf node tree tree depth tree 
int depth leaf depth node depth max depth try write corresponding cayenne record get module ex tree struct data tree leaf node tree tree depth 
tree 
int depth leaf depth node depth max depth type sig tree 
depth 
tree 
int mind signature see tree type constructor see denition 
try remedy saying module signature known actual value 
way denition tree available 
intended reveal denition depth may want reveal users ex tree module 
reason introduce possibility record component specify fully known known type 
write module ex tree struct concrete data tree leaf node tree tree depth 
tree 
int depth leaf depth node depth max depth concrete keywords example default visibility indicated keywords 
type sig tree 
data leaf node tree tree leaf 
tree 
leaf tree node 
tree 

tree 
tree 
tree 

tree 
node tree depth 
tree 
int peculiar type species types tree leaf node components exact values 
record type tree exactly values value depth may 
idea comes type system sml module system types called translucent sums lil similar notion singleton kinds 
similar construct cardelli quest called manifest denitions car 
typing evaluation rules cayenne typing rules table table 
typing rules purpose presentation 
data type constructor exactly argument value type 
furthermore order denitions struct sig matter real cayenne rules 
showed typing rules cayenne 
type types rules actuality rst subscript derived shown typing rules second get replacing min max prod rule 
reason subscripts rst number necessary getting type erasure possible second necessary want logic sound recursion removed 
environment gamma typing rules may contain variables types usually case 
may contain variables types values 
reason values need values enable reductions type checking 
rec rule introduces values gamma fact cayenne dependent types shows places typing rules 
app rule term type may depend replaced actual value furthermore case rule arm type arm may depend scrutinized variable substitution performed 
translucent sums show rule term reduced type known 
reduction performed type checking normal reduction execution 
lack time proved essential theorems cayenne type system soundness subject reduction theorem 
believe true proved similar systems proved system dependent types translucent sums 
cayenne evaluation rules table unsurprising 
note denitions struct recursive care exercised 
problem substitution substitution core cayenne described rules section problem really unavoidable name clashes 
illustrate problem example 
example shorter omit types expression translated record expression 
struct struct easily see component record record component value 
apply standard reduction rule gamma 


struct struct clearly value captured 
note rename xs name labels appear type renaming change type 
problem annoying handled easily 
need dioeerent names labels 
name label appears type name name bound inside record 
second name part type clearly ff converted necessary 
avoid cluttering typing rules introduce notation rules assume problem handled needed 
similar solution bet 
type checking type checking cayenne basically simple just type checking type deductions haskell uses 
type checking proceeds single traversal syntax tree 
way environment gamma extended types values bound 
cayenne explicit types type bound known 
gamma star gamma gamma var gamma gamma gamma pi gamma gamma gamma lam gamma gamma gamma 
app gamma gamma gamma data cn data gamma gamma ck ak con data cn gamma data cn gamma 

gamma xn en 
cn xn gamma case cn xn en case gamma gamma 
gamma delta delta delta gamma gamma un 
gamma delta delta delta 
gamma sig fl fln prod fl ia gamma gamma delta gamma gamma delta 
gamma delta delta delta gamma gamma sn gamma delta en gamma struct pn en sig fl rec ioe public fl ia concrete delta delta delta delta en gamma sig fl gamma 
lk sel table 
core cayenne typing rules gamma gamma gamma gamma conv gamma gamma ffi gamma ffi weak gamma gamma ffi gamma ffi table 
core cayenne typing rules continued gamma gamma gamma gamma congr context gamma gamma 
gamma red gamma gamma lookup gamma sig gamma delta delta delta table 
core cayenne equality rules gamma 

lk gamma 
ek 
lk struct public ak tk ek case ck ck xk 
ek gamma 
ek xk 
table 
core cayenne evaluation rules ffl struct tn en struct sig ffl case 
cn xn 
en case 
cn 
data ffl ffl ffl table 
type erasure transformation 
lk ek 
lk struct ak ek case ck ck xk 
ek ek xk 
table 
core cayenne typeless evaluation rules way type subexpression computed checked 
complication arises typing rules occurence type app rule table 
cases need check types derived bottom derivation identical conv rule equal assuming program type correct 
strongly normalizing language translucent types conv rule uses fi relation easy implement just compute normal forms types compare 
cayenne strongly normalizing option 
equivalence arbitrary expression 
reason implement approximation conv rule equality rules table 
tricky part cayenne type checker equivalence test implemented na way type checking easily loop 
undecidability practice type checking cayenne undecidable 
unfortunate unavoidable language cayenne 
bad practice undecidable type checker 
question answered practical experiments 
cayenne programs tried date range ordinary haskell style programs programs dependent types proofs mathematical propositions 
total size programs lines far experience shows works remarkably 
having undecidable type checking means type checker loop 
clearly user friendly type checker 
implemented type checker upper bound number reduction steps may perform 
limit exceeded type checker report 
type errors cayenne compiler similar language give 
infrequently type checker report terminate prescribed number steps 
result type error type expression just complicated number reduction steps increased number reduction steps compiler 
type checker give answers type correct meaning program go wrong run type incorrect real machine hindley milner type checking problem third alternative usually spelled 
languages undecidable type checking quest car type system 
gofer jon usually dioecult systems loop 
cayenne proof system cayenne unrestricted recursion means type inhabited element 
proofs cayenne really trusted proofs proposition proved 
proper checking done possible ensure proof valid checking done moment 
proofs expressed cayenne trusted pass type checker valuable encoding predicate logic language 
firstly allows express properties programs language provide proofs 
better ability language comments leave properties completely 
secondly proof trusted argue proof checked may better proof checked 
implementation implementing cayenne fairly straight forward functional language 
decision types runtime 
erasing types cayenne treats types rst class values 
mean types run time passed arguments stored data structures 
language construct allows ground value observed program depend type 
types run time 
erasing types consists removing arguments record components type functions computing type car claimed type erasing possible distinction compile time run time blurred dependent types 
claim case variant dependent types cayenne 
need show evaluating expression types erased yields result evaluating types left 
denition expression value type theorem value type gamma 
rst prove useful lemma 
lemma value type contains ffl 
course solve halting problem 
proof assume expression transform value type show invocation transformation subexpression expression value type 
cases expression type type assumption type typing rule pi shows type 
transformation expression value type 
application denition transformation applied value type 
type type type typing rule pi type transformation assumption 
transformation applied function type value type 
record value struct transformation applied subexpressions value type denition record selection value type eld value type 
eld record type type type record type type typing rule prod takes min types subexpression value type 
transformation applied sig value value type 
lemma trivially true expression 
case expression transformation applied scrutinized expression value type typing rule data right hand sides 
right hand sides value type case expressions transformation applied data value value type 
transformation applied value type 
lemma true variables denition corollary transformed expression value type contains variables value type original expression 
proof variables value types translated ffl ffl expression variables 
lemma substitution lemma states type erasure commutes 


proof structural induction expression syntax 
return proving type erasure theorem 
prove value type gamma 
theorem follows simply induction length reduction sequence 
single step version theorem proved case analysis dioeerent typed reduction kinds 
cases reduction gamma 

translation redex case corresponding untyped reduction step substitution lemma 
translation redex value type 
case 
occur corollary 
reduction selection selected label left transformed struct erased 
expression value type means label value type left struct 
exactly corresponding untyped reduction 
reduction case reduction exactly corresponding untyped reduction 
qed keeping types keeping types runtime possible computations types base control decision dynamic type values 
runtime types language construct 
keeping types runtime advantages tag free garbage collection til tmc mor 
current implementation current implementation cayenne written haskell translates cayenne untyped lml 
compiler consists lines third actual type checker 
compiler parses cayenne type checking various checks erases types translates resulting code lml 
lml code compiled lml compiler aj type checking turned ooe 
works lml compiler rely fact program type correct hindley milner type system compiler assumes program 
snapshot current implementation web www cs chalmers se cayenne 
related logical frameworks proof checking systems dependent types 
examples alf mn coc ch ch elf pfe fra hhp lego pol nuprl con 
systems primarily designed making constructive proofs execute resulting proofs extract program 
approach dioeerent want programming language proof system course big similarities 
programming languages dependent types 
cardelli quest car similarities cayenne nal version quest full dependency types depend values 
russell bdd dependent types notion type equality cayenne 
russell full evaluation type checking able printf example 
russell dioeerent notion type ways continue cayenne related languages 
foremost gain experience language dependent types see dependent types see undecidable type checking works 
interesting line partial evaluator kind language 
types values combined partial evaluator serve type specializer aug pj traditional partial evaluator 
record types useful subtyping added 
subtyping presence dependent types studied bet 
proof concept cayenne compiler course rewritten cayenne 
acknowledgments big jessica improving english 
programming logic group chalmers years provided background material nally try programming language dependent types 
special coquand fruitful discussions examples write type checkers dependent types 
thomas johnsson niklas dan provided feedback anonymous icfp referees 
augustsson coquand nordstr short description logical framework 
proceedings workshop logical frameworks antibes pages 
aj augustsson johnsson 
chalmers lazy ml compiler 
computer journal 
aug lennart augustsson 
implementing haskell overloading 
proc 
th int conf 
functional programming languages computer architecture fpca pages 
acm press june 
bdd boehm demers donahue 
programmer russell 
technical report cornell university 
bet gustavo 
dependent record types algebraic structures type theory 
phd thesis department computing science university teborg teborg sweden february 
car luca cardelli 
phase distinction type theory 
research report dec src 
car luca cardelli 
quest language system 
research report dec src 
ch thierry coquand rard huet 
calculus constructions 
technical report inria centre de rocquencourt 
ch thierry coquand rard huet 
calculus constructions 
information computation 
con constable implementing mathematics nuprl proof development system 
prentice hall englewood nj 
dan olivier danvy 
formatting strings ml 
technical report rs brics department computer science university aarhus denmark march 
fra logical frameworks 
logic programming lf logical framework 
rard huet gordon plotkin editors lics pages 
cambridge university press 
hhp robert harper furio honsell gordon plotkin 
framework dening logics 
jacm 
howard 
formulae types notion construction 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages 
academic press london 
hud paul hudak report programming language haskell nonstrict purely functional language march 
version 
sigplan notices may 
jon mark jones 
implementation gofer functional programming system 
technical report yaleu dcs rr department computer science yale university new haven connecticut usa may may 
lil mark lillibridge 
translucent sums foundation higher order module systems 
phd thesis school computer science carnegie mellon university may 
cmu cs 
lp luo pollack 
lego proof development system user manual 
technical report lfcs technical report ecs lfcs 
mn lena magnusson bengt nordstr alf proof editor proof engine 
types proofs programs lncs pages nijmegen 
springer verlag 
mor greg morrisett 
compiling types 
phd thesis carnegie mellon university 
mth milner tofte harper 
denition standard ml 
mit press 
bengt nordstr alf proof editor 
proceedings informal proceedings nijmegen types proofs programs 
nps bengt nordstr kent petersson jan smith 
programming martin type theory 

oxford university press 
pfe frank pfenning 
elf language logic denition metaprogramming 
lics pages 
ieee june 
pj john peterson mark jones 
implementing type classes 
proceedings acm sigplan symposium programming language design implementation june 
pol robert pollack 
theory lego proof checker extended calculus constructions 
phd thesis university edinburgh 
tmc david tarditi greg morrisett cheng chris stone robert harper peter lee 
til type directed optimizing compiler ml 
technical report cmu cs school computer science carnegie mellon university february 
eq class module example eq include prelude struct data absurd data truth truth absurd 
absurd 
absurd case type 
sig impr impl concrete lift bool 
lift false absurd lift true truth concrete 


bool 
rel op 

lift op type rel 

concrete refl 
rel 
refl 
concrete symm 
rel 
symm 

concrete trans 
rel 
trans 


concrete equiv 
rel 
equiv sig refl refl symm symm trans trans eq class equivalence proof type eq sig 

bool equiv equiv equality unit eq unit struct unit unit true equiv struct refl unit truth symm unit unit trans unit unit unit equality bool eq bool struct false false true true true true false equiv struct refl false truth refl true truth symm false false symm false true absurd symm true false absurd symm true true trans false false false trans false false true absurd trans false true absurd trans true false absurd trans true true false absurd trans true true true private bool 
lift 
pair lift lift false absurd true false absurd true true private bool 
pair lift lift 
lift false true false true true private 
rel 



equiv 
equiv iso struct refl iso impr refl symm lp iso impr symm iso impl lp trans lp lq iso impr trans iso impl lp iso impl lq equality pairs 

eq 
eq 
eq pair eqa eqb struct eqa eqb private eq pair 
pair 
eq pair eqa eqb private pair 
eq 
lift struct impr eqa eqb impl eqa eqb private equiv eq struct refl eqa equiv refl eqb equiv refl symm pxy pxy eqa equiv symm pxy eqb equiv symm pxy trans pxy pxy eqa equiv trans pxy eqb equiv trans pxy equiv eq tautology function module example taut include prelude struct data nat zero succ nat concrete nat 
zero bool succ bool taut nat 

bool taut zero taut succ taut true taut false module example include prelude open example taut nat zero succ taut id bool 
bool id implies bool 
bool 
bool implies equ bool 
bool 
bool equ implies implies putstrln system bool show taut zero true putstrln system bool show taut succ zero id putstrln system bool show taut succ succ zero equ 
