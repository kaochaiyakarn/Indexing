satisfiability quantitative temporal constraints multiple granularities claudio bettini sean wang sushil jajodia dept information science dsi univ milan italy 
bettini dsi unimi dept information software systems engineering george mason univ fairfax va gmu edu 
temporal constraints ignored subtleties involved dealing multiple time granularities 
considers constraint satisfaction problem csp binary quantitative constraints terms different time granularities specified set variables unary constraints allowed limit domain variables 
csp trivially reduced known csp problems 
main result complete algorithm checking consistency finding solution 
complexity algorithm studied different assumptions granularities involved csp second algorithm proposed improve efficiency backtracking process needed obtain solutions csp 
constraint satisfaction problem csp defined set variables associated domain possible values ii set constraints variables 
variables represent event occurrences constraints represent temporal relations dealing temporal csp 
problems scheduling planning diagnosis natural language understanding formulated terms temporal csps 
practical applications temporal csps involve constraints terms multiple granularities 
reason may data obtained different sources application inherent requirement multiple granularities 
example scheduling problem express mail deal constraints pick delivery events terms hours particular sets hours nights business days known algorithms deal csps called path arc consistency algorithms mon mac 
specializations algorithms temporal csps proposed vbc dmp mei 
temporal csps ignored subtleties involved presence multiple time granularities 
underlying assumption problem easily reduced single granularity csp 
true granularities simply describe specific fixed time intervals time instants 
example lad different granularities allowed describe specific intervals time pairs real numbers shown set intervals defined granularities forms canonical model allen interval calculus 
follows standard polynomial algorithm applied reason intervals 
constraints considered approach standard qualitative relations intervals overlaps 
considering csps involving granularities pb relation interval specific date expressed different granularities second business day month th year converted constraint endpoints specific instants absolute time identified date 
conversion clearly feasible standard algorithms csps granularities applied 
focuses temporal csps supporting relative quantitative distance relationships expressed terms multiple granularities 
example represent constraint enforcing event package delivery occurs business days occurrence pick event 
note constraint granularity define temporal relation giving relative distance events 
limit granularities exhibit periodic behavior 
hours days weeks business days business months fiscal years common examples 
temporal csp defined binary quantitative constraints possibly terms different periodic granularities set variables unary constraints domain variables 
unary constraints useful example impose event occur 
referring examples earlier unary constraint impose delivery package occur business days 
results temporal constraints granularities defined follows constraints domains excluded consistency problem np hard arbitrary periodic granularities allowed corresponding single granularity problem ptime dmp :10.1.1.25.6934
propose arc consistency algorithm complete consistency checking show algorithm takes polynomial time time granularities constraints considered known system algorithm run description granularities part csp 
note practical applications satisfy condition 
show algorithm provides solution set constraints 
properties investigated path consistency techniques proposed optimize backtracking process needed find solutions 
arc consistency algorithm essentially extension ac deal possibly infinite periodic domains constraints terms multiple periodic granularities 
side contribution provides new results applied csp single granularity arc consistency complete polynomial consistency checking stp dmp extended disjunctive constraints domains disjunction defined finite set intervals intervals implicitly denoted known periodic granularity instants intervals instantiate constrained variable 
similar result limited finite set intervals independently sd 
researchers lad investigated temporal csps involving non convex intervals periodic intervals considered csps substantially different variables instantiated intervals opposed instants framework qualitative relations intervals allowed csp 
section formalize concept periodic granularities 
section define temporal csp provide complete algorithm consistency checking 
section show algorithm provides solution propose approximate algorithm optimize backtracking process needed find solutions 
section provide complexity results 
conclude section 
appendix sketches implementation operations periodic granularities needed algorithms 
preliminaries adopt notion temporal types formalize time granularities :10.1.1.25.6934
definition 
temporal type mapping set positive integers set absolute time sets positive integers conditions satisfied imply real number real numbers implies 
property states mapping monotonic 
property disallows empty set value mapping certain time tick empty set value mapping subsequent time ticks 
intuitive temporal types day month week year satisfy definition 
definition allows non standard temporal types non contiguous ticks day representing business days ticks consisting nonconvex sets business month business month union business days month 
temporal types said group denoted theta non empty tick exist possibly infinite set positive integers 
intuitively theta means tick union ticks 
example day week composed days day thetab day business day day 
obviously set temporal types partial order respect theta pair temporal types exists unique greatest lower bound denoted glb theta respect theta 
note disjunction allowed binary constraints variables 
particularly interested periodic temporal types finite representations 
definition 
temporal types theta said periodic relative exist positive integer index ii positive integer displacement iii non negative integer period 
informally ticks index arbitrary sets ticks preserving monotonicity 
starting ticks seen having repetition groups group having ticks groups behaving similarly tick contains certain ticks tick contain ticks shifted distance terms ticks ticks neighboring groups 
example 
type weekend day denoting periodic relative hour assuming hour sunday tick timeline 
weekend day hour weekend day hour weekend day formula definition 
example weekend day hour 
definition flexible include types finite number non empty ticks 
order simplify discussions rest assume second primitive temporal type temporal type consider periodic relative second 
furthermore shall say set positive integers periodic exists periodic temporal type jg 
conversion operation allows obtain tick including th second 
undefined second case day second falling sunday 
constraint networks multiple granularities start definition temporal constraint granularity 
definition 
gamma temporal type 
called temporal constraint granularity tcg binary relation positive integers defined follows positive integers satisfies iff dt dt defined dt gamma dt intuitively instants terms seconds satisfy difference integers inclusive ticks exist cover respectively th th seconds 
instants translated terms difference taken 
difference pair instants said satisfy constraint 
example pair satisfies day day 
similarly satisfies gamma hour hour apart order immaterial 
satisfies month month respect define constraint networks multiple periodic granularities 
definition 
constraint network granularities directed graph gamma dom finite set variables theta gamma mapping finite sets tcgs dom mapping periodic sets 
intuitively constraint network specifies complex temporal relationship variable represents specific instant example occurrence time event 
instant assigned variable contained periodic set specified dom set tcgs assigned edge taken conjunction 
tcg set assigned edge instants assigned satisfy tcg 
shows example constraint network granularities explicit constraint domains dom variable 
week day day hours fig 

constraint network granularities 
important note possible convert tcg second tcg seconds second 
consider day 
instants satisfy constraint fall day 
terms second differ seconds gamma seconds 
second reflect original constraint 
example instant corresponds pm day instant am day satisfy day satisfy second 
constraints terms simple granularities may possible convert constraint network multiple granularities equivalent single granularity provided new nodes constraints added domains conveniently restricted 
clear accomplished constraints involving non standard granularities day network 
definition 
network gamma dom consistent exists assignment sigma variable single value dom tcgs gamma satisfied 
assignment sigma called solution definition 
networks equivalent set solutions 
subclass networks constraint imposed domain variables values tcgs restricted positive finite considered :10.1.1.25.6934
shown class networks consistency problem np hard approximate solutions proposed 
show obtain complete consistency algorithm class networks necessary consider implicit constraints domains variables 
shows example constraint network inconsistency detected algorithms :10.1.1.25.6934
detect inconsistency algorithm recognize domain variable implicitly constrained february recognize tcg unsatisfiable 
month day month year month fig 

inconsistent constraint network 
proposition justifies primitive type discussed earlier respect solutions network 
algorithms going rely particular choice primitive type 
consider constraint day variables conversion equivalent network tcgs terms hour 
introducing new variables domain constrained business days conversion possible 
example event occurrences hours apart satisfy tcg day tcg day depends specific occurrence time 
network domains explicitly constrained 
proposition 
network 
theta temporal type appearing solution tuple dt dt solution example 
consider network hour groups types appearing network 
intuitive representation index hour solution network 
solution represents set solutions obtained changing indexes assigned variable second included tick hour identified index 
assume set types networks fixed definition respect theta glb easy transform definitions satisfy condition 
case solution identified assignment index tick variable 
shows algorithm 
loss generality assume tcg arc tcg gamman gammam exists arc 
basically algorithm non deterministically picks arc uses domain restrict domain achieved operation dom tcgs defined returning set ft dom tcgs ensures value domain value domain satisfies tcgs arc 
value domain discarded 
dealing possibly infinite domains equality inequality tests algorithms limited finite constant max easy see temporal types domains periodic input network step ac carried effectively 
show operations effective preserve periodicity domains see appendix 
ag 
select delete arc xk 
dom max dom dom xk gamma xk 
kg 
dom dom dom xk gamma xk 
dom max dom fig 

arc consistency ac algorithm 
show ac terminates complete discovers input network inconsistent 
max max resp 
means different equal resp 
numbers greater max considered 
proposition 
ac algorithm reaches quiescence finite number steps positive integer max 
network look max solution solution consisting positive integers greater max proposition 
constraint network gamma dom lcmp lcm non zero periods types gamma maxi types gamma periodic sets viewed periodic type dom index max dist maximum finite distance variables necessarily connected single arc determined gamma general case max maxi lcmp max dist jw tcgs finite ranges ii max maxi lcmp max dist solution exists exists value assigned variable greater max 
theorem 
ac applied network max fixed proposition consistent iff domain revised ac empty 
ac recognizes inconsistency network 
network solutions solution network easily obtained value variable minimum value domain variable obtained ac algorithm 
theorem 
network assume ac terminates gamma dom output network 
min max respectively minimum maximum respectively value dom variable exist finite 
assignment min max respectively variable solution network 
problem finding solutions turns difficult respect similar networks single granularity 
interesting negative result possible obtain equivalent network shrinking tcgs domains values variables satisfying tcgs xy guaranteed find value variable path satisfying tcgs arcs path 
property usually called path consistency see dmp case constraints granularities achieved relaxation algorithms known path consistency algorithms cubic time mon mac 
negative result shown example 
example 
consider network variables unconstrained domains tcgs week day week day week day 
take saturday value saturday value satisfy tcgs arc 
value satisfy tcgs path fixed values network path consistent path consistent range restriction tcg domain restriction exclude potential solution 
result implies constraint networks multiple granularities decomposable property allows find network solutions backtracking dmp 
backtracking avoided interested solution crucial reduce possible cardinality domains ranges tcgs changing set solutions 
process usually known finding minimal network 
path consistency techniques reduce tcgs ranges obtaining approximate algorithm consistency minimal network :10.1.1.25.6934
effectiveness path consistency approximation technique temporal csps shown papers vbc dmp 
propose extend techniques constraint networks periodic domains integrate complete ac algorithm 
shows new algorithm 

tcg derive implicit tcgs terms types network intersect possibly arc 
network resulting step considering tcgs terms 
compute minimal network obtain union minimal networks 

apply ac algorithm 
arc xy substitute tcg xy shrink dom dom 
return inconsistent tcg range empty ii domain empty return new tcgs domains derived steps go step 
fig 

ac pc algorithm 
step granularity conversion example tcg day easily derive tcgs hour week arc technicalities conversions :10.1.1.25.6934
step algorithm standard path consistency algorithm networks ensure return minimal network dmp 
algorithm proposed essentially iteration steps fixpoint :10.1.1.25.6934
step ac algorithm step refine tcgs new domain values obtained previous step 
formally shrink dom dom returns min max fd dom dom dt gamma dt theorem 
algorithm ac pc terminates 
returns inconsistent iff input network inconsistent network equivalent 
algorithm guarantee return minimal tcgs domains minimal equivalent networks usually gives approximation 
complexity results shown consistency problem network arbitrary temporal types associated tcgs np hard representation temporal types associated tcgs considered part input :10.1.1.25.6934
result holds restriction periodic types case give upper bound computational complexity 
proposition 
arbitrary periodic temporal types input network consistency checked space polynomial number temporal types maximum range tcgs 
result follows observation solution exists exists values greater constant max value depends representation temporal types appearing network 
practical cases fixed set time granularities known system available user 
cases prove algorithms proposed considered polynomial 
proposition 
set periodic temporal types input network fixed ac ac pc algorithms take time polynomial number variables maximum range tcgs 
note algorithms considerably efficient corresponding single granularity versions operations performed representations periodic sets 
detailed complexity analysis proof proposition reveals example polynomial factor high depending number characteristic involved granularities 
task consistency checking finding single solution ac pc choice 
expect ac pc algorithm perform better average case ac preliminary steps help reducing tcgs ranges quite costly operation ac applied 
representation periodic type consists values described definition set sets intervals identifying gamma ticks 
see appendix details 
studied temporal csp multiple granularities 
class csps useful practical applications areas databases data stored related terms different granularities 
currently investigating formalization temporal integrity constraints databases knowledge bases constraint network multiple granularities 
situation new event occurs needs know past events occurrence times integrity constraints satisfied events remedial action taken 
plan complement complexity results reported previous section experimental understand variance form worst case behavior evaluate efficiency respect properties granularities involved csp 
james allen 
maintaining knowledge temporal intervals 
communications acm november 
bettini wang jajodia :10.1.1.25.6934
general framework time granularity application temporal reasoning 
annals mathematics artificial intelligence appear 
preliminary version appeared proc 
time ieee computer society press 
dmp dechter meiri pearl 
temporal constraint networks 
artificial intelligence 
lad ladkin 
time representation taxonomy interval relations 
proc 
american national conference artificial intelligence morgan kaufmann los altos ca pp 

lad ladkin 
completeness natural system reasoning time intervals 
proc 
intern 
joint conference artificial intelligence morgan kaufmann los altos ca pp 

mac mackworth 
consistency networks relations 
artificial intelligence 
mackworth freuder 
complexity polynomial network consistency algorithms constraint satisfaction problems 
artificial intelligence 
mei meiri 
combining qualitative quantitative constraints temporal reasoning 
artificial intelligence 
mon montanari 
networks constraints fundamental properties applications picture processing 
information science 
khatib morris 
path consistency network nonconvex intervals 
proc 
intern 
joint conference artificial intelligence morgan kaufmann san mateo ca pp 

pb poesio brachman 
metric constraints maintaining appointments dates repeated activities 
proc 
american national conference artificial intelligence aaai press mit press menlo park ca pp 

sd dechter 
processing disjunctions temporal constraint networks 
artificial intelligence 
appear 
vbc van beek cohen 
exact approximate reasoning temporal relations 
computational intelligence 
appendix operations periodic types assumed types periodic relative basic type second simplicity 
general periodic relative finitely represent 
sufficient determine properties shown provide description gamma ticks terms ticks 
description tick set positive integers fi ir 
set represented finite set intervals compactness 
particular gamma ticks form non repeating part ticks gamma form set repeating ticks 
general gamma mod representation 
representation fi ji sg gamma div manipulating periodic types requires basic operations synchronization 
synchronization set periodic types obtained new period length common multiple lcm periods 
precisely assume originally defined positive periods index tick period displacement respectively 
synchronization types defined common period lcm index tick properly contained new period displacement lcm lcm respectively 
obtained follows max min min 
ik min ik minimum index min 
set intervals respectively non periodic periodic part synchronized type easily computed new period original representation types 
function synchronize denote procedure 
difference intersection 
finite sets pairwise disjoint intervals positive integers fi ing fj difference gamma set pairwise disjoint intervals obtained subtracting ik intervals non empty intersection ik 
intersection set pairwise disjoint intervals obtained intersection ik jr operations periodic sets operations domains variables 
periodic sets set tcgs need compute intersection domain shifting tcgs xy constraint shrinking shrink 
explain operation implemented ffl periodic set equivalent particular temporal type interval single tick synchronize procedure applied periodic sets giving result synchronized periodic sets 
apply synchronize case periods addressed simply redefining non periodic part representation type 
construct new periodic expression having period period obtained synchronization non periodic periodic sets intervals intersection respective sets intervals 
intersection sets intervals defined 
ffl tcgs 
intuitively tcgs obtained intersection sets obtained considering tcg tcgs 
general operation implemented follows tcgs compute done applying synchronize deriving non periodic part set intervals corresponding value tx non periodic part synchronized periodic part obtained formula value tx periodic part synchronized values tx defined ignored 
km periodic representation easily obtained 
similarly gamma 
value tx period different tick obtained easily derive period length displacement values tx defined ignored 
step optimized considering single tx set values covered tick 
tcgs ffl max max tests performed synchronize compare intervals synchronized set minimum interval containing value greater max respectively 
ffl shrink dom dom 
operation derive tcg min max fd ty dom tx dom gamma ng 
dom dom gamma 

dom dom 
periodic expression dom computed illustrated 
proof sketches proof proposition 
prove thesis sufficient show instant part solution assigned variable instant tick contained assigned variable solution 
suppose assigned solution exists dt assigned solution exists tcg arc network similar argument applies arc instant assigned dye gamma dt dye gamma dye gamma contradiction dt theta dt proof proposition 
consider algorithm ac 
show domain periodic set modified iteration main loop max times 
note domains refined step performs intersection periodic sets 
subset integers represented maxg 
implementation intersection periodic sets easily seen time operation performed change occurs explicit intervals intervals period set modified dropping interval subinterval corresponding set integers ii new intervals values greater current ones appear due synchronization 
condition step intersection performed change occurred fact ii conclude domain max intersections applied number certainly empty 
proof proposition 
gamma dom constraint network set periodic types appearing gamma theta glb temporal types show general case gamma appear tcgs initial domains contain infinite set second 
show solution exists exists instants assignments precede instant max upper bound depending network 
maxi types tcgs initial periodic max dist upper bound maximum finite distance variables network constraints 
max dist computed follows granularity max greatest absolute value appearing tcg terms max dist max jw clearly upper bound distance variables tcgs type definition compute length largest finite tick ones explicitly 
corresponding maximum finite distance terms absolute time max maximum values taken max dist max maxi lcmp jm ax jw lcmp lcm pk jw number variables suppose solution exists assigned max 
type jw ticks covering span time lcmp jmax starting instant maxi 
max exists tick assignment falls 
trivial ticks variables max instant tick 
show solution constructed follows assignment greater instant gamma lcmp jmax 
know exists instant satisfying condition 
note constraint network variables involved new assignments satisfied values variables shifted quantity distance change shifting quantity multiple common periodicity types guarantees new instants contained ticks type value contained shifting seen terms finite number ticks type network 
obviously constraint network involving variables maintain value satisfied 
consider constraints variables solution maintains assignment new assignment gamma lcmp jmax shown 
construction know gamma lcmp jmax 
maximum finite distance constraints greater max dist deduce maximum constraints maximum 
max dist gives upper bound minimum finite distance bound satisfied new solution gamma lcmp jmax 
conclude solution long resulting solution uses value greater max recursively apply construction 
eventually obtain solution assignments instants greater max 
consider case ii 
solution exists value falls maxi lcm pk value max dist seconds 
possible recursively shift values solution subtracting lcm pk minimal value falls maxi lcm pk 
easily seen shift leads solution 
proof theorems 
soundness 
operation performed input network deletion elements domains variables step 
considering definition operation element deleted dom node xk adjacent element xk distance ranges allowed gamma xk 
case deletion leads equivalent network part solution 
completeness solution 
input network network returned ac algorithm 
consistent exists solution oe soundness equivalent oe solution follows domains non empty 
show direction domains non empty solution constructed soundness consistent 
dom dom xr domains consider oe minimum number dom show oe solution 
consider arbitrary arc xk fix point ac know ms dd gamma dd ns ms ns gamma xk ii ms dd gamma dd ns ms ns gamma xk 
derive dd gamma dd ns ms ns gamma xk 
similarly ii derive ms dd gamma dd ms ns gamma xk 
derivations satisfies constraints gamma xk 
applied arcs oe solution 
similar reasoning possible prove domain finite maximum set maximum values solution 
concludes proof 
proof theorem 
termination 
upper bound number iterations steps jw jm max 
tcg range refined max times 
refined tcg refined value max 
note possible domains refined consecutive iterations ac needs pass tcgs changed 
single tcg refined second iteration tcg granularity arc jw jm tcgs obtain bound 
ac known terminate steps trivially terminate conclude ac pc terminates 
soundness equivalent network 
soundness steps follows results network obtained step equivalent network input step :10.1.1.25.6934
step ac guarantees domain set empty set revised domain exclude original solution 
domain empty ac pc return inconsistent 
doesn guaranteed equivalent network running ac 
step exclude values range tcg value admitted domains 
refinement rule solution original network 
conclude algorithm return inconsistent return equivalent network 
ac pc returns inconsistent empty domain derived ii empty tcg 
case step changed domain ac theorem network considered input ac inconsistent 
reasoning network equivalent input network ac pc 
second case step refined tcg empty 
seen steps guaranteed return equivalent network returned network inconsistent conclude input network inconsistent 
completeness consistency 
steps guaranteed maintain network equivalence ac shown complete consistency trivially input network ac pc inconsistent ac returns empty domain ac pc returns inconsistent 
proof proposition 
proposition know solution network solution max 
consider algorithm non deterministically picks put tape arbitrary jw numbers jw number variables range max tests satisfy constraints 
space need put jw numbers jw log max polynomial number types values tcgs 
algorithm know pspace 
proof proposition 
complexity ac 
iterations loop max gamma node edge degree node iteration get rid value add gamma arcs showed maximum number refinements max 
total number iterations max gamma jw number arcs jw number nodes 
quantity max considering jw number iterations max jw 
evaluate complexity tcgs 
suppose types tcgs 
step requires type synchronization jsj jj operations de set unions maximum number instants contained synchronized period contained different ticks maximum finite range tcgs 
approximated size glb theta 
note union taken ordered disjoint sets intervals simple set union 
takes time linear representation target type union linear input constant 
step requires time jsj jj 
step synchronization intersection derived domains requires time jsj jj upper bound cardinality sets intersected 
complexity operation 
operation ac algorithm requires additional operation periodic set 
assume operation included intersection performed 
complexity tcgs max js js jj 
global complexity max jw jsj jj jmj jm number temporal types network jsj largest representation domain obtained algorithm jj largest representation type input network maximum finite range constraints 
approximate jsj max global complexity jw max jj jmj 
complexity steps ac pc 
jw cjw jm time convert single constraint :10.1.1.25.6934
complexity step ac pc 
upper bound number tcgs shrink applied jm times maximum number arcs jm jw shrink operation needs worst case jsj jj synchronization domains tcg type plus operations single valued tcg tcg single value range 
operations takes jsj jj step takes jm jw 
complexity ac pc 
proof theorem upper bound number iterations steps jw jm max 
complexity ac pc jw jm max comp steps comp step comp step 
values maxi lcmp max value jm considered constants set temporal types fixed domains constrained types algorithm takes time polynomial number variables maximum range tcgs 
