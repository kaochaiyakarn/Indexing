facility location complete service minimal harm ben moshe matthew katz michael segal department mathematics computer science ben gurion university beer israel july efficient algorithms instances facility location problem 
facilities demand sites represented points plane 
place facilities respect demand sites regions goal maximize minimal distance demand site facility constraint regions contain facility 
efficient solution planar problem arises subproblem 
transmitters range construct compact data structure supports coverage queries determine query polygonal rectangular region fully covered transmitters 
consider instances generally stated problem applications urban industrial military task planning 
placing facilities set points plane called demand points set regions plane called neighborhoods 
positive integer number facilities garbage dumps placed 
find sites facilities fc piercing set neighborhoods served facility located neighborhood 
ii minimal distance demand point site maximized 
problem belongs class problems deal location facilities desirable undesirable various conditions 
class problems occupies katz supported israel science foundation founded israel academy sciences humanities 
researches operations research especially field location science 
geometric problems treated computational geometry literature 
typical facility location problem need find location facility respect set demand sites 
demand sites facility represented points plane 
chosen location satisfy set conditions minimize maximal distance demand site known center problem 
problem somewhat complex definitely realistic related problems 
facilities desired locations satisfy piercing condition distance optimization condition 
facility location problems described literature concerned finding locations desirable facilities 
goal minimize distance function facilities supermarkets demand sites customers 
just important problems dealing location undesirable facilities garbage dumps dangerous chemical factories nuclear power plants 
problems minimizing maximal distance facility demand point want maximize minimal distance facility demand point 
notice domain possible locations facility entire plane problem impractical interesting 
constraints location facility specified forcing lie bounded region assume regions unit axis parallel squares translated copies axis parallel rectangle 
consider case case 
case resp 
case seek maximal value exist locations locations lies interior square edge length resp 
disk radius centered demand point ii squares locations lies words locations consist piercing set set squares 
efficient solutions metric euclidean metric 
solutions consist solutions corresponding decision problems apply sorted matrices technique frederickson johnson parametric searching technique megiddo obtain maximal value show examples sense imply hope subquadratic solution value greater 
addition solution weighted version simplest problem lower bound corresponding decision problem 
consider example decision version problem need place facilities euclidean metric 
problem need consider possible solutions piercing problem solution check covered disks radius centered points adapting lemma katz employing sophisticated way technique due sharir resembles searching monotone matrices transform problem reception problem additional issues require attention transmitters range transmitters communication system construct compact data structure supports coverage queries determine query rectangular region fully covered transmitters 
words preprocess set congruent disks query rectangle quickly determine fully contained union disks 
simple nontrivial solution problem problem query regions constant size polygons rectangles 
aware previous solution problem 
solution uses voronoi diagram centers disks data structures orthogonal alternatively simplex range searching vertical alternatively general line segments 
construction time nearly linear rectangular queries polygonal queries space required linear query cost log rectangular queries roughly polygonal queries 
problem demand points lie simple polygon vertices needs place single facility minimal euclidean distance demand point facility maximized solved log time bhattacharya 
polygon rectangle demand points assigned weight distance point times distance apply log solution 
bound improved log consider slightly general problem 
problem demand point assigned weights distance jp gamma jp gamma solve problem find locations rectangle facilities distance locations value ii minimal distance demand point facility value katz improved solutions problem 
organized follows 
section solution reception sub problem 
section deals main problem placing facilities distinguish case case 
reception problem consider problem transmitters range construct compact data structure supports coverage queries determine query rectangular polygonal region fully covered transmitters 
words preprocess set congruent disks coverage queries determine query region fully contained union disks 
solution polygonal region queries assume query regions simple polygons vertices constant show bounds preprocessing time query cost improved query regions axis parallel rectangles 
polygonal region queries subsection deal problem set unit disks plane construct compact data structure query polygon quickly determine fully covered disks denote set consisting center points disks main components data structure voronoi diagram vd corresponding point location data structure ii data structure simplex range searching subset vertices vd iii data structure ray shooting set portions edges vd 
preprocessing phase 
preprocessing phase consists steps 
construct voronoi diagram vd corresponding point location data structure log time 

compute set vertices vd covered disks checking vertex vd distance corresponding voronoi sites greater equal 
construct time linear size data structure simplex range searching queries 

compute set portions edges vd covered disks claim size computed time 
construct time linear size data structure ray shooting 
claim number edge portions computed vd time 
proof 
edge vd corresponding voronoi sites 
notice point covered disks point necessarily covered disk centered order determine portions covered consider disk centered ignoring disks 
number portions clearly 
answering queries 
query polygon treated follows 
partition constant number triangles 
recall vertices constant 
triangles delta perform range searching query simplex range searching data structure 
answer obtained queries positive triangles contains points conclude fully covered disks return 
proceed follows 
edge ab ffl find cell resp 
vd containing endpoint resp 
point location data structure 
ffl calculate distance resp 
resp 
point defining resp 

resp 
return 
ffl lie cell vd perform ray shooting query ray emanating containing ray shooting data structure 
answer obtained positive hitting point return 
reached point may conclude fully covered disks return 
algorithm answering query quite simple obvious correct 
theorem prove correct returns query polygon fully covered disks 
theorem algorithm correct returns query polygon fully covered disks 
proof 
consider point lies voronoi cell covered covered disk centered disk centered responsible covering region voronoi cell verify point furthest distance point vertex boundary intersection point edge boundary boundary vertex range searching queries performed part algorithm take care points kind answers obtained immediately know exist vertices vd lie covered 
second part algorithm takes care points kinds checking boundary fully covered edge boundary verify endpoints covered 
endpoints lie voronoi cell covered clearly entire edge covered 
endpoints lie different voronoi cells possible portions interior covered 
happen intersects segment detected ray shooting query performed concerning complexity algorithm preprocessing time time required construct range searching ray shooting data structures space complexity query cost determined range searching ray shooting queries 
obtain theorem set unit disks plane 
possible preprocess time linear size data structure determining constant size query polygon fully covered disks done time 
known factors theorem replaced slightly smaller factors 
standard storage query tradeoff applied construct data structure size query time 
particular query polygons linear size construct data structure size query cost roughly 
rectangular region queries subsection consider special case query regions axis parallel rectangles 
case refer section 
case obtain better bounds preprocessing time query cost replacing general range searching ray shooting data structures standard specialized data structures 
precisely data structure orthogonal range searching set data structure horizontal vertical ray shooting set 
obtain theorem set unit disks plane 
possible preprocess time log linear size data structure determining query rectangle fully covered disks done time log 
bounds somewhat simpler problem set unit axis parallel squares unit disks remain 
facilities section solve instances placing facilities problem stated 
problem instances consider set regions consists unit axis parallel squares 
consider problems number facilities respectively metric euclidean metric 
show examples sense imply hope subquadratic solution value greater 
obviously set solution 
assume 
check time 
solving problem solution corresponding decision problem apply sorted matrices technique frederickson johnson parametric searching technique megiddo obtain solution original problem 
solve problem form determine exist locations unit squares locations minimal distance demand points locations parameter problem 
apply techniques obtain maximal value decision problem returns positive answer 
case problem wish place facility 
problem relatively easy solution weighted version problem 
non weighted version problem simply compute voronoi diagram restricted non empty rectangle easy see desired location vertex restricted diagram vertices compute corresponding distance select vertex largest distance 
clearly done log time 
weighted version problem point weights associated 
solving decision problem point defines forbidden region facility may reside 
rectangle fq delta delta denote union forbidden regions non empty rectangle assumption 
allowed location facility exists completely cover possible determine set rectangles covers rectangle segment tree log time obtain log solution decision problem 
apply result megiddo obtain log time maximal value corresponding decision problem returns 
parallel algorithm decision problem employs log processors computes answer log time 
obtain theorem metric problem solved log time weighted version problem solved log time 
lower bound 
obtain lower bound omega gamma log decision problem weighted non weighted versions showing dimensional version problem determine set unit squares covers square lower bound omega gamma log 
consider gap existence problem set real numbers fa determine exist consecutive numbers sorted sequence obtained difference greater 
sharir welzl observed problem lower bound omega gamma log 
transform dimensional rectangle obtaining set rectangles 
define min max 
clear covered rectangles exist consecutive numbers 
assuming need determine exist points fp piercing pair lie interior union squares edge length centered points assume fp piercing pair divide squares disjoint subsets 
squares ways 
search piercing pair fp piercing pair points interior considering possible partitions subsets rectangles non empty 
partition check corresponding rectangles contains point covered method inefficient 
fortunately lemma taken allows restrict search quadratic number partitions 
denote xr centers squares sorted coordinate left right yr centers squares sorted coordinate low high 
lemma piercing pair left resp 
divided subsets represented union subsets necessarily disjoint empty centers squares form consecutive subsequence list xr starting centers squares form consecutive subsequence yr starting list resp 

lemma consider partitions subsets obtained leftmost squares bottommost squares 
lemma proven assumption piercing points centers squares easy see lemma true assumption 
restrict search employing technique due sharir resembles searching monotone matrices refinement technique applications see 
theta matrix rows skipping row correspond xr columns skipping column correspond yr entry xy matrix defined follows 
set squares coordinate centers smaller equal set squares coordinate centers smaller equal xy xy gamma xy xy xy xy xy xy xy xy xy xy ny xy xy nn xy xy assume course empty set contained follows answer decision problem contains yy entry 
order apply sharir technique lines columns non decreasing assuming lines columns non increasing matrix obtained picking entry th letter 
case property clearly holds example 
determine implicit matrix contains entry yy inspecting entries advancing connected path 
entry path need determine xy fully covered fl rg 
done log time dynamically maintaining intersection xy utilizing data structure section see 
log time determine contains yy entry 
optimization 
show find smallest value matrix contains yy entry 
easy verify half difference coordinates alternatively coordinates pair points ii horizontal respectively vertical distance vertical respectively horizontal edge square point potential values represented implicit sorted matrices matrices axis 
define sorted matrices corresponding axis 
sorted list consisting coordinates points coordinates vertical edges squares entry matrix stores value gamma th th elements entry matrix stores value gamma 
clearly matrices contain values belong set potential solutions affect running time 
define sorted matrices corresponding axis analogously 
apply frederickson johnson technique matrices order find smallest value matrices decision algorithm returns 
obtain theorem metric problem solved log time 
corresponding decision problem solved log time 
largest integer exists linear time algorithm determines computes piercing set 
fact caused believe lemma true piercing triplet 
piercing triplet divided subsets represented union subsets lemma 
unfortunately came counterexample depicted 
piercing triplets squares consist point black rectangles easy verify divide set squares required 
area additional squares piercing points lemma false counterexample 
adding squares increasing number piercing points desired property reappear 
completeness provide counterexample depicted 
assume pairs lies near corresponding corner huge square region add number squares middle increase number piercing points accordingly counterexample 
counterexamples provide sense evidence apparently impossible obtain subquadratic solutions 
case case solve problem log time computing voronoi diagram restricted non empty rectangle obtain theorem metric problem solved log time 
decision algorithm identical decision algorithm case section component deals queries form determine query rectangle fully contained union disks radius solution reception problem axis parallel rectangular queries section 
obtain log time decision algorithm 
apply parametric searching technique obtain time maximal value decision problem returns omit details version 
problematic set potential values consisting radii circles pass points set sets potential values planar center problem solved sharir parametric searching polylog time 
sharir solution improved eppstein randomized expected time log 
obtain theorem metric problem solved polylog time 
corresponding decision problems solved log time 
considered instances placing facilities problem efficient solutions 
natural question arises possible devise subquadratic solutions instances values greater 
dual problem facilities friendly desirable interesting 
resp 
metric problem corresponding decision problem find pair points serves piercing pair set unit squares set squares resp 
disks radius centered demand points 
case done simply finding time piercing pair union sets squares 
euclidean case employ lemma sophisticated way section 
need determine pair rectangles generated set disks choosing point rectangles 
done apparently adopting sharir solution decision problem planar center problem see 
working details 
agarwal matousek ray shooting parametric search siam computing 
de berg van kreveld overmars schwarzkopf computational geometry algorithms applications springer verlag berlin 
kedem segal optimal facility location various distance functions tech 
report dept math comp 
science ben gurion university 
bhattacharya efficient algorithm intersection problem application tech 
report dept comp 
inform 
sci university pennsylvania 
multi facility location maximin criterion rectangular distances location science 
chazelle filtering search new approach query answering siam computing 
devillers katz optimal line bipartitions point sets int 
comput 
geom 
appear 
eppstein faster construction planar centers proc 
th acm siam sympos 
discrete algorithms pp 

sellen subquadratic algorithms weighted maximin facility location problem proc 
th canad 
conf 
comput 
geom pp 

frederickson johnson generalized selection ranking sorted matrices siam computing 
katz kedem segal constrained square center problems th scandinavian workshop algorithm theory lecture notes computer science pp 

katz kedem segal improved algorithms placing undesirable facilities manuscript 
matousek efficient partition trees discrete comput 
geom 

megiddo applying parallel computation algorithms design serial algorithms journal acm 
megiddo new results complexity center problems siam comput 

rectilinear piercing problems proc 
international symposium symbolic algebraic computation pp 

segal piercing axis parallel rectangles rings proc 
th european symp 
algorithms lecture notes computer science pp 

sharir near linear algorithm planar center problem discrete comput 
geom 

sharir welzl rectilinear polygonal piercing center problems proc 
th acm symp 
computational geometry pp 


