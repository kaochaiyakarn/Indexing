multi path routing combined resource reservation israel department electrical engineering technion haifa israel mail ee technion ac il sun microsystems mountain view ca raphael rom sun microsystems mountain view ca mail eng sun com department electrical engineering technion haifa israel yuval shavitt department computer science johns hopkins university baltimore md mail shavitt cs jhu edu high speed networks desirable interleave routing resource bandwidth reservation 
pnni standard private atm networks example algorithm sequential crank back mechanism 
suggest resource reservation routes parallel 
analytical model demonstrates routes destination pays attempt reservation single route 
analytic observation family algorithms route reserve resources parallel 
algorithms family represent different trade offs speed quality established route 
algorithms simulated legacy algorithm including pnni crank back exhibit higher network utilization faster connection set time 
broadband integrated services digital networks aimed transport electronic communication formats mail phone calls home video 
communication high speed networks connection oriented data transferred connection established 
done entirety department electrical engineering technion haifa israel order network resources efficiently bandwidth reservations ensure high probability data arrival destinations 
traditionally task done steps 
route selected set resources reserved route 
isdn resource availability may change rapidly alternatively routing information may outdated 
environment route computed step may lack required resources second step 
combining steps suggested atm pnni standard overcome difficulty 
link considered routing resources reserved link 
route fully established reservation process crank back intermediate node resources downstream node released rest route recomputed set resumed 
setup reaches destination route established required resources 
demonstrate attempting reserve resources sub routes parallel better attempting single route pnni case 
quantify effect reserving resources routes parallel analyze model disjoint routes connect nodes 
assume source lacks reliable information regarding availability resources paths model remote paths fast changing network environment 
assumptions show analyzed model pays single route reservation success probability network utilization lowest single route considered 
penalty single route analysis parameters 
advantage multi path routing apparent penalty maximal redundant resources sub paths selected part established route held entire connection duration 
advantages multi path routing captured analysis 
routes reserved parallel destination ability chose best 
second advantage speed search 
single path routing reservation algorithm fails capture resources crank back mechanisms try move forward path 
move backwards wastes time slows routing process 
multi path algorithms paths searched parallel reservation failures paths influence speed search paths 
family algorithms route reserve resources parallel sub paths 
algorithms represent different trade offs speed search advances quality resulted route 
paths search performed necessarily disjoint share nodes links 
fact subgraph network graph termed diroute confine search area 
simulation results demonstrate advantage algorithms reservation success probability set time 
idea routing routes parallel suggested context wans works 
considers reservation multiple routes parallel analyzes compares parallel reservation algorithms special case routing performed predefined routing trees model tailored telephony networks 
lans multi path routing suggested context flooding cost packets going directions problematic 
rest organized follows 
section system model analysis 
markovian analysis closed form expressions special cases recurrence improves complexity numerical analysis 
section multi path algorithms asymptotic complexity 
section simulation results 
concluding remarks section 
analytical results system model analyzed system consider source destination pair nodes connected disjoint routes support single connection time 
source node destination node see 
connection request arrival process poisson intensity connection request arrives node knowledge availability routes 
reservation algorithm selects randomly equal probability routes tries capture reserve bandwidth 
route captured single connection released 
period reservation connection duration time exponentially distributed mean 
period unused route released exponentially distributed mean 
note models case connection short regard reservation process 
reservations succeed routes appear resources reserved destination ignoring rest 
happens example short burst sent preceded reservation request tries reserve sufficient resources fly 
analysis markov chain system system modeled continuoustime markov chain states illustrated 
state represented ordered pair number routes transmission number redundant routes captured transmission 
infinitesimal transition rates state state gamma gamma minfk gamma gamma gamma gamma oe interested connection reservation success probability suc proportional system throughput 
system steady state probabilities solving system equilibrium equations probability conservation relation 
suc suc ae gamma gamma delta ae 
straight forward numerical solution requires basic operations operations sophisticated matrix inversion procedures 
sections shall describe complex solution methods 
analysis special cases equal system modeled state birth death process transition rates gamma 
system represented single number signifying total amount occupied routes 
case write equilibrium equations calculating success probabilities cases gives result suc ae penalty capturing link maximal system connection attempts capture link performs identically system connection attempts capture links 
reducing analysis complexity recurrence general case reduce computation complexity section recursion 
aim write steady state probabilities system states functions 
write equilibrium equations probability conservation equation obtain linear equations solved operations 
shall demonstrate step computation process case general solution 
markov chain transition rates eq 
write gamma equilibrium equations gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma minfn gamma transition rate state 
write recursion relations gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma recurrence suggests written functions easier calculate recurrence coefficients directly calculate coefficients gamma gamma gammaq gamma gamma gammaq gamma jl gamma sj calculate coefficients gamma 
recurrent calculation done gamma gamma gamma gammaq gamma gamma gamma gamma gamma gamma gamma gamma gamma gammaq gamma gamma gamma gamma gamma gamma recurrence calculation requires delta operations 
equilibrium equations derive recurrence probability conservation equation achieve linear equation system 
gammat gammat gammat gamma gammat gamma gamma gamma gammat gamma gamma gamma gamma gamma recurrence coefficients transform eq 
linear equation system variables solution complexity lower 
numerical results depicts throughput suc function ae results values ratios 
calculated parameters achieves lowest success probability compared values solid line lowest graph 
case route considered routing pnni classical routing algorithms represents parallel routing 
serves incentive reserve routes parallel 
case penalty maximal best throughput achieved 
penalty decreases larger values optimal 
tables compare system throughput fixed values values 
algorithms multi path routing section family algorithms route reserve resources parallel 
algorithms offer trade quality selected path set speed 
algorithms flooding algorithm attempt reserve bandwidth possible routes 
generally searching scratch route nodes entire network inefficient terms communication cost set time 
load rho throughput normalized throughput assume topology update algorithm informs nodes slow changes network topology cost links 
node wishes establish connection searches best route subgraph network contains links lead destination reasonable cost 
call restricted subgraph diroute 
selection diroute source node distributed manner nodes graph 
avoid reserving resources entire diroute optimal route chosen algorithms release resources segments diroute soon learn segments inferior segment reservation 
implementation early release bandwidth possible node diroute receives reservation messages different links locally select best locally decide release bandwidth incoming paths 
sub families algorithms fast algorithms reservation message travels destination fast possible selected path suboptimal 
slow algorithms reservation message travels destination speed slowest path selected path optimal message complexity linear number diroute links 
algorithms reservation message source destination positive acknowledgment destination source travel fast possible 
similar fast algorithms selected path suboptimal 
algorithms initial multicast connections gradually reduced unicast connection 
problem definition main objective routing algorithms set connections network 
set process includes reservation network resources connection resources available set fails words connection blocked 
aim minimize blocking probability connection 
connection set route selected 
routing decision influence blocking probability 
routing algorithms differ length selected routes consumption network resources usually probability successfully finding sufficient resources connections lower algorithms wastes resources 
quality routing decision effect blocking probability network 
route reserve resources connection way minimizes blocking probability attempting routes parallel considers feasible route minimal cost shortest route selects route cost close min cost feasible route limits flow information computing resources process 
define diroute collection directed links route searched 
construction diroute remains open problem 
shavitt gives insights diroute construction discuss heuristics 
link diroute associated cost available resources processing transmission delays 
cost links known algorithm starts operation rapidly changing availability resources processing delay unknown advance 
addition connections compete resources slight timing differences reservation messages dictate connections succeed fail 
constraints wish find reserve path diroute source destination nodes favorable cost sufficient resources 
fast algorithms section algorithms basic fast algorithm basic algorithm family logarithmic algorithm improves message complexity 
variants algorithms destination response delayed described 
basic fast algorithm described details serves building block logarithmic algorithm 
fast algorithm main thrust algorithm reach destination feasible path fast possible flooding approach altering path better alternatives time releasing superfluous reserved bandwidth soon identified 
describe algorithm operation example pseudo code formal description 
algorithm executed diroute term outgoing links refers links diroute 
link called eligible available resources potentially part requested route 
source node starts algorithm reserving requested resources eligible outgoing links sending request message links 
request message carries specification resources requested connection total cost path source current node 
quantities route delay accumulated 
node receives request message incoming link reserves needed resources eligible outgoing links forwards request message links 
node marks link link father marking forward positive acknowledgment message accept negative acknowledgment message reject back source 
establishes fast flooding destination node 
node sends reject message outgoing link sufficient resources 
case reject message sent signal lack resources 
scenario reject message sent node receives request messages 
case sender request higher cost answered reject cost received request 
comes save transmission request messages bound answered reject 
third situation sending reject node receives reject request sent 
source receives reject messages outgoing links reservation fails connection established 
node receives request message better path cost sends reject message father message arrives different incoming link node changes father marking 
addition node forwards message outgoing links previously sent request answered outgoing links reject received parameter carried received reject indicates new request rejected 
note node required hold counter number unanswered requests 
reject ignored 
change father marking replaces old route better causes early release reserved bandwidth previously marked link known inferior 
request message worse current answered reject 
early release mechanism node keeps single incoming path resource reservation 
destination node answers accept request receives reject subsequent request messages 
ensures fastest establishment connection information known far 
accept message immediately forwarded node father reaches source time start transmitting data 
node forwarded accept message respond reject subsequent request receives signal termination route establishment process 
source receives accept message knows reserved path exists destination 
source know nodes diroute terminate part algorithm point irrelevant task path establishment important algorithm message terminates messages belonging algorithm exist network 
node part selected path learn search ended successfully 
problem inability identify termination nodes release variables allocated current algorithm 
note resources required network guaranteed released 
termination mechanism described 
logarithmic algorithm shown section message complexity basic fast algorithm exponential number nodes diroute 
wish devise algorithm merits basic fast algorithm acceptable message complexity 
new algorithm basic fast algorithm supplemented counter arriving request messages 
request message arrives counter set increased arrival request message better path cost counting request messages increase message complexity 
request messages sent arriving request advances counter value natural power second forth arriving request messages forwarded 
essentially number messages sent node logarithmic compared number messages sent fast algorithm network 
note early release bandwidth performed arriving request messages 
message complexity analysis see section 
slow algorithms fast algorithms attempt establish connection fairly fast cost path optimality 
cases path optimality important fast algorithms offer slower algorithms guarantee path optimality cost connection establishment latency 
algorithms differ early release mechanism 
presentation discussion done 
formal description algorithms appears 
main difference fast slow algorithm families decision forward request message 
fast algorithms node sends request immediately receives request sends additional requests learns better paths 
slow algorithms node sends request message knows optimal path source receives request messages incoming links 
prevent deadlocks livelocks diroute acyclic 
heuristics needed transform diroute general directed graph directed acyclic graph deleting link belongs minimal feasible path 
algorithm node waits receives messages incoming links sends reject messages links selected father 
request arrives path cost compared father link reject sent inferior 
needed father marking changed 
efficient network resources point view releases resources soon possible 
resilient failures 
addition algorithm succeed reserve path failure occurs path guaranteed optimal remaining links see 
stated algorithms delay submission request messages request messages received incoming links 
clear slow algorithms progress slowest path typical type flooding algorithms 
furthermore depending implementation necessary send messages non eligible links assure proper progress algorithms 
node receives messages outgoing links release algorithm variables receive messages separate termination phase needed 
algorithms cases speed connection establishment important cost established path 
fast algorithms see section request message reaches destination fast possible accept message travels back source journey may longer reasons 
delay link directions may 
second important time accept message reaches node selected path node may chosen incoming path better cost longer delay 
worst case see example fast algorithm may select path slowest possible 
section algorithm fastest possible 
algorithm request source destination second ack started destination immediately receipt request 
proved flooding fastest data delivery algorithm flooding ways algorithms source start transmitting earliest possible time 
algorithm sf simple attempt cost optimize selected path 
path selected reaches source 
due simplicity design message complexity sf optimal 
algorithm started source node sends request message requested bandwidth eligible links 
node receives request link forwards message outgoing eligible links marks father link 
addition node inserts requested connection routing table multicast connection 
destination receives request starts flooding algorithm pi ack message 
flooding travels incoming links node receives ack forwards incoming links 
destination receives ack message start transmitting active links 
data packets travels multiple routes reach destination reach node connection routing table second case packets discarded 
minimize waste network resources node receives additional requests replies reject 
node receives reject message deletes rejected link routing table releases allocated resources 
consequently data packets transmitted link 
node receives reject messages outgoing links sends reject father link deletes connection routing table 
sf executed described initially set multicast connection pruned eventually single acyclic path remains active time control messages sent algorithm 
situation algorithm message terminates identified nodes algorithm variables released 
identify termination add accept message travels destination source selected path 
source receives reject accept messages outgoing eligible links starts flooding manner described fast algorithm see section 
problem sf inability correct selected path 
flexibility path selection fast algorithm super fast reaction time 
shavitt introduces sf algorithm super fast reaction time flexibility fast algorithm 
asymptotic complexity analysis section message complexity algorithms analyzed 
start trivial analysis slow algorithms move complex analysis basic fast algorithm bounds complexity logarithmic algorithm analyze message complexity algorithms 
algorithms number reject accept messages equal number request messages 
analysis count request messages algorithms ack commit messages counted 
slow algorithms exactly request sent link 
translates message complexity theta jej optimal problem 
intuitively message complexity fast algorithm exponential worst case message sent path diroute 
shall show true case diroute acyclic 
consider acyclic diroute node link node node receives single request message 
node receives messages received node gamma directly addition messages sent node gamma node worst case node gamma forwards messages receives node number messages received node twice number messages received node gamma total amount messages sent fast algorithm jv gamma gamma jv 
note achieve exponential number messages upper bound suggests number different path costs exponential 
link costs take values discrete set number possible path costs bounded polynomial jv degree number members set 
worst case acyclic diroute number messages transmitted link bounded number path costs algorithm complexity pseudo polynomial case 
analyze logarithmic algorithm observe node receives request messages transmits blog request messages outgoing link 
denote node transmits maximum number request messages execution algorithm 
observation write blog log gamma jv number messages transmitted node outgoing links 
acyclic derive tight upper bound message complexity counting number messages sent worst case diroute shown 
node receives messages received node gamma plus ones transmitted node gamma write gamma log gamma shown induction sn log algorithm message complexity jej log jv 
calculate upper bound message complexity general diroute assume number messages sent node proportional log ff ff log ff 
substituting equation get log ff log gamma delta log ff log gamma ff log log log ff asymptotically greater log gamma ff log log ff implies number messages transmitted node link bounded log ff 
message complexity algorithm jv log ff jv ff 
acyclic diroute logarithmic algorithm sends jej log jv messages minor gap algorithm performance upper bound case number links jv 
sf exactly request commit ack sent link 
translates message complexity theta jej optimal problem 
simulation study section fast algorithm compared legacy algorithms described 
simulations connection duration time exponentially distributed parameter 
connection request arrives network reservation attempt 
reservation process fails attempts period exponentially distributed parameter threshold time thr passed reservation attempt connection rejected 
reservations proper links 
definition proper links changes simulation simulation 
simplest case proper links ones belong shortest path source destination 
path source destination comprised proper links called proper path 
simulated legacy algorithms source routing source selects proper path writes header packets 
retries connection request path selected 
case single proper path exists randomly selected arriving request 
deflection routing source randomly selects eligible proper link sends reservation link 
intermediate node acts way source reservation request reaches destination eligible proper link 
crank back routing eligible proper link algorithm hop tries continue 
due space limitation describe results simulation set 
results 
results reported simulation grid network 
pair nodes grid connections direction simulated connections requests arrive poisson process intensity 
sum intensities simulation variable 
link cost fast algorithm set 
parameters thr ae gamma gamma number directed links theta grid average length connection hops 
shows reservation success probability connections theta grid 
shows success probability threshold value decreased 
clearly fast algorithm outperforms algorithms 
note long connections direct result order statistics see sec 

hop count gamma gamma gamma fast algorithm better algorithms 
suggests fast algorithm fairer sense long connection observe success probability similar average 
grid load source backtrack fast grid long connections load comparison reservation success probability function load ae grid 
medium load tail probability time source backtrack fast high load time comparison reservation success probability function threshold time loads grid 
concluding remarks demonstrated multi path routing attractive solution cases need set route fast network resource availability changes rapidly 
discussion connection establishment time failure handling 
believe done point directions 
adaptation suggested algorithms multicast connections natural 
routes destinations searched search destination continues diroute look destinations 
options discussed serve starting point construct efficient multicast routing algorithms 
diroute construction area done distributed methods directions pointed centralized methods 
interesting try quantify quality diroute look algorithms heuristics try achieve optimal diroute 
question arises context multicast connections 
azar naor rom 
routing strategies fast networks 
ieee infocom pages 
ieee 
boyer 
reservation principle applications atm traffic control 
computer networks isdn systems 
david 
order statistics 
wiley second edition 
farber 
closer look 
pages 
acm august 
atm forum 
private network network interface pnni specifications june 
hwang kurose towsley 
call processing delay high speed networks 
ieee acm transactions networking december 
itai rodeh 
symmetry breaking distributed networks 
focs pages 
ieee 
lesser rom 
routing controlled flooding communication networks 
ieee infocom pages 

meshed local computer networks 
ieee communications magazine august 

experimental local area network 
pages 
singapore 
rom shavitt 
combined fast routing bandwidth reservation algorithm atm networks 
international ifip ieee conference broadband communication pages 
chapman hall april 
segall 
distributed network protocols 
ieee transaction information theory january 
shavitt 
burst control high speed networks 
phd thesis technion israel institute technology electrical engineering dept technion city haifa israel june 
turner 
managing bandwidth atm networks traffic 
ieee network september 
