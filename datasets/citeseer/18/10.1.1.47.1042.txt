published proc 
micro november high performance microarchitecture hardware programmable functional units rahul michael smith harvard university cambridge ma digital equipment hudson ma explores novel way incorporate hardware programmable resources processor microarchitecture improve performance general purpose applications 
coupling compile time analysis routines hardware synthesis tools automatically configure set hardware programmable functional units augment base instruction set architecture better meets instruction set needs application 
refer new class general purpose computers programmable instruction set computers prisc 
similar concept prisc approach differs dynamically programmable microcode prisc define entirely new primitive datapath operations 
concentrate microarchitectural design simplest form prisc risc microprocessor single pfu evaluates combinational functions 
briefly discuss operating system programming language compilation techniques needed successfully build prisc performance results proof concept study 
inclusion single bit wide pfu hardware cost kilobyte sram study shows improvement processor performance specint benchmarks 
keywords programmable logic general purpose microarchitectures automatic instruction set design compile time optimization logic synthesis number studies shown hardware programmable logic fpgas improve application performance tailoring hardware paths match particular characteristics individual application :10.1.1.21.7928
architectures studies special purpose domains logic simulation large number multiplication 
effectively hardware programmable resources generalpurpose environment develop new approach cost effective automatic applicable vast majority applications 
architectural approach achieve goals called programmable instruction set computers prisc 
cost effective implement prisc top existing high performance processor microarchitecture 
risc architecture base prisc techniques equally applicable cisc architecture 
prisc augments conventional set risc instructions application specific instructions implemented hardware programmable functional units 
carefully added microarchitecture maintain benefits high performance risc techniques fixed instruction formats minimally impact processor cycle time 
generate application specific pfu instructions automated fashion developed compilation routines analyze hardware complexity individual instructions 
information compiler interacts sophisticated logic synthesis programs select sequences instructions execute faster implemented pfu hardware 
pfu instruction generation process driven specific computations application prisc approach avoids semantics gap problems cisc architectures 
furthermore complexity approach completely hidden user programmer 
general computational model pfu multi cycle sequential state machine 
iterative hardware solutions squareroot transcendental function evaluation examples class pfu 
general model introduces synchronization complexities pfu risc functional units 
discuss simpler model implements combinational function inputs output 
synthesis routines constrain complexity combinational function delay equal delay alu processor datapath 
restrictions pfu synchronization mechanisms risc functional units 
refer implementation prisc architecture prisc 
prisc originally meant proof concept vehicle allow develop basic prisc compilation synthesis environment 
surprise prisc microarchitecture exhibited noticeable performance benefits computer aided design cad applications specint benchmark suite applications 
pfu significantly slower highly customized risc functional unit automatically find opportunities pfu typical custom functional unit adequate 
prisc environment mips rule application basis 
section summarizes related programmable logic processor design automatic generation instruction sets 
section describes microarchitecture prisc section overviews prisc compilation environment hardware extraction techniques 
section discusses performance modeling environment results obtained proof concept experiment 
section presents describes 
published proc 
micro november related high level synthesis automated instruction set generation active areas research cad community areas relevant group trying solve slightly different problems 
high level synthesis typically attempts build application specific processor automatically adds programmable logic general purpose processor relies compiler run time system dynamically reconfigure programmable logic application 
automated instruction set design systematically analyzes set benchmark program define entirely new instruction set microarchitecture simply extends existing instruction set explores microarchitectures effectively adapt applications 
key aspect produce complete system compiler generated information dynamically reconfigure relatively small amount hardware programmable logic application basis 
organize hardware programmable logic augments high performance techniques today microarchitectures interacts cleanly functionality today operating systems 
ways similar earlier writable microcode stores technique dynamically augments base instruction set new application specific instructions improve application performance 
writable microcode approach creates new instructions grouping primitive datapath operations 
performance improves reduce instruction fetch requirements faster data storage increase overlap operations 
holmer points benefits obtained pipelining multiple issue large register files today architectures 
creates new instructions grouping individual operations base instruction set approach optimizes hardware level lower existing functional units obtain performance benefits captured pipelining multiple issue techniques 
effect pipeline operations granularity smaller existing cycle time 
additionally addresses issues involved dynamically extending instruction set architecture microprocessor multitasking environment 
previous hardware programmable logic general purpose computing sparse 
sanchez propose vliw microarchitecture consisting solely 
processor include custom vlsi functional units typical integer floating point operations 
programmable logic significantly slower custom logic prototype maximum clock frequency mhz 
mhz clock rate significantly clock frequencies today risc microprocessors typically mhz 
addition sanchez offer techniques compile programs generalpurpose language totally programmable environment 
shortcomings type approach inappropriate general purpose microprocessors 
athanas silverman propose instruction set augmentation process general purpose computing goals similar 
approach describe compilation process coupled logic synthesis steps 
compilation process converts entire functions programmable hardware 
granularity larger approach considers grouping instructions candidates hardware synthesis 
expect general approach find greater opportunities hardware synthesis 
athanas silverman report impressive speedups number specific routines run prism prototype 
number shortcomings initial attempts overcome 
particular prototype compiler requires user interaction prototype compiler fully automated report performance results hardware optimized routines report results entire applications add programmable logic relatively slow microprocessor mhz experiment fast cycle times mhz 
contrast sparse general purpose applications programmable logic great deal research programmable logic solutions solve domain specific problems 
pioneered pam group paris 
system contains xilinx programmable boards bus general purpose workstation 
approach partitions computation particular problem xilinx boards workstation processor 
pam system shown results applications including long integer multiplication rsa decryption 
splash group brown university mimicked pam model successful solving problems text searching dna comparison edge detection graphics applications 
unfortunately board methods incur high overhead communicating host cpu programmable logic board 
significant overhead limits applicability approach class algorithms combination high computational complexity low communication overhead 
prisc microarchitecture prisc offers relatively small amount hardware programmable resources typically times existing board level designs 
shows attach resources directly cpu datapath form pfu 
general implementation particular function pfu significantly slower implementation function highly customized functional unit 
added parallel existing functional units augment replace replicate existing datapath functionality 
offer hardware programmable resources resources reside inside cpu chip 
design decision minimizes communication costs bandwidth latency loading accessing pfu 
prisc pfu data communication handled just functional unit pfu input ports accepts operands single output port drives results 
hope efficient communication mechanism hardware programmable logic useful 
example lewis reports factor performance difference programmable circuits mask programmed gate array circuits 
prisc datapath 
register file fu fu pfu source operand buses result operand bus pdata paddr bypass logic published proc 
micro november larger class applications 
pfu contains programming ports operation described section 
subsections discuss design pfu extensions instruction set architecture needed program pfu 
section describes software architecture prisc 
pfu design design pfu interesting non trivial hardware design problem 
prisc primary pfu design constraint build functional unit delay fits evaluation phase base cpu pipeline 
constraint choose design maximizes number interesting functions implemented pfu 
function interesting evaluate faster pfu base cpu instructions 
illustrates example implementation pfu combinational functions prisc 
pfu comprised alternating layers basic components interconnection matrices logic evaluation units 
possible interconnection point interconnection matrix implemented cmos channel transistor controlled memory cell appropriately setting value memory cell connect disconnect lines 
logic evaluation unit implements hardware truth table called look table lut 
input output lut consists multiplexer connected memory cells memory cell truth table entry 
memory cell pfu addressable fact pfu memory cells viewed large sram loaded pfu paddr pdata ports 
programming pfu implement particular function consists loading appropriate values interconnection matrix memory cells lut memory cells 
interconnection matrix logic evaluation units memory cells memory cells dominate layout cost pfu 
symmetric pfu alternating layers interconnect luts requires transistors bit datapath transistors bit datapath memory cells comprise tran 
sram fuse technology programmable logic basic fuse primitive types fuses easy reprogram 

predominance memory cells layout cost pfu tracks layout cost sram 
comparison transistor pfu takes considerably silicon area kilobyte sram requires approximately transistors current microprocessors easily include kilobytes sram cache translation lookaside buffers tlbs larger pfu 
mentioned earlier constrain latency prisc pfu latency pfu execution fits cycle time today high speed microprocessors 
straightforward determine worst case delay pfu design limiting number logic levels pfu easily bound delay 
assuming today deeply pipelined processors tolerate approximately levels input logic gates clock cycle layer pfu fit comfortably mhz cycle time 
inclusion pfu datapath places extra capacitive loading operand buses increases size multiplexer feeds pipeline latch register pipeline evaluation phase 
delay evaluation phase defines cycle time inclusion pfu increase cycle time slightly 
designs cycle time defined cache access time branch delay probably add pfu affecting cpu cycle time 
instruction set extensions program operate define single new user instruction execute pfu instruction 
presents format instruction mips notation 
bit instruction evaluates boolean function inputs output 
compilation synthesis system assigns logical pfu number boolean function extracts application 
field instruction specifies particular extracted function execute bits field allow maximum different pfu programming configurations application 
explained section programming information logical pfu function part data segment application object file 
number index data segment find appropriate programming information 
course program pfu time latency pfu operation greater expected value single cycle 
associate bit register register pfu 
register contains logical pfu function currently programmed physical pfu 
instruction matches value register instruction executes normally single cycle 
mismatch exception raised exception handler loads pfu correct programming 
current compilation system typically extracts fewer pfu functions application 
lut lut lut example symmetric layered pfu 
symmetric pfu implements amount hardware bit position 
lut lut lut lut lut inputs operand buses outputs result bus format bit execute pfu instruction 
rs rt fields specify source operands registers rd field specifies destination register number indicating requested logical pfu function 
rs rt rd published proc 
micro november information 
software sophisticated determine beneficial insert instructions usually bad idea insert instructions single loop hardware contains single pfu resource 
beauty approach lies fact pfu add extra process state need save context switch 
reserving zero represent pfu having hardware clear register exception system call guaranteed force re programming pfu 
similar handling tlbs virtual caches process id tags cost context switch include penalty re programmed context switch 
latency exception handler depends density programming memory hardware resources allocated pfu programming 
practice pfu programming memory sparsely populated typically bits asserted 
scheme relies hardware reset mechanism pfu memory bits programs asserted memory locations significantly reduce latency program pfu 
optimization range programming options widely different hardware cycle count costs 
simple solution pfu programming implementation specific load store instructions privileged routine alpha pal routine sequentially load pfu programming memory 
higher performance solution rely dedicated programming hardware combination high bandwidth path memory 
example need program pfu memory bits exception handler latency pal approach high cycles high performance solution bring latency cycles 
prisc compilation techniques despite fact pfu optimized particular boolean function pfu improve application performance evaluating boolean functions low hardware complexity single cycle 
functions included instructions base instruction set provide significant performance gain wide variety applications 
section briefly presents structure prisc compilation hardware synthesis system extracts applicationspecific functions creates instructions 
section describes key analysis step system keeps compile time reasonable aggressively search groups instructions implement pfu 
section presents current routines extracting instructions section discusses additional techniques improve system effectiveness 
software architecture shows structure prisc compilation system 
left side similar high level language hll compilation system 
application hll parsed optimized translated target machine instructions instructions assembled scheduled produce binary executable 
compilation environment uses profile information performance analysis tools pixie improve results optimization instruction scheduling passes 
conventional compilers prisc compiler inserts step code generation called hardware extraction 
alternatively operating system selectively clear bit system calls pfu resources 
identifies sets sequential instructions potentially implement pfu 
instruction identified set mapped boolean operations entire group boolean operations hardware synthesis package 
logic synthesis routines take input combinational function output netlist luts 
step logic minimization algorithms reduce number luts interconnect resources input function 
placement routing routine run determine lut netlist fits resources offered physical pfu 
result place route step fed back hardware extraction routines compiler automatically reduce input function requirements exceed physical pfu resources 
produced appropriate hardware software images images linked straightforward manner 
hardware images pfu programming information simply occupy part data segment resulting 
describes scheme maintaining binary compatibility family prisc machines 

detailed discussion algorithms logic synthesis lut minimization lut placement route scope 
briefly augmented standard algorithms task pfu synthesis 
general standard algorithms worst case performance behavior exponential extracted functions combinational quite small existing algorithms augmented simplifications quickly synthesize input functions 
major passes prisc compilation system 
hardware extraction routine sends sequences instructions hardware synthesis system generates corresponding pfu programming image 
synthesis system indicates extraction routine resulting image larger physical pfu 
front processing local global optimization application code hll performance analysis information hardware extraction hardware synthesis system pfu model instruction scheduling instruction sequences software image linker hardware image code generation instructions machine published proc 
micro november hardware extraction uses profile information determine instructions executed justify expense programming pfu 
actuality routine require profile information correct operation profile information aggressive compile time optimizations hardware extraction routine simply conservative selection optimizations 
function width analysis modifications hardware synthesis routines relatively expensive check instruction sequence fit physical pfu resources 
consequently developed analysis step called function width analysis quickly separates instructions classes may benefit pfu conversion definitely 
analysis step observation pfu efficient custom functional unit pfu unable evaluate dense boolean function fast custom functional unit 
density boolean function related number literals input variables function quickly eliminate instruction boolean function requires large number input literals 
example bitwise requires input literals output bit ideal candidate implementation pfu 
similarly byte wide add requires input literals significant output bit excellent candidate 
bit wide add hand candidate implementation pfu 
byte wide add full word add software costs vastly different hardware costs 
routine function width analysis performs iterative algorithm similar dataflow calculations 
algorithm uses ternary algebra goes follows 
output variable unmarked instruction initialized bit position 
combination forward backward traversals control flow graph reduce number bits 
forward traversals evaluate instruction check see evaluation changes output bit vector 
example unsigned byte load zeros lower bits result 
backward traversals indicate unnecessary bit calculations 
example variable stored memory byte store instruction variable instruction generated store input need generate lowest bits information 
algorithm ends bits change iteration 
bit values variables application heuristically calculate hardware complexity individual instructions mark operation easily implemented pfu pfu logic candidate 
risc instruction set typically memory operations floating point operations wide adds multiplies divides variable length shifts marked pfu logic 
hardware extraction compiler marked potential pfu logic instructions application ready select sequences instructions conversion instructions 
considered different ways select instruction sequences current hardware extraction routine follows simple bottom greedy approach 
basically approach starts instruction walks backward flow control control flow graph far possible 
backward walk terminates instruction pfu logic instruction inclusion instruction produce function requiring source operands result 
corresponding boolean function maximal instruction sequence fit pfu resources extraction routine simply prunes instruction time top instruction sequence 
example operation extraction routine illustrates sample code sequences extracted automatically espresso benchmark 
example simply sequence data dependent pfu logic instructions pfu evaluate single cycle 
code sequences mips instructions sequence require multiple instructions multiple cycles execute 
results section refer optimization pfu expression optimization 
slightly obvious type data flow optimization involves conversion table lookups referred pfu table lookup 
table lookups instance logic expressions complex inefficient evaluate directly processor instruction set 
extraction algorithm recognize constant array data structure represents truth table minimize table represent functional form evaluated efficiently pfu 
illustration shows truth table mips code pfu logic required evaluation ternary nand gate 
mips instruction set requires instructions evaluate input ternary gate table lookup techniques 
shows pfu easily evaluate ternary gate single cycle 
fact single input lut evaluate ternary input gate 
describes number example pfu table lookup optimizations 
addition simple sequences data dependent pfu logic instructions hardware extraction routine recognizes opportunities optimize control flow application 

simple bottom greedy algorithm attempt increase size instruction sequence rearranging order instructions 
obvious step integrate hardware extraction routine instruction scheduling routines 

course type programmer applied optimization life easier undo optimization apply 
section discusses issues related topic 
examples pfu expression optimization 
pfu evaluate sequences boolean instructions single cycle 
srl rs rt rd slt rs slt rt rd published proc 
micro november opportunity pfu predication optimization transforms structured portion control flow graph cfg set boolean equations 
effect optimization provides support limited form predicated execution see mahlke information hardware software support predicated execution 
apply optimization candidate portion cfg adhere characteristics entry point portion cfg exit point selected portion block excluding entry exit block contain pfu logic instructions selected portion contain backward cfg edges loops 
met constraints process conversion proceeds basic steps predicate assignment boolean transformation boolean minimization 
assignment predicates basic blocks understood problem 
calculated basic block predicates compiler transforms individual pfu logic instructions basic block include effects predicate 
basic block predicate assignment form op op operations boolean transformational rule expressed style logical operators new op old variables old new values output variable assignment immediately assignment respectively 
function takes boolean bit generates bit vector containing copies bit 
transformation execute operations independent actual control flow 
operations asserted predicate affect value result 
illustrates result pfu predication optimization translates example code segment set boolean equations 
obvious benefit pfu predication optimization reduces execution time portion cfg single cycle 
important benefit optimization eliminates conditional branches instruction stream conditional branches major impediment higher performance instruction scheduling 
unfortunately structures non pfu logic instructions multiple exit points benefit pfu predication optimization 
able way beneficial reducing execution time branch impediments code motion 
new technique called pfu jump optimization attempts convert set statements switch statement 
optimization observation significant portion program branches branch short distance 
branch thought sparse boolean function pfu evaluate switch condition generate appropriate target address 
order pfu jump optimization subset cfg start basic block contain instructions conditional expressions contain backward edges loops 
shows example optimization massive counts routine espresso example pfu table lookup optimization 
truth table evaluates ternary nand gate illegal state logic zero logic logic mips code base address fully decoded table 
xx truth table code pfu logic orr addr example code example pfu predication optimization 
pfu output bits shown tied logic 
boolean pfu equations published proc 
micro november benchmark 
code uses load store instructions instructions incrementing array locations bodies pfu predicate optimization 
conditional evaluation requires pfu logic instructions replace conditional branches single dynamic jump target address generated instruction 
different possible execution paths code compiler optimizes different target instruction sequences 
shows possible negative ramifications optimization 
significant increase code size increase may degrade instruction cache performance 
second technique forces premature evaluation conditional expressions cfg graph 
premature evaluation degrade performance cfgs shortest path executed highest probability tempered fast evaluation switch condition pfu 
branch probability data determine pfu jump optimization improve performance 
significant restriction pfu optimize control flow previous techniques contain loop 
optimizations interact loop unrolling techniques 
describes extend simple loop unrolling algorithm take advantage pfu resource called pfu loop optimization 
optimization opportunities effectiveness pfu optimizations described previous subsection limited compiler ability determine precise functionality set instructions 
example function implemented truth table lookup easily converted instruction compiler able identify optimization 
similarly number character manipulation string number conversion routines run time library definitely benefit pfu resource hand tuning routines individual instruc 
generate target address instruction requires system function link time optimization know final target addresses time 
tion set architectures difficult reconstruct automatically logical intent 
general possible structure wide variety applications achieve dramatic increases performance pfu resource 
performance modeling results complete analysis prisc approach involve detailed design pfu augmented datapath development full compilation synthesis system described section 
investing heavily activities constructed proof concept system gave rough estimate potential performance benefit prisc computer 
section describes performance modeling environment section presents results simulation study 
performance model base proof concept study mythical mhz mips datapath augmented single prisc pfu 
datapath microarchitecture pfu design match descriptions section 
particular pfu symmetric layered pfu designed meet requirements mhz cycle time technology 
real hardware need develop complete compilation environment 
current software system contains implementations hardware extraction analysis algorithms described section section description ideal compilation system input current routines mips object file output change cycle count object file basic block 
object file input limit effectiveness extraction routines due lack complete type information 
example extraction routines pfu eliminate need temporary registers expression evaluation temporary registers spilled main memory due register congestion original object file current algorithms optimize away resulting pessimistic performance results 
similarly lack type information usage enumerated type greatly limits effectiveness function width analysis step limits number candidate pfu logic operations 
keep duplicating existing compiler functionality current software perform compiletime optimizations procedure inlining instruction scheduling 
compile time optimizations increase applicability various pfu transformations 
described section integrate analysis extraction system routines hardware synthesis 
real hardware perform hardware synthesis lut placement routing 
determine extracted function fit physical pfu resources system implements simple rule maximum depth gate level network levels pfu function allowed replace software code 
estimate pfu programmability lead optimistic results level networks fit pfu resources pessimistic results level networks fit physical pfu 
generated performance numbers subsection combining basic block cycle counts compilation system basic block execution counts pixie profiling tool 
performance modeling strategies particular strategy shortcomings 
performance numbers basic block profile trace impossible know really need program pfu 
currently software system adds single instruction example pfu jump optimization espresso benchmark 
register temporary register contains integer value 
example code val val val code pfu optimization val jr published proc 
micro november loop loops procedure calls easily assume worst case scenario performance results 
specifically assume pfu takes cycles program re program pfu time enter enclosing loop 
words assume pfu programmed correctly enter loop containing instruction 
proof concept system models cpu performance memory system penalties ignored 
similarly profile data application execution operating system issues performance ignored 
previous limitations software performance modeling view results lower bound potential decrease application cpu cycles 
performance results original goals develop approach applicable wide variety applications selected specint benchmark suite cut set diverse applications 
performed experiments decstation mips compiler 
benchmark table lists number times invoked hardware extraction optimizations 
software system apply individual optimization profile information indicated optimization increase application performance 
compilation synthesis time pfu optimizations typically measured single digit minutes 
table lists performance gain obtained specint applications 
calculate performance gain dividing number cycles taken pfu optimization number taken pfu optimization 
benchmarks shown tables compress cps eqntott eqn espresso exp gcc gcc li li sc sc 
system instances pfu expression optimizations benchmarks 
relatively sparse number pfu optimization instances low performance improvement li due large number short procedure calls interpreter loop 
table shows eqntott exhibits excellent speedup static pfu optimization instances 
significant speedup due single pfu optimization routine 
routine accounts application cycles cycle count decreases routine greatly reduce cycle count 
basic data type bit integer seen improvement performance changing data type short bit integer char bit integer 
pfu table lookup optimization invoked benchmarks constant arrays declared constant application source code 
unfortunately modifying application source code constant qualifiers improve situation mips compiler retain read nature constant information object file 
noted number generated current system functions application approach instruction format limit logical pfu numbers 
specint benchmarks performance gain single pfu significant comparison general purpose architectural alternatives 
example consider addition chip cache memory 
today commercial microprocessors contain kilobytes chip instruction data cache 
doubling size instruction cache kilobytes decreases average instruction cache rate average specint benchmarks 
fairly optimistic conditions cpi execution equal cycle penalty doubling instruction cache provides average performance improvement approximately hardware cost times pfu 
described novel microarchitecture compilation synthesis system automatically exploits hardware programmable resources improve performance generalpurpose applications 
encouraging results proof concept experiment shown respectable performance gains specint benchmark suite modest hardware investment single combinational pfu 
encouraging results begun port prisc hardware extraction routines general purpose compiler hope develop detailed hardware model prisc datapath 
aggressive compilation environment able explore impact techniques superscalar processors 
pfu optimizations reduce register pressure eliminating temporary variables increase size basic blocks eliminate conditional branches predication 
side effects potential improve benefit superscalar design 
furthermore foresee excellent opportunities synergistic interactions hardware extraction algorithms existing global instruction scheduling algorithms 
acknowledgments research assistance individuals invaluable 
bill insightful discussions custom cmos implementation techniques ramification techniques pfu microarchitecture design 
mark ed 
program eqntott get large benefit addition pfu nearly benefit increasing instruction cache 
spectrum program gcc gets large benefit doubling instruction cache currently small benefit pfu 
case benefits fairly equivalent added kb instruction cache 
optimization cps eqn exp gcc li sc pfu expression pfu table lookup pfu predication pfu jump pfu loop total table static pfu optimization instances specint 
cps eqn exp gcc li sc speedup table cycle count speedup prisc microarchitecture single pfu resource 
speedup application arithmetic average defined spec data sets application 
published proc 
micro november detailed information provided microarchitectures high performance vax alpha architecture implementations 
steven morris suggested pal approach programming pfu 
digital equipment provided funding rahul graduate 
mike smith funded part nsf young investigator award 
abd 
heuristic synthesis computer architecture 
ieee transactions computers aug 
aho sethi ullman 
compilers principles techniques tools addison wesley 
allen kennedy porterfield warren 
conversion control dependence data dependence 
proc 
th acm symp 
principles programming languages jan 
arnold splash processor applications 
proc 
int 
conf 
computer design oct 
athanas silverman 
processor reconfiguration instruction set metamorphosis 
ieee computer mar 
bertin vuillemin 
programmable active memories 
systolic array processors eds prentice hall 
bertin vuillemin 
programmable active memories performance assessment 
lecture notes computer science springer verlag parallel architectures efficient paderborn nov 
brayton sangiovanni vincentelli wang 
mis multiple level logic optimization system 
ieee transactions cad cad nov 
brown field programmable gate arrays kluwer academic pub 

wolf editors 
high level vlsi synthesis kluwer academic publishers 
digital equipment alpha architecture handbook 
mhz bit dual issue cmos microprocessor 
proc 
int 
solid state circuits conf feb 

computer design computer instruction sets 
ph thesis carnegie mellon univ pittsburgh pa 
hennessy patterson 
computer architecture quantitative approach morgan kaufman 
holmer despain 
viewing instruction set design optimization problem 
proc 
th int 
symp 
microarchitecture nov 
holmer 
automatic design computer instruction sets 
ph thesis california berkeley ca 
sanchez 
superscalar fpgas 
proc 
int 
conf 
computer design oct 
kane 
mips risc architecture prentice hall 
lewis van wong 
field programmable accelerator compiled code applications 
proc 
int 
conf 
computer design oct 
liu 
techniques program execution writable control memory 
ieee transactions computers sept 
mahlke lin chen hank 
effective compiler support predicated execution hyperblock 
proc 
th annual intl 
symp 
microarchitecture dec 

prisc programmable reduced instruction set computers 
ph thesis harvard university cambridge ma 
available center research computing technology tech 
rep tr div 
applied sciences harvard univ jun 
brace smith 
prisc software acceleration techniques 
proc 
int 
conf 
computer design oct 
agrawala 
dynamic problem oriented redefinition computer architecture microprogramming 
ieee transactions computers nov 
shand bertin vuillemin 
hardware speedups long integer multiplication 
computer architecture news jan 
shand vuillemin 
fast implementation rsa cryptography 
proc 
th symp 
computer arithmetic 
smith 
tracing pixie 
computer systems lab 
tech 
rep csl tr stanford univ nov 
standard performance evaluation spec newsletter volume issue mar 
van dam 
vertical migration performance enhancement layered hardware firmware software systems 
computer may 
thomas algorithmic register transfer level synthesis system architect workbench kluwer academic pub 
xilinx 
programmable gate array book 
