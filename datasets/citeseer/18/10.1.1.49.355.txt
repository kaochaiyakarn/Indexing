verification problems conceptual workflow specifications ter hofstede orlowska department computer science distributed systems technology centre university queensland university queensland brisbane qld brisbane qld australia australia mail cs uq oz au mail jb dstc edu au published ter hofstede orlowska 
verification problems conceptual workflow specifications 
thalheim editor proceedings th international conference conceptual modeling er volume lecture notes computer science pages cottbus germany october 
springer verlag 
today business requirements accomplished integration various autonomous systems initially designed serve needs particular applications 
literature workflows proposed design kinds applications 
key tool designing applications powerful conceptual specification language 
language capable capturing interactions cooperation component tasks workflows 
include sequential execution iteration choice parallelism synchronisation 
central focus verification process control aspects conceptual workflow specifications 
generally agreed software development process error detected cost correct vital importance detect errors early possible systems development process 
typical verification problems workflow specifications identified complexity addressed 
proven fundamental problems tractable show restriction needed allow termination problems recognized polynomial time 
information systems integration may considered key theme prerequisite running businesses cost effectively 
today business requirements accomplished integration various autonomous systems initially designed serve needs particular applications 
designing integrated systems pre existing systems components new system 
result see complex applications span pre existing systems 
workflows identified candidate designing applications bgs fkb ghs rs 
workflow set operations performed achieve basic business process preexisting system usually described task 
set tasks constitute workflow tasks may interrelated way reflecting business application needs 
tasks existing information processes pre existing system may implemented request workflow designer 
workflow management systems wfms developed implement workflows 
systems wfmss conceptual physical levels 
important capture details tasks interactions conceptual level order prevent premature implementation decisions may lead suboptimal solutions 
validation crucial importance workflow specifications comprehensive facilitates communication domain experts 
way achieving comprehensibility offering graphical representations modelling concepts 
order capable adequately capturing workflow problem workflow specification language sufficient expressive power 
particular means constructs various forms process control offered 
workflow specification language formal foundation order allow formal reasoning prevent interpretation ambiguities 
formal foundation include syntax semantics 
summarizing conceptual workflow specification language comprehensive sufficient expressive power formal foundation 
workflow management research received attention years 
ghs date high level overview current workflow management methodologies software products provided :10.1.1.101.5199
research prototypes described ks concentrate concurrency correctness recovery workflows commercial products pay attention user friendly workflow specification tools leaving aspects recovery correctness designers 
wfms attention conceptual level rs :10.1.1.43.3839
identified ghs workflow management needs complete framework starting conceptual level :10.1.1.101.5199
review current conceptual level provided conceptual level language describe workflows 
implementation model active database technology 
necessary active rules semi automatically generated conceptual level language 
claimed described bgs fkb lacks expressive power concerning possibility specifying task interactions mapping workflow specification workflow execution particular regard exception handling 
formal semantics language 
possible reason correctness conceptual specifications 
workflow modelling similar process modelling ghs :10.1.1.101.5199
workflow context tasks basic units collectively achieve certain goal 
collective nature shows various types process dependencies 
language specify workflows sufficiently powerful capture dependencies sequential order parallelism iteration choice synchronisation central focus identification verification issues conceptual workflow specifications far process control concerned complexity 
clearly verification conceptual level crucial known fact development process error detected expensive correct 
mentioned desirable sufficient expressive power specification languages 
obvious trade expressive power complexity verification 
prove verification problems context workflow specifications tractable undecidable 
addition focus restriction expressive power allows terminations considerations performed polynomial time 
organised follows 
section core concepts specifying process dependencies introduced example workflow specification concepts 
section number verification problems defined complexity determined 
section necessary sufficient condition detecting termination restricted workflow specification language correctness proved 
section concludes identifies topics research 
essential workflow concepts specification workflows general known quite complex issues involved 
workflow specifications capable expressing ffl properties tasks result task undone pre postconditions involve complex time aspects redo ability task redone ffl information flows tasks information persistent nature external databases 
ffl execution dependencies tasks referred control flow 
dependencies conditions value failure successful temporal parallel sequential ffl capacities tasks 
capacities refer storage throughput numbers active instances 
generally speaking workflow specifications need pay attention task functionality focus coordination tasks 
focus solely control flow workflow specifications 
conceptual workflow specification language capable capturing moments choice sequential composition parallel execution synchronization 
section task structures capable modelling task dependencies 
definition formal semantics reader referred hn 
stressed task structures serve means 
viewed kernel workflow specification concepts study verification problems 
results extend language offering concepts choice sequential composition parallel execution synchronization 
informal explanation task structures task structures introduced bot describe analyze problem solving processes 
extended meta process modelling technique describing strategies experienced information engineers 
hn extended formal semantics terms process algebra bw 
main concepts task structures graphically represented 
discussed subsequently 
decomposition initial item trigger synchroniser task non terminating decision terminating decision graphical representation task structure concepts central notion task structures notion task 
workflow context tasks basic units collectively achieve certain goal 
task defined terms tasks referred subtasks 
decomposition may performed repeatedly desired level detail reached 
tasks name decomposition tasks named 
performing task may involve choices subtasks decisions represent moments choice 
decisions coordinate execution tasks 
kinds decisions distinguished terminating non terminating decisions 
decision terminating may lead termination execution path decision 
execution path active execution path supertask supertask terminates 
triggers graphically represented arrows model sequential order 
task name start termination top task named initial items tasks decisions performed part execution task decomposition 
due iterative structures may clear task objects initial 
indicated explicitly 
deal explicit synchronisation 
task named start tasks names terminated 
task structures generic language workflow specifications rest refer workflow structures 
syntax workflow structures section syntax workflow structures defined elementary set theory 
workflow structure consists components 
set workflow objects 
disjoint union set set tasks set decisions distinguish subset consisting terminating decisions 

relation trig theta triggers 

function name yielding name task set names 

partial decomposition function sup ae sup means workflow object part decomposition names range function called decomposition names 
set ran sup contains names 
complement set atomic actions 

partial function init sup yielding initial items task 
workflow structures required unique task top decomposition hierarchy 
task decomposition function undefined 
sup 
remainder call unique task main task refer terminology graph theory requirement stipulates decomposition hierarchy task structures rooted 
contrary require decomposition hierarchy acyclic allow recursive decomposition structures 
allow recursive specification workflows 
decomposition allows modularization workflow specifications 
typically modules loosely connected triggers cross decomposition boundaries sup sup workflow object reachable initial item 
implies trigger path initial item workflow object question init sup requirement trig reflexive transitive closure trig 
complexity verification problems section focus definition verification problems workflow specifications complexity 
problems solely concern process control issues assume specifications may core workflow concepts previous section 
workflow specification relevant able determine certain task invoked 
particularly true task involved critical execution workflow considered successful 
definition initiation problem workflow object workflow structure determine sequence events exists leading execution theorem initiation problem np complete poly complete 
proof proof describe polynomial time transformation satisfiability initiation problem 
sat short known np complete see gj formally corresponds question truth assignment set clauses set boolean variables 
clause set literals boolean variables negations boolean variables proof inspired proof comparable translation proving fact determining liveness free choice petri net np complete problem 
instance sat 
workflow structure wk resulting transformation consists main task boolean variable decision initial item 
set decisions capture possible truth assignments boolean variables decision output trigger task name output trigger task name avoid confusion symbol logical negation proof 
task name literal 
clause trigger task name ci exists assumed 
synchroniser exists input tasks names form hx ci 
synchroniser output trigger task name note construction implies synchroniser sc triggered input tasks executed means literals evaluates false particular truth assignment 
construction guarantees initiated satisfiable 
suppose satisfiable truth assignment clause fx evaluates false literals evaluate false synchroniser depends tasks names ci ci 
tasks started task name ci started task name evaluates false decision boolean variable literal trigger task name synchroniser trigger task name analogous reasoning satisfiable sc started 
clearly construction polynomial time transformation 
prove problem np sufficient observe verification execution scenario leading execution workflow object done polynomial time 
note translation result loops decomposition main task 
workflow structure ab example construction previous proof illustrated result translation formula abc qr workflow structure 
state workflow structure may defined multiset workflow objects 
workflow object occurs times multiset instances active 
formal semantics workflow structure defined set associated states possible transitions states see section 
initial state corresponds multiset containing items main task exactly 
state terminal solely consists terminating decisions tasks output triggers 
infinite workflow specifications desirable imperative able detect statically 
definition termination problem determine workflow structure reach terminal state 
unfortunately algorithm solving termination problem require exponential amount storage space 
theorem termination problem dspace exp hard 
proof reduction reachability problem ordinary petri nets termination problem 
proven reachability problem dspace exp hard 
ordinary petri nets petri nets multiplicity place limited equal 
pet shown reachability problem ordinary petri nets reduced reachability problem petri nets 
reachability problem input ordinary petri net markings marking assigns finite number tokens place 
question marking reached marking see pet 
ordinary petri net tuple hp oi set places set transitions 
input function mapping transitions sets places 
output function mapping transitions sets places 
hp oi ordinary petri net markings corresponding workflow structure task place synchroniser transition place exactly arrow certain transition corresponding trigger place output arrows means choice transitions 
decision introduced trigger arrow transition trigger arrow transition place results trigger initial marking determines initial items workflow structure place tokens marking create input triggers exactly output trigger task initial item note fact trigger relation trig set create single synchroniser arrows task marking reachable marking iff state containing task exactly times workflow objects reachable previous proof necessary ordinary petri nets unrestricted petri nets require trigger relation trig multiset 
unrestricted petri nets may arrows place transition arrows transition place 
situation problematic terms current definition workflow structures simulated misuse synchronizer workflow object activate instances workflow object intermediate input trigger output trigger capture behaviour 
situation captured 
correspond situation synchroniser await completion certain number instantiations workflow object 
context capacities discussed section desirable adapt definition workflow structures allow trig multiset 
translating petri nets workflow structures example example petri net corresponding workflow shown 
definition workflow structure safe reachable state terminal state reached 
corollary determining safeness dspace exp hard problem 
capacities may play important role workflows may important know active copies workflow object may come existence certain point time 
example execution certain workflow object may responsibility certain department members 
case invocations workflow object department overloaded 
definition workflow object bounded reachable state occur times 
theorem determining workflow object bounded dspace poly complete problem 
proof follows immediately translation ordinary petri nets workflow structures fact determining boundedness petri net dspace poly complete see 
reader reminded inclusion poly dspace poly 
desirable determine specifications equivalent express workflow 
relevant context execution optimization 
formally workflow specifications equivalent iff generate exactly set traces 
trace corresponds list atomic actions see section order performed complete execution workflow specification 
atomic actions correspond basic functionality workflow structure 
formal definition trace refer hn 
theorem equivalence problem workflow structures undecidable 
proof context free grammars determine undecidable see sal 
formally context free grammar tuple hn sigma pi si finite set nonterminal symbols sigma finite set terminal symbols initial symbol pi set production rules form 
sigma see gj 
context free grammar translated workflow structure wg trace wg nonterminal decomposition name having decision initial item 
decision terminating iff contains rule form 
production rule form task name decomposition name furthermore trigger task name production rule results sequence tasks order corresponding order nonterminals terminals righthand side 
production rules decision introduced allowing choice main task decision initial item recall initial symbol grammar 
completes construction wg corresponding trace simply follows 
derivation choosing decision associated nonterminal production rule chosen derivation 
way identical 
achieved correspondence context free grammars workflow structures 
note proof require substantial fact recursive decomposition structures allowed 
corollary detecting workflow specification generic workflow specification undecidable 
example workflow structure wg context free grammar 
grammar defined production rules abcd aa af bba workflow structure context free grammar theorem implies situation similar query optimization 
equivalence order queries example decidable focus application equivalence preserving transformations 
workflow specifications desirable transformations defined supporting optimization execution 
termination restricted workflow structures section termination restricted workflow structures studied shown safeness verified polynomial time 
restriction workflow structures studying proofs previous section clear expressive power workflow structures large extent due concept synchroniser 
unrestricted construct causes non polynomial complexity termination verification 
hand obviously disallowing forms synchronisation leads undesired loss expressive power 
necessary focus controlled form synchronisation 
controlled form guarantee determining local correctness synchronisation sufficient global correctness 
workflow structures possible express forms synchronisation 
may refer form synchronisation synchronisation decomposition workflow objects decomposed task may start execution paths task terminated 
source complexity fact far decomposition structures allowed cyclic 
heavily proof undecidability determining equivalence workflow specifications 
restricted workflow structures cyclic decomposition allowed 
formally restricted workflow structures workflow structures cyclic decomposition structures 
requirement simply translates terms syntax section 
formally capture requirement relation super theta defined defines decomposition relations decomposition names name sup requirement decomposition structures acyclic formally stated requiring reflexive transitive closure relation asymmetric termination restricted workflow structures having defined restriction workflow structures important find computationally tractable rule guarantees safeness execution scenario lead succesful termination 
provide intuition workflow structures termination problems shown 
right workflow structure represents trivial example deadlock decision outgoing triggers 
workflow structures examples livelocks tasks performed continuously execution path leading termination 
livelock deadlock workflow structures solution starts observation decomposition sufficient look decomposition individually 
rest focus single supertask decomposition 
sets restricted decomposition 
workflow object may considered terminating execution possible terminate zero steps 
non terminating decisions means possible subsequent workflow objects terminating 
tasks means subsequent workflow objects terminating started parallel 
formally notion terminating workflow object captured unary predicate term defined set derivation rules term term term term term shown section supertask terminate succesfully workflow object decomposition satisfies predicate term 
proofs necessary define formal semantics restricted workflow structures 
semantics restricted workflow structures restricted workflow structures workflow structures cyclic decomposition structures 
process algebra translation hn overkill safeness proofs assign simple trace semantics restricted workflow structures 
basic observation workflow structure state completely determined workflow objects respective number active instances 
formally state seen multiset multisets section notation multisets definitions far needed rest briefly introduced 
multisets differ ordinary sets multiset may contain element 
multiset denoted enumeration elements multiset denotes number occurrences membership operator multisets takes occurrence frequency elements multiset account remainder shorthand 
bag comprehension bag theoretic equivalent set comprehension 
predicate exactly exists 
multiset denoted means bag comprehension schema set intensional denotation multiset determined set finite multisets domain denoted 
trace semantics workflow structures semantics workflow structure set possible traces possible action sequences 
traces captured step transition relation states 
transition relation gamma 
subset theta theta set task names tasks occurring decomposition supertask names correspond atomic actions context may associated decomposition represents empty string 
gamma 
state may change state performing task name performing decision case action performed 
formally step transition relation may defined set derivation rules gamma 
fdg rule states executing terminating decision may lead removal decision state 
rule states executing decision terminating may lead replacement decision state successors 
gamma 
feg fdg execution task leads replacement successor workflow objects name gamma 
reflexive transitive closure gamma 
gamma 
define reachability states 
formally state reachable notation reach reachable set initial items performing sequence oe actions oe init name oe gamma 
semantics supertask set possible traces leading termination set oe init name oe gamma 
traces play important role context notation gamma 
abbreviation oe oe gamma 
proving correctness section proved condition term necessary sufficient condition guaranteeing safeness 
trivial proofs 
reason fact workflow objects terminating execution increase number workflow objects state 
sufficiency proof deals problem defining partial order states showing state monotonously decreasing series states final state empty state 
proof technique interest conceptual workflow specification considerations 
theorem term gamma 
proof assume term 
partial order oe defined follows oe number derivation steps needed prove term number derivation steps needed term 
partial order workflow objects partial order oe states derived ff oe fi iff ff fi ff fi informally may think definition ff oe fi ff closer termination fi 
suppose 
ready gamma 
assume 
prove find oe gamma 
finitely zm proven result 
maximal element cases distinguished ffl choose case gamma 
oe ffl choose oe exists 
define case gamma 
oe ffl oe 
defining gamma 
oe note theorem bit stronger need 
states possible state reachable ones empty state reached 
theorem states workflow object decomposition terminating workflow specification safe 
theorem necessity term reach gamma 
proof proving gamma 
term term informally speaking captures fact possible get rid nonterminating workflow objects state 
assume gamma 
term 
cases distinguished 
case term 

case term 
executing lead addition workflow object note essential proof non terminating workflow object reachable initial items 
verification problems workflow specifications addressed 
focus control aspects 
turns interesting questions tractable 
may serve facts life workflow specialists may prevent fruitless searches efficiency 
restriction synchronisation concept decomposition structures proposed allows termination verification polynomial time 
attie singh sheth rusinkiewicz 
specifying enforcing intertask dependencies 
agrawal baker bell editors proceedings th vldb conference pages dublin ireland august 
bgs georgakopoulos schek 
merging application centric data centric approaches support transaction oriented multi system workflows 
sigmod record september 
bot bots 
environment support problem solving 
phd thesis delft university technology delft netherlands 
bw baeten weijland 
process algebra 
cambridge university press cambridge united kingdom 
casati ceri pernici pozzi 
conceptual modeling workflows 
papazoglou editor proceedings th international object oriented entity relationship modelling conference volume lecture notes computer science pages 
springer verlag december 
fkb kuhn 
general purpose workflow languages 
distributed parallel databases april 
ghs georgakopoulos hornick sheth :10.1.1.101.5199
overview workflow management process modelling workflow automation infrastructure 
distributed parallel databases april 
gj garey johnson 
computers intractability guide npcompleteness 
freeman san francisco california 
hn ter hofstede 
task structure semantics process algebra 
software engineering journal january 
jones landweber lien 
complexity problems petri nets 
theoretical computer science 
ks krishnakumar sheth 
managing heterogenous multi system tasks support enterprise wide operations 
distributed parallel databases april 
miller sheth kochut wang 
corba run time architectures workflow management systems 
journal database management 
pet peterson 
petri net theory modelling systems 
prentice hall cliffs new jersey 
rs rusinkiewicz sheth :10.1.1.43.3839
specification execution transactional workflows 
kim editor modern database systems object model interoperability 
acm press cambridge massachusetts 
sal salomaa 
formal languages 
acm monograph series 
academic press new york new york 
ter hofstede van 
representation information modelling knowledge 

lyytinen editors generation case tools volume studies computer communication systems pages 
ios press 
