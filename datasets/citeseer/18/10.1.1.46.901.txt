xz ordering space filling curve objects spatial extension christian hm gerald hans peter kriegel university munich computer science institute 
munich germany boehm kriegel informatik uni muenchen de 
increasing need integrate spatial index structures commercial database management systems 
geographic information systems gis huge amounts information involving spatial thematic attributes managed 
relational databases adequate handling thematic attributes fail manage spatial information efficiently 
point hybrid solution relational databases separate spatial index approach existing object relational database systems provide satisfying solution problem 
necessary map spatial information relational model 
promising approaches mapping space filling curves ordering hilbert curve 
approaches perform embedding multidimensional space dimensional space 
unfortunately techniques sensitive suitable choice underlying resolution parameter objects spatial extension rectangles polygons stored 
performance usually deteriorates drastically resolution chosen high low 
new kind ordering allows arbitrary high resolution performance degeneration 
robustness achieved avoiding object duplication allowing overlapping elements novel coding scheme elements optimized algorithm query processing 
superiority technique shown theoretically practically comprehensive experimental evaluation 

motivation index structures spatial database systems extensively investigated decade 
great variety index structures query processing techniques proposed gg 
techniques hierarchical tree structures tree gut variants bkss srf bkk 
approaches node corresponds page background storage region data space 
increasing interest integrating spatial data commercial database management systems 
geographic information systems gis data intensive applications involving spatial thematic attributes 
thematic attributes usually best represented relational model powerful adequate tools evaluation management available 
relational databases fail manage spatial attributes efficiently 
common store thematic attributes relational database system spatial attributes outside database file multidimensional index structures hybrid solution 
hybrid solution bears various disadvantages 
especially integrity data stored ways inside outside database system difficult maintain 
update operation involving spatial thematic attributes fails relational database due concurrency conflicts corresponding update spatial index undone guarantee consistency 
vice versa spatial update fails corresponding update relational database aborted 
purpose distributed commit protocol heterogeneous database systems implemented time consuming task requires deep knowledge participating systems 
hybrid solution involves problems 
file systems database systems usually different approaches data security backup concurrent access 
file storage guarantee physical logical data independence 
changes running applications complicated 
promising approach overcome disadvantages object relational database systems 
object relational database systems relational database systems extended application specific data types called data data blades 
general idea define data spatial attributes manage spatial attributes database 
data intensive gis applications necessary implement multidimensional index structures database 
requires access block manager database system granted commercial database systems 
instance current universal servers oracle informix provide documentation block oriented interface database 
data blades allowed access relations sql interface 
current object relational database systems helpful integration problem 
summarize anyway current object relational database systems pure relational database systems possible way store spatial attributes inside database map relational model 
early solution management multidimensional data relations space filling curves 
space filling curves map points multidimensional space dimensional values 
mapping distance preserving sense points close multidimensional space close dimensional space 
distance preservation strict concept search matching objects usually restricted limited area embedding space 
concept space filling curves extended handle polygons 
idea decomposition polygons space filling curve 
discuss approach section reveal major disadvantage sensitive suitable choice resolution parameter 
new method applying space filling curves spatially extended objects decomposition avoids associated problems 
concreteness concentrate implementation filter step queries query region window queries range queries 
filter steps refinement step scope 
rest organized follows section introduce space filling curves review related 
section explains general idea gives overview solution 
sections show operations insert delete search handled 
section comprehensive experimental evaluation technique relational database management system oracle performed showing superiority approach standard query processing techniques competitive approaches 

ordering ordering recursive decomposition data space provided space filling curve sag sam called ordering om peano morton curve mor quad codes fb locational codes 
ordering point databases assume point taken dimensional unit square algorithm partitions unit square quadrants equal size change description slightly comparable approach canonically numbered cf 

note number quadrant partition quadrant sub quadrants 
recursively repeated certain basic resolution reached 
fixed number recursive iterations called resolution level obtained sequence digits called quadrant sequence ordering key points order lexicographically quadrant sequence represents region data space called element 
instance sequence stands element side length touching lower left corner data space 
elements basic resolution represented quadrant sequences length called cells 
element contained element corresponding quadrant sequence prefix 
longer quadrant sequence smaller corresponding element 
unit square area element represented sequence length point database cells basic resolution 
quadrant sequences lengths interpret quadrant sequences numbers represented quaternary system base 
interpreting sequences numbers facilitates management index change ordering points lexicographical order corresponds equal relation numbers 
points managed order preserving dimensional index structure tree 
query processing ordering assume window query specified window 
data space decomposed quadrants 
quadrant tested intersection query window 
quadrant intersect query window done 
quadrant completely enclosed query window retrieve points database having quadrant sequence element prefix keys 
keys represented integer numbers cf 
section retrieve interval subsequent numbers 
remaining quadrants intersected window completely enclosed window real intersections decomposed recursively basic resolution reached 
ordering 
naive approach polygon databases extend concept ordering management objects spatial extension rectangles polygons face problem polygon intersects cells 
naive approach store cell covered object database 
obviously method causes huge storage overhead basic grid coarse 
methods proposed reduce overhead finer grid 
value approximation objects approximated smallest element encloses complete object cf 

case recursive algorithm determination quadrant sequence modified follows partition current data space quadrants 
exactly quadrant intersected object proceed recursively quadrant 
quadrant intersected 
quadrant sequence obtained point ordering key 
method obvious advantage object represented single key set keys naive approach 
method yields disadvantages 
disadvantage quadrant sequences approach different lengths depending resolution smallest enclosing quadrant 
simple interpretation numerical value possible 
keys stored strings variable length compared lexicographically efficient numerical comparisons 
second problem objects may represented poorly 
instance polygon intersecting axis parallel lines middle data space line line approximated empty quadrant sequence 
polygon approximated large approximation empty sequence short sequences justified 
small polygons relative approximation error large 
relative space overhead object approximation unlimited 
fact objects approximated empty quadrant sequence candidates query user asks 
objects short quadrant sequences stored database worse selectivity index 
optimized redundancy avoid unlimited approximation overhead orenstein proposes combination naive approach sequence representation ore ore 
adopts idea object decomposition naive approach necessarily decompose object basic resolution reached 
proposes different criteria called size bound error bound control number quadrants object decomposed 
subobject stored index quadrant sequence represented string 
concept involves object value representation 
duplication called redundancy orenstein number records stored index directly determined grid resolution naive approach 
sequence approach necessary represent small objects empty sequence short sequences 
orenstein typically decomposition parts sufficient satisfactory search performance 
orenstein approach alleviates problems previous approaches duplicate elimination required keys sequences varying length 
orenstein determines optimal degree redundancy experimentally 
analytical solution proposed gaede identified complexity stored polygons described perimeter fractal dimension main parameters optimization 
problem redundancy allowed arises connection secondary filters multi step environment 
information exploited fast filtering false hits additional conservative approximations minimum bounding rectangles mbr subject duplication due high storage requirement 
avoid duplication information stored separate table implies additional joins query processing 
consequence gaede analysis number intervals generated query window proportional number grid cells intersected boundary query window perimeter 
means fine resolution grid leads large number intervals deteriorated performance behavior relational database system 
reason intervals transferred processed database server negligible number intervals high thousands 
alternative techniques improvements ordering concept known cf 

authors propose different curves gray codes fal fal hilbert curve fr jag variations kum 
studies oos jag fr prefer hilbert curve proposals due best distance preservation properties called spatial clustering properties 
proposes great variety space filling curves comprehensive performance study relational implementation 
performance evaluation yield substantial performance improvement hilbert curve space filling curves ordering peano morton curve easier compute 
hilbert peano order gray codes mirror index various space filling curves 

space filling curve spatially extended objects contrast previous approaches propose solution avoids disadvantages object duplication variable length quadrant sequences 
method completely insensitive fine grid resolution 
need optimize resolution parameter 
taken fine possible full bit precision cpu exploited 
ideas applied achieve robustness idea section incorporate overlap concept elements 
define elements adjacent elements resolution level overlap 
method enables store objects redundancy object duplication uncontrolled approximation error 
particular impossible small object represented short sequence empty sequence 
second idea sophisticated coding scheme quadrant sequences maps quadrant sequences varying length integer domain distance preserving way 
coding algorithm section 
third idea cf 
section efficient algorithm interval generation query processing 
goal algorithm close small gaps adjacent intervals overhead processing additional interval larger cost interval gap 
call technique maps polygons integer values extended ordering xz ordering 
integer values forming keys search called xz values 
polygon database store record contains xz value pointer exact geometry representation polygon 
avoid object duplication information thematic attributes information secondary filters mbr conservative progressive approximations cf 
bks stored table 
overlapping cells elements important problem value representation objects approximated poorly 
object intersecting axis parallel lines represented empty quadrant sequence characterizes element comprising complete data space 
object extension small close relative approximation error diverges infinity 
fact technique decomposes space disjoint cells gets trouble object located boundary large elements 
modify definition elements overlap elements resolution level allowed 
easiest way envisage definition overlapping elements take original elements obtained ordering enlarge height width factor upwards right depicted 
adjacent cells overlap 
special advantage definition contains small elements objects intersecting middle axis 
definition enlarged elements lower left corner enlarged element corresponds lower left corner ordering 
quadrant sequence lower left corner denote length 
upper right corner translated height width element possible guarantee bounds minimal length quadrant sequence approximation quality extension object direction 
lemma 
minimum maximum length quadrant sequence length quadrant sequence object height width bounded limits proof lemma loss generality assume consider disjoint space decompositions elements resolution levels call arising decomposition grids grid grid respectively 
distances grid lines equal widths elements corresponding decomposition levels 
distance lines grid greater equal object intersected grid line parallel axis grid line parallel axis 
lower left element intersecting elements enlarged definition object completely contained enlargement 
distance lines grid smaller object intersected axis parallel lines grid 
element level enlarged definition object contained 
lemma exploited provide boundaries relative approximation error objects 
polygons arbitrary complex possible approximation technique restricted complexity mbrs technique provide error boundaries 
guarantee maximum relative error square objects smaller basic resolution enlarged regions xz ordering 
log max log log log log lemma 
maximum approximation error relative approximation error square objects limited 
proof lemma lemma quadrant sequence square object width length width corresponding cell enlarged element area maximum approximation error limited value relative approximation error large important advantage technique value representation approximation error limited 
experimental evaluation show average approximation error technique smaller value representation 
numbering quadrant sequences quadrant sequence length varying maximum length determined basic resolution 
problem assign numbers sequences order preserving way equal order numbers correspond lexicographical order quadrant sequences 
length quadrant sequence lemma determine number cells elements contained corresponding region lemma 
number cells elements inside region number cells resolution contained region described quadrant sequence corresponding number elements including element cells proof lemma total elements length total cells data space 
cells elements length cover data space complete way area element times larger area cell 
log log log rel cell elem number elements length contained element length corresponds obtaining number elements summarize ranging definition numbering scheme sure codes subsequent strings length numbers strings ordered exactly strings having prefix number multiply quadrant number sequence definition sequence code sequence code quadrant sequence corresponds lemma 
ordering preservation sequence code equal order sequence codes corresponds lexicographical order quadrant sequences proof lemma suppose 
predicates true definition lexicographical order exists case know th term sum th term sum 
summands equal 
show difference sums remaining terms smaller elem guarantee difference maximal case determine follows case summands equal additional positive summands available sum 
rewrite condition proof analogue direction 
lex lex min lex lex lemma 
minimality sequence code exists mapping set quadrant sequences set natural numbers requires smaller interval natural numbers 
proof lemma lemma follows different elements 
maximal form 
case evaluates term coding empty string 
elem different strings mapped exactly interval 
lemma follows surjective mapping set 
note formal proof injective 
quadrant sequence reconstructed coding efficient way necessary purposes 

query processing insert delete know lemma quadrant sequence length 
decide predicate tests object intersected grid lines denotes lower boundary object direction criterion applied length quadrant sequence determined corresponding quadrant sequence determined lower left corner bounding box object described section 
sequence clipped length coded definition 
obtained value key storage management object relational index 
actual algorithm performs operations recursive descent quadrants coding definition simultaneously explicitly generating quadrant sequence 
algorithm runs time 
window queries interval sets query processing proceed recursive way similar algorithm section 
determine quadrants intersected query 
intersected ignored 
quadrant completely contained query window elements having corresponding quadrant sequence prefix completely contained query 
interval corresponding xz values generated marked retrieval database 
quadrant intersected elem elem elem elem elem log max corresponding xz value determined marked handled value interval 
algorithm called recursively sub quadrants 
marked set intervals xz values retrieved database 
set translated sql statement transferred dbms 
problems arise resolution basic grid chosen fine case typically elements partially intersected 
average case number generated intervals order 
costly transfer compile complex query 
alleviate problem apply simple densification algorithm depicted set intervals 
small gaps subsequent intervals closed densification intervals causes additional disk accesses query processing 
densification interval generation optimizes query compilation cost related cost factors change general complexity interval generation 
purpose algorithm devised generates intervals directly way closes gaps 
algorithm described subsequent section 
efficient algorithm interval generation algorithm allows user specify number intervals int generated 
exploit general property xz ordering ordering note formal proof consider interval sets come restrict interval generation certain length corresponding quadrant sequences 
increased possible intervals generated 
factor number intervals interval set grows increasing length restricted 
intervals larger interval set contained interval smaller set 
additional gaps intervals interval set generated increased smaller gaps visible decreased 
descend recursion tree algorithm section breadth fashion times intervals demanded int know set set int intervals largest possible gaps 
breadth traversal implemented algorithm phase depicted algorithm performs depth traversal determining number intervals recursion level 
clue recursive descent avoided corresponding level reached number int intervals interested level having int intervals 
level algorithm measures number transitions xz order extended elements space filling curve cross query region 
algorithm simple algorithm gap closing 
foreach interval list succ lower upper upper succ upper delete succ level called int times maximum complexity algorithm bounded second phase generate corresponding interval set depth traversal limited recursion depth obtained phase 
number intervals greater int neighboring intervals smallest gap merged 
third phase upper bounds intervals investigated 
possible upper bounds slightly improved decreased deeper descent recursion tree 
phases yield linear complexity 
experimental evaluation order verify claims implementation spatial index structures provide advantages software engineering point view terms performance implemented xz ordering technique top oracle performed comprehensive experimental evaluation data gis application 
database contains polygons map european union 
generated smaller data sets eu map investigate behavior vary int algorithm determining suitable recursion level phase 
var num ch array integer procedure det num changes element query region cur num ch integer depth integer var inside boolean intersect element query inside inside false increment num ch depth contains query element inside inside true increment num ch depth inside inside true increment num ch depth current depth num ch num ch depth int foreach det num changes query num ch num ch depth depth inside function suitable level query region integer initialize num ch det num changes dataspace query false suitable level num ch int ing database size 
application implemented embedded sql dynamic sql level hp workstations 
database server client application run separate machines connected mbit fast ethernet 
implementation top file system tree comparison purposes 
reason test show technique implementable top commercial database system additional overhead induced database system small 
cases varied database size executed window queries selectivity respect number polygons query result 
experiments section repeated times 
results averages trials 
number page accesses cf 
left diagram oracle higher file tree implementation 
comparable node capacity implementations 
second experiment depicted right side shows application specific space filling curve strong influence performance technique 
settings tested various curves including peano hilbert curve gray codes 
consequent trend observable suggest superiority curves 
decided perform subsequent experiments peano morton curve implementation facilitated 
purpose series experiments show superiority ap proach competitive techniques orenstein ordering 
demonstrate technique contrast ordering subject performance deterioration grid resolution chosen high 
constructed indexes varying resolution parameter techniques xz ordering applied size bound decomposition strategy resulting redundancy 
experiment stored polygons database retrieved window queries 
ordering clear minimum resolution satisfying query performance 
resolution slightly increased decreased query performance deteriorates 
instance chosen num number polygons hilbert peano gray code index mirror number polygons number page accesses oracle implementation tree implementation comparison oracle file tree comparison various space filling curves 
ber page accesses higher optimum 
maximum resolution factor number page accesses factor higher optimum 
contrast technique shows different behavior 
grid resolution parameter small performance similar performance ordering 
coarse grid leads obviously bad index selectivity objects mapped values xz values respectively 
techniques point optimum 
point xz ordering yields constant number page accesses 
possible avoid optimization parameter difficult depends dynamically changing information fractal dimension stored objects number 
trend maintained selectivity query increased depicted right side 
number polygons resolution fixed 
resolution factor number page accesses selectivity ordering sensitive resolution performance comparison varying selectivity 
number polygons number page accesses value approximation xz ordering number polygons access time sec 
sequential scan xz ordering comparison value approximation comparison sequential scan 
series experiments compared technique cf 
section sequential scan data set 
remaining test parameters correspond previous experiments 
competitive techniques clearly outperformed depicted 
value approximation yields page accesses 
sequential scan needs processing time xz ordering 
experiment determined influence query processing algorithm section 
varied resolution parameter generated interval sets intervals window query side length unit square data space 
measured cpu time required generation intervals corresponding string dynamic sql statement 
compared algorithm simple algorithm cf 
section extended gap closing algorithm cf 

results 
simple algorithm exponential complexity respect resolution improved algorithm linear 
finest resolution improved algorithm factor faster simple algorithm 

proposed xz ordering new technique dimensional embedding extended spatial objects rectangles polygons 
contrast previous approaches require optimization resolution parameter order efficient technique insensitive fine resolution underlying grid 
resolution parameter restricted hardware constants number bits integer value chosen fine possible 
robustness achieved applying basic concepts 
object decomposition avoided concept overlapping elements 
sophisticated order preserving coding integer domain facilitates management search keys dbms 
new query processing algorithm insensitive grid resolution 
superiority approach shown theoretically practically 
implemented xz ordering technique top relational database system oracle 
technique outperformed competitive techniques space filling curves standard query processing techniques 
resolution factor simple algorithm improved algorithm improved interval generation 
abel smith data structure algorithm linear key rectangle retrieval problem computer vision pp 

bkk berchtold keim kriegel extended feature objects partial similarity retrieval vldb journal vol 
pp 

bks brinkhoff kriegel schneider comparison approximations complex objects approximation query processing spatial database systems icde pp 

bkss beckmann kriegel schneider seeger tree efficient robust access method points rectangles proc 
acm sigmod int 
conf 
management data atlantic city nj pp 

gaede optimal redundancy spatial database systems proc 
th int 
symposium advances spatial databases ssd portland maine usa lecture notes computer science vol 
pp 

gg gaede nther multidimensional access methods acm computing surveys vol 
pp 

ting spatial database systems 
vldb journal vol 

gut guttman trees dynamic index structure spatial searching proc 
acm sigmod int 
conf 
management data boston ma pp 

hil hilbert ber die abbildung einer auf ein fl ck math 
vol 
pp 

development implementation evaluation strategies geometric query processing oracle german master thesis university munich 
kum kumar study spatial clustering techniques dexa pp 

fal faloutsos multiattribute hashing gray codes proc 
acm sigmod int 
conf 
management data washington pp 

fal faloutsos gray codes partial match range queries ieee transactions software engineering tse vol 
pp 

fb finkel bentley quad trees data structure retrieval composite keys acta informatica vol 
pp 

fr faloutsos rong dot spatial access method fractals proc 
th int 
conf 
data engineering kobe japan pp 

fr faloutsos roseman fractals secondary key retrieval proc 
th acm pods philadelphia pa pp 

jag jagadish linear clustering objects multiple proc 
acm sigmod int 
conf 
managment data atlantic city nj pp 

mor morton computer oriented geodetic data base new technique file sequencing ibm 
oos reactive data structures geographic systems 
ph thesis university leiden netherlands 
ore orenstein redundancy spatial databases proc 
acm sigmod int 
conf 
management data portland pp 

ore orenstein strategies optimizing redundancy spatial databases proc 
st symposium large spatial databases santa barbara ca pp 

om orenstein class data structures associative searching proc 
rd acm pods waterloo ontario canada pp 

sag sagan space filling curves berlin heidelberg new york springer verlag 
sam samet design analysis spatial data structures 
reading ma addisonwesley 
srf sellis roussopoulos faloutsos tree dynamic index multidimensional objects proc 
th int 
conf 
large data bases brighton england pp 

