boss system coupling visual programming model interface design siegfried schreiber due limitations wysiwyg user interface builders user interface management systems model user interface construction tools gain rising research interest 
describes boss system model tool employs encompassing specification model hit hierarchic interaction graph templates setting parts model interactive application application interface user interaction task space presentation design rules declarative designer oriented manner 
boss offers integrated development environment specifications elaborated graphical visual programming fashion 
refinement component specification transformed high level design goals 
refined specification boss generates automatically user interfaces modified techniques compiler construction 
currently categories tools supporting development user interfaces category belong available user interface builders user interface management systems follows called bottom approach 
task building user interface starts assembly static layout desired interface wysiwyg editor 
approach drawbacks ffl static portions user interfaces menus dialogue boxes built easily 
cases user interfaces support applications complex structured objects dynamically created destroyed manipulated 
keeping user interface layout consistent application dialogue state poorly supported 
ffl wysiwyg interface tools encapsulate common software ergonomic rules style guide compliance user interfaces checked hand 
ffl design alternative user interface different class users time consuming original design lot layout details reconsidered 
second category user interface tools tries overcome drawbacks 
model user interface tools user interface generators follow notion generating automatically executable user interface declarative description model properties interactive application application interface user interaction task space presentation design rules 
model tools claim benefits ffl adopting principle separating logical layout structure known related research domains document architecture user interface designers freed burden making presentation design commitments designing menus dialogue boxes early stages design process able design user interfaces centered concepts users tasks 
siegfried schreiber ffl rapid prototyping working interfaces just display mock ups supported model tools specification worked details 
reported current model tools rarely interface designers cryptic languages model specification 
interface designers learn different specification techniques setting different parts model 
boss system boss acronym german translation user interface specification system tries overcome drawbacks means ffl model systems boss uses encompassing specification model hit hierarchic interaction graph templates cover parts see model interactive application 
hit suited supporting different roles persons user interface design application analysts describe structure task space interactive application offers users 
human factors experts express presentation design rules capturing software ergonomic guidelines constructive manner 
ffl hit combines properties known software construction methods dataflow diagrams dynamic attribute grammars 
hit compromise designer oriented implementation oriented specification model designers express notions declarative natural manner 
application analysts describe user interaction task space way closely related motivated modelling approaches hci 
specification efficient implementations generated automatically 
ffl specification specification refinement component boss generates automatically different kinds user interfaces high level design goals support particular class users 
refinement component supports transformations change behaviour presentation user interface global way 
ffl boss tailored specific application domain business oriented systems handle interfaces animated interactive graphics application specific objects 
ffl boss offers integrated development environment ide specifications elaborated graphically visual programming fashion 
ide boss supports tight specification generation evaluation cycles increases usability system 
ffl boss supports systematic development user interfaces early activities task analysis presentation design implementation 
boss allows derivation standard user interfaces task level descriptions user interfaces tested evaluated early stages development process 
shows human factors expert setting presentation design rules ide boss explanation see section presentation design 
organized follows give overview model interface design boss system 
outline specification example illustrate hit specification model various states interface design process 
discuss specification refinement component boss 

boss system coupling visual programming model interface design 
specification session human factors expert boss ide model user interface design boss overview shows architecture boss system design time part run time part 
design time part describes user interface development process boss 
runtime part shows user interacts generated user interface 
structure model interactive application model interface tools boss model interactive application captures knowledge needed support user interface development process various stages ui lifecycle analysis design usage 
model structures space properties interactive systems design dimensions corresponding different roles persons user interface design see ffl description application interface ai specifying application data structures functions relevant user interface role application analyst 
ffl description space interaction tasks users perform application interface 
user interaction task space uits structured high level description user system consider presentation aspects role application analyst 
ffl presentation design pd role human factors expert description mapping task level state interactive application logical structure appropriate software ergonomic rules presentation layout structure 
important note setting model sequential process starting ai finished pd designing interactive application scratch want start identifying potential classes users tasks want accomplish user centered interface design process 
breaking siegfried schreiber dialogue designer high level design goals application analyst human factors expert ai pd uits model interactive application hit representation generator compiler ai application interface uits user interaction task space pd presentation design im interaction manager pm presentation manager specification refiner refinement rules design time run time user pm im current uits current presentation generated user interface boss ide 
architecture boss communication application omitted 
boss system coupling visual programming model interface design complex tasks simpler ones results functions carried user interaction part ai 
parts model extent application independent 
typically model part pd contains rules generic interaction tasks entering data instances triggering application functions 
interaction tasks appear user interface pd regarded specification reusable user interface style guide parts different applications 
main goal boss system increase level reusability design dimensions ai uits providing means specifying reusable building blocks composition ai uits 
ai uits pd belong different ui design dimensions similar kinds information described ffl level structural information modeled 
ai complex application data structures built simpler ones 
uits dimension captures temporal relation simpler tasks composed complex tasks 
recursion model arbitrary deep nested structures 
ffl structural enriched semantic information model data structures fulfill semantic constraints semantic data models 
modelling uits syntactical task structures task subtask relations described 
necessary model context sensitive conditions task may executed data flow dependencies tasks input data task operate output data delivered task interactions user transforms input output data 
part model represented explicitely certain specification model 
boss system employs encompassing specification model hit hierarchic interaction graph templates representation parts model interactive application 
hit specification model overview hit specification model combines properties object oriented rule specification techniques 
hit specification consists set basic data type function definitions set templates called hits hierarchic interaction graph template 
specification hits mainly purposes ffl hits may serve prototypes creating objects hit instances maintaining state reacting response external messages connected objects object structure object oriented view 
context user interface design object oriented properties employed describing objects representing instances user interaction tasks part user interaction task space uits 
ffl hits may specifying rules describing transformation input data output data rule view 
rule properties hit specification model important context presentation design rules capturing software ergonomic guidelines presentation application data defined 
siegfried schreiber hit specification model shares properties extended data flow diagrams specification information systems techniques known compiler construction dynamic higher order attribute grammars 
original application domain specification techniques known combining efficiency 
definition hit consists structural syntactical semantic part 
structural definition describes hit constructed simpler hits operators construction records parallel composition rec alternatives alt sequences seq 
attribute grammars structural description enriched semantic information 
associated hit various kinds data flow constraints entities ffl slots context attribute grammars named attributes representing state hit instance 
slot stores data instance instance hit slot 
certain slots hit distinguished input input output output parameter slots hit instance shares parts state related hit instances object hierarchy 
input slots may modified external entity human user values output slots relevant environment 
ffl message ports receiving events external entities distribution messages structure hit instances building communication structures 
hit containing input slots message ports component hits input slots message ports said interactive 
interactive hits input slots message ports called interactions 
interactions hit instance enabled allowing users interact disabled 
output slots interactions define observable state hit instance 
ffl rules defining directed equation spreadsheet manner way constraints hold time transaction caused external entity application function called user 
rule invokes external function instance hit 
rule may precondition normally precondition called function 
encourage hits different contexts hit may parametrized template classes 
component hit may annotated arbitrary information may tools reasoning specifications 
transaction rule hit part uits estimated frequency important information presentation design 
lifetime particular hit instance determined structural context part sequential alternative hit instance applicability condition depending values input parameter slots termination condition depending called termination slots usually subset output parameter slots 
mechanisms set hits describes object space changing dynamically satisfy semantic context conditions applicability termination conditions 
hit alt consisting alternatives instantiated alternatives satisfied applicability condition instantiated 
results dynamically growing shrinking tree hit instances dynamically growing shrinking data flow graph 
tree hit instances called consistent criteria node applicability condition satisfied termination condition satisfied 

boss system coupling visual programming model interface design hit specification model incorporates extensions behaviour user interface specified fine grained way ffl behaviour rules wrt 
violated preconditions tailored ffl rules may demand input parameters particular order 
causes interactions input slots enabled supply directly indirectly parameter position demand rule currently required ffl interactions may temporarily blocked interactions realize modal forms dialogue 
generic ui features undo redo supported details see 
normally advanced features employed user interface designers directly automatic refinement specifications see 
specification refinement generation efficient programms shown boss offers refinement component performs transformations model high level design goals entered dialogue expert 
refinement layer discussed detail 
refined ui specification generator builds components interaction manager im presentation manager pm running user interface 
generation process completeness consistency model checked 
application function ai appear uits uits complete wrt 
application interface 
consistency model violated sequential task uits represented sequential hit seq data flow dependencies specified hit corresponding class appropriate constructors destructors members member functions generated modified techniques compiler construction incremental attribute evaluation pre generation evaluation strategies 
run time model interface tools time memory expensive techniques unification resolution employed 
interaction manager im composed object classes generated hits constituting design dimensions ai uits 
im component manages task level user interaction run time 
presentation manager pm built classes generated hits pd capturing software ergonomic rules constructive executable manner 
runtime architecture generated user interfaces shown generated user interface contains components im pm data bases current uits current presentation provide different views state user interface interactive application ffl current uits denotes state wrt 
user interaction task space uits 
current uits capturing knowledge tasks user completed currently working complete achieve certain goal 
ffl current presentation representation current uits terms interaction objects aio buttons menus 
current uits current presentation coupled components im pm information flows labeled siegfried schreiber ffl information flow denotes construction presentation presentation manager pm 
time current uits logical structure changes corresponding current presentation layout structure created presentation objects bound observable objects logical structure 
outlined current uits represented consistent tree hit instances treated normal data instance hit specification model 
process constructing current presentation software ergonomic guidelines specified hit 
ffl information flow shows user changes current uits 
current presentation user instantiates hit normally hit encapsulating top level task decomposition interactive system indicating current input parameter values 
starting toplevel hit instance interaction manager im constructs consistent tree hit instances current uits 
user interacts current uits triggering transaction rules changing interaction objects presentation values input slots sending messages message ports hit instance 
current uits inconsistent interactions im constructs new consistent current uits 
instance seq sequential hit seq instance terminated instance created child context interaction manager im regarded task oriented parser analyzes stream basic user interactions terms higher level task units uits description 
model user interface design boss example illustrate boss system various levels interface design outline specification example simple order management system oms handles customers products orders 
modeling application interface ai ai consists structural functional part 
shows semantic data model structural part oms grammar notation 
products product pno number number tree string pname string orders order ono number number pno number number amount total amount sum number enum cname string string customers customer list tree leaf node inner node enum 
enumeration type number string predefined simple types equation attribute 
semantic data model oms 
boss system coupling visual programming model interface design predefined simple data types number enum string complex data structures built operators constructing records alternatives lists trees 
data structures may assigned additional semantic information attributes attribute evaluation rules usually directed equations 
example attribute orders holds sum values orders order list orders 
time instance orders modified insertion new order kept date 
functional part application interface consists functions oms exports user see 
function described indicating formal parameter name parameter type application function ono number orders delete order order create order orders number pno number number order create customer enum 
customer customers input parameter output parameter 
application functions oms input input output output parameters precondition values input parameters 
example create order creates new order delete order removing existing orders 
new customers created create customer 
create order delete order modify input output parameter denoted double headed arrow 
preconditions describe constraints input parameter values function 
function delete order demand parameter ono number order deleted denotes existing order parameter 
important note boss uses pre postcondition mechanism describing sequencing functions task 
kind information expressed manner modeling uits 
representing uits hit specification model application analysts describe user interaction task space uits step process closely related motivated modelling approaches hci ffl structure uits described 
complex user interaction tasks interaction entire oms decomposed simpler tasks level application functions reached 
hit task hierarchy modeled grammar structured manner set hits 
task corresponds hit 
task structure represented structure hit composition sequential parallel simpler hits consists 
ffl second step structural description uits enriched semantic information relate entities ai user interaction 
hit user interaction task described defining data flows user inputs siegfried schreiber input slots interactive hits functions rules data stores slots 
task regarded accomplished termination condition hit satisfied 
point view interaction manager im uits description models possible sessions sequences basic interactions user interactive application 
due declarative hit representation uits boss determine particular task accomplished analyzing task structure data flows backward termination slots input slots interactive hits 
knowledge exploited various ways generation context sensitive help system 
shows hit representation oms toplevel task decomposition application analyst draw comfortably integrated development environment boss 
stated applicability termination conditions specified hit true false default 
number orders customers products oms equation output slot slot name slot type hit definition record parallel composition component hit defined 
toplevel task decomposition oms represented hit environment oms data bases input input output parameters hit oms 
oms supports independent subtasks working data bases oms indicated data flows 
user permanently informed amount orders introduce output slot value computed equation rule see accessing value attribute 
time attribute changes new order created value slot recomputed automatically incremental attribute evaluation 
change propagated automatically presentation manager pm interaction object displaying value 
component hits hit oms represent mutually independent subtasks order management system 
hit oms instantiated part current uits instances created oms structured record manner 
task see new orders added system invoking application function create order represented transaction rule 
equation rule see evaluated automatically satisfy constraints 
boss system coupling visual programming model interface design input slot orders create order order products customers get customer customer db new customer tree tree res number user transaction customers customer enum 
list list res create customer 
hit representation tasks hold time transaction triggered explicitely user 
input parameter pno create order users allowed enter products product data base 
accomplished introducing tree hit ensuring users enter values tree organized hierarchically tree products see 
input parameter entered list selection customer data base 
new customer users able create new customer account automatically required parameter create order 
behaviour encapsulated hit shown output parameter slot connected list hit result create customer transaction 
representing user interaction task space uits hit specification model designer friendly problem oriented way describe task level dynamics interactive application 
course practice uits richer structure oms 
complexity handled application analysts composing uits graphical visual programming manner reusable simple structured building blocks 
hits list tree denote interaction tasks appear uits ensure preconditions application functions 
part standard task library supports application analyst setting uits 
specification presentation standard interaction tasks belongs dimension presentation design 
presentation design hits model interface tools presentation design mean direct composition particular user interface display consists setting executable rules constructing presentations 
area model tools approaches presentation design pd siegfried schreiber ffl generation static interface layout knowledge available ffl specification presentation current system state shown boss follows second approach allows specifying context sensitive presentations depending data available run time data instances interactively constructed user adaptive presentations 
boss system presentation design means specifying presentation manager pm see maps current uits task level state logical structure current presentation layout structure built called interaction objects aio 
current presentation allow users interact current uits changing values input slot instances involves specification ffl application specific interaction objects necessary 
hit combines concepts modeling object structures evaluation way constraints directed equations graphical toolkits application specific objects interactive graphics described hit specification model 
ffl selection appropriate interaction objects user triggers transactions modifies values input slots values output slots displayed 
ffl composition selected interaction objects presentation visually reinforces logical structure 
input slot storing complex data instance interaction objects building presentation generated allow users edit instance arranged logical data structure 
current uits represented boss system consistent tree hit instances treated normal data instance hit 
presentation manager pm may specified hit specification model 
boss human factors experts identify common user interaction tasks browsing large object structures list tree editing data instances 
software ergonomic guidelines determining presentation tasks represented constructive formal manner set hits boss system 
regarded formal representation reusable ui style guide 
show hit specification model context presentation design regard example presentation manager pm may specified hit requests input parameter hit instance root current uits produces presentation built predefined aio buttons menus application specific interaction objects 
hit instance part current uits enabled input slot stands elementary interaction task edit possibly complex structured object 
hit see part definition defines generic presentations editing arbitrary objects 
consists couple alternative hits arranged decision tree structure structure object edited 
hit requests input parameters object instance edited objid optional label label produces presentation lay user edit objid 
composition activity presentation design involves deriving possibly complex layout constraints logical structures 
shows human factors expert working boss ide specification hit handles presentation editing object constructed record manner expressed applicability condition record type objid see 
component objid 
boss system coupling visual programming model interface design objid applicability condition simple type objid lay lay applicability condition composite type objid 
list components alternative lay label objid label objid label lay applicability condition enum type objid label objid lay applicability condition record type objid label objid label objid lay applicability condition alternative type objid 
hit representation decision tree structure presentation constructed recursively 
component presentations composed equation rule layout records performs example just horizontal alignment label name record component vertical alignment component presentations 
function nth comp yields th component record name 
window right side shows user interface automatically generated boss containing different presentations 
upper part human factors expert edits instance data structure customer see logical structure lower part shows presentation produced 
radio buttons editing component generated hit see instance enumeration type 
please note example consider information spatial constraints screen size user preferences influence presentation design 
possibilities determining presentations hit specification model allows find best solution employing techniques dynamic programming 
noninteractive alternative hit assigned cost function choose branch yielding lowest costs applicable branches 
specification refinement high level transformations parts ai uits model interactive application describe called logical structure user interface high level description user system 
quite lot degrees freedom determining concrete dialogue presentation characteristics interface supporting user interaction uits 
stated hit specification model provides means user interface designers role dialogue experts tailor behaviour user interfaces fine grained way specification refinement 
quite tedious task specification siegfried schreiber refinement hand high level design goals build interface certain class users expressed consistent manner means provided underlying specification model determining order parameters application function entered 
overcome drawback boss offers specification refinement component see automatic refinement underspecified models 
able model user interface construction tool boss ffl organize possible user interface properties independent design dimensions 
vector denotes properties particular interface 
ffl maintain knowledge mapping high level design goals vector 
ffl maintain transformations underlying specification model achieve desired property certain design dimension 
shows part currently implemented boss specification refinement component presentation disabled interactions disabled sensitive disabled visible interaction style user driven system driven function level interaction style entering input parameters execution ordered ordered 
determining user interface properties different levels dimensions denote properties ffl interaction style defines characteristics user interface global manner 
system driven interaction style guides novice user walking uits 
user driven interaction style expert users free exploring uits 
mutual independent tasks carried interleaving fashion 
ffl function level interaction style defines user interface characteristics fine grained level questions input parameters entered particular order 
user acknowledge explicitely execution function 
transformations cso currently selected object csc currently selected command offered uide belong dimension function level interaction style 
ffl presentation disabled interactions deals presentation level characteristics presentation style appropriate interactions disabled current system state 
visible visible sensitive user interactions 
look underlying transformations performed specification refinement component approximate interaction style system driven 
typically transformations performed include transformations structure uits 
shows example structural transformation rule 
trans 
boss system coupling visual programming model interface design sequence alternative record parallel composition termination slot transformation rule dataflow dependencies 
list list res termination condition defined res 
sel res list list res cancel task 
applicability condition sel termination condition defined res sel 

sample transformation rule approximate system driven behaviour formation rule may applied record hit rec dataflow dependencies components point view uits model part represents interaction task independent subtasks 
rule transforms sequential hit component list selection users select task want accomplish 
alternative hit ensures selection instance selected task part current uits 
hit termination condition augmented hit allows users terminate task 
fine grained level property system driven dimension interaction style mapped demand graph evaluation strategies known incremental attribute evaluation data flow machines 
outline system driven interaction behaviour approximated demand evaluation shows demand transaction rules interaction input slot message port interactive hit connected demand rule enabled connected currently required parameter position 
result transaction required input slot enabled required executing supplies parameter position flow enabling depicted 
user point view flow enabling means interactive application demands information user needed accomplish certain task system driven behaviour 
siegfried schreiber input slot demand transaction rule order enabling 
approximating system driven behaviour demand rules vector shown approximates high level design goal build interface user little semantic knowledge user low experience application domain 
refinements shown figures represent hci principle users guided system accomplishing task 
oms specification figures users accomplish subtasks interleaved fashion allowed enter required information arbitrary order 
experienced users appropriate system informs user available tasks user choose tasks demands step step information required accomplish task 
shows snapshots interactive session oms refined system driven style shown 
presentations shown automatically derived presentation manager pm current uits task level state user interface consecutive states 

snapshots system driven session oms oms provides independent tasks see structural refinement rule applied 
users state system driven session task want accomplish 
selecting generated menu layout representation list selection introduced 
boss system coupling visual programming model interface design structural refinement rule causes task enabled 
function level dialog style parameter create order requested see 
enables task provides alternatives indicating customer see 
example want take customer see causes corresponding list hit enabled 
presentation style enabled interactions visible user interface layout possible presentation task list appears see 
button labeled cancel task presentation list selection introduced refinement rule users terminate task 
users pushes cancel task oms state users select task want accomplish 
related semantic data model derive views representations user interface displays 
mike generate user interfaces description application actions parameters 
compared systems influence development boss boss allows exert control different aspects interactive application model increasing bandwith user interfaces generated 
enriches traditional layer uims architecture style layer describing mapping dialogue content style 
contrast boss offers integrated development graphical specification techniques 
employs different notations describing dialogue content presentation design rules 
uide humanoid joint mastermind project offer encompassing design model specification interactive application properties various tools offer support design time generating menus dialogue boxes run time animated help 
boss differs mastermind encompassing specification model represent parts user interface design model support semantic data models application adapted generation methods compiler construction produce efficient code representation user interaction task space techniques dynamic programming mainly presentation design 
boss determine dataflow analysis quite complex tasks accomplished current implementation boss ca lines code offer capabilities uide domain animated help 
adept provides task user oriented design model user interface specification generation 
boss differs adept encompassing specification model suited presentation design 
compared adept aspect data flow emphasized boss 
level uits description boss regarding degree abstraction task aim interface model level adept 
supported siemens corporate research development department system ergonomics interaction st sn 
werner schreiber bernhard bauer frank useful comments suggestions draft versions 
siegfried schreiber editors 
attribute grammars applications systems 
springer lncs 

der janus vom zur 

bass cockton unger 
ifip working group user interface model interactive system construction 
larson unger editors human computer interaction 
north holland 
bass coutaz 
developing software user interface addison wesley 
vanderdonckt 
architecture elements highly interactive business oriented applications bass unger editors human computer interaction proceedings springer lncs 
jourdan 
attribute grammars definitions systems bibliography springer 

logical layout structures documents 
computer physics communication 
foley kim kovacevic murray 
uide intelligent user interface design intelligent user interfaces 
addison wesley 
frank foley 
model interface design example interview proceedings uist acm symposium user interface software technology acm 
ganzinger 
von aus 
phd thesis technische universitat munchen 
hudson king 
generator direct manipulation office systems 
acm transactions information systems 
janssen ziegler 
generating user interfaces data models dialogue net specifications acm interchi proceedings acm 
wilson kelly markopoulos 
hacking model approach user interface design bcs hci conference 
cambridge university press 
kim foley 
providing high level control expert assistance user interface presentation design acm interchi proceedings acm 
larson 
interactive software tools building interactive user interfaces 
prentice hall 

dialogue design modified data modelling proceedings springer lncs 

boss system coupling visual programming model interface design luo szekely neches 
interface builders model interface tools acm interchi proceedings acm 
neches foley szekely sukaviriya luo kovacevic hudson 
knowledgeable environments shared design models intelligent user interfaces acm 
olsen 
mike menu interaction environment 
acm transactions graphics 
olsen 
programming language basis user interface managment 
acm chi proceedings 
acm 
osf motif style guide release open software foundation 
payne greene 
task action grammars model mental representation task languages human computer interaction 

architectural design information systems structured analysis 
information systems 
schreiber 
specification generation user interfaces boss system cypher editors proceedings east west international conference human computer interaction moscow 
human computer interaction selected papers conference springer lncs schreiber 
boss system tutorial technical report technische universitat munchen appear 
schreiber 
logik fur und denker ma forschung fur 
singh 
high level user interface management system 
acm chi proceedings 
acm 
sukaviriya foley griffith 
second generation user interface design environment model runtime architecture 
acm interchi proceedings acm 
sutcliffe mcdermott 
integrating methods human computer interface design structured sytems development int 
journal man machine studies 
szekely luo neches 
exploration design alternatives humanoid model user interface design acm chi proceedings 
acm 

sick auswertung von snelting editor workshop der implementierung von programmiersprachen darmstadt 
wiecha 
tool rapidly developing interactive applications acm transactions information systems 
