symbolic simulation acl approach strother moore department computer sciences university texas austin austin tx moore cs utexas edu 
executable formal specification allow engineers test simulate specified system concrete data system implemented 
gain acceptance just formal analogue standard practice building simulators conventional programming languages largely unexplored potentially useful step symbolic simulation execution formal specification data 
right interface need require additional training engineers tool 
allows tests collapsed 
furthermore working engineer abstractions notation design allowing team members speak clearly 
illustrate ideas formal specification simple computing machine acl 
sketch requirements interface call symbolic spreadsheet 
formal methods requires relatively high front costs create formal specification desired system component 
cost doing proofs relate formal specification implementation lower level model higher 
effort required construct mechanically checked proofs 
concerns formidable barriers adoption formal methods industry 
formal methods community recognize specification proof valuable recognize careful mathematical argument mechanically checked formal proof valuable 
carefully records analyzes design decisions bugs 
earlier process starts earlier bugs 
valid arguments justify called informal formal methods conventional mathematical techniques service hardware software design mechanized support 
doubt methods effective economical hands experts virtually mankind deep mathematics done mechanized support 
promise formal methods harness mathematical rigor precision abstraction help man woman cubicle 
focused tools 
working making tools smarter convenient 
includes better proof procedures better interfaces better tutorials introductory material comprehensive libraries previously formalized results 
moderate amount training tools possible lead engineers create formal design specification documents 
need opinion average engineer skills necessary 
important formal design documents useful wider audience write 
mechanism provided possibility formal specifications executable 
idea somewhat contrarian theorem proving formal methods communities tend favor abstraction attributes logic 
hardware design community executable specifications standard practice regards ubiquitous simulators written conventional programming languages specifications 
simulators play dual role 
allow engineers run design sample input example help debug requirements 
second source code may inspected clarify disambiguate informal design documents produced lead engineers 
formal specifications written executable logics pure lisp functional programming languages serve purposes encouraging somewhat specification style providing migration path proof 
evaluation simulation understood engineers formal specification requires little training logical notation constants 
radical suggestion formal specifications provide symbolic simulation tool 
course symbolic simulation symbolic evaluation new 
programmers earliest days symbolic evaluation program easier execution limited pencil methods 
symbolic evaluation played key role version boyer moore pure lisp theorem prover called simply evaluation 
select system combined path assertions counterexample generation linear arithmetic constraints produce extended program testing environment 
symbolic simulation capability engineer run design certain kinds data covering cases test 
close connection simulation symbolic simulation easy grasp naturally follows simulation may notice power 
tools properly packaged formal specification inspected analyzed people knowledge design issues applications 
beneficial effects 
bugs undesirable features design liable early 
second educate force raise expectations clarity abstraction 
par ticular engineers learn read specification notation lead engineers 
language influences think 
seeing ideas design rendered syntax helpful 
examples people generalize notation informally communicate reason design 
expectations raised sense engineers come value clarity abstraction formal specifications language familiar 
symbolic simulation tools important bridge current practice wide spread formal methods 
believe symbolic simulation tools widely available industry find ranks expected number engineers able exploit expressive power formal notation produce cleaner reliable designs 
furthermore believe clarity combined re usability previously formalized notions possible create new designs faster currently done 
greve points discusses symbolic simulator microprocessor 
gives specific examples actual design bugs engineers symbolic simulator 
rest particular formal logic theorem prover illustrate points just 
system acl 
acl stands computational logic applicative common lisp 
developed matt kaufmann successor boyer moore theorem prover nqthm 
main idea replace home grown pure lisp nqthm applicative common lisp formal models executed efficiently wider variety platforms 
symbolic simulation general technique probably provided virtually theorem proving system see example uses pvs provides automated term rewriting logical level symbolic simulation just simplification 
formalizing computing machines consider simple computing machine state program counter control stack suspended program counters memory status flag program rom 
formalize machine acl 
commonly approach described 
sketch formal model 
acl script corresponding results available www cs utexas edu moore publications script index html 
represent state machine tuple 
components state accessed functions named respectively pc stk mem halt code 
defined obvious way retrieve appropriate element linear list 
new states constructed making list components list pc stk mem halt code 
invariants guards maintained insure certain relationships hold components 
example mem list integers 
generally construct new states modifying fields old states common lisp macro write states 
example modify pc halt state components pc halt flag modify expression denotes list stk mem code 
note despite name modify destructively change state constructs new copy 
acl applicative language 
omit definition modify 
individual instructions isa level semantics defining functions appropriately modify current state machine 
example move instruction 
level abstraction example represent instructions lists move 
informally move instruction takes addresses moves contents second 
formalize semantics move defining function takes additional argument current state machine 
function returns state defun move modify pc pc pc mem put get mem mem obtained incrementing program counter changing memory described 
function defined instruction execute part machine fetch execute cycle defined case analysis opcode instruction 
defun execute ins op opcode ins ins ins case op move move add add jump jump call call ret ret fetch execute step defined composition suitable handling halt status flag 
defun step halt execute current instruction machine basic cyclic behavior defined defun sm zp sm step iterated step function 
steps state times 
name sm stands small machine 
acl execution engine model easily programmed applicative common lisp 
immediate consequence model executed 
supply explicit initial state number instructions execute sm executed common lisp host return final state 
evaluation test system specification 
show particular program sm language 
program named times computes product natural numbers repeated addition 
comments explain works 
times mem mem go add mem mem mem mem mem jump go ret return caller called naturals memory locations program leaves theta memory location clears location counting 
list constant shown denoted 
represents typical entry code component state 
consider explicit state 
call state ff 
st pc times stk nil mem halt nil code program counter pc ff pair containing symbol times indicating instruction th instruction times program code state 
stack component stk ff empty 
ff state memory locations containing respectively 
halt flag nil 
evaluate step ff acl get st pc times stk nil mem halt nil code instruction pc times program executed 
program counter incremented memory location cleared 
single stepping useful 
note expression sm ff run ff step 
run ff steps evaluate acl expression sm ff 
produces state st pc times stk nil mem halt code program counter points th instruction times 
observe location cleared location contains location contains 
halt flag set 
code contains list containing 
example simple execution 
example illustrates looping subroutine call 
suitable interface possible engineer trained formal methods familiar informal design documents sm machine formal specification tests design 
point illustrated acl demonstration accompanying dave hardin talk computer aided verification conference acl model alu integrated simulator written sm example small illustrate important point acl execution capability handle larger system designs 
typed gold definitions acl execution capability just common lisp 
discuss performance measures acl execution symbolic simulation sm examples 
discuss project bishop brock acl formalize motorola cap digital signal processor 
model similar described orders magnitude complex 
cap design follows harvard architecture separate program data memories 
design includes data control registers 
independently addressable data parameter memories 
data memories logically partitioned source destination memories sense memories may switched program control 
arithmetic unit includes multiplier accumulators adder array 
cap executes bit instruction word arithmetic units decoded bit low level control word 
instruction set includes overhead looping constructs automatic data scaling 
different registers involved determination program counter 
single instruction simultaneously modify registers 
practice instructions typical applications simultaneously modify dozen registers 
cap stage instruction pipeline contains pipeline hazards 
acl specification cap described simulation 
fact acl model executed times faster compiled spw signal processing workbench simulator accurately modeled bit processor cycle 
acl execution capability exploited amd 
part project verify certain floating point designs amd tm art amd wrote mechanical translator amd rtl language essentially subset verilog acl 
translator produce acl models floating point circuits studied 
investing time try prove models correct amd managers insisted translator production rtl simulator 
acl rtl models executed test vectors return results 
successful test deemed worthwhile try prove acl models correct 
evidence harder gather formal models executable 
noteworthy test vectors failed expose errors designs errors proof 
acl currently experiment rockwell collins construct executable specification world silicon java virtual machine 
acl theorem proving engine example clear definition sm just lisp program may appropriate argue specification 
acl prove simple theorem specification 
sm implies equal sm sm sm theorem shows sm runs compose 
theorem proved automatically acl induction followed simplification base case induction step axioms definitions involved 
takes acl seconds find proof 
user acl help theorem prover giving hints 
example proof takes long induction step system unnecessarily case splits instruction executed step 
obvious looks acl output proof sees case instruction opcode 
proof take longer definition step defined opcodes 
definition step irrelevant theorem 
system know user may may 
user gives system hint disable step means try find proof definition step system succeeds finding proof takes seconds 
just example abstraction proof process 
details step irrelevant 
exploiting knowledge user dramatically speed proofs importantly user lead acl proofs find 
common way user give hints system build rewrite rules newly defined concepts 
user formulates rules theorems system prove 
proved system interprets theorems rules uses automatically simplification 
example sm theorem implicitly instructs system rewrite expressions form sm form sm sm 
effective extending rule base acl user understand system interprets previously proved theorems rules 
user collect definitions theorems forms hints advice books 
books certified included acl session 
effect configuring acl simplifier proof techniques specified book 
multiple books included 
interaction independently developed rules considered hooks system help authors codify strategies 
takes lot expertise develop books 
trying teach new class 
lot material organized ways done obvious effective organizations available considered 
describe book sm 
show lead acl proof theorem times program 
times correct implies 
len mem equal get mem equal get mem equal current instruction call times equal assoc eq times code halt equal sm times clock modify pc pc pc mem put put mem theorem read follows 
consider state memory containing items definition integers 
th st respectively suppose suppose current instruction state points instruction call times times defined previously exhibited 
paraphrase long hypothesis saying state poised execute times natural numbers theorem tells state look run certain number steps 
number explicitly computed times clock function resulting state modification starting obtained incrementing program counter depositing location depositing theta location 
takes acl seconds prove theorem 
designed books proving theorems requires certain amount training book approach proof high level interact acl 
explain techniques 
acl achieve hands expert illustrated david 
acl check proofs correctness amd hardware floating point addition subtraction multiplication division square root 
translator mentioned translated amd hdl descriptions rtl level acl functions 
developed books containing thousands lemmas floatingpoint arithmetic 
books checked proofs compliance hardware ieee floating point standard 
bugs corrected 
acl symbolic simulator formal specification accessible engineers wishing formal proofs 
answer drive symbolic simulator design 
illustrate sm model 
consider state st pc times stk nil mem list halt nil code state ff memory locations unspecified content 
variables denote contents assume integers 
fi denote state 
recall times program times mem mem go add mem mem mem mem mem jump go ret return caller result start simulation fi run steps 
assume natural numbers positive 
answer obvious steps location contains gamma location contains addition program counter times instruction jump back 
problem posed conjecture acl implies ints 
equal sm fi simple variable symbol 
note occurrence conjecture right hand side 
conjecture possibly theorem circumstances course hypotheses contradictory 
attempt prove acl mentioned book reduces goal proving st pc times stk nil mem list halt nil code rules book configure acl simplifier symbolic simulator machine code specification 
clear interface required hide simplification process user 
constructed interface 
purposes imagine 
call symbolic spreadsheet 
name suggests imagine collection boxes containing data 
boxes linked operations boxes representing input representing output 
conventional spreadsheets data symbolic links connecting boxes formally defined logical functions processing done spreadsheet symbolic simplification 
familiar notation ought possible arithmetic expressions 
imagine able collect boxes larger structures states represented hierarchy boxes spreadsheet 
obviously possible hide data display memory box contents locations 
furthermore possible multiple states screen compare different states 
spreadsheet permit simple configuration user fills form describe initial symbolic state fi sees result stepping state form 
view difficulty interface simplification 
argue acl simplifier configured job 
continue results formal acl terms displayed imagined spreadsheet 
start fi run steps getting back top loop 
see decremented twice see sum location 
course happens know exceeds 
proof attempt produces goal prove unknown equal necessary phrase problem bogus theorem proving challenge 
possible invoke acl simplifier directly 
st pc times stk nil mem list halt nil code illustrates requirement spreadsheet 
need assumptions box contains assumptions variables 
menu driven limit assumptions supported underlying rules 
happens forget say exceeds 
suppose just positive 
result way case split 
case additional hypothesis exceeds goal state shown 
additional hypothesis goal state st pc times stk nil mem list halt code program halted 
imagined spreadsheet execution branching symbolic computation results copies output state displayed assumptions box 
states stacked visual arrangement immediately alert user fact computation branched 
extensibility symbolic simulator far symbolic simulator run primitive instructions 
worthwhile point extensible 
course requires expert extend extension done adding new theorems database driving acl 
suppose proves times correct stated 
symbolic simulator run calls times code 
example run length times clock starting symbolic state st pc main stk nil mem list halt nil code main call times add produces state st pc main stk nil mem list halt nil code main call times add correct 
main program calls times multiplying times leaving result location 
main program adds location location subtracts 
final value location ought theta gamma 
simulator produced expected results regardless values variables 
note simulator run shows location cleared code sequence locations unchanged 
example expression specifying length run times clock 
noted convenient maintain isolation arithmetic expressions denoting run lengths expressions user control proof decomposition 
interface symbolic simulator mitigate somewhat translating arithmetic operators run length box clock operator counterparts 
user understand formulate clock expressions decompose execution 
example equivalent expression times clock different effect simulator 
performance fast acl symbolic simulation 
fast acl rewriter 
put perspective start measuring performance acl evaluation 
measurements conducted small machine model sm carried mhz sun microsystems ultra mb memory running acl version built gnu common lisp 
acl applicative common lisp provided common lisp primitives applied intended domains 
example common lisp function car intended applied nil common lisp function intended applied numbers 
common lisp implementations required check runtime arguments suitable user responsibility 
implementations efficient safe 
acl functions hand axiomatized total 
axioms car returns nil applied outside intended domain treats arguments 
notion intended domain formalized acl guards arbitrary acl formulas specify intended relationships input variables 
proving certain mechanically generated guard conjectures acl guarantee acl function common lisp compliant gold means execution arguments satisfying guard safe 
see details 
acl function known common lisp compliant evaluated arguments satisfying guard direct common lisp execution 
practice means execute binary code compiled function definition 
hand acl function known compliant actual arguments satisfy guard evaluation performed purpose built acl interpreter completes common lisp primitives accordance axioms 
practice means run binary code compiled translation function definition function symbols mapped completed counterparts runtime guard checks 
talk execution speed acl functions specify mean speed possibly code compliant code 
provide measures 
definition sm common lisp compliant provided guard sm requires formed state natural number 
exhibit guards previously mentioned script available web 
guards optional possible strip obtain possibly non compliant code 
provide guards prove compliance 
supplying guards functions sm system requires defining predicates guards notions syntactically formed program counters stacks memories instructions programs systems programs supplying guard function sm system 
addition additional lemmas proved order lead acl proof sm subroutines common lisp compliant 
took hours invent appropriate guards 
guards small machine system admitted syntax checking plus termination proofs second 
verifying guards requires seconds additional proof 
fast acl execute sm 
expression sm st pc main stk nil mem list halt nil code list main call times ret guards function imply guards subfunctions definition including recursive calls 
general may hard finding inductive invariants practice difficult 
difficulty choosing guards stylistic merely insure common lisp primitives properly strengthen guard formulas capture correctness specification 
requires sm execute instructions multiply times repeated additions leaving memory address 
number just times clock 
sm regarded non compliant computation takes seconds 
sm regarded compliant takes seconds 
illustrates value guard verification execution speed importance 
sm instruction interpreter convenient translate performance small machine instructions second 
non compliant execution proceeds small machine instructions second example 
compliant execution proceeds small machine instructions second example 
sm represents memory linear list values speed degrades memory size increases 
particular experiment uses small memory writes target locations reducing copying time 
realistic tests comparable acl model greve hardin measured simulation speeds instructions second 
model written processor provided instructions second 
authors describe modifications acl allowed achieve speeds instructions second 
techniques impose burden user insure fidelity axioms highly recommend wishing acl simulate formal processor models 
consider symbolic simulation 
difference compliant non compliant models computation done acl rewrite engine 
expression chosen symbolically simulate sm st pc main stk nil mem list halt nil code list main call times ret context variables assumed integral 
obviously simplifies st pc main stk nil mem list halt code list main call times ret requires symbolic simulation small machine steps 
takes acl seconds symbolically simulate expression 
translates symbolic instructions second 
symbolic simulation just simplification arbitrary amount search lemma data base involved symbolic simulation 
expression produces addition final state shown list rules 
poses original symbolic simulation problem time gives acl hint rules listed time required drops seconds 
remarkably discounts time required track rules time drops seconds hint seconds hint 
performance translates symbolic instructions second 
performance symbolic simulation engine dependent data base rules available 
addition rule tracking observation illustrates extraneous aspects theorem prover may affect performance 
ask rewrites involved symbolic simulation 
rewrite 
call program simplifier replace term term 
attempt apply conditional rewrite rule 
successful application rule 
application rule path leads final result 
interpretation count rewrite call acl rewriter type facility term call return changed term 
interpretation excludes built rules reduction equal difference rule just tried meaning try match left hand side rule try relieve hypotheses meaning try successful right hand side rule substituted target 
brings light fact majority rewrites usually happen non productive branches branches proof search lead success ultimately abandoned 
hint prunes unsuccessful branches 
rewrites involved symbolic evaluation term 
consider symbolic simulation hint 
approximately calls rewriting routines occur 
approximately rules tried applied 
rule applications involved final result 
provide hint calls occur 
approximately rules tried virtually applied final result 
statistics somewhat rough give idea amount symbolic manipulation involved symbolic simulation 
useful map number rewrites symbolic instruction simulated 
recall instructions simulated experiment 
hint try rules instruction apply need 
example hint limits search perfectly 
noted long symbolic simulation runs generally impossible presence branching answer state grows exponentially 
timed long run amortize cost general theorem prover entrance demonstrate appropriate contexts acl runs 
drawn appropriately re read 
symbolic simulator great design team part accessible people team verification tool 
furthermore leads naturally verification represents technology driver 
illustrated simulator constructed acl 
simple nature problem tackled may readers think unrealistic proposal designs industrial scale 
acl successfully handle large problems 
motorola cap brock acl exactly fashion described producing states required megabytes text print fully 
acl simplifier task 
brock problems glean information large symbolic states 
spreadsheet help render states 
subtasks remain 
construct interface invites engineer 
product successful 
acl public domain represents heart tool 
second subtask construct books necessary configure simulator particular industrial model 
place start current heavy duty acl users proving theorems large systems 
existing books contain bulk required rules simply books designed proofs codify simplification symbolic states 
acknowledgments ideas kicking nqthm acl user communities years 
symbolic simulation capability basically step acl project aimed code proofs ideas harness simplifier capacity developed especially participated cli short stack extensions including bill bob boyer bishop brock art warren hunt matt kaufmann matt bill young 
am especially indebted warren hunt bishop brock current view symbolic spreadsheet 
am indebted dave greve dave hardin matt integrating acl models processor design process 

hunt moore young 
special issue system verification journal automated reasoning 

boyer moore proving theorems pure lisp jacm pp 


boyer levitt select formal system testing debugging programs proceedings international conference reliable software ieee catalogue number cho csr pp 


boyer moore 
mechanized formal reasoning programs computing machines 
ed automated reasoning applications essays honor larry wos mit press 

boyer moore 
computational logic handbook second edition 
academic press london 

brock kaufmann moore 
acl theorems commercial microprocessors 
proceedings formal methods computer aided design fmcad srivas eds springer verlag november pp 


crow owre rushby shankar srivas 
tutorial pvs workshop industrial strength formal specification techniques boca raton fl april see www csl sri com pvs html 

harrison 
architecture complex arithmetic processor communication signal processing spie proceedings international symposium optics imaging instrumentation advanced signal processing algorithms architectures implementations july pp 


greve symbolic simulation microprocessor technical report advanced technology center rockwell collins avionics communications cedar ia april appearing volume proceedings fmcad 

greve hardin efficient simulation simple formal processor model technical report advanced technology center rockwell collins avionics communications cedar ia april 

greve stack java back step electronic engineering times jan pp 


hardin greve transforming theorem prover digital design tool concept car road vehicle hu vardi eds 
computed aided verification th international conference cav springer verlag lncs pp 


kaufmann 
acl support verification projects 
th international conference automated deduction cade appear 

kaufmann moore 
industrial strength theorem prover logic common lisp 
ieee transactions software engineering april pp 


moore computational logic structure sharing proof program properties ph 
dissertation university edinburgh scotland 


mechanically checked proof ieee compliance floating point multiplication division square root algorithms amd tm processor url www onr com user russ david div sqrt html 

wolfe 
java specific mpu rolls electronic engineering times sept pp 

article processed macro package llncs style 
