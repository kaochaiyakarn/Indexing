time management high level architecture richard fujimoto college computing georgia institute technology atlanta ga fujimoto cc gatech edu keywords architecture interoperability simulation time synchronization time management required simulations ensure temporal aspects system investigation correctly reproduced simulation model 
describes time management services defined high level architecture 
need time management services discussed design rationales lead current definition hla time management services 
services described highlighting information flow federates runtime infrastructure rti software order efficiently implement time management algorithms 

defense modeling simulation office high level architecture hla initiative addressing continuing need interoperability new existing simulations department defense 
hla builds generalizes results distributed interactive simulation dis effort dis steering committee related activities aggregate level simulation protocol wilson 
hla activity began march 
approved secretary defense acquisition technology common technical architecture modeling simulation department defense september 
time writing hla undergoing standardization ieee 
hla consists rules define basic principles underlying hla object model template omt provides standard format describing information common interest simulator federate interface specification spec defines interface run time infrastructure rti provides means simulators coordinate execution exchange information 
hla simulation typically consists collection simulators vehicle simulators interconnected rti 
simulator referred federate 
collection federates interacting rti referred federation 
rti viewed special purpose distributed operating system provides set services interconnect simulations 
spec defines set services invoked simulations run time infrastructure federation execution 
hla runtime services fall categories federation management 
includes services create delete federation executions allow simulations join resign existing federations pause checkpoint resume execution 
declaration management 
services provide means simulations establish intent publish object attributes interactions subscribe updates interactions produced simulations 
object management 
services allow simulations create delete object instances produce receive individual attribute updates interactions 
ownership management 
services enable transfer ownership object attributes right modify value attributes federation execution 
time management 
services coordinate advancement logical time relationship wallclock time federation execution 
data distribution management 
services allow large federations improve efficiency data distribution mechanisms reducing amount data sent federates 
article concerned time management services message ordering aspects object management services 
fundamental concepts design rationales underlying time management services discussed 
followed discussion principal time management services perspective federate focusing 
additional aspects time management services discussed focusing information functionality provided interface rti realize efficient implementation time management algorithms support certain capabilities optimistic event processing 

time common points confusion discussing time management concerns meant time 
different types time important distributed simulations physical time refers time physical system system modeled simulation 
example simulation attack pearl harbor physical time extend midnight clock afternoon december 
simulation time refers simulator representation time 
pearl harbor simulation simulation time represented double precision floating point value hold values interval unit simulation time corresponds hour physical time 
wallclock time refers time simulator executed 
example pearl harbor simulator require half hours execute 
executed afternoon september wallclock time extends day 
important keep different notions time distinct discussing time management 
primarily concerned simulation time 
example event time stamps discussed 
time stamps refer points simulation time 
hla simulation time represented points global federation time axis 
instant execution federate specific point axis referred federate time 
example federate time indicate federate simulated hours battle 
cases advances simulation time paced synchrony advances wallclock time 
example training simulation humans embedded computer generated virtual environment paced environment appears realistic 
simulations designed operate fashion called real time simulations 
variation approach called scaled real time simulations simulation time paced run agreed factor relative wallclock time simulator may run twice speed wallclock time 
case durations simulation time linear relationship durations wallclock time dt dw dw duration wallclock time scale factor dt corresponding duration simulation time 
hand fast possible simulations attempts complete simulation quickly possible execution paced direct relationship wallclock time 
example simulator may run faster wallclock time early execution slower wallclock time parts execution 
analytic simulations fall category 
hla intended support real time fast possible simulators simulation executions 

need time management 
glance may clear need time management 
just hook simulators send messages simulator performs action interest 
lead problems seen momentarily 
consider real time simulation consisting simulators federates federate modeling tank modeling target third modeling observers 
suppose tank federate fires target destroys observers monitor exchange 
illustrates execution federation interchange 
tank federate generates message indicating fired 
message received target federate models target destroyed generates message indicating fact 
observer federate receives messages message containing tank firing event delayed network causing target destroyed event received 
observer sees target destroyed fired 
basic problem stems fact simulated world may correctly reproduce temporal aspects real world modeling 
example delays real world depend quantities speed light 
simulated world delays depend quantities having simulation model delay encountered message travels network 
lead anomalies cause appearing happen effect 
precautions taken possible different simulators receive messages set events different orders 
second observer added federation depicted may receive messages fire target destroyed events correct order 
behavior simulator depends ordering events lead inconsistencies simulation execution 
problem repeated executions simulation initial state external inputs may produce entirely different results 
reason order messages delivered federate depends properties communication delays network may change execution 
important repeated executions simulation yield results 
example defense simulations results produced simulator may acquisition decisions 
simulation results may audited general accounting office may require simulations repeated verify authenticity 
scenario illustrating need time management 
observer simulator receives target destroyed message fire message 
wallclock time simulator tank simulator target fire event target destroyed event simulator observer event message importance correctly reproducing temporal relationships simulation model depends simulation application 
important analytic simulations impossible event ordering may anticipated model developers cause simulator fail 
variations event timings network latency may introduce bias statistics computed simulation 
hand training application non causal ordering events shown may perceptible human participants occur rapid succession 
perceptible may compromise training objectives exercise may happen infrequently tolerated 
computational overheads necessary prevent anomalies preclude real time performance may little alternative accept may occur design 
hla case simulation applications temporal anomalies eliminated assigning time stamp simulation time event ensuring events delivered federate time stamp order 
cause assigned smaller time stamp effect guarantees causal relationships shown correctly reproduced simulation model 
particular rti delay delivery target destroyed event fire event smaller time stamp delivered 
addition time management services ensure federate receive event past event time stamp current federate time 
time stamp order constraint events delivered federate past relaxed federates requiring capability 

design rationale key goal hla foster interoperability reuse simulations 
facilitate reuse time management services sufficiently flexible accommodate wide variety internal time management mechanisms commonly defense simulations today 
support interoperability time management services allow simulations different internal time management mechanisms combined single federation execution 
important design principal foster interoperability time management transparency 
means local time management mechanism federate visible federates 
example federate event oriented time flow mechanism need know federate interacting event oriented time stepped mechanism 
federates explicitly indicate rti local time management mechanism 
principal types time management mechanisms defense simulations enumerated 
cover broad spectrum applications including analysis training test evaluation 
requirements simulations drove design hla time management services 
event driven 
federate processes local events generated federates time stamp order federate time typically advances time stamp event processed 
process oriented simulation constructs modern simulation languages included category typically built top event execution mechanism 
time stepped 
time advance federate fixed duration simulation time called time step 
simulator advance time step simulation activities associated current time step completed 
activity scanning time flow mechanism discrete event simulation essentially variation time stepped mechanism 
parallel discrete event simulation 
federates executing multiprocessor systems synchronized internally conservative optimistic synchronization protocol 
conservative protocol logical process federate process events time stamp order 
logical processes may wait condition guaranteed 
optimistic synchronization protocols allow logical processes process events time stamp order provide means recover errors typically rollback mechanism 
wallclock time driven 
referring simulators derive current simulation time directly wallclock time described earlier 
contract simulators time flow mechanisms described pace execution advance synchrony wallclock time 
wallclock time driven federates necessarily require events processed time stamp order 
simulations usually hard soft real time constraints interactions humans physical devices occur timely fashion 
time management federation realized jointly federates rti 
key question functionality implemented rti realized individual federates 
event driven federates process internal events generated federates time stamp order federate effect merge stream events generated federates local events produce stream time stamp ordered events 
precautions taken ensure federate receive events past events time stamp simulator current federate time 
tasks accomplished hla time management services time stamp order tso message delivery service protocol federates explicitly request advances federate time rti provides request guarantee events arrive containing smaller time stamp 
time stepped federates able determine events current time step produced federates received 
complete computation current time step advance time step 
requirement satisfied hla variation protocol described advancing federate time 
parallel discrete event simulations conservative synchronization similar requirements event driven federates 
modest amount additional functionality required support parallel simulators optimistic time management 
said 
time management wallclock time commonly virtual simulators training vehicle simulators hardware loop applications 
simulators typically entirely different approach time management described 
commonly mechanisms include clock synchronization algorithms required ensure hardware clocks generating wallclock time values different possibly geographically distributed processors properly synchronized 
needed hardware clocks different computers drift relative 
lead serious problems distributed simulation differences large 
real time scheduling guarantee computations completed certain deadlines order ensure timely interactions hardware devices human participants 
task deadlines schedule computations deadlines met 
time compensation take account communication latency 
example suppose simulator moving vehicle generates message indicating current position speed direction motion 
message received milliseconds destination extrapolate current position vehicle dead reckoning techniques order estimate vehicle position message received 
hla mechanisms implemented federate 
message ordering time stamping requirements largely independent goals federation simulated specifics concerning mechanism highly dependent federation objectives details models 
example hardware clocks closely synchronized hardware inthe loop applications compared interactive training simulations 
scheduling algorithms require detailed information concerning computations performed federate suited implementation rti 
time compensation techniques require information concerning semantics simulated 
information available rti 
reason hla time management services provide minimalist approach addressing time management concerns applications 
principal requirements applications respect rti minimal predictable communication latency minimal computational communication overhead imposed rti 
hla provide basic communication services messages delivered minimal latency little additional functionality time management 
particular overheads associated realizing time stamp order control time advances eliminated services 
federate time refers current simulation time federate 
federates send receive tso messages federate time referred logical time distinguish federates federate time derived directly wallclock time 
instant execution federation different federates may different logical time values 

logical view time management hla 

time management services logical view time management component hla illustrated federate local time event management mechanism pace execution wallclock time needed federate specific techniques time compensation wallclock time synchronized processors logical time runtime infrastructure rti state updates interactions logical time advance requests receive order messages time stamp order messages fifo queue tso queue 
services include key components time stamp order delivery service protocol simulations advance logical time 
message order time stamps incoming messages categorized receive order ro time stamp ordered tso 
receive ordered messages simply placed queue arrive immediately eligible delivery federate 
ordering messages arbitrary 
tso messages assigned time stamp federate generating message delivered receiving federate order non decreasing time stamps 
incoming tso messages placed queue rti eligible delivery rti guarantee tso messages destined federate containing smaller time stamp arrive federates 
ensure property rti compute lower bound time stamp messages may receive federates 
said 
rti may able deliver tso messages immediately receipt tso messages may incur higher message latency ro messages 
federates may send receive tso ro messages 
messages containing identical time stamps referred simultaneous events delivered federate arbitrary order 
important order messages particular fashion 
address issue federate receiving messages buffer order messages 
support rti provides means specifying federate received simultaneous events time stamp value 
alternatively federates may include tie breaking fields message time stamp order simultaneous events 
requires federation specification format meaning time stamp field logical time values duration 
support time values specified federation data type 
allows time representation tailored meet requirements different federations 
addition specifying time stamp format documented object model template federation specify certain operators comparison time stamp values 
capability enables hla federations utilize techniques described mehl deterministically order events facilitate repeatable executions 
receive ordered messages may optionally contain time stamp value 
case time stamp value simply passed uninterpreted rti destination federate 
advancing logical time second portion time management component hla provides mechanism advance simulation time federate 
mentioned earlier rti guarantees federate receive tso message time stamp current logical time 
realize capability federates autonomously advance specification representation time data type allowing time stamps receive ordered messages added interface specification late 
logical time 
federates explicitly request logical time advanced advances take place rti explicitly 
protocol advancing logical time central hla time management services 
time management cycle consists steps 
federate invokes time management service request logical time advance 
rti delivers number possibly zero messages federate 
message delivered federate rti invoking federate defined procedure reflect attribute values deliver new values object attributes receive interactions deliver interaction events 
rti completes cycle invoking federate defined procedure called time advance indicate federate logical time advanced 
principal mechanisms federate request logical time advanced time advance request tar event request ner services 
tar suited federates internally time stepped mechanism ner preferred primitive event driven federates 
restriction concerning federates invoke primitive 
federate exclusively ner tar calls 
time management services defined follows time advance request federate invokes service request logical time advanced ro messages rti internal queues tso messages time stamp equal delivered federate service invoked 
additional tso messages time stamp equal forthcoming generated federate rti calls federate time advance procedure parameter indicate federate logical time advanced event request event driven federate typically invoke service completed simulation activity current logical time ready advance new time 
parameter specified ner request indicates logical time federate advance events federates containing smaller time stamp 
typically time stamp event federate local set pending events 
invoking service rti deliver ro messages internal queue 
tso messages time stamp equal received rti invokes federates time advance procedure indicating logical time advanced rti deliver smallest tso message destined federate time stamp time advance parameter 
case federate logical time advanced 
current time federate rti simulation completed main 
time event pes time event pes main true ner return tick main true time event pes main tick process events pes time tick 
tick rav store event pes rav return tick return main tick store event pes tick 
tick timeadvancegrant timeadvancegrant tag false false tag return tick return main time event main process events pes 
example event driven federate 
sketch code example 
pes denotes internal pending event set federate 
black portion represents code exists original simulator 
colored code represents portions added interface simulator rti 
sample execution wallclock time advances top bottom 
rav denotes code tag denotes code timeadvancegrant main denotes code main federate event scheduling loop shown 
example code event driven federate sketched 
example assumes single threaded implementation rti realized library compiled code federate 
existing implementations rti operate fashion 
approach key question concerns execution scheduled rti federate 
problem solved rti procedure called tick called federate turn cpu rti allow perform operations 
specifically delivery messages time advance implemented calls rti federate tick procedure 
illustrates execution sequence time advance cycle code shown 
federate invokes rti ner service request delivery tso messages advance logical time time stamp local event 
ner called federate sets flag indicating waiting ner cycle complete calls tick turn cpu rti 
example event produced federate time stamp event federate local pending event set pes 
tick procedure calls federate procedure deliver event federate 
event simply placed pes locally generated events 
done tick returns control federate 
flag true federate call tick request additional events time advance 
time rti determines events time stamp event just delivered forthcoming federates 
rti issues calling federate timeadvancegrant procedure 
procedure sets federate flag false returns 
tick returns federate advances local clock variable processes events repeats cycle 

interface issues time stamp ordering primitives advance time form central components hla time management architecture 
interface designed rti provided essential information necessary realize efficient implementations time management primitives time rti implementers constrained particular synchronization protocol 
particular interface represents kind contract federate rti concerning time stamp messages federate generate execution 
additional primitives provided support federates executing parallel processors optimistic synchronization protocols 
aspects time management interface discussed 
computation key implementing time management services rti compute quantity called lower bound time stamp federate 
value computed federate lower bound time stamp messages may received destined federate execution 
key tasks rti perform ensure tso messages delivered federate time stamp order ensure message delivered federate time stamp smaller current logical time 
computed rti deliver tso messages containing time stamp rti prevents federate advancing logical time guarantee federate receive messages past 
federate federates potential message lookahead potential message lookahead 
snapshot federation showing unprocessed events time stamps 
smallest time stamped event federation time event rti deliver lookahead 
federate time lookahead darkened events time stamp delivered 
example shows snapshot federation execution containing federates time 
box represents event coordinate position event indicates time stamp destination federate 
seen events containing time stamps sent federate suppose computed 
means time stamp event delivered federate time stamp event possible federate receive event time stamp 
similarly rti advance logical time federate leave possibility federate receive tso message past 
compute rti consider smallest time stamp tso message federate generate current logical time federate bound federate generate tso message past time stamps messages rti interconnection network 
algorithms computing scope discussion 
interested readers referred fujimoto 
federate federate federate federation time time constrained time regulating federates hla federation may include federates time advance time stamp order delivery services analytic simulations dis style training simulations 
environment rti determine federates participate computation require results computation 
hla federate contains boolean flags indicate rti status respect computations time constrained time regulating flags 
time regulating federate able generate tso messages considered computing values 
time constrained federate may receive tso messages requires result computations 
hla time management services provide primitives federates turn constrained regulating flags 
federate regulating constrained flag set sends receives tso message rti convert message ro message 
federates regulating constrained flag set send receive tso ro messages 
computations require certain amount computational communication resources federates normally set flags specific requirements operate time management services 
lookahead consider federation depicted 
assume federates constrained regulating flags set send receive tso messages 
suppose federate logical time processing smallest time stamped event federation 
federate generate tso message timestamp federates 
implies federates advance logical time snapshot depicted federates remain idle federate advanced 
needless say undesirable situation 
constraint called lookahead provides solution problem 
suppose mandate simulation may schedule new event timestamp federate current time plus say 
new event generated federate time stamp 
allow federates advance logical time shaded events time stamp equal delivered federates processed 
value example referred lookahead federate 
federate able look ahead time units predict events generate schedule events early 
lookahead may general difficult incorporate certain classes simulations important simulations requiring guaranteed message ordering services achieve acceptable performance 
demonstrate fujimoto lookahead dramatic effect federation performance 
lookahead clearly intimately related details simulation model determined automatically rti 
examples lookahead may derived described 
physical limitations concerning quickly federate react external event 
suppose minimum amount time tank respond operator command fire milliseconds 
means simulation guarantee schedule results new operator actions milliseconds providing lookahead amount 
physical limitations concerning quickly simulation affect second simulation 
suppose tanks miles apart maximum speed projectile fired tank 
constraints place lower bound time elapse tank affect second 
events projectile exploding second tank scheduled providing degree lookahead 
tolerance temporal inaccuracies 
suppose simulation produces event time assigning time stamp second impact accuracy simulation results 
simulation may schedule events second providing lookahead amount 
time stepped simulations time stepped simulation lookahead normally size time step 
simulation schedule events time step current time step 
non preemptive behavior 
suppose tank moving north miles hour federation model cause change events produced tank minutes 
events scheduled immediately resulting lookahead minutes 
lookahead change dynamically simulation 
lookahead instantaneously reduced 
instant lookahead indicates rti federate generate event timestamp ordering timestamp federate current logical time 
lookahead reduced units time federate advance units changed lookahead take effect events timestamp produced 
hla single lookahead value declared federate 
value may change runtime reductions lookahead take effect immediately 
zero lookahead simultaneous events federate receives time advance simulation time result invoking event request time advance request service rti guarantees federate received events time stamp equal useful guarantee means federate order events time stamp process fear receiving additional events containing time stamp 
guarantee kept federates lookahead value zero 
federate received time advance logical time generate new event time stamp equal turn result second event time stamp equal sent back original federate 
early versions time management services circumvented problem requiring federates strictly positive lookahead values 
hla prototyping phase apparent prohibiting zero lookahead values restrictive 
support zero lookahead federates giving property federates guarantee received events time stamp events ordered deterministic fashion new services added 
services called event request available time advance request available tara 
tara similar ner tar important aspect time advance logical time issued rti response tara service call rti guarantee federate received messages time stamp exactly equal federate able generate new messages time stamp equal zero lookahead messages 
contrast federate receives time advance time result ner tar call federate prohibited sending messages time stamp exactly equal course federate lookahead zero 
approach allows federates generate zero lookahead messages gives federate ability determine received messages time stamp equal current logical time 
guarantees time stamp outgoing messages consider snap shot shown assume federate lookahead value zero 
suppose federate event driven single local event shown time stamp 
federates blocked call ner time parameter 
suppose federate completes processing time stamp event calls ner 
constraint time stamp new messages time stamp greater equal federate current time plus lookahead rti preclude generation new messages time stamp value 
rti issue time advance federate simulation deadlocked 
solution problem considering operation sequential event oriented simulation program 
simulator advance time stamp event list pending events processing event 
simulator guarantee instant completed processing event new events generated time stamp time stamp event event list 
unfortunately guarantee distributed simulation 
consider federate 
smallest time stamp event snapshot destined federate 
prevent federate generating new event federate time stamp course processing event 
federate advance logical time 
federate uses event driven time flow mechanism say smallest time stamp unprocessed event entire federation guaranteed smallest time stamp event 
fact enable event time advance logical time issued federate breaking deadlock 
logic included guarantees federates rti concerning time stamp events federate generate 
pending ner tar tara refers invocation service time advance issued 
federate generate new messages time stamp federate current logical time plus lookahead 
federate reached current logical time ner tar service federate prohibited generating new message time stamp equal current time lookahead zero 
federate pending ner time parameter guarantees new messages generates time stamp greater equal plus federate lookahead strictly greater federate lookahead zero provided additional tso messages time stamp delivered federate 
rti deliver new message federate time stamp guarantee declared null void 
federate pending call guarantee federate may generate messages time stamp equal lookahead zero 
federate pending tar service call time parameter federate unconditionally guarantees new messages generates time stamp greater equal plus federate lookahead strictly greater federate lookahead zero regardless new messages delivered rti 
similar guarantee federate pending tara call federate generate new messages time stamp lookahead zero 
rules form contract federate rti 
contract important enables rti determine minimum time stamp new message federate produce essential computing values 
optimistic event processing discussion far focused entirely called conservative synchronization techniques avoid possibility federate processing events time stamp order 
known approach synchronization called optimistic technique allow messages processed time stamp order mechanism recover 
jefferson time warp mechanism known optimistic synchronization protocol jefferson 
hla supports optimistic federates maintaining time management transparency 
specifically hla time management services require federates support rollback recovery capability federate optimistic event processing 
envisioned federations may include optimistic conservative federates single execution 
conservative federates needing desiring utilize optimistic processing techniques may completely ignore optimistic time management services ill effects 
important goal optimistic time management services enable optimistic execution collection optimistic federates 
simple solutions requiring optimistic federate send messages guarantee canceled undesirable fully exploit potential offered optimistic execution 
federate executing parallel processor time warp protocol allow simulation events processed possible event containing smaller time stamp arrive possibly different federate 
event arrives event computations rolled back 
realizing rollback means rolling back state simulation process receiving late event canceling new events scheduled rolled back computation 
canceled event processed destination process process rolled back possibly generating additional event cancellations 
recursively applying procedure eventually erase effects incorrect computation 
support style execution capabilities required federates able receive tso messages rti guarantee smaller time stamped messages received rti guarantee message ordering order allow optimistic event processing 
hla ability provided flush queue request service forces rti deliver buffered events destination rti internal queues 
federates able cancel previously sent messages 
accomplished hla retract primitive 
cancelled message delivered destination federate cancellation request forwarded federate 
point destination federate responsibility roll back possibly generate additional retraction requests 
optimistic federates able compute lower bound logical time roll back 
lower bound called global virtual time gvt allows optimistic federate reclaim memory resources perform operations rolled back 
time warp rollbacks caused receiving message event cancellation past receiving federate 
federate value provides information necessary federate compute gvt 
illustrate services optimistic federate outlines time warp federate tw included hla federation tw federate uses flush queue request service receive optimistically process events 
optimistically generated messages transmitted rti federates ordinary non optimistic messages 
rti distinguish types messages 
event retraction primitive provided rti cancel optimistic messages prove incorrect 
message canceled event delivered rti receiving federate message cancelled rti 
message delivered receiving federate retraction request forwarded federate perform cancellation typically performing rollback receiving federate possibly generating additional cancellation retraction requests 
perspective time warp federate global virtual time gvt logical clock time warp federate 
plus time warp federate lookahead gives lower bound time stamp messages may generated federate 
information enables rti computation prevent conservative federates receiving optimistic messages guaranteed cancelled 
event time stamp gvt guaranteed prone rollbacks events generated time units lookahead message time stamp gvt guaranteed subject cancellation 
main loop typical time warp simulator execute steps simulation execution progress event time time stamp local event invoke flush queue request event time honor rti requests reflect attribute values receive interaction event retractions cancellations 
place incoming messages queues federate process rollbacks message retraction cancel previously sent messages honor rti service request flush queue local fossil collect local gvt value process smallest time stamped message statement typically process messages containing time stamp larger gvt giving rise optimistic execution 
number messages may processed rti queues flushed 
worth pointing fossil collection need performed iteration main processing loop 
attractive property approach enables time warp federates plug rti federate optimistic ones realizing optimistic federate federation execution 
rti automatically allows optimistic exchange messages collection optimistic federates time guarantees optimistic messages released conservative federates transparent federates federation 
special gvt messages exchanged optimistic federates rti automatically provides information necessary optimistic federate compute gvt locally 
attractive feature approach requires modest modification conservative time management services specified rti 
known problem optimistic simulations throttling federate prevent executing far ahead leading inefficient execution 
hla specify throttling mechanisms currently responsibility individual federates 

time management services hla central achieving interoperability analytic simulations event driven time stepped mechanisms advance simulation time 
time management system includes mechanisms ensure time stamp ordered delivery messages mechanisms federates advance logical time federate receive messages time stamp current logical time 
time management transparency federate need understand local time management structure federates key achieve interoperability federates different local time management mechanisms 

additional readings hla time management design handful key principles developed largely parallel discrete event simulation community years 
specifically computation values lookahead potential deadlock problems recognized earliest time management algorithms bryant chandy misra peacock wong 
importance lookahead impact performance discussed fujimoto 
need pass information concerning time stamp local event chandy misra exploited heavily second generation time management algorithms 
optimistic time management distributed simulations introduced jefferson 
depth treatment time management techniques fujimoto 

acknowledgments time management approach hla result collective efforts individuals dod modeling simulation community 
richard provided key contributions lead development early rti prototypes realizing time management services 
judith provided technical leadership hla development effort chief scientist defense modeling simulation office 
comments anonymous referees gratefully acknowledged 

bryant 

simulation packet communication architecture computer systems 
computer science laboratory 
cambridge massachusetts massachusetts institute technology 
chandy misra 
distributed simulation case study design verification distributed programs 
ieee transactions software engineering se 
chandy misra 
asynchronous distributed simulation sequence parallel computations 
communications acm 
dis steering committee 
dis vision map distributed simulation 
orlando florida institute simulation training 
fujimoto 

performance measurements distributed simulation strategies 
transactions society computer simulation 
fujimoto 

parallel distributed simulation systems wiley interscience 
jefferson 

virtual time 
acm transactions programming languages systems 


efficient distributed event driven simulations multiple loop networks 
communications acm 
mehl 

deterministic tie breaking scheme sequential distributed simulation 
proceedings workshop parallel distributed simulation 
abrams reynolds jr society computer simulation 

peacock wong 

distributed simulation network processors 
computer networks 
wilson 
aggregate level simulation protocol evolving system 
proceedings winter simulation conference 
