issn partial translation peter magnusson psm sics se october parallel computer systems swedish institute computer science box kista sweden traditional simulation target architecture interpreting object code improved translating object code intermediate format 
approach called interpretive translation 
despite substantial performance improvement traditional interpretation large part overhead unnecessary 
alternative approach block translation simulated instructions translated directly executable code 
approach drawbacks 
discuss problems block translation analyse overhead interpretive translation describe hybrid approach partial translation combines benefits approaches 
partial translation implements intermediate format supports addition run time generated code appropriate 
performance limit slowdown translation real implementations achieved 
partial translation perform considerably better 
results aggressive implementation interpretive translation results proof concept implementation partial translation 
keywords partial translation 
simulator 
interpreter 
page left blank intentions partial translation peter magnusson sics october sics technical report traditional simulation target architecture interpreting object code improved translating object code intermediate format 
approach called interpretive translation 
despite substantial performance improvement traditional interpretation large part overhead unnecessary 
alternative approach block translation simulated instructions translated directly executable code 
approach drawbacks 
discuss problems block translation analyse overhead interpretive translation describe hybrid approach partial translation combines benefits approaches 
partial translation implements intermediate format supports addition run time generated code appropriate 
performance limit slowdown translation real implementations achieved 
partial translation perform considerably better 
results aggressive implementation interpretive translation results proof concept implementation partial translation 
instruction level simulators crucial component developing analysing computer architectures system software 
instruction level simulation allows program written particular machine executed dissimilar machine 
call target machine host machine 
target programs execute simulation environment host machine compute results target 
simulators allow analysis program behaviour manner impossible impractical real hardware 
traditional measurements intrusive requiring insertion special code program interfering execution implementing limited form sampling 
simulation allows performance statistics gathered unobtrusively 
computer architecture research application studies done conjectured hardware 
furthermore instruction level simulators increasingly important tool system software development studying operating system behaviour developing system software generation hardware application tuning execution foreign code 
simulating multiprocessor presents special problems notably code expansion efficient time slicing processors 
modern processors aggravated memory bottleneck internal formats simulator compact 
organisation follows 
discuss detail terminology previous field 
describe partial translation 
extensive example translated code basic translation routine generate 
prototype implementation technique early experiences 
terminology definitions distinction developing analysing important 
essentially developing hardware means mainly getting 
implies simulator needs accurate fast long term problems handled real hardware 
accuracy simulating hardware generally difficult expensive approaches exist accurate hardware simulation scope 
analysing hardware system software developing system software quite different developing hardware efficiency computer resource requirements necessary allow realistic benchmarks test suites keep reasonable edit compile execute cycle 
means necessity hardware needs abstracted functional level 
distinguish behavioural simulation performance simulation fujimoto 
refers simulating hardware sufficiently programs run results states execution time target machine accurately simulated 
performance simulation implies aspects hardware tlbs caches pipelines memory latencies need accounted 
distinction behavioural performance simulation rigid program behaviour may affected timing 
re interested typical instruction set simulation model 
processor state visible program general registers condition codes memory represented variables fetch cycle processor implemented program loop 
distinguish user level system level simulation 
user level simulation means programs run target equivalence user mode run correctly 
means simulator needs provide operating system services including system calls program 
system level simulation contrast execute user level programs running context system system software running simulator 
cases complete hardware system simulated speak virtual machine canon 
shows matrix major simulator categories 
user level simulation considerably easier implement system level simulation aspects target hardware virtual memory multiprogramming ignored 
similarly behavioural simulation easier implement performance simulation 
case aspects cache pipelines memory latencies ignored 
behavior performance user level system level ii iii iv simulator matrix focus objective simulator technology research find common framework software hardware 
aiming simulator core fast run large applications realistic workloads 
sufficiently accurate support debugging system software functional support variety add ons gathering statistics similar 
discussion previous interpreting source language object code typically done phases translating internal format interpreting format 
traditional approach bundle phases single operation knuth 
approach translate efficient internal format interpret format lang 
adopting may terminology call generation simulators second generation simulators may 
generation simulators historical interest 
early second generation simulators translated target code host code implemented interface host code simulator 
shall call approach incremental translation 
second alternative block translation translate program parts entirety 
approach translates target instructions internal format subsequently interpreted 
method ll call interpretive translation technique borrowed language interpreters 
alternatives illustrated 
incremental translation translating individual instructions native code brought slowdown simulators improvement orders magnitude previous techniques 
method quite straight forward lang 
fixed memory expansion allocated code executed allowing fast address mapping 
memory space initialised subroutine calls translation routine 
program flow reaches cell target instruction translated host instructions 
expansion size cell space allocated heap 
example register register addition needs registers 
registers known statically code generated fixed offsets register file structure 
contrast interpretive approach needs determine registers time instruction executed 
block translation incremental translation target code host code instructions interpretive translation target code data structure internal format interpreter target code host code instructions instructions instruction instruction translation alternatives 
block translation success early second generation simulators prompted better approach 
principal gain block translation volatile state need stored back main memory instruction target volatile state fully partially mapped host 
performance potential promising fast half real time demonstrated 
approaches block translation 
major distinction form code available hll source code assembly code object code 
source code available similar compiler generate target host code 
basic blocks resulting files relationship statistics block level easily extracted target code inserted host code result fast native code 
assembler code available assembler assembler translation require flow control analysis 
assembler translated re compiled directly translated fujimoto mills :10.1.1.14.5490
object code available translation put run time priori manner distinguishing text data may 
interpretive translation third approach second generation simulators interpretive translation target code translated format easier interpret format interpreted 
simple format interpreter efficiently 
interpretive translation gets performance boost threading interpreted code 
threaded code described bell general programming method bell 
bell distinguished hard code interpretive code threaded code 
illustrates code types 
hard code traditional type program flow runs main segment occasionally doing subroutine call 
interpretive code central control segment interpreter calls various routines basis interpreted code 
threaded code task interpreter done service routines 
returning central interpreter epilogue service routine fetches sufficient information threaded code able immediately jump corresponding service routine 
variations threaded code including indirect threaded code 
interpretive translation strengths 
continuous representation processor state 
means exceptions virtual memory system software mechanisms readily simulated 
furthermore small semantic distance translated format target code means overhead translation virtually disappears 
furthermore interpretive translation extended efficiently support multiprocessors written closely match memory bandwidth requirement target machine programs magnusson 
drawbacks generating code principal advantage block translation performance 
instruction set interpreters large overhead due decoding dispatching saving restoring volatile state 
blocks volatile state fully partially mapped host processor decoding dispatching needs done block 
hard code interpretive code threaded code hard code subroutines interpretive code interpreter interpretive routines threaded code service routines data fetches programming methods 
interpretive translation sharply reduced cost decoding dispatching 
simpler processor designs reduced volatile state 
net effect interpretive translators slow mills 
overhead due saving restoring volatile state 
addition reduced performance benefit incremental block translation drawbacks 
memory expansion 
programs described small author demonstrating incremental block translation simulation complete system modern operating system easily megabytes code 
creates practical problems causing poor cache behaviour 
second scheme easily handle dynamic performance factors cache 
clear handle system level simulation requires things virtual memory exceptions dirty code asynchronous simulating multiprocessors requires fine grain processor interleaving single cycle 
third block translation expensive achieve high performance 
optimisation translated code costs order host instructions translated target instruction may 
fourth incremental block translation schemes portable making difficult move simulator new faster platform 
functionality simulator restricted 
clear integrate functions breakpoints symbolic debugging fly gathering statistics memory watch points recompiling simulator time 
block translation remains efficient approach 
desired goal able combine functionality interpretive translation performance block translation 
problems interpretation aggressive simulator interpretation steps done target instruction simulate instruction update instruction pointers check asynchronous event instruction dispatch instruction 
steps ll refer epilogue 
implementing simulator sparc simulating standard triadic instruction register register add takes instructions instruction instructions epilogue 
yields slowdown limit technique 
sparc instructions simulate instruction strictly necessary 
determining registers saving restoring simulated register file 
instructions epilogue perform useful interrupts instruction flow generally case 
known problems greatly reduced block translation 
instruction pipeline handled time translation 
instruction dispatch handled falling simulator code hardware host machine directly 
handling events problem 
common solution checking events rarely translated block 
drawbacks space describe detail 
include recreating errors setting time breakpoints single stepping 
interpretive solution odds block translation 
possible obtain best approaches single design 
call approach partial translation 
purposes discussion define slowdown limit proportion host instructions target instruction 
partial translation wish combine performance benefits direct execution running generated native code flexibility accuracy interpretation 
experiences interpretive simulators indicated carried simple 
natural consider handle common cases generated code maintaining semantics instruction level interpreter 
semantics include accurate handling asynchronous events 
event specified occur particular cycle occur exactly instruction executed cycle 
permits correct statistical sampling application behaviour correct simulation asynchronous devices exact user breakpoints debugging 
correct processor state 
target processor volatile state registers status flags correct required 
correct memory access sequence timing 
incremental translation translates object code internal format easily interpreted 
partial translation extends allowing target instructions translated host instructions maintaining functionality correctness original design 
choice instructions translate done heuristics 
purposes discussion assume heuristics statically dynamically detect simple inner loop 
simulation code pc ptr interpreted program sub translated 
translated block eq partial translation illustrates interpreting intermediate format combined direct execution generated code 
assume wish translate sequence instructions native sparc code 
intermediate code bit format bits points code simulates corresponding instruction 
second bits contain parameters instruction 
instruction translated format 
execution program reaches instruction block service routine jumped run time generated block sparc code 
block completed dispatch instruction block 
dispatch means reading intermediate format jumping pointer containing bits 
consider example code label read word source store destination increment source pointer increment destination pointer cmp finished 
br ne continue example code written pseudo assembler discussion processor independent 
example code occur inside block copy routine 
iteration take instructions simulator interpretive translation assuming slowdown 
interpreting code large amount done unnecessary 
wish eliminate possible unnecessary instruction flow 
determining instruction implies dispatch cost eliminated normal flow host processor translated code lie consecutively host machine 
event handling 
asynchronous events functions mapped single counter 
semantics counter decremented executed instruction event handler called reaches zero 
know length block example instructions decrement event counter blocks 
preserve semantics long translated block affects event queue 
unnecessary write backs 
iteration overwrites result save effort writing back values exit loop 
reading writing registers 
block execute instruction temporarily cache registers host registers 
branch delay slot 
loop know statically execution pipeline need generate code branch delay slots necessary 
covers overhead involved incremental translation 
listed order show handled entry exit code translated block 
wish generate minimal amount code common cases handled directly translated block 
dynamics complex compiled code needs exited orderly manner registers flags instruction pointers need updated reflect point code exit occurred 
possible implement functionality translated code 
detrimental performance 
code generated handling special cases cost involved communicating back core simulator code 
instance consider tlb translation look aside buffer occurs memory translation operation target architecture misses cache contains translations tlb 
detecting possible tlb requires little code 
advantage generating code eliminate process switch cost moving generated code context pre compiled simulator context 
cost issue complex operation furthermore simulator context advantage implemented compiled optimising compiler 
issue host instruction cache performance 
large generated blocks code lead poor instruction cache performance machine running simulator 
ways combining threaded code model block translation 
internal format includes direct pointer compiled block introduce new instruction translated 
instruction takes parameter pointer translated block handles generic entry exit issues 
approach previous instruction dispatches decoded block directly jumping entry exit code needs compiled block 
approaches advantage re entry needs special checks 
responsibility maintaining consistency interpretive model split interpreter code block ways 
instance accessing memory involves virtual physical translation access 
efficient simulation virtual memory optimistic path compiled translated block 
responsibility translated code correctly handle cases handle instruction correctly dispatch interpretation instruction handle loop iterations block fail case de allocates invalidates translation instruction instruction interpretation 
case may involve jumping service routing interpreter instruction complex completing instruction simple 
updating simulator status necessary state needs considered exit 
interpretive decoding generated code sufficiently general entries code 
instance depend target processor case multiprocessor 
maintaining fine granularity event handling important function simulator 
requires compiled code blocks check events 
approach maintain coarse precision inside compiled code execute interpreted code compiled block risks treating event imperfectly 
means entry code compiled block needs determine safe continue 
isn safe block executes instruction dispatches instruction 
partial translation example hand coded example illustrates target code block look 
block assumes entry exit done translate instruction block dispatched directly translate instruction serves indirection sanity checks 
code translated example previous section 
example code describe detail works 
block cmp iteration 
br cmp legitimate cpu state 
br ne abort de allocate cmp branch delay slot 
br ne dispatch service routine load registers lbl shift check vs cached transl 
read cmp rlp br ne handle read mask calculate physical location sim rpp read shift check vs cached transl 
write cmp rlp br ne handle write mask physical location simulator rpp write increment happen cmp loop 
br ne try set status bits correctly loop took cycles assume rpc rpc point instruction br clean try loop lbl update event counter cmp iteration 
br ge registers read restore registers set status bits correctly br exit service routine fall exit rop upper load rop description rop lower instruction br branch service routine exit couldn handle read set status br exit service routine directly exit couldn handle write set status read took cycles assume rpc rpc point instruction br clean exit restore registers rop rpc get instruction specification rop get service routine offset cmp check event occurred br leq deal event br dispatch 
exit call routine needs params uses rpc rpc invalidate self rop br force new translation comments code 
constant known compile time 
constants may fit immediates instructions may require extra instructions create constant 
translated block meant handle cases 
example exit circumstances purposes discussion call normal exit exit exit exit exit deallocate 
described text occur 
translation block estimate block take cycles executed example cycle instruction memory accesses take 
check cycles left abort exit 
exit dispatches instruction block interpreted instruction 
loading corresponding rop value branching interpretation code 
course knows exactly branch 
overhead unsuccessfully attempting dispatch block instructions branches memory accesses 
case code checks cpu legitimate state 
status bits includes state carry compared stored value 
cpu state changed generated code longer valid 
deallocating exit exit calls routine deallocates space code 
routine uses rpc determine space remove 
overwrite block block execute 
routine returns invalidates translation intermediate code dispatches opcode corresponds decoded 
code may necessary 
instance flags kept specific register updated directly generated code 
third check done entry assert instruction pipeline looks translation routine thought 
code generated translated block assumes particular content pipeline 
change check necessary sake correctness 
optimised away dispatching block code directly translated blocks checking instruction pipeline translated pseudo instruction 
check fails instructions interpreted branch exit 
know code executed 
thing read registers accessed block source registers 
note optimise away registers overwritten block 
lbl simulate instruction read 
memory accesses optimistic code handle simplest case 
memory simulation presumed cache mru read write tlb entries pairs registers rlp rpp rlp rpp 
better performance gained encoding level hash table lookup 
assuming problem read 
problem perform exit 
updates register indicate translated block performing poorly 
alternatively update block specific status field 
block deallocate re generation translation routine information block behave generate different code 
combining information code translated block picking information described runtime translation routine information available sophisticated code generation schemes 
instance detect copying zeroing block common operation generate code detect virtual memory translation misses memory page involved copy zero operation 
carry write similar manner read 
error handling reads 
instructions block translated host instructions add instructions generate exceptions access memory 
conditional branch loop simulated host instructions 
decide try loop branch lbl 
check events occur repeat loop 
event occur write back registers update status register jumping exit interpret instruction 
loop finished set status bits update event counter update program counter jump exit normal clean writes back registers checks event execution dispatches instruction 
cases code exit rop cpu registers correct state 
code instructions central loop data reads writes original code 
entry exit code instructions 
yields potential slow close recall original code instructions including read write 
handling status flags classic problem code generation handle status flags 
case corresponding problem cmp instruction 
compares registers stores vector destination register relation 
typically destination register subsequent bb branch bit instruction 
register containing bits subsequently overwritten regardless outcome branch need simulate branch condition function 
approach assume cmp bb pair handled note done 
determine guess correct 
compensating bad choice done single pass code generation branching point code new code correct cmp 
selection translate problem remains select portions compiled 
extremes completely interpreted code completely compiled 
conceivably contiguous scale 
want compile possible essentially critical loops 
compiling necessarily expensive 
straight forward approach translate mc instruction sparc instructions 
advantage avoiding sophisticated approach translation fast relatively simple implement 
require relatively complex processing memory accesses tlb updating event queue require saving state exit compiled code 
include events 
don want code expansion get hand approach compile basic blocks 
frequent branch targets possible heuristic cheap implement catch critical loops 
basic block frequently branched translated 
interesting effect block semantics may overlap include 
course compounds space dilemma useful tight code segments 
entry exit code blocks cheap may worthwhile translate sequence instructions change control flow access memory 

characteristics typical programs benefit partial translation 
executed code tends high degree locality registers tend purposes instructions common similar instruction sequences generated constants tend low exponent branches instruction page memory accesses particular instruction tends hit page time small amount code 
prototype implementation implemented prototype study practicality technique eventually measure performance large programs realistic workloads 
prototype initially aimed running dhrystone benchmark program 
simplistic performance measurements exercises sufficient number processor memory functions suitable test case 
dhrystone program compiled port gcc linked trivial library supporting simple unix commands printf operating system running 
modified program slightly locking iterations skipping timing code uses timer floating point instructions 
modifications affect entry exit code actual bench marking code affect performance served simplify prototype 
modified dhrystone program uses handful instructions addu cmp ext lda mak mul bb br bsr jmp jsr variants store load 
instructions executed handful times clr ff 
iterations benchmark executes instructions 
dynamic count instructions concentrated instructions variants load store represent instructions executed 
prototype interpret instructions 
subset translated sparc code correct entry exit code generated interfacing code interpreter core 
illustrate consider code code library sets stack calls main fe ff dc bbc st dc addu addu bc addu bsr main tb bsr command branch subroutine presumed imply major change instruction flow translated 
instructions prior bsr instruction translated single block sparc code 
code generated prototype appears sethi hi sethi hi sub sethi hi sethi hi ef srl xa add andn bne sethi hi st sethi hi sethi hi add add add sethi hi ld ld add add st st st st st st jmp nop st st sethi hi ld xe ld xe add add jmp nop code actual disassembly gdb slightly modified clarity 
layout code sketched 
generated block layout generate constants interpret code default exit handler exit handlers cmp simulation check events check layout generated code comments code 
create large constant code 
processor specify bit immediates sparc handle bit unsigned 
constant simulation st 
simulate instruction mapping sparc register 
simulate instructions follow 
complex instruction store generated code begins requires instructions case 
generated code follows different path handling memory described previously 
blocks translated demand processor correct state entry 
shadow instruction execution know register contents execution memory access 
simply tlb lookup translation time generate code confirm page 
static approach 
dynamic approach keep register translations memory simple hash table lookup memory access 
preferably code generation adapt code 
combine static dynamic translation prediction 
instructions starting perform comparison top bits statically guessed logical page number aborts code fails 
cleanup code generated exit starting store back correctly executed code changes dispatch memory store handler 
explain exit code shortly 
store goes instructions starting simulate instructions followed addu 
code normal exit handler 
figures instruction dispatch absolute address knows time translation 
stores return address 
reads parameters instruction rop 
updates correspond setting correctly 
write back modified registers starting 
code block unusual modifies registers 
dispatch instruction directly 
may may translated block 
sparc registers overwrite generated code interfere interpreter 
extension gnu allows auto variables allocated specific registers 
expect data flow analysis compiler save variables held registers memory encountering goto void statement interpreter 
variables shared interpreter code generated code stored global registers preserved procedure calls 
reserved sparc abi execute code interpreter won collision 
information needs communicated generated block contained registers 
event counter 
contains number cycles event 
rop parameters 
default initialised caller 
block currently needs updated dispatching instruction 
current processor 
points data structure containing processor specific information 
part structure contains user register file 
stages pipeline implicit 
points instruction executed current points prefetched instruction 
updating exit block interpreter routine allows efficient simple handling branch delay slots 
basic functions implemented 
primarily generated code check code easy add 
translation takes approximately sparc cycles mhz ipx target instruction 
block output microseconds 
block executes sparc cycles including dispatching instruction block 
implies peak performance mips target instructions 
cursory static analysis dhrystone indicate instructions blocks mechanism gnu jumps specific address 
addresses labels extracted operator 
resulting void pointer subsequently handled normal pointer 
goto statement jump void pointer 
instructions indicating predicted performance prototype mips average assuming cycles interpreted instruction 
times faster purely interpreted approach 
possibilities list contains possible extensions improve performance unrolling 
small inner loop unrolled translated code just optimising compiler 
peep hole optimisation 
particularly interesting instruction sets differ considerably 
event timer arithmetic 
case simple loop takes cycles entry code determine iterations block perform 
faster decrementing time architectures especially decrement branch positive instruction 
memory translation optimisation 
entry code assert memory translations page block single entry need checked 
code block hard coded directly access host memory done maintaining consistent view memory 
discussed various approaches instruction level simulation target architecture 
interpretive approach high level functionality keep direct execution fastest approach 
proposed partial translation hybrid translate simple sequences code handle complicated situations interpreter routines 
prototype shows design effectively implemented 
generation code sufficiently cheap run time 
early results indicate substantial performance improvement purely interpretive approach loss functionality 
bibliography barbacci 
instruction set processor specifications isps notation applications 
ieee transactions computers jan 

efficient architecture simulation techniques 
usenix winter 
bell 
threaded code 
communications acm june 

assemblers compilers program translation 
computer science press rockville usa 
canon 
virtual machine emulator performance evaluation 
communications acm feb 

indirect threaded code 
communications acm june 


cad tools design crisp 
ieee design test june 
fujimoto campbell 

efficient instruction level simulation computers 
transactions society computer simulation apr 
glass 
real time lost world software debugging testing 
communications acm may 

scalable cache memory architecture 
phd thesis royal institute technology sweden sics dissertation series swedish institute computer science sweden 
landin haridi 

ddm cache memory architecture 
ieee computer sept 
lang 

block actions generator alternative simulator collecting architecture measurements 
proceedings sigplan symposium interpreters interpretive techniques st paul minnesota june 

knuth 
art computer programming vol 
fundamental algorithms 
addison wesley reading mass lang quine simpson 

threaded code interpreter object code 
ibm technical disclosure bulletin march 
lewis 
hierarchical compiled code event driven logic simulator 
ieee transactions computer aided design june 
magnusson 
efficient simulation parallel hardware 
proceedings international workshop modelling analysis simulation computer telecommunication systems mascots scs simulation series vol 

may 
mimic fast system simulator 
proceedings sigplan symposium interpreters interpretive techniques st paul minnesota 

mills fowler 

compiled instruction set simulation 
software practice experience aug 
nash 
design development software emulator 
digest papers compcon spring 
th ieee computer society international conference intellectual leverage ieee catalogue ch 
agarwal 

parallel machines 
communications acm mar 
robertson 

simulation mc microprocessor system transputer network 
distributed memory computing nd european conference proceedings 
munich april 
berlin germany springer verlag 
stallman 
porting gnu cc version february free software foundation mass usa 

dhrystone synthetic systems benchmark 
communications acm oct 
dhrystone benchmark version siemens ag postfach erlangen germany 
wirth 
microprocessor architectures comparison code generation compiler 
communications acm oct 
