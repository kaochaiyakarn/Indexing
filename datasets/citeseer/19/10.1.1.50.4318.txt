designing computational geometry algorithms library stefan schirra max planck institut fur informatik saarbrucken germany 
email mpi sb mpg de geometric problems arise areas 
computer graphics robotics manufacturing geographic information systems examples 
geometric subproblems solved 
library providing solutions core problems geometric computing wide range applications useful 
success leda library efficient data types algorithms shown existence library tremendous difference advanced techniques data structures algorithms theory practice 
field computational geometry close state provide library geometric algorithms 
past years algorithms geometric problems developed computational 
algorithms clearly direct impact geometric computing practice efficient compared solutions huge problem instances 
mainly considered contributions investigation complexity geometric problem 
algorithms practical reasonable problem sizes haven way practice 
reasons dissimilarity fast floating point arithmetic normally practice exact arithmetic real numbers assumed theoretical papers lack explicit handling degenerate cases papers inherent complexity efficient solutions 
reasons definite need correct efficient implementations geometric algorithms 
progress concerning implementation geometric algorithms see lot theoretical experimental research done get robust efficient library geometric algorithms 
goals cgal project common project sites utrecht university netherlands eth zurich switzerland free university berlin germany inria sophia antipolis france max planck institute saarbrucken germany risc linz austria tel aviv university israel successfully research provide reliable efficient implementations library computational geometry algorithms 
library lecture notes advanced school algorithmic foundations geographic information systems udine italy september lecture notes designing computational geometry algorithm library constructed cooperation industrial companies mainly europe 
just project library called cgal 
notes issues related design computational geometry algorithms library discussed 
section contains general remarks libraries geometric computing 
section argued exact geometric computation promising approach ensure robustness geometric algorithms library 
sections relate modularity efficiency generality generic code 
ease library discussed section 
view held notes personal view official view cgal 
concepts developed jointly kernel design group cgal 
influenced discussions research group interested exact geometric computation max computer science leda cgal prototype ancestors gal xyz library 
geometric algorithms library geometric algorithms consist different layers bottommost layers basic objects predicates arithmetic computations 
geometric algorithms library provides components different layers 
kernel geometric algorithms library provides geometric primitives 
level basic algorithms data structures 
layers convert data different representations output input 
application algorithms involving geometric computation built libraries part library 
purpose library provide reusable software components 
reusability requires generality 
components usable adaptable various applications 
generality sufficient 
components adaptable lead efficient solutions 
library components come precise description compute inputs guaranteed 
correctness means component behaves specification 
clearly correctness sense reliability question geometric algorithms primitives library 
far implementations geometric algorithms correct 
implementations geometric algorithms pretend solve geometric problem clearly specified set problems instances don 
due precision problems missing improper handling special cases just incorrect coding complicated parts implementations geometric algorithms user occasionally unexpected failures break downs computing garbage 
exactness confused correctness sense reliability 
wrong approximation algorithms approximate solutions long pretend 
correctness appearances 
algorithm handling non degenerate cases correct lecture notes designing computational geometry algorithm library sense 
algorithm guarantees compute exact result numerical input data integral smaller bound correct algorithm computes approximation exact result guaranteed error bound 
correctness sense reliability re usability geometric algorithms library 
library just collection reusable software 
provides reliable reusable components combined fairly seamless way 
major design issue library choice programming language 
choice widely available supports library design 
furthermore allows libraries leda stl gives access functions coded robustness library components computational geometry literature term robustness slightly different meanings 
algorithm called robust fail 
authors robustness denote ability algorithm deal inaccuracies degenerate cases means 
algorithm called robust computed result exact result perturbation input 
definition convex hull algorithm outputs input points solution robust 
addition require perturbation input small 
robustness small perturbation called stability 
fortune definition robustness stability bit stronger 
requires addition algorithm compute exact result computations precise 
definition algorithm uses symbolic perturbation scheme robust 
shewchuk suggest call algorithms quasi robust compute useful information necessarily correct output perturbation input 
difficult get stable implementations basic geometric predicate 
composition stable predicates create problems 
stable imprecise predicates useful library components 
different evaluations predicates execution implemented algorithm independent operate set input data 
implementation predicate implementation geometric algorithm stable decision imprecise evaluation predicate perturbation part input data justifies perturbation justifies decisions imprecise evaluations predicates simultaneously 
stable predicates automatically give stable algorithm 
globally inconsistent decisions avoided 
basic geometric problems algorithms reach quasi robustness cf 

techniques algorithms fairly special lecture notes designing computational geometry algorithm library easily transferred geometric problems 
general theory implement geometric algorithms imprecise predicates distant goal 
imprecise geometric predicates implementation easy 
easier built implementation exact geometric predicates 
exact predicates algorithms developed real ram model implemented straightforward way 
redesign deals imprecision predicates necessary 
exact predicates easiest promising way get reliable implementations 
exact components choice geometric algorithms library lower levels library 
note vote exactness exclude approximate solutions 
exact basic predicates simplify task implementing approximation algorithms 
applications input data known inaccurate exactness computed result minor issue 
stable efficient algorithm computing approximate solution sufficient 
specification library algorithm clearly indicate algorithm computes 
sake ease library components names chosen appropriately suggest exactness approximate solutions computed 
correctness sense reliability primary goal exactness exact computation paradigm safest way reach 
efficiency generality modularity users computational geometry algorithms library may fairly different needs 
users speed important exactness 
users need high accuracy exact result 
algorithm wide range input data applications set relevant input data restricted coordinates integers small range 
library enable efficient solutions situations 
challenges construction geometric library efficient exact computation 
clear pay exactness 
progress exact geometric computations various tools exact computation available 
efficiently predicate exactly evaluated depends numerical data involved 
applications numerical input data hardly arbitrary real numbers 
numerical input data usually integers certain range fixed precision floating point numbers algebraic numbers symbolic representation 
library places efficient implementations predicates different restrictions numerical input data user disposal modular geometric algorithms easily trimmed application 
layered geometric algorithm calculations wrapped primitives higher levels combinatorial nature 
code higher layers algorithm matter geometric predicates realized 
choosing implementations predicates lecture notes designing computational geometry algorithm library adjusted numerical data problem instances solved performance geometric algorithm optimized efficiency exactness reached 
modularity library allows exchange sub components provide bridge contradictory goals efficiency generality 
representation geometric objects significant impact performance geometric algorithms predicates 
leda different implementations data structure computational geometry algorithms library provide different implementations geometric objects 
example consider points vectors 
representation homogeneous coordinates allows replace computations involved geometric algorithms division free computations 
useful exact geometric computation 
hand waste calculations involve division 
geometric algorithms library offer points vectors homogeneous coordinates points vectors ordinary cartesian coordinates 
homogeneous coordinates benefits representation affine transformation 
generic code correctness algorithm correctness components important actual implementation 
layered geometric algorithms variety implementations predicates subtasks representation geometric objects long correct 
representation specific parts hidden lower layers 
lowest layer geometric computation underlying arithmetic 
exact geometric computation simply means decisions algorithm correct 
evaluations geometric predicates choosing appropriate number type guarantees exact comparison correct decision sufficient exact geometric computation 
number type sufficient highly depends application precisely numerical input data 
numbers arising input intermediate results evaluation predicate integers multiple precision integer arithmetic sufficient 
integers arising evaluation sufficiently small calculations done limited precision number types int double 
general powerful number type number type real 
guarantees exact comparisons numbers arithmetic expressions integral operands basic operations gamma square root operation 
operator overloading allows write code software provided number types natural way 
code evaluating predicate number types guaranteeing exact comparisons differs declarations identifier number type declared 
invariant long evaluation predicate representation objects coordinates 
template mechanism allows write code parametrized types 
template parameters place holders types 
allows lecture notes designing computational geometry algorithm library write class templates function templates 
function templates avoid duplication code geometric predicates differ underlying arithmetic 
predicates global functions 
methods associated classes 
class templates parametrize predicates number types 
actual code certain number type automatically generated compiler 
process called instantiation resulting code called implicit specialization 
number types implicit specialization gives optimal correct code 
number types alternative code defined 
terminology code called explicit specialization 
generating code automatically template compiler alternative code 
example implementation geometric predicate involving computation sign determinant deviate standard evaluation provided template code special method computing sign determinants entries integral doubles 
parametrization geometric objects data structures algorithms class maps basic geometric objects typedefs representations number types allows write generic code higher level code working variety implementations components 
class defining mapping called representation class 
class looks class typedef 
point typedef 
vector typedef 
line 
sufficiently high level code parametrized representation class uses components parametrized representation classes 
lower levels code bridges actual representations objects specified representation class converting representations calling functions defined representations 
representations provided library geometric primitive common interface code generic 
example convex hull algorithm template class cgal polygon cgal convex hull const list 
cgal point uses components parametrized representation classes bool cgal const cgal point const cgal point const cgal point hand simply forwards call function operating actual representations returning lecture notes designing computational geometry algorithm library cgal point point point current proposal cgal kernel suggest provide representation classes map representations predicates basic objects homogeneous coordinate representation cartesian coordinate representation 
representation classes parametrized number type represent coordinates 
basic geometric objects points vectors classes parametrized representation class derived implementation classes template class class cgal point public point 
parametrization representation class generic code working primitives homogeneous representation primitives cartesian representation written 
course correctness implementation depends correctness primitives 
rare cases algorithm parsimonious evaluates predicates outcome know previous tests implicit specialization resulting imprecise predicates gives robust algorithms 
implementation dependent decisions robustness imprecise predicates guaranteed 
number types advantages disadvantages 
number type adequate numerical input handled results incorrect 
hand sense arithmetic operations powerful number type slows computation necessary 
assume convex hull algorithm works arbitrary precision integer arithmetic 
number type double number type int large integral input 
hand efficient number type medium size integers integers input known small 
specification tell user large intermediate integral results 
convex hull code powerful number types leda number type real input data algebraic numbers arithmetic expressions involving square roots 
ease ease important aspect success library 
user need easy access components library don want learn lot library 
representation classes possibility choose number types write specializations offer ways optimize performance library components application combining efficiency generality library 
flexibility deter potential user making computational geometry algorithms library 
fortunately lecture notes designing computational geometry algorithm library advanced features hidden novice user 
explicit specializations code offered hidden typedefs 
advanced user see power profit 
library unified 
naming scheme uniform classes describing geometric objects member functions classes 
point library user life easier deals collections objects 
iterator concept standard template library part forthcoming standard feeding algorithm set input data type uniform 
need user copy data favorite container library container fed algorithm favorite container supports iterators 
correctness implementation depends correctness components components library designed default self checking 
example preconditions routines checked results computations verified checking postconditions 
great help implementation process reduce debugging efforts drastically 


gal library geometric algorithms 

boissonnat devillers preparata 
evaluating signs determinants single precision arithmetic 
technical report inria sophia antipolis 

mehlhorn schirra uhrig 
exact geometric computation leda 
proceedings th acm symposium computational geometry pages 

mehlhorn schirra 
leda class real number 
technical report mpi max planck institut fur informatik 

ellis 
designing coding reusable 
addison wesley 

ansi iso standards committee 
working draft proposed international standard information systems programming language 
doc wg 
april 

dey sugihara bajaj 
delaunay dimensions finite precision arithmetic 
computer aided geometric design 

dub yap 
basis implementing exact computational geometry 
extended 

fabri 
giezeman kettner schirra 
cgal kernel basis geometric computation 
proceedings acm workshop applied computational geometry 
lecture notes designing computational geometry algorithm library 
fortune 
stable maintenance point set triangulations dimensions 
proceedings th ieee symposium foundations computer pages 

fortune van wyk 
efficient exact arithmetic computational geometry 
proc 
th acm symp 
computational geometry pages 


giezeman 
library planar geometry library spatial geometry 

hearn baker 
computer graphics 
prentice hall 
nd edition 

lippman 
primer 
addison wesley 
nd edition 

mehlhorn 
implementation geometric algorithms 
th world computer congress ifip volume pages 
elsevier science north holland amsterdam 

mehlhorn 
leda platform combinatorial geometric computing 
communications acm 
cf 
www mpi sb mpg de leda leda html 

mehlhorn schirra seidel uhrig 
checking geometric programs verification geometric structures 
proceedings th annual acm symp 
computational geometry pages 

mehlhorn schirra uhrig 
computational basis higher dimensional computational geometry 
technical report max fur informatik 

musser 
stl tutorial guide 
addison wesley 

nievergelt de 
xyz software geometric computation 
technical report institut fur informatik eth zurich switzerland 

preparata shamos 
computational geometry 
springer verlag 

schirra 
precision robustness 


seidel 
nature meaning perturbations geometric computations 
stacs 

shewchuk 
adaptive precision floating point arithmetic fast robust geometric predicates 
technical report cmu cs school computer science carnegie mellon university 

stepanov lee 
standard template library 
july 
www cs rpi edu musser stl html 

yap dub 
exact computation paradigm 
du hwang editors computing euclidean geometry pages 
world scientific press 
nd edition 
article processed macro package llncs style 
