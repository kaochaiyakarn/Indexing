data mining framework adaptive intrusion detection wenke lee salvatore stolfo mok computer science department columbia university west th street new york ny wenke sal mok cs columbia edu june describe data mining framework constructing intrusion detection models 
key ideas mine system audit data consistent useful patterns program user behavior set relevant system features patterns compute inductively learned classifiers recognize anomalies known intrusions 
experiments audit data system programs network activities showed classification models detect intrusions provided sufficient audit data available training right set system features selected 
propose association rules frequent episodes computed audit data basis guiding audit data gathering feature selection processes 
research supported part darpa nsf iri cda modify basic algorithms axis attribute variable attribute forms item constraints compute relevant useful patterns iterative level wise approximate mining procedure uncover low frequency important patterns 
meta learning mechanism intrusion detection models effective adaptive 
report extensive experiments framework real world audit data 
keywords intrusion detection audit data classification association rules frequent episodes network computer systems play increasingly vital roles modern society target enemies criminals 
need find best ways possible protect systems 
security computer system compromised intrusion takes place 
intrusion defined set actions attempt compromise integrity confidentiality availability resource example illegally gaining superuser privileges attacking rendering system service denial service intrusion prevention techniques user authentication passwords biometrics avoiding programming errors information protection encryption protect computer systems line defense 
intrusion prevention sufficient systems complex exploitable weakness systems due design programming errors 
example known design flaws tcp ip protocols unix systems led security holes bel gm reported years ago exploitable buffer overflow bugs exist system software due programming errors 
policies balance convenience versus strict control system information access impossible operational system completely secure 
intrusion detection needed wall protect computer systems 
intrusion detection systems constructed manual ad hoc means 
systems designed implemented system builders knowledge computer system deep understanding known intrusions 
result effectiveness adaptability intrusion detection systems limited face new computing environ ments newly invented attack methods 
discusses systematic framework analyzing audit data constructing intrusion detection models 
framework large amount audit data analyzed data mining algorithms order obtain frequent activity patterns 
patterns guide selection system features construction additional temporal statistical features phase automated learning 
classifiers selected features computed inductively learned appropriate formatted audit data 
classifiers intrusion detection models classify decide observed system activity legitimate intrusive 
organized follows 
give brief overview current intrusion detection techniques limitations 
outline key elements framework 
summarize lessons learned early experiments building classification models intrusion detection find tools needed feature selection audit data gathering 
discuss incorporate general domain knowledge association rules frequent episodes algorithms order compute useful patterns audit data 
report detail various experiments patterns guide audit data gathering basis feature selection 
experimental results combining multiple classification models collaborative intrusion detection 
compare framework related research efforts discuss issues research 
intrusion detection techniques mainly types intrusion detection techniques anomaly detection misuse detection 
current intrusion detection systems approaches 
anomaly detection anomaly detection example ides ltg tries determine deviation established normal behavior profile flagged intrusion 
profile typically consists number statistical measures system activities example cpu usage frequency system commands login session user 
deviation profile computed weighted sum deviations constituent statistical measures 
profiles updated periodically aged shifts normal behavior accounted 
key advantages anomaly detection systems detect unknown intrusion require priori knowledge specific intrusions 
defining maintaining normal profiles nontrivial error prone task 
misuse detection misuse detection refers techniques patterns known intrusions example consecutive failed logins minutes penetration attempt weak spots system example system utilities buffer overflow vulnerabilities match identify intrusions 
sequence attack actions conditions compromise system security evidence damage left intrusions represented number general pattern matching models example nides lun uses rules stat ikp uses state transition diagrams ikp ks uses colored petri nets 
key advantage misuse detection systems patterns known intrusions stored instances intrusions detected effectively efficiently 
newly invented attacks go undetected 
difficulties building intrusion detection systems currently systematic approach building intrusion detection systems 
system builders intuition experience guides selection statistical measures anomaly detection lun 
experts need analyze categorize attack scenarios system vulnerabilities hand code corresponding rules patterns misuse detection 
today network computing environment multiple penetration points intrusions take place 
example network level intruders crash host simply sending malicious packets victim host level intruders login system illegally obtain root superuser shell 
system activities occurring different penetration points captured different audit data sources 
intrusion detection systems handle particular audit data source knowledge labor intensive na ture understanding system audit data selecting statistical measures modeling intrusion patterns 
large traffic volume security related industry groups underground societies mailing lists web sites suggest new system security holes intrusion methods continuously discovered 
imperative intrusion detection systems updated upgraded frequently 
maintenance updates expensive difficult current manual ad hoc approaches 
systematic framework basic premise intrusion detection audit mechanisms enabled record system events distinct evidence legitimate intrusive user program activities manifested audit data 
example network traffic audit data connection failures normally infrequent 
certain types intrusions result large number consecutive failures may easily detected 
data centric point view intrusion detection considered data analysis process 
anomaly detection finding normal usage patterns audit data misuse detection encoding matching intrusion patterns audit data 
developing framework described ls applying data mining techniques build intrusion detection models :10.1.1.134.4855
framework consists classification cs association rule ais frequent episode mtv programs support environment enables system builders interactively iteratively drive process constructing evaluating detection models 
product concise intuitive classification rules easily inspected edited security experts needed detect intrusions 
try eliminate possible manual ad hoc elements 
inductively learned classification rules replace manually encoded intrusion patterns profiles system features measures selected considering statistical patterns computed audit data 
meta learning meta classification cs learn correlation intrusion evidence multiple audit data sources making feasible detect full range intrusions 
process pattern mining classification programs generic mechanical easier update intrusion detection models framework 
migration new computing environments dealing new intrusion methods means applying data mining machine learning process relevant audit data 
meta learning combine new models detect new intrusions existing ones detect old intrusions 
meta learning mechanism facilitates incremental updates combined models making adaptive intrusion detection feasible 
classification models intrusion detection section briefly summarize early experiments constructing classification models anomaly detection detailed ls :10.1.1.134.4855
experiments showed effectiveness classification models computed machine learning programs 
system programs sendmail frequent targets intruders 
attacks normally cause programs perform malicious activities 
sequence run time operating system calls example open read 
program provides detailed information execution 
obtained stephanie forrest university new mexico system call data hundreds normal sendmail runs dozen different simulated attacks 
findings short sequences system calls program consistent preprocessed data length sliding window scan system call sequence create list records consecutive system calls :10.1.1.47.6145
nth system call record class label system calls positional attributes 
ripper coh applied learn classification rules normal sendmail data 
resultant rule set consisting rules attribute tests normal execution profile specifies normal occurrences system calls 
analyze execution trace large number misclassifications deviations suggests anomaly 
experiments detailed ls showed need data hundreds normal runs sendmail training order classifier clearly identify attacks normal runs :10.1.1.134.4855
general need collect sufficiently large amount training data learn establish normal profile anomaly detector 
attacking weaknesses tcp ip protocols cool trend hackers 
intrusions aimed disrupting network services 
packet sniffing programs tcpdump capture traffic data analysis monitoring 
obtained set tcpdump data network traffic available iris cs uml edu network html part information exploration see iris cs uml edu 
data set traces normal traffic number intrusions 
followed tcp ip protocol specification process raw packet level data time series connection level records manually written preprocessing script 
record destination network service class label included intrinsic connection information example duration number bytes transfered direction flag error protocol attributes features 
applied ripper normal data 
resultant rule set rules considered normal profile network characterizes normal traffic patterns network service 
initial results misclassification rates deviations profile normal testing data intrusions close 
temporal nature network traffic captured classification model 
connection added temporal statistical features calculated connections prior seconds 
include average duration number bytes total number errors new classification models showed significant improvement detecting intrusions 
complete details experiments findings appear ls :10.1.1.134.4855
challenges experiments revealed need solve challenging problems classification models effective 
formulating classification tasks determining class labels set features audit data difficult time consuming task 
security usually afterthought computer system design standard auditing mechanism data format specifically intrusion analysis purposes 
considerable amount data pre processing involves domain knowledge required extract raw action level audit data higher level session event records set intrinsic system features 
temporal nature event sequences network computer systems suggests temporal statistical measures features valuable additional features example total number connection failures past seconds 
traditional feature selection techniques discussed machine learning literature directly applied prior typically consider sequential correlation features record boundaries 
fp interesting ideas automatic selection features cellular fraud detector 
method effective detecting superimposition fraud fraudulent activities conducted legitimate account 
intrusions easily categorized superimposition example attack network protocols 
critical requirement classification rules anomaly detector need sufficient training data covers variation normal behavior possible false positive rate kept low wish minimize detected abnormal normal behavior 
possible formulate classification model learn anomaly detector limited insufficient training data incrementally update classifier line learning algorithms 
limited training data may covered class labels line algorithms example iti incremental tree induction ubc deal new data new unseen class labels 
example modeling daily network traffic services telnet connections class labels training models 
may connection records infrequently services say week traffic data 
formal audit data gathering process needs take place 
collect audit data need indicator tell new audit data exhibits new normal behavior process variation 
indicator simple compute incrementally updated 
algorithms mining audit data aim develop general intrusion specific tools response challenges discussed previous section 
idea compute association rules frequent episodes audit data intuitively capture intra temporal inter audit record patterns 
patterns utilized user participation guide data gathering feature selection processes 
term audit data refer general data streams processed detection purposes 
examples data streams connection records extracted raw tcpdump output web site visit records processed web site logs 
assume audit data records timestamped 
described lsm main challenge developing data mining algorithms provide support mechanisms domain knowledge useful patterns computed 
describe basic data mining algorithms proposed extensions allow domain knowledge convenient manner 
basic algorithms ais set attributes set values called items 
subset called itemset 
number items itemset called length 
database attributes columns 
define support percentage transactions records contain itemset association rule expression itemsets 
support support rule support support confidence 
example association rule shell command history file stream commands arguments user trn rec humor indicates time user invokes trn reading news rec humor reading newsgroup accounts activities recorded command history file 
implemented association rules algorithm ideas apriori 
look correlation values different features attributes preprocessed audit data usually multiple columns features large number possible values convert data binary database 
implementation trade memory speed 
data structure frequent itemset row bit vector records transactions itemset contained 
length candidate itemset generated joining length frequent item sets row vector simply bitwise product row vectors support calculated easily counting row vector 
need perform prune step candidate generation function 
minimize memory consumption freeing row vectors length itemsets generate length itemsets 
notice database needs scanned generate list frequent itemsets length 
pre processed audit data files small fit main memory size list length item sets exceed size database implementation works application domain 
problem finding frequent episodes minimal occurrences introduced mt 
briefly event database transaction associated timestamp interval sequence transactions starts timestamp ends width interval defined itemset interval minimal occurrence contains proper sub intervals contains define support ratio number minimum occurrences contain itemset number records frequent episode rule expression window 
itemsets support support rule support support confidence 
width occurrences window 
serial episode rule additional constraint occur transactions partial time order follows follows description differs mt don consider separate window constraint lhs left hand side rule 
implementation frequent episodes algorithm utilized data structures library functions association rules algorithm 
finding correlations attribute values columns look correlations rows 
row vector interval vector pair adjacent pair boundaries interval 
temporal join function considers minimal occurrences non overlapping create interval vector candidate length itemset interval vectors length frequent itemsets support itemset easily counted number pairs interval vector 
timestamp duration service src bytes dst bytes flag telnet sf ftp sf smtp sf telnet sf smtp sf smtp sf rej smtp sf 
table network connection records axis attributes basic algorithms consider domain knowledge result generate irrelevant rules 
kmr rule templates specifying allowable attribute values post process discovered rules 
sva boolean expressions attribute values item constraints rule discovery 
drawback approaches know priori rules patterns interesting 
assume strong prior knowledge audit data 
axis attribute form item constraints 
intuitively axis attribute essential attribute record transaction 
consider correlations non axis attributes interesting 
candidate generation itemset contain value axis attribute 
consider audit data network connections shown table 
discretize continuous attribute values timestamps proper buckets 
basic association rules algorithm may generate rules src bytes lag sf rules useful degree misleading 
intuition association number bytes source src bytes normal status lag sf connection 
important information connection service axis attribute 
resulting association rules describe patterns related service attributes connections 
important axis attribute constrain item generation frequent episodes 
basic algorithm generate serial episode rules contain non essential attribute values 
example src bytes src bytes dst bytes src bytes note attribute value src bytes separate connection record 
compared association rules total number serial rules large number useless rules 
observe number iterations growing frequent itemsets length itemset bounded number rows number columns association rules usually large number 
support association rule non axis attributes high large number useless serial episode rules form see assume total records rows database time difference record seconds support number minimal non overlapping intervals records sm note intervals contains length serial episode 
assume records evenly distributed width interval kt sm large number serial patterns high window interval width threshold large max maximal length patterns large width holds 
basic algorithm find frequent associations axis attributes generate frequent serial patterns associations 
example rule service smtp src bytes dst bytes lag sf service telnet lag sf service src bytes 
effect combined associations attributes sequential patterns records single rule 
rule formalism provides rich useful information audit data 
variable attribute basic algorithms produce propositional rules 
situations may need consider order properties patterns 
general order rules require completely different algorithms add restrictive useful order extensions basic algorithms 
suppose want study behavior visits web site pre processed log timestamp remote host action request moc kw get images moc kw get images moc kw get shuttle missions sts 
ac jp get images ac jp get images ac jp get shuttle missions sts 
hip cam org get images hip cam org get images hip cam org get shuttle missions sts 
table web log records records shown table 
pre process original data discretize continuous attribute values 
suppose interested sequential request patterns visiting hosts 
example records table show requests images images shuttle missions sts highly correlated number hosts sequence requests 
rules form host request host request host request 
request associated host actual host value may rule particular host value may frequent host variable 
omit host rule requests different hosts general irrelevant 
extended frequent episodes algorithm consider variable attribute 
briefly forming itemset non variable attribute values additional condition itemset minimal occurrences sequence records value variable attribute equal 
input terminating minimum support initial minimum support axis attribute output frequent episode rules rules restricted scan database form itemsets meet find serial episodes pattern contain axis attribute value restricted append new axis attribute values restricted append episode rules output rule set rules level wise approximate mining frequent episodes level wise approximate mining important discover low frequency patterns 
example daily network traffic services example gopher account low percentages activity 
need include patterns network traffic profile representative patterns supported service 
low support value data mining algorithms get unnecessarily large number patterns related high frequency services example smtp 
propose level wise approximate mining procedure outlined finding frequent episodes 
idea find episodes related high frequency axis attribute values example service smtp src bytes service smtp src bytes service smtp src bytes 
iteratively lower support threshold find episodes related low frequency axis values restricting participation old axis values output episodes 
specifically candidate itemset generated contain new low frequency axis value 
episodes iteration consisting new axis values combination new old axis values 
example second iteration smtp old axis value get episode rule service smtp src bytes service src bytes service smtp src bytes 
procedure terminates low support value reached 
practice lowest frequency axis values 
note high frequency axis value effect omit low frequency episodes generated runs low support value interesting representative 
procedure approximate mining 
include old high frequency axis values form episodes new axis values important capture sequential context new axis values 
example infrequently auth normally occurs services smtp login 
imperative include high frequency services presenting episode rules auth 
approach different algorithms hf assume multiple concept levels deal multiple frequency levels single concept network service 
mined patterns section report experience mining audit data discovered patterns indicator gathering data basis selecting appropriate temporal statistical features learning classification models 
audit data gathering posit patterns discovered audit data protected target network system program user corresponds target behavior 
gather audit data learn target normal profile compute patterns new audit data set merge new rules existing aggregate rule set 
added new rules represent new variations normal behavior 
aggregate rule set stabilizes new rules new audit data added data gathering aggregate audit data set covered sufficient variations normal behavior 
merge rules rule right left hand sides exactly rhss combined lhss combined support values confidence values close 
concept combining similar clustering lsw 
simplify discussion consider combining lhss assume lhs just itemset ax vx 
ax axis attribute 
lhs itemset ax vx 
ax ax vx vx hold lhss cover set attributes axis values 
lhss combined adjacent values adjacent bins values 
lhs merged rule ax vx assuming larger value 
example service smtp src bytes service smtp src bytes combined service smtp src bytes 
compute statistical relevant support confidence values merged rule record support lhs db size mining rules audit data 
support lhs support lhs db size number records audit data 
approach merging rules intuition behavior slight differences audit data sets 
expect perfect exact match mined patterns 
need combine similar patterns generalized ones 
experiments test hypothesis merged rule set indicate audit data covered sufficient variations behavior 
obtained month tcp ip network traffic data ita ee lbl gov html contrib lbl conn html refer lbl dataset 
segmented data day 
data day segmented data partitions morning afternoon evening night 
partitioning scheme allowed cross evaluate anomaly detection models different time segments different traffic patterns 
case little intrusion data available building anomaly detector 
common practice audit data legitimate activities known different behavior patterns testing evaluation 
services frequent services frequent frequent smtp frequent telnet number rules vs number audit data sets describe experiments results weekday morning traffic data connections originated lbl outside world 
decided compute frequent episodes network service axis attribute 
recall section formalism captures association sequential patterns network services 
level wise approximate mining procedure infrequent services included mined patterns 
weeks mined patterns audit data weekday morning merged aggregate rule set 
rule rule set record merge count number merges rule 
note rules merged merge count sum parent rules 
merge count indicates frequent behavior represented merged rule encountered period time days 
say rules merge count min frequency frequent rules 
frequent rules reliable describing behavior verified multiple audit data sets 
freshness field rule indicates time rule merged 
age old frequent rules 
plots rule set changes merge patterns new audit data set 
see total number rules increases 
visually inspected new patterns new data set 
weeks majority related new network services slotted aloha tdma misclassification rate weekday mornings weekend mornings weekday nights days slotted aloha tdma misclassification rate weekday mornings weekend mornings weekday nights days slotted aloha tdma misclassification rate weekday mornings weekend mornings weekday nights days slotted aloha tdma misclassification rate weekday mornings weekend mornings weekday nights days misclassification rates classifier trained weekdays prior patterns aggregate rule set 
week majority just new patterns existing services 
shows rate change slows week 
examine frequent rules min frequency filter time patterns see rule sets services individual services grow slower rate tend stabilize 
set frequent rules services indicator audit data sufficient 
tested quality indicator constructing classifiers audit data weekday mornings respectively training 
services connections class labels included number temporal statistical features 
classifiers tested audit data mornings nights weekdays month weekend mornings 
shows performance classifiers respectively 
plot show misclassification rate test data 
classifiers model weekday morning traffic wish see rate low weekday morning test data high weekend morning data weekday night data 
figures show classifiers training audit data perform better 
performance classifiers close 
surprising plots set frequent rules indicator audit data grows weekday stabilizes day 
line analysis discuss ideas experiments mined patterns means understanding comparing activity behavior exhibited audit data 
fact merged rule set model new behavior gathering audit data suggests final rule set directly detect anomalies 
mining comparing specific patterns audit data discover certain known intrusion patterns exist 
words patterns misuse intrusion detection directly 
anomaly detection experiments lbl dataset final set frequent rules distinguish traffic data week weekday mornings weekends mornings week weekday nights 
similarity measure 
assume merged rule set rules size new rule set audit data set number matches number rules merged merged rule set new rule set similarity represents percentage known behavior merged rule set exhibited new audit data represents proportion behavior new audit data conforms known behavior 
shows general similarity weekday mornings larger weekend mornings weekday nights 
note general mined patterns directly classify records tell records anomaly 
valuable line analysis 
built graphical tool visually show diff rule sets 
comparing weekday morning rule set weekend morning see rule set large number patterns telnet particular machines 
due fact people showed weekend morning machine relatively frequent weekdays slotted aloha tdma similarities weekday mornings weekend mornings weekday nights similarity measures merged rule set weekday mornings machines telnet frequent 
misuse detection experiments infoworld dataset report experiments set network intrusion data infoworld contains attacks infoworld security suite evaluate leading commercial intrusion detection products msb 
refer dataset dataset 
traces tcpdump data 
contains hours normal network traffic contains hours network traffic different types attacks simulated 
summarized raw packet level tcpdump data connection records preprocessing script described section 
record included intrinsic connection features service duration flag temporal statistical features added 
attack methods intrusions leave distinct evidence short sequence time ordered connection records 
demonstrate frequent episodes program find test patterns attacks 
time window seconds 
port scan scan attacker systematically connections port service target host destination host order find ports accessible 
connection records host hosts receives connections different ports short period time 
lot connections rej flag ports normally unavailable connections rejected 
scripts descriptions intrusions search engine www com data mining strategy dst host axis attribute variable attribute find destination host frequent sequential destination host patterns evidence intrusion data patterns suggest attack example lag rej dst host lag rej dst host patterns lag rej service axis attribute dst host variable attribute large number difference services ports attempted short period time 
result service destination host sequential patterns frequent contrast normal data patterns related lag rej indicate service involved 
ping scan attacker systematically sends ping icmp echo requests large number different hosts find host available 
connection records host icmp echo connections different hosts short period time 
data mining strategy service axis attribute src host variable attribute find source host frequent sequential service patterns evidence intrusion data patterns suggest attack example service icmp echo src bytes src host service icmp echo src bytes src host service icmp echo src bytes src host 
note dst host rule suggesting icmp echo sent different hosts contrast normal data patterns 
syn flood attacker lot half open connections sending syn request establishing connection port target host order fill victim connection request buffer 
result victim able handle new incoming requests 
form denial service attack 
connection records exist host port receives lot connections flag syn request packet seen short period time 
data mining strategy service axis attribute dst host variable attribute find destination host frequent sequential service patterns evidence intrusion data strong evidence attack example service lag service lag service lag contrast normal data patterns lag 
icmp flood attacker sends large number icmp echo messages target host attempt resources kernel busy processing incoming messages 
form denial service attack 
connection records exist host sends lot icmp echo connections destination host short period time 
data mining strategy service axis attribute src host dst host variable attributes find connection host pair frequent sequential service patterns evidence intrusion data strong evidence attack example service icmp echo src host dst host service icmp echo src host dst host service icmp echo src host dst host contrast normal data patterns 
types intrusions show evidence connection record sequences attack actions embedded single connection 
section discusses mine patterns packet level data improve detection models 
feature selection construction important mined patterns basis feature selection model construction 
obvious features attributes association rules included classification models 
time windowing information attributes frequent episodes suggest statistical measures average count considered additional features anomaly detector 
classifiers briefly described previous section included number temporal statistical features count connections past seconds count connections service src bytes average duration average dst bytes experiments showed temporal statistical features count features average features classification performance worse 
general raw action packet event level data needs summarized higherlevel connection session data manually written preprocessing scripts data mining tasks 
cases experiments described section show patterns mined raw data improve preprocessing scripts patterns reveal action level characteristics suggest intrinsic system features need included connection session level records 
experiments dataset report experiments building misuse detection models attacks 
mined intrusion patterns described section construct features classification models 
connection record added temporal statistical measures connections computed prior seconds connections destination host current connection total number connections number connections flags connection establishment errors number connections rej flag number distinct different services connections service current connection total number connections number distinct source hosts number distinct destination hosts 
intrusion types normal class labels 
connection records intrusion trace training dataset remaining testing dataset 
note attack types simulated times able intrusion types represented training testing datasets 
resultant ripper classifier accuracy false positive normal classified intrusion rate false negative intrusion classified normal rate testing dataset 
rules quite intuitive 
example service flag past seconds number connections flags greater connection syn flood 
false negative rate low classifier detected scan flood intrusions described section intrusions generates large number connections labeled intrusion type 
intrusions example teardrop generate just connection sufficient bring victim host 
overlook low false negative rate 
features chosen connection records intrusions match characteristics normal connections 
need modify preprocessing script include missing system features distinctive intrusions 
minimum amount data preprocessing raw packet level data 
record features timestamp connection id connection packet data belongs head tail 
tcp protocols head flag tcp header example syn packet data packet protocols name protocols example icmp echo 
tail remaining information packet header example ack win ran frequent episodes program head axis attribute connection id variable attribute important packets different connections related 
patterns normal data surprises merely indicate packets common features protocols 
example head tail ack win head tail ack win means data packet followed acknowledgment window advertisement information 
distinct patterns intrusion data 
head frag head frag head frag tail frag tail frag tail frag suggest connections fragmented packets 
head tail ack win head tail ack win indicates connections urgent flag data packets transfered 
modified preprocessing scripts new patterns include flag connection record indicate presence urgent data packets examine packet fragments check violations tcp ip protocols include flag indicates existence violations 
resultant new ripper classifier learned new training data detected additional intrusions referred funny packet intrusions result false negative rate dropped limit automate approach 
method mining packet level audit data failed find patterns remaining undetected network intrusions 
land spoof connection faking original host port flag appears originate host port 
single syn request packet host port seen difficult frequency mining algorithms discover pattern 
zone transfer uses tcp version dns transfer large number data packets 
packet level patterns normal normal tcp connections network services transfer lot data packets 
incorporated expert knowledge connection record sake completeness 
remaining intrusions leave evidence packet header host attacks network 
section discusses incorporate evidence multiple data sources construct complete detection model consider network level host level audit data 
combining multiple detection models important reasons combining multiple detection models 
order avoid performance bottleneck easy target subversion intrusion detection system consist multiple cooperative lightweight subsystems monitors separate part access point entire network environment 
current network intrusion detection systems run gateway separates protected lan outside network 
order intrusions teardrop ping death violations fragmentation attack uses different network service exploits fact windows systems simply crash receiving urgent packets 
combining multiple cooperative intrusion detection models centralized systems detect full range intrusions guessing password gain access examine header packet data portion times password string sent 
packet go single complex checkpoint network throughput may affected 
alternatively relatively lightweight system gateway checks packet headers systems monitor activities important hosts 
global detection system combine evidence subsystems take appropriate actions 
example receiving signals host subsystem connection involves illegal activities global system instruct gateway subsystem intervene terminate offending connection 
example cooperative intrusion detection models shown 
effective intrusion detection system misuse anomaly detection components 
trained anomaly detection model normal traffic data data set 
services connections class labels 
resultant ripper rules prior knowledge intrusion able detect intrusions described section intrusions generate large number connections normal characteristics temporal statistical measures 
adding flags fragmentation urgent packets new rule sets detect funny packet intrusions misuse detection model 
reason normal rules include characteristics unique service class label normal connection regardless service flags 
hand write anomaly detection models misuse detection detect known intrusions 
believe best way intrusion detection models adaptive combining existing models new models trained new intrusion data new normal data new component network restarting entire model building process aggregate old archived audit data new data 
meta learning inductively learn meta classifier combines number pre existing base classifiers component detection models 
order obtain combined model meta classifier meta level connection records constructed attributes predictions evidence base constituent detection models class labels original connection labels normal intrusion 
machine learning algorithm applied meta level records produce combined detection model 
experiments combining adaptability section retrained new misuse detection model learning characteristics funny packet intrusions 
experimented combining old model new model trained new intrusions 
training data old model removed connection records funny packet intrusions simulate condition intrusion new appear absent old model data 
new model connection record includes flags fragmentation urgent packets temporal statistical features old models irrelevant intrusions 
done test idea new models need specialized new intrusions 
experiments showed need careful preparing training data new model 
need connection records generated intrusions intrusion records need include normal connection records part training data old model 
new model high false positive rate 
meta level connection record outputs predictions old model new model plus intrusion name class label 
resultant ripper rules expected predictions new model new intrusions predictions old model old intrusions 
example teardrop new teardrop 
meaning prediction new model teardrop connection teardrop attack 
ping scan old ping scan 
meaning prediction old model ping scan connection ping scan attack 
normal true 
meaning normal connection combined detection model slightly better performance updated model re trained entire dataset section 
false negative rate dropped compared false positive rate remained 
experiment shows new intrusions detected new set features train specialized new detection model 
meta classifier combines existing detection model new model just effective updated model retrained updated audit data set feature set 
new intrusions require new features 
conducted similar meta learning experiments scan flood intrusions 
updated detection model intrusions better performance meta classifier combines new model syn flood existing model scan flood intrusions 
meta classifier false negative rate compared detection model intrusions false positive rates 
inspected existing model updated model compared rules regarding intrusions common models 
rules updated model include distinguishing attributes features apparently effective classification 
additional class intrusion type records training data machine learning algorithm information better choices features set intrusions normal records apart 
accuracy detection model critical desirable retrain model new intrusions detectable existing features 
experiments combining effectiveness stated section intrusions attack hosts network protocols 
combine network detection models host models detect intrusions 
experimented sample dataset darpa intrusion detection evaluation dataset darpa sample dataset consists tcpdump data host bsm sun audit data 
dataset contains minutes activity intrusions example port scan ping scan guessing password built anomaly detection model network tcpdump data misuse detection model host bsm data 
bsm session records contain special attributes intrusion detection purposes example number times user intruder tries password flag indicating user intruder successfully gains access flag indicating processes terminated exit network services class labels network detection model able detect port scan ping scan intrusions anomalies actual ftp connection predicted model 
host model able detect port scan intrusions missed network model example guessing password 
constructed meta level connection records predictions network model host model 
network detection model uses services class labels convert original predictions normal predicted service actual abnormal 
connection records may corresponding session records bsm data connections destined hosts running bsm 
records simply repeat predictions network model corresponding meta level records 
resultant meta classifier normal intrusion types currently dataset contain host audit data infoworld agreed gather data research purposes 
darpa dataset preparation small sample datasets available 
expect receive large amount high quality audit data coming weeks conduct extensive experiments 
class labels detects intrusions abnormal predictions network model detect ping scan host model predictions detect port scan guessing password 
note intrusions detected anomaly detector missed misuse detector resultant meta classifier combines anomaly detector misuse detector needs anomaly detector 
related quite new research efforts intrusion detection 
shown short sequences run time system calls system program identity :10.1.1.47.6145
analyze program short sequences system calls looked normal database contains exhaustively gathered short sequences normal runs 
large degree mismatches suggests program attacked exploited 
normal database anomaly detection model 
approach simple suited system programs 
number possible execution paths program limited theory build normal database exhausts possible sequences 
network traffic patterns user behavior general unlimited shift evolve 
lb algorithms modeling user behavior discussed 
idea match user command sequences established profiles 
various heuristics partial string matching introduced 
approach limited 
example algorithms assume user commands command options arguments tuples collapsed single dimension string command options arguments 
converting multi attribute connection session records single attribute string appropriate attribute carries distinct important information 
section demonstrates important able analyze data different combinations attributes 
dc detector constructor fp rule learning step obtain customer fraudulent patterns rule selection obtain set general fraudulent patterns entire population 
monitor construction step obtain sensitivity measures different users general patterns 
final detector classifier trained records attributes features outputs monitors sensitivity measures 
face greater challenges feature selection construction 
dc assumes call data set base level attributes 
need carefully preprocess raw audit data meaningful connection session records 
dc need consider temporal statistical features form base level attributes call data 
critical requirement effective network intrusion detector 
outlined approach building intrusion detection models 
proposed association rules frequent episodes audit data guide audit data gathering feature selection critical steps building effective classification models 
incorporated domain knowledge basic algorithms axis variable attribute levelwise approximate mining procedure 
experiments real world audit data showed algorithms effective 
intrusion detection models need adaptive changing environments new intrusion methods 
show promising results meta learning mechanism incrementally incorporate new models intrusion detector 
tools steps framework example frequent episode programs find specific patterns fully automatic need manually inspect patterns 
need provide support rule templates kmr patterns post processed query results users 
important include users knowledge discovery tasks 
implementing support environment integrates iterative processes selecting features building evaluating classification models 
environment graphically presents patterns list attributes features time windowing information user allows formulate classification task build test model classification engine jam spt 
acknowledgments grateful stephanie forrest university new mexico providing sendmail system call data stuart mcclure infoworld supplying data set 
benefited depth discussions alexander tuzhilin new york university suggestions charles elkan uc san diego foster provost bell atlantic science technology 
wish phil chan florida institute technology andreas prodromidis wei fan columbia university help encouragement 
ais agrawal imielinski swami 
mining association rules sets items large databases 
proceedings acm sigmod conference management data pages 
agrawal srikant 
fast algorithms mining association rules 
proceedings th vldb conference santiago chile 
bel bellovin 
security problems tcp ip protocol suite 
computer communication review april 
coh cohen 
fast effective rule induction 
machine learning th international conference lake ca 
morgan kaufmann 
cs chan stolfo 
parallel distributed learning meta learning 
aaai workshop knowledge discovery databases pages 
forrest hofmeyr somayaji longstaff :10.1.1.47.6145
sense self unix processes 
proceedings ieee symposium security privacy pages los alamitos ca 
ieee computer society press 
fp tom fawcett foster provost 
adaptive fraud detection 
data mining knowledge discovery 
gm morris 
unix system security 
bell laboratories technical journal october 
hf han fu 
discovery multiple level association rules large databases 
proceedings th vldb conference zurich switzerland 
maccabe 
architecture network level intrusion detection system 
technical report computer science department university new mexico august 
ikp ilgun kemmerer porras 
state transition analysis rule intrusion detection approach 
ieee transactions software engineering march 
jacobson leres mccanne 
tcpdump 
available anonymous ftp ftp ee lbl gov june 
kmr klemettinen mannila ronkainen toivonen verkamo 
finding interesting rules large sets discovered association rules 
proceedings third international conference information knowledge management cikm pages md 
ks kumar spafford 
software architecture support misuse intrusion detection 
proceedings th national information security conference pages 
lb lane brodley 
sequence matching learning anomaly detection computer security 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
ls lee stolfo :10.1.1.134.4855
data mining approaches intrusion detection 
proceedings th usenix security symposium san antonio tx january 
lsm lee stolfo mok 
mining audit data build intrusion detection models 
proceedings th international conference knowledge discovery data mining new york ny august 
aaai press 
appear 
lsw lent swami widom 
clustering association rules 
proceedings thirteenth international conference data engineering birmingham uk 
ltg lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
technical report computer science laboratory sri international menlo park california february 
lun teresa lunt 
detecting intruders computer systems 
proceedings conference auditing computer technology 
msb stuart mcclure joel john 
test center comparison network intrusion detection solutions 
infoworld may 
infoworld 
mt mannila toivonen 
discovering generalized episodes minimal occurrences 
proceedings second international conference knowledge discovery databases data mining portland oregon august 
mtv mannila toivonen verkamo 
discovering frequent episodes sequences 
proceedings international conference knowledge discovery databases data mining montreal canada august 
spt stolfo prodromidis lee fan chan 
jam java agents meta learning distributed databases 
proceedings rd international conference knowledge discovery data mining pages newport beach ca august 
aaai press 
sun sunsoft mountain view ca 
basic security module guide 
sva srikant vu agrawal 
mining association rules item constraints 
proceedings rd international conference knowledge discovery data mining pages newport beach california august 
aaai press 
ubc utgoff berkman clouse 
decision tree induction efficient tree restructuring 
machine learning october 
