proceedings aisb workshop architectures data standards nlp edinburgh april 
experience language engineering architecture years gate hamish cunningham robert gaizauskas kevin humphreys yorick wilks natural language processing group institute language speech hearing department computer science university sheffield 
dcs shef ac uk 
gate general architecture text engineering aims provide software infrastructure researchers developers working area natural language processing 
version gate widely available years 
review objectives motivated creation gate functionality design current system 
discuss strengths weaknesses current system identify areas improvement plans implementing improvements 
think re researching human language processing probably writing code ffl store data disk ffl display data ffl load processor modules data stores processes ffl initiate administer processes ffl divide computation client server ffl pass data processes machines 
domain specific software architecture language processing 
parameterise deployment applications software require low level optimisation purposes main activities carried infrastructure language sciences researcher field 
go say shouldn reinvent components resources outside job 
statistician doesn need know details ieee floating point computation standard discourse processing specialist doesn need understand ins outs part speech tagging worse install particular pos tagger particular machine 
re professional mathematician probably regard tool spss mathematica necessary infrastructure 
re computational linguist language engineer chances large parts infrastructural support 
infrastructure tends specific restricted areas 
gate general architecture text engineering cunningham represents attempt fill gap language processing years experience gate began widespread release late 
system currently pivotal point development new version drawing board appropriate cast critical eye progress far plans 
section context architecture want 
section describes gate current form 
section discusses strengths weaknesses system draws pointers improvement system 
section presents plans implementing improvements gives final remarks 
view text line see www dcs shef ac uk hamish html 
infrastructure language processing infrastructure mean natural language processing nlp 
sorts tasks delegated general tool left individual projects position took designing gate focus common elements nlp systems 
useful tools performing specific tasks developing feature structure grammars evaluation unification collecting statistical measures corpora 
varying extents entail adoption particular theories 
common factor nlp systems alas create information text 
developers systems create modules data resources handle text store data exchange various modules compare results test runs generally spend inordinate amounts time pouring samples really enjoying slurp relaxing 
types data structure typically involved large complex tools manage allow succinct viewing data potential 
stage progress field really write tree viewing program output syntax analyser example significant get existing viewing tool process data 
addition common language processing tasks solved acceptable degree previous reused 
writing new part speech tagger sentence splitter list common nominal compounds available store reusable tools data plugged new systems minimal effort 
reuse common installation integration problems solved afresh case cunningham 
sum defined infrastructure architecture development environment architecture macro level organisational pattern components data resources language processing system development environment adds graphical tools access services provided architecture 
gate gate version things ffl manages textual data storage exchange ffl supports visual assembly execution modular nlp systems plus visualisation data structures associated text ffl provides plug modularity text processing components 
architecture subsystems ffl gdm gate document manager ffl ggi gate graphical interface ffl creole collection reusable objects language engineering 
gdm manages information texts produced consumed nlp processes ggi provides visual access data manages control flow creole set resources far integrated 
developers working gate subset creole basic tasks tokenisation sentence paragraph identification part speech tagging 
add modify modules specific tasks 
single api accessing data storing data back central database 
lines configuration information allow system display data friendly graphical form including tree diagrams appropriate 
system takes care data storage module loading deliver embeddable subsystems stripping graphical interface 
supports modules language including prolog lisp perl java tcl 
strengths weaknesses gate proved successful number contexts users reporting variety system example ffl teaching undergraduates 
colleagues umist universities edinburgh sussex reported system teaching universities stuttgart 
ffl information extraction english swedish french spanish greek 
colleagues fribourg university collaborated french system athens developing greek system university gothenburg swedish system university catalonia barcelona working spanish 
ffl integrating information extraction information retrieval 
naval office san diego gate research text summarisation ir integration 
ffl integrating national collection nlp tools swedish 
see www sics se projects ffl gothenburg athens system adding name recognition mt systems language pairs improve performance unknowns 
ffl speech hearing group sheffield modelling vocabulary language vie gate gotoh 
gate architecture ffl numerous locations diverse israel copenhagen surrey system avoid having write simple things sentence splitters scratch enable visualisation management data 
abstracting experiences users sheffield gate strengths summarised ffl facilitating reuse nlp components reducing overheads integration documentation data visualisation ffl facilitating multi site collaboration research providing modular base line system vie experiment ffl facilitating comparative evaluation different methods making easy interchange modules ffl facilitating task evaluation internal components taggers parsers systems materials arpa muc programme grishman sundheim scoring software available gate parseval tree scoring tool harrison generic annotation scoring tool ffl contributing portability nlp systems problem domains providing markup tool generating training data example learning take input alembic tool day purpose edinburgh sgml processing library mckelvie 
weaknesses system areas underdeveloped lacking polish 
rough order severity 
version biased algorithmic components language processing neglects resource components 

version biased text analysis components neglects text generation components 

visual interface complex somewhat nonstandard 

installing supporting system skilled job runs better platforms unix vs windows 

sharing modules depends sharing annotation definitions isomorphic transformations relatively easy implement 

caters textual documents multimedia documents 

supports bit character sets 
points 

compromise generality system limited take number creole modules integrated system 
modules taggers parsers discourse analysers just performs analysis task gate integration model provides convenient powerful abstraction layer storing information association text analysis 
resources lexicons corpora layer exists 
similarly modules generation side tasks text analysis utility text model limited 
version main aim extend creole cover core areas language engineering possible 
support aim gdm ggi developed number significant ways purposes discuss viz 
extension currently process oriented resources set include predominantly data resources lexicons ontologies thesauri corpora 
progress decade provision large scale resources type wilks despite various standards initiatives barriers data resource reuse ffl resource representation syntax corresponding access mode relational databases case celex custom api prolog representation wordnet sgml case british national corpus ffl resources installed locally usable precisely happens operating systems supported varies site site 
consequences bullet linguistic resources normally share structure obvious level lexicons organised words word strings commonality wasted new resource developer learn afresh seeks investigate exploit commonalities resources link lexicons ontology build layer access routines top resource 
example wish task evaluation lexicons measuring relative performance information extraction system different instantiations lexical resource writing code translate different resources sql sgml 
consequence second bullet way try buy way examine data resource suitability needs licensing 
correspondingly way resource provider give limited access products advertising purposes gain revenue piecemeal supply sections resource 
address problem plan develop common model various resources types implemented java distributed server non local access distribute code required map model 
common model language data resources propose set inheritance hierarchies 
top hierarchies general abstractions resources thesaurus groups synonyms leaves data items specific individual resources wordnet synsets glosses 
program access available levels allowing developer select appropriate level commonality application 
note exciting element provide algorithms dynamically link common resources connecting eurowordnet ldoce proposal develop new resources simply improve access existing ones 
notice proposal language data quite separate compatible lexical data compression ideas datr evans gazdar 
way new standards initiative way build previous initiatives 
issues standards experience repositories lexical materials crl consortium lexical research suggests resources standardised formats deposited 
proposal acknowledges de facto diversity lexical resource format attempts render resources usable language engineering 
details approach may cunningham 

gate system ec fourth framework projects installed sites worldwide 
adopted tipster programme part final architecture capabilities platform available free charge licence sheffield 
collective experiences sizeable user base eu system claim viable nlp certain sections field 
development hope take role wider variety tasks 
supported epsrc gr nato science crg arpa contracts tipster programme contract max planck institute nijmegen 
cunningham freeman black 
software reuse object oriented frameworks natural language processing 
new methods language processing september manchester 
published ucl press 
cunningham humphreys gaizauskas wilks 
software infrastructure natural language processing 
proceedings fifth conference applied natural language processing anlp pages 
available xxx lanl gov ps 
cunningham peters bontcheva wilks 
level playing field language resource evaluation 
workshop distributing accessing lexical resources conference language resources evaluation granada spain 
day aberdeen hirschman kozierok robinson vilain 
mixed initiative development language processing systems 
proceedings th conference applied nlp systems anlp 
evans gazdar 
datr language lexical knowledge representation 
linguistics 
gotoh steve renals rob gaizauskas williams hamish cunningham 
named entity tagged language models lvcsr 
technical report cs department computer science university sheffield 
grishman sundheim 
message understanding conference brief history 
proceedings th international conference computational linguistics pages copenhagen 
harrison abney black flickinger grishman hindle ingria marcus santorini strzalkowski 
evaluating syntax performance parser grammars english 
proceedings workshop evaluating natural language processing systems 
association computational linguistics 
mckelvie brew thompson 
sgml basis data intensive nlp 
proceedings fifth conference applied natural language processing anlp 
wilks guthrie slator 
electric words 
mit press cambridge ma 
