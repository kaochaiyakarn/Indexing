completeness consistency analysis state requirements mats heimdahl michigan state university nancy leveson university washington describes methods automatically analyzing formal state requirements specifications completeness consistency 
approach uses low level functional formalism simplifying analysis process 
state space explosion problems eliminated applying analysis high level abstraction generating reachability graph analysis analysis performed directly model 
method scales large systems decomposing specification smaller analyzable parts functional composition rules ensure verified properties hold entire specification 
analysis algorithms tools validated tcas ii complex airborne system required commercial aircraft passengers fly airspace 
describes methods tools automatically analyzing software requirements completeness consistency 
completeness context defined complete set requirements behavior specified possible input input sequence 
previously defined formal criteria requirements completeness safety simple mealy machine model called rsm requirements state machine 
useful criteria need translated analysis procedures applied real specification languages 
addition analysis needs efficient scale applicable real system descriptions 
approaches requirements analysis include methods process algebras rr rr reachability analysis model checking 
process algebras appear proceedings th international conference software engineering seattle april 
powerful tools suitable formal proofs 
unfortunately languages process algebras difficult layman suitable requirements languages 
formal proofs notoriously difficult perform reason doubt scale complex systems 
reachability analysis global state space successfully analysis communication protocol specifications hol hol ghp 
reachability analysis relies generation global reachability graph quickly running state space explosion problems 
model checking conceptually simple applied wide variety languages application areas ces ag 
model checking relies global reachability graph suffers state space explosion problems 
model checking applied large models bcm systems simple repetitive elements commonly hardware software 
model checkers currently unable handle specification complex tcas ii requirements specification 
approach differs previously published analysis techniques performs analysis directly high level graphical model generating global reachability graph 
analysis conceptually simple eliminates problem state space explosion 
approach outlined applied state languages demonstrate requirements specification language called rsml requirements state machine language developed irvine safety research group real aircraft collision avoidance system called tcas ii testbed 
rsm underlying formal model analysis criteria defined desirable characteristics requirements specification language 
solve problem higher level language rsml features statecharts hp developed 
ensure formal rsml specification language associated analysis algorithms tools appropriate large realistic systems testbed specification developed tcas ii 
testbed currently develop validate various types analysis algorithms tools underlying formal model 
tcas ii described head program faa complex system incorporated avionics commercial aircraft 
provides challenging experimental application formal methods real system 
gives short graphical rsml notation outlines formal hierarchical definition rsml demonstrates compositional properties formalism perform completeness consistency analysis generation part reachability graph discusses automated analysis procedures properties 
examples application automated analysis tcas ii provided 
rsml language rsml aspects similar statecharts david harel hp har 
statecharts finite state machines augmented hierarchy parallelism modularity 
superstate example 
rsml borrows notions decomposition broadcast communication statecharts arrays conditional connectives statecharts 
features interface descriptions directed communication state machines missing statecharts added rsml 
syntactic notation modified easier application experts computer scientists read review specification 
syntactic extensions necessary model realistic problem small examples research papers 
semantics statecharts slightly modified dynamic behavior model intuitive 
statecharts action event causing action considered occur instant time potentially allowing reversal causal ordering 
rsml enforces rigorous causal ordering event action pairs hei 
rest section gives short rsml outlines formal semantics described functions compositions functions 
complete description rsml notation semantics reader referred hei 

statecharts rsml states may grouped see fig 

groupings reduce number transitions allowing transitions superstate requiring explicit transitions grouped states substates 
ways enter superstate 
transition superstate may superstate border transition 
case default state specified superstate 
example state entered transition alternatively transition may particular state inside superstate transition 
superstate may transitions border number inner states 
analogous transition superstate transitions superstate originate border 
example transition labeled leaves superstate leaves states inside superstate 
decomposition 
important innovations statecharts harel calls parallel state contains state machines separated dashed borders fig 

parallel state entered state machines entered 
state machines exited transition taken parallel state 
parallel states greatly reduces size specification 
example estimate tcas system complete parallel states known orthogonal products product states states 
parallel state reachability graph contains states graphical state diagram rsml specification tcas approximately states fits pages 
syntax parallel states statecharts rsml semantic definition changed address issue causal ordering mentioned see complete comparison 
transition definitions 
transition definitions rsml contain parts identification source destination transition location triggering event guarding condition output action 
identification location triggering event required parts 
fig 
shows form transition definition rsml 
transitions taken occurrence trigger event provided guarding condition true 
guarding condition defines true transition taken specified tables described 
output actions identify events generated transition taken 
tables 
statecharts predicate calculus describe guarding conditions transitions har 
tcas external reviewers including avionics engineers component engineers airline representatives pilots find notation natural 
decided tabular representation boolean formulas expressed disjunctive normal form dnf call tables see fig 
example tcas ii requirements 
far left column table lists predicates columns conjunction predicates contains logical values expressions 
columns true table evaluates true 
column evaluates true elements true 
dot denotes don care 
functional framework hierarchical parallel structure finite state machines rsml formally described david harel higraphs statecharts hp har har 
definitions structure state machines rsml identical statecharts 
dynamic behavior rsml defined significantly different transition esl gamma 
esl location aircraft effective sl trigger event auto sl evaluated event condition auto sl state asl delta auto sl asl asl asl asl asl delta delta lowest ground delta delta mode selector fta ra ta delta mode selector ta delta delta output action effective sl evaluated event transition definition tcas ii 
way 
semantics statecharts defined operational model 
algorithm defines state calculated current state external input ps 
hand definition rsml uses mathematical functions functional composition define semantics 
approach introduces compositionality language simplifies algorithms check completeness consistency 
rsml state machine described tuple oe finite set states 
states model different global system states system 
important note difference elements states global state 
due hierarchical parallel nature state machine global state described set states 
oe function mapping state set states 
function defines hierarchy parent child relation state values 
graphical notation visualized containment 
example fig 
page state contains states fb kg oe fb kg 
partitioning function 
partitions descendants state disjoint sets known parallel state components 
partitions state descendants mutually exclusive 
example fig 
partitions descendants disjoint sets 
graphical notation visualized dashed lines 
fb cg fd gg set containing input output histories traces model 
power set initial global state machine theta 
global state composed set states known configuration machine set variable traces 
initial global state fig 
defined pair fa jg 
relation defining state changes machine possible changes output variables 
mapping 
theta 
relation referred behavior relation global state relation 
global model state state hierarchy governed oe maps global state definition restrictions relation relation mathematical function defined possible states highly desirable properties requirements specifications satisfied ffl model response specified possible input complete ffl model conflicting requirements consistent ffl model deterministic 
really essence difference approach 
allowing state function defined way analysis procedures difficult working hard find analysis procedures limit state function language semantic definition way analysis easy 
analysis algorithms simple performed directly model needing generate part reachability graph 
accomplish goal slight semantic changes statecharts state function 
changes easier reviewers interpret model correctly satisfied intuitive understanding state machines better 
fact changes semantics writing tcas specification discovered changes simplify analysis 
just confirms hypothesis occasionally raised languages formal semantic definitions simple easiest users understand correctly 
section shows global state relation viewed function composed simpler functions defined graphical notation transitions states 
compositions hierarchies parallelism defined functions oe enforce rigorous structure elements global state state mapping defines dynamic behavior 
model system nontrivial behavior mapping complex 
mapping viewed composition smaller complex mappings 
viewed composed simple functions mapping state state 
graphical rsml notation transition defined simple function 
domain simple function defines source state tail arrow leaving guarding condition transition 
image function defines destination state head arrow enters possible output 
functions composed depending structure particular state machine considered events defined transition 
noted earlier statecharts operational definition semantics opposed semantic description functional composition rsml 
operational definition enforce simple mathematical structure definition definition semantics compositions simple functions 
semantics rsml defined known compositions union union functions merges domain functions 
definition functional properties maintained union dom dom card hg union composition functions allowed domains functions overlap domains overlap functions identical behavior elements intersection serial serial composition ffi corresponds normal functional composition 
definition functional composition ffi allowed iff dom im informally serial composition allowed image function applied subset domain second function second function defined possible results function 
parallel parallel application denoted hh gi 
parallelism modeled interleaving arbitrary ordering functional applications 
definition parallel composition allowed iff dom im dom im parallel composition allowed possible serial compositions allowed 
ffi ffi ordering functional application important parallel composition lead nondeterminism properties function lost 
notation card denote cardinality set sample state machine 
model viewed nondeterministic considered nondeterministic relation 
critical systems undesirable leave behavior underspecified 
define requirements completeness specification sufficient distinguish behavior desired software undesired program designed 
nondeterministic specifications hide dangerous incompleteness sense 
behavior satisfactory desirable application experts involved requirements development example customers requirements analysts reviewers representatives regulatory agencies decision acceptable behavior leaving decisions qualified personnel development lifecycle 
example show nondeterminism tcas specification unplanned serious safety implications obvious developing specification 
possible alternatives preferable decision needs application experts programmers 
behaviors identical respect desired system qualities highly problem determining 
easier validate specific deterministic behavior acceptable show possible nondeterministic behaviors acceptable 
union composition occurs transitions triggered event 
example functions representing transitions fig 
assuming triggered event composed union 
transitions triggered event parallel state components composed parallel 
fig 
transitions composed parallel 
serial application caused event propagation mechanism provided statecharts rsml 
assume transition triggered external event generates event action 
event picked transition triggered evaluated second 
modeled applying functions representing series ffi 
way complete behavior model hierarchically defined composition behaviors parts 
atomic state state descendants transitions defined behavior functions defining transitions involved 
definition behavior atomic state oe behavior set states grouped parallel state component defined union behaviors states included component functions introduced level abstraction transitions states 
notation denotes functions transitions introduced parallel state component fig 
function represented belongs 
definition behavior parallel state component gn informally parallel state component behaves states state currently transitions states contained component 
behavior composed state superstate defined parallel composition parallel state components 
set enumeration parallel state components oe partitioned fig 
oe partitioned parallel state components 
definition behavior composed state oe hg ks informally composed state behaves components executing parallel 
rules defined govern behavior specific event transitions model triggered event composed rules 
behavior individual events model modeled way 
event generated function defined behavior behavior generated composing transitions triggered applied new system state calculated 
remaining part model event propagation mechanism 
output actions associated transitions associated functions 
function applied new system state calculated new function applied output actions previous function 
complete behavior model including parallelism event propagation modeled functional composition 
formal definition complete set rules composition hei 
analysis approach relation defining dynamic behavior model function completeness consistency determinism assured 
investigating fairly simple compositions defining dynamic behavior system properties investigated 
analysis approach compositional properties semantic definition 
base step analysis assure transitions atomic states conflict leave behavior undefined requirements complete respect individual atomic states 
way guarantee model state transition defined independently input arrives model boundary 
rules union parallel serial composition applied show behavior entire hierarchical parallel machine complete consistent investigating functional compositions ensure completeness consistency properties verified single state compromised hierarchies parallelism event propagation 
section outlines algorithms analyzing model satisfaction functional properties 
union composition union composition requires domains functions describing transitions involved composition disjoint transitions state satisfied time 
addition functions require entire domain covered 
satisfiable transition state independent input arrives model boundary 
guarding conditions transitions pairwise compared see mutually exclusive 
transitions guarding conditions mutually exclusive represent conflicting requirements 
addition logical conditions transitions state form tautology conditions behavior specified requirements incomplete 
rsml conditions represented tables 
conditions state transition tcas ii quite complex resulting cases large tables requiring costly logical operations transitions satisfiability boolean functions known np problem 
analysis tools binary decision diagrams bdds bry manipulation conditions 
bdds data structures represent boolean functions canonical form 
bdds boolean formula manipulation performed time linear size bdd structure 
unfortunately worst case size bdd structure exponential size number terms boolean function representing 
worst case performance rare experimentation conditions tcas ii requirements shown bdd manipulation largest conditions document problem 
number nodes bdd structure grew larger nodes representing boolean function terms time required perform bdd manipulations negligible compared time needed perform formatting output data 
note optimization predicate enumeration performed 
growth rate bdd structure sensitive enumeration predicates included structure 
appropriate heuristics guiding enumeration believe size bdd structures generated tables significantly reduced 
serial composition serial application functions arises event propagation mechanisms provided rsml statecharts 
transition triggered event may generate event action occurs transition taken generated 
event may trigger transition model 
event generated trigger transition event generated error transitions triggered event missing requirements 
serial composition functions requires image function subset domain second function 
graphical model requirement implies event generated transition model ready triggered event 
states set transitions enabled ready taken model specific state 
bottom pass state hierarchy states annotated transitions enabled state 
possible annotate state states exist global state description 
annotation straight forward assure events generated actions lost 
parallel composition parallel composition occurs transitions parallel state machines triggered event events generated simultaneously truth value guarding condition transition affected state change caused parallel transition exists possibility nondeterminism transitions said conflict 
pairwise comparison parallel transitions assure determinism transitions conflict model deterministic 
pairwise comparison parallel transitions potential costly worst case transitions parallel algorithm requires comparisons number transitions model 
fortunately number parallel transitions real systems fairly limited straight forward approach shown adequate analyze major part large real life system tcas ii determinism hei 
summary algorithms outlined high worst case complexity 
example checking union compositions exponential respect size guarding conditions checking determinism respect number parallel transitions 
functional composition approach algorithms fairly small problems individual compositions complexity acceptable 
compositional approach allows determine properties maintained hierarchies parallelism event propagation introduced avoids problems combinatorial explosion problem size exponential growth analysis effort 
contrast analyzing structures model checking notion completeness require generation annotation complete reachability graph 
experiments described section shown approach analysis effectively applied large systems 
automated analysis tools evaluation tcas ii manually assuring completeness consistency extremely tedious time consuming error prone task 
tool support analysis algorithms implemented integral part simulator rsml 
simulator accepts textual representation rsml notation allows execution requirements specification 
prototype graphical interface allows browsing specification animation executions 
analysis tools outlined previous section integrated simulator 
addition results analysis algorithms reporting inconsistency incompleteness nondeterminism tools generate useful information uses hierarchies event propagation tables 
tcas specification effort originally planned experimental government industry groups responsible tcas ii liked rsml specification adopted official faa tcas ii requirements specification 
result initial specification subjected extensive expensive independent verification validation iv effort 
applied analysis techniques described major parts tcas ii requirements specification 
initial comparison errors iv automated analysis indicates inconsistency problems iv automated analysis tools 
addition subtle inconsistency problems iv consistency problems expected detected analysis progresses 
instances incompleteness detected analysis procedures 
unfortunately able correlate results iv effort iv effort include inspection incompleteness 
iv conditions state changes take place reviewed conditions state changed addressed 
rest section provides examples types problems analysis exposes 
drawbacks current implementation analysis procedures discussed 
completeness tcas requirements developed complete incompleteness abundant document 
example document suffices illustrate complexity developing complete requirements problems current implementation analysis tools 
tcas concept sensitivity level determine close intruder allowed get advisory pilot 
higher sensitivity level indicates sensitive setting tcas ii advisory generated earlier planes farther apart 
example taken auto sl concept sensitivity level mainly aircraft altitude 
consider transition fig 

transition defines model stays auto sl state asl 
automated transition asl gamma 
asl location aircraft auto sl trigger event descend inhibit evaluated event condition air status ground traffic display permitted delta mode selector standby delta output action auto sl evaluated event identity transition auto sl state asl transition asl satisfied true standby 
state 



airborne valid 
eq 
tara 


state 

state 










state 











completeness analysis result auto sl state transition asl gamma 
asl location aircraft auto sl trigger event descend inhibit evaluated event condition air status ground traffic display permitted delta delta delta delta delta delta delta delta delta mode selector standby delta delta delta delta delta delta delta delta delta climb desc inhibit delta delta air status airborne radar bad cycles delta delta delta delta delta delta delta delta eq delta delta delta delta delta delta effective sl esl esl esl delta delta delta delta delta delta delta delta delta effective sl state esl delta delta delta delta delta delta delta effective sl state esl delta delta delta delta delta delta delta delta effective sl state esl delta delta delta delta delta delta delta delta delta effective sl state esl delta delta delta delta delta delta delta delta delta alt barometric delta delta delta delta delta delta delta alt barometric delta delta delta delta delta delta delta delta alt barometric delta delta delta delta delta delta delta delta delta alt barometric delta delta delta delta delta delta delta delta delta alt barometric delta delta delta delta delta delta delta delta delta alt radio delta delta delta delta delta delta delta delta alt radio delta delta delta delta delta delta delta delta output action auto sl evaluated event transition modified completeness transition asl satisfied true standby 
airborne 

esl esl esl 
state esl 
state esl 
state esl 
state esl 
equals tara 
example false alarms analysis techniques detected incompleteness transition state satisfied condition descend inhibit evaluated event occurred shown fig 
analysis result reflects conditions transition state taken 
abundance predicates results diversity guarding conditions transitions state 
diversity extremely difficult manually determine conditions behavior specified 
analyst determine response model conditions identified analysis modify guarding conditions transitions model complete fig 

case desired behavior stay asl conditions identified analysis 
general case transition modified order cover forgotten conditions 
results analysis complete model seen fig 

model complete respect state asl descend inhibit analysis reports problems 
spurious error reports artifacts prototype tools 
type system included tools certain contradictions detected 
example variable air status take values airborne making columns table contradictions 
similarly state machine effective sl states esl esl esl esl esl esl esl making columns contradictions 
spurious error reports problem analysis 
spurious reports similar ones described easily eliminated manual inspection 
potential excessive false reports problem addressed version tools 
inclusion type system possible addition extended theorem proving capabilities eliminate problem 
analysis result simplified fit page limit 
original table approximately twice wide 
effective sensitivity level esl esl esl esl esl esl esl effective sensitivity level consistency consistency problem exists guarding condition transition satisfied simultaneously 
state machine modeling effective sl state machine related auto sl seen fig 

bar side transition bus 
state machines model fully interconnected transitions states machine transition bus introduced graphical representation cleaner 
inconsistency detected transitions esl esl fig 
page esl esl fig 
page 
inconsistency reported analysis tool seen fig 
column transitions satisfied condition 
sensitivity level represents sensitive setting represents advisories shut warnings pilot potentially hazardous inconsistency 
evaluation inconsistency determined guarding condition transition esl weak needed strengthening fig 

unfortunately correcting inconsistency simple strengthening guarding condition transitions involved inconsistency 
inconsistencies arose logical errors requirements extensive redesign part requirements document needed 
approaches requirements specification concerned kind inconsistency simply viewed nondeterminism accepted part requirements 
mentioned section view nondeterminism conflicting requirements eliminated 
basis previous definition criteria complete specification believe important critical systems 
case nondeterminism negative effect safety 
transition esl gamma 
esl location aircraft effective sl trigger event auto sl evaluated event condition auto sl state asl delta delta auto sl asl asl delta delta delta lowest ground delta delta delta lowest ground delta delta delta delta lowest ground delta delta delta delta mode selector fta ra delta delta delta mode selector ta delta delta delta delta mode selector fta ra ta delta delta delta delta mode selector delta delta delta delta output action effective sl evaluated event transition effective sl esl esl esl 
esl conflicts esl 
esl state asl asl asl asl asl asl equals tara state asl consistency analysis results effective sl state esl transition esl gamma 
esl location aircraft effective sl trigger event auto sl evaluated event condition auto sl state esl mode selector standby output action effective sl evaluated event modified transition effective sl esl esl outlined functional framework enabling compositional static analysis state requirements showed analysis fundamental qualities requirements specifications completeness consistency automated 
feasibility analysis demonstrated analyzing major parts real life avionics system tcas ii 
approach outlined advantages ffl analysis require generation part global reachability graph ffl enables incremental analysis requirements 
requirements analyzed completed individual results combined stage 
ffl helps identify parts requirements needing re analysis changes document 
ffl conservative approach guaranteed incompleteness inconsistency nondeterminism go undetected 
get advantages limiting semantics specification language described functional composition 
doing give freedom defining semantics language models allow users build 
believe increased power analysis perform complex models comparison current approaches model checking tradeoff worthwhile 
addition changes originally semantics statecharts led rsml order semantics step evaluation match intuition tcas reviewers meshed attempts define simple practical analysis algorithms 
nondeterminism eliminated language increased difficulty tcas reviewers understanding model finding errors 
restrictions advantages correctness analysis cause loss flexibility language design 
long term goal provide suite analysis tools help find wide variety flaws software requirements early software development 
desirable properties requirements specification defined jaffe non reachability hazardous states robustness properties 
goal formally define properties rsml framework develop new ones suitable new framework provide efficient automated analysis procedures properties 
ag gannon 
state model checking event driven system requirements 
proceedings acm sigsoft conference software critical systems 
software engineering notes 
volume number 
bcm burch clarke mcmillan dill hwang 
symbolic model checking states 
proceedings fifth annual symposium logic computer science june 
bruns gerhart forman graf 
design technology assessment statecharts approach 
technical report stp mcc march 
bry bryant 
graph algorithms boolean function manipulation 
transactions computers august 
clarke browne emerson sistla 
temporal logic automatic verification finite state systems 
apt editor logics models concurrent systems pages 
springer verlag berlin 
ces clarke emerson sistla 
automatic verification finitestate concurrent systems temporal logic 
transactions programming languages systems april 
ghp patrice godefroid gerhard holzmann 
state space caching revisited 
proceedings fourth workshop computer aided verification pages 
har harel 
statecharts visual formalism complex systems 
science computer programming 
har harel 
visual formalisms 
communications acm may 
hei mats heimdahl 
static analysis state requirements analysis internal completeness 
phd thesis university california irvine 
hol gerhard holzmann 
tracing protocols 
technical journal december 
hol gerhard holzmann 
automated protocol validation argos assertion proving scatter searching 
ieee transactions software engineering june 
hp harel pnueli 
development reactive systems 
apt editor logics models concurrent systems pages 
springerverlag 
jaffe leveson heimdahl 
software requirements analysis real time process control systems 
ieee transactions software engineering march 
leveson heimdahl hildreth reese 
tcas ii requirements specification 
leveson heimdahl hildreth reese 
requirements specification process control systems 
ieee transactions software engineering appear 
ps pnueli shalev 
step 
klop meijer rutten editors de baker pages 
cwi amsterdam 
rr ravn 
requirements capture computer systems 
technical report id dth hr technical university denmark october 
rr ravn 
requirements capture embedded real time systems 
imacs symposium 
