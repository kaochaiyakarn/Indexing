limit control flow analysis regression test selection thomas ball lucent technologies bell laboratories rd room il usa research bell labs com automated analyses regression test selection rts attempt determine modified program run test behavior old version program run running new program rts analyses confront price performance tradeoff precise analysis able eliminate tests take longer run 
focus application control flow analysis control flow coverage relatively inexpensive analyses rts problem considering precision rts algorithms affected type coverage information collected 
define strong optimality condition edge optimality rts algorithms edge coverage precisely captures algorithm report re testing needed actuality 
reformulate rothermel harrold rts algorithm new algorithms improve culminating algorithm 
consider path coverage improve precision rts algorithms 
keywords regression testing control flow analysis coverage profiling goal regression test selection rts analysis answer question inexpensively possible test input programs old new new observable behavior old 
appear acm sigsoft international symposium software testing analysis course desired answer question running program new test rts analysis uses static analysis programs old new combination dynamic information coverage information collected execution old order determination 
rts algorithm selects test re testing eliminates test 
static analyses rts come varieties examine syntactic structure program control flow control dependence information ambitious analyses examine def chains flow dependences program :10.1.1.30.3199
typically analyses precise previous greater cost 
safe conservative rts analysis eliminates test new different behavior old 
safe algorithm may select test eliminated 
focus application control flow analysis safe regression testing crts refer controlflow rts 
previous improved precision crts analysis left open question limit analyses 
crts improved ways increasing precision analysis applied control flow graph representations programs old new increasing precision dynamic information recorded execution old 
address issues interactions 
results threefold ffl section building crts rothermel harrold show strong relationship crts deterministic finite state automata intersection regular languages 
define intersection graph control flow graphs precisely captures goal crts forms basis family crts algorithms parameterized dynamic information collected old 
ffl section consider power crts dynamic information recorded old edge coverage edge old control flow graph executed 
define strong optimality condition crts algorithms edge coverage 
reformulate rothermel harrold crts algorithm terms intersection graph new algorithms improve culminating edge optimal algorithm 
algorithm eliminates test rothermel harrold algorithm safely eliminates tests general cost 
algorithms precise greater computational cost 
ffl section recording path coverage information old edge coverage improve algorithms 
path profiling limited tracking paths bounded length motivated concerns efficiency adversary able choose program new cause crts algorithm path coverage fail 
section reviews related section summarizes 
background assume standard imperative language java control flow graph procedure completely determined compile time 
control flow graph vertex represents basic block instructions edge represents control transition blocks 
translation syntax tree representation procedure control flow graph representation known 
executable representation talk executing test define graph terminology useful sequel 
directed control flow graph vertices edges unique entry vertex vertices reachable exit vertex successors reachable vertices 
vertex labelled bb code basic block contains 
different vertices may identical labels 
convenient refer vertex label distinguishing vertices identical labels necessary 
edge connects source vertex target vertex directed edge labelled outgoing edges vertex uniquely labeled 
labels values typically true false boolean predicates determine control transfer execution bb 
vertex outgoing edge label shown figures 
outgoing edges vertex uniquely labelled edge may represented pair call control transition transition short 
vertex succ denotes vertex successor vertex succ 
path sequence edges target vertex source vertex path may represented equivalently alternating sequence vertices edge labels source vertex edge target vertex label edge 
path edges vertices th vertex th edge label 
number outgoing edges vertex labels edges uniquely defined bb 
different vertices identical basic blocks number outgoing edges identical labels 
paths designated vertex purposes entry vertex equivalently represented sequence basic blocks labels sequence edges vertices labels bb bb bb complete path path shows programs corresponding control flow graphs entry vertex exit vertex label vertex denotes basic block bb 
graph occurrence basic block graph occurrences graph intersection graph discussed 
crts intersection graph control flow analysis graphical structure program analyzed semantics statements program say statements textually identical 
implies crts algorithms assume complete path graph potentially executable may paths 
paths affect safety crts algorithms may decrease precision just compiler optimization 
crts algorithms able determine basic blocks semantically equivalent 
course undecidable general 
rothermel harrold textual equivalence code conservative approximation semantic equivalence captured definition equivalent vertices vertices potentially different graphs equivalent code bb lexicographically identical bb 
equiv true iff equivalent equivalent vertices extend equivalence paths follows paths identical length equiv true identical words alphabet basic blocks labels 
simple definition restatement precisely captures power crts graph run input denoted traverses complete path graph contains complete path identical traverse path observable behavior 
definition translates trivially precise computationally expensive crts algorithm record complete execution path code instrumentation traces path compare control flow graph determine path exists 
see section algorithm record complete execution path forced adversary choosing appropriate graph select test eliminated 
observe control flow graph may viewed deterministic finite automaton dfa start state final state accepts language set complete paths precisely control flow graph straightforward interpretation dfa vertex corresponds exit vertex equivalent exit vertices vertices successors 
reject accept example programs corresponding control flow graphs intersection graph states states connected state transition bb labelled bb 
edges interpreted state transitions edge interpreted state transition alphabet dfa union basic blocks edge labels start state final state 
dfa recognizes precisely complete paths represent control flow graph verbose fashion choose traditional form keep dfa interpretation mind 
insight crts question reduces complete path paths re testing needed gamma paths retesting needed 
crts algorithm optimal path algorithm reports 
crts algorithm safe path algorithm reports 
help reason define new graph intersection graph straightforward interpretation dfa 
graph efficiently constructed vertex set simply cross product additional vertices theta relation help define 
equiv essentially optimized version product automaton 
edge set defined terms 
equiv relation 

equiv accept 
equiv reject 
equiv vertex entry vertex restrict vertex edge sets vertices edges reachable 
vertices edges reachable equivalent 
pair reachable iff path prefix path 
vertex reject represents reject state corresponds paths 
vertex accept represents accept state corresponds paths 
shows intersection graph graphs 
see paths corresponding paths accept accept corresponding paths 
graph shows path begins transition 
straightforward results intersection graph inform rest path iff represented path accept path iff represented path reject course complete path 
formally theorem intersection graph graphs path iff accept theorem intersection graph graphs path iff exists reject shows intersection graph graphs computed synchronous depth search graphs 
procedure dfs called equivalent vertices pair visited procedure returns 
inserted edge corresponding edge considered turn 
edges appropriately inserted reflect vertices equivalent exit vertex algorithm recurses equivalent exit vertex algorithm computes set vertices accept accept reachable 
worst case time complexity algorithm jej delta je 
note necessary store relation explicitly derived demand space complexity storing intersection graph accept jv delta jv worst case 
crts edge coverage limit crts dynamic information collected edge coverage 
consider complete path representing execution path set edges covers 
may complete path distinct represent set paths including edge sets identical determine needs retesting crts algorithm edge coverage consider implicitly paths paths members crts algorithm eliminate test generated path paths algorithm select test order safe 
insight define means crts algorithm edge optimal crts algorithm edge optimal path algorithm reports 
note equivalent succ defined bb identical bb 
note paths exist acyclic 
case complete path different set edges complete paths 
accept equiv dfs fi procedure dfs edge succ equiv dfs fi fi accept accept accept fi ni od fi constructing intersection graph synchronous depth search graphs 
algorithm determines set vertices accept accept reachable 
accept reject accept reject accept reject rothermel harrold algorithm partial reachability algorithm full reachability algorithm accept reject valid reachability algorithm edge crts algorithms summarized pictorially intersection graph 
dotted outline represents accept vertices accept reachable 
algorithm time space precision edge optimal 
rothermel harrold jej delta je jt jv delta jv partial reachability jej delta je jt jv delta jv 
full reachability jej delta je delta jt jv delta jv 
valid reachability jej delta je delta jt jv delta jv 
table comparison edge crts algorithms 
rothermel harrold rh algorithm restated terms intersection graph 
new algorithms culminating edge optimal algorithm 
illustrates rh algorithm algorithms intersection graph 
picture shows start vertex final states reject accept 
dotted outline represents accept vertices accept reachable 
ffl rh algorithm detects covers edge incident reject 
path 
ffl partial reachability algorithm detects covers path intersection graph edge leaving accept reject vertex 
path exists 
surprising result partial reachability reject determined time space complexity equivalent rh algorithm 
algorithm precise rh algorithm may case contains edge incident reject cover partial path vertex accept reject 
ffl full reachability algorithm determines covers path reject 

algorithm precise partial reachability algorithm greater cost 

ffl valid reachability algorithm partial order edges rule certain invalid paths 
show cover valid reaching path reject yielding edge optimal algorithm 
table summarizes time space complexity algorithms 
represents set tests run 
edge crts algorithms incur storage cost jej delta jt edge coverage information stored test factor discussing space complexity algorithms 
equivalent empty 
assume algorithms initially check simple condition proceeding 
rothermel harrold algorithm rh algorithm terms intersection graph 
rh algorithm computes set control transitions incident reject synchronous depth search graphs similar reject edge set rh algorithm operates follows path contains transition required 
conservatively assume 
consider intersection graph 
graph path graph contains transitions rh algorithm require tests rerun example path rh algorithm edge optimal 
consider path transitions covered shown bold edges 
complete path covers exactly transitions 
time space complexity compute clearly depth search algorithm 
compute tests set tests set edges covered contains transition takes jej delta jt time 
rh algorithm running time jej delta je jt space complexity jv delta jv 
rothermel harrold show multiply visited vertex algorithm report 
means algorithm optimal edge optimal class graphs 
stated terms intersection graph vertex multiply visited vertex jf gj vertex graph multiply visited vertex 
rothermel harrold ran algorithm set small reject accept example shows partial reachability algorithm edge optimal 
programs lines code modified versions larger program lines code modified versions multiply visited vertex condition occur programs versions 
experimentation clearly needed larger diverse sets programs see condition arises 
partial reachability algorithm reconsider example 
dotted outline graph shows set accept transition leaving set 
path leading reject include transition 
transition case path consider projection edge set graph results edges shown bold 
straightforward see general edge accept reject reachable edge accept accept case reject reachable observation leads partial reachability algorithm time space complexity identical rh algorithm precise 
algorithm require construction able determine reject edge leaving accept similar rh algorithm algorithm computes set reject transitions intersection graph reject accept accept set reject contains transitions transfer control accept algorithm operates follows reject contain transition reject order 
conservatively assume 
easy see partial reachability algorithm subsumes rh algorithm reject empty empty 
stated way rh algorithm reports partial reachability algorithm report 
shown set accept determined construction intersection graph jej delta je time jv delta jv space 
compute reject takes jej delta je time simply requires visiting edge determine leaves accept transition corresponding added reject reject computed rest algorithm identical rh algorithm test check set edges covered test edge reject time space complexity algorithm identical rh algorithm 
full reachability algorithm shows partial reachability algorithm 
example intersection graph reject path rh algorithm algorithm fail report transition covered path note reject vertex reachable 
general reject accept reachable full reachability algorithm simple reject reachable 
conservatively assume 
consider graph 
complete path containing reject accept example shows full reachability algorithm edge optimal 
transition additionally contain transition 
path vertex reject reachable vertex dfs algorithm easily modified compute reachability reject run test resulting running time jej delta je delta jt 
space complexity remains 
valid reachability algorithm edge optimal algorithm shown full reachability algorithm 
consider path graph coverage path covers exactly transitions 
projection yields graph reject reachable path reject notice path graph includes transitions occurrence transition path occur occurrence 
paths property definition cover 
set transitions path reject reachable includes include 
path ignored 
problem full reachability algorithm considers paths reach reject refining notion reachability arrive edge optimal algorithm 
define partial order edges graph follows iff complete paths containing edges instance precedes instance leave reader prove partial order anti symmetric transitive reflexive 
equivalent constructive definition follows iff dominates reachable reachable 
relation graph 
valid reachability algorithm observation path contains transition contain transition path prefix member say path respect valid reachability algorithm checks reject reachable 
reachable algorithm computes set transitions reachable reject reachable 
computes projection transitions subset contains edges algorithm outputs 
algorithm conservatively assumes 
straightforward show valid reachability algorithm safe 
theorem shows edge optimal theorem graphs intersection graph complete path ffl reject reachable ffl fe proof reject reachable done 
suppose reject reachable furthermore assume assumptions show complete path contradicting initial assumption paths edge coverage equal 
parts proof 
show path entry covers transitions respects edge dominates edge graph path contains reject accept example crts algorithm edge coverage distinguish path path 
induces path reject 
show path covers transitions gamma cover transition outside concatenation paths yields path existence path follows closure property respect fact projection transitions reject reachable show existence path edge path edge coverage complete path follows edges reachable transitions reachable transitions path respects follows edges gamma related case reachable transitions case edges related follows reachable transitions completing proof 
time complexity valid reachability algorithm jej delta je delta jt 
algorithm requires test construction set takes time jej delta je dominating steps algorithm 
extended version lengauer tarjan immediate dominator algorithm immediate relation computed near linear time space size determine set edges closed respect requires steps 
projecting create operation 
visiting immediate relation check constant time set membership operations performed immediate relation step takes time 
space complexity valid reachability algorithm remains jv delta jv 
crts path coverage shows crts algorithm edge coverage forced incorrect safe decision 
presents programs graphs intersection graph path 
path exactly set edges covered path impossible determine path produced edge set consider path profiling technique ammons ball larus abl applied graphs separate paths abl algorithm decomposes control flow graph acyclic paths backedges identified depth search suppose backedge 
abl decomposition yields classes paths path 
path backedge 
path execution backedge execution backedge 
execution backedge path graph backedge applying abl decomposition graph yields total paths corresponding types listed abl algorithm inserts instrumentation program track paths covered execution 
recall paths got edge crts trouble 
path composed paths followed abl record paths covered executes 
hand path composed followed followed example edge coverage distinguish paths abl path coverage 
mentioned adversary create graph control flow rts algorithm records complete path executed unable distinguish path path 
true contains cycles example example defeat abl path coverage adding conditional basic block outermost conditional program path path occurs time 
paths cover exactly set abl paths fp distinguished longer paths tracked 
cutoff chosen add level nesting achieve effect 
related rothermel harrold define framework comparing different regression test selection methods characteristics ffl inclusiveness ability choose modification revealing tests paths ffl precision ability eliminate exclude tests reveal behavioral differences paths ffl efficiency space time requirements method ffl generality applicability method different classes languages modifications approach shares similarities rh algorithm 
reachability algorithms control flow analysis edge coverage 
partial reachability algorithm just inclusive rh algorithm precise equivalent efficiency 
full reachability valid reachability algorithms precise greater cost 
considered generalize algorithms handle interprocedural control flow done 
rothermel shows problem determining new program modification traversing respect old program test pspace hard 
intuitively problem involves tracing paths programs execute paths size exponential input program size worse 
course complete path old program new program linear time decision procedure determine new program contains path 
defines away real problem size path unbounded 
considered best crts algorithm amount information recorded program execution edge coverage exponential number edges abl path coverage 
summary formalized control flow regression test selection finite automata theory intersection graph 
algorithm time space complexity equivalent best previously known algorithm precise 
addition defined strong optimality condition edge regression test selection algorithms demonstrated algorithm valid reachability edge optimal 
considered path coverage improve regression test selection 
crucial question practical relevance hinges multiply visited vertex condition defined rothermel harrold occurs practice 
versions programs condition rh algorithm optimal 
condition occur shown rh algorithm edge optimal 
plan analyze extensive version control repositories systems lucent address question 
mooly sagiv patrice godefroid suggestions pertaining finite state theory 
glenn bruns mary jean harrold gregg rothermel mike mark peter comments 
aho sethi ullman 
compilers principles techniques tools 
addison wesley reading ma 
ammons ball larus 
exploiting hardware performance counters flow context sensitive profiling 
acm sigplan notices june 
proceedings sigplan conference programming language design implementation 
ball 
kim porter 
version control system talk 
icse workshop process modelling empirical studies software engineering may 
ball larus 
optimally profiling tracing programs 
acm transactions programming languages systems july 
bates horwitz 
incremental program testing program dependence graphs 
proceedings th acm symposium principles programming languages pages january 

chen rosenblum vo 
testtube system selective regression testing 
proceedings th international conference software engineering pages 
hopcroft ullman 
automata theory languages computation 
addison wesley reading ma 
lengauer tarjan 
fast algorithm finding dominators flow graph 
acm transactions programming languages systems july 
ostrand weyuker 
data flow analysis regression testing 
proceedings th annual pacific northwest software quality conference pages september 
rothermel 
efficient effective regression testing safe test selection techniques 
ph thesis clemson university december 
rothermel harrold 
analyzing regression test selection techniques 
ieee transactions software engineering august 
rothermel harrold 
safe efficient regression test selection technique 
acm transactions software engineering methodology april 
