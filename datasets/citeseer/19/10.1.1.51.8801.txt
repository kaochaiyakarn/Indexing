automatic parallelization list functional programs wolfgang schreiner research institute symbolic computation risc linz johannes kepler university linz austria email risc uni linz ac july investigate behavior functional programs operating list structures respect automatic parallelization 
list processing functions follow typical patterns recursion contain inherent horizontal parallelism data parallelism vertical parallelism stream parallelism 
starting simple classification list processing functions general versions functional patterns shown cover concrete programs 
operational behavior functional patterns parallel environment discussed criteria allow automatic classification functional programs 
language called functional program language mathematical expression application function argument evaluation returns result effect execution rest program 
process general subexpressions ready evaluation 
main characteristics functional languages fact total result influenced order subexpressions evaluated provided evaluation terminates 
particular expressions may evaluated simultaneously parallel processes 
property functional languages ml haskell imperative languages fortran execution order statements crucial 
basically main sources parallelism functional programs sponsored fwf project phy parallel symbolic computation 

horizontal parallelism computation expression subexpressions may simultaneously evaluated 
parallel computation independent argument expressions main source parallelism especially divide conquer algorithms 

vertical parallelism expression evaluated function invocations may active time 
parallel execution nested function applications sense especially result compound data structure producer consumer parallelism 
functional program contains lots function applications literally application level basic operators may source horizontal vertical parallelism 
main problem sequential execution function faster creation separate process consumes considerable amount main memory 
execute function applications parallel select small subset parallelism really pays 
currently approaches base decision evaluate expression new process local criteria grain size expression long evaluation take 
strictness properties far result known continue execution 
approximations quantities computed program analysis techniques interpretation 
automatically parallelizing compilers imperative languages general pursue different strategy 
main approach recognize specific patterns arise typical scientific programs lend parallelization 
usually patterns fortran loops processing large arrays matrices regular fashion parallelization strategies known 
extended investigates possibilities parallelization functional programs operating linked lists 
lists predominant kind data structures functional programming applications viewed list processors 
starting elementary list processing functions develop generalized versions examples show concrete programs fit framework 
style informal mathematical theory developed automatic classification programs structures 
introduce ideas respect parallelism give criteria may aid compiler order recognize structure exploit information compilation process 
elementary list processing section introduce patterns model wide class list operations 
programs notion common functional languages see 
lists objects type list ff nil cons ff list ff ff type variable place holder concrete type 
execution model guiding investigations dataflow example non strict evaluation model function may immediately start execution parallel operation necessary data available process temporarily blocked 
furthermore cons operator immediately returns result list cell empty head tail slot values computed parallel processes 
process tries read empty slot suspended 
expansion lists time generated elementary data 
task list expansion performed functions pattern expand ff list fi expand cons expand visualized dataflow graph oe oe expand dataflow node represents cons operator squares int list int squares nil cons nn squares gamma parallelism point view important note operation cons strict arguments list cell constructed returned dataflow graphs show just main recursive branch corresponding function 
result head tail list computed 
dataflow model suggests parallel execution strategy 
termination condition evaluated 
true result list generated immediately recursion 

new cell allocated returned 
new process started computes head list fills head slot cell 
current process continues computation tail list 
main process constructs backbone list actual elements computed parallel processes data parallelism special case horizontal parallelism 
expand require result recursive invocation generate new list cell delivers stream cells processes may simultaneously consume stream parallelism special form vertical parallelism oe oe oe oe expand expansion dataflow graph clear list element computed parallel construction rest list element list 
individual element processes started rapid sequence slowed evaluation various 
folding inverse list expansion folding operation combines various elements list single object possibly different base type fold list ff fi fold case nil cons fold dataflow graph function similar expand oe oe fold input list empty constant element returned 
actual fold function combines modified head list result folding rest list single element sum list int int sum case nil cons sum essential difference expand fold fact folding operation usually strict arguments return result argument values known 
consequently fold construct deliver result certain amount information element input list available 
analyzing parallelism inherent fold obvious various element modifications computed parallel actual folding performed done sequence right left tail list folded result combined head list behavior called reduce right 
transformation third basic operation transformation list transform list ff list fi transform case nil cons cons transform dataflow graph transform oe oe transform shows similarities expand fold 
transform result structure complexity input structure mapf case nil nil cons cons mapf transform just creates structure result list lists elements computed parallel processes 
contrast expand fold transform operator requires structure input return structure result list 
actual input elements available just corresponding subprocesses blocked 
important execution transform overlap computation input list transformer barrier vertical parallelism 
special case list transformation element wise merging lists lists processed element element 
dynamically merge pattern behaves similar transform synchronization performed input lists structure creation process overlap synchronized structure creation input lists element computing processes blocked corresponding input elements available 
details see 
summary section patterns list processing functions features common 
list generating functions return results streams list cells consumption lists overlap creation 
computation individual list elements performed parallel processes 

list consuming functions process structure input lists regular way independent actual element values 
execution functions overlap construction arguments 
functions pipelines processes created connected streams parallel 
tail recursion list processing functions written tail recursive style fundamentally different previous section 
list transformation may formulated follows transform list ff list fi list fl transform case nil cons transform cons dataflow graph looks transform tail recursive list transformers interest generated list essentially modified version reversed input list head result list stems element input list 
function differs original solution auxiliary parameter holds stage computation part result list constructed 
base case recursion reached result delivered caller 
usually extra parameter hidden shell function provides initial value nil list generators 
may pass result list function initial argument perform constant time concatenation lists 
technique basis efficient divide conquer algorithms quasi horizontal parallelism see section 
operationally tail recursive list generators structure result list visible caller base case recursion 
consequently finite list structures generated tail recursive way non strict functional languages potentially indefinite lists possible 
creation list structure overlap consumption lists look compact arrays contrast streams prevents stream parallelism 
horizontal parallelism computation individual list elements affected vertical parallelism processes compute individual list elements processes consume elements 
downward communication list consuming functions previous sections restricted sense level recursion computation driven element current head input list 
particular information preceding traversed part list transmitted different recursive function activations 
section loosen restriction introducing additional argument controls computation 
modification transform pattern changes transform list ff fi list fl transform case nil cons cons transform dataflow graph oe oe transform modifier driven current list head extra argument computes successor argument passed recursive function invocation 
information processed part list may propagated downwards levels recursion 
unfolding recursive structure graph clear modification depends results previous operations may reduce parallelism different activations particular combined function fold construct essentially serial 
independent takes significantly longer time parallelism preserved 
example downward communicating merger add ld case nil nil cons cons add cons add ld adds arbitrary precision integers represented lists fixed size words 
execution basically sequential add computes atomically 
important note flow information controlling computation current recursion level may run recursive invocation caller 
upward communication data dependency created may serializes computation direction 
extreme case list elements may processed sequentially tail list head 
details see 
generalized list construction considered special forms list generating functions constructor operation cons directly appeared recursive branch 
take look function list int list int list int case nil cons nil cons add shift dataflow graph oe oe shift add multiplies long arbitrary precision integers shifts result positions 
function structure similar transform operation input list decomposed head tail 
fed recursive activation input compound expression applications recursive functions shift 
result subexpressions integer lists merged function add 
function arguments unchanged communicated downward direction 
function generalized transform structure neglecting downward communication transform case nil cons transform expression computing head result list recursive transform invocation new result list 
previous sections considered cases defined cons example see may sense allow general forms construction 
actual behavior function depends concrete version assume immediately require list argument continue execution dataflow behavior shows strong similarities elements input processes started execute parallel 
particular decompose constructor modifier depend individual instances execute parallel vertical parallelism individual instances amount parallelism depends strictness second argument 
conditional list consumption list consuming functions processed input lists regular fashion element input list treated way 
particular recursive activation function created soon structure input list available actual element values known 
section investigate behavior list consumers case condition involving current list head evaluated recursive function activation created 
take pattern transform case nil cons recursive branch transform body enclosed test predicate depends value list head selects branches evaluation 
assuming strict execution blocked corresponding value computed parallel process 
condition list transformer barrier vertical parallelism result structure constructed elements input list available 
typical example conditional list transformation higher order function filter list ff ff bool list ff filter case nil nil cons cons filter filter takes list predicate returns result version input list elements removed predicate hold 
noted barrier vertical parallelism occurs recursive function calls occurs branch conditional expression 
recursive function calls drawn outside conditionals possible 
replace recursive branch filter body filter cons elements input list processed parallel 
divide conquer type definition lists contains recursive substructure list tail list processing functions usually lend parallelization divide conquer approach 
particular list generators results recursive function applications way combined form longer list 
combination process usually linear time cases find efficient solutions divide conquer 
method combine lists constant time implicit concatenation extra argument generator sublist see section 
technique applied functional programs origin efficient divide conquer programs 
consider functional version quicksort algorithm extra list concatenation qsort list ff list ff list ff qsort case nil cons split qsort qsort pattern program body structure dataflow graph oe oe split qsort qsort shows qsort just list transformer constructor function happens function 
second argument qsort just forwarded recursive invocations execute independently 
main trick list functional programs divide conquer approach horizontal parallelism independent recursive function invocations followed explicit append operation replaced vertical parallelism nested applications branch delivers result 
qsort situation bit complicated input list filtered function split generates sublists passed recursive function applications respectively 
expanding double recursive structure dataflow graph get tree processes leaves receive concatenate trivial element lists sorted oe oe oe oe xxx xz gamma gamma psi gamma gamma psi oe split split qsort split qsort qsort qsort parallelism point view qsort perfect divide conquer program task performed divide phase computation combination process trivial 
automatic classification parallelization patterns provided abstraction helped clarify parallel features typical list programs 
concrete applications patterns may appear different forms variations 
due lack space sketch techniques may detect typical feature say list transformer concrete function details see 
strictness analysis deals question extent known certain amount computed 
interpretation answer problem strictness interface functions approximated 
patterns characteristic strictness interfaces estimate pattern interface looking inside body 
analysis weak express dynamical behavior function 

structure analysis looks inside body determine recursion structure function 
focusing constructs important parallelization abstracting view function provided 
crucial constructs case expressions conditionals cons operators recursive function applications 
result analysis tree evaluation inner nodes correspond case constructs conditionals leaves possible result values 

dataflow analysis investigates dependencies points determined structure analysis 
input list analyzed respect application matched case statement condition just forwarded functions analysis performed results recursive function activations 
determine lists constructed stream wise array wise individual list elements computed independently direction data dependencies function recursive activation exist 
top analysis phase information combined detect outermost list processing function applications internal parallelization data parallelism vertical parallelism possible achieves sufficiently large granularity 
independent list processing function applications may executed parallel hor parallelism stream parallelism 
classification process may essentially simplified providing higher order functions correspond functional patterns may applied user express parallelization points program leads idea para functional programming 
main idea expressed automatic parallelization functional languages concentrate typical patterns occur functions idea generalized recursively defined data structures trees 
automatic analysis techniques typical behavior function classified various criteria express dynamic behavior program parallel environment 
author ongoing ph thesis aims formalize ideas suitable actual implementation automatically parallelizing compiler 
arvind nikhil 
executing program mit tagged token dataflow architecture 
parle conference parallel architectures languages europe eindhoven netherlands june volume lecture notes computer science springer berlin 
richard bird philip wadler 
functional programming 
prentice hall international series computer science englewood cliffs new jersey 
geoffrey burn 
lazy functional languages interpretation compilation 
research monographs parallel distributed computing 
pitman london 
benjamin goldberg 
multiprocessor execution functional programs 
research report yaleu dcs rr department computer science yale university april 
paul hudak 
para functional programming 
ieee computer august 
paul hudak simon peyton jones philip wadler report functional programming language haskell 
research report department computing science university glasgow glasgow uk june 
final draft 
wolfgang schreiner 
analysis list functional programs automatic parallelization 
technical report risc linz johannes kepler university linz austria 
appear 

functional programming standard ml 
international series computer science 
prentice hall 
wray fairbairn 
non strict languages programming implementation 
computer journal 
