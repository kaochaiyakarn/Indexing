evaluating las vegas algorithms pitfalls remedies holger hoos thomas st utzle computer science department darmstadt university technology darmstadt germany informatik tu darmstadt de stochastic search algorithms approaches solving hard combinatorial problems 
large class stochastic search approaches cast framework las vegas algorithms 
run time behavior characterized random variables detailed knowledge run time distributions provides important information analysis algorithms 
propose novel methodology evaluating performance identification empirical run time distributions 
exemplify approach applying stochastic local search sls algorithms satisfiability problem sat propositional logic 
point pitfalls arising improper empirical methods discuss benefits proposed methodology evaluating comparing 
las vegas algorithms nondeterministic algorithms properties solution returned guaranteed correct run time characterized random variable 
las vegas algorithms prominent field artificial intelligence areas computer science operations research 
years stochastic local search sls algorithms simulated annealing tabu search evolutionary algorithms successful solving np hard problems broad range domains 
number systematic search methods modern variants davis putnam algorithm propositional satisfiability sat problems backtracking style algorithms csps graph coloring problems non deterministic decisions randomized tie breaking rules characterized las vegas algorithms 
due non deterministic nature behavior las vegas algorithms usually difficult analyze 
cases theoretical results exist practical applicability limited case simulated annealing proven converge optimal certain met practice 
situation cases analyses run time behavior las vegas algorithms empirical methodology 
sense despite dealing completely specified algorithms easily understood step step execution basis computer scientists situation say experimental physicist observing non deterministic quantum phenomenon 
methods applied analysis las vegas algorithms ai simplistic 
glance methods admissible especially results usually quite consistent certain sense 
case sls algorithms sat instance advanced algorithms wsat selman usually outperform older algorithms gsat selman large number problems randomized distributions structured domains 
claims supported empirical evidence usually relatively simple algorithm outperforms algorithm analytical methodology easy apply powerful get desired results 
really 
severe criticism regarding empirical testing algorithms hooker hooker mcgeoch 
pointed empirical methodology evaluate compare reflect standards established empirical sciences 
argued empirical analysis algorithms remain stage collecting data attempt formulate hypotheses data turn experimentally verified refuted 
dealing empirical analysis las vegas algorithms ai lived demands 
studies basically methods years investing tremendous computational effort doing large scale experiments parkes order ensure basic descriptive statistics sufficiently stable 
time fundamental issues question particular type statistical analysis done usually estimating means standard deviations adequate type evaluation intended neglected ad dressed 
approach issue empirical methodology evaluating las vegas algorithms decision problems sat csp way 
discussing fundamental properties las vegas different application scenarios novel kind analysis estimating run time distributions single instances 
motivate method superior established procedures generally causing additional computational overhead 
point pitfalls improperly chosen empirical methodology show approach avoids additionally offering number benefits regarding analysis individual algorithms comparative studies optimization critical parameters parallelization 
las vegas algorithms application scenarios algorithm las vegas algorithm problem class pi problem instance pi returns solution guaranteed valid solution ii instance run time random variable rt definition las vegas algorithms correct necessarily complete 
completeness important theoretical concept study algorithms classify las vegas algorithms categories ffl complete las vegas algorithms guaranteed solve soluble problem instance run time max max instance dependent constant 
rt denote probability finds solution soluble instance time complete exactly exists max rt max 
ffl approximately complete las vegas algorithms solve soluble problem instance probability converging run time approaches 
approximately complete soluble instance lim rt 
ffl essentially incomplete las vegas algorithms las vegas algorithms approximately complete complete 
examples complete las vegas algorithms ai randomized systematic search methods modern davis putnam variants crawford auton 
prominent stochastic local search methods simulated annealing gsat random walk approximately complete basic gsat restart variants tabu search essentially incomplete 
literature approximate completeness referred convergence 
convergence results established number sls algorithms simulated annealing 
approximate completeness enforced sls algorithms restart mechanism gsat selman 
forms approximate completeness mainly theoretical interest time limits finding solutions usually far large practical 
application scenarios starting evaluate algorithm crucial find right evaluation criteria 
especially las vegas algorithms fundamentally different criteria evaluation depending characteristics environment supposed 
classify possible application scenarios way type time limits afford run long needs find solution 
basically scenario computations done line non realtime environment really matter long need find solution 
type time limit max finding solution 
real time applications robotic control dynamic scheduling max small 
type usefulness utility solution depends time needed find 
formally utilities represented values characterize scenarios specifying utility function 
utility finding solution time easily seen types special cases type 
obviously different criteria required evaluating performance las vegas algorithms scenarios 
case time limits type mean run time suffice roughly characterize run time behavior real time situations type basically meaningless 
adequate criterion type situation time limit max rt max probability finding solution time limit 
type general scenario run time behavior adequately characterized run time distribution function rtd 
defined rtd rt approximation 
run time distribution rtd completely uniquely characterizes run time behavior las vegas algorithm 
information criteria mean runtime standard deviation median percentiles rt arbitrary time limits easily obtained 
empirical method answer questions arise different application scenarios discussed previous section important knowledge actual run time distributions rtd las vegas algorithms 
run time random variable get knowledge distribution empirically samples random variable simply running algorithm times 
sample assumptions type distribution function 
assumptions validated statistical hypothesis tests case assumptions backed sample data incorrect assumptions steps rld wsat median mean rld wsat hard random sat instance optimal parameter settings median vs mean 
identified rejected 
actual run time distribution las vegas algorithm depends problem instance clear estimated single problem instances 
limit type may drawn general conjectures type run time distributions problem class formed tested 
illustrate point detail section 
measuring run time distributions terms cpu time preferable representative operation counts machine independent measure algorithm performance 
appropriate cost model algorithm operations operation counts easily converted run times facilitating comparisons algorithms architectures 
run time distributions get run length distributions rlds 
example appropriate operation count local search algorithms sat number local search steps 
run time distributions run converted 
measure rlds take account algorithms cutoff parameter maximum number iterations maximum time limit 
practically measure empirical rlds running respective las vegas algorithm times problem instance high cutoff value recording successful run number steps required find solution 
empirical run length distribution cumulative distribution associated observations 
formally rl denote run length jth successful run cumulative empirical rld defined rl note obtaining distributions single instances involve significantly higher computational effort get stable estimate mean performance algorithm 
give example occuring rld run optimal cutoff settings may determined posteriori empirical run time distribution see sec 

state art local search algorithm wsat selman hard random sat instance optimal walk parameter settings rld 
axis represents computational effort number local search steps axis gives empirical success probability 
may note shape rld exponential distribution ed distribution function gamma gammax test hypothesis rld corresponds exponential distribution passed test 
discuss potential benefits method detail section 
pitfalls inadequate methodology superficial analysis run time behavior established method evaluating run time behavior las vegas algorithms measure average runtimes single instances order obtain estimate mean run time 
practically done executing algorithm times problem instance cutoff time max runs successful rt run time ith successful run mean run time estimated averaging successful runs accounting expected number runs required find solution rt rt gamma delta max problem method mean gives impression run time behavior additionally standard deviation variance run time successful runs reported 
consider design algorithm type application scenario specific question estimating cutoff time max solving problem instance probability mean run time rt known best estimate obtain markov inequality rohatgi rt rt max rt gamma standard deviation oe rt known finite inequality rt gamma rt ffl oe rt ffl obtain better estimate max oe rt gamma rt know run time las vegas algorithm exponentially distributed get statistical literature typically exponential distribution respect base base advantage parameter corresponds median distribution 
discuss assuming exponential rtd quite realistic observed number modern stochastic local search algorithms various problem classes 
accurate estimate 
example see drastic differences estimates 
las vegas algorithm applied problem mean run time standard deviation seconds situation stochastic local search algorithms sat 
want determine run time required obtaining solution probability 
additional knowledge runtime distribution get estimate sec inequality 
standard deviation unknown markov inequality estimate sec 
assuming run time exponentially distributed get estimate sec 
illustrates long type rtd known priori analyzing means standard deviations wasteful empirical data 
problem especially literature stochastic local search lies tacit assumption parameters considered algorithms studied independently 
specific cases known assumption hold hoos stutzle 
evaluation las vegas algorithms general crucial aware possible parameter dependencies especially involving cutoff time max plays important role type application scenarios 
fig 
show rlds different las vegas algorithms lva lva problem instance 
easily seen lva essentially incomplete asymptotic solution probability approaching ca 
lva approximately complete 
note crossing rlds ca 
steps 
smaller cutoff times lva achieves considerably higher solution probabilities greater cutoff times lva shows increasingly superior performance 
optimal cutoff time ca 
steps connection restart exponential run time distribution marked ed obtained realizes speedup ca 
compared lva 
performance lva superior lva small cutoff times possible modify algorithm lva performance dominates lva see sec 

consequence observations basing comparison las vegas algorithms expected run times best case worst case leads erroneous 
case occurs corresponding intersection 
obviously outcome comparing algorithms depends entirely cutoff time max chosen experiment 
inhomogeneous test sets las vegas algorithms tested sets randomly generated problem instances 
method particularly popular problem classes phase transition phenomena observed random sat crawford auton random csp smith steps lva lva ed crossing optimal cutoff lva max solution prob lva iterated lva opt cutoff rlds different las vegas algorithms problem instance 
note crossover rlds 
dyer instances phase transition region particularly hard 
practically test sets sls algorithms usually obtained generating number sample instances phase transition area filtering unsolvable instances complete algorithm 
evaluation las vegas algorithms test set done evaluating number runs instance 
usually final performance measure obtained averaging instances test set 
step potentially extremely problematic 
run time behavior single instance characterized rtd discussed averaging test set equivalent averaging 
general averaging number distributions yields distribution different type practice averaging averaging test sets quite prone producing observations reflect behavior algorithm individual instances side effect method evaluation 
exemplify random sat near problem class studies stochastic local sat procedures gsat gsat random walk gwsat selman gent walsh 
experimental studies shown gwsat optimal walk parameter number stochastic local search algorithms wsat selman novelty mcallester rlds single instances problem distribution reasonably approximated exponential distributions hoos stutzle 
measuring median run lengths problem instance typical randomly generated filtered test set obtain distribution median hardness problems shown fig 

median determined runs instance stable leaves random selection instances main source noise measured distribution 
rlds single instances basically steps hardness distribution distribution median run length wsat noise test set satisfiable random sat variables clauses 
note huge variance especially hardest test set 
steps averaged rld ed virtual optimal cutoff average rld wsat test set 
note virtual optimal cutoff ca 
steps details see text 
tial distributions optimal cutoff times observed individual instances 
reason fact exponential run time distributions probability finding solution steps algorithm independent number steps performed 
discussed detail sec 
class exponential distributions closed averaging combined rld instances test set obtained averaging individual rlds exponentially distributed 
combined distribution shown fig 
obviously optimal cutoff time exists obtained finding minimal value ed average rld common point 
averaged rld suggests existence optimal cutoff time single instance optimal cutoff time exist 
bit paradoxical observation easily explained averaging rlds don distinguish probability solving different instances 
optimal cutoff inferred average rld simply means solving easier instances sufficiently high probability compensates small solution probability harder instances going cutoff 
solving easier instances gets priority solving harder instances 
interpretation optimal cutoff considered meaningful 
assuming practice goal testing las vegas algorithms test sets sampled random problem distributions get realistic impression performance including hard instances optimal cutoff inferred averaged rld substantially misleading 
discussion shows averaging test sets generally best case consciously observes bias solving certain problems practical questionable 
far aware phenomena observations obtained misinterpreted lead erroneous 
imagine situation averaging test sets critical 
test sets homogeneous sense single instance roughly identical 
unfortunately sort randomized problem distributions rare practice 
certainly random sat homogeneous sense authors currently aware sufficiently complex homogenous randomized problem distribution sat csp 
generally fundamental problem averaging random problem distributions mixing different sources randomness evaluation algorithms nondeterministic nature algorithm random selection problem instances 
assuming analysis las vegas algorithms interested properties algorithm knowledge problem distribution required separating influence inherently different types randomness 
benefits method characterizing section demonstrate empirical methodology testing las vegas algorithms stochastic local search example application illustrate interesting observations approach 
purpose analyze run time behavior gsat random walk gwsat hard random sat instance phase transition region various settings including optimal 
wp cutoff value important parameter algorithm 
algorithm run times different settings wp 
em indication certain randomized classes sat encoded problems domains compactly encoded subclasses hamilton circuit problem hoos significantly homogeneous random sat 
steps gwsat wp opt ed gwsat wp ed gwsat wp ed run time distribution gsat random walk hard random sat instance optimal higher optimal walk parameter settings 
steps gwsat wp opt ed gwsat wp wd gwsat wp wd run time distribution gsat random walk hard random sat instance optimal lower optimal walk parameter settings 
distribution optimal noise parameter setting wp opt conjectured run time distribution approximated exponential distribution 
hypothesis parameter estimated goodness fit empirical distribution tested 
concrete example hypothesis passed test 
larger optimal noise parameter settings wp wp opt verify test rlds exponentially distributed 
shifted right constant factor log scale axis 
means guarantee desired success probability wp wp opt required number steps constant factor higher wp wp opt completely different behavior observed wp wp opt see 
case run time distributions approximated exponential distributions approximation weibull distributions wd ff gamma gamma ff ff 
corresponds fact higher desired solution probability larger loss performance optimal noise setting 
additionally instances easy solve observe systematic deviations distribution assumptions lower part 
deviations may explained initial hill climb phase gent walsh intuitively needs time algorithm reach position search space realistically high chance finding solution 
proposed way measuring analyzing shows considerable benefits 
statistical distributions identified goodness fit tested standard statistical tests 
methodology experimental approach testing las vegas algorithms lines proposed hooker hooker undertaken 
example discussion hypothesis optimal noise parameter settings gwsat run time behavior solution single hard instances crossover region random sat described exponential distributions 
hypothesis tested running series experiments instances 
doing empirical evidence confirms conjecture 
similar results established algorithms applied random sat sat encoded problems domains hoos stutzle 
studying run time distributions single instances hypotheses algorithm problem class random sat formed tested experimentally 
important note limiting analysis single instances impose limitations obtaining verifying conjectures behavior algorithms problem classes 
furthermore measuring rlds observe qualitatively different behavior gwsat depending lower optimal larger optimal walk parameter settings chosen 
wp wp opt run time distribution identified exponential distribution type distribution change 
hand wp wp opt type distribution changes 
observations fundamental hypotheses theories describing behavior class algorithms may formed experimentally validated 
comparing improving algorithms important aspects comparison design algorithms addressed study rlds 
consider situation rlds specific sls algorithms lva lva plotted 
lva approximately complete performance monotonically improves increasing run lengths seen decreasing distance rld projected optimal exponential distribution ed 
lva essentially incomplete success probability converges ca 

short runs observe convergent behavior apparently algorithms exists minimal sample size dependent number steps marked axis probability find solution negligible 
interestingly curves cross steps lva lva ed ed optimal cutoff lva iterated lva opt cutoff crossing iterated lva opt cutoff rlds sls algorithms lva lva propositional satisfiability problem hard random sat instance rlds cross ca 
steps see text detailed discussion 
specific point ca 
steps restarts lva gives higher solution probability lva shorter runs lva effective longer runs 
lva optimal cutoff value ca 
steps exists 
repeated execution lva reasonably chosen cutoff time algorithm restarted gives higher solution probability observed running algorithm long time 
fact optimal cutoff parameter chosen point interest ca 
steps marked axis lower number steps independent runs lva optimal cutoff value improves performance lva past lva strictly superior lva consequently anytime combination algorithms select lva optimal cutoff steps switch lva example illustrates important points 
concerns comparison algorithms 
generally las vegas algorithm dominates consistently gives higher solution probability 
formally lva dominates lva optimal parameter settings rt rt rt rt 
case cross comparison algorithms substantially difficult 
detailed example occurs algorithm preferable lower time limits may better long run times 
case anytime combination algorithm enhance performance 
important point concerns steepness run time distributions 
known exponentially distributed run times due properties exponential distribution rohatgi get solution probability running algorithm time times time point run time distribution algorithm steeper exponential distribution probability finding solution relatively increases running algorithm longer time 
case worse restart algorithm fixed cutoff value seen lva 
side run time distribution algorithm steep exponential distribution increasing run time gain performance restarting algorithm case algorithm lva 
situation greedy local search algorithms gsat easily get stuck local minima 
algorithms usually run time distribution approaches limiting success probability gain lot restarts 
case optimal cutoff values identified method mentioned section 
due mentioned property exponential distribution exponentially distributed run times arbitrary cutoff time chosen 
observation important consequences parallel processing multiple independent runs algorithm 
recall speed case parallel processing defined sequential time parallel time exponential obtain probability finding solution processors time resulting optimal speed 
case steeper exponential distribution resulting speed sub optimal 
hand run time distribution steep exponential distribution parallel processing yield speed compared sequential version algorithm restarts 
summarizing results argue detailed empirical analysis algorithms gives accurate picture behavior 
knowledge behavior useful formulating testing hypotheses algorithm behavior improving algorithms devising efficient 
related empirical evaluation las vegas algorithms part motivated theoretical alt luby 
alt authors discuss general policies reducing tail probability las vegas algorithms 
luby discuss policies selecting cutoff times known unknown run time distributions 
empirical analysis algorithm sat csps concentrates analyzing cost distributions complete search algorithms randomly generated instances random sat binary csps 
frost cost distribution randomly generated random sat binary csps phase transition region approximated continuous probability distributions 
investigations concentrate cost distribution sample instances fixed random distribution cost distribution algorithms single instances 
approach investigating cost distribution backtracking algorithm heuristic randomly generated coloring problems single instances hogg williams 
note heuristic breaks ties randomly backtracking algorithm heuristic las vegas algorithm 
authors investigate run time distribution conjectures obtainable speed parallel processing find speed strongly dependent cost distribution 
especially multimodal cost distributions high speed ups observed 
similar approach taken gomes selman authors intend design algorithm portfolios backtracking algorithms heuristic special kind csp 
noted runtime distribution observed occasionally operations research literature taillard 
introduced novel approach empirical analysis las vegas algorithms 
method measuring analyzing run time distributions individual problem instances 
classification application scenarios las vegas algorithms shown general provide information required adequately describe behavior algorithm 
compared commonly empirical analyses las vegas algorithms ai approach gives considerably detailed realistic view behavior algorithms requiring additional overhead data acquisition 
identified discussed problems commonly arising context inadequate empirical methodology superficial analysis run time behavior averaging inhomogeneous test sets 
shown approach avoids pitfalls arising 
demonstrated refined methodology obtain novel results characterization run time behavior popular stochastic local search algorithms ai research 
plan extend analysis trying provide precise characterizations behavior various state art stochastic local search algorithms variety problem classes 
includes extension methodology traveling salesman problem scheduling problems 
date theoretical knowledge behavior las vegas algorithms limited adequate empirical methodology critical investigating algorithms 
improvement algorithms deeper understanding behavior essential 
believe context improved refined empirical methodology analyzing run time behavior las vegas algorithms general sls algorithms particular prove useful 
alt guibas mehlhorn karp wigderson 

method obtaining randomized algorithms small tail probabilities 
algorithmica 
crawford auton 

experimental results crossover point random sat 
artificial intelligence 
frost rish vila 

summarizing csp hardness continuous probability distributions 
proc 
aaai pages 
gent walsh 

empirical analysis search gsat 
artificial intelligence research 
gent walsh 

unsatisfied variables local search 
hybrid problems hybrid solutions pages amsterdam 
ios press 
gomes selman 

algorithm portfolio design theory vs practice 
proc 
uai pages 
morgan kaufmann publishers 
hogg williams 

parallelizing constraint solving hard problems 
proc 
aaai pages 
hooker 

needed empirical science algorithms 
operations research 
hooker 

testing heuristics wrong 
heuristics pages 
hoos stutzle 

characterization gsat performance class hard structured problems 
technical report aida fg intellektik tu darmstadt 
hoos stutzle 

characterizing run time behavior stochastic local search 
technical report aida fg intellektik tu darmstadt 
hoos 

solving hard combinatorial problems gsat case study 
proc 
ki volume lnai pages 
springer verlag 
luby sinclair zuckerman 

optimal speedup las vegas algorithms 
information processing letters 
mcallester selman kautz 

evidence invariants local search 
proc 
aaai pages 
mcgeoch 

experimental method algorithm simulation 
informs computing 
parkes 

tuning local search satisfiability testing 
proc 
aaai pages 
rohatgi 

probability theory mathematical statistics 
john wiley sons 
selman kautz cohen 

noise strategies improving local search 
proc 
aaai pages 
mit press 
selman levesque mitchell 

new method solving hard satisfiability problems 
proc 
aaai pages 
mit press 
smith dyer 

locating phase transition binary constraint satisfaction problems 
artificial intelligence 
stutzle 

vs random walk 
proc 
ki volume lnai pages 
springer verlag 
taillard 

robust taboo search quadratic assignment problem 
parallel computing 
