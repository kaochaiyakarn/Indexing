formalizing uml object constraint language ocl mark richters martin gogolla university bremen fb computer science department postfach bremen germany fmr informatik uni bremen de www home page www db informatik uni bremen de 
formal semantics object constraint language ocl part unified modeling language uml emerging standard language notation object oriented analysis design 
context information systems modeling uml class diagrams utilized describing structure additional integrity constraints queries specified ocl expressions 
ocl constraints queries specified formal comprehensible way 
ocl currently defined semi formal way 
semantics constraints general precisely defined 
approach gives precise meaning ocl concepts central aspects uml class models 
formal semantics facilitates verification validation simulation models helps improve quality models software designs 
methods object oriented analysis design brought great number languages notations supporting aspects software specification process 
unified modeling language uml result effort developing single standardized language object oriented modeling 
integrates enhances concepts analysis design methods including booch omt oose 
proc 
th int 
conf 
conceptual modeling er tok wang ling ed springer lncs part latest uml proposal object constraint language ocl 
language intended facilitate specification model properties formal comprehensible way 
previously uml support describing constraints limited annotations form uninterpreted textual comments 
formal constraint language important step proper formalization complex models 
ocl mainly defined semi formal way english text descriptions context free grammar specifying concrete syntax ocl examples illustrating intended meaning expressions 
style presentation perfectly suited introduce demonstrate concepts ocl argue thorough understanding ocl semantics requires formal definition 
authors emphasize currently complete formal semantics exists 
due semi formal nature ocl definition issues identified may lead problems open questions 
simple example ocl expression result unambiguously determined 
consider query builds list containing names persons working car rental station 
ocl expression purpose 
rs rs employee iterate person names string names concat lastname expression iterates elements set persons rs employee adds name person set initially empty string 
result string containing names rental station employees 
problem statement ocl order evaluation evaluations may yield different results caused different iteration sequences 
shows important aspects iterate expression underspecified worse operations collections defined terms iterate expressions behavior precisely defined 
solution problem defining deterministic evaluation semantics identifying necessary preconditions application iterate expressions 
formalization ocl certain aspects uml class models 
define syntax semantics ocl expressions give examples evaluation 
goal keep close possible intended semantics ocl 
intended semantics obvious appears problematic refrain suggesting alternative approach 
view formalization ocl beneficial achieving goals improvement ocl pointing potential problems current definition precise understanding uml class models interpretation solid foundation implementing case tools supporting simulation validation uml models integration uml classical approaches conceptual modeling information systems 
related approaches handling formal aspects uml object oriented methods 
done basis wellestablished traditional approaches specification vdm focuses uml type system class models general integration object orientation discussed object calculus enhancing expressibility object oriented notations proposed 
approaches treat detail uml predecessor omt particular class diagrams connection larch discussed 
sketches general scenario uml diagrams going technical details presents general framework relationships cases uml 
information systems field particularly interested data models query languages 
see strong resemblance uml language notation class diagrams traditional entity relationship approaches 
example comparing uml class diagram eer diagram integrity constraints ocl constraints specified eer calculus 
uml appropriate modeling object oriented database systems odmg standard 
fact ocl far away odmg query language oql 
rest organized follows 
sect 
briefly introduce ocl examples illustrate application uml class models specifying constraints queries 
start formal framework developing formal description basic complex types sect 

sect 
propose model formalize structural properties class models may referenced ocl expressions 
syntax semantics expressions defined sect 

close summary point problems need consideration 
uml object constraint language primary purpose ocl augment model additional information expressed appropriately uml 
information constraints general easier specify textual notation graphic oriented language 
ocl provides flexible concise notation specifying broad range constraints 
example simple constraint just restrict attribute values subset fixed domain stating age person positive integer describe complex relationship objects 
intended effect constraint specification restriction possible system states transitions respect model 
ocl expression declarative sense expression says constraint maintained accomplished 
specification constraints done conceptual level implementation aspects mainly irrelevant 
give basic examples constraints illustrate general structure ocl expressions 
refer complete overview ocl 
examples sections refer class diagram shown fig 

diagram simplified model car rental having rental stations employing number persons 
fleet cars motorcycles generalized class vehicle 
claim model adequate representing real world intention provide simple example uml concepts class attribute operation association generalization 
evaluation expression requires contextual instance specific type 
example expression self refers object type person class properties attributes age may referenced dot notation 
expressions generally expand left right 
person self age car luxury category enum compact cc integer motorcycle integer integer registration string vehicle location string person firstname string lastname string boolean age integer income date integer manager managed employee employer station name string real integer owns fig 

uml class diagram term property referring association ends role object plays association person employee rental station side effect free operations income 
expression ensures employees station minimum income date 
forall predefined ocl operation testing predicate holds member collection set employees case 
self employee forall income ocl suitable specifying queries 
fact constraints considered special kind queries required boolean result type query may result type 
expression selects vehicles registration number starting string 
due subtyping rules result type set vehicle capable holding car motorcycle instances 
subexpression vehicle refers left association owns provides set vehicles owned restricted select expression 
self vehicle select registration substring types start developing formal definition object constraint language looking concepts representing types associated operations 
way quite similar algebraic specification signature describe sorts operation symbols 
defining basic sorts proceed sort constructors subsort relations 
gives overview types available ocl 
arrows indicate subtype relationship types 
types introduced uml model elements considered sect 

real boolean string enumeration collection integer set sequence bag fig 

ocl type hierarchy basic types basic data types defined ocl boolean integer real string types independent particular uml model 
approach syntax basic types properties described data signature sigma sd omega sd set data sorts omega set operations 
signature includes simple sorts required ocl definition basic types integer real sd interpretation basic sorts usual extend set special value denoting undefined value 
sort sd mapped semantic domain function 
follows set sequences finite alphabet integer real boolean ftrue falseg string enumeration types uml model extend set basic types 
domain enumeration literal values 
example enumeration fig 
assigned type interpreted set operations defined basic sorts 
note operations overloaded name symbol distinguished looking argument sorts 
boolean theta boolean boolean boolean boolean gamma div mod max integer theta integer integer integer theta integer boolean gamma max min real theta real real floor real integer real theta real boolean string theta string string size string integer omega give examples interpretations operations 
ocl care taken passing undefined values arguments 
general operations strict evaluation semantics 
argument undefined operation yields undefined value result 
exceptions rule boolean operations false ed yields false true ed yields true 
true true true false false false ocl rules undefined values lead unexpected behavior exists forall expressions 
element collection undefined result expression undefined 
case forall expect result false case exists element making expression true 
natural behavior achieved requiring operations boolean result yield false case undefined arguments 
complex types ocl multi valued expressions described collection types 
sets bags lists constructed providing type parameter element type 
example type sequence integer denotes list values integer elements 
collection types may nested explicit construction complex types possible ocl 
evaluation yields value deeper nesting flattening process automatically transforms value set bag sequence containing basic data values 
lift restriction sake orthogonality allowing arbitrary number constructor applications 
complex structures avoided non trivial models 
example expression collect employee object class selects rental stations employees 
result type bag set person 
ocl definition result gets automatically flattened value type bag person 
flattening works described means example setf setf setf setf setf naive rule removing inner collections just repeating elements order appearance source expression suffice example easily construct case produce defined result 
consider expression gg variables holding objects type person result flattening 
problem mapping set sequence requires order set elements 
achieving deterministic flattening semantics equal results previous example induce order set elements priori defined types 
requirement generally having order types strong 
suggest keep structure evaluation results 
flattening nested structures desirable explicit transformations defined 
definition generalizes idea nested data structures notion sort expressions recursively applied construct complex structures 
definition syntax sort expressions set sort symbols 
set sort expressions expr defined follows expr 
ii 
expr set sequence bag expr 
iii 
expr collection expr 
iv 
expr 
initial set sort expressions set basic sorts 
consider data sorts sd defined previous section 
sect 
extend set classifier types introduced uml class models 
complex structures modeled sort constructors set sequence bag ii 
collection type iii strictly necessary defined ocl super type set sequence bag semantic point view values having specific type collection convenient define operations common type set sequence bag means super type 
just top type hierarchy ocl iv 
types direct indirect subtypes sort expressions interpreted sets possible values 
definition denotes set finite subsets set finite multisets 
definition semantics sort expressions semantics sort expressions expr defined follows defined sect 

ii 
set sequence bag iii 
collection set sequence bag 
iv 

set operations omega expr defined sort expressions 
operations express functions called features ocl collection types 
examples listed table 
ocl feature operation set union set set set union set theta set set bag including object bag including bag theta bag collection size integer size set integer size sequence integer size bag integer left column displays signatures features defined 
left hand side arrow denotes instance indicated type 
corresponding operation language right column case 
inherited features type collection size require specialized operations subtype 
appropriate operation selected determining collection expression results set bag sequence value 
group operations serves constructor functions representing literals ocl 
example literal setf expressed operation 
features exists forall operations argument type support type mixes different levels abstraction 
define operations part expression syntax sect 

section introduced sort expressions associated operations 
combining initial data signature obtain extended signature sigma expr sd omega sd omega 
uml class models relationship uml metamodel ocl informally explained 
components uml model form basic building blocks constraint expressions emphasize need precise interface 
features uml class model accessible ocl expressions classifiers classifier introduces distinct type person 
class types probably frequently types ocl expressions 
kinds classifiers core model datatypes interfaces 
basic data types included data signature consider 
furthermore subtype hierarchy induced classifiers generalization specialization utilized employ kind inclusion polymorphism ocl 
attributes structural properties classifiers described attributes name location 
associations association connects classifiers necessarily distinct 
complex expressions referring class types constructed navigation associations retrieve arrow indicates collection expression dot generally expressions 
terms set serif font refer elements uml metamodel see 
persons working employees 
navigation purposes association ends uniquely identified role names 
compositional relationships treated uniformly associations ocl 
operations operations methods marked side property may ocl expression income date returns income person specific date 
enumerations enumeration types extend set basic types see sect 

regard formalization ocl sufficient consider previously listed items 
properties describe static aspects uml model change time 
specification temporal aspects ocl provides pre postconditions 
primarily specify effects method definitions consider 
attr set attribute names role set role names 
define uml class model structure oe att op assoc meaning set classifiers 
oe partial order reflecting generalization hierarchy classifiers 
att set operation signatures 
functions mapping object type associated attribute value sort attribute symbol element attr op set signatures theta 
side effect free operations defined classifier having result sort argument denotes instance function applied called receiver message 
assoc set operation signatures 
functions returning instances associated object type operation symbol role chosen unique role name assigned association 
depending multiplicity association result sort single valued associations set multi valued associations having multiplicity sequence ordered associations 
example model class diagram fig 
defined follows 
vehicle car motorcycle oe car vehicle motorcycle vehicle att string person person boolean op real income person person theta date assoc employee person 
set person manager person 
person classifier associate sort having name 
possible interpretation classifier sort set object identifiers denoting currently existing object instances system state 
order guarantee safe expressions postulate set objects system state finite 
consider interpretation model detail section 
subsort hierarchy ocl supports polymorphism subtype hierarchy defined basic complex types 
hierarchy established subtype relation basic types integer real transitive subtype relation collection types 
furthermore extended generalization hierarchies uml models 
formalize subtype hierarchy language subsort relation defined sorts 
definition subsort relation ae subsort relation defined rules ii 
integer real iii 
oe iv 
set set sequence sequence bag bag 
sequence bag collection 
semantics subsort relation subset condition 
require sorts domain specialized sort subset general sort 
system state uml model describes static structure dynamic behavior system 
respect discussion ocl need consider evolution system state time 
general concentrate system state discrete point time 
system state provides context evaluation ocl expressions 
set existing object instances attribute values associations instances constitute state model 
section simple model objects attributes navigational expressions giving interpretation model classifier infinitely large set unique object identifiers fc subsorts imply subset condition object identifiers 
interpretation classifiers pairwise disjoint classifiers related subtyping describe model state oe point time hypergraph oe nodes graph represent objects edges represent associations objects 
edge represents link uml terminology instantiated association 
associations may ary edges may connect number nodes resulting graph requiring concept hyperedges 
nodes edges labeled additional information 
object node carries information attribute values edge labeled information role names 
definition system state class model 
system state oe labeled hypergraph nodes roles defined follows ae finite set nodes object identifiers 
ii 
set edges association links connecting nodes 
iii 
nodes 
function connecting edges nodes 
iv 
roles role 
function labeling edge tuple role names 
ff attr 
function labeling node set attribute value mappings 
shows uml object diagram representing part system state car rental model 
graph diagram nodes rental station object rs persons set attribute names values attached node respectively 
edges indicate links station persons 
note edge labeling role names enables distinguish manager employee association rs cases set objects linked multiple edges necessary edge unambiguously assigned distinct association 
identify associations unique combinations role names require nodes nodes roles roles 
rs location ny airport lastname clark person age lastname barnes person age employer employer employee employee manager fig 

object diagram representing system state definition system state prerequisite fixing meaning expressions referring attributes associations 
features operations defined part model attribute operations interpreted follows operation att attr function mapping objects attribute values 
system state graph semantics dom 
attribute age person object example age person age person 
association operations allow construction navigation expressions 
ary association induces delta gamma operations allowing navigation participating classes direction 
association ends labeled role names purpose 
operation assoc role fc set sequence maps object sort single object set sequence associated objects sort 
fc nodes nodes roles rg result edges incident source object target objects considered function projecting tuple ith element 
may multiple edges representing different associations set objects edge leading target object labeled role name operation symbol 
example fig 
interpretation association operations yields results employee person 
rs fp manager person 
rs fp employer person 
frs employer person 
frs person 
frs expressions define expression syntax semantics constraints queries 
give complete syntax expressions explain semantics application ocl detail 
definition expressions signature developed previous sections 
signature sigma sm omega provides set sorts sm expr sd containing basic sorts class sorts complex sorts constructed sort expressions 
partial order sorts reflects subtyping 
sorts set operations omega omega att op assoc defined 
signature contains initial set syntactic elements basically order sorted algebraic specification 
signature define expressions 
ocl expression evaluated context classifier instance 
note distinguish basic sorts classifier sorts 
framework expressions built context simple data values integers 
definition syntax expressions var fvar set variables indexed sort syntax expressions classifier set expr indexed sort defined follows self expr ii 
expr var iii 
expr theta delta delta delta theta omega expr iv 
fi expr expr expr boolean expr expr 
expr expr vi 
iterate expr var var expr expr sequence expr set expr bag self expression provides classifier instance giving context evaluation 
variable bindings ii introduced features iterate abstraction select exists 
operation expressions iii include predefined operations integer arithmetic accessing object attributes associations 
alternatively operation expression may written ocl path syntax 
denotes collection value dot may replaced arrow symbol 
expression iv provides alternative selection expressions 
expression cases static type information insufficient 
corresponds feature ocl 
iterate feature ocl captured iterate expressions vi 
large group query constructs reduced iterate expressions 
semantics kind expression fixed definition 
context evaluation classifier instance variable assignment fi var 
definition semantics expressions set variable assignments semantics expression expr function theta defined induction structure self fi ii 
fi fi 
iii 
fi fi fi 
iv 
fi fi fi fi true fi fi false fi fi fi vi 
iterate fi iterate fi fi modified assignment fi fi 
expr sequence iterate fi fi fi 
iterate tail fi fi 

expr set expr bag iterate fi fi fi iterate gamma fi fi fi modified assignment fi definition vi notation tail operation applied sequence returns sequence head element removed 
ocl operation subsequence size purpose 
definition vi wrote gamma operation removes element set bag expression sets corresponding ocl feature excluding 
bags equally named ocl feature removes occurrences want 
iterate term effectively receives parameters collection set sequence bag term containing elements initial value term binary operation phi 
semantics iterate term expression phi phi delta delta delta phi gamma phi kind evaluation commonly known functional style programming languages fold operation 
note restrict application iterate expressions collections type sequence 
sets bags assume particular order elements collection selected applying phi 
require phi property phi phi phi phi elements phi associative commutative property fulfilled 
operations evaluation order difference string concatenation non ordered collection transformed sequence iterate applied 
summary object constraint language important extension uml language 
kinds constraints expressed purely graphically oriented uml notation elegantly stated ocl expressions 
argued formal language formal semantics approach developing precise semantics ocl 
identified basic syntactic structures assigned semantics set theory 
tried solve problems inherent current ocl definition 
example proposed solution problems involved implicit flattening complex results pointed non obvious properties operations preconditions unambiguous interpretation iterate expressions 
rules example classified illegal operation concat property concat concat concat concat correct query iteration target explicitly transformed set ordered sequence 
formalization approach strictly distinguish immutable data types object types having mutable state 
distinction helps determining expressions safe respect termination evaluation finite results 
important aspect want build case tools supporting simulation validation models 
ocl expressions refer elements concrete uml class models 
requires defined interface class models precise understanding semantics classes associations attributes generalization 
far know comprehensive precise uml semantics available 
introduce concept formally representing class models intended meaning notion system state 
extend framework formalization aspects uml 
acknowledgments anonymous referees helpful comments 

aksit matsuoka editors 
ecoop object oriented programming th european conference finland june proceedings lncs 
springer verlag 

bertino castelli vitale 
formal representation state diagrams omt methodology 
jeffery editors proc 
seminar theory practice informatics lncs pages 
springer verlag 

lano maibaum 
objects associations subsystems hierarchical approach encapsulation 
aksit matsuoka pages 

booch 
object oriented analysis design applications 
benjamin cummings 

cheng 
formal semantics object model diagrams 
ieee transactions software engineering 

breu hofmann klein rumpe 
formalization unified modeling language 
aksit matsuoka pages 

cattell editor 
object database standard odmg 
morgan kaufmann publishers 

chen 
entity relationship model unified view data 
acm trans 
database systems 

ebert 
integration semantics oo notations 
kilov rumpe pages 

evans france lano rumpe 
developing uml formal modelling language 
muller pages 

france petrie 
exploring semantics uml type structures bowman derrick editors proc 
nd ifip conf 
formal methods open object distributed systems pages 
chapman hall london 

france evans lano 
uml formal modeling notation 
kilov rumpe simmonds editors proc 
oopsla workshop object oriented behavioral semantics 
tu munchen tum 

gogolla 
extended entity relationship model fundamentals pragmatics 
lncs 
springer verlag berlin 

gogolla richters 
constraints queries uml 
editors unified modeling language technical aspects applications 
physica verlag heidelberg 

kent mitchell 
reflections ocl 
muller pages 

jacobsen jonsson 
object oriented software engineering case driven approach 
addison wesley 

kilov rumpe editors 
proc 
ecoop workshop precise semantics object oriented modeling techniques finland june 
tu munchen tum june 

kleppe warmer cook 
informal formality 
object constraint language application uml metamodel 
muller pages 

lano 
enhancing object oriented methods formal notations 
theory practice object systems 


muller editors 
proc 
uml international workshop france june 


formal approach cases relationships 
muller pages 

rational software unified modeling language uml version www rational com 

uml semantics 
published part 

object constraint language specification 
published part 

rumbaugh blaha premerlani eddy lorensen 
objectoriented modeling design 
prentice hall englewood cliffs nj 

france 
formalization uml class structures proc 
st annual int 
computer software applications conference compsac pages 
ieee 

wang richter cheng 
formalizing integrating object dynamic models omt 
proc 
th int 
conf 
software engineering icse pages 
acm press 

warmer hogg cook selic 
experience formal specification cmm uml 
kilov rumpe pages 
