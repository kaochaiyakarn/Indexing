optimal algorithm generating minimal perfect hash functions czech institute computer science university technology poland george havas department computer science key centre software technology university queensland st lucia queensland australia department computer science key centre software technology university queensland st lucia queensland australia new algorithm generating order preserving minimal perfect hash functions 
algorithm probabilistic involving generation random graphs 
uses expected linear time requires linear number words represent hash function optimal constant factors 
runs fast practice 
keywords data structures probabilistic algorithms analysis algorithms hashing random graphs consider set words finite string symbols ordered alphabet sigma 
hash function function maps set words interval integers say gamma integer usually hash function word computes address integer storage retrieval item 
storage area store items known hash table 
words address computed called synonyms 
due existence synonyms situation called collision may arise items address 
schemes resolving collisions known 
perfect hash function injection appeared information processing letters october 
sets defined say minimal perfect hash function 
definition implies perfect hash function transforms word unique address hash table 
collisions occur item retrieved table single probe 
hash function order preserving puts entries hash table prespecified order 
minimal perfect hash functions memory efficient storage fast retrieval items static set reserved words programming languages command names operating systems commonly words natural languages overview perfect hashing area surveyed 
independent developments appear 
various algorithms different time complexities constructing perfect minimal perfect hash functions including 
sager proposed algorithm uses graph considerations 
author claimed algorithm complexity 
algorithm solutions developed mainly experimental evidence time performance 
new algorithm random graphs finding minimal perfect hash functions form mod functions map strings integers function maps integers gamma 
show expected time complexity 
space required store generated function log bits optimal order preserving minimal perfect hash functions see 
new algorithm consider problem 
undirected graph je jv find function gamma function gamma defined mod bijection 
words looking assignment values vertices edge sum values associated endpoints taken modulo number edges unique integer range gamma 
problem solvable arbitrary graphs considered 
graph acyclic simple procedure find values vertex follows 
associate edge unique number gamma order 
connected component choose vertex vertex set 
traverse graph depth search regular search graph vertex vertex reached vertex value associated edge set gamma mod apply method component pseudocode fig 
solves problem addressed 
notice reversed original problem defining values function searching suitable values function 
prove correctness method sufficient show value function computed exactly vertex 
property clearly fulfilled acyclic 
solution graph problem second part algorithm generating minimal perfect hash function called assignment step 
ready new algorithm generating minimal perfect hash function 
denote length word jw th character 
algorithm comprises steps mapping assignment 
mapping step graph constructed gamma determined introduce auxiliary functions designed independent random functions mapping gamma 
various possibilities 
choose functions jw mod jw mod tables random integers modulo character position character word 
space required tables log bits entry number range gamma effect constant number entries dependent length keys size character set 
long fits computer word words 
alphabet size treating character number obtain suitable pair mapping functions jw theta mod stored space expense greater time hash function evaluation common machine architectures table lookups replaced multiplications 
fact characterize suitable functions little random number expense greater computation time 
space requirements increasing dominated space storing function considerations interest small goal find values graph acyclic 
easy deterministic method doing randomly generate tables repeatedly obtain acyclic graph see fig 

acyclic graph generated assignment step executed 
notice generating minimal perfect hash function reduced problem described section 
acyclic graph edge repeat initialize randomly generate tables loop jw mod jw mod add edge graph loop acyclic mapping step procedure traverse vertex visited true neighbours loop visited gamma mod traverse loop traverse visited false loop visited traverse loop assignment step function string integer jw mod jw mod return mod evaluating hash function corresponds uniquely word search desired function straightforward 
simply set gamma th word values function computed assignment step 
function minimal perfect hash function evaluation hash function done fast constant time involving little standard hashes 
pseudocode fig 

complexity analysis section show expected time complexity algorithm linear number words 
result technique generate edges graph dependency 
due large degree randomness introduced mapping functions assumption edged graphs generated uniformly random give quite accurate results especially graphs quite sparse 
henceforth assumption theoretical analysis 
treat alphabet size maximum key length constants reasonable assumption specific application area 
fact bounded alphabet size raised maximum key length practical restriction 
second step algorithm assignment runs time 
iteration mapping step operations executed generation tables random integers ii computation values auxiliary functions word set iii testing generated graph acyclic 
operation takes time proportional maximum length word set times size alphabet sigma constant 
operations ii iii need time respectively 
complexity single iteration 
show expected number iterations mapping step constant suitable choice denote probability generating acyclic graph edges vertices 
random variable gamma gamma standard probability arguments mean equal expected number iterations executed mapping step variance gamma probability number iterations mapping step exceeds gamma obtain high probability generating acyclic graph iteration deal sparse graphs 
choose cm constant detailed probabilistic arguments appear 
briefly proceed follows 
random labeled graphs edges cm vertices expected number cycles length tends kc 
result graphs self loops multiple edges may extended cover 
probability having acyclic graph tends exp gamma kc 
lim kc ln gamma probability getting acyclic graph tends gamma 
probability generating acyclic graph approaches nonzero constant choose 
expected number iterations large 
complexity mapping step complexity algorithm 
cm complexity algorithm linear number words 
slightly improve performance algorithm modifying functions self loops 
way change definition ensure generate bipartite graphs 
case gamma bipartite graphs generated probability generating cycle free graph increases gamma improvements special properties words taken account 
simple example consider set month names abbreviated characters 
want construct minimal perfect hash function th month kept gamma th location hash table 
select 
notice second third characters keys unique key restrict definition tables rows table 
space required store tables theta theta bytes 
suppose mapping step randomly generated contents tables shown fig 
unused letters omitted 
key compute edge corresponds 
jan mod mod jan mod mod feb mod feb mod mar mod mar mod 
edge closed cycle point computing edges remaining keys current contents tables 
option early detection cycles included pseudocode fig 
quite easy implement 
set union contents mapping tables iteration second iteration algorithm 
results theoretically inferior solution best set union algorithms worst case complexity mff ff functional inverse ackermann function 
linear time performance set union algorithms expected average authors point practical purposes ff constant larger cycle mapping process repeated 
contents tables generated second iteration shown fig 

time mapping leads acyclic graph shown fig 

assignment step connected component select vertex assign 
perform regular search component computing values associated remaining vertices 
start vertex 
suppose explore right branch 
gamma mod gamma mod gamma mod gamma mod 
returning vertex explore left branch 
set gamma mod gamma mod gamma mod 
ends assignment step largest component 
procedure applied remaining components 
easy see suitable values 
ends generation phase hash function 
calculate hash table address nov say compute nov mod nov mod 
hash table address nov mod mod 
extra 
gained information nov th month year 
sep jul jan nov dec mar apr feb may aug oct jun graph generated second iteration mapping step experimental results new algorithm specific improvements implemented language 
experiments carried sun sparc station running sunos tm operating system 
results summarized table 
entry table produced algorithm generated follows specified number words random sets words selected 
table entries represent averages trials 
words chosen words dictionary 
dictionary obtained removing standard unix dictionary words shorter characters longer characters containing characters letters 
experiment words selected shuffling 
artificial sets random words generated 
values iterations mapping assignment total number words average number iterations mapping step time mapping step time assignment step total time algorithm respectively 
times seconds 
experimental results fully back theoretical considerations 
time requirements new algorithm low 
observe average number iterations approximately equal indicated theory 
likewise iterations mapping assignment total table experimental results mapping assignment total times grow approximately linearly comparison timing results reveals algorithm faster 
example algorithm took seconds generate minimal perfect hash function keys sequent machine 
implementation algorithm edge oriented representation graphs 
allowed handle edges concrete objects represented integers pairs vertices 
space complexity algorithm linear number words small constant factor 
new algorithm generating order preserving minimal perfect hash functions developed 
expected time complexity algorithm algorithm time optimal 
space complexity optimal cm log log bits cm words long fits word 
observe th word placed gamma th location hash table generated hash function preserves order words input 
allows arbitrary arrangement may useful applications 
generated function quickly computable space needed store may small ffl ffl 
extensive experimental results confirmed theoretical results 
shown time requirements new algorithm low large sets 
nick wormald university melbourne help calculating probability generating acyclic graph 
anonymous referees thoughtful comments led improved presentation 
second author supported part australian research council part dimacs rutgers 
bollob 
random graphs 
academic press london orlando san diego new york toronto montreal sydney tokyo 
bollob simon 
expected behaviour disjoint set union algorithms 
th annual acm symposium theory computing stoc pages may 
brain 
near perfect hashing large word sets 
software practice experience 
brain 
perfect hashing sparse matrix packing 
information systems 
cercone krause 
interactive system finding perfect hash functions 
ieee software 
chang 
study ordered minimal perfect hashing scheme 
communications acm april 
chang lee 
letter oriented minimal perfect hashing scheme 
computer journal june 
cichelli 
minimal perfect hash functions simple 
communications acm january 
czech 
generating minimal perfect hashing function time 

dietzfelbinger meyer auf der heide 
new universal class hash functions dynamic hashing real time 
th international colloquium automata languages programming icalp pages warwick university england july 
lncs 
ebert 
versatile data structure edge oriented graph algorithms 
communications acm june 
erdos enyi 
evolution random graphs 
publ 
math 
inst 
hung 
acad 
sci 
reprinted spencer editor art counting selected writings mathematicians time pages 
cambridge mass mit press 
fox chen heath 
order preserving minimal perfect hash functions information retrieval 
acm transactions information systems july 
fox chen heath 
lend faster algorithms constructing minimal perfect hash functions 
technical report tr virginia polytechnic institute state university february 
fox heath chen 
log algorithm finding minimal perfect hash functions 
technical report tr virginia institute state university blacksburg va april 
fox heath chen 
practical minimal perfect hash functions large databases 
communications acm january 
fredman koml os szemer edi 
storing sparse table worst case access time 
journal acm july 
gonnet baeza yates 
handbook algorithms data structures 
addison wesley reading mass 
gori soda 
algebraic approach cichelli perfect hashing 
bit 
karplus 
finding minimal perfect hash functions 
acm sigcse bulletin 
havas 
optimal algorithms minimal perfect hashing 
technical report university queensland key centre software technology queensland july 

reciprocal hashing method generating minimal perfect hashing functions 
communications acm december 
knuth 
art computer programming vol 
sorting searching 
addison wesley reading mass nd edition 
knuth 
expected linearity simple equivalence algorithm 
theoretical computer science 
lewis cook 
hashing dynamic static internal tables 
computer 
wormald czech havas 
family generators minimal perfect hash functions 
technical report dimacs rutgers university new jersey usa april 
sager 
new method generating minimal perfect hash functions 
technical report csc university missouri department computer science 
sager 
polynomial time generator minimal perfect hash functions 
communications acm may 
tarjan van leeuwen 
worst case analysis set union algorithms 
journal acm april 
winters 
minimal perfect hashing polynomial time 
bit 
yao 
expected performance path compression algorithms 
siam journal computing february 
