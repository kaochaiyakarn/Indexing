hierarchical path views model fragmentation transportation road types yun wu ning elke mail eecs umich edu dept electrical engineering computer science univ michigan ann arbor mi dept electrical engineering institute technology china efficient path query processing necessary route guidance identified key requirements intelligent transportation systems applications 
precomputing view shortest paths provides efficient path retrieval view maintenance storage costs unrealistic large networks 
road type classification propose hierarchical path view approach path view maintenance storage costs dramatically reduced cost negligible loss path optimality 
comparing traditional path finding approaches hierarchical hierarchical approach superior areas path search efficient connecting point low level roads high level roads vice versa dynamically determined traffic region high level traffic dynamically rerouted low level roads 
conduct experiments gain insight performance proposed algorithms model contrast difference computational resource requirements hierarchical path view algorithms 
path finding issues consider centralized path finding framework intelligent transportation systems 
centralized beacon route guidance vehicle supported part university michigan research center excellence sub sponsored dept transportation michigan dept transportation 
ning jing leave institute technology currently visiting university michigan likes national education committee china 
architecture development ibm team selected department transportation teams continue development proposed centralized architecture 
authors members university michigan research center excellence affiliated ibm team 
system submits path finding queries beacons traffic management centers real time receives instructions go 
widespread deployment beacons guarantees guided vehicles travel best paths continuously computed en route dynamic traffic conditions 
compared vehicle path finding typically invokes algorithm find paths centralized approach advantages computation device needed vehicles traffic information network link need disseminated vehicles 
result equipment required vehicle cost effective centralized path finding greater market penetration expected 
results reported focus providing solutions centralized path finding problem 
beacon tmc path view structure path pre computed request orig dest best path request dest turn straight dynamic update node link graph path computed demand centralized route guidance 
metropolitan traffic patterns time variant typically rush hours having heaviest traffic load 
consequently may receive large number path queries short period time rush hours 
search path query submitted different origin destination pairs may cause queries queued unable meet real time requirement 
route guidance function result may operate properly 
guarantee real time query response need alternative solution 
hierarchical path view solution propose precomputing path view best paths transportation network storing main memory updating periodically 
answer path query need lookup path view requested pair keys 
shortest path transitive closure algorithms literature dijkstra algorithm best worst case time complexities log networks new algorithm called tcd takes advantage uniformly low outdegree network incorporating color graph painting technique dijkstra algorithm 
experimental results show tcd improves computation time dijkstra networks 
path view modeled shortest path transitive closure captures aggregated path labels pairs 
requires storage 
large networks storage requirement may unrealistic path view computation time may long 
solve problems propose innovative hierarchical path view approach takes advantage network characteristics road type classification system road maps high speed roads interconnect different regions metropolitan road transportation network 
approach assumption freeway traveling preferred inter regional trips 
model phenomenon divide underlying network regions maintain level path views region 
create level path views road classification 
inductively continue fragment create higherlevel process fragmentation necessary 
hierarchical path view system path query carried single pair path search algorithm called hierarchical path search short hps 
hps intra regional search utilizes path view region inter regional path finding searches level higher 
approach superior conventional hierarchical path finding areas search efficient expanding individual links expands regional sub paths stored precomputed path views various levels 
result total number graph traversal expansions reduced 
connecting points graphs different levels dynamically decided current traffic condition 
flexible fixed connecting points static distance reroute vehicles fixed entry blocked 
region high level path blockage slow model reroute vehicles local streets region local path better traffic measurement 
fact complexity theta theta log number links number nodes network 
networks average outdegree small constant theta complexity log 
tcd stands color dijkstra 
extensive sets experiments conducted evaluate proposed approach 
experimental results show tcd effectively reduces path view computation time compared dijkstra networks hierarchical path view model significantly improves path view creation time space efficiency flat approach 
results show hps faster hierarchical algorithms indicating compared conventional approaches real time constraint satisfied approach 
real road map troy city accuracy path retrieved hps hierarchical clearly acceptable 
path view maintenance algorithms basic notations graph theory say labeled directed graph set vertices set labels set edges connecting pairs vertices 
borrowing terminology naming nodes contiguous numerals define network 
definition network graph fij ng set nodes total number nodes 
ji wg set weighted links set possible non negative link traffic measurements 
say source link destination 
traffic measurement link weight link denoted lw ij definition path view pv theta matrix jn element pv ij weight shortest path tcd algorithm creating path view tcd algorithm integrates dijkstra shortest path transitive algorithm color graph painting technique optimize computation time network 
sparse graphs networks dijkstra algorithm worst case time complexity theta log number nodes network compared complexity algorithms warshall depth breadth search 
graph sparse uniformly low outdegree node possible assign node colors green red outgoing link green node connects red node 
perfect grid graph operation result equal number green nodes red nodes 
real maps number green nodes relatively close half nodes 
run single source dijkstra shortest path algorithm red nodes 
process complete single source transitive closure green node trivially computed applying agg con operations outgoing links shortest paths adjacent nodes see con stands concatenation agg stands aggregation 
path operators path algebra developed refined rosenthal agrawal ioannidis 
shortest path transitive closure computation agg minimum function con add function 

ratio number green nodes red nodes approach zero case networks algorithm save computation time 
introduce definition colored network see 
definition colored network graph green red fij ng set nodes total number nodes 
ji wg set weighted links set possible non negative link traffic measurements green red green red green red outgoing links node green connect nodes red 
red color node green color node legend sample color painted graph 
graph created color paint algorithm 
loop line guarantees nodes painted 
node initialized green line 
outgoing links connects green node lines node changed green red lines 
outgoing links connect green node line nodes connected outgoing links painted red lines 
guarantees property outgoing links green node connect red nodes specified definition 
painted color paint algorithm traverses network expanding nodes outgoing link connected node lines 
correctness algorithm fact node painted green nodes connected outgoing links painted red 
node painted green red nodes process guarantees result color paint algorithm violate definition traversing graph 
tcd algorithm computes shortest path transitive closure called path view colored network color sets green red created color paint algorithm 
node red set tcd algorithm calls dijkstra compute shortest path transitive closure node green node tcd algorithm adds link weight outgoing link single source transitive closure con operation links connected respectively shown lines 
choose destination smallest outgoing links run color paint algorithm node real map troy city derive green nodes red nodes 
known dijkstra algorithm single source shortest path transitive closure computation 
shall replicate 
algorithm color paint data structures queue set green red fi ng unmark fi ji green insert remove mark green red green green fjg fk lg green green green gamma fjg red red fjg fi od green fk lg red red fkg od fi fi fi lg unmarked insert fi od od od return green red color paint algorithm 
algorithm tcd pv pv shortest path view green red 
fi ng pv ij pv ij fi od fi dijkstra od lg ng pv ij agg pv ij con pv kj od od od return pv tcd algorithm 
agg operation shortest path weight 
result new single source path view green node 
correctness algorithm fact outgoing links green node connect red nodes single source transitive closures computed 
coloring may done tcd algorithm may repeated times recompute path views frequently 
theorem green red jn time complexity tcd algorithm max theta theta log theta 
proof proof theorem 
time complexity regular dijkstra pair shortest path algorithm theta log networks 
theta log time complexity tcd theta time complexity tcd algorithm theta theta log 
case time complexity tcd exceed dijkstra 
typical graphs 
theta log significant improvement tcd dijkstra computation time expected 
hierarchical path view model tcd algorithm create maintain path views underlying network 
hierarchy adopted path view encodes pair shortest paths needed 
view demands space complexity maintenance requires theta theta log time complexity 
large networks unacceptable 
solve space computation time constraints large networks propose hierarchical path view model road type classification networks assumption roads higher speed preferred long distance traveling 
idea hierarchical approach fragment oversized map regions smaller sizes 
fragmentation tcd compute maintain path view region 
high speed links interconnect different regions identified nodes collectively form map higher level 
graph fragmentation fragmentation graph reduces size path views number nodes higher levels 
center greedy algorithm fragment nodes level regions smaller size 
node level belong region 
create regions pick center nodes evenly distributed network 
done exact geographic location node known networks 
center nodes breadth expansions adding connected nodes respective regions conducted expansion center node time round robin fashion 
expansion thread stops fresh node traverse traversed node expanded center node 
case identifies border link nodes belong different regions 
selecting center nodes evenly distributed network generates regions approximately equal size fragmentation process line process independent traffic changes manual adjustment applied fine tune process 
shows fragmentation troy city map proposed fragmentation algorithm 
axis axis partition troy map nodes fragmentation graph center algorithm 
hierarchical structures classification links nodes generally roads classified series road types residential streets main roads state highways highways difference road types typically average travel speed 
base classification average travel speed 
create hierarchy levels associate link class example may create link type classes level hierarchy classify local street links freeway links classification node adopts highest class classes associated incoming outgoing links 
example node outgoing links associated classes incoming link associated class class associated node creating hierarchy create level hierarchy classes ck gamma created links nodes assigned class properly 
construction hierarchy network corresponds induction process described 
base condition process creating ground level level hierarchical path view model flat graph 
level graph 
example level graph 

determine number regions level called 
desirable time required compute path views regions divide network minimal regions size 

fragmented level regions 
process creates regional maps 
color regional subgraph running color paint algorithm 

compute path views regional subgraphs running tcd algorithm 
pv pv pv created 
induction process creates level map level map 
create level map steps ffl level nodes nodes level links classes higher ck connect different level regions 
example nodes ends link connects level regions class higher level nodes 
ffl pair wise combination level nodes identified previous process say level region forms level link pv ij 
pv ij shortest path weight level link weight level 
nodes level nodes level region pair wise combinations nodes form level link 
example link exist level map created level map link weight equals shortest path weight path view pv ffl level link nodes level nodes connects different level regions level link 
link weight equals pv ij shortest path weight example class link connects nodes different level regions level link 

topmost level number level determine proper number regions level denoted fragment fk level top level 

level graph fragmented fk level regions 
fragmentation necessary fragment 

color regional subgraph level running color paint algorithm 

compute path views regional subgraphs level running tcd 
process corresponds creating path view pv level map 

topmost level construction hierarchical path view complete 
path search hierarchical path view model flat hierarchy path view approach path retrieved lookup path view 
proposed hierarchical path search finds path navigating hierarchical graph hierarchy composing partial paths encoded path views regions different levels levels hierarchical graph example flat graph class links class links legend level map level map level map level map nodes level nodes level hierarchical path view model 
path origin destination 
section describe hierarchical path search hps retrieves single pair path hierarchical path view model 
formal presentation hps algorithm 
hps algorithm conducts forward search source node backward search destination node simultaneously synchronized fashion 
forward backward expansions climb hierarchy network 
shortest paths nodes region precomputed link expansion traverses shortest path region local node node connects higher level map searches directions reach region certain level 
searches nodes forward backward respectively region hps adds weights paths traversed far source destination best path weight precomputed region terminates 
sum proposed best path weight source destination 
similar algorithm hps adopts heuristics section 
expansion hps results values actual traversed weight forward expansion actual traversed weight backward expansion estimated weight section 
priority expansion active expansion thread smallest value expansion traverses link time hps traverses path fragment encoded regional path view expansion 
actual number expansions needed hps fewer result path finding efficient hps pv pv pv pv level path views level path view hierarchical path views created 
hierarchical path view model conventional approach 
assumption hierarchical path views frequently updated tcd reflecting traffic hps captures dynamicity traffic ways 
region expands local node nodes connect higher maps 
words different levels path search dynamically finds best entry point low speed link high speed link best exit point reverse 
improves accuracy selected paths hierarchical path view model 
second expansion hps expands regional shortest path looking regional path view 
algorithm force path search follow certain high speed links enters higher level model 
actual path retrieved system depends date traffic measurements taken path view update 
regional paths selected optimal view update 
exists slow downs high speed link path view computation automatically avoids obstacles 
terms route guidance feature means traffic automatically rerouted local streets incidents freeways 
evaluation experimental results testbed kinds maps synthetic grid maps real street map 
synthetic grid maps randomly select edges vertical horizontal high speed links 
link weights randomly selected high speed links having consistently higher travel speed local links 
real street map troy city nodes experiments 
speed limit link length link traversal time seconds calculated link weight link 
threshold link weight select high speed links 
implementation tcd hps hierarchical algorithms store data main memory matrices arrays model path views 
experiments conducted dedicated sun sparc workstation mb main memory 
creating path view total cpu time seconds number nodes graph time create path view level tcd real map tcd real map dijkstra real map level tcd grid graphs regions tcd grid graphs dijkstra grid graphs level tcd real map regions tcd real map dijkstra real map performance creating path view 
run sets experiments comparing performance path view creation dijkstra hierarchy proposed tcd hierarchy tcd level hierarchy regional subgraphs level 
algorithm conduct experiments set grid graphs nodes nodes real map troy 
results reveal tcd algorithm improves path view computation time significantly dijkstra 
tcd algorithm hierarchy improves cpu time tcd algorithm hierarchy demonstrating efficiency hierarchical approach path view creation time 
memory requirement total main memory megabytes number nodes graph main memory requirement level tcd real map tcd real map level tcd grid graphs regions tcd grid graphs level tcd real map tcd real map memory requirement path view hierarchy versus flat model 
experiment compare main memory space requirement hierarchical path view non hierarchical path view 
experiment utilize grid graphs different sizes troy map 
result shows hierarchical model significantly reduces memory space requirement input maps 
path search time total cpu time microseconds number nodes graph path search time grid graphs flat path view level hierarchical path view regions hierarchical search search path search time 
compare path search efficiency different approaches flat path view approach level hierarchical path view approach regions level approach hierarchical approach 
approaches estimate function heuristic estimate gamma gamma minimum link weight unit 
estimate euclidean distance nodes times minimum link weight unit 
hierarchical approach modeled node graph fixed entry exit node high speed links shortest geographic distance 
search reaches entry node source node stays high speed links exit node destination reached 
point search goes regular local links destination reached 
centralized path finding turn information crucial path search result shortest path weight source destination 
turn information trivially incorporated approaches constant time 
results denotes average path search time large number randomly selected node pairs 
flat path view approach path search involves single lookup path view requires zero time experiments 
hierarchical path view approach best time followed hierarchical flat path view efficient path search time memory required create update path view may realistic see 
hierarchical path view approach compromise achieving efficient path search resources time space required maintain path view 
hierarchical path inaccuracy rate hierarchical approach hierarchical path view guarantee path optimality 
path inaccuracy rate measured 
entry exit point called centroid route guidance applications 
definition pw ij weight path node node pw ij weight optimal path path inaccuracy rate pw ij pir pw ij ij gamma pw ij pw ij theta 
experiment construct level hierarchy troy map fragment level graph regions run tcd create path view 
randomly select distant node pairs run hps algorithm find paths 
path sought calculate path inaccuracy rate comparing optimal path weight 
node pairs run hierarchical algorithm centroid approach record path inaccuracy rate path 
path view path inaccuracy rate path inaccuracy rate 
shows results experiments average path inaccuracy rate hierarchical path view model hierarchical experiment demonstrates hierarchical path view model compromising path optimality negligible path inaccuracy rate better hierarchical proves assumption high speed roads generally preferred inter regional traffic 
related research proposed shortest path closure algorithms disk 
performances time unacceptable cyclic graphs maps 
advantages graph characteristics significantly improves performance disk computation dynamic reordering approach works small mid sized maps 
hierarchical approach offers scalable solution larger maps 
describes route guidance model historical data uses hierarchical materialize frequently queried paths 
path retrieval time materialized paths requires minimum time 
average path inaccuracy rate 
presents path finding system road type hierarchy algorithm 
system assumes fixed connection points local streets freeways lacking flexibility dynamic selection connecting points 
result path accuracy rate model lower model 
focused hierarchical structures query optimization dividing relation fragments 
approach actual query result case path view materialized 
fragmentation prefers relations acyclic nature making suited highly cyclic graphs maps 
introduces hierarchical fragment super graph sensitive update base relation feature undesirable networks link weights change rapidly 
proposed similar fragmentation method create hierarchical graphs generate path view subgraph 
differs utilizes road type information guarantees path optimality cost reduced efficiency 
provides potential solution general database recursive query problems require accuracy rate 
research hierarchical path view model 
hierarchy model created road type classification fragmentation network smaller regions 
road type classification provides effective heuristic favors high speed roads traffic fragmentation decreases size path views 
result path view maintenance costs time space reduced path retrieval efficient conventional path search algorithms demonstrated experimental results view maintenance algorithm tcd path search algorithm hps 
furthermore model offers features desirable path finding applications 
connecting points lower level higher level determined dynamically traffic measurements path view 
second region traffic rerouted high level roads low level streets measurements path view 
consequently experimental results show path inaccuracy rate model smaller hierarchical 
proposed hierarchical path view model better satisfy path finding requirements real time path query dynamic rerouting minimum path inaccuracy rate alternatives 
aho hopcroft ullman design analysis computer algorithms addisonwesley pp 

agrawal dar jagadish direct transitive closure algorithms design performance evaluation acm transactions database systems vol 
sep pp 

carr graphs networks clarendon press oxford england 
dijkstra note problems connection graphs numerische mathematik march pp 

yun wu huang ning jing elke rundensteiner path view algorithm dynamic reordering approach university michigan rce center technical report 
yun wu huang ning jing elke rundensteiner hierarchical path views model fragmentation transportation road types university michigan technical report preparation 
apers data fragmentation parallel transitive closure strategies proc 
th int 
conf 
data eng pp 

ceri parallel hierarchical evaluation transitive closure queries st int 
conf 
parallel distributed inf 
sys pp 

ibm laurel architecture requirement document 
ioannidis ramakrishnan transitive closure algorithms graph traversal acm trans 
database systems vol 
sep pp 

jing huang rundensteiner shortest path queries hierarchical graph model evaluation university michigan rce center technical report july 
rosenthal dayal manola traversal recursion practical approach supporting recursive applications proc 
acm sigmod pp 

coyle path computation algorithms advanced traveller information systems ieee th int 
conf 
data engineering pp 

smith presentation annual rce meeting university michigan 
warshall theorem boolean matrices jacm pp 
yang shekhar hancock path planning evaluation databases pp 

