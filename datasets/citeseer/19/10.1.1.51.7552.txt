petri nets specifying active objects generative communication tom holvoet pierre department computer science leuven celestijnenlaan leuven belgium mail tom holvoet cs kuleuven ac presents approach modelling implementing reasoning systems principles concurrent object orientation generative communication petri nets 
approach illustrated case study proposed blanc 
case variant known dining philosophers problem called philosophers problem 
presents results ongoing research combining principles concurrent object orientation generative communication petri net formalism 
combination components appears provide sound basics large number requirements development complex applications open systems flexibility reusability modular development coordination active objects formal reasoning behavioural issues isolated components entire system configurations 
concurrent object orientation natural extension sequential object orientation objects model real world entities intrinsically concurrent entities 
concept generative communication initiated computer science research area coordination 
coordination involves managing communication interaction active objects 
interaction active entities open systems typically investigated notion 
petri nets nice formalism modelling reasoning concurrent systems simple powerful instruments specifying concurrency causality synchronization 
visual representation system models understandable accessible 
section shortly objective linda extension linda yielding objectoriented coordination model open systems 
petri net objects objective linda section tackle case study proposal philosophers section 
final remarks summarized 
generative communication objective linda generative communication gel aims provide dynamic communication forum entities 
called blackboard shared data space 
objects communicate putting data items messages 
data space retrieved research assistant belgian fund scientific research open systems systems active passive entities may dynamically join leave system 
entities priori knowledge entities cooperate 
data space producer consumer retrieve insert 
producer consumer model generative communication 
objects 
object retrieve data items asking data space item matching certain template item 
generative communication decouples objects need know order communicate 
object put message date space possible reader exists 
decoupling appears necessary dealing openness systems 
consider simple example producer consumer problem see 
modelled active objects sharing data space 
produced item put data space 
consumer continuously retrieves item data space consuming 
linda gel probably best known example coordination model generative communication 
kie objective linda proposed 
data space replaced hierarchy object spaces 
objective linda aims enhancing linda mainly aspects ffl object matching contrary linda matching objects contents variables denoting object state object matching objective linda object types predicates defined corresponding type interfaces 
ffl non blocking multi set operations object spaces operations defined object spaces mainly insertion retrieval objects annotated time value necessary cope system failures open distributed systems operations extended multi sets matching objects inserted retrieved object spaces atomically 
ffl multiple object spaces having object space feasible large systems object spaces forum communication objects multiple object spaces may separate goals closely related objects object space objective linda newly created active object knows object spaces object space created context object space newly created object space self object space objects may create new object spaces object spaces may communicated active objects particular passive objects called object space os allows agents offer object spaces agents 
view notion agentspace denoting set active objects system 
objective linda allows build open systems modelling systems changing sets entities communicating decoupled manner introducing multiple object spaces enhanced operations allowing multi sets reflecting requirements openness 
petri net objects objective linda existing languages systems objective linda suffers aspects programs hardly readable execution communication scenarios hard track provide formal framework reasoning behaviour common object space produce deliver get consume consumer producer producer consumer model petri nets specifying individual object behaviour representing object spaces places relating nets communicating objects 
isolated entities configurations closely related entities entire systems 
designer falls back ad hoc methods finding system may deadlock 
bound result erroneous 
petri nets 
introducing nets objective linda requires definitions ffl specification individual object behaviour active objects autonomous behaviour activity objects initiated objects reactive behaviour behaviour resulting presence particular objects object spaces modelled petri net part specification encapsulated objects kind net form net nets high level nets may purpose multi model principle see hv independently net specification objects 
passive objects objects reactive behaviour net describes object protocol denoting sequence messages objects process 
formal semantics net type theoretical issues proper definitions subtyping expressed formal language net represents 
objects provided net description called petri net objects 
ffl formalization object space concept object spaces message object containers active objects insert items retrieve items types particular predicates similarity principle high level nets cpns cooperative nets obvious 
object spaces represented places operations object spaces represented transitions adjacent object space places input arcs insertion messages object object spaces output arcs denoting message object retrieval type information particular predicate 
illustrates basics ideas producer consumer problem mentioned earlier 
active petri net objects producer consumer specified simple net 
communicate common object space modelled place arcs annotated similar high level nets 
analysis purposes object considered separately object communication account merely reasoning internal behaviour object configurations cooperating multiple objects communicate shared places investigated high level net 
models agents object spaces additional features 
features introduce new expressive power aim offer expressive comfort 
exhaustively discussed hk 
mention named places 
idea 
places net variable associated 
content variable identifier actual place named place represents 
firing transition content variables may changed assignment operation 
allows form dynamicity net structure 
input places change run time 
changing content named place variable means changing actual input place transitions adjacent named place 
corresponding arcs relation places transitions relation place variables transitions 
named places modelling object spaces 
graphically represented rounded boxes variable name inside 
named places may feature surprisingly simple translation transforms net named places high level net equivalent details see hk 
description combined objective linda petri net approach means meant complete 
aims give intuition objects analysed individual entities communicating objects entire systems analysed considering communication forums common places 
far elaborate description approach hk 
case study philosophers section sketch solution case study proposal philosophers blanc 
proposal left quite room interpretation properties behaviours philosophers state interpretation 
statement case study case extension known dining philosophers problem 
number philosophers sitting table 
philosopher plate shares fork right left neighbour 
philosopher eat holding forks left right hand 
philosophers talk 
philosopher wants eat fork left hand ask left neighbour give fork 
holds right hand side 
philosopher holds fork left hand side left neighbour asks fork give 
holds right hand side 
philosophers may introduce new philosopher 
new philosopher brings plate fork left hand 
philosopher introduce philosopher left hand side 
philosopher may leave table autonomous decision neighbours told 
philosopher leave holds fork left hand 
eating philosophers obviously kinds objects philosophers forks 
forks mainly static data items provide net 
attempt model philosophers behaviour 
marking net shows philosophers initial state state creation time 
philosopher holds fork mouth empty 
self explanatory 
philosophers need communicate need ask forks exchange forks 
objective linda object model need describe object spaces needed 
object spaces forums inter object communication pair neighbour philosophers communicate forks introduce object space neighbours 
results os ln os rn os rn os ln philosopher mouth full swallow chew take bite philosopher mouth full swallow chew take bite give right fork holding right fork get right fork asked right fork ask right fork lacking right fork lacking left fork ask left fork asked left fork mouth empty get left fork holding left fork give left fork give right fork holding right fork get right fork asked right fork ask right fork lacking right fork lacking left fork ask left fork asked left fork mouth empty get left fork holding left fork give left fork philosopher internal behaviour left communication philosophers account right 
see right hand side 
general objective linda active objects know default object spaces self context object spaces note situation os rn serves context os ln serves self object space 
illustrate object spaces common space communication shows configuration philosophers 
arriving leaving philosophers add advanced features philosophers problem introducing new philosopher deciding leave telling neighbour philosophers leave 
complete model philosopher 
assist explanation model picture shows different parts labelled representing particular feature 
configuration philosophers respective object spaces 
net model assumes new type message type denoting set messages philosophers exchange 
messages left ou 
type tuples objects os logical assumed pre defined types 
explain initialization procedure procedure agents follow joining table 
philosopher start task eating settle table meaning neighbours move change object spaces 
os rn new philosopher set creation time coincides context object space created os ln philosopher introducing 
inserts firing init os logical new os ln notifying left neighbour object space communicating new philosopher 
left neighbour retrieved os logical new philosopher adjusted os rn notifies new philosopher sending message ou common object space 
new philosopher retrieve message os ln fire init done establishes new state holding right fork 
time start acquiring forks responding neighbours acquire forks 
clarify different parts philosopher net model part deals eating behaviour philosopher introduced earlier 
notice initial marking changed allowing proper initialization mentioned 
part allows philosopher introduce new philosopher 
philosopher active object action corresponds eval operation objective linda kie 
precondition action philosopher holds left right fork fork available fork heap 
fork heap additional common object space corresponding place initially marked set tokens ork objects 
transition fires new agent created shifted agentspace 
new agent os ln context object space 
philosopher may order left right neighbour leave table holds left fork right fork 
modelled transitions tell right leave resp 
tell left leave tell right leave puts token value type message os rn tell left leave puts token value type message os ln agent deals message part philosopher retrieve token left message knows right neighbour left 
token contains object space logical called picture identifies object space communicating new right neighbour 
agent appropriately alters os rn variable 
philosophers leave table left right neighbour told 
case represented transitions right told leave left told leave 
consider right told leave 
os rn input place transition fire message available input place 
message available philosophers right neighbour decided agent leave 
transition fires removes tokens prevent philosopher eat inserts message os ln informing left neighbour departure puts fork back heap forks 
philosophers leave neighbours told decided leave autonomously 
result message dropped object space shared philosopher left neighbour telling leaving sending name philosopher right neighbour object space right neighbour object space left neighbour 
intro new phil eval os rn os ln agentspace swallow chew os logical right told leave left told leave holding left fork holding right fork give right fork give left fork complete philosopher specification 
philosopher notices right neighbour leaving modify right neighbour object space soon right neighbour fork retrieved right neighbour object space moment 
evaluation case study proposal blanc mentioned features tested formalism modelling application 
formulate formalism conforms features 
ffl local control basic characteristics objective linda approach agents 
harmed introducing petri net specification agents behaviour execution control engine 
agent controls transitions retains control actions decisions 
ffl dynamic instantiation agents may join leave system run time 
restriction sort induced application imposing finite set forks available table 
ffl dynamic binding partner communication defined communication occurs model generative communication decouples communicating objects 
fact object spaces forums inter object communication passed objects allows dynamic partnership communication 
ffl inheritance polymorphism feature demonstrated application 
passive active objects considered types related inheritance subtyping polymorphism possible course 
ongoing research focuses types active objects objective linda 
petri net behaviour representation plays major role defining types subtypes 
similar blanc cooperative nets sb developed algorithm translating application modelled objective linda agents net behaviour specifications commonly kind nets coloured petri nets cpns 
importance fact obvious 
allows analysis techniques existing tools reason behaviour agents behaviour configurations agents deduce certain properties 
outline algorithm hk 
presents intermediate results ongoing research combining concurrent coordination generative communication petri nets 
advantages concurrent object orientation known reusability flexibility modular development 
coordination model objective linda suited coordination problems open systems 
petri nets provide sound basics visually representing complex entities performing formal analysis isolated objects sets communicating objects entire systems 
combination results high level visual formal technique designing implementing analyzing complex open systems 
ability translate system models known net models important 
allows rephrase research results petri net community terms agents agent configurations reuse analysis techniques exploit existing tools 
introducing nets active objects yields possibility tackle certain type theoretical issues providing formal notion subtyping formal language generated petri net 
subject current research 
gel gelernter 
generative communication linda 
acm transactions programming languages systems 
hk holvoet 
behaviour specifications active objects open generative communication environments 
hawaii international conference system sciences hicss maui hawaii jan 
submitted 
hv holvoet 
pn tox paradigm development environment object concurrency specifications 
proceedings workshop object oriented programming models concurrency turin italy 
appear 
kie 
designing coordination model open systems 
proceedings coordination italy april 
sb blanc 
cooperative nets 
proceedings th international conference application theory petri nets zaragoza spain lncs june 
