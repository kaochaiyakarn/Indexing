effects precision pointer analysis marc shapiro susan horwitz university wisconsin madison west dayton street madison wi usa cs wisc edu 
order analyze programs manipulate pointers necessary safe information pointer point 
algorithms determine information varying degrees accuracy 
little previous addresses relative accuracies different pointer analysis algorithms affect transitive results results subsequent analysis 
carried number experiments flow insensitive context insensitive pointer analyses address questions transitive effects pointer analysis affected precision analysis 
direct effects pointer analysis sizes computed points sets predicting transitive effects 
time trade offs 
precise pointer analysis general lead precise transitive results 
magnitude payoff precision depends particular points information 
direct effects predictors transitive effects increased precision points information causes subsequent analysis produce precise results causes subsequent analysis run faster 
compilers perform variety dataflow analyses live variable analysis permit safe code optimization 
analyses programming tools example provide feedback possible logical errors aid program understanding debugging aid testing 
presence pointers analyses difficult 
example consider code fragment printf variable point execution statements live assignment assignment considered live 
point assignment dead subsequent assignment compiler safely ignore assignment programming tool report indicating possible logical error 
supported part national science foundation ccr army office daah 
gather information needed analyses compiler perform pointer analysis determine dereference pointer safe approximation set objects pointing dereference 
previous pointer analysis concentrated design analysis new algorithms 
includes data produced running new algorithm data usually limited reporting times required analyze programs plus information sizes points sets produced possibly comparing times sizes new algorithm required produced algorithm 
examples see lr ruf ste egh wl sh 
certainly interesting clear information predict usefulness algorithm larger context 
example case discussed don really care size points set care point carried number experiments address questions transitive effects pointer analysis affected precision analysis 
example benefit gained precise pointer analysis step solving dataflow problem live variable analysis 
direct effects pointer analysis predicting transitive effects 
example correlation ratio sizes points sets computed different pointer analyses sizes live variable sets computed results pointer analyses 
time trade offs 
example extra time required compute precise points information offset decrease time required subsequent dataflow analysis 
carry experiments implemented different pointer analyses described section 
different dataflow analyses described section points information 
interprocedural slicing system dependence graphs described section 
points information build system dependence graphs 
measured precision different pointer analyses affected results dataflow analyses sizes system dependence graphs results slicing 
cases measured time required pointer analyses subsequent processing points information 
results section summarized follows precise pointer analysis general lead precise transitive results 
magnitude payoff precision depends particular points information 
experiments difference precision ranged 
direct effects points set sizes predictors transitive effects sizes live variable sets 
effects precision pointer analysis vary depending points sets halving sizes points sets necessarily lead doubling accuracy transitive results 
experiments expected improvement indirect effects due doubling accuracy pointer analysis ranged 
increased precision points information causes subsequent analysis produce precise results causes subsequent analysis run faster 
offsets longer times needed precise pointer analysis depends course relative time requirements pointer analysis subsequent analysis 
background experiments experiments run set programs including gnu unix utilities spec benchmarks programs benchmarking landi austin abs 
tests carried sparc mb ram 
experiments pointer analysis followed dataflow analysis involved steps step parse program building control flow graph 
step pointer analysis algorithms analyze program 
step annotate node control flow graph sets variables killed defined node 
nodes involve pointer dereferences results pointer analysis determine kill def sets 
example node represents statement node set includes pointed kill set empty def set includes pointed 
step traverse annotated control flow graph producing data solve dataflow analysis problems 
step perform dataflow analysis 
dataflow analysis problems solved method described rhs 
input dataflow engine set graphs function program set dataflow functions edge graph 
dataflow functions distributive map finite sets finite sets meet operation set union 
output set dataflow facts hold node graph 
dataflow problem intraprocedural function dataflow facts provide meet paths solution kil 
dataflow problem interprocedural dataflow facts provide meet interprocedurally valid paths solution dataflow problem algorithm performs precise context sensitive interprocedural dataflow analysis 
worst case time needed solve dataflow problem method depends problem intra interprocedural size dataflow domain certain properties dataflow functions 
chose dataflow problems experiments span range possibilities time proportional size call graph theta number globals sum sizes control flow graphs theta number variables 
discussed detail section describes dataflow problems 
experiments pointer analysis followed building program system dependence graph computing interprocedural slices involved steps gamma listed 
steps replaced step annotated control flow graph build program system dependence graph 
step slice system dependence graph respect output statements calls library functions printf 
system dependence graphs built sliced algorithms defined hrb see section detail 
variable considered killed node value definitely overwritten executed 
considered defined value partially overwritten array element array overwritten value may may overwritten represents assignment point case considered defined killed 
pointer analyses experiments different pointer analyses 
analyses listed precise case worst case running time terms size program 
term ff slowly growing inverse ackermann function arises context fast union find data structures tar 
pointer analyses 
analysis defined andersen worst case time 

category log runs analysis defined shapiro horwitz sh worst case time ff log 

analysis defined steensgaard ste worst case time ff 

naive analysis simply assumes pointer variable point variable address taken program location allocated heap 
analysis worst case time 
analyses applicable language including pointer arithmetic calls pointers functions setjmp longjmp functions variable length argument lists signals 
flow insensitive context insensitive 
flow sensitive pointer analysis takes account flow control program computes points set pointer program point 
contrast flow insensitive analysis treats program unordered set statements computes points set pointer valid usually overly conservative program points 
context sensitive analysis takes account fact function may called different calling contexts function returns control transferred back site call 
contrast context insensitive analysis essentially treats function call goto start function function return multi way goto back call sites 
analyses simple memory model collapses single variable different fields single struct different elements single array different instances local variable recursive function different heap locations allocated instance call malloc similar function executed multiple times 
analyses andersen shapiro steensgaard thought building graph nodes represent variables edge means point fundamental difference andersen algorithm precise steensgaard algorithm precise graphs built andersen algorithm unbounded outdegree graphs built steensgaard algorithm degree 
means node steensgaard graph may represent variable andersen graph node represents exactly variable 
coarser granularity steensgaard graphs algorithm faster precise andersen 
detailed comparison algorithms scope example shown provides intuition 
note example steensgaard approach determines point point safe actual points information omitted overly conservative 
shapiro algorithm second accurate analysis study similar steensgaard algorithm graphs builds limited degree different respects consistent steensgaard implementation small amount context sensitivity introduced analyses essentially lining library functions 
calls user defined functions handled context insensitive manner 
program andersen graph andersen points sets steensgaard graph steensgaard points sets fig 

example contrasting andersen steensgaard points analysis algorithms 
graphs limited degree degree improves accuracy analysis cost slowing constant factor 

algorithm uses log passes number variables program building different graph pass 
guaranteed pair variables pass represented distinct nodes graph 
final points information computed combining information passes 
accuracy worst case time requirements algorithm fall andersen steensgaard algorithms 
example algorithm require passes produce results andersen algorithm 
see section actual times shapiro analysis slower times steensgaard andersen analyses 
mainly due implementation limitation algorithm 
shapiro analysis necessarily slower steensgaard involves multiple passes essentially steensgaard algorithm believe sped run time closer steensgaard algorithm current implementation 
large programs significantly faster andersen algorithm close linear andersen algorithm cubic size program 
current inefficient implementation shapiro algorithm run faster andersen large test programs 
mentioned fourth analysis naive analysis simply assumes pointer point variable address taken program pointing heap allocated storage 
example algorithm determine variables point dataflow analyses test transitive effects pointer analyses described implemented different dataflow analyses listed ambitious 
gmod analysis 

live variable analysis 

truly live variable analysis 
analyses described subsections 
recall analyses rely pointer analysis having performed statement program known variables killed defined statement 
gmod analysis goal analysis determine function program global variables modified directly transitively function 
presence pointers local variable global address accessible functions 
gmod analysis performed program call graph controlflow graph 
isn really important dataflow framework simply requires underlying graph doesn matter graph represents calls flow control 
gmod implemented follows 
function set set global variables directly modified effects functions called included 

graph dataflow analysis performed program call graph edges reversed new start node new edges added node reachable start node 

dataflow function associated edges graph node represents function implemented way gmod problem intraprocedural locally separable gen kill problem 
size dataflow domain number global variables directly modified function 
worst case time solve gmod problem dataflow engine size call graph theta number global variables 
accuracy gmod analysis affected accuracy points information determine variables modified node control flow graph accuracy points information determine function called indirect call call pointer 
example control flow graph node represents statement def set set variables point 
function set include variables 
clearly accurate pointer analysis computes smaller points sets lead accurate gmod sets 
similarly function includes call pointer gmod set include variables modified directly transitively called functions 
accurate points analysis computes smaller points set lead accurate gmod sets 
live variable analysis standard dataflow analysis problem variable considered live node program control flow graph iff path graph program defined 
recall goals determine transitive effects pointer analysis affected accuracy pointer analysis 
case live variable analysis truly live analysis described section interesting quantities considered transitive effects sizes live sets computed node control flow graph 
number dead assignments assignments variables live immediately assignment 
live ranges variables compiler performing register allocation general smaller live sets mean smaller live ranges 
accurate pointer analysis leads smaller live sets probably lead better register allocation 
implemented register allocation study directly studied sizes live sets produced live analysis different pointer analyses 
discussed dead assignment removed compiler flagged possible logical error 
number dead assignments discovered performing live analysis interesting transitive effect 
gmod analysis live variable analysis locally separable problem 
size dataflow domain function number variables visible function possibly including local variables functions addresses written heap accessible parameters 
worst case time live variable analysis dataflow engine sum sizes control flow graphs theta max number visible variables 
accuracy live variable analysis affected accuracy points information determine variables node control flow graph accuracy points information determine function called indirect call 
example node represents statement variables points set considered live node accurate pointer analysis lead accurate smaller live sets 
similarly node represents call pointer variables live beginnings functions pointed considered live node truly live variables non locally separable accurate version live variables problem variable considered truly live node iff path program truly live context defined 
definition truly live context means predicate call library function expression value assigned truly live variable gmw 
non locally separable truly live variables problem sense harder problem live variables problem worst case time analysis sum sizes control flow graphs theta max number visible variables 
accuracy truly live variable analysis affected accuracy pointsto information determine variables defined node control flow graph accuracy points information determine function called indirect call 
example node represents statement variable points set considered truly live node variables points set truly live node clear accurate pointer analysis lead accurate smaller truly live sets 
interprocedural slicing slice program respect output statement call library function printf projection program possible inputs value output original program slice statement executed versions program produce sequence values wei 
efficient method computing context sensitive interprocedural slices described hrb method implementation 
method involves program representation called system dependence graph sdg 
nodes program sdg nodes controlflow graph edges different sdg includes edges represent program data control dependences sequential control flow 
building program sdg involves steps 
build program control flow graph 

compute gmod sets function add variable gmod extra parameter 
control flow graph compute program intraprocedural data control dependences 

compute transitive data dependences due function calls 
total time required build sdg dominated time step number control flow graph edges theta max number parameters number call sites theta max number parameters 
program sdg built interprocedural slice computed time proportional size slice 
size program sdg accuracy slices computed sdg affected accuracy points information determine variables defined node control flow graph accuracy points information determine function called indirect call 
example node represents statement sdg target data dependence edges nodes represent definitions variables points set 
accurate pointer analysis lead sdg fewer edges 
turn affect sizes slices computed sdg 
experimental results determine choice pointer analysis affects analyses considered effect pointer analysis quantities test program sum sizes gmod sets function time perform gmod analysis lives sum sizes live variable sets node cfg number dead assignments time perform live analysis sum sizes truly live variable sets node cfg number truly dead assignments time perform truly live analysis sdgs number vertices edges sdg time build sdg slices average size slice respect output statement time compute slices represent transitive effects pointer analysis 
measure direct effects quantities ptas average size pointer variable points set time perform points analysis measured quantities pointer analyses example programs 
raw data test programs figures 
values lines code preprocessed code blank lines removed 
subsections address questions posed 
transitive effects choice pointer analysis 
choice pointer analysis affect quantities listed 

particular quantity depend sizes points sets 

choice pointer analysis affect total time performing analyses section subscript range pointer analyses subscript range example programs 
number pointer analyses number example programs represent particular quantity interest ij represent value pointer analysis example program test program lines code pointer analysis lives sdgs slices ptas compress naive steens shapir anders gcc main naive steens shapir anders naive steens shapir anders cdecl naive steens shapir anders lex naive steens shapir anders unzip naive steens shapir anders gcc cpp naive steens shapir anders gzip naive steens shapir anders bc naive steens shapir anders freq naive steens shapir anders grep naive steens shapir anders sed naive steens shapir anders naive steens shapir anders naive steens shapir anders fig 

sample raw size data 
entries dash indicate missing data due dataflow analysis slice computation running memory 
test program lines code pointer analysis compress naive steens shapir anders gcc main naive steens shapir anders naive steens shapir anders cdecl naive steens shapir anders lex naive steens shapir anders unzip naive steens shapir anders gcc cpp naive steens shapir anders gzip naive steens shapir anders bc naive steens shapir anders freq naive steens shapir anders grep naive steens shapir anders sed naive steens shapir anders naive steens shapir anders naive steens shapir anders fig 

sample raw time data cpu seconds 
entries dash indicate missing data due dataflow analysis slice computation running memory 
effect choice pointer analysis transitive quantities determine choice pointer analysis affects quantity assume pa pointer analyses pa depend example program equality introduce error factor pa want find value close minimize log leads defining pa geometric mean ratios ratio transitive quantity produced pointer analysis quantity produced pointer analysis example program pa values pa graphed figures 
pa change pointer analysis affect quantity ij values different indicate strong dependence pointer analysis 
example steens anders 
means gmod sets average twice large imprecise computed steensgaard pointer analysis andersen pointer analysis 
steens anders took longer compute accurate gmod sets 
steens anders number truly dead assignments slightly smaller steensgaard analysis andersen 
estimated standard error log log pa log gamma define ea log plays role standard error pa additive multiplicative 
expect pa determined set test programs fall pa xi ea pa theta ea interval asymmetric pa geometric mean endpoints interval arithmetic mean 
includes error values values ea gamma expressed percentages 
example ea value reported 
values pa significantly different indicating choice pointer analysis significant effect transitive quantities 
quantity pa significantly different 
slices pa significantly different naive analysis difference non trivial pointer analyses slight 
value pa choice pointer analysis strong effect 
results contrast reported ruf ruf 
ruf studied impact context sensitivity flow sensitive pointer analysis 
considered sizes points sets program points context sensitive algorithm difference sets significantly smaller 
considered program points pointer dereferenced looked pointers points sets context sensitivity little difference 
suggests doing flow sensitive pointer analysis choice context sensitive context insensitive analysis best weak effect transitive quantities 
naive steens naive shapir naive anders steens shapir steens anders shapir anders pa error pa error pa error pa error pa error pa error lives sdgs slices ptas fig 

imprecision slowdown precise pointer analysis 
pair labelled precise pointer analysis farther pa larger effect quantity choosing pointer analysis values marked interval pa xi pa theta includes 
values negligible difference pointer analyses 
dependence size points set results previous section indicate cases quantities dependent pointer analyses 
section explore sizes points sets ptas refer ij predictors quantities predictions 
determine relationship points set sizes quantities new model ij ij ffi equality introducing error ij ij ij ffi ij refers specifically andersen pointer analysis 
value ffi measure ij depends sizes points sets 
positive values ffi ij increases increasing points set size 
ffi quantity ij fixed particular example program proportional ij size points set 
ffi gamma inversely proportional 
ffi independent 
note ffi independent pointer analysis test program 
depends quantity consideration measure sensitivity points set size 
take logarithms equality looks line origin log ij ffi log ij log ij lives sdgs slices ptas effect pointer analysis size results naive steensgaard shapiro andersen fig 

alternative presentation data size quantities 
height bar andersen factor quantity obtained pointer analysis change andersen pointer analysis 
recall precise values larger quantities precise values smaller 
standard statistical methods regression origin nw 
minimize log ij find ffi ij log ij aj log ij aj ij log ij aj values ffi 
list values ffi indicates quantity expected increase result doubling sizes points sets 
considered pa points sets twice large example ffi pointer analysis tended generate points sets twice large generated andersen analysis expect gmod sets computed larger 
determine points set sizes predictors quantities consider estimated standard error ffi ij log ij ij gamma ij log ij aj effect pointer analysis time naive steensgaard shapiro andersen fig 

alternative presentation data time quantities 
height bar factor subsequent analysis pointer analysis speed andersen pointer analysis 
ffi ffi gamma lives sdgs slices fig 

dependence quantities sizes points sets accuracy points set sizes predictors quantities 
ffi factor quantity expected increase size points sets doubled 
standard error ffi 
columns similar columns 
consider values similar ea pointer analysis tends generate points sets twice large pointer analysis expect values ffi vary factor measured different test programs 
smaller values accurate points set sizes predictors results subsequent analysis 
see values gamma quite small ranging 
means points set sizes predictors quantities listed column 
see actual predictions range ffi ffi gamma 
means points set size doubles increases hardly changes 
consistent results previous section program analyses sensitive choice pointer analysis 
effect choice pointer analysis total times section address question time required perform dataflow analysis build slice system dependence graph affected choice pointer analysis algorithm 
ij denote time pointer analysis test program ij denote time subsequent analysis ij denote total time pointer analysis plus subsequent analysis 
ij ij ij shows effect choice pointer analysis algorithm total time time divided pointer analysis time subsequent analysis time 
height bar geometric mean ratios ij ratio total time required pointer analysis total time required andersen pointer analysis test programs 
theta indicates total time just pointer analysis height theta geometric mean ratios ij interesting note program analyses gmod slicing average total time expensive pointer analysis algorithm andersen analysis 
increase accuracy points sets computed andersen analysis leads decrease sizes kill def sets computed node programs control flow graphs decrease sizes sets functions considered potentially called indirect call site 
turn smaller sizes lead smaller dataflow domains faster dataflow analyses 
gmod analysis steensgaard pointer analysis leads fastest average total times 
times gmod analysis faster andersen analysis steensgaard see column gmod analysis efficient decrease gmod time andersen analysis increase pointer analysis time 
don forget results gmod analysis significantly better shapiro andersen analyses steensgaard data slicing bars slice misleading represent pointer analysis time plus slicing time omit gmod live sdg slice sdg slice effect pointer analysis total time naive steensgaard shapiro andersen fig 

total times time pointer analysis plus time subsequent analysis 
theta marks time pointer analysis 
times required build system dependence graphs accurate picture provided final set bars sdg slice represent pointer analysis time plus time build system dependence graphs plus time compute slices 
case andersen algorithm leads fastest average times 
graphs shown figures indicate andersen algorithm algorithm choice lead accurate final results leads fastest total times cases 
important remember andersen algorithm worst case cubic size program steensgaard shapiro algorithms close linear 
possible result andersen algorithm leading fastest total times hold program size increases 
true possible advantage increased accuracy may eventually outweighed disadvantage increased running times 
cases possible efficient version shapiro algorithm may algorithm choice providing compromise fast running time reasonable accuracy 
experiments large programs limited memory requirements dataflow analysis slicing implementations 
get indication see column slices slices computed naive analysis slightly larger computed analyses 
time compute slice proportional size times slicing slightly slower naive analysis accurate analyses see column 
naive analysis fastest total times pointer analysis plus slicing fastest naive analysis 
things change large programs looking programs andersen analysis ran slowly compared steensgaard analysis screen find espresso tar gcc cpp sed grep triangle 
shows results limited test programs listed total times shapiro analysis closer total times andersen analysis 
possible better implementation shapiro analysis larger test programs total times shapiro analysis quite bit faster andersen analysis 
gmod live sdg slice sdg slice effect pointer analysis total time naive steensgaard shapiro andersen fig 

total times programs andersen analysis ran slowly 
theta marks time pointer analysis 
find significant transitive effects pointer analysis 
precise pointer analysis leads analyses precise faster 
analyses sensitive choice pointer analysis 
pointer analysis average points set size twice large precise pointer analysis led program analyses ran memory test programs 
results shown represent data programs gmod analysis programs live analysis programs truly live analysis just programs slicing 
increase size gmod sets time perform truly live analysis 
effects modest number dead assignments size slice hardly changed 
small programs andersen algorithm produced accurate results led fastest run times 
large programs andersen algorithm slow analysis time smaller shapiro algorithm steensgaard algorithm 
course questions addressed experiments including 
relative benefits flow sensitive flow insensitive pointer analyses additional precision flow sensitive analysis lead reduction subsequent analysis time offset cost 

results obtained gmod analysis live variable analysis variable analysis interprocedural slicing hold program analyses 

results especially result precise points sets lead faster dataflow analysis hold dataflow analysis algorithms 

properties program analysis predict benefits precise pointer analysis terms accuracy analysis results total time requirements 
bob wardrop jonathan goldstein helpful discussions statistics 
abs austin breach sohi 
efficient detection pointer array access errors 
sigplan conference programming languages design implementation pages june 
andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen may 
diku report 
egh emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
sigplan conference programming languages design implementation 
gmw giegerich wilhelm 
invariance approximative semantics respect program transformation 
gi th gi annual conference informatik pages new york ny 
springer verlag 
hrb horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
horwitz reps sagiv 
speeding slicing 
proceedings third acm sigsoft symposium foundations software engineering pages december 
available www url www cs wisc edu papers fse ps 
kil kildall 
unified approach global program optimization 
acm symposium principles programming languages pages january 
lr landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
sigplan conference programming languages design implementation pages june 
landi ryder zhang 
interprocedural modification side effect analysis pointer aliasing 
sigplan conference programming languages design implementation pages june 
nw john william wasserman 
applied linear statistical models chapter pages 
richard irwin 
rhs reps horwitz sagiv 
precise interprocedural dataflow analysis graph reachability 
acm symposium principles programming languages pages january 
available www url www cs wisc edu papers popl ps 
ruf ruf 
context sensitive alias analysis reconsidered 
sigplan conference programming languages design implementation pages june 
sh shapiro horwitz 
fast accurate flow insensitive points analysis 
acm symposium principles programming languages 
acm new york january 
ste steensgaard 
points analysis linear time 
acm symposium principles programming languages pages january 
tar tarjan 
data structures network flow algorithms 
volume regional conference series applied mathematics 
siam 
wei weiser 
program slicing 
ieee transactions software engineering se july 
wl wilson lam 
efficient context sensitive pointer analysis programs 
sigplan conference programming language design implementation pages june 
article processed macro package llncs style 
