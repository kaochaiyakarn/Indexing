issues object oriented paradigm questionnaire survey rr daly miller brooks roper wood empirical foundations computer science object oriented paradigm increasingly popular apparently result expert opinion anecdotal evidence basis sound empirical data 
questionnaire survey undertaken part programme research validate unsupported claims paradigm 
questionnaire follows structured interviews experienced object oriented users intention confirm findings wider user group 
posted relevant electronic newsgroups members object oriented postal mailing list 
survey received responses electronic questionnaire responses response rate postal version 
results show respondents view object oriented paradigm advantages paradigms terms ease analysis design programmer productivity software reuse ease maintenance ii inheritance introduce difficulties trying understand object oriented software iii missing design documentation poor inappropriate design prevalent problems iv maintenance causes degradation object oriented software frequently conventional software deficiencies comparison purer object oriented languages 
concluded questionnaire survey successful method gathering empirical data identifying areas investigation programme empirical research 
keywords empirical object oriented survey 
dept computer science university strathclyde livingstone tower richmond street glasgow xh jd cs strath ac uk object oriented buzz word software engineering industry 
appears largely result expert opinion anecdotal evidence individual developers experience 
relying expert opinion anecdotal evidence induce biased misleading previously demonstrated henry study subjects viewed maintenance tasks difficult complete object oriented software comparison procedural software data collected supported object oriented techniques resulted fewer maintenance changes reduced maintenance effort 
avoid dangers need cohesive body knowledge built solid foundations empirical study 
fenton example argued importance experimentation provide empirical evidence proposed new software development maintenance practices 
brooks glass lewis similar arguments 
evidence derived variety empirical techniques data collected substantiate findings identify discrepancies act platform investigation discussed 
unfortunately little evidence exists support claims objectoriented paradigm 
jones example details visible lack empirical data support assertions substantial gains software productivity quality reduction defect potential improving defect removal efficiency reuse software components 
evidence slowly filter certain areas means conclusive provide evidence reuse software objects easier maintenance 
contrast problems object oriented software realised dvorak reports initial evidence class hierarchy degradation effect identified conceptual entropy wilde report understanding maintenance difficulties inheritance cause 
need provide stronger empirical evidence currently exists 
consequence programme research exploratory investigation interviewing experienced object oriented users embarked 
questionnaire survey reported followed interviews attempt confirm findings perceived ad paradigm ii inheritance iii difficulties object oriented code cause iv software maintenance consequences house local class libraries vi programming language 
questionnaires allows quantitative data gathered relatively cheaply quickly different users large number responses collected confidence results survey 
collected data help identify hypotheses tested focused empirical enquiry 
intention programme research test important findings interviews questionnaires controlled laboratory experimentation 
promotes questionnaires empirical technique software engineering particular electronic newsgroups medium distribution 
survey design distribution posted appropriate world wide electronic newsgroups members postal object oriented mailing list detailed findings reported 
remainder follows section presents framework integrating extending empirical 
section discusses advantages disadvantages questionnaires section introduces points consideration designing survey 
section details process constructing administering questionnaire 
section summarizes data collected section reports findings data analysis 
section discusses validity survey 
section draws 
empirical framework evidence may derived empirical technique example controlled laboratory experiments introspection questionnaires structured interviews thinking aloud protocol analysis 
argued technique produces different empirical data data collected empirical technique complement data collected different empirical technique 
effect demonstrated different empirical techniques findings reliable accepted software engineering community 
results agree empirical techniques said confirmatory power 
approach views series different empirical techniques evolutionary important issues discovered initial exploratory study investigated study forth study turn focusing closely phenomenon investigation 
course evolutionary programme research results technique may turn confirm 
indicated plan evolutionary programme research conduct exploratory investigation structured interviews followed questionnaires intention confirm findings wider user group followed laboratory experiments test findings controlled setting 
questionnaires empirical technique exist various different type media conducting questionnaire surveys electronic news magazine post telephone see table overview comparative advantages disadvantages different techniques exception electronic newsgroups 
common empirical techniques questionnaires strengths weaknesses strengths comparison empirical techniques requiring arbitrary number subjects questionnaires surveys relatively inexpensive conduct 
data questionnaires collected reasonably quickly respondent completes process techniques require skilled intermediates record process 
questionnaires suffer problem interviewer bias responses affected pressures interview cause see details 
response rates achieved representative sample findings generalisable 
questionnaires benefit anonymity confidentiality provides obvious advantages truthful responses 
analysis questionnaire data easy difficult analysis interview data verbal protocol analysis example 
difficulties exist 
example editing collected data format software analysis package time consuming error prone kikuchi discuss neural networks possible method error proneness 
weaknesses sinclair designing administering high quality questionnaire skilled task specialist behavioural sciences computer expert statistician working team may required complete process 
may difficult sample population representative way creating bias results 
low response rates may bias results 
information obtained factual easily checked reliability validity guaranteed example smokers answering medical questionnaire may inclined reduce number cigarettes smoke fear morally criticised problem catered anonymity 
little scope correct misunderstandings probe responses questionnaire returned 
questionnaires excellent method providing large amounts quantitative data population investigation relatively cheaply efficiently 
panacea difficult produce generalisable findings 
postal methods medium postal methods conduct questionnaire survey popular medium primarily due financial cost required photocopying costs sampling costs address labels mailing costs 
comparison questionnaire techniques postal methods offer advantages postal methods medium provides access population sample means sample read questionnaire 
reminders self addressed stamped envelopes return help increase response rate add significantly survey costs reducing bias non response 
speed turnaround reasonably efficient urgency survey stressed covering letter 
respondent may consult completing questionnaire pass questionnaire knowledgeable person viewed disadvantage certain surveys 
disadvantages questionnaire usually kept reasonably short lengthy questionnaires may discourage response 
ability ask open questions restricted questions require writing respondents generally tend leave questions blank give word answer 
open questions usually require probing answer performed 
postal survey methods generally suffer low response rates may bias findings 
written postal survey methods researchers see detail 
electronic newsgroups medium relevant literature utility electronic newsgroups medium distribution questionnaires 
experience similarities exist utility magazine distributed questionnaires 
electronic newsgroups gather information appropriate empirical technique subject criteria similar stated rodman target population defined terms phenomenon widespread large populations exists electronic newsgroups appeal target population commonly available sampling frame target population investigative research topic limited 
satisfied electronic newsgroup distributed questionnaires provide sampling frame list members population investigation sample drawn 
advantages provides quick access members target population making vast number existing electronic newsgroups possible select ones large proportion individuals part target population 
monetary cost survey exceptionally low advantage performing exploratory research limited financial support 
type survey usually works basis individual asked respond turn promised access survey results usually posted corresponding newsgroups 
ability obtain substantial amount quantitative data popular electronic newsgroups read thousands individuals world 
speed turn endq collecting data quick sampling frames needed questionnaire completed required posting appropriate newsgroups responses returned matter hours 
advantage planning research deadlines subject experiments require advanced laboratory bookings subject recruitment quickly help focus hypotheses testing 
disadvantages questionnaire posted electronic newsgroups distributed biased population subscribe newsgroup read questionnaire 
respondents questionnaire self selected total population motivation interest respond 
effective method increasing response rates postal questionnaires follow contacts method available obvious reasons demonstrates problem self selection 
self selection problem certain degree exists methods questionnaire distribution problem pronounced 
ability ask open questions restricted postal method questionnaires questions require typing 
open questions require probing answers easily performed 
conclude researchers aware advantages disadvantages questionnaires deciding place significance findings bias self selection 
address effect may results survey 
offer various advantages notably collection real world data relatively quickly cheaply 
data form specific hypothesis tested rigorous representative empirical techniques 
postal surveys hand produce results representative population study assuming sampling frame available high response rate achieved 
expensive time consuming perform comparison endq survey 
designing questionnaire survey questionnaire usually consists sections prologue introduces topic attempts motivate reader respond ii classification section asking personal details name age experience iii information section detailing questions phenomenon investigation iv epilogue respondent participating supplies instructions returning questionnaire 
sensible construct questionnaire format eliciting accurate information primarily dependent design questions 
deriving questions sinclair states points require answers results supposed show study objectives ii level accuracy required iii additional data required link survey research 
answers questionnaire begins vague thinking produces vague questions ultimately regardless analysis produces vague answers 
sinclair concludes substitute part design 
second language phrase questions carefully chosen 
understandable unambiguous question mean regardless context respondent uses goguen linde question validity position 
third questions short possible double example hard analyse question familiar structured design object oriented design 
fourth questions loaded particular direction invite particular answer 
respondents may pass opinion truth creating bias results 
significant worry catered closed questions offer advantages clarifying alternatives respondent reducing likelihood snap responses ii ease analysis iii helping eliminate useless answer example long writing object oriented code 
started programming 
closed questions disadvantages cover total response range ii create forced choice situation iii answers equally attractive iv difficult questions allow respondent hide safety don know answer 
questionnaire complete important reduce bias sample respondents respondents representative population investigation best achieved randomly sampling population possible 
difficult task requires available sampling frame population impossible random sampling 
problem non representative samples findings generalised 
detailed discussion questionnaire design important survey aspects see oppenheim 
questionnaire construction administration layout layout questionnaire followed guidelines detailed section 
letter introducing topic questionnaire motivation conducting survey required instructions returning completions considered prologue section 
classification section collected details respondents position experience object oriented paradigm familiarity object oriented languages information respondents experience closed questions provide answers respondent choose 
open questions hand require respondent provide answer 
file electronic version separate sheet postal 
inheritance maintenance class libraries 
information section asked questions answers opinions derived experience reading conferring colleagues 
epilogue respondent participating see appendix copy distributed version questionnaire 
main concern keep layout differences versions minimum achieved 
differences caused medium noted questionnaire distributed see section details 
derivation questions stated questionnaire second technique programme research 
aim explore users attitudes findings structured interviews 
analysis attitudes form hypotheses tested specific forms experimentation example questionnaire devoted object oriented software maintenance controlled laboratory experiment test smaller focused hypothesis 
issues discovered interviews lead survey objectives 
explore attitudes perceived advantages ease analysis design programmer productivity software reuse ease maintenance relative paradigms 

explore attitudes inheritance including depth inheritance multiple inheritance measure reported difficulties literature occur reality 

catalogue difficulties understanding object oriented code 

explore attitudes object oriented software maintenance consequences 

discover promise software reuse met commercial class libraries house local class libraries 

explore practitioners attitudes programming language 
nineteen questions parts derived objectives includes initial questions experience job classification object oriented language familiarity questions asked issue 
facilitate ease analysis questions closed extra written information encouraged 
categories provided covered range possible answers nominal data category ordinal data range range 
open question objective considered important create forced choice situation 
concern closed alternative may cover entire response range 
pilot study piloting questionnaire important discover unnoticed assumptions questions loading biases ambiguities unnecessary complexity 
identified questionnaire distributed little done rectify situation 
questionnaire authors posted local newsgroup authors answered possible 
comments collected questionnaire designer electronic mail collated alluded 
obvious questions required clarification simplification example vague need explain trying find 

clear respondents mark box closed questions example put 
instructions clear 

questions phrased loaded biased way example directed loaded biased 

closed questions cover full response range respondents gave answers range provided 
identified faults removed 
resulting version reviewed authors 
small changes questionnaire distributed 
note initial responses included data analysis 
distribution questionnaires randomly posted members mailing list consisting names addresses members list past expressed interest object oriented technology certain software 
unfortunately said representative recipients questionnaire known representative object oriented users mailing list 
responses received variety users wide number academic industrial organisations 
questionnaire posted number world wide distributed electronic newsgroups 
approach enabled variety different people access questionnaire software engineers project managers academics 
discussed section approach suffers self selection individuals subscribed newsgroups able read motivated may responded 
respondents may representative object oriented population 
responses received come various groups people world 
little said sample representative object oriented community confidence findings differences opinion different sets respondents 
distribution differences experiences media conduct survey uncovered number differences 
aspect considered questionnaire design ability edit questionnaire respondents electronic version increased space allocated comments question postal respondents rarely appended information extra sheets 
electronic version facilitated extra written comments respondents may just motivated discussed section 
significant difference access members target population exceptionally easy questionnaire electronic newsgroups attract responses financial limitations reminders sent members mailing comp databases comp lang clos comp lang comp lang eiffel comp lang objective comp lang smalltalk comp object comp software eng comp sys programmer 
list 
classify differences significant benefits electronic newsgroups postal methods assuming postal sampling representative population survey 
media advantage increasing number variety survey respondents 
responses received total responses received electronic survey produced respondents questionnaire postal survey produced returns response rate incomplete extent excluded analysis 
edwards remarks response rate considered 
referenced software maintenance survey swanson produced response rate included sending reminder 
survey position electronic postal total position student academic software engineer project manager table respondents positions discussing analysis completed questionnaires information respondents attributes detailed section 
table presents breakdown different positions held respondents largest proportion software engineers 
category consists class librarians consultants research assistants system managers technical directors 
table presents break respondents experience object oriented paradigm largest proportion having greater years experience 
quoted percentages remainder article calculated number responses received question cumulatively add approximately 
total number responses question appropriate table appendix survey time years electronic postal total time table respondents experience oo paradigm approximately respondents claimed object oriented technology twice working week week 
break languages respondents familiar table 
table displays number respondents familiar objective percentage accounts total respondents 
row contained languages flavors dylan oo cobol oo pascal sather simula 
expected familiar language percentage respondents familiar higher publicity receives 
examination dataset software engineers familiar academics project managers 
survey language electronic electronic postal postal total respondents objective eiffel smalltalk clos table respondents familiarity different oo languages analysis discussion analysis performed responses questionnaire spss format 
spss calculate frequencies percentages tabular form appendix 
statistical tests applied appropriate 
number responses don know oo paradigm beneficial terms 
object oriented paradigm beneficial paradigms terms ease analysis design programmer productivity software reuse ease maintenance 
oo paradigm comparison paradigms drawn appendix summary statistics tables appendix 
unsupported claims benefits object oriented paradigm paradigms particularly respect ease analysis design programmer productivity software reuse ease maintenance 
displays distribution responses closed question issues 
results show huge positive response objectoriented paradigm categories 
subset respondents qualified response 
example problem problems best suited object oriented solution design design poor object oriented software difficult maintain poorly designed conventional equivalent quality abstraction hidden assumptions implementation resulting software harder reuse things equal paradigms skilled non object oriented programmer productive paradigm non skilled object oriented programmer 
views plausible fact remains large majority respondents view object oriented paradigm offering benefits categories remembering sample probably object oriented advocates 
problem depth inheritance depth inheritance begins cause difficulties inheritance drawn appendix summary statistics tables appendix 
questions devoted topic inheritance depth inheritance considered 
closed question asked depth inheritance cause problems interviewed subjects considered depth inheritance issue 
data illustrated shows respondents felt depth cause problems approximately largest proportion marked levels inheritance region difficulties 
chi square test performed respondents reported having problems depth inheritance provided statistical significant result ae tailed df association experience having problem depth inheritance experienced developer problem depth inheritance 
frequency experienced respondents reported problem depth high respondents years experience respondents years experience 
chi square test calculated check having problem depth inheritance language dependent statistical result tailed df 
regardless response distribution shown indicates inheritance depth cause understanding problems 
chidamber kemerer discuss depth inheritance metric data libraries different sites site library approximately classes depth median max 
site smalltalk library approximately classes depth median max 
similarly miller mean depth maximum inspected code 
viewing figures data raises question programmers deliberately avoiding creation deeper hierarchies shallow hierarchies just natural model 
second respondents asked grade inheritance caused understanding difficulty 
generally agreed inheritance cause understanding difficulties respondents said caused difficulty 
significance largest proportion said caused difficulty occasionally 
significance asked caused difficulty trying understand object oriented software inheritance second popular answer missing inadequate design documentation see section 
related research reported inheritance causes 
distributed class descriptions hierarchy complete description class obtained examining class superclasses 

class class dependencies 
consequently change class means programmer concerned possible side effects subclass 

understanding single line code difficult task may mean tracing chain method invocations inheritance hierarchies find code performing 

ability misuse inappropriately inheritance cause increase code complexity subclasses extend specialize concept superclass identified conceptual entropy dvorak intuitive difficult understand 
inheritance related problems described respondents reasons causing understanding difficulties 
third respondents asked grade usefulness multiple inheritance subset sample may familiar concept languages implement objective 
distribution responses spread relatively evenly middle categories reporting respectively 
utility concept multiple inheritance may language dependent chi square test indicate significance tailed df 
hand perry kaiser multiple inheritance widely recognized blessing curse response distribution supports position 
argument multiple inheritance versus single inheritance continue arguing produces complex design difficult test difficult reuse easy abuse arguing maps reality domain modelled producing appropriate design facilitates software reuse maintenance 
multiple inheritance may complex single inheritance questionnaire data supports theory multiple inheritance useful concept 
source concern multiple inheritance implemented inappropriate 
consequence object oriented software complex necessary 
method preventing unnecessary complexity may patterns see gamma 
typical method size drawn appendix summary statistics tables appendix 
wilde report maintainers object oriented code trace chains dependencies created inheritance problem compounded proliferation small methods 
small methods advocated objectoriented programming style 
data summary displays frequencies respondents typical method size executable lines code upper lower limits methods programmers written 
typical method size frequency method range frequency lines lines lines lines lines lines lines lines lines response distribution bell curve typical method appears fall sigma lines code 
typical method lines code long nearly respondents respondents reported largest methods exceeded lines code 
object oriented language objective smalltalk lines lines lines lines total table language breakdown typical method sizes table presents frequencies typical method size popular languages respondent circled familiarity language included columns owing inability distinguish language described 
wilde analysis software systems reporting methods fewer smalltalk lines lines independent application domain 
data support finding supportive data miller report mean method size code experienced programmers lines code range 
difficulties understanding oo program drawn appendix 
open ended question asked causes difficulty trying understand object oriented program 
frequently appearing answers 
missing inadequate design documentation 
inheritance 
poor inappropriate design including inappropriate oo concepts 
tracing line method invocations find method performs 
programming language including syntax languages friend function 
method naming confusions including obscure inconsistent naming 
experience procedural paradigm learning object oriented paradigm 
relationships classes objects communicate 
polymorphism 
understanding clever coding styles 
popular responses dynamic binding hybrid code mixture object oriented conventional code knowing code reuse class library splitting system small files 
subjects stated specific caused understanding difficulties 
survey data supports premise missing design documentation major source developers attempting understand software system doing doing 
davis states design documentation design 
heard software engineers say finished design 
left documentation 
imagine building architect saying completed design new home 
left draw picture data supports premise object oriented systems equally susceptible missing design documentation difficulties causes 
inheritance reported second popular reason causing understanding difficulties object oriented systems 
possible reasons discussed section 
data suggests poor inappropriate design major source understanding difficulty 
context object oriented systems poor design includes inappropriate oo concepts inappropriate abstractions unnecessary complexity 
design considered inheritance 
poorly designed hierarchy compound problems discussed section 
surprising result strengthen argument object oriented paradigm panacea object oriented systems appropriately designed 
failure severely affects understandability 
missing inadequate design documentation poor inappropriate design list paradigm specific concerned deficiencies current software engineering practice 
improvement current practice offer advantages simply making transition object oriented paradigm 
maintenance conventional object oriented programs drawn appendix summary statistics tables appendix 
closed questions asked software maintenance 
respondents asked continual maintenance conventionally structured designed software lead 
largest proportion respondents circled category thought usually happen 
second respondents asked question context object oriented designed software 
largest proportion respondents circled category thought occasionally happen 
wilcoxon matched pairs signed ranked test related calculated test ordinal level differences responses 
results show significance ae 
conclude respondents regard object oriented software lead 
examine attitude users regarding object oriented software facilitating maintenance respondents asked directly object oriented software generally maintainable equivalent conventionally designed software 
largest proportion respondents circled category thought usually true 
statistic paint complete picture explained true software designed object oriented software difficult maintain complex intuitive inter relationships 
respondents circled number greater second question respondents circled number second question respondents circled number questions tailed gamma 
software reuse house local class libraries drawn appendix summary statistics table appendix 
argued object oriented software facilitates reuse 
consequence frequent house class libraries expected 
respondents asked grade libraries responses received divided infrequent users house class libraries said occasionally frequent users stated usually 
chi square test significance difference tailed df language known frequency house class libraries 
survey conclude house class libraries language independent 
interpretation equal split difficult comparative figures house software libraries structured paradigm 
examining complete dataset shows respondents house class libraries occasionally quarter respondents house class libraries appear local software reuse widespread 
small subset respondents warned time wasted trying find existing code reuse understanding code attempt reuse wilde note reuse benefits oop achieved possible locate code reused fairly efficiently 
area growing interest christopher alexander notion patterns pattern languages developed describing architectural constructs borrowed ooa ood argued may reduce problems 
alexander states pattern describes problem occurs environment describes core solution problem way solution times doing way twice 
patterns discovered experience described manner emphasizes potential reuse pattern higher level building block ooa ood 
information alexander pattern concept respect ood provided excellent book gamma 
de facto standard object oriented language drawn appendix summary statistics tables appendix 
questions asked language 
respondents told answer questions relevant experience 
closed question measured attitudes industry de facto standard object oriented programming language 
largest proportion respondents regarded bad respondents regarded remainder indifferent unsure 
subset respondents explained reasons answers bad problems exist obscure syntax features multiple inheritance allows writing straight forced write oo code easy override data security break encapsulation friends encourages programmer take short cuts objectoriented paradigm reputation 
efficient comparison purer oo languages existing libraries developers know transition easier costly exposure object oriented paradigm consequence object oriented programming mainstream 
second question measured attitudes allowing mixture object oriented conventional programming 
majority respondents regarded disadvantage respondents regarded advantage respondents decided 
subset respondents explained reasons disadvantage leads mess mixed metaphors harder read understand full encapsulation ease maintenance software consistently designed paradigm allows sloppy approach enables reverting conventional programming programmer runs difficulties especially novice oo programmers complexity increased enables gradual migration oo impedes thought process claim oo code written 
advantage oo appropriate design level implementation level helps able perform conventional decomposition methods allows freedom choose appropriate technique problems facilitate oo solution environment regardless transition programmers conventional background gradually making easier maintaining programmer productivity 
third context performing maintenance respondents asked making friend function prevent redesigning inheritance hierarchy 
respondents said friend function manner occasionally respondents said friend function 
concern frequency respondents said friend function prevent just occasionally respondents said respondents said usually remarkably respondents said 
stroustrup states friends avoid global data global non member functions public data members 
unfortunately friend function easily abused apparently programmers cut corners breaking encapsulation enabling class directly manipulate private data 
subsequent testing maintenance difficult class relationships obscure complex 
questionnaire media differences chi square test performed question variable check answer differences electronic newsgroup respondents mailing list respondents 
table presents results test result indicated significant ae level better 
significant result achieved respondent position demonstrates survey different media targeted different cross sections population discussed distinct possibility section 
position predict sample representative population likelihood sample representative 
friends class trusted access private protected members class 
significant differences achieved capacity experience language familiarity independent fact easily explainable different groups people questioned understandable differences exist capacity respondents paradigm ii respondents object oriented experience iii respondents familiarity object oriented languages capacity experience significant bonferroni correction method discussed 
statistically significant relationships discovered chi square test significance indicate strength relationship significant result means relationship population zero 
desirable measure strength relationship index degree correlation 
reason cram ers oe calculated linear index converts value correlation coefficient interpreted pearson correlation coefficient indicating strength relationship different variables 
index scale larger value oe stronger relationship variables 
note largest value achieved position oe represents weak moderate relationship medium position respondent held 
consequently questions tested exception provide significant difference opinion sets respondents ii calculated indexes questions indicators weak relationships increased confidence self selection problem discussed previous section biased results survey 
exception statistical difference opinion ease ooa ood cf 
complete data set examined attempt explain difference 
second chi square test performed including respondents chose category eliminate don know respondents reason difference 
significant result obtained ae tailed df 
examination data set revealed significance caused number respondents replied question respondents electronic group compared mail group 
questionnaires respondents examined similarities explain answered relatively description question degrees test result significant 
cram er freedom oe position capacity object oriented experience language familiarity typical method size method size range depth class hierarchy inheritance caused difficulty problems caused naming local class libraries ease analysis design programmer productivity software reuse ease maintenance multiple inheritance useful sp maintenance problems oo maintenance problems oo maintainable sp de facto standard allows hybrid programming friend function operator overloading overload operators templates table tailed chi square test results variable media inexperienced object oriented users 
cross checking variables table reveal common ground left unable provide explanation data 
possible reason may conducting multiple comparisons probability committing type error falsely rejecting null hypothesis increases number tests 
courtney gustafson state probability type error fixed ff individual test probability falsely rejecting tests significantly larger 
statistical tests applied probability significant result achieved chance quite high 
answer question independent answers probability calculated gamma gamma question dependence exist questionnaire provides rough estimate just large probability frequently advocated method reducing inflated type error probability bonferroni correction method 
simple procedure involves dividing ff level desired statistical significance case ff number statistical tests conducted 
application method significant relationship achieved ae value ff 
consequence statistical significance remains position language familiarity relationships indicated statistically significant table achieve required ae value classed significant bonferroni method 
conclude reiterate medium provided sample representativeness survey opinions expressed questionnaires show significant difference media bonferroni correction method 
strength relationship response arbitrary question medium described weak 
provides confidence survey results 
mail questionnaires known suffer self selection problem acceptable limits results show little difference media 
conclude problem self selection component survey appears similar order mail distributed component confidence effect invalidated results survey 
furthermore regard initial evidence suggesting flawed due self selection problem study requires repeated external replication allow draw generalisable 
recommend merits association mail questionnaires underestimated 
positional differences uncover conflicting opinions members academia industry academics software engineers project managers statistically tested response differences 
students included analysis relative category included respondent heterogeneity 
tailed chi square tests applied ff level results table 
significant results obtained 
significant result obtained capacity paradigm main difference academics teaching purposes analysis design programming 
contrast small proportion teaching 
second significant result obtained house local class libraries software engineers project managers responded libraries significantly academics 
possible explanation may design software reuse producing high quality commercial applications get return investment 
academics generally speaking produce applications need libraries 
significant results support belief academics hold view object oriented paradigm 
example academics responded industry de facto standard object oriented language cf section reasons 
furthermore large majority academics felt disadvantages hybrid programming outweighed advantages 
software engineers project managers appeared pragmatic responses questions 
bonferroni method applied reduce inflated probability type error test 
significant relationship achieved ae ff 
consequence statistical significance remains capacity de facto standard object oriented language relationships indicated statistically significant table achieve required ae value classed significant bonferroni method 
chi square test inappropriate variable templates expected frequency calculations responses 
examination dataset noticeable difference academics large majority frequent templates 
description question degrees test result significant 
cram er freedom oe capacity object oriented experience language familiarity typical method size method size range depth class hierarchy inheritance caused difficulty problems caused naming inconsistencies house local class libraries ease analysis design programmer productivity software reuse ease maintenance multiple inheritance useful sp maintenance leads oo maintenance leads oo maintainable sp de facto standard allows hybrid programming friend function operator overloading overload operators templates table tailed chi square test results variable academics software engineers project managers validity survey questionnaire design exact discipline specified section disadvantages inability correct misunderstandings probe responses completed questionnaire returned 
attempt verify validity questionnaire design discuss respondents views comments section questionnaire 
small number respondents mentioned questions depends category 
depends category meaningless respondents willing specify depends 
felt catered encouraging relevant written material question 
respondents commented invalid assumption friend function legitimate uses illegitimate discussed 
section 
respondents felt ordinal data range harsh consequently respondents choose categories 
shown appendix incorrect 
small number criticisms levelled survey questions counterarguments feel confident concluding little impact validity survey results 
study considered questionnaires technique gathering empirical data reported findings object oriented questionnaire survey distributed electronic newsgroups members mailing list concentrating issues perceived benefits object oriented paradigm conventional paradigms inheritance understanding difficulties object oriented code software maintenance consequences local class libraries programming language 
whilst difficulty generalizing subset population actual population responses object oriented users issues considered important 
results shown respondents view object oriented paradigm advantageous conventional paradigms terms ease analysis design software reuse programmer productivity ease maintenance 
second inheritance cause difficulties trying understand object oriented software respondents reported caused difficulty 
significant inheritance catalogued second largest reason understanding difficulties 
hypothesize understanding constrained deeper hierarchy respondents indicated depth inheritance concept introduce difficulties 
third list catalogued reasons understanding difficulties paradigm specific missing inadequate design documentation poor inappropriate design prevalent problems 
advantages improvement current software engineering practice bring regardless paradigm considered 
fourth maintenance perceived cause software degradation respondents viewed statistical significance occurring frequently provided system change designed 
designed object oriented software regarded maintainable equivalent conventional software 
fifth respondents indicated language deficiencies comparison purer object oriented languages 
consequently majority viewed fact industry de facto standard detrimental 
analysis conducted find oo language dependent answers unable show significant differences aspect survey findings contrary expectation 
analysis conducted uncover answer differences respondents electronic questionnaire mailing list questionnaire academics 
applied statistical tests little difference electronic postal respondents find exception unexpected 
strengthens findings survey evidence self selection problem appears minimal effect results survey 
interesting difference opinion arise academics perception academics consistently took view object oriented programming conversely appeared pragmatic opinions 
validity survey considered small minority criticisms discussed rejected having impact survey findings 
survey second stage programme research initiated structured interviews 
questions interviews findings shown consistency wider user group confirmatory power 
conclude survey successful method gathering quantitative empirical data users opinions identifying areas empirical investigation 
acknowledgments authors wish took time participate survey 
acknowledgment computer science department university strathclyde meeting cost mail shot peter day managing director london gave access address list 
groves editors 
measurement errors surveys 
john wiley sons 
brooks daly miller roper wood 
replication experimental results software engineering 
submitted ieee transactions software engineering 
chidamber kemerer 
metrics suite object oriented design 
ieee transactions software engineering june 
courtney gustafson 
shotgun correlations software measures 
software engineering journal 
crocker von mayrhauser 
maintenance support needs object oriented software 
proceedings international computer software applications conference pages november 
daly wood brooks miller roper 
structured interviews object oriented paradigm 
research report department computer science university strathclyde glasgow 
davis 
fifteen principles software engineering 
ieee software november 
dvorak 
conceptual entropy effect class hierarchies 
ieee computer june 
edwards 
statistics business students 
collins st edition 
fenton pfleeger glass 
science substance challenge software engineers 
ieee software july 
gamma helm johnson vlissides 
design patterns 
wesley st edition 
glass 
software research crisis 
ieee software november 
goguen linde 
techniques requirements elicitation 
proceedings ieee international symposium requirements engineering pages 
hawkins 
estimation bias 
sociological methods research 
nyquist 
programming rules recommendations 
telecommunications systems laboratories 
henry humphrey lewis 
evaluation maintainability object oriented software 
ieee conference computer communication systems pages september 
johnson foote 
designing reusable software 
journal object oriented programming june july 
jones 
gaps object oriented paradigm 
ieee computer june 
kaplan 
basic statistics behavioral sciences 
allyn bacon st edition 
kikuchi matsuoka takeda 
automatic classification large volume questionnaire data means competitive learning 
world congress neural networks pages 
kung gao hsia wen chen 
change impact identification objectoriented software maintenance 
proceedings ieee international conference software maintenance pages september 
meyers reiss 
support maintaining object oriented programs 
ieee transactions software engineering se december 
lewis henry kafura schulman 
relationship object oriented paradigm software reuse empirical investigation 
journal object oriented programming pages july august 
swanson 
software maintenance management 
addison wesley st edition 

study impact software maintenance 
proceedings ieee conference software maintenance pages 
miller darroch wood brooks roper 
changing programming paradigm empirical investigation 
lee editors software quality productivity pages 
chapman hall 
oppenheim 
questionnaire design interviewing attitude measurement 
pinter publishers new edition 

statistical validity 
american journal physical medicine rehabilitation 
perry kaiser 
adequate testing object oriented programming 
journal objectoriented programming january february 
rodman 
magazine distributed questionnaires exploratory research advantages problems 
sociological spectrum 
sinclair 
subjective assessment 
wilson corlett editors evaluation human practical ergonomics methodology pages 
taylor francis 
stroustrup 
programming language 
addison wesley nd edition 

asking questions 
bass publishers st edition 
cohen 
introductory statistics behavioral sciences 
academic press nd edition edition 
wilde 
maintenance support object oriented programs 
ieee transactions software engineering se december 
wilde mathews 
maintaining object oriented software 
ieee software 
questionnaire object oriented systems section background object oriented technology base answers questions section experience object oriented technology 
circle category accurately describes answer 
please feel free articulate information regard relevant question 

current position 
student academic software engineer project manager please specify capacity object oriented technology 
teaching programming analysis design please specify 
long object oriented technology 
year years years years object oriented technology day week 

object oriented language familiar 
may circle category objective eiffel smalltalk clos please specify 
method typically executable lines code 
lines lines lines lines range smallest largest 
deep inheritance hierarchy uncomfortable 
level levels levels levels problem depth 
causes difficulty trying understand object oriented program 
please specify 
inheritance caused difficulty trying understand object oriented program 
please circle appropriate number 
overloading requires consistent method names system 
experienced problems consistent naming manner methods maintain semantic consistency 
please circle appropriate number 
class libraries local academic institution designed implemented institution 
please circle appropriate number section object oriented questions base answers section opinions 
opinions gauged experience reading conferring colleagues 
feel free articulate relevant information question 

believe object oriented paradigm beneficial paradigms terms 
ease analysis design don know programmer productivity don know software reuse don know ease maintenance don know 
reasons 
please specify 
multiple inheritance useful 
please circle appropriate number 
think continual maintenance structured programs non object oriented programs leads 
please circle appropriate number 
think continual maintenance object oriented programs leads 
please circle appropriate number 
think object oriented code maintainable structured code 
please circle appropriate number please answer questions knowledge strong opinions subject question 

appears de facto standard object oriented language industry 
regard bad indifferent don know disagree statement please say 
allows mixture object oriented programming structured programming 
see mixture paradigms advantage please say disadvantage please say don know 

maintaining program friend function redesign inheritance hierarchy maintain object orientedness 
please circle appropriate number 
operator overloading 
please circle appropriate number overload operators member functions please say non member functions please say please say applicable 

templates 
please circle appropriate number comments points care elaborate time 
summary frequency statistics tables listed represent frequencies respondents answers questions 
numbers parentheses represents frequency electronic postal replies students year experience table electronic survey postal survey 
tables tables count respondent sum total column number respondents answered question 
capacity oo 
position teaching programming analysis design student academic eng 
proj 
man total table responses object oriented experience position year years years years total student academic eng 
proj 
man total table responses object oriented language position objective eiffel smalltalk clos student academic eng 
proj 
man total table responses typical method size 
position lines lines lines lines total student academic eng 
proj 
man total table responses method size range position lines lines lines lines lines total student academic eng 
proj 
man total table responses depth class hierarchy 
position levels levels levels problem total student academic eng 
proj 
man total table responses inheritance caused difficulty 
position occasionally usually total student academic eng 
proj 
man total table responses problems caused naming inconsistencies 
position occasionally usually total student academic eng 
proj 
man total table responses local class libraries 
position occasionally usually total student academic eng 
proj 
man total table responses oo ease analysis design 
position don know total student academic eng 
proj 
man total table responses oo programmer productivity 
position don know total student academic eng 
proj 
man total table responses oo software reuse 
position don know total student academic eng 
proj 
man total table responses oo ease software maintenance 
position don know total student academic eng 
proj 
man total table responses multiple inheritance useful 
position occasionally usually total student academic eng 
proj 
man total table responses continual maintenance sp code leads 
position occasionally usually total student academic eng 
proj 
man total table responses continual maintenance code leads 
position occasionally usually total student academic eng 
proj 
man total table responses oo code maintainable sp code 
position occasionally usually total student academic eng 
proj 
man total table responses de facto standard 
position bad indifferent don know disagree total student academic eng 
proj 
man total table responses allows hybrid programming 
position advantage disadvantage don know adv 

total student academic eng 
proj 
man total table responses friend function redesign 
position occasionally usually total student academic eng 
proj 
man total table responses operator overloading 
position occasionally usually total student academic eng 
proj 
man total table responses overload operators position members non members total student academic eng 
proj 
man total table responses templates 
position occasionally usually total student academic eng 
proj 
man total table responses 
