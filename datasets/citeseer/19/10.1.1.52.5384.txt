price composing partial evaluation compilation michael sperber peter thiemann wilhelm institut fur informatik universitat tubingen sand tubingen germany informatik uni tuebingen de applications partial evaluation compilation compiler generation 
partial evaluation usually expressed source source transformation high level languages realistic compilers produce object code 
close gap composing partial evaluator compiler automatic means 
successful application meta computation techniques build system theory practice 
composition application deforestation fusion 
result run time code generation system built existing components 
applications numerous 
example allows language designer perform interpreter experiments source source version partial evaluator building realistic compiler generates object code automatically 
keywords semantics directed compiler generation partial evaluation compilation higher order functional languages run time code partial evaluation run time code generation rtcg program optimization techniques received considerable attention language implementation community 
literature describes partial evaluation optimizing program transformation constant propagation memoization generated procedures 
partial evaluators perform source source transformation 
rtcg hand focus dynamically generating code fragments run time executing 
researchers begun notice partial evaluation terminology techniques suitable specifying implementing rtcg offline partial evaluation generates output residual program stitching pre fabricated fragments source program inserting constants pre determined places 
generic techniques rtcg assemble pre fabricated fragments object code usually called templates similar manner :10.1.1.43.7639:10.1.1.35.6058
systems developed implement rtcg help partial evaluation tools 
notably binding time analysis vital part offline partial evaluator automatically determine proper staging computations guide construction object code templates 
implementations partial evaluation systems source level systems obtain object code fly necessary employ reflection eval procedures similar means incurring significant compilation interpretation overhead 
partial evaluation systems directly generate object code exist implementation usually involves hand written code generation primitives 
implementation rtcg systems complex requires ad hoc modifications existing compilers rewriting components scratch 
describe obtain portable partial evaluation system scheme directly generates object code essentially automatic way composing partial evaluation system compiler 
composition knowledge internal workings compiler nature output code partial evaluator necessary 
achieve composition automatically specialization technique deforestation :10.1.1.30.9032
methods allow automatic generation run time code generation systems 
system modular construction possible modify partial evaluation system keeping mind object code generation issues replace compiler changes partial evaluation system glue code generated automatically 
fact implementation compiler partial evaluation system developed independently 
turns components system naturally complement partial evaluation system generates code subset scheme especially suited compilation fly code generation 
allows simple compiler circumvent analysis steps compiler underlying scheme system 
summarize contributions ffl formalization specialization phase offline partial evaluator higher order core language resembling scheme 
ffl show convert recursive descent compiler automatically set code generation combinators 
ffl show automatically compose combinators partial evaluator deforestation 
ffl implemented techniques framework existing partial evaluation system scheme byte code implementation scheme 
ffl compiled realistic programs run benchmarks confirm expected benefits system 
number immediate applications ffl straightforward partial evaluation system avoids compilation step residual programs speeding turnaround cycle experimental applications partial evaluation 
ffl system facilitates automatic construction true compilers maps language description interpreter compiler directly generates lowlevel object code 
ffl system allows creation execution customized code run time performing classic jobs rtcg systems 
ffl system realistic incremental specialization feasible allows implementation dynamically evolving programs avoid termination problems partial evaluation 
implementation byte code language system addressed native code generation issues register allocation code optimization 
believe issues largely orthogonal technique 
overview implementation system surprisingly simple give history implementation process sec 

section gives background partial evaluation program generator generators pgg 
section introduces concrete partial evaluation framework current 
section describes theoretical background 
sec 
techniques implementation 
benchmarks subject sec 

section gives account related 
run time code generation easy script rtcg production turns surprisingly simple 
cast peter mike programmers 
setting autumn crowded university office tubingen germany containing desks workstations 
workstations installed language system case scheme partial evaluator better program generator generator pgg works language system 
acts production correspond technical descriptions sections 
act write compiler mike writes simple compiler language system 
compiler needs handle output language partial evaluation process 
peter author pgg tell language happens normal form anf small subset scheme especially suitable effective compilation 
mike chooses chop stock scheme compiler compiler programs anf introduce obvious optimizations possible 
new compiler uses exactly syntax dispatch code generation conventions normal compiler seamlessly integrated base language system 
principle step avoided suitable anf compiler 
act annotate compiler peter obtains compiler mike binding time annotations 
peter resists learning internal workings compiler code generation issues involved mike assures simple 
peter just needs know compiler generates code 
peter merely prefixes expressions compiler operator causes delayed code generation time 
syntax dispatch remains unchanged 
peter finished idea code works 
mike code understand subtleties peter annotations 
act implement annotations peter writes macros simply ignore annotations result usable ordinary compiler 
writes second set macros turn compiler functions combinators 
combinators replace counterparts pgg normally responsible producing output code source language 
new combinators directly produce object code 
jobs turn reasonably straightforward 
act test debug peter mike get terminal hook pgg new code generation combinators 
tension high components developed separately tried combination debugging support object code level minimal deadline approaching 

right peter mike find number embarrassing bugs binding time analysis pgg embarrassing bugs mike original compiler 
resolve integration issues fact new program generators manipulate object code generators source expressions 
surprise slight disappointment conceptual problems whatsoever necessary ensure compiler usable normal source code compiler generator code generation combinators 
curtain mn mn xn values constants variables primitives syntax core scheme expressions cs vn vn vn vn xn syntax cs terms normal form partial evaluation pgg partial evaluation automatic program specialization technique 
operates source program known static input 
specialized residual program takes remaining dynamic input delivers result source program applied input 
residual program faster source program 
attractive feature partial evaluation ability construct generating extensions 
generating extension program inputs inp inp program gen accepts static input inp produces residual program inp residual program accepts dynamic input inp produces result inp inp provided inp terminate 
jp inp inp jp inp inp result inp inp result generating extension results applying generator pgg pgg result double self application partial evaluator described third futamura projection direct implementation 
specializing core scheme building blocks system pgg large subset scheme scheme byte code implementation scheme 
pgg design properties especially suitable goals 
properties designed object code generation mind arise naturally requirements 
presentation syntax core scheme cs shown fig 

omitted toplevel definitions brevity sake 
partial evaluator ml style language performs side effects specialization time lawall second author discovered specializer output code restricted subset scheme explicitly serializes computations ensure correctness essentially normal form anf shown fig :10.1.1.48.8807

anf natural target language pgg 
shows specializer restricted core scheme 
definition specializer employ acs annotated core scheme 
acs additional variants primitive operations expressions lambda abstractions applications conditionals annotated superscript dynamic generate code 
additionally lift construct coerces order values code 
underlining indicates code generation 
superscript produces fresh variables 
multiple occurrences say denote variable 
specializer employs continuation partial evaluation generate code anf :10.1.1.103.291
piece code denoting serious computation non value constructed wrapped expression fresh variable place piece code 
happens rules primitive operations applications 
wrapping necessary values constants variables abstractions 
specializer performs transformations necessary compiler 
input programs core scheme performs lambda lifting assignment elimination 
show parts specializer deal memoization standard relevant 
compiler essential transformations done specializer 
straightforward recursive descent compiler passes source ex kc sj en kae kae kae yn yn sj xn kae yn sj en kae kae kae kae yn fy sj kae kae kae sj kae kae sj lift kae sj en kae kae kae yn yn kx sj xn kae sj en kae kae kae kae yn yn kx sj kae kae kae sj kae kae specializer generates anf output code compile time environment mapping names stack environment locations stack depth necessary correctly generate code scheme virtual machine 
automatic composition theoretical basis draw ideas numerous disciplines algebraic syntax representation compositional compilers deforestation key ideas crucial composing specializer compiler 
anf serves convenient means communication specializer compiler 
syntax purposes regard standard syntax annotated syntax algebraic datatypes 
defined fixpoints functions sets expressions 
functions derived grammar cs denoting disjoint union theta denoting cartesian product sets list denoting set finite lists 
shows definition 
symbolic tags syntax syntax const constants constants var variables identifiers lam list variables theta lambda abstractions variables theta theta expressions theta theta conditionals app theta list applications prim primitives theta list primitive operations algebraic definition syntax const var lam app prim indicators summand disjoint union value lies 
allows pattern matching syntactic sugar defining functions 
convert function function const const var var lam xn lam xn fy fy fy fy fy fy app yn app fy fy prim yn prim fy analogously define function action functions additional tags lift dif 
technically functors set 
compositionality fundamental ideas denotational semantics description meaning programming language phrase compositional recursive definition meaning expression function meanings subexpressions 
language cs describe semantics cs defining suitable domains functions ev const ev var ev lam ev ev ev app ev prim 
denotational implementation follow espinosa terminology 
parameters generic recursion schema traverses cs expressions see fig 
write ev tuple ev const ev prim 
recursion schema catamorphism syntax :10.1.1.41.125
apart compositional semantics catamorphisms useful describing compilers specializers 
compiler functions evc compilation functions single construct 
specializer functions evs specialization functions 
case ev case ev const ev var xn ev lam xn ev ev ev ev ev ev ev ev mn ev app ev ev ev mn mn ev prim ev ev mn generic recursion schema cs extended schema evs additional parameters cases annotated versions syntax constructors 
example specialization function ev dif ae ae aek aek 
obtained explicit recursive definition fig 
systematic transformation 
recursive definition implicit recursion transformation recursive definitions definitions catamorphisms non trivial general :10.1.1.39.5086
specific case standard techniques partial evaluation suffice transform explicit recursive definition compiler specialized compilation functions evc aim generate evc automatically recursive definition specializing respect different syntactic constructs 
things done 
syntactic dispatch performed specialization time 

recursive calls explicitly recursive compilation function syntactic subcomponents construct removed replaced identity removal recursive calls definition ev takes care recursion 
syntactic subcomponents compiled evc applied 
specialization combinators evs transformation carried proved correct second author 
assume compiler form evc specializer form evs 
types functions interesting important 
evc code code evc syntax code evs syntax syntax evs syntax deforestation deforestation program transformation functional programs removes intermediate data structures symbolic composition :10.1.1.30.9032
suppose function produces intermediate data structures immediately consumed function 
deforestation applicable results function computation involve construction intermediate data 
deforestation expressed calculational form amounts application called fusion promotion theorem 
specialized situation fusion theorem states evc ev xs ev xc ffis evc evc evs evc ffis ranges syntax constructor tags annotated expressions argument vector arguments type replaced arguments type syntax syntax 
left side premise specializer recursively specialized syntax specialize constructor 
ev xs syntax performs specialization step apply evc evc compile code 
right side premise ev xc ffis function specializes compiles annotated construct compile components type syntax obtain value type code 
suitable argument ev xc ffis evc ffis code code evc ffis code remaining ranges 
task evs evc find evc ffis premise fusion theorem holds 
way derive example ev dif ffis ae ae ev aek aek 
know obtain evc ffis replace syntax constructor definition evs respective call function ev xc evc practice parameterize evs standard syntax constructors provide alternative implementations constructs syntax corresponds evc implementation theory previous section translates practice smoothly 
section describes concrete im plementation compiler fusion pgg context scheme system 
step write compiler principle possible simply stock scheme byte code compiler passes compile time continuation identify tail calls 
target code specialization engine anf 
anf shown fig 
control flow explicit 
function applications wrapped non tail calls jumps 
propagation compile time continuation unnecessary sensible drastically cut version compiler 
removing compile time continuation simplifies compiler speeds code generation removed fusion 
compiler integrated scheme system 
particular uses native syntax representation dispatch mechanism 
output compiler representation byte code scheme virtual machine essentially stack machine direct support closures continuations 
define syntax type lambda node cenv depth exp node form node alt label label sequentially test compile trivial cadr exp cenv instruction label enum op jump false alt label consequent compile caddr exp cenv depth alternative attach label alt label compile exp cenv depth takes parameters node node syntax tree representing conditional cenv compile time environment depth current depth stack 
compile compile trivial compile subexpressions conditional 
constructs object code number constructors sequentially arranges byte code instructions sequence label instruction label attach label serve create jump code typical compiling conditionals 
constructors return representation object code 
scheme internally relocates representation resolves labels generates actual byte code 
relocation step inherent scheme architecture alternative implementation generate object code directly backpatching resolving labels 
compiler utilizes define procedure create entry syntax dispatch table 
uses native syntax dispatch mechanism scheme compiler define define name type proc operator define 
name type proc procedure compile top level dispatcher compiler 
define compile exp cenv depth node classify exp cenv operator table ref node operator id node node cenv depth compile compiles serious expressions 
analogous mechanism creates compile trivial procedure 
step annotate compiler annotation compiler functions straightforward process requires deep understanding code 
compilation combinators perform syntactic dispatch generation time combinators copy remaining code verbatim 
annotated follows define syntax type lambda node cenv depth exp node form node alt label label sequentially test compile trivial cadr exp cenv instruction label lift literal enum op jump false alt label consequent compile caddr exp cenv depth alternative attach label alt label compile exp cenv depth annotated program constructs starting underline perform code generation 
remaining parts executed generation time 
parameters structure node known generation time 
subexpressions node cenv depth unknown 
correct annotation prescribes code generation value depends unknown value 
underlined constructs meaning ffl generates expression ffl generates procedure call example label generates call procedure label ffl lift literal turns generation time constant code 
conceivably annotation performed automatically appropriate binding time analysis possibly expense changing representation syntax compiler 
step implement annotations annotated compiler needs serve standalone compiler generator code generation combinators different implementations annotations 
annotations compiler compiler annotations need disappear 
scheme macros job define syntax syntax rules arg 
arg define syntax syntax rules stuff 
stuff define syntax lift literal syntax rules lift literal code generation combinators producing code generation combinators compiler straightforward 
idea create alternative versions annotation macros produce scheme source expressions combinators print file load needed 
macro constructs function call name fct function literally processing arguments recursively 
define syntax syntax rules fct arg 
fct arg macro constructs expression variable name processed header body constructed environment bound symbol binding produced generation time expression 
define syntax syntax rules body body general macro reuse variable name needs generate fresh names 
necessary implementation 
lift literal macro numbers merely conceptual reasons numbers instance self quoting scheme 
generate code constants lists macro lift quote inserts proper quoting 
define syntax lift literal syntax rules lift literal calls compile compile trivial discarded explained sec 

define syntax compile syntax rules compile arg 
arg alternative implementation define generates procedure definitions output code constructors 
generating extensions produced pgg call procedures generate residual code 
define syntax define syntax rules quote call trivial serious define ncd fun define residual test alt construct serious body ncd fun node get operator test alt define call ncd fun define residual call args construct serious body ncd fun node get operator call args 
define construct serious body ncd fun node lambda cenv depth ncd fun node cenv depth calls construct serious body 
accepts function arguments known node unknown cenv depth described 
argument node statically constructed respective part define macro 
residual functions generated process serve direct replacements syntax construction functions specializer 
step test debug problems putting system 
integration discovered bugs specializer compiler independent conceptual issues 
problem resolved duality variable names ordinary specialization kinds objects static values pieces code 
naive application approach replaces pieces code compilation functions 
lambda abstractions requires list names free variables compiled differently regular variables scheme vm 
systems passes names variables default converts compilation functions necessary 
benchmarks experiments largely confirm expectations rtcg technology point possible improvements implementation 
benchmarks standard examples compilation partial evaluation interpreter small order functional language called small lazy functional language called lazy taken similix distribution 
interpreter lines long run line input program lazy interpreter lines code run line input program 
scheme pentium laptop megabytes ram running freebsd 
timings cumulative large number runs seconds 
source code object code lazy generation speed shows timings generating scheme source object code directly compilers generated interpreters cases medium sized input programs 
object code generation factor slower generating source scheme uses higher order representation object code needs converted actual byte codes conversion part timings 
step emitting byte code directly efficient intermediate representation 
lazy compilation times specialization output loading generated source code back scheme system far expensive direct object code generation fig 

anf compiler slower stock scheme compiler 
fully appreciate timing data note order produce object code specialized program ordinary specializer add timings source code generation fig 
compilation times fig 

bta load generate compile lazy rtcg normal compilation objectives create scheme system stock compiler works run time code generation 
normal compilation system takes inputs program dynamic 
shows timings preliminary experiments direction bta column shows time needed binding time analysis creation object code generator load time needed loading compiling object code generator generate time running 
compile time needed load compile original interpreter stock scheme compiler 
related normal form compilation anf captures essence continuation compilation 
build construct simple anf compiler 
anf monadic normal form compilation put forward hatcliff danvy sabry wadler 
danvy uses type directed partial evaluation semantics directed compilation :10.1.1.103.291
system wraps expressions code denotes computations order avoid code duplication 
result obtains programs anf 
type directed partial evaluator suitable candidate composition compiler way shown 
partial evaluation automatic program transformation specializes programs respect parts input known advance 
partial evaluation enabling technology specializer suited generate code anf 
partial evaluator anf version consel danvy initial approach improve results partial evaluation cps transformation 
original application specializer specialization ml style programs perform operations specialization time 
partial evaluation holst describes system called partial evaluator generates code stack machine directly 
motivation system similar notable differences system written scratch generation stack code mind offline sense produced stack code representation fed separate interpreter 
contrast system results systematic composition existing parts produces code immediate execution run time system 
annotation functions similar ones shown sec 
considered writing pgg hand 
deforestation known investigated functional programming community powerful tool program optimization 
symbolic composition important technique ceres compiler generator system 
key steps ceres composition language definition considered compiler fixed compiler low level language 
technical details composition spelled 
ceres result composition entire compiler composition generates bricks generated compiler built 
application composition ceres creation parts system 
run time code generation run time code generation received revived interest early techniques available perform rtcg cheaply 
previously rtcg happened mainly context reflective language systems notably lisp usually involved prohibitive interpretive overhead compilation time 
applied code optimization efficient dynamic implementation programming languages optimization bitmap graphics operating system optimization tasks specifically suited rtcg :10.1.1.35.6058
selections complete overview field exceed scope 
particular interest relating rtcg partial evaluation 
fabius system lee leone performs rtcg native code ml 
fabius comes application specific code generator reused scheme code generation machinery 
systems compile annotated source code yield program generates code run time 
systems differ way generate code 
fabius produces object code run time performs various standard optimizations compile time run time 
example resolves issue register allocation run time generated code compile time addresses instruction selection run time 
system abstracts issues emphasis composition 
approach complementary benefit fabius techniques improve efficiency quality code generation 
consel group implemented tempo system generates code templates copied instantiated run time 
system interacts gnu compiler requires low level modifications code generator support templates 
draves applied partial evaluation low level code implemented pgg intermediate representation obtain efficient code computer graphics 
system operates purely intermediate code rudimentary support higher level programming provided 
assessment unfortunately researchers applied term run time code generation variety different situations 
clear cut border ordinary compilation rtcg 
ordinary spectrum compilation offline traditional compilers 
spectrum online systems dcg synthesis kernel compile code immediate execution 
rest spectrum empty programming languages ml scheme smalltalk read eval print loop accepts function definitions compiled code immediately available execution 
essentially online compilers 
obviously trade offs involved point spectrum different 
typical situations rtcg interleaving compilation execution compiled code generation object code explicitly running compiler combinations 
applications focused rtcg fly code optimizations high performance systems staging computations run time 
effective clearly necessary deal native code generation problem incurs register allocation various optimization techniques 
focuses high level aspects gaining rtcg system issues address largely orthogonal rtcg field 
direct continuation previous partial evaluation community 
sense aiming provide missing link systems fabius 
implementation geared applications known partial benefit rtcg way 
clearly remains apply approach realistic rtcg systems generate native code 
applicability partial evaluation methodology framework fly code generation demonstrated 
issues need addressed ffl method needs applied compiler generating native code 
step system circumventing intermediate representation speed code generation significantly 
ffl typical current rtcg applications reformulated context incremental specialization 
performance systems needs compared hand written ones 
ffl mentioned sec 
major obstacle replacing stock compiler rtcg system code generators loaded compiled stock compiler executed 
obvious way speed process apply system generate generating extensions object code 
demonstrated modern program transformation techniques deforestation partial evaluation powerful tools hands programmer 
successfully composed partial evaluator compiler rewriting scratch 
reused code compiler specializer generated glue code automatically partial evaluation annotated version original compiler 
attempt bridge gap partial evaluation run time code generation methodologies 
acknowledgments richard kelsey explaining internals scheme system 
acm 
proc 
acm functional programming languages computer architecture cambridge september 
andrew appel 
compiling continuations 
cambridge university press 
anders bondorf 
improving binding times explicit cps conversion 
symp 
lisp functional programming pages san francisco ca june 
acm 
anders bondorf 
similix manual 
diku university copenhagen may 
wei ngan chin 
safe fusion functional expressions 
th conf 
lisp functional programming pages san francisco ca 
acm 
wei ngan chin 
safe fusion functional expressions ii improvements 
journal functional programming october 
charles consel olivier danvy 
better support static data flow 
fpca pages 
charles consel olivier danvy 
tutorial notes partial evaluation 
symposium principles programming languages pages charleston january 
acm 
charles consel luke hornof fran cois noel jacques noy volanschi 
uniform approach compile time run time specialization 
danvy pages 
lncs 
charles consel fran cois noel 
general approach run time specialization application popl pages 
olivier danvy 
pragmatics type directed partial evaluation 
danvy pages 
lncs 
olivier danvy 
type directed partial evaluation 
popl pages 
olivier danvy robert gluck peter thiemann editors 
dagstuhl seminar partial evaluation 
springer verlag 
lncs 
olivier danvy ren 
semantics compiling case study type directed partial evaluation 
technical report rs basic research computer science may 
scott draves 
compiler generation interactive graphics intermediate code 
danvy pages 
lncs 
dirk peter thiemann 
imperative functional specialization 
berichte des wilhelm wsi universitat tubingen july 
dirk peter thiemann 
partial evaluation higher order languages state 
berichte des wilhelm wsi xx universit tubingen november 
dawson engler todd proebsting 
dcg efficient retargetable dynamic code generation system 
conference architectural support programming languages operating systems asplos vi pages 
acm press 
david espinosa 
semantic lego 
phd thesis columbia university new york new york 
cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
proc 
acm sigplan conference programming language design implementation pages albuquerque new mexico june 
acm sigplan notices 
futamura 
partial evaluation computation process approach compiler compiler 
systems computers controls 
andrew gill john launchbury simon peyton jones 
short cut deforestation 
arvind editor proc 
functional programming languages computer architecture pages copenhagen denmark june 
acm press new york 
robert gluck jesper rgensen 
efficient multilevel generating extensions program specialization 
plilp 
lncs 
geoffrey hamilton 
higher order deforestation 
swierstra pages 
john hatcliff olivier danvy 
generic account continuation passing styles 
proc 
st symposium principles programming languages pages portland og january 
acm press 
urs holzle david ungar 
calls run time type feedback 
conference programming language design implementation pages orlando june 
acm 
carsten kehler holst 
language triplets approach 
bj rner andrei ershov neil jones editors partial evaluation mixed computation pages amsterdam 
northholland 
proc 
acm international conference functional programming philadelphia may 
acm 
thomas johnsson 
lambda lifting transforming programs recursive equations 
proc 
functional programming languages computer architecture 
springer verlag 
lncs 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall 
richard kelsey paul hudak 
realistic compilation program transformation 
proc 
th acm symposium principles programming languages 
richard kelsey jonathan rees 
tractable scheme implementation 
lisp symbolic computation 
david keppel susan eggers robert henry 
case runtime code generation 
technical report university washington seattle wa 
david kranz richard kelsey jonathan rees paul hudak jim philbin norman adams 
orbit optimizing compiler scheme 
proc 
symposium compiler construction pages 
acm sigplan notices vol 
herbert doaitse swierstra editors 
programming language implementation logic programming plilp volume lecture notes computer science aachen germany september 
springer verlag 
john launchbury carsten kehler holst 
handwriting cogen avoid problems static typing 
draft proceedings fourth annual glasgow workshop functional programming pages scotland 
glasgow university 
john launchbury tim sheard :10.1.1.39.5086
warm fusion deriving build cata recursive definitions 
peyton jones pages 
julia lawall olivier danvy 
continuation partial evaluation 
proceedings conference lisp functional programming pages orlando florida 
acm 
peter lee mark leone 
optimizing ml runtime code generation 
pldi pages 
sigplan notices 
mark leone peter lee 
lightweight run time code generation 
peter sestoft harald editors workshop partial evaluation program manipulation pages orlando fla june 
acm 
malcolm 
homomorphisms 
van de editor mathematics program construction pages 
lncs 
henry massalin 
efficient implementation fundamental operating system services 
phd thesis columbia university 
erik meijer maarten fokkinga ross paterson :10.1.1.41.125
functional programming bananas lenses envelopes barbed wire 
fpca pages 
kristian nielsen morten heine rensen 
callby name cps translation binding time improvement 
alan mycroft editor proc 
international static analysis symposium sas pages glasgow scotland september 
springer verlag 
lncs 
kristian nielsen morten heine rensen 
deforestation partial evaluation evaluation orders 
plilp 
lncs 
simon peyton jones editor 
functional programming languages computer architecture la jolla ca june 
acm press new york 
rob pike bart john reiser 
trade offs bitmap graphics 
software experience 
proc 
acm conference programming language design implementation philadelphia may 
acm 
sigplan notices 
proc 
seventh programming language implementation logic programming 
springer verlag 
lncs 
proc 
rd symposium principles programming languages st petersburg fla january 
acm press 
revised report algorithmic language scheme 
lisp pointers iv july september 
amr sabry philip wadler 
reflection call byvalue 
icfp pages 
david schmidt 
denotational semantics methodology software development 
allyn bacon massachusetts 
helmut seidl 
integer constraints deforestation 
hanne riis nielson editor proc 
th european symposium programming linkoping sweden april 
springer verlag 
lncs 
morten heine rensen 
grammar data flow analysis deforestation 
sophie tison editor proc 
trees algebra programming pages edinburgh uk april 
springer verlag 
lncs 
morten heine rensen robert gluck neil jones 
unifying partial evaluation deforestation supercompilation gpc 
donald sannella editor proc 
th european symposium programming pages edinburgh uk april 
springer verlag 
lncs 
guy steele 
rabbit compiler scheme 
technical report ai tr mit cambridge ma 
takano erik meijer 
shortcut deforestation calculational form 
peyton jones pages 
peter thiemann 
cogen lines 
icfp pages 
peter thiemann 
implementing memoization partial evaluation 
swierstra pages 
mads tofte 
compiler generators 
probably 
springer verlag 
valentin turchin 
supercompiler system language 
sigplan notices february 
philip wadler :10.1.1.30.9032
deforestation transforming programs eliminate trees 
theoretical computer science 
