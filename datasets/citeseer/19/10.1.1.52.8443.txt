sets types review graduate group logic methodology science university california berkeley june notion types arose early century tool removing paradoxes mathematicians discovered developed modern set theory quest give foundation arithmetic notion types useful tool design programming languages 
computers electronic machines inherently suggest notion types higher order languages types classify data :10.1.1.47.9871
types programming language 
enhance ciency sought early typed languages fortran lead better memory management fewer pointless run time tests operations 
primary sources review listed section 
relied heavily papers carl gunter alexander aiken witold 
section sets follows notation gunter set constraints notation aiken professor yelick having motivated writing 
see rus 

enforce disciplined programming style modern typed languages java 
support stream lined data abstraction modularity 

provide tool higher level understanding programs types sets mathematical analysis denotational semantics programming languages showed usefulness higher order functions attributes discussed 
importance types programming higher order functions clear fact run time type errors common scheme prevented type system ml :10.1.1.47.9871
gunter noted gun examples strong type systems rejecting perfectly programs complicating higher level abstractions acceptable untyped languages :10.1.1.47.9871:10.1.1.47.9871
think types sets attributes may speak notion subtype may define partial ordering say subtype give formal definition simply states attribute possessed individual type possessed individual type simply sets attributes entities example materials physical beings hard soft :10.1.1.47.9871
living :10.1.1.47.9871
materials birds humans materials strong typing disadvantage disallowing reasonable programs may acceptable run time behavior may demand extensive programmer annotation languages java case languages java probably need take account savings due object orientation 
see gun :10.1.1.47.9871
feather materials view types subtypes particularly careful functions 
example subtype counter intuitive example demonstrates di culties may extending notion sets types clarified notion substitutability 
individual type substitutable individual type semantic contexts preserving defined semantic invariants :10.1.1.47.9871
way clarify subtyping functions resort semi formal definition notion subtyping try come clear definitions attributes intuitive definition attribute adequate just provide kind argument subtyping functions works way :10.1.1.47.9871
discussion types sets best starting point study typed calculi gun mit 
follow lines gunter presentation notation section 
ground type simply typed calculus applications associate right higher types symbol associates right 
assume application binds tighter abstraction 
calculus may define type assignment express finite list variable associated type course empty type assignments define :10.1.1.47.9871
may define set variables appearing set types appearing call variable projection type projection type assignment overload symbol requiring refer mapping gives variable corresponding type defined just case type judgements automate reasoning types naturally led formalizing type judgments represent type judgements writing mean deduce type type assignment variable projection contains free variables list inference rules briefly discuss results gun explaining lemmas may appear confusing :10.1.1.47.9871:10.1.1.47.9871
rules follows proj abst appl rules arrive typing judgment produced typing derivation 
term untypable assignment type ord judgment example xy untypable 
deduced means type derivations sound 
ensures soundness presence type tags bound variables abstractions 
absence type tags derive contradictory types valid derivations 
clear may derive term obtained substituting equation tuple written :10.1.1.47.9871
equational theory set equations 
overloading meaning turnstile symbol define equational theories equations relation satisfying set rules axiom see gun details :10.1.1.47.9871:10.1.1.47.9871
renaming may necessary ensure free variables bound substitution :10.1.1.47.9871
axiom exhaustive list rules gun :10.1.1.47.9871:10.1.1.47.9871
rules capture fact lead di er assignments involving variables free di er ordering assignments 
rules capture certain reflexivity symmetry transitivity congruence properties 
rules allow equational judgments application abstraction 
set models simply typed calculus standard model simply typed calculus gives interpretation types relative chosen set types interpreted sets higher types functions sets sets :10.1.1.47.9871
base set provides interpretation base type inductive interpretation types symbol refers set functions :10.1.1.47.9871
far things may look simple giving interpretations terms involved 
variable say type assignment certainly associate type need environment assign value environment ll value assigned environment type assigned type assignment indicate updates environment may notation mean new environment obtained value updated :10.1.1.47.9871
new environment evaluate variables obviously interpret terms relative type assignment relative type derivation meaning indicated 
note notation meaning sense untypable give interpretation note written better interpretation fail give meaning subscripts second alternative pushes main idea subscript field 
stick notation interpretation meaning function set elements environment :10.1.1.47.9871

give semantics projection rule 
environment 

note set functions :10.1.1.47.9871
element 
semantic rule abstraction 
denote function equivalent symbol application say interpretation value function applied argument unique type add new assignment produce typing derivation terms typable fact gun prove various results theorems soundness theorem :10.1.1.47.9871
theorem type isn necessary 
sense may claim simply typed calculus non trivial 
extensional environment models equivalent frame models gun basically generalization ideas gunter reviewed :10.1.1.47.9871:10.1.1.47.9871
example gunter notes standard extensional environment model frame simply typed calculus base set pair fx fx fx induces semantics fx fx set functions fx fx :10.1.1.47.9871
ordinary function application fx fx 
terms fx function defined 
may define herbrand type extensional environment models frames speak term models furthermore possible study structure preserving mappings type frames 
mappings partial homomorphisms may preserve algebraic structure part may fail defined domain algebra :10.1.1.47.9871
partial homomorphisms required surjective :10.1.1.47.9871
allows interesting results theorem partial homomorphism :10.1.1.47.9871
generalization sort model theoretic partial homomorphisms frames called logical relations :10.1.1.47.9871
survey field mit 
early development due 
see gun depth discussion types sets :10.1.1.47.9871
summary discussion shows simply typed calculus may choose ground set interpret types case probably better word frame 
extensional environment models carry bias outside set giving meaning terms locally constructed set 
details see gun page :10.1.1.47.9871
subsets higher types types functions :10.1.1.47.9871
interpretations types set constraints types interpreted sets easy conclude type resolution inference may carried means solutions set constraints 
short section wish lay general summary review main ideas developed solution set constraints type inference tool :10.1.1.47.9871
research orts aiken summarized important results applications research set constraints aik discusses problems 
demo functional language designed illustrate inference system solving systems type inclusion constraints witold written ph dissertations area cha 
shows dissertation problem consistency systems set constraints undecidable linear shallow theories consistency systems positive set constraints complete shallow theories problem positive negative set constraints decidable published number papers available line complexity set constraints problem studied aiken aik :10.1.1.47.9871
application set constraints type inference algorithm solving systems inclusion constraints type expressions thoroughly discussed aiken edward wimmers earlier 
cheng kozen plan publish extended version technical quoted haven chance play 
reached cs berkeley edu aiken demo html 
aiken gives comprehensive survey results aik :10.1.1.47.9871
see ii uni pl 
report complete gentzen style axiomatization set constraints give sequents finite sets set constraints axioms termset algebras :10.1.1.47.9871
cheng kozen describe completeness results important deductive system complete general sequents set theoretic termset algebras :10.1.1.47.9871
complete sketchy summary noting set constraints remained active area set constraint researchers agree period easy problems reached field research :10.1.1.47.9871
set expressions constraints basic ideas previous subsection gave quick summary research orts area set constraints 
give summary basic ideas set constraints notions commonly papers set constraints includes symbols types constructors new types :10.1.1.47.9871
finite ranked alphabet symbols arity associated 
nullary symbols called constants 
think symbols larger arity type constructors 
set elements arity denoted set ground terms set terms variables occur denoted called herbrand universe 
set terms obtained repeated applications constructor symbols constants terms obtained inductive process 
define terms set variables symbol 
add usual symbols naive set theory obtain set expression denoted 
constraint defined set expressions relation set expressions 
example set expressions version available technical report 
see che 
review implementation wait extended version 
say interesting area time early results type inference review implementation wait extended version 
constraint 
speak equality constraints just derived notion set constraints give interpretation map variables set constraints subsets mapping extended map subsets recall set expressions variable set see extension induction sense :10.1.1.47.9871
su ces consider interpretations set assignment satisfies constraint 
family set constraints satisfiable set assignment satisfies constraints simultaneously 
definitions formulate satisfiability problem finite family assignment satisfies practical problem theoretical questions 
aiken shown set constraints correspond hypergraphs aik 
proof relies normalization set constraints form relate finite family set constraints hypergraph 
follows family set constraints satisfiable corresponding hypergraph closed induced 
concerning decidability set constraints general results obtained heintze ja ar 
aiken aik detailed analysis complexity positive set constraints aiken involved discussion decidability set constraints negated inclusion :10.1.1.47.9871
ste simplified earlier results established completeness original problem :10.1.1.47.9871
bachmair give elegant proof reducing decidability problem positive set problem order theories unary predicates 
translate problem consistency positive set constraints problem consistency finite sets sentences order unary language deduce method obtaining solutions systems positive set constraints corresponding models monadic theories :10.1.1.47.9871
technique extended cha 
problem decidability consistency negative set constraints mixed set constraints restricted projection unrestricted diagonalization 
type inference illustrate set constraints type inference give just simple example aik directing reader somewhat detailed discussion :10.1.1.47.9871
equality constraint stand corresponding inclusion set constraints 
consider constraint cons nil interpret cons nil usual way constraint solution assigns set lists elements drawn :10.1.1.47.9871
continuing fashion see constraint nil solved conjunction previous constraint 
get set non empty lists 
constraint algorithms restricted forms general problem hei 
short lucid discussion algorithm solution family set constraints aik 
short algorithms transform family set constraints equivalent family cases syntactically solved form regular tree grammars 
example turns contain constraints form ym viewed productions ym regular tree grammar 
cases language generated grammar describes solution constraints 
aiken aik provides refinements simple discussion 
heintze applied techniques thesis hei compile time analysis ml hei :10.1.1.47.9871
summary started formalization types sets examined carefully simply typed calculus 
motivation modeling types sets type relations set constraints 
looked set constraints translation typing relations program explored broad outline various issues involved theoretical research set constraints 
easy problems appear solved half new problems formulated implementations hit points discover interesting paths research 
aik aiken set constraints results applications directions 
appears unpublished 
aiken papers reached url cs berkeley edu aiken pubs html 
aik aiken kozen vardi wimmers complexity set constraints proceedings conf :10.1.1.47.9871
computer science logic csl european assoc :10.1.1.47.9871
comput :10.1.1.47.9871
sci 
logic september 
earlier version technical report computer science department cornell university may :10.1.1.47.9871
aiken kozen wimmers decidability systems set constraints negative constraints technical report computer science department cornell university june :10.1.1.47.9871
aiken wimmers type inclusion constraints type inference 
reached url cs berkeley edu aiken pubs html 

aiken wimmers solving systems set constraints 
reached url cs berkeley edu aiken pubs html 
aiken wimmers solving systems set constraints extended 
appears prepared proceedings ieee symposium logic computer science :10.1.1.47.9871
reached url cs berkeley edu aiken pubs html 
cha set constraints equational theories ph dissertation institute mathematics polish academy sciences :10.1.1.47.9871
cha 
negative set constraints equality ninth annual ieee symposium logic computer science :10.1.1.47.9871
che cheng kozen complete gentzen style axiomatization set constraints technical report tr computer science department cornell university may :10.1.1.47.9871
gun gunter semantics types programming languages abramsky maibaum eds :10.1.1.47.9871
handbook logic computer science volume semantic structures clarendon press oxford :10.1.1.47.9871
hei heintze set analysis ml programs extended proceedings acm conference lisp functional programming june 
hei heintze set program analysis ph dissertation carnegie mellon university 
heintze ja ar finite presentation theorem approximating logic programs seventh annual acm symposium principles programming languages jan 
howard hereditarily functionals finite type troelstra ed 
metamathematical investigation intuitionistic arithmetic analysis lecture notes mathematics volume springer verlag heidelberg 
mit mitchell types systems programming languages van leeuwen ed handbook theoretical computer science north amsterdam :10.1.1.47.9871
rus russell mathematical logic theory types american journal mathematics 
ste systems set constraints negative constraints complete technical report computer science department cornell university august :10.1.1.47.9871
denotational semantics abramsky maibaum eds 
handbook logic theoretical computer science oxford university press oxford :10.1.1.47.9871
