life cycle refactoring patterns support evolution reuse brian foote department computer science university illinois urbana champaign urbana illinois foote cs uiuc edu william opdyke bell laboratories illinois opdyke att com software development characterized terms prototype initial design phases expansion phases consolidation phases 
consolidation phase relationships initially modeled inheritance may evolved aggregations 
consolidation classes defined capture behavior common existing classes 
define high level patterns prototype expansion consolidating programs 
define supporting patterns evolving aggregations inheritance hierarchies creating classes 
pattern larger language connected larger language help patterns emerge patterns exist scales 
patterns just patterns relationships patterns relationships smaller patterns patterns hooking see world entirely interlocking non material patterns see patterns alive evolving 
matter asterisks say patterns hypotheses tentative free evolve impact new experiences observations 
guarantee flux individual acts create chaos 
hinges close relationship process creation process repair 
subtly find different patterns different languages underlying similarities suggest reformulated general usable greater variety cases 
real process design lies task making language generate particular design 
language evolve evolve piecemeal pattern time date patterns concentrated characterizing recurring functional structural behavioral relationships objects 
attention paid classes frameworks emerge evolve 
truly reusable objects result iterative evolutionary process 
believe possible characterize aspects process patterns 
agree kent beck emphasis transformations designers existing objects improve helpful designers depictions resulting artifacts 
discussion patterns mailing list booch cunningham claimed objects system may simple examination grammatical relationships system specification 
remaining objects claim uncovered analysis tools crc cards 
late life cycle concede exceptional value embody insights emerge experience complexity melt away 
feel important add basic identities objects may discovered early objects change improve system evolves 
truly reusable objects emerge result evolutionary process 
dennis noted important allow stream changes avoid design early phases 
think may possible characterize process layer set patterns 
patterns far full fledged pattern language object oriented software development 
thought rough preliminary sketch major landmarks language located 
full exposition potential patterns scope 
elected focus detail 
hope discussion contexts patterns complete patterns give rise reader may discern outlines nascent pattern language 
top layer pattern develop software usable today reusable tomorrow forces resolved second layer patterns prototype pass design expand initial prototype consolidate program support evolution reuse 
define second layer patterns sections 
define sections patterns apply consolidation phase 
consolidation aspects program evolution focus research object evolution life cycles reuse refactoring 
design guidelines consolidation phase documented example 
evolve aggregations inheritance hierarchies examined third layer patterns resolves forces associated consolidation process 
inheritance models relation aggregation models relation 
relations distinct thought 
pixel point pixel location point 
matrix array extra behavior matrix representation array 
different people give different answers questions common person answer change time 
hand points view lead working programs 
hand differ resulting designs reused kinds changes easily 
important able change software reflects current point view 
possible convert aggregation inheritance converting inheritance aggregation focus common reasons 
create superclass third pattern defined 
consolidation abstractions common classes moved common superclass 
pattern describes done forces resolved 
fourth layer refactoring behavior preserving program transformation patterns resolve forces similar patterns 
layered approach helpful characterizing program consolidation phase refactoring examples described apply clearly programs researched patterns apply programs written smalltalk clos 
understanding refactorings interleaved additions ensuring refactorings safely applied object oriented programs 
background object evolution distinct phases evolution object oriented classes frameworks components prototype phase phase consolidation phase 
associated phases series high level patterns address forces resolved phase 
high level patterns turn realized applying lower level patterns resolve forces 
process software development seen phases iterated replicated classes frameworks applications 
pattern self similarity different levels typical fractal curves refer characterization fractal model 
fractal model thought object oriented specialization boehm spiral model 
spiral model cast broadly way accomodate reuse iteration independent evolution subsystems 
fractal model emphasizes characteristics objects allow evolve ways traditional software 
unique emphasis consolidation refactoring essential stages evolution truly reusable components 
sections follow describe patterns format similar alexander 
subsections context problem solution discussion related patterns 
pattern prototype pass design context order develop software usable today reusable tomorrow address problem hand 
initial albeit sketchy user available 
pressure produce tangible results relatively quickly 
problem building systems ground expensive time consuming 
difficult tell really solve problems intended solve complete 
rare see systems built completely scratch days 
modern software systems rely variety domain independent components tools 
reusable domain specific objects frameworks relatively rare particularly outside realm graphical user interfaces 
come surprise 
simply designing system hard 
designing general reusable system principles harder 
designing system addresses requirements hand broader range potential problems pose nearly insurmountable challenges 
solution initial design system focus requirements hand broader secondary concern 
important get running relatively quickly feedback regarding design gotten 
initial prototype borrow existing code 
brooks notes software grown built 
successful large systems successful small systems 
way get started build prototype 
object oriented programs early prototypes allow designers get feedback customers enable designers understand architectural issues need confront 
pro quick pass design emphasis finding set objects embody surface structure problem hand 
prototype phase may involve application analysis design methods development initial prototype implementation 
construction prototype common existing code order get working quickly 
strategy depends pre existing domain independent reusable components collections infrastructure domain specific artifacts 
domains code exist code related domain borrowed 
leveraging existing code create new application existing called programming difference 
fair ask reusable code serves foundation initial design comes domains previously exists 
patterns address issue 
related patterns phase realize reasonable pass set objects designs objects need refined may need redesigned 
examples patterns apply phase nouns specification imply objects verbs operations build existing objects inheritance get running polish avoid premature generality 
note patterns developed 
phase sets stage exploration consolidation 
discussed sections 
pattern expand initial prototype context successful systems seldom static 
success sets stage evolution 
problem software addresses important need users designers may recognize opportunities apply software new ways 
addressing new applications require changes program changes envisioned software initially designed 
software evolution reuse undermine program structure time difficult understand maintain software 
expansion phase designers try reuse parts program purposes differ program original purpose varying degrees 
traditional languages reuse undertaken making copies original code introducing flags conditionals original code 
activity tends compromise program structure difficult understand change program 
solution object oriented programs inheritance powerful useful mechanism sharing functionality objects 
placing new code subclasses help maintain design integrity changes isolated subclass original code superclasses remains intact 
objects evolve gracefully traditional functions procedures exploratory changes confined subclasses 
changes potentially disruptive existing code depends component 
results expansion phase class hierarchy models history changes 
resulting subclasses truly general 
desirable software maintenance standpoint inheritance hierarchy models type hierarchy 
related patterns expansion patterns come play subclass existing code modifying build existing objects inheritance defer encapsulation shared resources avoid premature generality get running polish 
note patterns appeared prototype phase appear 
reflects genuine underlying similarities phases 
pattern consolidate support evolution reuse context initial designs structured 
objects evolve insights designed better emerge 
problem objects evolve subjected forces undermine structure left unchecked 
prototypes pass designs structured 
expansion new conflicting requirements muddle clarity parts original design 
insight necessary improve objects available life cycle 
traditional life cycle notions address need exploit insight 
reusable objects seldom emerge fully formed initial analysis problem domain 
commonly discovered life cycle polished generalized system evolves 
result objects system changed embody structural insight 
traditional waterfall life cycle models accommodate redesign late life cycle 
life cycle models spiral model embrace iteration address unique properties evolving objects 
objects evolve differently traditional programs 
change applications spawn 
changes add breadth functionality system improve structure reusability 
easy understand deferred indefinitely 
unfortunate changes enduring value 
prototypes loosely structured variety reasons 
prototypes built allow designer gain initial sense layout design space 
definition designers understanding problem immature time 
objects phase may reflect surface structure problem adequately need refined elegantly 
furthermore need reused order reusable 
second reason structural informality prototypes constructed expedient fashion existing reusable parts 
seen bad thing 
get running polish effective strategy learning employ existing components address new requirements 
cases insight necessary get objects right available front 
process accommodate available rough drafts final ones 
expansion objects proven useful contexts differ original ones 
requirements raised contexts part specification original objects general anticipated objects designed 
object oriented systems tend accumulate leaves inheritance graph 
time hierarchy redundant organized code 
solution exploit opportunities consolidate system refactoring objects embody insights evident system evolves 
objects provide opportunities reuse available conventional software 
object oriented encapsulation encourages modular initial designs 
inheritance allows changes accommodate new requirements subclasses undermine structural integrity existing objects 
comes time insight gained prototype consolidation phases employed refactor system 
refactorings typically change way system works improve structure organization 
experience accrued successive object prototype expansion phases applied consolidation phase increase generality structural integrity 
program design improved classes frameworks emerge explicit 
phase size system typically increases 
consolidation shrink 
example designer notice methods added expansion contain duplicated code data 
designer factor common code common superclass 
method may grown larger code evolved 
designer break code methods increase level abstraction provide new places override behavior 
object evolves common new objects emerge 
section describes refactoring addresses 
refactoring seen addressing correcting forces left unchecked undermine structural integrity objects comprise system 
system evolves disorder entropy increase 
consolidation seen entropy reduction phase 
related patterns table lists design rules characteristically employed consolidation 
table lists refactorings employed consolidation 
section presents common important refactorings patterns 
table design rules dr 
consistent names dr 
eliminate case analysis dr 
reduce number arguments dr 
reduce size methods dr 
class hierarchies deep narrow dr 
top class hierarchy dr 
minimize access variables dr 
subclasses specializations dr 
split large classes dr 
factor implementation differences subcomponents dr 
separate methods communicate dr 
send messages components self dr 
reduce implicit parameter passing 
table refactoring patterns category refactoring high level refactoring hr 
create superclass hr 
subclass simplify conditionals hr 
capture aggregations components supporting refactorings create program entity sr 
create empty class sr 
create member variable sr 
create member function delete program entity sr 
delete unreferenced class sr 
delete unreferenced variable sr 
delete set member functions change program entity sr 
change class name sr 
change variable name sr 
change member function name sr 
change type set variables functions sr 
change access control mode sr 
add function argument sr 
delete function argument sr 
reorder function arguments sr 
add function body sr 
delete function body sr 
convert instance variable pointer sr 
convert variable function calls sr 
replace statement list function call sr 
line function call sr 
change superclass move member variable sr 
move member variable superclass sr 
move member variable subclass composite refactorings sr 
access member variable sr 
convert code segment function sr 
move class pattern evolve aggregations inheritance hierarchies context class hierarchies emerge prototype expansion phases functional elegant reusable 
consolidation phase designers take time exploit opportunities clean system improve structure comprehensibility increase reuse potential 
evolving aggregations inheritance hierarchies play major role system consolidation 
pattern employed factor implementation differences subcomponents dr separate methods communicate dr send messages components self dr 
problem inheritance early phases object evolution 
changing informal white box inheritance black box style aggregate component relationships result better encapsulated better structured understandable code 
prototype phases objects evolution designers tend depend heavily inheritance 
inheritance aggregation better ffl inheritance supported language level easier constructing aggregates hand 
feature object oriented languages programmers trained learn language 
familiar design idioms patterns aggregation experienced 
ffl obvious relationship relationship subclass mature 
ffl inheritance creates white box relationship sharing resources operations variables easy 
clear best intra object coupling may exist object reused new object may evident 
comes time consolidation phase designers may notice parts object exhibit degree cohesion suggests distinct objects factored existing hierarchy 
benefits realized inheritance relationships able changed aggregations 
cohesion encapsulation improved changing large class smaller classes 
aggregates change components runtime inherited subparts static 
components exploit dynamic polymorphism 
component member different aggregate 

separate classes reused independently may independently evolve 
may spawn subclasses interchangeable communicate public interface 

aggregate instance component class 
example inheritance relationship cast aggregate matrix class 
initial design class observation matrix repertoire arithmetic operations added 
matrix defined subclass adds operations transpose inherited methods accessing changing array elements 
changing relationship inheritance relationship aggregation take advantage fact subpart essentially intact state repository matrix abstraction 
making part matrix component permit alternate representations repository stateless identity objects place 
solution change inheritance relationships aggregate component relationships factoring parts existing class new component class 
perform changes way ensure program 
suppose subclass reuse behavior 
adding instance component variable 
replacing variables functions inherited component 
removing inheritance link example matrix class subclass inherited variable inherited functions get put 
instance class added component variable matrix 
inherited members class replaced members new component variable 
superclass matrix changed class null matrix top level class 
ensuring program changes performed easy steps difficult step 
inherited variables functions replaced matrix clients 
way step easier access variables inherited matrix change accessing functions point members component variable 
related patterns changing inheritance relationships aggregate component relationships require number supporting refactorings applied program 
creating instance component class populating employs pattern create member variable sr 
changing superclass aggregate class employs pattern move class sr 
related patterns include create member variable sr create member function sr delete unreferenced variable sr delete set member functions sr add function body sr move member variable superclass sr move member variable subclass sr move class sr 
changes argument lists member names may necessary employing patterns change variable name sr change function name sr add function argument sr delete function argument sr reorder function arguments sr 
abstracting access variables employs pattern access member variable sr 
pattern create superclass context noted prior pattern class hierarchies emerge prototype expansion phases functional elegant reusable 
way clean inheritance hierarchies consolidation phase define classes capture behavior common existing classes 
pattern employed satisfy design rules class hierarchies deep narrow dr top class hierarchy dr subclasses specializations dr 
problem programs evolve abstractions emerge 
abstractions appear classes implemented differently intertwined code specific class 
abstractions consolidated place code duplication persists hard reuse 
systems grow age 
grow abstraction may appear place program 
may happen ffl common programming practice program copying existing code modifying 
happens code gets duplicated 
ffl multi person projects different project members may implement functionality independently parts program responsible 
consolidation phase common abstractions discovered 
abstractions consolidated place benefits realized ffl defining abstraction place reduces program size possibly execution time ffl separating abstraction easier understand reuse 
ffl abstraction implementation flawed need fixed place 
problem copy modify approach software development errors original code get copied code 
error subsequently discovered fixed place may persist 
ffl program abstractions separated explicit entire program easier understand evolve 
example pattern applied classes defined 
suppose define defined copying modifying 
classes contain common behavior duplicated code 
superclass matrix defined captures behavior common classes 
solution factor abstractions common classes common superclass 
perform changes way ensure program 
suppose classes share common abstraction 
superclass defined 
adding new class initially contains locally defined members 
making new superclass 
determined common behavior functions parts functions 
changing needed function names argument lists function bodies attributes variables functions implement common behavior implemented identically 

moving common functions deleting subclasses 
example evolution choices file system framework classes defined support different file formats 
pattern applied move common behavior common superclass inode 
steps applying pattern trivial changing function bodies 
function defined classes included common code differences 
differing code split new functions differing code segments replaced calls functions order function definitions classes conform 
related patterns creating superclass may employ patterns create empty class sr create member variable sr create member function sr delete unreferenced variable sr delete set member functions sr change variable name sr change member function name sr change type set variables functions sr change access control mode sr add function argument sr delete function argument sr reorder function arguments sr replace statement list function call sr move member variable superclass 
discussion reiterate emphasis consolidation mean abandon front disciplined design analysis techniques 
contrary apply discipline front stages realizing design won remain fixed program evolution 
time insights gained programs evolved address new problems understood programs initially designed 
focus fix mistakes improve program structure accommodate change 
aggregation pattern discuss inheritance incorrectly 
pattern addresses fix common misuse inheritance proposing pattern improperly encouraging inheritance idea fix things 
think 
noted earlier relationships clearly distinct relationships 
points view change time imply original inheritance incorrect 
implements subtyping subclassing 
inheritance implement programming difference variant copy modify approach program development 
agree liskov inheritance primarily represent subtyping relationships practice inheritance way 
patterns allow clearly reflect typing relationships programs 
summary characterized evolution object oriented programs terms distinct phases prototype expansion consolidation 
defined high level pattern program consolidation defined consolidation pattern evolving aggregations inheritance hierarchies 
widely recognized aggregates superior inheritance expressing structural relationships 
black box components better support encapsulation white box nature inheritance 
ability replace old components new ones helps realizing benefits polymorphism run time 
gamma compiled catalog dozen structural design patterns 
emergence aggregate components relationships forwarding methods prominent recurring theme sizable number patterns 
ubiquitous nature relationship hope see better linguistic support aggregation 
ralph johnson supervised research projects provided review comments drafts 
john brant brian don roberts members ralph johnson patterns seminar provided insightful review comments draft ken auer plop reviewers 
bell laboratories supported william opdyke refactoring research university illinois full time doctoral support program 
alexander 
timeless way building 
oxford university press 
alexander ishikawa silverstein 
pattern language 
oxford university press 
paul 
object preserving class transformations 
proceedings oopsla 
barry boehm 
spiral model software development enhancement 
ieee computer may 
grady booch 
object oriented design 
benjamin cummings 
frederick brooks 
silver bullet essence accidents software engineering 
ieee computer pages april 
eduardo 
managing evolution object oriented environments algorithmic approach 
phd thesis university geneva 
peter coad ed yourdon 
ooa object oriented analysis 
prentice hall 
dennis 
review comments 
plop 
kent beck patterns postings related aggregations 
email exchange patterns cs uiuc edu 
ward cunningham objects 
email exchange patterns cs uiuc edu 
brian foote 
object oriented framework reflective meta level architectures 
ph thesis preparation university illinois urbana champaign 
brian foote 
designing facilitate change object oriented frameworks 
master thesis university illinois urbana champaign 
brian foote 
fractal model lifecycle reusable objects 
oopsla workshop process standards iteration coplien winder organizers washington 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
ralph johnson brian foote 
designing reusable classes 
journal object oriented programming 
ralph johnson william opdyke 
refactoring aggregation 
proceedings international symposium object technologies advanced software november 
karl lieberherr ian holland 
assuring style object oriented programs 
ieee software pages september 
barbara liskov 
data abstraction hierarchy 
addendum proceedings oopsla 
peter 
object oriented framework filesystems 
phd thesis university illinois urbana champaign 
technical report 
uiucdcs department computer science university illinois urbana champaign 
william opdyke 
refactoring object oriented frameworks 
phd thesis university illinois urbana champaign 
technical report 
uiucdcs department computer science university illinois urbana champaign 
william opdyke ralph johnson 
creating superclasses refactoring 
proceedings csc acm computer science conference february 

search smalltalk programming style 
technical report cr tektronix 
rosen 
orientation ada objects take 
communications acm november 
alan snyder 
encapsulation inheritance object oriented programming languages 
proceedings oopsla pages november 
printed sigplan notices 
rebecca wirfs brock brian wilkerson wiener 
designing object oriented software 
prentice hall 
