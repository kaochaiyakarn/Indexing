approximating decision problems michael huth department computing information sciences kansas state university manhattan ks usa huth cis ksu edu ph fax www cis ksu edu huth september view decision problems semantically total elements develop suitable notion partial element polynomial algorithm approximates decision problem giving sound replies form don know 
decision problem characterizes lattice partial elements 
lattices gives rise approximative version problem reductions compare standard 
introduce concepts presenting marking algorithms satisfiability validity testing propositional logic formulas flow analysis computing necessary conditions finding witness counter witness 
marking algorithm satisfiability sound complete sat 
intentional information computed algorithms higher order versions may optimize verification finite state systems coded symbolically boolean formulas 
conclude exploring possibility monotone decision problems 
key areas computational structural complexity algorithms data structures logic computer science verification 
decision problems sigma discussed complexity theory total elements computational solution decide instances totality abandoned randomized algorithms decide satisfiability ordered branching program 
loosing totality context means loosing soundness algorithm reply incorrect total answers merits algorithms come successfully relating error probability parameters input width branching program 
tradeoffs exist ordered binary decision diagrams certain classes sequential circuits symbolic codings boolean functions provably polynomial representation obdds function integer multiplication exponential lower bound obdd representation 
explores possibility loosing totality decision problems time insisting soundness algorithms reply correct total information may reply don know 
algorithms validity satisfiability testing 
seen performing flow analysis formulas analyzes compiler code optimization 
algorithms viewed optimization attempts intentional information compute help find compact representation formula obdd allow see structural complexity theory different angle 
typically studies complexity classes sees decision problems members classes 
partial elements semantics sound algorithms approximate decision problem decision problem primary focus partial elements defined complexity class interest 
hope shift may help deepening understanding computational complexity 
section illustrate shift studying examples satisfiability validity propositional logic partial point view 
section sketches possible framework underlying theory 
flow analysis boolean formulas marking algorithm usual marking algorithm performs analysis inferring atoms formula need true entire formula true 
analysis done completely statically assume test truth values atoms consequences 
special structure horn formulas guarantees analysis sound complete respect satisfiability 
example horn formula 


marks true realizes contradiction formula satisfiable 
hand horn formula 

marks stops marks contradictions result formula satisfiable may assign false unmarked atoms 
reachability algorithm sat satisfiability problem sat polynomial solution 
instance sat constructs directed graph instance performs certain reachability analysis graph 
illustrate example consider instance pq pq qr 
literal idempotent negation form node graph 
node draw edge pointing node true implies true clause sat instance 
example vertices vertices 
satisfiability formulas determined formula unsatisfiable node associated graph lies cycle node inference engine heart algorithm static analysis atoms true order maintain claim formula satisfiable 
note formulas state atoms may marked analysis 
generalize inference engine arbitrary formulas propositional logic full duality logic formulas may marked false 
general inference engine operates directed acyclic graph dag oe shares common subformulas node subformula may marks 
engine sets flow dag determining necessary constraints witness satisfiability formula question 
example flow see 
root initial permanent marking check satisfiability 
time stamps indicate time inferences left bi directional flow implicit 
note implementation requires bi directional pointers data flow laws bi directional example mark triggered presence mark connective mark argument 
subsequently mark report back connective detecting inconsistency phase formula 
recognized satisfiable 
general oe outputs pair dag oe answer answer finds inconsistency outputs manages mark nodes inference step reveal inconsistency returns don know cases dag oe copy oe dag additional markings inferred note data flow depicted describes parallel execution synchronization points 
output obtained depth breadth traversal 
needless say just engine 
example evaluation horn formula renders don know answer marking implication root travel 
show shortly don know answers higher order versions means horn formulas 
stress engine operates structure shares multiple occurrences subformula oe marks occurrence marks ones uses amplified information inferences 
example illustrates sharing atoms 
control structure test inference engine basic mechanism generalization reachability analysis sat 
mimic control structure reachability algorithm sat testing consequences atoms respectively engine arbitrary formulas propositional logic laws logic control continuation tests 
lists algorithm test operates formulas oe propositional logic output type key observations execution 
nodes oe dag may permanently marked third fourth clause case statement permanent markings may happen assignment immediately line open case oe decide satisfiability status initial input dag oe 
temporary marking backtracking analysis non incremental 
expressed expressions 

old oe satisfiable new oe satisfiable heart soundness argument test answers third case clause oe true test may safely continue new oe fourth clause argued symmetrically 
place assignments occur tests oe oe infer node truth value 
inference engine operating dag 
realizing unsatisfiability 
clearly satisfiability witness ae compute truth value permanent marks computed far state necessary conditions ae conclude witness ae assign value tests infer 

result call test oe implicitly depends order nodes tested conceivable true 

terminates infer test terminates imagine control structure cyclic ring nodes chosen ordering 
execution stops don know don know cycle unmarked nodes 
node gets marked program terminates due failed open true nodes marked eventually smart know dag nodes marked consistent 

running time linear size dag test cubic complexity execution ring terminate quadratic number steps 

show test returns sound answers 
involves showing sound operating dags formulas state induction number times program reaches label see test evaluate initial marking root gets stuck testing phase label begins testing formula finds satisfiability witness 
involved run finds conjunctive normal form clauses list combinations atoms unsatisfiable 
case algorithm tests atoms return don know 
see test incomplete arbitrary formulas consider conjunctive normal form clauses form pq combinations literals inner parentheses important 
formula unsatisfiable test reply don know won able mark nodes 
satisfiable formulas test don know reply hope algorithm complete interpreting don know uniformly total respectively reply 
completeness theorem oe dag horn formula root marked oe don know implies oe satisfiable 
proof 
suppose oe horn formula 
know ordinary marking algorithm horn formulas horn sound complete 
suffices show call horn oe encounters subformula 
oe marked 
engine runs dag oe initial root marking mark subsequently nodes represent clauses clearly marks atoms 
subformula oe marks encounters subformula marked isn may marked enable information flow dag mark 
summary marks atoms get marked horn find assume parallel regime linearity may deceiving algorithm polynomial rate 
function test oe computes oe answer partial information satisfiability formula oe function mark root node oe initial node node tested oe oe don know return oe oe oe open number distinct unmarked nodes oe failed open due branch oe don know failed open return oe don know unmarked node modulo open oe oe oe oe case don know don know node unmarked oe having mark oe oe mark nodes mark oe goto failed failed goto fi return oe don know oe oe goto don know oe oe goto true return oe esac fi fi function control unit test giving rise algorithm test note mark node special flag cases replies indicating evidence seeded 
inconsistency 
subformula 
oe marked horn marked allowing flow dag results inconsistency oe reply answer contrary assumptions 
proof 
completeness sat theorem oe sat instance 
test oe don know implies oe satisfiable 
proof 
identify oe dag oe final state call test oe 
write subformula oe 
define relation mean run oe test test test infers true false 
hard see preorder nodes marked permanently call test oe 
striking sat mean 
may construct witness satisfiability follows pick node compute lower set respect order assign true elements 
assign false elements upper set pick new set complement sets iterate assignment nodes assigned truth values 
procedure assign subformula oe 
secured dual symmetry preorder implies proof 
validity obtain control structure test test changing initial root mark swapping code 
run test test formula output pairs settle satisfiability validity question oe completely answer test oe answer test oe interpretation oe don know valid satisfiable satisfiable valid satisfiable valid don know unsatisfiable valid unsatisfiable valid note output pair possible algorithms sound 
leaves possibilities don settle decision tests partially answer test oe answer test oe interpretation oe don know don know satisfiable valid don know satisfiable valid don know satisfiable valid surprisingly property gets lost consider instances sat 
naturally vast majority runs form 
sketch little say situations permanent marks produced 

test oe puts permanent mark atom oe valid permanent mark means ae oe implies ae mark respectively ae mark 
valuation ae assigns dual mark get ae oe 
particular valuations counter witnesses satisfiability oe 
dually run test oe puts permanent mark reason oe satisfiable 
output pairs don know don know incomplete don know call permanent markings atoms 
similarly don know don know settles questions call marked atoms 

concurrent markings 
write 
node gets permanent mark call test oe permanent mark call test oe 
case reasons semantically equivalent oe 
dually combination marks semantically equivalent oe 
having marking combination similarly conclude valid 
dually marking combination entails unsatisfiable 
information optimizing representation boolean formulas explicit data structures obdds 

point indicates rare runs mark atom 
case combination valid unsatisfiable 
possibilities combinations 
event oe semantically equivalent oe satisfiable valid 
runs mark atom settle questions completely 

algorithms extended reason fixed point formulas gaining expressive power symbolically model checking finite state systems smv 
nutshell constraints computed recursive unfolding 
constraints permanent marks consistent unfoldings analysis terminates inconsistency unfolding finds new constraints 
apply higher order versions test turn 
higher order marking algorithms control unit test requires procedure returns pairs type dag formula answer test output type may define higher order versions analysis set test sm test sm 
way defined higher order marking algorithms 
joej number nodes dag associated oe easily see running time sm oe joej gamma assuming parallel regime 
algorithms decide sat limit 
define vm corresponding higher version test easily see replies vm oe just negations sm oe replies negation don know don know 
subsection described may exploit fact mirror image maintained computing intentional evidence tests 
may wonder algorithms compare partial evaluations truth tables 
example define algorithms ae compute ae oe follows number atoms oe greater return don know compute complete truth table oe determine definite answer 
clearly sat limit chain extensional meanings functions works horn formulas sat instances 
don compute intentional information case don know reply incremental analysis formula satisfiability validity 
fixed points answer partial order don know isomorphic flat booleans 
sigma finite alphabet formulas propositional logic coded subset sigma extension answer function type sigma answer interested function values outside coding range 
forgetting dags extension test may viewed type sigma answer 
sigma answer 
easily show extension scott continuous functional pointwise order provided monotone 
investigated suitable refinements space sigma answer test monotone 
definition test test sigma answer 
particular chain ascending 
theorem directed join extensions chain decides sat 
proof 
join extensions sm 
show oe don know induction joej 
proof 
obvious fixed points test constant don know function total function decides sat 
lots uninteresting fixed points map formulas don know 
fixed point test 
unclear fixed points sat fact may characterize lattice partial elements sketch suitable extensional formal framework approximating decision problems formal development approximating underlying computational problems versions mere decision problems require intensional approach decision problem sigma associate distributive scot domain sigma answer functions sigma answer pointwise order induced answer 
sub collection sound approximations algebraic lattice defined functions characteristic function fixing computational model deterministic turing machines define polynomial realizer computed deterministic turing machine polynomial time 
easily seen lattice binary meets joins corresponding sequential versions non determinism respectively level realizers zero constant don know function 
course structures won directed joins general reside ambient space case satisfiability validity product order dag formula answer order dag refinement say marks information 
problem reduction reason believe aspects domain theoretic reasoning may prevail setting 
example consider certain metric spaces unit interval sit corresponding classes domains intervals ordered reverse inclusion sets maximal total elements relative scott topology inducing metric 
may think total functions decision problem maximal elements sound approximations type sigma answer partial elements 
illustrate idea potentially novel 
notion problem reduction 
definition sigma decision problems 
say reduces function sigma sigma computable deterministic turing machine space log ffi total function deciding 
say reduces exists ffi space log function mapping codings formula codings sat instances 
notion reduction course standard reduction notion complexity theory 
may compare notions languages theorem reduces reduces dually reduces reduces proof 
know reduces implies existence ffi don know sigma conclude ffi hold implies ffi reduces second reduces ffi suitable obtain ffi showing reduces proof 
strictly ascending family algorithms sm results chain sat limit sat sat write denotations sat reduces sat ffi element join functions relational composition scott continuous 
say ffi valid way conceivable reductions different reductions outside inside grade hierarchy lattices functions polynomial realizers 
sub lattices maximal element 
canonical complexity measurement 
fixed computational model set smallest polynomial power compute order information theoretic may expect monotone implies intuition confirmed sigma decision problem deciding word coding formula propositional logic sat happens sound approximation sat sat computational model consideration 
trying mimic arguments difficult computational problems sat compelled serve masters 
sat choose hard set sigma may define maps don know returns 
clearly claim computes may map elements outside don know 
avoid situation need consider sat strongly believe measure 
may speculate hard problems enjoy possibly restricted monotonicity example easily sees np means computational models monotone sat sat sequence bounded 
algebraic structure require monotonicity measure define gamma map don know returns 
intuitively gamma measures progress case 
map scott continuous coordinate maps directed joins filtered meets second coordinate particular second component anti tone 
easily see elements ff gamma gg determine third polynomial way 
gamma restricts map theta may define distance gamma gamma note gamma gamma equals gamma show monotone distance additive sense imply 
proposition gamma equality 
proof 
right hand side show 
suffices construct algorithm gamma 
equality checks branches answer computable constant time construct algorithm similarly case second assume show reasoning similar case simply notice elements set ff gamma fg polynomial realizer determine polynomial realizer remaining element 
proof 
viewed decision problems total elements characteristic functions explored framework corresponding partial elements polynomial algorithms sound conservative approximations decision problems 
illustrated approach detailed study algorithms satisfiability validity tests propositional logic 
account intentional sketch framework general intentional semantics 
tests section may serve useful preprocessing boolean formulas note dl uncountable infinite lots non computable elements really interested monotonicity lg 
represents concretely obdds 
lattice polynomial realizers associated decision problem renders notion problem reduction coincides standard problems residing discussed notion monotone decision problem pointed monotonicity may encapsulate form hardness 
acknowledgments rodney howell stefan sokolowski allen stoughton stimulating suggestions regarding material presentation 
achim jung provided simple example showing test complete 
peter selinger pointed test need monotone 
reinhold heckmann implemented test standard ml new jersey produced example sat incompleteness algorithm diligent reader drafts report 
thomas streicher useful comments potential circularity flat booleans semantic approach rules certain decision problems monotone 
abramsky jung 
domain theory 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
clarendon press 
agrawal 
satisfiability problem probabilistic ordered branching programs 
electronic colloquium computational complexity tr 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
bryant 
complexity vlsi implementations graph representations boolean functions applications integer multiplication 
ieee transactions computers february 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys september 
gierz hofmann keimel lawson mislove scott 
compendium continuous lattices 
springer verlag 
lawson 
spaces maximal points 
mathematical structures computer science october 
mcmillan 
symbolic model checking 
kluwer academic publishers 
