automatic symbolic verification embedded systems rajeev alur thomas henzinger pei hsin ho 
model checking procedure implementation automatic verification embedded systems 
systems represented hybrid automata machines finite control real valued variables modeling continuous environment parameters time pressure temperature 
system properties specified real time temporal logic verified symbolic computation 
verification procedure implemented mathematica prove digital controllers distributed algorithms correct 
verifier checks safety liveness time bounded duration properties hybrid automata 
hybrid system consists discrete program embedded continuously changing environment interacts environment real time 
real life processes elevators aircraft controlled programs 
obviously correctness vital importance hybrid systems 
traditional program verification methods allow best approximate continuously changing environments discrete sampling 
attempts develop verification methodology hybrid systems mp 
pursue approach suggested solving reachability problems hybrid systems :10.1.1.48.8089
progress directions 
generalize system model accommodate addition piecewise linear functions linearly bounded functions 
second extend method verify addition reachability properties liveness time bounded duration properties hybrid systems 
third report implementation verification procedure 
hybrid automata 
model hybrid systems hybrid automata :10.1.1.48.8089
hybrid automaton generalized finite state machine discrete continuous variables 
usual discrete transitions program modeled changing program counter ranges finite set control locations 
addition global state hybrid automaton changes continuously time laws physics control location continuous activities environment governed set differential equations 
model hybrid systems inspired phase transition systems mmp viewed generalization timed automata ad similar model proposed studied independently 
preliminary version appeared proceedings th annual ieee real time systems symposium rtss pp 

bell laboratories murray hill nj alur research att com 
department computer science cornell university ithaca ny hog cs cornell edu 
supported part national science foundation ccr united states air force office scientific research contract 
restrict linear hybrid automata section 
continuous variable linear hybrid automaton behaves arbitrary function constant lower upper bounds rate change bounds rate change may different different control locations 
formalism model instance distance assuming constant speed local clocks distributed system assuming bounded drift 
model checking 
consider problem model checking hybrid systems 
model checking powerful technique automatic verification finite state systems model checking algorithm determines mathematical model system satisfies specification temporal logic formula 
discrete finite state systems model checking long history spanning dozen years successful validating protocols circuits ces mcm 
years model checking algorithms developed real time systems discrete programs real valued timers afh hnsy acd 
real time properties hybrid systems specified logic tctl acd extends branching time temporal logic ctl timing constraints 
integrator computation tree logic ictl strengthens tctl style bes admitting integrator variables section 
tctl meant specification time bounded properties response obtained pressed continuously seconds integrator variables express constraints accumulated delays useful specify duration properties response obtained pressed possibly intermittently seconds 
symbolic model checking algorithm verifying tctl specifications real time system hnsy 
observed primitives algorithm redefined obtain model checking procedure constant slope hybrid systems variable changes piecewise constant rate :10.1.1.48.8089
extend result linearly bounded functions introduce model checking procedure ictl properties linear hybrid automata section 
termination procedure guaranteed restricted classes hybrid systems hnsy reachability problem undecidable constant slope hybrid systems 
notwithstanding procedure terminates systems attempted verify 
undecidability result contrast depends contrived hybrid automaton encodes turing machine 
symbolic computation 
symbolic model checking procedure verifying ictl formulas linear hybrid automata implemented mathematica 
procedure symbolically manipulates linear formulas real valued variables section 
illustrate method implementation examples section 
verify properties controller railroad crossing 
second verify mutual exclusion property timing protocol distributed unsynchronized local clocks 
demonstrate additional advantage symbolic approach verification 
theory computational complexity verification problem proportional magnitudes system delays practice performance symbolic procedure quite insensitive size delays 
place concrete values system delays symbolic parameters procedure output sufficient necessary constraints parameters system satisfy desired property 
symbolic delay analysis help system designer choose crucial delays 
system description language linear hybrid automata hybrid automaton operates finite state control finite set data variables :10.1.1.48.8089
state automaton changes instantaneous transitions time elapses continuous activities 
transition automaton labeled enabling condition set assignments indicate transition modifies data variables 
control location automaton labeled set functions indicate data variables change time control automaton resides location 
progress system enforced exception conditions associated control locations require control leaves current location soon corresponding exception condition satisfied 
syntax linear term set real valued variables linear combination variables integer coefficients 
linear formula boolean combination inequalities linear terms linear hybrid automaton labeled graph consists components ffl finite set vd real valued data variables 
data state interpretation data variables 
write sigma set data states 
linear term vd called data function linear formula vd data predicate 
data state oe sigma data function maps oe real value data predicate true false oe 
write oe oe denote data predicate oe true data state oe 
ffl finite set vertices called locations 
variable pc vd control variable ranges set locations 
automaton state oe pair consists location data state oe sigma write sigma theta sigma set automaton states 
location predicate boolean combination atomic formulas form pc location 
location location predicate true false 
state predicate boolean combination location predicates data predicates 
automaton state oe sigma state predicate true false oe 
write oe sigma set automaton states state predicate oe true 
ffl set edges called transitions 
transition identifies source location target location ffl labeling function assigns location data variable vd rate interval integer constants interval points give lower upper bound respectively rate change variable respect time automaton control resides location 
ffl labeling function assigns location data predicate called exception 
automaton control leave location exception true 
negation exception called invariant location 
automaton state oe admissible invariant true data state oe 
ffl labeling function assigns transition guarded command 
guarded command guarded set oe fx ff vd assignments guard oe data predicate ff data function data predicate contains variable assignment form formula indicates value variable changed nondeterministically real number formula true 
example assignment changes value nondeterministically value greater 
write expression ff transition enabled automaton state oe sigma iff guard oe true data state oe 
automaton state oe sigma successor oe transition enabled oe data variables vd ff term oe oe ff ff formula true oe ffl state predicate oe called initial condition 
automaton state oe sigma initial initial condition oe true oe 
special case linear hybrid automata timed automaton ad 
data variable called clock rate interval locations clock increases rate time advances 
linear hybrid automaton timed automaton data variables clocks exceptions transition guards boolean combinations atomic formulas form assignments form clock nonnegative integer constant 
semantics time instant state hybrid automaton specifies control location values data variables 
state change ways instantaneous transition changes control location values data variables time delay changes values data variables continuous manner rate interval current control location 
interval nonempty convex subset nonnegative real line intervals may open closed bounded unbounded 
left point interval denoted right point bounded denoted interval sequence finite infinite sequence mutually disjoint intervals interval sequence diverges union intervals divergent interval sequence partitions nonnegative real line 
run ae linear hybrid automaton finite infinite sequence 
oe oe oe oe oe oe delta delta delta data states oe oe sigma locations intervals functions sigma 
sequence interval sequence 
transition automaton state oe successor automaton state oe 
oe oe 
data variable vd rate interval reals derivative real valued function defined contained interval 
reals invariant true data state 
notice rate interval location data variable singleton function linear interval reals oe gamma oe oe gamma 
trace function sigma 
equivalently trace set real valued functions variable run ae automaton diverges interval sequence diverges 
divergent run ae uniquely determines trace reals 
say trace trace automaton corresponds divergent run automaton nonzeno admissible state oe trace oe 
words nonzeno finite prefix run prefix divergent run shall consider nonzeno hybrid automata 
hnsy shown automaton may turned equivalent nonzeno automaton strengthening location invariants 
composition hybrid system typically consists components operate concurrently communicate 
describe component linear hybrid automaton 
facilitate coordination various system components synchronization labels automaton transitions 
linear hybrid automaton models entire system constructed component automata product operation defined standard way see instance full version :10.1.1.48.8089
example railroad gate controller model control system railroad crossing linear hybrid automata 
system consists processes train gate gate controller 
train moves speed varies meters second 
train approaches sensor placed distance meters crossing detects train sends signal app controller 
controller idle waits seconds sending command lower gate 
gate lowered height meters constant rate meters second 
second sensor placed meters crossing detects leaving train signals exit controller causes controller delay seconds command raise gate 
distance trains meters sensor detects leaving train returning train meters crossing 
controller accept arriving app exit signals time gate accept controller commands 
fault tolerance considerations design controller exit signal ignored gate lowered app signal causes gate lowered 
hybrid automata model train gate controller shown 
signals modeled synchronization labels transitions 
instance train gate controller open app exit far near past exit app raise closed lower raise lower exit app lower app exit raise lower idle raise gamma gamma gamma gamma gamma railroad gate controller train automaton changes location edge labeled app controller automaton required take transition step edge label 
notice graphical representation automata draw save edges particular gate automaton locations 
exceptions label locations invariants 
rate interval data variable location label location expression write suppress location labels form rate intervals true invariants 
transition labels suppress guard true assignments form initial condition indicated arrows pointing locations denoted oe asserts train gate controller start locations far open idle respectively pc train far pc gate open pc controller idle property description language integrator computation tree logic integrator computation tree logic ictl interpreted states linear hybrid automaton automaton meets requirement specified ictl formula true states formulas ictl contain kinds variables control variable data variables integrators 
integrator clock stopped restarted 
adopt notation bes replace clock reset quantifier tctl acd integrator reset quantifier location predicate called type integrator bound reset quantifier full version admit arbitrary state predicates integrator types 
integrator type increases rate time advances true stays unchanged false 
syntax formulas ictl built location predicates linear constraints data variables integrators boolean connectives temporal operators possibly inevitably reset quantifier integrators 
intuitively formula holds automaton state oe automaton trace starts oe second argument true argument true intermediate states formula asserts trace starts oe argument true second argument true 
formally set real valued variables contains data variables variables data variables called integrators 
formulas ictl defined inductively follows oe location predicate oe linear formula integrator 
ictl formula closed occurrence integrator bound reset quantifier 
restrict closed formulas ictl 
semantics ictl formula contains integrators type respectively assume reset quantifiers bind unique integrators achieved renaming bound variables 
automaton construct extension adding integrators data variables 
location integrator type true false 
transition integrator integrator values affected transition 
state extended automaton extends state original automaton states agree location data variables ictl formula true state oe denoted oe true state extends oe 
satisfaction relation extended automaton defined inductively follows oe iff true oe oe oe iff oe true oe oe iff oe oe iff oe oe oe iff trace oe exists nonnegative real ffi ffi nonnegative reals ffl ffi ffl oe iff traces oe exists nonnegative real ffi ffi nonnegative reals ffl ffi ffl oe iff oe oe state evaluates agrees oe variables 
notice density time domain causes subtle complication definition operators require disjunction argument true trace second argument true expect say ictl formula true true state writing ictl formulas suppress integrator type true typical abbreviations ictl formulas include true respectively temporal operators acd stands 
example railroad gate controller illustrate ictl consider railroad gate controller section 
require properties controller 
safety property oe pc gate closed asserts train meters gate gate closed 
safety requirement met controller keeps gate closed forever add liveness response property oe pc gate open gate open 
infinitary liveness requirement may satisfactory imagine re car waiting cross closed gate may wish require stronger time bounded response property oe pc gate open gate open seconds 
demonstrate integrators propose additional requirement time interval longer hour gate open time 
duration property expressed ictl formula oe pc gate open clock measures length time interval integrator measures accumulated time gate open interval measured symbolic model checking algorithm hnsy symbolic model checking algorithm smc verification timed automata 
generalize smc algorithm verify ictl properties nonzeno linear hybrid automaton reachability relations moving discrete state relation dense time domain need define notion step execution hybrid automata 
consider single step consist time delay followed instantaneous transition followed time delay 
notion step formalized reachability relations automaton states 
time step 
location invariant oe 
set differentiable functions sigma reals data variables vd dt 
state predicate 
data states oe oe sigma oe oe exist function nonnegative real ffi oe ffi oe ffi ffl oe reals ffi ffi oe 
words oe oe iff location starting data state oe possible reach data state oe letting time pass invariant state predicate true way states possibly final state oe 
data states oe oe sigma oe oe exist function nonnegative real ffi oe ffi oe ffi ffl oe reals ffi ffi oe 
words oe oe iff location starting data state oe possible reach data state oe letting time pass invariant state predicate true way states possibly initial state oe 
write lr intersection transition step 
automaton states oe oe sigma oe oe transition oe successor oe single step 
automaton states oe oe sigma state predicates oe oe exist automaton states oe oe sigma oe lr oe oe oe oe oe oe lr oe notice oe oe implies states oe oe admissible 
true suppress subscript 
single step relation extended sets automaton states 
automaton state oe sigma set sigma automaton states state predicate oe oe oe state oe reachability 
reachability relation sigma automaton reflexive transitive closure single step relation linear hybrid automaton states oe oe reachability problem oe oe undecidable :10.1.1.48.8089
computing weakest preconditions state predicates oe precondition oe set automaton states oe sigma oe oe 
show precondition oe definable state predicate state predicate pre oe automaton states oe sigma oe oe iff pre oe true oe 
compute pre operator definition single step relation composing weakest preconditions transition step time step relations 
done separately automaton transition automaton location 
assume invariant location convex conjunction atomic formulas 
achieved splitting locations 
compute weakest precondition data predicate oe respect relation transition write pre oe data predicate defining set data states oe sigma oe true data state oe sigma oe oe 
oe guard transition pre oe oe oe data predicate oe obtained replacing occurrences oe vector notation denote vector data variables vd 
compute weakest precondition data predicate oe respect time step relation lr location weakest preconditions time step relations computed similarly 
splitting locations necessary assume data predicate convex 
write pre lr oe data predicate defining set data states oe sigma oe true data state oe sigma oe lr oe 
invariant convex oe lr oe iff location starting data state oe possible reach data state oe straight line trace slope invariant state predicate true way 
oe invariant location rate interval pre lr oe oe ffi affi oe oe nonnegative real ffi length time step real valued vector slope straight line trace 
complete definition state predicate pre oe full version 
computing characteristic predicates characteristic set ictl formula set states oe sigma automaton true oe 
linear hybrid automata characteristic sets turn definable state predicates ictl formula state predicate oe automaton states oe sigma oe oe iff oe true oe 
call oe characteristic predicate denoted ictl formula symbolic model checking procedure smc attempts compute characteristic predicate see automaton meets requirement check state predicate valid true states decision procedure linear formulas 
smc procedure computes characteristic predicate steps 
observe extension automaton integrators formula 
second state predicate computed inductively structure procedure smc input nonzeno linear hybrid automaton ictl formula 
output characteristic predicate write short jpj joej oe pre compute sequence formulas state predicate valid replace occurrences 
consider instance state predicate computed limit sequence state predicates 
element sequence defines set states oe automaton state satisfying second argument reached single steps trace disjunction true oe 
follows state predicate defines set extended automaton states oe oe 
reachability problem linear hybrid automata undecidable approximation sequence may converge finite number steps 
smc procedure terminate 
smc procedure terminate examples section yields desired characteristic predicate input formula 
partial correctness property particular computation established similarly correctness proof smc algorithm timed automata hnsy 
symbolic model checking implementation symbolic model checking algorithm implemented mathematica ideal testbed programs requiring symbolic manipulation formulas 
discuss issues related implementation 
details full version 
quantifier elimination 
computing pre operator definition need eliminate quantifiers linear formulas 
quantifier elimination achieved decision procedure theory real numbers addition 
implemented theoretically optimal decision procedure ferrante rackoff fr 
practical performance method need deal quantified formulas particular form 
turned naive quantifier elimination procedure performs better case 
consider formula ffi oe oe conjunction linear inequalities remember existential quantifiers distribute disjunction 
solve conjunct ffi convert conjunct form ffi combine consistent pairs conjuncts eliminate variable ffi 
example conjuncts ffi ffi combined new conjunct 
drop quantifier ffi 
positive integer 
choice may effect number iterations necessary 
linear programming 
verification task need check validity state predicates see approximation sequence characteristic set temporal formula converged see resulting characteristic predicate input formula true automaton states 
verifier determines validity state predicates linear programming 
convert linear formula disjunctive normal form 
disjunct conjunction linear programming algorithm mathematica decides conjunction linear inequalities solution 
exponential decision procedure state predicates satisfiability problem np complete hnsy 
rewrite rules 
verification task continuously simplify state predicates rewrite rules 
worth noting repeated simplification state predicates time consuming computation verifier 
examples illustrate application verifier examples 
automatically prove safety time bounded response properties railroad gate controller section 
second automatically derive sufficient necessary constraints timing delays timing mutual exclusion protocol 
verification railroad gate controller safety requirement section written oe pc gate closed computation characteristic predicate pc gate closed terminates approximation steps automaton states lead bad state state train meters gate closed lead bad state single steps 
check state predicate oe implies negation state predicate 
detailed listings actual input output verifier verification time bounded response property full version 
delay derivation timing mutual exclusion advantages symbolic model checking procedure attempt verify system descriptions unknown constants parameters 
verifier may design delay parameters system 
consider mutual exclusion problem asynchronous distributed system local clocks 
system consists processes atomic read write operations shared memory 
process critical section time instant processes allowed critical section 
mutual exclusion ensured version fischer protocol lam describe pseudocode 
process executes algorithm fk timing mutual exclusion protocol repeat repeat await delay critical section forever processes share variable process allowed critical section iff process private clock 
instruction delay delays process time units measured process local clock 
furthermore process takes time units measured process clock single write access shared memory assignment 
complicate matters assume local clocks processes proceed different rates 
rates clocks may vary certain bounds rate local clock stays rate local clock stays 
resulting system modeled product hybrid automata 
automata models process critical sections represented locations respectively 
parameters shared data variables unknown constant values rate change locations altered transitions 
initial condition oe system pc pc mutual exclusion property specified ictl formula oe pc pc characteristic predicate formula computed verifier state predicate follows system satisfies mutual exclusion property precisely states false 
choose delay parameters protocol guarantees mutual exclusion 
advantage symbolic model checking approach insensitivity magnitude constants specification 
demonstrate performed experiment 
verified mutual exclusion property automata identical values parameters chose test data points differ multiples delta delta example time taken verifier independent magnitude parameter values 
verification tasks sigma seconds cpu time sparcstation 
current implementation represents state sets logical formulas state predicates 
need search efficient representations state sets verify complex systems 
absence continuous variables considerable success reported verifying complex systems state set representations binary decision diagrams mcm 
case timed automata sets clock values represented efficiently integer matrices dil 
linear hybrid automata geometric representation state sets combined convex hull approximations limit extrapolation operator hal may promising direction 
acd alur courcoubetis dill 
model checking dense real time 
information computation 
alur courcoubetis henzinger ho :10.1.1.48.8089
hybrid automata algorithmic approach specification verification hybrid systems 
proceedings workshop theory hybrid systems lecture notes computer science 
springerverlag 
ad alur dill 
automata modeling real time systems 
proccedings th international conference automata languages programming lecture notes computer science pages 
springer verlag 
afh alur feder henzinger 
benefits relaxing 
proceedings tenth annual acm symposium principles distributed computing pages 
bes bouajjani sifakis 
model checking real time properties durations 
proceedings eighth annual ieee symposium logic computer science pages 
ces clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
dil dill 
timing assumptions verification finite state concurrent systems 
proceedings international conference computer aided verification lecture notes computer science pages 
springer verlag 
fr ferrante rackoff 
decision procedure order theory real addition order 
siam journal computing 
hal halbwachs 
delay analysis synchronous programs 
proceedings fifth international conference computer aided verification lecture notes computer science pages 
springer verlag 
hnsy henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
proceedings seventh annual ieee symposium logic computer science pages 
kesten pnueli sifakis yovine 
integration graphs class decidable hybrid systems 
proceedings workshop theory hybrid systems lecture notes computer science 
springer verlag 
lam lamport 
fast mutual exclusion algorithm 
acm transactions computer systems 
mcm mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic publishers 
mmp maler manna pnueli 
timed hybrid systems 
real time theory practice lecture notes computer science pages 
springerverlag 
mp manna pnueli 
verifying hybrid systems 
proceedings workshop theory hybrid systems lecture notes computer science 
springer verlag 
nicollin olivero sifakis yovine 
approach description analysis hybrid systems 
proceedings workshop theory hybrid systems lecture notes computer science 
springer verlag 
nicollin sifakis yovine 
atp timed graphs hybrid systems 
real time theory practice lecture notes computer science pages 
springer verlag 
