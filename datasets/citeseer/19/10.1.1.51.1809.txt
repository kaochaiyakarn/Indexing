perfect club benchmarks effective performance evaluation supercomputers perfect club berry chen kuck lo pang pointer sameh chin schneider fox messina walker lue seidl johnson martin july performance evaluation cost effective transformations 
center supercomputing research development csrd univ illinois urbana champaign urbana il 
authors supported part national science foundation 
nsf mip department energy 
doe de fg er air force office scientific research 
afosr ibm donation 
ibm kingston ny 
california institute technology pasadena ca 
authors supported part national science foundation 
nsf asc department energy 
doe de fg er 
cray research falls wi 
princeton university princeton nj 
authors supported part air force office scientific research 
afosr office naval research 
onr 
university houston houston area research center houston tx 
supercomputers houston tx 
ibm watson research center yorktown hts ny 
results regarded specific contributions individuals 
contents caveats perfect club benchmark suite description benchmark suite history overview perfect club methodology programming language standard program verification performance measures software transformations results dyfesm flo mdg appendix list figures preliminary baseline optimized execution rates perfect benchmarks adm arc bdna 
preliminary baseline optimized execution rates perfect benchmarks dyfesm flo 
preliminary baseline optimized execution rates perfect benchmarks mg ocean spec 
preliminary baseline optimized execution rates perfect benchmarks spice track trfd 
preliminary baseline optimized execution rates perfect benchmark mdg 
preliminary baseline optimized execution rates perfect benchmark qcd 
cumulative performance improvement eq dyfesm 
rank ordered ascending human effort performance improvement diary entry eq dyfesm 
cumulative performance improvement eq flo 
rank ordered ascending human effort performance improvement diary entry eq flo 
cumulative performance improvement eq mdg 
rank ordered ascending human effort performance improvement diary entry eq mdg 
ii list tables perfect club benchmark suite machines perfect club 
software transformations optimization diaries 
summary perfect club activity denotes baseline measurement denotes optimized measurement diary denotes optimization processor 
initial final profiles dyfesm alliant fx cray mp processor ibm processor diary entries dyfesm alliant fx cray xmp ibm 
initial final profiles flo alliant fx cdc cyber cray mp ibm 
diary entries flo alliant fx cray mp 
diary entries flo ibm cdc cyber 
initial final profiles mdg alliant fx ibm nec sx 
diary entries mdg alliant fx cray xmp 
diary entries mdg ibm nec sx 
machines perfect club members machines perfect club members iii report consists major portions 
presentation methodology measuring performance supercomputers 
includes set thirteen fortran programs total lines source code 
represent applications number areas engineering scientific computing cases represent codes currently number computational research development groups 
perfect fortran standard simply set guidelines allow portability number types machines 
furthermore performance measures methodology recording sharing results group diverse users different machines 
second portion presents results obtained past year half 
results compare machines preliminary sense 
results show methodology applied encourage join effort 
objective develop publicly accessible database performance information type 
results regarded step performance database widely useful 
general awareness supercomputer systems faster larger memory hierarchies computer systems characteristics merely imply existence great potential power 
power harnessed central theme performance evaluation 
significant body literature documenting benchmarking means evaluating supercomputer performance developed 
unfortunately literature focuses ad hoc approaches evaluation systems potential standardization benchmark process mari 
benchmarking mature sufficiently meet requirements system architects application algorithm developers address standardization issues various caveats specific considerations reduce general applicability 
example denning adams noted particular difficulty arises comparing different architectures urged development benchmark methodology purpose dead 
benchmarking continues provide recognized means acquiring useful performance information complex systems running complex tasks 
report prepared national research council national academy sciences considering importance supercomputing development science deficiencies inherent techniques currently encouraged emphasis methodology metrics applied evaluation supercomputing systems 
number benchmark collections developed previously 
particular known sets include livermore fortran kernels argonne linpack measurements dong los alamos benchmarks lube nas kernels nasa ames baba 
troubling aspects state benchmarking relative collections defined relationship results 
best case possible argue fully representative particular workload relationship results lose relevance left interpreting specific results relative specific workloads 
case example livermore kernels little meaning outside livermore environment los alamos benchmarks merit context los alamos 
unfortunately difficult assert strong correlation benchmark kernels may fact representative computationally intensive inner loops workload full workload 
solid grounding specific cases generalizing results environments developed significantly problematic 
general approach followed perfect club develops ideas described 
chosen focus applications users supercomputers developers large scale applications drive need increasing processing power 
characterizing applications particular emphasis placed understanding underlying algorithms hope greater generality algorithmic level 
applications representing varied computational disciplines may rely basic set algorithms 
analysis optimization strategies associated software transformations applicable algorithms subsequent impact application performance constitutes quest evaluation cost effective transformations perfect 
noted concept measuring performance suite applications new advocated number computer manufacturers years 
manufacturers developed internal suite applications published data characteristics application workload performance measurements 
oftentimes proprietary software third party vendors performance comparisons limited family architectures available particular manufacturer 
goal perfect club provide set portable public domain codes executed variety architectures variety manufacturers 
certainly goal study establish guidelines benchmarking classes similar supercomputer systems architectural models 
noted onerous task 
algorithmic level different techniques may need applied efficient execution distinct architectures 
claim panacea methodology holds promise establishing reasonable framework investigations 
report preliminary results number caveats issues addressed matures 
caveats application benchmarking holds considerable promise relationship actual workloads constructed representative fashion set computational kernels contains numerous pitfalls 
preliminary effort applications selected computationally intensive 
difficulty porting applications contain significant amount chose consider problem stage 
real applications require component system fact efficiency handled critical feature system performance results extrapolated element reality represent 
portability issue influences ability applications run numerous systems involves sizes problems executed 
problem sizes restricted permit execution reasonable time spectrum systems included study 
desirable programs execute minutes hours days powerful systems 
positive attribute collection standpoint noted restriction problem size may negative impact powerful systems 
example restricting problem size may inhibit potential performance vector processor dependent long vectors achieve speed parallel system large number processors beneficial amortize cost serial content application spreading extremely large calculation individual processors 
restrictions may large initialization times larger problem sizes 
benchmark program initialization phase mainly composed serial computations speedups obtained multiprocessing distorted 
applications originally written particular architecture noted case comparing speedups due tuning optimal serial algorithms 
need problem fact understanding implications may able increase qualitative understanding variances architectures 
sense greater speedup achieved tuning particular system suitable original implementation algorithm application system question 
understanding mismatches applications architectures facilitate parti applications architectures representative classes 
related observation application written originally implementation particular architecture caveat methodology proposing absolute way omit subjectivity involved evaluating level effort expended process optimizing programs tested 
diaries explain code modifications ranking relative efforts invested modifications described attempt quantify qualitative judgement eliminate problem completely 
note optimization relative term absolute 
optimization process involves successive program modifications intended improve code performance measurable way 
performance comparisons reflect inseparable aggregate hardware software characteristics skill levels amount effort expended optimization process 
final caveat ignored study consider implications system throughput attempt define benchmarks purpose 
timings taken standalone environments seldom reflect environment enduser 
considerably control environment surrounding measurements standalone situations 
obvious extensions effort define similar methodology multiuser systems throughput important consideration individual turnaround time associated applications investigation 
perfect club benchmark suite description benchmark suite section gives brief history codes perfect benchmark suite overview algorithms employed 
list thirteen perfect club benchmark programs representative applications table 
history overview adm dimensional code supplied ibm kingston group simulates concentration deposition patterns environments solving complete system hydrodynamic equations 
code developed atmospheric oceanic science department university michigan subsequently ported system ibm kingston 
equation transport diffusion deposition included model 
model variables integrated method 
advection term treated fourier method directions coupled second order explicit mid point leap frog rule time 
convection diffusion processes vertical direction treated semi implicit crank nicolson method 
arc 
arc robust general purpose implicit finite difference code analyzing dimensional fluid flow problems solving euler navier stokes equations 
arc developed coworkers nasa ames research center cdc code run number vector machines cdc cyber cray mp ibm 
version arc generally available improvements incorporated code 
diagonal algorithm version arc perfect club benchmark inviscid viscous flows steady unsteady flows 
addition arc run curvilinear mesh 
equations discretized curvilinear mesh method cast equations implicit form 
point central difference approximations leading system equations 
numerical dissipation terms added improve stability turbulent viscosity model produce steady state flow field 
test problem benchmark turbulent flow past ellipsoid 
ratio major minor axes mach number angle attack ff ffi reynolds number flow theta computational grid points surface direction points circumference side points radially 
arc code supplied perfect club cray research group 
bdna 
bdna code package performing molecular dynamics simulations water 
package aims understanding hydration structure dynamics nucleic acids broadly role water operation biological systems 
bdna developed ibm kingston earlier molecular dynamics code laaksonen 
matsuoka potential function describe water water interaction 
atom atom potential functions form ij gamma describe water ion water nucleic acid ion ion interactions 
translational equation motion molecule solved gear fifth order predictor corrector method 
rotational motion water represented quaternions rotational equations motion solved second order quaternion method sixth order algorithm 
bdna simulation hydration structure potassium counter ions water dna 
water molecules counter ions placed box dimension theta theta complete helical turn dna consisting base pairs considered 
dyfesm 
code submitted csrd group dimensional dynamic finite element code analysis symmetric anisotropic structures see developed peters nasa langley research center hampton va cray mp 
explicit leap frog temporal method solve displacements stresses velocities accelerations time step 
time step accelerations computed preconditioned conjugate gradient method preconditioning matrix chosen part global stiffness matrix terms set zero 
code previously determining anisotropic shallow panels having quadrilateral 
flo 
flo provided princeton group developed jameson princeton university see analyse transonic inviscid flow past airfoil solving unsteady euler equations 
dimensional domain discretized quadrilateral cells 
case considered intervals profile radially 
application euler equations cells yields set coupled ordinary differential equations dissipative term added suppress non physical oscillations near regions steep gradients shock waves 
set differential equations solved incorporating simple saw tooth multigrid strategy multistage time stepping scheme 
results rapid convergence steady state solution obtained just single grid 
available grid sizes 
scheme modeling shock waves algorithm vectorized vector length equal grid dimension 
mdg 
code developed ibm kingston group 
mdg performs molecular dynamics calculation water molecules liquid state room temperature pressure 
code written lie ibm uses configuration interaction potential rigid water water interactions extends include effects intra molecular vibration 
mdg predict wide variety static dynamic properties liquid water 
code solves newtonian equations motion water molecules cubical box gear sixth order predictor corrector method gear 
total potential sum intra inter molecular potentials 
potential denoted double excitation infinity order body perturbation theory calculations bartlett shavitt 
potential potential 
mg 
seismic migration code see written cray mp kessler tel aviv university tel aviv israel investigate geological structure earth 
signals different frequencies emitted earth surface interacting geological strata received point surface 
data collected surface technique extrapolate backwards time get dimensional image structure surface 
data fourier transformed time depth extrapolation direction proceed independently parallel frequency 
advancement direction done step integration algorithm 
execution time usually spent performing fast fourier transformations fft realistic problems significant time expected 
specific problem size perfect club selected minimize possible requirements job area chosen excluded measurements 
sample problem gammay grid theta points respectively considered step downward earth direction 
data time values fourier transformed frequency cutoff employed order reduce problem size frequency domain 
ocean 
code solves dynamical equations twodimensional fluid layer see submitted princeton group 
code needed order study chaotic behavior free slip rayleigh convection lore 
equations motion fluid layer theta gamma eq delta rt fiw eq delta eq velocity field theta vorticity pressure deviation temperature conduction profile kinematic viscosity thermal conductivity ff thermal expansion coefficient 
spectral method see solve equations eq eq 
nonlinear terms evaluated fast transform methods aliasing terms removed 
done leapfrog scheme nonlinear terms implicit scheme crank nicolson backwards euler method viscous terms 
pressure term computed fourier representation local algebraic manipulation constraint eq 
flow assumed occur box region periodic free slip stress boundary conditions applied 
original version code designed cray computer system 
qcd 
quantum qcd gauge theory strong interaction binds turn constituents nuclear matter 
analytical perturbation methods applied qcd short distances equivalently high energies computer simulations necessary study longrange effects qcd theory lower energies 
lattice gauge theory simulations quantum field discretized periodic space time lattice 
located lattice sites bind associated lattice links 
represented su matrices particular type theta complex matrix 
major component qcd code involves updating matrices 
number different methods proposed updating su matrices see summary 
perfect club qcd benchmark uses pseudo heat bath algorithm update su matrices lattice links 
algorithm uses monte carlo technique generate chain configurations distributed probability proportional exp gammas action configuration contributions action come gauge field action local 
inclusion dynamical gives rise non local action complicates algorithm 
perfect club qcd code written california institute technology ipsc mark iii ncube hypercubes ignores effects dynamical 
code represents pure gauge model approximation 
major component qcd code updating su matrices associated link lattice operation benchmarked perfect timings 
basic operations involved updating lattice multiplication su matrices generation pseudo random numbers 
lattice size benchmark taken spec 
global spectral model simulating atmospheric flow submitted csrd group originally developed national meteorological center nmc cdc cyber described detail 
spectral method solving pde pioneered workers see showed apply atmospheric modeling 
forecast module nmc code benchmarking 
formulation model expressing unknown functions terms spherical harmonic expansions horizontal direction 
vertical direction quadratic conserving finite difference formula 
semi implicit backward time integration scheme applied initial conditions obtained spectral hough operational analysis flat 
ocean interacts atmosphere means evaporation sensible heating moisture cycle consists large scale precipitation kuo type convection 
spice 
code general purpose circuit simulation program non linear dc non linear transient linear ac analysis developed integrated circuits group electronics research laboratory department electrical engineering computer science uc berkeley 
csrd group submitted spice version spice perfect club benchmarking suite 
spice widely industry important cad tools design integrated circuits 
spice problems formulated stiff equations 
numerical methods solution include stable numerical integration algorithms newton raphson method solving non linear algebraic equations sparse linear system solvers see 
track 
track code developed caltech gottschalk workers determine course set unknown number targets rocket observations targets taken sensors regular time intervals see 
targets may launched number different sites 
gottschalk code originally written caltech jpl mark ii iii hypercubes 
sequential fortran version perfect benchmarks written gottschalk start 
target acceleration assumed known path individual object described fully component launch vector latitude longitude launch site time launch initial launch azimuth relative due north 
time step simple linear kalman filter estimate position velocity acceleration targets noise corrupted sensor data underlying kinematical model stochastic acceleration component 
output phase passed precision parameter estimation module uses newton raphson iteration solve equation giving precise estimate launch parameter vector 
multi target scenario sensor data points associated tracks means track splitting algorithm described 
general association unique single sensor point may stage processing associated track 
particularly true early stages processing number possible valid tracks may large 
problem potential combinatoric explosion number valid tracks dealt track pruning algorithm discards poorer duplicate tracks 
initialization new tracks managed separate module called batch mode initializer limits possible new tracks reasonably plausible set 
trfd 
code kernel simulating computational aspects electron integral transformation forms part quantum mechanical package developed ibm kingston group 
evaluation types integral transformations necessary step computing correlated de program application lines perfect club original source source sponsor machine adm air pollution ibm ibm arc computational fluid dynamics cray res 
cdc bdna nucleic acid simulation ibm ibm dyfesm structural dynamics csrd cray mp flo computational fluid dynamics princeton cray mdg liquid water simulation ibm ibm mg seismic migration cray res 
cray mp ocean computational fluid dynamics princeton cray qcd quantum caltech mark spec weather simulation csrd cdc cyber spice circuit simulation csrd cdc track signal processing caltech mark iii trfd quantum mechanics ibm ibm table perfect club benchmark suite terminations molecular electronic structure 
electron integral transformation transforms electron repulsion integrals atomic orbital ao basis set molecular orbital mo basis set fourth order tensor transformation equation 
evaluation integral transformation formulated series matrix multiplications 
perfect club methodology section fortran language standard port perfect club benchmarks variety supercomputers see tables appendix 
verification performance measures benchmark evaluation discussed 
conclude section discussion software transformations optimize benchmarks 
programming language standard thirteen application programs perfect club benchmark suite successfully ported verified machines listed table exception mdg qcd ported ipsc mark iii ncube hypercubes 
fortran language standard adopted perfect club porting iterations classified categories syntax documentation declarations input output general programming techniques 
modification original fortran program table guidelines insured successful run machines table 
note requirements reflect known ansi fortran standards syntax 
ffl program statement supplied 
ffl fields avoided 
ffl string delimiter 
ffl redundant operators removed 
ffl multiple operators ordered 
ffl special characters variable names 
ffl variable names characters long 
ffl avoid doubly nested loops defined label 
branches goto label loops may fatal 
documentation 
ffl multiple subroutine return documented 
ffl unavoidable machine specific constants intrinsic functions documented 
special bruce kuck associates savoy il help fortran guidelines 
declarations 
ffl declare variables 
ffl avoid equivalence 
possible equivalence character non character data 
ffl real real double precision real declarations respectively cdc cyber exception 
ffl timing variables declared real 
ffl length character declaration 
ffl declarations common blocks order complex complex real real integer 
input output 
ffl open statement exist file accessed 
ffl variables logical units read write 
ffl err avoided 
ffl storage requirements input output temporary files documented 
external devices cray solid state disk indicated 
programming techniques 
ffl function name variable name 
ffl avoid goto statements 
ffl intrinsic routines char 
ffl insure string manipulation involves string nonzero length 
ffl insure variables assigned referenced 
ffl save statement reuse local variables executing stacks 
cray mp 
guarantee language standard suitable machines reflect timely effort perfect club identify major porting errors may encounter machine 
program verification porting perfect club benchmark programs particular attention numerical accuracy computed solution machine 
order obtain simple reliable measure correctness computed results critical variables constants pressure kinetic energy examined output 
validity quantities measured jx gamma jx ffl machine description peak alliant fx vector processor mini supercomputer cdc cyber pipe vector processor memory memory cray mp vector processor supercomputer ibm vector processor supercomputer ipsc intel hypercube processors mark iii hypercube mc processors ncube hypercube custom scalar processors nec sx vector pipelined uniprocessor supercomputer table machines perfect club 
observed expected results respectively ffl maximum allowable relative error 
outputs benchmark programs table quite sensitive machine round errors large relative error ffl allowed 
program completion verification file indicates computed results valid invalid relative errors critical output variable 
self checking component perfect club benchmark suite enables programmer immediately determine correctness outputs needing extensive analysis output data 
performance measures fundamental measurements recorded programs table machines table cpu time wall clock times 
initially measures taken original baseline code manual optimization programmer bit arithmetic optimization achieved means compiler preprocessor certainly allowed 
dedicated computing environment measurements exception nec sx 
cases elapsed wall clock time measurements cpu times purposes computing normalized execution rates program suite 
cases elapsed wall clock time available cpu times determine normalized execution rates 
input datasets utilized programs chosen yield reasonable runtimes full spectrum machines 
specifically reviewing measurements taken preliminary runs various datasets machine single dataset set parameters selected measuring performance program machines 
having recorded baseline measurements benchmark suite attention focused software transformations see table manually optimizing suite 
effort conducted optimization diaries described section 
diaries simply identify type frequency performance improvement associated transformation programmer optimize program particular machine 
performance improvement machines table conform ieee floating point standard 
bit precision machines listed table qcd alliant fx optimized versions qcd spec 
diary entry measured deltat gamma eq deltat gamma gamma change runtime wall clock cpu diary entry gamma relative runtime gamma baseline measurement mentioned 
performance improvement th transformation implementation previous gamma transformations eq ratio effect measures successive speed improvement recorded optimization diaries 
assess amount human effort required achieve author diary indicated amount time minutes hours days weeks months needed implement corresponding transformation 
assessments ranked degree difficulty programmer compilers machines see tables appendix 
type measurement course quite subjective focusing rank order human effort attempting determine absolute values diary reveal hierarchy cost effective transformations 
software transformations software transformations listed table significantly affect hardware total number operations required obtain result 
basic categories transformations considered 
category comprises compiler directives assertions treated comment statements fortran 
directives allow compiler safely perform certain operations 
transformations category 
second category transformations consists software restructuring techniques involve source code modifications 
simple example local change say loop enables fortran compiler recognize vectorization concurrency capabilities 
complicated change data blocking alter arrays loops entire code 
transformations category 
third category involves algorithm modifications efficient numerical method better suited vectorization 
description 
compiler directive concurrent loop 
compiler directive concurrent subroutine call 
compiler directive ignore data dependence 
vectorize loop 
remove data dependence 
common subexpression elimination 
modify concurrent subroutine call 
removal redundant operations 
modify stride memory access 
loop fusion 
loop unrolling 
loop interchange 
cache management 
register management 
replace fortran statements assembly language code 
library subroutine 
change algorithm 
loop restructuring move loop inside outside subroutine 
subroutine elimination contents moved inline 
modification formatted unformatted 
unknown diary modification table software transformations optimization diaries 
parallelization replaces original method 
transformations comprise final category 
transformation details particular library routine general transparent user 
subsequently transformation may may involve actual algorithm modifications 
contrast transformation algorithm replacement performed user 
example replacement linear congruential random number generator parallelizable vectorizable random number generator 
summary software transformations may viewed responses individual programmers available hardware features system software 
machines similar architecture obtain similar optimization diaries particular perfect club benchmark program 
identifying differences type impact software transformations diaries lead better understanding performance behavior supercomputers general 
results section baseline compiler optimized hand optimized measurements perfect benchmark suite table machines listed table 
figures illustrate range performance obtained perfect club benchmarks simply ported compiler optimized machine 
figures figures current performance gained manual optimization indicated opt 
relative performance measures reported figures computed dividing total floating point operation count measured hardware monitor cpu cray mp original source codes perfect club benchmark suite execution times machine 
way operation counts simply normalization factor allowing comparison applications containing significantly different amounts 
specifically applying normalization able compare execution rates execution times 
preferable vary total volume problem convenient indicator performance 
difficulty acquiring accurate floating point operation counts baseline optimized codes machine listed table intention measure relative performance machine solving particular application problems reflected suite 
note processors alliant fx baseline optimized versions codes nodes ncube baseline qcd measurements 
baseline measurements cray mp utilized cpu optimized measurements recorded exception dyfesm qcd spice cpu 
ibm optimized measurements processors obtained arc bdna flo mdg optimized processor measurements recorded dyfesm mg 
baseline measurements ibm reflect single processor runs 
mentioned previous section particular software transformations hand optimize perfect club programs recorded optimization diaries 
table indicates machines programs diaries collected figures reveal improved execution rates achieved activity 
illustrate improvement achieved various machines discuss collectively diaries perfect club benchmarks dyfesm flo mdg 
insert preliminary baseline optimized execution rates perfect benchmarks adm arc bdna 
insert preliminary baseline optimized execution rates perfect benchmarks dyfesm flo 
insert preliminary baseline optimized execution rates perfect benchmarks mg ocean spec 
insert preliminary baseline optimized execution rates perfect benchmarks spice track trfd 
insert preliminary baseline optimized execution rates perfect benchmark mdg 
insert preliminary baseline optimized execution rates perfect benchmark qcd 
machine program alliant cdc cray ibm ipsc mark ncube nec fx cyber mp iii sx adm arc bdna dyfesm flo mdg mg ocean qcd spec spice track trfd table summary perfect club activity denotes baseline measurement denotes optimized measurement diary denotes optimization processor 
dyfesm optimization dimensional dynamic finite element program dyfesm relied availability efficient numerical software libraries 
table list specific transformations table recorded diaries alliant fx cray mp ibm note optimized matrix vector blas matrix matrix blas kernels see efficient cholesky algorithm solving symmetric positive definite linear systems machines 
improvement ratios eq eq transformations table illustrated figures initial final diary transformations profiles dyfesm illustrate breakdown processor optimization dyfesm cray mp ibm 
ibm alliant fx cray mp diary entry cumulative performance improvement eq dyfesm 
execution time dominating subroutines table 
optimized time dyfesm nec sx reported diary available 
numbers contained bars figures correspond transformations listed table 
figures observe significant performance improvement large resulting optimized library subroutines transformation alliant fx cray mp 
elimination proved quite significant cray mp concurrent subroutine calls proved equally important alliant fx 
ibm interesting note essentially achieved trivial code modifications careful compiler usage 
quantify human effort needed incorporate transformations table dyfesm chosen rank order increasingly difficult time consuming left right transformations programmer assessment time spent hand phase 
expect library subroutines cost effective relatively little human effort required order yield substantial improvement rate 
execution time subroutine initial final alliant cray ibm alliant cray ibm fx mp fx mp subroutine description algorithm assemble right hand side terms element level multiplication triangular system solver preconditioner load elemental displacements matrix multiplication form nonlinear terms conjugate gradient method table initial final profiles dyfesm alliant fx cray mp processor ibm processor 
machine entry transformation description see table dominant subroutines affected alliant blas matrix vector multiplication 
fx block cholesky algorithm blas matrix matrix kernels inserted 
loops fused yield parallel loop concurrent subroutine call 
cray contents short subroutines moved mp line remove excessive calling overhead 
cpu blas matrix vector multiplication 
loops interchanged remove 
loop unrolling 
cholesky algorithm re designed remove insure column operations 
unroll loops cholesky solver 
ibm eliminated multiplications zero 
cpu vectorized matrix vector multiplication loops 
scalar compiler optimization short loops 
blas matrix vector multiplication 
table diary entries dyfesm alliant fx cray mp ibm 
ibm alliant fx cray mp diary entry rank ordered ascending human effort performance improvement diary entry eq dyfesm 
flo optimization transonic flow benchmark program flo alliant fx cdc cyber cray mp ibm consisted primarily software restructuring transformations second category section 
initial final profiles highly vectorizable program listed table 
dramatic changes initial final profile observed machines 
note disparity dominant subroutine initial profile machines eflux psmoo 
specific transformations diaries flo alliant fx cdc cyber cray mp ibm listed tables 
key improving performance benchmark program machines lies vectorization parallelization multitude doubly nested loops 
number loop iterations nested loops usually differing magnitudes 
example loop iterations may iterations 
figures note substantial improvement achieved conjunction loop ibm cdc cyber alliant fx cray mp diary entry cumulative performance improvement eq flo 
fusion obtain larger vector lengths cray mp 
alliant fx concurrent subroutine calls limited doubly nested loop restructuring allow concurrent iterations outermost loop total vectorization innermost loop yielded small gains total time reduction 
vector lengths short improvement achieved cdc cyber vector preprocessor explicit linked triad vector operations 
third diary entry yielded significant individual transformation improvement 
ibm parallelization time consuming routines concurrent subroutine calls yielded significant improvement 
general highly vectorizable programs perfect club benchmark suite flo relatively transformations table selected optimization diaries 
due large part success individual compilers generating efficient vector concurrent loops 
execution time subroutine initial final alliant cray cdc ibm alliant cray cdc ibm fx mp cyber fx mp cyber eflux euler psmoo subroutine description algorithm blended nd th order damping eflux computation euler fluxes euler multistage runge kutta advance flow variables psmoo additional smoothing calculated implicitly table initial final profiles flo alliant fx cdc cyber cray mp ibm 
machine entry transformation description see table dominant subroutines affected alliant subroutine split separate fx subroutines called concurrently 
loops new subroutines unrolled 
psmoo doubly nested loops restructured optimal concurrent outer vector inner loop pairs 
loops unrolled order alleviate overhead existing loops 
eflux cray loop fusion insertion mp directives outermost loops 
eflux euler psmoo table diary entries flo alliant fx cray xmp 
machine entry transformation description see table dominant subroutines affected ibm function redefined allow vectorization loops step loops enforced scalar psmoo 
loop fusion redundant division removal 
psmoo step concurrent subroutine calls instrumented 
euler psmoo step cdc vast vector preprocessor vectorize cyber loops 
eflux euler psmoo loops re indexed re designed explicit linked triad vector vector scalar theta vector operations 
psmoo redundant vector operations removed contiguous array sections extended 
correspondence array elements enforced removing common inserting subroutine arguments dynamically dimensioning arrays 
eflux euler table diary entries flo ibm cdc cyber 
ibm diary entry alliant fx cray mp cdc cyber rank ordered ascending human effort performance improvement diary entry eq flo 
mdg diaries recorded particular benchmark program table unique respective machines table molecular dynamics benchmark mdg provides example practically transformations chosen optimization alliant fx cray mp ibm nec sx 
diaries mdg ipsc mark iii ncube machines included comparison 
similarity mdg diaries greatly attributed dominating subroutines listed table initial final profiles cray mp available 
original mdg program predominately sequential machines listed tables simple array indexing schemes easily produce vectorizable implementation 
example innermost loop doubly nested interaction forces loops subroutine interf determine forces atom molecule easily vectorized machines scalars loop expanded arrays improve data reuse efficient vector register management 
re execution time subroutine initial final alliant ibm nec alliant ibm nec fx sx fx sx interf subroutine description algorithm impose cyclic boundary conditions interf compute inter molecular forces potential energy table initial final profiles mdg alliant fx ibm nec sx 
operations associated determination relative distances particles commonly aid vectorization 
outermost loop interf re designed iterate distinct pairs molecules innermost loop determines contributions forces atom pair parallelization alliant fx cray mp ibm simply achieved scheduling sets independent molecule pairs number available processors 
attention optimal load balancing redundant array operations associated scheduling selected 
overhead excessive calls child subroutine removed moving subroutine inline transformation applied alliant fx 
figures illustrate performance improvement achieved vector parallel strategies discussed 
shown greatest impact machine primarily due optimization dominant subroutine interf 
parallelization subroutine considered difficult transformation implement alliant fx ibm 
effort required constructs cpu cray mp see 
machine entry transformation description see table dominant subroutines affected alliant parallelize outermost interaction fx forces loop concurrent calls subroutine constructed statements original subroutine 
scalar variables expanded multi dimensional arrays vectorization 
loop invariant array operations removed 
interf enforce concurrent vector operations compiler directives ignore potential data dependence 
interf parallelize outermost loop strategy entry 
cray excessive number calls mp subroutine removed moving body child subroutine parent subroutine interf 
loop interchanging done yield larger 
compiler directives enforce vectorization potential data dependence exists 
redundant array operations removed 
interf parallelize outermost loops interf table diary entries mdg alliant fx cray mp 
machine entry transformation description see table dominant subroutines affected ibm excessive number calls subroutine removed moving body child subroutine parent subroutine interf 
expand scalar variables multi dimensional arrays data re vector registers 
loops interchanged yield longer vector lengths 
doubly nested inter molecular forces loop removed inserted interf 
interf force calculations parallelized concurrent subroutine calls 
interf nec excessive number calls sx removed moving subroutine inline 
interf unrolled innermost loop expanded scalar variables vector operations loop 
loops fully unrolled array dimensions 
interf unrolled inner loop expanded scalar variables vector operations 
table diary entries mdg ibm nec sx 
diary entry mp cray nec sx ibm alliant fx cumulative performance improvement eq mdg 
laid groundwork hope new era benchmarking evaluating performance computers 
complexity machines requires new level detail measurement comprehension results 
quotation single number advanced architecture manufacturers users alike reasons 
great variation performance computation machine typically variation may orders magnitude depending type machine 
secondly ranking similar machines changes goes application best machine circuit simulation may best machine computational fluid dynamics 
performance depends greatly combination compiler characteristics human effort expended obtaining results 
objective forming perfect club assemble available suite applications codes represent set typical applications 
furthermore wanted portable state diary entry mp cray nec sx alliant fx ibm rank ordered ascending human effort performance improvement diary entry eq mdg 
art codes 
feel taken step direction 
application areas codes application included give better representation real users run 
measurements preliminary simply time execution rate data set code 
data set chosen allow machines participate reasonable way 
attempted avoid effects successful exception seismic migration program mg machines 
effects measured number architectural features 
optimization diaries inconsistencies frequency measurements execution profiles need closely monitored order realistic comparisons strategies adopted various machines 
programmers reluctant report transformations yield longer runtimes eq recorded 
exchange diaries encouraged collective optimization program achieved machines 
exchange facilitate design efficient portable application benchmark programs 
available hardware software tools strongly encouraged collection accurate execution rate measurements example 
ultimately believe online database publicly available contain programs diaries measured performance information number machines 
notice excluded source programs database proprietary software packages included database aid code selection 
magnitude effort underestimated 
reach modest objective reported required eighteen months elapsed time person months effort number coauthors 
straightforward reaching agreement number points required considerable effort 
sense feel initial step taken help expedite progress goal 
mintz ucla atmospheric circulation model dept meteorology university california 
baba bailey barton nas kernel benchmark program nasa technical memorandum moffett field ca ames research center national aeronautics space administration 
bartlett shavitt chem 
phys 
beam warming implicit finite difference algorithm hyperbolic systems conservative law form comp 
phys 
multi level spectral model 
formulation integrations monthly weather review 
brooks fox johnson otto stolorz seitz stack pure gauge su lattice gauge theory array computers phys 
rev lett caltech report 
new method updating su matrices computer simulations gauge theories phys 
lett 
hydrodynamic mesoscale modeling atmospheric transport deposition vicinity lake ph 
thesis atmospheric oceanic science department university michigan ann arbor 
parallel implementation method loosely coupled array processors ibm kingston technical report 
curry herring order disorder dimensional convection fluid 
mech 
dead denning adams research questions performance analysis supercomputers performance evaluation supercomputers martin editor northholland amsterdam 
dong dongarra performance various computers standard linear equations software fortran environment argonne national laboratory technical report mcs rm argonne il 
dongarra martin computer benchmarking paths pitfalls ieee spectrum july 
watts hurst version documentation ibm kingston technical report quantum chemistry program exchange bulletin 
rasmusen numerical method integration hydrodynamic equations spectral representation horizontal fields theoretical meteorology university copenhagen report 
flat hough functions dept geophysical sciences university chicago technical report 
gallivan jalby meier blas linear algebra parallel processor hierarchical memory siam sci 
stat 
comput 

gear gear numerical initial value problems ordinary differential equations prentice hall englewood cliffs new jersey 
gottschalk new multi target tracking model appear proceedings third conference hypercube concurrent computers applications acm new york caltech report 
gottschalk concurrent multiple target tracking appear proceedings third conference hypercube concurrent computers applications acm new york caltech report 
committee chairman agenda improved evaluation supercomputer performance pp energy engineering board commission engineering technical systems national research council constitution avenue washington dc 
jameson solution euler equations twodimensional transonic flow multigrid method applied math 
comp 
jamieson algorithm characteristics evaluate parallel architectures performance evaluation supercomputers martin editor north holland amsterdam 
kuck sameh supercomputing performance evaluation plan proceedings int 
conf 
supercomputing athens greece 
kuo formation intensification tropical cyclones latent heat release cumulus convection atmos 
sci 
lie molecular dynamics simulation liquid water ab initio flexible water water interaction potential phys 
rev 
lore lorenz deterministic non periodic flow atmos 
sci 
lube supercomputer performance theory practice results los alamos national laboratory technical report la ms los alamos new mexico 
moore benchmark comparison supercomputers fujitsu vp hitachi cray mp computer 
martin mueller supercomputer performance evaluation status directions journal supercomputing 
mari martin benchmarking standards high performance computing ieee computer 
matsuoka chem 
phys 
mcmahon livermore fortran kernels test numerical performance range performance evaluation supercomputers martin editor north holland amsterdam 
mueller performance comparisons parallel vector computers set fluid flow problems technical report ib 
nagel spice computer program simulate semiconductor circuits memorandum erl electronics research laboratory college engineering university california berkeley 
simon supercomputer performance evaluation benchmarking applications supercomputers proceedings second int 
conf 
supercomputing 
newton sangiovanni vincentelli circuit simulation ieee trans 
ed ed 
symmetry considerations anisotropic shells comp 
methods appl 
mech 
eng 
peters model size reduction techniques analysis symmetric anisotropic structures eng 
comp 
transform methods calculation vector coupled sums application spectral form vorticity equations atmos 
sci 
numerical simulation incompressible flows simple boundaries galerkin spectral representations stud 
appl 
math 
otto ding gupta patel sharpe lattice gauge theory benchmarks caltech report 
steger implicit finite difference simulations dimensional compressible flow aiaa 
steger improvements efficiency accuracy convergence implicit approximate factorization algorithms aiaa rd aerospace science meeting january reno nevada 
kessler practical implementation dimensional post stack depth migration appear geophysics march 
spectral modeling national center monthly weather review 
nmc spectral model noaa technical report nws may 
molecular dynamics simulation package nucleic acid hydration ibm kingston report 
hydration structure dynamics dna presence molecular dynamics simulations ibm kingston report 
uhr benchmarks dynamically improving experimental comparisons computer sciences technical report university wisconsin madison madison wi 
watts efficient parallel computation correlated wave functions 
implementation electron integral transformation parallel supercomputer ibm kingston technical report 
appendix descriptor machine alliant cray ibm cdc fx mp cyber location csrd cray research ibm princeton urbana il hts mn gaithersburg md princeton nj clock cycle nanoseconds memory size megabytes number processors total processor shared shared shared connection memory memory memory number add multiply pipes processor operating vm xa sp system cms fortran fx fortran cft vs fortran compiler table machines perfect club members descriptor machine nec sx ncube ipsc mark iii location cal tech houston tx pasadena ca clock cycle nanoseconds memory size megabytes node node node number processors total processor hypercube hypercube connection number add multiply pipes processor operating axis unix system vertex nx os fortran fortran cfg rm silicon valley compiler sx rev table machines perfect club members 
