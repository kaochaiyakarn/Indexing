aspectix aspect oriented orb architecture hauck becker geier meier september tr computer science department operating systems iv friedrich alexander university erlangen germany technical report shorter earlier version accepted progress middleware conference uk sep 
aspectix aspectix aspect oriented corba compliant orb architecture franz hauck ulrich becker martin geier erich meier uwe martin hauck geier meier informatik uni erlangen de www informatik uni erlangen de projects aspectix iv university erlangen 
erlangen germany corba architecture defines semantics interaction distributed objects 
semantics fixed hardly extensible 
corba services extend basic functionality orb fixed semantics 
aspectix open flexible architecture corba aspectix implementation host corba compliant applications 
aspectix adopts fragmented object model means client owns local part distributed object local parts called fragments interact 
local fragment intelligent carry part distributed object functionality dumb act stub corba compliant aspectix profile 
client configure functional nonfunctional properties object semantics called aspects generic configuration interface 
local fragment implementation may transparently replaced fulfill requirements new configuration 
show configuration interface helps solves problems wide area systems replication consistency mobile agents mobility process control systems realtime constraints fault tolerance 
corba architecture defines semantics interaction distributed objects omg 
semantics fixed hardly extensible 
corba allows synchronous object invocation exactly semantics error free case semantics case errors allows asynchronous invocation best effort semantics 
corba functionality extended corba services semantics 
example hard impossible integrate transparent replication service corba 
aspectix open orb architecture flexible corba 
aspectix architecture uses corba compliant extended interfaces orb applications 
aspectix implementation corba compliant able host corba applications 
hand aspectix objects fully interoperable corba objects 
aspectix adopts fragmented object model means client owns local part distributed object 
communication local part called fragment 
local part may communicate fragments distributed object communication transparent client internal distributed object 
local fragment intelligent carry part distributed object functionality replicate cache data dumb act stub 
aspectix client configure nonfunctional functional properties semantics distributed object 
relates aspect oriented programming klm properties called aspects 
configuration aspectix provides generic interfaces allow programmers dynamically introduce aspects allow clients individually dynamically decide current configuration object basis 
configuration interface completely independent normal functional interface distributed object 
configuring aspects helps solve variety problems wide area systems replication consistency mobile agents mobility process control systems real time constraints fault tolerance grasp problems aspects defined profiles define requirements application classes orb form aspect definitions 
organized follows section introduce aspectix architecture including object model interface configuring aspects 
section show called profiles application classes benefit flexibility aspectix architecture 
current status project section 
section give 
aspectix architecture object model aspects aspectix architecture adopts fragmented object model similar fragmented objects inria sos globe vrije universiteit amsterdam 
distributed object consists called fragments interact see fig 

client object fragments local address space exist additional fragments direct clients 
corba environment stub corba architecture considered client side fragment distributed object aspectix architecture 
corba server object fragment may local client 
corba fragments client side intelligent aspectix 
fragment may hide local replication distributed object state may realize real time constraints communication channel server fragment may cache object data may locally implement object functionality just name examples intelligent fragments 
principle programmer distributed object full control internal communication semantics fragments internal semantics fragments 
semantics implemented support orb support real time communication 
desirable give client object control functional nonfunctional properties distributed object programmer object may add con figuration interfaces properties object 
programmer may example want allow clients decide want local fragment implements just stub fragment replicates object state 
decision may heavily depend needs client 
example allow client configure maximum time object invocation case real time aspect 
controlling functional nonfunctional properties orthogonal way goal met aspect oriented programming klm 
name properties aspects 
aspectix helps programmers add configuration interfaces controlling aspects providing generic object interface aspect control 
general distributed object support aspects time 
aspect globally unique name defined semantics 
allows portable applications aspectix architecture long aspectix implementations support aspects 
newer object implementations support older aspect definition sake compatibility 
case aspect configuration matter client local fragment respect certain distributed object 
different clients may different configurations 
aspects activated deactivated lifetime fragment 
aspects parameters may changed dynamically maximum time object invocation 
changing aspects configuration may motivate fragment replace implementation suitable fulfill requirements 
programmer distributed object decide provide fragment implementations specific semantics fragment implementation able handle supported aspect configurations 
implementation fragments local fragment distributed object provides normal object interface described corba idl 
interface widened narrowed corba 
fragment created return parameter method invocation invoking corba compliant orb method string object orb creates local objects corresponding language mapping fragment interface fragment implementation 

corba method creates local stub object object 
node node node node fragment operation fig 
distributed object fragmented nodes distributed object fragment interface generic object automatically generated development process 
depends idl description distributed object interface 
delegates method calls fragment implementation maintains exactly 
fragment interface hide replacement fragment implementation run time 
fragment implementation may connected multiple fragment interfaces turn may implement different idl types super types inheritance hierarchy object 
fragment implementation may load new fragment implementation orb mechanisms dynamic code loading 
loading trigger fragment interfaces new fragment implementation delegate 
aspect configuration fragment interface provides methods described object idl description methods defined corba objects 
aspectix extends set methods methods modifying exploring aspects supported distributed object configuration 
aspect definition unique name consists specification semantics definition specific configuration object 
object implement subtype interface aspect see listing aspectix extensions 
configuration object implements methods activate aspect enabling local caching data may define additional methods control aspect specific parameters maximum time method invocation 
get current aspects client get collection aspect configuration objects supported distributed object 
having collection configuration objects hand client retrieve configuration object aspect individually change put back collection 
set aspects new set aspect configurations set 
possible fragment implementation fulfill new aspect configuration fragment implementation may replace 
uses internal interface fragment interface exchange binding fragment implementation 
exchange fragment implementation usually completely transparent clients clients deal fragment interfaces 
aspectix orbs handle new aspect definitions defined start time 
imagine aspects need additional orb mechanisms trigger orb 
anticipate similar procedure name java classes 
fragment implementation fragment interface operation fig 
components fragment client dynamically load new modules mechanisms 
orb need support aspects time small embedded systems 
application profiles moment consider called application profiles 
profile contains requirements certain application class form aspect definitions 
note aspect may required multiple profiles 
profiles corba compliant profile profile mobile agents profile wide area distributed applications profile process control systems 
corba compliant profile 
distributed object supports corba aspect local fragment converted dumb corba compliant stub 
corba applications get module aspectix typedef string typedef sequence interface aspect object configuration aspect get aspect name void activate void deactivate boolean active interface aspects aspects fragment container aspect get aspect aspect name void set aspect aspect aspect void remove aspect aspect name exception inv aspect conf corba object extensions interface object corba object aspects get aspects aspects get current aspect names aspects get current aspects get current configuration void change aspects aspects ac raises inv aspect conf change mentioned aspects void set aspects aspects ac raises inv aspect conf set mentioned discard prev 
aspects void check change aspects aspects ac raises inv aspect conf void check set aspects aspects ac raises inv aspect conf listing corba extensions aspectix aspect automatically activated see aspectix extensions distributed object access object 
fragments object acts corba server object stub address invocations 
fig 
shows corba stub fragment corba server fragment 
profile mobile agents 
mobile agents need mobile objects 
mobility easily expressed fragmented object model creating new fragment location deleting old old location 
identity distributed object agent remains 
fig 
demonstrates procedure steps 
internal communication interface transfer fragments state modeled idl approach easily handle problem heterogeneity 
profile wide area distributed applications 
wide area application scale replication 
corba difficult hide replication client 
aspectix architecture intelligent stub fragments choose replica certain fragment delegating invocations 
update operations propagated fragments hosting node node fig 
corba style fragmented object 
fragmented object stub implementation server implementation communication node node fig 
mobile object move 
node node object resides node 
new fragment created 
node state fragment 
transferred fragment node node fragment replaced 
stub deleted replicated state 
done ordered multicast communication stub replicas certain update protocols run replicas 
fig 
shows distributed object fragments implementing replicas fragment client stub 
profile process control systems 
process control systems benefit replication wide area systems example aspect profiles 
requirement definition real time constraints 
done real time aspect allows definition maximum execution time invocation 
time expired invocation aborted exception 
case client needs guarantees execution time fragment may reserve resources orb 
aspect process control systems redundant communication hardware achieve fault tolerance 
intelligent stub fragments switch communication channel old get connection server fragment see fig 

status aspectix project currently defining extensions aspectix corba 
moment java language mapping considered defined aspectix 
soon definitions settled start building prototype public domain corba implementations node node fig 
fragmented object replicated state client 
node update delegation fragment implementations replicated state stub implementation node node fig 
fragments communicating redundant communication channels 

plan continue language mapping implementations various aspects including tests applicability 
describes basic ideas aspectix new orb architecture extends corba 
functional nonfunctional aspects real time constraints data consistency kinds invocation semantics integrated distributed object generic way 
aspects dynamically configured object implementation adapt dynamically client needs 
imagine possible define new aspect semantics dynamically download new modules orb implementation new mechanisms needed implement new aspect 
generic interface aspect configuration aspectix open architecture easily adapted requirements different classes applications 
implementation design java orb 
procs 
ifip wg int 
working conf 
distr 
appl 
interop 
sys sep oct cottbus germany chapman hall 
klm kiczales lamping mendhekar maeda lopes 
loingtier irwin aspect oriented programming 
techn 
report spl xerox palo alto research center feb 
object oriented concepts version manual 
mass 

le shapiro fragmented objects distributed abstractions 
singhal eds readings distributed computing systems ieee computer society press pp 

omg object management group common object request broker architecture version 
february 
van steen tanenbaum 
architectural design globe wide area distributed system 
technical report ir vrije universiteit amsterdam march 

named 
