transaction model vs virtual synchrony model bridging gap rachid guerraoui andre schiper broadcast technical report 
esprit basic research project june broadcast basic research advanced distributed computing algorithms systems esprit basic research project broadcast develop principles understanding designing implementing large scale distributed computing systems broad areas ffl fundamental concepts 
evaluate design computational paradigms ordering causality consensus structuring models groups fragmented objects algorithms especially consistency 
ffl systems architecture 
develop architecture areas naming identification binding locating objects resource management garbage collection communication group management 
solutions scale take account fragmentation technological developments devices bit address spaces 
ffl systems engineering 
efficiently supporting architecture exploiting concepts algorithms developed earlier kernel storage support numerous fine grain complex objects programming support tools building distributed applications 
broadcast partners ecole polytechnique ed erale de lausanne epfl lausanne switzerland universit joseph fourier institut informatique ematiques appliqu ees imag grenoble france instituto de sistemas inesc lisboa portugal institut national de recherche en informatique automatique inria rocquencourt france institut de recherche en informatique syt emes irisa rennes france universit di bologna italy university newcastle tyne united kingdom universiteit van twente netherlands 
information copies broadcast technical reports put broadcast mailing list please contact broadcast secretariat department computing science university newcastle tyne road newcastle tyne ne ru uk 
tel 
fax 
mail nick cook newcastle 
ac uk 
broadcast technical reports series ssp chains robust distributed supporting acyclic garbage collection marc shapiro peter david november consistent global states distributed systems fundamental concepts mechanisms babao glu keith marzullo january understanding non blocking atomic commitment babao glu sam toueg january broadcast technical reports ordered broadcast secretariat 
available electronically anonymous ftp server broadcast esprit ec org directory projects broadcast reports infrastructure afs filesystem directory afs research ec org projects broadcast reports 
transaction model vs virtual synchrony model bridging gap rachid guerraoui andre schiper epartement informatique ecole polytechnique ed erale de lausanne lausanne switzerland important models building fault tolerant applications independently proposed literature transaction model developed context database applications virtual synchrony model proposed initially isis system handle replication 
better understanding relations models address question basic mechanisms needed implement models exactly 
answers question defining dynamic terminating multicast problem showing seen generic problem closely related implementation transaction model virtual synchrony model 
possible build system offering integrated way transaction model virtual synchrony model 
system offer powerful primitives currently cumbersome impossible express existing systems 
main goals model fault tolerant distributed systems provide adequate consistency allowing achieve high degree availability concurrency 
important consistency models proposed independently literature transaction model developed context database applications virtual synchrony model developed initially context isis system handle replication 
transaction model considers processes communicate invoking operations shared data 
transaction typically groups invocations data ensures concurrency atomicity failure atomicity 
concurrency atomicity called isolation serializability means intermediate effects transaction shared data invisible transactions transactions appear executed sequential order 
failure atomicity called property means transaction completes successfully aborts effect shared data 
obvious correctness criteria totally independent particular implementation 
implementation transactions relies established basic mechanisms locks time stamps twophase phase 
specifically interested mechanisms required implement transaction model consistency criteria defined transaction model 
virtual synchrony model considers processes communicate message passing defines model messages totally ordered respect causal ordering 
messages considered virtual appears proc 
international workshop theory practice distributed systems springer verlag lncs 
synchrony model multicast generated application messages generated system order signal crash processes signal processes joining system 
similarly transaction model implementation virtual synchrony model relies basic mechanisms interested basic mechanisms consistency criteria defined virtual synchrony model 
summarize purpose compare consistency criterion defined transaction model consistency criterion defined virtual synchrony model 
purpose compare basic mechanisms needed models 
generality possible ways relate classes mechanisms 
virtual synchrony model relies basic mechanisms meaning mechanisms needed implement transaction model built top mechanisms underlying virtual synchrony model 
transaction model relies basic mechanisms meaning mechanisms needed implement virtual synchrony model built top mechanisms underlying transaction model 
previous statements true meaning exists basic mechanism allowing implement mechanisms required transaction model mechanisms required virtual synchrony model 
statement true transactions built top virtual synchrony model 
obviously case 
statement true transactions easily efficiently implemented system isis 
case second statement true system isis easily efficiently implemented top transactions 
obviously case system isis aspects flexible system implementing transactions 
suggest third statement correct precisely intend show 
show link transaction model virtual synchrony model defines dynamic problem noted dt multicast shows dt multicast seen generic problem 
solving specific instances dt multicast problem allows implement various mechanisms required transaction model virtual synchrony model 
rest structured follows 
section defines dt multicast problem 
section shows link dt multicast transactions 
section shows link dt multicast virtual synchrony 
section concludes final remarks 
dynamic terminating multicast problem system model distributed system composed finite set fp png processes completely connected set channels 
communication message passing asynchronous bound transmission delays uniform reliable multicast implement atomic commitment transaction 
solution efficient requires create commitment time group including data managers accessed transaction 
reliable processes fail crashing don consider byzantine failures 
failure module fs attached process order overcome fischer lynch patterson impossibility result 
process may send message process receive message sent process perform local computation crash modeled local event crash process history sequence events delta delta delta delta histories correct processes infinite 
infinite process history terminated event crash problem definition introduce dt multicast problem establish link virtual synchrony model transaction model 
atomic commitment virtual synchrony related consensus surprising dt multicast problem related consensus 
believe dt multicast missing link consensus problem various problems related implementation transaction model implementation virtual synchrony model 
respect dt multicast problem theoretical interest practical impact architecture systems 
come back issue 
consider message sent process processes set dst 
assume process dst receives generates reply noted reply 
dt multicast problem consists reaching agreement dst set replies generated reception agreement set replies note reply set replies decided formally define dt multicast problem conditions dt 
uniform agreement 
processes dst correct decide set replies decide set 
decides reply decides reply reply reply 
agreement condition ambiguity notation reply reply 
dt 
termination 
dst received correct eventually decide reply 
dt 
non triviality 
non triviality condition sets requirement minimal size set reply 
condition example exclude trivial solution reply 
requiring reply sufficient 
specify general non triviality condition condition specifically related instance dt multicast problem come back condition sections 
agreement condition dt safety condition 
termination condition dt liveness condition 
understand problem called dynamic terminating multicast notice agreement reply reliable channel ensures message sent eventually received correct crash 
exclude link failures require link failure eventually repaired 
reliable channel implemented retransmitting lost corrupt messages 
failure set modules module attached process system 
failure detector module maintains list processes currently suspects crashed 
chandra toueg characterize failure properties completeness accuracy 
informally completeness requires failure eventually suspects crashed process accuracy restricts mistakes failure 
reached transport protocol retransmitting processes dst received multicast point terminated transport protocol 
dt multicast vs consensus consensus problem process starts initial value processes decide common value formally consensus problem defined conditions 
agreement 
processes decide value take decision 
termination 
correct process eventually takes decision 

validity 
process decides initial value agreement condition safety condition sense similar agreement condition dt dt multicast problem 
termination condition liveness condition similar termination condition dt dt multicast problem 
validity condition non triviality condition 
processes example trivially decide value 
similar dt 
specific dt non triviality condition defined instance dt multicast missing link consensus problem mechanisms required implement transaction model virtual synchrony model 
shown dt multicast problem non triviality condition reducible consensus problem solvable consensus problem solvable 
purpose establish result 
stress genericity dt multicast problem order convince reader dt multicast considered basic building block fault tolerant system architecture 
generic dimension dt multicast problem instance generic dt multicast problem obtained attaching semantic parameters dt multicast problem 
specifically instance dt multicast problem defined parameters message semantics message destination set dst set processes multicast 
reply message reply message generated process resulting reception message non triviality condition specific non triviality condition 
interpretation rule interpretation set replies reply processes dst agree 
examples instantiations dt multicast problem sections 
asynchronous system agreement condition indistinguishable condition called uniform agreement processes correct decide decide value 
dt multicast problem transactions transaction model numerous mechanisms help implementing transactions 
establish result formally think mechanisms related serializability atomicity properties transactions implemented instances dt multicast problem 
consider single example classical atomic commitment problem 
consider model 
transaction originates process called transaction manager noted tm accesses data interacting various processes called data managers noted dm located different sites 
tm initially performs transaction operation various write read operations translating writes reads messages sent dms transaction operation 
transaction operation outcomes commit abort 
write operations performed dms permanent outcome commit 
ensure agreement dms outcome transaction called failure atomicity property tm solve commitment problem part transaction operation 
show atomic commitment problem seen instance dt multicast problem 
atomic commitment instance generic dt multicast problem consider transaction accessed set data managers noted dm 
atomic commitment requires voting phase allows know status dm accessed transaction 
vote data manager ffl means data manager reason ready commit transaction 
case data manager detected concurrency control conflicts data manager able store updated data permanent storage order recover possible subsequent crash ffl means data manager ready commit transaction means detected concurrency control conflicts able store updated data permanent storage way data survives possible subsequent crash 
vote atomic commitment problem defined conditions ac 
dms decide reach decision ac 
dm decides commit dms voted ac 
dms vote failure occurs dms decide commit ac 
dm decides 
ac 
correct dm executes atomic commitment protocol eventually decides 
conditions ac ac ac safety conditions 
condition ac non triviality condition seen liveness condition application point view progress application point view ensured commit outcome transaction 
sense ac seen liveness condition 
condition ac liveness condition 
transaction atomic commitment problem defined conditions ac ac seen instance dt multicast problem 
start stating obvious part message message vote request message 
destination set vote request message multicast set data managers accessed transaction noted dm 
words dst def dm 
reply message reply data manager dm reception message dm dm semantics 
interpretation rule outcome transaction set replies reply 
outcome commit reply contains reply data manager dm replies reply 
case outcome transaction abort 
obvious part instantiation dt multicast problem non triviality condition dt 
non triviality condition ensure ac condition 
interpretation rule commit outcome possible reply contains reply dm 
ac condition leads non triviality condition dt multicast problem dt ac 
non triviality atomic commitment 
reply data manager dm reply dm crashed 
easy show instance dt multicast problem including non triviality condition satisfies conditions ac ac ffl ac satisfied decision reply set replies data managers agree reply uniform agreement condition dt ffl ac satisfied interpretation rule ffl ac satisfied non triviality condition dt ac interpretation rule ffl ac satisfied decision set reply ffl ac satisfied termination condition dt 
worthwhile noting way guarantee non triviality condition dt ac perfect failure defined properties ffl eventually process crashes permanently suspected correct process ffl correct processes suspected 
shown half processes crash consensus solved weak failure obviously weaker 
atomic commitment defined conditions ac ac dt multicast problem dt ac non triviality condition formally harder consensus 
dt multicast problem virtual synchrony virtual synchrony virtual synchrony vs introduced isis system views defined group processes 
group view view set correct processes perceived membership service 
vs model defined properties group processes agree sequence views view view views totally ordered multicasts totally ordered respect view changes process member group delivers multicast view view member delivers view 
primitive defined isis system orders totally messages multicast view 
order keep presentation simple consider sequel simplified context consider single group assume multicast usual vs model issued members start showing primitive implemented instance dt multicast problem 
show link vs model dt multicast problem 
instance dt multicast problem total order seen problem attaching message sequence number sn delivering messages order defined sequence number 
imagine lamport logical clocks sequence number lead lamport total order algorithm 
unfortunately adequate environment processes crash 
consider group process multicasting message lamport algorithm process wait time stamped acknowledgment process able deliver leads blocking case single process failure crashed process send time stamped acknowledgment message required lamport algorithm 
avoid blocking lamport protocol combined membership protocol changes composition example solution described 
views delivered membership protocol totally ordered 
words initial total order protocol relies second total order protocol leading circularity problem 
total order protocol described suffer circularity problem 
basically protocol isis system described 
idea attach unique sequence number message deliver messages sequence number 
sequence number defined priori lamport total order protocol defined posteriori processes agree sequence number attached message multicast consider group current view view 
process manages lamport logical clock agreement sequence number messages ensured instantiation dt multicast problem 
consider message multicast process current view view message dt order ensure uniqueness logical clocks process id appended suffix clock value 
destination set message multicast view dst def view 
reply message receives multicast sends updated logical clock value reply reply non triviality condition triviality condition require set reply contain majority replies dst 
interpretation rule sequence number sn attached message maximum logical clock values obtained set replies reply 
uniform agreement set reply condition dt protocol obviously attaches unique sequence number sn message different messages sn sn 
ensured process id suffix attached sequence number incrementation rule lamport clock messages sequence number sequence number process id suffix say suffix process case clock value returned reply different messages received total order ensured delivering messages sequence number 
requires course message sequence number sn delivered message sequence number sn sn sn 
discuss point 
vs instance dt multicast problem handling failures shown previous section total order implemented instance dt multicast problem 
implementation order application messages system messages view change messages 
dt multicast implement virtual synchrony 
consider current view view group process view issues totally ordered multicast view 
call application message order distinguish system messages triggering view changes 
virtual synchrony properties views totally ordered ordering application multicasts respect view changes ensured total ordering message follows 
consider algorithm previous section allows totally order multicasts 
consider specific application message delivered sequence number 
reply set processes reply reply reply def fp reply reply set reply allows change view group rules ffl delivered reply equal view new view view defined delivered 
new view delivered immediately delivery delivery application message 
new view process multicasting dst consider piggybacks reply reply message 
view reply precisely view reply 
satisfies virtual synchrony properties reasons 
solution dt multicast problem processes view reached agreement set replies reply 
reached agreement reply 
words view changed view view ensuring virtual synchrony properties ffl process view delivers delivery new view view ffl processes view agree view view 
vs instance dt multicast problem handling joins protocol previous section allows handle process failures result removing processes current view 
adding processes view difficult 
recall order keep presentation simple assume multicast 
consider current view view process wanting join order join process send join message process say member current view view 
process creates message 
join view 
message delivered process view view defines view view view fp reply 
state transfer sends current state new view view note process view needs send state new view 
discussion defined dt multicast problem consists multicasting message set destination processes dst reaching agreement dst set replies generated reception dt multicast problem seen generic problem parameterized message set destination processes dst reply message generated process dst receiving non triviality condition setting requirements size reply set interpretation set reply 
specifically shown atomic commitment problem seen instance dt multicast problem 
shown primitive multicast total order delivery implemented instance dt multicast problem 
solution require membership service avoiding traditional circularity problem primitives built top membership service totally orders view changes 
reply set obtained result dt multicast problem allows implementing virtual synchrony 
genericity dt multicast problem practical consequence possible build system basic layer specific non triviality condition solves dt multicast problem 
top dt multicast layer possible implement transactions virtual synchrony offering models integrated way 
system dt multicast hide replication groups similarly isis completely decouple groups consistency issues strongly coupled system isis 
flexibility necessary create group time consistency related operation performed atomic commitment distributed transaction requires uniform reliable multicast set destination processes creating group just issue single multicast expensive operation 
system dt multicast offer powerful primitives atomic operations multiple groups currently cumbersome impossible express virtual synchrony model 
system dt multicast offer modular approach transactions defining adequate basic primitives handle replication static vs dynamic voting 
ken birman mattern michel raynal suggestions helped improving 
babaoglu toueg 
non blocking atomic commitment 
mullender editor distributed systems 
acm press 
bernstein hadzilacos goodman 
concurrency control recovery distributed database systems 
addison 
birman 
virtual synchrony model 
birman van renesse editors reliable distributed computing isis toolkit 
ieee computer society press 
birman 
process group approach reliable distributed computing 
comm 
acm december 
birman joseph 
reliable communication presence failures 
acm trans 
comput 
syst february 
chandra toueg 
unreliable failure detectors reliable distributed systems 
technical report department computer science cornell university august 
preliminary version appeared proceedings tenth acm symposium principles distributed computing pages 
acm press august 
fischer lynch paterson 
impossibility distributed consensus faulty process 
acm april 
lamport 
time clocks ordering events distributed system 
comm 
acm july 
shrivastava macedo 
newtop fault tolerant group communication protocol 
technical report univ newcastle 
ricciardi birman 
process groups implement failure detection asynchronous environments 
proc 
th acm symposium principles distributed computing pages august 
schiper 
uniform reliable multicast virtually synchronous environment 
ieee th intl 
conf 
distributed computing systems pages may 
spector schwarz 
transactions construct reliable distributed computing 
acm operating systems review april 
transaction model vs virtual synchrony model bridging gap rachid guerraoui andre schiper broadcast technical report 
important models building fault tolerant applications independently proposed literature transaction model developed context database applications virtual synchrony model proposed initially isis system handle replication 
better understanding relations models address question basic mechanisms needed implement models exactly 
answers question defining dynamic terminating multicast problem showing seen generic problem closely related implementation transaction model virtual synchrony model 
possible build system offering integrated way transaction model virtual synchrony model 
system offer powerful primitives currently cumbersome impossible express existing systems 
issn esprit basic research project broadcast technical report series 
