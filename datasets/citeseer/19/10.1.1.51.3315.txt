sorting morphisms lex philips research laboratories eindhoven email lex research philips com 
sorting algorithms classified different ways 
way expressing algorithms functional programs classify means recursion patterns 
patterns turn classified natural recursion patterns destruct construct data type called cata anamorphisms respectively 
show selection recursion pattern seen major design decision cases leaving room decisions design sorting algorithm 
shown alternative data structures may lead new sorting algorithms 
presentation serves gentle light weight various morphisms 
known sorting algorithms insertion sort straight selection sort bubble sort quick sort heap sort merge sort see knu wir non standard way 
express sorting algorithms functional programs obey certain pattern recursion 
show sorting algorithms recursion patterns forms major design decision leaving space additional decisions taken 
recursion patterns explicit form higher order functions known map function lists 
order reason recursion patterns need formalize notion 
formalization available category theoretical modeling recursive data types fok mei 
bdm theory application algorithms including selection sort quicksort 
algorithms understood absorbing underlying category theory 
need theory 
results need understood having basic knowledge functional programming repeat main results 
results show recursive data type number morphisms related capturing pattern recursion involve recursive structure data type 
morphisms called catamorphism anamorphism hylomorphism paramorphism linear lists binary trees 
value approach obtaining nice implementation algorithm unraveling structure 
presentation gives opportunity introduce various morphisms simple way patterns recursion useful functional programming usual approach category theory tends needlessly average programmer 
assume sorting operations transform list list permutation elements ascending total ordering relation 
assume existence equivalence relation elements elements express sorting algorithms functional language gofer jon dialect haskell hwa 
assume reader familiar necessarily expert functional programming 
organized follows 
section morphisms list data type show insertion sort selection sort bubble sort expressed terms morphisms 
section leaf tree data type show merge sort expressed morphism data type 
section binary tree data type morphisms express quick sort heap sort 
section paramorphisms lists express recursion pattern auxiliary functions different sorting algorithms 
show section rose trees form generalization lists binary trees leaf trees 
fact enables derivation pairing heap sort reveals novel generalization quick sort 
opens door taxonomy algorithms hierarchy data structures recursion patterns data structures 
section presents 
morphisms lists list data type described pseudo data type definition haskell 
data section recursion patterns data type show insertion sort selection sort bubble sort expressed means recursion patterns 
list catamorphism catamorphism type function type destruct object type structure calls recursively components type combines recursive result remaining components simple example function computes product list integers prod prod prod list catamorphism characterized components corresponding forms list type 
part maps empty list just constant prod 
non empty list head tail tail recursively mapped rec combined head means expression rec second part catamorphism 
prod 
structure diagram nodes form types intermediate results edges mappings 
sw destruct recurse sw construct recursive functions lists structure written means higher order function captures recursive patterns 
recursion pattern generally called catamorphism ff ff means downwards call higher order function list cata 
described returns empty list applies head recursive call tail 
experienced reader recognize function known foldr 
type 

cata cata cata cata definition rewrite prod follows prod observed catamorphism replaces empty list non empty list constructor catamorphism general replacing constructors data type functions 
consequence recursive elements replaced application catamorphism replaced cata exercise write list reversal function list catamorphism 
list anamorphism apart recursion pattern traverses list specify converse constructs list 
simple example function constructs list 
count count count anamorphism type function type way number components 
components type applies recursion convert theme 
combines recursive results components means constructor functions structure pattern list type obtained inverting catamorphism diagram 
sw destruct recurse sw construct need destructor function tells map empty list destruct means function head resulting list recursively mapped list forms tail final result 
define type represents disjoint sum values 
data left right pattern recursion captured higher order function 
recursion pattern generally called anamorphism ffff means upwards call higher order function list ana 
type 


ana ana case left 
right 
ana function count rewritten count left right exercise write prime number generator list anamorphism 
list hylomorphism general way construct list destruct compose operations new captures recursion list 
philosophical reason recursion patterns called hylomorphism aej means matter 
list hylomorphism defined example define factorial function fac prod count explicitly fac straightforward composition forms intermediate list appears unnecessary diagrams exhibits 
sw destruct recurse sw construct sw destruct recurse sw construct sw destruct recurse sw construct construction list middle immediately map pair pair recursively applying hylomorphism implementation obtained list ana replacing empty list list constructor type 

hylo hylo case left 
right 
hylo applying factorial function written fac substitution list hylo destruct count leads usual definition fac fac fac fac exercise write function list hylomorphism 
insertion sort list cata recursion pattern sort list 
order analyze structure sorting algorithm draw little diagram 
oe destruct oe recurse sort oe insert insert sort catamorphism destruct list head tail virtue recursive structure 
applied recursively tail case means sorting 
left head sorted tail 
way left construct full sorted list insert appropriate place sorted tail 
see apart recursion pattern left design decision resulting algorithm insertion sort 
insert insert insert insert observe insert recursive function lists 
correspond recursive structures introduced far postpone treatment section 
selection sorts applying anamorphism recursion pattern sorting faced structure 
oe extract minimum oe recurse sort oe construct sort unsorted list mapped element remainder 
remainder sorted recursion serves tail final result 
structure deduce minimum equal permutation minimum removed 
permutation gives additional design freedom 
ways exploit freedom lead straight selection sort bubble sort respectively 
way selection define general selection sort extract select select left select right extract straight selection sort compute minimum remove maintaining order remaining elements obtain straight selection sort 
recursive structure 
oe select minimum remove oe recurse sort remove oe construct sort remove implementation anamorphism follows 
extract extract remove minimum remove remove remove observe remove recursive function lists 
correspond recursive structures introduced far postpone treatment section give implementation minimum catamorphism 
bubble sort selection sort little expensive select traverses list twice obtaining minimum removing 
operations minimum bubble head list exchanging elements split minimum remainder 
oe bubble oe recurse sort oe construct sort bubblesort bubble bubble bubble 
bubble observe bubble recursive function lists 
appears catamorphism alternative definition shows bubblesort bubble bubble bub bub leaf trees sorting algorithms described list recursion patterns perform linear recursion result behave quadratically 
log sorting algorithms quick sort merge sort recursive calls recursion step 
order express recursion pattern need binary data structure basis different morphisms 
section concentrate leaf trees elements leaves 
section treats binary trees elements branches 
form binary trees called leaf trees 
trees hold elements leaves 
leaf tree data type data leaf split leaf tree catamorphism structure leaf tree catamorphism completely analogous list catamorphism 
destruct tree recurse sub trees combine recursive results 
example sum elements leaf tree leaf split leaf tree catamorphism needs function element constant construct non recursive result 
corresponds diagram stands bintree recursion pattern diagram sw destruct recurse sw construct capturing recursion pattern higher order function cata gives definition just replace tree constructors leaf split functions fl fs respectively 
type 




fl fs cata cata leaf fl cata split fs cata cata function cata define tree sum id leaf tree anamorphism structure leaf tree anamorphism analogous list anamorphism 
decide means destructor tree constructors tip branch 
results element remaining objects recursively mapped trees 
combine element subtrees 
example construction fibonacci tree leaf branch anamorphism procedure corresponds diagram 
sw destruct recurse sw construct capturing recursion pattern higher order function ana gives definition 
type 


ana ana case left 
leaf right 
split ana ana rewriting fib tree higher order function gives left right leaf tree hylomorphism expected leaf tree hylomorphism obtained composing ana catamorphism 
example fibonacci function fib tree sum fib tree explicitly fib id tree middle need constructed diagram illustrates 
apply recursion map constructing trees 
sw destruct recurse sw construct implementation comment type 

fl fs hylo hylo case left 
fl right 
fs hylo hylo definition hylo define fibonacci function fib id course simplified substituting hylo destruct fib fib fib fib exercise write factorial function leaf tree hylomorphism 
exercise write function hylomorphism 
complexity 
write hylomorphism log complexity 
merge sort leaf tree hylomorphism sort lists leaf trees 
recursion pattern depicted follows 
list oe split left right oe recurse sort left sort right oe merge merge sort left sort right recursive case list split sub list sorted combined 
main choice left sub lists dependent independent elements sub lists 
assume independence combination recursive results merge unrelated sorted lists obtain merge sort 
choice sub lists dependent buy 
assume apply ordering equality relation elements separating elements small large ones possibly median list yield quicksort 
pursue way sorting 
implementation merge sort hylomorphism lists leaf trees lists 
non recursive case deals lists element 
empty list treated separately hylomorphism 
mergesort mergesort select single merge single merge xs ys merge xs ys merge xs ys merge merge select left select right split function split splits list sub list containing odd elements 
form list catamorphism 
split binary trees form binary trees trees hold values branches leaves 
binary tree data type defined follows 
data bintree tip branch bintree bintree tree catamorphism structure tree catamorphism straight forward 
destruct tree recurse sub trees combine element recursive results 
corresponds diagram stands bintree sw destruct recurse sw construct capturing recursion pattern higher order function bintree cata gives definition 
type 



bintree 
cata cata tip cata branch cata cata observe catamorphism replaces constructors tip branch recursive elements recursive calls cata cata 
tree anamorphism binary tree catamorphism obtained reversing previous 
sw destruct recurse sw construct capturing recursion pattern higher order function bintree ana gives definition 
type 


bintree ana ana case left 
tip right 
branch ana ana tree hylomorphism binary tree hylomorphism straightforward 
diagram sw destruct recurse sw construct implementation binary tree hylomorphism obtained anamorphism replacing tip branch constructor type 

hylo hylo case left 
right 
hylo hylo exercise write factorial function binary tree hylomorphism 
exercise write function binary tree hylomorphism 
complexity 
exercise write towers hanoi binary tree hylomorphism 
quicksort apply binary tree hylomorphism recursion pattern sorting sorting list binary trees really constructed course 
diagram exhibits recursion pattern 
oe split oe recurse sort sort oe join join sort sort list split element lists 
lists sorted recursion 
sorted sub lists joined 
left design decisions 
ffl choice sensible choices head list structure list minimum median list exploiting ordering relation 
take minimum obtain variant heap sort 
derivation heap sort section 
quicksort choose take head list 
median left reader 
ffl choice sub lists 
essential choice dependent element 
particular reason separate head algorithm obeys different recursion pattern treat section 
remaining option making sub lists depend leaves choices open 
natural consists elements smaller respectively exploiting ordering relation 
done head median list gives better balanced algorithm superior worst case behavior 
take head simplicity reasons 
decisions take head list split tail small large elements way combine sorted sub lists concatenate proper order 
oe split small large oe recurse sort small sort large oe join sort small sort large final result implementation quicksort hylomorphism lists trees lists 
quicksort split join split left split right partition join function partition splits list lists predicate appears list catamorphism 
exercise write function partition list catamorphism 
heap sort section analyze recursion pattern heap sort 
algorithm operates constructing binary tree called heap property means tree branch minimum element tree 
sub trees heap property related 
constructing heap heap mapped sorted list 
heap sort simply heapsort heap list list heap tree transformed sorted list way combine combines heaps new 
clearly list anamorphism 
branch oe extract combine oe recurse sort combine oe construct sort combine heapsort implemented leaving function list heap transforms unsorted list heap specified 
branch construction gofer matches argument pattern branch usual binds argument heap list extract extract tip left extract branch right combine combine ord 
bintree 
bintree 
bintree combine tip combine tip combine branch branch branch combine branch combine recursion patterns applicable function list heap list catamorphism tree anamorphism hylomorphism additional data type 
analyze recursion pattern function assume list heap recursively binary tree pattern note design decision particularly choose tree anamorphism 
options just simplicity 
oe extract split rest oe recurse oe construct tree branch decomposition variant bubble select minimum split remainder list sub lists equal length 
list catamorphism 
list heap decompose decompose left decompose right bubble bubble bub bub heap sort written composition binary tree anamorphism list anamorphism 
paramorphisms lists sub functions insert remove catamorphisms lists 
deviate fact construction result recursive result tail tail 
recursion pattern known paramorphism greek word things means parallel 
paramorphisms expressed catamorphisms letting recursive call return intended result tupled argument 
study separate recursion pattern 
list paramorphism list paramorphism follows recursion patterns diagram 
sw destruct recurse sw construct implementation straight forward just supply tail additional argument constructor function type 




para para para para insert paramorphism insertion operation insert insertion sort section expressed paramorphism 
analyze recursive structure 
oe destruct oe recurse insert oe combine insert list split head tail recursively inserted depending need original tail recursive result 
may inefficient construct recursive result optionally throw away laziness comes help 
recursive result simply computed 
insert insert combine combine rec rec remove paramorphism selection operation remove straight selection sort section expressed paramorphism 
analyze recursive structure 
oe destruct oe recurse remove oe remove list head tail recursively removes chooses non recursive tail suffices remove case maintain recursive result 
give version straight selection sort algorithm 
observe minimum written catamorphism 
extract extract remove minimum minimum min remove rec rec generalizing data structures previous sections shown patterns recursion gives rise classification sorting algorithms 
obtain refined taxonomy sorting algorithms introducing level generalization 
extra level generalization data types 
illustrate generalizing binary tree data type rose tree data type 
type equivalent called trees knu sor searching 
data rosetree rosetree rosetree binary tree element branches rose tree elements branches 
empty rose tree represented case 
quicksort hylomorphism binary trees hylomorphism rose trees expected generalization quicksort 
rose tree hylomorphism diagram definition 
destruct recurse construct type 

type 
type 

hylo hylo map hylo generalizing quicksort generalization quicksort obtained pivots 
pivots sorted insertion sort small remaining elements grouped intervals pivots 
internal contains elements pivot second internal contains remaining elements second pivot th interval contains elements th pivot 
intervals sorted recursively intervals pivots joined 
diagram illustrates process 
xs oe break delta delta delta oe sort recursively delta delta delta oe join implementation relatively straight forward design 
case needs treated specially ensure termination 
split elements xs remainder 
xs sorted obtain sx 
split sx 
break join break break sx split sx 
xs sx xs split sx sx partition join xs xs join xs concat zipwith xs experiments show algorithm behaves quick sort function applied random list various sizes 
optimal value appears independent length list equals implementation 
decent analysis complexity algorithm reveal case 
split size adapted length list replacing function open problem function give best behavior 
rose trees viewed generalization linear lists binary trees leaf trees sorting algorithms generalize 
way merge sort way merge sort 
leave generalization exercise reader generalizing heap sort heap sort generalized means rose trees 
obvious way define heap rose trees binary trees construct tree list map sorted list 
empty heap represented rosetree non empty heap rosetree minimum element list heaps 
aim keeping balanced sub heaps vary sizes little possible obtain worst case behavior 
variant heap sort known literature pairing sort 
rose list list rose function rose list variant heap list 
combining heaps new heap combine list heaps heap 
postpone treatment function roses 
rose list ord 
rosetree 
rose list destruct destruct rosetree ts left destruct rosetree ts right ts mapping list heap simple postponed function roses 
list rose ord 

rosetree list rose map single single rosetree function roses designed best defining function heaps new heap 
rose tree variant function combine section 
ord 
rosetree 
rosetree 
rosetree rosetree rosetree rosetree ts rosetree rosetree ts rosetree function roses simple list catamorphism rose 
implementing way draw back balanced 
list catamorphisms groups elements linear way 
combining function associative grouping take place tree shaped way giving balanced heap 
call form folding list values single value leaf tree hylomorphism 
delta delta oe split delta delta delta delta oe recursively build heaps delta delta oe delta ord 
rosetree 
rosetree 




select id select left select left select right split rosetree shown possible express known sorting algorithms functional programs fixed patterns recursion 
pattern recursion little additional design freedom left 
approach shows functional programming general study recursion patterns particular form powerful tool characterization derivation algorithms 
studied data types linear lists binary trees binary leaf trees 
generalizing data types rose trees revealed generalization quick sort far author knows novel sorting algorithm 
may data types corresponding recursion patterns derive sorting algorithms 
distinguishing hierarchy data structures hand different patterns recursions hand taxonomy algorithms constructed 
nice compare techniques constructing algorithm taxonomies wat 
course algorithms sorting classified means pattern recursion 
see aug similar techniques characterize parsing algorithms 
question presentation algorithms clarified expression terms morphisms raised 
compare version insertion sort straight implementation appreciated 
insert insert insert insert value approach obtaining nice presentation implementation algorithm unraveling structure 
especially case heap sort approach gives insight structure algorithm compared instance knu wir 
recursion patterns natural recursive functions data types catamorphism anamorphism hylomorphism paramorphism 
systematic derivation recursion patterns 
category theory underlies morphisms needed presentation 
definition follows trivially data type definition functional programmer able define 
generation recursion patterns compiler functional language desirable need programmer write 
wish frans patient careful supervision writing thesis contribution natural continuation 
am grateful doaitse swierstra vos stimulating discussions different morphisms erik meijer illuminating thesis herman ter horst 
aug lex 
functional programming program transformations compiler construction 
phd thesis eindhoven technical university october 
bdm bird de moor 
algebra programming 
prentice hall 
fok maarten fokkinga 
law order algorithmics 
phd thesis twente university 
michael fredman robert sedgewick daniel sleator robert tarjan 
pairing heap new form self adjusting heap 
algorithmica 
hwa paul hudak philip wadler arvind brian boutel jon fairbairn joseph fasel kevin hammond john hughes thomas johnsson dick kieburtz nikhil simon peyton jones mike reeve david wise jonathan young 
report programming language haskell non strict purely functional language version 
acm sigplan notices section 
jon mark jones 
release notes gofer september 
included part standard gofer distribution www cs nott ac uk department staff mpj 
knu donald knuth 
art computer programming volume 
addisonwesley 
sorting searching 
mei erik meijer 
calculating compilers 
phd thesis utrecht state university utrecht netherlands 
wat bruce watson 
taxonomies toolkits regular language algorithms 
phd thesis eindhoven university technology 
wir niklaus wirth 
algorithms data structures programs 
prentice hall 
