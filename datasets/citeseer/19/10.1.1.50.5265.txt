sk strings method inferring pfsa anand raman jon patrick departments computer science information systems massey university north new zealand describe simple fast easy implement recursive algorithm alternate intuitive heuristics inferring probabilistic finite state automata 
algorithm extension stochastic machines tails method introduced biermann feldman non stochastic machines 
experiments comparing done benchmark results 
shown sk strings performs better tails inferring small automata 
finite number examples behaviour probabilistic state determined machine possible imagine methods infer structure 
ideally identify exact automaton generated strings 
impossible behaviour machine non minimal machine may generate language 
concerned generating machine impossible determining machine generated sample strings 
decide alternative machines generated positive examples presumably judging machines inferred various algorithms 
best theory machine smallest simplest theory quickly discover 
section discusses quantification occam razor criterion measure error inferred pfsa 
minimum message length objective solution problem judging goodness inferred automaton estimate length description machine data tries account 
theory minimise measure 
minimum message length mml principle georgeff wallace proposed estimate 
context pfsa mml sum ffl length encoding description proposed machine ffl length encoding dataset assuming emitted proposed machine actual formula compute mml pfsa fm log gamma 
gamma 
ij gamma 
log log ng gamma log gamma 
number states pfsa number times jth state visited cardinality alphabet including delimiter symbol ij frequency ith arc jth state number different arcs jth state number different arcs non delimiter symbols jth state 
logs base mml bits 
mml formula assumes nonuniform prior distribution outgoing arcs state 
contrasts similar mdl criterion due rissanen recommends usage uniform priors 
specific prior specification gammam probability state outgoing arcs gamman directly specified formula just bits rest structure specification assumes 
second term sum gives number bits required specify particular distribution incoming transitions outgoing arcs 
third term number bits required specify symbols arcs 
assumed targets transitions delimiter symbols return start state state example don specified 
fourth term uses express length specifying targets outgoing arcs state formula modification non deterministic automata formula patrick chong stated typographical errors factorials numerators absent 
correction personal communication formula wallace georgeff follows numerical taxonomy wallace boulton applied mml principle derive information measures numerical taxonomy 
previous say searching best automaton account dataset infer stochastic automaton arc frequencies reflecting absorption dataset mml minimum possible ones 
possible mml principle derive learning criterion inferring best machine 
unfortunately case 
problem inferring best automaton enumeration computationally intractable alphabet number possible automata states exponential 
gold angluin feldman prove equivalent problem finding minimum finite automaton consistent set positive negative examples npcomplete number states automaton 
known imposing constraints grammar language accepted automaton reduces search space considerable extent 
example angluin defines sub class regular grammars called reversible identification possible time number sentences examined 
angluin shows possible exactly identify automaton polynomial time identification procedure involves combination passive observation active experimentation 
possible 
possible compromise order problem tractable 
time trade guarantee correct solution accuracy tractability achieved heuristics 
methods lines usually start building minimal maximal canonical automaton exact representation input strings generalise progressively merging states satisfy equivalence relation merges possible 
attempts direction include tails method biermann feldman tail clustering method partial similarities method kudo recursive merging methods oncina garcia 
successor method predecessor successor method equivalence relations form equivalence classes symbols construct automata states 
successor method works assigning state symbol input alphabet transitions symbol observed successor symbol set positive examples 
target transition state assigned symbol transition 
predecessor successor method modification prevent generalisations case large sets positive examples low cardinality alphabets little symbol repetition 
assigning different numbers multiple occurrences symbol input alphabet runs 
effectively expands input alphabet number states inferred automaton 
method initially forms equivalence classes comparing predecessors symbol new alphabet successor 
formation equivalence classes stabilises successor method applied collapsing expanded alphabet back original 
tails method works merging states indistinguishable set accepted output strings length 
tail clustering method states maximal canonical machine merged distance measure sets tails certain limit 
distance measure function number common different tails 
partial similarities method starts constructing sets predecessor successor substrings length state 
number different equivalence relations defined 
example states may considered mergeable set predecessor set successor substrings recursive merging method merges states set symbol target pairs transitions state subset 
recursive merging method due oncina garcia merges states lexicographically ordered prefix tree acceptor positive examples exists transitions common intermediate state merged automaton accept negative examples 
furthermore state considered merging lowest numbered state possible 
strictly speaking heuristic method shown guarantee automaton identification limit 
previous discussion generalisations described guided criterion reject undesirable merges 
booth example propose chi square metric measure goodness fit inferred automaton data 
mml proposed criterion merges result increase automaton mml rejected 
patrick chong employ method coalescing chains states separated common transitions accepting resultant automaton intermediate derivation process resulted decrease mml 
method described straightforward ones bell cleary witten 
procedure consist blindly merging pair states possible checking resultant automaton lower mml 
oliver uses similar greedy algorithm infer decision graphs 
method succeed known cases merge consist bad component merges 
correctly identify best model time 
defer mml test final model reached guide intermediate merges heuristics discussed earlier 
mml measure error inference process 
final model doesn give better mml try applying different set heuristics canonical machine heuristic different values tunable parameters applicable 
sk strings approach sk strings method modification tails method stochastic automata 
constructs nondeterministic finite state automaton successively merging states canonical machine indistinguishable top percent probable strings 
define string tail finish state shorter specified string size 
set strings state strings defined set sigma jzj ffi ae jzj ffi string probability associated see gaines correction 
product probabilities arc traversed generating string 
define sk equivalence states considered mergeable sets consisting top percent distribution strings 
computed follows strings state arranged decreasing order probability 
top strings probabilities add percent small possible retained remaining strings ignored 
string state considered approach exactly practice 
low method method requires strings states agree 
sufficiently high value method reduces nerode equivalence relation nerode 
obviously heuristic operate various degrees strictness ffl top strings state strings state vice versa 
heuristic ffl top strings state strings state vice versa 
heuristic ffl top strings state set top strings state order different probability distribution 
lax heuristic ffl top strings state set top strings state order probability distribution 
strict heuristic algorithm gives procedure minimising canonical machine sk strings equivalence relation 
algorithm sk strings comment input minimal canonical automaton comment output generalised automaton state state gamma state gamma sk equivalent merge state state fi od od algorithm gives decision procedure heuristic 
returns true states sk equivalent false 
agreement global value equals parameter sk strings 
procedure determine heuristics similar 
algorithm sk equivalence comment input states comment output true sk equivalent comment false counter str prob pairs output str prob pairs output sort descending probability sort descending probability num strings cnt cnt probability acceptable string return false fi cnt agreement cnt num strings cnt cnt probability string return false fi cnt agreement return true fi od return true fi od return false efficiency process improved significantly sorted list strings argument states 
cache needs flushed merge affects output strings probabilities stream states 
function num strings returns number strings list 
algorithms generating list strings sorting relatively standard straightforward 
acceptability criterion algorithm algorithm ffi usual transition function non deterministic automata theta sigma string considered acceptable transition state automaton 
algorithm returns true string acceptable state false 
algorithm acceptability criterion comment input state string comment output true acceptable comment false ffi return false return true fi tractability considerations space time requirements decision procedure depends number strings need considered compared candidate states 
exponential tail size sk strings essentially exponential algorithm 
canonical automata doesn matter automata generalisations performed canonical automata typically represent finite number strings 
efficiency algorithm suffers dealing large tail sizes automata cycles represent infinite languages inevitable process making generalisations 
tail sizes algorithm complexity increases rapidly exact implementation infeasible 
ideally build strings decreasing order probability sum probabilities strings built point exceeds possible strings examined 
procedural decision reject strings certain threshold probability 
guarantees strings reciprocal threshold considered build internal buffer sizes program accordingly 
maximum number strings produced state probabilities greater equal 
practice proves satisfactory value large generalisations decisions merging states 
extreme cases program user option change limit necessary 
threshold default value 
problem arises state fragments badly large number low probability strings 
reasonably safe conjecture worthwhile induction performed output state information little reason favour approximately equiprobable output strings 
results program reported implements sk strings heuristics 
sk strings reasonably fast algorithm economical run variations choose best 
set experiments best machine inferred sk strings algorithm heuristics various tail sizes fixed value compared best machine inferred tails method 
small automata randomly generated having states arcs alphabet size 
training set strings randomly generated automaton infer back generating automaton 
results experiment shown 
horizontal axis represents training sets vertical axis gives error inferred automaton computed gamma mml inferred machine mml generating machine adjusted exactly emitted data 
negative errors indicate inference compact pfsa generating ones consistent emitted data 
due existence redundancy randomly generated structures 
training sets ktail tail method compared sk strings random training sets generated small random automata 
best machines inferred heuristic tail sizes table shows success rate various tail sizes cell shows times particular tail size inferred automaton mml 
see low tail sizes tails sk strings algorithms 
tail lax strict table number times training sets tail size succeeded inferring minimum automaton tails various sk strings heuristics 
table shows success rates heuristics tails algorithm inferring best pfsa training sets generated small automata 
column shows number times algorithm column inferred best pfsa 
algorithm listed inferred automata mml 
success algorithm rate ktail ktail lax ktail lax table success rates tails sk strings heuristics inferring best pfsa small test cases experiment repeated larger random automata states arcs alphabet size randomly generated strings training set 
process maximum time hour run inference procedure training set killed 
results experiment shown 
table shows success rates heuristics tails algorithm inferring best pfsa training sets generated small automata 
training sets ktail tail method compared sk strings random training sets generated large random automata 
best machines inferred heuristic tail sizes success algorithm rate ktail table success rates tails sk strings heuristics inferring best pfsa large test cases sk strings approach inducing pfsa described 
performance compared earlier tails method 
particular innovations including stochasticity machine determinant equivalence relation mml criterion judge results 
decision ignore low probability strings emitted state markedly improved speed algorithm 
experimental results bear interesting fact sk strings heuristics described chapter heuristic weakest condition merging perform small large test cases 
show small random automata sk strings performs tails collectively heuristics merging clearly better performer average tails various values tail size 
large automata tails perform better requires time run sk strings 
sun megabytes main memory run sk strings program small large random automata took seconds regardless tail size running time tails increased exponentially tail size automata 
possible automata elicited worst case behaviour tails having states self transitions 
worst case scenario problem sk strings puts artificial limit probability generated string able consider 
detailed investigation actual reasons disparity relative performance sk strings respect tails case small large automata left suspected may due part limit number strings considered sk strings process comparing states 
reasons believe information theoretic heuristic sk strings cross entropy may significantly enhance performance case large automata 
addressed separately ongoing research area 
summary seen sk strings fast efficient algorithm inferring pfsa compares related tails method non stochastic automata 
obvious experiments sk strings heuristics best situations particular heuristic may 
case sk strings algorithm polynomial space time economical run possible heuristics input data choose best automaton inferred 
executable programs reported available guide anonymous ftp site ftp massey ac nz directory pub 
file transfer called pfsa arch tar gz arch sparc alpha indy architectures 
source code available request authors 
done programs cite 
acknowledgments authors anonymous reviewers suggestions improve content 
angluin 
complexity minimum inference regular sets 
information control 
angluin 
inference reversible languages 
journal acm 
angluin 
learning regular sets queries counterexamples 
information computation 
bell cleary witten 
text compression 
new jersey prentice hall 
biermann feldman 
synthesis finite state machines samples behaviour 
ieee transactions computers 
feldman horning 
grammatical complexity inference 
tech report cs stanford university computer science department stanford california 
gaines 
grammatical inferencer 
ieee transactions computers 
georgeff wallace 
general selection criterion inductive inference 
shea ed ecai advances artificial intelligence 
dordrecht elsevier north holland 

gold 
complexity automaton identification data 
information control 

new heuristic inferring regular grammars 
ieee transactions pattern analysis machine intelligence 
kudo 
efficient regular grammatical inference techniques partial similarities logical relationships 
pattern recognition 
booth 
inference finite state probabilistic grammars 
ieee transactions computers 

regular inference method 
ieee transactions systems man cybernetics 
nerode 
linear automaton transformations 
proceedings american mathematical society 
oliver 
decision graphs extension decision trees 
tech report tr monash university computer science department clayton victoria 
oncina garcia 
inferring regular languages polynomial updated time 
pattern recognition image analysis selected papers fourth spanish symposium 
singapore world scientific 

patrick chong 
real time inductive inference analysing human behaviour 
proceedings australian joint ai conference 

regular inference syntactic pattern recognition case study 
proceedings th international conference pattern recognition 
rissanen 
modeling shortest data description 
automatica 

efficient regular grammatical inference pattern recognition 
pattern recognition 
wallace boulton 
information measure classification 
computer journal 
wallace georgeff 
general objective inductive inference 
tech report tr monash university computer science department clayton victoria 
