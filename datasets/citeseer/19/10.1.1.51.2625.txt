simple fly automatic verification linear temporal logic gerth technical university eindhoven den eindhoven netherlands peled bell laboratories mountain avenue murray hill nj usa vardi rice university department computer science houston tx usa wolper universit de li ege institut li ege belgium tableau algorithm obtaining automaton temporal logic formula 
algorithm geared model checking fly fashion automaton constructed simultaneously guided generation model 
particular possible detect property hold constructing part model automaton 
algorithm check validity temporal logic assertion 
general problem pspace complete experiments show algorithm performs quite temporal formulas typically encountered verification 
basing linear time temporal logic model checking transformation automata new details efficiently fly fashion 
keywords automatic verification linear temporal logic buchi automata concurrency specification 
checking automatically protocol especially concurrent parallel activities satisfies specification gained lot attention years 
main author supported esprit bra action react belgian incentive program information technology computer science initiated belgian state prime minister office science policy office 
scientific responsibility assumed authors 
dichotomy approaches automated protocol verification characterized logicbased versus state space methods 
type methods proceed translating protocol specification formulas formal logic showing logical implication specification protocol formula 
contrast state space methods proceed analyzing possible configurations protocol state space protocol evolves configuration 
methods offer uniform advantage strengths weaknesses compared 
concentrates class state space methods called model checking 
idea model checking view verification checking graph representing state space protocol satisfies model property checked 
specifically focus model checking linear time temporal logic formulas 
context checks infinite execution sequences extracted state space graph satisfy models temporal logic formula equivalently sequences falsifies formula 
classical approach solving problem proceed follows 
constructs state spaces protocol verified negation property state space comprises execution sequences models property violated 
state spaces analyzed existence common execution sequence finding means property violated protocol 
interested infinite sequences generated state spaces interpreted automata infinite words automata 
analysis done amounts standard problem checking language accepted synchronous product automata empty 
general approach solving problem proceeds checking strongly connected components done reduce problem simpler cycle detection simpler algorithms 
model checking problem validity problem linear temporal logic pspace complete 
practice applications model checking methods face complexity related limits 
size automata protocol property execution time proportional product number nodes automata 
size part product automaton kept memory order check emptiness available memory sets firm bound size problems treated 
problem cycle detection approach uses simple depth dfs strategy contrast needs small part product automaton main memory time part corresponding computation depthfirst search currently exploring 
implies protocol automaton may constructed fly needed checking emptiness 
means property hold algorithm detect constructing visiting small part state space automaton corresponding property nodes number subformulas property formula :10.1.1.42.2841
size product automaton determines complexity method proportional delta number reachable protocol states 
clearly desirable keep property automata small avoid exponential blowup occur construction possible 
standard automaton construction temporal logic property see global starts generating node maximally consistent set subformulas property :10.1.1.42.2841
simple way describe construction clearly reasonable way implement immediately realizes worst case exponential complexity 
subsequent construction proposed basis implementation starts state automaton repeatedly refined models property realized 
worst case remains exponential construction achieves substantial reduction number generated nodes 
hand algorithm thefly depth search repeatedly inspects graph corrects removing adding edges nodes 
emptiness check proceeds determining inspecting strongly connected components automaton easily applicable verifying protocol satisfies property 
said authors interested protocol verification checking validity formula include past operators 
describe experiments pragmatic algorithm constructing automaton temporal logic formula 
having roots construction algorithm designed yield small automata possible simple implement :10.1.1.42.2841
furthermore proceeds fly sense automaton generated needed verification process 
technically algorithm translates propositional linear temporal logic formula generalized buchi automaton simple depthfirst search 
interesting point algorithm produces generalized buchi automaton simple transformation automaton yields classical buchi automaton emptiness check done simple cycle detection scheme 
result obtain protocol verification algorithm protocol property automata product automaton constructed fly depth search checks emptiness 
rest starts preliminaries defining temporal logic interpretations 
section presents basic algorithm discusses optimizations application model checking 
correctness proof occupies section 
section detailed comparisons existing constructions 
finishes experimental results sections 
preliminaries set formed linear temporal logic ltl constructed set atomic propositions standard boolean operators temporal operators precisely finite set propositions formulas defined inductively follows ffl member formula ffl formulas 
interpretation linear time temporal logic formula infinite word delta delta delta alphabet mapping naturals precise elements interpreted assigning truth values elements elements set assigned true elements set assigned false 
write suffix starting semantics ltl 
ffl iff ffl iff ffl iff ffl iff ffl iff ffl iff introduce abbreviation abbreviation introduce additional temporal operators abbreviations temporal operator defined dual 
tableau construction goal build automaton transition system generates infinite sequences satisfying temporal logic formula automata build generalized buchi automata buchi automata multiple sets accepting states opposed simple buchi automata set accepting states 
generalized buchi automaton quadruple hq gamma fi finite set states set initial states gamma ae theta transition relation set sets accepting states ff notice empty 
execution infinite sequence oe gamma 
accepting execution oe execution acceptance set exists state appears infinitely oe 
automata defined far input define sequences 
need add labels automata 
common approach add labels transitions 
proceed slightly differently add labels states 
labeled generalized buchi automaton short triple ha li generalized buchi automaton finite domain labeling function states subsets domain state set labels 
accepts word iff exists accepting execution oe 
say execution oe accepts 
central part automaton construction algorithm tableau procedure related ones described 
tableau procedure builds graph define states transitions automaton 
nodes graph labeled sets formulas obtained decomposing formulas boolean structure expanding temporal operators order separate true immediately true state 
fundamental identity 
describing graph construction algorithm introduce data structured represent graph nodes 
data structure data structure representing graph nodes contains sufficient information graph construction algorithm able operate dfs order 
graph node contains fields name string name node 
incoming incoming edges represented names nodes outgoing edge leading current node 
special name init mark initial nodes 
init name node represent real edge 
new set temporal properties formulas hold current state processed 
old properties hold node processed 
eventually new empty leaving obligations old 
temporal properties hold states immediate successors states satisfying properties old 
father construction nodes split 
field contain name node current split 
field reasoning correctness algorithm important construction 
keep list nodes nodes set construction completed having fields 
denote field new node new 
algorithm simplify representation algorithm assume formula automaton built contain operator 
show lift restriction 
loss generality may assume formula contain operators negations pushed inside precede propositional variables 
formula transformed contain operators fact operator dual operator specifically introduced order allow pushing negations causing exponential blowup size translated formula 
line numbers description refer algorithm appears 
algorithm translating formula starts single node lines 
node single dummy incoming edge labeled init mark fact initial node 
construction node initial iff contains label list incoming nodes 
initially new obligation new sets old initially empty 
example upper node algorithm starts constructing automaton current node algorithm checks unprocessed obligations left new line 
current node fully processed ready added nodes set 
node nodes set obligations old fields line copy exists needs updated set incoming edges set edges incoming new copy added ones old copy nodes set line 
node exists nodes set current node added list new current node formed successor follows lines ffl initially edge new current node 
ffl set new set initially field ffl sets old new current node initially empty 
processing current node formula new removed list 
case proposition negation proposition literal old identify current node discarded contains contradiction lines 
added old 
literal current node split lines split lines new formulas added fields new lines 
exact actions depend form added new truth formula needed hold 
node split adding new copy 
nodes correspond ways hold 
node split copy added new 
copy added new 
splitting explained observing equivalent 
depicted 
node split added new copies added new copy added 
splitting explained observing equivalent 
copies processed dfs order expansion current node successors finished expansion second copy successors started 
algorithm listed pseudo code language 
function new name generates new string successive call 
function neg defined follows neg neg similarly boolean constants functions new new defined table new new automaton automatic protocol verification graph constructed algorithm section define accepting infinite words satisfying formula 
set states nodes returned algorithm 
notice nodes new empty placed set 
words fully expanded nodes returned 
initial states nodes init incoming 
transitions gamma 
exactly satisfying incoming 
domain label node sets compatible old 
node graph necessarily assign truth values atomic propositions label node element agrees literals appear old 
precisely pos old neg fj old pg pos neg positive negative occurrences propositions respectively 
pos neg impose accepting conditions 
observe maximal path oe delta delta delta graph determines models formula construction allows node contain successor nodes contain solved imposing generalized buchi acceptance conditions 
subformula type set includes nodes old old 
show acceptance conditions longer accept sequence appears node onwards occurring 
notice construction old old old 
scenario propagates onwards occurs 
accepting subset associated states index greater equal sequence oe contain infinitely occurrences state accepting 
explained protocol verified property constructing automaton negation property exploring synchronous product protocol property automaton emptiness 
automaton representing record graph node name string father string incoming set string new set formula old set formula set formula function expand node nodes set new node nd nodes set old nd old node nd node incoming nd incoming nd incoming node return nodes set return expand name father new name incoming fname node new node old nodes set new new node new node case 
neg old node current node contains contradiction return nodes set discard current node old node old node fjg return expand node nodes set 
node name new name father name node incoming incoming node new new node fnew node old old node fjg node node name new name father name node incoming incoming node new new node fnew node old old node fjg node return expand node expand node nodes set 
return expand name name node father father node incoming incoming node new new node node old old node fjg node nodes set expand function create graph return expand name father new name incoming new old create graph algorithm father node father node father node name node name node name node split current old current new incoming init incoming init current old current new incoming init current new current old splitting node protocol empty acceptance condition product automaton simply inherits accepting sets property automaton 
checking emptiness done fly generation product 
simple buchi automaton singleton needs find reachable accepting state reachable 
algorithm doing described 
furthermore shows generalized buchi conditions handled 
idea transform generalized buchi automaton simple 
done counter state pair hq ii counter 
counter initialized counts modulo jf updated reaches element ith set needs set accepting states instance theta 
improvements basic algorithm adding formulas needed able handle formulas involving operator add extra case algorithm 

return expand name name node father father node incoming incoming node new new node old old node fjg node nodes set pure fly construction 
algorithm generates model checking checking validity temporal formula 
complete construction automaton order model checking 
construction nodes done demand intersecting protocol automaton 
successors node property automaton constructed immediately continue construct successors forth 
chooses successors match current state protocol 
possible violation checked property discovered generating entire property automaton 
improving efficiency 
algorithm written way proof correctness simplified 
contains redundancies 
improvements ffl field father needed proof correctness 
ffl splitting node lines need generate new nodes update additional information generating descendents create 
true adding conjuncts node lines 
ffl eventuality form generate set formula equivalent ffl inconsistencies detected level atomic propositions nodes semantically inconsistent may appear automaton 
certain inconsistencies detected earlier syntactic means 
instance adding formula node compute pushing negation inside check occurs 
occurs current node abandoned 
ffl processed formula currently stored old field 
necessary 
instance conjunction analyzed need added old field added presence formula tells conjunction true node 
note righthand argument subformula stored define acceptance conditions 
similar observations apply disjunctions formulas care taken retain information needed identifying acceptance conditions righthand arguments formulas 
consequence generated automata may smaller nodes differed previously identical 
ffl case treating line subformula type appears new old need split node 
sufficient move subformula new old 
holds treating formula type new old 
proof correctness section proof correctness sketched 
main theorem theorem automaton constructed property accepts exactly sequences satisfy proof 
directions proved lemma lemma 
denote value old point construction node finished added nodes set line algorithm denote conjunction set formulas conjunction empty set taken equal propositional sequence sequence oe sequence states gamma 
recall denotes suffix sequence 
lemma oe execution uj 
holds 



proof 
follows directly construction 
lemma node split construction lines nodes holds old new old new old new similarly node updated new node lines holds old new 
old new proof 
directly algorithm definition ltl 
field father link node split 
defines ancestor relation iff father name 
transitive closure nodes father name called rooted 
rooted node 
initial node search started lines 
new 

obtained lines node construction finished 
new set 
node lemma rooted node time descendant nodes nodes set formulas new created 
values fields construction 
holds 
exists 
proof 
induction construction lemma 
lemma propositional sequence 
exists transition gamma 

fj jg particular exists transition gamma 
satisfies 
proof 
construction node finished node new generated 
lemma guarantees successor required exists 
lemma initial state automaton generated formula 
proof 
immediately construction 
lemma automaton constructed ltl property proof 
lemma lemma initially 
lemma oe run accepts propositional sequence taken initial state 

proof 
induction size formulas 
base case formulas form show case 
lemma cases 



oe satisfies acceptance conditions case possible 
induction hypothesis 
semantic definition ltl cases treated similarly 
lemma oe execution automaton constructed accepts propositional sequence 
proof 
node initial state follows 
lemma 
lemma exists execution oe accepts 
proof 
lemma exists node 
construct propositional sequence oe repeatedly lemma 
choose successor satisfies 
furthermore lemma guarantees choose subformula holds 
know lemma propagate successors holds 
minimal 
comparison previous translation ltl formula buchi automaton wolper vardi sistla 
constructing intersection automata 
automaton takes care state state consistency runs called local automaton 
automaton called eventuality automaton takes care eventualities subformulas type satisfied 
set formulas cl subsets state local automaton consists formulas cl negated non negated 
transitions local automaton reflect consistency conditions 
gamma possible successor xp belongs node belong node edges automaton labeled identically nodes emanate 
initial states local automaton ones contain formula 
second automaton states consists subset subformulas set goals need satisfied execution sequence 
edges labeled local automaton 
righthand subformula formula appears edge formula removed set goals appear set formulas state 
goals achieved starts new set goals accumulated labels edge linked goals accumulated state local automaton 
eventuality automaton accepts word goals achieved infinitely 
combination automata done cartesian product node sets coordinating edges 
acceptance condition product fixed eventuality automaton node second component empty set goals accepting 
construction meant show theoretical connection ltl buchi automata establish correctness 
designed applicable temporal logic extended operators defined finite automata 
applied blindly systematically leads automaton state set exponential size reasons 

node local automaton construction maximal 
contains subformula negated non negated 
number nodes exponential size formula equivalently number subformulas cl 
unnecessary theses nodes unreachable 
furthermore approach allow nodes differ locally irrelevant members cl merged 

eventuality automaton states consist sets subformulas 
exponential number subformulas 
needed handle extended temporal logics necessary logic consider 
formulas propagate unmodified righthand side argument satisfied directly write requirement subformulas satisfied generalized buchi acceptance condition 
furthermore converting generalized buchi acceptance condition simple de done increase size automaton linear number subformulas exponential number eventuality automaton approach 
similar observation independently implicitly 

nodes generated global manner possible nodes generated automata 
edges constructed pairs nodes satisfy consistency conditions 
product automaton taken 
possible check nodes really reachable initial states 
requires additional search 
improved tableau construction temporal logic 
constructs graph goal checking satisfiability translation model checking similarly create buchi automaton corresponds temporal property 
construction uses observations reduce number states edges 
claimed operates fly starts property needs translated creating initial graph refining graph corresponds appropriate translation 
constructs nodes edges needed 
construction globally checks pairs adjacent nodes graph 
satisfy tableau consistency conditions nodes refined replaced set nodes satisfy consistency conditions 
algorithm continues refine nodes edges satisfy consistency conditions 
involves replacing old nodes new ones adding removing edges accordingly 
algorithm construction automaton needs finished model checking 
construction starts checked formula constructs node continue generate graph depth search order 
cases node discarded list existing nodes contains propositional contradiction 
fly 
avoiding need construct entire automaton violation checked property intersection protocol 
experimental results table compares global construction described algorithm described section :10.1.1.42.2841
implemented standard ml new jersey 
fp abbreviates gp abbreviates global construction new construction num 
formula nodes transitions nodes transitions accepts gfp gfp fp gp gp ffp fp rightmost column represents number pairs acceptance table constructed automaton 
notice safety property subformulas satisfy 
automaton nonempty contain reachable cycle 
formulas experiments 
gfp gamma 
gfp formula describe fairness condition expresses enabledness element process transition execution element 
formula exploited wants check property fairness condition implemented model checker 
purpose examples show construction impose exponential blowup negating formula 
ffp fp verify ffp fp tautology 
unfortunately insufficient memory ml program global construction complete 
evident table exponential blowup occurs faster global construction 
reflected memory time takes complete construction emptiness check takes time linearly proportional size constructed automaton 
model checking size constructed property automaton critical take product automaton representing state space 
size state space problem important property automaton small possible 
reason fact algorithm fly important 
means algorithm answer full state space property automaton constructed 
feel algorithm promising potentially practical approach model checking validity checking simple appears produce reasonable sized automata operates fly 
acknowledgment 
second author likes gunter helping debugging ml program 
choueka theories automata tapes simplified approach journal computer system science 
bhat cleaveland grumberg efficient fly model checking ctl proceedings th symposium logic computer science san diego ca appear 
burch clarke mcmillan dill hwang symbolic model checking states information computation 
courcoubetis vardi wolper yannakakis memory efficient algorithms verification temporal properties formal methods system design 
coudert madre verification synchronous sequential machines symbolic execution automatic verification methods finite state systems grenoble france lncs springer verlag 
holzmann design validation computer protocols prentice hall 
kesten manna mcguire pnueli decision algorithm full propositional temporal logic cav greece lncs springer verlag 
lichtenstein pnueli checking finite state concurrent programs satisfy linear specification th acm popl 
pnueli temporal logic programs proceedings th ieee symposium foundation computer science 
sistla clarke complexity propositional linear temporal logics journal acm 
thomas automata infinite objects handbook theoretical computer science 
vardi wolper automata theoretic approach automatic program verification proceedings st symposium logic computer science cambridge england 
vardi wolper reasoning infinite computations information computation :10.1.1.42.2841
wolper temporal logic expressive information control 
wolper tableau method temporal logic overview logique analyse 
wolper vardi sistla reasoning infinite computation paths proceedings th ieee symposium foundation computer science 
