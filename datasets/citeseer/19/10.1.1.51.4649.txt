research proof carrying code untrusted code security george necula peter lee carnegie mellon university pittsburgh pennsylvania cs cmu edu powerful method interaction software systems mobile code 
allowing code installed dynamically executed host system provide flexible means access internal resources services 
problems solved uses untrusted code practical 
position focus problem establish guarantees intrinsic behavior untrusted programs 
particular interest host system ensure untrusted code damage example corrupting internal data structures 
host ensure untrusted code resources cpu memory forth long time period host assurances undue effort deleterious effect system performance 
position theory programming languages including formal semantics type theory applications logic critical solving untrusted code security problem 
illustrate possibilities programming language theory briefly describe extreme promising example proof carrying code pcc 
proof carrying code proof carrying code technique host establishes set safety rules guarantee safe behavior programs code producer creates formal safety proof proves untrusted code adherence safety rules 
host able simple fast proof validator check certainty proof valid foreign code safe execute 
order gain preliminary experience pcc performed experiments user level code downloaded operating system kernel 
example show pcc safely allow user download network packet filters written assembly language obvious performance benefits approaches interpretation safe languages 
safety proofs smaller time proof validation ms 
measured similar costs pcc experiments 
advantages pcc mobile code 
entire burden ensuring security shifted code producer 
host hand perform fast simple easy trust process 
trustworthiness proof checker important advantage approaches involve complex compilers interpreters host 
second pcc programs sense modification accidental malicious result proof longer valid correspond enclosed program 
cases program rejected 
third opposed cryptography trusted third parties required pcc checking intrinsic properties code origin 
sense pcc programs self certifying 
hand pcc completely compatible approaches security 
briefly described approach proof carrying code illustrates potential programming language theory arena essentially exploitation static checking 
position theory programming languages take include formal semantics type theory logic provides methods systems critical achieving high level security mobile code applications 
difficult research problems solved believe past current results show potential warrant great deal 
necula lee proof carrying code 
technical report cmu cs computer science department carnegie mellon university dec 
appeared fox memorandum cmu cs fox 
necula lee safe kernel extensions run time checking 
second symposium operating systems design implementations oct usenix pp 

