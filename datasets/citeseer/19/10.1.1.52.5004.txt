safe polymorphic type inference dynamically typed language translating scheme ml fritz henglein jakob rehof diku university copenhagen dk copenhagen east denmark email diku dk describe new method polymorphic type inference dynamically typed language scheme 
method infers types explicit run time type operations coercions program 
statically debug scheme programs give high level translation ml essence providing embedding scheme ml 
method combines desirable properties ffl liberal legal scheme programs rejected outright type inferencer 
ffl modular definitions analyzed independent context 
inferred type scheme definition safe contexts 
accomplished admitting type coercion parameters resulting form polymorphic qualified type system 
ffl infers types run time type operations places opportunistically suitable program point data creation destruction points 
ffl efficient 
monomorphic fragment implemented linear time full polymorphic calculus appears comparable ml type inference practice 
ffl simple ml polymorphic typing type inferencer inserts run time type operations ml typable programs may add coercion parameters 
ffl classifies subexpressions definitely type correct requiring run time type checking possibly type correct requiring run time type checking definitely type incorrect definitely aborting 
method formal type theoretic framework dynamic typing generalized include polymorphic type coercions recursive types polymorphic coercive types 
regard closely related soft typing systems cartwright fagan wright aiken wimmers lakshman 
main technical contributions reported fold 
synthesis soft dynamic typing extends monomorphic dynamic typing polymorphic coercions discriminative sum types recursive types 
subsumes typing power cartwright fagan wright soft typing discipline combines ability dynamic typing place coercions data creation destruction points 
despite admitting polymorphic coercions arbitrary placement monomorphic inference minimal completions implementable time preserving best known time bounds dynamic type inference 

safe modular type inference definitions type checked safely minimally independent particular context coercion parameters 
solves outstanding problem cartwright fagan wright soft typing discipline 
number coercion parameters minimized eliminating identifying coercion parameters possible abstracting 
result type coercion inference translated type correct ml program 
developed prototype scheme ml translator subset ieee scheme 
give type theoretic framework polymorphic dynamic typing describe phases type inference process give examples resulting scheme ml translator 
high level translation statically dynamically typed programming languages notoriously tricky business semantically syntactically seemingly compatible language families scheme ml 
reasons interested high level translation low level translation direct compilation machine code 
systems written different programming languages communicate operating system 
may undesirable reasons ffl adds dependency vulnerability particular operating system 
particular adds additional costs software maintenance porting 
ffl communication operating system lowlevel error prone relatively inefficient 
porting code language way preserving investment ported part system 
porting purposes high level translation absolute 
geared primarily readability maintainability secondarily reasonable efficiency 
need complete long handles defined sufficiently interesting subset ported language completely correctly 
interested embedding dynamically typed language scheme statically typed language 
principal advantages fold runtime type operations eliminated statically data principle stored type specific fashion 
example pair small integers untagged unboxed representation list sixteen elements known type allocated pascal record 
importantly statically debug scheme code identifying definite possible type errors executing code 
dynamic type inference polymorphic type coercions section introduces formal framework completion inference system polymorphic completions 
depth coverage rehof master thesis 
develop formal framework core part language order keep presentation manageable 
polymorphic completions section introduce framework polymorphic type coercions completions 
wish coercions model run time type checking tagging operations scheme start observation scheme dynamic types type tags ranged tc see language definition cr tc nil boolean symbol char vector pair number string procedure types divide data domain disjoint sets 
course full scheme language contains types input output ports restrict attention core types 
manner hen hen hen assume primitive type coercions type tag tc primitive tagging coercion called tc 
primitive coercion called tc 
addition assume identity coercion id intuitively tagging coercions embedding functions add specific type tag tc object check coercions project object back operation tc 
inspects tagged argument checks tag tc strips returns underlying untagged object tag run time type error generated 
typically means program abort escape interactive top level loop error message indicate reason abort 
identity coercion just op 
example executing boolean 
evaluates tagged boolean object truei bool representation type boolean 
implementations tags low order high order bits machine address word additional elaborate tagging pointed memory region 
executing boolean 
boolean 
evaluates boolean 
truei applies check operation boolean 
value 
tag truei expected underlying untagged value true returned 
note result evaluating words semantically boolean 
boolean 
clear right hand side efficient left hand side 
applying procedure 
boolean 
results run time error 
assume hindley milner style polymorphic type language enriched regular recursive types discriminative sums style soft typing fag cf wri wc addition introduce notion coercive types ff tc 
ff tc tc oe ff oe tc ranges type tags arity treat procedure tag binary constructor write procedure write pair 
recursive type abstractions form ff finite notations possibly infinite regular trees cc 
types form tc tc discriminative sums top level type constructors summands required distinct see fag details 
generally assume tc ranges type constructor alphabet denoted sum 
parameter number constructors 
assume fixed ordering type constructors summands listed order 
think indexed 
kg 
restrictions result simplification important practical purposes tantamount turning sum type construction free type constructor 
literature soft typing mentioned contains discussions issues see detailed information 
notation tc denotes application type constructor type vector tacitly assumed length vector matches arity type constructor 
types ranged monotypes types ranged oe type schemes usual 
comparison standard hindley milner systems stratified type language additional class ranged coercive types order accommodate polymorphic coercion parameters explained 
abbreviation range coercion signatures expressions form worth noting coercive types 
special case jones qualified types jon jon 
interesting apply general framework application 
coercions assigned polymorphic signatures axiom schemes due fact standard ml target translation sum types name equivalence called datatypes 
tc tc tc tc tc tc tc tc id tc 
recall assume denotes set type constructors 
instance tagging coercion procedure 
signature form tc type constructor tc tc 
intention coercion applied object functional type resulting object regarded element corresponding sum 
sum types thought types tagged objects 
respect sum types universal type dyn hen hen hen 
note framework considerably powerful 
dyn type system tagging operation tc 
applicable objects type tc dyn 
dyn 
forces components object tagged object tagged resulting cascading effect tagging operations 
illustrate suppose discover subexpression needs tagged procedure 
larger context 
monomorphic discipline requires complete abstraction type dyn dyn turn lead need tags checks inside body abstraction isolation context completed coercions 
problem overcome considering coercions polymorphic constants say tag procedure 
applied object arbitrary functional type 
requires functions embedded sum type identical types 
addition primitive coercions induced coercions follows tag tc arity coercions 
cn induced coercion tc 
cn 
case tc functional tag signature corresponding induced coercion written contra variant signature coercion argument cases signatures 
cn extend covariantly signature induced coercion 
cn tc 
cn tc 
tc 
coercions may formed composition ffi ffi assume infinite supply coercion parameters variables ranged vehicle coercion abstraction application polymorphic completions 
develop formal framework core fragment scheme called defined follows range expressions true false lambda define define construct allows recursive definitions 
construct completions expressions 
completion expression arises insertion coercions manner disciplined type system described 
expression coercions referred pure expression 
define set completions define formally set coercions introduced ranged follows id tc 
tc 
tc 
cn ffi set completions continuing definition expressions 
defining respectively coercion application coercion abstraction coercion instantiation 
type system type system 
defines set typed completions 
standard hindley milner polymorphic system extended rules rules recursive types coercion application coercion abstraction coercion instantiation definitions respectively 
recursion rule ninth rule top relation holds possibly infinite regular unfoldings identical 
see cc information 
rule definitions rule expression denotes type 
sn set coercion signatures 
sn note pure expression typed completion 
presence recursive types immediate term pure calculus completion 
safety minimality modularity may completions term type 
equally completion inference system judged quality completions infers 
safety minimality parameters judge completions 
note tc 
ffi tc 
id hold standard naive coercion evaluation may generate run time error execution tc 
ffi tc evaluating id 
satisfying equation require costly algebraic coercion simplification run time 
compositions kind liable generate avoidable run time type errors 
equalities form tc 
ffi tc 
id may assumed hold 
example coercion boolean 
ffi procedure ffi procedure 
ffi boolean 
generate run time error boolean tag attached argument followed functional check 
check generates error 
coercion may consequently regarded unsafe identity coercion boolean 
ffi boolean 
id chosen 
shall restrict search completions safe 
definition safety completions pure expression type 
write holds prove structural induction terms term type ff ff ff decisions follow hen hen reader referred information 
gamma oe oe gamma bool ftrue falseg gamma gamma lambda gamma gamma gamma gamma bool gamma gamma gamma gamma oe ff fv gamma gamma ff oe gamma ff oe gamma gamma oe gamma oe oe gamma oe gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
sng gamma 
sn gamma define 
inference rules polymorphic dynamic typing context type correctly inserted generates run time type error 
case completion monomorphic type say safe holds completion pure term type arbitrary completion said adaptable mono type coercion type arises series coercion abstractions instantiations 
say completion arbitrary type polymorphically safe adaptable safe completion mono type 
note polymorphic safety strong condition 
suitable situation aim modularity demanding completions produced possible contexts 
polymorphically safe completions intuitively seek minimize amount run time type operations number coercion parameters 
certain coercions statically determined superfluous particular shall orient equation tc 
ffi tc 
id left right viewing right hand side efficient left hand side equally safe 
see hen formal notion minimality 
illustrate role played coercion parameters polymorphic safety minimization consider simple example program define lambda true cons program completion type number number number number completion polymorphically safe generate run time type error adapted type number number 
wit extending completion requires coercions number number number back number cons cons number generate run time type error 
consider completion define lambda true cons cons type scheme number number number number sums shown shorthands summations pair type occurs appropriate place summands appropriate type constructors applied fresh type variables 
adapted way resulting expression generate error number number shows completion polymorphically safe 
continue example easily find contexts tagging coercion undesirable car cons forces completion car pair pair cons context better car cons gives result having tag data 
seen minimization safety aims kept balance point view minimization may appealing unfortunately unsafe 
parameterization coercions important means ensuring polymorphic safety offering possibility utilizing context specific information context 
example coercion parameters reach compromise completing define number number ff 
lambda cons coercive type scheme ff number number ff ff ff completion instantiated identity coercion inserted car id cons inserted obtain safe completion passing cons id number cons 
number 
price paying coercions need passed runtime 
clearly important keep number coercion parameters minimum 
practice function definitions polymorphically safe minimal completions coercion parameters 
cost remaining coercion parameters minimized employing partial evaluation complete programs specializing coercion parameters away compilation 
appears promising connection nonparametric implementation technology polymorphic functions tol hm 
translating scheme ml section outline core scheme ml translation 
basic idea core translation follows 
tagging coercions translated injections polymorphic sum type containing injections corresponding type tag scheme type system datatype dynamic bool string string string int array represents discriminative sum type constructor type constructors source language 
type variables reflect number different type argument positions sum type instantiated independently different contexts 
check coercions defined schema exception fun case 

raise primitive tagging coercion tag 
induced coercions defined fun id infix fun fn 
fn 
infix fun fn 
recursive types require coercions recursive datatypes 
instance translate combinator lambda translate type recursion ff ff fi declarations datatype 
fun gets type 

unfolding recursion equation achieved coercing ml completion fn 
type 
outline translation somewhat oversimplified sake brevity 
section discusses particular features scheme addressed 
section gives examples inferred completions translated standard ml 
simple example delving detailed description type inference process consider simple example get idea type inference accomplishes 
think type inference problem solving unknown coercion variables type variables 
parsing input program subexpression annotated unique coercion variable having types satisfying equational typing rules 
example consider function definition define lambda lambda annotation coercion variables suitable types get annotated definition define lambda lambda coercions variables functionalities ff ffl ff fl fi ffi ffl number fl fl ffi ff number fi bool number number gives type correct completion type ff ffl fi ffi fl ffi fi bool ff fl number number number coercions proportional size expression number coercion parameters obtained fashion quickly gets hand 
polymorphic expressions grow exponentially 
purpose analysis get rid coercion parameters possible instantiating coercion constants losing polymorphic safety minimality resulting completion 
example type signature number number replace id instantiate fi bool replace id boolean test requires boolean simplified assume form argument expressions 
value check value boolean passing replace identity coercions tagging checking corresponding subexpressions pushed context context responsible coercing arguments result suit requirements 
may require applying induced coercions 
remaining coercion variables number ff ff number yielding completion define lambda lambda type ff number ff ff number ff bool ff coercions remove 
tempting unsafe set ff number replace identity coercion 
tantamount insisting passed numbers 
unsafe application value succeeds returns passed set ff 
dynamic replace number 
number 
gives safe completion eliminates coercion parameters 
commits function execute type coercions time function body executed passed number 
complete program context coercion parameters usually removed partial evaluation 
eliminates need passing coercions run time 
time specialized versions minimum run time type operations 
solving coercion constraints describe phases type inference process analyzes program 
phases merged practical efficiency 
parsing attribution stage input parsed attributed syntax tree 
subexpression new coercion variable type signature initialized ff fi ff fi unique 
say fi high type extension ff low type 
coercion variables range primitive type coercions including operation unconditionally generates run time 
type error 
lambda bound variables single unique type variable attribute bound variables get possibly coercion parameterized type scheme initialized irrelevant value 
type variables may unified types type variables phases 
unifications place constitute inference process coercions determined uniquely type signatures 
case ordinary scheme 
value acceptable test part expression 
unification types type rules second stage types coercion signatures unified accordance static typing rules 
example ff high type fi high type fl low type ff unified function type fi fl 
step coercion variable attributing signature ffi fi fl ffi low type gives information identify 
knowing primitive coercion possibilities coercion 
ffi fi fl identity op coercion id 
ffi tc 
type constructor tc error coercion coercion generates type error applied 
ffi 
dynamic tag checking coercion procedure 
ffi type parameter bound type variable type scheme coercion parameter 
result stage completion satisfies type rules section 
phases eliminate coercion variables solving type variables occurring coercion signatures setting identity coercion specific primitive type coercion 
construction simple value flow graph type signatures coercion variables attributed expression constitute coercion constraints 
viewed edges value flow graph types occurring constraints nodes graph 
knowing constraints solved signatures primitive coercions deduce certain types equal 
consider couple typical examples 
ffl consider constraint form tc ff 
ff tc fi 
fi primitive coercion signature matches constraint identity coercion 
unify ff fi 
ff fi ffl consider constraints tc ff 
ff fl tc fi 
fi fl coercion variables 
coerce type equal 
unify ff fi 
ff fi ffl consider constraints tc ff 
ff fl fl tc fi 
fi identify particular coercions constraints correspond conclude component types equal 
unify previous case ff fi 
ff fi generalizing cases tc ff 
ff tc fi 
fi arbitrary nodes types constraint graph reach constraint graph edges backwards forwards direction case ff fi 
ff fi call simple value flow closure condition 
simple value flow graph induced set constraints largest graph satisfies simple value flow closure condition derived constraints viewed graph contracting nodes unifying types 
constructing simple value flow graph third stage 
get intuitive understanding think low type sub expression value 
expressions may value 
constraints coercion signatures edges show values flow program 
low type constraint head flow edge form tc ff 
ff indicates subexpression value function pair number constructed 
high type constraint tail flow edge form tc ak indicates subexpression value applied function argument projection operation pairs 
simple value flow graph connects possible producers consumers values 
called simple preserve flow directionality components structured higher order types 
computed efficiently linear time relative size original graph instrumented unification algorithm data structure path compression ranked union hen 
cycle elimination simple value flow graph expression may contain cycles set type variable nodes reaching reachable node set 
fifth stage shall set value type variable sources reaching sinks reaches 
information identical type variables cycle collapse variables cycle unifying fourth stage 
done efficient maximal strong components algorithm 
sources sinks type variables fifth stage determine types type variables information sources sinks acyclic 
source node incoming flow edges 
sink node outgoing flow edges 
set src ff node ff sources reach ff snk ff contains sinks reached ff 
key insight considerations src ff describe types values possibly reach ff 
similarly snk ff describes expected types possible uses values ff 
combining information determine type type variable ff checking cases applies 
src ff contains nonvariable types having type constructor indicates values particular type reach ff 
unify ff src ff 

snk ff contains nonvariable types having type constructor indicates value reaching ff operations particular type 
unify ff snk ff 
may result early type check operation type performed long operation requiring argument particular type executed 
appears plausible value program point number check number right away 
entirely safe may executed 
absolutely faithful translation preserving original semantics required exclusively src ff snk ff determination ff 
alternatively possible devise definitely analysis verify rule safely applied 

src ff contains nonvariable type say tc ff 
ff variable type situation values type tc ff 
ff reach ff depending values type variables 
case ff type parameter unify variable types src ff snk ff 
analogously snk ff 
src ff snk ff contain types distinct type constructors signals values different types reach expression low type ff may operations requiring different types 
plausible situation tha operations may type error run time 
case type tagging checking done run time unify ff 
dynamic nonvariable types src ff snk ff enter summands 
snk ff give possible uses ff adjust notion sinks 
sure detect case program variable branch conditional branch vice versa 
require program relevance logic bound variable applied occurrence branches conditional contain set free variables 
accomplished including explicit operations discarding value variable linear logic preprocessing step 
coercion identification previous stages solved type variables attributed syntax tree 
sixth stage determine coercions looking type signatures 
coercion variable type signature possibilities 
equal case id 

dynamic tc case check operation type constructor tc 

tc 

dynamic case tag operation type constructor tc 

tc type parameter vice versa case coercion parameter 
forming polymorphic coercive types seventh stage determine types define bound variables type coercion parameters occurring expression bound collected abstracted generalized 
ensure correct check ffl set coercion parameters empty ffl syntactic value lambda 
conditions applies instantiate coercion parameters tagging checking coercions 
sure call value semantics scheme preserved 
top level definitions contain imperative type variables imperative type variables occurring type unifying type dyn 
imperative type variables arise connection side effecting operations set set car set cdr 
call cc 
monomorphic universal type dyn definable datatype dyn rec dyn dyn dyn dyn dyn dynamic 
pretty printing translation eighth final stage results analysis pretty printed annotated scheme program static debugging purposes translated standard ml translation purposes 
translation standard ml done generating ml kit syntax coercion annotated scheme syntax 
dealing scheme specifics section describe address specific problems raised translating full ieee scheme ml 
dynamic top level bindings scheme employs dynamic top level binding toplevel procedure definition free variables resolved statically bindings hold environment definition 
free variables bound dynamic environment particular call function 
example define append lambda null 
cons car append cdr section assumed fixed types null cons car cdr treated call append recursive function call 
useful static debugging purposes pose question type append assume standard bindings free variables 
purpose translating definition faithfully ml static top level binding simply assume variables standard bindings may rebound dynamically 
account possibility individual occurrences free variables body definition includes append example order obtain combinator treat definition append combinator definition define append lambda null cons car append cdr lambda null 
cons car append cdr body contains occurrences free variable abstracted separately 
translated ml function fun append null cdr takes structured arguments relevant part environment append evaluated second actual arguments append 
top level dynamic binding useful method accomplishing program editing interactive sequential top level loop program development 
questionable value finished system effect identifiers including ones bound standard procedures top level construction system rebound completely different values time system runs 
typically avoided prohibited providing nonstandard mechanism freezing environment packaging complete program 
translation scheme programs ml probably best served performing assumption static top level binding 
case parameterization free variable occurrences definitions necessary translation look considerably natural 
side effects call cc arguments low types side effected scheme set 
standard functions set car set cdr 
marked side effected 
translation types types box types scheme lisp lingo imperative type variables 
similarly call cc obtains standard ml type 


imperative type variables preserved type unification 
free imperative type variables top level definitions avoided instantiating type dyn 
boolean tests exceptional values ieee scheme value functions false expressions exception value lookup operations assoc 
furthermore values different function true expression 
typing rules lookup functions scheme type 
dynamic ml translation 
implies unfortunately tagging checking propagate neighborhood expressions applications lookup functions translation purposes attributable possible problems type safety 
lists scheme ml lists play special role scheme ml 
scheme plethora standard procedures processing lists procedure arguments passed lists 
similarly ml standard type lists lots operations 
translation described lists elements type 
dynamic translated ml lists 
order obtain lists result translation add summand 
dynamic datatype dynamic 
tlist list provides possibility ambiguous representation tagged values example tagged represented tlist nil 
correspondingly change check coercions unil automatically fail applied value tagged tlist 
treat list little recursive sum type type constructors nil pair 
fifth stage type inference see section recognize special case nil pair type constructors dynamic sum type normally built 
case map type variable question list type 
necessary coerce list type general dynamic type apply tlist constructor list 
type testing routines type testing predicates essentially checking part check coercions 
object safely tested scheme type 
purpose translation type testing routines static type dynamic gamma bool supports implementation predicates type tags 
instance translate scheme predicate boolean 
fun case 
true 
false type system model control flow information 
type testing predicates aggravate loss static type information typically steer control flow program fashion execution depends type tag object run time 
routines equality predicates routines equality predicates classical garbage collection major causes inefficiency implementation polymorphically typed languages require extensive tagging 
reason hitherto ml languages implemented essence translating scheme way round describing 
translation routines equality predicates expect inputs monomorphic type dyn 
required generality standard ml support nonparametric polymorphism 
case equality predicates equal eqv 
eq 
type scheme fffi ff theta fi bool similarly routines 
translation vs static debugging mentioned system intended support double purpose translation ml static debugging 
note enterprises may share common interests 
point view static debugging natural adopt principle inferred run time type operations satisfy requirements run time type safety 
hand viewing process completion backbone translation may lead decisions language implementation violate principle inference pure static debugging purposes just mentioned 
example implementation scheme type testing predicates 
indicated earlier implement predicates translation tagging coercions 
predicates universally defined possibly give rise run time type safety problems implementation driven tags possibly concomitant checks program may considered undesirable pure static debugging perspective 
view may prefer non parametric polymorphic typing predicates ff ff bool problem predicates implemented implemented techniques run time type parameter passing discussed contexts tol hm fact implemented form tagging wouldn show completions pure system static debugging 
examples section consider sml completions produced example definitions 
show simple definitions illustrating coercion parameters 
define lambda define lambda car output sml completion inference val rec fn cv 
val rec fn 
true cv false val rec fn 
true car fn 
raise types val fn bool 

list 
val fn list 
respectively 
note things translation noncore facilities examples 
coercion parameters denoted numerical index 
note parameter lists scheme procedures translated right associated pairs 
allows simulation scheme parameter list pattern matching 
note error coercion fn 
raise translate error generating coercions cons number main point example case analysis discovers type safely identified bool guaranteed consumed type 
forces parameter application second branch conditional 
case consideration rendered superfluous run time type error application car results absence type constraints result application 
example shows workings primitive coercions 
consider little program define zip lambda cons cons car car cons cdr cdr define lambda zip zip inferred sml completion val rec zip fn 
cons cons car car cons cdr cdr val rec fn 
zip zip false false types val zip fn list 
val fn dyn list 
dyn dyn function zip completed coercions function leads spread dynamic type coercions 
sources 
type parameter coerced dynamic sum conditional assumed consume boolean zip consumes pairs 
second branches conditional construct pairs elements different types integers booleans leads need dynamic sum type components pairs 
function purposely invented illustrate dynamic sum programs completed substantially fewer coercions course 
give examples show things optimized translation list types 
general achieved aggressive typings predicates representation shift coercions lists pairs 
aggressive non parametric typing predicate null map function define map lambda null 
cons car map cdr gets completed parameters inferred representation shift coercions lists pairs val pair lst fn 
val lst pair fn 

raise follows val rec map fn 
pair lst cons car lst pair map cdr lst pair type completed map list 
list list 
list assuming aggressive non dynamic typing predicate null null 
ff ff list bool typing assumed example 
example append function arguments 
function peculiar destruct second argument consumes list argument 
assumed type second argument object produced append coerced type argument unknown coercion parameterized shown val rec append fn cv 
val rec append fn 
cv cons car lst pair append cdr lst pair append tautology checker define taut lambda prop equal 
prop equal 
prop taut prop taut prop compare fag wc completed shown assumption equal 
type equal 
ff ff ff bool val rec taut fn cv cv 
val rec taut fn prop 
prop cv true true prop cv false false taut cv prop true taut cv prop false false taut type bool 

bool list 

list 
bool non parametric polymorphic typing considered equal 
fffi ff fi bool typing lead elimination coercion parameter completion shown 
related literature type analysis dynamically typed programming languages vast 
employs intraprocedural data flow analysis optimize implementation dynamically typed languages eliminating runtime type tests resolving dynamic overloading method dispatching 
notably shivers shi shi employs interprocedural semantics interpretation purpose 
works aimed implementation level type systems understood formal tools reasoning source programs 
give clear specification type system programmer doing give feedback user trying debug program 
approach formal type system dynamically typed language 
closely related goals systems soft typing cartwright fagan wright rice university virtues termed soft typing 
developed soft typing systems scheme remy encoded subtyping fag cf wri wc 
aiken wimmers lakshman see aw developed alternative soft type system set constraint solution methods 
system comprises discriminative sum types recursive types style polymorphism type language system powerful including set theoretic operations union intersection negation subtyping called conditional types express control flow dependencies 
differs lines respects 
major points 
system models tagging check operations deals optimization kinds run time type operations dual aspects style henglein dynamic typing hen hen hen 
distinction systems assume objects tagged run time deal optimization run time checking operations 

scheme ml translation integrated soft dynamic typing style completion inference new 
translation essential way explicit modeling dual run time type operations 
furthermore translation produce type specific efficient data representations 

addresses problem inferring polymorphically safe completions suitable modular incremental completion inference coercion parameters 
problem appears studied previous soft typing relied global analyses assumed entire program analysis 
systems mentioned soft type inference scheme cartwright fagan wright closest spirit 
run time checks limited situated primitive operations including procedure application system restriction type coercions principle placed program system occurrence fact limited primitive application points 
flexibility important system addresses modularity issue helps decrease number run time type operations required universally adaptable completion 
consider simple example application function apply define apply lambda system infers type fffi ff fi ff fi wri wc issue mentioned important part softly typed version scheme see comparison 
inserts coercions function deferring run time type operations context 
possible coercions placed arbitrary points argument positions 
example apply inserted context true yielding completion apply true expression apply insertion apply lambda gives back just apply coercions 
contrast system run time type checking operations adhere primitive application points faced choice having having checked version application operation 
having necessary universally applicable completion apply context require position inside function unfortunate contexts require check 
type inference system scheme liberal outright reject scheme programs aggressive infers safe polymorphic completions seeks minimize number primitive coercions coercion parameters preferring minimize primitive coercions coercion parameters finds clever placement coercions source program 
results analysis static debugging source program translation polymorphic languages ml family standard ml caml 
developed system performs polymorphic type inference kernel ieee scheme process extending substantial subset ieee scheme 
part translator standard ml new jersey sml nj 
reason picking standard ml new jersey ml kit currently built top sml nj sml nj supports call cc 
realistic alternatives sml nj caml light moscow ml 
scheme translator intended component ml kit standard ml implementation kit developed diku university edinburgh 
envisage new implementation techniques development standard ml region memory management representation optimization structured data utilized productively dynamically typed languages scheme 
obtaining truly efficient code require low level translation suitable intermediate language 
support static debugging scheme new type error finding tracing algorithms developed 
example type error coercions passed coercion parameterized functions traced place body function definition contains corresponding coercion parameter applied position 
aw alex aiken edward wimmers 
type inclusion constraints type inference 
proc 
conf 
functional programming languages computer architecture fpca copenhagen denmark pages 
acm press 
alexander aiken edward wimmers lakshman 
soft typing conditional types 
proc 
st annual acm sigplan sigact symposium principles programming languages popl portland oregon 
acm acm press jan 
cc coppo 
type inference recursive types syntax semantics 
information computation may 
cf cartwright fagan 
soft typing 
proc 
acm sigplan conf 
programming language design implementation toronto ontario pages 
acm acm press june 
cr clinger rees 
revised report algorithmic language scheme 
acm lisp pointers iv july september 
fag mike fagan 
soft typing approach type checking dynamically typed languages 
phd thesis rice university 
hen henglein 
dynamic typing 
proc 
european symp 
programming esop rennes france pages 
springer feb 
lecture notes computer science vol 

hen henglein 
global tagging optimization type inference 
proc 
lisp functional programming lfp san francisco california june 
hen fritz henglein 
simple closure analysis 
diku semantics report diku university copenhagen dk copenhagen east denmark march 
hen fritz henglein 
dynamic typing syntax proof theory 
science computer programming scp 
hm robert harper greg morrisett 
compiling polymorphism intensional type analysis 
proc 
acm sigact sigplan symp 
principles programming languages popl san francisco california jan 
jon mark jones 
theory qualified types 
proc 
european symposium programming esop rennes france 
springer verlag 
lecture notes computer science vol 

jon mark jones 
ml typing explicit polymorphism qualified types 
proc 
conf 
theoretical aspects computer science tacs sendai japan pages 
springer verlag 
lecture notes computer science vol 

jakob rehof 
polymorphic dynamic typing aspects proof theory inference 
master thesis diku university copenhagen march 
shi shivers 
data flow analysis type recovery scheme 
lee editor topics advanced language implementation chapter pages 
mit press 
shi olin shivers 
control flow analysis higherorder languages taming lambda 
phd thesis carnegie mellon university may 
tha thatte 
quasi static typing 
proc 
acm symp 
principles programming languages pages 
acm jan 
tol andrew tolmach 
tag free garbage collection explicit type parameters 
proc 
acm symp 
lisp functional programming lfp orlando florida june 
wc andrew wright robert cartwright 
practical soft type system scheme 
proc 
acm symp 
lisp functional programming lfp orlando florida 
wri andrew wright 
practical soft typing 
phd thesis rice university 
