scalable highly available web server daniel dias william mukherjee tewari ibm research division watson research center box yorktown heights ny watson ibm com describe prototype scalable highly available web server built ibm sp system analyze scalability 
system architecture consists set logical front network nodes set back data nodes connected switch load balancing component 
combination tcp routing domain name server dns techniques balance load front nodes run web httpd daemons 
scalability achieved quantified compared known dns technique 
load back nodes balanced striping data objects back nodes disks 
high availability provided detecting node daemon failures reconfiguring system appropriately 
scalable highly available web server combined parallel databases back servers provide integrated scalable highly available solutions 
explosion traffic world wide web load popular servers web increasing rapidly 
describe analyze various methods building scalable web server cluster computing nodes throughput cluster increased growing size clustered system 
analyze limits scalability efficiency methods trade offs alternatives 
traffic commercial applications popular web servers increases high availability servers increasingly important 
clustered web server describe server highly available load failed node remaining nodes cluster 
methods describe prototype scalable highly available web server built ibm scalable parallel sp system 
consultant brown cow engineering reached com relation previous ncsa prototype scalable server described 
method illustrated consists having set servers nodes cluster andrew file system afs sharing set html documents round robin domain name server distributing accesses nodes cluster 
essentially clients single name associated set servers rr dns maps single name different ip address servers round robin manner different clients ideally mapped different server nodes cluster 
way load distributed servers access set urls distributed file system afs case 
clustered web server cluster subdomain different ip addresses different clients vsd client request name server request node response node rr dns client caches ip address dns gateway nameserver cache ip address ttl dns gateway dns gateway nameserver cache ip address ttl nameserver cache ip address ttl domain name server flow problems arise method 
illustrated typically name servers clients rr dns cache resolved name ip address mapping 
order force mapping different server ip addresses rr dns specify live ttl resolved name requests specified ttl resolved local nameserver forwarded authoritative rr dns re mapped ip address different server 
multiple name requests ttl period mapped server 
bursts requests new clients appear server leading significant load imbalance 
ttl small significant increase network traffic name resolution 
name servers impose minimum ttl ignore small ttls rr dns 
second problem clients cache resolved name address mapping henceforth referred address caching 
clients may requests time load servers controlled subsequently vary due statistical variations client access patterns 
clients requests bursts web page typically involves fetching objects including text images burst directed single server node increasing skew 
show effects lead significant dynamic load imbalance requiring cluster operated lower mean loads order able handle peak loads 
issue relates load balancing distributed file server servers 
typically skew file accesses urls popular leading skew file server nodes 
significant large documents accessed file system caching suffice 
remainder organized follows section scheme combines rr dns set called tcp routers better balance load servers 
combination allows better scalability 
describe method stripes files data server nodes cluster balancing data access load 
section quantitatively examine load balancing rr dns approach quantify performance scalability web server prototyped 
section describe high availability achieved prototype 
concluding remarks appear section 
scalable web server architectures scalable web server architecture illustrated consists multiple web servers running clustered architecture 
clustered architecture consists group nodes connected fast interconnection network switch 
node cluster local disk array attached 
disks node maintain local copy web documents share nodes 
better performance load balancing shared web documents striped multiple nodes 
shown nodes cluster divided logical categories front clustered web server clustered web server real time vsd real time vsd httpd comm sp switch load balancing cluster file system wide striping scalable web server architecture delivery nodes ii back storage nodes 
load balancing component distribute incoming requests external network front nodes run httpd daemons 
logical front node forwards required commands back nodes data document shared file system 
assume underlying software layer virtual shared disk interconnection architecture transparent nodes 
results sent back back node front node switch transmitted user 
clustered architecture outline applied applications similar design scalable video server 
essentially architecture applies video server httpd daemon replaced daemon reads video objects plays clients network required rate 
web video servers possible configurations tier ii flat 
tier architecture logical front back nodes mapped different physical nodes cluster distinct 
flat architecture hand physical node serve logical frontend back 
nodes identical performing storage delivery functions 
clustered web server principally consider tier architecture 
load balancing key requirement order achieve scalability web server balancing load multiple front nodes back nodes 
front front nodes run web daemons connected external network 
balance load client requests need spread evenly nodes 
methods front nodes back nodes switch client disks client virtual shared disk software layer physical connection virtual communication software external network connection atm lines application specific software virtual shared disk software layer tier server architectures achieve varying degrees effectiveness 
section outlined round robin domain name server rr dns solution similar ncsa approach 
summarize scheme frontend nodes single logical name maps name multiple ip addresses 
due address caching client bursty nature client accesses ttl values imposed nameservers load balancing achieved coarse quantified section 
sp switch internet web server nodes tcp router nodes web server nodes scalable web server router flow method achieving load balancing routing illustrated 
nodes cluster serve tcp router forwarding client requests different front nodes cluster round robin order 
name ip address router public addresses nodes cluster private 
router node single name rr dns map name multiple routers 
referred encapsulated cluster 
client sends requests router node turn forwards packets belonging particular tcp connection server frontend nodes 
router different algorithms load select node route simple round robin scheme 
prototype see router resides just ip layer kernel extension 
server nodes directly send request back client router 
server nodes change source address packets sent back client router node 
entire routing action transparent clients 
note response packets large compared request packets especially images video clips bypass router 
overhead added router small quantified 
advantage router scheme dns solutions fine grained load balancing achieved problem client nameserver caching 
potential issue routing approaches router node bottleneck domain name server 
performance aspects quantified section 
improve scalability router dns schemes combined various ways 
number router nodes shown rr dns method map different clients different router nodes 
hybrid scheme tolerate coarse grained load balancing achieved rr dns corresponding router route burst requests mapped rr dns router different front server nodes 
achieves scalability long ttl node running rr dns bottleneck ii router nodes achieving scaling single router 
hybrid router dns scheme combines logical router front nodes dns solution get coarse grained load balancing 
front server node acts router load server low request handled locally server router forwards request node load global load balancing algorithm 
scheme eliminates forwarding router load front node requires 
back back nodes function server nodes shared file system afs nfs front ends access data 
instance ncsa prototype uses afs data server 
traditional shared file systems total document set partitioned different back servers 
partitioned approach lead load imbalances access skew documents 
back servers store hot documents get overloaded resulting hot spots 
file system caching front alleviate problem small documents fit local cache 
initial requests need go back server remaining serviced local front cache 
larger documents back server nodes unevenly hit 
balance load back nodes different methods ranging replication striping 
data replicated backend nodes logical front back mapped physical node making flat architecture 
scheme described front load balancing directly 
full replication data expensive terms space utilization 
data modified frequently form consistency control required 
replication document divided logical blocks distributed disks system 
logical block represents size striping unit mapped multiple packets switch communication layer multiple physical blocks disk term block refer logical block 
blocks belonging document may span disks system referred wide striping may confined smaller subset disks referred short striping 
block sizes typically large 
kb minimize access latencies 
successive blocks object allocated consecutive disks sequential placement 
shared file system additional support access striped documents 
wide striping implicitly achieves higher disk arm bandwidth load balancing 
small documents server striped disks system 
documents striped subset disks system replicated remaining disks sets 
short striping server employs wide striping single disk node failure affects streams accessed 
back node failures masked availability schemes described section 
performance scalability section study performance issues relating scalability cluster solutions rr dns router 
performance rr dns measured independently web server 
web server performance derived webstone benchmark performance measured stand benchmark 
studies load imbalances rr dns router strategies performed csim simulations networked system 
load imbalance due client network effects qualitatively discussed factors affect load balancing nodes section 
quantitatively study effect dynamic load imbalance simulate networked system vary number web page requests client session ttl nameservers number nodes server 
simulation uses burst model single level caching nameservers clients server 
page requested client burst small requests representing objects page sent server 
client resolves name server session 
number remote nameservers typically larger number nodes server 
illustrate impact ttl single level caching nameservers 
simulation parameters shown table 
parameter default number nodes number nameservers levels caching nameservers clients node server node capacity req sec requests size mean interarrival time secs 
page requests client mean number bursts page mean page requests client session ttl secs 
table simulation parameters shows effect varying number requests client session dynamic load imbalance server different ttl values nameservers 
request server assumed size load imbalance observed due varying request size 
dynamic load imbalance measured ratio maximum number percentile requests serviced node sampling interval mean computed total simulation time period 
note rr dns router schemes lead average load balance nodes extended period time 
focus dynamic load balance lead different peak loads nodes cluster schemes 
inter arrival times page requests client session derived exponential distribution mean seconds 
ttl value mean number page requests client session increases effect client address caching pronounced resulting load imbalance increase 
note page requests consist burst requests mean server 
increase ttl value seconds client address caching number page request client load imbalance increases sharply gradual 
effect increasing ttl nameservers increasing duration client session adverse load imbalance server nodes 
router approach results lower load imbalance caused bursty nature client requests random arrivals 
number page requests client session ratio percentile mean ttl ttl ttl ttl router number nodes load imbalance rr dns load imbalance function number nodes web server 
number nodes increases load imbalance router decreases 
shows effect varying number nodes load imbalance rr dns router approaches 
number nodes small load imbalance due bursty nature requests client random arrivals high router rr dns 
number nodes increases effect diminishes router forwards requests different nodes 
rr dns approach load imbalance due client nameserver address caching contribute largely load imbalance gradually increases nodes increased 
large scale system router approach recommended load imbalance significantly smaller router dns approach 
smaller systems approaches viable 
simulation study client randomly selects nameserver practice nameservers may utilized causing larger imbalances rr dns approach 
scalability rr dns router shows scalability achievable rr dns solutions different workloads file sizes different ratios new accesses total accesses web server 
rr dns accessed requests new clients address web server node cached client access 
varied percentage new accesses access new client client requests web site retiring 
document typically consists constituent objects number reflects pages accessed client 
number nodes ratio percentile mean ttl ttl router number page requests client session effect system size load imbalance node handle fewer requests second documents large see single rr dns handle request larger number server nodes average file size larger 
absolute terms rr dns scales large number nodes smaller file sizes assuming rr dns accesses new clients 
file size kilobytes scaling nameserver util 
different file sizes percent new accesses percent new accesses percent new accesses percent new accesses percent new accesses percent new accesses scalability rr dns router measured cpu utilization execution webstone benchmark server nodes configured 
server node utilization cpu utilization router node file size small kbyte large files mbyte 
average file size web server workload single router node operating utilization support nodes sufficient practical systems 
shows scaling single router node documents different file sizes 
larger configurations desired multiple router nodes load balancing routers achieved rr dns 
shown section router solution better load balancing properties compared rr dns solution 
file size kilobytes scaling router util 
different file sizes server nodes router node scalability single router node high availability heartbeat membership hb hb primary secondary node failure update iss table twin tailed disks recoverable vsd sp switch primary secondary ip takeover tcp router tcp router ip takeover file system replication node failure update router buddy node takes dns dns high availability traffic commercial applications popular web servers increase providing highly available web servers increasingly important 
advantages clustered system possibility providing high availability masking node failures 
done detecting failures reconfiguring system workload taken remaining nodes cluster 
scalable web server order guarantee high availability need mask front backend node failure 
method making web server highly available illustrated 
node failures detected heart beat membership protocol essentially eliminates nodes membership group consistent manner heartbeat messages node received 
network failures detected heartbeats multiple networks 
resource failures detected monitors 
detection node resource failures distributed recovery driver component initiates recovery coordinating series recovery commands scripts remaining nodes system 
actions taken specific failures outlined 
front node failure dns router solution load balancing failed node removed name server tables router configuration table 
tables updated reflect failure remote clients try connection failure directed failed node 
dns approach clients may cached address failed node continue try connecting 
similarly router approach router node may fail causing clients see failure 
handle scenarios front node router node buddy takes ip address failure 
remote clients cached address failed node connect buddy transparently 
ip takeover nodes redundant adapter 
adapters servicing external ip requests booting 
ip address main adapter taken spare adapter buddy node 
switching done software orchestrated recovery driver outlined earlier 
handle back server failure hardware approach twin tailed disks 
approaches replication software raid large scale servers real time requirements 
disks attached node buddy node 
node fails buddy node takes disk 
front nodes forward requests buddy 
twin requires special disks extra scsi adapters nodes connect shareable disks 
twin load buddy double worst case 
multi reduce overload extent 
analysis design described built prototype scalable highly available web server ibm sp system illustrated 
system essentially instantiation architecture shown tier system front back nodes 
disks connected back nodes 
disks logically shared front nodes virtual shared disk software 
data web files striped back nodes disks achieving load balancing back nodes 
combination tcp router rr dns described earlier load balancing daemons run ning front nodes 
tcp router encapsulated cluster prototype 
scalability data section measurements prototype 
methods achieving high availability outlined previous section implemented prototype 
hardware software infrastructure shared scalable web server prototype scalable video server video objects striped nodes disks daemons replaced video push daemons load balancing achieved control server assigns client streams front nodes 
forms video selections web allow web client start band play video objects separate high bandwidth channels 
currently constrained bandwidth client network prevent significant real time video access web 
time believe real time video web feasible prototype ability support scalability web video increasingly important 
disk stripe group control server set top box sp switch load balancing high bandwidth channel web client sp video web server prototype quantified scalability solution examined performance known rr dns approach 
showed simulations pure dns approach significantly impacted dynamic load imbalance nodes cluster 
specific example due client caching mapping name ip address peak load nodes cluster higher mean load nodes bursts requests clients lead dynamic load imbalance 
higher values ttl nameservers load dynamic load imbalance rr dns gets worse 
means rr dns cluster nodes need configured mean load order able sustain peak loads occur 
showed router solution largely eliminates problem provides excellent dynamic load balancing allows cluster nodes operate higher mean loads sustain peak loads 
load balancing integrated scalable solutions focused scalable highly available web server web pages stored shared file system 
applications access back servers databases line transaction processing web required 
scalable web server described integrated parallel scalable back servers create integrated scalable solutions illustrated 
illustrates scalable web server integrated prototype scalable video server parallel database management high availability domain 
acknowledgments prototype draws components developed people especially attanasio smith schmuck wyllie 
attanasio smith peterson 
design implementation recoverable virtual shared disk 
ibm research report rc watson research center yorktown heights new york 

dns support load balancing 
rfc rutgers university april 
berners lee world wide web 
communications acm august 
roger 
personal communication 
roger frank stein 
system delivery interactive television programming 
compcon 
ieee march 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
jahanian rajkumar 
processor group membership protocols specification design implementation 
proceedings th symposium reliable distributed systems pages princeton nj october 
ieee computer society 
eric dean katz michelle butler robert mcgrath 
scalable server ncsa prototype 
computer networks isdn sytems 
martin 
personal communication 
thomas kwan robert mcgrath daniel reed 
ncsa world wide web server design performance 
ieee computer pages november 
avraham leff richard king daniel dias 
hav infrastructure building highly available clustered systems 
preparation 
robert mcgrath 
don know load ncsa www server 
url www ncsa uiuc edu sep html september 
mockapetris 
domain names implementation specification 
rfc usc information sciences institute november 
attanasio smith 
virtual multiprocessor implemented encapsulated cluster loosely coupled computers 
ibm research report rc 
herb 
csim manual revision 
mcc technical report act st microelectronics computer technology austin texas may 
tewari daniel dias mukherjee vin 
real time issues clustered multimedia servers 
ibm research report rc watson research center april 
tewari mukherjee daniel dias vin 
high clustered multimedia servers 
international conference data engineering new orleans february 
ieee 
gene trent mark sake 
webstone generation server benchmarking 
url www sgi com products webstone html february 
