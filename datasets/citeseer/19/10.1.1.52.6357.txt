mavis visual environment active computer vision thomas olson nicholas klop mark shawn dept computer science university virginia charlottesville va usa email olson virginia edu mavis dataflow visual language computer vision image processing 
features high degree liveness compliance user directives providing flexible environment building testing vision algorithms 
mavis includes number features intended support real time active vision 
flexible user program control communications scheduling direct user program access computational system parameters inherently parallel model computation readily supported variety computer architectures 
describes goals mavis project design language status implementation 
major goal current research computer vision develop vision algorithms suitable real time applications autonomous vehicles robots 
progress area limited lack hardware able meet tremendous computational requirements vision image processing lack software tools support development testing real time vision systems 
advances design parallel pipelined architectures begun address hardware problem computer vision researchers experimenting variety simd mimd parallel machines 
lack software tools continues major obstacle progress 
mavis project attempt progress software front 
general goal simply provide better tools day day computer vision 
specifically project intended support research emerging active vision 
goal active vision allow autonomous agents vehicles robots visual information accomplish tasks real world 
active vision characterized emphasis vision ongoing process closely integrated behavior 
visual information gathered incrementally guide real time decisions sensor parameters viewpoint controlled incoming sensor data processed 
real time adaptive nature active vision places special demands programming languages environments 
speed low latency critical sacrificed ease 
real time system programmers need unusual degree access resource allocation scheduling decisions 
system flexible programs modify behavior response changing conditions 
approach mavis dataflow visual language operators standard image processing primitives 
number image processing systems demonstrated effective formalism describing computations images 
mavis includes number features specifically designed support real time image processing active vision 
mavis data types temporal sequences concept single static image 
mavis provides flexible control communications scheduling policy order help programs meet real time constraints active vision 
programs great deal freedom modify behavior response changing goals imaging conditions 
particular parameter accessible user placed program control 
includes computational parameters gains filter masks thresholds system parameters communications scheduling policies 
mavis designed run efficiently variety architectures 
current uniprocessor implementation light weight speed mavis programs compares conventional code 
related software environments image processing computer vision development years 
early approaches consisted little subroutine libraries 
systems hips provide interactive interfaces standard set routines 
modern systems surveyed add sophisticated database software engineering tools 
visual languages describe image processing computations began fairly early helped traditional flow diagrams describe signal processing algorithms 
hi visual language introduced basic idea allowing image data flow graph computing elements 
tanimoto introduced important concept liveness measure degree visual representations active user interaction 
system visual programming interface originally targeted image signal processing applications extended domains 
vpl allows users construct declarative potentially recursive dataflow graphs leading different style visual programming 
immediate inspiration mavis came scientific visualization shells 
mavis owes general appearance certain features interface avs architecture semantics quite different 
mavis similar vpl dataflow model describe image computations 
differs primarily various adaptations needs active vision particularly flexible communications semantics 
provides level flexibility control process execution languages 
mavis design principles design mavis guided number principles assumptions borrowed languages driven active vision considerations reflecting view visual languages behave 
coarse granularity 
prefer describe mavis visual shell execution environment visual language 
mavis intended play role similar shell unix interactive medium allows users instantiate processes establish communications paths 
expect process granularity relatively coarse processes written conventional procedural language 
sophisticated users 
expect mavis users sophisticated understanding system computers general visual programming systems mavis intended support users little computing experience 
mavis productivity enhancing tool working computer vision researcher 
liveness 
mavis fully live system sense tanimoto 
explicitly disabled mavis graphs active 
editing graph ways affect processes may trigger immediate actions part program 
compliance 
dataflow visual languages typically implicit rules determine computational node execute 
systems quite difficult user determine rules manipulate state graph produce desired response 
belief visual languages willing take direct orders user act 
call system takes orders fashion compliant 
mavis highly compliant system user explicit access aspects system state intervene point enforce particular behaviors 
mavis system basic structure mavis similar dataflow visual languages 
computations defined directed graphs nodes graph represent transformations data arcs represent data dependencies 
functionally arcs communications channels execution nodes receive messages inputs produce new results outputs 
users build interact mavis graphs conventional window user interface 
shows typical screen 
window divided large drawing surface called canvas pair docking areas called template parameter palettes miscellaneous control status widgets 
construct graph user selects templates representing computational primitives drags canvas converted process instances 
user establishes communication paths instances drawing mouse 
templates templates icons representing computational primitives available mavis 
serve repositories information required construct process instances 
dragging template canvas sends template information mavis executive creates instance appropriate computational primitive 
user get access templates ways 
frequently templates palette area upper left palette small hold templates available 
bulk template library kept series secondary palettes accessed row buttons top screen 
pressing buttons brings palette containing templates particular class operations image algebra input output filtering 
user drag templates secondary palettes main palette directly screen 
case template immediately generates instance cached main parameter palette full 
dragging unwanted templates trash returns appropriate secondary palette 
experienced users generally know names templates wish 
easy users express intent quickly mavis allows find instantiate templates simply typing names canvas area 
user types series template names separated commas mavis creates instances attempts construct communication channels primary inputs outputs 
usual templates instantiated way cached palette 
mavis contain template performs desired function user option creating interactively 
creates text description template object file containing code perform desired computation 
choosing load template mavis user interface 
file menu causes files dynamically linked loaded build new template 
new template debugged shown useful permanently compiled mavis executable 
instances process instances icons representing active versions mavis computational primitives 
successive instantiations template inherit template name plus suffix name unique 
addition names instance icons ports graphical markers perimeters denoting inputs outputs 
ports color pattern coded indicate type data consume produce types available include integer floating point complex arrays strings scalars graphic primitives 
user links output ports input ports mouse create multicast communications channels 
image processing visualization tools hips avs usually recognize distinct types inputs operator 
addition normal inputs arrive messages tools provide parameters interactively specified inputs control details computation 
mavis distinction inputs parameters appear ports process instance 
inputs normally attached process instances parameters threshold thresholding process assume default values instantiated interactive widgets separate control panel section user interface 
user convert representation 
example converting threshold parameter create input type integer place threshold value control process instance 
converting image input thresholding process widget bring image editor allowing user feed edited images thresholding process 
capability provides extended flexibility user allowing variety configurations processes process control 
mavis provides extensive feedback execution status instances communications channels 
instance status light indicates instance executing waiting condition satisfied halted 
input ports opened mouse create pop window displays information port name brief description intended flag indicating contains new data control information 
canvas canvas provides users ability create edit graphs process instances 
responsible detecting fact user dropped template surface generating appropriate instance handling instance creation keystrokes 
addition supports usual set graphic operations repositioning deleting instances channels clearing canvas saving graphs files cetera 
mavis program behavior user point view mavis process instances appear alive ready respond input moment created 
example linking newly instantiated camera template instance display process causes processes running immediately 
user continue edit graph processes run effect changes reflected immediately computation 
mavis executive responsible deciding runnable process instance execute instances decide runnable 
restricted running response messages user actions 
applications example instances frequently decide run state external devices cameras motors 
instances appear execute continually respond immediately user updates mavis fully live sense tanimoto 
mavis compliant system broad limits user tells 
user halt instances single mouse click freezing communications 
system remains live 
capability simplifies debugging time user halt running instances attach monitoring processes point graph order discover going system 
waiting halted processes likewise forced run firing conditions satisfied 
implies process instances assumptions state world invoked leads considerable internal complexity 
advantage compliance users feel control system 
expend energy trying trick system implicit rules doing want 
communications execution control mavis process behavior extension standard dataflow semantics 
associated process set firing conditions determine permitted compute 
process firing conditions typically state communication channels system imposes restrictions 
may example base decision value real time clock state hardware device appropriate 
processes conceptually execute parallel continuously evaluate firing conditions running 
default firing conditions provide conventional dataflow behavior process runs new data inputs messages sent outputs acknowledged 
mavis processes interactive user request behaviors modifying set boolean attributes associated input port 
attributes specify process owning input requires new data input run willing allow messages sent input overwritten chance act 
default new data required overwriting forbidden input yielding conventional dataflow behavior 
enabling overwriting port allows sender produce new data old data acknowledged 
result messages may lost newer data available 
behavior useful real time situations date information crucial 
dropping new data requirement input allows process run new values arrive inputs 
appropriate inputs function logically control parameters updated main data stream 
options adequate mavis allows programmer supply arbitrary firing conditions directly part process source code 
process may run firing conditions evaluate true 
normal behavior process receive acknowledge new data sent perform computation broadcast results processes connected outputs 
new data consumed persist overwritten subsequent message 
user new connection graph data persisting output port sent immediately new input 
easy examine intermediate states computation time user connect output port graph appropriate monitoring display process run immediately current data port 
sample mavis session example mavis looks user perspective consider user approach problem building simple closed loop tracker 
assume palette includes template frames camera converts position image motor error signal 
user wants keep camera centered brightest object field view 
step put minimal solution problem see 
program consists threshold process intended extract target object binary image followed process takes binary image produces tuple representing centroid 
sent motor controller computes error signal issues appropriate motor commands 
order choose appropriate threshold user attaches display process threshold output adjusts threshold input find value separates object background 
case user chosen put threshold widget explicitly graph leaving parameter palette 
suppose lighting background crude approach fails fixed threshold appropriate places target object go 
user initial response halt digitization process attach histogram extraction display processes digitizer output 
data sitting digitizer output histogram extraction process runs soon link created digitizer longer sending new frames 
user digitizer discovers problem observing changes histogram target moves 
user decides replace fixed threshold adaptive threshold histogram analysis 
calls editor codes routine smooths histogram returns highest local minimum integer 
loads routine dynamically attaches histogram output 
converts threshold port process input dropping interactive widget trash connects input adaptive output 
sets new data required attribute threshold input true run new image corresponding threshold available 
shows final configuration 
mavis internals mavis currently implemented single process unix 
internal architecture carefully designed facilitate multiprocess distributed implementations 
system consists main modules user interface executive 
user interface responsible capturing interpreting user input displaying status information returned executive 
executive takes care creating destroying process instances communications channels routes messages user instances 
stages development application 
communication interface executive prescribed set procedure calls readily mapped interprocess communications distributed environment 
distributed implementation course functions executive performed operating system parallel machine 
mavis written standard ansi extensive object oriented design techniques 
particularly true communications system 
mavis instances consume produce variety scalar structured message types integer floating point images strings vectors cetera 
types logically subclasses generic message class supports standard set methods create destroy copy 
process instances may expect certain message types mavis interface executive manipulate messages superclass level 
means new message type added system simply defining methods class registering class type manager 
mavis communications subsystem designed implemented efficiently variety architectures 
current single process implementation communication channel maintains pair message buffers 
straightforward double buffering scheme allows send receive primitives implemented copying relatively inexpensive pointer manipulations 
reasonably large images assuming message buffers fit physical memory sequences mavis instances run nearly quickly equivalent code 
mavis user interface implemented suit simple user interface toolkit 
suit software toolkit supports rapid prototyping user interfaces permits extensive customization interfaces interactive user 
suit distinguished extraordinarily rapid learning curve compared standard widget sets toolkits 
ease support experimentation mavis possible contribute significantly usability 
mavis visual language execution environment computer vision 
incorporates ideas visual languages scientific visualization provide powerful environment building testing vision algorithms 
includes number features specifically designed support active vision 
provides exceptionally flexible communications semantics gives programs great deal freedom modify behavior response changing conditions 
current uniprocessor implementation extremely efficient designed efficiently implementable parallel architectures 
current mavis focusses problems 
mundane simply improve documentation expand set available templates 
mavis begun replace hips working environment laboratory needed extend domain lower learning curve 
research front interested exploring effect flexible modular communications visual languages 
obvious flexibility overwhelm user system unmanageable 
flexibility programmers effectively 
exploring range options hopes finding set options provides great deal power easy understand 
variants mavis alternative communications semantics currently development 
interactive interface datacube mv image processor 
mv dataflow machine allows images sent network processing elements order perform computation 
computation scan line order mavis token dataflow model map directly hardware 
second mavis variant developing implementation subsumption architecture visual robot control notation developed rod brooks 
proven possible obtain subsumption architecture semantics simply specifying different set firing conditions process instances 
mavis originally conceived part way managing complexity programming mimd parallel machines 
year hope fully parallel mavis implementation 
ultimately hope experience mavis motivate design special purpose architectures support communication model run efficiently moving closer ultimate goal real time computer vision 
express gratitude john dave ken hinckley alex edwards significant contributions design implementation mavis 
eternal suit development team especially matt conway rob deline patient assistance advice bug fixes 
supported part national science foundation number cda 
aloimonos weiss active vision proceedings st international conference computer vision pages london june 
bajcsy active perception proceedings ieee 
dana ballard frames animate vision eleventh international joint conference artificial intelligence pages detroit august 
rodney brooks robust layered control system mobile robot ieee journal robotics automation 
ra pages 
peter burt smart sensing pyramid vision machine proceedings ieee 
datacube mv hardware manual datacube massachusetts 
hirakawa iwata tanaka ichikawa hi visual iconic programming proceedings ieee computer society workshop visual languages linkoping sweden 
michael landy yoav cohen george hips unix image processing system computer vision graphics image processing march 
david lau kee adam robin paul otto mark smith vpl active declarative visual programming system proceedings ieee computer society workshop visual languages kobe japan pages october 
lawton christopher mcconnell image understanding environments proceedings ieee august 
ohio state supercomputer graphics project ape manual november 
randy pausch nathaniel young iii robert deline suit pascal user interface toolkits proceedings uist annual acm siggraph symposium user interface software technology november 
silicon graphics computer systems iris explorer user guide document silicon graphics computer systems mountain view california steven tanimoto visual language image processing journal visual languages computing 
upson schlegel van dam application visualization system computational environment scientific visualization ieee computer graphics applications pages july 
williams visual language image processing proceedings ieee computer society workshop visual languages illinois 
george wolberg interactive image processing software package technical report cucs columbia university department computer science 
