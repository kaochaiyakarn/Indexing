subtyping parametricity gordon plotkin mart abadi luca cardelli study interaction subtyping parametricity 
describe logic programming language parametric polymorphism subtyping 
logic supports formal definition relational parametricity 
give models compare formal systems language 
particular examine penn interpretation subtyping implicit coercion 
subtyping parametricity yields example encoding types initial algebras corresponding proof principles simulation induction 
subtyping obtain partially types certain initial order sorted algebras may derive proof principles 
function polymorphic works inputs types 
may distinguish various notions polymorphism particularly parametric polymorphism rey subtype polymorphism cw 
may exist isolation ml mth amber car interact useful results 
example theory object oriented programming certain kind bounded polymorphism chc bru 
study interaction subtyping parametricity 
polymorphic function may said parametric strachey sense str rey pa uniform algorithm program independently type arguments 
semantic definition parametricity due reynolds rey requires instances polymorphic function related types department computer science university edinburgh king buildings edinburgh eh jz uk 
part completed digital equipment systems research center 
digital equipment systems research center lytton avenue palo alto california usa 
related 
reynolds definition formalized previous acc pa 
extend formalization pa programming language subtyping 
logic serves setting study 
logic viewed analogue scott lcf fairly general system proving properties programs 
programs system extension girard system gir subtyping abstracted cardelli wegner cw curien ghelli cg cg 
logic extension logic pa 
possible program verification logic provides language stating parametricity assumptions rules deriving consequences formally particular models 
remains consider appropriate general form parametric models logic construct particular models 
parametric model combining idea bruce longo bl treating subtypes bainbridge forcing parametricity models system second closed term model idea moggi system mog 
having non trivial model follows terms type proved equal logic observationally equivalent 
variant cardelli cmms 
weakened version derivable logic 
version full yield results associated parametricity frequently limitation closed terms 
logic gives results full generality terms free variables 
conjecture fact derivable logic 
formulate stronger theory may said embody strachey view parametric polymorphism conjecture derivable 
examine penn interpretation view subtyping implicit coercion 
interpretation translation show translation extended formulae theorems logic translated theorems logic pa 
consider full abstraction issues show translation conservative 
parametricity conditions play important role study similar languages rey wad 
appear semantic constructions 
yield useful properties types example int 
type church integers isomorphic standard natural numbers 
exploited proving properties polymorphic programs example functions type int constant 
results interesting analogues just logic offers types initial algebras final algebras logic offers partially types certain initial order sorted algebras certain final order sorted algebras corresponding proof principles 
apply logic prove theorems programs types theorems free wadler calls 
object oriented flavor line intended applications related languages subtyping 
combination parametricity subtyping little considered 
mentioned system cardelli incorporates modest notion parametricity partly motivated dinaturality considerations 
ma ma expresses parametricity translation language subtyping intersection types 
ma focuses parametricity parametricity target language subtyping 
section introduces logic fundamental results 
discussion semantics appears section 
section treats theories including induced penn interpretation 
section provides encodings extensible records partially types order sorted algebras 
basic logic section defines logic 
borrow pa fragment corresponds emphasize novelties concern subtyping 
formed formulae type expressions terms type expressions addition largest type top generalization quantifiers bounded quantifiers 
terms extended similarly constant top bounded type abstractions 
type expressions terms grammar types top xb terms top ranges type variables ordinary variables 
notations indicate possible occurrences variables expressions may write example represent result substituting avoiding capture bound variables 
unbounded binders abbreviate corresponding binders bound top example stands xt op expressions understood ff equivalence 
build formulae equations binary relations terms 
formulae oe oe oe oe xb oe thetab oe oe oe oe xb oe thetab oe ranges relation variables 
equality symbol subscripted type expression type terms equated 
expression unique left implicit proves necessary treating subtyping see 
basic constructs implication oe sorts universal quantification values types relations types ae theta read relation 
constructs useful altogether necessary 
writing formulae evident abbreviations 
primitive notions subtype bounded type quantification need corresponding primitive notion relations 
second order environment finite sequence type variables bounds typings variable introduced twice 
typing judgment subtyping judgment ab defined cg cg 
specify formed formulae need relation environments finite sequences relational typings ae theta relation variable repeated 
define judgment assert formed relation environment judgment holds ae theta appears formed type expressions define judgment oe rop assert oe formed formula rules atomic formulae rop ae theta rop rules example oe rop xb oe rop ae theta oe rop thetab oe rop relational formulae introduce relational formulae 
grammar relational formulae ae oe say ae relational formula write ae ae theta write ae ae theta judgment ae formed relational formula rule judgment oe rop oe ae theta example eq relational formula denoting equality relation subtyping useful new relations available example variant equality relation denoted ae theta formed environment ab 
treat relation variable ae theta relational formula 
ae oe abbreviations ae oe 
relational formula ae substituted relation variable formula oe yielding oe ae 
particular oe result substitution ae 
operations relations order give axiomatization parametricity need able combine relations exponentiation bounded universal quantification 
ae ae thetab ae aea thetab define ae ae ae theta oe ae ae ae theta ae ae theta ae ae ae theta 
ae ae theta ae ae theta define zd rae ae ae theta zd zd zd ae oe yy ae zz ae ae abbreviates ae oe ae ae ae theta ae ae theta 
suppose ae ae theta ae ae theta ae theta zd rae ae ae theta zd 
abbreviate relational formulae type expressions certain substitution relational formulae free variables 
xn bn cn ae ae ae ae ae theta ae ae theta result substituting ae 
defined cases ffl ae ae ffl ae ae ae ffl top ae eq top ffl lastly ae zd rd ae ae 
ae ae theta ae ae theta 
example eq int int req int definition applies closed write relational formula obtained 
example op op zt op req top consequence remains give axiom schemas rules order define consequence relation logic 
relation written gamma oe gamma finite set formulae formulae involved wellformed proof system parts standard rules connectives quantifiers equational axioms corresponding equational system cg schema express relational parametricity 
adopt convention axiom oe written meant sequent gamma oe asserted provided oe formulae gamma formed rules connectives quantifiers usual natural deduction 
propositional logic standard intuitionistic rules suffice purposes classical rules consistent 
rules predicate logic consist elimination rules quantifiers gamma xb oe gamma xb oe gamma xb oe gamma oe gamma thetab oe gamma thetab oe gamma thetab oe ae ae theta gamma oe ae usual provisions variable occurrences 
axioms equality include reflexivity axiom substitution axiom congruence schemas fi equalities equalities thetay oe oe xb oe xb xa fx xa fx xa top top parametricity embodied axiom schema yn xb xb eq free type variables yn free type variables yn eq eq eq yn understand convenient expand definition obtaining ae theta eq xb eq 
instantiates polymorphic value related types values obtained related 
statement expresses reynolds idea relational parametricity 
adapted calculus subtyping constraining subtypes relation included eq provably identity relation see lemma 
note top provable false nontrivial model 
explains equality relation indexed type 
basic lemmas basic provable schemas logic identity extension lemma logical relations lemma dinaturality lemma graph lemma lines pa 
lemma identity extension lemma free variables provable ua eq simple version logical relations lemma implies general require closed lemma logical relations lemma suppose closed 
provable parametricity schema types functions form category logic pa 
extending types functors impose occurrences variables negative occurrences variables positive occur free bound proceeding presents challenge 
type expression zc bound considered antimonotonic body monotonic 
lemma dinaturality lemma provable id delta id delta occurs negatively positively free bound 
order state graph lemma write hti tx free write ae op ae ae theta free consider relations equal coincide extensionally lemma graph lemma suppose free variables variables occur negatively variables positively free bound 
distinct provable ha gi op fi semantics categorical semantics parametric models investigated hasegawa reynolds ma 
categorical structures needed models investigated phoa pho 
remains combine investigations provide general categorical semantics parametric models fortunately need general notion consider particular models 
give ad hoc presentations models partial equivalence relations closed terms 
model fix partial combinatory algebra take types model partial equivalence relations pers symmetric transitive relations algebra 
triple closed relation pers iff binary relation set dom cod say subrelation write iff write identity relation type expressions receive double interpretation 
interpretation assigns type expression type environment mapping type variables pers 
second interpretation assigns relation dom cod semantic relation environment mapping relation variables relations pers 
type interpretation universal quantification xb iff xg ii jf xg jf xg 
relations xb triple xb dom xb cod ara iff apa qa ii xg proposition relates interpretations proposition type expressions type environments interpretation logic extends interpretation formulae interpreted classically type variables ranging pers ordinary variables elements domain appropriate relation variables relations appropriate pers 
relational formula ae ae theta interpreted relation pers denoted straightforward validate axioms rules inference axiom parametricity needs 
proposition applies 
needs semantic substitution lemma effect relation defined substitution relational formulae type expression relational semantics type expression relation environment induced relational formulae substituted 
second model follow construction closed term model system moggi mog 
natural contextual observational equivalence relation indexed closed type expressions closed terms type holds iff closed term type int ct int holds equational system cg iff cu int 
take types model closed type expressions 
type set ft ag say relation types relation closed 
type relation environments defined ordinary environments taken maps ordinary variables closed terms 
type ordinary environments extended type expressions terms substitution 
take judgment hold iff xa relation thetab oe oe rop define satisfaction judgment oe induction structure oe 
particular set iff 
follows lemma equality axioms valid evident sense lemma 
closed type expressions closed terms type iff tv uv closed terms type 
ghe closed terms type top 
top 
xb closed type expression closed terms type 
xb iff tc uc closed type expressions subtype rules logic valid logical relations lemma holds interpretation 
semantic substitution lemma verify parametricity schema valid essentially elements types definable 
second model logic 
systems section relate logic systems equational system cg equational system cmms equational schema expresses strachey view parametric polymorphism context system obtained combining penn interpretation parametricity assumptions 
equations equational system cg corresponds equational fragment logic parametricity 
writing provability system proposition iff provable parametricity schema 
parametricity schema derive weakening equational system difference concerns rule eq appl cmms context equivalent equation xa xa xa xa xa assuming environment hold 
variant contains rule eq appl gamma cmms context equivalent equation xa xa xa xa xa gamma type expression gamma occurs negatively occurs positively assuming environment holds 
variant system rule eq appl gamma suffices results cmms 
derivability system written gamma proposition gamma difficulty proof result derivation eq appl gamma logic 
show take relational formula 
eq parametricity xa xa xa 
eq eq may facts occurs positively type ae ae ae ae similarly negative case get xa eq eq xa 
result follows identity extension lemma 
note proof usual informal mathematical style formally logic formal version easily 
proceed similarly arguments 
equation eq appl instance general schema asserts equations type erasures assuming environment type 
type erasure term term untyped calculus obtained removing type expressions abstractions type abstractions applications 
conjecture schema derivable logic 
acc pa similar conjectures system corresponding equational schema argued express strachey view parametric polymorphism 
penn interpretation breazu tannen describe translation extension extension penn interpretation prove coherence result 
straightforwardly restricts translation extended type top 
replacing top obtain translation type expression mapped type expression example xb showing subtyping modeled arbitrary coercion 
environment mapped environment proof pi typing obtains term pi proof pi coherence result pi independent pi provable equality write pi omit definitions 
extend translation mapping logic logic pa 
translate relation environments replace declaration ae theta ae theta provable sequent oe rop associate sequent oe rop induction structure oe 
just give cases 
oe translation rop translation similarly oe xb translation rop rop translation rop 
theorem translation theorem suppose translation oe rop oe rop 
oe provable logic oe provable logic translates 
translation reflects preserve contextual equivalence relation defined 
simple prove reflection implies failure preservation set xy 

closed terms type closed term type int 
lemma yields hand easy see term fij equivalent viewed failure full abstraction penn interpretation 
fact different denotations non trivial model model defined factoring penn interpretation fully 
answering question receive different interpretations parametric model outlined section denotations top model fully 
translation logic conservative 
specifically take oe oe int 
oe provable logic parametricity oe provable logic false closed term model 
know translation conservative equations 
clear seriously take inadequacies penn interpretation 
show logic powerful supplies usual reasoning principles expect translation theorem implies logic powerful 
hand uncomfortable translation prove false statements certain sense interesting principled extension logic refute statements oe 
datatypes finite products sums existentials initial algebras final algebras treated subtyping see pa details 
addition extensible record variant types bounded existentials order sorted algebras available 
represented types logic enables prove types certain expected properties example extensible records type equal agree fields declared extensible records extensible record types treated car :10.1.1.27.9385
fixes ordered countably infinite list names takes record type pi finite set names pi greatest index element top 
type finite product categorically 
define extensible sums analogously 
available type bot necessarily initial type set sigma sigma bot 
yields categorical sum 
get effect bot op records bounded quantification combination model aspects objectoriented programming 
parametricity useful understanding issues involved approach objects 
example considered simple concerning type oint extensible records integer fields 
informally write oint fx intg think points objects 
type pp oint intended type program modifies components element arbitrary subtype oint type program moves point parametrically subtype oint 
mitchell pointed model type contains identity function value type move model 
verified general logic xa xa 
show considers type element applies parametricity scheme xa relational formula type parametric move function 
solution richer notion extensible records 
car write fx yg mean record extension contain labels fx int zg formed record type :10.1.1.27.9385
take move fx yg fx int zg fx int zg move function takes extension record type fx intg returns similar extension possibly modifying extensible records encoded shown car logic applies :10.1.1.27.9385
encoding depends enumeration labels 
assume occur say third enumeration type move function encoding int thetax thetai nt thetax 
int thetax thetai nt thetax parametricity easy show isomorphic top isomorphic may deduce theta 
theta isomorphic follows type move isomorphic int theta int 
int theta int contain genuine move function 
partially types just existential types model types mp bounded existential types model corresponding programming construct partially types cw 
partially type type representation left unspecified properties partially known virtue subtype known type 
partially types significant feature object oriented languages support abstraction wir nel 
formally bounded existentials defined bounded universals xb xb combinators pack unpack available pack xb xb unpack xb xb xb unpack identity 
unpack 
categorical characterization function xb unique function xb ffi 
show bounded existential operates relations 
bounded simulation principle derived 
rule proving equalities elements partially types omitting parameters types equalities xb holds xb thetay eq xa rule yields representation independence theorems partially types 
example type xp oint theta oint type package providing element unknown subtype oint function oint isomorphic intriguing type xp oint oint theta oint oint turn oint theta oint oint type pair oint function oint 
generally replace occurrences existentially quantified variable bound package interface provided occurrences interface positive occur freely bound 
consequence corresponding statement types xb universal quantifiers negative occurrences 
type delta xb isomorphism inverse type inclusion delta identity follows xb zx zb proved parametricity relation op graph lemma 
delta identity proved equational reasoning 
order sorted algebras initial algebras final algebras handled subtyping example initial algebra 
imagine bounded initial algebras setting xb hold obvious attempt xb 
construct variety initial order sorted algebras gm final order sorted algebras 
finite partial order set names recall section type expression vector jlj variables occurring positively bound 
formal order sorted algebra collection types bm carriers algebra functions operations algebra 
example types operations succ 
think natural numbers positive natural numbers 

order sorted homomorphism algebra order sorted algebra collection functions respects operations sense respects sorts sense bm hm bm evident type inclusions 
show initial order sorted algebra exists 
idea set sigma ml initial algebra known extension single sorted case system see example pa 
set take composite evident injection 
initial order sorted algebra 
final order sorted algebra similarly constructed final order sorted algebra 
really want improve results allow coherent overloading exemplified operation natural numbers reals 
achieved extending intersection types reynolds pierce pie rey 
straightforward extend logic handle constructs 
acknowledgments benefited discussions val pierre louis curien john mitchell 
acc mart abadi luca cardelli curien 
formal parametric polymorphism 
theoretical computer science december 
val breazu tannen thierry coquand carl gunter andre scedrov 
inheritance implicit coercion 
information computation july 
bainbridge peter freyd andre scedrov philip scott 
functorial polymorphism 
theoretical computer science january 
corrigendum april 
bl kim bruce giuseppe longo 
modest model records inheritance bounded quantification 
information computation 
bru kim bruce 
safe type checking object oriented programming language 
proceedings twentieth annual acm symposium principles programming languages pages january 
car luca cardelli 
amber 
guy cousineau pierre louis curien bernard robinet editors combinators functional programming languages pages 
springerverlag 
lecture notes computer science 
car luca cardelli :10.1.1.27.9385
extensible records pure calculus subtyping 
carl gunter john mitchell editors theoretical aspects object oriented programming types semantics language design 
mit press appear 
preliminary version appeared src research report 
cg pierre louis curien giorgio ghelli 
coherence subsumption minimum typing type checking mathematical structures computer science march 
cg pierre louis curien giorgio ghelli 
decidability confluence reduction information computation february march 
chc william cook walter hill peter canning 
inheritance subtyping 
seventeenth annual acm symposium principles programming languages pages 
acm january 
cmms luca cardelli simone martini john mitchell andre scedrov 
extension system subtyping 
information computation february march 
cw luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 
ghe giorgio ghelli 
proof theoretic studies minimal type system integrating inclusion parametric polymorphism 
phd thesis universit di pisa 
report td 
gir jean yves girard 
interpr etation elimination des coupures de arithm etique ordre sup erieur 
th ese de doctorat etat universit paris vii june 
gm joseph goguen jos meseguer 
algebra equational deduction multiple inheritance overloading exceptions partial operations 
theoretical computer science november 
ryu hasegawa 
categorical data types parametric polymorphism 
mathematical structures computer science march 
ma ma 
parametricity subtyping 
proceedings nineteenth annual acm symposium principles programming languages pages 
acm january 
mog eugenio moggi 
maximum consistent theory second order fij lambda calculus 
communication types electronic forum types theory lcs mit edu july 
mp john mitchell gordon plotkin 
types existential type 
proceedings twelfth annual acm symposium principles programming languages pages 
ma john reynolds 
types abstraction parametric polymorphism part 
stephen brookes michael main austin melton michael mislove david schmidt editors proceedings mathematical foundations programming semantics conference lecture notes computer science berlin 
springer verlag 
appear 
mth robin milner mads tofte robert harper 
definition standard ml 
mit press cambridge massachusetts 
nel greg nelson editor 
systems programming modula 
prentice hall 
pa gordon plotkin mart abadi 
logic parametric polymorphism 
bezem groote editors typed lambda calculi applications volume lecture notes computer science pages 
springer verlag march 
pho wesley phoa 
fibrations understand subtypes 
fourman johnstone pitts editors applications categories computer science volume london mathematical lecture note series pages 
pie benjamin pierce 
programming intersection types bounded polymorphism 
phd thesis carnegie mellon university december 
rey john reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages amsterdam 
elsevier science publishers 
north holland 
rey john reynolds 
preliminary design programming language forsythe 
technical report cmu cs carnegie mellon university june 
str christopher strachey 
fundamental concepts programming languages 
unpublished lecture notes international summer school computer programming copenhagen august 
wad philip wadler 
theorems free 
functional programming languages computer architecture pages 
acm 
wir niklaus wirth 
programming language oberon 
software practice experience 
