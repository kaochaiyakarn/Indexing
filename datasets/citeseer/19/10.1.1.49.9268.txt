automatic design implementation microprocessors ian page oxford university computing laboratory wolfson building parks road oxford england ox qd 
reports automatic design implementation microprocessors suit particular applications 
hardware compilation system produce synchronous hardware implementations parallel programs constructed platforms incorporating field programmable gate array transputer components host implementations 
chosen language handel essentially subset occam extensions necessary address special nature hardware implementations 
system reported take handel program mapping directly hardware transform custom microprocessor expressed handel program machine code program 
hardware compiler invoked construct resulting application specific microprocessor 
approach may benefits applications kernel inner loop complex implemented parallel hardware speed increase possible shelf microprocessors desired 
hardware compilation research group oxford working variety techniques compile programs mixture hardware software appropriate particular applications 
typically implement special purpose hardware parts field programmable gate arrays fpgas production working hardware software system reduced entirely software process 
compilation system constructed maps programs handel language closely occam synchronous hardware 
expressions compiled combinational logic evaluate single clock cycle 
control circuits assignment ready run communication take cycle language constructors add overhead time giving language remarkably simple timing calculus 
handel programs denoted ad hoc mixed occam csp style clarity compactness 
fact handel programs exist syntax form ease handling automatic transformation systems concrete syntax defined 
handel programming carried sml language 
sml meta language representing transforming handel programs turned extraordinarily useful general particular parametrisation programs 
availability hardware compiler naturally results implementation paradigms user programs compiled parallel hardware ii sequential machine code standard microprocessor 
typically paradigms simultaneously time critical parts application mapped finegrained parallel hardware rest implemented software 
paradigms essentially ends spectrum possible implementation strategies 
high speed expensive application specific parallel hardware implementations cost effective sequential software implementations general purpose microprocessors 
reports develop new paradigm lies aim exploit significantly different point cost performance spectrum 
starting observation parts applications suited microprocessor implementation run faster architecture microprocessor slightly different 
characterised machine code programmer course program run faster computer reverse bit twiddle instruction 
possibility designing implementing new processors fill gaps existed rarely possible contemplate cost 
contention situation transformed availability hardware compilation systems particularly combined fpga implementation 
implementation dlx microprocessor reported example large reduction effort necessary implement microprocessors fpga technology starting circuit diagram case 
instruction set simulator iss program common way documenting specifying simulating behaviour processor 
programs simple construct compared design processor frequently built serious begins design processor 
simply presenting iss hardware compiler output implementation processor want 
making claims viability method large scale state art processors demonstrated fast moderately complex microprocessors implemented hours general purpose fpga hardware 
lewis acceleration simulation algorithms application specific microprocessors reports impressive implementation design techniques 
having built number simple microprocessors hand designing coding iss programs compiling hardware clear designing application specific processors automated 
model processor depending code execute proven possible produce concrete implementations processors targeted applications 
student projects done bringing ideas 
reported developed 
scope parametrisation possible conceive virtually aspect computer architecture parametrised 
progress concentrated major aspects intend develop techniques outwards core incorporate architectural aspects 
top level parametrisation believe single parameter select gross style architecture find convincing common ground styles 
processor architecture principle selected library processor generators supporting set available parametrised processor styles risc cisc bus stack register oriented architecture naturally needs associated compiler source language 
constructed models far 
small ad hoc stack processor simplified model inmos transputer reported may keane arm processor 
models parametrised different ways specific architecture 
learned treat parametrisation architectures way wish develop common framework parametrised processors 
currently judgement select processor generators apply user program 
principle possible choice gross architecture automatic obvious method compile user program architecture measure code hardware size speed select architecture best fits selection constraints user 
entirely realm research 
processor generator consists compiler architecture refiner 
processor generator applies compiler user program 
compilers constructed standard lines quite tiny current systems 
working syntax input output helps considerably keep compilers small easily managed 
stage details instruction encodings datapath widths fixed output compiler machine code program 
machine code program examined architecture refiner obtain various measures statistics tailoring processor 
refiner ad hoc sml program don understand enable represent architectures common framework 
part processor represented iss program expressed handel 
refinement process iss program gradually concrete optimisations applied completely defined point submitted handel compiler converted hardware 
simple example concrete refinement machine code program declarations reveal maximum bit width integer variable set minimum datapath width main processor datapath 
example optimisation consider machine code program uses stack reverse instruction available processor model 
little point including instruction repertoire final processor removed 
world want run different program manufacture different processor 
list briefly describes areas parametrisation far able apply degree success 
instructions needed deleted 
unnecessary resources removed expression stack stack instructions floating point unit needed 

external resources rams roms channel links external devices added required 

bit width resources general purpose registers op code operand fields instruction register instruction pointer register changed suit size program 

expression stack depth set static analysis code 

language stack included excluded size determined statically program non recursive 

instruction operands shortened fit small instruction fields adding sign zero extension capability necessary 

instruction operands tabulated long operands referenced short fields instructions index processor lookup table 

instruction op codes optimally assigned instruction decoding re organised minimise instruction decoding delay 

instruction set extended requested user supplied instruction definitions 

processor optionally pipelined achieve overlapped execution instruction fetch execution 

bootstrap facilities added required 
include power boot rom channel provision reboot instruction instruction set 
processor example styles processor possible risc cisc dataflow order progress pin architectural details chosen style 
informally defining instruction set processor engineering insight experience real world processors designed 
architecture refiner fairly large sml program shown 
choose show sample output processor generator optimisation done 
program simple application inputs integers calculates outputs sum squares 
program compiled directly hardware handel compiler produces netlist latches gates 
combinational logic large bit parallel multipliers implied program 
give exact program simple processor generators produces iss program shown 
note processor proc main chan int cin cout int true seq cin cin cout 
simple application program 
proc main chan int cin cout val int code 
initial int iptr int inst int mem true seq inst iptr code iptr iptr case inst inst ldc mem inst lda mem inst sta add mul rev iptr inst jmp 
iptr inst skip iptr inst skip cin cout default resulting iss program 
constructed specifically purposes presentation claim useful general purpose processor probably failed case 
programmer able understand iss program exception non occam operators introduced handel expressly deal bit string extraction concatenation 
related occam shift mask operations fundamentally different deal expressions arbitrary width handel expressions different widths essentially different types 
motivation operators width typing variables expressions handel afford pay price say bit hardware registers store single boolean value 
example vastly different costs hardware software implementations 
software rarely want pack booleans word massively increased cost accessing 
handel bit string manipulation operations delivers significant bits expression nn drops significant bits expression bitwise concatenation 
operations frequently necessary applications close hardware mechanisms bus restriction merging 
note gates needed implement operations hardware 
feel operators expressive shift mask counterparts standard sequential languages 
data width specified source program particular processor bits wide 
nature input output caused channels corresponding instructions added processor 
case code rom data memory mem constrained width 
lengths memories padded power trimmed exactly size required 
chosen harvard architecture separate instruction data memories ought known architecture technique somewhat earlier 
entire instruction set trivial processor included suppressing automatic removal unnecessary instructions 
default stack depth optimised 
purpose presenting simply show style processors dealing fully optimised processor programs difficult read 
netlist version latches gates smaller previous version due fact multiplications sequentially share single bit combinational multiplier 
exactly sort sequential resource sharing microprocessors attractive implementation strategy certain programs 
microprocessor version slower course 
original program produce output clock cycles kept fed data processor version takes clock cycles 
seen clearly assembler style listing contents code memory sta sta lda lda mul lda lda mul add jmp speed doubled automatic pipelining invoked increased conventional code optimisations applied machine code program squaring instruction added instruction set possible generators 
size processor version reduced unused resources removed 
created microprocessors automatically sequential subset handel 
transformations exist render parallel programs sequential ones 
fact handel hardware compiler simple parallel assignment scheduler exactly transformation agent 
implementing parametrisation step producing parametrised processor determine bit widths major processor resources information gleaned original program compiled assembler program 
width data memory associated data paths simply chosen maximum widths variables channels user program 
simple way choose multi word representations automatically sidestep problem treating data refinements pre transformations application program 
tackle problem different word sizes application simply pad data representations size largest 
correct way handle problem 
compiling optimising application assembler code depth expression stack statically determined recursion allowed occam handel 
typically depends completely compilation optimisation strategies chosen greater single stack expression evaluation procedure environments 
choose various stack implementation options depending size stack user provided constraints 
currently supported options hardware lifo ii chip ram stack pointer ii chip ram chip stack top caching 
nice algorithm compiling stack code expressions inmos developed occam compilers 
width op code chosen counting number different instructions compiled application 
width instruction determined largest operands program including short tabular long operands 
similar arguments sufficient set resource sizes processor 
unfortunately simultaneous minimisation values combinatorial nature 
heuristic consists making initial estimate certain values minimising values context refining estimate repeating minimisation possible steepest descent search 
processor simple instruction format packs opcode single short operand instruction word 
complex processors allow double word instructions word contains part operand 
short operand additional word simply concatenated form complete operand 
tabulate operands order save instruction encoding space 
done instruction basis 
ldc instruction example assembler code examined ldc operands fit short operand format finished 
long operands distinct operands indexed short operand table operands built ldc instruction modified table 
distinct operands indexed instruction left 
clearly optimisation strategies possible improve performance allowing tabulated instruction forms simultaneously 
conventional rom optimisation strategies applied resulting tables 
final optimisation tables contain single value replaced value 
branch instructions treated similarly tabulation process interacts jump optimisation problem 
conventional manner assume branches short form lengthen necessary 
needs quadratic iterative algorithm obtain minimal code size 
additional problem process jump instruction table overflows short tabular instructions lengthened effectively de instruction 
investigated sharing operand tables instructions worthwhile optimisation likewise hierarchical tables 
user specified instructions processor generators take note user provided constraints application program 
particular fragments program included additional instructions processor 
example user modify program follows cout operator signifies expression incorporated microcode new instruction 
fact happens expression carried uninterpreted case statement iss program 
forcing interpretation occur hardware run time 
particularly neat simple way achieving measure hardware software design 
simple operand operator single expression compiles wholly combinational hardware control data state worry interface rest implementation trivial 
automatic pipelining practice handel code individual instructions equivalent microcode conventional implementation relatively simple 
case operands code fragments immediately available chip variables symbolically execute code reduce single parallel assignment 
point structure processor code largely loop containing sequentially executed parallel assignments instruction fetch instruction execution executing clock cycle 
processor throughput nearly doubled overlapping operations instruction fetching execution 
done replicating fetch statement pushing arm case statement identities true true op op 
op op represents processor microcode 
bringing instruction fetch fragment head program implements necessary priming instruction pipeline 
transformations remove sequential compositions turn arm parallel assignment 
instructions operate arithmetic logical data typically straightforward deal sources problems transformation input output instructions ii branch instructions iii double word instructions covered 
input output task implementing input output instructions somewhat eased interpretation handel consistently synchronous 
means additional laws true handel generally true occam 
particular sharing variables parallel processes parallel statements perfectly defined long provide proof variable updated single clock cycle 
take example processor element chip stack look pipelined microcode instruction inputs external channel stack find jj ir code jj cin jj jj instruction pointer ir instruction register cin external input channel hold expression stack 
synchronous interpretation handel generally true jj defined distinct variables may referenced case statement equivalent occam parallel assignment 
direct consequence fact channel communication simply distributed assignment means instruction problem communication happen synchronously assignments earliest possibly updated assignment executes 
turn output instruction destructively outputs top stack external channel find immediately remove sequential operation cout jj ir code jj jj simply way maintaining single cycle behaviour channel immediately willing accept output 
necessary provide way withdrawing offer communicate better provide mechanism test readiness channel communicate handel 
transform fragment cout jj ass ready cout 
cout ass ass represents assignments program 
branch instructions simple processor model branch instructions cause problem possible handel evaluate expression address memory chip ram result single clock cycle 
microcode branch instruction simply evaluates branch condition loads ir registers sequential instruction branch 
example ir code opnd ir skip ir opnd code code architecture conditional branch instructions contribute longest combinational logic paths final hardware set upper bound clock speed 
unacceptable particular case pipeline transformation applied program split instruction fetch clock cycles 
effect reducing worst case combinational delay expense complex pipeline priming flushing code 
inevitable consequence pipelining data dependent computation handel programmer gets choice strategy 
double word instructions double words architecture necessary change code access mechanism required maintain execution rate instruction clock cycle 
clearly instruction fetch mechanism needs deliver words clock 
consequently automatically double width code store interface 
necessary pad concrete machine code double word instructions target branch instruction lie double word boundary 
maintains single cycle execution cost slightly greater code size 
optimisation modify microcode instruction pointer increased short instruction word word instruction register detects padding op instruction second word 
modification clock cycle wasted executing padding instructions 
laws program transformation point leave description parametrised processors look basis method ensuring correctness processor implementations 
programming language occam turn hoare csp 
consequence rich set laws apply programs transformational algebra massage user program form amenable particular implementation technology 
transformational laws take user program massage form iss program appropriate machine code program 
laws correctness preserving know iss program designed method correct machine code program runs 
show simple example style transformation give reader confidence way move soundly user program processor version 
start simple user program transformation replace distinct variable user program variable linearly addressed memory equivalent memory allocation task performed conventional compiler 
integer constants stand distinct indices array corresponding variables transformed program transformation breaks program small fragments corresponding instruction desired processor 
stage corresponds code generation conventional compiler 
case assume simple address processor single processor register transformation course hide new variable ignore small details 
introduce names small integer constants instruction shaped fragments 
time fragments parametrised memory variable 
example call parametrised fragments load add store 
require additional variables opcode opnd hold operation code operand address current instruction 
variables linear memory eventually processor registers 
introduce definition assist microcode case opcode load opnd add opnd store opnd translate fragment program assigning appropriate values opcode opnd variables simultaneous assignment 
executing microcode assignment exactly effect original fragment 
get opcode opnd load microcode opcode opnd add microcode opcode opnd store microcode put opcode opnd instruction specifiers second memory array ll call code 
preload code array necessary instructions execute program referring contents code array values 
take opportunity simple data refinement pack opcode opnd values single quantity round brackets represent packing unpacking refinement 
preloading program defined bootstrap code load code add code store program transformed bootstrap opcode opnd code microcode opcode opnd code microcode opcode opnd code microcode aiming application specific processor considerably simplify final system choosing particular implementation semicolon program 
noting code memory altered assignments programming code read memory hold code effectively execute bootstrap program factory builds processor 
aim transformations identical statement body sequential program 
mapped hardware statement shares processor hardware 
getting quite close ideal differences statements program code array indices 
sequential statements particularly simple replace index constants variable incremented appropriately 
introduce additional instruction pointer variable iptr get bootstrap iptr opcode opnd iptr code iptr iptr microcode opcode opnd iptr code iptr iptr microcode opcode opnd iptr code iptr iptr microcode nearly achieved goal 
remains loop theorem repeated pattern statements give final form iss program bootstrap iptr iptr opcode opnd iptr code iptr iptr microcode program form processor loop compiled hardware 
microcode program appears shared instructions executed processor 
transformations shown proven correct constructive proof correctness microprocessor implementation 
worked example deliberately avoids complex aspects transformation transformation programs incorporate parallelism conditionals loops 
transformations exist reader referred associated 
dynamic bootstrap processor running program may advisable implement code memory random access memory contain different programs different times 
spirit development transform bootstrap program turning parallel program 
introduce bootstrap channel pass code values preceded count value bootstrap terminate immediately reading value 
choosing send values reverse order identifying bootstrap counter variable iptr drop initialisation iptr program 

store 
add 
load jj iptr iptr code iptr iptr iptr gamma split bootstrap parallel processes choose implement process different mechanisms 
typically program transformed put transmitting process parallel sequential composition receiving process main iss loop 
point bootstrap receiver iss loop compiled hardware left open implement transmitting process 
sequencer case usually host transputer 
put bootstrap transmitter parallel rest processor needs transformation ajj clearly true cases 
mathematics necessary derive conditions equation slight generalisation termination event may alphabet component parallel composition alphabet 
termination parallel construct determined precisely termination events alphabets 
case conditions need ffa ii ffa oec iii ffa ffb ffc oec set events performed execution subset alphabet 
conditions parallel combination terminates interrupting execution point 
naturally engineer things bootstrap transmitter quiescent point 
shown general terms application program transformed microprocessor version program 
transformations beneficial effects compiling hardware programs significant degree sequential sharing expensive hardware resources 
shown wide range possible description processor tailored particular application program 
process fast automatic implementing microprocessors fpga technology 
quickest taken simple application program hardware mips processor version minutes 
demonstrated basis method prove correctness microprocessor version program 
taken quite far basis processor transformation set correctness preserving laws give high degree confidence resulting designs 
extending range parameters intend collect various experiments processor synthesis library processor architectures 
architecture paired appropriate compiler 
user know architectural style appropriate possible compile automatically available architectures perform time space analysis resulting processors select best fits set user provided constraints 
development constraint compilation techniques challenging activity 
details required author contacted address email ian page comlab oxford ac uk 
number related publications available anonymous ftp ftp comlab ox ac uk directory documents ian page due esprit map horn programmes supporting 
debt duncan robin watts efforts projects implementing improving concepts parametrised processors gratefully acknowledged 
steve schneider proving bootstrap transformation 
due members hardware compilation research group working pleasure 

risc os programmers manuals 
computers 
bowen jifeng 
approach verifiable compiling specification prototyping 
ma nski editors programming language implementation logic programming plilp volume lecture notes computer science pages 
springer verlag 
barry fagin 
prototyping dlx microprocessor 
proc 
ieee workshop rapid system prototyping pages 
duncan 
processor generation field programmable gate arrays 
master thesis oxford university computing laboratory road oxford ox qd 
jifeng page bowen 
provably correct hardware implementation occam 
milne pierre editors correct hardware design verification methods proc 
ifip wg advanced research working conference volume lecture notes computer science pages 
springer verlag 
hoare 
communicating sequential processes 
international series computer science 
prentice hall 
hoare 
refinement algebra proves correctness compiling specifications 
morgan woodcock editors rd refinement workshop workshops computer science pages 
springer verlag 
hoare jifeng 
refinement algebra proves correctness compiler 
broy editor programming mathematical method international summer school directed bauer broy dijkstra hoare volume nato asi series computer systems sciences pages 
springer verlag 
hoare page 
hardware software closing gap 
transputer communications xx xx may 
ian page wayne luk 
compiling occam fpgas 
fpgas pages 
ee cs books 
david lewis marcus daniel wong 
field programmable accelerator compiled code applications 
buell pocek editors proc 
ieee workshop fpgas custom computing machines pages 
inmos limited 
occam manual 
international series computer science 
prentice hall 
inmos limited 
transputer instruction set manual 
inmos limited 
wayne luk vincent ian page 
hardware acceleration divide andconquer paradigms case study 
buell pocek editors proc 
ieee workshop fpgas custom computing machines pages 
david may catherine keane 
compiling occam silicon 
communicating process architecture 
prentice hall inmos 
david patterson john hennessy 
computer architecture quantitative approach 
morgan kaufmann san mateo ca 
dlx microprocessor spec 
laurence paulson 
ml working programmer 
cup 
roscoe hoare 
laws occam programming 
theoretical computer science 
robin watts 
applications field programmable gate arrays 
undergraduate project thesis oxford university computing laboratory road oxford ox qd 
xilinx san jose ca 
programmable gate array data book 
