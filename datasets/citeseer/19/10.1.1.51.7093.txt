genetic algorithm minimax optimization problems jeffrey herrmann department mechanical engineering institute systems research university maryland college park maryland eng umd edu robust discrete optimization technique structuring uncertainty decision making process 
objective find robust solution best worst case performance set possible scenarios 
difficult optimization problem 
proposes space genetic algorithm general technique solve minimax optimization problems 
algorithm maintains populations 
population represents solutions 
second population represents scenarios 
individual population evaluated respect individuals population 
populations evolve simultaneously converge robust solution worst case scenario 
minimax optimization problems occur areas algorithm wide variety applications 
illustrate potential space genetic algorithm solve parallel machine scheduling problem uncertain processing times 
experimental results show space genetic algorithm find robust solutions 
decisions involve uncertainty 
researchers begun study problems develop approaches finding robust solutions best worst case performance set possible scenarios 
difficult optimization problem general techniques exist 
yu discuss approaches handling uncertainty review robust discrete optimization problems complexity results solution procedures 
proposes space genetic algorithm general technique solve minimax optimization problems 
algorithm maintains populations 
population represents solutions 
second population represents scenarios 
individual population evaluated respect individuals population 
causes algorithm converge robust solution worstcase 
minimax optimization problems occur areas algorithm wide variety applications 
illustrate algorithm potential algorithm solve parallel machine scheduling problem uncertain processing times 
objective find schedule minimizes worst case makespan 
experimental results show space genetic algorithm find robust solutions 
remainder structured follows section describes robust discrete optimization problems 
section presents space genetic algorithm 
section describes parallel machine scheduling problem 
section presents experimental results 
section concludes identifying topics research extend algorithm utility 
robust discrete optimization problems making decisions uncertainty difficult problem 
accepting structuring uncertainty lead effective decision making 
stochastic optimization recognizes uncertainty asks decision maker assign probability distributions possible outcomes 
solving associated optimization problem select decision best average performance time select decision best performance expected outcome 
robust discrete optimization hand seeks identify decisions perform circumstances 
criteria available reasonable choice minimax criterion allows identify robust decision solution best worstcase performance 
robust discrete optimization described yu uses scenarios structure uncertainty 
intuition decision environment define set scenarios 
scenario set represents possible 
scenario occurs positive unknown probability 
general robust discrete optimization problem formulated follows 
set solutions 
set possible scenarios 
performance solution scenario 
problem find solution best worst case performance minimizing solutions maximum scenarios performance min max general robust discrete optimization problems difficult solve deterministic versions uncertainty 
robust discrete optimization versions polynomially solvable optimization problems nphard easily solvable cases exist 
results general area minimax theory see du pardalos 
yu describe branch bound algorithm uses surrogate relaxation generate bounds procedure solve robust optimization problems 
general techniques solving robust discrete optimization problems 
authors proposed genetic algorithms problems uncertainty 
information genetic algorithms see example 
ghosh genetic algorithm applies noise decoding procedure 
allows algorithm find solutions performance insensitive small changes solution values 
results functions dimensional search spaces 
explicitly consider scenarios robust discrete optimization problems 
design robust control systems important related area authors proposed genetic algorithms problem 
falcao consider robust decentralized power system damping controllers genetic algorithm find designs maximize sum spectrum damping ratio operating conditions 
measure robustness probability system behave unacceptably 
genetic algorithm find parameter values minimize probability 
stochastic optimization approach genetic algorithm handle uncertainty estimating cost function evaluated directly 
tang man gu genetic algorithm search distillation column controllers perform possible plant characteristics 
problem plants formulate multiple objective problem genetic algorithm find non dominated solutions 
authors note large set scenarios problem efficiently determining solution worst case performance remains 
problem space genetic algorithm addresses 
space genetic algorithm propose space genetic algorithm finding solutions minimax optimization problems 
section space genetic algorithm discuss motivation 
space genetic algorithm maintains distinct populations individuals represent solutions individuals represent solutions solution objective function evaluates solution worst case performance respect second population algorithm penalizes large rewards small solutions better worst case performance survive 
similarly scenario objective function evaluates best solution population minff algorithm penalizes small rewards large scenarios worse optimal solutions survive 
instance consider example displays hypothetical populations solutions scenarios 
entry cell table 
survive best worst case performance survive poor optimal solution 
example scenario solution traditional simple genetic algorithm steps 
create initial generation 

individual evaluate fitness 

create generation reproduction crossover mutation 


equals maximum number generations return step 
space genetic algorithm summarized follows 
create initial generations 

individual evaluate 
individual evaluate minff 
create generation reproduction crossover mutation 

create generation reproduction crossover mutation 


equals maximum number generations return step 
algorithm motivated need search spaces possible identify reasonable time worst case performance solution 
set large searching set max solution search finds 
set large repeatedly searching determine max lead excessive computational effort 
space genetic algorithm reduces computational effort needed 
takes sample population set scenarios allows evolve algorithm searching solutions 
searches spaces simultaneously 
evaluating solutions parallel uses scenarios solutions 
chosen objective functions encourage space genetic algorithm converge robust solution 
prove convergence argument provides necessary insight 
suppose exists solution scenario min max consequently min max max min initial populations sufficiently large approximately max 
likewise approximately min 
populations converge consider generation 

survive 
similarly 
survive 
consequently see case genetic algorithm converge robust solution solution worst case scenario 
test potential space genetic algorithm solve specific robust discrete optimization problem 
discussing implementation details space genetic algorithm scheduling problem consideration 
parallel machine scheduling wide variety parallel machine scheduling problems 
provides review important research results 
previous considered deterministic scheduling information known ahead time stochastic scheduling information known probability distribution 
consider problem general uncertainty 
previously daniels studied scheduling problems uncertain processing times developed methods optimize worst case performance 
addition researchers developed genetic algorithms find solutions deterministic scheduling sequencing problems see example 
consider problem 
finite set jobs set parallel identical machines 
jobs available current time 
job requires processing machines 
job processing time uncertain 
available data lower bound upper bound required time 
problem create schedule minimizes total time needed complete jobs 
preemption allowed 
rescheduling occur processing begins 
fj jn set jobs 
job minimum processing time maximum processing time machines mm decision variables nm binary variables jk jk assigned machine assignment feasible assignment solution job jk 
set solutions 
scenario combination realized processing times 

job set possible scenarios 
makespan solution scenario makespan maximum total processing time machine max km jk problem minimize schedules maximum possible makespan min max space genetic algorithm find robust solutions 
simple problem easy find worst case scenario judge space genetic algorithm performance 
note solution worst case scenarios jobs require maximum processing time 
represent scenario 
max 
min minimum worst case performance 
lower bound worst case performance experiments described consider instances machines jobs 
machine jobs 
second lower bound sum smallest maximum processing times number jobs combines lower bounds min 
experimental results implement space genetic algorithm genesis genetic algorithm software developed john grefenstette 
modified code algorithm creates maintains populations 
individual population evaluated respect individuals population 
run algorithm created generations population 
population individuals 
algorithm elitist strategy copied best individual generation generation 
recall solution assigns job machine scenario combination processing times 
objective minimize worst case schedule makespan 
problem generation tested space genetic algorithm randomly generated problem instances 
instances identical parallel machines 
created various problem sets instances 
various parameters governed instance generation 
problem size jobs 
parameters ff ff governed processing times 
job minimum processing time selected uniform distribution range ff 
ff equals 
job maximum delay selected uniform distribution range ff 
ff equals 
maximum processing time set instances denoted combination parameter values 
combinations ff ff instances altogether 
solve problems genetic algorithm uses bit strings 
individual populations genes job 
gene contains bits 
individuals population represent assignments 
transforming gene value integer set gene identifies machine job assigned machine 
jk jp individual second population represents scenario transforming gene value real number interval gene describes job realized processing time results evaluate algorithm compare solutions lower bound described section 
addition standard version genesis find solutions problem min 
recall scenario worst case scenario optimal makespan problem optimal makespan robust scheduling problem 
results relative lower bounds averaged instances problem set 
instance algorithm finds solution worst case performance lower bound instance algorithm average relative performance table lists results 
deviation lower bound algorithms 
shows genetic algorithm able find robust solutions 
problem set space worst case ff ff genetic algorithm optimization table results parallel machine scheduling problem summary space genetic algorithm suggested general technique solving minimax robust discrete optimization problems 
space genetic algorithm useful solving minimax optimization problems wide variety domains 
particularly useful determining worst case scenario difficult problem due number scenarios 
illustrate potential algorithm solve parallel machine scheduling problem uncertain processing times 
particular problem find lower bounds evaluate algorithm performance 
results show space genetic algorithm suitable technique robust discrete optimization problems 
specific problem considered verify exists solution scenario min max algorithm may require adjustment solve problems condition hold 
preliminary results suggest maintaining diversity population scenarios may necessary 
second population converges just scenario population converge solutions optimal scenario 
solutions may terrible performance scenarios 
evaluating scenario worst case scenario may appropriate objective function sharing mechanisms maintain variety worst case scenarios second population 
yields accurate evaluation individuals population causes converge truly robust solutions 
possibility give individual memory individual survives intact generation compare performance respect current population scenarios worst case performance past 
yields accurate evaluations 
bibliography daniels robust scheduling hedge processing time uncertainty production management science volume number pages 
davis ed handbook genetic algorithms van nostrand new york 
du ding zhu panos pardalos minimax applications kluwer academic publishers dordrecht 
goldberg genetic algorithms search optimization machine learning addison wesley reading massachusetts 
herrmann jeffrey chung yee lee solving class scheduling problem genetic algorithm orsa journal computing vol 

herrmann jeffrey chung yee lee jim global job shop scheduling genetic algorithm production operations management volume number pp 

holland adaptation natural artificial systems university michigan press ann arbor michigan 
daniels robust scheduling machine flow shop uncertain processing times working school business duke university 
panos gang yu robust discrete optimization applications kluwer academic publishers norwell ma 
christopher robert robust control system design random search genetic algorithms ieee transactions automatic control volume number pages 
dirk evolutionary search job shop investigations genetic algorithms production scheduling heidelberg physica verlag 
michalewicz genetic algorithms data structures evolution programs springer verlag berlin 
michael scheduling theory algorithms systems englewood cliffs prentice hall 
tang man 
gu structured genetic algorithm robust infinity control systems design ieee transactions industrial electronics volume number pages 
falcao robust decentralised control design genetic algorithms power system damping control iee proceedings 
generation transmissions distribution volume number pages 
ashish ghosh genetic algorithms robust solution searching scheme ieee transactions evolutionary computation volume number pages 
