hilog foundation higher order logic programming chen michael kifer david warren department computer science state university new york stony brook stony brook ny describe novel logic called hilog show provides suitable basis logic programming traditional predicate logic 
hilog higher order syntax allows arbitrary terms appear places predicates functions atomic formulas occur predicate calculus 
semantics order admits sound complete proof procedure 
applications hilog discussed including dcg grammars higher order modular logic programming deductive databases 
keywords logic programming higher order logic contextual predicate calculus order semantics resolution theorem proving database languages object oriented databases modular programming dcg grammars 
preface manipulating predicates functions atomic formulas commonplace logic programming 
example prolog combines predicate calculus higher order meta level programming working system allowing programmers routine generic predicate definitions transitive closure sorting predicates passed parameters returned values 
known useful feature call meta predicate prolog 
applications higher order constructs database context pointed works including :10.1.1.48.7149
predicate calculus provides basis prolog support features consequently ad hoc status logic programming 
investigate fundamental principles underlying higher order logic programming particular shed new light prolog features appear practice 
propose novel logic called hilog provides clean declarative semantics higher order logic programming 
outset terminology higher ill defined 
number works proposed various higher order constructs logic framework diversity syntax semantics clear kind higher claimed :10.1.1.48.7149
opinion different facets issue higher order expanded version previously reported 
address computer science engineering southern methodist university dallas tx 
kifer partially supported nsf iri 
syntax higher order semantics logicians long aware distinction example enderton page describes translation syntactically second order predicate calculus order multi sorted logic admits order semantics 
informally higher order syntax logicians mean language variables allowed appear places normally predicate function symbols 
contrast higher order semantics manifested semantic structures variables may range domains relations functions constructed domains individuals 
order semantics variables range domains individuals names predicates functions 
third component picture equality theory built semantics logic 
explained equality theory may bring order higher order semantics closer 
extreme case theory may imply correspondence domain individuals domains higher order constructs 
case higher order order semantics virtually indistinguishable 
note classification semantics implication whatsoever regarding intrinsic higher exists sound complete proof theory higher order semantics 
quite possible replace higher order semantics languages entailment equivalent order semantics 
hand known semantics standard semantics second order predicate calculus inherently higher order equivalent order substitute exists corresponding languages 
predicate calculus primary example logic syntax semantics firstorder 
logics higher order syntax order semantics 
logic example hilog discussed falls category :10.1.1.48.7149
examples logics higher order syntax semantics include col church simple theory types standard henkin semantics 
hand ldl language order syntax higher order semantics 
examine equational theories underlying various logics closely 
higher order semantics equation predicate function symbols true symbols interpreted relation resp function 
way saying logics higher order semantics built extensional equality theory predicates functions 
contrast hilog logic predicates higher order syntactic objects equal names equated explicitly 
possible predicate symbols say interpreted relation equality false 
examples represent extreme cases sense 
higher order languages order semantics embody non trivial equality theory 
example subset prolog type variables syntax essentially church simple theory types 
equality prolog corresponds equivalence extensional may exist predicates equivalent extensionally equal 
better see role equational theories classification logical theories note different aspects associated expression denotes predicate function 
instance prolog aspect meaning expression term precisely equivalence class terms call intension aspect relation function associated expression call extension 
aspects indistinguishable extensionality axioms built logic 
instance henkin semantics church type theory difference predicate variables considered range domain interpretation predicate names predicate intensions relations predicate extensions extension associated exactly intension vice versa 
distinction intensions extensions important 
known extensions notoriously difficult handle efficient manner 
separating intensions extensions possible equational theory predicate function names separate extensional equality relations functions 
logic avoids overly strong equational theory intensions simple order semantics decidable unification problem time higher order syntax 
type free logic term may appear different contexts predicates functions different arities atomic formulas 
intension associated different extensions different contexts 
instance lambda calculus term considered function object depending syntactic position 
hilog symbol may denote predicate function atomic formula 
semantics type free logic maintain distinctions various extensions associated intension 
variable may appear different contexts different extensions better sense variables range intensions extensions intensions remain different contexts 
simple logical framework predicates functions atomic formulas manipulated class entities 
quite clear order support manipulation naturally syntax higher order 
explained earlier leaves open possibilities semantics 
higher order semantics predicates functions identified extensions predicates represent thing extensions coincide appropriate semantic structure 
unfortunately extensional equality predicates functions decidable general carries unification problem 
genuine second order theories second order predicate calculus church simple theory types standard semantics extensional equality semi decidable 
contrast order semantics predicates functions intensions manipulated directly 
furthermore depending context intension may assume different roles acting relation function proposition 
logical consequence relation order semantics semi decidable strong equality theory destroys property 
observation motivates choice hilog 
basic idea construct logic distinguishes intensional extensional aspects semantics embodies trivial equality theory intensions 
intensions thought names concrete entities extensions correspond various roles entities play real world 
argued shapiro knowledge representation part conceptual structure cognitive agents contain extensions 
reason cognitive agents direct access world representations 
approach spirit consequently extensions predicates functions available direct manipulation 
hand intensions higher order entities predicates functions atomic formulas freely manipulated 
extensions come play respective expressions need evaluated 
hilog combines advantages higher order syntax simplicity order semantics benefiting 
rest organized follows 
brief motivational discussion formally syntax semantics hilog 
give examples applying hilog higherorder logic programming dcg grammars modular logic programming 
discuss relationship hilog predicate calculus relationship proposed database rule thumb exceptions 
instance type theory henkin semantics proof theory despite fact henkin semantics higher order 
contrast certain strains order annotated logics complete proof procedures may exist general 
languages discussed section 
resolution proof theory hilog described section 
syntax semantics hilog motivation prolog syntax quite flexible allows symbols assume different roles depending context different arities viewed constant function predicate 
instance clause 
symbol occurs unary binary function appears binary predicate binary function symbol 
furthermore syntactic object atomic formula literal clause body individual term second 
support multiple roles non logical parameters constants functions predicates handy feature prolog unfortunately support provided ad hoc way 
instance example different occurrences symbol semantically disambiguated simply renaming occurrences done rule individual variable occurs order term atomic formula renaming different occurrences intuitively yield semantically different statement 
hilog supports multiple roles parameter symbols general elegant manner 
parameters distinction predicate function constant symbols eliminated 
particular hilog term constructed logical symbol followed finite number arguments 
different occurrences parameter related object characterized intension 
associated intension different extensions capture different roles symbol may assume different contexts 
view extended arbitrary terms 
hilog allows complex terms just parameter symbols viewed functions predicates atomic formulas 
example generic transitive closure predicate defined follows closure 
closure closure 
closure syntactically second order function relation returns transitive closure closure 
generic definitions various ways 
instance parent john bill 
parent bill bob 
manager john mary 
manager mary kathy 
relation parent 
relation manager 
reports person superior relation closure person superior 
return bill mary bob kathy response query reports john set john ancestors 
various applications prolog require term traversal 
hilog binary terms traversed follows traverse traverse traverse 
notice variable ranges functors language program independent alphabet language 
contrast prolog specify rule functor alphabet program traverse traverse traverse 
traverse traverse traverse 
built predicate arg traverse tree arg tree left arg tree right traverse left traverse right 
structure tree visible enforced add subgoal checking total number arguments 
databases schema browsing common 
hilog browsing performed query language data retrieval 
instance relations 
relations 
relations john 
return names binary predicates extensions herbrand interpretations contain tuples token john 
hilog shares browsing capability proposed language called logic :10.1.1.48.7149
ability sets important logic programming 
prolog supports sets means setof construct operational semantics 
newer logic languages ldl col provide semantics sets severely restrict avoid logical paradoxes computational intractability 
hilog sets represented naturally parameterized predicates mentioned earlier 
instance hilog rule defines groups satisfied employees working manager 
employee satisfied job earns boss sat empl boss empl supervises boss empl salary boss sal salary empl sal sal sal 
set term sat empl boss akin setof grouping constructs prolog ldl respectively hilog sets constructed way 
having defined sets intensionally terms go sets relationships fragment associates packages benefits groups satisfied employees package health ins 
package life ins 
package free car 
package long vacations 
benefits package sat empl john 
benefits package sat empl bob 
query regarding benefit packages bob enjoys employee enterprise benefits bob 
note information sets encoded prolog naturally 
detailed discussion issues appears sections 
seen earlier examples hilog terms atomic formulas 
capacity semantics indirectly captured truth value assigned ground term 
instance saying pair relation predicate say term denotes true proposition 
formal details provided subsections 
language addition parentheses connectives quantifiers alphabet language hilog contains countably infinite set variables countable set parameter symbols 
assume disjoint 
set hilog terms minimal set strings alphabet satisfying conditions ffl ffl 
notice definition term applied finite number terms parameter symbols 
atomic formula term 
complex formulas built atomic formulas usual way means connectives written quantifiers 
addition ae denote implication oe oe ae oe 
likewise oe oe oe stand oe 
bi directional implication standard definition 
literal atomic formula positive literal negation atomic formula negative literal 
clause form literals variables occurring usually written simply clause called empty clause 
horn clause clause contains positive literal 
definite clause horn clause form atomic formulas definite clauses usually written head conjunction body clause 
negative clause clause containing positive literals 
goal conjunction literals query negation goal written negative clause 
practical applications consider definite logic programs consist finite number definite clauses 
section briefly deals logic programs negation 
usual logic programming literature denote conjunction literals clause body 
semantic structures glance semantics hilog may bit unusual precede formal description informal discussion shows semantics order predicate calculus evolved support higher hilog 
define herbrand semantics especially close herbrand semantics predicate calculus 
herbrand universe hilog language set ground variable free hilog terms terms hilog atomic formulas follows herbrand universe identical herbrand base cf 

coincidence want manipulate atomic formulas terms elements universe 
herbrand interpretation simply subset herbrand base universe definition herbrand interpretation commonly logic programming 
definition formula satisfaction interpretations simply repeats corresponding definition 
herbrand interpretations suffice needs logic programming important reasons interested general notion semantic structure programs equality semantics negation failure 
recall order predicate calculus semantic structure language pair called domain function interprets parameters constants function symbols predicate symbols 
consists different mappings interprets ary function symbol function gamma 
mapping maps ary predicate symbol ary relation consider constants ary function symbols takes care constants 
follows function symbol stand predicate name stand 
note set function symbols set predicate symbols disjoint 
hilog original goals eliminate syntactic distinction constants function symbols predicates tell constant predicate function symbol 
map parameter symbol element function relation goals symbols 
symbol mapped infinite tuple functions relations arity 
subtlety 
interpret formula variable 
predicate calculus formulas interpreted respect variable assignment mapping gamma 
element semantic domain order interpret respect associate relations elements parameters interpreting mappings associate functions relations element including symbols usual development predicate calculus extend variable assignment recursively set terms follows ffl parameter symbol ffl 
truth atomic formula determined respect ary relation associates respect ary relation say dismiss utility typing 
contrary distinguish formedness typing feel orthogonal concepts 
goal relax stringent formedness requirements predicate calculus preserving ability talk type correctness 
attempt introduce types hilog described 
true false associates 
alternatives reasonable second results uniform treatment hilog terms 
furthermore turns certain natural assumptions choices lead semantics 
easy see adopting second alternative obviates need need classify elements domain intensions true false propositions 
simple way introducing subset true designates propositions true coming back herbrand interpretations discussed section see herbrand case true precisely subset herbrand base determines interpretation 
informal ready formal development 
semantic structure hilog quadruple true ffl nonempty set intensions domain ffl true subset specifies elements intensions true propositions ffl gamma 
function associates intension logical symbol ffl gamma 
gamma 
function th projection denoted function gamma 

denotes cartesian product sets gamma 
set functions map semantic structure variable assignment gamma 
extend recursively set terms follows ffl ffl 
oe atomic formula 
satisfied denoted oe oe true see hilog term may represent individual function predicate atomic formula different contexts 
intension term associated element universe extensional aspects terms captured follows 
extensional aspect term viewed proposition truth value defined membership true extensional meaning term capacity function captured example term appears ary function extensional meaning variable assignment th projection vector functions associated intension hand role term proposition indirectly captured true true true meaning complex formulas defined standard way ffl oe oe ffl oe oe ffl oe oe ffl oe variable assignment may differ oe ffl oe variable assignment may differ oe closed formulas formulas variables quantified oe depend write simply oe 
interpreted symbols true false incorporated hilog requiring interpretations satisfy restrictions ffl true true ffl false true ffl true delta delta delta denote element 
compared higher order logics church theory types prolog hilog treats atomic formulas class objects 
formulas contain connectives built hilog making connectives constants requiring semantic structure satisfy conditions ffl true true ffl true true ffl true true alternatively connectives defined hilog clauses encoding formulas quantified variables require abstraction hilog done scope 
relationship prolog predicate calculus section show various perspectives hilog defined sense faithful extension predicate calculus 
sequel pc abbreviation predicate calculus 
compare hilog call contextual predicate calculus 
extension ordinary pure predicate calculus inspired way prolog permits symbol different contexts predicate symbol function symbol different arities 
syntactically formulas contextual pc formed hilog question validity problems formulas semantics hilog contextual pc coincide 
show case certain conditions validity problems coincide 
second subsection consider formulas pure predicate calculus 
formulas formed contextual pc hilog 
establish validity problem pure pc coincides problem hilog larger class formulas case contextual pc 
third subsection shows hilog formula encoded formula pure pc 
validity contextual predicate calculus hilog prolog symbol may appear different contexts predicate constant function symbol symbol occur different arities different parts program 
exact role played occurrence symbol depends context symbol occurs 
prolog programs normally understood formulas predicate calculus different occurrences symbol replaced different function predicate symbols whichever appropriate suitable arities 
ad hoc parameter symbols multiple roles motivates simple extension pc call contextual predicate calculus 
language contextual pc contains set parameter symbols set variables term variable parameter symbol expression form 
terms 
atomic formula term variable rest definitions usual 
clearly contextual pc extension pc direction hilog radical 
stops short introducing higher order syntax element variable 
formula contextual pc formula hilog 
hand formed formulas hilog contextual pc 
similarly pc formula formula contextual pc vice versa formula contextual pc pc 
semantics contextual pc middle ground hilog pure pc 
semantic structure contextual pc language tuple 

symbol function associates infinite tuple delta delta delta element function gamma 
likewise tuple delta delta delta ary relation unary relation denote th components infinite tuples respectively 
recall ary relation set ary tuples tuple empty tuple 
ary relations empty relation interpret false propositions interprets true propositions 
variable assignment gamma 
define 
atomic formula 

rest definition pc hilog 
contextual pc formulas formed pc formula oe transformed formula oe pc replacing occurrences parameter symbol follows 
occurrences ary function replaced new ary function symbol occurrences position ary predicate replaced new predicate symbol instance transformation 
transformation explicit prolog parameter symbols assume multiple roles 
justification transformation stems easy fact lemma 
formula contextual pc valid transformation pure pc valid 

formula pc valid valid considered semantics contextual pc 
proof language contextual pc corresponding language pure pc transformed formulas expressed 
set parameters set function symbols fs jk lg superscript indicates arity fs jk lg set predicate symbols proof carried constructing isomorphism sets semantic structures 
semantic structure oe formula oe translation oe oe 
constructed obvious way 
prove consider language pc 
language contextual pc sets parameters variables 

semantic structure corresponding semantic structure 
constructed ary predicate symbol ary function symbol 
rest arbitrary 
easy see pc formula oe true true formula valid considered formula valid formula reversing construction semantic structure language contextual pc construct pc structure pc formula oe true true oe valid pc formula valid formula contextual pc language lemma essentially says contextual pc minor extension pc 
greater similarity syntax contextual pc hilog instructive investigate relationship validity problems logics 
suppose set parameters variables respectively 
lh language hilog sublanguage contextual pc 
view lemma tempting think formula valid semantics contextual pc valid semantics hilog 
turns difference semantics fundamental case flavors pc 
consider formula valid hilog oe easy see formula valid contextual pc assign relations parameters related way meaning assigned terms 
stands sharp contrast hilog truth value assigned intensions atoms premise terms intension atomic formulas truth value 
correspondence valid formulas hilog contextual pc important cases described theorem 
definition language contextual pc semantic structure 
free pair parameter symbols pair arities holds ffl identical symbols identical elements 
definition sentence oe contextual pc freely interpretable property ffl oe satisfied free semantic structure satisfied semantic structures 
theorem lh language hilog sublanguage contextual pc share set parameters set variables 
oe formula 
cpc oe hilog oe 

oe freely interpretable hilog oe cpc oe 
cpc hilog denote logical implication relation respect semantics contextual pc hilog respectively 
proof prove directions 
proof direction proof 
prove suppose hilog oe holds 
show cpc oe holds 
free semantic structure 
construct semantic structure mh 
true lh follows ffl domain ffl symbol ffl define delta delta delta fixed ffl true conditions holds nonempty ary relation equivalently delta delta delta delta delta delta 
semantic structure mh defined free 
shown induction formula oe variable assignment oe mh oe 
hilog oe oe satisfied free semantic structure oe freely interpretable satisfied semantic structure cpc oe holds 
prove direction assume cpc oe holds 
need show hilog oe holds 
semantic structure mh 
true lh construct semantic structure 
follows ffl domain mh ffl symbol lh non empty ary relation equivalently true delta delta delta delta delta delta true recall nonempty ary relation interprets true propositions empty relation interprets false propositions 
shown induction formula oe variable assignment oe mh oe 
exists mh mh oe semantic structure constructed oe contrary assumption 
hilog oe holds 
condition theorem syntactic encompasses important classes formulas 
lemma shows equality free formulas predicate calculus freely interpretable 
interesting class particularly important logic programming consists sets definite clauses equality equality restricted clause bodies 
query negative clause definite logic program possibly equality clause bodies evaluating query amounts showing set unsatisfiable 
theorem concerns validity contrapositive unsatisfiability class formulas consider theorem conjunction horn clauses free equality 
lemma classes contextual pc formulas freely interpretable 
sets equality free sentences 

formulas form conjunction horn clauses free clause heads 
proof consider language contextual pc set parameters oe formula forms 
assume semantic structure 
oe 
show exists free semantic structure 
oe 
domain free algebra built elements parameter symbols words minimal set satisfying conditions ffl ffl delta delta delta symbol delta delta delta 
define define delta delta delta delta delta delta delta delta delta natural mapping gamma 
defined element corresponding element ffl ffl ffl delta delta delta delta delta delta define follows delta delta delta delta delta delta 
definition free semantic structure mapping gamma 
homomorphism 
homomorphism theorem properties hold gamma 
variable assignment respect variable assignment gamma 
respect defined follows variable homomorphism theorem stated pc 
validity cpc immediate lemma 
ii term evaluated respect evaluated respect iii mapping gamma 
epimorphism variable assignments variable assignment assignment iv equality free formula oe oe oe 
obviously follows iii iv 
show conjunction horn clauses free equality clause heads 
show freely interpretable prove implies saying implies conjunction clauses need establish fact case single clause show implies clause form assume exists literal equality literal iii equality literal form assumption 
follows definition mapping opposite may true 
implies interesting note formulas form lemma may freely interpretable 
simple example formula true free interpretation valid formula general 
validity pure predicate calculus hilog formulas pure pc formulas contextual pc results previous subsection hold pc formulas 
language pc subset contextual pc obtain stronger result specialization theorem pc 
definition set formulas pc contextual pc language fl denote cardinality set parameters say cardinal respect property holds ffl true semantic structure cardinality domain fl true semantic structure lemma freely interpretable formula contextual pc cardinal 
particular formulas form described lemma cardinal 
proof simplicity prove lemma languages finite sets parameters 
suffices show free semantic structure language contextual pc infinite domain 
oe freely interpretable suppose true semantic structure cardinality fl 
holds infinite particular free semantic structure 
oe freely interpretable holds semantic structure 

semantic structure parameter exists language cpc contains parameter symbol formed implicit assumption viewed pc formula pc structure viewed cpc formula cpc structure 
formulas constructed language 

definition free structures distinct elements easy see class cardinal formulas strictly contains class freely interpretable formulas 
lemma provides inclusion 
show inclusion strict note propositional horn rule pc cpc nontrivial equality body cardinal freely interpretable 
theorem oe set formulas pc hilog 
ffl oe valid pc valid hilog 
ffl oe cardinal valid hilog valid pc 
presenting proof show second part theorem may hold oe cardinal cpc pc formula 
consider formula clearly formed formula predicate calculus hilog 
valid hilog formula right side formula true semantic structure true domain structure singleton element 
mapped element left hand formula holds true 
formula valid predicate calculus falsified semantic structure element domain interprets empty relation nonempty 
reason discrepancy hilog predicate calculus domains quantification different hilog domain contains predicate calculus 
predicate calculus sense interpretations hilog 
reason truth atomic formulas defined intensions formulas domain interpretation relations associated predicate symbols 
second part theorem hinges essential way assumption oe formed formula predicate calculus 
true example formulas contextual predicate calculus 
consider formula formed pc play multiple roles formed contextual pc 
cardinal formula 
easy see valid hilog contextual pc semantic structures contextual pc assign different truth values atoms terms intension 
observation cardinal freely interpretable holds free structure premise false noted formula valid contextual pc 
class cardinal formulas pc strictly larger class freely interpretable formulas theorem strengthens result theorem class pc formulas 
fact cardinal pc formulas valid hilog valid pc theorem follows freely interpretable valid formulas 
theorems imply cardinal non freely interpretable pc formulas valid hilog pc 
means theorems identify class valid pc formulas valid hilog 
theorem identifies strictly larger class non valid pc formulas non valid hilog 
proof theorem language pc set parameters set variables lh language hilog sets parameters variables 
define pair mappings ffl lh structures gamma 
structures ffl structures gamma 
lh structures predicate calculus formula holds pc hilog denote logical entailment predicate calculus hilog respectively prop mh semantic structure lh mh pc oe mh hilog oe 
prop semantic structure cardinality domain hilog oe pc oe 
theorem immediately follows existence mappings properties 
construct mh 
true semantic structure lh define corresponding structure follows mh 
domain mh defined ffl constant ffl ary function symbol ffl um um true prop follows straightforwardly induction structure oe 
note impose restrictions semantic structures 
prove prop define follows 

semantic structure cardinality high cardinality assumption mapping ffl symbol corresponds constant symbol ffl pair distinct symbols correspond function symbols arity predicate symbols define mh 
true ffl universe mh ffl mapping parameters lh defined previous paragraph ffl defined corresponds ary function symbol arities defined arbitrarily 
important construction hilog interpreted parameters true false function symbols pc language lp ary predicate symbol um true um requirements definition requirements arities elements defined arbitrary way 
maps distinct function predicate symbols different elements mappings defined 
variable assignment 
lh share set variables shares domain variable assignment denote extensions set terms lh respectively 
properties proved induction ffl term pc term lh ffl formula oe pc formula lh hilog oe pc oe 
oe valid hilog oe valid semantic structures cardinality domain oe cardinal implies oe true semantic structures predicate calculus 
encoding hilog predicate calculus hilog syntax richer predicate calculus may hilog expressive logic 
turns hilog formula encoded predicate calculus logics equally expressive 
borne mind objective devise expressive logic logic syntax suitable logic programming 
respect compare programming hilog vs prolog programming prolog vs horn logic 
known horn logic computational power turing machine sufficient computational needs 
programmer convenience need simplify problem specification calls richer syntax negation prolog additional constructs notorious 
discussion issue appears section 
encoding hilog predicate calculus suggested james wu 
hilog language lh set variables parameters define encode language predicate calculus set variables constant symbols unique predicate symbol call ary function symbol apply hilog formula oe encoding predicate calculus oe determined recursive transformation rules 
rules encode transformation encodes hilog terms appear contexts interpreted atomic formulas encode encodes terms contexts 
ffl encode variable ffl encode logic symbol ffl encode apply encode encode encode ffl encode call encode hilog atomic formula ffl encode encode encode ffl encode encode encode ffl encode encode ffl encode qx qx encode 
hilog semantic structure 
true corresponding predicate calculus structure encode 
defined follows ffl ffl apply ffl call true ffl equality predicate standard interpretation encode def 
ug 
result proof due james wu 
reason special treatment definitions apparent section 
theorem encoding theorem oe hilog formula semantic structure 
variable assignment free variables oe 
oe encode encode oe proof structural induction encode hilog term consider hilog atomic formula equation 
definition encode call encode 
true encode call encode call encode encode encode 
derivation holds equality predicate special interpretation assigned section 
proved claim atomic formulas 
rest proof easy induction structure hilog formulas 
ff denote sentence call apply corollary relates validity formula hilog encoding pc 
corollary oe hilog formula 
oe valid ff oe encode oe valid predicate calculus 
proof lh hilog language 
easy see function encode mapping hilog semantic structures lh pc semantic structures encode satisfy formula ff language encode defined earlier definition encoding hilog pc 
equations encode reverse define function decode decode encode claim follows theorem 
conclude section remarks shed light relationship hilog second order predicate calculus standard semantics 
clearly expect certain similarities example quantification predicates function symbols allowed logics 
hand order nature hilog semantics suggests significant differences 
similarity easy see language hilog rich express called extensionality axioms instance arity write eq eq true viewed binary predicates 
formula identical extensionality axiom binary predicates second order logic standard higher order semantics 
hilog syntax appears rich capture intensional extensional aspects functions predicates 
critical difference semantics hilog standard semantics secondorder logic domain variables 
hilog variables range nonempty set intensions 
range intensions binary relations may relations corresponding intensions affect meaning hilog 
contrast standard second order semantics domain predicate variables set binary relations individual domain 
extensionality axiom standard secondorder logic talks possible relations 
distinction appear impact meaning hilog vs second order pc difference called relation comprehension formulas delta delta delta delta delta delta oe oe formula occur free free variables known formulas valid standard second order predicate calculus 
turns valid hilog 
instance formula valid hilog 
hilog semantic structure falsifies fdg fdg delta delta delta 
intuitively happens domains hilog interpretations necessarily intensions complements relations associated predicate names 
effect desirable depends intended meaning quantification 
hilog quantification intensions name valid 
applications hilog explained earlier semantics hilog order term viewed individual function predicate depending context appears 
functions predicates treated objects manipulated terms intensions applied arguments evaluated functions relations extensions 
distinguishing intensional extensional aspects functions predicates hilog preserves advantages higher order logic avoids computational difficulties extensions introduced higher order semantics 
section review subset hilog suitable logic programming show uses higher order logic programming definite clause grammars natural language processing areas 
logic programming hilog practical applications consider logic programming general theorem proving hilog 
logic program mean finite set formulas form lm atomic formula lm literals variables occurring lm 
universal formula program written general clause 
logic programming clauses written lm lm atomic formulas clauses called definite horn clauses logic program consisting definite clauses called definite logic program 
definite logic programs standard logic programming techniques define declarative procedural semantics 
difference form atomic formulas unification unification discussed section 
instance definite hilog programs model intersection property holds program unique minimal respect set inclusion herbrand model 
tp operator defined usual herbrand interpretation definite program tp set literals heads ground clauses body satisfied standard results fixpoint hold 
facts easy verify directly theorem 
logic programs negation semantics defined choosing minimal herbrand models 
instance definitions founded semantics stable model semantics independent notions atomic formulas herbrand bases definitions applied hilog 
results negation hilog 
higher order modular logic programming higher order constructs useful programming practice 
example maplist lisp 
defined hilog higher order predicate maplist 
maplist xjr maplist 
generic predicate maplist 
maplist xjr maplist 
possible hilog allows complex terms maplist appear predicates 
example section shows usefulness generic view definitions closure databases 
generic transitive closure defined prolog closure 
call 
closure 
call closure 
obviously inelegant compared hilog see section involves constructing term list reflecting term atomic formula call 
point example lack theoretical foundations higher order constructs prolog resulted obscure syntax partially explains prolog programs involving constructs notoriously hard understand 
turns variables may instantiated hilog terms turn propositional meaning need infamous call predicate built prolog 
naturally defined hilog call intended semantics 
higher order constructs database languages col ldl modeling complex objects containing sets 
original semantics languages described higher order leads certain semantic computational difficulties 
section propose alternative semantics col ldl hilog argue computationally tractable practically convenient 
modular logic programming application higher order logic employed 
theory modules developed standard second order logic 
semantics module second order relation order predicates interpreted order relations 
relational view modules natural extension logic programming 
standard second order logic recursively axiomatizable practical usage modules need full power second order predicate calculus 
hilog provide simple alternative semantics modular logic programming sound complete proof theory 
consider program fragment formed predicate calculus hilog trans edge 
trans edge trans 
turn module definition need determine interface modules 
program fragment contains definition trans terms edge 
suppose predicate trans exported predicate edge parameter instantiated binary predicate user choice 
obtain module definition replace non global predicate symbol predicate variable arity different predicate names replaced distinct variables 
done ensure local scope symbols variables local scopes logic 
concrete syntax module definition transitive closure may look mod trans 

head module definition defines module interface 
consists exported predicate parameters input predicate parameters body module definition implementation module 
individual variables universally quantified respect clause body module interface parameters discussed 
non interface predicate variables body represent private predicates seen outside module 
quantification predicate variables input predicate parameters universally quantified predicates private exported ones existentially quantified inside scope universal quantification input predicate variables 
precisely due existential quantification predicate variables local data module shielded outside 
module definition defines order predicates body module second order predicate corresponding module name mod trans 
module definition meaning formula mod trans second order semantics mod trans treated second order predicate symbol 
interpreting formula standard second order logic interpret formula hilog getting tractable semantics modules 
hilog interpretation mod trans simply order parameter symbol just link 
implementation existential variables eliminated skolemization preserves unsatisfiability theorem proving sld resolution 
module defined just predicate may take predicates arguments 
consider query link 
link 
link 
link 
mod trans link closure closure 
closure predicate variable individual variable 
second order semantics closure bound relation corresponding transitive closure link predicate 
bound node reachable answer query set nodes 
hilog semantics closure bound intension domain quantification relation 
binary relation associated hilog semantics gamma true second order semantics transitive closure link 
bound node reachable set answers query 
hilog semantics modules yields result cases disagrees marginal situations inherent difference intensional treatment predicates hilog extensional treatment essential 
instance different predicates extensionally equivalent unified unifiable standard second order semantics hilog 
difference hilog modules features 
instance modules second order predicates imported modules second order predicates arguments second order predicates 
manipulating modules requires just second order pc 
contrast difficulties hilog module names merely order terms hilog passed modules parameters 
definite clause grammars hilog definite clause grammars dcgs developed processing natural language extend contextfree grammars adding arguments checking agreement linguistic structures allowing arbitrary computation body rule 
translated prolog adding additional pair arguments representing string words parsed 
example consider dcg rules sent subj verb gamma 
np subj num vp verb num 
np word num gamma 
word name word num vp word num gamma 
word word num standard transformation yields prolog program sent subj verb np subj num vp verb num 
np word num connect word name word num 
vp word num connect word word num 
connect word 
suppose facts name john singular 
walks singular 
parsing natural language sentence john walks 
reduced evaluating logical query john walks 
prolog adequate languages defined dcg grammars cases generic grammatical rules necessary 
optionality nonterminal symbol occurrence arbitrary symbol zero times examples 
rules specified follows adapted option gamma 
option gamma 
seq gamma 
seq 
seq gamma 
nonempty seq gamma 
seq 
unfortunately translation prolog longer works prolog allow variable predicates 
blindly recipe get nonempty seq seq 
hilog prolog rule 
overcome problem try turn 
call 
patch time 
syntactic limitations prolog special mechanisms translating grammars prolog needed papers written subject 
contrast just seen translation generic grammars hilog immediate require special machinery simply go suggested standard algorithm replace nonterminal hilog atom 
regardless predicate symbol function symbol variable term hilog accommodates due richness syntax 
matter fact original dcg prolog translation natural hilog 
dcg nonterminals parameters readily transformed parameterized predicates hilog 
example dcg rule sent subj verb gamma 
np subj num vp verb num 
sent subj verb np subj num vp verb num 
query evaluator consider relational expressions composed say binary relations connected relational operators minus union 
suppose parser produced parse tree parsing easy horn clauses expression form term say minus union inter similar 
step write evaluator expressions hilog looks follows minus 
union 
union 
comparison analogue program prolog 
simplest approach problem define translation predicate tr converts parse trees prolog goals call 
rules tr follows tr minus tr tr 
tr union tr tr 
tr atom atom 

observation prolog program clumsy compared hilog counterpart notice arguments tr essential program run correctly 
second rule intended capture situation instantiated predicate symbol 
restriction implicit built predicate give error predicate symbol 
way get list facts tr predicate symbol advance 
particularly inconvenient database environment user may create delete new relations program updated time 
ease writing program hilog stems ability represent intermediate results query evaluation natural way 
instance minus viewed name intermediate relation result subtracting clear order take full advantage hilog arities relations known compile time know variables appear various places rules 
rules relational operators change arities relations ones look particularly attractive hilog 
hand operators join cartesian product require heavier machinery functor arg 
program elegant hilog prolog 
type checking thom pointed monomorphic type checking system naturally extended polymorphic type checking system hilog expressing general polymorphism predicate calculus usually quite cumbersome 
hilog language type specification explored 
hilog database programming language section show hilog provides alternative order semantics wellknown database languages higher order semantics eliminating problems 
specifically focus col ldl 
discuss various applications hilog object oriented databases 
col logic language complex objects 
notable feature col addition finite set construction provides called data functions 
functions may take sets individuals arguments return sets results 
data functions defined facts rules 
example operations sets defined data functions follows intersection 
union 
union 
difference 
notice variables range domain sets classification semantics col higher order 
higher presents certain semantic problems logic programs col consider example adapted person peter 
person thom 
person thom hobby peter 
hobby person program col hobby person mutually depend perfectly legal queries request tom hobbies inquire tom plays bridge rejected hobby thom 
person thom chess tennis 
cope problem proposes analogue notion local stratification adapted logic programming 
simplicity restrict attention col programs tuple constructs finite set constructs variables 
forms allowed 
show extend results general case 
restricted col programs transformed hilog programs follows 
replace finite set construction fa appears col program new hilog logical symbol sym add facts program sym sym 
identical finite set constructions consistently replaced symbol 
instance person thom replaced person thom hobby thom pair facts hobby thom chess 
hobby thom tennis 
replace col formulas form hilog formulas 
program transformed formed hilog program person peter hobby peter 
person thom hobby thom 
person thom hobby peter 
hobby peter bridge 
hobby thom chess 
hobby thom tennis 
hobby person 
corresponding queries hobby thom 
person thom hobby thom 
queries yield results counterparts col provided col program intended semantics 
example consider col query person thom 
database rule deleted ensure stratification 
query fails different sets 
corresponding hilog query person thom hobby thom hobby thom chess 
database contain hobby thom chess 
query fails similarly col hobby thom represents different set hobbies hobby thom 
query person thom hobby thom hobby thom chess 
succeeds asking thom plays chess previous query chess thom hobby sets 
notice semantics col treats thom different sets hobbies different frames mind able capture aspect col pretty adequately 
contrast col easy way introducing additional rules ask thom plays chess demonstrates greater flexibility hilog compared col significant difference semantics col hilog 
instance suppose previous clause hobby hobby function defined follows chess hobby peter 
bridge hobby peter 
query person thom 
returns answer true col corresponding query person thom hobby thom 
hilog returns false 
difference stems fact col domain set variables consists sets extensions domain variables hilog set objects intensions 
col person thom hobby peter evaluated person thom chess allows col query succeed 
contention separation intensional extensional aspects hilog flexible extensional semantics col captured hilog easily defining extensional equality intensions 
instance formula eq says represent unary relations extensionally may intensionally different said say binary relations represented axiom quite capture intentions 
really need extensional equality predicates respect intended semantics logic programs 
purposes section adopt perfect model semantics locally stratified programs defined hilog lines 
intended extensional equality captured rules negation eq subset subset 
subset subset 
subset 
desirable hilog simulate extensional semantics col query follows person thom eq hobby thom 
recall transformation rule database contain facts hobby thom bridge 
hobby thom chess 
defines founded semantics hilog analogous 
person thom hobby peter original facts database hilog query succeeds hobby peter 
simulate semantics col closely exactly add transformation rule applied 
replace literal body rule including queries term involving data function constant replaces finite set construction introduced transformation rule conjunction eq 
instance query person thom hobby thom 
replaced person thom eq hobby thom 
complete discussion col showing extend translation described general case 
capturing tuple construct easy 
just reserve parameter symbol say tuple specific purpose representing col tuples tuple tuple respectively 
set construct reserve special symbol setc 
finite set construct replaced hilog term setc appropriate facts added database 
example setc 
setc 
setc 
setc 
transformation rule requires change rule need replace phrase constant replacing finite set construct phrase set term replacing finite set construct 
ldl influential logic database language higher order semantics 
addition finite set construction provides called grouping construct general data functions col ldl programs translated hilog alternative order semantics 
similarly col certain programs formed ldl satisfactory semantics translation 
finite set constructs ldl translated hilog way case col grouping construct ldl occur rule heads replace ldl rule form body vectors variables pair hilog rules sym body 
sym body 
sym new hilog symbol 
consider ldl program 

intuitively says true elements domain element domain sense set domain elements 
ldl sets members domain par individuals 
result program tantamount famous set theoretic paradox contain set sets element 
corresponding hilog program 


defines predicate true element domain 
defines symbol represents entire domain symbol appears constant atomic formula 
corresponds aforementioned intuitive meaning ldl program favors hilog semantics ldl 
shows general translation ldl hilog capture power grouping construct normal cases grouping ldl corresponding hilog program gives result 
instance consider set intersection example intersect member member 
corresponding hilog program intersect inter member member 
inter member member 
gives result 
note hilog set intersection concise elegant representation inter 
see hilog provides alternative believe computationally attractive semantics ldl 
col hilog closely mimic semantics dramatic difference hilog ldl expressive logical paradoxes represented difficulty 
paradoxes representable hilog order semantics translation paradoxical ldl rules yields benign hilog programs 
conclude comparison mention alternative semantics sets ldl col described spirit semantics described logic logic order object oriented languages 
appears higher syntax hilog inessential order simulate sets 
essential applications described earlier 
interesting observation changing philosophy logical languages cases eliminate need higher semantics syntax 
promising application hilog database field implementation vehicle object oriented languages proposed 
logic simplest supports complex objects object ids sets classes 
instance hobby example discussed earlier represented logic follows opinion discussion suggests capturing semantics grouping construct exactly necessary harmful 
person peter hobby 
person thom hobby 
thom hobby fxg peter hobby fxg 
yielding results produced corresponding hilog representation 
logic admits natural translation predicate calculus viewing class symbol person unary predicate set valued attribute hobby binary predicate 
extends logic allowing single valued attributes introducing lattice structure object ids helps localize effect data inconsistency 
translation logic predicate calculus just shade complex additionally requires axiomatization functional attributes data inconsistency 
logic takes object oriented logics new dimension introducing higher order semantics spirit hilog :10.1.1.48.7149
encoded predicate calculus encoding natural suggestive efficient implementation 
extension algorithm translate logic hilog quite naturally 
opens possibility hilog fast prototyping object oriented logic languages 
compared direct implementation object oriented databases advantage hilog implementation platform relatively easily implemented available technologies developed prolog ldl 
proof theory hilog encoding section proof theory predicate calculus order prove theorems hilog 
proof theory stated terms encoding intuitive suggestive possible efficient implementation 
furthermore extensions hilog developed order support features lambda abstractions dynamic updates extensions may direct translation predicate calculus 
direct proof theory hilog important right may provide additional insights investigations hilog extensions 
section resolution proof theory directly terms hilog 
issues examined skolem herbrand theorem unification resolution 
discussion follows development resolution proof theory predicate calculus 
skolemization sentence oe hilog transformed equivalent formula oe prenex normal form quantifier free formula conjunctive normal form variables occurring 
rules transformation identical ordinary predicate calculus usual de morgan laws apply due fact definition logical entailment relation section identical predicate calculus notion atomic formulas 
similarities hilog predicate calculus think eliminating existential quantifiers oe usual skolemization process predicate calculus obtain skolem standard form oe oe unsatisfiable oe 
unsatisfiability oe entail unsatisfiability oe 
see consider oe yp converting oe prenex normal form ordinary manner new function symbols yields oe easy see oe satisfiable hilog second order predicate calculus verified directly constructing semantic structure 
true function different functions gamma 
defined expression yp 
contrast oe unsatisfiable instance oe 
intuitively reason usual skolemization process misbehaves hilog choose new symbol represent new skolem function symbol needs assigned new intension 
assign appropriate skolem function extension symbol introduced skolemization 
predicate calculus extensions assigned directly function symbols choosing new function symbol construct semantic structure desired skolem function 
contrast hilog assigns extensions intensions function symbols simply choosing new symbol longer able assign new intension symbol example shows possible 
fact shall see choosing new symbol crucial skolemization hilog 
way overcome problem modify skolemization avoid need assign new intensions skolem functions 
introducing new skolem symbol unused arity old symbols patching extra argument positions 
formula oe say symbol arity arity obtaining skolemized form notice symbol fill argument positions terms 
language hilog contains parameter symbol 
formula oe prenex normal form quantifier free formula conjunctive normal form variables occurring 
suppose leftmost existential quantifier oe 
maximum arity oe exists oe finite 
obtain new formula oe eliminating leftmost existential quantifier oe replacing occurrence delta delta delta gamma max gamma arguments 
assume existential quantifiers oe repeat process oe derive formula oe existential quantifiers 
formula oe called skolem standard form oe lemma sentence oe unsatisfiable skolem standard form oe unsatisfiable 
grateful referees suggesting example pointing mistake earlier draft 
proof loss generality assume oe prenex normal form 
oe oe number existential quantifiers oe 
oe oe oe obtained oe gamma skolemization process 
show oe unsatisfiable oe gamma unsatisfiable 
oe gamma prenex normal form gamma leftmost existential variable formula conjunctive form variables occurring 
suppose maximum arity oe gamma parameter symbol skolemization oe form gamma gamma gamma gamma max gamma arguments 
suppose oe gamma true semantic structure 
true oe unsatisfiable 
gamma exists variable assignment maps 

respectively 
construct new semantic structure 
true exactly gamma gamma chosen explained 
arity oe gamma function determine holds 
fact domains coincide yields oe chosen arbitrarily gamma occur oe follows oe contrary assumption oe unsatisfiable 
oe gamma unsatisfiable 
reverse direction assume notation oe true semantic structure oe gamma unsatisfiable 
definition verified oe gamma true contradiction 
oe unsatisfiable 
note skolemization hilog works finite sets formulas 
solution works infinite sets proposed 
idea introduce sorted symbols hilog classical skolemization rely existence unused arities 
requires extension hilog discussed see 
herbrand theorem skolemized restrict attention universal formulas formulas prenex normal form prefix contains universal quantification 
furthermore transforming formulas conjunctive normal form yields hilog formulas clausal form 
usual drop quantification altogether understanding clauses implicitly universally quantified 
variable free formulas called ground rest formulas nonground 
herbrand interpretations hilog defined section 
recall hilog language herbrand universe hu coincides herbrand base defined set ground variable free hilog terms 
equality predicate taken account definition herbrand interpretations needs adjustment 
definition hilog language subset herbrand base 
called herbrand interpretation closed congruence formulas middle follow 
ffl ff ff ffl ff fi fi ff ffl ff fi fi fl ff fl ffl ff fi result replacing occurrence ff fi herbrand interpretation define satisfaction formulas similarly classic case ffl ground hilog atomic formula ffl oe ground hilog formulas oe oe 
oe oe 
oe case oe 
ffl oe universal formula oe oe ground instance oe oe 
avoid possible misunderstanding recall presence equality consider semantic structures assign intended meaning equality predicate see section 
emphasize fact call semantic structures structures 
talk valid formulas formulas false resp 
true structures 
lemma hilog language 
structure herbrand interpretation hm universal formula oe oe hm oe 
likewise herbrand interpretation structure mh oe mh oe universal formula oe 
proof structure corresponding herbrand interpretation hm simply set ground atomic formulas satisfied conversely herbrand interpretation 
corresponding structure mh 
true defined 
def hu factor space herbrand universe hu respect equivalence relation induced equality atoms hu corresponding element denoted 

true def factor space respect equivalence relation 

gamma 
obtained identity embedding id gamma 
hu composing id natural epimorphism hu gamma 


defined 
left reader verify hm resp mh stand desired relationship 
proof carried structural induction hilog formulas similarly classic case 
consequence lemma universal formula unsatisfiable herbrand model corollary set hilog clauses unsatisfiable false herbrand interpretations theorem cf 
herbrand theorem set hilog clauses unsatisfiable finite unsatisfiable set ground instances clauses proof easy verify set hilog clauses encoding section establishes correspondence herbrand interpretations encode 
subtlety hilog herbrand universe herbrand base coincide predicate calculus distinct 
reason herbrand universe encode obtained applying encode herbrand universe herbrand base encode obtained encode herbrand theorem hilog directly follows theorem analogous result predicate calculus 
unification hilog allows arbitrary terms appear places predicates functions usually allowed predicate calculus unification hilog simple extension unification predicate calculus decidable 
mainly hilog separates intensions extensions non trivial built equality theory intensions 
different notion terms hilog definitions substitutions applications substitutions terms substitution composition hilog predicate calculus 
definition substitution finite set form ft distinct variables term different definition unifier set hilog terms fe substitution 
set fe unifiable unifier 
definition unifier oe set fe expressions general unifier set substitution oe 
derive efficient unification algorithm solving equations 
equation form terms 
equation set possibly empty solved form fx distinct variables occur 
notice finite equation set solved form naturally viewed substitution 
solution equation set ft substitution 
equation set solvable solution 
solution oe equation set general solution substitution oe 
finite equation set unification algorithm non deterministically chooses equation equation set applies transformations form selected equation 
halt failure 

replace equation 
delete equation identical parameter symbols halt failure 

variable delete equation 

variable variable replace equation 
variable term different appears halt failure replace occurs equations 
algorithm terminates transformation applied failure reported 
theorem unification theorem unification algorithm applied finite set equations returns finite set equations solved form solvable 
returns failure 
returned equation set viewed substitution general solution solvable 
proof easy see pair hilog terms unifiable encode encode encode encode unifiable 
easy see encoding hilog pc transforms unification algorithm hilog corresponding algorithm pc described 
theorem follows facts 
direct proof obtained simple adaptation proof 
theorem hilog unification decidable 
reader may wonder result reported shown unification undecidable variables allowed places normally function symbols permitted appear 
contradiction result reasons 
informally sufficiently rich logic higherorder syntax decidable unification problem conditions sufficient 
semantics logic order 
predicate function variables range relations functions 
range intensions names predicates functions 
second logic undecidable built equality theory names predicates functions 
hilog satisfies conditions separating intensions extensions avoiding extensional unification embodying trivial equality theory intensions 
contrast goldfarb essentially works second order terms embody undecidable equality theory unification undecidable case 
refutation definition literals polarity positive negative clause general unifier oe coe called factor definition clauses variables common literal occurrence term including case 
general unifier oe loe soe oe oe binary loe soe denotes result replacing single occurrence toe loe soe 
important realize definition may hilog needs terms occurring strictly inside atomic formulas case predicate calculus atomic formulas 
interesting distinction respect pc stems fact hilog higher order language atomic formulas distinguished terms 
example atomic formulas 
definition pair clauses variables common 
general unifier oe clause oe oe called binary resolvent deduction clause set clauses finite sequence clauses member factor binary resolvent 
deduction empty clause called refutation 
deducible write way prove completeness theorem adapt corresponding proof pc 
shorter proof results theorem theorem soundness completeness resolution set clauses unsatisfiable exists refutation fx xg 
proof encoding section set hilog clauses application factorization paramodulation resolution rules clauses corresponds application respective rule encode vice versa 
follows analogous result predicate calculus combination resolution factorization paramodulation complete set inference rules refuting unsatisfiable sets hilog clauses 
note include functional reflexivity axioms formulation theorem 
possible due result shows axioms needed completeness paramodulation 
note contains equality atoms unsatisfiability replaced unsatisfiability axiom needed 
consider example 
recall section formula oe valid hilog 
negation unsatisfiable 
negation formula transformed clauses 


noted special treatment definition encode section essential ensure correspondence case paramodulation rule 
result pointed leo bachmair paramodulation derive 

resolution derive empty clause completes refutation 
hilog implementation issues straightforward implementation horn clause logic programming language hilog possible encoding hilog pc described section 
encoding preserves horn clauses simply standard prolog compiler execute result encoding 
theoretically sound may practical prototype programs large programs efficiency issues deserve consideration 
fast access appropriate clauses predicate invocation efficient representation data structures 
built nonlogical predicates dynamic changes database control constructs cut lead new issues hilog framework 
consider simple hilog horn clause 
clause happens predicate logic horn clause 
encoding predicate logic call apply call apply call apply 
clause encoded way hilog program matter large defines exactly prolog predicate call 
prolog efficiency predicate invocation locate quickly clauses heads possibly unify 
prolog systems achieved branching directly clauses predicate indexing normally main functor symbol argument refine search 
notice encoding hilog program ways refining search effective prolog sees predicate call main functors heads apply filtering come arity apply 
approach partial evaluation techniques optimize direct translation 
problem approach treat nonlogical constructs assert 
way improve clause access improve indexing strategy underlying prolog system proposed 
alternative constrain hilog programs way allow simple compile time optimizations 
way exploring restrict clauses heads nonvariable symbol leftmost position clauses heads rigid terms 
case rigid calls bodies clauses compiled branch directly appropriate clauses 
issue representation hilog terms 
prolog complex terms normally represented linked record structures 
ary term represented consecutive words word indicates functor symbol arity words represent arguments 
represent hilog term arity required 
natural way uses words arity pointer functor term argument terms 
somewhat wasteful space entire word relatively small arity suspect turn efficient representation 
regularization prolog representation slightly simpler traversal algorithms 
realistic logic programming system support built ins nonlogical behavior 
decision built ins accessed general call 
example query able call read predicate 
reasonable choice exclude possibility 
desired separation built predicates rest achieved introducing sorts hilog splitting disjoint subsets proceeding define hilog terms different sorts 
way normal variables symbols represent built predicates 
user wishes manipulate symbols variables appropriate sort explicitly 
issue cut complicated 
prolog cut eliminates alternative clauses remaining current predicate 
hilog different calls access various subsets clauses notion predicate defined 
issues explored detail 
need logic 
new logic proposed question raised logic needed 
just stay logics know understand 
especially cogent point new logic simple reasonably direct translation grand daddy logics order predicate calculus case hilog 
believe case hilog reasons seriously entertain idea new logic basis logic programming 
firstly programming hilog logic programs logical 
prolog programmers programs pure possible eschew prolog nonlogical constructs 
prolog predicate function symbols particular predicate call nonlogical hilog completely logical class citizen 
hilog programmers need avoid call flexibility task writing pure logic programs 
secondly say hilog simply syntactic variant prolog syntax important doing meta programming 
meta programming syntax determines data structures manipulated simpler syntax means meta programs simpler 
saw example translating dcgs hilog extent meta program written dcg translator automatically complicated situation need changed 
thirdly importantly different logic encourages programmer different way thinking 
certainly translation hilog program programmed directly prolog 
dcg example believe shows 
issue efficiency translation execute efficiently programmer desires programmer think prolog program 
hilog encourages programmer think parameterized predicates prolog 
hilog programmers prolog programmers modularize programs lines suggested section 
language influences way programmers think programs write 
point hilog logic encoded predicate calculus 
classic order modal logics provide rich source examples different syntax motivated different philosophy logic inspired important useful studies logic artificial intelligence 
summary believe hilog offers significant advantages prolog deserves serious consideration basis new logic programming language 
acknowledgments grateful leo bachmair thom sanjay sagiv rodney topor james wu comments contents 
especially james wu suggesting encoding described section 
suggestions referees appreciated 
abiteboul grumbach col logic language complex objects proc 
workshop database programming languages france september pp 

abramson metarules approach conjunction definite clause translation grammars aspects grammatical metaprogramming proceedings fifth international conference symposium logic programming kowalski bowen eds 
seattle washington august pp 

apt blair walker theory declarative knowledge foundations deductive databases logic programming minker ed morgan kaufmann publishers los altos ca 
apt van emden contributions theory logic programming jacm 
beeri naqvi shmueli tsur sets negations logic database language ldl mcc technical report 
chang lee symbolic logic mechanical theorem proving academic press new york 
chen theory modules second order logic proceedings ieee symposium logic programming san francisco september pp 

chen modules logic programming research report department computer science suny stony brook 
chen kifer sorts types polymorphism higher order logic programming technical report cse department computer science engineering southern methodist university march 
chen kifer warren hilog platform database language predicate calculus nd intl 
workshop database programming languages oregon coast june pp 

chen kifer warren hilog order semantics higher order logic programming constructs proceedings north american conf 
logic programming 
chen warren logic complex objects proceedings acm sigact sigmod sigart symposium principles database systems march pp 

church formulation simple theory types journal symbolic logic pp 

clocksin mellish programming prolog springer verlag dershowitz manna proving termination multiset orderings cacm vol 

enderton mathematical logic academic press type inference program transformation partial evaluation ieee intl 
conf 
computer languages miami beach fl pp 

polymorphic type checking prolog hilog th israel conference artificial intelligence computer vision tel aviv december 
warren putting hilog manuscript suny stony brook gelfond lifschitz stable model semantics logic programming logic programming proceedings fifth conference symposium mit press pp 

goldfarb undecidability second order unification problem theoretical computer science 
pp 

smith hickey private communication 
henkin completeness theory types journal symbolic logic 
kifer lausen logic higher order language reasoning objects inheritance scheme acm sigmod conf 
management data may pp 

kifer lausen wu logical foundations object oriented languages technical report department computer science suny stony brook july 
appear acm 
kifer logic reasoning inconsistency journal automated reasoning appear 
kifer subrahmanian theory generalized annotated logic programming applications journal logic programming vol 
number april pp 

kifer wu logic object oriented logic programming maier logic revisited proceedings acm sigact sigmod sigart symposium principles database systems march 
appear jcss 
krishnamurthy naqvi real horn clause language mcc report austin tx 
kuper logic programming sets proc 
th acm conf 
pods san diego pp 

kuper extension lps arbitrary sets ibm research report 
kuper vardi new approach database logic pods 
lassez maher marriott unification revisited foundations deductive databases logic programming minker ed morgan kaufmann publishers los altos ca pp 

lifschitz declarative semantics logic programs negation foundations deductive databases logic programming minker ed morgan kaufmann publishers los altos ca 
lloyd foundations logic programming second edition springer verlag 
shapiro intensional concepts propositional semantic networks cognitive science pp 

knowing intensional individuals reasoning knowing intensional individuals proc 
th ijcai west germany pp 

maier logic objects preprints workshop foundations deductive database logic programming ed 
jack minker washington dc august 
martelli montanari efficient unification algorithm acm trans 
progr 
lang 
systems pp 

meyer model lambda calculus information control pp 

motro baroque browser relational databases acm trans 
office information systems pp 

miller nadathur higher order logic programming proceedings third international conference logic programming london united kingdom july pp 

maier warren computing logic benjamin cummings publ 
montague proper treatment quantification english approaches natural languages hintikka ed dordrecht 
nadathur higher order logic basis logic programming ph dissertation university pennsylvania june 
naqvi tsur logical language data knowledge bases computer science press rockville md 
pereira warren definite clause grammars language analysis survey formalism comparison augmented transition networks artificial intelligence pp 

peterson technique establishing completeness results theorem proving equality siam journal computing pp 
february 
przymusinski semantics stratified deductive databases foundations deductive databases logic programming minker ed morgan kaufmann publishers los altos ca 
przymusinski logic program natural stratification iterated fixed point model proc 
acm pods 
ramesh ramakrishnan warren automata driven indexing prolog clauses proceedings popl january 
ross procedural semantics founded negation logic programs proc 
acm pods 
ross negation hilog proc 
acm pods denver may pp 

van emden kowalski semantics predicate logic programming language jacm 
van gelder alternating fixpoint logic programs negation proc 
acm pods pp 

van gelder ross schlipf unfounded sets founded semantics general logic programs proc 
acm pods pp 

warren higher order extensions prolog needed 
machine intelligence 
warren prolog instruction set report ai center sri international menlo park ca october 
wu private communication 
