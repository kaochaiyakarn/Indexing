sheaf semantics concurrent interacting objects joseph goguen dept computer science engineering university california san diego uses concepts sheaf theory explicate phenomena concurrent systems including object inheritance deadlock non interference computer security 
approach general applies concurrent object oriented systems systems differential equations electrical circuits hardware description 
time discrete continuous linear branching distribution allowed space time 
concepts category theory help achieve generality objects modeled sheaves inheritance sheaf morphisms systems diagrams interconnections diagrams diagrams 
addition behaviour limit result interconnection colimit 
approach illustrated examples including semantics simple concurrent object programming language 
popular formalisms concurrent systems syntactic formal sense represent systems expressions reason systems manipulating corresponding expressions 
example milner ccs hoare csp bergstra acp provide process algebras represent systems expressions primitives process combination implicitly defined sets equations quite different formal approach concurrency girard linear logic 
call semantic model theoretic approaches provide complete sets possible behaviours systems 
approaches received attention syntactic approaches important standards test soundness completeness syntactic approaches defining basic general concepts deadlock information flow 
closer physical intuition describe examples simple natural ways integrate easily additional considerations data structure objects constraints 
trace models csp process algebras prototypical example 
point view petri nets labelled transition systems synchronisation trees seen syntactic 
things quite simple approaches lumped syntactic really varying degrees semantics 
example transition systems synchronisation trees semantics ccs csp csp preferred model failures refusals 
petri nets models linear logic set theoretic models hewitt actor approach 
ccs expressions models temporal logic 
person syntax person semantics 
programming research group oxford university 
research reported supported part science engineering research council fujitsu 
proposes new model theoretic approach concurrency sheaves 
sheaf theory developed mathematics studying relationships local global phenomena applied algebraic geometry differential geometry analysis logic 
form category theory things provides general results limits 
point view concurrency theory suggestive think sheaves generalisation trace models 
sheaves handle real time systems variation space time discrete continuous fact topological space natural way 
definition sheaf involves generalisation prefix closure condition traces introduces important new idea called sheaf condition 
main motivation sheaf theory computing science desire give semantics new generation systems object concurrent information systems programming languages operating systems 
approach allows integrating concurrency objects data abstraction information hiding helps illuminate notion inheritance 
having semantic approach significant help designing new language example sheaf theoretic approach helped design funnel hardware description language 
approach declarative constraint require distinguishing inputs outputs 
easy treat applications constraint logic programming electrical circuits essentially relational sense involve finding solutions number simultaneous relations just functions particular may solution solution 
possible functional input output thinking held back progress area making difficult treat systems involve interdependent origination observed behaviour 
goal obtain general model theoretic framework general concepts deadlock non interference defined independent formalism wide variety approaches compared 
may worth emphasising true concurrency modeled dependent interleaving 
particular lilius shown model petri nets sheaf theoretic framework 
builds earlier sheaf theory part research programme categorical general systems theory 
interest area revived desire give semantics foops functional object oriented programming system rewrite rule machine multi grain hierarchical massively parallel graph rewriting machine see 
main points relationship sheaves objects ffl objects give rise sheaves ffl inheritance relations correspond sheaf morphisms ffl systems diagrams sheaves ffl behaviour system limit diagram 
diagram limit understood sense category theory 
treat interconnection systems colimits 
tries give philosophical motivation points attempt serious philosophical treatment 
definitions examples results 
variety examples may surprising illustrate simple new approach important application area semantics distributed concurrent possibly object oriented systems 
definitions may surprising generality including notion security generalises goguen meseguer non interference approach general definition literature applies example security real time distributed concurrent possibly object oriented databases 
definition deadlock general literature 
category theory studies concurrency example see 
far know monteiro pereira previously studied concurrency sheaves approach closely related 
prerequisites notation basic category theory intuition concurrency needed read 
places including requires mathematical sophistication may especially recommended discusses sheaves different formulation begins gently 
category theory computing scientists 
underlying intuitions basic categorical concepts overview computing science categorical literature 
basic concurrency csp 
semicolon denote composition functions generally semicolon denote composition category denote identity morphism object set theory denote set natural numbers denote cardinality set special rod burstall active listening dome caf oxford tried explain ideas preparation lecture subject uk japan workshop concurrency september 
hans dieter ehrich sernadas jos fiadeiro felix costa tom maibaum esprit sponsored project see interest area encouraging comments 
schwab ne number useful suggestions jeremy jacob david wolfram noticing number bugs earlier draft david benson showing drafts preparation msc thesis rakesh influenced final draft 
diaconescu valuable suggestions especially proof theorem 
frances page joan arnold help preparation manuscript especially diagrams 
dedicated professor erwin lecture occasion birthday march 
sheaves objects asking come know ordinary everyday objects 
consider comfortable armchair see briefly doorway left profile visible 
see front 
eventually sit notice smell see back bottom idea 
fact collection observations certain attributes certain regions space time object 
formalise observations functions domain space time set attributes 
attributes observed theta theta note semantic approach direct observation behaviour syntactic approach sort description abstraction behaviour 
possible domains partially ordered inclusion typically closed finite intersections arbitrary unions form called topological space 
assumption domains observation sufficient definition base observation family sets partially ordered inclusion 
examples describe typical bases observations interest computing science 
example discrete time systems base consisting intervals natural numbers starting initial time appropriate 
intuitively represent time system created observed various intervals starting represent periods continuous observation system 

set natural numbers domain observations complete infinite life cycle 
notation gamma convenient base 
example 

gamma gm finite intervals starting 
example base consisting semi open intervals real numbers starting time appropriate real time systems fr denotes non negative real numbers 
example base consisting certain unions rectangles may useful describing behaviour certain systems distributed dimension space dimension time 
example set subsets theta satisfy conditions 
fh ug require finite fh ug 

jt gamma jh gamma 
conditions say set base union rectangles heights adjacent rectangles differs see 
leave reader check base topological space 
bases examples topological spaces base example closed arbitrary unions 

open set example preordered set set relation reflexive transitive sets form topological space set iff imply generalises example 
denote topology 
intuition works topology means example works time 
example construction define bases reflect branching non linear time temporal logic 
base embedded unique topological space closing finite intersections arbitrary unions 
little lost assuming base topological space 
important discussions note base regarded subcategory category set sets domains objects inclusions morphisms 
inclusion observation form restriction denoted function values defined points object intuitive sense denote set observations inclusion 
denote function maps restriction satisfies equations 
inclusion indicates composition functions denotes identity function equations say contravariant functor base viewed category inclusions morphisms 
set view set valued functor op set op denotes opposite category set valued functors especially convenient apply yoneda lemma formulation suggests natural generalisation attributes structure vector space topological space banach space 
described definition presheaf functor op called base category structure category 

called restriction morphism induced notation usually clearer 
notation 
definition encapsulates insight observations closed restriction generalisation prefix closure condition trace models 
fact condition formulated functoriality allows natural application number basic results category theory 
examples elements functions examples structure category category set sets 
section describes modest somewhat sophisticated assumptions allow handle structures 
approach handle distribution space useful studying multi processor computer systems take account continuity linearity special structure observations may appropriate choice fact presheaves examples arise way definition base attribute object theta theta presheaf form fh theta theta morphisms restriction maps relation expresses property functions embodying laws satisfies elements may called states attributes events depending context 
example arise laws defining logic gate electronic device distribution heat sphere 
elements ig thought traces behaviour 
states traces may sets elementary states may complex structure 
intuitively means states evolve sheaf theory suggests additional condition may quite fundamental applications definition object base topological space unique condition called sheaf condition 
index set restricted finite corresponding condition called finite sheaf condition 
sheaf condition says set pairwise consistent local observations fused unique observation union domains 
deterministic input output system subset attributes inputs states knowing values point time uniquely determines values attributes outputs 
sheaf condition exclude non determinism weak sense stronger sense subset attributes sufficient determine 
note non determinism modeled sets values discussion certainly done applications desired 
notice compact topological space finite infinite sheaf conditions equivalent compactness common applications 
sheaf condition appears satisfied behaviours naturally arising systems computing science 
sheaf hypothesis similar called church thesis intuitively computable functions computable precise sense say turing machines 
claim scott computable functions continuous seen special case claim see section related discussion 
sheaf condition satisfied certain properties systems expressed presheaves 
example see example property fairness gives presheaf sheaf 
finite sheaf condition satisfied examples satisfied naturally arising properties systems computing science 
property presheaves satisfy called separation condition sheaf condition exists unique replaced just exists 
summing discussion main principle support mathematical experience different kinds geometrical object strong intuitions concurrency theory computing science objects give rise sheaves 
sheaves thought kind phase space objects 
sense object better called object template ideal object describes possible behaviours 
object part system may exhibit potential behaviours may inconsistent constraints imposed objects 
objects sense unique identifiers see part system object acquires unique identifier node object labels diagram system 
examples subsection gives number examples illustrating definitions come computing science come electrical engineering 
sophisticated examples section 
example discrete time case delay behaviour described sheaf ff theta ht imply tg denotes negation gamma 
traditional picture phi phi ffi impose unit delay get ff theta ht imply ht tig example gates generally boolean valued function boolean variables form discrete time gate follows ff implies hf example arises arises gate arises unit delay case define ff implies example unit arises example automata generally automata model dynamic digital circuits behaviour depends state input 
diagram algebraic signature describes deterministic necessarily finite state automata initial state oe transition function ffi output function fi 
automaton consists sets ax elements called inputs states outputs respectively plus element oe functions fi ffi ax theta called output state transition functions respectively 
just automaton consideration danger confusion write ax oe fi ffi oe fi ffi respectively 
oeae oeae oeae sigma sigma upsilon pi ffi oe fi ffl ffl ffl time discrete 
sheaf system theta theta fi fi fi fi fi fi fi oe fi ffi respectively denote components automata example define digital devices internal states flip flops 
example non deterministic automata difference deterministic non deterministic automata transition function form ffi theta ffi theta returns set states single state 
get sheaf system replace line definition example ffi ffi empty may happen deterministic automata happen non deterministic automata multiple having input components 
name suggested cliff jones kind diagram introduced goguen thatcher wagner study data types 
reason name set thatcher wagner called time 
sorted signature sigma consists set sorts family sets sigma operation symbols say oe sigma arity value sort operation symbol oe sigma interpreted operation oe aw aw theta theta asn see details 
model electrical components real time base 
example example capacitor fi fi fi fi fi ffl dt gamma capacitance current voltages function continuous derivatives order domain 
traditional picture classical electrical engineering encompasses linear devices capacitors resistors leads systems order linear differential equations general form dx dt dx dt delta delta delta dx dt delta delta delta setting choose exploit sophisticated structure category differential equations involved linear spaces solutions vector spaces topological structure category topological vector spaces better choice category banach spaces see information functional analysis including banach spaces section approach handling additional structure 
way look object solutions partial differential equation smooth manifold example describing flow heat surface sphere 
involve dimensional space say embedded dimensional euclidean space 
see examples similar lines 
return discrete time 
example networks networks usually built sites links clearly sites regarded objects purposes convenient regard links objects 
example possible send arbitrary signals real link certain bandwidth certain conventions signals represented certain physical properties represent network graph nodes include sites links network edges represent connection node link 
example consider network sites labelled links labelled example 
regard graph defining preorder iff link example 
sets give topology open neighborhood collection sites links site links connected topologies various simd mimd multi processor architectures handled way 
third dimension time 
words node edge clearer conflict words connection graphs discussion 
real networks dynamic sense sites links may times 
networks dynamically reconfigure 
networks modeled fixed topologies discussed 
fixing advance potential communication links including part state node 
example potential sites fs potential link pair sites fs fl 
similarly star topology fs denotes central node 

totally ordered set finite sheaf condition automatically satisfied topology 
follows presheaf base 
sheaf non trivial infinite union union excluded 
presheaves 
sheaves interesting phenomena appear infinity appear finite approximations shown example fair scheduler base consider fair scheduler events mean fairness occurs eventually occur occurs eventually occur 
means 
concatenation strings consisting followed followed forever 
interesting notice fa bg behaviour possible finite interval gamma including 
suppose sheaf sheaf condition implies 
fa bg behaviour possible limit 
contradicts definition sheaf 
satisfies finite sheaf gluing conditions 
example stacks give implementation stack distributed space time base example defining ff 
appear example satisfy infinite sheaf condition 
structure categories subsection presents assumptions structure category just set case 
material skipped reading requires somewhat sophisticated category theory 
definition involves attribute object theta theta assume structure categories finite products 
fact see need limits small finite diagrams need finite completeness 
proposed structure categories mentioned far fact satisfy assumptions restrictive practice 
definition structure category finitely complete category functor set called forgetful functor left adjoint set called free functor 
example category vector spaces gives underlying set vector space gives free vector space set basis 
connection definition precise replacing theta theta theta theta 
proposition structure category forgetful functor preserves products generally limits 
proof known right adjoints preserve limits see 
means underlying set product object taken product underlying sets component objects example get product vector spaces giving vector space structure product underlying sets 
section see limits give behaviour systems quite basic approach 
definition object looks general setting definition op structure category base topological space satisfies finite sheaf condition iff equalizer diagram gamma 
theta gamma 
gamma 
arrow tupling restrictions 
sheaf iff equalizer diagram gamma 
pi gamma 
gamma 
pi arrow tupling restrictions compositions projections restrictions 
called sheaf condition 
worth noting point presheaf contained sheaf called enveloping sheaf precisely left adjoint inclusion functor sheaves presheaves called functor see details 
system behaviour interconnection previous section objects coherent collections possible observations 
section considers systems objects particular considers joint behaviour determined behaviours components 
considers relationships inheritance objects interconnect systems 
general compositionality result proved notions 
approach especially convenient systems highly concurrent electrical circuits component objects capacitors resistors digital circuits components flip flops gates 
systems subsection argues systems modeled diagrams sheaves 
order consider systems diagrams need appropriate notion morphism objects able express kinds relationships objects arise connected form systems argue relationships regarded instances inheritance 
morphisms express relationships component objects system defined follows definition base morphism family maps diagram commutes objects may call object morphism sheaf morphism 
gives rise categories obj objects respectively base structure category just natural transformation functor functor lemma attribute objects respectively defining au gamma 

au gives morphism iff imply 
definition attribute objects respectively sending ha ji ha induces morphism method lemma called projection morphism 
example ng mg may think projection map forgetting attributes am dual suggestive language expressing inheritance attributes am am added local attributes 
morphisms occur examples projections 
non projection morphisms describe kind generalised inheritance may involve combining attributes changing representation 
considerations motivate second main principle morphisms represent inheritance 
particular inherits iff apparent reversal direction arises duality forgetting inheritance mentioned 
way multiple inheritance arises multiple morphisms illustrated diagram oeae oeae 
oeae pq describe saying inherits return question objects form systems order objects interact inherit attributes behaviour third object share common language speak 
may pictured follows oeae oeae oeae gamma gamma gamma gamma gamma psi call valley diagram 
cases shared language consists possible behaviours having states attribute object form ff relation may application areas express minimal conditions linear bounded continuously differentiable contains states communication medium real numbers appropriate alphabet events 
common holds general expect imply condition sufficient functor 
may help think general object possible event streams traces 
common case relationship holds languages 
may pictured follows oeae oeae oeae gamma gamma gamma gamma gamma psi call peak diagram 
example relation objects discrete time boolean valued event streams 
similarly gates relations objects 
general way objects communicate boundary object translate languages pass information existence relationship languages 
system diagram double valley diagram follows phi phi phi phi phi phi hj gamma gamma gamma gamma gamma gamma psi ae oe ae oe ae oe ae oe ae oe language relation languages 
example streams discrete time streams continuous time giving translation discrete time interval ng continuous time interval 
similarly translate different clocks allowing asynchronous communication 
example represent summarisation complex data simple statistics thought different perspectives complex object providing form non strict inheritance 
called overriding object oriented programming probably handled way 
ideas inspired leigh star boundary objects sociology science 
example consider system traditional notation described diagram upsilon sigma xi pi sigma upsilon phi phi ffi label gates respectively corresponds diagram category objects oeae oeae sw oeae sw xxxxxxx xz oeae oeae oeae oeae oeae oeae oeae gamma gamma gamma psi oeae considerations motivate third main principle systems diagrams 
line attempt keep category theoretic prerequisites minimum may explain definition system consists graph nodes labelled pre objects edges labelled morphisms pre objects morphisms assumed base structure category 
give sophisticated definition system 
behaviour subsection argues behaviour system limit diagram 
constructing object describes possible behaviours system 
assume system objects choose fixed domain possible behaviour system choice behaviour object say family mutually consistent sense morphism call family ff ng consistent net points object behaviours system ff ng fi fi fi fi fi imply contains consistent nets points structure category set known construction limit diagram node labelled edge labelled 
say limit trying diagram commute 
draw general result category theory showing limits diagrams computed pointwise lim denotes limit system objects including morphisms proposition diagram presheaves values structure category limit fact lim lim proof follows directly known result limits functor categories proved example assumption structure category limits 
motivates fourth main principle behaviour limit 
proposition assumption limits imply system behaviour object mean system exhibits behaviour example assuming set possible illustrate principle parallel composition objects sheaf product theta synchronised parallel connection limit valley diagram synchronising events occur bottom object 
relationship global local behaviour arises system component objects distinguished global local relationship stated sheaf condition definition 
concerns behaviour multi object systems diagrams limits second concerns glueing behaviour domains 
interconnection principles objects sheaves systems diagrams behaviour limit taken earlier categorical general system theory 
principle interconnecting systems corresponds colimits category systems sharing indicated inclusion maps shared parts systems share 
papers develop general results setting including called interconnection behaviour theorems apply material show behaviour sheaf limit point limit behaviours approximating points 
technical rest readers may wish skip reading 
order category systems need define morphisms systems 
convenient general setting diagrams arbitrary category follows definition diagram category functor base category diagrams morphism consists functor natural transformation diagrams composition morphisms hf hf morphism hf ffi results somewhat general restriction called interconnection morphisms removed 
particular objects need sheaves presheaves 
operation natural transformations vertical composition ffi horizontal composition see 
definition defined system kind labelled graph difficult see labelled graph extends uniquely functor source category paths graph conversely functor considered labelling underlying graph source category 
definition consistent definition 
direction arrows may counter intuitive example common case inclusion node diagram system corresponds need translating language object system object node diagram 
difficult check fact composition diagram morphisms associative identities category diagrams denoted dgm 
basic result guarantees setting category systems complete interconnect systems 
elegant proof due diaconescu 
theorem interconnection theorem finitely complete dgm finitely cocomplete finite colimits 
proof define functor cat op cat op category op op op functor noting strict indexed category sense dgm flat see notation theorem show finite cocompleteness flat checking hypotheses theorem 
cat cocomplete 

op finitely cocomplete category assumed finitely complete 

locally reversible op op op left adjoint right adjoint functor right kan extension functor kan extension theorem see theorem page assumed complete 
colimits category dgm corresponds interconnecting systems 
example interconnecting relations represented peak diagrams common object gives double peak diagram behaviour limit gives relation composition relations illustrated 
may summarise discussion principle see interconnection colimit 
gamma gamma psi gamma gamma psi gamma gamma gamma ae oe composition relations soon need result limits proposition complete category limit functor lim dgm op gamma 
right adjoint functor gamma 
dgm op sends object diagram consisting just node labelled proof just reformulation universal property limits 
particular note functor category dgm dce category cones dce intuition systems suggests calculate behaviour system behaviours components 
intuition precise theorem formal setting stated follows theorem behaviour theorem dgm op small diagram diagrams systems complete category hopefully suggestive notation lim colim lim lim proof noted proof proposition right adjoints preserve limits limits dgm op colimits dgm 
result general compositionality theorem sense giving general conditions behaviours parts composed give behaviour 
consider special case discrete base just nodes say 
functor dgm op consists just diagrams denote colimit dgm formula lim lim theta lim may amusing surprising theorem prove behaviour sheaf limit point limit behaviours leading 
presheaf op complete index set shape gamma gamma define diagram dgm base diagram base set labelled diagram base theta hj labelled 
define follows bases projection hj 
objects hj restriction morphism 
define similarly bases projection hj 
objects hj restriction morphism 
apply limit functor lim diagram diagrams base take limit get diagram gamma 
pi gamma 
gamma 
pi equaliser formulation sheaf condition definition says sheaf iff behaviour theorem says limit diagram gamma gamma psi gamma gamma psi gamma gamma gamma gamma psi arrows restriction morphisms 
conclude sheaf iff behaviour limit behaviours example 

limit 
discussion considered systems different levels objects collections possible observations systems collections interacting objects interconnections systems interacting systems 
wide variety systems treated way including digital hardware electrical circuits shown section concurrent programming languages 
concepts category theory helped achieve generality model objects sheaves systems diagrams interconnections diagrams diagrams 
addition behaviour limit result interconnection colimit 
done possible iterate constructions obtain hierarchical systems arbitrary depth see 
approach systems declarative constraint sense behaviour arises mutual effects interdependent origination propagation causes effects particular assume devices inputs outputs limited simple functional devices setting means system satisfy specification presheaf representing property fairness interconnect property system resulting behaviour isomorphic behaviour original system 
course approach property 
example gordon higher order relations study digital circuits 
point worth bit emphasis 
interesting look called internal choice external choice context limits diagram sheaves 
noted non determinism simply corresponds function choose set 
participates larger system elements may longer consistent system behaviour may component consistent net points system 
interestingly component may completely determined behaviour rest system 
case may say external choice 
values nth component remain may say internal choice 
constraint oriented view systems distinction internal external choice appears somewhat artificial may depend point view taken 
formulating discussion arbitrary structure category requires additional concepts discussed section worth noting sheaves arise particular model concurrency kind transition system typically form complete subcategory category sheaves appropriate base general sheaves correspond system kind 
semantics properties systems stated motivated illustrated main principles apply examples immediate interest computing science 
section shows give semantics simple concurrent language executing distributed environment 
objects considered previous sections closed sense attributes divided inputs outputs values inputs uniquely determine outputs 
modern programming requires open systems objects constrain happens certain conditions leave rest unconstrained 
course non determinism outputs partially constrained possible 
openness sense similar happens number objects connected ethernet responds messages addressed 
syntax simple concurrent programming language order sorted signature sigma diagram delta delta delta theta theta theta hy gamma gamma gamma psi gamma delta theta delta qk oe oeae oeae oeae oeae oeae gamma delta ffl ffl ffl pgm var exp nat uid skip ffl uid sort object names var variables nat natural numbers exp expressions pgm programs 
operations expressions order sorted signature addition data sorted signature partial ordering set sorts assumptions consistency overloaded operation symbols 
diagram augmented indicate subsort relationships hooked arrows 
see details order sorted algebra 
operations programs assignment skip instruction 
indicates subsort relation order sorted algebra 
assume sorts uid var nat populated countably infinite number mutually disjoint constants 
typical elements sort uid tom dick harry var elements sort nat course 
sigmaj denote set symbols sigma sigmaj denotes set finite strings elements sigma 
indicated variables range sigmaj language algebra sigma sigma terms constructed just order sorted term algebra order simplify transition rules reverse polish polish postfix lukasiewicz notation terms sort pgm represent programs 
example program appears sigma pgm string simplify notation write uid sigma uid similarly var sorts 
nat iff 
abbreviate sigma pgm sigma simplicity discrete time example 
appropriate event stream object ff sigma give objects define semantics various features language 
purpose transition notation defining objects base attribute object 
means 
implies basic operation takes unit time easy redefine 
different operations take different times operations may take long 
general notation 
elements may patterns define set transitions 
example 
means exist strings sigmaj numbers 
indicate initial state defined matches pattern usually just single attribute notation 
object defined set transition relations family sets term valued functions satisfying transition relations closed restriction 
define series objects feature language put give system semantics language 
exists conditions defining positive horn clauses 
example parallel composition feature defined object denoted having attribute object sigma satisfying skip 
skip 
sigma just says parallel programs completed parallel constructor eliminated computation program proceed parallel elimination 
note object subobject resulting inclusion morphism relate objects 
example sequential composition object denoted attribute object sigma defined 
skip skip 
says program completed execution second 
constrain done program 
projection inclusion 
example assign assignment defined family objects var 
attribute object theta sigma defined 
wi hm 
hn hn 
hn pnw sigma 
says variable initially value assignment causes object remember variable replaced value occurs just 
projection second component pair state 
example adder 

theta sigma attribute object 
typical adder object fred fred uid may defined follows hs 
sw 
hs fred number hs wi 
hs sigma 
says fred performs just addition time allows operations occur concurrently 
additions ready performed perform replaces chosen expression nm name sum 
sees name replaces number memorised forgets number ready sum 
notice fred prohibits communicates name 
projection second component pair state 
example multiplier typical multiplier say tom tom uid defined just adder fred replaced fred replaced tom defined features language 
unfortunately allows transitions occur 
introduce frame object keep things deliberately changed example frame object denoted attribute object sigma defined 
uid uid sigma sigma order close system add shop steward disallows unregistered workers example union object denoted defined ff sigma gamma uid gammaw set union members example 
system looks follows fred oeae pq tom oeae oeae oeae oeae phi phi phi phi phi phi phi phi oeae oeae gamma gamma gamma gamma gamma oeae oeae oeae oe limit diagram evaluates programs little language 
limit object instant time object copy program possibly internal state value variable 
time progresses program simplified worker objects process parts 
processing concurrent distributed 
objects variables true objects sense object oriented programming simple ones 
consistent nets points limit object seen run time states computation 
add workers programs executed quickly 
note objects seen infinite state automata 
course simple example 
clear techniques extend complex languages 
example easy add language constructs loops 
interesting feature add abort 
semantics functional object oriented language foops rewrite rule machine see developed similar way hope discussed papers 
see applications sheaf theory concurrent systems 
deadlock important real systems deadlock free sense get dead states 
definitions deadlock literature tend syntactic far am aware definition sufficiently general encompass kinds system considered 
proposes definition limit object system system deadlock iff gamma furthermore system terminates iff deadlock says system evolved events evolution different state impossible 
terminating drastic form deadlock possible behaviour system extends example consider short circuited volt battery volt potential difference terminals 
discrete time system state instant switch thrown produces short circuit terminal state 
course realistic model show large current flow followed decay battery wiring simple model chosen example short circuit inconsistency precludes behaviour 
common example computing science literature concurrency example dining philosophers somewhat situation involves philosophers supported research institute circular table center contains plate food 
food eaten seated table fork hand 
table forks adjacent chairs 
philosophers asynchronous processes think eat 
construct formal model situation fp names philosophers ff names forks 
diagram situation system oeae oeae oeae oeae oeae oeae oeae oeae pq bn theta theta theta theta theta theta theta theta thetafl bm pi fork object philosophers states fp transitions 


fork remain picked put 
philosopher states hl ri 
ft stand thinking eating respectively transitions 
hl ri 
hl hl ri 
hl hl 
hl hl 
hl 
hl hp 
rule says philosophers born thinking forks 
second rule says philosopher forks continue state constraining actions neighboring philosophers 
third rule says forks thinking may hungry constraining neighbors 
fourth rule says forks pick right fork available constraining left neighbor note second rule need 
fifth rule says remain state having just right fork constraining left neighbor need remain fork state 
sixth rule says right fork pick left fork available 
rule says forks eating put think 
slightly accurate model add rule saying forks continue hold eat rules unit time eat 
object philosopher projections third components shown diagram 
denote limit system ig 
officially elements tuples functions tuples philosophers elements forks 
equivalent consider tuple valued functions flattening tuples 
fact tuples lot redundancy due constraints imposed representing consistent nets points suffices consider tuples form hf ft state th fork middle component state th philosopher 
feel free call state call tuples states system 
notice system state philosopher state hf gamma subscripts understood modulo 
unique state system philosopher initial state ti call initial state system 
easy see state philosopher holds right fork reachable deadlock state 
see reachable suffices give sequence transitions initial state 
fact parallel transitions philosopher hungry second philosopher picks right fork ti 
ei 
hp ei accurate description hungry process may lead eating 
denote state see deadlock state note second rule applies checked seeing lefthand sides rules match hp gamma subscripts understood modulo 
possible transitions return system state corresponding righthand side second rule hp gamma analysis shows system terminal 
possible modify example real time giving slightly different interpretation transition notation omit 
deadlock arise testing see system satisfies property interconnecting system property limit property inconsistent system sense system states property interconnected system exhibits deadlock 
information flow security important property real systems security may want sure access certain confidential information protected certain unauthorised actions prevented 
example don want electronic bank able discover largest accounts withdraw funds 
recognised noninterference assertions express security properties monolithic sequential systems 
active research topic extension assertions general classes system 
definition extends non interference wider class system distributed object oriented databases appears general literature 
see general approaches 
need auxiliary material definition morphism set valued presheaves 
image presheaf denoted defined note definition generalised suitable structure category equation definition 
note fact image morphism sheaves sheaf 
main concept definition system objects morphisms behaviour limit having projections sm non interfering written sm iff holds limit subsystem sm morphisms sm omitted projections gamma fmg 
says behaviour system looks object object sm omitted object sm flow information may help think crook market analyst information seeks steal 
sm definition general apply data dependency analysis compilers concurrent languages distributed systems flow information natural language conversation lines suggested situation semantics dretske 
possible sheaf theory help providing natural semantics situation theory 
sheaf approach provides semantic model theoretic foundation concurrent distributed computing possibly active objects commitment particular notation conceptualisation concurrency 
general approach closer physical intuition provide standards measure soundness completeness syntactic systems 
sheaf theory mathematics study relationships local global phenomena example algebraic geometry differential geometry logic subject developed form category theory 
theory topoi originally developed lawvere tierney see exciting development respect 
interesting topic research see theory topoi tell concurrency 
example able reason system internal intuitionistic logic corresponding topos sheaves 
concepts category theory helped achieve generality objects modeled sheaves inheritance sheaf morphisms systems diagrams interconnections diagrams diagrams 
addition behaviour limit result interconnection colimit 
approach illustrated examples including semantics simple concurrent object programming language 
definitions examples results just 
variety examples may surprising 
example illustrates important class applications semantics concurrent distributed object oriented systems 
definitions may surprising generality including notion security generalises goguen meseguer non interference approach sequential systems example real time distributed concurrent object oriented databases 
general definition deadlock 
interesting concepts easily stated purely semantic form 
gul agha 
actors model concurrent computation distributed systems 
mit 
michael barr charles wells 
toposes triples theories 
springer 
der mathematischen volume 
michael barr charles wells 
category theory computing science 
prentice hall 
jon barwise john perry 
situations attitudes 
mit 
bradford books 
jan bergstra jan willem klop 
process algebra synchronous communication 
information control 
fred dretske 
knowledge flow information 
mit 
bradford books 
hans dieter ehrich joseph goguen sernadas 
categorial theory objects observed processes 
de bakker willem de roever rozenberg editors foundations object oriented languages pages 
springer 
lecture notes computer science proceedings rex fool workshop noordwijkerhout netherlands may june 
hans dieter ehrich sernadas 
algebraic implementation objects objects 
de bakker jan willem rozenberg editors proceedings rex workshop stepwise refinement distributed systems models formalisms correctness pages 
springer 
lecture notes computer science volume 
hans dieter ehrich sernadas christina sernadas 
objects object types object identification 
hartmut ehrig editors categorical methods computer science aspects topology pages 
springer 
lecture notes computer science volume 
hans dieter ehrich sernadas christina sernadas 
data types object types 
journal information processing 
gian luigi ferrari 
unifying models concurrency 
phd thesis university pisa 
jean yves girard 
linear logic 
theoretical computer science 
joseph goguen 
mathematical representation hierarchically organized systems 
editor global systems dynamics pages 
karger 
joseph goguen 
categorical foundations general systems theory 
pichler trappl editors advances cybernetics systems research pages 
books 
joseph goguen 
objects 
international journal general systems 
joseph goguen 
categorical manifesto 
mathematical structures computer science march 
programming research group technical monograph prg university oxford march 
joseph goguen 
semantic specifications rewrite rule machine 
aki yonezawa ito editors concurrency theory language architecture pages 
proceedings japan workshop springer lecture notes computer science volume 
joseph goguen 
categorical approach general systems theory 
george klir editor applied general systems research pages 
plenum 
joseph goguen jos meseguer timothy winkler 
rewrite rule machine 
technical report technical monograph prg programming research group oxford university 
joseph goguen jos meseguer 
security policies security models 
marvin schafer dorothy denning editors proceedings symposium security privacy pages 
ieee computer society 
joseph goguen jos meseguer 
unwinding inference control 
dorothy denning jonathan millen editors proceedings symposium security privacy pages 
ieee computer society 
joseph goguen jos meseguer 
unifying functional object oriented relational programming logical semantics 
bruce shriver peter wegner editors research directions object oriented programming pages 
mit 
preliminary version sigplan notices volume number pages october 
joseph goguen jos meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
technical report sri csl sri international computer science lab july 
originally lecture seminar types carnegie mellon university june draft versions exist 
joseph goguen james thatcher eric wagner 
initial algebra approach specification correctness implementation data types 
technical report rc ibm watson research center october 
current trends programming methodology iv raymond yeh editor prentice hall pages 
joseph goguen david wolfram 
types foops 
william kent robert meersman khosla editors object oriented databases analysis design construction pages 
north holland 
proceedings ifip tc conference uk july 
robert goldblatt 
topoi categorial analysis logic 
north holland 
michael gordon 
higher order logic formalism specifying verifying hardware 
george milne subrahmanyam editors formal aspects vlsi design 
north holland 
john gray 
sheaves values category 
topology 
alexandre grothendieck 
cat egories ees 
groupe de eom etrie alg du bois marie expos vi 
institut des etudes 
reprinted lecture notes mathematics volume springer pages 
hoare 
communicating sequential processes 
prentice hall 
jeremy jacob 
security framework 
proceedings computer security foundations workshop pages 
mitre 
new hampshire 
saunders mac lane 
categories working mathematician 
springer 
william lawvere 

william lawvere maurer gavin editors model theory topoi pages 
springer 
lecture notes mathematics volume 
johan lilius 
sheaf semantics petri nets 
technical report helsinki university technology 
jos meseguer ugo montanari 
petri nets monoids new algebraic foundation net theory 
proceedings symposium logic computer science 
ieee computer society 
full version report sri csl computer science laboratory sri international january submitted information computation 
robin milner 
calculus communicating systems 
springer 
lecture notes computer science volume 
luis monteiro fernando pereira 
sheaf theoretic model concurrency 
technical report csli center study language information stanford university october 
colin 
calculus information flow 
technical report royal signals radar establishment 
benjamin pierce 
taste category theory computer scientists 
technical report cmu cs carnegie mellon university 
reisig 
petri nets 
springer 
eatcs monographs theoretical computer science 
susan leigh star 
structure ill structured solutions heterogeneous problem solving boundary objects distributed artificial intelligence 
michael huhns les gasser editors distributed artificial intelligence volume pages 
morgan kauffmann 
victoria joseph goguen steven eker serge 
funnel formal semantics 
proceedings advanced research workshop correct hardware design methodologies pages 
ieee 
turin 
andrzej tarlecki rod burstall joseph goguen 
fundamental algebraic tools semantics computation part indexed categories 
theoretical computer science 
monograph prg august programming research group oxford university 

sheaf theory 
cambridge 
london mathematical society lecture notes series 
glynn winskel 
compositional proof system category labelled transition systems 
information computation 

functional analysis 
springer 
second edition 
contents sheaves objects examples 
structure categories 
system behaviour interconnection systems 
behaviour 
interconnection 
discussion 
semantics properties systems deadlock 
information flow security 

