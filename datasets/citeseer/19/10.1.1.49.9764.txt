pass optimal tree parsing trees todd proebsting benjamin whaley department computer science university arizona tucson az usa cs arizona edu describes theory implementation wburg code generator generator accepts tree grammars input produces code generator emits optimal parse ir tree just single bottom pass 
furthermore wburg eliminates need explicit ir tree altogether 
grammars wburg generated parsers parse proper subset pass systems handle 
analysis indicates wburg optimally handle grammars instruction sets sparc mips 
compilers intermediate representation ir trees represent expressions 
compiler front generates ir tree back walks tree emitting appropriate assembly language instructions operands 
automatically generated code generators perform pattern matching ir trees emit optimal code 
code generator generator consumes tree grammar associated semantic actions 
resulting code generator requires passes ir tree determine cost parse execute associated semantic actions 
code generator generators model include beg esl twig agt burg fhp pro iburg fhp lburg fh 
describes theory implementation wburg generator accepts tree grammars input produces code generator emits optimal parse ir tree just single bottom pass 
furthermore wburg eliminates need explicit ir tree altogether 
generated parser emits optimal code retaining entire ir tree single pass 
grammars wburg generated parsers parse proper subset pass systems handle 
analysis indicates wburg optimally handle grammars major instruction sets including sparc mips 
system advantage requiring dynamically allocated ir tree suffers small amount additional bookkeeping 
preliminary experiments indicate wburg pass parsers run faster pass burg generated parsers malloc free 
overhead dynamic allocation completely factored pass parsers ranged faster slower burg parsers 
related code generator generators cost augmented instruction patterns produce code generators optimally parse ir trees 
resulting code generator uses tree pattern matching dynamic programming find cost instruction sequences realizing ir tree computations 
various code generator generators differ pattern matching technology perform dynamic programming 
pattern matching techniques vary widely theoretical efficiency ho 
previous code generators employed pattern matching technologies ranging slowest naive esl fhp fh top agt fastest bottom fhp pro plg 
systems perform dynamic programming compile time esl agt fhp fh bottom rewrite system burs technology dynamic programming compile compile time fhp pro plg 
previous tree pattern matching systems required passes ir tree labeling tree dynamic programming information selecting cost parse information 
enable tree walks design requires allocating building explicit ir tree 
contrast wburg parsers find optimal parse single pass 
surprisingly explicit ir tree needed 
procedure invocations necessary build tree bottom fashion form trace tree structure recursive descent parser traces parse tree necessary system produce optimal code 
oberon compiler code generator works single pass benefit explicit ir tree wg 
order generate complex addressing modes code generator retains constant amount information guide subsequent instruction selection decisions 
wburg parsers retain constant amount information subsequent decisions 
oberon code generator generate optimal code expressions automatically generated 
burg automata burg code generator generator accepts cost augmented tree grammar input automatically produces tree parser gives optimal parse ir tree pass algorithm fhp 
burg dynamic programming compile compile time creates state machine guiding stmt asgn addr reg addr add reg con addr reg reg add reg con reg con con const burg style grammar subsequent pattern matching instruction selection decisions 
rules burg grammar form nonterminal rule rule number cost consider burg grammar 
fourth rule specifies result adding immediate value value held register placed register cost 
second rule corresponds register offset addressing mode supported architectures free 
burg grammar describes operations addressing modes particular architecture 
rules burg grammar forms 
chain rule single nonterminal right hand side base rule terminal operator right hand side 
rules chain rules 
restrict analysis grammars normal form 
grammar normal form patterns chain rules base rules form nonterminals operator arity 
normal form grammars expressive tree grammars restriction greatly simplifies discussion 
restrict discussion binary unary leaf operators 
parsers produced burg pass algorithm give optimal parse tree 
bottom pass tree labels node state 
state encodes nonterminal grammar rule apply current node derive nonterminal cost 
burg states transition function implicitly encode cost rule explicit cost comparisons avoided completely compile time burg major advantages 
second top pass finds cost parse states 
second pass reduces tree applying appropriate rules nodes tree 
shows set burg generated states grammar 
state encodes fact add node labeled state reduced addr nonterminal rule reg rule 
state represents label const nodes 
const nodes reduced directly con nonterminal rule require application chain rules addr reg nonterminal reductions 
note reducing const node addr require state nonterminal rule op add stmt addr addr add reg con reg reg add reg con con state nonterminal rule op asgn stmt stmt asgn addr reg addr reg con state nonterminal rule op const stmt addr addr reg reg reg con con con const burg states chain rule applications rules followed base rule 
note necessarily correspondence states operators state corresponding particular operator may exist 
reductions state follow pattern zero chain rules followed exactly base rule 
bottom reductions reverse order 
application base rule node children cause children reduced nonterminals right hand side base rule 
pass tree parsers pass system defers reduction decisions labeling complete 
node tree contains label unbounded amount information retained prior starting reduction process 
reductions done bottom labeling pass subtree reduced discarded reduction phase pattern matching 
labeler retain unreduced subtrees reduced 
note normally apply rules top order semantic actions associated rules typically applied bottom order order code emitted 
point forward assume reduce trees bottom 
states optimal reductions bottom labeling pass 
rule rule state reduce node labeled state 
labeling pass immediately apply rule node labels state 
wburg creates array reduce indexed state numbers 
state contains base rule state nonterminal stmt con array reduce grammar wburg places appropriate nonterminal nonterminal appearing left hand side base rule table 
reducing node base rule cause descendents node reduced longer needed 
true state applying base rule completely reduce node 
subsequent reductions ancestor nodes may require application chain rules node order derive nonterminal left hand side base rule 
node retained possible chain rule applications 
consider state contains base rules 
labeler immediately determine appropriate reduction reaches node 
wburg mark state entry reduce unknown 
gives reduce grammar formally reduce iff state contains base rule 
state contains base rules decision apply depends reductions ancestor nodes state contain information guide reductions children 
base rules vector nonterminals reg con right hand side 
node labeled state immediately reduce left child reg right child con 
fully reduces children 
labeler defer reductions state node 
wburg generate vectors reduce map states nonterminals children reduced 
generalize notion create tables guide child reductions states child parent 
dimensional arrays left nt right nt hold nonterminals node children reduced 
left nt holds nonterminal node labeled reduced left child node labeled entry put left nt left nonterminal righthand side base rule derives base rule zero chain rules 
conditions nonterminal left hand side base rule put table 
condition ensures wburg knows base rule ultimately applied left child right nt similar 
formally left nt jn iff gamma implies oe right nt jn iff gamma implies oe gives tables indicates immediate reduction possible 
left nt parent state left reg addr child 
state con con right nt parent state right reg child 
state con con arrays left nt right nt grammar characteristic burg graph cost augmented tree grammar burg generates compile compile time function state invoked compile time computes state particular node operator states children 
state operator theta state left theta state right state state generate characteristic directed graph represent states state transitions 
nodes represent states edges represent possible state transitions 
edges annotated left right depending target node represents left right child source node 
formally left gamma 
iff state right gamma 
iff state shows characteristic graph characteristic graph depicts states derived combinations operators certain child states 
instance graph indicates node state state right child state left child 
characteristic graph generate trees states starting root node state example doing traversal graph left right labeled edge time encounter node 
different edges may chosen time node encountered traversal 
nodes visited edges followed represent tree states 
general characteristic graph generate superset trees grammar describes combinations left right labeled arcs leaving particular state combined generate state 
cyclic graphs generate trees unbounded size 
bound sizes trees generated acyclic graph simply size largest tree graph 
bound maximum amount information retained passes pass parser 
arc pruning analysis characteristic graph leads method doing pass parsing retains constant amount information reduction left right right left left right left state const state asgn state add transition graph burg states grammar labeled node subtree roots 
wburg prune arc graph arc corresponds state transition correct base rule reduction child node known 
remaining arcs represent reductions analysis immediately determine postpone parser safely reduce ancestor 
pruned graph acyclic bounded number nodes retained subsequent reduction 
original graph cyclic pass parsing grammar possible arc pruning 
arcs leaving state may pruned parser immediately reduce left right children state node 
parser reduces children state node parser retain nodes children node grandchildren 
children may require subsequent chain rule reductions grandchildren completely reduced point 
condition pruning arcs guarantees child base rules applied immediately application child chain rules may deferred necessary record nonterminal child reduced 
entries left nt right nt correspond directly pruned arcs 
arc left may pruned left nt labeler immediately reduce nonterminal forces reduction base rule 
applying arc pruning rule resulting graph contains cycles grammar parsed optimally single bottom labeling pass retaining constant number unreduced nodes point 
conservative upper bound number unreduced nodes size largest tree generated pruned graph plus information deferred chain rule reductions nodes just leaves tree 
pruning rule removes directed edges graph grammar largest subtree reduction may deferred consists tree node children 
children lack chain rule applications 
code generator generator pass optimal parsing ir trees application pruning rule creates arc free graph labeling reducing tree done single pass deferring nodes worth reductions labeled node reductions node possible chain rule reductions children 
descendents tree completely reduced 
wburg system generating optimal single pass tree parsers grammars characteristic graph completely pruned arcs 
note class grammars wburg fill entries left nt right nt correspond valid state transitions 
reductions induced wburg reduce left nt right nt tables identical reductions burg parser apply systems find identical cost parses 
consider procedure compose creates new node operator child nodes 
compose labels node attaches node children 
initializes node nonterminal field zero indicating current node reduced 
procedure checks array reduce see node reduced immediately 
compose immediately reduce entire subtree rooted node course previously reduced nodes 
reduce help parser consults left nt right nt obtain appropriate nonterminals children reduced performs reductions 
case compose reductions node invoke reductions children 
node reductions children chain rule reductions wait node parent labeled causes subsequent reductions 
gives code reduce performs reductions 
nodes previously reduced desired nonterminal terminate reduction 
arity rule number gives number nonterminals right hand side rule number represents number subsequent reductions rule invoke 
chain rules kids simply holds node base rules vector node children 
nts table nonterminals kids reduced rule number 
pass optimal parsing trees burg tree parsing algorithms require passes ir tree ir tree retained second pass complete 
tree may arbitrary size tree nodes dynamically allocated deallocated 
wburg parsers parse ir tree single bottom pass procedure compose node ptr node int op node ptr left child node ptr right child node left left child assemble tree 
node right right child node state state op left child state right child state label tree 
node nt node reduced 
reduce node state reduce node reduce node state reduce immediately 
left nt left nt left child state node state right nt right nt right child state node state reduce left child left nt reduce children reduce right child right nt base rules 
procedure procedure compose procedure reduce node ptr node int nt nt node nt return previously reduced 
rule number rule node state nt find rule apply 
arity rule number invoke subsequent reduce node kids nts rule number reductions 
invoke semantic action rule 
node nt nt record reduction 
procedure procedure reduce reductions node may require reducing child nodes 
indicate subtrees descending node retained entire tree reduced case 
retaining entire subtrees overly conservative 
analysis described section guarantees compose processes node deferred reductions possible subtree rooted node chain rule reductions children reductions 
deferred reductions exist children 
deferred reductions node summarized state nt fields node children 
course information kept copying node eliminating need retain child nodes creating new node 
node exists parent created 
possible parser eliminate creation explicit ir tree 
furthermore parser run time stack store nodes eliminating need dynamic heap allocation deallocation 
consider modified compose procedure compose 
compose procedure compose node ptr node int op node ptr left child node ptr right child node self state state op left child self state right child self state node self nt reduce node self state node self left left child self create tiny tree node self right right child self immediate reduction reduce node self reduce node self state node children 
left nt left nt left child self state node self state right nt right nt right child self state node self state reduce left child self left nt reduce children 
reduce right child self right nt node retain left left child self retain children node retain right right child self chain rule applications 
node self left node retain left node represents node tree 
node self right node retain right procedure procedure compose invokes reduce possible 
nodes retain necessary information deferred reductions children 
node retains summary state node self retained state children node retain left node retain right pruning analysis guarantees sufficient pass parsing 
node maintains pointers left right children give reducer illusion actual tree 
compose maintain pointers invoke reducer possible copy states children root node necessary 
note left right children node retain left right accessed rules may defer chain rules 
array reduce indicates immediate reduction current node pointers children copied node entire subtree rooted current node reduced 
reduction current node deferred left right children reduced root nodes copied node retain left node retain right chain rule reductions 
node left right pointers set point fields 
compose constructs nodes invokes parsing reductions 
node retains information necessary deferred reductions 
nodes built longer needed 
bottom tree building may require maintaining multiple nodes represent unreduced portion entire subtree 
fortunately nodes kept run time stack 
platform grammar system burg burg wburg wburg alloc alloc trees trees alpha sparc sparc sparc table speeds parsers sec 
appendix contains complete pass parsing example 
implementation wburg extension burg 
wburg burg identical specification languages 
wburg uses output burg build prune characteristic graph 
suitable grammars creates reduce left nt right nt tables 
experimental results set grammars parsed optimally wburg parsers proper subset grammars parsed optimally burg analysis indicates useful grammars including describing sparc mips architectures fall subset 
compared speed wburg pass parsers burg pass parsers 
best knowledge burg produces faster pass parsers parser generator system 
speeds burg parsers dynamic memory allocation 
dynamic allocation malloc free 
wburg parsers explicit trees compose trees compose 
wburg parsers trees dynamic memory allocation 
tests utilized modified versions lcc grammars sparc fh 
tests consisted labeling reducing unique trees lcc generates compiles 
test parsed set trees total nodes times 
tests performed lightly loaded dec alpha sun sparcstation workstations 
times table measured system clock 
clearly wburg parsers trees faster burg burg trees allocated malloc free 
burg wburg parsers operate trees dynamic memory allocation wburg parsers bookkeeping avoid redundant reductions burg need 
wburg parsers avoid second tree walk occasionally visit node second time deferred chain rule reductions 
measured pixie alpha number cycles executed wburg parsers greater burg 
difference actual running time ranged gamma believe due cache effects measured pixie 
sparc wburg parsers faster burg additional bookkeeping avoid redundant reductions 
pleased results currently explain speculate 
possible explanations include reduced register window spilling recursive tree walk beneficial cache effects 
relative speeds burg parsers wburg parsers appear independent grammar expected 
overhead copying child states parent nodes wburg parsers trees slower trees 
lcc grammars lcc grammars written lburg code generator generator modified burg 
lcc grammars allow rule costs determined runtime burg handle alter grammar constant costs 
put lcc grammars normal form 
changes grammars met sufficient restrictions pass optimal code generation modification 
lcc puts trees canonical form constant operands appear right child commutative operators greatly simplifies code generation grammars 
tests demonstrate wburg handle non canonical grammars possible permutations complex addressing modes 
developed theoretical basis optimal pass tree pattern matching 
theory developed wburg code generation system optimal tree pattern matching important advantages previous systems code generator labeling reducing single parsing pass code generator need build explicit ir tree 
advances result time space advantages 
agt alfred aho ganapathi steven tjiang 
code generation tree matching dynamic programming 
acm transactions programming languages systems october 
balachandran dhamdhere biswas 
efficient retargetable code generation bottom tree pattern matching 
computer languages 
esl helmut friedrich wilhelm rudolf landwehr 
beg generator efficient back ends 
proceedings sigplan conference programming language design implementation pages new york 
acm 
fh christopher fraser david hanson 
retargetable compiler design implementation 
benjamin cummings redwood city california 
fhp christopher fraser david hanson todd proebsting 
engineering simple efficient code generator generator 
acm letters programming languages systems september 
fhp christopher fraser robert henry todd proebsting 
burg fast optimal instruction selection tree parsing 
sigplan notices april 
ho christoph hoffmann michael donnell 
pattern matching trees 
journal acm january 
plg eduardo susan graham 
optimal code generation expression trees application burs theory 
proceedings th annual symposium principles programming languages pages new york 
acm 
pro todd proebsting 
simple efficient burs table generation 
proceedings sigplan conference programming language design implementation pages new york june 
acm 
wg wirth gutknecht 
project oberon design operating system computer 
addison wesley 
example pass parsing outline pass construction reduction node tree 
example utilizes grammar tables described 
burg states appear underneath operators tree 
burg left right bottom reduction example tree appears 
rule reduction annotated node rule applied 
gives necessary calls building reducing example tree wburg derived pass parser 
tree nodes composed correspond labels 
final call reduce guarantees root node fully reduced goal nonterminal stmt 
gives nearly identical calls reducing tree constructing tree 
note nodes reused serve children prior composition benefit pass parsing trees 
outlines actions pass parser takes function calls 
reductions induced calls identical 
nonterminal column indicates pass parsing tables reduce left nt right nt determining reductions 
reductions node demonstrate subtleties pass parsing 
note visits possible reductions occur consequence actions nodes visiting time reduce causes reduction con results application rule con const 
parent node uses left nt determine reduced con 
previously reduced con visit reduce cause reduction 
point parser applied base rule uses left nt determine reduced reg causes application rule reg add reg con making reduction revisited reduced chain rule reg con base rule requires reduced reg 
wburg derived parsers produce simple left right reduction order way reductions deferred 
reductions maintain bottom ordering 
asgn add const const add const const example ir tree state labels reductions node con const reg con con const reg add reg con con const addr add reg con con const reg con stmt asgn addr reg burg left right bottom reduction 
compose const compose const compose add compose const compose add compose const compose asgn reduce stmt pass parsing tree 
compose const compose const compose add compose const compose add compose const compose asgn reduce stmt pass parsing tree 
statement nonterminal reductions node compose const reduce con con const compose const reduce con con const compose add left nt con previously reduced right nt con previously reduced compose const reduce con con const compose add left nt reg reg con reg add reg con right nt con previously reduced compose const reduce con con const compose asgn reduce stmt addr add reg con reg con stmt asgn addr reg reduce stmt previously reduced pass reductions 
