survey research graphical user interfaces vijay department computer science university utah salt lake city utah august importance focus human computer interaction recognized industry academia governments 
user interfaces considered core fields computer science regarded critical area organizational impact 
numerous sub disciplines research area ranging design implementation user interfaces interface development tools analysis interfaces human factors 
report covers areas research graphical user interfaces 
discussion comprehensive serve useful starting point pointers areas interest field 
user interface ui part computer program handles output display input user 
rest program called application application semantics 
application tries give users ways conceive view manipulate complex data structures interested ways complexity manageable 
user interfaces facilitate management 
extensive research topics human computer interaction hci 
acm started new publications hci transactions computer human interaction magazine called interactions 
yearly conferences acm siggraph symp 
user interface software technology acm sigchi proc 
human factors computing systems 
guis small part vast area hundreds papers published year developments graphical user interfaces 
report tries summarize important aspects research 
identified areas research field 
sections deals study interfaces properties design options explore trying design interface 
possibilities designing interfaces merits drawbacks possibilities address problems inherent interfaces discussed category 
research reported second area section concentrates tools developing effective interfaces 
listing tools chosen identify major features tools provide examples 
third area section research gone interaction techniques constitutes major components graphical user interface investigated 
discuss lot research gone development hardware devices mouse special purpose keyboards provide pointers sources 
analysis existing interfaces tools help analysis topic section covered report 
summarize section 
properties uis reasons user interfaces hard design implement 
foremost difficulty understanding tasks users 
attempts study factors applications users affect design implementation human computer interfaces 
studies concluded users extremely diverse programmers difficult time thinking users deep application specific knowledge required successfully build large systems held developers difficult acquire 
applications inherently complex 
clearly impossible application functionalities interface simple easy learn 
iterative design solution recommended solve problems 
process complex prone errors 
changes improve usability problem may introduce usability problems 
difficult know iteration exactly 
iteration poor design improve iteration gets interface originally designed 
choosing testers iterative design problem associated method 
iterative design long expensive 
cost issues various design strategies 
variety problems involved design implementation user interfaces discussed 
rest report discusses problems addressed 
useful precise definitions desirable properties user interface 
functionality functionality refers particular user interface 
words set required functions interface perform 
functionality interface dependent application fixed design implementation interface starts 
usability usability deals interface satisfies functionality 
factors determine usability system learning time ease human performance tool performance 
properties qualitative nature measure precisely 
research areas aimed quantifying properties definitive measures 
measures designed consistent adequate valid reliable qualitative properties 
isolation application main motivations design user interface management systems see section 
interface isolated application built 
isolation mean abstractions objects object oriented languages applications distinct interface 
communication objects dependent specific implementation details 
isolated system easy change certain parts application redesign interface add better interfaces changes underlying application 
easy reuse certain parts interface applications minor modifications 
techniques discussed subsequent sections object oriented distributed model paradigms designing user interfaces achieve isolation certain extent 
adaptiveness designer faced options required feature user interface 
go menu type dialog mode mm command dialog clm 
studies show beginners prefer exerts prefer 
creating user interface equally usable kinds users topic research research user interfaces started 
applications attempt allow user choose particular type interface starting application 
user switch different kinds interfaces operations 
adaptable user interface aui defined interface supports number different dialog modes allows user switch dialog modes time middle command switch dialog modes smoothly naturally easy user learn different dialogue modes especially usually require longer training period 
shall look options available designing interface section tools help designing adaptable interface section 
consistency consistency hottest debates conferences journals 
consistent interface attributes predictable users anticipate system dependable system fulfills user expectations habit forming system encourages development behavior patterns transferable habits developed context apply new situations natural interface consistent user understanding 
jonathan grudin defines types consistency require focus interfaces 
internal consistency interface design deals consistency various aspects interface external consistency defined respect interfaces 
third type consistency results correspondence interface features familiar features world computing 
authors support idea consistency results ease learning 
user experiences interfaces uses conform particular standard 
authors support idea consistency fonts colors common actions sequences terms units typography aspects spatial organization may include organization menus placement frequently widgets layouts symmetry alignment widgets interface 
contrary grudin provides examples consistency hinder learnability usability interface 
standards guidelines identified important framework representation human computer interface experts 
consistency facilitates positive transfer skills system leading ease reduced training time improved retention operating procedures 
graphic design electronic documents user interfaces aaron marcus comprehensive manual describing user interface standards 
contains major sections generic ui standard manual points sources 
documents books describing standards guidelines user interface design implementation 
standards semiotics study symbols 
semiotics deals aspects lexical structure symbols syntactic structure relate semantics relate things represent pragmatics relate users symbols ui include representational signs icons words sounds interactions cause effect relationships groupings abstractions 
design options uis demonstrational interfaces interfaces see applications called direct manipulation interfaces 
term coined ben shneiderman famous article 
direct manipulation interfaces short interfaces users directly point objects screen manipulate devices mouse keyboard 
wide interfaces certain recognized difficulties performing common repetitive closely related tasks tedious 
example delete files particular type property user repeat action required files explore common properties incorporate properties interface programming interface 
allow generalized specifications 
objects manipulated dmi directly seen screen 
difficult interface object interest concept shown screen form picture text 
instance sorting set strings easily demonstrated examples represented concept 
program dmi user aware certain programming languages techniques general complex 
programmability interface useful generated interface time tough increasing number users 
example creating new widget compiling wish script tk requires fair amount knowledge experience programming 
brad myers points defects direct manipulation interfaces introduces notion demonstrational interfaces 
demonstrational interfaces allow user provide concrete examples characteristic action wants perform complete rest action little feedback user 
demonstrational interface instance user interested deleting certain class files examples provides facilitate creation new widget allowing user specify relationship geometry actions widget form certain special cases 
idea demonstration programming new concept 
existence limited extent user interface management systems programming languages hot topic research ai late 
feasibility demonstration studied certain classes applications text editors drawing packages spreadsheet programs 
simple example demonstration interface macros emacs 
macro emacs created user selects define keyboard macro command executes series editing actions example 
user simply execute created macro repeatedly 
demonstrational interfaces direct interfaces intelligent 
intelligent interfaces infer actions user wants perform examples provides 
intelligent systems take help user proceed action 
different classes demonstrational interfaces discussed 
fact find large scale commercial systems demonstrational interfaces shows serious drawbacks associated 
demonstrational interfaces harder user knows specify exactly needed 
user feel comfortable specify action form example easier writing simple program 
particularly true experienced users 
intelligent demonstrational systems tend infer pattern program examples inference system inference wrong 
necessitates feedback mechanism times boring undo mechanism interface difficult implement 
survey interface techniques shows small examples demonstrational techniques large scale uses commercial systems 
success area depends mentioned disadvantages systems solved 
research areas handling errors providing efficient feedback editing undo mechanisms favor demonstrational interfaces 
better ways specifying constraints generalizations examples instance pointing certain example configurations system take better inference algorithms required success technique 
intelligent interfaces automatic programming hot topic ai early 
automatic programming computers intelligence heuristics generate programs sort simple specification 
main focus research time generate programs automatically input output pairs examples program execution traces 
early systems successful automatic programming active area current ai research 
techniques revived context certain limited domains user interfaces 
added context provided limited domains allows systems guess correctly time 
heuristics interfaces help guide user perform tasks difficult specify conventional direct manipulation approaches 
heuristics problem solving technique appropriate solution chosen rules 
range intelligence comes heuristics interfaces enormous single easy understand rule complete rule system 
general advantages systems save user time specify details easier learn system part 
disadvantages perform incorrect actions noticed user user understand system performed different action required action accomplished users feeling system unpredictable longer control 
heuristics interface increase expenses usability testing analysis 
research area concentrated developing tools interfaces addressing problems ways managing heuristics system 
demonstrational interfaces discussed previous section intelligence extent 
examples usage intelligence small extent microsoft products excel word successful heuristics requires majority users predict result action context algorithm developed interprets context produces result users expect cases algorithm user requires give result interpreted result harmful user discover ways override default behavior necessary 
distributed collaborative interfaces client server programming paradigm popular advent pcs lans 
model clients servers underlying operating systems inter process communication systems form composite system allowing distributed computation analysis presentation 
system presents different set challenges design implementation user interfaces opens new areas research 
advances technology client server computing impact user interfaces 
client server system consists multiple clients multiple user interfaces may exist system client single consistent ui 
general area research distributed user interfaces 
includes user interfaces distributed computing environment collaborative environment user interfaces distributed components 
research concentrated developing tools allow interfaces completely isolated application 
heterogeneous system application may running system users interface application just interface running systems 
distributed interfaces required application interface shared memory 
scenario common database applications databases reside separate machines interface exploit capabilities powerful graphics workstation 
advantages distributed computing environment approach additional advantages isolation application interface ii personal adaptation individual interfaces 
ideas discussed greater detail examples section 
closely related field distributed interfaces collaborative interfaces 
computer support collaborative cscw banner paul irene grief hottest areas research today 
advent multimedia systems boosted interest area 
numerous publications quoting importance collaboration design 
latest paradigm applied applications databases graphics applications conversation boards computer games extent user interfaces 
side attempts build tools users diverse fields knowledge sit design build interfaces collaboratively 
instance easier build consistent interfaces humancomputer interface specialists interface programmers create user interface collaboratively 
hand research development user interfaces aid collaborative applications 
building collaborative application equivalent building distributed conversational prop 
main concerns distributed software system versioning problem 
interface designed introduced system rarely perfect 
design interface continues iterative process 
occasionally may necessary perform fairly major redesign entire interface reflect new circumstances 
interface redesigned wish minimize impact existing clients 
distributed system components supplied different groups extremely difficult move entire system forward new set interfaces time 
different versions user interface need coexist distributed system till system evolves completely general happens 
see section object oriented techniques offer elegant solution problems 
problems addressed distributed collaborative system consistency interfaces users concurrency users try perform conflicting actions 
user interface development tools problems associated design implementation user interfaces discussed 
fortunately number tools assist process making designer easy 
development tools increase productivity reduce development time life cycle user interfaces 
interface development tool increase quality interface easy economical create maintain interfaces 
user interface development tools referred tools rest report broadly classified classes windowing systems toolkits interface builders user interface management systems uimss 
extensive discussion classification evolving overview userinterface development tools maintained brad myers 
copies report information changes published journal proceedings years 
comprehensive list existing tools information maintained www cs cmu edu bam html 
definitions useful discussion 
toolkit library widgets called application programs 
examples toolkits andrew toolkit tk garnet java toolkit 
creating interface toolkit done programmers toolkits procedural interface 
call back procedures provided programmer serve event handlers actions interface 
going research reducing number callbacks achieve isolation application interface 
interest virtual toolkits try hide differences various toolkits providing virtual widgets mapped widgets toolkit 
uimss hand characterized features complete separation code implements user interface application code application support specifying user interface higher level general purpose programming languages 
main goal interface designers users design modify interface quickly requiring extensive programming skills knowledge application 
achieve isolation uimss special purpose languages formalisms finite state transition diagrams describe appearance interface kinds interaction supports 
instance takes description user interface written formal grammar generates pascal code implements 
techniques specifying interface state transition networks event languages declarative languages constraint languages visual programming graphical editors discussed 
uims typically provide design time component assist designer designing interface run time component assist users interface run time component help evaluation testing interface 
uimss provide years stress laid third component 
uimss come criticism achieve purpose isolating application interface effectively 
drawbacks uimss include limited range interfaces difficulty adapting change inadequacy direct manipulation interfaces 
section discusses aspects research gone design tools 
concern design tools specific properties assist easy better ways designing user interfaces 
second aspect deals design tools assist development different types user interfaces interfaces desirable properties 
tools special properties easy tools tools require learning period weeks portable platforms 
suit simple user interface toolkit uims developed simplicity portability main goals 
lays stress functionality 
tool useful undergraduate students professional programmers wish quickly build guis investing time specialists gui design 
measured college previous gui programming experience suit productively hours 
suit provide contribution interface builder community pascal programming language community 
demonstrational tools emacs systems technique demonstration record actions create macro 
uses approach create procedures examples input output 
eager demonstrational systems handle repetitive actions automatically 
technique generalize pictures detecting graphical properties objects users draw objects quickly 
lets designers create application specific graphical objects demonstration programming 
tries guess alignment predefined widgets user places user interface 
attempts develop complete interfaces demonstration 
model tools seen uimss methods special purpose languages formal grammars specify properties user interfaces 
popular method category application models generate user interfaces 
problem language specifications programmer specify number details pertaining placement format functionality widgets user interface 
solve problem tools modelbased specification higher level specification objects functionality application 
specification automatic generation interface satisfying specification help designer providing design possibilities satisfy specified constraints choose interface likes 
better model specification advantageous approach 
model support multiple interfaces help separate interface application describe input sequencing simple way check consistency completeness interface evaluate interface speed generate context specific help assist designing interface 
complex model difficult program 
follows see examples system models 
earliest approach title model came data flow diagrams second stage software engineering cycle automatic generation user interfaces 
dfd converted augmented dfd including timing constraints dfd 
augmented dfd converted state transition diagram std bnf grammar backus naur form 
steps done semi automatically 
bnf directly generate various user interfaces command language interface menu mode interface question answer interface 
system particular interest changes software easily incorporated user interface running cycle changed dfd supporting paradigm iterative design naturally 
real time constraints easily incorporated systems additional programming 
uide user interface design environment requires semantics application specified special purpose language 
tools provide better interfaces designer assist better way design process 
uide uses special purpose language different regular language specification language uide specifies application semantics interface semantics 
description includes pre post conditions operations system uses operations automatically generate interface appropriate help 
humanoid design model captures information application functionality features interface dimensions application semantics design represents operations objects application program provides presentation defines visual appearance interface manipulation defines gestures applied objects sequencing defines order manipulations enabled action side effects declares actions application performs automatically side effects action manipulation 
humanoid presents set design options specification 
designer free choose 
tactics model tool application model specification similiar uide design space transformational model similar humanoid 
extends application model referred compositional model additional relationships linking different objects properties relationships action parameters 
captures design space valid user interfaces satisfying compositional model transformational model allows designer navigate design options 
provides explicit complex changes handled humanoid 
examples model interfaces include mastermind 
intelligent tools section discuss tools automatically generate user interface specifications 
tools discussed previous section take representation application model generate interface designer having specify exact layout interface 
sense classified intelligent tools 
generate presentation dialogue specification application commands 
genius takes er entity relationship data model generate interface consistent interface standards 
uses knowledge base rules describe properties consistent interface 
trident example rule intelligent tool intelligently selects objects automatically generating interface 
mike generates menus intelligent fashion example strings provided user 
automatic generation interfaces comes expense flexibility range designs produced tools 
don focus creation dialogue boxes guis address components needed different dialogue styles 
automatically generates menu uis cousin mecano generate form uis diction supports menu uis 
intelligent modelbased uis discussed previous section humanoid tactics provide design options designer offering flexibility generation uis 
object oriented tools objects natural representing elements user interface supporting direct 
provide abstraction mechanism encapsulating state operations inheritance extension easy 
experiments show user interfaces written object oriented language significantly easier develop maintain 
objects provide convenient mechanism form interactive objects objects seperate user interfaces application code 
interactive objects implement user interface objects implement data underlying interface 
interviews popular object oriented toolkits distinction interactive objects objects 
provides mechanisms composing objects new objects 
examples ease object oriented specification language specifying user interfaces demonstrated 
earlier attempts build tool started grow stresses advantages object oriented graphics relationships taxonomic inheritance share common properties objects 
package supports graphical dependency form tree composition objects 
interfaces created grow modified reused applications 
smalltalk model view controller descendent apple examples object oriented toolkits 
different topic research area involves efficient objectoriented techniques achieve desired features user interfaces solve problems 
attempts obtain uniformity various components objects constitute user interface 
having protocol interface opposed implementation objects user interface result certain level isolation application interface application need know particular interface feature 
instance interface objects menus buttons interviews derived single base class called glyph 
uses glyphs object hierarchy 
problems associated distributed user interfaces dis cussed versioning problem section 
demonstrates inheritance user interfaces solve problem 
minor revisions existing abstraction derived existing versions major versions derived root tree virtual class 
mechanism allows modifications applications versions user interfaces coexist naturally extra effort 
evolution object oriented techniques object communication standards corba field looks promising expected absorb commercial applications near 
tools build special interfaces tools adaptive interfaces tools help generation adaptive interfaces 
guide system uims helps designers automatic generation 
isolates dependencies devices dialogue modes lexical component user interface facilitate additions number new dialogue modes interface existing application 
semantic component defines application syntactic component determines interaction application interface 
switching different dialogue modes applications generated guide appears natural gives user new degree freedom exploiting system 
tools distributed collaborative interfaces example uims help users developing distributed interfaces top particular category applications tree data 
category includes important applications structured editors incremental compilers file system managers 
system takes set mapping invariants define correspondance state interface state application tree structure generates interface isolated application spatially 
interface calls underlying system converts messages passed network application 
idea distributed interfaces solves problem adaptive user interfaces 
interface custom match needs particular user 
rendezvous language architecture attempt centralized abstraction user interface called virtual user interface user physical view abstraction called physical user interface pui 
model aware mappings referred mapping invariants system discussed user events application handlers 
interesting topic consideration system consistency different views 
instance user creates new object introduces system users able see object 
rendezvous architecture provides protocol pui specification communication 
attempt goal 
area research field best explained distributed user interface development tool built mit consortium 
window system provides network transparent access application user display 
provide convenient mechanism distributing components user interface collection machines 
defines new set programming interfaces covering expanding functionality providing mechanism embedding user interface components single window components running remotely 
system useful distributed computing environment objects constitute user interface executed different machines 
instance user interface take picture cad database message location compose local interface options form user interface single window 
interaction techniques interaction task entry unit information user 
basic tasks position select text quantify 
unit information position task position object 
similarly select task yields object selected text task yields string characters quantify task yields numerical value 
research interaction devices techniques accomplishing tasks 
basic interaction devices mouse keyboard joysticks touchpads data tablets quite long time 
interest areas comparision different kinds keyboards qwerty alphabetic better designs mouse incorporate interaction comparitive study effectiveness different devices specific task 
evaluations performed directions 
device level interest physical aspects devices effects human fatigue 
task level interest device accomplishes particular task 
dialogue level interest devices perform respect time performance composite task setting 
advent graphics immersive environments stress devices interaction techniques increased 
immersion considered effective interaction techniques respect visualization selection navigation object manipulation 
considerable research head mounted displays hand movements hand equipment data gloves fish tank virtual reality systems 
take look techniques evolved research 
reader referred sources basic material 
popular techniques object selection virtual environments include selection cones 
techniques suffer traditional problems object occlusion 
techniques put avoid problem combination pointing naming 
worlds miniature wim system investigates possibility overlapping miniature view world top immersive environment 
independently controllable views certain problems inherent real world hidden objects unreachable objects objects user objects appear close lined line sight user easily handled 
prince cursors technique shows area cursors point cursors handy picking smaller objects conventional interfaces 
objects closely placed system proposes usage prince point cursors 
technique similar toolglass magic lenses 
systems small physical devices bricks grab object screen move 
darken summarizes navigation techniques currently compares 
gestures speech important means interaction 
research development devices interfaces people low vision blind 
studies comparing user performance modes interaction 
example studies showed user interfaces need purely graphical excessive icons confuse user unfamiliar symbolism 
study linear radial menus concluded radial menus faster 
breadth depth tradeoffs traditional menus impact organization items menus known 
attempts design marking menus user straight mark direction menu item popping menu 
lot interest study auditory visual interfaces discussed 
evaluation feedback mentioned section desirable properties user interface 
analysis phase deals testing existing user interface properties 
measures qualitative measures analysis phase hot topic research 
problems associated analysis user interface software lack systematic approaches testing widely followed methods testing user interfaces heuristics formal methods empirical methods 
heuristic methods usability inspection methods set evaluators produce lists usability problems user interface going noting deviations accepted usability 
formal methods goms measure expert user performance disregarding learnability problems user errors 
empirical methods experiences users user testing 
methods comprehensive understand complex interaction humans computers user interfaces 
validity consistency reliability approaches methods testing difficult obtain consistent results methods 
questions validity reliability measures 
clear definition properties exist testing approaches problem complex 
dimensions evaluation techniques select dimensions usability functionality concentrate 
incorporating dimensions techniques proven complex 
variety specification implementation techniques techniques rely specifications implementations user interface difficult encompass available user interfaces 
evaluation costs thorough exhaustive analysis user interface considered costly affair evaluations compromise evaluation criteria reduce cost 
adaptability various environments difficult develop general technique adaptable kinds environments user interfaces 
technique consist options testing particular interface 
extensibility advances technology existing techniques quickly obsolete rapidly growing user interface technology 
instance current techniques test multimedia interfaces 
certain features consistency checking incorporated uimss 
efforts building tools automatically check consistency user interfaces 
tool possible consistency rules incorporated system form rules 
tools perform automatic usability analysis difficult implement 
hix proposes comprehensive check list evaluation uimss 
left done area analysis interfaces 
main areas research graphical user interfaces discussed 
different types interfaces distributed collaborative object oriented interfaces popular features provide applicability modern environments discussed 
interfaces designed combination options discussed 
focus interaction techniques evolving virtual reality systems highlighted 
advances area user interfaces looks promising terms academic research commercial market 
bill curtis herb krasner neil field study software design process large systems commun 
acm vol nov pp 
douglass sarah designers models humancomputer interface proc 
sigchi seattle wa apr pp 
john carroll robert mack kellogg interface metaphors user interface design handbook human computer interaction helander elsevier science publishers 
north holland pp 
gregg bailey iterative methodology designer training humancomputer interface design proc 
interchi amsterdam netherlands apr 
daniel wake 
entered transition zone computer language vol mar pp 
jakob nielsen big discount usability engineering ieee software vol may pp 
brad myers human computer interfaces difficult design implement technical report cmu cs cmu jul 
gould lewis designing usability key principles designers think commun 
acm pp 
swartout inevitable intertwining specification implementation commun 
acm vol jul pp 
oded adaptable user interface commun 
acm vol nov pp 
blake art science user interface design intuitive software interactive systems ca 
jonathan grudin case user interface consistency commun 
acm vol oct pp 
barnard consistency compatibility human computer dialog int 
man machine studies vol pp 
rubinstein hersh human factor digital press bedford mass 
polson consequences consistent inconsistent user interfaces cognitive science applications human computer interaction lawrence erlbaum hillsdale 
shneiderman designing user interface wesley reading mass 
smith guidelines designing user interface software report mtr esd tr mitre bedford mass 
harrison thimbleby formalizing guidelines design interactive systems proc 
bcs hci specialist group conference hci pp 
nielsen coordinating user interfaces consistency checking ed 
nielsen academic press london 
marcus graphic design electronic documents user interfaces acm press addison wesley 
marc interface design don know commun 
acm vol jan pp 
shneiderman direct manipulation step programming languages ieee computer vol 
aug pp 
brad myers demonstrational interfaces step direct manipulation ieee computer aug pp 
myers creating user interfaces demonstration academic press boston 
log building user interface widgets demonstration technical reports brown university cs may 
dan olsen jr brett douglas building widgets example proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
programming example doctoral dissertation univ california berkeley 
available tech 
report tr osd xerox office systems division systems development dept palo alto calif 
olsen dance macros example graphical uims ieee computer graphics applications vol jan pp 
summers methodology lisp program construction examples acm vol jan pp 
nix editing example acm trans 
programming languages systems vol oct pp 
myers text formatting demonstration proc 
sigchi human factors computing systems acm new york pp 
brad myers brad vander zanden roger creating graphical interactive application objects demonstration proc 
acm siggraph symposium user interface software technology acm pp 
witten specifying graphical spreadsheets acm trans 
office information systems vol july pp 
biermann approaches automatic programming academic press new york pp 
joseph sullivan sherman tyler ed intelligent user interfaces acm press 
sinha client server computing current technology review commun 
acm vol jul pp 
chin wan chung access heterogenous distributed databases commun 
acm vol jan pp 
graham hamilton sanjay interface inheritance address problems system software evolution technical report tr sun microsystems laboratories nov 
jonathan grudin cscw commun 
acm vol dec pp 
gomez collaborative medium support conversational props proc 
cscw toronto ontario oct nov 
patterson hill go fish 
multi user game rendezvous system siggraph video review acm new york 
miller smith muller computer supported collaborative gui design designers diverse expertise proc 
uist monterey california nov 
hill languages construction multi user multi media synchronous interfaces languages developing user interfaces myers jones bartlett boston pp 
david wilson programming addison wesley publishing reading wa apr 
allen hamilton nextstep vs development environments comparitive study report available computer 
brad myers user interface software tools acm trans 
interaction vol mar pp 
andrew toolkit overview proc 
winter usenix feb pp 
john ousterhout toolkit tcl language winter usenix pp 
brad myers garnet comprehensive support graphical highly interactive user interfaces ieee computer vol nov pp 
sun microsystems java programming internet 
brad myers separating application code toolkits eliminating spaghetti call backs acm siggraph symp 
user interface software technology proc 
uist hilton head sc nov pp 
software pearl east circle boulder usa 
software galaxy application environment commerce park drive reston va 
open interface villa street mountain view ca 
olsen dempsey graphical user interface generator acm siggraph jul pp 
manual portland ore 
rosenberg uimss threat proc 
acm chi may pp 
foley knowledge user interface management system proc 
acm chi may pp 
randy pausch nathaniel young ii robert deline suit pascal user interface toolkits computer science report tr oct 
randy pausch matthew conway robert deline lessons learned suit simple user interface toolkit acm trans 
information systems vol oct pp 
singh kok ngan system demonstrational rapid user interface development proc 
acm siggraph symp 
user interface software technology acm new york pp 
brad myers william buxton creating highly interactive graphical user interfaces demonstration siggraph proceedings aug pp 
brad myers richard mcdaniel david creating complete user interfaces demonstration proc 
interchi amsterdam netherlands apr acm new york pp 
foley kim kovacevic murray defining interfaces higher level abstraction ieee software vol 
jan pp 
feng yang kuo user interface design real time perspective commun 
acm vol dec pp 
sukaviriya foley griffith second generation user interface design environment model runtime architecture proc 
interchi acm conference human factors computing systems apr pp 
sukaviriya foley coupling user interface automatic generation context sensitive help proc 
uist acm symp 
user interface software technology oct pp 
luo szekely management interface design humanoid proc 
interchi acm conference human factors computing systems apr pp 
szekely luo facilitating exploration interface design alternatives humanoid model interface design proc 
chi acm conference human factors computing systems may pp 
szekely luo interface builders model interface tools proc 
interchi acm conference human factors computing systems apr pp 
kovacevic tactics user interface design coupling compositional transformational approach technical report west advanced technologies 
wiecha bennett gould greene tool rapidly developing interactive applications acm trans 
information systems vol jul pp 
neches knowledgeable development environments shared design models proceedings og international workshop intelligent user interfaces acm new york orlando fl pp 
singh green automating lexical syntactic design graphical user interfaces uims acm trans 
graphics vol jul pp 
olsen programming language basis user interface management proc 
chi austin texas apr may acm pp 
christian janssen jurgen ziegler generating user interfaces data models dialogue net specifications interchi amsterdam netherlands apr acm new york pp 
jean vanderdonckt francois bodart encapsulating knowledge intelligent automatic interaction objects selection interchi amsterdam netherlands apr acm new york pp 
olsen mike menu interaction environment acm trans 
graphics vol pp 
singh green high level user interface management system proc 
chi acm new york pp 
kim foley don user interface presentation design assistant proc 
acm siggraph symp 
user interface software technology snowbird utah oct 
hayes szekely lerner design alternatives user interface management systems experience cousin proc 
chi acm pp 
edgar musen generation tools reusable domain ontologies report ksl knowledge systems lab stanford university 
mark linton john vlissides paul calder composing user interfaces interviews ieee computer feb pp 
paul barth object oriented approach graphical interfaces acm trans 
graphics vol apr pp 
krasner pope cookbook model view controller user interface paradigm smalltalk object oriented programming vol aug sep pp 
apple programmer developer assoc expandable macintosh application wash 
calder linton glyphs objects user interfaces proc 
acm siggraph symp 
user interface software technology snowbird utah oct pp 
object management group common object request broker architecture specification omg documents number 
feng yang kuo user interface design real time perspective commun 
acm vol dec pp 
stuart martha support distributed graphical interfaces ieee computer dec pp 
ralph hill rendezvous language architecture commun 
acm vol jan pp 
michael muller application presentation distributed computing architecture protocol enable flexible common user interface ieee trans 
systems man vol jul aug pp 
mark linton chuck price building distributed user interfaces proc 
seventh technical conference boston jan pp 
gettys window system acm trans 
graphics vol pp 
foley feiner hughes computer graphics principles practice publishing 
george fitzmaurice situated information spaces spatially aware commun 
acm vol pp 
colin ware danny bat dimensional mouse object placement ieee computer graphics applications pp 
liang mark green highly interactive modeling system rd international conference cad aug pp 
richard bolt put siggraph pp 
richard matthew conway randy pausch virtual reality wim interactive worlds miniature proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
paul william prince technique law selection area cursors proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
bier stone pier buxton derose toolglass magic lenses see interface proc 
siggraph acm new york pp 
george fitzmaurice hiroshi ishii william buxton bricks laying foundations graspable user interfaces proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
rudy darken john sibert toolset navigation virtual environments uist pp 
sidney fels geoffrey hinton glove adaptive gesture interface proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
stephen brewster peter wright alistair edwards evaluation earcons auditory human computer interfaces proc 
interchi amsterdam netherlands apr pp 
richard kline glinert gui accessibility people low vision proc 
sigchi denver may human factors computing system proc annual conference series acm sigchi pp 
icons user interfaces easier 
ieee software vol may pp 
callahan hopkins weiser shneiderman empirical comparision pie vs linear menus proc 
chi pp 
depth breadth trade design menu driven user interfaces int 
man machine studies vol pp 
mcdonald stone searching items menus effects organization type target proc 
human factors society th annual meeting human factors society pp 
gordon kurtenbach william buxton limits expert performance hierarchic marking menus proc 
interchi amsterdam netherlands apr pp 
hix evaluation human computer interface development tools problems promises atlanta ga oct 
jakob nielsen victoria phillips estimating relative usability interfaces heuristic formal empirical methods compared proc 
interchi amsterdam netherlands apr acm new york pp 
jeffries miller wharton user interface evaluation real world comparision techniques proc 
acm chi new orleans la apr may pp 
nielsen heuristic evaluation user interfaces proc 
acm chi seattle wa apr pp 
gray john atwood project overview validation goms proc 
acm chi monterey ca may pp 
karat campbell comparision empirical testing walkthrough methods user interface evaluation proc 
acm chi monterey ca may pp 
mantei cost analysis incorporating human factors software lifecycle commun 
acm vol apr pp 
rohit mahajan ben shneiderman visual textual consistency checking tools graphical user interfaces technical report cs tr human computer interaction laboratory center automation research institute systems research dept computer science univ maryland may 
deborah hix robert schulman human computer interface development tools methodology evaluation commun 
acm vol mar pp 
