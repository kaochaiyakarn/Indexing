agent server architecture ajanta mobile agent system anand tripathi department computer science university minnesota minneapolis mn provides overview ajanta java mobile agent system focuses particular architecture agent server process hosts agents enables access resources communicate migrate agent server main components include agent execution environment agent transfer protocol resource access protocol agent monitoring service 
security major concern design services 
describes security architecture integrated agent server design informally argues correctness java security model 
keywords mobile agents distributed computing java security mobile agent programming new paradigm distributed processing especially large scale heterogeneous networks internet 
mobile agent program represents user network autonomously migrate node node 
applications inject mobile agents network perform tasks user behalf allowing roam network predetermined path agents determine dynamically gathered information 
mobile agent paradigm introduces higher level abstraction network programming programmer agents active application components traverse network performing computations relevant location 
helps optimize network bandwidth moving client code network resources appropriate permits increased asynchrony client server interactions 
agents provide value addition existing services dynamically extending functionality 
electronic commerce information search filtering network maintenance testing fault diagnosis software installation upgrades remote machines 
security robustness primary concerns deploying mobile agent systems 
participating host needs provide facility executing agents 
potentially expose host attacks malicious agents 
countermeasures taken agents leak destroy alter sensitive data 
conversely agents may tampered malicious hosts 
security mechanisms necessary 
robustness concerns require agent application full control roaming agents 
able monitor issue control commands recall time irrespective current location 
describes ajanta java mobile agent system developing 
section provides overview ajanta system architecture various agent programming primitives 
sections describe secure mechanisms agent transfer execution communication 
related briefly reviewed section 
conclude summary plans 
overview ajanta network host supply resources services mobile agents running agent server 
ajanta generic agent server provides confined environments executing mobile agents allows host control access resources 
basic primitives available programmers allow agents migrate servers communicate query environment agent servers specialized provide application specific services resources interfaces databases electronic store fronts 
set agent servers cooperatively implements agent programming environment 
application programs create dispatch agents servers order access resources 
agents implemented ajanta java objects active mobile 
agent active sense assigned thread executes code 
object mobility implemented java serialization facility allows capture object state transmit host recreate object host 
execution state agent thread captured require modifications java virtual machine rendering incompatible standard java installations 
agent migrates remote host new thread assigned execute 
agent performs actions behalf principal entity unique identity system 
agents hosts agent servers users examples principals ajanta 
agent owner user agent represents 
agent credentials include identity owner home site code base restrictions imposed rights 
home site may report status information return malfunctioning agent 
code base server responsible providing code agent needs unavailable current host 
credentials protected cryptographically agent servers access control 
principal ajanta needs globally unique name allows location independent access 
adopted uniform resource name urn framework object naming developing name resolution service suit needs 
agent server structure credentials domain database resource registry code methods state internal data agent host itinerary current agent transfer agent server proxy proxy resource atp agent environment ajanta server structure shows agent server agent currently resident 
agent server agent environment object acts interface visiting agents server 
server domain database keeps track agents currently executing responds status queries owners 
agent transfer component implements protocol allows agents migrate host host 
server may provide application specific resources 
resource object acts interface service information available host 
server maintains resource registry setting safe bindings resources agents 
agent programming primitives agent written subclass class agent 
conceptually composite code state 
state includes credentials agent environment called host 
agent arrives server host appropriately initialized starts executing 
agent environment provides services agents form primitives 
described 
agent creation simply involves instantiating subclass agent 
typically creator provides set credentials itinerary servers visit application specific data 
newly created agent passive object 
activated dispatching agent server execution launch primitive 
programmer optionally specifies method invoked pass parameters 
method specification omitted server executes parameterless run method default 
agent request migration go primitive 
specifies urn desired destination server method executed 
method specification optional 
protocol followed agent server performing actual migration described section 
completes successfully go method returns thread executing terminated 
error occurs transfer exception thrown allowing agent handle error 
situations agent may prefer locate agent resource needs access 
go primitive specifying urn location target 
go method invokes name service find current host server specified agent resource sends caller agent server 
ajanta provides generic resource interface extended define application specific resources 
agent access resources installed current server primitive 
agent specifies urn desired resource available access mechanism described section 
assuming resource security policy allows 
agent communication implemented resource access mechanism installing remotely callable proxy primitive 
elaborated section 
secure agent transfer ajanta agent transfer protocol atp cooperatively implemented sending receiving agent servers 
sender serializes agent transmits receiver recreate agent execute protection domain 
agent server created starts atp listener thread listens connections particular port 
agent server urn host atp port determined consulting name service 
atp listener creates atp handler thread handle incoming connection leaving free listen requests 
atp handler thread implements actual agent transfer protocol 
agent migration request contains destination method specification 
sending server transfer request contains agent credentials method specification parameters controlling transfer flags indicating transfer encrypted signed algorithms purpose executing mutual authentication protocol establishes identities sending receiving servers transfer request message transmitted receiver atp listener 
credentials identify agent requesting transfer allowing destination server decide permit transfer 
transfer permissible atp handler sets execution environment incoming agent 
sending server serializes agent object transmits 
received activated atp handler 
note agent code transferred stage loaded necessary code base explained section 
agent transferred receiving server sends acknowledgment message back sender update agent location name service clean internal data structures indicate agent longer hosted 
error occurs agent activated negative acknowledgment returned 
original server informs agent transfer request failed raising exception 
secure agent execution primary challenges executing agent securely creation protection domain isolate agent provision secure resource access protocol 
protection domains agents java mechanisms implementing protection domains thread groups class loading 
thread group java simple collection threads 
agent arrives new thread group created 
single thread created group assigned task executing method requested agent 
execution agent may create threads constrained create thread group 
thread executing agent code identified thread group id agent server maintains domain database indexed thread group ids stores agent urn credentials agent object 
entry server code needs access agent identity agent attempts acquire resource credentials needed determine level access permitted 
java class loader mechanism protect agents 
java virtual machine associates class class loader instance loaded 
classes loaded different loaders may name considered different types 
implies objects classes type compatible classes fact identical 
effect class loader defines namespace 
agent assigned unique class loader instance 
agent code encounters object class currently loaded java virtual machine invokes agent class loader provides name required class 
class loader searches server classpath set directories local file system contain classes trusted server 
required class classpath loaded virtual machine 
agent code base contacted asked supply missing class 
communication may encrypted digitally signed ensure integrity downloaded code 
agent class loader malicious agent replace agent classes impostor versions 
agent activation agent transfer connection initiated atp handler thread reads transfer request message sender 
contains credentials agent transferred 
handler consults server security policy determine allow transfer continue 
agent permitted execute server connection aborted 
atp handler creates thread group new thread group new class loader agent 
entry agent domain database 
newly created thread uses bootstrap mechanism transfer control new class loader namespace 
agent object incoming connection sets agent host local server agent environment see fig 

transfers control agent invoking method transfer request 
secure resource access agents need access system level application defined resources execute 
server access authorized agents extent permitted privileges 
system level resources protected java security manager encodes security policy 
java library calls access system resources invoke security manager screen access 
application level resources avoid burdening security manager new resource added system necessitate extending security manager making large module prone errors security loopholes 
need mechanism allows agent server provide secure language level binding agents resources 
resource allowed define security policy control implementation 
proxy resource access ajanta agents provided direct resources interpose proxy resource clients agents 
agent request access resource server returns proxy object contains private actual resource 
proxy implements interface resource represents proxy construction interface methods may disabled security policy client credentials 
permitted methods proxy simply passes invocation embedded resource 
agent proxy restricted interface ensures agent access resource permitted methods 
separate proxy created agent embedded resource may shared appropriate 
approach offers advantages 
embed usage metering accounting mechanisms proxy 
proxy capability limit propagation agent checking invocation proxy verify protection domain originally granted 
proxy act identity capability 
public interface resource generic methods common resources public class implements resource implementations generic methods public interface public resource credentials cred generic resource interface resource class interface buffer key interface inheritance implementation inheritance class hierarchy buffer resource resource access protocol ajanta defines resource interface provides class implements see fig 

class provides generic functionality common resources resource naming ownership 
application defined resources implement resource interface usually simply inheriting class 
example fig 
shows class hierarchy buffer resource interface implementation 
resource binding protocol defined terms generic resource objects application independent 
order securely available agents resource class implement system defined interface method 
agent requests resource method resource executed returns instance proxy class 
resource class corresponding proxy class available class fig 

may automatically generated resource interface simple lexical processing tool 
method creates new instance proxy class customized caller agent initializing access control information embedded proxy caller credentials resource security policy 
order allow dynamic modification access control proxy class provides additional operations enable disable resource interface methods 
operations privileged thread agent server protection domain allowed execute agents tamper proxy objects allocated 
resource request protocol agent server maintains resource registry facilitate binding resources agents 
resource registry contains urn resource object information resource ownership 
obtain access resource agent invokes method host object supplying urn desired resource 
server finds corresponding object resource registry upcall method providing calling agent credentials parameter 
resource object creates appropriately restricted proxy passes back 
interposition proxy agent resource remains transparent agent 
agent communication agents located server utilize proxy resource access mechanism communicate 
agent class implement resource interfaces register server resource 
located agents may communicate shared access resource server 
applications agents residing different servers need communicate synchronize 
remotely invocable communication mechanism necessary 
java provides rmi mechanism remote communication 
agent allowed rmi interface opens security loophole 
agent may granted access certain resources rmi interface provides conduit leak information unauthorized principals 
need authenticate incoming outgoing connections control set principals indirect access resource 
proxy interposition concept control incoming connections outgoing connections monitored security manager 
agent wishing available remote invocation uses primitive request server install rmi proxy specified interface 
server find proxy class appropriate interface creates proxy instance containing embedded agent registers local rmi registry agent name 
appropriate proxy available locally request fail agent code base trusted provide safe proxy class 
trusted proxy ensures information leaked unauthorized callers 
incoming rmi invocations intercepted proxy passes call agent relays results back caller 
authentication caller necessary proxy delivers exception caller expected rmi call supplying identity 
authentication proceeds challenge response mechanism random nonce 
potential threats scheme examined potential threats various kinds attacks 
introduce additional rules java security model guard threats ensure integrity scheme 
proxy contains embedded resource object 
agent may attempt directly reflection invoke methods object bypassing proxy access control checks 
prevent rely java encapsulation mechanism declaring embedded resource private 
proxy object type bypassed access control checks method agent gain unauthorized access resource 
scheme enforce rule proxy class ancestors apart base object class 
java allow agent proxy instance class 
agent arrives network typically provides code base 
doing may attempt install version proxy class bypasses access control checks embedded resource publicly available 
ajanta class loader sure proxy class loaded classpath 
malicious agent serialize proxy transmit byte stream cooperative agent server deserialize fake proxy class exposing underlying resource 
prevent enforcing rule resource proxy class declared transient 
java include transient byte stream generated object serialization 
agent having followed proper protocol obtain proxy may attempt clone 
result cloning underlying resource affect accounting revocation mechanisms built proxy 
avoid enforce rule proxy class implement interface 
java allow cloning object implement interface 
related existing mobile agent systems pay particular attention security robustness designs 
telescript language level mechanisms security 
uses different types permits access control imposing quotas resource 
security mix classes protect objects unauthorized modification copying migration 
aglets workbench primitive security functionality 
security architecture system proposed 
agent tcl supports access control lists host names uses pgp encryption authentication 
ara agent servers access control lists called impose restrictions visiting agents 
protecting access resources approach concept proxies developed shapiro 
proxies act capabilities 
proxy may include identity client act identity capability 
contributions lies supporting proxy capabilities integrity assured java security model 
protection scheme described conceptual similarities approach 
schemes proxy objects acting capabilities direct access resources 
restricted interfaces proxy classes called filters statically defined independently clients servers 
filters integrated resource interface definitions allows system automatically create interpose appropriate filter objects client server interactions 
contrast scheme supports dynamic definition modification access privileges assigned agent proxy 
argue integrity scheme java security model specific set design rules guard potential attacks 
ajanta java mobile agent system build java security model provide confined execution environment agent protecting tampering agents 
built fine grained access control mechanism resources proxy interposition 
similar mechanism enable remote invocation agent allowing agent creator control remotely 
applications define security policies agent transfer resource access agent agent communication 
area need provide mechanism reliably determine migration history agent 
required agent application determine level trust placed agent results 
plan implement real world applications exercise ajanta security robustness features demonstrate utility agent paradigm 
harrison chess 
mobile agents idea 
technical report ibm research division watson research center march 
gosling joy steele 
java language specification 
addisonwesley august 
sollins masinter 
rfc functional requirements uniform resource names 
www cis 
edu rfc rfc html december 
shapiro 
structure encapsulation distributed systems proxy principle 
proceedings th international conference distributed computing systems pages 
neuman 
proxy authorization accounting distributed systems 
proceedings thirteenth international conference distributed computing systems pages may 
li gong 
secure identity capability system 
ieee symposium security privacy pages may 
needham schroeder 
encryption authentication large networks computers 
communications acm december 
valente 
mobile agent security telescript 
proceedings compcon spring pages 
lange oshima 
security model aglets 
ieee internet computing pages july august 
gray 
agent tcl flexible secure mobile agent system 
proceedings th tcl tk workshop july 

architecture ara platform mobile agents 
proceedings st international workshop mobile agents 
springer verlag lncs april 
ismail 
protection scheme mobile agents java 
proceedings rd international conference mobile computing networking september 
