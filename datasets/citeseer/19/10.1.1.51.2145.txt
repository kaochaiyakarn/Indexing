diagen generator diagram editors hypergraph model minas lehrstuhl fur programmiersprachen universitat erlangen 
erlangen germany email informatik uni erlangen de diagrams trees hierarchical structures graphs finite state machines needed part advanced user interfaces frequently specific user application 
implementation editors diagrams supported tool formal model 
gives overview diagen generator diagram editors 
editor certain kind diagrams generated specification includes hypergraph grammar describe structure diagrams 
user diagram editor concerned grammar manipulate diagrams conveniently direct manipulation 
easily comprehensible representation complex structures gaining importance users information systems case tools 
significant increasing share effort implementing systems goes user interface 
common interface builders graphical user interfaces guis mainly focus widgets buttons menus interfaces graphical 
assessment cacm issue guis market considers gui little menu system having graphics 
leaves graphical representation application domain exercise developer complex structures application graphically represented kind diagram 
desirable diagrams part user interface user interactively edit 
diagrams usually semantical meaning application 
changes diagram transformations consistent state 
set valid diagrams set shneiderman diagrams termed diagram class described formal model 
syntax directed editor tailored diagram class called diagram editor 
diagram editor ensures diagram constructed user valid structure support complex editing operations layout 
tools garnet support simple kinds diagrams 
structure valid diagrams maintained programmer garnet hidden code 
systems generating diagram editor formal model 
concept generator 
pagg system layout diagrams troublesome editing inconvenient 
constraint system uses grammar model context free grammars constraints automatic layout diagrams 
context free grammars permit direct representation multidimensional relationships needed layout diagrams 
furthermore editing capabilities restricted 
hyperedges hypergraphs harel statecharts intuitive advantageous model representation diagrams 
diagen generator diagram editors hypergraph grammar model specifying diagram class 
section gives brief overview system 
grammar model topic section 
section addresses user interaction direct manipulation 
transformations triggered user interactions described section 
section results case studies 
generator diagen diagen generates diagram editor nsd editor depicted fig 
specification consists parts shown fig 

major part grammar diagram class 
particular diagram shown screen internally represented diagram editor hypergraph derivable grammar 
hy snapshot session nsd editor generated diagen 
editing state shown 
group subsequent statements consisting simple statement selected lower nsd indicated handles 
referred derivation graph fig 
main data structure 
layout conditions attached grammar productions specification 
terminal symbols derivation graph mapped screen 
image composed primitive elements lines text part specification 
remaining parts fig 
user interaction 
diagram structure layout dimensional structure strings represent multidimensional relationships directly 
hypergraphs internal models diagrams edited 
hypergraph generalization graph edges hyperedges connected fixed number nodes 
hyperedge type number connection points determine nodes hyperedge connected 
say hyperedge visits nodes 
familiar directed graph seen hypergraph hyperedges visit exactly nodes 
nodes hypergraph modeling diagram stand points plane hyperedges diagram elements position nodes visited consider directed hypergraphs 
directed hypergraph triple finite set nodes finite set hyperedges function assigns sorted sequence visited nodes hyperedge length arity cond text text text cond text text hypergraph corresponding upper nsd fig 

nodes shown black circles fat lines shaded areas labeled text cond terminal hyperedges 
hyperedge 
intuitive representation illustrated fig 

representation systems hypergraphs significantly complicated 
diagram class syntactic structure diagrams specified terms hypergraph models hypergraph grammar 
context free hypergraph grammars analogously defined context free string grammars similar properties 
terminal nonterminal hyperedges hypergraph grammars alphabet symbols string grammars 
production context free hypergraph grammar consists left hand side lhs single nonterminal hyperedge nodes visited see fig 

lhs production starting graph grammar 
production rhs arbitrary hypergraph may contain terminal nonterminal hyperedges 
application production hypergraph similar string grammars lhs subgraph hypergraph subgraph removed replaced rhs 
resulting hypergraph said derived 
order specify rhs node replaces lhs node corresponding nodes lhs rhs labeled letters 
sample derivation sequence shown fig 

diagram class context free hypergraph grammar set derivation graphs derivable starting graph consist terminal hyperedges 
derivation graph diagram internal hypergraph model mapped screen 
hypergraph grammar describes set valid hypergraph models user diagram editor sees valid diagram classes context free hypergraph grammars describe finite state machines see figures 
classes diagen uses context sensitive transformations generate additional graph components expressed contextfree hypergraph grammars see section 
diagram representation transformation group definition constraint satisfaction layout attributes groups graphical objects graphical interface derivation graph modules data diagram editor specification call specification target data flow interaction grammar transformations group types layout conditions image terminal symbols event automata overview diagram editor generated diagen specification 
rectangle rectangle rectangle cond cond sts st sts st st st st cond cond text nsd sts rectangle text text sts cond sts sts sts cond cond st sts rectangle stands context free hypergraph grammar 
nodes shown black circles 
fat lines dark shaded areas labeled text cond terminal hyperedges light shaded areas nonterminal hyperedges 
nonterminals sts st stand statement sequence resp 
statement cond condition 
formulas constraints layout 
diagrams 
hypergraph fig 
derivation graph consisting terminal edges 
edges depicted fat lines dark shaded areas fig 
mapped screen described specification see fig 

result mapping graphical representation see upper nsd fig 
consists set graphical objects 
text hyperedge mapped area containing arbitrary texts statements fig 

statement texts part hypergraph model property graphical object 
hypergraph grammars describe syntactic structure diagrams layout requirements included hypergraphs layout 
contextfree string grammars layout described attribute grammars 
constraints popular borning layout interactive environments 
advantage nature attribute grammars changes propagated direction 
vander zanden combined constraints context free string grammars 
hypergraph grammars attributed similar way 
hyperedges correspond alphabet symbols string grammars carry attributes nodes 
number hyperedges connected node node attributes common attributes hyperedges visiting node 
hypergraphs constraints needed compared 
furthermore constraints linear inequalities diagen 
equations determine relations attribute values definite way inequality constraints permit range values solutions 
convenient way combine automatic layout diagrams provided system user defined modifications 
details layout incremental algorithm constraint satisfaction built generator 
constraints layout shown fig 

node attributes node position 
referred edge attributes text text cond cond minimal height width text blocks resp 
conditions 
small number constraints shown fig 
sufficient layout due node attributes shared visiting hyperedges 
direct manipulation main feature concerning user interaction diagram modified conveniently direct manipulation style just moving diagram elements screen 
case systems pagg constraints editing operations chosen menu 
diagram editor generated diagen interaction module see fig 
responsible reaction user actions mouse nsd sts st sts st sts sts text text sts text sts cond text text text part derivation hypergraph fig 
productions fig 

keyboard 
cause layout changes selection diagram elements transformations diagram structure 
layout changes discussed 
selection diagram elements possible different ways part specification 
nsd editor subsequent selected statements may complex automatically combined single entity called group see fig 

transformations section 
nsd editor serves demonstrating direct manipulation 
example want remove group fig 
position insert upper nsd statements 
fig 
shows result 
way achieve systems solely selection pressing buttons choosing menu items style 
press cut button 
select line immediately condition indicate destination 
press insert button concept synthesizer generator syntax directed text editing 
sufficient diagrams natural way editing desirable 
diagen diagram editors offering true direct manipulation specified event automata see fig 

modification fig 
fig 
simply ffl pressing mouse button mouse pointer located selected group ffl dragging group destination situation moving group selected fig 

ffl releasing mouse button line condition 
way part diagram removed inserted spot 
diagram part new nsd entire nsd inserted diagram similar fashion 
number editing operations direct manipulation specified nsd editor ffl branch switched pressing mouse button triangle inside dragging right releasing corresponding way 
ffl changed moving condition releasing mouse button 
ffl similarly modified 
transformations diagram modifications initiated direct manipulation described transformations transformation transition set diagrams set diagrams 
structure diagrams changed user diagram editor sees valid diagrams diagrams belonging specified diagram class 
contrast transformations diagen complex consist primitive steps 
sts sts st text line sts st text line sts sts st text line text sample transformation rule nsd editor inserting text line applying rule lhs match diagram current structure 
rhs describes modification 
corresponding subtrees lhs rhs emphasized way 
enables powerful transformations primitives 
transformations nsd editor primitives deleting inserting sequence compound statements 
example simple transformation rule nsd editor fig 

transformation rules describe modification derivation stands diagram displayed screen 
rules derivation fig 
written tree 
transformation consists sequence rules 
user diagram editor indicates transformation location direct manipulation mouse keyboard 
user indicate text line inserted example 
system tries apply transformation matching left hand sides transformation rules sequence 
matching lhs determines modification 
different rules transformation take care different contexts positions indicated user text line 
current implementation programmer diagram editor user generator sure transformations part editor specification contain relevant rules 
programmer fails provide complete set rules means certain contexts transformation cause change 
analysis parsing specification helpful prevent pitfalls 
transformation rules illustrated fig 
sufficient tree structured diagrams 
diagram classes finite state machines contextfree hypergraph grammar see fig 
weak 
cases context sensitive productions resp 
transformations needed 
add arbitrary graph components hypergraph derived grammar starting graph 
context sensitive transformations allowed delete subgraphs disturb derivation hypergraphs hypergraph grammar 
principle transformations described 
diagram editors generated diagen transformations specify execution diagrams 
possible snapshot fsm editor session 
state initial final state 
initial state marked thick border line final states double border line 
fsm editor session fig 
pressing button start 
current state set initial state indicated fat border line 
ffl executing diagram semantically evaluating diagram syntactically represented ffl diagrams created execution members diagram class 
intuitive illustration sample editor finite state machines fsms see figures 
editor user create modify fsm consisting states circles transitions arrows 
single state marked initial state terminal 
user execute edited fsm input string typed transitions carried step step consuming character input string 
character processed fsm terminal state string considered accepted 
execution details represented carried situation arising fig 
pressing button step 
termination situation processing digit string fig 

transformations derivation graph current fsm ffl remaining string represented contents text hyperedge 
consuming string character character shortens text contents 
ffl current state indicated additional terminal edge cursor mapped filled circle thick border line screen just circle representing current state 
stepping initiates transformation derivation graph looks remaining character searches suitable transition 
transition fits arbitrary chosen 
cursor moved new state string character removed 
ffl stopping fsm rejecting accepting string indicated additional text hyperedge text ok error 
execution step carried transformation derivation graph user may change diagram execution 
execution steps follow new diagram structure 
fig 
shows situation constructing fsm fig 
situation pressing button start 
user asked provide input string fsm current state set initial state 
suitable transition currently character input string press button step causes transition removes character input see fig 

repeatedly pressing button step fsm reaches final state fig 

ok visualizes fsm accepted initial string 
case studies prototype diagen implemented sparc workstations windows osf motif 
currently diagen consists approximately lines code 
sample diagram editors specified generated diagen nsd editor shown figures editor flowcharts fig 
fsm editor see figures 
case studies got results ffl context free hypergraph grammars introduced section easily completely describe flowcharts 
fsms expressed pure context free hypergraph grammar general graph structure 
hypergraph grammar specify diagram skeleton additionally context sensitive transformation rules describe fsms graph parts 
example demonstrates diagen useful diagram classes context free hypergraph grammars completely describe 
course automatic layout diagram parts defined context sensitive transformation rules 
diagen provides user adjustable layout user arrange diagram manually 
ffl specifications current implementation diagen text files 
specification effort measured lines text 
table shows total numbers lines needed specify sample editors specification parts 
obviously part consisting grammar mapping terminal edges screen shortest specification 
longest part description user interaction consists textual sample session flowchart editor lines nsd fc fsm grammar layout groups mapping screen graph components transformations user interaction total table number lines needed specify editors diagrams nsd flowcharts fc finite state machines fsm 
representation event automata special kind finite state machines 
graphical specification reduce specification effort great extent 
specifying graph components short fsms lines needed describe arrows transitions arbitrary states 
graphical specification reduce specification effort 
ffl specifications nsd flowchart editors pretty 
built flowchart specification copying nsd specification mainly changing mapping terminal hyperedges screen 
demonstrate generating diagram editor simple task editor similar diagram class exists 
diagen generates diagram editors direct manipulation operations specification 
diagram class specified hypergraph grammar esp useful describing multidimensional relationships diagram elements 
layout defined high level constraints 
complex editing operations execution diagram specified 
diagram edited user consistent state hypergraph formal model 
hypergraph parts application done 
case studies showed formal model describing diagram class automatically generating editor leave programmer examples specification consists lines text 
specification needed describe transformations user interaction 
reduce percentage ffl text file far best choice describing user interaction transformations 
graphical representation specifications shorter clearer 
ffl want add hypergraph parsing algorithm diagen algorithm reconstructs derivation structure hypergraph 
furthermore diagen drawing program component 
user simply draw diagrams arbitrarily combining diagram parts extracted specification 
drawing editor default behavior transformations interactions specified parsing algorithm task find diagrams derivation structure order identify correct diagrams resp 
diagram parts 
consequence transformations interaction descriptions may omitted rapid prototyping purposes 
specifications shrink current length see table rapid prototyping possible 
course user may draw incorrect diagrams editing support described section 
parsing algorithm point incorrect diagrams diagram parts may permissible rapid prototyping 
morse reynolds overcoming current growth limits ui development communications acm vol 
pp 
apr 
shneiderman flowchart techniques structured programming acm sigplan notices vol 
pp 
aug 
urban adaptation modification shneiderman charts represent descartes specifications visually international workshop rapid prototyping research triangle park nc june pp 

ieee computer society press 
myers dannenberg garnet comprehensive support graphical highly interactive user interfaces computer vol 
pp 
nov 
hughes automatically generating visual syntax directed editors communications acm vol 
pp 
mar 
graph grammars new paradigm implementing visual languages dershowitz editor rewriting techniques applications vol 
lecture notes computer science pp 

springer 
vander zanden constraint grammars new model specifying graphical applications lewis editors proc 
chi vol 
sigchi bulletin pp 
mar 
berge hypergraphs north holland amsterdam 
harel statecharts visual formalism complex systems science computer programming vol 
pp 


kreowski note hyperedge replacement ehrig 
kreowski rozenberg editors lecture notes computer science vol 
pp 

springer 
knuth semantics context free languages mathematical systems theory vol 
pp 

borning programming language aspects constraint oriented simulation laboratory acm transactions programming languages systems vol 
pp 
oct 
minas specification diagram editors providing layout adjustment minimal change proc 
ieee symposium visual languages pp 

ieee computer society press 
gerhard mark minas interaction really graphical user interfaces proc 
ieee symposium visual languages pp 
los alamitos ca usa oct 
ieee computer society press 
reps teitelbaum synthesizer generator springer new york 
