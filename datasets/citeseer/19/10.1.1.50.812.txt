visualization foster object oriented program understanding dean jerding john stasko graphics visualization usability center college computing georgia institute technology atlanta ga mail cc gatech edu technical report git gvu july software development maintenance tasks rely benefit increased level program understanding 
object oriented programming languages provide features facilitate software maintenance features object oriented programs difficult understand 
support program visualization techniques foster object oriented program comprehension 
identifies ways visualization increase program understanding presents means characterizing static dynamic aspects object oriented program 
describe implementation prototypical tool visualizing execution programs 
define framework visualization object oriented software requires little programmer intervention provides mechanism allows users focus quickly particular aspects program 
keywords program visualization program comprehension 
object oriented programming paradigm developed partly response failure programming languages provide adequate maintenance facilities 
features object oriented design encapsulation polymorphism re inheritance help support software maintenance tasks 
potential benefits provided object oriented programming maintenance process come cost 
example object oriented programmers understand inheritance dynamic binding various forms polymorphism 
software development environment purports assist object oriented program understanding address issues arise run time 
typically programmer develops computer program solve problem 
step programmer draws knowledge problem domain create mental model possible solution 
programming domain knowledge idea mapped conceptual model computer program solve problem 
conceptual model programming domain realized programming language 
resulting program needs modified enhanced mappings may misinterpreted 
problem program understanding important tasks software re maintenance 
theories program comprehension performed 
brooks originally proposed idea comprehension essentially maintainer reconstructing mappings programmer originally created bro 
program understanding process may proceed bottom bm bro pen top sae manner combination vmv depending available cues type maintenance vmv maintainer syntactic semantic knowledge base yb 
process systematic attempt understand entire program needed parts program necessary carry particular task investigated 
view holds program understanding takes place feedback loop program implementation compared maintainer conceptual model program solve problem 
research area program comprehension focused providing tools feedback loop effective 
main approaches followed allow maintainers access knowledge design program described younger bennett yb provide analysis inter dependencies existing program including dataflow control flow la 
approaches creating internal representation program information extracted user 
tools begun information graphically care environment lad field rei 
support different approach program understanding program visualization 
program visualization sub set area known software visualization graphics animation visually describe illustrate software function pbs sp 
program visualization medium visualized computer program 
basic premise visualization users better understand investigate software seeing portrayed visually 
believe object oriented programming paradigm especially natural foundation visualization fundamentally involves manipulation concrete things instances messages methods 
undoubtedly programmers mental model software entities visual manifestations 
building visualization tools object oriented systems follows naturally correspondence visual representation 
describes efforts identify appropriate informative easily comprehensible visualizations communicate programmers maintainers want need know software 
identifying section problematic features object oriented software development maintenance problems visualization help solve 
section discusses means object oriented programs characterized 
drawing previous visual design objectoriented programs developed prototype system visualizing object oriented program execution described section 
results defined visualization framework effectively collect useful views objectoriented programs 
section defines goals framework section describes framework 
final sections discuss related directions research respectively 
object oriented software development challenges advent object oriented programming languages provided software developers new tools 
programmers adopted object oriented approach order take advantage better data abstraction improved modularity function overloading code re 
characteristics potentially benefit software development software maintenance 
object oriented paradigm somewhat double edged sword 
powerful features inheritance dynamic binding polymorphism object oriented programs harder understand maintain 
class descriptions distributed files function overloading common 
additionally static code traces fully describe execution object oriented programs 
meyers gives detailed example common representative problem encountered object oriented programming debugging mey 
task involves locating function body invoked particular function call application 
traditional procedural language simply involve looking corresponding function declaration successive enclosing scopes 
example problems inheritance dynamic binding force programmer examine classes including duplicates may spread multiple files 
meyers goes point simple task tracing function calls fundamental making bug fixes performing code tuning adding enhancements existing software 
order take full advantage object oriented paradigm software developers provided tools alleviate side effects 
wilde identified areas tool support needed tracing dynamic message binding analyzing dependencies classes understanding high level aspects system locating system functionality resolving polymorphism wh 
tool tracks dynamic message handling objects program execution able provide users dynamic binding information 
method invocation message handling example global aspect object oriented programs object dependencies 
dependencies class class class method method 
classes methods invoked clearly candidates optimization 
analyzing dependencies complicated dynamic binding polymorphism 
additionally displaying multi dimensional nature dependencies difficult purely textual screens wh 
object oriented software development process inheritance hierarchy dynamic entity evolves time 
part evolution involves moving class methods hierarchy meet implementation constraints 
class dependency information available process performed efficiently 
phenomenon related dynamic binding occurs method calls circularly different classes single object inheritance hierarchy 
occurrence recognized ganti yo yo effect 
programmer access visualization method binding phenomenon easily identified 
maintenance software systems complicated programmers software development organizations 
difficult new programmer understand complex relationships objects large object oriented systems lmr 
program understanding complicated dynamic binding inheritance hierarchies 
suggestion increasing understanding graphical view inheritance hierarchy wh graphical visualization communication objects system 
maintenance problem arises naming messages correspond consistently action taken objects receiving messages 
problem particularly important object oriented systems function overloading permissible common wh 
wilde go point graphic displays object relationships useful 
page clear object oriented approach software development includes pitfalls program developers maintainers 
believe software visualization tools invaluable reducing programmer effort especially enhancement maintenance phases software development 
tools aid understanding object oriented systems maintenance lower level debugging tasks object oriented program development 
characterizing object oriented programs tools support visualization object oriented programs useful question needs visualized 
words entities relationships actions exist program portrayed visually 
section describe means object oriented program characterized providing basis visualizations built 
clearly object instances basic entities object oriented program 
inheritance relationship specified class hierarchy 
important actions characterize program execution include object creation object deletion message passing 
event parameters class define class name parent define class name parent name method define class name method name member type member location method type return type argument list attribute define class name attribute name member type member location type friend define class name friend name global function define function name return type argument list instance create timestamp class name instance name ptr filename line number instance destroy timestamp class name instance name ptr filename line number constructor invoke timestamp class name ptr filename line number argument list constructor return timestamp class name ptr filename line number destructor invoke timestamp class name ptr filename line number destructor return timestamp class name ptr filename line number method invoke timestamp class name method name ptr filename line number argument list method return timestamp class name method name ptr filename line number argument global function invoke timestamp function name filename line number argument list global function return timestamp function name filename line number argument table object oriented program events actions interesting events need monitored program execution 
common method creating program visualizations generate traces interesting events describe execution program 
describe object oriented programs events record object creation deletion 
object oriented languages constructors destructors called object created deleted 
invocations traced 
typically object handles message invoking corresponding method inheritance hierarchy 
method invocations returns need monitored 
true object oriented program allows procedural execution global functions 
event tracking mechanism track global function invocations 
allows definition overloading operators class globally 
common operators include arithmetic operators stream operators 
operator invocation tracked automatically considering local operators methods global operators global functions 
order describe inheritance hierarchy class hierarchy object oriented program static definition events exist describe classes including methods attributes 
definition events describe global functions program 
events generated statically prior actual execution program 
static events processed visualization dynamic events 
list interesting events identified foster visualization objectoriented program execution shown table 
list similar types events semantically correct defined language 
current focus related entity entity depiction visual attribute class full color bold outline base class es light color inheritance connection arrows derived class es light color inheritance connection arrows instance class light color bold outline instance derived class light color friend class function hand icon instance full color bold outline class light color bold outline classes inherits light color visible instances double broken outline subordinate instances close proximity function full size bold outline table graphical encoding relationships current focus program entity 
tracked sets events seek characterize object oriented program execution conceptual level 
semantics primarily guided development list events designed flexible characterize languages 
prototype visualization section attempted answer question needs visualized 
section addresses question visualize 
motivated realization tools methods visualizing execution object oriented software clearly lacking set construct basic visualization executing object oriented program 
previous shilling stasko involved constructing groove visual design tool ss 
groove tool designed help programmers visually specify static structure dynamic protocols object oriented program 
groove visual paradigm employs shape color animation portray objects relationships 
example classes represented upside triangles 
arrows bottom class top class represent inheritance 
instances represented ovals global functions methods rectangles 
message passing shown animating drawing arrows instances 
groove utilizes concept current focus visual display 
program entity display current focus user selection 
program visualization instance receiving message focus 
entity focus objects update view reflect relationship focus entity 
encoded relationships include inheritance friendship visibility class table shows brief list relationships encoded 
visual paradigm groove developed basic view executing program 
view contains basic entities tree structure representing class hierarchy rectangular nodes representing global functions circular nodes representing instances 
view intended graphically animate message passing occurs execution object oriented programs 
simple view executing program library visualization functions exists construct animate view appropriately type event 
simple programs hand annotated calls places interesting events occur program 
execution annotated source program produces calls visualization library causes view updated 
call system visual debugging programs 
simple user interface provides continuous discrete step mode control event visualization 
resulting view provides graphical animation various events place program 
shows sample display program classes small number instances 
instance construction displayed instances hatching class nodes inheritance hierarchy moving class nodes successive constructor call 
color encode inheritance attributes 
function invocations animated drawing arrows calling instance global function callee 
arrows labeled function name class name appropriate 
function returns displayed retracting arrow callee back caller 
simple layout algorithm performed places inheritance hierarchy center view global functions edges instances near classes 
stepping visualization program execution users observe existing objects messages 
user browse relationships existing entities pointing clicking 
resulting information useful understanding dynamics program execution benefiting program development maintenance process 
results prototypical view experience implementing clear gathering necessary information construct useful visualizations difficult problem 
view layout information overload major problems encountered simple view 
presenting information organized informative way require multiple coordinated views different levels abstraction 
role object oriented programming begun play software development arena problems merit exploration 
visualization objectives existing object oriented software development challenges insight gained prototype visualization system set forth main objectives framework visualization object oriented software realize ffl little programmer intervention 
generating visualizations develop integrated programming environment require little programmer intervention 
visualizations generated simple different compiler filter program adding extra flag compilation 
implies visualizations driven information acquired underlying software prior execution 
ffl right things 
visualizations developed important aspects program software system useful programmers 
visualizations convey information dynamic execution program cumulative summary information entire execution 
visualizations animations developed address key challenges identified section new attributes uncover research progresses 
ffl allow viewers focus quickly 
visualizations designed way facilitates programmers focusing particular concerns timely straightforward matter 
instance suppose problematic scenario programmer wishes examine occurs program execution 
programmer take long time wade animations arrive point interest 
conversely users able examine execution states occurred execution 
additionally visualizations constructed way presents overview program way supports simple navigation attribute feature particular concern 
ffl handle real world problems 
visualizations developed restricted presenting small laboratory programs systems 
visualizations applicable large object oriented systems involving hundreds thousands lines code 
objectives quite recognized important open problems software visualization research just involving object oriented systems 
defining visualization framework section describes framework visualizing object oriented software objectives set forth previous section 
entire visualization process takes input source code produces interactive graphical animated views executing program 
tasks required construct visualizations divided basic areas program event generation program event visualization 
event generation involves tracing particular events execution object oriented program object creation object deletion member function invocation 
events generated program visualization performed events 
accordingly visualization framework separated functional modules event generation visualization program events 
line major goals previous section framework visualizing object oriented program execution support additional capabilities ffl automatic extraction important program events 
ffl interactive post mortem visualization 
ffl way navigation program event stream 
ffl direct manipulation view contents 
ffl structured interaction views 
ffl easy addition new views 
propose visualization framework shown 
event generation phase performed event generator utilizes event trace library event visualization responsibilities divided event manager visualization manager 
remaining parts section outline conceptual workings visualization framework describe support objectives established 
event generation event generation phase involves generation interesting program events drive visualizations 
discussed earlier identified interesting events describe execution object oriented programs object creation destruction method calls 
additionally static information program needed structure inheritance hierarchy 
framework event generator responsible event generation tasks 
goal automate event generation process programmer 
various degrees generation process automated ranging reconstructing events dynamic trace profile information modifying standard compiler executable information generated model view event generator manager event visualization manager source code trace file event queue program model viz model viz model view prog event visualization event generation socket event trace library view prog viz visualization framework program runs 
visualization framework allow explore evaluate methods range 
event visualization event visualization involves creating graphical animated views program execution collected events 
event visualization phase involves different tasks managing collected program events visualizing events 
believe tasks need separated order improve visualization performance facilitate navigation techniques collected event stream 
framework visualization phase handled modules event manager visualization manager 
modules interact described 
visualizing events system presents program visualizations top level abstraction coordinate different visualization tasks 
framework refer entity visualization manager 
visualization manager acts manager individual visualizations referred views generated program events provides user graphical interface controlling entire visualization 
communicating user event manager events user wishes visualized retrieved event manager passed views 
informational models kept order translate generated program events useful views executing program 
order recreate program state visualization executes program state model maintained 
model consist various entities object oriented program classes methods attributes global functions instances call stack 
events describe static program structure inheritance hierarchy global functions evaluated execution events received 
individual program events processed event may affect current program state 
information various views kept visualization models 
visualization model needed view executing program 
models store information addition provided program state model information required maintain state specific view 
consistent interface visualization models specified models defined hierarchically classes individual visualization model sub class generic visualization model base class 
hierarchy provides structured inter view communication facilitates addition new views 
corresponding visualization model window displaying particular view visualization 
hierarchy visualization models views similar framework mapping visualization model view ibm system mapping models views 
may structure loses flexibility feel overhead incurred providing mapping may large animated type views wish support 
order maintain correspondence views actual program execution visualization manager synchronize update view 
additionally views need communicate visualization manager facilitate 
inter view communication necessary provide user contextual information visualization program events 
managing events event manager essentially event server client visualization manager 
responsible receiving storing generated program events 
natural storage facility events ordered queue specialized database support queries 
framework event manager separate entity visualization manager reasons 
having event manager separate process receive store events visualization manager visualizing previous events 
parallelized typically sequential task receiving decoding visualizing events 
second separate event manager facilitates navigation event stream 
visualization possible fast forward rewind events user focus quickly past program execution states 
framework visualization manager ask event ask instance particular event 
especially useful user interested specific events object deletion 
problem supporting backtracking event stream likened problem reverse execution fb 
order support call reverse visualization need restore pre existing program state models visualization models update views reflect new models 
second part fairly trivial hierarchically defined visualization models visualization model simply provides update method 
restoring previous states done saving particular states restoring user visualization 
provide incremental reversal event level necessary save state event 
clearly impractical 
reasonable approach checkpoint particular events higher granularity 
implement reverse visualization checkpointed state previous desired state restored events replayed reach desired state 
event manager store retrieve events implementation possible 
past event driven visualization systems typically allowed backtracking programming environments provide moh state saving capabilities 
views mentioned section tools support object oriented program visualization help areas understanding high level aspects system tracing dynamic message binding analyzing dependencies classes locating system functionality resolving polymorphism wh 
visualization framework intended support views aforementioned problems specific goal handling real world sized applications 
context define different types views created ffl global views program state program element dependencies 
ffl specific views program elements 
ffl statistical views dependencies actions existing program execution 
ffl textual views program events source code 
envision types views useful discovering content presentation useful views question research 
related programming environments developed include visualization capabilities 
rei provide moh early program development systems utilized graphical views data structure displays call graph call stack 
respect object oriented systems particular includes reiss field system rei 
field contains extensive set tools developing maintaining programs 
tools include graphical aids class browsers lmr flow graphs thrust display views rei 
bee object oriented application framework supports dynamic analysis distributed programs 
provides platform event monitoring visualization graphical debugging 
analysis tools distributed nodes providing significant performance gains visualization 
deal research graphical presentation object oriented programs 
research date focused graphics design aid building object oriented systems 
booch boo rumbaugh rbp beck cunningham bc harel har coleman hayes bear chb fits notion 
static diagramming techniques developed quite helpful specification aid appropriate visualizing dynamic executions programs particularly large programs 
visualizing executions conducted 
kg sought go static displays examining dynamic behavior object oriented systems written common lisp style language 
tool illustrates structural behavioral views object oriented systems recording message traffic subsequent replay 
tool displays mainly involve graph diagrams consisting nodes arcs 
animation restricted simply highlighting annotating graph nodes 
bh provide extensive animation smalltalk traces track system 
track allows programmers visually specify message tracing debugging aid 
execution time system presents animation messages sent objects 
research thrusts similar seek accomplish 
de pauw helm vlissides ibm developed visualization techniques system presenting attributes object oriented systems specifically programs 
authors developed instrumentation techniques portable extract needed summary information program execution 
developed views chart summary information execution 
views display instance creation destruction inter intra class calls allocation histories 
views appear quite effective plan adopt similar ones 
information capture summary information seek portray run time dynamics system 
focus providing effective navigation techniques views visualization events 
koike exploring graphics illustrate object oriented systems 
techniques portray message traffic system respect class hierarchy method list 
accomplished encoding information structure viewed axis xy plane presents class hierarchy viewed axis yz plane presents method list 
koike technique novel way encode information view 
explore similar techniques reiss koike focus primarily remain graphics 
clear program development maintenance vital activities occur computing 
relies benefit increased level program understanding 
current techniques program comprehension rely internal representation program useful information derived 
hypothesis visualization object oriented programs invaluable tool object oriented program understanding 
developed visualization system visualizing execution simple programs 
framework visualizing execution object oriented programs defined 
framework provides means visualization little programmer intervention mechanism allows users focus quickly navigating collected stream interesting events 
framework developed visualize object oriented programs principles structure applied event driven visualization 
research involves developing program views implementing framework 
empirical study follow prototypical tool developed 
bc kent beck ward cunningham 
laboratory teaching object oriented thinking 
proceedings acm oopsla conference pages new orleans la october 
gottschalk bin luo 
framework dynamic program analyzers 
sigplan notices proceedings th annual acm conference object oriented programming systems languages applications volume pages sept oct 
bh heinz dieter jurgen 
tracers 
proceedings ecoop oopsla conference pages ottawa ontario october 
bm basili mills 
understanding documenting programs 
ieee computer oct 
boo grady booch 
object oriented design applications 
benjamin cummings 
bro brooks 
theory comprehension computer programs 
international journal man machine studies 
chb derek coleman hayes stephen bear 
introducing statecharts object oriented design 
ieee transactions software engineering january 
wim de pauw richard helm doug john vlissides 
visualizing behavior object oriented systems 
proceedings acm oopsla conference pages washington october 
wim de pauw doug john vlissides 
modeling object oriented program execution 
proceedings european conference objectoriented programming 
fb feldman brown 
igor system program debugging reversible execution 
acm sigplan sigops workshop parallel distributed debugging volume pages jan 
har david harel 
visual formalisms 
communications acm may 
kg michael paul 
understanding objectoriented systems concurrently animated views 
proceedings acm oopsla conference pages san diego ca september 
hideki koike 
role spatial dimension software visualization 
acm transactions information systems july 
la panos scott 
toolset program understanding 
proceedings nd workshop program comprehension pages capri italy july 
lad panagiotis philippe laurent dumas yan patricia 
facilitating comprehension programs experimental study 
proceedings nd workshop program comprehension pages capri italy july 
letovsky 
cognitive processes program comprehension 
iyengar editors empirical studies programmers pages norwood nj 
lmr moises scott meyers steven reiss 
support maintaining objectoriented programs 
ieee transactions software engineering december 
littman pinto letovsky soloway 
mental models software maintenance 
iyengar editors empirical studies programmers pages norwood nj 
mey scott meyers 
working object oriented programs view pretty 
proceedings symposium objectoriented programming emphasizing practical applications pages september 
moh thomas moher 
provide process visualization debugging environment 
ieee transactions software engineering june 
pbs price ronald baecker ian small 
principled taxonomy software visualization 
journal visual languages computing september 
pen pennington 
comprehension strategies programming 
olsen sheppard editors empirical studies programmers second workshop pages norwood nj 
rbp james rumbaugh michael blaha william premerlani frederick eddy william lorensen 
object oriented modeling design 
prentice hall new york ny 
rei steven reiss 
program development systems support multiple views 
ieee transactions software engineering se march 
rei steven reiss 
interacting field environment 
software practice experience june 
rei steven reiss 
framework visualization 
proceedings ieee symposium visual languages pages bergen norway august 
sae elliot soloway beth adelson kate ehrlich 
knowledge processes comprehension computer programs 
chi glaser editors nature expertise pages 
lawrence erlbaum associates 
sp john stasko charles patterson 
understanding characterizing software visualization systems 
proceedings ieee workshop visual languages pages seattle wa september 
ss john shilling john stasko 
animation design document trace object oriented systems 
technical report git gvu graphics visualization usability center georgia institute technology atlanta ga june 
david murthy ganti 
object oriented software reuse yo yo problem 
journal object oriented programming sept oct 
vmv von mayrhauser vans 
program comprehension tool requirements industrial environment 
proceedings nd workshop program comprehension pages capri italy july 
wh norman wilde ross 
maintenance support object oriented programs 
ieee transactions software engineering december 
yb younger bennett 
model tools record program understanding 
proceedings nd workshop program comprehension pages capri italy july 
