expansion passing style general macro mechanism kent dybvig daniel friedman christopher haynes traditional lisp macro expansion facility inhibits important forms expansion control 
include selective expansion subexpressions expansion subexpressions modified expansion functions expansion application variable expressions 
furthermore expansion algorithm treat special form separate case 
result limited expressive power poor modularity 
propose alternative facility avoids problems technique called expansion passing style eps 
critical difference facility proposed traditional macro mechanism expansion functions passed expression expanded expansion function 
function may may perform expansion 
power technique illustrated examples 
lisp systems may adapted employ technique 

lisp systems generally include facility allows convenient extension source language syntax 
facility implemented expanding syntactic extensions called macro calls core language special forms lisp system 
advantages source level expansion specialized interpreter provide new syntactic forms ffl source level expansion eliminates need extra layers interpretation 
expansion need performed prior evaluation resulting greater efficiency 
ffl language extensions easily provided source level expansion interpretation 
ffl semantics language obtained sugaring syntax existing understood language syntactic transformations easily understood verified semantics language obtained writing new interpreter 
ffl extended language easily ported host supports core language 
section briefly review dialect lisp express examples 
section reviews traditional lisp syntactic extension mechanism 
examples useful forms syntactic extension impossible conventional mechanism 
motivates section facility flexibility implement extensions 
lisp systems may adapted employ facility 
simple examples facility follow section 
substantial practical example power section set debugging tools developed facility 
difficulties facility noted alternative approaches discussed 
familiarity lisp traditional macro expansion mechanism assumed 
survey macro expansion techniques see 

coding conventions code follows expressed scheme lexically scoped dialect lisp 
core syntactic forms implemented syntactic extensions 
superscript preliminary version acm symposium lisp functional programming 
material supported national science foundation numbers mcs mcs dcr 
authors address computer science department indiana university lindley hall bloomington dybvig friedman haynes cs indiana edu appeared lisp symbolic computation 
evaluating quote lambda set 

syntax core forms 
indicate zero preceding form respectively 
core language suffices scheme support improper lambda lists 
expression equivalent quote 
expression similar preceded comma replaced value resulting structure 
expression preceded comma treated similarly value list spliced constructed structure 
variation precise semantics backquote lisp systems affect examples 
example list quote equivalent cons quote append list quote quote list evaluates 
scheme name may appear keyword loop exp loop exp 
initially bound body expression value exp loop bound function invoked rebind value argument exp example recursively reenter body expression 
respects scheme differs traditional lisp dialects clear context 
example scheme set 
map lisp setq mapcar purposes significant semantic difference scheme lisp dialects lambda expressions close current lexical environment yielding functions may freely arguments returned results 
syntactic form functions part standard scheme similar features scheme lisp systems 
syntactic form fluid variable expression body expression assigns variable value expression evaluation body expression restores original value variable value body expression returned value fluid form 
referred dynamic fluid binding similar special binding common lisp 
function eval standard evaluation function 
gensym function returns symbol guaranteed distinct symbols 
printf provides formatted output la common lisp format features described fully 

traditional approach syntactic extension syntactic transformation lisp programs may performed manipulating source expressions prior evaluation 
provision easily adding preprocessor eval call expand decoupling syntactic extension mechanism evaluation mechanism simplifies underlying keywords displayed bold face variables italics literals roman font 
define old style expand lambda cond variable 
literal 
macro 
car old style expand macro function car eq 
car quote eq 
car lambda lambda cadr map old style expand eq 
car map old style expand cdr eq 
car set 
set 
cadr old style expand caddr map old style expand define variable 
symbol 
define literal 
lambda symbol 
pair 

traditional syntactic expansion mechanism 
compiler interpreter syntactic transformation independent implementation 
syntactic extensions indicated keywords appearing position structured form expression 
syntactic extension keyword bound expansion function manner 
assume functions install macro macro function retrieve bindings predicate macro 
returns true passed symbol binding 
traditionally expand encounters form position contains keyword associated expansion function function passed entire form 
expansion function returns new form obtained transforming old expanded place old form 
forms returned expansion functions expanded expansion functions return forms involving syntactic extensions 
see expand function protocol core language 
special form common lisp treated special case 
example expressions form id exp id expn body expand equivalent lambda applications form lambda id id body exp expn 
decoupling means syntactic transformations independent evaluation environment 
lisp systems coupled evaluation syntactic transformation mechanisms syntactic transformations dependent evaluation environment 
inconsistent view syntactic transformations implement static syntactic extensions 
syntactic extension terms lambda may defined follows install macro lambda lambda map car cadr map cadr cadr 
traditional expansion mechanism provides considerable power low cost lacks flexibility important 
transformed expressions automatic transformation functions control part form return expanded expansion done 
examples transformations possible traditional expansion mechanism consider problems obtaining curried call name call need semantics syntactic transformation uncurried call value language 
currying requires applications abstractions argument transformed nested applications abstractions argument curried forms obtained recursively applying transformations lambda lambda lambda curried form obtain call name semantics set suffices ffl replace application argument variable lambda result recursively applying call name transformation ffl replace variable application argument 
example expression lambda name car name cdr transformed lambda name car lambda name cdr lambda name car name cdr versions car cdr forced invoked functions arguments force arguments 
call need semantics may achieved complex application expansion 
perform transformations require nontraditional expansion algorithm expands variables applications 
essential expansion performed selected subexpressions transformed expressions 
example call name expansion appropriate perform expansion application introduced expanding variable 
case subexpressions require different expansion treatment definition lexical syntactic extensions manner 
lexical syntactic extensions require body form introduces expanded way additional keyword recognized associated new syntactic extension may override existing syntactic extension 
cases solution problems transformation functions fully expand expressions passed expressions return contain forms core language 
expansion expressions effect expressions core language fixed points expand function 
problems approach ffl requires expansion functions knowledge core language may implementation specific 
ffl complicates expansion functions treat core form special case 
ffl difficult expansion functions treat subexpressions differently different times 
examples necessary 
ffl permit syntactic extension core forms expansion contains form lambda currying example 
cases expansion process terminate 

expansion passing style conclude observations section expansion functions control expansion forms return 
analogous function having control value returns continue computation 
continuation passing style cps may give function control 
macro 
line old style expand see recursive call occurs tail recursive position 
old style expand written cps macro expansion function simply passed old continuation argument case macro 
line written macro 
car macro function car old style expand 
value returned expansion function require expansion 
motivates modification traditional macro protocol expansion functions take arguments expression expanded expansion function applied form expanded 
call expansion functions expanders refer protocol expansion passing style eps 
eps gives expanders control entire transformed expression expanded subexpressions expanded expansions performed expander expansion 
cases expander passed alternatives possible shall see 
simple matter transform macro expansion function obeying traditional protocol expander define macro expander lambda lambda 
ambiguity results variables form expander arguments respectively 
eps mechanism strictly extends power traditional macro mechanism simpler traditional facility may suffices 
system expand function defined terms initial expander dispatches type form expanded 
define expand level expansion useful debugging expanders 
see 
functions install expander expander function expander 
analogy eps cps useful exact 
cps function control entire computation continues expander control forms passed expanded 
reflected non tail recursive position calls old style expand 
continuations passed continuation second parameter 
possible eps coexist macro example mechanism kohlbecker wand 
mechanism easier express syntactic extensions shares limitations traditional macro expansion noted section 
define expand lambda initial expander initial expander define expand lambda initial expander lambda define initial expander lambda cond variable 
literal 
expander 
car expander function car map lambda install expander quote lambda install expander lambda lambda lambda cadr map lambda install expander lambda map lambda cdr install expander set 
lambda set 
cadr caddr 
basic eps functions 
expander counterparts install macro macro function macro 
expand initial expander directly recursive 
initial expander defined initial expander correct 
uses initial expander expand trace facilities bound initial expander longer necessary include special forms lambda quote system expand function 
necessary associate expanders special form keywords way new syntactic extensions defined 
traditional macro mechanism possible 
cases essential certain subparts expanded example formal parameter list lambda literal part quote forms entire form example quote forms expand expansion terminate repeated 
eps gives expanders control expansion expanders defined demonstrate 
factoring special forms expander increases modularity encourages custom variations expander allows redefinition special form expanders 
definition lambda expander shortly provides example special form redefinition 
install expander defmacro lambda keyword cadr pattern caddr body install expander keyword macro pattern body define macro lambda pattern body gensym gensym lambda pattern cdr body define lambda pattern access bindings cond null 
pattern bindings symbol 
pattern cons pattern access bindings pair 
pattern car pattern car access cdr pattern cdr access bindings 
defmacro expander 

simple examples eps straightforward provide conventional macro definition interface expanders 
expander supports essential features common lisp defmacro 
code dedicated destructuring arguments macro 
example defmacro decls body lambda map car decls body map cadr decls expands install expander lambda decls car cdr body cdr cdr lambda map car decls body map cadr decls 
function macro uses gensym create new symbols formal parameters newly created expanders example 
avoids possibility identical variables body new expander captured parameters expander 
sophisticated solution capturing problem provided hygienic macro expansion 
possible combine hygienic expansion eps address issue 
install expander curry lambda lambda cond literal 
lambda 

length cadr lambda lambda application 

length car cadr cadr define lambda 
lambda pair 
eq 
car lambda define application 
lambda pair 
expander 
car 
currying expanders 
currying applications lambda abstractions discussed section possible 
see 
expression form curry expanded expander curry expander passed lambda expression argument transformed lambda expression binding argument lambda expression binding rest arguments 
transformed expression passed expander originally passed curry expander 
possible expander lambda effect time curry expander invoked case expand outer lambda case expansion subexpressions performed bound assuring full currying subexpressions 
application argument say transformed application form 
entire transformed application subexpressions expanded application arguments transform 
lambda expression application requires transformation clause passes expansion subexpressions 
see solution call name implementation technique outlined section 
expression form call name expanded passed variable returned 
application function argument subexpressions expanded passed call name application wraps lambda argument variable 
variable application passed expander expander expand subexpressions factorial function may defined way normal order evaluation semantics combinator install expander call name lambda lambda cond variable 
application 
call name application cadr define call name application lambda car map lambda variable 
lambda cdr 
call name expanders 
define name factorial call name lambda lambda lambda test lambda tst thn els tst thn els lambda lambda test name name name gamma name name name gamma versions gamma primitives forced yield functions force arguments 
define extend expander function provides convenient means extending expander recognizes new syntactic extension keyword expander associated 
see 
extension technique analogous denotational semantics extend environments 
practical extend expander shown define expander temporarily establishes keyword bindings visible body 
example foo list bar list append foo bar returns 

debugging syntactic extensions illustrate power proposed expansion mechanism demonstrate approach construction variety debugging tools including tracers inspectors 
define extend expander lambda current expander keyword keyword expander lambda pair 
eq 
car keyword keyword expander current expander install expander lambda loop macs cadr null 
macs caddr key macs pattern macs body macs loop cdr macs extend expander key eval macro pattern body 
extend expander 
examples illustrates different facet eps 
debugging tools developed obtained function definition syntactic extension 
number advantages approaches implementing debugging tools ffl portable implementations language support syntactic extension eps dependent run time architecture 
ffl independent method implementation compilation interpretation 
ffl correctness easier assure simple defined terms existing evaluation mechanism 
ffl need understand full language distinguish source expressions expanded expressions 
ffl simplicity encourages experimentation customization specific needs 
ffl regions text effective easily controlled efficiency penalty code outside regions 
traditional lisp systems run slower debugging mode tools 
simple trace facility prints application evaluation result evaluation 
indentation provided keep track applications process evaluation 
accomplished providing syntactic extension form trace applications exp expands application form xn exp expression form trace form xn lambda obtained similarly expanding see 
provides remarkable economy useful trace facility 
example consider expression approach scope tracing determined statically code trace application form expanded way 
contrasts usual dynamic approach tracing control tracing enabled install expander trace applications lambda lambda application 
trace form lambda map lambda cadr define print trace lambda level object level zero 
printf object printf define trace form level lambda source thunk print trace level source value fluid level level thunk print trace level value value 
application tracer 
trace applications car cdr 
expansion form equivalent lambda application lambda car cdr quote expansion completed transforming applications trace form lambda car cdr quote lambda lambda trace form car cdr lambda car trace form cdr lambda cdr execution expression yields trace disabled evaluation expressions control temporarily passed code defined 
static dynamic control tracing may preferable depending circumstances 
dynamic control easily added mechanism fluidly binding flag enables printing 
install expander trace source lambda trace expander cadr cadr define trace expander lambda source lambda pair 
subexpression 
source trace form lambda define subexpression 
lambda form source eq 
form source pair 
source subexpression 
form car source subexpression 
form cdr source 
source code trace facility 
lambda car cdr quote car cdr cdr trace illustrates problems current approach 
usually forms applications quote traced 
second usually want see forms source code introduced syntactic extensions lambda application introduced expansion form example 
considerations motivate trace source syntactic extension traces forms occurring source code body 
example evaluation expression cons trace source car cdr yields trace quote car cdr quote car cdr cdr returns value 
define trace form lambda source thunk loop printf source case read step ans thunk printf returns source ans ans step fluid trace form lambda ans thunk printf returns source ans ans printf options step step loop 
trace form stepper 
see implementation trace source 
note occurrences infinite expansion result trace expander feeding output 
level expansion avoids recursion order traced necessary expanders level expand trace expander note trace expander carries original source code 
power eps easily expanders closures local state case effect obtained fluid binding illustrate 
modifying trace form turn tracer stepper 
see 
time trace form invoked prompts symbol step step 
symbol step causes stepper prompt entering top level subexpression current expression print value expressions evaluation complete 
symbol step causes current expression evaluated value printed stepping 
achieved fluidly binding trace form function invokes thunk passed 
original binding trace form automatically restored fluid value current expression ans returned 
endow trace facility powers inspector ability examine change values lexical variable bindings 
order trace form access run time environment replace expression form lambda id id body scope trace source form lambda id id trace lambda body id id list locative locative lambda body body body obtained expanding body locative gives trace lambda body access binding corresponding formal parameter 
locative variable represented pair functional objects returns current value assigns new value see 
trace lambda body fluidly assigns trace environment list variable locative pairs corresponding install expander trace source lambda extend expander lambda trace lambda expander trace expander cadr cadr define trace lambda expander lambda args cadr body lambda args trace lambda body args list map locative args lambda map lambda body define locative gensym lambda id cons lambda id lambda set 
id define trace env define trace lambda body lambda vars vals body pairs map cons vars vals fluid trace env pairs body continued 
stepping inspector 
define trace form lambda source thunk loop printf source case read step ans thunk printf returns source ans ans step fluid trace form lambda ans thunk printf returns source ans ans see lambda printf car cadr trace env loop set 
id read val read pair id trace env pair pair val printf id val printf id loop printf options step step see set loop 
stepping inspector continued 
define trace lambda expander vars lambda fluid vars union cadr vars lambda cadr trace lambda body vars list map locative vars lambda map lambda 
visible environment inspector 
lambda expression arguments 
trace form commands see set may inspect modify environment bindings local contour 
redefining trace lambda expander possible inspect visible environment bindings 
see 
variable vars fluidly bound expansion time list visible variables current lexical environment 
list place lambda formals list constructing trace env 
common lisp provides special form compiler give programmer limited control environment macro expansion occurs 
version trace lambda expander demonstrates fluid special variables provides control need additional machinery 
version trace form record source code value form application circular buffer printing information 
error form break occurs possible inspect contents buffer follow history computation 
history mechanism proven useful debugging student assignments 
technique implementing debugger comparable run time efficiency debuggers provides advantages mentioned section 
drawback results generation voluminous code 
cases serious problem 
situations regions debugging enabled moderate size advantages approach debugging compensate increase code size 

discussion proposed syntactic extension technique called expansion passing style eps significantly flexible traditional lisp macro mechanism 
allows selective expansion subexpressions expansion subexpressions modified expansion functions modified state expansion application variable forms 
simplifies expansion algorithm improves modularity factoring special forms 
eps may incorporated lisp systems 
generally suffices redefine eval invoke expand argument 
critical difference facility proposed traditional macro mechanism expansion functions passed expression expanded expansion function 
function may may perform expansion 
analogous passing explicit continuation function known powerful programming technique example see 
demonstrated related technique passing expanders explicitly provides powerful tool defining syntactic extensions 
eps possible implement special forms typically lisp systems avoiding need build forms compiler interpreter 
include eval requires ability control subexpressions evaluated compiler require control environment compilation takes place 
cases existing macros may simplified efficient eps 
example common lisp defun typically implemented macro fully expand body resolve ambiguities related declarations documentation strings 
eps defun may implemented expander expands body expander inspects result avoiding body 
eps substantial improvement traditional approach syntactic extension difficulties 
shown instances programming expanders error prone easy perform unwanted infinite expansions 
shown traditional macro expansion facilities defmacro provided general eps context 
harm making power available need added expressiveness needed 
important problem expanders determine subexpressions syntactic extensions internal representation lists syntactic extensions applications 
straightforward solution pass expansion functions syntax table binds keywords expansion functions 
syntax table operations include determining symbol bound table retrieving expansion function bound symbol 
eps expanders significant advantages syntax tables ffl expanders naturally examine expand necessary forms keywords variables applications literals 
hooks expansion forms added mechanism syntax tables natural elegant expander mechanism 
ffl expanders may lexically dynamically bind information control expansion subexpressions 
best solution may pass syntax tables expanders order give full power 
charniak riesbeck mcdermott artificial intelligence programming lawrence erlbaum associates 
dybvig scheme programming language prentice hall 
scheme debugger user manual undergraduate honors thesis indiana university july 
dybvig friedman haynes expansion passing style conventional macros proceedings acm conference lisp functional programming cambridge massachusetts pp 

fischer lambda calculus schemata proceedings acm conference proving assertions programs las cruces new mexico pp 

kohlbecker syntactic extensions programming language lisp phd dissertation indiana university august 
kohlbecker friedman felleisen duba hygienic macro expansion proceedings acm conference lisp functional programming cambridge massachusetts pp 

kohlbecker wand macro example deriving syntactic transformations specifications conference record fourteenth annual acm symposium principles programming languages munich germany pp 

plotkin call name call value calculus theoretical computer science pp 

rees clinger 
eds revised report algorithmic language scheme sigplan notices pp 

steele common lisp language digital press 
steele lambda ultimate declarative artificial intelligence memo mit cambridge massachusetts 
stoy denotational semantics scott strachey approach programming language theory mit press 
