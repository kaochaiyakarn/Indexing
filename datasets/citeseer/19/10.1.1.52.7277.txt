defining flow sensitivity data flow problems thomas marlowe barbara ryder michael burke july banning introduced flow sensitivity term indicate hard complex data flow problems consensus precise meaning 
look banning original uses term interpretations generated 
consider multiplicity meanings interprocedural analyses categorizing number data flow problems 
classify interprocedural approximation techniques respect properties related sensitivity discuss additional data flow problem properties 
propose definition flow sensitivity appears capture original intent current 
distinction flow sensitive flow insensitive data flow problems introduced banning ban ban 
uniform definition terms shorthand expressing locality information applicability algorithms difficulty describing computing data flow framework 
usage sensitivity taken characterization difficulty data flow problem consistent meaning term hard understand relative difficulties problems 
department mathematics computer science hall university south orange nj marlowe cs rutgers edu department computer science rutgers university hill center campus piscataway nj ryder cs rutgers edu ibm thomas watson research laboratory yorktown heights nj watson ibm com overview concept sensitivity appears useful particularly interprocedural problems amenable easy formalization 
proceeding historical perspective review sections prior usages intraprocedural problems difficulties formalizing 
suggest approaches offer useful illuminating distinctions 
consider interprocedural analyses formulations different meanings flow sensitivity 
state important distinctions problem flow sensitivity algorithm flow sensitivity flow sensitivity context sensitivity 
section provide common definitions problem flow sensitivity section treat flow sensitivity approximation algorithms section discuss context sensitivity 
show interrelationships fundamental independence classes example problems algorithms literature 
section show past characterizations flow sensitivity consider necessarily provide information algebraic monotone vs distributive convergence fast vs bounded vs unbounded properties data flow problem solved 
briefly discuss sources complication data flow problems heterogeneity bidirectionality relate context flow sensitivity 
section suggest characterization flow sensitivity captures intuition terms essence current generalizes apply broadly just programs procedures 
data flow model data flow analysis involves compile time determination definition variables algebraic methods 
analysis performed common assumption apparent execution paths program flow graph feasible traversable program execution interprocedural problems paths restricted realizable paths calls match returns approximately lr lr rhs 
instance monotone data flow framework hec specified tuple 
rooted digraph ae usually meet semilattice space monotone order preserving functions mapping mapping edges element functions preserve meets called distributive 
intuitively control flow graph asu call multigraph hec root ae lattice data flow solutions assignment transition functions edges entry solution ae usually represented explicitly 
thought specifying system equations rp 
forward data flow problems information flows direction flow graph edges backward problems information flows opposite direction 
definitions examples loss generality terms forward data flow problems 
form typical equation forward data flow problem ae 
equation linear constants omega phi associative operations phi omega appropriate algebraic properties rp 
monotone problems solution techniques find maximum minimum fixed point mfp distributive problems meet paths mop solution 
data flow framework bounded intuitively fixed point iteration requires iterations cycle stabilize fast bounded 
standard data flow problems rest number standard data flow problems 
best known data flow problems classical intraprocedural problems reaching definitions live uses available expressions busy uses asu 
reaching definitions collects set definitions assignments variable reaching program point intuitively reaching variable assuming paths feasible discussed dually live uses collects set uses reached definitions live program point intuitively reaching definition 
available expressions determines program point set expressions valid value computed survives path program point busy uses set expressions need evaluated terminating path program point needed value produced point 
constant propagation determines variable safely replaced constant range propagation determines range values taken variable restricted 
best known interprocedural problems formal bound set bur ck ck ck 
formal bound set asks procedure formals formals reached call chains formal 
problem determines set alias pairs may refer storage location program point pass parameters unstructured variables pointers sufficient determine pairs true entry procedure 
variants somewhat different data flow properties partitions problems 
simple case determines alias pairs hold invocations procedure 
partitions mye determines sets variables program point exactly set variables addresses location execution path 
procedure language calculates set variables values may changed execution procedure 
addition classical problems interprocedural analogue 
example interprocedural reaching definitions determines set definitions including definitions procedures reach program point 
simple problems helpful interprocedural data flow computation 
determines set variables definition survives path procedure entry current program point typically program exit set variables definition survive 
banning definition algebraic criterion attempting give intuition new approach interprocedural data flow banning ban gives different related informal definitions flow insensitivity specialized problems considering 
definitions variants arisen hard formulate standard notation data flow frameworks interpretation isolation led confusion try resolve 
attempted formalize generalize 
banning definition deals composition side effects sequential conditional execution resulting correspondingly sequential straight line flow merged flow confluence shown graphs 
merged flow meet straight line flow composition init init id id id meet composition diagrams data flow framework terms flow function sequential flow composition individual flow functions flow function confluence set alternatives semilattice meet flow functions 
banning definition requiring flow insensitivity ffi take general form banning definition precisely defined general easily expressible standard data flow framework terminology 
forms definition rely algebraic equivalence functions term definition algebraic criterion ac flow insensitivity 
stated op ffi op op op restrict 
consider possible initial states allow value 
may allow op op operator restrict just union intersection 
criterion appear useful small number collecting problems flow insensitive definition 
reaching definitions classical data flow problems flow sensitive definition intraprocedural problems flow insensitive ffl may defined vertex definition occurs path reaches ffl preserved vertex definition occurs path reach ffl variable occurs definition basic block path ffl variable occurs basic block 
reaching variables contrast reaching definitions new definition kills old definition reach essentially complement 
differs reachability involved solution identical nodes clearly referring top diagram referenced bottom init 
likewise assuming convenience defined bottom init top defined top defined problems collect basic block properties easily seen flow insensitive value determined examination basic blocks reaching regard connectivity corresponding node independent versions trivial likewise flow insensitive 
consider contrast problems ffl variable defined node definition reaching occurs path reaches ffl variable may undefined path definition reaches 
problems flow sensitive criterion 
example contained top straight line flow diagram defined merged flow diagram defined problems merely collect combine information basic blocks datum killed presence 
language general undef operation sub procedural scopes may flow sensitive definition 
node specific node independent 
supplies local information computed propagating information graph edges considered data flow problem 
paths vs paths may vs problems problem paths paths problem path requisite information reaches path contrary information reach paths clear information 
similar reasons called may problem information may reach vertex may paths problem information reach possible path 
really fit paradigm completely 
classified problem 
main difference criterion basic blocks paths need collect examine reaching basic blocks 
related point expressions example unavailable statements definitions presence constructs invalidated constructs 
ac natural flow function edge defined source vertex edge target vertex flow functions labeled need general type signature 
example formal bound set usually posed flow function involves formal parameters source target targets copies identical flow functions diagrams different ranges 
enlarging lattice flow functions domain range set formal parameters program cover avoid problem 
real difficulty merged flow diagram modify bound sets corresponding parameters straight line flow modify bound sets flow functions incomparable 
banning ban ban gives problems illustrative flow insensitive data flow mod ref essentially interprocedural respectively banning problems originally defined call sites 
clear problems flow insensitive algebraic criterion 
modified algebraic criterion relax simply require combining operators composition meet allow actual results different 
give consistent meaning restrict domain flow functions linear form omega phi typically terms multiplicative coefficients identify neighboring solution preserved terms additive constants specify local information incorporated final solution 
sense phi operator describes new information nodes sequential flow included solution thought composition operator somewhat general sense 
flow functions linear form omega precedence phi omega associative distributive phi problem flow insensitive modified alternatively omega phi associative commutative 
modified algebraic criterion mac composition meet flow flow insensitive sensitive flow flow sensitive insensitive algebraic criterion mac phi meet operator flow sensitive 
see mac separates problems classes comparing classical problems reaching definitions flow insensitive definition available expressions flow sensitive 
reaching definitions meet set union flow functions form ab 
available expressions flow functions form meet intersection ab algebraic form complicated 
relatively simple combine flow constants obtain summary flow function path flow insensitive problem definition simple flow sensitive problem 
get diagram 
live uses cell cell flow insensitive mac available expressions cell cell flow sensitive 
formal bound set flow insensitive cell operator rmp appropriate algebraic properties 
mac identifies limited class problems flow insensitive groups flow sensitive relatively simple problems available expressions harder problems 
useful problems flow functions relatively simple form depends syntax chosen functions 
comparison ac stricter interpretation combining operator composition allows wider set functions formal bound set considered flow insensitive need concerned signatures flow functions 
banning second definition collecting criterion banning principally interested collecting interprocedural flow information wants processing call multigraph looking necessary example written classical problem flow functions available expressions flow insensitive reaching definitions flow sensitive 
collecting criterion cc composition meet flow flow sensitive sensitive flow flow sensitive insensitive structure procedures 
leads collecting criterion cc data flow problem flow insensitive side effect structure program determined processing determining side effects parts union ban individual contributions substructures global solution unioned regardless flow structure 
intraprocedural analysis substructures basic blocks cc say problem flow insensitive problem uses union merged straight line flow flow functions computed summary information basic blocks 
example problems page flow insensitive cc 
bitvector problems cc effect 
may problem criterion cc apparently responsible may problem criterion mpc definition flow insensitivity appearing number early papers ck ck may path problems flow insensitive path path problems flow sensitive 
definition may influenced terminology mye myers shows flow insensitive flow sensitive ic criterion section 
cc mpc identifies example problems page flow insensitive 
bitvector class problems gives decomposition contrasts figures 
problems identified flow insensitive mac cell identified flow insensitive cc mpc problems cell cell identified differently definitions 
cc mpc applicable flow frameworks operators particularly meet operator easily expressible terms set operations 
note banning examples flow sensitive problems live uses variables calls may problem flow insensitive mpc 
mpc taken applying problems meet union independent mac merged straight line flow notion annotations order information 
may problem criterion mpc composition meet flow flow sensitive sensitive flow flow insensitive insensitive intraprocedural sensitivity criteria example problems problems ac mac cc mpc insens insens insens insens insens insens sens sens insens insens sens sens insens insens sens sens sens sens sens sens sens sens sens insens reaching defs sens insens insens insens live uses sens insens insens insens avail sens sens sens sens algebraic structure flow functions operators composition example identify formal bound set flow insensitive 
algebraic criteria considered intuition mac mixing intersection union problem computation summary flow functions sets edges complicated harder 
leads possible approach defining flow sensitivity way recommend reasons difficult state reasonable general criterion particularly original criterion relied syntactic algebraic properties flow functions distinctions ac mac cc mpc turned useful practice 
hand useful widely fully understood distinctions applied interprocedural problems algorithms 
comparisons criteria shows example problems page lists flow sensitivity respect ac mac cc mpc criteria 
banning third definition interprocedural criterion interprocedural criteria particular problem flow insensitive respect criterion solution procedure satisfying criterion yields precise static solution course alternative algorithms satisfy criterion 
problems satisfy criterion flow sensitive criterion may algorithms produce approximate solutions operationally defined approximate problem satisfy criterion possibly stronger criteria see section 
preceding definitions flow sensitivity apply equally intraprocedural interprocedural problems 
banning gives alternate somewhat implicit criterion flow insensitivity closely related cc principally applicable interprocedural problems 
banning states call occurs evaluation flow insensitive data flow problem computation solution defer computation call site side effects terms lattice model statement evaluation call multigraph 
literature refers calculations procedure summary annotations clarity distinguish terms summary annotation 
discuss possible interprocedural flow sensitivity criteria acknowledge existence purely interprocedural problems formal bound set bur ck ck ck mye 
problems involve intraprocedural information 
criteria previous sections considered trivially flow insensitive solutions depend declarations procedure formal parameters parameter passing patterns calls program facts represented call multigraph program 
terminology problems introduce terminology 
intraprocedural information extracted procedure annotations evaluated incoming interprocedural data flow information procedure summaries 
procedure annotations invariant computed constant corresponding summaries constant 
annotations lie lattice constants invariant annotation constant functional annotation invariant constant 
data flow problem flow insensitive interprocedural criterion demonstrate precise algorithm flow sensitive criterion 
independent intraprocedural control flow banning definition appears led myers mye interprocedural criterion ic flow insensitivity problem flow insensitive uses constant intraprocedural annotations solution depend intraprocedural structure program 
precisely procedure annotation extracted considering execution paths procedure discussions limiting attention structured variables arrays treated scalars function valued variables function pointers 
statements large non deterministic switch statement loop 
clearly includes possible intraprocedural paths 
myers shows satisfies criterion flow insensitivity efficient solution interprocedural live avail flow sensitive np np complete 
note ic flow insensitivity directly related may may problem avail problems interprocedural live flow sensitive may problem ic 
example problems previous sections intraprocedural don involve flow ic criterion applied 
myers shows intractability problems considered due flow sensitivity need precise partition information solution flow sensitive problems absence aliasing polynomial 
computational complexity data flow problem necessarily depend flow sensitivity problems flow sensitive difficult solve precisely require complicated data structures algorithms solution 
note problems myers termed flow insensitive ic constant intraprocedural annotations calculated may interprocedural propagation call multigraph 
characterization fits intuitive feeling flow insensitive problems easily solved 
apply ic interprocedural problems strict 
ic allows consideration set statements inside procedure consideration statement order 
ic insensitive interprocedural versions cc insensitive problems hard think useful problems 
dependent intraprocedural control flow interprocedural problems called flow sensitive literature viewed flow insensitive new criterion ipc 
problems solved precisely calculate intraprocedural annotations propagating data flow information static paths flow graph second invariant annotations interprocedural propagation information call multigraph 
intraprocedural static paths traversed advance interprocedural propagation annotation associated procedure node call multigraph invariant 
flow insensitive problems ipc criterion dependent intraprocedural control flow dependence limited initial extraction intraprocedural information worst call context seen technique 
possible representations call multigraph interprocedural structure preserve intraprocedural flow information 
example program summary graph psg cal preserves control dependence sequence entry calls exit statements discarding intraprocedural structure 
number interesting problems possible extract intraprocedural information single pass annotations edges structures cal hs hrb 
dependence intraprocedural information necessarily completely encapsulated annotations shared annotations required constant 
annotations control flow abstraction representation 
intuition ipc intraprocedural summarization followed interprocedural solution holds 
extend definitions constant invariant annotations annotations nodes edges representations view problems ipc insensitive representation 
problems flow insensitive ipc include families interprocedural problems languages single level pointer dereferencing fortran programs call aliasing 
include pointer induced lr 
include interprocedural kill cal interprocedural reaching definitions hs interprocedural copy constant propagation rhs dgs 
comparison consider utility various flow sensitivity measures 
ic quite limiting procedural annotations fact constant dependent intraprocedural flow calculated 
obvious example category 
hand ipc allows invariant annotations include information calculated control flow procedure 
criteria problems classify compared 
ic ipc orthogonal previous criteria appear state important distinction 
ipc particular problems identifies flow sensitive tend hard problems difficult specify formalize implement 
adding data flow analysis phase compiler tend add complexity description implementation 
ipc weaker ic absence aliasing flow sensitive ic flow insensitive ipc 
additional factor dependence representation 
annotations derived intraprocedural phase tuples constant values parameters interprocedural flow functions 
formal bound set example lattice set subsets pairs variables second component formal parameter 
annotation procedure set local global call parameter bindings set entry parameter call parameter bindings flow function takes bindings passed successors returns ffi ffi represents composition 
case elements solution lattice interprocedural reaching definitions constant information includes information procedure 
information readily encoded set variables occurring procedure element solution lattice set definitions program 
consider interprocedural reaching definitions absence aliasing ipc insensitive problem 
accept annotations original solution lattice difficult know forms allow practice choice usually clear 
principle argue invariant value invariant function considered invariant annotation 
principle encode formal formal bindings considered call chains sets identical 
interprocedural sensitivity criteria independent dependent intraprocedural intraprocedural control flow control flow annotations formal bound set call invariant fortran mod level pointer induced annotations ic fortran reaching defs kill aliasing copy constant propagation ipc entire semantics procedure single invariant function arguments values callees callers analysis backward forward interprocedural flow functions just invocations apply 
case data flow problem satisfies ipc clearly defeats intent ipc criterion 
ipc includes implicitly specification function space annotations permitted 
interprocedural approximation algorithms point discussed flow sensitivity data flow problems amenable precise solution 
complex problems approximate solutions devised problems provably difficult np hard unsolvable efficient solution approximate 
compare approximation techniques terms flow sensitivity properties intraprocedural annotations dependent independent control flow invariant changing annotations 
techniques termed flow insensitive flow sensitive literature see framework terms applied approximation algorithms terms alg flow insensitive afi alg flow sensitive afs 
distinction algorithms contrasted ic ipc criteria section 
afi afs distinction applied obvious precise algorithms problems ic insensitive problem algorithm afi ipc insensitive problem algorithm afs ipc annotations representations take account intraprocedural flow 
hand precise afi algorithm need correspond ic insensitive problem afi algorithm permitted recompute procedure summaries consider intraprocedural flow 
consider limited functional model annotations call multigraph node 
functional annotations calculated intraprocedural information afs afi considering intraprocedural flow control 
results procedure summary information independent internal procedure structure invariant inputs 
contrasted constant summary information ic criterion 
examples afs afi examples approximation methods categorize manner pointer induced algorithms lr def analysis programs plr 
burke algorithm uses functional annotation procedure computed consideration intraprocedural program structure 
interprocedural data flow propagation pass evaluation procedural annotations calculate possible new intraprocedural information associated node call multigraph 
say algorithm afi procedure annotations independent intraprocedural flow 
analysis consists phases intraprocedural annotations collected call multigraph constructed interprocedural data flow problem solved solution interprocedural problem procedures possibly yielding new summaries annotations 
circular dependence interprocedural analysis analysis individual procedures steps interact summaries variable algorithm different summaries may result different information input procedure annotation 
pande algorithm plr uses functional annotation procedure summary incorporates information obtained propagation intraprocedural static paths 
say algorithm afs procedure annotations depend intraprocedural flow 
approximation algorithms pointer induced lr optimized algorithm kill information similarly classified afs 
algorithms memoization table lookup avoid unnecessary recalculation annotations repeated inputs 
algorithms compute single constant annotation procedure portions annotation function computed lazy fashion discussed ipc 
levels sensitivity binary sensitivity classification approximation algorithms possible informally contrast level sensitivity algorithms closely related problems degree intraprocedural flow information captured annotations representations algorithm 
recall representations range call multigraph contains intraprocedural flow information representations psg cal preserve algorithms handle multiple levels indirection pointer operations 
consider describing algorithms regular expressions numbered algorithm phases 
afi algorithm discussed structure flow insensitive problems ipc solvable algorithms structure 
seen embody idea similar separate compilation efficient analysis preserves significant property procedure annotations extracted single visit preceding interprocedural propagation alternatively demand non repeating calculation interprocedural propagation 
flow information representations supergraph mye essence inlines procedure flow graphs adding call return edges inlining dynamically necessarily eventually identifying recursive instances handling specially 
annotations range collection functions afi algorithms sort annotations typical ipc problems arbitrary semantic functions capture intraprocedural flow 
call approximation algorithm pure afs preserves intraprocedural flow supergraph representation arbitrary functions annotations 
pure afs algorithm evaluation value tentative interprocedural solution procedure essentially revisits procedure special handling recursion avoid non termination 
examples algorithms relations recursive structures hn presence function pointers egh 
context sensitivity term context sensitivity literature egh refers calling context procedure call stack call history path history interprocedural analysis discussed mye sp 
confused ideas flow sensitivity sections myers distinction context flow sensitivity discussing complexity flow sensitive problems see section 
orthogonal properties show 
context sensitivity implied polyvariant analysis functional languages general term describes analysis partial evaluation constant propagation eliminate infeasible intraprocedural branches distinguishing different call sites 
algorithm context sensitive insensitive uses call history information 
means precise approximate algorithms categorized context sensitive insensitive 
context sensitive algorithm need full call stack abstraction 
myers sharir pnueli full call stack suggests tail stack abstraction adaptation choi algorithm pointer induced cbc mlr 
landi ryder algorithm pointer induced lr uses different approximation context reaching alias information call site 
table shows orthogonality properties naming problems algorithms fall entries 
entry position problem 
solution problem yields procedure called respect program point program 
solutions procedure containing program point procedure called procedure call stack 
key observation return procedure solution contain procedures called directly transitively calls procedures called independent call site analogy term problem context insensitive context insensitive precise algorithm doesn appear useful 
usual assumptions static analysis 
solution problem independent context 
note information flow calls 
clearly problem information flow upward downward necessarily context insensitive conversely way flow certainly problem context sensitive 
consider approximate algorithms pointer induced aliasing 
landi ryder lr afs context sensitive burke afi context insensitive 
ruf presents algorithms problem context sensitive context insensitive ruf afs 
approach problem wl 
algorithm afs context sensitive uses call stack abstraction aliasing pattern template call site 
considering aliases produced call parameter passing myers may alias partitions algorithm context sensitive afi 
algorithm interprocedural problem termed call site specific different calls procedure differing information call return backward problems may result differing interprocedural effects return call 
measure call site specificity achieved context insensitive algorithm 
example jump functions approximate interprocedural constant propagation algorithms gt context insensitive afs intraprocedural summaries pass linear jump functions result different constant information return sites result interprocedural effects 
approximate interprocedural constant propagation algorithms afs context insensitive 
newer approach interprocedural constant propagation ch 
algorithms afi context insensitive propagates information downward calls call multigraph propagating back returns 
second context insensitive calls afi algorithm refines afi solution recomputing single topological order propagation call graph 
refinement phase considers intraprocedural flow procedure get better information call sites procedure entry compute procedure annotations 
uses afi annotations back edges handle call cycles 
composite algorithm fit flow sensitivity model classified afi afs 
interprocedural data flow algorithms alg flow sensitivity context sensitivity truly independent exhaustive dimensions 
ipc insensitive problem may algorithms context sensitive insensitive ipc sensitive algorithms solved call site specific context sensitive algorithms 
data flow problem properties properties complicate definition computation data flow problems 
change rules allow pruning infeasible paths constant propagation parameter values wz 
algorithmic flow sensitivity versus context sensitivity alg flow alg flow insensitive sensitive context insensitive formal bound set call pointer induced context sensitive partitions mye pointer induced aliasing lr constant propagation heterogeneous flow functions callahan cal defines pair interprocedural data flow problems kill properties require examination code procedures just initial annotations flow sensitive sense ipc flow functions non uniform algebraic form functions meet operator depending classification nodes edges flow graph 
particular kill evaluation nodes return nodes uses join operator return nodes require meet 
mar marlowe suggested problem classification nodes edges types form flow function depends classification underlying edge incident vertices reasonably considered flow sensitive 
view edge classification orthogonal dimension alg flow sensitivity 
discusses transform multisource data flow problems tuple framework formulation mmr 
model especially useful data flow analysis explicitly parallel programs may control synchronization call return edges gs ch 
bidirectionality bidirectional data flow problems introduced morel renvoise partial redundancy generalization available expressions approach extended problems dp 
krs shown solve partial redundancy sequence unidirectional problems 
bidirectional problems typically involve non trivial equations node entry exit different meets view subclass heterogeneous problems mentioned 
discussions mmr show bidirectional problems transformed tuple frameworks 
convergence properties flow sensitivity tight restrictions places equation sets problems flow insensitivity ac implies fact distributivity problems way bounded 
follows path reduced meet computation due cycles terminates idempotence meet distributivity effect flow straight line flow 
similarly cc may constrain complexity certainly algebraic structure flow insensitive problems 
mac mpc imply boundedness properties 
likewise ic ipc implies boundedness properties flow insensitive priori bounded fixed instance independent formal bound set bounded 
flow sensitivity continuum shown useful criteria flow sensitivity gleaned existing definitions 
distinction classification problem classification approximate solution procedures 
flow sensitive problems admit safe afi approximate algorithms varying precision 
interprocedural criteria ic ipc capture possibility summarizing procedure information annotation avoid revisiting internals procedure 
concept generalized hierarchical decomposition decomposition interprocedural analysis program procedure block statement decompositions program module procedure procedure block statement may interesting situations 
factors influencing precision approximate solution precision information particularly alias information granularity representation 
flow graph data flow stratification hierarchical decomposition look data flow problem problem induced graph clusters level granularity 
consider granularity criterion gc data flow problem class entities example programs 
representation instances level granularity space functions 
data flow problem flow sensitive granularity function space solved precisely flow functions summary annotations nodes edges granularity instance computation solution requires examination annotation level granularity finer natural clustering program code basic blocks data flow problems flow insensitive level flow basic blocks uninteresting summarized annotation block 
level flow sensitive problems intraprocedural dynamic structure pointer induced level indirection 
solving constant annotations examples code basic blocks considered statement statement effects depending incoming information 
best difficult worst impossible compute solution basic block flow graph solution entry block individual statements block examined order determine solution exit block 
surveyed existing interpretations flow sensitivity derived banning original uses term problems 
classified existing data flow problems respect 
proposed interprocedural flow insensitivity definitions ic ipc captures part banning original intuition subsequent usage 
showed express useful distinctions difficulty problems distinguished computational complexity seen flow sensitive problems tractable fact hard problems sense complexity 
discussed context sensitivity distinguished flow sensitivity 
explored data flow problem properties heterogeneity bidirectionality add difficulty obtaining solution 
proposed new definition flow sensitivity attempts generalize interprocedural criteria better capture association details problem formulation locality information difficulty precise problem solution 
grateful pande sean zhang helpful comments manuscript john reppy discussions 
asu aho sethi ullman 
compilers principles techniques tools 
addisonwesley 
ban banning 
method determining side effects procedure calls 
phd thesis stanford linear accelerator center stanford stanford ca august 
ban banning 
way find side effects procedure calls aliases variables 
conf 
rec 
sixth acm symp 
principles programming languages pages january 
michael burke paul carini 
choi hind 
flow insensitive interprocedural alias analysis presence pointers 
proceedings th international workshop languages compilers parallel computing pages 
springer verlag august 
bur burke 
interval approach exhaustive incremental interprocedural data flow analysis 
acm trans 
programming languages systems july 
cal callahan 
program summary graph flow sensitive interprocedural data flow analysis 
proc 
sigplan symp 
compiler construction july 
cbc jong deok choi michael burke paul carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
conference record twentieth annual acm symposium principles programming languages pages january 
callahan cooper kennedy torczon 
interprocedural constant propagation 
proceedings acm sigplan symposium compiler construction pages june 
ch chow harrison iii 
compile time analysis parallel programs share memory 
conference record nineteenth annual acm symposium principles programming languages pages january 
ch paul carini michael hind 
flow sensitive interprocedural constant propagation 
proceedings sigplan conference programming language design implementation pages june 
sigplan notices volume number 
ck cooper kennedy 
efficient computation flow insensitive interprocedural summary information 
proc 
sigplan symp 
compiler construction pages june 
sigplan notices vol 
ck cooper kennedy 
complexity interprocedural side effect analysis 
computer science department technical report tr rice university october 
ck cooper kennedy 
fast interprocedural alias analysis 
conf 
rec 
sixteenth acm symp 
principles programming languages pages january 
austin texas 
dgs duesterwald gupta soffa 
demand driven computation interprocedural data flow 
conference record second annual acm symposium principles programming languages january 
dhamdhere 
practical adaptation global optimization algorithm morel renvoise 
acm trans 
programming languages systems april 
dp dhamdhere patil 
efficient algorithm bidirectional data flow analysis edge placement technique 
acm trans 
programming languages systems 
egh emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
proceedings sigplan conference programming language design implementation pages june 
published sigplan notices 
gs grunwald srinivasan 
data flow equations explicitly parallel programs 
proceedings conference principles practices parallel programming pages may 
gt dan grove linda torczon 
interprocedural constant propagation study jump function implementation 
proceedings sigplan conference programming language design implementation pages june 
hec hecht 
flow analysis computer programs 
elsevier north holland 
hn hendren nicolau 
parallelizing programs recursive data structures 
ieee transaction parallel distributed systems 
hrb horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
hs harrold soffa 
efficient computation interprocedural definition chains 
acm transactions programming languages systems march 
neil jones karsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall 
johnson pearson pingali 
program structure tree computing control regions linear time 
proceedings sigplan conference programming language design implementation pages june 
published sigplan notices vol number 
krs knoop steffen 
lazy code motion 
proc 
sigplan symp 
programming language design implementation pages june 
published sigplan notices vol 

lr landi ryder 
pointer induced aliasing problem taxonomy 
conference record eighteenth annual acm symposium principles programming languages january 
lr landi ryder 
safe approximate algorithm pointer aliasing 
proc 
sigplan symp 
programming language design implementation pages june 
published sigplan notices vol 

landi ryder zhang 
interprocedural modification side effect analysis pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
mar marlowe 
data flow analysis incremental iteration 
phd thesis dept computer science rutgers october 
mlr marlowe landi ryder choi burke carini 
pointer induced aliasing clarification 
acm sigplan notices september 
mmr stephen thomas marlowe barbara ryder 
lattice frameworks multi source bidirectional data flow analysis problems 
technical report lcsr tr department computer science rutgers university april 
morel renvoise 
global optimization partial redundancies 
comm 
acm february 
marlowe ryder 
efficient hybrid algorithm incremental data flow analysis 
conference record seventeenth annual acm symposium principles programming languages pages january 
marlowe ryder 
properties data flow frameworks unified model 
acta informatica 
ryder 
non concurrency analysis 
proceedings conference principles practices parallel programming pages may 
published acm sigplan notices may 
mye myers 
precise interprocedural data flow algorithm 
conf 
rec 
eighth acm symp 
principles programming languages pages january 
plr pande landi ryder 
interprocedural def associations systems single level pointers 
ieee transactions software engineering may 
rhs reps horwitz sagiv 
precise interprocedural dataflow analysis graph reachability 
conference record second annual acm symposium principles programming languages pages january 
rmp ryder marlowe 
conditions incremental iteration examples counterexamples 
science computer programming 
rp ryder 
elimination algorithms data flow analysis 
computing surveys september 
ruf ruf 
context insensitive alias analysis reconsidered 
proceedings sigplan conference programming language design implementation june 
appear 
sp sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow analysis theory applications pages 
prentice hall 
wl robert wilson monica lam 
efficient context sensitive pointer analysis programs 
proceedings sigplan conference programming language design implementation pages june 
available sigplan notices 
wz wegman zadeck 
constant propagation conditional branches 
conference record twelfth annual acm symposium principles programming languages pages january 
