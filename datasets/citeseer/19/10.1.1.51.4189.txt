fast write barrier generational garbage collectors urs lzle computer systems laboratory stanford university urs cs stanford edu generational garbage collectors need keep track older younger generations younger generations garbage collected inspecting object older generation lh ung 
set locations potentially containing pointers newer objects called remembered set ung 
store system ensure updated location added remembered set store creates older newer object 
mechanism usually referred write barrier store check 
stores compiler know statically store check necessary example storing integer assuming integers implemented immediates real heap allocated objects 
general case store check executed store operation 
stores fairly frequent non functional languages efficient write barrier implementation essential 
write barrier implementation described reduces write barrier overhead mutator extra instructions checked store 
card marking new write barrier implementation wilson card marking scheme wil 
scheme heap divided cards size words typically card associated bit separate bit vector 
store check simply marks bit corresponding location updated 
garbage collection time collector scans bit vector finds marked bit examines pointers corresponding card heap 
unfortunately card marking just described fairly slow 
bit inserted bit vector corresponding word read memory updated written back 
addition bit manipulations usually require instructions risc processors 
chambers ungar improved wilson scheme bytes bits mark cards cha 
card heap byte associated card marked simply storing special value zero corresponding byte 
scheme uses times memory space overhead usually small example card size words bytes space byte map heap size 
similar efficient schemes proposed sobalvarro sob shaw sha 
oopsla garbage collection workshop washington october 
big advantage byte marking scheme speed 
self system described cha store check requires just sparc instructions addition actual store st obj offset ptr store ptr object field add obj offset temp calculate address updated word sll temp temp divide card size shift left st byte map temp clear byte byte map code sequence assumes register byte map holds adjusted base address byte map byte map start address heap word avoiding extra subtraction computing index byte cleared 
instruction write barrier new write barrier improves standard card marking relaxing invariant maintained card marking scheme 
invariant maintained standard card marking bit byte marked card may contain pointer old new scheme relaxed invariant bit byte marked cards may contain pointer old new small constant current implementation 
essentially gives store check leeway choosing byte mark marked byte may bytes away direction lower addresses correct byte 
relaxed invariant allows omit computing exact address updated word long offset updated word distance object mark byte corresponding object address byte corresponding updated field 
common case store check instructions st obj offset ptr store ptr object field sll obj temp calculate approximate byte index st byte map temp clear byte byte map usually leeway sufficient cover virtually stores stores array elements 
example card size bytes self system stores fields objects fast code sequence 
system determine object boundaries maximum leeway restriction lifted entirely case relaxed variant stated bit byte marked card object starting card may contain pointer old new fields object system user defined field offset bytes 
scanning card garbage collector simply needs sure object card scanned completely part belongs card 
words collector continues scanning word card encountering object header 
large objects scheme result high scanning costs amount scanning longer bounded fixed maximum leeway size object 
fortunately problem mitigated marking exact card stores arrays object starting card array collector need continue scanning card 
performance evaluation implemented new card marking scheme leeway self system measured performance self programs briefly described table 
programs run lightly loaded sparcstation 
time consumed store checks determined running programs instruction level simulator modelling exact hardware behavior workstation including caching behavior 
scavenging overhead measured running programs times version virtual machine instrumented gprof 
table show results 
benchmark size lines description deltablue way constraint solver parser parser version self primmaker program generating glue stubs external self primitives richards simple operating system simulator cecil interpreter cecil language table benchmark programs benchmark execution time ms number store checks card scanning total scavenging total overhead percentage total execution time deltablue parser primmaker richards cecil table scavenging overhead system measured optimizes store checks ways 
store check performed initializing stores clone primitive new object allocated happens extremely rarely space available 
second compiler omits store checks stored value known integer float known old object 
programs show scavenging overheads percent total runtime store check overheads roughly agrees measurements lisp programs taken zorn zor 
fast store check code card marking overhead significantly exceeds card scanning time benchmarks richards deltablue primmaker 
benchmarks card marking card scanning overheads equal 
programs measured card marking consumed total write barrier cost 
discussion numbers differ somewhat obtained chambers study garbage collection overhead self system cha 
generally chambers measurements store checking overhead showed higher overheads study ranging similar set programs 
measurements directly compared reasons 
factors different hardware compiler store check implementation self programs changed 
second chambers estimated store checking time running versions system completely store checks standard store checking code eden space large prevent scavenging old object new constant stored old compiler safely omit store check 
numbers overestimate card scanning overhead somewhat scanning code written assembler exploit load instructions 
deltablue parser primmaker richards cecil total execution time store check card scanning scavenging 
distribution scavenging overhead execution benchmark 
measurements may accurate affected caching effects unrelated actual store checking overhead 
write barrier comparably low mutator overhead aware sequential store buffer ssb described hosking hos 
ssb records locations stored scheme ssb store barrier takes instructions store add 
scavenge time ssb scanned locations referenced pointers buffer examined 
actual ssb write barrier just fast scheme significant drawback ssb scheme processing effort scavenging time proportional number stores performed size part card marking 
non functional languages self stores quite frequent store buffer grow large 
table shows number stores requiring check program estimate overhead ssb implementation 
column labelled ideal ssb overhead shows estimated overhead ideal somewhat unrealistic ssb implementation consuming combined overhead store check buffer scanning cycles store 
realistic ssb overhead column assumes combined overhead cycles store requires careful assembly programming low cache ratios intended represent practical ssb implementation 
estimated realistic ssb overhead times higher card marking overhead benchmarks ideal ssb beat card marking benchmarks 
appears stores frequent self programs sequential store buffer competitive 
machines direct mapped caches sun workstations studies exhibit pronounced variations cache effectiveness 
experience execution time programs vary percent depending exact positioning code data machines 
cycles store check cycle add cycle store cycles uncached write overhead cycles scanning loads cycles cycles compare branch cycles cache overhead load pointer ssb 
benchmark number checked stores ideal ssb overhead estimated realistic ssb overhead estimated card marking check scanning ratio realistic card marking deltablue parser primmaker richards cecil table estimated overhead sequential store buffer propose new variant card marking reduces marking overhead just instructions store 
instruction card marking code marking overhead consumes significant fraction total cost maintaining write barrier 
programs measured marking consumed total write barrier cost part time scanning cards scavenge time 
programs marking overhead accounted total garbage collection overhead 
marking cost represents roughly half total write barrier cost appears write barrier implementations significantly higher mutator overhead sequence competitive terms total write barrier cost 
sequential store buffer far know write barrier scheme overhead significantly slower card marking estimates shown table scavenging overhead high 
card marking scheme described appears excellent choice maintaining write barrier efficient garbage collected systems 
acknowledgments bob cmelik shade tracing tool measurements gordon spa sparc simulator 
think benjamin zorn members self group comments version 
cha craig chambers 
cost garbage collection self system 
oopsla gc workshop october 
cha craig chambers 
design implementation self compiler optimizing compiler object oriented programming languages 
ph thesis computer science department stanford university 
hos antony hosking eliot moss darko 
comparative performance evaluation write barrier implementations 
oopsla proceedings pp 
lh henry lieberman carl hewitt 
real time garbage collector lifetime objects 
communications acm 
sha robert shaw 
empirical analysis lisp system 
stanford university computer systems laboratory technical report csl tr 
sob patrick sobalvarro 
lifetime collector lisp systems general purpose computers 
thesis mit eecs dept cambridge ma 
ung david ungar design evaluation high performance smalltalk system 
mit press cambridge ma 
wil paul wilson thomas moher 
card marking scheme controlling intergenerational generation gc stock hardware 
sigplan notices pp 

zor benjamin zorn 
barrier methods garbage collection 
technical report cu cs university colorado boulder november 
