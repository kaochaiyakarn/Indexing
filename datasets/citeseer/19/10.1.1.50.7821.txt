authentication logic supporting synchronization revocation recency stuart stubblebine rebecca wright distributed systems inherently involve dynamic changes value security attributes goodness encryption keys 
concurrent knowledge usually infeasible impractical necessary participants distributed protocols determine act beliefs may supported current state system 
policies determining beliefs situations range extremely conservative believing statements extremely optimistic believing statements known revoked 
security policies heavily dependent timing received messages synchronization principals 
logic analyzing cryptographic protocols capability specify time synchronization details 
capability considerably advances scope known techniques expressing practical authentication policies protocol participants constraints reasoning protocol goals subject constraints 
course reasoning protocol goals able deduce requirements trust protocol participants synchronization protocol participants timeliness message contents 
logic flexible support wide range security policies 
ability reason conjunction individual participant policies protocols especially important public private key infrastructures deployed new unanticipated policies put 
distributed systems lack physical protection communication path means communication susceptible attacks involving eavesdropping modification impersonation 
protocols cryptographic mechanisms encryption digital signatures form basis security distributed systems providing protection attacks 
unfortunately cryptographic protocol design historically error prone evidenced numerous vulnerabilities cited literature 
analysis design techniques proven useful detecting protocol vulnerabilities 
bell laboratories mountain avenue room murray hill nj usa 
mail stubblebine research att com 
bell laboratories mountain avenue room murray hill nj usa 
mail research att com 
appears proceedings rd acm conference computer communications security march new delhi india 
logic analyzing cryptographic protocols capability specify time synchronization details 
capability considerably advances scope known techniques expressing practical authentication policies protocol participants constraints reasoning protocol goals subject constraints 
reason properties synchronization recency revocation analyze protocol goals scope existing analysis techniques 
logic derive protocol goals presence participants particular times goodness keys particular times participants beliefs particular times 
specifically goals involve showing long term evolution beliefs practical systems characterized dynamic changes goodness keys jurisdiction authorization quality synchronization showing correctness replay detection mechanisms timestamps showing beliefs goodness keys authorization tickets subject policies requiring statements aren known revoked showing time presence continued presence remote principals 
course reasoning protocol goals able deduce requirements trust protocol participants synchronization bounds participants recency timeliness message contents 
separate protocol security policies specify example methods principals determining beliefs previously received messages handling revocation 
policies range conservative believing statements optimistic believing statements known revoked 
related considerable effort spent understanding extending improving logics cryptographic protocols :10.1.1.50.4190:10.1.1.115.3569
additional research performed calculi access control authentication distributed systems 
approaches fall short objectives reasoning synchronization recency revocation 
seminal burrows abadi needham introduced logic reasoning authentication protocols 
ban logic successors example time divided epochs past :10.1.1.115.3569
past time current run protocol considered begins start current run 
beliefs held assumed stable current run protocol principals allowed change beliefs run 
particular logic principal believes key point run protocol believe key duration protocol 
underlying logic closely ban logic reformulated abadi tuttle syverson van oorschot :10.1.1.115.3569
logics qualify statements time allow arbitrary revocation keys beliefs jurisdiction 
notation formalism similar ban related logics highlight parallels logic ban related logics 
syverson adding time logic authentication related different focus 
incorporates temporal formalism semantics model ban logic temporal notions points run prior current point run prior current :10.1.1.115.3569:10.1.1.115.3569
logic hand allows arbitrary granularity time 
stubblebine closely related 
introduces notion secure authentication 
secure authentication characterizes authentication policy recency security information keys authenticating channel message 
particular requires time authentication verifiers received account accuracy security relevant information authentication 
authentication secure policies ensures revocation fail safe 
security information revoked time verifier authenticate message revoked credentials time ffi ffi recency interval 
formalizes notions recency individual authentication policies recency stubblebine 
previous method assume clock synchronization allows reasoning trusted synchronization paths synchronization bounds multiple protocol participants 
extends ban logics handle issues scope logic 
introduce notion participant claims formula time interval notation local clock participant time interval 
strong assumption duration protocol run short participants commit believing messages correct duration protocol 
logic limiting characteristic ban logics beliefs may revoked arbitrary time 
assumptions restrictive reasoning long lived security associations 
furthermore reasoning synchronization synchronization bounds scope 
removes restrictions allowing arbitrarily long protocol durations participants beliefs may change time 
main difference logic ban logic successors allow possibility revocation keys jurisdictions generally arbitrary beliefs 
allow principal hold belief point run protocol hold belief run 
strict extension beliefs point time point 
particular belief time extended time policies specified part assumptions protocol 
significant difference logic ban logic timestamps 
ban treats timestamps nonces 
important property timestamp freshness 
cases freshness timestamp important 
case example kerberos ticket may sent fresh valid created 
logic explicitly captures time timestamp uses time reason 
ban logics response nonce challenge idealized nonce challenge 
feel proper way handle protocols logic particular freshness challenge response allows recipient determine presence responder 
logic response idealized said allowing differentiation freshness challenge freshness response 
example usefulness approach consider protocol issues challenge time responds encrypted shared key time sends response logic allows determine presence freshness response time allow determine presence message may replay 
example illustrates logic allows different beliefs concluded different times 
addition added synchronization construct allow reasoning trusted synchronization paths synchronization bounds protocol participants 
consequently analysis explicit impact derivation trustworthy synchronization paths synchronization bounds achieving protocol goals 
addition time logic yields slightly complicated logic feel additional complexity justified due considerable gains able specify analyze important properties systems policies practice 
feel analysis technique easily reduced implementation removing complexity analysis 
define logic section 
section analyze protocol fragment highlight interesting aspects logic 
section define model computation sketch proof soundness logic respect model computation 
logic proceeding formal definition logic give intuitive description 
logic consists formulas statements knowledge beliefs principals involved 
statements believes believes holds time received received time messages fxgk encrypted bxc gamma signed gamma 
assume principal local concept time different principals times may agree 
basic formulas time refers local time principal formula 
principal principal involved explicitly state principal time referenced 
indicate formula holds times ht indicate formula holds time logic simplifying assumptions similar related logics cf 

attempt answer important question cryptographic protocols 
goal reason implementation details correct cryptographic functions 
principals trusted communicate honestly senders believe truth message contents 
principals trusted keep secrets 
particular keys may compromised allow decrypt encrypted messages principals assumed pass decrypted contents specified protocol 
keys assumed adequate purposes cryptosystems assumed secure properly 
example assume possible principal create value fxgk encryption key principal conversely principal attempts decrypt fxgk wrong key result message 
practice easily achievable formatting messages specified format encrypting 
principals recognize encrypted messages mistakenly attribute principal 
certain assumptions logic 
particular assume users logic properly protocols reasonable assumptions carrying protocol analysis 
example assumptions contradict reflect real world correctness protocol claimed 
section formally define set messages formulas logic 
section define axioms allow derive formula 
messages formulas set primitive terms 
assume contains real numbers distinguished subsets constant symbols called principals public keys private keys shared keys times data constants nonces primitive propositions 
set public keys private keys shared keys called keys 
assume set times ordered 
key inverse 
public shared key write gamma denote inverse 
public key gamma private key 
shared key gamma shared key gamma notational convention denote private key inverse corresponding public key 
ft set functions primitive terms 
particular distinguished functions ft represent encryption fxgk digital signatures bxc gamma concatenation xn 
messages truth values times principal names nonces 
identify subset ft mt set formulas 
formulas truth values 
messages formulas logic defined mutual induction 
set terms define set messages mt smallest set satisfying conditions 
message formula 

message 
xn message xn messages ary function ft particular follows fxgk bxc gamma xk messages message public shared key xk messages 
set formulas ft smallest set satisfying conditions 

formula primitive proposition 
formulas formulas 

formulas times real numbers 

principal formula believes controls formulas time 
believes controls formulas times 
believes ht controls ht formulas times 

principal message received said says formulas time 
received said says formulas times 
received ht said ht says ht formulas times 

principals shared key public key 
formulas time 

formulas times 
ht ht 
ht formulas times 

principal key formula time 
formula times 
ht formula times 

message principal fresh formula time 
fresh formula times 
fresh ht formula times 

principals ffl real number sync ffl formula time 
sync ffl formula times 
sync ht ffl formula times 

principal time formula atp formula 

formula time 
formula times 

formulas time 

formula time 
formula times 

formulas time 
addition time appears formula replaced yield formula 
similarly replaced ht replaced ht semantics formulas precise definitions section 
axioms axiom system includes inference rules 
formulas time 
modus ponens oe infer 

necessitation infer believes 
means theorem derivable axioms 
symbol metalinguistic symbol appear proofs 
write gamma set gamma formulas possible derive 
take tautologies propositional logic axioms 
addition take axioms instances axiom schemas 
belief 
believes believes oe oe believes 
believes believes believes 
believes believes atp multiple levels belief equivalent single level 
principals mistaken believes oe atp hold 
time synchronization 
time interval axioms believes believes believes ht believes include analogous axioms controls received says said fresh sync 

monotonicity axioms received oe received said oe said oe fresh oe fresh 
atp atp oe atp sync ffl ffl ffl oe sync ffl 
synchronization time conversion axioms atp sync ffl oe ht gamma ffl ffli sync ffl oe sync ht gammaffl ffli ffl sync ffl ffl max ffl ffl ffl sync ffl ffl max ffl ffl ffl oe sync ffl ffl 
atp atp oe atp atp says said received originator identification 
received bxc gamma oe said bxc gamma gamma 
received bxc gamma oe said bxc gamma gamma principals signatures deduce originator messages 
receiving 
received xn oe received 
received fxgk gamma oe received 
received bxc gamma oe received principals decrypt encrypted messages decryption keys principals read signed messages signature verification key 
order verify originator signed message necessary key 
saying 
said xn oe said 
says xn oe says 
said bxc gamma oe said 
says bxc gamma oe says 
said oe says 
says oe said state principals responsible contents signed messages send sign 
wants forward signed message bxc gamma responsible contents send message said bxc gamma 
freshness 
fresh oe fresh assumed function depends argument nonce verification 
fresh said oe says ht jurisdiction 
controls says oe atp symmetry shared keys 
extension beliefs defined logic somewhat restrictive possible extend beliefs time time 
done reasons 
allows possibility beliefs change time 
second supports different policies extension beliefs 
example policies follow 
note axioms explicitly assumed initial assumptions proof 
simplest policy allows arbitrary extension belief essentially treating beliefs stable 
restrictive policies require new construct believes acts believes belief extension policy apply 
assuming defined example policies formulated follows 

stable beliefs believes oe believes 
believe believes atp ffi oe believes atp 
believe revoked believes atp believes atp oe believes atp 
believe revoked believes atp ffi believes atp oe believes atp policies simple useful 
policy results setting beliefs stable belief time extended time 
policy says formulas believed window time length ffi 
policies assumed protocol allows revocation particular formula specified policy 
protocol allows revocation policies may appropriate 
policy says principals believe formulas receive notification revoke belief 
policy says principals believe formulas believed revoked 
possible define complicated policies 
example wish define policy extension beliefs depends formula question 
reasons representing policies inferences assumed proof 
allows flexibility policy tailored individual situation 
addition allows consideration particular protocol respect multiple policies 
ability reason conjunction policies protocols especially important public private key infrastructures deployed new unanticipated policies put 
logic section sketch logic perform syntactic analysis protocols 
done previous logics step protocol 
step messages protocol written language messages defined section 
idealization message labeled time represents time message received 
protocol idealized attempt prove protocol goals participants agreeing keys 
premise set proof consists initial assumptions shared keys participants 
addition message idealization received included premise set time local clock message received 
recommend time principal beliefs initial assumptions principal starts operate 
restriction followed overlook policy assumptions formulas beliefs current time message receipt 
proof consists sequence formulas 
formula premise set axiom derivable formulas earlier sequence modus ponens necessitation 
example techniques section analyze protocol fragment illustrate techniques specifying reasoning cryptographic protocols logic 
show techniques reasoning synchronization recency revocation 
timestamps says logic unambiguous notion time message sent says construct notion atp time formula true clock 
furthermore principals assumed say formulas true drop atp merely says time message sent time sender believes formula true 
timestamp indicates time message sent second timestamp indicates time referenced formula true says atp constructs idealization 
examples follow illustrate notions timestamps important reasoning correctness cryptographic protocols 
consider public key identity certificate principal kq public signature verification key sq certificate serial number tb te times key validity period ts timestamp indicating time certificate information deemed accurate gamma private signature key certifying authority principal shown message 
message bq kq sq tb te ts gamma timestamped certificate message bs says kq qc gamma timestamp ts subscript parameter says goodness key asserted time 
stable beliefs extend time beliefs belief extension policies 
suppose assumption initial belief ks key time 
believes extend statement time assume variant stable belief policy particular principal key 

believes oe believes statement says beliefs goodness signature verification key stable time progresses 
caution reader stable belief assumptions sparingly protocols tolerate security failures breaches private keys 
designs stable assumptions strong may justified example keys embedded hardware 
applying policy statement deduce updated belief 
believes practice protocols may designed recover compromise key loss jurisdiction 
ban logics reason protocols policies belief extension believe revoked believe 
analysis assuming policies performed manner similar analysis protocol fragment illustrated section 
identifying originator originator identification axioms help deduce originator message 
receipt message 

received bs says kq qc gamma apply originator identification axiom updated belief signature key statement received message statement 
believes said bs says kq qc gamma statement illustrates technique qualifying subscript times identifier principal time different principal making statement 
subscript said indicates believes certificate sent local clock 
fresh uses key logic clarifies ambiguity fresh keys fresh messages created keys 
key fresh sent message 
example principal may generate random session key authentication exchange 
keys sent messages 
useful express notion key encrypt sign message 
example consider statement 

believes fresh bs says gamma says believes certificates signed gamma fresh time example gamma time assume appropriate belief extension policy extend belief instantiate particular belief relating certificate received message follows 

believes fresh bs says kq qc gamma deducing time message sent deduce message sent time interval believe message fresh interval 
nonce verification axiom belief axiom statements deduce sent certificate 
believes says ht bs says kq qc gamma remove signature statement axiom saying 

believes says ht says kq deducing beliefs presence jurisdiction suppose initial assumption believe jurisdiction time time stamped certificates believed accurate times 
believes controls says depending design details may appropriate stronger policy assumption believes controls time timestamps sends message 
belief extension policy assumption extend belief instantiate particular certificate interval question 
believes controls says kq apply jurisdiction axiom statements 

believes says kq atp ht remove atp ht says statement append atp statement 
apply reduction axiom stable formulas 
remove atp 

believes says kq statement proves presence principal time ts clock 
simply proving presence principal particular time design goal protocols 
ban logics capable proving presence limited reasoning time presence 
translate ts time clock synchronization assumptions 
similar manner assume general beliefs jurisdiction key certificates 
believes controls instantiate jurisdiction assumptions particular certificate question 

believes controls kq apply jurisdiction axiom statements 

believes kq ats ts deduce believes kq key ts clock 
protocol correctness relies clock synchronization need derive trusted clock synchronization path determine ts clock means clock 
reasoning synchronization logic enables deduce trusted synchronization paths derive synchronization bounds principals initial assumptions messages 
deducing trusted synchronization paths deriving synchronization bounds necessary step protocol correctness depends synchronization 
suppose wish deduce trusted synchronization path derive degree synchronization interpret time ts clock terms clock belief statement 
formulas principals may come believe synchronization formulas extension initial assumptions receipt messages containing synchronization formulas 
purposes illustrating synchronization axiom assume derive beliefs intermediate principal known synchronization bounds 
believes sync ffl ffl max ffl ffl ffl 
believes sync ffl ffl max ffl ffl ffl apply clock synchronization axiom statements 

believes sync ffl ffl ffl ffl deduced synchronization bound converting time converting time principal clock relatively straight forward belief synchronization bounds time question 
apply time conversion axiom statements 

believes kq atp hts gamma ffl ts ffli time goodness verification key terms clock 
reasoning recency practice important principals believe statements 
example noted kerberos requires certain recency constraints authentication 
time clients authenticate principals carried ticket application servers requesting service 
application servers choose reject tickets time authentication meet application server policy recency 
give example reasoning recency 
suppose 
received bxc gamma authentic statement says great value 
reduce chances gamma longer key may require tight constraints recency goodness key deducing says received message statement 
suppose initial assumptions include recency policy pertaining keys values 
believes atp ffi oe believes atp apply particular instance policy statement statement 

believes kq atp provided exists ts gamma ffl ts ffl ts ffl ffi 
updated belief key proceed analyze received message statement kq provided tb te recency policy enforcing replay detection determining recency statements important replay detection mechanisms 
approach practice kerberos network authentication protocol requires synchronization client server sufficiently small server store check replayed messages window 
messages falling outside window timeout server check storage determine message replay 
deduce synchronization path principals originating authenticating message analysis consists deducing message authentication assuming believe policy recency interval ffi chosen reflect length message storage server 
overlook dependency recency intervals sufficiently small synchronization bounds 
protocol analysis logic dependency explicit 
reasoning revocation logic allows reason revocation formulas 
give example reasoning revocation keys techniques apply formulas jurisdiction synchronization 
example assumes certificate revocation list similar standard 
certificate revocation list contains timestamp zero serial numbers unambiguously identifying revoked keys 
simplicity assume revocation message containing serial number 
message bt sqc gamma certificate revocation list follows 
message bs says kq qc gamma kq key uniquely identified serial number sq course particular statements keys revocation list need corresponding key information 
suppose able deduce revocation lists formulas 
believes kq atp tp 
believes kq atp tp suppose goal interpret received message statement subject believe revoked concerning goodness keys 
policy assumption values 
believes atp believes atp oe believes atp unable obtain extended belief 
believes kq atp 
believes kq atp tp prevented extended belief derive originator received message statement example illustrates basic procedure reasoning revocation 
logic specify reason complex revocation lists complex revocation policies 
model computation section sketch model computation 
important feature model description relevant timing events play central role authentication security policies 
model quite general assumptions synchronization principal clocks 
model builds works 
consider setting finite set principals fp png communicate sending messages 
addition special environment principal pe represents relevant aspects external environment 
principal clock represents local time 
pe clock represents global time 
general global time known principals 
times real numbers 
behavior principals described run set possible runs constitute system 
formulas messages basic values defined section 
message set keys define union fmg xn xn fxgk bxc gamma set messages derivable reading keys extend sets messages obvious way 
define basic events may take place principals 
ffl send send message ffl receive receive message ffl generate generate message timestamped event pair basic event time 
history possibly infinite sequence timestamped events 
timestamped event history write sequential history appears earlier sequence associated principal local state contains information access identity current local time keys history events taken place formally local state tuple time set keys sequential history mentioned environment pe captures relevant aspects system captured local states principals including message modification replay loss delay 
environment state contains time te called real time sequential history te message buffer containing set messages sent delivered 
global state system principals tuple form se sn se environment state local state principal run function 
associating global state point real time 
run time denote local state global state 
write denote call point run time principal defined local time time local state 
similarly history defined history local state keyset defined key set local state 
define msgs fm receive history msgs set messages received time run local time may period real time run set ft generally contains single element 
write endp denote minimum maximum element respectively set 
run legal certain monotonicity consistency conditions hold 
legal principal keyset keyset keyset generate history exists sequence km km keyset keyset gamma gamma msgs 
receive history send history endq 
system set legal runs 
typically interested set runs consisting relevant events occurring start protocol followed possible executions protocol 
truth conditions section inductively define truth formulas model 
interpretation function theta ft fg assigning truth values primitive propositions global state 
pair interpreted system 
truth formulas evaluated respect point interpreted system write indicate true point indicate true point clear context write simply 
define truth conditions way basic formulas formulas past true 
order maintain certain kind stability formulas important soundness logic 
particular define statements revoked statements belief control keys true time principal clock principal clock changed time possible construct runs statement true false time 
primitive propositions primitive proposition logical connectives 






relations 
receives derives set received messages current key set 
received keyset msgs 
received received received ht received keyset 
ht says says message principal send history keyset 
says says says ht says said said says 
said said said ht said controls principals lie formulas control contradictory statements formulas control timestamp 
controls says implies atp 
controls controls controls ht controls fresh message fresh said run 
fresh said principals shared keys shared keys provide confidentiality originator identification 
timer received implies said said received fxgk received imply ffl fp qg ffl generate history 
ht public signature verification keys signature checking keys properly identify signatures 
received bxc gamma implies said 
ht public encryption keys public encryption key yield messages read principal key 

received fxgk received imply 
generate hr 



ht believes define possibility relation principal state 
defines equivalence relation global states 
define belief relative equivalence class 
believes atp 
believes believes believes ht believes synchronization principals clocks ffl time units 
synchronization principals places constraints far clocks drift real time 
sync ffl jt gamma ffl endp 
sync ffl sync ffl sync ht ffl sync ffl atp endp 
atp atp atp ht atp soundness logic sound sense derivation allowed logic corresponds truth model 
formula set gamma formulas write gamma gamma 
theorem gamma set formulas formula 
gamma gamma 
proof sketch assume gamma 
show induction gamma 
theorem member gamma trivially gamma 
derived applying inference rules formula 
assume inductive hypothesis gamma 
show gamma obtained modus ponens gamma case case analysis omitted axioms logic show axioms preserve truth sense derive untrue formulas true ones 
specifically axiom oe show 
follows obtained modus ponens gamma gamma 
obtained necessitation gamma believes tp theorem 

particular point 
follows truth conditions believes believes 
gamma believes 
believes follows gamma 
full proof theorem included expanded version 
logic reasoning cryptographic protocols 
logic supports reasoning important properties underlying practical cryptographic protocols synchronization recency revocation 
represent security policies implications specified assumptions analysis protocol 
course reasoning properties synchronization recency revocation security policies advance flow reasoning provided preconditions relating property satisfied 
way analysis yields information protocol specified security policies 
evaluating security objectives respect context particular principals policies determines assumptions correctness proof constraints policies principals 
practice bounds clock synchronization significant impact correctness cryptographic protocols distributed systems 
demonstrate logic exposes assumptions trusted synchronization paths synchronization bounds principals 
establishes requirements evaluating adequacy underlying clock synchronization algorithm 
provides metric comparing protocol designs 
example modifying synchronization assumptions reflect synchronization failures designer assess extent vulnerability due synchronization failure 
exposing synchronization assumptions step engineering security architectures minimize risk due inconsistent knowledge 
synchronization assumptions inherent logic model 
security relevant features protocol specific assumptions synchronization included premise set analysis 
illustrated recency policies gave examples reasoning recency 
shown proving recency properties fundamental proving correctness practical security mechanisms replay detection 
authentication subject recency properties prove continued presence entity 
authentication recency beliefs beliefs goodness keys secure authentication fundamental managing risk due inherent problem obtaining concurrent knowledge distributed systems 
recency policies place constraints recency statements statements goodness keys jurisdiction issuing keys 
effect recency policies constrain window inconsistent knowledge protocol progresses 
revocation referencing negating previously statements belief jurisdiction keys important part practical systems 
logic provides general method expressing revocation policies reasoning revocation 
illustrated revocation policies gave example reasoning revocation keys 
acknowledgments helping refine logic analyze protocols 
abadi burrows lampson plotkin 
calculus access control distributed systems 
acm trans 
program 
lang 
syst 
mart abadi mark tuttle :10.1.1.115.3569
semantics logic authentication 
proc 
th annual acm symposium principles distributed computing pages august 
michael burrows mart abadi roger needham 
logic authentication 
technical report src research report digital equipment february 
revised february 
ccitt 
directory authentication framework 
technical report international telegraph telephone committee february 
fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge massachussetts 

applying formal analysis technique ccitt strong way authentication protocol 
journal cryptology 
li gong roger needham raphael yahalom 
reasoning belief cryptographic protocols 
proc 
th ieee symposium research security privacy pages may 
lampson abadi burrows wobber 
authentication distributed systems theory practice 
acm trans 
comp 

moses bloom 
knowledge timed precedence clocks 
technical report weizmann institute july 
clifford neuman theodore ts 
kerberos authentication service computer networks 
ieee communications 
stuart stubblebine 
secure authentication enforcing revocation distributed systems 
proc 
th ieee symposium security privacy pages may 
paul syverson 
adding time logic authentication 
proc 
st conference computer communication security pages november 
paul syverson paul van oorschot 
unifying cryptographic protocol logics 
proc 
th ieee symposium research security privacy pages may 
