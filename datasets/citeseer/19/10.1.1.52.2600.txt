classifying relationships object oriented design patterns james noble microsoft research institute macquarie university sydney australia kjx mri mq edu au publication design patterns book large number object oriented design patterns identified codified 
part pattern form object oriented design patterns indicate relationships patterns relationships typically described briefly different collections patterns describe different relationships different ways 
describe classify common relationships object oriented design patterns 
practitioners relationships help identity patterns may applicable particular problem pattern writers relationships help integrate new patterns body patterns literature 

design pattern description communicating objects classes customised solve general design problem particular context 
designers incorporate patterns program address general problems structure programs designs similar way algorithms data structures incorporated programs solve particular computational storage problems 
growing body literature catalogues patterns object oriented design including texts design patterns patterns software architecture patterns pattern languages program design series 
design patterns stand pattern related patterns variety ways text pattern describe relationships 
unfortunately pattern text book catalogue describes relationships patterns idiomatic classification relationships 
inconsistency patterns difficult pattern relationships patterns important part pattern definition inconsistent definitions difficult readers understand relationships intended particular description 
classification scheme relationships design patterns 
scheme primary relationships patterns pattern uses pattern pattern refines pattern pattern conflicts pattern 
describes number secondary relationships patterns pattern similar pattern pattern combining pattern shows secondary relationships expressed terms primary relationships 
organised follows 
section briefly reviews object oriented design patterns major constituents pattern form 
section describes structure classification scheme enumerates relationships describe 
section presents primary relationships classification scheme detail section describes secondary relationships patterns expressed terms primary relationships 
section concludes 

object oriented design patterns design pattern abstraction concrete recurring solution solves problem certain context 
design patterns developed architect christopher alexander describe techniques town planning architectural designs building construction techniques described alexander pattern language ffl towns building construction 
design patterns applied software kent beck ward ham describe user interface design techniques design patterns catalogue described general purpose patterns object oriented design 
design pattern publication large number patterns identified published 
different types patterns identified including composite patterns pattern tilings 
design pattern written pattern form family literary styles designed patterns easy apply 
design pattern name facilitate communication programs terms patterns description problems pattern applicable analysis forces addressed pattern important considerations consequences pattern sample implementation pattern solution known uses pattern 
importantly perspective pattern lists patterns way related 
problem addressed different collections patterns describe different relationships patterns different ways 
example relationships object oriented design patterns analysed walter zimmer studied relationships patterns design patterns 
zimmer relationships pattern pattern variant pattern pattern pattern similar pattern :10.1.1.37.8779
design patterns smalltalk companion includes relationships introduces fourth relationship pattern specialisation pattern 
patterns software architecture describes kinds relationships patterns including zimmer relationship introducing pattern variant pattern patterns combination solve problem 
patterns pattern writing identify relationships patterns pattern generalise specialise provide alternative pattern 
patterns collections patterns describe relationships patterns discussed compositional reflexive relationships patterns 
engaged long term project called objects aims organise patterns object oriented design :10.1.1.50.7565
part project analysed existing patterns determine relationships patterns 
identified new patterns related patterns existing patterns literature 
classification scheme relationships patterns developed support wider goal organising patterns objects project identifying important relationships patterns 

classifying relationships patterns illustrates structure classification scheme relationships patterns 
classification scheme primary relationships patterns pattern uses pattern specific pattern refines general pattern pattern conflicts pattern propose solutions similar problem 
relationships described section 
scheme describes number secondary relationships patterns pattern variant pattern patterns similar patterns combining solve problem 
section presents secondary relationships describes expressed terms primary relationships 

primary relationships classification scheme primary relationships patterns uses refines conflicts 
section outline relationships examples known patterns exhibit relationships provide simple graphical notation illustrate relationships groups patterns 

uses pattern form records patterns pattern uses patterns help pattern 
typically pattern larger global impact design patterns smaller local impacts 
uses relationship explicit relationship patterns alexander original architectural patterns 
alexander patterns organised pattern language relationship patterns organised pattern followed smaller scale patterns uses considered large scale pattern chosen 
example small public squares pattern uses pedestrian density activity pockets roughly primary relationships uses pattern uses pattern refines specific pattern refines general pattern conflicts pattern addresses problem pattern secondary relationships smaller pattern larger pattern refined general pattern refined specific pattern variant variant pattern refines known pattern variant uses variant pattern uses pattern similar pattern similar pattern combines patterns combine solve single problem requires pattern requires solution pattern tiling pattern uses sequence sequence patterns simple complex elaboration :10.1.1.37.8779
structure classification scheme middle patterns 
small public squares pattern larger scale pattern describes design entire square patterns smaller describe pedestrian traffic square edges square centre square respectively 
software pattern forms explicitly record relationship mixed typically section titled related patterns see 
example observer pattern maintains consistency multiple views objects uses mediator pattern coordinate updates multiple objects 
turn mediator pattern uses singleton pattern ensure mediators duplicated unnecessarily 
important relationship zimmer analysis relationships design patterns explicitly represented published collection design patterns :10.1.1.37.8779
uses relationship simplify descriptions complex patterns composition 
riehle defined composite design pattern design pattern best described composition patterns 
example riehle describes model view controller pattern seen composite observer strategy composite patterns observer pattern connects view model strategy pattern arranges controller object handle input behalf view composite pattern provides hierarchy views 
similarly dyson anderson written collection small patterns describe detail apply state pattern 
important point composite pattern uses smaller scale patterns composed 
description composite pattern describe patterns combined composite pattern example role diagrams 
zimmer shows structure uses relationships illustrated graphically :10.1.1.37.8779
model view controller strategy composite observer 
uses relationship model view controller pattern 
refines second primary relationship classification scheme pattern refines pattern pattern specialisation general simple pattern 
specific pattern refines pattern specific pattern full description direct extension general pattern 
specific pattern deal specialisation problem general pattern addresses similar specialised solution structure address forces general pattern may address additional forces 
analogy object oriented programming uses relationship similar composition refines relationship similar inheritance 
example pattern language sequence sitting spaces pattern refines intimacy gradient pattern identified explicitly text 
intimacy gradient pattern describes house designed public rooms closest main entrance private rooms furthest door sequence sitting spaces pattern describes chairs window seats designed form intimacy gradient 
refinement relationship software patterns 
example design patterns factory method pattern refines hook method pattern 
hook methods allow subclasses override parts behaviour template methods defined superclasses 
force addressed hook method pattern desirability naming conventions clear programmers particular method hook method 
factory method refines template method factory methods effectively hook methods subclasses specify class object template method superclass create 
description factory method pattern main forces addressed pattern naming conventions illustrate particular method fact factory method 
refines relationship identify new patterns generalisation existing patterns structure common seen refinements pattern factors commonalities 
example iterator pattern type safe session pattern accumulator pattern pen objects graphic systems refine curried object pattern 
illustrates refinement relationship curried object pattern 
iterator accumulator pen typesafe session object curried 
refines relationship curried object pattern curried object pattern describes client object provide simplified interface server object local state store information client server object adding information messages receives forwarding server 
conceptually iterator provides interface collection managing current position collection iterator current position passed collection arguments message 
similarly pen maintains current position graphic medium represents position graphics pen accumulator maintains current arguments initialise server object 
design patterns smalltalk companion introduces number patterns sharing oo recursion describes patterns refinements patterns 
example refines sharing chain responsibility refines oo recursion 

conflicts third fundamental relationship patterns classification scheme conflict patterns provide mutually exclusive solutions similar problems 
pattern forms provide explicit section record relationship expressed related pattern section uses relationship 
example kent beck smalltalk best practice patterns includes excellent example conflicting patterns address problem smalltalk programmer access object instance variables 
direct variable access pattern presents solution instances variables accessed directly easy read compiles efficiently 
contrast indirect variable access pattern presents diametrically opposed solution instances variables accessed indirectly accessor methods easy change representation variable affecting code uses 
illustrates relationship notation dyson anderson 
indirect variable access direct variable access 
conflicts relationship variable patterns considering patterns design patterns decorator pattern conflicts strategy pattern patterns modify behaviour objects example patterns add graphical borders icons window objects different window system frameworks 
prototype factory method patterns conflict provide alternative solutions problem subclasses redefining classes objects created superclasses 
reading applying pattern language relationship exploited ways looking patterns pattern may applicable conflicting patterns examined alternative choices pattern chosen conflicting patterns ignored 
interesting note alexander pattern language relationship explicitly alexander claims pattern pattern 
practice alexander pattern language includes number conflicting patterns example house small family house couple house person patterns describe mutually exclusive kinds houses 

secondary relationships describing relationships patterns pattern writers number relationships patterns 
classify relationships secondary relationships able express terms primary relationships 
section secondary relationships classified 
relationships refined simply inverses primary relationships relationships variant combines complex 

relationship inverse uses relationship analysed way relationship 
example mediator uses singleton singleton mediator 
similarly iterator interpreter visitor 
pattern forms including alexander explicitly include section record relationship give context general patterns particular pattern instantiated 
pattern forms occasionally record relationship related patterns sections omit 

refined refined generalises relationship inverse refines relationship analysed way relationship 
example factory method refines template method template method refined factory method 
existing pattern forms record refined relationship occasionally 

variants pattern recurring solution design problem 
problem different pattern instantiated differently time appears 
practice kinds problems solutions occur regularly ways instantiating patterns common practice 
common patterns instantiation called pattern variants pattern forms particular patterns software architecture explicitly identify pattern variants separate patterns parts main patterns 
decompose variant relationship treating variant separate pattern 
variations sufficiently important identified explicitly variants language variants particular name substantially different main pattern extend main pattern structure different tradeoffs forces worth documenting variant patterns right 
decomposition clear variant relationship distinct ways patterns literature 
pattern variants solution variants provide alternative solutions problem described 
pattern variants problem variants describe single pattern provide solution number different problems 
analyse relationships problem solution variants differently follows 
solution variants pattern variants describe variant solutions common problem 
example adaptor pattern main variant solutions class adaptor object adaptor 
adaptor pattern converts interface adaptee class existing incompatible target interface clients expect 
adaptor lets classes couldn incompatible interfaces design adaptor object adaptor pluggable adaptor way adaptor class adaptor 
adaptor pattern variants patterns 
way adaptee class server client objects access target interface requiring modification client objects 
variants adaptor problem provide solutions problem class adaptor extends adaptee class implements interface target interface typically multiple inheritance object adaptor introduces new object implements target interface delegating adaptee 
class object adaptors trade forces different ways example class adaptor change interface concrete adaptee class object adaptor adapt adaptee class subclasses 
design patterns book adaptor variants described text adaptor pattern individual structure diagrams consequences implementation issues sample code 
design patterns book describes variants adaptor pattern detail class adaptor object adaptor 
pluggable adaptor builds interface adaption target object configured support range adaptee interfaces way adaptor class adaptor adapts adaptee interfaces interfaces simultaneously play roles target adaptee interfaces class adaptor pattern 
decompose relationship solution variant patterns refines conflicts relationships 
treat solution variant separate pattern refines main pattern conflicts variants 
solution variant pattern refines main pattern solution variants provide specialised solutions problem addressed main pattern conflicts variants solution variants usually mutually exclusive 
illustrates relationships pattern language fragment containing adaptor pattern variants 
main adaptor pattern introduces common problem adapting interface object 
solution variants refinements main adaptor pattern linked refines relationship class adaptor specific solution general problem interface adaption object adaptor pluggable adaptor specific version object adaptor 
class object adaptor conflicting patterns mutually exclusive solutions adaption problem 
way adaptor uses main adaptor pattern discussed section 
problem variants pattern variants describe variant solutions common problem pattern variants describe variant problems share common solution 
example proxy pattern described design patterns patterns software architecture description introduces number variants design patterns plus patterns software architecture 
proxy pattern provide surrogate placeholder object subject control access design patterns 
proxy object provides interface original subject object intercepts messages directed subject 
proxy object place subject client designed access subject client aware subject replaced proxy 
proxy intercepts message directed subject proxy handle override message 
main proxy pattern describes messages intercepted describes solution describe single problem solution resolves 
variants proxy pattern describe different problem proxy provides solution 
example virtual proxy creates expensive objects demand created necessary remote proxy local representative object remote machine local clients ac remote proxy protection proxy cache proxy synch proxy counting proxy virtual proxy firewall proxy member access proxy proxy delegating proxy interprocess proxy proxy proxy 
proxy pattern variants cess object knowing details interprocess communication protection proxy provides level security checking access rights client sending messages proxy 
patterns software architecture explicit proxy pattern introducing placeholder serve purposes including enhanced efficiency easier access protection unauthorised access 
adaptor pattern decompose proxy pattern number related patterns forming pattern language fragment 
main proxy pattern introduces common solution providing placeholder object 
problem variant captured separate pattern uses main proxy pattern 
main pattern uses refines variants main pattern common solution employed variant specialisation variant 
need record conflicts relationship different problem variants variants address different problems 
fact proxy number solution variants relationships various proxy pattern variants complex 
shows structure proxy fragment 
solution variant refines main proxy pattern conflicts mutually exclusive variants 

variant uses zimmer distinguishes forms uses relationship uses solution instantiations pattern pattern variant uses solution instantiations pattern pattern :10.1.1.37.8779
example instantiation visitor pattern pattern may may iterator pattern zimmer terms variant visitor iterator 
similarly variant composite may visitor iterator :10.1.1.37.8779
pattern classification scheme distinction primary uses relationship 
reasons handle variant uses way 
reason philosophical patterns ultimately guidelines rules thumb meant tailored suit specific problem context part pattern may omitted varied pattern instantiated 
second reason identify important pattern variants explicitly treating class patterns described section relationship classified full uses relationship variant pattern variant uses relationship main pattern assuming variation significant 
third reason pragmatic interested classifying relationships patterns help organise patterns uses relationship considered mandatory optional 
treating relationships common organising patterns pattern language system preclude text individual patterns making finer distinctions 

similarity zimmer introduces similarity relationship patterns similar :10.1.1.37.8779
relationship derived comments related patterns section design patterns catch category relationships patterns captured relationships 
relationship describe patterns similar address problem patterns zimmer classify similar classify conflicting factory prototype builder 
similarity relationship broader just conflicts describe patterns similar solution technique strategy state occasionally strategy 
express kind relationships specific arrangements primary relationships ap 
example patterns similar solution techniques treated solution variants refining pattern see patterns related primary uses relationship 

combines patterns software architecture paul dyson patterns design introduce combines relationship patterns patterns combine solve single problem addressed directly pattern 
example patterns software architecture proxy forwarder receiver patterns combined implement transparent peer peer communication service patterns design domain abstraction classes framework implementation classes patterns combined implement software framework mechanistic behaviour significant roles patterns combined implement design 
simple cases model relationship directly uses primary relationship pattern larger scale pattern addresses problem pattern smaller scale pattern provides solution subproblem 
example proxy forwarder receiver pattern combination forwarder receiver pattern describes implement communications substrate proxy pattern 
classify patterns proxy pattern uses pattern 
complex cases examples consider relationship really points lack patterns patterns combine provide solution problem actual problem way patterns combine solve represented combines relationship captured explicitly pattern 
cases ensure problem identified explicitly locating existing pattern introducing new pattern addresses problem directly outlines solution uses patterns combine solve 
example domain abstraction classes framework implementation classes patterns combine implement software framework 
patterns design include software framework pattern uses patterns combines relationship expressed uses relationship 
mechanistic behaviour significant roles patterns combine implement design dyson include design pattern 
model relationship introduce design explicit pattern uses mechanistic behaviour significant roles patterns 
underlying intuition patterns number patterns provide solution problem address 
patterns considered combine pattern larger scale pattern uses solve problem larger scale pattern addresses 

requires patterns design introduces requires relationship patterns pattern requires second pattern second pattern prerequisite solving problem addressed pattern 
example software framework significant roles mechanistic behaviour patterns require defined domain pattern defined domain pattern applied patterns applied successfully 
general consider relationship modelled quite adequately uses primary relationship 
distinction requires uses primarily order patterns applied pattern requires second pattern second pattern applied pattern produce solution 
case general uses relationship pattern uses second pattern second pattern applied solution described pattern complete 
reason model requires relationship primary uses relationship 

tiling patterns applied repeatedly solve single problem 
lorenz identified particular examples pattern tilings example interpreter visitor patterns instantiated repeatedly implement reflexive system 
patterns tiled example iterator iterate iterators way adaptor pattern variant described section seen tiling adaptor pattern class adaptor pattern applied twice direction 
express pattern tiling introducing additional variants patterns applied 
way composite cascade dimensional composite lambda composite composite 
composite pattern tiling variants typical solution variants reflexive variant refines main pattern reflexive variant uses main pattern 
approach pattern tiled simply uses pattern tiling need treated fundamental reflexive relationship pattern language 
introducing explicit tiling variant patterns clear complex patterns tiled number different ways 
example shows composite pattern tiled different ways 
briefly way composite describes graph structure pointers directions dataflow programming cascade tree composites layer tree contains different types objects dimensional composite composite component node acts root node second composite tree heavyweight widgets containing tree lightweight gadgets lambda composite involves superimposed composites composite provides view second composite trestle window system 
variants refines uses main composite pattern 

sequences elaboration recognise sequence elaboration sequence patterns begins small simple low level patterns negative consequences proceeds number patterns increasing complexity large scale architectural patterns large negative consequences complexity performance system 
standalone collection patterns fragment pattern language form sequence elaboration 
example reflection pattern collection contains sequence patterns small local property list pattern affects single object pattern larger scale configured object registry 
object system pattern completes sequence describing reflection define architecture entire system 
chapters fowler analysis patterns structured sequences elaboration 
sequences elaboration quite adequately described primary relationships patterns sequence typically smaller patterns sequence refined larger patterns larger patterns smaller patterns sequence 
relationships imply opposite orderings patterns sequences see 
property list object system configured object registry 
sequence elaboration uses relationship typically ordered composite pattern pattern uses sequences elaboration larger patterns smaller patterns 
contrast refinement relationship typically ordered general patterns specialised patterns sequences elaboration implies general applicable small scale patterns 
experience sequences elaboration literature consider sequences elaboration treat refines relationship important uses relationship sequences elaboration simple patterns proceeding complex patterns 

described relationships object oriented design patterns classified 
classification scheme primary relationships patterns large scale pattern uses small scale pattern specialised refines general pattern pattern conflicts patterns provide different solutions problem 
variety secondary relationships patterns variant uses similarity combination generalisation expressed terms primary relationships requiring patterns decomposed variants extra higher level patterns 
classification scheme analyse existing patterns organise analysis improve new patterns written 
existing patterns inspected interrelationships described classification scheme provides numerous examples analysis 
second patterns catalogued classified relationships patterns example currently working classifying patterns design patterns pattern language patterns relationships 
relationship new pattern patterns described terms classification scheme easier readers new pattern understand pattern relationships new existing patterns 
geoffrey suggested idea kindly commented drafts 
alexander 
pattern language 
oxford university press 
alpert brown woolf 
design patterns smalltalk companion 
addison wesley 
beck 
smalltalk best practice patterns 
prenticehall 
beck cunningham 
pattern languages object oriented programs 
technical report tektronix 
oopsla workshop specification design object oriented programming 
buschmann meunier rohnert stal 
pattern oriented software architecture 
john wiley sons 
coplien schmidt editors 
pattern languages program design 
addison wesley 
dyson 
patterns design 
phd thesis university essex 
dyson anderson 
state objects 
martin 
ferguson brennan 
motif manual 
reilly associates 
foster zhao 
cascade 
plop proceedings 
fowler 
analysis patterns 
addison wesley 
gamma helm johnson vlissides 
design patterns 
addison wesley 
goldberg robson 
smalltalk language implementation 
addison wesley 
lorenz 
tiling design patterns case study 
ecoop proceedings 
manasse nelson 
trestle manual 
technical report dec systems research center 

manolescu 
data flow pattern 
plop proceedings 
martin riehle buschmann editors 
pattern languages program design volume 
addison wesley 

pattern language pattern writing 
martin 
noble 
objects 
europlop proceedings 
noble 
arguments results 
plop proceedings 
noble 
basic relationship patterns 
europlop proceedings 
noble 
object system pattern 
europlop proceedings 
noble 
organising patterns languages pattern language object oriented design 
submitted publication 

type safe session 
europlop proceedings 
riehle 
composite design patterns 
ecoop proceedings 

reflection 
europlop proceedings 
tichy 
catalogue general purpose software design patterns 
tools usa 
vlissides coplien editors 
pattern languages program design volume 
addison wesley 
yeates 
design garbage collector design patterns 
tools pacific 

creating host compliance portable framework study existing design patterns 
oopsla proceedings 
zimmer :10.1.1.37.8779
relationships design patterns 
pattern languages program design 
addisonwesley 
