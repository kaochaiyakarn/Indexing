graph generating radio link frequency assignment problems heuristically henk van benthem may graduation committee prof dr dr ir 
roos dr terlaky dr drs 
jansen department statistics probability operations research faculty technical mathematics informatics delft university technology communication channel trust won clog elapse interfere called love love demands answer love fails 
ii iii radio link frequency assignment problem rlfap np complete combinatorial optimization problem defined follows find optimal assignment frequencies transmitting radio links various constraints maximal satisfied minimal amount electromagnetic spectrum wasted 
constraints include different priorities users technical necessities conditions place acceptable upper bounds unwanted interference 
defense france great britain netherlands came project join forces different european mathematical institutes applying various new mathematical techniques solve rlfap 
operations research department twi tu delft joint project started investigating assignment problems 
rlfap test case generator graph generating radio link frequency assignment problems heuristically computer program seeks obviate problems generating test problems patterned eleven realistic test problems giving priori lower upper bounds possible optimal solutions generated test problems 
purpose graph helpful tool developing testing possibly comparing methods look optimal solution rlfap 
bounds solution important feature evaluating quality effectiveness different mathematical approaches vary exact combined algorithms 
iv direct motive graph investigation rlfap project operations research department tu delft started 
want take opportunity supervisor dr alex supported inspired investigation graph problems reporting project working generator proposed 
am grateful dr ir 
roos gave opportunity operate project meet interesting mathematicians world workshop guests department 
project members dr terlaky drs 
benjamin jansen support suggestions improved report 
wish acknowledge prof dr people department friendly advice practical support warnings suggestions computer software 
fellow students discussions companionship 
huge goes joost solving forced keep generators problems 
friends family want express gratitude love confidence care carried physically mentally hard periods 
friendship support mentioned remember great years enjoyed study delft 
vi contents frequency assignment problem project problem generator organization notations terminology definitions modeling rlfap graph problem graph formulation rlfap formulation complexity problem rlfap modeled generalized gcp objectives problem description description celar problems frequencies vertices constraints optimization criteria similarity celar problems graph generates problem options graph assignment coloring maximal clique problem output files making edges special structure initial edges making cliques assigning solution frequencies rlfap known optimal number frequencies construct span problem algorithm vii viii contents constructing problems strict lower bounds 
constructing problems admissible assignments construction span problems construction problems admissible assignments adding removing edges randomly calculating constraints pseudo code generate problem solution equality assignment ctr file tests experiences computational results ipm approach graph test problems results infeasible graph test problems released test problems discussion bibliography file readme tud containing released test problems graph users manual working graph pascal code generating part graph domain cst file var file solution file problems equality constraints problems equality constraints calculate constraints draw maximum clique size randomly generate problem initialize problem program list tables survey celar frequency domains 
survey problems celar set graph options 
options user graph 
survey special doubled domain 
preprocessing results graph test problems solutions preprocessing results celar computational results celar infeasible graph problems computational results infeasible graph problems tu eindhoven computational results graph test problems tu eindhoven computational results celar problems ix list tables chapter telecommunication backbone economy society needs larger technical means possibilities 
problem deal shortage electromagnetic spectrum number transmitted messages increase day 
limited spectrum heavily occupied increasing amount users different priorities mobile radio telephone systems communication ground satellite navigation systems etcetera 
transmitters assigned closely related frequencies potential interfere 
interference larger transmitters located closer transmit direction 
interference rises certain level communication impossible 
giving higher priorities constraints frequencies important users transmitters users able communicate 
decades ago minimizing interference simply done assigning different transmitters different noninterfering frequencies come close possible constraints 
usable spectrum slowly grew improvement technical possibilities advanced equipment growth stays far exponentially growing demand placed spectrum 
growing complexity finding feasible assignments users spectrum managers consider different approaches 
problem find optimal assignment frequencies transmitting radio links various constraints maximal satisfied minimal amount electromagnetic spectrum wasted 
constraints include different priorities users technical necessities conditions place acceptable upper bounds unwanted interference 
chapter 
frequency assignment problem mathematical difficulty frequency assignment belongs class npcomplete combinatorial optimization problems see chapter 
np complete problems generally supposed require algorithms larger consuming exponential growing amount time exact solution 
means computation force equipment considered possibility find exact solution acceptable duration depends size frequency assignment problem 
past decades results investigators frequency assignment problem far satisfactory size problems keeps increasing 
hand computers powerful different approaches investigated 
methods may reduce size problem preprocess feasible point give approximation time efficient algorithm 
approaches guarantee optimal solutions lucky coincidence optimal assignment usually recognized 
time efficient algorithms combined procedure generates lower bound number frequencies needed solution quality solution verified 
case insufficient quality resulting assignment percent rare step method possibly result warm start feasible starting point 
project allied radio frequency agency nato involved developing applying frequency assignment techniques long time 
analysing results obtained applying frequency assignment rules techniques concludes main problem communication field lies distribution frequency resources spectrum shortcomings method assigning frequencies 
experiences prompted questions possible improve current frequency assigning methods ffl improvement measured 
ffl assignment 
ffl current assignment techniques better random selection 

problem generator past decade investigation nature frequency assignment problem possible application new mathematical techniques lead fuller understanding problem techniques discovered new algorithms developed 
improvements computation force increasing memory computers possible consider new approaches interior point methods 
background defense france great britain netherlands came radio link frequency assignment problem project framework 
stands combinatorial algorithms military applications tries join forces different european mathematical institutes 
universities europe awarded project started looking effective way optimize radio link frequency assignment problem rlfap 
groups mathematicians different countries working different approaches appointments results algorithms certain periods investigation 
problem generator method flexibility certain applications different methods algorithms developed tested combined various qualities compared 
order come better insight problem clearer view action effectivity algorithms various different testing problems preferably different sizes types practical 
availability test problems formulated desired structure limited problems proprietary 
brings generator random problems 
problem generator random problems sizes available moment 
random problems brings disadvantages 
instance resemblance random problems realistic problems unknown uncertain 
generators unknown solution looks exists solution 
rlfap test generator graph generating radio link frequency assignment problems heuristically seeks obviate problems generating test problems patterned realistic celar test set giving priori lower upper bounds required optimal solutions generated test problems 
name celar comes french instance centre de placed eleven problems stem real instances disposal participants project 
eleven celar problems give idea basic actual problems solved 
chapter 
purpose generator graph helpful tool developing testing comparing methods look optimal solution radio link frequency assignment problem rlfap 
graph designed generate ffl problems sizes links ffl rlfap optional similarity problems celar set ffl certain bounds optimal solutions problems 
problems files similar files celar problems discussed chapter 
graph generates extra files problem order get grip problem 
extra file contains just frequencies may necessary optimal assignment 
extra file presents solution bounds generated rlfap 
feature important evaluating effectiveness different methods give quality guarantee algorithm 
furthermore solution file contains settings reproduce random rlfap 
organization organized follows 
chapter describes formulation rlfap problem modeled generalized graph coloring problem gcp properties graphs 
graph model formulated properties form basis generation test problems 
chapter presents structure celar problems outline possibilities necessities generator 
chapter shows graph randomly generates interference graph problem referred graph rlfap structure possibly optimal solution 
chapter quality graph randomly generated graphs solutions discussed concluded recommendations chapter 
appendices provide reader respectively description released test problems outline users manual source code 

notations terminology definitions notations terminology definitions shall view rlfap terms graph theoretic representation described chapter 
shall notations terminology definitions stated equality sign adjacency matrix entries uv set vertices graph set vertices clique union sets called domains available frequencies dd set pairs pair fixed frequency distance full frequency band width max jf gamma set assigned frequencies kfk cardinality number frequencies band width max fu fv jf gamma kfk number assigned frequencies band width set frequencies assigned number domain restricted highest frequency max lowest frequency min frequency assigned vertex pre assigned frequency vertex mobility rating cost changing pre assigned frequency set pre assigned frequencies frequency distance label uv frequency distance vertex vertex ic uv inequality constraint vertices uv priority rating cost violating inequality constraint ic uv ec uv equality constraint vertex set equality constraints ec uv set inequality constraints ic uv coefficient matrix inequality constraints ic uv set edges uv vertices ec set edges uv vertices clique gamma set edges adjacent vertex fu ffi degree edges incident gamma undirected graph vertex set edge set clique subgraph vertices connected clique vertices kck cardinality clique size mc maximal clique maximum clique size clique number random function initialized random seed ig ae chapter 
chapter modeling rlfap graph problem rlfap generated graph considered graphs vertices edges graph different meaning communication network represents 
order connect common notations terminology mathematical graph theory literature radio link frequency terms translated graph theoretical terms 
modeled generalized gcp properties rlfap formulated useful generating similar problems 
communication network considered radio link connection transceivers wish communicate communication channel 
channel consists limited transmitting frequencies available frequency band 
want transmit direction order talk moment different frequencies needed 
frequencies separated frequency band fixed distance rlfap possibly represented equality constraint 
communication network wish communicate time possible disturb pair frequency 
extent disturbance interference depends geographical distance pair number pair number directions transmitting takes place geographical distance chapter 
modeling rlfap graph problem communicating transmitters 
different pairs don frequency may interfere order interference distance frequencies frequency band exceed minimal frequency distance model represented inequality constraint 
graph formulation studying mutual interference pair communication circuits brings mathematical study objects related pairs defined graph theory 
large field example book papadimitriou steiglitz 
undirected graph represents rlfap consists number vertices fv number edges theta connect vertices 
size set denoted jv vertex represents radio link frequency assigned 
vertex connected vertex may cause interference frequency close frequency band edges uv denoting interference possibilities vertex vertex contain distance uv way edges constraints problem uv denotes fixed distance equality constraint minimal distance inequality constraint 
rlfap formulation rlfap formulated follows set radio links abbreviated links link transmitter receiver pair domains formed set available frequencies channels list constraints concerning required frequency distance assign link available frequency optimizing chosen objective function 
objective 
minimizing kfk number frequencies assignment 
minimizing span difference highest lowest frequency 
minimizing violation constraints feasible assignment possible 
frequencies assigned pairs transmission links say fl kg may distance requirements satisfied reduce interference 
distance requirement constraint assigned frequencies jf gamma lk 
rlfap formulation ec equality constraint connections fixed distance 
frequency stepsize nr 
nr 
frequency index ec frequency channels frequency set connected equality constraints distance 
jf gamma lk lk 
celar test set physical model requires constraints form form jf gamma odd links klk gamma 
addition structure frequencies fact establishes pairing links forms important rlfap property solving problem included generating algorithm property paired ordering available frequency channels domains assures frequency assigned odd link frequency assigned uniquely determined 
special structure illustrated generating rlfap graph described chapter 
view rlfap graph problem 
set vertices graph correspond set transmission links 
pair vertices connected edge uv constraint frequencies assigned vertices 
refer graph interference graph 
chapter 
modeling rlfap graph problem complexity problem frequency assignment problem fap closely related extensively investigated graph coloring problem probably remarked metzger 
modeling fap results gcp np complete non deterministic polynomial combinatorial optimization problem deal exponentially growing computation time determining optimal solution 
ffl np completeness gcp proved karp 
modeling rlfap generalized gcp formulation section show assignment problem belongs class np complete problems graph coloring problem formulation undirected graph set vertices set edges find coloring graph adjacent vertices different colors total number colors minimal 
transform basic rlfap gcp set radio links set pairs radio links minimum frequency distance required 
coloring vertices implies assigning frequencies radio links adjacent radio links get different frequencies total number frequencies minimal 
ffl basic frequency assignment problem fap equal gcp edges uv constrain vertices frequency distance uv 
called channel constraint channel frequency assume channels available frequency set frequency gap 
fap adjacent channel constraints uv holds adjacent channel available set 
call generalization gcp 
algorithms fap constraints value called adjacent channel problems discussed developed ptt research 
graph coloring admissible coloring defined coloring connected pair different colors 
rlfap generalized gcp state definition admissible assignment interference graph assignment connected pair prescribed frequency distance requirement holds 
come second property known weak boundary result holds undirected graphs provides basis graph generates problems 
rlfap modeled generalized gcp known lower bounds property admissible assignment vertices clique different frequency size maximum clique graph lower bound minimum number frequencies kfk assigned addition property undirected graphs mention exist quite useful heuristics finding maximum clique graph belongs class np complete problems 
rlfap modeled generalized gcp different technical applications introduce possibilities necessities modeling assignment problem see rlfap 
rlfap dealing complicated version fap introducing pre assigned frequencies different mobility rating section inequality constraints distances varying equality constraints fixed distances frequency gap channels domain usually see 
different domains may serve vertices equality constraints ec uv called hard constraints violated may increase chance infeasibility decrease hardness problem see section suppose restrictions equality constraints problem optimized trying possible frequencies vertex rest assignment follows equality constraints 
due higher demands growing size problem admissible assignments may hard find may exist case problems mentioned section minimize kfk minimize span infeasible 
formulate third objective mentioned section minimize violation constraints pre assigned frequencies 
case inequality constraints ic uv may violated specific cost rated priorities uv section called soft 
chapter 
modeling rlfap graph problem objectives model objectives mentioned hard soft constraints minimize kfk minimize span minimize violation constraints 

want minimize number frequencies kfk mathematical formulation min kfk min ff gk jf gamma ec uv uv jf gamma ic uv uv 
want decrease band width assignment minimal span problem modeled min aed max fu fv jf gamma subject hard constraints soft constraints 

want minimize violation constraints pre assigned frequencies problem solved modeled follows min gamma jp uv delta jf gamma ic uv jm delta jf gamma subject hard constraints delta condition condition true 
way objective seeks meet soft constraints possible 
chapter problem description eleven rlfap available data files named celar 
eleven celar problems give idea basic actual problems solved 
stand model problems graph generates 
structure celar problems outline possibilities necessities generator 
description celar problems celar file consists eleven scenes containing files describe problem 
table provides survey global contents eleven scenes completed comparable data graph problems 
files scene directory 
dom txt file contains sets available frequencies 

var txt file contains information vertices links 

ctr txt file contains constraints concerning required frequency distance 

cst txt file contains optimization criteria 
frequencies file dom txt set available frequencies line 
set denoted zero domain domain labeled zero 
second number indicating different frequencies range follow line descending order 
lines dom txt define chapter 
problem description domain frequencies table survey celar frequency domains 
frequency domains containing parts complete set frequencies line domain union domains 
domains denoted domain number indicates domain second points number frequencies domain followed actual frequencies descending order 
problems dom txt file equivalent domains different stated file var txt vertices file var txt presents vertices column vertex index number domain assign frequency vertex 
enumeration vertices cases straightforward number vertices example scene vertex indicated 
description celar problems index 
length number lines file equals number vertices indicates size problem 
eleven scenes contain problems different sizes vertices 
scenes var txt contains preset frequencies vertices 
case vertex number domain index followed frequency set vertex mobility frequency 
mobility vertex value indicates extent initially assigned frequency preserved 
possible levels mobility ffl means frequency assigned may changed 
ffl means frequency assigned may changed 
changing pre assigned frequency causes increase cost function respectively 
ffl means frequency assigned vertex 
constraints file ctr txt provides user list constraints required frequency distance pair vertices 
equality constraints fixed distance connecting odd numbered vertices ones 
twelve times larger amount inequality constraints connecting vertices randomly divergent minimal distances 
scenes give priority constraint 
level priority indicates consequences violating constraint 
possible levels priority constraint ffl means constraint satisfied 
ffl means violating constraint causes increase cost function respectively 
optimization criteria problems various optimization criteria file cst txt possible objective functions discussed chapter minimize order minimize span minimize violation constraints mobility pre assigned frequencies feasible solution obtained 
problems objective instance scene try minimize span possible minimize number assigned frequencies 
cases imagine feasible assignment span frequencies chapter 
problem description larger span available domain violate constraints change pre assigned frequencies minimizing violation function 
table shows outline eleven celar problems corresponding generator options provides quick view possible problems graph generate 
objective problems minimizing kfk fifth looks minimal span objectives obtained number 
problems violation constraints pre assignment minimized 
scene eleven proved admissible solutions objective changed minimizing kfk 
values table concern different penalty values minimizing constraint mobility violations function written kp km kp number violated constraints priority km number vertices mobility initially assigned frequency changed 
cst txt file celar problems contain optimization criteria 
user generator free specify similar criteria 
number vertices referred eq refers number equality constraints 
number inequality constraints times large number vertices large problems celar case 
similarity celar problems generate problems similarity celar set consider structure graph representing problem 
look pattern formed edges connecting vertices notice different cliques irregular linked miscellaneous constraints 
clique edges missing clique complete 
sign regular grid uniformity sets gamma vertices average degree ffi number edges incident approximately problem sizes kv ffi kv structure properties described chapter form basis graph generate rlfap problems described chapter 

similarity celar problems problem scene nr 
vertices links vertex labels frequencies frequency range equality constrains inequality constraints constraint range constraints priority vertices mobility objective minimize freq 
freq 
freq 
span fr 
span viol 
value value value value value value value value problem scene nr 
graph vertices links vertex labels frequencies frequency range equality constraints inequality constraints constraint range constraints priority eq vertices mobility random objective minimize viol 
viol 
viol 
viol 
viol user spec 
value user spec 
value user spec 
value user spec 
value user spec 
value user spec 
value user spec 
value user spec 
value user spec 
table survey problems celar set graph options 
chapter 
problem description chapter graph generates problem mentioned graph designed give test problems patterned celar set priori lower upper bounds known 
problem generate non trivial test instances satisfy priori lower upper bounds instance user may specify 
basic idea start random solution fit problem instance solution 
solution consists number frequencies randomly chosen available domain 
frequencies assigned vertices ultimate graph 
building problem way solution written file sol gen available instantly 
order develop ultimate graph frequency domains chosen objective defines rlfap distinguish stages algorithm 
stages described detail subsections follow 
section illustrates processes pseudo code main procedures 

options graph 
user chooses options initialize graph order generate problem desired structure size solution bound information 

making edges initial edges placed order form special structure equality constraints 
edges define lower bound solution form maximum clique 
cliques added vertices connected cliques 
chapter 
graph generates problem 
assigning random frequencies vertices 
assignment generator solution optimal preferred user upper bound optimal solution 

adding removing edges randomly 

calculating constraints 
edges graph form equality inequality constraints problem 
constraints calculated distance frequencies connected vertices 
options graph input line monitor screen presents questions user answer graph uses default answer question just answered enter 
vertices frequency users 
give number domain shown default 

give size maximum clique random default 
max 
clique size smaller vertices 

equality constraints 
type equality constraints default 

different frequency domains 
type domain domains default 

define min max constraint values 
constraints randomly chosen minimum maximum value default 

objective function 
type minimizing number frequencies default minimizing frequency span minimizing violation constraints 
questions follow answering question objective obj 

solution max clique size 
default 
solution optimal 
default upper bound solution obj 
mobility frequencies 
default options clear generator provide instances outside celar structure equality constraints give generalized coloring problems 
obtain problem celar structure options chosen 
options graph 
number vertices kv 

maximum clique size 
large kv problem default case randomly chosen 

equality constraints 

different domains 

default choice works limits chosen program may overrule choice impossible generate fitting problem 

options celar objectives 
graph offers quality levels objective generated solution optimal kfk 
obj 
generated solution optimal kfk 
obj 
generated solution upper bound solution kfk 
obj 
input desired user random seed feed random generator 
integer stored solution file randomly generated problem reproduced stored random seed 
options answers vertices max clique size equality constr 
domains 
dist min max objective problem type celar celar random fap mcp table options user graph 
assignment coloring maximal clique problem table shows user determine nature generated problem 
answers column describe celar outline second column results similar celar problem various sizes 
random frequency assignment chapter 
graph generates problem problems graph coloring problems maximal clique problems optional 
instance answering questions return graph generates feasible assignment problem frequencies assigned vertices connected equality constraints jf gammaf inequality constraints jf gammaf objective function minimizing frequency span assigning available frequencies proper domain 
minimal number frequencies probably exceeds random size maximum clique 
select graph coloring problem just channel constraints leaving equality constraints question frequency domain question minimal maximal constraint distance 
question 
fact numbers case 
assigning frequencies vertices corresponds assigning different colors vertices distances available frequencies domain constraints jf gamma questions answered return user wants problem vertices question 
wants know colors assigning reply question desired number colors select objective function question 
results maximum clique problem 
maximum clique problem generated selecting objective function question leave equality constraints question 
output files checking necessary adjusting readers input random radio link frequency assignment problem calculated written output files 
files viewed generator quitting qq leave graph typing filename return typing brings help file information 
successfully generating problem output files available ffl dom gen file contains domains available frequencies 
ffl var gen file shows link domain case objective mobility link 
ffl cst gen file contains optimization criteria 
ffl ctr gen file contains constraints concerning required frequency distance case objective priority constraint 
ffl sol gen file contains solution settings reproduction 

making edges ffl gen file contains small domain just frequencies assignment 
making edges user determined number vertices presenting radio links connected randomly edges order form graph sparse matrix techniques algorithm store nonzero entries right hand side adjacency matrix 
special structure initial edges initial settings rlfap generator prescribed property described problem formulation 
property forms special structure frequency domains equality constraints conformity celar problems ffl label vertices kv ffl odd vertex connected vertex edge fuv odd shown adjacency matrix uv entries uv undirected theta adjacency matrix symmetric delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta 
ffl edges form equality constraints frequency distance 
chapter 
graph generates problem index index table survey special doubled domain 
ffl frequency domains ordering available frequencies certain frequency assigned vertex equality constraint fixed frequency available assign see 
special structure doubled domain dd formed 
domain displayed table frequencies linked distance frequencies linked pair equality constraint distance dd ff jf gamma way odd vertices frequency assigned 
assignment corresponds assignment respective vertices 
making cliques user choose maximum clique size question generator draws randomly maximum clique size smaller chosen number vertices 
hard find maximum clique cliques hidden random vertex labels clique see 
number odd clique vertices chosen randomly kv ck clique edges come determined edge set ec fuv uv remaining vertices cliques size smaller formed way vertices connected cliques 
small graph kv 
assigning solution frequencies theta adjacency matrix may look sparse matrix techniques algorithm store placing nonzero entries right hand side adjacency matrix 
entries calculate distances vertices 
stored entries distance matrix may zero inequality constraint holds assigning frequencies connected vertices cause interference 
assigning solution frequencies order fill initial maximal clique set different frequencies satisfy equality constraints domain dd 
way half clique filled randomly different frequencies drawn set couples half filled equality partners chosen frequencies 
ff dd jf gamma rlfap known optimal number frequencies long cliques mutually connected colored frequencies maximum clique size upper bound assignment user 
stated property lower bound generator solution option proven optimal kfk algorithm option step assign mc ae kfk step set assignment rest ae construct span problem algorithm depending chosen objective wishes user number different frequencies assigned vertices may larger size maximal chapter 
graph generates problem clique 
assignment generator solution case objectives forms upper bound solution alternative assignments 
property measure lower bound number assigned frequencies kfk kfk lower bound may strict certain cases stated proposition 
algorithm generate problems mentioned objectives called construct span problem algorithm cspa formulated follows set consecutive frequencies span gamma max min kd 
step assign vertex say assign vertex say step assign rest frequencies step xy jf gamma ic xy jf gamma gamma tight constraints 
accomplish different objectives cspa settings lemma fu vg cspa 
assignment restricted possible assignments ff fg ff fg proof ic uv gamma gamma gamma cspa assigned 
assigning solution frequencies lemma fu wg set 
assigned cspa ff tg restrict assignment possible re assignment frequencies different ff gamma uv gamma vw proof lemma uw gamma vw gamma cspa jf gamma vw jf gamma uw satisfied 
gamma vw frequency satisfy jf gamma jf gamma vw jf gamma jf gamma uw substitute gamma vw second distance vw gamma constraints tightly satisfied considering jf gamma jf gamma gamma vw vw jf gamma gamma gamma vw gamma gamma gamma gamma gamma uw gamma vw satisfies constraints lemma fc set 
assigned cspa 
restrict assignment possible re assignment frequencies different fc chapter 
graph generates problem mirror image ff gamma fc proof repeated application lemma fu xg lemma kc kc fc assignment cspa assignment cspa assume define mirror image ff gamma fc impossible assignment frequencies proof lemma possible alternative re assignment 
proposition kc kc construct rlfap applying cspa separate clique partition assignments allowed min ff gk proof lemma implies assigned set frequencies min ff gk 
assigning solution frequencies graph min min example graph property proposition example proposition consider graph 
inequality matrix gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma optimal assignment frequencies ffl minimum kfk assignment ffl minimum assignment shows kfk min kfk see 
constructing problems strict lower bounds 
corollary kc kc chapter 
graph generates problem construct rlfap applying cspa seperate cliques clique partition full frequency band 
fc fc fc fc assignments allowed min ff gk proof construction result follows immediately 
generating problems objective done applying corollary 
constructing problems admissible assignments problems objective generated simply reducing tight constraints option ffl problems easily pre processed due tight constraints 
ffl reducing constraint sizes may allow possible assignments 
ffl lower bound guaranteed strict anymore 
ffl conjecture resulting problem harder solve 
construction span problems problems objective generated applying cspa 
lemma span solution file graph optimal span generation problem 
construction problems admissible assignments proposition order distances clique smallest lower bound minimal span assignment min max gamma 
adding removing edges randomly th smallest distance clique proof assigned frequencies arranged increasing order 
gamma gamma gamma gamma gamma gamma 
gamma gamma note vertices ng form clique constraint kf gamma ij definition gamma gamma gamma gamma sum smallest distances 
corollary graph designed containing clique gamma size full domain graph admissible assignment 
proof follows immediately proposition 
problems objective generated applying corollary accomplish assignment uses frequencies needed fill maximum clique 
adding removing edges randomly seperate cliques connected adding edges uv randomly 
edges holds uv form inequality contraints different frequencies assigned extra edges added set edges consisted initial edges property clique edges see 
number edges clique gamma including initial edges 
chapter 
graph generates problem ic ic ec vertex distance ic ic extra edge distance ic ic distance ec ec edge vertices edge vertices random rlfap vertices connected cliques 
total amount edges calculated follows kek kv gamma cgk ij amount exceeds average number edges problems celar set edges removed randomly edges largest cliques order maintain preset bounds 
edge connects vertices number edges sum degrees vertices kek ffi celar set noticed average ffi celar average kek kv clear graphs smaller vertices exceed amount clique degree vertex 
larger graphs maximum clique extra edges vertex reduced 
calculating constraints edges graph form equality inequality constraints problem written constraint file 
constraints follows labels connected vertices followed equality larger sign constraint withdrawn right hand side constraint matrices 

calculating constraints constraints calculated distance frequencies connected vertices 
consider non zero entries uv adjacency matrix replace distance frequencies distance matrix formed fd uv uv uv uv jf gamma jg equations equality constraints set value ec uv structured way problems fec uv uv odd ec uv uv inequality constraints calculated differently various options objectives 
order obtain feasible problem inequality constraints formed reducing distances uv forall uv minimal separation frequencies smallest uv reduction allowed disturb quality solution need case objective optimal solution larger clique size objective function 
adjusted distance denoted uv uv uv gamma gamma cases larger random reduction possible uv uv gamma gamma uv gamma mind set inequality constraints fic uv uv ic uv uv extra adaptation takes place case objective function order rlfap infeasible respect minimizing kfk span admissible assignment possible 
reduction distances clique increased minimal span oversized clique larger span size minimal span chosen maximal bandwidth increasing span guarantees property infeasibility 
priority mobility labels assigned randomly constraints variables needed 
shows clique vertices oversized span increasing minimal distance frequency distance 
span lower bound ls described chapter holds infeasibility respect minimal span minimal frequencies objectives 
optimal solution minimal violation problem violate constraints follow increased distances 
assigning priorities randomly constraints oversized clique generator assign lowest priority constraint 
chapter 
graph generates problem ic inequality constraint larger equal minimal distance 
ec ec ic ic ic ic complete frequency domain ec equality constraint connections fixed distance 
clique vertices possible admissible assignments 
pseudo code section provide reader insight algorithm presenting pseudo code procedures graph 
ultimate implementation numbered procedures appendix thesis 
user answers initial questions procedure various options 
procedure program forms central processing unit generating problem solution 
automatically stored directory program executed direct viewed graph 
possibilities explained appendix users manual 
generate problem solution procedure generate problem solution wanted options chosen procedure read frequency domain chosen mc random min procedure random pos integer returns integer 
equality constraints chosen 
pseudo code mc equality domain procedure equality assignment procedure inequality assignment procedure procedure equality assignment equality constraints structure 
endif ctr file procedure calculate constraints matrix constraint filled constraints var file procedure solution file procedure cst file procedure endif procedure cliques formed frequencies solution determined 
procedure graph completed constraints calculated written constraints file 
equality assignment procedure equality assignment hide edges assign frequencies unconnected vertices randomly 
box contains frequencies place 
matrix orders cliques 
objective assign different frequencies vertices hidden mc 
frequencies mc assign frequencies initial maximum clique rest vertices forming maximum cliques 
frequencies mc assign different frequencies rest vertices forming possible maximum cliques 
endif objective assign different frequencies randomly picked span vertices hidden maximum clique 
assign different frequencies initial span rest vertices forming possible maximum cliques 
chapter 
graph generates problem objective assign different frequencies full span domain vertices hidden maximum clique 
assign different frequencies full span rest vertices forming possible maximum cliques 
endif ctr file procedure ctr file add extra edges randomly connecting vertices cliques different frequencies remove edges cliques maximum cliques create average degree objective objective constraints feasible span min problem 
calculate distance assigned frequencies adjacent vertices equality constraints vertex odd write equality constraint distance uv ctr file frequencies mc objective reduce randomly constraint 
min write inequality constraint ctr file frequencies mc objective reduce randomly constraint max min write inequality constraint ctr file endif objective constraints priorities infeasible span problem 
calculate distance assigned frequencies adjacent vertices equality constraints vertex odd priority write equality constraint distance uv ctr file random reduce randomly constraint 
min vertices element small clique small clique contains assigned frequencies minf maxf 
pseudo code priority constraints sub clique random increase randomly constraint random write inequality constraint ctr file reduce randomly constraint write inequality constraint ctr file endif random random priorities rest contraints reduce randomly constraint 
min write inequality constraint ctr file endif endif chapter 
graph generates problem chapter tests experiences direct motivation generator investigation rlfap project operations research department faculty technical mathematics informatics technical university delft 
applications experiences come investigation 
problems smaller vertices ipm algorithms ipm stands interior point methods tried succesfully implemented combined various rounding schemes exact preprocessing techniques 
computational results potential reduction ipm rounding schemes preprocessing techniques displayed section 
smaller larger vertices problems tried participants project results graph problems discussed compared results problems celar set 
margin calculated solution generators optimal quality applied algorithm determined 
computational results ipm approach graph test problems section results applying ipm algorithm preprocessing techniques number graph test problems 
generated test problems reduced applying exact branch bound preprocessing technique 
table shows various generated problems growing size number variables preprocessing reduction percentages 
cases preprocessing results optimal unique solution reduced problems optimal solved potential reduction ipm 
problems chosen chapter 
tests experiences admissible assignment objective default 
obj 
ic reduction opt 
time table preprocessing results graph test problems solutions problem lower bd 
solution time reduction celar celar celar table preprocessing results celar conclude exact branch bound preprocessing method powerful tool reduce size problems 
problems completely solved appears feasible assignment exists problems 

computational results ipm approach test problems course variables may removed problem exist reasonably large interference constraints 
apparently span span related problems objectives average large constraints admissible solutions case celar instances 
table shows problems solved optimally small time 
preprocessing methods developed preprocessing celar problems reduce feasible celar instances return admissible solution known lower bounds see table 
heuristics successful graph problems existence admissible solution guaranteed 
table shows ipm improvement solution preprocessed celar problems 
problem vertices opt 
sol 
time celar celar celar celar celar table computational results celar results infeasible graph test problems turn infeasible instances rlfap devoted solving feasible instances rlfap small number infeasible problems solved 
table gives information infeasible graph test problems 
larger preprocessed 
penalty coefficients set gammai mobilities links 
vertices opt 
ic reduction table infeasible graph problems table computational results problems shown various rounding schemes applied combined ipm 
chapter 
tests experiences solution marked improved applying optimal algorithm 
conclude algorithm manages find optimal solution relatively small problem appears larger problems difficulty finding assignment generates fairly assignments 
investigation applicability ipm methods solving rlfap project generated graphs increasing sizes showed effectiveness various algorithms solve celar problems 
released test problems released sets test problems size links respectively generated graph earlier tu eindhoven group instances link set just verify generator provides non trivial test problems 
preliminary results indicate case fact problems bit harder comparable celar 
rest data set 
quite possible link set may different difficulty triviality levels easier harder link set due big difference dimension 
furthermore problem designed particular strategies may easier harder solve 
idea test hypotheses regarding resulting difficulty level strategy 
test problems available anonymous ftp twi tudelft nl directory pub rlfap 
instances organized subdirectories tud tud tud tud tud tud tud tud tud tud subdirectory having associated txt files 
readme tud file describing released test problems accompany data set 
appendix gives verbatim reproduction contents file 
discussion table views results rlfap group tu eindhoven concerning described released problems 
group succesfully developed approximation algorithms rlfap principal local search powerful tool hard combinatorial problems 
experimental results graph problems satisfying optimal solutions generators appear hard approach consume calculation time various applied methods indicates 
solving generated 
discussion problems seams harder approach comparable problems celar set displayed table explained fact structure graphs similar generated problems contain redundant information constraints 
margin calculated solution generators optimal quality applied algorithm determined 
chapter 
tests experiences vertices opt 
time pp table computational results infeasible graph problems instance objective time graph bounds vertices function value sec lower bd 
bd opt 
tud tud tud bd 
tud span 
tud viol 
tud tud tud bd 
tud span viol 

tud viol 
table tu eindhoven computational results graph test problems instance objective time lower vertices function value sec bound celar order celar order celar order celar order celar span table tu eindhoven computational results celar problems chapter generator designed obvious heuristic algorithm easily find optimal solution generated np complete problem 
experiences tested random problems subscribe 
take consideration structure generated problems partly preset optional partly random user exactly knows understands working graph resulting problem unpredictable different 
problem exactly reproducible random seed options chosen random upper lower bounds accompanied assignment bounds 
small size generated problems various known properties bounds provide insight complex real problems maximum clique problem graph coloring problem especially rlfap 
experimental results graph problems satisfying optimal solutions generators appear hard approach various applied methods 
calculation time necessary approach generated problems significant higher comparable problems celar set 
explained fact structure graphs similar generated problems contain redundant information constraints 
margin calculated solution generators optimal quality applied algorithm determined 
investigation applicability ipm methods solving rlfap project graph proved helpful tool 
generated graphs increasing sizes ipm algorithms tried successfully implemented combined various rounding schemes 
chapter 
summarising experiences state generator come ffl non trivial problems sizes links ffl rlfap various options objectives ffl rlfap similar celar problems files ffl lower strict lower bounds ffl optimal solutions 
graph proved helpful tool developing testing comparing rlfap algorithms 
bibliography 
optimal assignment broadcasting frequencies 
european journal operational research 

finding cliques undirected graph 
cacm 

issue efficient spectrum 
proceedings ieee 

lower bounds class frequency assignment problems 
ieee transactions vehicular technology 
ralf 
computational complexity interference graph calculations 
ieee transactions vehicular technology 
gary johnson 
complexity near optimal graph colouring 
jacm 
hale 
frequency assignment theory applications 
proceedings ieee 
den 
interior point approach linear quadratic convex programming 
kluwer academic publishers netherlands 
karp 
reducibility combinatorial problems 
miller press thatcher editors complexity computer computations new york 

graph theory radio frequency assignment 
technical report allied radio frequency agency nato headquarters brussels belgium 
lenstra rinnooy kan computational complexity discrete optimization problems 
annals discrete mathematics 
metzger 
spectrum management technique 
talk th national orsa meeting detroit mi fall 
bibliography papadimitriou steiglitz 
combinatorial optimization algorithms complexity 
prentice hall englewood cliffs nj 
pardalos xue 
maximum clique problem 
technical report department industrial systems engineering weil hall university florida fl 
lenstra 
frequency assignment local search 
technical report eindhoven university technology eindhoven netherlands 

potential reduction approach radio link frequency assignment problem 
master thesis faculty technical mathematics informatics tu delft netherlands 

new approach frequency assignment 
master thesis faculty technical mathematics informatics tu delft netherlands 
appendix file readme tud containing released test problems file describes random test instances radio link frequency assignment problem rlfap ftp site 
instances generated graph generating radio link frequency assignment problems heuristically generator developed tu delft van benthem thesis part tu delft rlfap group 
instances available framework european euclid rlfap project 
testing hypotheses strategies program generate different types test problems quality priori solution bound information generator provides test problem 
appreciate inform results test instances send mail rlfap twi tudelft nl 
test instances patterned celar data set instance described files cst txt ctr txt var txt dom txt 
please see file readme celar directory description celar data set structure files 
sets test problems links respectively 
instances organized subdirectories tud tud tud tud tud tud tud tud tud tud subdirectory having associated txt files dom txt file celar data set problem instances 
appendix file readme tud containing released test problems facts problems problems solution 
soft constraint initial assignment variables 
optimization criterion number values 
problem var con 
problem var con 
problem var con 
problem var con 
problem var con 
problem var con 
problems solution 
soft constraint initial assignment variables 
optimization criterion number values span frequencies 
problem var con 
problem var con 
problems solution satisfying hard soft constraints 
initial assignment variables 
weight index constraints group group see ctr txt cst txt file problem list penalties constraint violation 
penalty structure celar instances may 
problem var con 
problem var con 
appendix graph users manual graph starts generating random problem global outline set order radio link frequency assignment problem 
graph questions put user opportunity choices size graph maximum clique size defined number vertices frequency domains type values constraints objective function optimized 
user position create conditions coloring maximum clique problem 
generated problem output files extra file contains minimal domain reveals solution generated problem 
working graph graph different users levels 
enter users level options type command printed quotations enter bring help file qq leave graph restart graph pd go page viewed file 
pu file open lines open lines file nf open lines file tu turn page rotation degrees appendix graph users manual li open library generated files library empty graph generated new problem second users level go go generator part second users level 

choosing go option user level enter second users level actual problem generating done 
order put computer generate answer number questions input line bottom presents questions answer enter graph uses default answer question just answered enter 
vertices frequency users 
give number domain shown 

give size maximum clique maximum clique size smaller vertices 

equality constraints 
type equality constraints default answer 

different frequency domains 
type domain default domains 

define min max constraint values 
constraints randomly chosen minimum maximum value default case 

objective function 
type minimizing number frequencies minimal order minimizing frequency span default minimizing violation constraints 
questions follow answering question objective obj 
frequencies solution max clique size 
default 
solution optimal 
default upper bound solution obj 
mobility frequencies 
default 
working graph input desired user random seed feed random generator 
integer stored solution file randomly generated problem reproduced stored random seed 
generator able get test problems 
nature size problem depend answers give questions shown second users level 
questions options explained 
question size problem determined number vertices assign frequency 
vertices connected randomly constraints graph created option choose maximum clique question 
question answer question pressing enter maximum clique size chosen randomly 
question generator select random list constraints vertices equality constraints choose preset odd vertex distance vertex 
question choose single domain available frequencies different domains various frequencies displayed file dom gen 
question default values constraints choose typing minimum value space maximum value 
minimum value maximum value minimum value 
question objective functions choose problem 
extra questions case objective may question frequencies solution maximum clique size 
default 
answer solution sol gen file optimal 
press enter sol gen solution maximum clique size lower bound number frequencies may optimal 
question prefer optimal answer question solution optimal 
default upper bound solution enter 
case objective extra question question mobility frequencies 
default objective returns problem infeasible respect objective violate constraints order assign frequency permitted domains vertex 
penalties determined priorities constraint 
cases vertices preset frequencies may may changed 
answering objective results problem 
appendix graph users manual names files generated problem stored library 
ctr cst var dom files structure corresponding celar files 
ctr gen contains constraints concerning required frequency distance case objective priorities 
cst gen contains objective optimization number constraints 
var gen contains vertices disposed frequency domain case objective mobilities preset frequency mobility 
dom gen contains frequency domains similar celar dom files different domains preceded union domains domain frequencies 
extra minimal domain assign 
sol gen generator give random generated problem know lower bound optimal solution upper bound problem sol gen file 
way user comparison shows quality assignment algorithm 
file contains information chosen options random seed problem reproduced 
appendix pascal code generating part graph appendix provide ultimate implementation turbo pascal procedures graph 
meant illustrate actual generation pseudo code chapter realized 
user answers initial questions procedure various options 
procedure program forms central processing unit generating problem solution 
problem files solution file procedure automatically stored directory program executed direct viewed graph implemented procedure 
options possibilities explained appendix users manual 
procedures left order save space deal screen setup help initial file interactions user generating algorithm 
sparse matrix techniques algorithm store placing nonzero entries right hand side adjacency matrix 
entries stored variable constraint cons type calculate distances connected vertices 
array called box stores vector assigned frequencies accompanied domain label vertices ordered 
program input output maximum memory uses crt screen control device orders 
appendix pascal code generating part graph const unequal procedure turn 
screen com com command line position maximum degree may larger 
type array integer compressed adjacency matrix stored array named constraint array char array screen char domains array integer freq domains array integer equality constr array char string string string var memo box array integer array screen tal integer infile text char boolean procedures involved generating problems files domain procedure var doms dof domains var eqdoms doms frequencies domain eqdoms split eq constr 
dof contains frequency channel domains var info counter integer text assign dom gen reset 
domain read info info doms info readln eqdoms doms freq eqdoms freq eqdoms eqdoms doms eqdoms doms eqdoms doms eqdoms doms freq eqdoms freq eqdoms eqdoms doms eqdoms doms eqdoms doms frequencies info doms dof info dof 
dof 
counter doms look domains contain frequency info doms counter counter dof counter domain contains frequency appendix pascal code generating part graph dof counter dof contains domains close cst file procedure ctrnumber level integer var text assign cst gen rewrite writeln total number constraints ctr file ctrnumber writeln writeln assign frequencies full domains file dom gen writeln ii minimal domain file gen writeln level div write objective minimising number frequencies 
level div write objective minimising frequency span 
write objective minimising violation constraints mobility preassigned frequencies close var file procedure level linknumber integer dof doms domains const pct percentage remaining links domain var text frequ mobility integer 
var file assign var gen rewrite level mod linknumber box box dof search freq 
box dof dof random dof box linknumber box box box random pct box level mod equality constraints linknumber box box dof search freq 
box dof dof random dof box box linknumber box box box box box random pct box box appendix pascal code generating part graph box filled available domains links level div linknumber random optimal solution freq mobility mobility random mobility mobility writeln box box mobility writeln box box mobility random box domain place doms frequ doms random doms doms dom frequ box box domain place doms frequ doms random doms doms fs dom writeln box frequ frequ frequ frequ writeln box frequ writeln box frequ mobility writeln box writeln box writeln linknumber box linknumber write linknumber box linknumber 
solution file linknumber writeln box write linknumber box linknumber close solution file procedure linknumber viol clqsize integer place array integer var solution text integer array integer assign solution sol gen rewrite solution assign gen minimal domain contains sol freq cies rewrite larger maximal frequency box linknumber box box box downto box appendix pascal code generating part graph linknumber writeln solution frequency assigned link box write solution frequency assigned link linknumber box linknumber writeln solution writeln solution writeln solution size largest clique clqsize writeln solution writeln solution frequencies write solution mod writeln solution writeln viol writeln solution writeln solution writeln solution number violations solution sol file viol writeln solution priority violated constraints viol write solution place mod writeln solution close close solution problems equality constraints procedure level clqsize linknumber integer eqdoms var place array integer var node chan lastchan lastspace randi randi span minf maxf integer space array integer frequ array integer 
problems equality constraints linknumber space lastspace linknumber level div level div node lastchan clqsize hide node node random lastspace clqsize node div node mod node node odd place place space node ii chan random lastchan random frequency pair eqdoms box space node eqdoms chan fill box random box space node node node place space node box space node eqdoms chan node box freq eq partner box space node lastspace lastspace free space left node lastspace space space chan lastchan eqdoms eqdoms freq thrown domain eqdoms eqdoms lastchan lastchan clqsize clqsize cliques node clqsize clqsize hide node node random lastspace clqsize node div node mod node node place space node box place box place fld box place node node place space node appendix pascal code generating part graph box place box place box place lastspace lastspace node lastspace space space level div clique level div frequ node lastchan randi random clqsize div randi randi odd 
randi randi randi random clqsize div clqsize clqsize hide node node random lastspace clqsize node div node mod node node clqsize place space node randi chan minf box place box space node randi chan maxf box place box space node chan random lastchan min chan max chan box place eqdoms frequ chan fill box random box place node node place space node box place eqdoms frequ chan add partner equal freq box place lastspace lastspace free space left node lastspace space space chan chan 
problems equality constraints chan lastchan frequ frequ frequency thrown domain lastchan lastchan level div objective different options level div objective ii lastchan minf random span clqsize div random lastchan minf clqsize div maxf minf span span maxf minf minf maxf frequ freq array node randi random clqsize div randi randi odd 
randi randi randi random clqsize div odd 
clqsize hide node node random lastspace clqsize node div node mod node node clqsize place space node randi chan minf randi chan maxf chan minf random span chan chan domain chan minf random span box place eqdoms frequ chan fill box random box place node node place space node box place eqdoms frequ chan add partner equal freq box place lastspace lastspace free space left node lastspace space space chan minf chan maxf appendix pascal code generating part graph span span chan maxf minf maxf frequ frequ freq removed list 
level obj ii level div objective iii clique frequ node lastchan randi random clqsize div randi randi odd 
randi randi randi random clqsize div clqsize clqsize hide node node random lastspace clqsize node div node mod node node clqsize place space node randi chan minf box place box space node randi chan maxf box place box space node chan random lastchan min chan max chan box place eqdoms frequ chan fill box random box place node node place space node box place eqdoms frequ chan add partner equal freq box place 
problems equality constraints lastspace lastspace free space left node lastspace space space chan chan chan lastchan frequ frequ frequency thrown domain lastchan lastchan level obj iii place space box place box place fill spaces box place problems equality constraints procedure level clqsize linknumber integer doms domains var place array integer var randi randi node chan lastchan lastspace span minf maxf integer space array integer frequ array integer lastspace linknumber linknumber space level div objective iii frequ node lastchan randi random clqsize randi randi randi randi randi random clqsize clqsize hide node node random lastspace clqsize node div clqsize appendix pascal code generating part graph place space node randi chan randi chan chan random lastchan box place doms frequ chan fill box random frequencies lastspace lastspace free space left node lastspace space space chan lastchan frequ frequ frequency thrown domain lastchan lastchan level obj iii level div objective ii lastchan minf random span clqsize random lastchan minf clqsize maxf minf span span maxf minf span frequ minf node randi random clqsize randi randi randi randi randi random clqsize clqsize hide node node random lastspace clqsize node div clqsize place space node randi chan randi chan span chan random span box place doms frequ chan fill box random lastspace lastspace free space left node lastspace space space chan minf chan span frequency thrown domain frequ frequ span span 
problems equality constraints level div obj ii level div frequ node lastchan clqsize hide node node random lastspace clqsize node div place space node chan random lastchan random frequency doms box space node doms frequ chan fill box rand lastspace lastspace free space left node lastspace space space chan lastchan frequ frequ frequency thrown domain lastchan lastchan clqsize iii clqsize cliques node clqsize clqsize hide node node random lastspace clqsize node div place space node box place box place fld lastspace lastspace node lastspace space space level objective place space box place box place fill spaces appendix pascal code generating part graph calculate constraints procedure level clqsize mincons maxcons linknumber integer var ctrnumber viol integer var place array integer var constraint var ii nd md dist free integer extra outconstrfile text string array integer various cliques connected randomly extra constraints edges removed randomly regulate average degree vertices 
procedure var stp integer stp linknumber stp place level mod equality constraints free free random stp free div find random odd space 
free stp box free box box free box free free constraint ctrnumber free constraint ctrnumber free constraint constraint extra free linknumber free free random stp free find random space 
free stp box free box free free constraint ctrnumber free constraint constraint extra extra free linknumber 
calculate constraints ctr gen assign assign outconstrfile reset rewrite outconstrfile linknumber clqsize div means clqsize cliques 
clqsize ii clqsize connect link clq 
ctrnumber extra link get extra constraint 
ii clqsize place place gives vertex position clique index extra ii clqsize free place clq sif connect ctrnumber ctrnumber place constraint ctrnumber extra extrac 
free extra mod random clqsize div ii clqsize connect randomly chosen place appendix pascal code generating part graph mod equality constraint ctrnumber ctrnumber constraint ctrnumber extra box box box box ctrnumber ctrnumber constraint ctrnumber extra case clqsize random ctrnumber ctrnumber constraint ctrnumber extra random ctrnumber ctrnumber constraint ctrnumber extra random ctrnumber ctrnumber constraint ctrnumber extra random ctrnumber ctrnumber constraint ctrnumber extra extrac 
free extra mod random clqsize div constraint ctrnumber extra constraints clqsize linknumber clqsize constraint place ii 
calculate constraints ii clqsize place constraint ii place constraint constraints calculated admissible assignment problems viol total number violated constraints 
level div problem constraints ctrnumber ctrnumber constraints counter linknumber calculate write constraints file constraint cons constraint mod level mod eq write outconstrfile writeln outconstrfile equality constraint odd dist abs box box dist maxcons maxcons mincons dist maxcons mincons dist maxcons dist mincons dist mincons 
level div frequencies level div level div solution upperbound constraints smaller dist dist random dist mincons extra dist random appendix pascal code generating part graph random dist random dist mincons random mincons dist mincons random mincons dist mincons optimal solution case dist dist random dist random dist random dist write outconstrfile dist writeln outconstrfile inequality constraints ctrnumber ctrnumber constraint write constraints file linknumber constraint cons constraint mod level mod eq write outconstrfile space writeln outconstrfile equality constraint odd dist abs box box dist maxcons maxcons mincons dist maxcons random dist maxcons dist mincons dist mincons 
level div level div 
calculate constraints dist dist random dist mincons dist mincons dist dist random write outconstrfile dist space writeln outconstrfile inequality constraints ctrnumber ctrnumber constraint write constraints file space objective problems admissible assignment get constraints viol total number violated constraints 
level div infeasible problem constraints counter number max cliques 
ctrnumber ctrnumber constraints counter linknumber calculate write constraints file constraint cons constraint mod level mod eq write outconstrfile writeln outconstrfile equality constraint odd ii dist abs box box find clq box mod clqsize box mod clqsize md box div clqsize nd box div clqsize md nd infeasible 
maxcons maxcons md random dist appendix pascal code generating part graph viol viol counter violated constraints cons clq prior md place viol place viol md dist random extra write outconstrfile write outconstrfile dist ii md write outconstrfile ii dist maxcons dist maxcons dist dist random dist extra write outconstrfile write outconstrfile dist ii random md write outconstrfile ii dist mincons dist dist random dist maxcons maxcons mincons dist maxcons random dist maxcons dist mincons dist mincons 

dist random dist random write outconstrfile write outconstrfile dist ii random ii write outconstrfile ii write outconstrfile ii write outconstrfile write outconstrfile writeln outconstrfile inequality constraints ctrnumber ctrnumber constraint write constraints file linknumber constraint cons 
draw maximum clique size randomly constraint mod level mod eq write outconstrfile space writeln outconstrfile equality constraint odd dist abs box box level div dist dist random dist mincons dist mincons dist dist random dist maxcons maxcons mincons dist maxcons random dist maxcons dist mincons dist mincons 
write outconstrfile dist write outconstrfile space writeln outconstrfile inequality constraints ctrnumber ctrnumber constraint write constraints file space objective close close outconstrfile draw maximum clique size randomly procedure linknumber integer var clqsize integer linknumber appendix pascal code generating part graph clqsize linknumber div random linknumber div linknumber clqsize random clqsize random generate problem procedure clqsize level linknumber mincons maxcons integer var ctrnumber viol prior integer doms dof domains eqdoms place space array integer constraint tal tal number new files library gen domains gen var gen var old cst gen cst old ctr gen ctr old sol gen sol old com write generating doms dof eqdoms randomize start maxcons mincons clqsize linknumber clqsize level mod equality constraints levels clqsize mod clqsize clqsize odd linknumber div clqsize linknumber mod clqsize level clqsize linknumber eqdoms place box contains random frequencies place 
orders cliques equality constraints levels 
initialize problem linknumber div clqsize remains linknumber mod clqsize level clqsize linknumber doms place box contains random frequencies place 
orders cliques linknumber constraint level clqsize mincons maxcons linknumber ctrnumber viol place constraint constraint filled constraints level linknumber dof doms linknumber viol clqsize place ctrnumber level com write problem generated 
please enter readln initialize problem procedure procedure options 
var boolean linknumber level mincons maxcons objective clqsize integer okay char true false false com write 
vertices frequency users 
look linknumber linknumber default value com write 
choose maximum clique size enter random size readln look clqsize default clqsize linknumber appendix pascal code generating part graph clqsize linknumber okay com write 
equality constraints 
okay readln okay okay level level level equality constraints level linknumber mod linknumber linknumber linknumber box com write 
different frequency domains 
domain okay default level uses domains okay okay level level com level uses domain write 
define min max constraints 
enter look mincons maxcons mincons mincons mincons mincons maxcons mincons maxcons mincons maxcons mincons maxcons com objective write 
objective function 
min freq min freq span min interf readln look objective objective com write 
frequencies solution max 
default readln okay default okay okay level level com 
initialize problem write 
solution optimal 
default upperbound solution okay okay okay level level objective level level level level default com write 
mobility frequencies 
default readln okay default okay okay level level com write level level vertices linknumber max clique clqsize write random write clqsize write constr mincons maxcons enter okay okay okay false check 
level level linknumber clqsize clqsize linknumber linknumber maxcons false com write input incorrect please press try readln true false com write want problems 
false clqsize level linknumber mincons maxcons false appendix pascal code generating part graph program procedure var memo var integer var answer edit boolean script boolean tel integer char edit true edit true tel answer com write read tel answer answer tel tel readln tel memo answer answer hu answer answer answer pu answer pd answer answer tu turn memo answer re answer nf tal exit answer 
program tal exit answer exit answer tal exit answer li tal tal script tal exit answer qq edit false false answer go tal false true memo edit true memo 
