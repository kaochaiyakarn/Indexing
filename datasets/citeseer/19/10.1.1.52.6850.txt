oracles checking temporal properties concurrent systems laura dillon qing yu department computer science university california santa barbara verifying test executions correct crucial step testing process 
unfortunately arduous error prone step especially testing concurrent system 
system developers benefit oracles automating verification test executions 
examines graphical interval logic gil specifying temporal properties concurrent systems describes method constructing oracles gil specifications 
visually intuitive representation gil specifications easier develop understand specifications written traditional temporal logics 
additionally test execution violates gil specification associated oracle provides information fault 
information displayed visually execution help system developer see execution fault detected nature fault 
testing necessary activity stages system development assure final system high quality 
testing complex systems extremely labor intensive tedious tasks performed testing routine repetitive 
system developers benefit tools automate various testing tasks 
task involves verification test executions 
test executions generated examined determine system behaves correctly 
test executions exhibit fault copyright fl acm permission copy distribute document granted provided notice retained copies copies altered acm credited material form copyright policies 
nature fault ascertained 
typically large numbers test executions examined order ensure sufficient coverage space possible executions system 
testing concurrent systems need ensure coverage system global synchronization structure dramatically increases sizes test sets 
verifying correctness execution concurrent system requires examination ordering timing events occur potentially long execution 
verification test executions tends tedious error prone especially testing concurrent systems 
test oracles formal specifications automatically verify test executions conform specifications 
particular oracles temporal specifications permit verification ordering events executions concurrent systems 
examines graphical interval logic gil specifying temporal properties concurrent systems describes method constructing oracles gil specifications 
visually intuitive representation gil specifications easier develop understand specifications written traditional textual temporal logics 
additionally test execution violates gil specification associated oracle provides information fault 
information displayed visually execution help system developer see execution fault detected nature fault 
previous gil produced toolset supports specification systems gil supports reasoning properties guaranteed gil specifications 
researchers university california irvine produced comprehensive toolkit called taos testing analysis oracle support supports definition oracles gil 
rest organized follows 
tion describes textual logic gil indicates textual formulas represented gil 
section presents sample specifications section demonstrate capabilities gil oracles 
section presents algorithm verifying correctness test execution section shows information fault displayed help system developer understand occurred 
discuss related section research directions section 
logic believe visual representation gil formulas natural intuitive textual temporal logics 
particular timing diagram look feel gil corresponds closely intuitive mental picture time 
textual representations produce concise formulas facilitate definitions semantics algorithms manipulate formulas 
interval logic fil invented allow textual encoding semantic information gil formula 
fragment fil section describing construction gil oracles 
section describes fil fragment indicates fil formulas represented graphically gil 
fil propositional linear time temporal logic 
fil formula evaluated state infinite sequence states semantics boolean connectives defined usual manner 
formula viewed specification hold state state sequences represent possible executions system 
finite execution determines finite state sequence identify infinite sequence obtained stuttering terminal state 
informal description term context mean sequence states obtained extracting subsequence contiguous states sequence subsequence finite stuttering final state 
key construct fil interval provides context properties asserted hold 
typical interval modality fil form specify series searches states designated target formulas hold 
modality extracts searches current state 
adopt non strict interpretation includes state order fil insensitive finite stuttering states 
target search subcontext current context state located searches specified preceding state located searches specified subcontext finite infinite stuttering state 
subcontext constructed context fil formula requires formula hold state subcontext 
target search located current context locates current state state evaluated constructed formula regarded hold vacuously 
brevity refer state target formula holds state 
say search succeeds context contains state search locates state holds fails 
search fails subsequent searches search pattern regarded fail 
example modality denotes search formula comma denotes composition searches 
left endpoint interval searching state state state 
right endpoint interval starting left endpoint searching state 
interval constructed searches succeed hold state located search interval empty 
case formula asserts holds state context begins state located search extends include state located search searches fails search locates current state holds vacuously 
fil defines trivial search patterns addition non trivial search patterns obtained composing searches 
trivial search patterns situations modality gammaj attempts construct prefix context state preceding located modality 
attempts construct suffix context state located 
henceforth eventually operators propositional temporal logic ptl defined fil derived operators abbreviates formula holds current state state search evaluated search locates current state 
generally fil permits specification independent searches searches right endpoint start state searches left endpoint 
consider independent searches 
false abbreviates informally requires formula holds current state interpretation follows default true semantics search requires state holds 
default true semantics interval search modalities described yields weak operators sense targets searches need located specifications interval designate empty context 
strong versions interval search operators provided fil derived operators definitions similar illustrated henceforth eventually 
strong search formula denoted strong interval endpoints specified written jj 
searches patterns strong weak 
weak search interpretation described 
strong search predicated locating targets prior searches prior searches exist 
condition strong search fail 
similarly search targets located jj requires interval non empty 
conventions yield interpretations interval formulas jj formulas require ffl interval modality constructed context holds state interval ffl strong search fail prior weak search fails 
additionally jj requires ffl searches succeed locate current state interval empty 
consider example formula ajj effect weak searches predicate invariant locating positive transition formula positive transition located strong search guarantees existence state 
hold state positive transition strong interval precludes empty context 
requires positive transition causes positive transition holds state interval begins state positive transition ends state preceding positive transition graphical representation formula gil briefly gil formula read top bottom left right 
topmost interval represents outermost context implicit corresponding fil formula horizontal dimension represents progression states time time increases left right 
composition searches represented horizontal concatenation search arrows search targets left justified arrowheads 
type arrowhead indicates type search single arrowhead weak search double arrowhead strong 
similarly type line segment denoting interval indicates type interval single line weak interval double line strong 
assert formula holds state interval formula drawn left justified left endpoint interval 
assert formula invariant interval formula positioned interval indented right left endpoint 
assert formula eventually holds interval diamond placed interval formula left justified diamond 
assert formula holds state suffix interval formula left justified beneath triangle positioned directly final arrowhead representation cases horizontal extent formula lies horizontal extent contexts formula nested 
boolean composition laid vertically gil vertical layout conjunction indicated stacking formulas conjunction operator 
right braces visually delimit formulas eliminate ambiguity 
general formulas examples arbitrary 
require targets searches strictly propositional permit nesting intervals 
large range temporal properties naturally expressed corresponding fragment gil 
semantics formulas containing temporal search targets nested intervals counterintuitive due interaction default valuations searches fail intervals empty 
state sequences simply efficiently checked absence features 
detailed definition gil fil 
defines translation graphical formulas textual ones 
example specifications section illustrates gil specifying temporal properties sample concurrent system 
specifications ada simulation automated gas station derived 
simulation operator task models human operator gasoline pumps multiple customers 
pumps modeled array pump tasks customers array customer tasks 
simplicity consider version single pump task 
customers name array customer tasks 
customer pumping gasoline collects change afterward 
represented rendezvous entry operator pre pay 
amount paid index customer task passed operator rendezvous 
customer calls pump start pumping start pumping pump finish pumping finish obtaining amount charged pump result rendezvous 
pumping customer receives change operator rendezvous customer change entry 
pump activated call operator pump activate limited amount gasoline pump accepts call pump start pumping followed call pump finish pumping 
notifies operator current charges call operator charge waits reactivated 
operator maintains queue records customer tasks received change 
activates pump adding customer empty queue dispensing change queue empty 
accepting call charge entry operator dequeues record dispenses change customer indicated record 
gas station example relatively simple concurrent program exhibits subtle temporal properties difficult verify 
debugger described discover deadlocks versions program 
third version prevents particular deadlock occurring contains different deadlock occur customers gasoline 
primitive propositions gil formula viewed representing conditions summarize important properties execution histories 
purposes example assume conditions triggered occurrence specific events cancelled flexible definitions conditions 
assume initiation termination rendezvous define events 
gil formulas describe properties executions system definitions needed conditions appearing formulas 
various methods defining conditions 
example programmer annotate program formal comments specifying initial values conditions events trigger cancel conditions 
gas station example assume definitions types conditions pay pump represents integer indexing range customers 
definition conditions initially false pay triggered initiation rendezvous customers operator pre pay cancelled initiation rendezvous operator customers change pump triggered initiation rendezvous customers pump start pumping cancelled termination rendezvous customers pump finish pumping 
pay true customers received change pump true customers pumping gasoline 
specifications representative kinds temporal properties wish verify gas station system 

customers pumps gasoline 
pump pay 
customers eventually pumps gasoline point receives change 
pay pay pay pump fair 
customers customers customers gain access pump customers 
pay pay pump pump pay pay pay convenience shorten names conditions primitive propositions sections 
pay pump pay pump obtain fil translations gil specifications shown ffl ffl ffl fair pj pj test oracles gil specifications describe properties state sequences oracles check properties system executions 
reconcile viewpoints system executions represented traces events 
definitions conditions determine events monitored testing system developer indicate additional events interest 
traces generated testing induce state sequences evaluate specifications 
traces satisfy gil specifications specifications true evaluated state sequences 
shows prefix event trace generated executing ada simulation automated gas station described 
traced events affect conditions specifications 
vertical dashed line labeled acc denotes initiation termination rendezvous long identifiers shortened save space 
initial represents start execution 
state sequence induced trace displayed graphically trace 
shaded bars show conditions true clear bars show false 
full trace easily seen satisfy specifications section 
trace violates gil specification oracle construct formula describing trace contradicting specification 
contradiction produced system distributed execution defines partial order events trace linear ordering consistent partial order 
oracle negation specification special case said negation 
help system developer discover nature location fault oracle display trace contradiction horizontally aligned show points trace individual subformulas contradiction hold 
figures show faulty traces generated executing gas station program 
trace call events addition rendezvous events help understanding behavior 
trace second rendezvous customers operator pre pay produces positive transition pay followed negative transition 
strong search invariant fails evaluated state second rendezvous customers operator pre pay 
shown contradiction displayed trace 
alignment shows states subformulas hold 
inspection trace shows system deadlocked execution 
trace violates fair 
shown contradiction displayed state sequence rendezvous customers operator pre pay produces positive transition pay pay hold 
pump holds interval begins transition extends pump state 
invariant fair violated state execution 
constructing test oracles automata theory provides theoretical foundation constructing oracles gil specifications 
gil formula determines equivalent finite state automaton accepts precisely state sequences satisfying formula 
state sequence violates gil specification automaton associated accepts automaton information accepting run case violates align trace produced formula contradicting satisfied convenience give results section terms fil formulas obtained translating restricted gil specifications fil 
automata constructed fil decision pro brevity say contradiction contradiction specification mean contradiction sense unsatisfiable 
acc cus op acc cus op acc cus op acc cus pump start acc cus op acc cus pump start acc op cus change acc cus op acc cus op acc cus pump start acc cus op acc cus pump start acc op cus change pay pump pay pump initial 
cus pump finish cus pump finish cus pump finish cus pump finish sample trace associated state sequence 
pay pay pay pay acc op cus change acc cus pump start pump acc cus op acc cus op call cus pump start acc pump op charge acc cus pump start call cus pump start call op cus change call pump op charge acc pump op charge acc cus pump start initial cus pump finish cus pump finish pump pump cus pump finish trace violating formula shows fault 
pay pay pay pay pump pump pay pump pay pump acc cus op acc cus op acc cus op acc cus pump start acc cus op acc cus pump start acc op cus change acc cus op acc op cus change initial cus pump finish cus pump finish cus pump finish 
trace violating fair formula shows fault 
cedure provide practical foundation oracle procedure 
place decision procedure assumes formulas expressed exclusively terms weak searches weak intervals propositional connectives 
higher level temporal operators translated weak searches weak intervals 
increases size formulas depth interval nesting 
minimal set temporal primitives simplifies definition automaton formula generally requires larger complex formula turn produces exponentially larger automaton 
additionally fil decision procedure requires automata fil formulas interpreted infinite state sequences 
event traces generated testing finite 
oracles require power additional complexity automata 
section describes algorithm associating finite state automata fil formulas provides practical foundation oracles 
algorithm requires fil formula negation pushed propositions boolean connectives conjunction disjunction negation search targets strictly propositional maximum depth interval nesting 
formula required form algorithm builds deterministic finite state automaton dfa accepts precisely finite state sequences satisfying denote dfa formula dfa formula produced variation known tableau method simultaneously builds automaton restricted fil formulas 
nodes annotated sets formulas derived series reductions 
intuitively sets annotating node viewed imposing alternative requirements state sequence remaining state sequence satisfy formulas requirement sets associated node 
definitions terminology adhere notational conventions description 
symbols subscripts denote primitive propositions denote propositional formulas denotes search pattern possibly empty sequence see example satisfiability algorithm ptl 
refer states automaton nodes states avoid confusion states automaton states concurrent system comprise automaton input alphabet 
searches trivial search pattern 
symbols denote fil formulas required form 
assume formulas syntactically formed context symbol appears may impose additional restrictions form 
write represent interval modalities jj represent search modalities operator fi ptl expressible fil 
tableau methods operator describe requirements checked state sequence states 
operator section describing construction dfa 
ptl formula fif holds th state sequence states holds th state sequence 
formula form fif said deferred called core fif refer formula contain operator basic formula 
tableau methods typically represent formulas sets 
manipulation formulas easily described set operations 
regard set formulas representing conjunction elements set sets formulas representing disjunction formulas represented elements 
abuse notation slightly identifying set representing formula formula 
instance say equivalent formulas represent equivalent 
convention empty set represents true 
refer primitive propositions negations atomic formulas 
set atomic formulas contain primitive proposition negation said consistent 
symbol denotes consistent set atomic formulas regarded assumptions current state 
identification conjunction elements permits write signify assumptions guarantee propositional formula holds current state 
family parameterized reduction relations generating requirement sets successors node dfa 
intuitively requirement hold current state assumed hold current state reduces written may substitute boolean combination syntactically simpler formulas deferred formulas definition relations defined smallest relations satisfying rules 
ffl true fi true fi ffl ffl gf fa gf gf empty gf gammaj gf fa gf gf ffl gammaj gf gf gammaj gf empty gb ab fi true gb fi false gf fi gf fi gammaj gf true ffl reduction assumption formally justified observing conjunctions equivalent 
formulas representing requirements characterized follows 
definition basic fil formula defined smallest set formulas ffl ffl main connective boolean operator operator operand said connective ffl reduces assumption requirement set denoted symbol subset regarded constraining current state conjunction formulas hold current state 
set requirement sets denoted symbol regarded imposing alternative requirements requirement sets hold current state 
say deferred formulas deferred 
deferred define core fif similarly say deferred requirement sets deferred 
extend scheme representing formulas sets specify pairing formulas regarded expressing assumptions regarded expressing requirements 
set representation formula set assumptions identify pair conjunction ax identify set pairs disjunction 
intuitively pair represents way satisfying assuming true current state holds current state 
symbol denotes node dfa 
input alphabet set states interpretations primitive propositions 
label transitions propositional formulas states interpret label transition describing states transition taken 
transition corresponds multiple transitions conventional dfa representation input symbols label transitions 
transition label denoted 
labels transitions leaving node partition state space sense labels holds state 
decomposition procedure describe decomposition procedure heart algorithm constructing procedure decomposes set requirement sets set assumption requirement pairs properties equivalent ik fis assumptions partition state space annotation node properties justify transition label node annotated property permits classified accepting final 
holds state input sequence guarantees holds state final node 
accepting 
define predicate ensure 
rules define accept basic formula propositional formula provided strong evaluate conditions rules 
shown implied accept 
decomposition procedure operations defined set pairs assumptions flat requirement sets 
accept accept accept accept accept accept accept fb gg accept gg empty gg accept gammaj gg gg true gg false gg accept gammaj gg empty true false gammaj gg true gammaj gg false gammaj gg accept true false rules evaluating accept operation shown transform assumption requirement pairing equivalent 
boolean decomposition 
pair formula replace gamma 
replace gamma gamma 
requirement reduction 
pair replace gamma 
assumption 
true consistent replace 
subsumption 
delete replace gamma 
decomposition procedure shown 
step initializes equivalent decomposed steps operations defined obtain equivalent representation requirements deferred distinct assumptions pairwise inconsistent assumptions strong determine acceptance 
step sets requirement sets formed cores requirements sets associated identical assumptions 
clearly formula fis input set requirement sets output set form ika true inconsistent accept defined equivalent ik fis 

set 
repeatedly apply operations requirement sets appearing deferred 

continue applying assumption distinct assumptions appearing pairwise inconsistent accept core defined 
assuming form phi fi fi psi set ik core decomposition procedure ranges representative elements distinct equivalent disjunction assumptions true operations affect assumptions assumption subsumption operations preserve disjunction assumptions initially true 
decomposition procedure correct 
termination step follows observations pairing requirement deferred strong assumptions permits decomposed boolean decomposition requirement reduction assumptions strengthened degree necessary assumption 
assume valuation split 
conditions termination step met assumptions introduced atomic formula assumptions seldom need split extent 
decomposition procedure terminates 
subsumption operations streamline decomposition procedure needed correctness 
size sensitive choice operations applied order applied 
particular assumption step needed reduce requirement step necessary obtain mutually inconsistent assumptions determine acceptance 
subsumption help reduce sizes requirement sets number requirement sets generated 
applied inconsistently subsumption increase size dfa applied indiscriminately cost checking conditions subsumption prohibitive 
development heuristics streamlining decomposition procedure topic ongoing research 
dfa construction shows algorithm constructing formula required form 
input basic fil formula negation pushed propositions boolean connectives search targets strictly propositional maximal depth interval nesting output set nodes nodes set start start nodes set final accepting nodes set trans transitions annotation function nodes 
set trans final 

create unmarked node 
set nodes start 
node nodes marked select unmarked node nodes mark 
procedure decompose pairs 
accept final satisfies add trans create unmarked node add nodes final add trans set elseif nodes gamma final satisfies add trans create unmarked node add nodes add trans set dfa construction algorithm start node created step annotated single requirement set step indicating hold state input sequence 
step generates transitions leaving node corresponding successor nodes repeatedly successors existing nodes generated 
marking scheme distinguish nodes successors calculated unmarked nodes nodes selected said calculation marked nodes 
step guaranteed terminate finite 
negation illustrate dfa constructed algorithm 
pushing negation interval formula changes modes strong weak weak strong interval searches endpoints 
write negation pj apply algorithm produces automaton shown nodes annotated requirement sets shown automaton 
nodes contain accepting requirement set indicated diagram 
final nodes 
true node node pj pj pj node node pj gammaj pj pj pj node node false true pj pj dfa pj worst case size dfa constructed algorithm exponentially larger corresponding nondeterministic finite automaton nfa produced gil proof checker 
preliminary investigation suggests dfas formulas expressing standard safety liveness requirements typically smaller corresponding nfas formulas running time algorithm building dfas better 
example formula gil proof checker builds local automaton containing nodes transitions 
elimination unsatisfiable eventualities reduces numbers approximately 
similarly dfa fair constructed algorithm contains nodes transitions corresponding local automaton produced gil proof checker contains nodes transitions numbers reduced approximately 
displaying fault trace violates specification oracle provide system developer information fault detected nature fault 
graphical representation gil permits formula describing trace contradicting specification displayed appropriately aligned trace order help system developer see occurred 
develop systematic method displaying faults shown cases obtained appear specifications standard system properties 
section presents example illustrating basic technique 
consider trace reproduced 
node numbers vertical dashed lines indicate nodes encountered run state sequence 
convenience discussion write sequence nodes accepting run ith node 
node node 
similarly write state sequence induced trace ith state state sequence 
represented bar lines dashed lines 
abbreviations various formulas pj pj pj gammaj method building contradiction begins choosing path requirement sets pay pump initial call pump op charge cus pump finish acc cus pump start call cus pump start acc pump op charge cus pump finish call cus pump start acc cus pump start acc cus op acc cus op acc cus op acc op cus change acc pump op charge acc cus pump start acc cus op gf gf gf gf gf gf gf gf gf gf gf gf gf gf gf gf gf gf gf run state sequence generated trace sequence requirement sets displaying contradiction 
generates accepting requirement set final node path generated reverse order 
start suitable choices choose fir denotes label transition generated decomposition assumption requirement pair 
example take sequence requirement sets shown denote requirement set directly 
requirement sets extracted run indicate states formulas hold 
requirement sets determine display contradiction shows fault trace 
assert state 
example choose align diamond look formula drawn assert changes requirement sets brought reducing reducing reductions signify evaluated strong searches locate respectively 
failure reduce indicates search pay fails invariant 
obtain contradiction displayed requirement sets shown 
different paths requirement sets accepting run produce contradictions alter manner contradiction displayed 
example take ffl ffl ffl 
definition takes steps generate 
reduction true generates reduces reductions causes diamond aligned second corresponds locating search target causes drawn point 
choice requirement sets results contradiction displayed shown 
related model checking typically verifying concurrent system satisfies temporal specifications 
model checking requires examination reachable system states suffers state explosion 
exhaustive techniques computationally infeasible special classes systems potential practical limited 
dynamic analysis methods testing run time monitoring exhaustive analysis techniques impractical 
model checking feasible testing needed check model analyzed accurate representation final system 
interval logic il largely inspired design fil 
presentational semantic differences il fil pay pay pay pay acc op cus change acc cus pump start pump acc cus op acc cus op call cus pump start acc pump op charge acc cus pump start call cus pump start call op cus change call pump op charge acc pump op charge acc cus pump start initial cus pump finish cus pump finish pump pump cus pump finish contradiction displayed different sequence requirement sets 
different respect expressiveness decision procedures complexity 
detailed comparison il fil 
oracles concurrent systems formal specification language suitable procedure checking traces 
idd debugger distributed programs uses limited subset il expressing synchronization constraints 
idd checks assertions runtime stopping execution assertion violated 
real time interval logic ril designed provide oracles real time systems 
ril undecidable permits traces efficiently checked 
ril trace checker currently integrated taos toolkit ril oracles 
sequencing constraints expressed tsl task sequencing language oracles tsl runtime system monitors executions ada tasking programs 
state transition diagrams interpreted describing sequencing constraints oracles testing protocols 
tsl state transition diagrams formal logics support reasoning properties systems degree gil 
taos supports gil oracles means simple prototype trace checker 
checker scans trace times locate intervals evaluate formulas 
scale long traces support line checking 
contrast approach described depends dfas derived gil formulas translation fil 
permits traces checked generated violation specification reported early trace possible 
consequently approach support run time monitoring debugging addition checking logged traces 
trace violates specification able construct formula describes fault trace providing valuable feedback user 
formula trace displayed graphically help user see violation detected 
concurrent systems distributed inherently nondeterministic collecting traces regenerating executions pose difficult research problems 
obtained traces manually instrumenting ada source program executing uniprocessor 
delay statements inserted induce different behaviors 
directions automating techniques described permit undertake longer term study aimed assessing effectiveness gil oracles 
plan automate algorithm checking traces described section 
tools build existing gil tools integrated taos toolset provides comprehensive support testing including generation traces management test artifacts 
automate display faults necessary refine heuristics illustrated section systematic procedure 
investigating effective methods displaying traces 
display tools support different views traces different levels abstraction order help user interactively examine sections trace 
studies involving substantial applications permit investigate tradeoffs expressiveness efficiency analysis 
current reduction rules extended accommodate arbitrary gil formulas restrictions search targets nesting intervals 
reason features numerous experiments gil 
experiment involved relatively small scale applications 
complex properties larger systems may naturally expressed restrictive subsets gil admit suitable trace checking procedures 
example searches interval formulas prohibited nested intervals permitted limited depth 
hope achieve tenable balance expressiveness analyzability investigation 
authors acknowledge john gannon advice helpful comments draft 
gannon 
state model checking event driven system requirements 
ieee trans 
software engineering jan 
zhao 
trace analysis conformance arbitration testing 
ieee trans 
software engineering nov 
buchi 
decision method restricted second order arithmetic 
proc 
congress logic methodology philosophy science pp 
stanford university press 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm trans 
programming languages systems apr 
dillon kutty moser melliar smith ramakrishna 
graphical specifications concurrent software systems 
proc 
th ieee inter 
conf 
software engineering pp melbourne may 
dillon kutty moser melliar smith ramakrishna 
graphical interval logic specifying concurrent systems 
acm trans 
software engineering methodology 
appear 
harter heimbigner king 
idd interactive distributed debugger 
ieee inter 
conf 
distributed computer systems pages 
helmbold luckham 
debugging ada tasking programs 
ieee software pp mar 
kemmerer ed 
proc 
sigsoft rd acm symp 
testing analysis verification key west fl dec 
acm sigsoft software engineering notes 
kutty ramakrishna moser dillon melliar smith 
graphical interval logic toolset verifying concurrent systems 
proc 
th conf 
computer aided verification lncs pp jul 
springer verlag 
lamport 
temporal logic 
proc 
ifip congress pp paris 
manna wolper 
synthesis communicating processes temporal logic specifications 
proc 

logics programs lncs 
springer verlag 
ramakrishna dillon moser melliar smith kutty 
automata theoretic decision procedure interval logic 
proc 
th conf 

software technology theoretical computer science lncs pp dec 
springer verlag 

real time interval logic reasoning executions real time programs 
kemmerer pp 
richardson 
taos testing analysis oracle support 
proc 
inter 
symp 
software testing analysis seattle wa aug 
richardson aha malley 
specification test oracles reactive systems 
proc 
th inter 
conf 
software engineering pp melbourne aus may 
rosenblum 
specifying concurrent system tsl 
ieee software pp may 
schwartz melliar smith vogt 
interval logic higher level temporal reasoning 
proc 
nd acm symp 
principles distributed computing pp montreal canada aug 
