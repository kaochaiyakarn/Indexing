electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages types processes chu spaces vaughan pratt computer science department stanford university stanford usa match types processes putting values correspondence events coproduct parallel composition tensor product 
bring types processes closer correspondence broadening unifying semantics chu spaces transformational logic 
point connection appears break pose question failures intrinsic cultural 
types processes data programs 
curry howard propositions types correspondence propositions replaced processes 
extent types processes part working programmer toolkit propositions types processes correspondence central practice programming propositions 
connection works mathematically point 
similarities differences programs data studied decades angles 
particular point view observations event state duality close cousin time information duality essentially way dualities kind encountered mathematical structures 
ii duality just phenomenon universal foundation processes mathematics 
observation traced far back nielsen plotkin winskel establish duality prime event structures prime algebraic domains 
event structures temporal ordering consist supported onr number fl published elsevier science pratt events scott domains information ordering consist states 
duality true categorical duality sense reverses morphisms respective categories 
transitions places petri net hint duality respectively universal existential firing transition involves incident edge token passing place involves just path place 
relatively observed true duality morphism reversing sense 
true duality arises mathematical situations best known important applications 
duality locally compact abelian groups finite case reduces self duality finite abelian groups plays central role complementarity principle quantum mechanics 
duality stone spaces boolean algebras ordered stone spaces distributive lattices cornerstone modern model theory 
finite dimensional vector spaces infinite dimensional extensions topological vector spaces hilbert spaces basis linear algebra applications 
observation ii constitutes author interest :10.1.1.52.5007
core theorems observation small concrete categories categories algebraic relational structures homomorphisms concretely representable categories chu mackey spaces continuous maps 
chu mackey space just chu space set simply rectangular array function theta sets index rows columns respectively 
means rows distinct likewise columns 
type algebra comparison order morphisms principal structural elements connections types processes propositions comparison complementation aggregation cases propositions types processes objects compared inclusions inequalities case propositions functions proofs case propositions 
seen special case viewing inclusions functions satisfying case propositions viewing simple inequalities nonempty equivalence classes proofs entails just exists proof may understand process comparing statically terms asymmetric distance dynamically terms motion case connectedness comparison comparison invites composite comparison invitation replied statically pratt suitable triangle inequality transitivity condition dynamically composite motion construction 
types represented naively sets values processes equally naively sets traces comparison reduced inclusion 
types inclusion represents subtype relation 
processes represents spectrum safety smaller processes liveness larger parties 
sophisticated form comparison provided functions transform types types processes processes 
respective projections type theta constituent types sensibly modeled inclusion 
important elements inclusion retained general comparisons permitting familiar logic inclusion extended considerably familiar logic transformation 
logics equally part type theory process theory go long way shaping essentially way 
processes comparisons processes inclusions traces process may regarded discrete set explicitly structure relating traces simple inclusions see structure 
process ab ac denoting set fab acg raises question equals 
underlying question partial order prefix order individual traces reveals common prefix ab ac 
common mean 
say looking dollar mean lost dollar bill buck 
obviously ab ac common label respective events leaves open events fact 
way resolve notion prefix explicit requiring processes prefix closed 
fab acg expands fffl ab acg 
labeling notion explicit working multisets 
permits multiset fffl ab acg alternative result prefix closure prefix ab prefix ac 
inclusion longer defined sense fffl ag fffl ag subsets fffl ab acg counting sense 
formalize multiset fa ag set elements say labeling function assigning elements 
provided corresponding elements set fffl ab acg say ab ac 
order inclusion comparisons yield right answer time obliged arbitrary choices consistently traces 
objectionable part mathematically speaking arbitrariness requirement consistent usage arbitrary elements 
exactly objection applies gensym atoms appears screen printing result query lisp 
point printing appears connection 
pratt functions better job inclusions 
inferring inclusion trace identities express relationship fffl ag fffl ab acg explicitly function set 
function map set second category theorists mean inclusion embedding 
labels realized labeling function need commute embedding just goes ride longer rely labels determine traces connect processes connection explicitly function 
solution applies printing gensym atom 
line drawn connecting occurrences reduced mere blob real content clearer cluttered arbitrariness 
seen distinct roles functions catering keeping track element identities evolving multisets 
complementation motion oriented perceived orientation depends perceiver 
facing way reverses objects motion composition object motion composition naive type theory complementation leaves objects sets untouched reverses subtype relation 
processes complementation interchanges safety liveness 
situations depended inclusion determining poset 
order dual poset poset complementation function poset 
logic reverse inclusion inclusion provided stick reasoning partial orders defined inclusion reverse inclusion 
complementation sends argument different poset operation combining complement need heterogeneous 
long algebras types processes stick just poset structure don operations issue just need keep track poset inequality reasoning refers 
passage inclusions functions works equally smoothly 
potential sticking point converse function general function 
solutions suggest 
solution note converse function binary relation 
suggests want continue complementation concrete setting sets suitable morphisms right morphisms binary relations functions 
pratt problem solution type theory heavily function oriented 
limits colimits behave differently category rel sets binary relations behave category set sets functions setting standard expectations normal behavior operations 
particularly rel product coproduct operation object parts corresponding coproduct set 
solution meets concern simply observing set op category sets functions category 
justifies complementation functions reasoning justified complement inclusions order dual poset poset 
posets necessary keep track structure comparison 
case need keep track comparison function term morphisms set op notice just reinvented essential ingredients order logic ostensibly different path frege peirce 
functions map sets sets course effect map boolean algebras boolean algebras 
precisely category set op equivalent category complete atomic boolean algebras complete atomic needed infinite boolean algebras 
complement set power set caba boolean operations arbitrary union complement relative singletons fag atoms 
recover set caba isomorphism equivalence categories requires atoms complement function complete boolean algebra homomorphism defined ffi ffi 
maps opposite direction complement 
example complement successor function mod oe complement 
complement power set 
complement oe function sending subset represented characteristic function ffi oe 
just predecessor function acting pointwise elements subset 
complement constantly zero function hand act pointwise maps subsets containing zero space containing zero empty set 
underlying general principle contravariance functor hom gamma op set object called dualizing object category preceding example category set set hom gamma set op set contravariant power set functor sending set powerset hom function function sending element hom element ffi hom 
pratt may bit core idea simple 
returning generality morphism result attaching left morphism composing yield morphism points right attaching way stretches left 
change behavior right moving morphism left moving essence contravariance 
identifying called complementation turn type morphisms type functions point complementation turned morphisms functions taken set set morphisms choice dualizing object 
obtain functions way caba homomorphisms 
prefer complementation yield morphisms homogeneous operation particular apply second third time 
necessary homogeneity achieved replacing external hom op theta set suitable internal gammaffi op theta closed category sense complementation construction defined terms leaves dumping subcategory set 
nice naive view complementation facing direction realized complementation satisfying double negation 
general rely direction reliably map necessarily conversely 
obvious choice morphism purpose evaluation part structure closed category apply element map yielding element direction robust procedure extracting element map satisfying double negation explicit requirement 
requirements closed categories negation constitute defining characteristics barr autonomous categories 
interprets complementation classically satisfying double negation realizing intuition complementation simple reversal 
particular method constructing categories chu mackey construction described appendix 
case ordinary chu spaces chu construction applied category set additional advantages accommodating essentially transformational mathematics extending event structures natural way :10.1.1.39.673
circumstances combine complementation appealing 
assume henceforth 
pratt aggregation aggregation forms large collections small 
operation aggregation definable arities practical purposes customarily defined arities finite arities obtained composition 
normally associative commutative 
aggregation may disjunctive conjunctive depending perceive elements aggregated alternatives disjunctively coexisting entities conjunctively 
complementation typically interchanges de morgan dual conjunctive aggregation seen having disjunctive quality vice versa 
having disjunctive quality necessarily thing specific disjunctive operation 
aggregations disjunctive conjunctive possible de morgan dual different 
situation arises example de schroder calculus binary relations abstracted relation algebra ra onsson tarski logical relative versions conjunction disjunction 
structure arises girard linear logic ll additive multiplicative operations match perfectly logical relative operations respectively relation algebra 
interaction comparison 
aggregation interacts comparison complementation 
interaction comparison depends particular operation defined 
basic ways interest 
way define binary disjunction conjunction respectively left right adjoints diagonal delta categorical jargon iff iff stated posets define respectively aggregation operations lattices 
read saying element upper bound second dual 
define join meet respectively lattice 
relation algebra union intersection relations peirce called logical operations 
definitions interpreted categories define isomorphism categorical sum product interpreting hom iff isomorphism natural switching upper case moment 
sum isomorphism matches functions pairs functions 
product correspondence pairs functions theta 
interpret element map definition theta identifies elements pairs elements respectively exactly ordinary pratt meaning theta set 
nice thing meaning remains category products 
sum exists natural dual correspondence 
interpret predicate map allowing object understood consisting truth values definition identifies predicates pairs predicates respectively 
ordinary definition sum set disjoint union natural way think sum having additional benefit generalizes smoothly category sums 
second general kind aggregation notated omega arises poset implication called residual binary operation theta monotone antimonotone category counterpart implication internal gammaffib functor gammaffi op theta aggregation called tensor product defined left adjunction holding fixed serves unary operation effect going invert 
reduces elementary definition omega iff stated posets reinterpreted categories putting morphisms omega natural bijection morphisms 
omega commutative residuals called right residual satisfying omega iff left residual gamma satisfying omega iff gamma written symmetric case sloppy 
determine determined tensor product omega known example provided relation algebra noncommutative composition binary relations tensor product sense having right left residual respectively 
ordinary types concurrent processes omega taken tensor product experience commutative 
pursue noncommutative case 
tensor product coincides ordinary product lattice lattice called heyting algebra 
category tensor product ordinary product category said cartesian closed 
ra happens take implication residuals ordinary boolean implication viewed function left adjoint just logical conjunction meet 
ll situation arises implication intuitionistic implication gammaffib underlying coalgebra usually tensor product specified independently asks right adjoint arguments 
practice tensor product adjoint convenient start defining adjunction 
pratt loosely structure preventing gammaffi behaving intuitionistic implication 
situation implication residuation internal hom left adjoint naturally called subtraction having tensor sum right adjoint 
happens automatically presence complementation treated ra peirce called de morgan dual composition relative sum ll girard called de morgan dual tensor product par notated 
interactions aggregations 
interactions conjunctions disjunctions various kinds constitute various distributivity laws 
additive meet join sum product distributes distributive lattice distributive category distributivity law automatically implies 
necessarily omega omega omega omega defined colimits commute 
practice omega omega holds conversely 
weak linear distributivity 
interaction complementation 
involved interaction aggregation comparison 
interaction classical complementation kind consider extends picture 
logical additive conjunction disjunction de morgan duals ra ll 
happens relative multiplicative conjunction omega disjunction process models turn type algebra process algebra 
process algebra best developed particular model mind 
choice model influences natural choice operations algebra 
treating process algebra shall home preliminary choice process model 
process algebras acp origins algebra regular expressions process algebra adjoining suitable parallel composition operator 
regular expressions constitute ideal algebra sequential computation trace semantics computer science students taught early 
perfect starting point process algebra 
passage concurrency naively assumes standard model computation sequential simply omission operators distinguishable regular operators presence concurrent processes 
thesis true concurrency standard model sequential computation needs just additional operators model concurrency 
pratt operation merely ab ba atomic certain connectedness ab ba expressing independence 
connectedness ab ba implies choice goes 
choice involved truly independent events 
standard model express connectedness terms refinement sequences subevents 
am 
interleave grid 
presence interleavings witnesses desired connectedness 
somewhat artificial representation connectedness feature expressed standard model 
notion expressed better mazurkiewicz traces explicitly represent independence terms partial monoid ab ba 
equivalently case independence limited events time higher dimensional automata hda express information geometrically form filled square having ab ba boundaries 
hda go mazurkiewicz traces able express events independent children turns riding 
far simplest representation set fa bg consisting events general independence set events represented discreteness sense lack structure 
discreteness starting point proceed assign structure processes 
basic form structure temporal expressed constraints order events 
order naturally expressed partial ordering take meaning precedes time equivalently occurred form structure labeling events actions 
model string linearly ordered set events labeled actions expressed terms alphabet sigma act actions labeling function sigma assigning actions events 
labeled set performs function multiset sigma collection elements sigma allowing repetitions element 
set serves merely hang labels 
structure ordered labeled forms partially ordered multiset pomset 
pomsets alphabet sigma generalize words sigma requiring order linear 
pomset process sense events eventually happen 
case nonlinear pomsets suppose discrete choice order events 
assumes order occurrence defined need case 
run pomset may pomset augmentation order pratt incomparable elements comparable limiting case linearly ordered run 
augmentation forces discrete choices augmentation necessary pomset may run 
global notion choice may expressed set pomsets run chooses pomset possibly augmented explicit augmentation avoided sets pomsets augment closed 
set pomsets forms process 
local form choice may expressed level events suitable conflict relation 
binary conflict symmetric irreflexive binary relation specifying pair events may occur 
holds may occur run 
case choice assuming events required precede occurred 
poset binary conflict relation satisfying event structure axiom forms prime event structure 
event structure axiom prevents happen prevents pomset equipped forms labeled prime event structure 
set pomsets represented single event structure forming disjoint union pomsets big pomset putting conflict pairs events coming different pomsets 
converse translation exists witness example shaped poset events satisfying event structure event structures labels established concurrency theory 
order start process algebra settle moment 
section shall need know functions event structures preserve structure event structure homomorphisms 
take monotone order preserving functions preserve conflict 
presence labels add requirement homomorphisms commute respective labeling functions leave labels 
process algebra process algebra pa operations choice sequence ab kinds concurrence asymmetric left merge variant 
choice sequence left merge operations evident counterparts type theory 
concurrence kind excellent different morphisms advocated winskel event structures defined partially synchronous parallel composition ordinary categorical product 
morphisms conventional regards preservation structure arise naturally chu spaces 
pratt match disjoint union definable appropriate category coproduct 
coproduct event structures morphisms defined previous section just disjoint union evident sense order conflict holding events different arguments coproduct 
compound event structure permits components run completely independently 
particular coproduct singleton event structures just discrete set 
operation useful specifying concurrent processes omega 
originally conceived ordinary categorical product author students identified tensor product 
posets pomsets tensor product reduces ordinary product classes forming cartesian closed categories 
metric spaces model real time turned ordinary product 
topic developed greater length 
basic example specification behavior system trains stations single railway line 
set trains set stations forms linearly ordered set case partially ordered time opposed say real time 
events various arrivals trains stations linearly ordered 
concurrency form resulting systems flowing occurs routinely nature computation 
pervasive concurrency phenomenon surely expressible process algebra 
provides appropriate operation 
posets ordinary categorical product cartesian product elements 
labeled alphabet product arguments evident labeling 
example train labeled station labeled event train station labeled 
event structures treats order posets treats conflict local phenomenon 
conflict event structures defined symmetric binary relation 
equivalently just example fa bg omega fc dg discrete sets discrete set subset occur 
putting conflict puts conflict expect 
put conflict visible conversely witnesses conflict event structure axiom combines obtain 
hand need entail 
definition event structures natural choice visibility argument agrees exactly tensor product chu representation event structures 
pratt process algebra operations concurrence omega propose match coproduct tensor product type algebra 
values types correspond events processes defined event structures 
clear correspondence variety structures type equipped event structure specialized type 
rest brings types processes generalizing chu spaces 
chu spaces rationale set equipped algebraic relational structure form nonempty relations arity 
absence structure represented algebraically empty signature relations having empty relations signature 
absence structure represented topologically discrete topology subset taken open 
shall reject usual condition open sets topological space closed arbitrary union finite intersection 
fact shall impose condition allowing combination open sets generalized notion topology 
topological representation fits naturally intuition set events independent possible states allowed 
open sets correspond states subset denotes state events subset occurred 
supposes individual event states occurred occurred represented state membership state 
collect states set atomic states 
state global process described function approach representing open sets valued characteristic functions greater diversity atomic states easily accommodated larger set example distinguish started ongoing completed take respectively 
corresponds topology valued membership open sets 
valued topology competitive higher dimensional automata 
example interference children turns riding child permitted ride expressed allowing states 
disallowed state assigns events children representing case child riding 
pratt chu spaces definition set 
chu space consists sets function theta shall chu spaces types processes 
type chu space viewed generalized topological space having set points values set open subsets valued membership relation indicates degree point belongs open set process set atomic states set events set global states atomic state event state say points isomorphic 
dually call states isomorphic 
chu space containing distinct isomorphic points states called separated extensional 
separated extensional 
types extensionality natural requirement open sets significance attached multiple occurrences open set topological space 
separated topological space points behave differently corresponds antisymmetry property posets 
fact finite topological space exactly preordered set reflexive transitive exactly poset 
property mild condition impose type merely ensuring type contains distinct isomorphic values 
processes distinct states naturally expected distinguished event atomic state different states 
extensionality reasonable requirement processes 
isomorphic events events completely synchronized atomic state global state reasonable allow distinct isomorphic events structural significance multiple perfectly synchronized events just understood single event 
modeling types processes shall restrict chu spaces 
chu spaces 
chu transform consists functions adjointness continuity condition chu spaces 
evident composition gf chu transform reasoning gf 
chu spaces chu transforms composed form category denoted chu set 
full subcategory consisting chu spaces denoted chu set 
category shall pratt working 
easily proved proposition useful juncture 
proposition chu transform extensional space uniquely determined goes separated space uniquely determined define forgetful functor chu set set functor faithful need uniquely determine restriction chu set faithful making category shall working concrete 
chu algebra subsume common algebra types processes algebra chu spaces 
chu spaces denote respectively 
write disjoint union theta theta sets theta cartesian product 
dual dual defined 
symmetry adjointness implies chu transform chu transform shows chu set self dual category equivalent fact isomorphic opposite chu set op dual chu space chu set self dual 
sum sum defined theta 
product product theta defined theta 
product easily seen just de morgan dual sum satisfying theta internal hom internal hom gammaffib defined theta set chu transforms 
definition understood terms rows chu spaces representations points 
function natural representation list values elements values taken representations rows indexed represented way theta matrix entry th element representation 
usefully depicted follows 
pratt oe rows representations drawn rows time columns drawn columns agreement matrices just content adjointness continuity condition chu transforms 
picture clear workings internal hom self duality chu 
tensor product omega left adjoint internal hom turns easily obtained omega gammaffib diagram transpose theta matrix 
points omega entries locations contents states possible choices represented matrix chu spaces types processes general idea follows 
hand chu spaces constitute universal class objects arguments detail summarized briefly section 
properly subsume extant methods constructing data types algebraic topological means 
second despite having apparently fixed notion morphism universal arbitrary small categories 
universal source structure equip type ideally suited type theory 
hand chu spaces natural generalization event structures proposed developed length gupta thesis van glabbeek plotkin 
represent event structure simply take chu space consists order ideals contain states chu space exactly configurations sets events satisfy constraints 
application chu spaces processes tended focus extending larger greatly enhance process modeling capacity approach 
possible model mutual exclusion reals model real time behavior 
chu spaces suited modeling concurrency 
just objects match way operations specifically sum tensor product omega important operations data types 
including operation extends pratt algebra rest multiplicative additive linear logic mall bringing theta important type operation operation plays central role data types 
concurrence respectively important operations processes 
admit operation processes turning event oriented schedule corresponding state oriented automaton obtain mall 
universality chu spaces supply promised arguments support universality chu spaces 
algebra carrier ary operation represent chu space defined follows 
take set tuples 
subsets tuple 
elements 
define tuple 
possible values 
represent homomorphisms 
algebras chu transforms unique right adjoint extensional construction 
stated algebras reads reasonably smoothly 
generalize arbitrary relational structures 
shown representation ary relational structures homomorphisms chu spaces chu transforms full embedding category :10.1.1.52.5007
furthermore embedding concrete meaning representing chu spaces carriers algebras represent transform functions 
pointed lafont streicher topological spaces represented chu spaces obvious way full embedding top chu set 
combining embedding generalizing structures multiple relations multiple sorts demonstrates chu spaces model relational structures topological structure 
categories considerably general just categories relational structures homomorphisms 
natural ask objects categories representable chu spaces sense fully embedded chu 
answer category arrows form set small category embeds chu set 
representation simple 
represent object chu space consists maps consists maps denotes composition ffi 
pratt represent morphism pair chu transform associativity composition 
theorem representation full embedding chu set 
furthermore take underlying set consist elements sense maps embedding concrete matter obvious dual sense 
embedding preserves duality 
hand embedding generality preserve limits colimits 
transformational logic section discussed type algebra including logic 
algebra justified logic 
structure inclusions logic familiar boolean intuitionistic logic relation algebra 
functions categorical logic considerably familiar categorical transformational logic 
categorical counterpart inequality ostensibly morphism 
comparison say gammaffib omega gammaffi omega just matter giving morphism function sending function 
choice morphism vary natural way varied morphisms constitute natural transformation 
naturality condition furthermore accomodate variables may appear covariantly contravariantly theorem omega gammaffib gammaffib 
done generalizing naturality dinaturality 
dinaturality strongest naturality condition desirable strengthen dinaturality invariance logical relations called 
speak logical transformations subclass dinatural transformations 
unfamiliar transformational logic important transformational logic types governing transformed 
equally important logical basis process transformation 
furthermore laws hold process transformation type transformation common structures proposing 
categorical transformational logic important 
past year investigating categorical logic chu spaces multiplicative fragment linear logic operations obtainable composition starting gammaffib 
goal identify dinatural necessary logical transformations fragment suitably robust change variables 
shown pairs terms total occurrences variable dinatural transformations terms chu set exact correspondence cut free proofs understood suitably abstractly multiplicative linear logic mix full completeness result sense abramsky jagadeesan hyland pratt ong game semantics replaced dinaturality semantics lines blute scott 
summer gordon plotkin able remove restriction variables 
entailed strengthening dinaturality necessitated presence accounted girard system 
unnatural character demands strengthening rule 
natural continuation extend understanding multiplicative fragment linear logic additive fragment exponentials 
scope linear logic general understanding logical character mathematical transformations highly desirable 
mismatches types processes correspondence matched coproduct tensor product rest multiplicative additive linear logic include mismatches concern rest type algebra process algebra 
shall look just central operations process algebra choice sequence 
natural representations operations chu spaces 
choice usually process algebra coproduct defined 
understood terms block matrices goes upper left lower right rest filled zeros 
sequence defined identifying way final states initial states theta consists states final initial operations job process algebra obvious general application type theory 
leave open question due intrinsic difference types processes simply represents cultural limitation currently think types 
samson abramsky radha jagadeesan 
games full completeness multiplicative linear logic 
journal symbolic logic 
baeten weijland 
process algebra 
cambridge university pratt press 
barr 
autonomous categories volume lecture notes mathematics 
springer verlag 
blute scott 
linear semantics 
annals pure applied logic 
blute scott 
shuffle hopf algebra noncommutative full completeness 
submitted symbolic logic 
brown gurr 
categorical linear framework petri nets 
mitchell editor logic computer science pages 
ieee computer society june 
brown gurr de paiva 
linear specification language petri nets 
technical report daimi pb computer science department aarhus university october 
crew meseguer pratt 
temporal structures 
math 
structures comp 
sci july 
gupta 
chu spaces model concurrency 
phd thesis stanford university september 
tech 
report available ftp boole stanford edu pub ps gupta pratt 
gates accept concurrent behavior 
proc 
th ann 
ieee symp 
foundations comp 
sci pages november 
hyland ong 
fair games full completeness multiplicative linear logic mix rule 
available ftp ftp comlab ox ac uk ps gz pub documents luke ong 
onsson tarski 
representation problems relation algebras 
bull 
amer 
math 
soc 
onsson tarski 
boolean algebras operators 
part ii 
amer 
math 
lafont streicher 
games semantics linear logic 
proc 
th annual ieee symp 
logic computer science pages amsterdam july 
mackey 
infinite dimensional vector spaces 
trans 
amer 
math 
soc 
mazurkiewicz 
concurrent program schemas interpretation 
proc 
aarhus workshop verification parallel programs 
nielsen plotkin winskel 
petri nets event structures domains part theoretical computer science 
petri 
fundamentals theory asynchronous information flow 
proc 
ifip congress pages munich 
north holland amsterdam 
pratt pratt 
composition processes 
proceedings ninth annual acm symposium principles programming languages january 
pratt 
constructions order theoretic models concurrency 
proc 
conf 
logics programs volume lecture notes computer science pages brooklyn 
springer verlag 
pratt 
modeling concurrency partial orders 
int 
parallel programming february 
pratt 
modeling concurrency geometry 
proc 
th ann 
acm symposium principles programming languages pages january 
pratt 
second calculus binary relations 
proceedings mfcs volume lecture notes computer science pages gda poland 
springer verlag 
pratt 
stone gamut mathematics 
logic computer science pages 
ieee computer society june 
pratt 
broadening denotational semantics linear logic 
special issue linear logic volume entcs electronic notes theoretical computer science tokyo 
pratt 
full completeness linear logic chu spaces 
electronic notes theoretical computer science volume pittsburgh 
url www elsevier nl locate entcs volume html pages 
van glabbeek plotkin 
configuration structures 
logic computer science pages 
ieee computer society june 
winskel 
event structures 
linear time branching time partial order logics models concurrency rex volume lecture notes computer science noordwijkerhout june 
springer verlag 
