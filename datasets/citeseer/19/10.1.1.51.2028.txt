graphical tool proving progress flemming andersen kim dam petersen pettersson tele research dk 
describe graphical tool proving leadsto progress properties unity programs 
tool allows user draw directed acyclic graphs dags check dags proof lattices similar idea owicki lamport 
proof lattice desired progress property deduced 
edges proof lattices annotated information describing prove property represent 
tool transforms dag natural deduction proof similar style chandy misra 
proof compiler translated proof script checked theorem prover 
graphical tool possible modulo strength theorem prover automatically prove program satisfies leadsto property basis proof lattice outlines proof structure 
part project building software verification tool telecommunication industry tool software engineers detailed knowledge logic verification 
activities project currently unity theory consists parallel programming language logic reasoning programs 
unity previously produced theory hol theorem prover called hol unity allows mechanised reasoning unity program properties compiler translates unity programs properties internal form required hol unity 
unity theory chosen simple provides wide collection deduction rules 
consider powerful serve foundation programming languages sdl widely telecommunication industry 
possible suggested fact phd thesis shows non trivial subset extended constructs parallelism translated unity subset unity 
step hiding verification details user theorem prover produced compiler translates unity programs properties written unity notation legible notation required hol unity theorem prover 
proof progress property unity temporal logics consists decomposition property simpler properties proved directly applying set inference rules composed yield desired property 
decomposition process involves book keeping properties verified inference rules apply verified properties order obtain desired property 
step hiding verification details software engineer produce graph editor allows user draw structure progress property 
owicki lamport show specialised directed acyclic graphs dags structure decomposition progress property temporal logic call dags proof lattices 
show decomposition unity progress property leadsto described structure 
goal proof lattice mechanised proving require edges represents decomposed progress property annotated information allows theorem prover prove decomposed property 
reason name annotated proof lattices proof lattices distinguish owicki lamport 
graphical editor tool allows user construct directed acyclic graph drawing annotated edges nodes consists 
graph tool deduces basic progress properties proved graph proof lattice combine basic properties achieve desired progress property represented lattice 
tool generates proof obligations output natural deduction style 
edge annotation added associated basic proof obligation 
compiler part tool translates natural deduction style proof proof script readable theorem prover part tool 
complete tool system progress property proved drawing proof lattice sufficiently detailed motivates correctness press button intervention ships proof lattice compiler theorem prover check proof 
organised follows 
section give general description annotated proof lattices 
section includes discussion box concept described owicki lamport represent state space restrictions proof lattice 
section describe unity progress relation leadsto basic progress relation annotated proof lattices 
section describes inference rules unity deducing leadsto shows structure chosen annotations 
section sketches implementation tool 
section shows form proof scripts produced tool describes theorem prover able verify properties scripts 
proof lattices owicki lamport describe proof lattice program outline proof structure progress formula temporal logic form proof lattice directed acyclic graph nodes labeled temporal formulae single entry node single exit node node labeled outgoing edges nodes formula hold 
owicki lamport prove exists proof lattice program entry node labeled exit node labeled formula satisfied 
name proof lattice theorem theorem 
define variant proof lattices called annotated proof lattices adapted progress relations state transition systems 
variant proof lattices nodes labeled state dependent predicates functions states truth values 
aim proof lattice proof sketch checked theorem prover 
achieve introduce extra requirements nodes multiple 
outgoing edges satisfy implication nodes single outgoing edge annotated information theorem prover check associated property 
general annotations structure 
consider unity leadsto progress properties annotations represent inference rules justifies deduction properties 
annotated proof lattices formally defined follows definition annotated proof lattice annotated proof lattice program relation set annotations set annotated relations subsets finite directed acyclic graph nodes labelled state dependent predicates edges optionally labelled annotations 
single entry node incoming edges 

single exit node outgoing edges 

node labelled single outgoing edge node labelled edge annotated say holds 

node labelled multiple outgoing edges nodes labelled 
notation denotes state abstracted disjunction state yields disjunction state notation denotes satisfaction state 
proof owicki lamport proof lattice theorem structure easily adapted hold annotated proof lattices 
prove requires theorems lattice relation expresses reflexivity transitivity 
proof lattice theorem stated formally follows setting theorem exists annotated proof lattice relation satisfies entry node labeled exit node labeled proof prove simple lemma node outgoing edges 
node single outgoing edge 
definition edge annotated say definition annotated relations subsets 
case node multiple outgoing edges 
definition 
theorem relation get 
completes proof lemma 
lemma realise annotated proof lattice structure proof lattice owicki lamport setting 
refer completion proof 
restricted state space owicki lamport allow sub lattice proof lattice surrounded box annotated invariant indicate invariants holds conjunction temporal formulae nodes sub lattice 
describe sufficient prove invariant entrance sub lattice left exit 
stated invariant progress theorem purpose boxing restrict state space predicate setting nodes labelled state dependent predicates temporal logic formulae 
means 
solution introduce notation expresses holds forever satisfied 
invariant progress theorem formalised setting theorem possible formalise concept boxed annotated proof lattices 
prove proof lattice theorem holds lattices 
refrain doing due limited space disposal 
specified proof lattices rest meaning annotated proof lattices 
unity proof lattices unity progress relation leadsto satisfies theorems 
basis relation annotated proof lattices 
lattices proving leadsto properties smaller program examples lift control program version sliding window protocol 
examples annotations simple implication implies basic unity progress property ensures induction relation 
unity annotations discussed section 
show proof lattice looks proof lattices sliding window protocol 
lattice demonstrates nr nr ack nr ack nr ack nr gamma ack lu restrict valid hs pq pq ensures implies implies ensures ack fig 

example proof lattice steps involved proving property nr leadsto property reads message delivered receiver sooner transmitter receive message split top node nr branches indicates proof cases ack ack considered separately 
case ensures followed implies proof step leads ack situation second case reached single implies proof step 
situation final ensures proof step leads goal lu ensures proof step additional information supplied annotation 
predicates readable traditional predicate notation subscripts proof lattices 
graphical tool described section translates predicates proper state dependent predicates handling theorem prover 
property holds state space restricted predicate 
restriction denoted restrict annotation lattice 
unity annotations unity logic provides wide collection inference rules deducing leadsto properties 
want annotation edges inform theorem prover inference rule apply 
optionally annotation extra information indicates apply rule speed deduction process 
implication annotation implies indicates leadsto property follows implication 
unity theorem justifies annotation 
hol unity theorem prover reduces state abstracted implication order logic implication applies tactics described 
ensures annotation ensures indicates basic unity progress relation prove property 
unity theorem justifies annotation 
ensures property expresses program ensuring action executed state satisfying ensure satisfaction holds holds 
hol unity theorem prover able validate ensures property directly 
implies theorem prover test action find ensuring action ensures annotation allows ensuring action optionally parameter optimising process proving 
contains examples ensures annotated edges 
ensuring action parameter 
lattice avoid large complex lattices introduce annotation lattice denote insertion proof lattice 
plays role lemma traditional proving 
avoid mutual dependencies require inserted proof lattice verified 
annotation case justified leadsto property inserted proof lattice 
induction unity supports inductive proving progress theorem leadsto induction requires metric function numeric state dependent function program variables 
metric decrease long holds holds 
induction annotation supplied parameters specifies metric specifies proof leadsto property assumption 
proof may specified proof lattice 
lattice annotation just described referenced proof lattice verified 
example induction rule sketched 
nr induction gamma nr fig 

proof lattice induction edge parameter gamma nr metric function name proved lattice 
psp rule practice psp progress safety progress leadsto relation represents basic safety relation proved directly theorem prover 
parameters psp annotation 
parameter predicates parameter lattice proving leadsto property assumption 
example psp rule sketched 
cancellation rule simplify predicates cancellation rule gamma gamma psi gamma gamma psi psp fig 

proof lattice psp edge inference rule predicate determined context node 
annotation requires parameters parameters specify remaining predicates parameters specify proved proof lattices assumptions 
example rule sketched 
gamma gamma psi gamma gamma psi cancellation fig 

proof lattice cancellation edge infinite branching inference rule seen introduces infinite branching induction rule restricted form 
unity progress relation leadsto allows general infinite branching indicated inductive definition leadsto ranges index set 
proof lattices extended describe wider class proofs notation introduced denoting indexed family branches 
extension may achieved index parameters allowed annotations lattice edges 
approach edges represent infinite collections branches indexed binding variable variable considered constant unknown value succeeding part lattice predicates annotations 
outlined example proof lattice having infinite branching edge annotated gamma gamma psi gamma gamma psi fig 

parametric branching proof lattice proof lattice expected proved inference rule expressing infinite disjunction leadsto properties 
mechanised proof lattice verification tool consists parts graph editor allows user draw dag produces proof natural deduction style checks basic composite lattice properties hol unity compiler compiles proof form readable hol unity theorem prover hol unity theorem prover checks proof 
graph editor divided parts pure graphical editor allows user draw dag dag generates list text poly line objects graphical attributes analyser constructs internal dag data structure graphical objects checks structure proof lattice proof generator produces proof natural deduction style dag data structure 
pure graphical editor currently general purpose public domain image drawing program 
expected replaced specialised editor fancy editing modes replaced fancy boxing annotation modes 
analyser proof generator integrated program 
analyser scans output retrieving text poly line objects 
analyser uses simple coordinate analysis classify text objects nodes annotations checks graph structure proof lattice single entry exit node single outgoing edges annotated single outgoing edges annotated acyclic cycles 
presently analyser able detect handle state space restriction boxes 
internal dag data structure provides possibility backward forward traversing arbitrary nodes edges lattice 
possible experiment representations lattice proof 
version proof generator produces proof natural deduction style listed 
result analysing proof lattice showed 
compiler presently extended understand natural deduction style proofs produces proper output theorem prover 
property nr leadsto lu proof ensures nr ack leadsto nr ack nr implies nr ack nr leadsto ack ensures ack leadsto lu trans nr ack nr leadsto lu trans nr ack leadsto lu implies nr ack leadsto ack trans nr ack leadsto lu disj nr leadsto lu fig 

proof script produced graph analyser proof script starts property proved 
followed list proof steps 
proof step described compo nents number proof step unity rule optionally supplied arguments property proved proof step 
resulting property proof step identical script states proved 
names trans disj denotes transitivity rule finite disjunction rule respectively 
names ensures implies represents annotation rules discussed previous section 
versions proof generator produced code directly theorem prover showed 
equivalent code generated hol unity compiler legible predicate notation 
val val tm nr val tm nr ack val tm nr ack val tm nr ack nr val tm ack val tm lu val lma tm leadsto tm pr act val lma tm leadsto tm pr val lma tm leadsto tm pr act act fn val thm lma val thm tm leadsto tm pr thm lma thm lma val thm tm leadsto tm pr thm lma thm thm val lma tm leadsto tm pr val thm tm leadsto tm pr thm lma thm thm val thm tm leadsto tm pr thm thm thm fig 

hol unity theorem prover code theorem prover code identifiers temporary values prefixed tm lma thm indicate value term proved basic progress property proved composite progress property 
tactics composed proof lattice annotations denotes composition rules 
detailed description tactics proving ensures implies annotated properties may 
code transitivity lattice tactic sketched 
tactic retrieves transitivity theorem val val theorem leadsto fn thm thm thm thm 
conj thm thm fig 

hol unity code transitivity tactic leadsto theorem assumptions matched transitivity theorem yield consequential theorem theorem accepted provided expected form 
graphical tool drawing proof lattices produces proof script theorem prover 
tool prototype 
experimentation various formats proof scripts annotations easier requires insight user 
tool developed mechanised proving unity progress properties mind core system consists simple graph search easily adapted theorem provers graph representable relations 
tool generate proof scripts formats natural deduction style proof script suitable compilation direct proof theorem prover able check 
existing compiler unity generates proof scripts theorem presently extended support natural deduction style proofs 
impact system progress properties proved drawing sufficiently detailed proof lattice compiler hol unity theorem prover rest provided course hol unity theorem prover able prove basic properties generated proof lattice 
possible construction process proof lattice check validity individual edges shipping compiler theorem prover 
errors proof construction captured early stage 
successfully proof lattices developing progress proofs smaller examples 
developed proof lattices provide compact readable view proof 
actual proof lattices originally done manual translation proof script tedious job inspired tool automating process 
tool expected part proving properties atm protocol 

andersen 
theorem prover unity higher order logic 
phd thesis technical university denmark 
published tfl rt tele research 

andersen petersen pettersson 
program verification hol unity 
hug hol user group workshop pages 


correct concurrent programs unity design method compositional programs 
phd thesis technical university denmark 

chandy misra 
parallel program design foundation 
addison wesley 


cheng 
unix manual 
version 
editors sarma 
sdl objects proceedings sixth sdl forum darmstadt germany 
north holland 

gordon 
hol proof generating system higher order logic 
cambridge university computer laboratory 

kernighan ritchie 
programming language 
prentice hall 
second edition 

nielsen 
hol unity compiler 
technical report preparation tele research 

owicki lamport 
proving liveness properties concurrent programs 
acm toplas vol 
july 
pages 

petersen 
hol unity tactics hol tactics automatic proof unity properties 
tfl ld tele research december 

petersen pettersson 
proving protocols correct proving safety progress properties sliding window protocol hol unity 
research report tfl rr tele research december 

stroustrup 
programming language 
addison wesley 

second edition 
article processed macro package llncs style 
