experiments destructive updates lazy functional language pieter hartel willem department computer systems university amsterdam kruislaan sj amsterdam netherlands email uva nl aggregate update problem received considerable attention pure functional programming languages recognised interesting research topic 
extensive literature area proposes wide variety solutions 
tried apply proposed solutions applications see solutions practice 
able destructive updates convinced achieved application specific knowledge 
particular form update analysis reported applicable non flat domains polymorphic languages higher order functions 
belief refinement monolithic approach constructing arrays may alternative incremental approach destructive updates 
keywords lazy functional languages array updates compilation annotation measurements 
pure functional language difficult implement update aggregate data structure efficient way 
problem aggregate known single threaded copy entire aggregate may destructively updated 
vitally important referential transparency property lost 
sake definiteness concentrate particular aggregate data structure array 
study lazy functional programs arrays 
constructing programs tried apply techniques proposed literature achieve best performance arrays lazy functional language offer 
focus practical aspects 
appropriate analysis able discover essential information required achieve high performance achieved help programmer 
example programmed various styles arrays 
measurements reported implementation supports wide range different array primitives implementations 
basic operations implemented arrays create subscript update 
array implemented ways preferred implementation container just contiguous block memory 
container holds actual array elements pointers array elements 
depends implementation functional language 
container size permits subscript time creation time 
problem implement update time 
basically different ways arrays incrementally 
calculations involved creating array follow kind regular pattern monolithic operation appropriate creates entire array single operation 
sufficiently simple regularity discerned incremental approach required repeatedly updates current version array places form version 
updates impossible monolithic approach 
monolithic array operations expressed terms incremental operations vice versa expressive power approaches 
depending implementation may large differences space time complexity 
incremental approach lower level monolithic approach higher level abstraction 
favours monolithic approach researchers noted programs monolithic approach clearer 
programming style followed writing functional programs arrays aim monolithic array operations 
consistent commonly accepted preference higher order functions explicit recursions 
having said aggregate update problem major issue 
unfortunately answer 
consider monolithic array operation transforms old array new instance applying certain function array elements 
presents array update problem result operation requires container size container holding input array 
implementation attempt reuse container 
difference manifestations aggregate update problem 
suppose certain algorithm requires array size updated times entirety 
naive incremental implementation copies array update requires theta space naive monolithic implementation requires theta space 
naive incremental implementation worse naive monolithic implementation 
applications naive monolithic implementation may acceptable involved calculating theta array elements sufficiently large 
non strict functional language monolithic incremental arrays problem language arrays non strict 
means arrays may undefined elements 
strictness analysis prove hard array elements created suspended computations unfortunately suspensions costly 
consider creation array integers generated distinct function calls say 
strict language requires container size integers 
non strict language container size required store pointers suspensions 
suspensions requires space capable holding pointers point function point argument 
assume pointer requires amount space integer total non strict array requires space 
time required manipulate non strict array greater space needs allocated storage occupied logically separate objects container suspensions collected 
time complexity allocating recovering strict array time complexity handling non strict array 
problem efficiently implementing arrays non strict language compounded requirement runtime possible distinguish evaluated objects unevaluated objects 
compiler knows expression evaluated may generate code avoids testing runtime expression evaluated 
expressions known evaluated may represented unboxed objects 
expressions known evaluated represented boxed objects 
important disadvantage boxed objects require extra information takes space 
boxing analysis just difficult strictness analysis expect compiler avoid creation boxed objects 
discussion boxed unboxed representations suggests implementation different representations array integers say 
fully boxed representation described 
second efficient representation allows unboxed components array 
means components array reside container just implementation strict functional language imperative language 
representation safe compiler knows array components evaluated matter 
component proved evaluated components represented boxed values 
means array unboxed components implemented container pointers separate heap cells 
cells may contain suspension evaluation updating boxed integer 
destructive update problem lazy functional languages wide range aspects including strictness analysis boxing analysis subscript analysis question incremental monolithic array primitives 
difficulty implementing destructive updates lies developing right kind analysis problems raised combining different analyses harmony achieve results 
destructive update problem avoided number ways 
promising approaches monads unique types 
approaches ultimately type system guarantee data structure single threaded destructive updates safe 
approaches interesting clever analysis required detect single threadedness 
annotated different ways programmer annotations verified system 
alternative approaches represent safe way express imperative programming concepts functional context 
shall consider alternatives main interest contrasting imperative functional style 
represented incremental approach array handling monolithic approach 
view monadic approach unique typing approach analysis approach net effect handling arrays 
main interest contrasting imperative functional style consider programs implemented efficiently monolithic style 
example program updating large data base 
aware fact algorithms efficient functional implementations exists lists opposed arrays 
earlier investigated number different versions fast fourier transform 
list implementations efficient scope focus arrays 
list implementations considered 
section example program taken literature example problems detail 
measurements reported section 
section presents 
example problems examples ubiquitous quick sort program qs fast fourier transform fft prediction program wv simulates behaviour north sea number time steps 
monolithic version qs taken wadler incremental version originates hudak 
fft wv programs described sections 
array primitives borrowed languages tale haskell 
angular brackets denote array ha arrays accompanied descriptor pair holds lower bound upper bound array 
examples array primitives 
function tabulate taken language tale allocates block memory gamma applications function tabulate int ff 
int theta int array ff tabulate second example function accum haskell accum ff fi ff array ff list int theta fi array ff accum ha vs foldl vj vs foldl vj vs discrete fourier transform discrete fourier transform complex data items defined follows gamma theta jk gamma input elements transformed output values straightforward algorithm compute discrete fourier transform require steps 
cooley tukey published fft algorithm completes required calculation theta log steps provided power 
illustrates data flow array elements processed fft 
input hx xn gamma transformed hx gamma log steps 
step calculates intermediate array input values shown levels 
level input array fed pairs xi independent calculations shown cells 
computation level hj phi phi phi phi phi oe 
hj phi phi phi phi phi oe xxxxxxxxxx oe xxxxxxxxxx oe level data flow point fast fourier transform 
cell called butterfly graphical appearance function bfly shown bottom 
butterfly shown circles connected arrows 
changes level level span butterfly level positions applied 
input elements level appear particular order concerned aspect program see 
data flow indicates left inputs connected regular way outputs higher level 
regularity left wing butterfly level connected level gamma binary representation zero th bit position 
example left inputs level connected bit zero 
implementation observed regularity 
argument function fft compute current level levels handled soon reaches value recursion terminated 
implementations level level function expresses butterfly applications level functions semantics differ way array handled 
versions level auxiliary functions bfly bit perform butterfly calculation 
function bit calculates value th bit position integer mentioned regular connections left inputs expressed program restriction bit 
span level index right inputs function level incremental approach array construction 
invocation level elements positions input array replaced new values destined positions way replacement destructively non destructively considered 
monolithic approach array construction embodied function level replaces entire array new piecemeal incremental approach 
contents new array produced list comprehension keyword list list list element lists flattened function concat 
association pairs produced appear particular order index order array 
explains function array builds array list index value pairs 
index computations regularity inherent fft algorithm 
regularity possible monolithic approach 
monolithic implementation creates considerable amount intermediate list structure compiler able avoid completely 
unfortunately compiler fast capability 
definition function reorder omitted program play role discussion updating 
interested reader referred complete description program 
main array complex main fft xi reorder input fft int array complex array complex fft fft fft xi log xi theta level jj choose level level level level int int int array complex array complex level level bit level update update level array bounds concat gamma bit int int int array complex list int theta complex bfly theta subscript subscript bfly int complex complex 
complex theta complex bfly gamma theta implementations fft level follows monolithic approach level follows incremental approach array construction 
destructive update safe 
depending choice function fft monolithic level incremental level 
time complexity destructively updating incremental monolithic implementations theta log 
non destructively updating implementation ruled time complexity theta log 
selection purely space behaviour implementations 
monolithic implementation fft log calls array allocates theta log space 
destructively updating implementation uses space 
incremental approach best updates performed destructively 
guaranteed implementation require theta log space 
question guarantee 
unfortunately answer precautionary measures taken 
investigate required guarantee difficult give come back measures proposed literature 
special measures compiler lazy functional language may generate code similar shown left function level generated code expressed program functions called value 
essential parts code shown include array manipulations 
expect lazy language assumed update strict arguments array index non strict third argument new value 
strictness analysis compiler able discover fact update function strict arguments array index needed represent integers pointers suspensions heap 
similarly variables represent proper arrays suspensions produce arrays soon evaluated 
update functions called embedded suspensions 
hand variables needed point suspensions heap non strictness third argument value update 
functions fst snd select respectively second component tuple returned bfly 
variables proved needed suspensions subscript functions shown body level suspensions impossible destructive updates pointers emanating suspensions refer array problem described stoye 
solution works fft program unfortunately solution apply 
level return bit suspend subscript suspend subscript jk suspend bfly theta suspend fst jk suspend snd jk update update return level return level level return bit subscript subscript jk suspend bfly theta suspend fst jk suspend snd jk update update return level return level level procedure taken code generated incremental version fft showing left code right code cheap eagerness optimisation 
possible solutions suspended subscript problem update function bloss strict arguments just case 
depending sophistication strictness analyser may may avoid problem presently facing 
strictness analysis capable reasoning structured data tuple returned bfly function values known needed values possible build sufficiently sophisticated strictness analyser prove fast compiler offer 
alternative approach implemented fast compiler 
fairly simple strictness analyser version update non strict third argument possible destructive update 
achieve optimisation called cheap eagerness building suspension selector function pointer suspension cheap eagerness selects required item uses pointer item 
approaches schematically shown 
points suspension subscript function points item selected 
arguments subscript array index cheap eagerness optimisation lml compiler 
assume array index head normal forms index integer array block memory containing pointers actual elements 
array elements head normal forms irrelevant 
possible pointer pointer avoid building suspension subscript 
amounts selecting certain element container known resulting value needed 
non lazy 
case amount involved selecting element amount required build suspension subscript 
optimised code lazy arguably efficient desirable 
noted optimisation evaluate selected item dashed box may involve unlimited amount computation defeat objective 
cheap eagerness optimisation applied compiler able prove limited form eager evaluation requires lazy evaluation 
example compiler know index container array necessarily actual array elements evaluated sufficiently time subscript operations lines executed 
cheap eagerness optimisation applied selector functions arithmetic functions 
ffifl fflfi subscript delta delta delta delta delta delta delta delta delta applying cheap eagerness optimisation array subscription 
boxes represent heap cells 
returning code apparent cheap eagerness optimisation applied subscriptions 
strictness analysis compiler proved array indices evaluated time suspensions subscript see lines 
optimisation enables statements build suspensions subscript calls special function subscript differs regular subscript guarantee return head normal form subscript merely returns pointer selected item 
optimised version level shown right 
applying cheap eagerness optimisation fft program destructive updates safe array complex numbers single threaded 
achieved goal having modify incremental version fft program 
particular version prepared capabilities compiler mind 
gave function level form helped strictness analyser discover level strict argument happens just information needed cheap eagerness optimisation 
cheap eagerness general optimisation applies primitive user defined functions 
optimisation cheap eagerness guaranteed solve problem suspended subscripts cases 
researchers observed small change program compiler single threadedness lost performance incremental program deteriorates considerably destructive updates longer safe 
monolithic version fft destructively update array 
requires call array level replaced call accum access old array granted yielding level accum xy concat gamma bit new function level reuse container array elements array read time 
values run bfly function deliver new elements written place old elements 
subscript analysis described anderson hudak capable achieving 
requires powerful compiler programmer knows exactly express problem recognised 
hard achieve 
prediction second example study prediction 
program previous explains detail physical background application 
reasonably self contained discuss essential aspects application domain leads formulation single threaded implementation 
comprehensive treatment application domain reader referred thesis 
prediction tides north sea shallow water equations 
linearised slightly simplified versions equations shown gamma fv gamma fl cos fu gamma fl sin du dv small variations water height depth water function parameter theta gamma gamma fl wind friction theta gamma wind direction water velocity direction water velocity direction acceleration gravity ms gamma bottom friction theta gamma ms gamma wind velocity equations represent conservation momentum equation represents conservation mass effects earth rotation friction bottom friction wind fl taken account 
effect atmospheric pressure ignored relatively small 
numerical approximation partial differential equations finite difference scheme equations 
formal derivation see van der 
variables equations approximated equations values spatial grid discrete points time 
grid coordinates superscript represents discrete time steps 
depth vary time varying superscript required 
distance steps grid relations true approximated height velocities gamma gamma spatial grids slightly shifted respect way red green blue dots correspond pixels colour monitor 
alignment matrices called space staggered grid important advantages stability computations 
see van der details 
choice space staggered grid equations asymmetrical gamma gamma gamma gamma gamma gamma gamma cos gamma gamma gamma gamma gamma gamma gamma gamma sin gamma gamma gamma gamma finite difference scheme particular choice space staggered grid important advantages structure implementation 
calculations grid point require neighbouring values space time 
instance value equation approximated equation average neighbours gamma gamma 
finite difference scheme leads locality required enable efficient computing resources 

finite difference schemes gives order new approximations calculated previous values compute compute sequence repeated required time frame reached 
sequence stability important numerical approximations 

choice space staggered grid possible store velocities heights arrays arrays may updated place provided computations sequenced discussed 
advantages lead monolithic incremental implementations shown 
constant represents number times transform function repeated compute heights velocities th time frame 
constants specify size grid 
initial state grid tuple 
space staggered grid sizes matrices different 
difference source complication implementation monolithic incremental versions transform 
coordinate pair functions fu fv fh calculate initial states matrices functions gu gv gh compute new value point equations 
monolithic version transform uses tabulate generate new matrices descriptor dxy tabulate merely dimensional form function tabulate discussed section 
descriptor dxy covers exactly areas matrices new values calculated iteration 
shown definitions matrix extra column right similarly matrix extra row top 
extra row column delivered applications tabulate level auxiliary function reshape cuts extra column row argument second argument 
gives new matrices right shape 
shape matrix properly described dxy need call reshape definition efficient solutions possible give matrices right shape 
hidden special treatment extra column row functions gu gv 
chosen reshaping results tabulate functions explicit level confirms monolithic array operations quite powerful 
descr int theta int theta int theta int triple matrix real theta matrix real theta matrix real main triple main repeat matrix real tabulate fu tabulate fv tabulate fh dxy dxy descr dxy repeat int triple triple repeat repeat repeat gamma transform transform transform triple triple transform reshape tabulate gu dxy reshape tabulate gv dxy tabulate gh dxy transform force gu dxy gv dxy gh dxy gu gv gh matrix real matrix real matrix real int int real gu gu subscript gv gv subscript gh gh subscript ff int int ff matrix ff descr matrix ff mat mat vec vec elem elem ff int ff array ff int int array ff vec vec update vec subscript vec implementations wv transform follows monolithic approach transform follows incremental approach array construction 
function tabulate capable applying different functions different areas matrix 
problem addressed extent sisal group think monolithic array primitives haskell adequate 
incremental version transform uses generate new matrices incremental approach time need reshape 
reason calculates new values certain submatrix retains remaining elements 
shape matrix argument determines shape result shape descriptor argument determines matrix elements updated 
naturally fits problem solved 
incremental approach nicer monolithic approach 
incremental version properly annotation required matrices single threaded 
annotation force function body transform evaluates argument full normal form 
see matrices single threaded force application consider graph shown 
graph represents evaluation third state matrix noted box represents function application name shown box 
arrow represents pointer argument 
pointers descriptor argument dxy omitted avoid unnecessary clutter 
shown essential structure built graph reduction implementation 
demand driven evaluation implied lazy graph reduction starts edge marked demand propagates edges marked initial matrix updated form second state form third state graph shows pointers second state resolved pending computations required calculate effect force annotation guarantee computations required current step completed step started 
force annotation causes components tuple evaluated left right evaluated forcing components different order solve problem 
force annotation matrices single threaded enables destructive updates 
inserting force annotation noticed significant reduction space requirements wv simulation 
reason force annotation particular place incremental version monolithic version transform 
point fast compiler capable verifying safety destructive updates 
entirely programmer 
propose arbitrary destructive updates tool casual programmer unsafe facilities object study 
measurements programs qs fft wv compiled fast compiler executed sun sparc mb memory kb caches running sunos 
various statistics collected runtime system table presents important ones shown column 
programs implemented incremental arrays see columns marked incr monolithic arrays see columns marked mono 
incremental versions executed destructive implementation array update columns marked 
wv program executed naive copying implementation array update column marked copy 
naive copying implementation array update asymptotic complexity programs bad point presenting precise measurements 
case wv program explained follows 
programs wv uses theta matrices implemented arrays arrays 
naively updating point matrix array size copied entire matrix size theta implementation choice incremental copying version program acceptable performance 
different array implementations 
implementation uses strict arrays means array primitive evaluates array elements head normal form creating updating array 
implementation allow arrays undefined elements created 
array elements boxed 
measurements pertaining implementation may section table heading strict arrays 
second implementation non strict arrays measurements may second section gu gamma gamma gamma gamma gamma gamma gamma psi gh gamma gamma gamma gamma gamma gamma psi gv gamma gamma gamma psi gamma gamma gu gamma gamma gamma psi graph reduction function transform indicating single threadedness automatic 
table heading non strict arrays 
measurements shown percentage corresponding statistic strict array implementation 
positive percentage corresponds increase worse performance 
negative percentage represents decrease better performance 
third section table presents break number heap cells claimed respect different ways heap cells 
break applies implementation strict arrays non strict arrays different respect 
program qs fft wv version incr mono incr mono incr mono copy input strict arrays calls cells reduce seconds non strict arrays calls cells reduce seconds strict arrays break cell claims susp 
cons 
arr 
numb 
dbl table function calls cell claims reducer activity execution time different versions program 
blank entries second third sections table indicate change entry 
row marked input qs gives length list sorted 
fft input parameter number points transformed wv input parameter gives number simulated time steps 
row marked calls section presents total number function calls including primitive user defined functions 
simple addition counted function call give impression amount involved computations 
row marked calls second section gives increase decrease number function calls due non strict strict arrays 
total number function calls incremental version fft program higher non strict arrays 
programs affected choice non strict array primitives respect statistic 
row cells gives number heap cell claims required execution 
heap cells expensive resource larger number larger expected execution time 
number cell claims worse affected choice strict non strict arrays number function calls 
row reduce gives measure costs involved implementing lazy evaluation 
statistic incremented time reducer called certain subfunctions reducer called example step unwind spine 
versions show significant increase respect statistic moving non strict arrays 
row seconds gives execution time different versions programs 
incremental versions implemented destructive updates fastest 
relatively large error time measurements complex architecture sun sparc processor caches 
large errors arise small variations heap size code size may cause large variations effectiveness cache execution time 
safe conclude destructively updating incremental implementation fft significantly faster strict non strict arrays 
third section breakdown number cell claims percentage statistic cell section 
measurements third section apply implementations strict arrays 
categories cells appear table susp 
represents suspended function applications cons 
represents boxed list constructor cells arr 
represents boxed array containers numb 
represents boxed numbers 
category dbl represents unboxed double precision numbers 
cell categories array descriptor pairs occur frequently omitted 
reason percentages column third section add 
wv program statistic dbl accounts cell claims 
entirely due problem implementation able store unboxed double precision numbers directly stack frame 
unboxed double heap cell allocated pointer heap cell stored stack frame 
implementation techniques solve problem implemented 
fft program suffers deficiency lesser extent cell claims unboxed doubles 
list structure built fft avoided entirely better methods compiling array comprehensions 
number cells claimed fastest version program large compared problem size 
particular possible run destructively updating versions program fixed number cells related size problem solved 
qs fft required number cells equal value input parameter 
wv number cells depend input parameter size matrices involved 
destructively updating version fft uses times cells 
come surprise implementation times faster best implementation 
solve problem necessary treat unboxed data complex numbers class citizens 
means array complex numbers represented array pointers cells exactly array structs contain real imaginary parts 
achieve result requires powerful boxing analysis new techniques supporting unboxed values runtime particular garbage collection 
destructive updates lazy language hard programs studied relatively small 
programmer requires intimate knowledge implementation worse slight change program may impossible compiler prove uniqueness pointer array 
seen sections disastrous effect performance program relying destructive updates unsatisfactory 
safety programs monads unique types guaranteed programmer required intimate knowledge underlying implementation 
program written way accepted static checks compiler 
programs destructive updates safe case annotation programmer proved essential 
annotation wv program turned required curtail space consumption program 
programs studied admit solutions monolithic arrays problem small change may influence performance dramatically 
performance monolithic versions factor worse incremental versions 
performance difference may change soon correct shortcomings implementation described earlier heap cells store unboxed double precision numbers generation redundant intermediate list structure array comprehensions 
monolithic programs incremental programs advantage simple implementation give reasonable performance 
sophisticated implementation give performance comparable incremental implementations 
monolithic array operations relatively primitive 
worthwhile extend primitives support operations certain index patterns index ranges 
improve programs wv reshape matrices 
extension improve appearance programs arrays offer compiler scope optimisations 
route looks promising try build complex analyses compiler operate perfect harmony achieve results 
marcel bob david king simon marlow john donnell referee comments draft version 
schmidt 
detecting global variables denotational specifications 
acm transactions programming languages systems apr 
roy 
arrays functional language 
mullin jenkins gao editors st arrays functional languages parallel systems pages boston massachusetts jun 
kluwer academic publishers 
wadler 
new array operation 
fasel keller editors graph reduction lncs pages santa fe new mexico sep 
springer verlag berlin 
anderson hudak 
compilation haskell array comprehensions scientific computing 
programming language design implementation pages white plains new york jun 
acm sigplan notices 
hudak 
arrays non determinism side effects parallelism functional perspective 
fasel keller editors graph reduction lncs pages santa fe new mexico sep 
springer verlag berlin 
hudak 
conception evolution application functional programming languages 
acm computing surveys sep 
peyton jones launchbury 
unboxed values class citizens non strict functional language 
hughes editor th functional programming languages computer architecture lncs pages cambridge massachusetts sep 
springer verlag berlin 
peyton jones wadler 
imperative functional programming 
th principles programming languages pages charleston south carolina jan 
acm new york 
smetsers barendsen van eekelen plasmeijer 
guaranteeing safe destructive updates type system uniqueness information graphs 
technical report dept comp 
sci univ nijmegen netherlands 
hartel 
arrays lazy functional language case study fast fourier transform 
mullin editors nd arrays functional languages parallel systems pages 
publication dept informatique de recherche univ de montreal canada jun 
wadler 
concatenate vanishes 
internal report dept comp 
sci univ glasgow scotland dec 
hudak 
semantic model counting abstraction 
lisp functional programming pages cambridge massachusetts aug 
acm new york 
barendregt van leeuwen 
functional programming language tale 
de bakker 
de roever rozenberg editors current trends concurrency overviews tutorials lncs pages noordwijkerhout netherlands jun 
springer verlag berlin 
hudak peyton jones wadler editors 
report programming language haskell non strict purely functional language version 
acm sigplan notices may 
cooley tukey 
algorithm machine calculation complex fourier series 
mathematics computation apr 
gill launchbury peyton jones 
short cut deforestation 
th functional programming languages computer architecture pages copenhagen denmark jun 
acm new york 
hartel glaser wild 
compilation functional languages flow graph analysis 
software practice experience feb 
stoye 
implementation functional programming languages custom hardware 
phd thesis univ cambridge england dec 
technical report 
bloss 
update analysis efficient implementation functional aggregates 
stoy editor th functional programming languages computer architecture pages london england sep 
acm new york 
hartel glaser wild 
benefits different analyses compilation functional languages 
glaser hartel editors rd implementation functional languages parallel architectures pages southampton england jun 
cstr dept electr 
comp 
sci univ southampton england 
augustsson johnsson 
chalmers lazy ml compiler 
computer journal apr 

grain size parallel computations functional program 
editors parallel processing applications pages aquila italy sep 
elsevier science publishers 

design considerations parallel reduction machine 
phd thesis dept comp 
sys univ amsterdam dec 

storm surge prediction kalman filtering 
phd thesis twente technical univ sep 
van der 
finite difference methods solving partial differential equations 
mathematical centre tracts mathematical centre amsterdam 
feo 
arrays sisal 
mullin jenkins gao editors st arrays functional languages parallel systems pages boston massachusetts jun 
kluwer academic publishers 
hammond burn howe 
spiking caches 
donnell editors functional programming pages ayr scotland jul 
springer verlag berlin 
press flannery vetterling 
numerical recipes art scientific computing 
cambridge univ press cambridge england 
biographical sketches pieter hartel received master degree mathematics computer science free university amsterdam ph degree computer science university amsterdam 
worked cern geneva university nijmegen netherlands university southampton england 
currently senior lecturer university amsterdam department computer systems 
research interests theory programming languages design compilers operating systems architectures functional languages 
willem studied applied physics amsterdam obtained master degree 
worked years pattern recognition cern geneva 
interest shifted distributed real time systems dutch 
joined university amsterdam completed ph thesis parallel reduction machines 
currently head strategic research information technology dutch 
research interest declarative systems applications 
