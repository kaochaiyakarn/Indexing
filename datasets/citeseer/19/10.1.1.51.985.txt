deductive integrity maintenance object oriented setting manfred jeusfeld eva kruger universitat passau passau germany germany extension integrity checking methods proposed deductive relational databases case object oriented deductive databases offers new opportunities efficient consistency control reduction search space finer granularity updates reduction runtime integrity checking incremental maintenance executable code generated evaluating simplified rules constraints database 
extended integrity system implemented kbms conceptbase 
supported part commission european community esprit basic research action 
matthias jarke hendrik decker gerhard help discussions 
version appeared mip passau germany 


today database community searching generation database systems abd adv 
relational model known solid theoretical foundation expressive limitations 
background mathematical logic induced development declarative query languages integrity constraints accompanied founded evaluation techniques 
deductive rules proposed order overcome limitations relational calculus 
results dec lst bdm ks bmm show deductive case integrity constraints checked efficiently 
examples implementations deductive databases lv declare kg 
inherit major disadvantages relational model poor data modeling capabilities due fixed degree aggregation flat tuples 
little support application procedure development reusability 
little support schema evolution due maintenance 
object oriented database systems man address problems providing extensible set data types classes attached procedures 
systems dbm postgres rrr allow developer link procedures certain events socalled triggers activating integrity checking procedures update events 
problem systems correctness imperative procedures case cascaded trigger activations problem inflexibility concerning usage different situations need user write lot triggers individual case 
goal shift technology declarative formulas integrity checking deductive relational object oriented setting 
experiments shown shift implies new problems new opportunities optimization 
new problems concern understanding role class concept integrity control need efficient reconfiguration complex objects case component changes control method applications 
concentrates problem second problem addressed solve third embedding methods envelopes look deduction rules jjr 

new opportunities stem sources problems 
firstly practically integrity checking methods relational databases treat modifications tuples deletions followed insertions means constraints checked 
aggregation abstraction objectoriented databases allows associate specialized triggers objects small individual attributes providing precision integrity optimization 
secondly explicit integration methods allows representation triggered procedures directly database contrast oodb systems mentioned preserve idea deductive relational algorithms triggers created automatically predicative specifications 
thirdly classification abstraction object oriented databases includes mechanism represent incremental schema modifications case including constraint modifications 
allows shift compilation constraints triggered procedures update specification time schema evolution time preserve explicitly relationship triggers underlying constraint specifications facilitating incrementality optimization metalevel 
rest explores opportunities steps reinterpretation slight extension relational method section application extension object oriented case sections 
section extends known integrity checking method deductive relational databases introduced bdm compilation phase insertion deletion constraints rules evaluation phase executing generated code update events distinguished 
code derived simplified forms responsible update events literals occuring constraint 
particular properties version generation simplified forms constraints deductive rules incremental maintenance simplified forms 
section shows exploit observations adapt integrity checking method object oriented case knowledge representation language telos implementation knowledge base management system conceptbase example 
predicative language related class schema database defining called concerned classes literals realizing desired finer granularity 
section describes constraint management metalevel maintain declarative formulas executable forms triggers 
integrity maintenance part database 
updates objects utilize existing transaction mechanism database system 
representation database subject consistency 
example formulas refering non existing classes rejected violate referential integrity 
section summarizes contributions outlines open problems 

integrity maintenance chapter presents principles integrity checker way independent data model 
exploitation specific properties data models locate data known type left subsequent section 
integrity checker extends relational checker proposed bdm decomposing part conducted schema evolution time part conducted update time explicit specialization integrity constraints deduction rules 

overview method integrity control method wellknown principles simplification explicated nic 
assuming database satisfies integrity constraints transaction possible violations caused transaction restricts set concerned integrity constraints 
specific objects inserted deleted transaction allow specialization concerned constraints type operation specific objects cases 
simple model transactions set individual updates assumed consider control structures database transaction procedures 
integrity checker improves runtime efficiency subdividing phases compilation phase new integrity constraints rules independently database state evaluation phase verifies transactions compiled formulas 

integrity maintenance user formulates integrity constraint declarative order language 
integrity checker automatically executes steps starting compilation phase 
transforms formula internal normal form generates parameterized simplified integrity constraints responsible insertions deletions 
simplified formula evaluated information certain kind inserted deleted 
integrity checker limits data affected integrity constraint relating literals constraint database schema 
stricter classification data efficiently integrity checker 
integrity checker stores simplified constraints way quickly accessible update member corresponding data set 
integrity checker inspects deductive rules regard integrity constraints 
dec implicit information generated relevant integrity constraint 
simplified constraints generated simplified rules stored close corresponding data 
integrity checker distinguishes information enters rule 
insertion element may lead implicit deletion checked simplified integrity constraint possibly application rules 
transactions integrity checker automatically executes evaluation phase element updated integrity checker looks corresponding data collection relation relevant simplified constraints rules 
evaluates element verify transaction 
error appears integrity database ensured 
integrity checker considers insertion deletion integrity constraints rules normal transactions may happen time life database 
single version database model considered historical database setting supported conceptbase new integrity constraint accepted database 

compilation phase integrity constraint order predicative formula theorem database state constraint considered valid 
essence seen continually asked boolean query 

integrity maintenance deductive rules formally subset integrity constraints true deducing necessary instances 
cases formula refers database state literals 
formulas especially attractive relational style data models base deduced literals correspond directly base deduced relations 
better data addressed literal classified integrity checker may reduce expense maintaining integrity 
semantic integrity constraint rule canonical interpretation true exactly information explicitly contained database derivable rules 
requires rules restricted stratified rules nt 
definition set positive literals declarative language lm integrity constraint formed formula wff disjunctive normal form matching patterns xn lm lm variable occur literals lm subformulas quantifier free wff formats 
variables occurs free 
variables quantified ones possible 
form means quantifier minimal scope 
disjunctive normal form includes negations pushed literals 
restrict updates ground literals common databases 
algorithms handling integrity function partially instantiated literals see bdm 
definition transaction set updates 
update totally instantiated positive negative literal positive literal fact formulas may updated see section 
integrity maintenance stands insertion information negative literal deletion 
integrity constraint relevant update iff complement update unifiable literal constraint 
relationship describes integrity constraints checked update literal appears constraint checked literal unifiable insertion deletion 
algorithm bdm determines simplified instance integrity constraint ic relevant update literal ic unifiable complement variables universally quantified ic governed existential quantifiers called replaceable variables algorithm instantiate constraint replaceable variables update drop quantifiers replaceable variables 
replace literal false variables replaceable 
possibly simplifications 
check integrity update sufficient prove simplified instances integrity constraints relevant 
prepared efficient investigation updates integrity checker compiles new integrity constraint parameterized simplified constraints 
definition ic integrity constraint literal occurring ic set replaceable variables triplet sic called parameterized simplified constraint complement sic generated described algorithm instantiation replaceable variables variables parameters 
called instantiation literal sic 

integrity maintenance positive negative instantiation literal stands simplified constraint responsible insertions deletions 
note parameterized simplified constraint built simplifying constraint complement literal occurrences 
having update take parameterized simplified constraints instantiation literals unifiable replace parameters values evaluate gained simplified instances constraints 
algorithm summarizes compilation integrity constraint 
algorithm literal integrity constraint ic generate store parameterized simplified constraint compile rules literal unifying literal see 
deductive rules define certain data produced data database 
may explicitly stored defined rules 
rule may recursive restriction literal allowed enter negated body rule directly indirectly rules 
deductive rules may formally seen subset integrity constraints true deducing necessary instances 
definition deductive rule integrity constraint matching format lm concl definition follows exactly variables occurring literal concl lm usually write deductive rules form lm concl instantiation variables satisfies subformula lm instantiates concl leads implicit fact database 
definitions set dependency network rules bdm 
integrity maintenance definition literal directly depends literal iff exists deductive rule literal body unifiable unification literal identical transitive closure defines relation depends purpose integrity checking necessary consider rule contribute evaluation constraint instantiation literal simplified constraint matches literal rule depends 
compilation phase integrity checker transforms concerned rule parameterized simplified rules 
simplification rule done condition expression xn lm similar constraint simplification 
rules literals unifiable literals lm literals occuring compiled 

evaluation phase new integrity constraint rule added system formula passes compilation phase 
evaluation phase profits expense quickly finds simplified parameterized constraints rules evaluated order ensure integrity 
checking transaction time critical availability system 
algorithm inspect update transaction take parameterized simplified constraint sic instantiation literal unifiable update instantiate variables sic occur actual values update verify simplified instance constraint database 
analogy proceed matching parameterized simplified rule 
integrity maintenance partially instantiate parameterized simplified rule update 
forward evaluation rule deduce data continue normal updates 
literal inserted deleted integrity checker takes parameterized simplified constraint sic positive negative instantiation literal unifiable constraint sic unified verified 
parameterized simplified rule positive negative instantiation literal unifiable rule instantiated new literal evaluated 
deduce literals implicit insertions deletions depending sign entered rule 
integrity checker finds parameterized simplified rule constraint instantiation literal unifiable simplified rule wouldn generated 
necessary literals deduced 
integrity constraints rules evaluated temporarily updated database 
integrity violation detected possible reaction refuse transaction roll back database old state 
reaction creation parallel database version partially inconsistent forward recovery start redoing transaction 
discuss reactions integrity violations note flexible recovery possible approach techniques borrowed view updating 

evolution constraints rules new integrity constraint completely evaluated database state proven directly inconsistent existing database schema bdm 
doesn cause integrity error constraint transformed compiled simplified constraints described 
deleting integrity constraint compilation deletes compiled forms constraint updates internal stored dependencies rules applicable checking constraint 
insertion deletion rules handled analogously mentioned simplified forms rules generated created implicit information violate integrity constraint 

integrity maintenance algorithm integrity constraint ic going inserted system transform ic internal 
verify complete constraint 
integrity violated compile constraint 
rule going inserted system transform internal representation 
exists parameterized simplified constraint parameterized simplified rule instantiation literal unifiable positive literal rule deduce rule treat normal insert updates 
integrity error appeared check exists instantiation literal unifiable positive negated literal 
compile integrity constraint ic going deleted take parameterized simplified constraints sic delete parameterized simplified rule instantiation literal depends literal rule unsigned instantiation literal unifiable rule necessary evaluation integrity constraint 
delete sic 
rule going deleted rule compiled integrity checker exists parameterized simplified constraint parameterized simplified rule instantiation literal unifiable negated literal rule produce literals rule proceed normal delete updates 
integrity error appeared rule didn evaluated take parameterized simplified rules compiled rules deducing literals literal depends 
delete parameterized simplified rule 
adaption object oriented setting integrity checker generates parameterized simplified constraint literal constraint 
determines simplified constraint checked insert delete 
simplified constraint related database structure way updates directly trigger evaluation 
rules handled analogously 

adaption object oriented setting granularity information relational style databases fixed tuples relations 
changes single components tuple realized updates tuple 
algorithms literature simulate updates deletion followed insertion revised tuple 
unnecessary evaluation rules constraints happen shown example relations drug name string price real patient name string address string sex char age int string suffers patient string symptom string heals drug string symptom string constraints forall patient heals 
suffers address patient changed constraint evaluated truth affected 
object oriented databases offer flexible aggregation abstraction relational databases 
implementations object oriented databases different granularities smallest possible objects 
cases decomposition object goes level attributes 
necessary relating attribute updates precisely affected constraints 
requirement classes regarded objects 
updates insertion new constraint class treated normal 
adaption object oriented setting database operations 
assume possible attributes class order link literals predicative formula class schema database 
goes saying need sublanguage declaratively specifying deduction rules integrity constraints starting point method 
example language fulfills requirements knowledge representation language telos 
short definition telos data model predicative sublanguage deductive rules integrity constraints 
literals defined top basic telos data structure 
assumptions allow determine unique class possibly attribute class concerning truth literal occurence 

telos data model telos maps relationships included complex object definition esp attributes single data structure called propositions definition id non empty set identifiers 
finite subset kb oid idg called telos knowledge base iff oid component unique kb 
elements referred propositions objects 
rest assume id contains finite character strings 
advantage telos uniformity object simplicity 
usual denote telos knowledge bases graphically propositions represented links 
example fig 

propositions corresponding graphical items proposition person person person proposition patient patient patient proposition patient isa person proposition drug drug drug proposition patient takes drug proposition 
adaption object oriented setting proposition instanceof drug proposition jack jack jack proposition jack instanceof patient proposition jack drug proposition instanceof person patient jack drug forte takes drug fig 
example telos knowledge base called individual propositions identical second fourth component drawn nodes 
objects called attributes special cases attributes third component label instanceof called instantiation attributes attributes label isa called specialization attributes 
propositions form proposition oid instanceof proposition oid isa called instance class called subclass superclass 
assume telos knowledge base kb contains objects proposition individual attribute instanceof isa instances propositions kb form indicated class name 
structural properties instantiation aggregation specialization defined built rules constraints see section 

adaption object oriented setting 
embedding predicative sublanguage fixed knowledge base schema ary propositions directly modeling purposes relational case 
classes serve role 
telos classes distinguished objects 
particularly classes may instances meta classes 
flexibility useful modeling bears danger having structure meaning reason 
telos relies predicative language 
constructors forall exists 
attrvalue instanceof isa true false formulas refer telos kb literals attrvalue instanceof isa typed quantifications 
types quantified variables interpreted classes shorthand formulas forall instanceof exists instanceof consequence formulas transformed equivalent formulas definition 
note telos kb finite infinite ranges possible 
interpretation formulas follows classical logic bdm 
deductive rules mapped function free datalog neg programs purpose query evaluation 

limiting search space key issue success simplification method section limit possible search space constraints rules evaluated update 
relational case way achieve relations possible schema 
additional temporal components full telos language left concise presentation 

adaption object oriented setting simplified parameterized formulas instantiation literals different update search space just names literals match 
sense worst case single universal relation sign literal parameter instantiation constraint rule prevent system evaluating simplified form 
telos pays flexibility falling worst case 
single base literal proposition fixed set derived literals definitions forall proposition forall proposition forall instanceof proposition instanceof 
instanceof forall proposition forall proposition forall isa proposition isa 
isa forall proposition forall proposition forall proposition exists attribute exists pp attribute exists proposition exists proposition exists vv proposition exists ww proposition proposition proposition instanceof pp proposition pp vv ww attrvalue definitions treated deductive rules update proposition literal potentially trigger simplified instance rules 
non matching parameters prevent rule evaluation 
situation unacceptable telos transactions contain proposition updates 
positive side telos object oriented language offers notion classes define structure kb 
observations regarding classes candidate limiting search space literal observation telos object classes proposition individual attribute isa instanceof 

adaption object oriented setting observation variable predicative formula bound class 
instantiation variable corresponds directly notion instances object oriented languages 
problem find class literal occurrence formula small possible class minimal number instances govern solution literal 
definition kb telos knowledge base literal occurrence predicative formula 
concerned class telos class property inserting deleting instance affect truth kb 
observation definition telos literals set concerned classes empty class proposition applies 
order finer range demand property telos knowledge bases assumption referential integrity guaranteed telos knowledge base proposition oid kb propositions components kb 
assumption real restriction guaranteed structural axioms telos see section 
assumption definition literals follows take class instanceof instanceof literal may part telos kb missing 
literal instanceof succeeds exactly instances class instanceof 
analogously class isa taken concerned class specialization literals 
second argument instanceof instantiated take object concerned class 
interesting case attrvalue literal due condition literals numerous quantifications 
variables free literal better attribute taken concerned class 
attributes major portion telos knowledge base satisfactory 
second restriction enables attrvalue literals connected user defined attributes takes attribute fig 

adaption object oriented setting assumption literal attrvalue occurs formula instantiated number kb propositions unifying proposition oid exactly 
oid variables equal instantiated equal type variable formula observation 
assumption enforces existence unique attribute kb corresponds literal 
telos kb fulfilling take unique solution object oid assumption concerned class 
concerned classes enable simplified forms quickly update takes place 
subclasses defined predicative formulas smaller number instances expected concerned classes 
implementations telos objectoriented databases iris promote idea extensibility updates set classes database 
poorly balanced class corrected run time system improving performance integrity checking 

example session conceptbase knowledge base management system conceptbase developed purposes requirements modelling support design activities 
data model knowledge representation language telos 
conceptbase implemented client server architecture unix inter process communication user interfaces 
kernel server written prolog user interfaces fig 
shows graph browser loaded classes instances kb patients 
patients persons suffer certain symptoms may take drugs 
drugs consist agents symptoms 
patient jack takes drug forte contains 
agent reduce fever symptom 
symptom pain relationship jack 
frame editor upper right corner screen deductive rule defines drug heals symptom contains agent positive effects symptom 
constraint labelled demands patient may take drug heals symptom doesn suffer 
component literals due temporal feature telos necessary purpose 

adaption object oriented setting fig 
conceptbase session showing classes instances patient definition formulas fig 
shows behavior conceptbase inserting object violates integrity constraint 
case second instance attribute agent inserted 
literal corresponding new attribute attrvalue pain triggers simplified form 
new solution attrvalue heals pain derived inserted corresponding simplified form integrity constraint 
patient jack takes suffer pain error message generated transaction rejected 
note update attribute 
consistent information system fig 
conceptbase insertion new symptom concerned literals occuring rules constraints price attribute drugs trigger integrity checking 

consistent information system building information system implements telos requires way store telos knowledge base sub system handling predicative language 
formulas statements world bl proposition telos kb 
natural represent part kb propositions 
set predefined formulas defining consistent aggregation instantiation specialization objects 
consistent information system refer proposition instanceof isa individual assumed included telos knowledge base 
telos kb satisfies language axioms called structurally consistent 
instance referential integrity ensured 
current version conceptbase structural consistency checked hand optimized procedures located storage sub system 
section provided algorithms automatically generating evaluating code declarative rules constraints 
information system task react insertions deletions different objects rules constraints literals executing right portion code code certain relationship kb updates stored kb 
fig 
presents model able capture relationships uniformly model control implementation predicative formulas 
top layer class proposition stands synonym telos kbs propositions instances 
operations apply propositions compiling predicative formula 
execution done tools 
instantiating top level objects interpreted specification certain system architecture case conceptbase 
offers operation called compile takes produces output evaluable 
bottom instance level interpreted execution system fig 
compilation new constraint patients drugs 
dependency generated code original text constraint recorded instance object compile 
simplified constraints evaluated meta interpreter called 
inserting new integrity constraint corresponds adding capability checking simplified forms evaluator tool 
fig 
shows represented tool model 
new operation ability check simplified constraint fig 
insertion heals literals 
simplified constraint instantiated applying mgu attrvalue heals attrvalue heals pain 
tool model accompanied generic procedures trigger messages form tool operation proposition 
consistent information system tool operation proposition model compile execute insert output system architecture run compile forall instanceof patient attrvalue takes instanceof drug implies instanceof attrvalue suffers forall patient forall drug forall symptom attrvalue takes attrvalue heals attrvalue suffers execution compile operation fig 
model tools operations propositions application compilation constraints proposition say inserted deleted 
conceptbase automatically generates messages searching operations tools 
consistent information system attrvalue heals system architecture run forall instanceof patient attrvalue takes instanceof drug implies instanceof attrvalue suffers insertion literal evaluate insert forall instanceof patient attrvalue takes instanceof drug implies instanceof pain symptom attrvalue suffers pain attrvalue heals pain insert fig 
application model constraint evaluation connected classes examples figures messages execute compile insert forall patient forall drug evaluate forall instanceof patient 

insert attrvalue heals pain representing system behavior part consistent kb benefit information checked integrity 
important example concerned classes section 
conceptbase stores propositions form proposition oid lit dependson 
referential integrity prevents deletion concerned class lifetime literal occurrence lit 
previous example literal occurrence attrvalue takes connected takes attribute patient see fig 
proposition attrvalue takes dependson concerned class literal compile time formula formula refers class existing kb rejected 
reason declarative specification predicative formula may removed long simplified forms part system 
means relationship specification implementation maintained automatically see jjr 
hand tool model describe system architecture kind system specification 
just insertion deletion operation links propositions tools alter behavior system availability non availability operation 
esprit project daida version tool model specialized software process modeling interconnect distributed environments database software specification design implementation concept global knowledge base 
representation tools part application knowledge base promises notion database integrity re describe consistent environments 

method checking integrity interpreted object oriented systems 
test case implemented ideas system conceptbase 
see contributions 
deductive integrity checking method proposed formula compilation phase independent database state evaluation phase checking integrity transactions code generated phase 
rules affecting constraints regarded integrity checking 
simplification formulas supported level attribute updates opposed algorithms relational domain updates occur complete tuples 
method treats case constraints rules updated inserted deleted run time system 
incremental compiler conceptbase uses explicit links declarative specification executable code maintain system 
update instantiates simplified form linked classes 
exploitation search space limiting data structuring particular specialization supported 
rules constraints introduced object oriented data models stating dependencies literals class objects 
behavioral aspects compilation evaluation stored class citizens kb 
active databases dbm object oriented databases rrr rely hand written procedures declarative specifications 
additionally approach dependencies behavioral aspects subject consistency 
important problems opportunities remain explored 
firstly management redundant derived information object level data derived rules metalevel evaluators derived compilation offer significant promise efficiency gains jjm 
secondly plan extend compilation techniques case complex configured objects studied 
current strategy resolving integrity violation simply reject transaction 
sophisticated approach provides automatic repair procedures generated integrity constraints cw 
provision exploit interaction multiple updates hi sv formula simplification restriction concerned classes 
considers modifications pair insert delete updates transaction single operation 
cut certain integrity constraints demanding existence modified attribute 
concerns integration predicative temporal constraints telos 
specify behavior system relating time tool invocation system time new object 

abd atkinson bancilhon dewitt dittrich maier zdonik 

object oriented database system manifesto 
proc 
int 
conf 
deductive object oriented databases kyoto japan 
adv committee advanced dbms function 
third generation database system manifesto 
memorandum ucb erl university california 
bl brachman levesque 

knowledge base view databases knowledge level 
proc 
int 
conf 
expert database systems menlo park calif bdm bry decker 

uniform approach constraint satisfaction constraint satisfiability deductive databases 
proc 
edbt venice 
bmm bry martens 

integrity verification knowledge bases 
esprit bra ecrc deliverable 

cw ceri widom 

deriving production rules constraint maintenance 
proc 
th int 
conf 
large databases brisbane australia 
dbm dayal buchmann mccarthy 

rules objects knowledge model active object oriented database system 
proc 
nd int 
workshop object oriented database systems bad germany 
dec decker 

integrity enforcement deductive databases 
proc 
int 
conf 
expert database systems menlo park calif jarke jeusfeld rose 

conceptbase user manual 
report mip universitat passau germany 


entwurf und eines fur versions und 
diploma thesis universitat passau germany 

hi hsu imielinski 

integrity checking multiple updates 
proc 
acm sigmod int 
conf 
management data 
jjm jarke jeusfeld 

redundancy integrity management deductive object bases preliminary investigation 
esprit bra deliverable 

jjr jarke jeusfeld rose 

software process modeling strategy kbms implementation 
proc 
int 
conf 
deductive object oriented databases kyoto japan 
jarke mylopoulos schmidt vassiliou 

information systems development knowledge engineering review daida project 
appear soviet union report mip universit passau germany 
kg 

auf dem weg zur praxis 
informatik forschung und entwicklung springer verlag 
koubarakis mylopoulos stanley borgida 

telos features formalization 
technical report kr university toronto ont ks kowalski sadri 

theorem proving approach database integrity 
minker 
ed foundations deductive databases logic programming morgan kaufmann publishers 
kr kruger 

am beispiel von conceptbase 
diploma thesis universitat passau germany 
lv 

deductive query evaluation system 
proc 
int 
conf 
deductive object oriented databases kyoto japan 
lst lloyd topor 

integrity constraint checking stratified databases 
technical report department computer science university melbourne 
hasan wilkinson 

iris kernel architecture 
proc 
edbt venice 
man manola 

evaluation object oriented dbms developments 
technical report tr gte laboratories waltham ma 
mylopoulos borgida jarke koubarakis 

telos language representing knowledge information systems 
acm trans 
information systems appear nt naqvi tsur 

logical language data knowledge bases 
computer science press 
nic nicolas 

logic improving integrity checking relational databases 
technical report cert toulouse france acta dec 

rrr dittrich abramowitz 

support design processes structurally object oriented database system 
proc 
nd int 
workshop objectoriented database systems bad germany 
sv simon valduriez 

design analysis relational integrity subsystem 
mcc technical report 
db 
staudt 

und auswertung 
diploma thesis universitat passau germany 
stonebraker goh 

rules procedures caching views database systems 
memorandum ucb erl university california 
