classical negation logic programs disjunctive databases michael gelfond university texas el paso el paso texas vladimir lifschitz university texas austin austin texas important limitation traditional logic programming knowledge representation tool comparison classical logic logic programming allow deal directly incomplete information 
order overcome limitation extend class general logic programs including classical negation addition negation failure 
semantics extended programs method stable models 
concept disjunctive database extended similar way 
show facts commonsense knowledge represented logic programs disjunctive databases easily classical negation available 
computationally classical negation eliminated extended programs simple preprocessor 
extended programs identical special case default theories sense reiter 
important limitation traditional logic programming knowledge representation tool comparison classical logic logic programming allow deal directly incomplete information 
consistent classical theory partitions set sentences parts sentence provable refutable undecidable 
logic program partitions set ground queries parts query answered 
happens traditional declarative semantics logic programming automatically applies closed world assumption predicates ground atom follow facts included program assumed false 
procedurally query evaluation methods logic programming give answer query succeed provide counterpart undecidable sentences represent incompleteness information classical axiomatic theories 
order overcome limitation propose consider extended logic programs contain classical negation addition negation failure 
general logic programs provide negative information implicitly closed world reasoning extended program include explicit negative information 
language extended programs distinguish query fails sense succeed query fails stronger sense negation succeeds 
general logic program lloyd defined set rules form am am atom 
word general stresses fact rules may contain negation consequently general horn clauses 
recall literal formula form atom 
negation sign negative literal represents classical negation negation failure expressions form occurring general logic programs literals definition 
extended logic program set rules form lm lm literal 
semantics extended programs described extension stable model semantics general logic programs proposed gelfond lifschitz 
stable model semantics defines set ground atoms stable model program 
behaved program exactly stable model answer program supposed return ground query depending belongs stable model 
existence stable models indicates program possible 
extended program define set ground literals qualifies answer set 
program doesn contain classical negation answer sets stable models 
behaved extended program exactly answer set set consistent 
answer program supposed return ground query unknown depending answer set contains 
answer corresponds presence explicit negative information program 
consider instance extended program consisting just rule intuitively rule means false evidence true 
see answer set program qg 
answers program give queries respectively unknown false 
example compare programs don contain call programs single answer set sets different 
answer set pg answer set qg 
semantics contrapositive respect assigns different meanings rules reason interprets expressions inference rules conditionals 
positive programs points view lead semantics 
language extended programs includes classical negation classical implication 
approach important computational advantages 
see general conditions evaluating query extended program reduced evaluating queries program doesn contain classical negation 
extension general logic programs hardly brings new computational difficulties 
class extended programs interest connection problem relation logic programming nonmonotonic formalisms see przymusinski overview 
shown bidoit froidevaux general logic programs viewed default theories sense reiter rei 
similar reduction applicable extended programs turn notational variant natural easily identifiable subset default logic 
say class extended programs place logic programming meets default logic halfway 
answer sets semantics extended programs treats rule variables shorthand set ground instances 
sufficient define answer sets extended programs variables 
done steps 
consider extended programs variables addition don contain rule program 
extended programs correspond positive horn case traditional logic programming 
program exactly answer set 
set consist informally speaking ground literals generated rules program ii classical logic 
obviously case set ground literals may logically entail ground literal doesn belong contains pair complementary literals observation suggests definition 
extended program variables doesn contain lit set ground literals language 
answer set smallest subset lit rule lm lm ii contains pair complementary literals lit 
denote answer set program doesn contain negation failure ff 
positive program program containing condition ii trivial ff simply minimal model 
clear answer sets programs agreement definition ff pg ff qg extended program variables 
lit denote set ground literals language 
set ae lit extended program obtained deleting rule formula body ii formulas form bodies remaining rules 
clearly doesn contain answer set defined 
answer set coincides say answer set 
words answer sets characterized equation ff instance order check qg answer set program example construct program qg program contains rule result deleting rule 
answer set program qg set started 
consequently answer set easy check subset literals fixpoint property 
answer sets intuitively possible sets beliefs rational agent may hold basis information expressed rules 
set ground literals agent believes true rule subgoal view subgoal trivial 
able replace set rules simplified set rules answer set coincides choice set beliefs rational 
need verify course second general definition answer sets applied program equivalent definition 
immediate consequence fact fixpoint condition turns ff 
hand doesn contain positive program answer set doesn contain negative literals 
consequently answer set general logic program program classical negation set atoms 
definition answer set coincides case definition stable model gelfond lifschitz 
notice sign stands negation failure corresponds notation 
conclude answer sets general logic program identical stable models 
sense semantics extended programs applied general programs turns stable model semantics 
essential difference absence atom stable model general program represents fact false absence answer set extended program taken mean known return point section section 
think answer sets incomplete theories models instance fitting przymusinski van gelder 
program answer sets incomplete sense different interpretations answer query may depend interpretation 
extended program contradictory inconsistent answer set answer set containing pair complementary literals 
instance program consisting rules contradictory 
clear general logic program contradictory 
proposition 
contradictory program exactly answer set set literals lit 
proposition shows approach negation different paraconsistent approach blair subrahmanian 
proof 
clear definition answer sets answer set containing pair complementary literals coincides lit 
fact contradictory program answer set consequence lemma lemma 
extended logic program answer sets proper subset 
proof 
answer sets ae clearly ae follows ff ae ff ae consequently doesn guarantee existence answer sets 
illustrated general logic program stable models representing knowledge classical negation negation failure logic programs leads undesirable results eliminated substituting classical negation 
indebted john mccarthy example 
school bus may cross railway tracks condition approaching train 
fact expressed rule cross train absence atom train database interpreted absence approaching train 
knowledge representation convention unacceptable information presence absence train may available 
instance train included database driver vision blocked certainly don want bus cross tracks 
situation different classical negation cross train cross belong answer set negative fact train included 
difference logic program essential assume available positive information complete closed world assumption reiter applicable closed world assumption predicate expressed language extended programs rule rule included program interchangeably bodies rules 
express known true express false 
predicates assumption opposite may appropriate instance set terminal vertices directed graph defined program terminal arc terminal terminal predicate free include rules database leave 
consider example 
jack employed stanford university jane employed sri international employed jack stanford employed jane sri employed individual adequate income adequate income employed answer set program rules jack stanford employed jane sri adequate income jack adequate income jane set contains negative literals doesn allow assert instance jack employed sri 
claim employment information database complete expressed closed world assumption employed employed employed appending rule program add literals employed jack sri employed jane stanford answer set 
available employment information complete stanford sri restricted rule employed stanford employed stanford example negation british nationality act quoted kowalski commencement person shall status commonwealth citizen status british subject act 
statement postulates closed world assumption predicates 
kowalski remarks need represent statements kind explicitly general logic program implicit semantics language 
agree may desirable permit predicates definitions assumed complete require explicit declaration completeness assumption 
language extended programs declarations represented rules form 
commit particular closed world assumption deciding opposite predicates represented predicate constant considered negative 
sense language extended programs symmetric default logic reiter autoepistemic logic moore formula circumscription mccarthy 
contrary modification approach proposed kowalski sadri symmetric 
section say closed world assumption extended programs 
example kinds negation 
college uses rules awarding students 
student gpa eligible 

minority student gpa eligible 

student gpa eligible 

students eligibility determined rules interviewed scholarship committee 
rules encoded extended program eligible eligible minority eligible interview eligible eligible rule says interview evidence eligible evidence eligible 
program conjunction database specifying values extensional predicates minority 
assume instance facts available students ann ann database contains information minority ann 
ann minority student matter principle declined state fact application 
extended program consisting rules answer set ann ann interview ann reduction general programs extended program 
predicate occurring new predicate arity 
atom called positive form negative literal 
positive literal definition positive form 
positive form literal denoted stands general program obtained replacing rule instance program terminal arc terminal terminal course usual definition terminal language general logic programs 
set ae lit stands set positive forms elements proposition 
consistent set ae lit answer set answer set sense mapping 
reduces extended programs general programs gives indication represents intuitively negation proof proposition lemmas 
lemma 
program doesn contain ff ff proof 
ff simply set literals generated applying ground instances rules lm inference rules 
similarly ff set atoms generated applying corresponding positive rules clear atoms derivable positive rules exactly positive forms literals derivable rules original program 
lemma 
contradictory program doesn contain ff contains pair atoms form proof 
consider set ground literals generated applying rules inference rules 
assume consistent 
ff ff consistent 
impossible contradictory 
consequently inconsistent 
complementary literals belong derived rules inference rules 
applying corresponding positive rules derive consequently ff 
proof proposition 
loss generality assume doesn contain variables 
consistent set literals 
definition answer set ff rewritten ff goal prove equivalence ff ff case 
lemma left hand side equivalent ff clearly equivalent right hand side 
case contradictory 
consistent right hand side false 
lemma ff contains pair consistent contain pair left hand side false 
corollary 
set ae lit consistent answer set answer set 
proof 
proposition answer set need show answer sets 
ae lit answer set 
consistent proposition consistent 
proposition answer set consequently corollary shows query evaluation procedures developed general logic programs applied extended programs 
behaved instance stratified answer set doesn contain pair atoms form behaved literal lit belongs answer set ground atom belongs answer set condition verified principle usual logic programming system 
instance fact literals included belong answer set confirmed applying prolog query evaluation procedure queries ann ann interview ann queries variables processed similar way 

consistency assumption statements proposition corollary essential stratified 
demonstrated example program answer sets stratified program 
answer set positive form inconsistent set fp qg 
relation default logic stable model semantics equivalently described terms reducing logic programs fixpoint nonmonotonic formalism default logic autoepistemic logic introspective circumscription 
extension discussed reformulated reduction formalisms 
section show language extended programs embedded default logic 
review default logic restricted case quantifier free defaults sufficient purposes 
default expression form mh mh quantifier free formulas 
consequent default prerequisite justifications 
default theory set defaults 
operator associated default theory defined follows 
set sentences smallest set sentences ground instance default ii deductively closed 
extension identify rule lm lm default lm ml stands literal complementary extended program identified way default theory 
clear default theory extended program justifications consequents literal preconditions conjunction literals 
proposition 
extended program answer set deductive closure extension ii extension deductive closure exactly answer set 
deductive closure operator establishes correspondence answer sets program extensions 
proof proposition lemmas 
denote deductive closure set sentences th 
lemma 
set sentences belongs range extended program th lit proof 

deductively closed th lit ae th ll prove opposite inclusion showing th lit satisfies closure conditions characterizing ground instance mh mh rule th lit th lit ii th lit deductively closed 
second assertion obvious 
assume th lit seen th lit ae consequently literal follows lit ae th lit lemma 
answer set extended program th lit proof 
answer set extended program 
contradictory proposition lit consequently th lit lit 
consistent set ground literals ground literals logically follow precisely elements lemma 
extended program deductively closed set sentences th ff lit proof 
default replaced ground instances assumed loss generality doesn contain variables 
show ae th ff lit proving th ff lit satisfies closure conditions characterizing 
default corresponding rule lm th ff lit lm lemma lm th ff lit lit ff lit deductively closed implies lm consequently rule lm belongs lit view follows ff lit ae th ff lit furthermore th ff lit deductively closed 
inclusion proved 
opposite inclusion th ff lit ae proved show ff lit ae deductively closed 
proving lit satisfies closure conditions ff lit 
lm lit rule lm lit definition section rule obtained rule deleting lm lm lit lm literals follows lm definition applied default implies consequently lit 
furthermore lit contains pair complementary literals inconsistent 
deductively closed coincides set sentences lit lit 
proof proposition 
answer set 
lemmas definition answer set th th ff th lit th ff th prove part ii consider extension 
lit answer set lemmas ff lit th ff lit lit lit lit hand lemma deductive closure lit remains show answer set th lit 
assume th lemma lit th lit closed world interpretation general logic programs syntactically general logic programs special case extended programs 
canonical model behaved general program unique stable model identical solution set defined section 
spite semantic difference set rules viewed general program set rules viewed extended program 
absence ground atom canonical model general program indicates false model correct answer query absence answer set collection rules treated extended program indicates answer query unknown 
instance answer set program feven set contains semantics extended programs tells answer query unknown contrary intended meaning definition 
meaning formally expressed language extended programs adding closed world assumption section 
solution set feven example suggests extended program semantically equivalent general program obtained adding closed world assumption predicates 
define closed world interpretation cw general program extended program obtained adding rules predicate constants language distinct variables arity proposition shows answer sets cw related answer sets expect 
pos stand set positive ground literals language 
proposition 
answer set general logic program pos sg answer set cw 
answer set cw represented form answer set 
proof 
loss generality assume doesn contain variables 
result replacing rules cw ground instances written answer set need show answer set denote definition section pos sg follows ff ff solution set prove second claim take answer set define pos 
ff ff pos ff pos sg clear summand union positive part second summand negative part 
conclude ff pos answer set second pos sg pos consequently pos classical negation disjunctive databases idea rules disjunctive heads received attention years 
attempts define declarative semantics disjunctive logic programs disjunctive databases przymusinski 
consider simple example 
jack employed stanford university sri international employed individual adequate income 
follows jack adequate income 
easy formalize instance commonsense reasoning classical logic clear express facts logic program 
disjunctive database employed jack stanford employed jack sri adequate income employed head disjunctive rule subtle difference see disjunction heads rules disjunction classical logic similar difference contrapositive classical implication discussed difference 
extended disjunctive database set rules form lm lm literal 
definition answer set extended disjunctive databases generalizes definition section 
extended disjunctive database variables doesn contain 
section lit stands set ground literals language 
answer set minimal subset lit rule lm lm ii contains pair complementary literals lit 
consider instance database second rule replaced ground instances 
answer sets jack stanford adequate income jack jack sri adequate income jack answer query may depend answer set selected 
instance answer query employed jack stanford relative answer set answer query relative second set unknown 
answer adequate income jack unconditionally 
extended disjunctive database variables 
set ae lit extended disjunctive database obtained deleting rule formula body ii formulas form bodies remaining rules 
clearly doesn contain answer sets defined 
say answer set 
order apply definition answer set extended disjunctive database variables replace rule ground instances 
example add closed world assumption employed employed employed 
new database answer sets jack stanford employed jack sri adequate income jack jack sri employed jack stanford adequate income jack interesting embedding extended programs default logic section generalized disjunctive databases straightforward way 
compare instance rule default database answer sets fpg fqg default theory extension deductive closure example shows difference classical disjunction default logic 
example illustrating difference consider database law excluded middle classical logic second rule dropped changing meaning database 
rule expresses known true known false 
answer set database containing rule includes database consisting just rule answer set empty answer sets fp qg pg 
extended logic programs extended disjunctive databases classical negation negation failure 
semantics method stable models 
facts commonsense knowledge represented logic programs disjunctive databases easily classical negation available 
particular rules extended programs formalizing closed world assumption specific predicates 
general conditions query evaluation extended program reduced query evaluation general program obtained replacing classical negation predicate new predicate 
extended program viewed default theory justification consequent literal precondition conjunction literals 
semantic equivalent general logic program language extended programs formed adding closed world assumption predicates 
grateful john mccarthy przymusinska przymusinski rodney topor comments earlier drafts 
research supported part nsf iri iri darpa contract 
notes 
idea providing incompleteness information logicbased query answering systems permitting answers simply ground queries discussed gelfond gelfond lifschitz 
kinds negation appears somewhat similar distinction strong weak negation wagner 

notice comparison poole goebel poo add classical negation prolog immediately get full order logic full resolution 
interpret classical implication 

kowalski kowalski sadri provisions legislation negative form declaration shall registered 
preliminary version kowalski sadri statements treated integrity constraints conditions identified 
rules negative heads natural 

mapping related methods translating inheritance hierarchies logic programs proposed gelfond lifschitz gelfond lifschitz 
methods require new predicates introduced purpose representing negative conditions 
instance assertion penguins don fly written flies penguin positive literal flies intuitively meaning negative literal flies 
willing language extended programs object language translation process procedure produce flies penguin additional step replacing flies flies viewed instance general transformation 

historically reductions proposed earlier definition stable models 
reduction autoepistemic logic gelfond equivalence stable model approach semantics established gelfond lifschitz theorem 
reduction default logic described bidoit froidevaux see lin shoham shown equivalent stable models bidoit froidevaux 
introspective circumscription defined lifschitz relation stable models discussed sections 

autoepistemic logic purpose leads complications 
related fact semantics extended programs contrapositive respect classical negation seen rule generally equivalent consequently programs interpret implication 
fix problem try modify translation gelfond insert autoepistemic operator front literal body rule doesn follow 
rules translated different autoepistemic formulas oe oe unfortunately translation reduces behaved programs autoepistemic theories extensions 
instance autoepistemic theory lp oe corresponding trivial program extensions 
unintended extensions eliminated ideas marek truszczy nski marek truszczy nski 

restriction allows disregard process skolemization involved defining extensions general case reiter section 

notation reiter written mh mh mh mh reiter default theory may include addition defaults formulas play role axioms 
doesn give additional generality axiom identified default true 
databases classical negation definition equivalent definition minimal model minker 

definition roughly equivalent construction described section przymusinski applied stable model semantics 
contradictory programs treated przymusinski somewhat differently 
bidoit froidevaux nicole bidoit christine froidevaux 
minimalism subsumes default logic circumscription 
proc 
lics pages 
bidoit froidevaux nicole bidoit christine froidevaux 
negation default logic programs 
technical report universit paris xi 
blair subrahmanian howard blair subrahmanian 
paraconsistent logic programming 
theoretical computer science 
fitting melvin fitting 
kripke kleene semantics logic programs 
journal logic programming 
gelfond lifschitz michael gelfond vladimir lifschitz 
stable model semantics logic programming 
robert kowalski kenneth bowen editors logic programming proc 
fifth int conf 
symp pages 
gelfond lifschitz michael gelfond vladimir lifschitz 
compiling circumscriptive theories logic programs 
michael johan de kleer matthew ginsberg erik sandewall editors non monotonic reasoning nd international workshop lecture notes artificial intelligence pages 
springerverlag 
gelfond lifschitz michael gelfond vladimir lifschitz 
logic programs classical negation 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
gelfond michael gelfond 
stratified autoepistemic theories 
proc 
aaai pages 
gelfond michael gelfond 
autoepistemic logic formalization commonsense reasoning 
michael johan de kleer matthew ginsberg erik sandewall editors non monotonic reasoning nd international workshop lecture notes artificial intelligence pages 
springer verlag 
kowalski sadri robert kowalski sadri 
logic programs exceptions 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
kowalski robert kowalski 
treatment negation logic programs representing legislation 
proc 
second int conf 
artificial intelligence law pages 
lifschitz vladimir lifschitz 
circumscription autoepistemic logic 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
lin shoham fangzhen lin yoav shoham 
argument systems uniform basis nonmonotonic reasoning 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
lloyd john lloyd 
foundations logic programming 
springer 
marek truszczy nski marek truszczy nski 
autoepistemic logic defaults truth maintenance 
manuscript 
marek truszczy nski marek truszczy nski 
relating autoepistemic default logic 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
mccarthy john mccarthy 
applications circumscription formalizing common sense knowledge 
artificial intelligence 
minker jack minker 
indefinite data bases closed world assumption 
proc 
cade pages 
moore robert moore 
semantical considerations nonmonotonic logic 
artificial intelligence 
poole goebel david poole randy goebel 
gracefully adding negation disjunction prolog 
ehud shapiro editor proc 
third int conf 
logic programming pages 
przymusinski przymusinski 
relationship logic programming non monotonic reasoning 
proc 
aaai pages 
przymusinski przymusinski 
valued formalizations non monotonic reasoning logic programming 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
przymusinski przymusinski 
extended stable semantics normal disjunctive programs 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
reiter raymond reiter 
closed world data bases 
gallaire jack minker editors logic data bases pages 
plenum press new york 
reiter raymond reiter 
logic default reasoning 
artificial intelligence 
van gelder allen van gelder kenneth ross john schlipf 
founded semantics general logic programs 
journal acm 
appear 
wagner gerd wagner 
sources nonmonotonicity vivid logic weak falsity inconsistency handling 
brewka freitag editors proc 
workshop nonmonotonic reasoning 
