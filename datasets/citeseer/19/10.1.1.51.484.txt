electronic notes theoretical computer science bi rewriting rewriting logic marco schorlemmer institut en intel artificial superior cient campus uab catalunya marco iiia csic es rewriting logic appears properties logical framework useful development programming languages attempt integrate various paradigms declarative programming 
propose tend operational semantics languages basing bi rewrite systems ordered chaining calculi apply rewrite techniques order theories arbitrary possibly non symmetric transitive relations important breakthrough automation deduction kind theories 
show proof calculus bi rewriting technique may serve framework different proof calculi equational logic horn logic presenting specific cases bi rewrite systems 
deduction essentially bi rewriting theory rewriting logic 
interest specifications theories transitive relations arisen result research general framework bi rewriting operational semantics programming paradigms useful development rapid prototyping tools kind specifications 
term rewriting mainly technique deduction equational theories studied thoroughly context rewrite systems :10.1.1.15.3043
noticed rewriting done direction limited equivalence relations applicable arbitrary transitive relations 
meseguer showed implicit logic underlying rewrite systems equational logic rewriting logic 
meseguer put strength research developing strong mathematical semantics rewriting logic formulating logic action concurrent change 
similar observation independently levy studied mechanisms automating deduction theories involving sub supported project tic funded cicyt fl elsevier science schorlemmer set inclusions 
applied rewrite techniques theories generalized notions church rosser termination rewrite systems general framework called bi rewrite systems 
important breakthrough automated deduction arbitrary transitive relations bachmair ganzinger levy generalization superposition calculi full order theories equality ordered chaining calculi theories arbitrary transitive relations equality 
calculi apply rewrite techniques ordering restrictions terms atoms involved inferences original chaining inference stated 
meseguer rewriting logic appears properties logical framework approach general logics different logics interest mapped 
proof calculus rewriting logic may useful framework variety proof calculi mapped specially proof calculus effective better efficient 
rewriting logic serves basis development programming languages maude attempt unify paradigms functional relational concurrent object oriented programming 
parker advocated programming non symmetric transitive relations preorder partial order relations generalizing subsequently combining different programming paradigms symbolic numeric functional logic programming 
approach integrating functional logic programming rewriting logic possibly non deterministic lazy functions fundamental notion done gonz alez moreno 
order deal practice multi paradigm languages maude necessary provide efficient operational semantics 
formulating straightforward proof calculus defined deduction rules rewriting logic argue applying known results automated deduction theories transitive relations able define general framework integration different operational semantics promising way efficiency point view 
conjecture bi rewriting ordered chaining done levy bachmair ganzinger respectively suitable mechanization results useful stating operational semantics framework 
preliminaries rewriting logic rewrite theory described tuple signature consisting set function symbols set structural axioms equations associativity commutativity set labels set sentences form labeled rules equivalence classes order terms schorlemmer reflexivity congruence delta delta delta replacement rule delta delta delta 



variables occurring transitivity delta delta delta fig 

deduction rules rewriting logic denumerable set variables order simplify exposition ideas consider unlabeled rewrite theories rules form describe rewrite theory means triple 
set axioms clear context denote equivalence class term term expression tj denotes subterm occurring position occurrence replaced term denote substitution oe hx 

mapping finite set fx variables extended morphism mapping gamma 

substitutions postfix notation 
entailment sentences rewrite theory denoted defined set deduction rules 
rewrite theory induces reachability relation obtain finite amount applications deduction rules 
ordering irreflexive transitive binary relation 
reduction ordering additionally founded infinite sequences form delta delta delta exist monotonic implies stable substitutions implies soe toe 
path orderings define reduction orderings constructing directly founded ordering symbols signature precedence exploring paths tree structure terms 
example path ordering lexicographic path sentences rewriting logic conditional rules consider unconditional ones 
define simplification orderings reduction orderings satisfying subterm property tj schorlemmer ordering 
complete survey termination orderings refer 
proof calculi rewriting logic straightforward proof calculus rewriting logic defined category equivalent classes terms objects proof terms morphisms 
proof terms built deduction rules defining entailment relation rewriting logic modulo equations proof terms identify equivalent proofs 
proof calculus variant birkhoff theorem non symmetric relation rewriting logic lemma rewrite theory denotes reachability relation induced rules 
finite theory presentations decision procedure birkhoff theorem implementable set theorems recursively enumerable known equational logic procedure absolutely intractable awkward implement 
orienting equations theory presentation reduction ordering terms subsequently completing presentation order satisfy church rosser property efficient proof calculus equational logic normal form computation 
normal form computation doesn sense general rewrite theories consider proof calculus rewriting logic takes reduction ordering terms account 
fact sentences rewriting logic orientation imply orientation coincides direction term reduction general 
bi rewrite systems orienting sentences rewrite theory ordering terms obtain separate rewrite relations oe denote gamma gamma respectively direction rules gamma direction reduction terms 
obtain way separate rewrite systems form bi rewrite system hr example consider rewrite theory fa fg pointed meseguer equational logic obtained rewriting logic adding symmetry rule deduction rules 
schorlemmer orienting rules lexicographic path ordering signature precedence obtain rewrite systems gamma 
gamma 
ae gamma 
order decision algorithm word problem rewrite theory bi rewrite system needs convergent satisfy properties church rosser termination system equivalent classes terms bi rewrite proof equivalent classes exists consisting paths rules rules join common equivalent class gamma 
delta delta delta gamma 
gamma delta delta delta gamma system terminating infinite sequences rewrites rules built 
termination guaranteed rewrite orderings defined respectively contained unique reduction ordering terms 
decision algorithm word problem convergent bi rewrite systems straightforward check reduce applying rewrite rules rewrite system exploring possible paths common equivalent class terms reached cw cw pq ae ae ae ae ae ae ae ae 
xxxxxxxxxxx xz gamma gamma gamma gamma gamma gamma gamma gamma psi conditions put rewrite relations order guarantee termination avoid possibility infinite branching 
finite convergent bi rewrite systems encode reflexive transitive monotone closure rewrite relation possible consequences rewrite theory deduction rules rewriting logic represented bi rewrite proof 
arbitrary bi rewrite system obtained orienting sentences rewrite theory non convergent general 
equational case rigorous need quasi termination sake simplicity case require termination 
schorlemmer exist necessary sufficient conditions terminating bi rewrite system church rosser stated levy adapting original results knuth bendix 
give definitions theorem summarizes result definition bi rewrite system hr rules gamma 
gamma 
vice versa non variable subterm oe general unifier hl oe oei called critical pair 
definition bi rewrite system hr rule gamma 
instance oe gamma 
oe rewrite rule gamma 
vice versa oe term subterm vj variable position appears xoe critical pair hl oe oei called variable instance pair critical variable instance pair said convergent bi rewrite proof divergent 
theorem levy terminating bi rewrite system hr church rosser convergent divergent critical variable instance pairs rules rules ideas proposed knuth bendix attempt complete non convergent terminating bi rewrite system means adding divergent critical variable instance pairs new rewrite rules systems notice number critical pairs rewrite rules sets finite 
definition variable instance pairs observe overlap term done variable position unification succeeds 
furthermore term arbitrary means variable instance pair exists rewrite rules infinite number 
see major drawbacks tractability generalization rewrite techniques arbitrary transitive relations completion procedure attempts add variable instance pairs new rewrite rules impossible manage general 
know completion equational theories process may fail orient critical pair reduction ordering 
various variants completion overcome situation generalized bi rewrite systems 
sake simplicity levy results case structural axioms considered 
variable instance pairs appear context rewriting modulo congruence 
schorlemmer ordered chaining decade shown process completion rewrite systems seen process refutation context resolution theorem proving 
principle refutation means resolution core operational semantics logic programming paradigm 
completion refutation process generalized full order theories equality improved 
generalization applicable completion bi rewrite systems consequently prove theorems theory rewriting logic applying process refutation captured ordered chaining calculus bachmair ganzinger 
ordered chaining inference rule clauses essence generalizes critical pair variable instance pair computation completion bi rewrite systems 
inference rule stated follows ordered chaining coe doe oe voe oe general unifier uj subterm position ordering restrictions terms literals hold soe toe voe uoe soe toe strictly maximal literal respect remaining disjunction coe clause uoe voe strictly maximal literal respect remaining disjunction doe second clause 
context equational case process completion known saturation 
complete calculus full order clauses transitive relations formed ordered chaining inference rule inference rules negative chaining ordered resolution ordered factoring transitivity resolution put ordering restriction terms atoms participating inference order prune search space explored see details 
bachmair ganzinger proved completeness calculus means model construction method saturated set clauses inductively construct ordering clauses herbrand interpretation minimal model saturated set 
model preordered set 
gave intuitive notion redundant clauses inferences context model construction method 
notion important analogy completion procedure attempts produce convergent bi rewrite system critical pairs variable instance pairs convergent bi rewrite proof saturation process attempts provide set clauses inferences redundant 
say case set clauses saturated closed redundancy 
notice criterion order finish process completion saturation respectively 
manner completion process rewrite rules kept possible saturation redundant give meaning saturated set 
schorlemmer clauses deleted redundant inferences avoided means called redundancy provers 
unfortunately equational case lack powerful redundancy proving techniques theorem prover dealing arbitrary transitive relations 
drawbacks general ordered chaining calculus seen calculi bi rewriting ordered chaining suitable proof calculi rewriting logic ordering restriction terms atoms significantly prune search space prover 
calculi highly prolific general case 
inferences require unification variable positions appear repeated term see definition operators monotonic respect transitive relation rewrite relation rewrite theories functional reflexive axioms explicitly needed order variable instance pairs convergent 
hand rewriting equivalence classes terms done making notion unique normal form equational term rewriting meaningless 
consequently order application rewrite rules significant making term rewriting shift don care nondeterminism don know nondeterminism backtracking needed rewrite proof restricting calculi special theories limiting kind axioms possible provide rewriting logic interesting subcalculi 
known dense total orderings endpoints variable chaining avoided completely 
furthermore completion theory lattices finite convergent bi rewrite system possible finite term rewrite system equational theory lattices exists fact suggests consider properties specific algebraic structures improving deduction rewriting logic 
framework proof calculi section idea proof calculus bi rewriting technique may serve framework different proof calculi 
sketch intuitive known logics mart oliet meseguer approach mapping rewriting logic 
am going proof calculi equational logic horn clause logic perspective bi rewriting 
may appear strange absurd sight purpose show operational semantics fact specific cases bi rewrite system special nature restrict significantly general proof calculus bi rewriting 
furthermore restrictions act drawbacks just mentioned section 
spite general drawbacks exists implementation prolog theorem prover ordered chaining done nieuwenhuis ganzinger called saturate currently better implementation techniques studied 
schorlemmer bi rewriting equational logic equational theory described triple signature consisting set function symbols set structural axioms equations set equations form equivalence classes terms 
note empty set equations terms 
equational theory mapped rewrite theory equation rules order explicit property symmetry 
bi rewrite system hr resulting orienting rules rule gamma 
rule gamma 
equation appears rewrite rule rewrite systems 
example consider map equational theory specifies non associative commutative sum operator rewrite theory gamma 
orienting rules lexicographic path ordering signature precedence get bi rewrite system gamma 
gamma 
gamma 
gamma 
due symmetry duplicating rewrite rule 
note generation critical pairs done looking overlaps left hand sides rules rewrite system case equivalent look overlaps rules unique rewrite system rules rewrite equations 
dealing equational theories bi rewrite systems simplified standard rewrite systems familiar instance equational term rewrite system equational theory example gamma 
gamma 
rewrite systems correspond semantics maude functional modules 
overlaps variable positions functional reflexive axioms needed overlaps convergent rewrite rules appear rewrite systems see 
set equations church rosser traditional sense equational rewrite systems instance see bi rewrite system hr obtained set rules schorlemmer mapped church rosser sense theorem rewrite systems equational sense 
case empty rewriting done modulo set axioms mentioned section thoroughly studied rewriting community results applied bi rewrite systems 
suggests patrick notion coherence completion implementation rewriting rewriting logic standard rewriting rewriting modulo applicable bi rewrite systems 
symmetry plays important role reasoning equivalence relations deal notion equivalence class 
different rewrite systems critical pairs computed overlapping left hand sides rules unique rewrite system 
rewrite system convergent important practical consequences term irreducible term called normal form normal form unique term 
rewriting done equivalence class members class share normal form 
decision procedure word problem equational theories convergent rewriting systems simpler arbitrary rewrite theories 
just normal forms terms equation want validate computed checked identity 
furthermore property don care nondeterminism theorem proving convergent equational theories kept 
bi rewriting horn logic horn theory described tuple 
triple signature consisting set function symbols set predicate symbols set structural axioms equations 
set horn clauses form gamma horn theory mapped sorted rewrite theory sorts term prop 
functions symbols take arguments sort term sort term set contains constant true sort prop binary infix operator sort prop argument elements sort prop ary predicate ary function symbol sort prop arguments elements sort term 
set containing associativity commutativity identity law respect constant true operator set rules obtained mapping clause gamma rule delta delta delta unit clause rule true example horn theory bob specifies parent par ancestor anc relation mapped rewrite theory bob tom par anc true follows set defined schorlemmer par ann bob par bob tom anc par anc par anc 
par ann bob true par bob tom true anc par anc par anc sld resolution bi rewriting known proof calculus resolution inference efficient operational semantics horn logic programming queries program existentially quantified formulas um solved refuting negation 
resolution step follows gamma um gamma gamma oe oe oe um oe oe general unifier query correspondent rewrite theory reads delta delta delta um true solved refuting negation 
inference step corresponds resolution step reads delta delta delta um true delta delta delta oe delta delta delta oe oe delta delta delta um oe true oe general unifier inference step negative chaining see 
chaining done term left hand side rule representing negated query term equivalence class true reached see inference applying rule delta delta deltat order narrow query term delta delta delta um delta delta delta um oe delta delta delta oe oe delta delta delta um oe oe general unifier approach followed kirchner kirchner vittek studied map proofs horn theories proofs rewrite theories 
map horn clauses narrowing rules proof theoretic structure horn logic sld resolution captured straightforward application deduction rules rewriting logic 
add rewrite theory notion strategy efficiently compute rewrite rules call rewrite theory plus strategy computational system 
negative chaining inference ordered rules delta delta delta rewrite theory oriented left right delta delta delta 
operational behavior query solving horn theories resolution strategies known logic programming prolog sld resolution captured trivial bi rewrite system gamma 
bi denotes free variables terms um sake simplicity inference shown horn theories structural axioms 
narrowing originally devised efficient unification procedure convergent sets rewrite rules 
schorlemmer rewrite system standard rewrite system rewriting directions operational behavior corresponds standard deduction rewriting logic 
said section ordering induced rules general reduction ordering bi rewrite system general non terminating 
ordered chaining horn theories reduction ordering terms account process theorem proving horn logic maps ordered chaining inference tree 
show example 
example orient rules rewrite theory obtained example lexicographic path ordering signature precedence anc par tom bob ann true get bi rewrite system par ann bob gamma 
true par bob tom gamma 
true anc gamma 
par ae par anc gamma 
anc said section orienting rules rewrite theory means reduction ordering terms critical pairs variable instance pairs rules rewrite systems arise need start process completion proving theorems generating new rules proof calculus ordered chaining see section 
interesting point unique operator signature monotonic respect relation conjunction operator overlap required generating new rules needed propositions terms 
furthermore map horn rewrite theories introduce variables arguments unification variable positions needed intractable variable instance pair generation completely avoided functional reflexive axioms superfluous shows ordered chaining inference tree proving theorem anc ann tom true rewrite theory example 
leaf framed sentence negation theorem 
leafs sentences rewrite theory 
inference steps labeled oc ordered chaining step nc negative chaining step ordered resolution step see details 
bold faced terms ones unified chained 
instance top inference step corresponds generation critical pair rewrite rules par anc gamma 
anc anc gamma 
par 
schorlemmer anc par anc anc par anc par par par ann bob true anc ann true par bob par bob tom true par bob tom true anc ann tom true anc ann par bob oc oc nc fig 

ordered chaining inference tree unfortunately observe linear strategy resolution horn theories completeness abandoned generation rules critical pairs ordered chaining inference steps correspond resolution clauses theory 
advantages term ordering arise possible saturate complete bi rewrite system obtained previously explained map search proofs sld resolution straightforward deduction rewriting logic see section non terminating replaced terminating bi rewriting reduction ordering terms 
example set horn clauses gamma gamma negated query gamma evident refute process applying terminate 
signature precedence rewrite theory horn theory mapped forms convergent bi rewrite system fq gamma 
fp gamma 
proof finite amount time true gamma 
rewrite step performed 
want direction study results termination horn clause programs point view schorlemmer late conditions termination restrictions proof calculi rewriting logic 
framework operational semantics logic programs mart oliet meseguer conjecture rewriting logic useful logical framework logics consider practical interest proof calculi correspond operational semantics programming languages logics 
step study specific restrictions bi rewriting calculi mappings proof calculi think useful defining general notion operational semantics research direction promising 
furthermore interest specifications logics transitive relations arisen 
mosses introduced unified algebras framework algebraic specification data types sorts treated values operations may applied sorts elements classify 
framework partial order distributive lattice bottom 
similar intuitions followed levy proposed calculus refinements formal specification model inclusions 
approach showed useful preliminary specification stepwise refinement complex systems 
rewriting logic embodiment maude served prototyping language specification complex systems 
result research design multi paradigm programming language dealing arbitrary transitive relations may useful developing rapid prototyping tools kind specifications 
general specification frameworks partial orders play central role variety concrete logic programming languages 
example ait kaci podelski order sorted feature terms basic data structure programming language life generalizing way flat order terms normally unique data structure logic programming 
order sorted feature term compact way represent collection elements non empty domain satisfy constraint encoded term may interpreted sort unified algebras calculus refinements life proposals sorts values 
algebraically term denotes element meet semi lattice top bottom essence subalgebra power set considered domain 
deduction life quite poor restricted terms definition partial order 
deduction reduces unification order sorted feature terms seen meet operation semi lattice 
performed normalizing conjunction constraints encoded terms unified equivalent intersecting collections elements terms represent 
schorlemmer jayaraman moon base partial order programming paradigm lattice structure specially interested complete lattice finite sets 
paradigm pursue aim integrate sets logic programming consider basic data structure paradigm relies 
framework deduction mechanisms validate order related functional expressions 
summarize necessary proof calculi theorem proving strategies different interesting logics study map proof calculi bi rewriting 
clarify efficiency issues strategies calculi captured restrictions general calculi bi rewriting sufficiently general proof calculus rewriting logic bi rewriting ordered chaining stated may serve general framework operational semantics interesting logic programming specification paradigms just mentioned 
knowledge restrictions translated efficiency aspects proof calculi help find optimal balance generality efficiency 
am specially grateful valuable comments helpful suggestions previous versions 
ait kaci podelski 
meaning life 
journal logic programming 
bachmair dershowitz hsiang 
orderings equational proofs 
symposium logic computer science pages 
bachmair dershowitz plaisted 
completion failure 
resolution equations algebraic structures volume 
academic press 
bachmair ganzinger 
ordered chaining total orderings 
bundy editor automated deduction cade volume lnai pages 
springer verlag 
bachmair ganzinger 
rewrite equational theorem proving selection simplification 
journal logic computation 
bachmair ganzinger 
rewrite techniques transitive relations 
proc ninth annual ieee symposium logic computer science pages 
bachmair ganzinger lynch snyder 
basic paramodulation superposition 
kapur editor automated deduction cade volume lnai pages 
springer verlag 
schorlemmer birkhoff 
structure algebras 
proc 
cambridge philos 
soc 
dershowitz 
termination rewriting 
journal symbolic computation 
dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science volume elsevier science publishers 
nation 
term rewrite systems lattice theory 
journal symbolic computation 
ganzinger nieuwenhuis 
saturate system 
www mpi sb mpg de saturate saturate html 
gonz alez moreno gonz alez opez rodr iguez artalejo 
rewriting logic declarative programming 
nielson editor programming languages systems esop lncs 
springer verlag 
hsiang rusinowitch 
proving completeness theorem proving strategies transfinite semantic tree method 
journal acm 
huet 
complete proof correctness knuth bendix completion algorithm 
journal computation system sciences 

canonical forms unification 
proc 
th international conference automated deduction lncs 
jayaraman moon 
partial order programming revisited 
proc 
algebraic methodology software technology amast pages 

jouannaud kirchner 
completion set rules modulo set equations 
siam journal computing 
kirchner kirchner vittek 
designing constraint logic programming languages computational systems 
van hentenryck saraswat editors principles practice constraint programming 
mit press 
klop 
term rewriting systems 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
knuth bendix 
simple word problems universal algebras 
leech editor computational problems algebra pages 
pergamon press 
lankford 
decision procedures simple equational theories axioms complete sets reductions 
technical report atp department mathematics computer science university texas 
schorlemmer lengauer wirsing 
object oriented airport specification refinement maude 
astesiano reggio tarlecki editors trends data types specification lncs 
springer verlag 
levy 
calculus refinements formal specification model inclusions 
phd thesis departament de inform universitat polit de catalunya 
levy 
bi rewriting term rewriting technique monotonic order relations 
kirchner editor rewriting techniques applications lncs pages 
springer verlag 
levy 
bi rewrite systems 
journal symbolic computation 
published 
lloyd 
foundations logic programming 
springer verlag 
mart oliet meseguer 
rewriting logic logical semantic framework 
technical report sri csl computer science laboratory sri international august 
mart oliet meseguer 
general logics logical frameworks 
gabbay editor logical system pages 
clarendon press 
meseguer 
general logics 
ebbinghaus editors logic colloquium pages 
elsevier science publishers 
meseguer 
conditional rewriting logic unified model concurrency 
journal theoretical computer science 
meseguer 
logical theory concurrent objects realization maude language 
agha editors research directions concurrent object oriented programming pages 
mit press 
mosses 
unified algebras institutions 
principles programming languages conference pages 
acm press 
nieuwenhuis 
implementation kernel theorem proving equality clauses 
proc 
joint conference declarative programming pages july 
nieuwenhuis rubio 
basic superposition complete 
european symposium programming 
nieuwenhuis 
saturation order constrained clauses saturate system 
kirchner editor rewriting techniques applications lncs pages 
springer verlag 
parker 
partial order programming 
unpublished monograph 
parker 
partial order programming 
popl th acm symposium principles programming languages pages 
acm press 
schorlemmer peterson stickel 
complete sets reductions equational theories 
journal acm 
plaisted 
equational reasoning term rewriting systems 
gabbay hogger robinson editors handbook logic artificial intelligence logic programming volume pages 
oxford university press 
robertson levy 
expressing program requirements refinement lattices 
fundamenta informaticae 
schorlemmer 
theorem proving transitive relations practical point view 
research report iiia institut en intel artificial csic may 
schorlemmer 
theories declarative programming 
proc 
joint conference declarative programming pages july 

automated theorem proving theories built theories including equality partial orderings sets 
journal acm 

rewriting effective model concurrency 
editors parle proc 
sixth int 
conf 
parallel architectures languages europe lncs pages 
springer verlag july 
