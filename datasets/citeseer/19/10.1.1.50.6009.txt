lightweight source model extraction gail murphy david notkin department computer science engineering university washington box seattle wa usa cs washington edu reverse engineers depend automatic extraction information source code 
useful kinds information source models wellknown call graphs file dependences predicting kind source model reverse engineer may need impossible 
developed lightweight approach generating flexible tolerant source model extractors lexical specifications 
approach lightweight specifications relatively small easy write 
flexible constraints information source extracted extract macros comments 
tolerant information extracted source necessarily compiled linked 
essence scan source constructs contribute specified source model ignoring constructs contribute source model 
developed tools support approach applied tools extraction number different source models file dependences event interactions call graphs systems implemented variety programming languages clos eiffel 
discuss approach describe application extract source models available existing systems example compute invoked relation field tools 
compare contrast approach conven research funded part nsf ccr canadian nserc post graduate scholarship 
permission digital hard copies part material fee granted provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copyright permission association computing machinery 
acm 
copy republish post servers redistribute lists requires prior specific permission fee 
sigsoft washington usa fl acm tional approach generating source models program database 
extracting various kinds information source code central undertaking reverse engineering tool 
examples useful kinds information call source models include call graphs file dependences lists program dependence graphs 
predicting kind source model reverse engineer may need impossible 
way lessen need anticipate demands define engine accept specifications desired source model extracting source model source code 
developed lightweight approach allows reverse engineers generate flexible tolerant source model extractors lexical specifications desired information 
ffl lightweight mean specifications new extractors reasonably small easy write 
example specifications source model extractors discuss section fit 
ffl flexible mean constraints information original source extracted 
example specifications extract models macros comments information contained source code 
ffl tolerant mean information extracted source necessarily compiled linked executable 
essence approach scan source constructs contribute specified source model 
instance specification extract call graph states lexical constructs represent calls skipping constructs data declarations control constructs 
approach provides similar flexibility matching source information lexically tools grep awk 
contrast tools provide additional support matching source constructs context multiple lines 
common approach extracting information source uses parsers 
parsers systems generally recognize syntactic constructs source code including may contribute desired source model 
tends parsers harder change accommodate new source models 
existing lexical syntactic methods extracting source models approach produces approximate information intended constructs may extracted unintended constructs may extracted 
approach generally balances precision extraction increased flexibility tolerance 
section describes technical basis approach grounded generation execution non deterministic finite state machines 
section describes application approach focusing extract tool invocation relationships field source code rei rei 
section provides discussion approach including assessment efficiency tools 
section covers related section summarizes effort 
source model extraction architecture source model extraction system shown 
source model specification engineer provides input system defines 
patterns interest source code 
actions execute pattern matched code 
post processing analysis operations combining local information extracted individual source code files global source model 
parts pattern action definitions generate scanner nondeterministic finite state machine reads sequence source code files produces stream local output relational intermediate representation 
third part definition post processing operations generate analyzer reads intermediate representation stream computes desired source model 
generate generate source code intermediate representation scanner analyzer source model source model specification architecture source model extraction system specification language specification language defines patterns actions analysis operations 
specifying information extract engineer describes information extract source code set hierarchical patterns 
pattern uses form regular expressions describe construct may source 
example pattern extract names functions defined file containing kr source code shown 
notation uses square brackets indicate optional constructs indicate non empty lists constructs nf pattern locating function definitions pattern shown specifies function definition consists optional type specification followed name function left parenthesis optional list formal arguments right parenthesis optional list declarations types formal arguments terminated semicolon opening curly brace start function body 
pattern generally extract function definitions example match definitions argument declared pointer type asterisk appended type prepended argument identifier int 
simple refinements basic pattern find virtually function definitions existing bodies code 
example pattern iteratively refined find function definitions lines yacc joh lex les code comprising field xref tool 
patterns may nested hierarchically 
instance extract static calls relation functions engineer may specify patterns shown pattern blank line child pattern 
extraction source scanned occurrence pattern 
pattern matched scanning continue looking occurrence pattern occurrences second pattern 
ensures scanning start function declaration tolerant syntactical deviations source code 
example scanning dependent closing curly brace perfectly matched braces definition function 
disjunction supported permitting description multiple patterns level represent alternation escape reserved single character tokens 
hierarchy 
example engineer search global data declarations function definitions defining patterns hierarchical level 
specifying actions engineer may attach action code patterns executed pattern matched source code 
action code access value matched lexemes perform operations writing intermediate representation stream 
shows pattern write simple stream form function calls function static calls matched source 
symbols introduce action code executed second pattern matched input source 
current tools define actions icon gg code 
implicitly specifying lexical information defining tokens basis common scanning approaches instance lex define classes tokens specified patterns 
class tokens class single character tokens 
tokens defined implicitly appearance specified pattern 
instance escaped left right parentheses patterns shown single character tokens 
second class tokens class identifiers consisting sequence non whitespace characters contain single character token 
specifying source model computations cases instance calls example engineer may able extract cases whitespace consists number space tab newline characters 
mechanisms provided redefining starting character sequences identify blocks comments ignored tokenizer 
cases may remove newline consideration whitespace 
nf nesting patterns locate calls nf write calls attaching action code patterns desired source model simple scan source code 
desired source model requires additional computation example calls relation include information files functions declared go example 
support system provides special functions may action code place relational information intermediate representation stream 
engineer may specify global analysis performed analysis section source model specification file 
example placing lines analysis calls file foo specification file selects tuples calls relation intermediate representation stream involve call function foo file writing tuples source model 
second third parameters function selection criteria tuples case second parameter empty string indicating restrictions placed calling functions 
generated tools specification source model system generates scanner analyzer 
scanner scanner generator translates patterns specified engineer description lexer description nondeterministic finite state machine 
descriptions combined icon program executes described non deterministic finite state machine input tokenized lexer 
example non deterministic finite state machine generated calls pattern provided 
node label indicating level pattern hierarchy 
initial state marked oval 
pattern input source model specification match state basically final state pattern described represented diamond shaped node 
portion machine matches formal arguments type declarations elided presentation purposes similar portion machine matches parameters function call 
transitions represented edges input tokens indicating transition taken 
special tokens appear edges state machine ffl ffl token indicates state transition may occur input 
token indicates transition may taken identifier single character token 
transitions taken state machine tokens produced lexer 
choice transitions available possible transition taken parallel 
scan portion machine match arguments argument type declarations elided 
generated non deterministic finite state machine extraction ner maintains set possible paths state machine token stream 
pattern input source model specification match state 
match state reached execution state machine tries reduce 
match state reached token consumed machine reduces executing action code associated matched pattern pruning current paths search space 
reduction occurs execution continues matched state 
multiple match states reached simultaneously machine choose match state reduce 
heuristics guide choice 
pattern matched patterns different levels hierarchy reduce pattern closest top hierarchy 
enables scanner reset 
calls example start definition new function resets search looking calls looking functions 

pattern matched hierarchical level reduce pattern largest number matched identifiers single character tokens 
generally selects specific pattern 
explicit path information maintained paths involve matches patterns 
active paths pruned transition possible current input token 
possible search space may explode patterns sufficiently specific 
bound search space third heuristic encoded machine 
heuristic prunes path fixed number tokens matched path specific pattern 
analysis analyzer generator translates analysis code source model specification file icon program reads tuples intermediate representation stream performs specified relational operations tuples 
example help assess approach wrote specification extract implicitly invokes gn source model tools field programming environment 
field tools communicate indirectly centralized message server 
tools announce events interest passing ascii messages message server receive messages interest server matches messages regular expressions registered server 
understanding implicitly invokes source model field may useful software engineers modifying existing tool integrating new tool environment 
events field start name tool announcing event coding style allows statically approximate dynamic interconnections field tools 
precisely functions announce events register interest events take parameter character string starting name event 
determine relation registration announcement tools events name 
portion specification extract announcement events field tools shown 
nested patterns defined 
pattern matches style function declarations 
second pattern matches calls function body take constant character string argument 
boldfaced entries indicate code attached output source model information patterns matched reduced 
pattern looks function declarations 
function declaration matched second pattern included search 
second pattern looks calls functions take parameter constant string 
action pattern determines call registration checking name function called announcement checking name function full specifications source model extraction specifications available request 
nf pattern extracting event announcements field source code called 
scan names events strings output relation indicating particular function particular file directory registers announces specified event 
example snippet code file handles messages field call graph display tool shown 
code extract information flow menu setup trace function announces event add event 
scanning field source code specification determined tools function event passed string 
tools called registration function variable containing name event 
inspection source code revealed values variables generally set reading auxiliary data file 
wrote separate line specification tools extract desired event registration information structured data file 
generated source model scanners analyzers specifications generated tools extract desired source model field source code 
extracting analyzing desired source model lines field source code took approximately minutes dec unoptimized prototype 
extracted event interactions field tools 
determining true implicitly invokes relationship field tools hard 
unix grep capture invocations registrations quantity information returned great lines control flow analysis done compute true relationship 
performing exact analysis hand best time consuming activity 
furthermore field allows events arbitrary strings constructed run time determining announced events undecidable 
compared extracted source model gleaned reading available literature man pages field 
ways sending messages tools functions constant character string parameter extractor missed implicit invocations tools 
example scanner determined tool call graph viewer announces events debugger analyzer context understand debugger registered interest events 
events nature determined improving analysis specification 
hand relations tools automatically extracted find study documentation 
instance interaction auto tool annotation editor tool extraction approach readily apparent documentation 
case unaware source model extraction tools extract similar relation 
discussion syntactic vs lexical extraction extraction approaches parser 
parsers full parsers extracting sufficient information compile program times partial parsers extracting information source needed populate void flow menu setup trace fw flow win fw event add call fw system sample code field database 
rigi mk field cia gc sniff bis examples partial parsers 
nature parsers full partial place syntactic constraints source code source models extracted 
compilation development activities syntactic constraints natural useful 
computing source models constraints unnecessary undesirable 
example requiring system header files correct difficult compute calls modules source model system ported 
addition difficulty providing errorcorrecting parser precludes parser approaches computing source model information subsequent syntactic error source 
building modifying existing parsers quite complicated practice 
expanding tool capabilities include additional source languages additional analyses seemingly conceptually simple quite difficult 
statement add new parser deceptively appealing 
practice brittleness leads ad hoc approaches 
example muller described case decided writing parser extracting information collection unix csh awk sed scripts 
contrast approach lexical allowing additional flexibility tolerance contents source code source model extracted 
lexical engine applies syntactic static semantic constraints 
errors source cause extractor tuples source model preclude extractor finding rest source model 
approach provides engineer additional flexibility handling variants language 
example small changes source model specifications shown section needed handle variants common personal computers 
extraction program database existing approaches program database derived source code turn desired source model extracted database 
contrast produce separate source model extractor desired source model 
difference part matter engineering 
understand situations approach may better requires consideration number dimensions 
database approach anticipate information include database 
new source model needed depends information database database structure generally modified tool creates database modified tools extract existing source models database may modified 
approach dependent anticipating needs 
approach computing source models demand may effective number source models need extracted source code scanning done desired model 
contrast conventional approach amortizes scanning costs database computed inexpensive extract source models variants permit declaration memory model information declaring source code constructs 
database 
griswold atkinson notion piggybacking applicable approach reduce costs extracting multiple source models ga 
writing specifications specifications easy write reasons 
specifications straightforward state engineer describes constructs source code manipulating intermediate representation 
second specifications generally small 
source model extractors defined date including call graph extractors event extractors clos implicitly invokes extractors field file dependence extractors str specifications fewer lines including patterns actions analysis operations 
largest eiffel mey call graph extractor consists lines primarily track local symbol table information resolve recipients messages 
specifications written iteratively addition specifications small extractor generator quite fast 
approximation lexical approach intrinsically approximate programming languages 
instance calls source model extractor generated approach may calls false negatives recognize lexemes representing call fact lexemes represent syntactic entity false positives 
cases fair tradeoff flexibility allowing reverse engineer extract useful information low cost 
example find publicly commercially available eiffel call graph extractor building approximate extractor couple hours beneficial engineer attempting understand system written eiffel 
confidence engineer accuracy information extracted lexical approach dependent part adherence particular styles coding programmers 
instance engineer greater confidence information extracted call graph extractor known multiple levels embedded calls relatively rare target system 
lightweight nature approach synergistic extracting approximate models 
specifications small extractor generator efficient iteratively refine generated extractors 
allows engineers balance efforts defining source model extractors precision generated extractors 
griswold atkinson ponder system ga engineer refine specification accuracy needed task achieved 
realistic option engineers conventional parser approaches 
efficiency table shows time required run calls extraction tools source code field xref tools 
rigi parser cflow tool extract directory file information table show analysis times tools 
total time required extracting source model unoptimized prototype order magnitude parsing approach 
understand efficiency trade offs icon generated code understand tradeoffs various heuristic settings 
related lexical engineers lexical tools style grep awk extract information source code 
tools useful finding occurrences particular lexical phrase reporting file phrase occurs 
support matching lexical phrases multiple lines 
tools style lex support matching multiple lines permit engineer easily specify hierarchical structures search patterns 
difficult tools ignore constructs comments leading large number false positives 
approach differs supporting contextual scan source hierarchical matching lexemes variables tool scan time analysis time total time tool field rigi cflow table performance extracting calls information sparc direct support post processing scanned information source models 
syntactic research efforts considered extraction information source parse tree representations refinery code miner dk pp ponder ga 
approaches typically full parsers particular languages 
approach differs systems searching source code constructs engineer specified performing full parse 
benefit performing full parse wider range source models may extracted program dependence graphs def chains 
parser create program database source models extracted xl browser jmn sniff cia field systems 
xl browser sniff cia systems extract information source code 
field programming environment extract information pascal source code 
approach differs systems generating extractors scanning source desired information needed scanning storing pre determined information program database 
generating extractors needed gain flexibility types source languages considered kinds information may extracted source code 
parse tree generators creating parser parse tree representation time consuming difficult engineer research efforts developed approaches generate parser parse tree representation syntactic specification language desired parse tree 
genoa system dev supports wide range user defined analyses parse trees created existing compiler front ends 
system gl takes input specification grammar source language analyzed specification parse tree created generates parser transform source code object oriented form parse tree may accessed client analysis programs 
approaches ease specification source model extractors requiring detailed syntactic information limited flexibility handle wide range source languages tolerance handling syntactically incorrect source 
contrast easier engineer extract source models full syntactic information necessary 
summary conventional approaches source model extraction place unnecessary restrictions type languages particular set supported condition syntax errors source code 
information may extracted source generally limited syntactic constructs programming language 
developed lexically approach extracting information source extract wide range source types programming language source files structured data files consider information contained source 
approach uses lightweight specification language permits useful set source models easily described models extracted existing systems 
built tools support approach execution nondeterministic finite state machines 
generated extractors analyzers similar efficiency parser extraction tools 
approach engineer able trade precision extraction increased flexibility tolerance 
acknowledgments steve provided valuable assistance improving efficiency generated icon code 
william griswold richard helm david lamb sui ching lan kevin sullivan michael john vlissides provided valuable comments earlier draft 
anonymous referees constructive comments 
aho kernighan weinberger 
awk pattern scanning processing language 
software practice experience 
bis 
sniff pragmatic approach programming environment 
proceedings usenix conference pages august 
markosian 
program transformation approach automating software reengineering 
proceedings th annual international computer software applications conference pages october 
dev devanbu 
genoa customizable language front independent code analyzer 
proceedings th international conference software engineering pages may 
dk dunn knight 
automating detection reusable parts existing software 
proceedings th international conference software engineering pages may 
ga griswold atkinson 
managing design tradeoffs program understanding transformation tool 
journal systems software 
appear 
gc grass chen 
information 
usenix conference pages april 
gg griswold griswold 
icon programming language 
prentice hall 
gl gil lorenz 
synthesizer object oriented parser 
technical report technion israel institute technology april 
gn garlan notkin 
formalizing design spaces implicit invocation mechanisms 
proceedings fourth international symposium vdm europe vdm lecture notes computer science pages 
springer verlag 
jmn nakamura helm 
architecture xl browser 
editor proceedings cas conference pages toronto ontario november 
ibm canada laboratory center advanced studies 
joh johnson 
yacc compiler compiler 
technical report computing science technical report bell laboratories murray hill 
kr kernighan ritchie 
programming language 
prentice hall 
les lesk 
lex lexical analyzer generator 
technical report computing science technical report bell laboratories murray hill 
mey meyer 
eiffel language environment 
prentice hall 
mk muller 
system programming large 
proceedings th international conference software engineering pages 
ieee compute society press april 
pp paul prakash 
source code retrieval program patterns 
proceedings fifth international workshop computer aided software engineering case pages july 
rei reiss 
connecting tools message passing field program development environment 
ieee software 
rei reiss 
field programming environment friendly integrated environment learning development 
kluwer academic publishers 
piazza roberts 
separating parsing analysis reverse engineering tools 
proceedings working conference reverse engineering pages may 
str stroustrup 
programming language 
addison wesley 
wong tilley muller storey 
structural case study 
ieee software january 
