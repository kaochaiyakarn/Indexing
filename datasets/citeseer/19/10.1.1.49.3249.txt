framework distributed interaction stephen crane november position argue implementation abstractions support interaction entities distributed system usually ad hoc need rigorous framework accomodate different types interaction subject agreed set requirements 
requirements framework meets argue quality service supported underlying transport system bearing semantics interaction 
distributed programming environments commonly restricted programmers single way expressing interactions programs components 
remote procedure call popular generalises centralised single threaded procedure call address spaces 
distributed programs quite centralised programs 
describing ways distributed semantics differ concentrate concurrency 
centralised program constrained single address space invariably possesses single thread control 
multithreaded communication threads shared data supported monitor conditions semaphores allow synchronisation mutual exclusion 
distributed program hand multiple threads control 
simultaneously active depends reasons distributing components program instance access remote data case distributed program collection loosely coupled components potentially located different enterprises 
open distributed system long running servers act response requests relatively short lived clients 
model client performs computation requests information server blocks receives reply 
needs rpc perfectly suited 
exploitation parallelism case motivation distribution problem hand susceptible sub division sub problems capable solved simultaneously 
communication components required maximum speed course minimal takes form asynchronous notification information 
rarely rpc request reply paradigm best solution 
course practice distributed programs fall neatly category 
interaction style supported programmers forced model required ones terms dominant paradigm 
modelling perfectly possible follow pleasant task programmers choice winning paradigm cause holy wars 
interaction style supported arguments favour treating equally apart rpc versus messagepassing debate 
outline arguments section 
third section describes components framework fourth demonstrates flexibility example 
conclude complete list currently implemented interactions 
requirements framework requirements motivated development interaction framework stem years development distributed programming environments instructional industrial applications 
distinguish requirements crucial support multiple binding idioms separation transport interaction semantics selection set guarded endpoints 
multiple binding idioms model distributed computation imposes strict separation program structure algorithmic aspects 
referred programming large viewing components software integrated circuits 
traditional models binding established party transaction client 
experience led belief essential client originated binding inappropriate parallel programming obscure application structure clarity easily obtained locating responsibility establishing initial application structure 
party binding essence party binding client uses initialise interfaces 
client obtained immaterial got nameserver result previous transaction execution environment 
party binding extremely common modern distributed systems 
orbix example binding performed party result bind action proxy 
normally implicit endpoint indistinguishable programmer automatically generated marshalling code performing necessary transformations 
third party binding manner define third party binding binding client server established client server 
third party binding relatively rare modern distributed systems 
systems transform configuration description initial application structure commonly third party binding 
management utilities perform online application reconfiguration role third party connect client server 
varying qos quality service term describes demands distributed application transport system interconnecting components 
introduces need replace traditionally common transport semantics best effort reliable delivery spectrum communication protocols best suited requirements particular application 
interaction qos orthogonal concepts 
programmers free specify quality service require transport supporting binding style interaction bearing quality service provided 
programmers misled considering rpc inherently reliable message passing best effort 
selection unix device independent model powerful abstraction things allows servers wait select event number heterogeneous devices 
similar fashion wish allow programmers server components allow services implemented combination interaction styles 
leads requirement interactions share common ancestor class allows servers wait event services 
events interest confined incoming requests service common case 
application may wish know qos required binding drops threshold connection remote service breaks altogether 
framework previous section motivated need framework describing properties wish interactions possess 
light requirements outline participating elements framework 
operations service remote operations proto ptr proxy client ops bind interface operations class relationships elements interaction 
participants shaded area shows elements interaction required framework 
classes outside area proto service supporting roles directly relevant discussion 
service class defines service interaction provides 
instances class destinations messages sent servers ports objects proxy placeholder bound interaction endpoint 
semantics attempted binding depends binder associated 
proxy published configuration description required block task accessing third party bound 
hand private unbound proxy cause exception 
intermediary service proxy 
initialised service qos description passed parameter compatible proxy bind operation causes creation desired communications subsystem 
interface defines signature target class supports interaction 
facilitates provision location transparency 
remote defines interface communications subsystem described qos description 
location transparency achieved making interface indistinguishable service 
elements implementation oriented mandatory 
convenient way fulfilling requirement location transparency 
shows instances classes interact establish binding located proxy service shows establishment binding remote service 
ptr ctor bind proxy op op get id get id binding local service 
bind proxy op op elaborate ctor create protocols proto transmit ptr proto session binding remote service 
binders binder implements desired binding style permitting controlled binding proxy manages 
different binders implement different behaviours response attempted unbound proxy 
binder transient existing manage initial binding action removing 
currently identified binders party binders require proxies bound 
binding occurs remove invocation sequence 
trap attempts invocation binding throwing exception terminating program 
third party binders block externally initiated binding action occurs 
party binders transient 
import binders intercept invocation trigger importation required service nameserver 
transient 
reconfigurable binders behave persistent third party binders 
export rebind service nameserver online management tools connect order break replace binding 
binders responsible obtaining consent protocol layers underpinning binding carrying reconfiguration 
relocating binders persistent objects support transparent binding replacement 
useful maintaining bindings mobile servers 
possible semantics binders 
behaviour closely related reconfigurable binders 
shows relationships binder classes 
interaction class proxies direct dependency contain merely smart pointer class binders descend replace binding taken place 
ptr operator import reconfigure binders class relationships 
populating framework validity framework demonstrated example 
extrema consider event dissemination remote object invocation 
event dissemination event dissemination easily pure client server distributed system immediately clear entity interaction client server 
model clients entities desiring event notification servers disseminate notifications events 
interaction typed structure notification data 
interaction comprises distinct bindings primary carries control messages client server secondary carries event notifications server client 
back binding established enable control message carrying event sink service private client side interaction 
receives control message event service binds new event sink proxy event sink adds proxy list clients 
classes implement interaction event implements event service 
contains list proxies client side notification services 
supports announce operation server transmit notification proxy list 
event proxy implements requirement compatible event service 
possesses control members enable disable client indicates bound server desire event notifications 
supports blocking selectable wait operations allow client synchronise arrival data 
event typed object facilitates construction primary control binding client server 
event interface typed base class event event remote supporting location transparency 
implementation event interaction comprises instances asynchronous notify class carries control data server event data client 
bindings endpoints may heterogeneous offering differing transport semantics types data instance reliable control messages timely event messages support group multimedia transmission 
remote object invocation corba compliant environment interaction client server entities achieved specifying interfaces interface definition language idl 
example idl interface file int open string name unsigned perm int close int des int read string buf int len int write string buf int len idl compiler translates definition representation useable implementation language client server components typically 
terms interaction model idl compiler factory user defined invocation oriented interaction classes 
back idl compiler emits classes reflecting view ptr file interface int open int close int read int write int open file int open file remote orb remote orb boa orb client orb server file file int open file proxy bind orb proxy idl generated interaction class structure 
file object implements file system service file proxy compatible client side entity ptr file interface 
provides access local file file remote file remote provides transparent access non local file marshalling request parameters unmarshalling returns 
functionality common object interaction classes located orb namespace boa basic object adaptor implements remotely server side endpoint 
corba defines certain activation authorisation responsibilities boas implement level 
remote stores identity peer boa provides operations send wait send buffers wait arrival buffers client 
client provides interface top protocol stack tailored remote invocations 
class functionality supplied concrete client protocol class supporting desired orb protocol 
server client interface concretion provided protocol 
pseudo interactions pseudo interactions degenerate cases interaction framework illustrating aspects flexibility envisaged framework designed 
illustrate cases distributed program initialisation operating system signals 
distributed program initialisation distributed programs regis comprise multiple copies executable image running different machines 
refer single executing image node 
nodes exhibit different behaviours depending command line arguments 
node regis program run executes anonymous singleton component root tree components 
wishes instantiate component node exist contacts execution service requesting run new copy image different arguments host network 
arguments inform new node logical node number location root configuration service 
new node binds party root configuration service notifies configuration service 
ready accept instantiation binding instructions 
configuration instantiate bind local remote instantiate bind instantiate bind protocol array operator array configuration service class relationships 
interaction nodes configuration services degenerate case order provide third party binding service participants party binding 
distributed node services accessed membership map copy node root complete indexed logical node number 
entries map accessed common interface provide location transparency higher levels configuration service 
signals signal example process interacting operating system environment 
desirable component able accept notification signal easily participate kind interaction 
achieved signal interaction 
degenerate bound service accessed kernel managing server address space 
framework construction distributed interactions flexible accomodate interaction discovered date 
currently implemented interactions interaction purpose sync distributed synchronisation semaphores notify asynchronous notification port typed message ports entry ada style entry points event event dissemination signal operating system signal object remote method invocation useful interactions 
contrast approach described earlier incarnation regis system encouraged construction user defined interactions exploiting properties port inheritance containment 
ports wanting desired behaviour obtained allowing default behaviour overridden 
patching demonstrated deeper abstraction lay beneath port required framework exploit 
summary framework provides abstractions ffl location transparency guaranteed requiring remote participant possess interface service 
ffl proxy desired runtime binding semantics obtained binder controls access smart pointer service 
ffl type role compatibility enforced proxy typed bind member function ensures particular interaction proxy bound interaction service type data transmitted compatible expected receiver 
author acknowledges contribution stimulating discussions colleagues distributed software engineering section imperial college especially jeff magee dulay nat 
birrell nelson 
implementing remote procedure calls 
acm transactions computer systems february 
crane dulay kramer magee sloman 
configuration management distributed software services 
raynaud sethi faure vincent editors integrated network management iv pages 
chapman hall 
dulay 
darwin language manual 
technical report department computing imperial college 
ftp dse doc ic ac uk regis darwin ps gz 
dulay kramer magee sloman 
distributed system construction experience conic toolkit 
editor experiences distributed systems pages 
springer verlag 
friedberg 
transparent reconfiguration requires third party connect 
technical report department computer science university rochester november 
iona technologies place dublin ireland 
orbix architecture january 
lauer needham 
duality operating system structures 
operating systems review april 
magee dulay eisenbach kramer 
specifying distributed software architectures 
proceedings fifth european software engineering conference barcelona september 
magee dulay kramer 
constructive development environment parallel distributed programs 
iee iop bcs distributed systems engineering september 
magee kramer sloman dulay 
overview rex software architecture 
proceedings second ieee dcs conference cairo october 
menon leblanc jr object replacement dynamic proxy updates 
iee iop bcs distributed systems engineering journal september 
special issue configurable distributed systems 
object management group omg headquarters old connecticut path ma usa 
common object request broker architecture specification edition july 
steinmetz nahrstedt 
multimedia computing communications applications 
prentice hall innovative technology series new jersey 
