dorigo ant system autocatalytic optimizing process ant system autocatalytic optimizing process technical report dorigo maniezzo colorni dipartimento di elettronica informazione politecnico di milano piazza leonardo da vinci milano italy dorigo polimi combination distributed computation positive feedback constructive greedy heuristic proposed new approach stochastic optimization problem solving 
positive feedback accounts rapid discovery solutions distributed computation avoids premature convergence greedy heuristic helps procedure find acceptable solutions early stages search process 
application proposed methodology classical travelling salesman problem shows system rapidly provide optimal solutions 
report simulation results discuss working algorithm 
hints approach applied variety optimization problems 

explore emergence global properties interaction simple agents 
particular interested distribution search activities called ants agents simple basic actions order ease parallelization computational effort 
inspired researches behavior real ants problems interest understand blind animals ants manage establish shortest route paths colony feeding sources back 
media communicate individuals information regarding paths decide go consists pheromone trails 
moving ant lays pheromone varying quantities ground marking path follows trail substance 
isolated ant moves essentially random ant encountering previously laid trail detect decide high probability follow reinforcing trail pheromone 
collective behavior emerges form autocatalytic behavior ants trail attractive trail followed 
process characterized positive feedback loop probability ant chooses path increases number ants previously chose path 
algorithms going define sections model deriving study artificial ant colonies call system ant system algorithms introduce ant algorithms 
interested simulation ant colonies artificial ant colonies optimization tool system major differences real natural artificial ants memory completely blind live environment time discrete 
believe ant colony metaphor useful didactic tool explain ideas 
autocatalytic positive feedback process process reinforces way causes rapid convergence limitation mechanism exists leads explosion 
dorigo ant system autocatalytic optimizing process result obtained running experiments ant systems observation presence synergetic effects interaction ants 
fact quality solution obtained increases number ants working problem increases reach optimal point see section details 
major point defining distributed system definition communication procedure 
algorithms set ants communicate modifications problem representation step problem solving ant gives sign activity change probability decision taken 
idea point ant choose different options chosen results particularly choice appear desirable 
give ants heuristic guide early stages computational process experience hasn accumulated problem structure 
heuristic automatically loses importance experience gained ants memorized problem representation increases 
second important result viability autocatalytic processes methodology optimization learning 
single ant autocatalytic process usually converges quickly bad suboptimal solution 
luckily interaction autocatalytic processes lead rapid convergence subspace solution space contains solutions causing search activity find quickly solution getting stuck 
words ants converge single solution subspace solutions go searching improvements best solution 
stage understanding proof convergence bound time required find optimal solution 
simulations strongly support speculations 
believe approach promising generality applied different problems effectiveness finding solutions difficult problems 
organized follows section contains description algorithm currently implemented definition application problem algorithm structure partially reflects problem structure introduce 
sections describe slightly different ways apply proposed algorithm chosen problem 
section reports experiments carried algorithms previously introduced 
section discuss properties distributed algorithm show applied optimization problems 
related contained section 
ant system introduce section approach distributed solution difficult problems locally interacting simple agents 
call ants simple interacting agents class algorithms define 
describe general characteristics ant algorithms introduce called ant density ant quantity 
test ant algorithms decided apply known travelling salesman problem tsp comparison results obtained heuristic approaches model definition influenced problem structure hint section approach solve optimization problems 
stress choice tsp due ubiquity benchmark heuristics interested dorigo ant system autocatalytic optimizing process proposal new heuristic comparison ones directly proposing efficient approach solution tsp fact solved optimally problems higher order 
set towns tsp problem stated problem finding minimal length closed tour visits town 
call ij length path towns case euclidean tsp ij euclidean distance ij 
instance tsp problem weighted graph set towns set edges towns weighted distances 
number ants town time total number ants 
ant simple agent characteristics going town town lays substance called trail edge chooses town go probability function town distance amount trail connecting edge force ants legal tours transitions visited towns inhibited till tour completed see tabu list 
ij intensity trail edge time iteration algorithm trail intensity ij ij dt ij coefficient represents evaporation trail dt ij dt ij dt ij quantity unit length trail substance pheromone real ants laid edge th ant time 
coefficient set value 
intensity trail time ij set arbitrarily chosen small values experiments value chosen edge 
order satisfy constraint ant visits different towns town tour associate ant data structure called tabu list memorizes towns visited time forbids ant visit tour completed 
tour completed tabu list emptied ant free choose way 
define name chosen recalls tabu search proposed substantial differences approach tabu search algorithms 
mention absence aspiration function ii difference elements recorded tabu list permutations case tabu search nodes case algorithms constructive heuristics case tabu search 
dorigo ant system autocatalytic optimizing process tabu vector containing tabu list th ant tabu th element tabu list th ant th town visited ant current tour 
call visibility ij quantity ij define transition probability town town th ant ij ij ij ij allowed ij allowed allowed tabu parameters allow user control relative importance trail versus visibility 
transition probability tradeoff visibility says close towns chosen high probability implementing greedy constructive heuristic trail intensity says edge lot traffic highly desirable implementing autocatalytic process 
different choices compute dt ij update ij cause different instantiations ant algorithm 
sections algorithms experimental test bed ideas ant density ant quantity ant cycle 

ant density ant quantity algorithms ant density model quantity trail unit length left edge time ant goes ant quantity model ant going leaves quantity ij trail unit length 
ant density model dt ij th ant goes ant quantity model dt ij ij th ant goes definitions clear increase trail intensity edge ant goes independent ij ant density model inversely proportional ij ant quantity model shorter edges desirable ants model reinforcing visibility factor equation 
ant density ant quantity algorithms dorigo ant system autocatalytic optimizing process initialize set time counter edge set initial value ij trail intensity dt ij place ants node number ants node time set tabu list index tabu starting town element tabu list th ant repeat tabu list full step repeated times set town th ant town moved choose town move probability ij equation move th ant instruction creates new values insert node tabu set dt ij dt ij case ant density model dt ij dt ij ij case ant quantity model edge compute ij equation memorize shortest tour nc max ants choose tour nc number cycles empty tabu lists set tabu tour th ant initial position set edge set dt ij goto step print shortest tour words algorithms follows 
time zero initialization phase takes place ants positioned different towns initial values trail intensity set edges 
element ant tabu list set equal starting town 
ant moves town town choosing town move probability function parameters desirability measures called trail ij gives information ants past chosen edge second called visibility ij says closer town desirable setting obtain stochastic greedy algorithm multiple starting points setting obtain deterministic classical 
time ant move trail leaves edge summed trail left edge past 
ant moved transition probabilities computed new trail values formulae 
moves tabu list ant full shortest path ants computed memorized tabu lists emptied 
process iterated tour counter reaches maximum user defined number cycles nc max ants tour call case uni path behavior denotes situation algorithm stops searching alternative solutions see section 
examination algorithms see computational complexity expressed function number ants number towns number cycles nc dorigo ant system autocatalytic optimizing process cycle complete tour nc 

fact ant quantity algorithms step 
step step step repeated times step experiments see section optimal number ants small constant experimental best value 
complexity nc 
nc function nc nc 
investigated form nc function section 
ant cycle algorithm case introduced major difference respect previous systems 
dt ij computed step complete tour steps 
value dt ij dt ij th ant uses edge tour constant tour length th ant 
corresponds adaptation ant quantity approach trails updated cycle single move 
expect algorithm better performance previously defined ant density ant quantity global information value result tour length 
value trail updated steps formula similar ij ij dt ij dt ij dt ij different equation updated step tour steps 
ant cycle algorithm initialize set time counter edge set initial value ij trail intensity dt ij place ants node number ants node time set tabu list index tabu starting town element tabu list th ant dorigo ant system autocatalytic optimizing process repeat tabu list full step repeated times set town th ant town moved choose town move probability ij equation move th ant instruction creates new values insert node tabu ant compute results tabu list scan tabu list th ant set tabu tabu edge connecting town tabu list ant dt hl dt hl edge compute ij equation set edge set dt ij memorize shortest tour nc max ants choose tour nc number cycles empty tabu lists set tabu tour th ant initial position goto step print shortest tour complexity ant cycle algorithm nc 
algorithm nc cycles remember nc nc 
fact step step 
step step step ant cycle algorithm linear relation number towns best number ants 
complexity algorithm nc 

computational results implemented algorithms investigated relative strengths weaknesses experimentation 
developed mathematical analysis models yield optimal parameter setting situation ran simulations collect statistical data purpose 
phase ant cycle superior algorithms 
tried deepen understanding analyzing effects variations basic algorithm defining unique versus different starting points ant increasing importance ant best tour adding noise computation probabilities 
results described subsections brief comparison alternative heuristics tsp 
dorigo ant system autocatalytic optimizing process parameters setting parameters considered affect directly indirectly computation probability formula 
number ants set equal number cities 
tested values parameter constant default value parameters experiment values changed simulations setting order achieve statistical information average evolution 
values tested tested different sets values different sensitivity algorithms shown 
preliminary results obtained small scale problems tests reported stated oliver problem cities problem described tour length genetic algorithms result obtained ant system yield better outcomes 
order allow comparison approaches see section tour lengths computed real numbers integers tests carried cycles averaged trials 
tour length interested investigating uni path behavior situation ants tour indicate system ceased explore new possibilities best tour achieved far improved 
parameters settings fact observed cycles ants followed tour despite stochastic nature algorithms due higher trail level edges composing tour 
high trail level probability ant chooses edge belonging tour low 
algorithms show different sensitivity parameters 
ant density shows monotonic decrease tour length 
value average length starts increase 
avg 
length tests parameters show optimum avg 
length set high possible genetic algorithms general heuristic combinatorial optimization problems simulated annealing 
case distances towns integer numbers computed standard code proposed tsplib reinelt tsplib institut mathematik universit augsburg 
dorigo ant system autocatalytic optimizing process avg 
length system little affected able improve significantly quite unsatisfactory solution obtained standard condition 
importance quantity resulted algorithms 
experiments ant density show system enters uni path behavior usually cycles 
ant quantity shows different sensitivity parameters important shown table avg 
length decrease average tour length increasing exhibited 
case high low worsen performance minor sensitivity trails improve result obtained standard configuration 
avg 
length tests show keeping strong memory past experience policy ant density higher yield better results 
avg 
length ant quantity prone uni path behavior ant density fact observed behavior 
cases system kept exploration activity 
results obtained ant cycle show presents optimal range 
average tests avg 
length avg 
length dorigo ant system autocatalytic optimizing process avg 
length ant cycle enters uni path behavior cases observed ongoing exploration different alternatives cycles 
algorithms parameter qualitatively different behaviors 
best value high possible close ant density ant quantity ant cycle 
fact explained follows ant density ant quantity strictly local information visibility ij local definition ij cases local doesn contain information final tour length ants laid past 
amount trail edge direct consequence local greedy rule 
conversely ant cycle algorithm trail laid function total tour length see formula algorithm uses global information result sequences local moves 
words happens algorithms ij reinforcement ij ant cycle global information total tour length compute amount trail deposit ij represents different type information respect ij algorithms mainly greedy heuristic guide search early stages computation ant cycle computation runs start exploiting global information contained values ij trail 
explains better performance ant cycle value algorithm needs possibility forget part experience gained past order better exploit new incoming global information 
ant density ant quantity forgetting capability necessary useful second stage search process global information exploited algorithm continue strategy greedy heuristic 
investigated behavior ant cycle algorithm different combination parameters experiment run stopped cycles ant tours 
results summarized fig 
identified different zones high values high values algorithm enters quickly uni path behavior finding solutions situation represented symbol fig don give importance trail set low value give high importance greedy rule high values algorithm doesn find solutions number cycles experiment symbol situation 
solutions values central area symbol 
case different parameter combinations resulted performance level result shortest tour known oliver problem approximately number cycles 
dorigo ant system autocatalytic optimizing process fig ant cycle behavior different combinations parameters algorithm finds solutions entering uni path behavior algorithm doesn find solutions entering uni path behavior algorithm doesn find solutions enters uni path behavior results obtained experiment consistent understanding algorithm high value means trail important ants tend choose edges chosen ants past 
true value high case high amount trail edge ant high probability choosing town near 
high values low values algorithm similar stochastic algorithm 
fig new optimal tour experimentally determined optimal set parameters values ant cycle algorithm 
tour results length presents inversions respect best tour published 
result exceptional big dimensional tsp problems solved optimality specialpurpose algorithms 
interesting note algorithm consistently find solutions published problems see section dorigo ant system autocatalytic optimizing process fig new best tour obtained iterations ant cycle oliver problem real length integer length cfr 
note 
major strengths ant cycle algorithm summarized points range parameter optimality algorithm finds solution times better best genetic algorithms algorithm finds solutions quickly see fig doesn enter uni path behavior ants choose best tour viz 
ants continue search new possibly better tours tested ant cycle algorithm problems increasing dimensions sensitivity parameters optimal values problem dimension low 
cycles best tour length fig algorithm finds values oliver quickly new optimal value cycles 
cycles correspond complete tours 
oliver problem ant cycle reached best known result frequency statistically higher algorithms identification tours quicker identify new optimal tour 
previous best tour published real length integer length 
dorigo ant system autocatalytic optimizing process partially tested algorithm problems limited number runs number cycles constrained 
restrictions got best known result quick convergence satisfying solutions maintained problems 
number ants set experiments run order assess impact number ants efficiency solving process 
case test problem involved finding tour grid evenly spaced points problem priori known optimal solution put edge length see fig 
fig optimal solution grid problem case determined average number cycles needed configuration reach optimum optimum reached cycles 
said test ones conducted ant cycle algorithm 
results shown fig abscissa total number ants set runs ordinate called ant cycles average number cycles required reach optimum multiplied number ants order evaluate efficiency ant name comparable data 
interesting note algorithm consistently able identify optimum number ants synergetic effect ants optimality point existence optimality point due computational load caused management progressively ants causes efficiency measured ant cycles decrease increasing number ants tests set grid problems shown optimal number ants close number cities property assessment computational complexity see sections 
dorigo ant system autocatalytic optimizing process number ants fig number ant cycles required reach optimum function total number ants grid problem second set tests carried cities randomly distributed cities random graph 
optimal performance reached ants number ants comparable dimension measured number cities problem solved 
town ants start 
tested difference case ants time city case uniformly distributed ant cycle applied cities random graph grid described previous subsection oliver problem 
cases uniformly distributing ants resulted better performance 
case cities random graph run experiments repeated times ants positioned time city experiment ants town second town 
obtained cases ants able identify optimum needed average cycles vs average needed case uniformly distributed ants 
case grid problem experiments showed average cycles needed identify optimum vs case uniformly distributed ants order compare data fig number cycles multiplied obtain number ant cycles 
case oliver problem ants starting city runs done optimal parameters values noticed ants able identify optimum average value best tour hundreds cycles ants followed small set tours 
tested initial uniform distribution ants cities performed better random results show little difference choices random distribution obtained slightly better results 
say ants uniformly distributed starting point integer number ants town excludes possibility multiple 
dorigo ant system autocatalytic optimizing process elitist strategy call elitist strategy way resembles elitist strategy genetic algorithms reproducing probability best individual modified algorithm cycle trail laid edges belonging far best tour reinforced quantity number elitist ants length best tour 
idea trail best tour far identified reinforced direct probability search ants edges compose 
test carried oliver problem run stopped cycles indicated optimal range number elitist ants increasing number results better tours discovered best tour discovered earlier elitist ants force exploration suboptimal tours early phases search decrease performance results 
fig shows outcome test behavior evident 
cycles reach best number elitist ants fig number cycles required reach local optimum related number elitist ants noisy transition probability experiments slightly different transition rule including noise formula case effect individual ant tabu list defining tour increment value trail edges belonging tour equivalent saving individual case sum contribution contribution ants cycle 
dorigo ant system autocatalytic optimizing process ij ij ij ij ij ij ij allowed allowed allowed tabu ij noise function random variable zero mean standard deviation 
set tests carried order assess usefulness formula compared formula calculate transition probabilities 
original idea evaluate robustness procedure respect intensity level trail see early convergence avoided 
second objective turned intrinsically met ant cycle algorithm naturally tend uni path behavior 
test problem grid problem noticed low noise values hamper identification optimum help higher values lead significant worsening performance 
fig display average number cycles tests value needed reach optimum different values noise 
cycles reach best noise value standard deviation fig number cycles required reach optimum related different values noise time required find optimal solutions algorithm complexity section nc doesn say actual time required reach optimum 
experiment section devoted investigate relation nc nc nc 
results reported table case similar problems increasing dimensions grids edge length set fig 
interesting note problems cities ant cycle optimal solution 
number cycles required find computational time grow slowly dimension search space suggesting algorithm uses effective search strategy 
dorigo ant system autocatalytic optimizing process table time required find optimum function problem dimension problem best solution relative dimension search space average number cycles find optimum time required find optimum seconds observing table note time required find optimum proportional number cycles necessary find multiplied case confirming way complexity analysis section 
comparison approaches compared results ant cycle obtained oliver problem heuristics contained package travel 
package represents distances cities integer matrix order enable comparison implemented analogous representation system 
results shown table ii column length best tour identified heuristic second third columns improvement corresponding column solution obtained opt exhaustive exploration permutations obtainable basic exchanging cities lin kernighan heuristics respectively 
note ant cycle consistently outperformed opt efficacy effectiveness finding solutions compared algorithm requires longer computational time 
table ii performance ant cycle compared approaches basic opt lin kernighan ant cycle near neighbour far insert near insert space filling curve sweep random general comment tests point parameter setting instance algorithm consistently finds tests run ibm compatible pc 
name basic means basic heuristic improvement 
lin kernighan algorithm solutions length depending starting solution provided basic algorithm 
dorigo ant system autocatalytic optimizing process solution optimal case new best known case oliver finds quickly satisfying solutions usually identifies oliver new best known solution length cycles takes cycles reach values 
case exploration continues non zero variance lengths tours followed ants cycle fact average ants tour lengths gets equal best tour remains somewhat indicating tours best tested 

discussion results preceding section suggest algorithm effective optimization tool 
section try give insights way algorithm works show applied np hard combinatorial problems 
way explain effect applying algorithm tsp problem 
consider transition matrix element ij transition probability town town time defined equation 
time ij proportional ij closer towns chosen higher probability 
process evolves changes elements 
process seen space deformation distance reduced towns connected edges high amount traffic conversely distance incremented towns connected edges low traffic levels 
simulations observed matrix range optimality parameters converges state close stationary variations transition matrix small 
state reached behavior ants dependent kind transition matrix obtained 
observed situations rare occurring saw section particular parameter settings transition probability significantly higher zero row ants choose edge step new tour searched 
common situations rows transition probabilities value higher zero 
cases search stops dimension space searched highly reduced respect initial situation 
consider example fig obtained steady state transition matrix randomly generated town problem area circle proportional corresponding value transition probability 
ant town high probability go town near town near low probability choosing edge similar analysis holds ants town town example destination equally probable 
cities problem proposed tsplib cfr 
note 
stochastic process rules evolution matrix markov process infinite memory 
dorigo ant system autocatalytic optimizing process fig steady state transition matrix randomly generated town problem ant cycle way interpret algorithm works imagine kind probabilistic superimposition effects ant isolated move local greedy rule 
greedy rule guarantees locally optimal moves practically lead bad final results 
reason greedy rule doesn greedy local improvements lead bad final steps ant constrained closed tour choices final steps constrained early steps 
tour followed ant ruled greedy policy composed parts 
consider effect simultaneous presence ants contributes part trail distribution sets paths followed ants receive great amount trail bad paths chosen obliged constraints satisfaction remember tabu list chosen ants trail remains low 
seen ants cooperate exchanging particular kind information trail memorized problem structure 
direct communication necessary local information take decisions algorithm suited parallelization 
currently designing parallel version ant cycle transputer architecture intend give set ants transputer merge steps trail left set ants obtaining way new trail matrix 
redistribute matrix nodes 
consider generality approach 
believe combinatorial problems faced ant system 
order apply autocatalytic algorithm combinatorial problem find appropriate representation problem represented graph searched simple agents autocatalytic process heuristic allows constructive definition solutions greedy force constraint satisfaction method viz 
tabu list 
done known combinatorial optimization problems satisfiability sat quadratic assignment qap job shop scheduling jsp time obtaining adapted version ant system effectively handle relative problem 
difficult ad hoc tasks face trying apply ant system find appropriate graph representation problem solved greedy force heuristic 
required edges pair nodes case qap node case jsp suitable constraints pair nodes case sat 
dorigo ant system autocatalytic optimizing process 
related investigations introduces new search methodology distributed autocatalytic process application solution classical optimization problem 
main contributions introduce positive feedback powerful search optimization tool ii show synergetic effects arise distributed systems 
ant system uses simple interacting agents fast search algorithm positive feedback getting trapped local minima augmenting number agents synergetic effect system performance upper limit reached 
reported simulation results illustrate power approach 
example system applied optimization problems believe approach extended broader class problems 
general idea underlying model population agents guided autocatalytic process pressed greedy force 
agent autocatalytic process greedy force tend agent converge suboptimal tour exponential speed 
agents interact looks greedy force give right suggestions autocatalytic process converge optimal solutions quickly getting stuck local optima 
speculated behavior due fact information gained agents search process modify problem representation way reduce dimension space considered search process 
tour unfeasible bad tours highly improbable algorithms search neighbourhood solutions 
related classified major areas studies social animals behavior ii research natural algorithms iii stochastic optimization 
pointed research behavior social animals considered source inspiration useful metaphor explain ideas 
believe especially interested design inherently parallel algorithms observation natural systems invaluable source inspiration 
neural networks genetic algorithms evolution strategies immune networks simulated annealing proposed models natural flavour 
main characteristics partially shared members class algorithms natural metaphor inherent parallelism stochastic nature positive feedback capacity learn improve performance basis past experience 
algorithm considered new member class 
natural optimization inserted general research area stochastic optimization quest optimality traded computational efficiency 
believe done main research directions theoretical investigation proposed model properties convergence complexity evaluation generality approach investigation classes problems solved algorithm evaluation scalability approach testing bigger problems parallel computer dorigo ant system autocatalytic optimizing process study implications model artificial intelligence particularly pattern recognition machine learning fields 
acknowledgments thomas ck hughes bersini frank mauro francesco bernard giovanni manzini daniele montanari hans paul schwefel frank useful comments early version 
bersini varela immune recruitment mechanism selective evolutionary strategy proc 
fourth int 
conf 
genetic algorithms morgan kaufmann 
boyd pulleyblank travel software package carleton university 
colorni dorigo maniezzo distributed optimization ant colonies proc 
european conference artificial life paris france december 
colorni dorigo maniezzo positive feedback search strategy technical report politecnico di milano 
pasteels probabilistic behaviour ants strategy errors theor 
biol vol pp 

goss collective patterns decision making ethology ecology evolution vol pp 

dorigo optimization learning natural algorithms ph thesis politecnico di milano press 
watson gandy christofides distribution management mathematical modeling practical analysis operational research quarterly vol pp 
glover tabu search part orsa journal computing vol pp 
glover tabu search part ii orsa journal computing vol pp 
golden stewart analysis heuristics travelling salesman problem lawler lenstra rinnooy kan shmoys eds new york wiley 
goss beckers aron pasteels trail laying trail solve foraging problems ant colonies behavioural mechanisms food selection hughes ed nato asi series vol 
berlin springer verlag 
holland adaptation natural artificial systems ann arbor mi university michigan press kirkpatrick gelatt vecchi optimization simulated annealing science vol pp 
lawler lenstra rinnooy kan shmoys eds travelling salesman problem new york wiley 
lin kernighan effective heuristic algorithm tsp operations research vol pp 
peterson parallel distributed approaches combinatorial optimization benchmark studies traveling salesman problem neural computation vol pp 
rechenberg evolutionsstrategie stuttgart germany 
rumelhart parallel distributed processing explorations microstructure cambridge ma mit press whitley starkweather scheduling problems travelling salesmen genetic edge recombination operator proc 
third int 
conf 
genetic algorithms morgan kaufmann 
