asynchrony calculus note erard boudol inria sophia antipolis france introduce asynchronous version milner calculus idea messages elementary processes sent sequencing constraint 
show simple message passing discipline restriction construct making name private agent encode synchronous communication calculus 


purpose note introduce asynchronous variant calculus milner parrow walker 
calculus extension ccs previous engberg nielsen deals name passing calculus agents pass channel names agents named channels 
expressiveness link passing discipline demonstrated series examples 
milner showed restricted fragment original calculus encode calculus 
precisely showed mimic mini calculus reduction strategies terms lazy evaluation abramsky weak version call value evaluation plotkin 
establishes link passing discipline extent power passing agents values 
shown mini calculus reduced affecting expressive power 
introduce version recall basic features original calculus notations 
build agents presupposes infinite set names ranged elementary agents guarded processes guard may kinds input guard case guarded agent waits name transmitted link named construct name bound agent receive partly supported indo french centre promotion advanced research project 
name substituted yielding 
ii output guard xz case agent xz sends name link triggers communication may occur concurrent processes sends name particular link waiting name link 
denoting parallel composition agents communication interaction sender xz receiver represented transition xz 
typical synchronous message passing discipline send operation blocking output guard passed simultaneous occurrence input action 
may argue synchronous message passing realistic primitive 
quite known synchronous communication implemented basic asynchronous message passing discipline means mutual inclusion protocol sender waits 
synchronous communication flavour passing agent communication sender xz transmits name gives implicit continuation subprocess asynchronous communication continuation passed explicitly 
exactly shall 
explain modification shall propose calculus return characteristic features synchronous message passing 
input prefix blocking guard 
sensible assumption typical weak lazy strategy evaluation behaviour agent may depend actual value received instance yv depending link name received process able communicate different agents 
second feature synchronous communication communication instantaneous interaction rendez vous partners 
reasonable assumption asynchronous setting instance reading value shared variable getting available item buffer involves participation receiving process communication medium 
feature synchronous communication sending operation blocking guard 
means sending process allowed continue message received possibly distant agent 
shall stay assumption output guards derived lower level constructs 
modification shall calculus 
usually asynchronous parallel programming languages messages handled means communication structures buffers mailboxes stored 
asynchronous calculus propose communication media just channel names 
shall give particular status communication media 
shall regard messages elementary agents freely available processes waiting 
fits idea chemical machine describing evaluation process calculus 
model state system concurrent agents viewed chemical solution formally multiset agents floating molecules interact reaction rules 
setting message name sent link just particular molecule xz floating solution 
message received precisely consumed agent floating solution 
result interaction solution containing place message xz receiver formally amounts restrict formation term xz calculus case nil process 
fact longer need nil agent guard notation shall notion action 
syntax mini asynchronous calculus 
xz stand names replication construct notation restriction scoping construct denoted 
section note shall develop chemical semantics calculus 
show encode milner mini calculus asynchronous calculus simple protocol achieve synchronous communication 
related 
honda tokoro calculus nearly introduced 
indicate encode synchronous communication asynchronous calculus complicated way propose 
semantical perspective adopted different bisimulations shall morris extensional operational preorder 
involves defining notion observability closed terms calculus direct adaptation observability terms 
shall prove translation propose synchronous calculus asynchronous adequate respect semantics 

asynchronous calculus 
section introduce chemical machine notion reduction processes calculus 
say words substitution 
said input prefix acts binder name similarly name bound term usual substituting name name term yielding may require rename bound names avoid binding shall fn denote set free names term give formal definition obvious 
recall briefly basic concepts chemical machine cham details reader referred 
state chemical machine solution finite multiset molecules 
shall range molecules denote fjm jg finite multisets molecules 
union multisets denoted cham solution encapsulated membrane considered single molecule 
shall specific symbol denote membrane fact simply represented brackets fj jg enclosing multiset molecules 
cham defining asynchronous calculus molecules term calculus molecule ii solution fjm jg molecule iii molecule name molecule 
instance terms calculus fj jg molecule 
shall context notation denote molecule containing sub molecule solution 
behaviour cham consists state changes described transitions transitions means axioms rules 
axioms specific cham describing operational semantics particular language 
form fj jg fj jg axiom means molecules floating solution transformation solution may occur resulting new solution molecules replaced formalized stating cham inference rule called chemical law holds chemical law general law called membrane law asserts transformations solutions may occur molecules fj jg fj jg membrane law inference rules shall 
regarding axioms transforming solutions distinguish different kinds 
kind axioms heating transformations 
usually take form fj jg fj jg break complex molecule simpler ones 
transformations symbol 
conversely simple molecules cool complex ones 
cooling transformations usually take form fj jg fj jg shall symbol 
transformations reversible case denote fj jg fj jg pair inverse heating cooling transformations general 
third kind specific transformations reactions 
usually transformations irreversible shall symbol 

abuse notation shall symbols 
state changes union relations 
usual denotes reflexive transitive closure 
shall systematically forget outermost brackets fj jg enclosing solution 
describe specific transformations cham asynchronous calculus 
presentation follows slight variation mini calculus milner 
reaction rule formalizing consumption available message receiver xz 
reaction axioms calculus reversible heating cooling transformations intended prepare communications conversely restore agent 
transformation consists breaking compound agent parts allowed freely move solution parallel similarly replicated agent releases copies solution replication instance consider sender process form xz see heating solution containing message xz available molecules solution xz xz remaining rules deal scoping construct intuitively binder restricts scope name making private agent particular process allowed communicate environment channels different internal communications may occur restricted agent 
achieved cham opening new sub solution restricted agent fj jg scoping membrane instance applying previous transformation rules transitions gamma xz delta fj gamma xz delta jg fj xz jg 
fj jg allow restricted process communicate externally channels transformation called scope migration cf 
free scope migration typical transformation prepare sending private name instance agent xz process falls scope name 
receiving process acquires name acquires exclusive right communicating channel sender 
instance gamma delta gamma xz delta fn fj xz jg 
fj jg gamma delta general order apply previous transformation needs private name different name occurring environment 
rule free name conversion summarizing specific transformation rules cham asynchronous calculus displayed table xz 
reaction parallel replication fj jg scoping membrane free scope migration free name conversion execute process start solution fj jg perform transitions 
easy see solution exists term fj jg shall symbols 
denote transitions terms 
precisely shall say structurally equivalent ii term reduces notation 
structural equivalence slightly generous milner 
recover equivalence add axioms free scope extinction scoping exchange denote resulting extended heating cooling equivalence equivalence coincide congruence general instance 

encoding synchronous calculus 
section show encode synchronous mini calculus calculus 
syntax synchronous calculus grammar 
xz stand names denotes nil process 
section call respectively calculus calculus asynchronous synchronous versions calculus 
cham calculus calculus 
apart fact terms involved molecules terms terms change concerns reaction rule 
rule calculus indicated xz 
reaction immediately note nil process inert rule may regard calculus sub calculus calculus xz abbreviation xz stands alternatively syntax calculi defining asynchronous operational semantics adding rule xz xz wanted emphasize fact restricted calculus encode synchronous communication 
translation shall give calculus shown adequate 
explain means give general definitions 
language induces notion context context term written constructs language added special constant hole 
putting term holes context gives term denoted 
note languages involving binders calculus calculi free names may bound context 
shall say context closes term closed 
calculus contexts form delta delta delta may close terms free variables belong fx obvious canonical way closing terms 
contexts form delta delta delta absurd general build deadlocked terms xz 
fact shall notion closedness term different containing free names 
shall say term closed contain free messages 
means contains subterm xz calculus xz calculus channel name object name scope binder 
words channel names input guards may occur free closed term 
instance yz closed canonical way closing term free names belong fy put context delta delta delta contexts may testing operationally terms language 
shall say term passes test successfully program converges notation 
calculus simply means normal form respect reduction strategy see instance 
regard convenient notion convergence calculi criterion convergence observability see ability ready communication possibly reduction 
instance deadlocked terms accurately inaccessible agents xz irreducible regarded convergent 
terms possess normal form considered observable 
shall regard closed term convergent convergent 
shall define notion closed terms convergence ability accepting input exactly lazy calculus abramsky calculi parallel functions 
define immediate convergence closed terms particular channel name notation predicate satisfying ii iii definition holds terms terms introducing dot input guard 
immediate convergence destroyed reduction closed term delta delta delta fx closed free message xz delta delta delta closed term immediately observable kind partial normal form 
convergence closed terms defined def shall indexed symbols convergence calculi 
easily checked convergence preserved structural equivalence note notion convergence different milner 
note semantics shall language extensional operational preorder morris see called testing preorder defined vl def closing calculi shall respectively symbols denote associated equivalences obviously congruences 
shall say interpretation terms domain pre ordered adequate operational discrimination reflected interpretation vl aim show adequate interpretation synchronous calculus asynchronous calculus equipped testing preorder 
simulate synchronous communication calculus 
consider example suppose wish build system behaving agent xz 
asynchronous calculus sending agent written xz prevent subprocess active message xz received 
idea guard agent reception explicit continuation writing sender xz assuming free symmetrically receiver send just having received uv provided free 
unfortunately apply simple transformation independently context synchronization protocol particular relation linking communication channel synchronization channel name known sender receiver environment interrupt communication instance may accept message environment 
achieve non interruptible synchronization shall elaborate protocol sending receiving agents exchange private links performing actual communication 
key observation due restriction sender xu subprocess proceed message xu received agent 
channel name serve link receiver xu 
confused testing preorders hennessy boreale de nicola far discriminating 
may define translation calculus calculus xz xz gamma xu vz delta free uv free comments order 
note coding guarded terms xz channel exchange private name meaning receiver engaged rendez vous sender 
receiver sends back private confirming rendez vous 
actual transmission may occur name known sender receiver 
note translation respects free names fn fn closed closed 
clear holds ready establish announced result theorem 
translation calculus calculus adequate terms proof sketch 
show computational adequacy interpretation closed suppose exist proceed induction length reduction showing exists length easy see equivalent reaction occurring may check exist delta delta delta gamma xz delta reaction occurring reduction interaction xz 
uv vz xz xu interaction xz xz gamma xu delta free 
delta delta delta gamma delta reduction sequence consists reactions occurring delta delta delta gamma delta induction hypothesis exists delta delta delta gamma xz delta 
delta delta delta gamma delta gamma uv vz delta free 
gamma vz delta delta delta delta gamma vz delta reduction sequence consists reactions occurring conclude previous case 
gamma vz delta 
free delta delta delta implies converges converse implication shown entirely similar manner 
direction computational adequacy property fact easier prove 
second step proof theorem consists showing translation compatible constructs calculus context prove point translation defined compositional way exits context assume context 
follows hypothesis 
clearly combining points shown adequacy translation calculus calculus acknowledgments ideas note worked visit school mathematics science foundation madras 
wish thiagarajan stimulating discussions hospitality 
am grateful sangiorgi pointing honda tokoro 
abramsky lazy lambda calculus research topics functional programming turner ed addison wesley 
berry boudol chemical machine theoretical comput 
sci 

boreale de nicola testing equivalence mobile processes appear proceedings concur conference 
boudol lambda calculi strict parallel functions inria res 
report appear information computation 
engberg nielsen calculus communicating systems label passing daimi pb aarhus university 
hennessy model calculus report university sussex 
honda tokoro object calculus asynchronous communication ecoop lecture notes comput 
sci 

milner parrow walker calculus mobile processes information computation 
milner functions processes math 
struct 
comp 
science 
milner polyadic calculus tutorial technical report ecs lfcs edinburgh university reprinted logic algebra specification bauer brauer schwichtenberg eds springer verlag 
plotkin call name call value calculus theoret 
comput 
sci 

sangiorgi lazy lambda calculus concurrency scenario lics 
