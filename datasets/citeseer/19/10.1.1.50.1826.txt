file layout file system performance keith smith margo seltzer harvard university tr contemporary implementations berkeley fast file system optimize file system throughput allocating logically sequential data physically contiguous disk blocks 
clustering effective contiguous free blocks file system 
repeated creation deletion files varying sizes occurs time active file systems cause fragmentation free space limiting ability file system allocate data contiguously degrading performance 
presents empirical data analysis allocation fragmentation sunos file system derivative berkeley fast file system 
collected data file systems file servers period months 
data show small files fragmented large files fewer blocks block files allocated optimally blocks files larger kilobytes allocated optimally 
factors responsible difference fragmentation uneven distribution free space file system cylinder groups disk allocation algorithm frequently allocates block file rest file 
performance measurements replicas active file systems show seldom perform comparable empty file systems performance degradation rarely 
decline performance directly correlated amount fragmentation files benchmark programs 
file system utilization amount fragmentation existing files file system influence amount fragmentation newly created files 
characteristics file system workload significant impact file system fragmentation performance typical news server workloads causing extreme fragmentation 
single important factor determining performance file system number seeks rotational delays incurs 
file system seeks spend disproportionate amount time waiting disk head reach destination correspondingly little time transferring data disk 
results poor file system performance 
similarly system performs seeks spend larger portion time transferring data disk correspondingly higher performance 
common technique reducing number seeks required file system increase amount data transferred disk request 
assuming separate seek required disk request larger request size amortizes latency seeks bytes data 
variety methods increasing size disk requests 
simplest increase file system block size minimum unit allocation transfer 
guarantees disk requests transfer data drawback increasing internal fragmentation file system 
way increase amount data transferred disk request cluster blocks file disk 
technique logically sequential data allocated physically contiguous disk blocks 
technique applied unix system file system berkeley fast file system contemporary unix file system implementations bsd solaris svr 
performance analyses shown clustering technique provide substantial improvement file system performance 
intuitively performance systems vary success disk allocation algorithm clustering files disk 
file system empty large extents free space making easier perform optimal allocation 
similarly free space highly fragmented poor file layout result 
observation implies major drawback file system performance measurements typically conducted 
file system performance usually measured life file system 
typical scenario measuring performance file system create new file system free disk partition run desired benchmark programs 
means performance typically measured new empty file system optimal conditions achieving file layout 
examines long term behavior sunos implementation berkeley fast file system ffs 
examine file systems file servers full time serving needs diverse set users 
analyze trends file layout impact file system performance time 
rest structured follows section describes implementation ffs focusing disk allocation algorithm section describes data collected section describes observations file layout systems examined section studies impact file layout file system performance section provides summary results 
disk allocation ffs berkeley fast file system ffs divides physical disk regions called cylinder groups 
cylinder group consists consecutive cylinders contains bitmap free space 
disk space managed terms units blocks partial blocks called fragments contiguous sets blocks called clusters 
file represented disk data structure called inode contains information file owner size access permissions inode contains list blocks allocated file 
order allow nearly unlimited file sizes levels indirection block list 
inode contains space fifteen block addresses 
twelve point twelve blocks file 
thirteenth address points indirect block block contain file data contains pointers additional data blocks 
final disk addresses inode point double indirect block triple indirect block respectively 
double indirect block block disk addresses points indirect block 
triple indirect block extents indirection level 
inodes allocated statically file system created distributed evenly file system cylinder groups 
disk space allocated files block time 
reduce internal fragmentation cluster fragments may final block file 
allocating new block file ffs computes ideal block allocate 
block file ideal block data block cylinder group file inode located 
blocks ideal block selected location previous blocks file values file system parameters rotdelay 
specifies maximum cluster size allowed file system rotdelay specifies minimum rotational gap placed clusters 
ideal block free ffs attempts allocate nearby block cylinder group order minimize seek time required reach new block 
ffs attempts allocate rotationally equivalent block different platter cylinder group 
file system parameter called cpc cylinders cycle specifies rotationally equivalent positions considered 
rotationally equivalent blocks available ffs uses brute force search find free block cylinder group scanning position ideal block cylinder group cylinder group ideal block 
ffs allocates free block encountered search 
indirect blocks type allocated similar manner 
file grows large require additional indirect block ffs selects new cylinder group file 
ideal block indirect block data block cylinder group 
ffs follows algorithm described block allocated 
data blocks referenced indirect block allocated cylinder group indirect block 
data block allocated ideal block data block cylinder group 
subsequent blocks referenced indirect block allocated ideal blocks selected values rotdelay 
older implementations ffs requests single block data 
disk typically rotated block successive requests operating system set rotdelay set distance disk rotated successive disk requests 
disks track buffers higher read throughput attained setting rotdelay zero forcing ffs attempt allocate files completely contiguously disk 
practice seldom done high cost write throughput 
write requests successive disk blocks incurred delay full disk rotation 
newer versions ffs modified opportunistically cluster adjacent disk blocks single operation read ahead cache flushes 
maximize opportunities exploiting clustering set maximum transfer size permitted hardware 
implementations ffs described rotdelay may set zero optimize read throughput 
successive write requests may incur full rotation overhead 
clustering write request writes disk blocks amortizing cost data practice clustering tuned way 
demonstrate way block allocation algorithm works examples 
consider block file created empty disk set rotdelay set 
disk empty ffs able allocate ideal block 
block file ideal block block file cylinder group 
subsequent blocks allocated ffs looks number blocks allocated contiguously prior block allocated 
number ideal block block block file 
ideal block computed skipping rotdelay blocks previous block file algorithm blocks file allocated single cluster occupying data blocks cylinder group 
ninth block allocated ffs notes previous blocks contiguous inserts rotational gap new block 
rotdelay ideal block ninth block blocks block file 
ffs normally allocate blocks contiguously cluster 
twelve blocks directly referenced inode thirteenth block require allocation indirect block 
block data blocks allocated different cylinder group 
indirect block allocated data block new cylinder group 
thirteenth block file occupies block 
ffs continues allocating subsequent blocks rotdelay 
blocks file comprise full cluster blocks blocks 
final blocks file form cluster 
clusters separated single block specified rotdelay 

rotdelay parameter specified milliseconds disk blocks 
specifies expected latency disk requests 
computing address ideal block latency converted disk blocks block size rotational speed disk 
consider similar file allocated similar file system empty 
case results file allocation far predictable 
impossible specify exactly blocks allocated file providing free space bitmaps hypothetical file system generalizations resulting file layout 
ideal block block file data block cylinder group 
ideal block block file cylinder group probably allocated 
case ffs tries find nearby alternate block attempting allocate rotationally equivalent block different platter cylinder 
file cylinder group attempt allocate block block rotationally equivalent blocks probably allocated 
ffs scans cylinder group starting location ideal block allocates free block finds 
time new file created high probability free block cylinder group allocated file block 
note idea block unavailable hope alternate block selected ffs part cluster free space blocks allocated contiguously disk 
subsequent blocks file allocated similar manner 
means blocks file allocated cylinder cylinder group 
ideal block close previous block file cylinder 
available rotationally equivalent block cylinder allocated 
blocks available free block cylinder group allocated 
depending location ideal block distribution free space chance cylinder 
block eventually allocated second cylinder cylinder group allocation pattern take place cylinder 
continues file grows subsequent cylinders cylinder group 
allocation behavior occur file requires indirect block switches cylinder groups 
allocating file partially full disk expect file start cylinder group extend cylinder group blocks allocated cylinder cylinder group followed blocks second cylinder 
data collection evaluate success ffs disk allocation algorithm allocating contiguous disk blocks collected data form file systems different file servers harvard division applied sciences 
systems primarily satisfy daily computing needs computer science researchers graduate students division 
file systems contained user home directories news mail source trees active development variety installed software 
file servers running sunos 
data consists daily snapshots recorded file system study 
snapshot summary file system meta data including information size configuration file system age size location file map free blocks file system 
examining single file system snapshot provides information file system single point time allows file system reconstructed test machine performance analysis controlled environment 
succession snapshots allows study changes file layout file system performance time 
tables describe file systems file servers study 
file systems studied set rotdelay set zero optimized read throughput 
file systems block size kilobytes services file systems das news block size kilobytes 
exact data ages file systems unavailable 
cases age estimated oldest modification time inode file system 
table das news file systems 
table summarizes file systems file server das news 
name local name file system 
size specifies total capacity file system megabytes 
age approximate age file system months december 
subtract months obtain age study 
ncg number cylinder groups file system bpg number kilobyte blocks cylinder group 
brief description explains file system 
das news file systems file system name size mb age months ncg bpg description server root file system 
cnews news articles 
export root file system diskless clients 
news articles news software 
services www pages software 
staff accounts system administrators 
usr unix utilities libraries 
usr sources miscellaneous utilities 
var system configuration log files 
table speed file systems 
table summarizes file systems file server speed 
name local name file system 
size specifies total capacity file system megabytes 
age approximate age file system months december 
subtract months obtain age study 
ncg number cylinder groups file system bpg number kilobyte blocks cylinder group 
brief description explains file system 
speed file systems file system name size mb age months ncg bpg description server root file system 
new line sun documentation 
local locally installed software 
speed scratch area installations 
usr unix utilities libraries 
usr experimental source code management system 
usr accounts students faculty 
usr accounts post docs 
usr graduate student accounts 
usr xterm support utilities 
var system configuration log files 
table file systems 
table summarizes file systems file server 
name local name file system 
size specifies total capacity file system megabytes 
age approximate age file system months december 
subtract months obtain age study 
ncg number cylinder groups file system bpg number kilobyte blocks cylinder group 
brief description explains file system 
file systems file system name size mb age months ncg bpg description server root file system 
adm administrative files 
database backup system 
ftp files available anonymous ftp 
local locally installed software 
mail mail files 
rabin accounts faculty grad 
students 
sun binaries 
root backup file system 
software commercial software packages 
software commercial software packages 
tmp storage temporary files 
usr unix utilities libraries man pages 
usr backup usr file system usr accounts administrative staff 
usr accounts engineering students faculty 
usr accounts computer science courses year graduate students 
usr undergraduate accounts 
var system configuration log files 
var tmp storage temporary files 
white user accounts cs theory faculty students 
characteristics file layout shown allocation scheme allocates variable sized pieces memory relocate allocated memory guaranteed memory efficiently 
system memory fragmented possible request total amount free memory satisfiable free piece memory desired size 
result applies limited number sizes allocated 
problem faced clustering file system ffs 
ffs attempts allocate disk space clusters blocks 
contiguous blocks available ones allocated resulting fragmented file takes longer read write 
problem compounded ffs disk allocation algorithm simple heuristic guaranteed find appropriate number contiguous disk blocks available 
clustering enhancements ffs shown offer significantly improved file system performance empty file systems easy allocate clusters contiguous disk blocks 
amount fragmentation occurs file system determines performance gains maintained life file system 
data described section examine types fragmentation occur active file systems 
free space distribution new file created ffs layout determined availability free space file system 
free space file cylinder group clustered place ffs block allocation algorithm generate file layout 
free space scattered cylinder group impossible ffs achieve layout fragmented file result 
table virtual file systems 
table summarizes file systems file server virtual 
name local name file system 
size specifies total capacity file system megabytes 
age approximate age file system months december 
subtract months obtain age study 
ncg number cylinder groups file system bpg number kilobyte blocks cylinder group 
brief description explains file system 
virtual file systems file system name size mb age months ncg bpg description server root file system 
glan commercial locally installed software packages 
glan accounts systems students faculty 
glan accounts systems students 
glan accounts systems students faculty 
glan accounts systems students faculty 
usr unix utilities libraries 
var system configuration log files 
examine distribution free space ffs snapshot divided cylinder groups equal sized pieces called segments 
data segment cylinder group summed derive statistics free space usage cylinder groups 
statistics segment positions similarly 
shows distribution free space file system cylinder groups 
typical file system free blocks located cylinder groups 
skewed distribution free space file system cylinder groups direct result disk allocation algorithm 
recall basic pattern allocation file start cylinder group extend cylinder group 
file allocate space cylinder group larger files allocate space cylinder group 
result space cylinder group consumed rapidly space 
sample file systems shown exhibit range free space distributions 
glan usr typical file systems free space skewed ends cylinder groups 
white news usr usr file system das news represent extremes seen file systems 
free space distribution news usr file system especially strongly skewed free space located cylinder groups 
file system contains various unix binaries libraries probably unchanged day installed 
recall newly created file starts cylinder group extending group grows 
files created removed expect file system expect free space cylinder groups little cylinder groups 
distribution free space cylinder groups 
graph plots cumulative percentage file system free space function position cylinder groups 
curve labeled uses combined data file systems study file system weighted equally 
curves provide data selection individual file systems 
news usr usr file system das news 
data chart file system snapshots taken october 
data dates similar 
percentage blocks free 
percentage cylinder group glan news usr usr white white file system contrast extremely distribution free space 
result performed file system months prior snapshot 
july large amount data removed white went full full 
removed data fairly evenly distributed white cylinder groups resulting distribution free space 
october date snapshot white utilized 
demonstrates effect comparing free space distribution white 
skewed distribution free space exhibited file systems may significant impact layout newly created files 
blocks allocated new file starting file cylinder group 
little free space cylinder groups ffs clustering algorithm allocate poorly clustered blocks new files despite fact may large clusters free space available cylinder group 
issue examined depth section 
file layout define layout score quantify fragmentation individual files 
score defined percentage blocks file optimally allocated 
block optimally allocated gap previous block file 
block file included calculation impossible previous block 
illustrate calculation file layout score consider block file occupying blocks disk 
block ignored blocks considered computing layout score 
second block file block contiguous predecessor block 
third block block 
layout score file indicating half blocks file located optimally disk 
distribution free space white 
graph plots cumulative percentage free space white file system function position file system cylinder groups 
curves labeled jul jul provide data megabytes data removed file system 
oct distribution free space october shown 
percentage blocks free 
percentage cylinder group jul jul oct layout score indicates file layout completely contiguous 
similarly layout score indicates successive blocks file contiguous disk 
file systems nonzero rotdelay impossible large files achieve layout score rotdelay forces disk allocation algorithm leave gaps file 
file systems study rotdelay parameter zero theoretically allowing perfect layout scores 
order characterize types files achieve layout analyzed effect file size file system age file layout 
section consider effect file system utilization 
shows relation file size file layout 
general trend file systems small files fragmented lower layout scores large files 
file systems studied block files average layout score 
words block files files bytes laid contiguous disk blocks 
larger files contrast better layout scores 
files blocks kb kb average layout score 
words slightly seek required blocks read files 
larger files higher layout scores 
sample file systems shown exhibit range relationships file size layout score seen file systems studied 
cumulative numbers file systems indicative file systems usr white 
usr news usr usr file system das news extremes seen file systems 
discussed earlier news usr static file system barely changed day installed 
file turn little opportunity file fragmentation occur 
contrast usr home accounts year graduate students course accounts instructors teaching fellows computer science heavily exhibits layout score file size blocks news usr usr white usr layout score function file size 
chart plots layout score function file size expressed blocks 
files file system grouped number blocks 
group boundaries powers 
file assigned group rounding size blocks nearest power 
layout score group computed percentage blocks files group optimally allocated 
curve labeled uses combined data file systems studied 
curves data representative file systems 
news usr usr file system das news 
data chart file system snapshots taken october 
greater fragmentation file systems 
file system unique outlier 
repository net news articles subjected load consisting frequent creation deletion small files resulting extreme fragmentation shown 
news file system study cnews exhibits similar fragmentation 
lower layout scores exhibited smaller files result factors 
recall section free space skewed file system cylinder groups 
regardless allocation file starts file cylinder group 
small files allocated near cylinder group free space clustered 
large files allocated starting cylinder group large file grows uses clustered free space cylinder group raising file layout score 
factor lowers layout scores small files allocation fragments files 
different algorithm allocate fragments allocate full blocks 
result final fragment file seldom allocated contiguously previous full block file 
layout score weighted size file extra seek bigger impact layout scores small files layout scores larger files 
demonstrates effect recomputing layout scores ignoring seek required reach final block file block fragment 
large files extra seek required final fragment discernible effect layout score 
small files final fragment large impact layout score 
layout score file size blocks frag effect fragments layout score 
graph plots layout score function file size expressed blocks 
lines computed data file systems studied 
frag line layout score computed percentage blocks optimally allocated 
line computed way fragment file considered optimally allocated regardless location disk 
data file system snapshots taken october 
data dates similar 
file layout time intuitively expect time active file system increasingly fragmented 
simple test intuition examined file fragmentation test file systems function time 
shows combined fragmentation file systems month intervals period study 
small noticeable downward trend layout scores time 
gain better understanding change file fragmentation time modified layout score metric express amount fragmentation entire file system 
layout score file system percentage file data blocks file system optimally allocated 
total layout score computed daily file system study static file systems usr file system discussed ignored linear regression analysis performed determine age predict amount fragmentation file system 
table shows correlation age layout score variety active file systems 
data see file systems display expected inverse relationship layout score file system age file systems get older layout score decreases fragmentation increases 
file systems cnews glan usr usr show little correlation age layout score file systems new mail exhibit positive correlation 
combining data file systems table find statistical evidence support generalized statement relationship age layout score 
resulting correlation coefficient 
explained different types correlation age layout score various file systems studied fact different file systems age substantially different rates 
usr file system example home different user accounts 
contrast usr file system comparable size half users 
file system performance seen file fragmentation frequently occurs real world instances ffs 
fragmentation may degrade performance ffs 
assess risk performed benchmarks file systems snapshots reproduce source file systems test machine 
snapshots span months able examine changes performance source file systems aged 
performance facsimile file systems compared performance comparable empty file systems determine amount performance degradation experience real file systems 
performance tests sunos file systems studied active feasible run benchmarks 
meta data snapshots reconstruct file systems disk test machine 
allowed file systems analyzed quiescent environment easier study performance comparable empty file systems 
discussion term original file system refer actual file systems division applied sciences file servers test file system copied file system facsimile file systems produced test machine 
benchmarks described section run sparcstation megabytes memory running bsd 
note sunos run servers snapshot data collected bsd implement clustering ffs 
file systems disk allocation algorithm described section change operating system effect results 
details test system summarized table 
order approximate original file systems configurations closely possible test file systems created values rotdelay 
test file systems configured number cylinder groups corresponding original file systems 
different sized cylinders original test disks impossible precisely duplicate size cylinder groups slightly larger cylinder groups created test file system 
extra blocks layout score file size blocks feb jul oct change layout scores time 
chart plots layout score versus file size file systems study different dates month period 
table correlation file system age file system layout score 
table presents correlation file age file system layout score active file systems duration study 
correlation coefficient indicates strength relationship file system 
square coefficient proportion variation layout score explained linear relationship date 
negative values indicate inverse relationship 
expresses probability relationship 
file system correlation coefficient value file system correlation coefficient value new cnews services ftp software glan staff glan usr glan usr glan usr glan usr local usr mail white cylinder group marked allocated test file system 
test disk variable sized cylinders ffs notion rotationally equivalent blocks meaningless ffs assumes cylinder size cpc set zero test file systems 
rotdelay cpc set zero original file systems rotdelay zero ffs allocates disk blocks simple predictable manner 
new file created block free block file cylinder group block free block cylinder group 
file system benchmarks rely creation new files important characteristic original file systems reproduce arrangement free space 
details precise mapping allocated blocks files directory hierarchy important little impact layout performance newly created files 
metadata copied snapshots original file systems free space bitmaps 
resulting test file system contained empty root directory data utilize free blocks original file system 
compared test file systems benchmark sequential read write performance 
data set consisted megabytes data decomposed appropriate number files file size measured 
ffs allocates files single directory cylinder group data divided subdirectories containing files 
allowed benchmark cylinder groups test file systems 
phases benchmark 
create write files created issuing single write system call data file 

read files read order created 
single read system call issued read data file 
performance measured range file sizes kilobytes megabyte test file systems reproduced dates intervals evenly spread data collection period 
different file systems measurements 
active file systems variety purposes user accounts news serving binaries selected 
test results file size tested throughput reading writing copied file systems compared throughput corresponding empty file system 
show performance test file systems percentage throughput corresponding empty file system 
table benchmark hardware configuration cpu parameters cpu sparcstation mhz disk parameters disk type fujitsu exa rpm sector size bytes sectors track cylinders tracks cylinder track buffer kb average seek ms graphs indicate performance differences different file sizes tested 
largest differences copied file systems empty file systems occur kb test 
file systems ran read create tests file sizes different dates total tests 
tests kb file size performed corresponding empty file system bandwidth 
points january cnews file system 
excluding january tests cnews generally worse test reasons shall come tests file size kb test case achieved performance april write test glan 
tests kb files fifteen performed empty file system throughput 
remaining tests kb files 
variety reasons performance differences different file sizes 
file sizes suffer increased fragmentation free space copied file systems 
noticeable kb files circumstances kb kb tests 
recall ffs allocates indirect block switches new cylinder group 
indirect block required thirteenth data block file files kb tests jan feb mar apr may jun jul aug sep oct relative performance date usr read read read write write write jan feb mar apr may jun jul aug sep oct date usr read read read write write write jan feb mar apr may jun jul aug sep oct date white read read read write write write relative file system performance ii 
relative performance file system throughput measured copied file system expressed fraction throughput comparable empty file system 
file system relative performance measured reading writing files different sizes kb kb kb plotted function time 
tests performed copied file systems dates th january april july october 
jan feb mar apr may jun jul aug sep oct relative performance date cnews read read read write write write jan feb mar apr may jun jul aug sep oct date glan read read read write write write jan feb mar apr may jun jul aug sep oct relative performance date glan read read read write write write jan feb mar apr may jun jul aug sep oct date glan read read read write write write jan feb mar apr may jun jul aug sep oct relative performance date staff read read read write write write jan feb mar apr may jun jul aug sep oct date usr read read read write write write relative file system performance 
relative performance throughput measured copied file system expressed fraction throughput comparable empty file system 
file system relative performance measured reading writing files different sizes kb kb kb plotted function time 
tests performed copied file systems dates th january april july october 
final test date cnews staff october 
indirect blocks 
result reading writing files involves long seeks cylinder groups 
seek required get cylinder group containing indirect block data blocks required return original cylinder group read write file 
benchmarks smaller file sizes incur long seeks performance differences caused fragmentation cylinder group larger impact relative performance kb tests 
fragmentation free space little impact kb test case 
benchmark creates directories containing files 
directory placed different cylinder group 
block size kb file systems kb test case read write blocks data cylinder group seek different cylinder group start directory 
kb test spends larger portion time performing seeks test sizes 
increased fragmentation copied file systems means files directory typically spread empty file system 
large number seeks cylinder groups amount overhead introduced fragmentation smaller impact performance kb test case 
general write tests performed worse corresponding read tests 
kb tests fourteen fifteen tests cases relative performance write tests 
sole read test january cnews 
lower relative performance writing reading caused overhead meta data updates 
file created inode directory updated 
inodes located near cylinder group 
directory small block created files occur free blocks cylinder group 
file created ffs allocate inode update directory 
operations synchronous require seek data blocks previously written file cylinder group 
test file systems suffer fragmentation little free space available early cylinder groups file data tends allocated cylinder groups empty file systems 
seeks longer test file system empty file system 
read tests directory inode read file accessed seeks issued write tests avoided inodes read disk block time cached memory directory 
fragmentation performance important factor performance benchmarks layout test files 
files laid contiguously disk read written quickly 
contrast files blocks scattered disk perform 
validate usefulness layout score predictor performance examined correlation layout score test files throughput measured corresponding test 
results table 
general strong correlation layout score performance 
correlation better kb files kb files better read performance write performance 
cases stronger relationship result meta data overhead 
kb tests meta data read written relative file data intra file seeks measured layout score play larger role determining performance smaller file sizes 
similarly write tests meta data synchronously updated corresponding read tests meta data requests satisfied cache 
result meta data related seeks required write tests intra file seeks measured layout score smaller effect total performance 
achieving optimal file layout requires contiguous free space file system 
causes free space fragmented degrade performance file system 
better understand causes fragmentation examined layout file systems files performance tests focusing kb test cases 
test layout scores files created benchmark computed aggregate layout scores original file systems fraction file system blocks free test 
data 
file system utilization amount space file system may effect file layout 
highly utilized file system free blocks 
may poorly clustered possible widely scattered disk imposing longer seek times fragmented files 
file systems figures clear relationship changes relative performance changes utilization 
cnews white especially apparent 
table shows results linear regression analysis data tests file systems 
note correlation strongest write tests 
reflects overhead imposed synchronous meta data writes occur file created see section 
skewed distribution free space active files created benchmark allocated portions cylinder groups farther locations meta data modified 
highly utilized file systems distances greater requiring longer seeks decreasing performance benchmark 
condition may effect performance ffs amount fragmentation existing files 
free space ffs part file 
file removed creates new free space fragmentation file 
total free space ffs aggregation removed files may fragmented individual files 
fragmentation existing files may useful predictor fragmentation free space performance newly created files 
table shows results statistical analysis relationship aggregate layout score test file system relative performance benchmark file system 
correlation weak suggest relationship elements 
relative performance read tests shows stronger correlation aggregate layout score relative performance write tests 
additional overhead synchronous meta data updates incurred write tests explained section factor unrelated fragmentation particular file 
characterizing workload file system complex task computing free space 
basic characteristics file system workload size files get created deleted frequency operations occur 
file systems study similar workloads primarily serve home directories various users 
files systems usr partitions machine seldom change workload cause fragmentation change lifetime file system 
table correlation relative performance file system free space 
table shows correlation fraction disk space free relative performance test file systems kb tests file systems figures 
correlation coefficient indicates strength relationship square coefficient portion variation relative performance explained linear relationship fraction file system free 
value expresses probability relationship 
tests correlation coefficient value kb tests kb read tests kb write tests file fragmentation performance 
file system relative performance kb read write tests plotted read write layout score files created benchmark program score aggregate layout score entire file system score total fraction file system blocks free original file systems free space 
relative performance ratio throughput copied file systems throughput comparable empty file systems 
tests performed copied file systems dates th january april july october 
final test data cnews staff october 
jan feb mar apr may jun jul aug sep oct score performance free space date cnews read write score score total free space jan feb mar apr may jun jul aug sep oct score performance free space date glan read write score score total free space jan feb mar apr may jun jul aug sep oct score performance free space date glan read write score score total free space jan feb mar apr may jun jul aug sep oct date glan read write score score total free space jan feb mar apr may jun jul aug sep oct score performance free space date staff read write score score total free space jan feb mar apr may jun jul aug sep oct date usr read write score score total free space fragmentation performance ii 
file system relative performance kb read write tests plotted read write layout score files created benchmark program score aggregate layout score entire file system score total fraction file system blocks free original file systems free space 
relative performance ratio throughput copied file systems throughput comparable empty file systems 
tests performed copied file systems dates th january april july october 
jan feb mar apr may jun jul aug sep oct score performance free space date usr read write score score total free space jan feb mar apr may jun jul aug sep oct date usr read write score score total free space table correlation layout score throughput 
table shows correlation layout score files created tests discussed section throughput measured tests 
correlation examined test cases various subsets tests cases described test set column 
correlation coefficient indicates strength relationship set tests 
square coefficient portion variation throughput explained linear relationship layout score 
value expresses probability relationship 
test set correlation coefficient value test set correlation coefficient value tests kb reads kb tests kb writes kb tests kb reads read tests kb writes write tests jan feb mar apr may jun jul aug sep oct score performance free space date white read write score score total free space file systems performance tests cnews example file system unique usage pattern 
repository net news articles files file system extremely small high rate file turnover 
cause free space rapidly fragmented 
snapshot file system january file system aggregate layout score 
weeks snapshot layout score cnews dropped point february cnews reported disk space 
examination file system showed free blocks megabytes free space sixteen percent file system fragments 
surprisingly january tests cnews exhibited greatest performance differences file systems 
single greatest performance difference tests kb write test cnews 
test achieved empty file system performance 
february cnews ran disk space large amount data removed increase free space corresponding increase layout score test dates 
file system layout scores low cnews news partition 
file system layout score lower 
reasonable infer combination high file turnover small file size workloads file systems causes extreme fragmentation 
contrast glan file system little file turnover 
store sources binaries various software packages 
files file system created deleted new software installed existing software upgraded 
surprisingly glan performed better file systems 
fifteen tests copies glan achieved performance empty glan file system 
benchmark shortcomings benchmark program file system benchmarks suffers variety imperfections 
consider sequence events block kilobyte files allocated directory 
file allocated free blocks directory cylinder group 
file allocated free blocks 
net result layout files layout block file allocated cylinder group 
realistic benchmark file delete operations file creates possible causing newly created files fragmented fill holes left deleted files consuming fragmented free space cylinder group 
certainly possible create artificial benchmark behaves manner 
benchmark cause newly created files table correlation relative performance aggregate file system layout score 
table shows correlation aggregate layout score files test file systems relative performance file system 
analysis performed data kb tests files systems figures 
correlation coefficient indicates strength relationship square coefficient portion variation relative performance explained linear relationship aggregate layout score 
value expresses probability relationship 
tests correlation coefficient value kb tests kb read tests kb write tests laid poorly designer wished 
sufficient information right amount fragmentation felt course lead complex benchmark add significant amount testing 
approach creating realistic benchmark file system snapshots accurately reproduce original file system 
simply copying free space bitmaps cylinder group file reproduced blocks allocated original file system 
performance measured reading writing selection pre existing files file system creating new ones 
variety complications approach 
set files represent realistic load 
comparable set file selected different file systems different snapshots file system 
comparable set files selected order read different inter file seek distances dominate performance differences caused file fragmentation hoped measure 
difficulties decided approach add complexity compensating improvement realism 
useful aspect benchmark arises fact test file systems inodes allocated root directory inode 
empty ffs exactly inodes allocated 
number free inodes cylinder group major factor determining cylinder group new directory empty file systems new file systems allocated directories sequence cylinder groups 
tests file system empty full comparable set seeks cylinder groups eliminating possible source unwanted performance difference 
hope better technology available performing file system benchmarks 
summary data collected daily study real world behavior widely file system 
observations layout file systems distribution free space cylinder groups skewed cylinder groups 
small files fragmented large files 
file systems show tendency increasingly fragmented passage time number active file systems study exhibit increase fragmentation fragmentation improved time 
studies performance file systems study indicate performance closely related fragmentation files read written 
amount free space file system fragmentation files file system value predictors layout performance newly created files 
past months collected large amount snapshot data file systems 
simple observations analysis data 
hope conduct extensive performance measurements examine variety questions file system layout 
marshall kirk mckusick william joy sam leffler fabry fast file system unix acm transactions computer systems vol 
august pp 

mcvoy kleiman extent performance unix file system proceedings winter usenix conference dallas tx january pp 

kent peacock counterpoint fast file system proceedings winter usenix conference dallas tx february pp 

robson estimate store size necessary dynamic storage allocation journal acm vol 
july pp 

margo seltzer keith bostic marshall kirk mckusick carl staelin implementation log structured file system unix proceedings winter usenix conference san diego ca january pp 

diane tang margo seltzer lies lies file system benchmarks vino fall harvest harvard division applied sciences technical report tr 
