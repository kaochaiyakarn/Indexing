meta model formulating knowledge models software development mi walt scacchi information operations management department university southern california los angeles ca usc edu voice fax introduce knowledge meta model serves unified resource model integrating characteristics major types objects appearing software development models sdms 
consists resource classes web relations link different types resources different kinds models software development 
includes specialized models software systems documents agents tools development processes 
served basis integrating interoperating number process centered case environments 
major benefit twofold forms higher level abstraction supporting sdm formulation subsumes typical models software development objects 
enables higher level reusability existing support mechanisms models 
second provides basis support complex reasoning mechanisms address issues different types software objects 
explore features describe formally detailed example followed characterization process sdm composition characterization life cycle activities involved model formulation process 
preparation report supported part contracts bell laboratories andersen consulting hewlett packard ibm canada water products division office naval research contract number usc center operations management education research comer 
endorsements implied 
acknowledge contributions bose mike ming june lee frank luo john noll larry votta 
contents background unified resource model software objects generic resource model specialized object models specialized resource models specialized model software development model example software development model dod std process model dod std sdf model dod std agent model web relations dod std model composition software development models contribution describe knowledge meta model representation formalism building composite models software development efforts 
meta model resource centered ontology 
formulation large complex models composition principal classes models appearing problem domain 
domain large scale software development 
constructed deployed knowledge support system utilizes representational formalism ways support articulation models formulation life cycle describe 
turn support system formulate analyze refine redesign various models large scale software development research sponsors 
models addressed software development projects hundreds software developers employed bell laboratories il division pico rivera ca 
build multi line software systems 
settings re formulation current new models large scale software development done identify new ways analyze consistency completeness cost resource dependencies conflicts local software development efforts order organization management tractable predictable 
little effort approach adapted applied decision making business process domains sm 
remainder describe approach model formulation life cycle meta modeling model composition 
section provide background approach 
includes short characterization focal problem domain related approaches studies 
describes view model formulation life cycle positions meta modeling driving activity 
describe meta modeling representation serves foundation formulating models organize guide manage large software development projects 
follow illustrative example highlights modeling details component models part large model number industrial firms 
example explain critical details involved model composition 
conclude add additional remarks regarding current efforts 
background domain large scale software development new product process decision support models proposed eje gp hl kai ms ob rd spw ws 
models facilitate different aspects software development employed support systems call process centered software development support environments 
models facilitate archiving reuse product process decision making artifacts ws mls sharing object classes software developers query reasoning relations modeled objects attributes ms rd 
example ramesh dhar rd advocate need records organizes retrieval kinds decisions rationales employed building large software systems 
different models usually deal particular aspect software development hard compose integrate comprehensive project wide 
part difficulty arises adoption different modeling approaches emphasize representation different classes objects interrelationships 
difficulty emerges trying address formulation large development models accomodate composed independently developed component models 
difficult put various classes objects models interpreted executed independently developed 
order better understand issues review comparable research efforts particularly related structural modeling process modeling meta modeling model construction integration model management systems 
geo geo geo noted pioneering computational rendering structural modeling 
structures model targetted problem domains attributed directed graphs turn supported entity relation attribute era model management systems 
noted era models support systems lack representational flexibility economy offered object oriented models support systems ms ct len inheritance mechanisms object oriented data management systems 
area process modeling jarke jjr dhar dj colleagues advocate need model processes associated decision making development software information systems 
particular advocate knowledge process representation formalisms enable process support systems support complex reasoning inheritance query computations 
concur direction process modeling necessity follow related ms gmp 
knowledge formalisms provide representation interrelated classes attributed objects manipulated rule inference systems 
area process modeling support domain software development brought attention need utility process meta models metamodeling ms la fl blu gmp 
purpose meta models provide formal language representational system specifying interrelated family genus geo process models models software development objects 
approach described employs knowledge meta modeling scheme 
modeling approaches moving powerful model representations consider advances model construction 
significant efforts model construction bk dk emphasize construction mathematical optimization models 
efforts attention focused providing supports systems facilitate composition models parameters algebraic formulas 
dk advocate model construction support systems address need execute interpret enact model may influence model formulation 
believe concepts applicable model formalizations integration formulation support particularly software development models ms mls gmp 
view find concepts emphasized best tied understanding set mechanisms activities addressed formulate complex models software development projects 
past years developing evolving knowledge called articulator ms 
articulator knowledge representation implementation 
way articulator meta model serves formalism represent software development model supporting resource infrastructure ms sca 
experience refining articulator formulation dozen sdms research sponsors developed characterization set activities perform constructing software development models 
refer set activities model formulation process life cycle 
set activities entail life cycle include ffl meta modeling constructing refining concept vocabulary logic ontology representing classes models model instances terms object classes attributes relations constraints control flow rules computational methods 
ffl model definition eliciting capturing informal descriptions software development objects conversion formal development models model instances 
ffl analysis evaluating static dynamic properties model including consistency completeness internal correctness traceability semantic checks 
ffl simulation symbolically enacting modeled sdms order determine path flow intermediate state transitions ways persistent replayed queried dynamically analyzed reconfigured multiple alternative scenarios 
ffl visualization providing users graphic views sdm object classes instances viewed traversed interactively edited animated convey modeled process statics dynamics 
ffl prototyping incrementally enacting partially specified sdm instances order evaluate presentation scenarios users prior performing tool document model integration 
ffl administration assigning scheduling specified users tools development data objects modeled user agent roles product milestones development schedule 
ffl integration encapsulating selected software tools repositories document objects invoked manipulated enacting sdm 
ffl environment generation automatically transforming process model instance executable sdm producing selectively presents prototyped integrated tools objects users enactment 
ffl enactment executing generated sdm program resulting environment process interpreter guides enforces specified users agent roles enact sdm planned scheduled 
ffl monitoring recording auditing collecting measuring sdm enactment data needed improve subsequent process enactment iterations documenting process steps occurred order 
ffl replay graphically simulating re enactment previously executed sdm order readily observe process state transitions intuitively detect possible process enactment anomalies 
ffl articulation diagnosing repairing rescheduling actual simulated sdm unexpectedly broken due resource requirement contention availability resource failure 
ffl evolution incrementally iteratively enhancing restructuring tuning migrating reengineering sdm preceding activities effectively meet emerging user requirements capitalize benefits associated new tools techniques 
list suggest formulating sdm life cycle proceeds linear waterfall manner merely consequence narrative presentation 
articulator meta model serves representation language capable specifying large family software engineering processes 
far specified process models different kinds applications ranging small scale models large scale commercial development models ms ms ms sm vot sm gmp 
articulator meta model served basis integrating articulator environment ms generic process engine ap environment information sciences institute balzer bn ii team programming environment hp laboratories gp iii primary technical effort encountered integration construction translator maps process notation articulator meta model notation 
experience building new translator takes person weeks effort 
complex translators producing natural language paraphrases sdms enactment histories developed kmr 
commercially available process enactment engine hp gmp iv house environments researched corporate sponsors 
ii employ automation rules process support iii utilizes procedural process programming language broadcast message server encapsulated shelf case tools 
number process centered environments enactment engines utilize mechanisms believe experience begun demonstrate plausibility validity 
focus contribution presenting structure organization selected details meta model supports formulation models composition 
remaining sections show related concepts particularly emphasized brought bear describing meta model appropriate domain software development composition models models unified resource model software objects section introduce unified resource model represents knowledgebased foundation modeling objects associated development large software systems 
model seeks organize codify classes objects attributes values denote entities associated software development processes products organizational roles development tools relationships associate 
way formulate object oriented models characterize people roles perform tasks processes consume produce specific outcomes documents systems case environments tools 
software development projects occur different settings different people may act different roles performing different tasks task sequences building different intermediate final products different tools 
model software development distinct instantiations different organizations subscribe different models 
result seek avoid constructing model software development instance scratch seek employ codified representational framework organizes structures simplifies model formulation composition enactment 
developed serves broadly define concepts associations span family related set software development models model span family possible instantiations 
unifies integrates principal characteristics types objects typify software development processes systems roles documents tools represents terms higher level object class called resource 
consists subclasses resource simple resource individual resource types aggregate resource set heterogeneous collections resources different types 
consists web relations link different types resources ms 
different software development object models individual software applications built support construction realized integrated manner 
furthermore ability specify classes relations different kinds software objects 
software development objects describe consists generic resource model models software resource classes 
generic resource model represents hierarchy generic resource classes relations describe basic characteristics kinds software objects 
subclass resource models specialization generic resource model represents single class software resources 
currently defined number specialized models resources software systems documents agents tools processes 
depending application domain specialized models easily added customized 
accordingly final statement coherent foundational representation combine disparate software object models way extended specialized instantiated evolved 
section discuss generic resource model specialized object models 
generic resource model generic resource model describes basic set characteristics uses major kinds software development resources typically manipulated identified follows earlier aggregated webs related resources called computing packages ks sca 
regard allow relations defined object classes attributes single values set values 
departure distinguishes traditional object oriented scheme generally lack relation class constructs knowledge schemes 
major kinds software development resources ffl software systems products software development 
normally software application system written programming language consists set modules non functions 
software systems produced software developers software development tasks occur different places different times 
different development states indicating status development ms 
exists invocation relation software modules module calls module 
ffl software documents reports deliverables manuals design descriptions modification requests emerge artifacts resulting execution software development processes 
documents composed aggregations development artifacts design schemata products created modified developers tools 
ffl software tools executable programs invoked developers create modify software systems associated artifacts 
viewed collections programs developers progressively select execution performing different software development processes activities 
ffl software developers agents organized perform software development 
typical software development project teams developers produce software system 
different working relationships developers team individuals groups play different roles different times 
ffl software development processes set tasks linked execution plan 
software developers attempt perform tasks process enactment plan responding local contingencies 
developers software tools tasks consume software objects produce software artifacts documents systems 
resources mind summarize basic characteristics share common 
characteristics abstracted generic resource model 
common characteristic software resources ffl object decomposition hierarchy software development resource 
purpose modularity view software resource composition component resources 
reduces complexity software object 
type software resource represent atomic units computational processing 
example software system modules non functions 
software development process non subtask steps 
ffl associative links components software resources 
component resources resource isolated 
relations links identify processing orders directions message passing 
example software modules may invoke 
software tasks executed sequentially iteratively conditionally concurrently 
ffl software resources states signify processing status 
different software resources different sets state values state transitions typically described finite state machine 
example software module may undergo status changes created reviewed debugged tested released 
generic resource model formally represents characteristics set object relation classes 
resource root class generic resource model 
subclasses describe generic objects simple resource represents class resources non 
aggregate resource set represents package member classes including simple resource 
represents aggregate collection resource classes set relation classes resource classes 
shows object hierarchy generic resource model 
pairs resource relation classes represent web associative links resources 
relation classes bi directional relation pairs denote relation direction 
subclass subclass characterizes classic class subclass relationship common object oriented models 
components component relation pair forms decomposition hierarchy software resource 
neighbors neighbor form processing link set objects resource 
neighbor relations denote transformational sequence intermediate documents persistent artifacts cs 
resource subclasses state state legend object classes relation classes resource subclass simple resource member resources aggregate resource neighbors object hierarchy generic resource model neighbors long objects subclass 
member resources member form aggregation link member resources 
additional pair object relation classes shown resource specs resource spec describe links resources resource spec class 
specification resource spec class defines relationships different resource classes central part definition 
resource spec specification resources serves pointer desired resources particular purpose 
definition shown 
attributes include resource type resource condition maximum quantity minimum quantity matched resource instances 
fully specified resource spec refers set resources class subclass resource type attribute values match resource condition 
resource spec linked resource resource specs constitutes conceptual bridge resource set resources match description resource spec determined dynamically 
accordingly give examples web relations sections 
resource attribute called state 
values state resource class describe stages computational processing class 
subclasses resources state values simple resource definition state transition defined users 
state values collection member resource classes 
discuss specializations generic resource model 
specialized object models software development object models developed specialization generic resource model 
represent different software objects software development 
hand specialized object models inherit characteristics generic resource model 
hand specifications added describe characteristics specific kind software objects describe 
defined number specialized object models focus subclasses resource subclass 
specialized resource models identify specialized resource models generic resource model 
describes single class software objects 
defined multiple inheritance attributes subclasses relations generic resource model classes include models software system document agent tool development process 
lists elements specialized models subclasses objects relations generic resource model 
example document model consists paragraph simple resource section 
document consists sections paragraphs form decomposition hierarchy sequential order section second section example development process model consists tasks non actions successors specify execution order 
shows generic resource model specialized individual object models 
represent 
classes individual models provide complete enumeration attributes relations default values classes focus illustrative subset research sponsors employed software development projects 
similarly describe rules computational methods manipulate entities examples related ms mi ms 
resource simple resource members neighbors software system function module functionalities document paragraph section component docs realized docs agent people team report agents tool program toolkit tool calls calls process action task subtasks successors specialized resource models represented symbols labeled circles 
example document subclass resource symbol circle label resource 
specialized model software development model software development model specialized consists collection resource classes connected web relations 
web relations enable manipulation different resource classes different ways 
software development model describes resource infrastructure software system produced 
consists development process model enactment plan software model basis product agent model performers set optional resource models input optional tool model 
software model specialized software system model document model 
web relations software development model describe relationships individual models centered development process 
agent role spec specifies roles agents assigned perform process tasks actions 
tool spec specifies resources tools process 
required resource spec specifies resources input process 
successful provided resource spec specifies resources output process process successful failed provided resource spec specifies resources output process enactment breaks fails ms mi ms 
accordingly subclasses defined schema resource spec highlighted 
software system toolkit program tool task action team people section paragraph module function process agent legend object classes relation classes resource subclass simple resource member resources aggregate resource neighbors object hierarchy unified resource model spec resource resource type resource classes resource condition attribute value minimum quantity integer maximum quantity integer selection condition true resource possession allocated resource instances gg role spec resource spec agent role spec process attached process gg spec resource spec tool spec process attached process gg resource spec resource spec required resource spec process attached process gg provided resource spec resource spec successful provided resource spec process attached process gg provided resource spec resource spec failed provided resource spec process attached process gg definition resource spec example software development model provide realistic illustration subclass software development model called dod std model 
model describes development approach products directed mil std dod public standard guides development large software systems embedded military applications purchased government 
dod std model includes software product model public standards grouped iso banner serve similar purposes guiding realization high quality software development products 
military standards software development mil std intended mil std 
new standards seek rectify technical shortcomings mil std dod std sdf ii development team model dod std agent iii software development process model dod std process 
development staff team model addition provided mil std completion software development model 
mil std specify types software development tools include tool model tool model created 
turn examine individual resource models web relations connect dod std process model dod std process specifies component tasks system requirement analysis design coding testing integration 
shows view multi level task decomposition dod std process 
gives definition formulate design dod std process tasks component subtask shown 
dod std process component define component sub tasks actions 
successors specify sequential concurrent execution order tasks 
executed task start immediate predecessors complete 
example formulate design successors allocate components identify system test 
depending specify successors task task constructors achieve different task execution orders including sequential concurrent iterative conditional ms 
remains problem identifying formulating codifying software development model demonstrate conformity standards may 
identify partial set classes instance values model software development mil std includes hundreds object relation classes dozens sub processes documents organizational roles 
commercially available case tool carnegie group knowledgebase model management system graph browser articulator environment 
graph browser visualize decomposition structure selected relationships web relationships characterize software development model 
process tasks incorporate iteration conditional choices utilize atomic actions denote decision points 
dod std process model task decomposition design task component preliminary design predecessors successors allocate components identify system test dod std process model task definition dod std sdf model product decomposition dod std sdf model dod std sdf specifies set software documents software system executables required mil std relationships cs gs 
sdf represents software development files products software development 
shows system product decomposition dod std sdf 
provides compositional view dod std sdf documents 
set documents designed object called computer software configuration item includes description requirements design coding testing integration 
shows kinds document 
model instantiated set documents instantiated identified requirements specification 
property dod std sdf defines relation realized doc documents 
mil std requires developers keep track realization initial development requirements implemented unit modules 
satisfy need realized doc link single software requirement design coding testing order maintain consistency software development 
relation retrieved identify actual allocation software system requirements 
software top level design doc realized software detailed design doc turn realized software test plan 
top level design doc document section document design doc functional description realized doc software detailed design dod std sdf model document definition dod std agent model role decomposition dod std agent model development team builds software manner conforming mil std situations software systems currently produced 
development team consists different agent roles involved dod std process model including manager designer quality assurance qa people engineer roles 
shows roles dod std agent definition dod std agent role software designer 
web relations dod std model dod std model dod std process dod std sdf dod std agent linked web relations 
gives definition web relations subtask formulate design dod std process 
ffl successful provided resource spec specifies resources dod std sdf output subtasks dod std process 
ideally single resource dod std sdf produced subtask dod std process 
resource created real software development accounted dod std process 
problem situations arise failed provided resource spec defined show example problem report created 
ffl required resource spec specifies resources input subtasks dod std process 
mil std contain information types input resources web relation resources sdf inputs 
means resource dod std sdf created earlier subtask dod std process subtasks 
ffl agent role spec specifies roles dod std agent involved subtask dod std process 
subtask dod std process role performer 
extra qualification attributes skill requirements prior experiences added 
composition software development models order rapidly build large complex software development models sdms draw sdms exist stored shared widearea sdm repositories mls ns 
assuming translators exist built mapping sdm notations meta model notation described face problem compose independently developed sdms larger models 
interest moving viewing composition models process simply cut paste copy edit task 
loss alternatively tailoring specialization generic sdms 
design task agent role spec role formulate design required resource spec required formulate design successful provided resource spec succ provided formulate failed provided resource spec failed provided formulate formulate design agent role spec agent role spec process formulate design resource type software designer resource condition state ready maximum quantity resource possession gg formulate design required resource spec required resource spec process formulate design resource type system segment design doc software reqs spec resource condition state ready state reviewed maximum quantity resource possession gg provided formulate design provided resource spec provided resource spec process formulate design resource type software top level design doc resource condition state maximum quantity resource possession gg provided formulate design provided resource spec provided resource spec process formulate design resource type problem report resource condition state maximum quantity resource possession gg web relations formulate design generality limit discussion composition software development process models order highlight problems address 
view central problems composing models software development processes sdms 
finding matching candidate software process model composition model object oriented design ood technique boo target software development infrastructure 
second planning construct match matching activity fails produce acceptably compatible match ms ms 
third entails inserting integrating candidate sdm compatible process model representation 
activities entail complex representations reasoning processes 
effort aimed outlining nature problems utilized formulate solutions 
view new software development processes software engineering tools support require web compatible resources place available facilitate successful process model composition 
resource web thought signature zw configuration technological organizational resources ood support tools staff trained ood ood artifacts documents 
matching problem requires resource web process model composition candidate explicitly represented 
requires resource web software production infrastructure organization seeking adopt new development process explicitly represented described 
subsequently match resource web organizational structures possible candidate software development process model successfully composed target 
match candidate process model easily adopted integrated 
clearly exact match cf 
zw 
necessary establish criteria measure acceptable distance exact match acceptable partial match metrics 
point developed set classifying disparity currently available resource webs needed satisfy planned scheduled software development processes ms mi ms 
short examine classes necessary resources unavailable available available broken similar type available available multi resource combinations process subsumes process requires certain class tool certain class staff 
classification mechanism booch ood process model task decomposition serves provide basis reasoning achieve best partial match respect resources available 
planning problem course related matching problem 
matching problem may conform static pattern matching problem solving scenario planning problem represents dynamic scenario 
matching results partial match done revise reconfigure candidate target sdm resource webs achieve better best match 
task evolving candidate sdm resource web configuration better matches bound target resource infrastructure essence composition planning problem 
generative process planning problem hl 
means plan generated incrementally transform candidate sdm desired target resource configuration available resources 
transformations may include adding removing resources restructuring resource configuration web relations revising resource attributes attribute values 
turn plan represents partial ordering transformations apply 
remains problem implement plan derived generative planning process 
point software support environment building composing sdms described support generative planning task performed manually 
composition integration problem 
describe solution strategy example 
starting point assumes candidate sdm web resource requirements satisfied upward compatible development process infrastructure 
consider problem model static integration ood process dod std process 
displays model ood process derived booch boo 
order integrate process model dod matching problem boils determining incorporate ood process current design task hierarchy 
mil std dod std process preclude ood process choice include resources required ood process match provided predecessor tasks resources required successor tasks ood match upward compatible manner 
case incorporate ood process formulate design part activity preliminary design shows object schemas design tasks updated match resources provided predecessor task software reqs spec outlined required succeeding preliminary design tasks 
done show updated dod std process model task hierarchy indicates model booch ood process successfully integrated formulate ood design composed dod 
remains updating dod std sdf model outputs booch ood process match encompass required formulate design 
shown simple example help better understand support composition software process models 
appears powerful modeling formalism investigating interactions impacts different classes commonly seen software objects process models 
strategy focused representation relationships software systems processes recall resource infrastructure refers software systems documents tools organization agents required perform software development process 
mil std specify process formulate design 
development effort seeks conform standard create acquire design process model integrate development process 
ood design task agent role spec role formulate ood design required resource spec required formulate ood design successful provided resource spec succ provided formulate ood failed provided resource spec failed provided formulate ood formulate ood design required resource spec required resource spec process formulate ood design resource type system segment design doc software reqs spec resource condition state ready state reviewed maximum quantity resource possession gg provided formulate ood design provided resource spec provided resource spec process formulate ood design resource type software top level design doc software object hierarchy resource condition state state maximum quantity resource possession gg updated web relations formulate ood design products tools agents conform generic specialized resource models constitute described 
experience articulator meta model demonstrates successfully integrate interoperate independently developed 
believe formulation sdms composition process life cycle may lead rapid integration interoperation sdms different notations shared wide area sdm repositories 
area research attention 
experience indicates dynamic team endeavor required order achieve mature sdms industrial settings 
team effort succeeds result rapid sdm prototyping incremental development iterative refinement reengineering ad hoc sdms instances 
looking anticipate articulator meta model updated dod std process task decomposition application fields ability represent wide range resources intricate web relationships 
regard research extending areas modeling aspects development organizations organizational processes workflow automation order fulfillment new product development financial book resource infrastructures sm subsequently goal demonstrate definition integration enactment composition process directed environments applications process models 
bk bhargava krishnan 
computer aided model construction 
decision support systems 
blu blum 
characterizing software process 
information decision technologies 
bn balzer 
mechanisms generic process support 
proc 
acm sigsoft symp 
foundations software engineering pages 
acm software engineering notes vol 
december 
boo booch 
object oriented design applications 
benjamin cummings publishing 
conradi fuggetta 
framework process concepts 
software process technology pages 
second european workshop software process technology springer verlag lecture notes computer science vol 
september 
cs choi scacchi 
assuring correctness configured software descriptions 
acm software engineering notes 
cs choi scacchi 
environment forward reverse case 
information software technology nov 
ct taylor 
integration information systems objectoriented approach 
computer 
devanbu brachman knowledge software information system 
proc 
th international conference software engineering pages nice france march 
dj dhar jarke 
modeling processes 
decision support systems 
dk 
model integration theory models 
decision support systems 
dod department defense 
defense system software development document dod std 
technical report department defense 
eje emmerich merlin knowledge process modeling 
proc 
st european workshop software process modeling pages 
fl freeman 
meta model information systems support reverse engineering 
information software technology 
geo 
structured modeling 
management science 
geo 
formal aspects structured modeling 
operations management 
geo 
sml language structured modeling levels 
operations research 
gmp garg mi pham scacchi 
smart approach software process engineering 
proc 
th 
intern 
conf 
soft 
engr pages 
ieee computer society ieee may 
gp garg pham knowledge team programming environment 
technical report hpl hewlett packard laboratories 
appear intern 
soft 
engr 
know 
engr 
gs garg scacchi 
hypertext system manage software life cycle documents 
ieee software 
hl huff lesser 
plan intelligent assistant supports process programming 
acm sigsoft software engineering notes nov 
jjr jarke jeusfeld rose 
software process data model knowledge engineering information systems 
information systems 
kai kaiser 
rule modeling software development process 
th international software process workshop pages new york ny 
kmr mccullough rambow 
knowledge requirements automatic generation project management reports 
proc 
th 
knowledgebased software engineering pages 
ieee computer society ieee september 
ks kling scacchi 
web computing computer technology social organization 
advances computers vol pages 
academic press 
la leymann 
managing processes information resource 
ibm systems 
len 
object oriented approach model management 
decision support systems 
mi mi 
modeling analyzing software process process breakdowns 
phd thesis computer science dept university southern california 
september 
mls mi lee scacchi 
knowledge software process library process driven software development 
proc 
th knowledge software engineering conference mclean va september 
ms mi scacchi 
knowledge environment modeling simulating software engineering processes 
ieee trans 
knowledge data engineering sept 
ms mi scacchi 
modeling articulation software engineering processes 
proc 
st international conference software process pages oct 
ms mi scacchi 
process integration case environments 
ieee software march 
ms mi scacchi 
articulation integrated approach diagnosis re planning re scheduling 
proc 
th 
knowledge software engineering conf pages chicago il 
ns noll scacchi 
integrating diverse information repositories distributed hypertext approach 
computer dec 
ob basili 
representing software engineering models tame goal oriented approach 
ieee trans 
software engineering 
rd ramesh dhar 
representation maintenance process knowledge large scale systems development 
proc 
th knowledge software engineering conference pages sept 
sca scacchi 
managing software engineering projects social analysis 
ieee trans 
software engineering jan 
sca scacchi 
software infrastructure distributed system factory 
software engineering journal sept 
sm scacchi mi 
experiences process modeling analysis simulation formalized process models 
position circulated th 
intern 
soft 
process 
dagstuhl germany ieee computer society february 
sm scacchi mi 
modeling integrating enacting complex organizational processes 
intern 
intelligent systems finance accounting management final version appear 
previous version th 
intern 
conf 
intelligent systems finance accounting management stanford university december 
sm scacchi mi 
modeling integrating enacting software engineering processes 
proc 
rd 
irvine software symposium 
irvine research unit software university california irvine april 
spw schafer wolf 
knowledge software development environment supporting cooperative 
intern 
soft 
engr 
know 
engr 
sen feng liou 
construction model formulation consultant experience 
ieee trans 
systems man cybernetics 
vot votta 
comparing formal informal process description 
position circulated th 
intern 
soft 
process 
dagstuhl germany ieee computer society february 
ws wood sommerville 
knowledge software components catalogue 
editor software engineering environments pages 
ellis horwood limited 
zw wing 
signature matching key reuse 
proc 
acm sigsoft symp 
foundations software engineering pages 
acm software engineering notes vol 
december 
