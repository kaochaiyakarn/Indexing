reachability decidable ground ac rewrite systems richard mayr institut fur informatik technische universitat munchen 
munchen germany informatik tu muenchen de michael rusinowitch loria inria lorraine rue du jardin bp es nancy cedex france loria fr reachability problem ground associative commutative ac rewrite systems decidable 
show ground ac rewrite systems equivalent process rewrite systems prs reachability decidable 
decidability proofs prs cumbersome simpler readable proof framework ground ac rewrite systems 
show decidability reachability states certain properties decidability boundedness problem 
ground ac systems obtained combining ground rewrite systems rewrite systems substitution associative commutative laws symbol denoted 
laws applied symmetric rewrite rules right left vice versa 
reachability problem ground ac systems considered gilleron proved decidable restrictions symbols occur root side rule occurs root right hand side occur root left hand side 
condition forbids introducing new symbols term 
show ground ac rewrite systems equivalent process rewrite systems prs introduced mayr extension petri nets subroutines 
observation surprising formalisms different origins 
ground ac systems defined extension ground rewrite systems associative commutative operators 
prs introduced process model extends petri nets subroutines 
shown reachability prs decidable 
similar technique simpler readable proof result framework ground ac rewrite systems 
previous known decidability results ground ac systems ac symbols concern word problem symmetric reachability problem 
obtained splitting rewrite systems order get homogeneous subsystems 
consider problem reachable state satisfies certain properties described state formulae 
show reachable property problem decidable ground ac systems 
show problems termination boundedness decidable 
ground ac systems vs prs ground ac rewrite systems defined ground rewrite systems rewrite systems substitution operate set terms signature contains associative commutative operator 
note contain function symbols arity 
detailed survey term rewriting reader may consult 
process rewrite systems prs defined prefix rewrite systems operate process terms 
process terms built atomic processes operators sequential parallel composition 
operator sequential composition associative operator parallel composition associative commutative 
show formalisms equivalent 
prs ground ac systems possible construct equivalent systems rule contains operator 
new systems simulate behavior original systems modulo uniformly bounded number silent actions 
show equivalence systems rules contain operator 
monadic ground ac systems ground ac systems function symbols arity 
step show prs monadic ground ac systems equivalent 
prs monadic ground ac symbol prs introduce ary function symbol 
special symbol ffl empty term 
prs rule corresponding ground ac rule prs ground ac ffl ffl ffl ffl ffl ffl kz ffl ffl ffl ffl ffl ffl ground ac prs function constant symbol ground ac system symbol prs 
ground ac rule corresponding prs rule ground ac prs dke shows prs monadic ground ac rewrite systems equivalent 
second step show monadic ground ac general ground ac equivalent 
direction trivial 
show encode general ground ac system monadic ground ac system 
ary function symbol 
introduce new ary function symbols rewrite rules replace term form new system monadic contains operator rule 
transformed equivalent modulo silent actions operator rule 
ground ac monadic ground ac prs 
prs rewrite rules labeled atomic actions customarily done ground ac systems 
done ground ac systems just 
reachability ground ac systems consider finite sets ground rewrite rules delta 
terms define delta iff transformed applying rules delta 
reachability problem decide delta delta 
splitting rules delta finite set rules term rule homogeneous contains occurrence non constant operator 
lemma finite ground ac system delta finite set homogeneous rules delta effectively constructed terms delta iff delta proof derive delta applying delta abstraction rules possible jp jp maximal homogeneous non constant strict subterm term position new constant 
jp jp maximal homogeneous non constant strict subterm position new constant 
homogeneous non constants different root symbols new constant 
application transformations terminates decreases number rules different non constant operators root side application decrease multiset depths rule sides create rules transformed 
rewrite step delta simulated rewrite steps delta direction follows fact symbols new constants 
deciding reachability completion section rules form constants called simple rules 
completion algorithm adds simple rules set rules lemma homogeneous rewrite systems sets operators rules disjoint contain simple rules 
pair constants pair constants 
proof choose pair constants 
oe oe sequence rule applications minimal length 
precisely length oe minimal choice oe 
preconditions exist 
assume oe contain non simple rules derive contradiction 
assume non simple rule oe assumption non simple rule oe 
rule form constant constant sets operators disjoint 
operator disappear sequence oe ends constant done term rewritten constant sequence oe 
constant subsequence oe oe oe contradiction minimality length oe 
non simple rules oe contain simple rules assume oe contains rules rules lemma homogeneous rewrite systems 
sets operators rules disjoint 

relations decidable 

adds rules form constants new relations decidable 
constants decidable proof prove lemma sufficient give algorithm generating couples constants check generated 
add rules form constants vice versa 
third precondition change decidability 
precondition apply lemma 
pair constants satisfies pair satisfies precondition pair 
add pair get precondition change decidability 
repeat procedure new new pair added 
terminates finitely different constants lemma added pairs final results process 
holds theorem reachability problem decidable ground rewrite systems associative commutative operator 
proof consider instance reachability problem set rules delta terms question delta introduce new constants define delta delta fx yg 
delta delta lemma system homogeneous rules delta constructed delta delta delta partitioned rules contain commutative operator rest 
precondition lemma satisfied 
relation corresponds petri net reachability decidable 
relation reachability relation normal ground rewrite system decidable 
adding simple rules change 
preconditions lemma satisfied 
decide delta equivalent delta note algorithm lemma uses polynomially instances petri net reachability smaller input 
techniques applied show decidability reachability problem ground rewrite systems arbitrarily different associative commutative operators 
reachable property problem notations section 
rewrite rules delta assigned labels interpreted atomic actions 
labels form atomic propositions state formulae 
example label 
term satisfies state formula denoted rule label applied general state formula boolean combination atomic propositions 
give method decides problem phi problem reachable state satisfies state formula phi 
suffices consider case phi abbreviate 
true 
define kg 
solve problem systems delta transitive normal form 
simplify problem assume rules form carry label 
restriction system transformed satisfy condition way term occurs left side rule determine set actions enabled 
add new constant rule action add rule transform system transitive normal form 
new system equivalent old far reachable property problem concerned 
simplicity assume non constant symbols ac 
generalization arbitrary symbols straightforward 
assume initial state constant just add rule delta par resp 
delta seq contains rules resp 
rules delta par called par rules rules delta seq called seq rules 
fc set constants system 
monomial sum constants 
denote psi formula ln stating monomial satisfies formula psi 
instance fb true monomials reducible rules label fb subset denote hc formula ln stating set constants monomial instance fc evaluates true 
terms flattened associativity 
depth term 
result direct consequence result petri nets due lemma decidable phi delta contains par rules 
oe shortest sequences oe phi subderivation delta delta delta replacing subderivation delta transitive normal form obtain shorter string oe oe assume commuting rules applications build string properties oe additionally special structure rules applications corresponding applied level terms 
special case section solve problem special case 
compute subset cn 
rule applies obviously cn shortest derivation decomposition maximal prefix intermediate terms including level 
assume terms non trivial sums constants 
possibly empty sums 

delta minimality derivation assume ii 
root symbol reducible rule leaves cn different minimality 
recall rules depth 
generally minimality contain subderivation delta delta 
pumping allows find shorter 
shows depth bounded jcj 
simple recursive algorithm solves problem 
true iff rewrites term depth reducible rules easy check lemma delta transitive normal form 
introduce auxiliary procedure 
tests exists monomial delta par fb hc true 
note test effective result 
gamma true exit gamma gamma true exit false computing fc trueg get set cn general case study general case 
analyze structure term assume root symbol case simple 
derivation contains rules applications delta par shall sort constants property satisfy ranging subsets kg 
sigma possibly empty sums constants 

delta 
fp pumping argument slightly complex base case subderivation starting constant delta delta reduced anymore shortened satisfy 
length branch bounded reach true iff rewrites term depth satisfying reach decidable lemma delta transitive normal form 
note reach 
algorithm decides reach need auxiliary function check constant gamma 
mapping check true iff exists delta par sigma ku ib check effective result 
algorithm reach follows reach mapping gamma 
fp check reach gamma true exit reach gamma reach gamma true exit reach false reachable property problem tested computing reach termination problems section investigate termination properties ground ac systems 
consider case systems transitive normal form 
lemma decidable exists infinite derivation constant proof term define depth maximal nesting depth function symbols example depth 
assume infinite run starts run constant reduced larger non constant term contracted constant consider systems transitive normal form rule step 
infinite run infinite run depth terms decreases 
words seq rules form seq rules form 
situations occur 
infinite sequence depth terms bounded 
constant occurs term sequence infinite derivation delta par 
depth terms bounded steps pigeon hole principle long internal path term identical symbols generated rule constant 
infinite derivation iff rewrites term containing constant 
infinite derivation par rules 

rewrites term containing case 
amounts check existence infinite path petri net done constructing coverability tree 
case 
decided results previous section 
constant consider system delta delta fc terms reached step 
checking 
amounts checking collected set constants test positive test reach term containing technique 
existence infinite run constant decidable 
decide general term new constant add rule system transform new system transitive normal form check existence infinite run system terminates infinite run 
get theorem 
theorem termination property decidable ground ac systems 
similar way decide boundedness problem 
run constant sizes terms unbounded reach term containing 
unbounded derivation par rules 
decided coverability graph 

rewrites term containing checked way 
rule right side contains equal labeled action suffices check theorem boundedness decidable ground ac systems 
dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science 
north holland 
gilleron 
reachability problem ground trs extensions proceedings international joint conference theory practice software development vol 

volume lncs springer verlag pp 
mayr 
algorithm general petri net reachability problem 
siam journal computing 
mayr 
process rewrite systems 
electronic notes theoretical computer science volume 
proceedings workshop expressiveness concurrency express 
narendran rusinowitch 
ground associative commutative theory finite canonical system 
proceedings rta lncs springer verlag 
narendran rusinowitch 
problem ground ac theories 
ieee symposium logic computer science 
montreal canada 
church rosser property ground term rewriting systems decidable theoretical computer science volume pp 

decidability temporal logic problem petri nets 
theoretical science 
