data path allocation extended binding model ganesh krishnamoorthy john nestor mentor graphics illinois institute technology warren nj chicago illinois existing approaches data path allocation highlevel synthesis binding model values assigned register entire lifetimes 
describes extended binding model segments value lifetime may reside different registers cost advantage doing 
addition model supports multiple copies values functional units pass unmodified values reduce interconnect 
model exploited allocation tool uses iterative improvement search low cost designs 
results show allocation costs substantially reduced model 

data path allocation problem assigning hardware scheduled control data flow graph cdfg implement specified behavior meeting performance timing constraints minimizing implementation cost 
cdfg specifies operators manipulate data data values require storage data transfers move information operators values 
traditional approach allocation scheduled cdfg binding model described places literature 
shown binding model specifies assignments cdfg elements datapath hardware 
operators assigned functional units control steps scheduled 
operators scheduled control step may assigned functional unit 

values assigned registers store values 
value assigned register duration lifetime 
values overlapping lifetimes may assigned register 
research supported nsf mip 

data transfers assigned path connections buses multiplexers data may flow allocated operators functional units allocated values registers specified edges cdfg 
cdfg fu allocation register allocation traditional binding model form data transfer allocation depends connection style 
general interconnection style interconnection structure wires buses multiplexers may 
bus oriented interconnection style restricted interconnection style module register functional unit outputs drive buses connected single level multiplexers module inputs 
point point interconnection style module outputs connected module inputs single level multiplexers 
point point style advantage may derived directly functional unit register allocation 
reason starting point allocation followed postprocessing phase uses general interconnection style 
cost data path allocation usually taken weighted sum number functional units registers interconnection elements multiplexers buses wires implement behavior cdfg 
goal allocation algorithms minimize cost 
minimum number functional units registers fixed scheduling effort allocation involves minimizing interconnection cost 
allocation algorithms heuristics developed attempt minimize cost allocation traditional binding model 
include constructive greedy heuristics iterative approaches simulated annealing simulated evolution rip reallocate exact approaches bipartite graph matching integer programming 
approaches find optimal near optimal allocations binding model cost function 
binding model restricts design decisions available allocation prevents allocation lower cost configurations 
allow techniques commonly human designers storage copies values alu pass values data transfers 
failure consider decisions prevents tools finding high quality designs demanded users high level synthesis tools 
problems addressed previous approaches 
example hal allocator uses concept local storage operators allow multiple copies values reduce interconnect costs 
local copies restricted control step length placed larger value lifetime 
approaches allow functional unit pass throughs considered part interconnect allocation 
opportunities explored functional units assigned 
describes extension traditional binding model called salsa binding model 
key idea salsa approach introduce additional flexibility breaking lifetime value segments control step allow different segments value assigned different registers cost advantage doing 
approach similar allocator considers register assignment value segments independently 
stipulates segments value stored contiguously single register flexibility fully exploited 
salsa binding model supports multiple copies values allows functional unit pass throughs allocated natural way 
results show model find allocations require fewer interconnections supported traditional allocation model 

salsa binding model salsa binding model quite similar traditional cdfg binding model described section key departure addition new type node cdfg called slack node 
slack nodes explicitly represent slack data flow control flow timing constraints implied cdfg edges 
shows cdfg added slack nodes marked 
explicit representation slack scheduling rapidly evaluate operator node may rescheduled violating data timing constraints 
slack nodes data edges prove useful allocation 
salsa cdfg fu allocation register allocation salsa binding model specifically slack nodes thought op operators pass input value unmodified output value 
breaks values may control steps length value segments control step length 
considering value monolithic element assigned register duration lifetime value divided multiple segments may assigned separate registers shown 
segments associated value assigned different registers data transfer created considered allocation 
ability values move lifetime introduces new degree freedom reduce amount interconnection needed allocated datapath 
example moving value different register control step data transfers may reduce demand new interconnections control step data transfers 
slack nodes take advantage pass operations 
pass operation idle functional unit transfer value input output altering value 
allows existing connections combined reducing need additional connections 
exploiting easily accomplished salsa binding model interpreting slack nodes operators perform op function 
slack nodes represent data transfers may assigned functional units perform op function shown second step 
slack nodes representing contiguous value segments stored register need assigned functional units considered part allocation 
pass operations implement data transfers existing connections adding new connection 
example shows partially allocated cdfg datapath value segments assigned different registers register register 
transfer data required 
normal allocation approach assignment requires multiplexer input select output functional unit fu register shown 
fu idle time transfer connections fu fu slack node assigned fu fu pass device shown 
idle fu fu fu fu normal allocation pass allocation pass implementation normal allocation allocation value split copy fu idle fu fu fu value split useful create multiple copies value reduce global demand interconnect allocated design 
example shows value stored register operators bound functional units fu fu 
copy created stored register connection eliminated expense added connection input 
result lower cost implementation number multiplexers reduced 
salsa representation supports value copies providing value splitting transformation creates copy value segment 
repeated applications value splitting transformation allows copy stored multiple control steps 
addition value splitting may applied value segment copies value may point lifetime 
value merging transformation available reverses effects value splitting combining value segments represent value 

exploring allocation alternatives new flexibility introduced salsa binding model exploited iterative approach allocation set moves transformations successively modify complete allocation produce new allocation 
approach similar earlier simulated annealing approaches differs functional unit register allocation considered simultaneously additional moves defined unique salsa representation 
sets moves developed moves alter functional unit fu bindings moves alter register bindings 
table summarizes moves 
move description fu exchange exchange binding fus fu move reassign operator unused fu operand reverse switch fu inputs bind pass assign slack operator data transfer fu unbind pass eliminate binding 
segment exchange exchange binding value segments segment move reassign value segment unused register value exchange exchange bindings selected values 
value move assign segments value unused register value split copy value segment value merge eliminate copy value segment table allocation moves functional unit moves alter assignment operators functional units 
moves similar moves previously simulated annealing 
moves new moves create remove pass bindings 
initially moves alter operator scheduling included set 
experience moves lead better allocations omitted 
register moves alter assignment value segments registers 
similar moves previous approaches value segments means moves local single control step 
moves reassign segments value register 
moves implement value split merge transformations 
combination segment oriented value oriented moves allows exploration tradeoffs contiguous noncontiguous register bindings 

allocation implementation allocation implemented step approach 
simple constructive algorithm create initial allocation 
second iterative improvement phase applies moves described previous section explore design tradeoffs possible salsa representation 
initial allocation generated simple procedure attempts find starting point allocation improvement 
procedure operators assigned functional units control step available basis 
values represent loop inputs outputs assigned registers consistency maintained iterations 
values occur control steps maximum register demand assigned arbitrary registers 
remaining values bound registers way attempts avoid adding interconnections 
segments value initially assigned register contiguous space available single register 
case value split segments fit available registers 
allocation improvement implemented applying move set described section evaluating moves cost function weighted sum functional unit register interconnect costs 
interconnect costs computing assuming point point model quickly computed functional unit register allocation 
important iterative approach costs recalculated move 
allocation improvement multiplexers combined simple merging procedure 
originally thought allocation improvement implemented simulated annealing 
attempts annealing produced poor results seldom converged solution 
iterative improvement scheme developed produced better results application 
approach trials attempted analogous temperature levels annealing 
moves attempted trial 
moves selected randomly picking move type randomly picking cdfg datapath elements required particular move type 
random selection process weighted pick complex moves value move value interchange control execution times 
move selected applied effect cost function calculated 
moves decrease cost function downhill moves accepted retained 
moves increase cost function uphill moves accepted described rejected reversing move application 
fixed number uphill moves accepted trial 
number reached downhill moves accepted 
idea strategy allow random search configuration space possible allocations 
uphill moves trial allow search move different region configuration space 
new neighborhood reached downhill moves search local optimum 
search best allocation far recorded 
iterative improvement terminates improvement successive trials maximum number trials reached 
best allocation search returned 
guarantee iterative improvement converge high quality solution experience shown generally case 
allocation improvement number multiplexers reduced merging compatible multiplexers 
done simple heuristic arbitrary multiplexer selected combined compatible multiplexers possible 
multiplexer selected merged compatible multiplexers 
process continues merging attempted multiplexers 

results salsa binding model allocator implemented existing salsa scheduler 
implementation tested number examples 
table summarizes results experiment allocating elliptic wave filter ewf benchmark wide variety conditions 
assumptions operator delay equivalent adders require control step multipliers require control steps pipelined multipliers latency control step 
allocation cpu times examples ranged cpu minutes sun sparcstation 
due random nature iterative improvement scheme multiple trials necessary find best result increasing actual cpu time required 
experiment schedules generated control steps assuming non pipelined pipelined marked multiplier units control steps assuming non pipelined multipliers 
case schedule fixes minimum number functional units registers 
allocations generated schedules minimum number registers additional registers allowed trade storage vs interconnect 
adder units allocations implement pass operations 
table shows values number equivalent multiplexers resulting allocations 
elliptic wave filter benchmark steps fu fu reg mux mux comparison table results ewf example comparison best number multiplexers reported researchers column 
cases salsa allocator finds allocation fewer multiplexers best result previously reported 
cases result equal best reported results cases salsa allocator required multiplexer best reported case 
advantage salsa allocation approaches particularly dramatic step schedule registers pipelined non pipelined multipliers 
larger example demonstrate effectiveness approach complex designs 
discrete cosine transform dct image coding compression applications 
specific implementation dct drawn shown cdfg form 
cdfg consists addition operators subtraction operators multiply operators provides challenging problem scheduling allocation 
example scheduled allocated hardware assumptions identical ewf example 
ewf example constants multiplication considered contribute cost allocation 
table summarizes schedule allocation results different schedules 
execution times dct example ranged cpu minutes sun sparcstation 
multiple trials necessary find best results 
discrete cosine transform steps fu fu reg mux table results dct example 
described extended allocation model allows new flexibility value segments value copies functional unit pass throughs 
iterative improvement scheme search allocations take advantage flexibility 
results show allocations approach relatively simple point point interconnect model 
solutions approach suggest binding model may useful approaches allocation 
possible number areas 
extensions interconnection allocation investigated improve point point model currently 
second iterative improvement scheme allocation improvement replaced powerful approach takes advantage added flexibility binding model 
extensions binding model considered accurately model actual layout 
authors mcfarland vissers useful discussions regarding allocation van suggesting dct example 
discrete cosine transform cdfg mcfarland parker high level synthesis digital systems proceedings ieee vol 
feb 
paulin high level synthesis digital circuits global scheduling binding algorithms ph thesis carleton university jan 
gajski slicer state synthesizer intelligent silicon compilation proc 
iccad oct 
thomas algorithmic register transfer level synthesis system architect workbench kluwer academic publishers 
ly generalized interconnect model datapath synthesis proceedings th dac june 
architectural synthesis dsp silicon compilers ieee trans 
cad vol 
pp 
april 
parker program datapath synthesis proc 
nd dac july pp 
pau paulin hal multi paradigm approach automatic data path synthesis proceedings rd dac pp 
june 
devadas newton algorithms hardware allocation data path synthesis ieee trans cad vol 
july pp 
grover pipelined non pipelined data path synthesis simulated annealing progress computer aided vlsi design vol 
feb 
interconnect optimisation data path allocation proc 
pp 
march 
ly applying simulated evolution datapath allocation high level synthesis proceedings canadian conf 
vlsi pp 
oct 
tsai hsu data path construction refinement proceedings iccad pp 
november 
huang data path allocation bipartite weighted matching proceedings th dac pp 
june 
global optimization approach architectural synthesis proceedings iccad pp 
nov 
generalized model resource assignment proc 
th international workshop high level synthesis pp 
march 
nestor krishnamoorthy salsa new approach scheduling timing constraints proceedings iccad pp 
nov 
borriello high level synthesis current status directions proceedings th dac pp 
june 
rao yap discrete cosine transform algorithms advantages applications academic press 
dimensional linear picture transformer patent 
