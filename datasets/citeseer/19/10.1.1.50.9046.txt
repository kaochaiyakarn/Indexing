structural recursion query language val breazu tannen peter buneman department computer information science university pennsylvania philadelphia pa usa val peter cis upenn edu naqvi bellcore south st morristown nj usa bellcore com propose programming paradigm tries get close semantic simplicity relational algebra expressive power unrestricted programming languages 
main computational engine structural recursion sets 
programming done nicely typed lambda calculus machiavelli obb 
guiding principle queries implemented important implemented 
relational algebra meaning relation transformer guaranteed total map finite relations finite relations 
naturally restricted class programs written structural recursion precisely expressive power relational algebra 
programming paradigm scales yielding query languages complex object model ab 
example efficient programs transitive closure able write programs move sets back sets long stay quite flexible type system 
uniform paradigm language suggests positive expectations optimization problem 
fact structural recursion yields finer grain programming expect lower level better optimizations feasible 
apart simplicity major selling point relational model availability simple query languages understood properties 
realistic database programming calls flexibility expressiveness relational algebra say offers 
meet needs practical query languages add somewhat ad hoc features certain aggregate operators group fails programmers query languages embedded general purpose ones 
see problems embedded query languages 
problem mismatch data models type systems infamous impedance mismatch problem 
progress overcoming problem see example pascal galileo sch aco fact builds machiavelli obb 
second problem stems universality languages try integrate database manipulation primitives 
suppose smooth integration data model type system consider function inputs output type relations set tuples notation fff theta delta delta delta theta ff ng 
thinking call function relation transformer 
relational algebra meaning relation transformer guaranteed total map finite relations finite relations 
powerful languages just mentioned potential non termination mess semantic picture 
program proving understanding properties programs difficult optimization techniques developed relational algebra safe say optimization techniques relational algebra embedded general purpose programming language non existent usually resorts doing things calling relational expression iteration factor call 
ffi 
appeared proceedings rd international workshop database programming languages greece august 
breazu tannen partially supported onr nsf ccr aro daal prime 
buneman partially supported onr nsf iri uk serc visiting fellowship imperial college london 
back scylla 
relational algebra simple safe semantics fall short 
main practical problem way moving outside flat relations expect relational algebra produce set sets ordered list integer 
fact lot title normalization theory done flat relations 
band aid approach throwing count average group unsatisfactory 
conceptual level relational algebra scale new primitives invented deal complex object model 
main concern design languages complex object model absolute expressiveness bk hs ab 
optimization techniques concerns correctness discussed 
put forward programming paradigm tries get close semantic simplicity relational algebra expressive power unrestricted programming languages 
main computational engine structural recursion sets 
programming done nicely typed lambda calculus machiavelli obb 
guiding principle queries implemented important implemented 
summarize main advantages ffl relational algebra meaning relation transformer guaranteed total map finite relations finite relations 
see bs denotational operational semantics languages reasoning programs 
ffl relational queries natural representation structural recursion 
fact shall see naturally restricted class programs written structural recursion precisely expressive power relational algebra calculus section 
ffl scales yielding query languages complex object model ab ffl example efficient programs transitive closure section 
able write programs move sets back sets long stay quite flexible type system 
ffl uniform paradigm language strong suggestion optimization problem studied language 
correspondence restricted forms structural recursion relational algebra indicates import existing optimization techniques directly language 
fact expect lower level better optimizations feasible 
general suggested lazy evaluation 
ffl scales yielding query languages complex object model ab section 
ffl believe paradigm particularly fit type system data model database manipulations better integrated programming features modules 
concretely programming constructs 
fun fxg combinator style write phi typing phi fffg fi provided fi ff fi fi theta fi fi fun insert combinator style write psi typing psi fffg fi provided fi ff theta fi fi intuitively definitions fact finite subsets set generated repeated unions starting singleton sets add empty set finite repeated insertions elements starting empty set 
fact kinds definitions independent express correspondence extends associated reasoning structural induction shown bs 
fundamental subtlety meaning uniquely defined set clauses order meaning exist require meanings form commutative idempotent monoid range meaning phi respectively range meaning psi meaning satisfies bs slight abuse notation confuses syntax semantics obvious analogy call condition commutativity condition idempotence 
conditions programming sets challenging interesting 
experience verification conditions closely related proving correctness programs question 
example consider program takes set linear order returns strictly ordered list elements set 
write constructs 
construct operation merging strictly ordered lists clearly associative commutative idempotent nil empty list identity merging 
second construct insertion strictly ordered list satisfies equations 
implementations equality tests elements set restricted sets equality types 
shall write examples type decorations tags primitive constructs assume decorations 
decorations reconstructed context 
clarity occasionally specify type expressions 
subtle problem primitives typed polymorphic manner leaving type decorations 
particularly challenging case tuples records see ob 
example rich polymorphic type system relational databases machiavelli obb ideas equally successfully applied language consider 
improve readability occasionally write binary functions infix notation union 
order relational queries simple queries specified disjunction provided exactly free variables conjunction provided common free variables existential quantification relational algebra implemented union cartesian product defined relational algebra set theory 
known disjoint join projection 
union primitive language 
show implement structural recursion abbreviation phi phi ff fflg correctly defined form commutative idempotent monoid 
ff theta delta delta delta theta ff theta fi theta delta delta delta theta fi ff theta delta delta delta theta ff theta fi theta delta delta delta theta fi tuple concatenation ff theta delta delta delta theta ff ff theta delta delta delta theta ff tuple projection 
define map phi ff map ff fi fffg ffig pairwith map rks pairwith ffi theta delta delta delta theta fi ff theta delta delta delta theta ff fff theta delta delta delta theta ff theta fi theta delta delta delta theta fi theta phi pairwith pi map looking query specification vantage point provided language considering naturally take computational view query safety 
example want rule working databases algorithms sets tuples functions regard equality domain specific 
isolated disjoint join require equality domain 
query specifications considered far allow constructions note formulas equivalent take view variable coincidence easily expressed logical languages depending domain nontrivial computationally treated explicitly equality domain 
consider formulas domain specific perform conceptual domain abstraction encapsulating specific formulas domain logic 
care really form logic takes care formulas defining computable predicates domain 
query specification formula associated domain logic free variables limited query specification 
relational algebra corresponds selection language selection implemented filter phi frg filter ff bool fffg fffg oe filter implements implementation domain specific selection formula 
conceive flexible ways limit variables selection formula 
example gamma perfectly safe 
note amounts little additional computation query computation easily expressible language 
negation corresponding relational algebra difference 
implementing requires membership testing equality 
ability specify negation queries domain specific example database algorithms 
emphasize point see specification negation particular case domain specific selection just mentioned 
follows regard membership aggregate operator 
general aggregate operators map relations types related domain 
aggregate operators kind feedback selection allowing relations contribute domain specific logic 
oe member implement member fffg 
ff bool abbreviation phi phi false ff bool correctly defined false form commutative idempotent monoid 
member phi structural recursion relational algebra seen previous section limited structural recursion needed implement operators relational algebra 
empty set union relation variables variables type set tuples common formalisms 
implementation disjoint join projection phi concatenation projection tuples 
selection addition difference phi equality tuples 
show section fact tight correspondence project join algebra positive relational algebra add selection full relational algebra respectively semantically equivalent certain sublanguages language organized operations mentioned 
order perform translation uniformly augment relational algebra relation tuple variables 
syntax pi theta oe ranges relation variables ranges tuple variables 
project join algebra sublanguage generated selection difference positive algebra sublanguage generated difference 
leads interesting issue relationship safety conditions hand parametric polymorphic data abstraction hand 
give sublanguage typed calculus union corresponds project join algebra 
syntax tuple expressions ranges tuple variables expressions sublanguage ranges relation variables phi assumed typed conventions stated 
give translation associates expression sublanguage expression project join algebra enriched singleton sets tuple variables 
ftg ftg theta pi phi ftg ftg means substitute occurences subexpression ftg readily checked translation defined expressions free tuple variables translated expressions free tuple variables free relation variables exactly preserved translation 
obvious property translation free tuple variables tuple variables result translating combinator respect tuple variables expression normally regarded relational algebra 
show general translation preserves meaning describe meaning expressions free relation tuple variables take meanings functions valuations environments variables values 
thinking semantic domain domain functions relation variables need worry variables get bound restricted languages 
tuple variables get bound usual prove expressions free tuple variables 
lemma tuple variable environment ae expression ae ae proof sketch 
induction structure non trivial step involves translation phi follows equalities 
phi ae ae ae shown induction second expressions project join algebra enriched singleton sets tuple variables ftg ae ae ae gs shown induction 
ae environment maps tuple variables ae 
section shown translate expressions join project algebra free tuple variables expressions free tuple variables 
translation easily shown preserve meaning 
putting translations obtain theorem expressions free tuple variables translated semantically equivalent expressions project join algebra conversely 
note translations general inverses 
note translations dependent relations flat tuple expressions polymorphic types components 
add conditionals language expressions show corresponds adding selection project join algebra 
define larger sublanguage phi ranges predicate expressions need stipulate type bool free variables tuple variables predicate negation equivalent sufficient concern expressions form translate expressions expressions positive relational algebra project join algebra extended selection enriched singleton sets tuple variables 
translation addition translation expressions form suppose free tuple variables define pi oe theta ft theta delta delta delta theta ft defined follows 
type fff theta delta delta delta theta ff tuple variable type ff theta delta delta delta theta ff index vector kt delta delta delta kt ik index vector kt delta delta delta kt result translation oe required algebra defined combinator 
means free variables interfere substitution occurs translation phi 
position existing machinery establish equivalence language relational algebra extended expressions form oe 
theorem expressions free tuple variables translated semantically equivalent expressions positive relational algebra conversely 
note provided predicates contain equality intersection defined phi phi ft point discussion equivalence languages need assume equality underlying domain 
selection predicates far limited boolean expressions built predicates tuples 
consider happens allow predicates sets add language predicates recursor phi equivalence expression obvious semantics empty phi ftg see recursor buys emptiness test may consider extending predicates language expressions form empty language non monotonic 
note type system language dictates place predicate empty occur conditional 
translation simplest conditional containing emptiness test empty pi theta vector arity indices 
immediate translation preserves meaning 
complete translation inductively structure predicate conditional example obtain main final result section theorem expressions augmented predicates free tuple variables translated semantically equivalent expressions relational algebra conversely 
complex objects transitive closure grouping going details complex object model match language type system bjo obb 
section show language expressive abiteboul beeri algebra calculus complex objects ab 
shown express cartesian product difference section 
abiteboul beeri algebra operation called replace combines relational algebra selection projection operations allowing algebraic operations applied recursively subobjects 
implement simply replace map filter ability apply algebraic operations recursively sub objects provided automatically type system turn contain program constructs 
abiteboul beeri algebra features truly higher order operations powerset self explanatory collapse maps set sets union 
implement follows 
collapse phi collapse fffg powerset phi map powerset fffg see commutative idempotent monoid requirement definition powerset note semantically map abiteboul beeri show quite small collection operations equivalent powerful higherorder logical calculus nested tuples sets 
interestingly show transitive closure shown aho ullman au implemented relational algebra fact specified query calculus transitive relation containing subsets cartesian squaring set elements occur relation 
language implement abiteboul beeri algebra implement calculus transitive closure 
unfortunately clear resulting algorithm severely inefficient 
show language consider express better algorithm transitive closure structural recursion empty insert presentation sets need relation composition fact expressible relational algebra ffi pi oe theta consider ff theta ff theta fff theta ffg fff theta ffg defined frg frg ffi ffi frg ffi frg ffi fun tc tc insert tc verify correctly defined semantics satisfies commutativity idempotence conditions see section right set values meaning tc fact transitive closure operator 
follows slight abuse notation writing semantic proofs semantic facts programming syntax 
fact proofs lemma formalized syntax logics described bs 
need notation semantic transitive closure denoted gamma 
lemma 
transitive 
transitive transitive 

transitive 

transitive frg 
frg key observation proving part simple fact fsg ffi ffi fsg fsg part implies tc correctly defined working consisting transitive relations shown part 
part follows immediately part part part part lemma essential step showing structural induction empty insert presentation sets tc algorithm resembles warshall algorithm doing edge insertion node insertion 
obtain warshall algorithm suppose set nodes fffg set edges fff theta ffg 
fun insert ffi fhv ffi show correctly defined set pairs nodes connected paths intermediate nodes belong follows gives desired transitive closure 
warshall algorithm runs time edge insertion algorithm runs en time number nodes number edges case efficient algorithms transitive closure compare complex object algebra query mentioned 
spirit warshall algorithm represent floyd shortest paths algorithm abiteboul beeri show calculus algebra simulate grouping operation akin obtaining set valued function relation 
complex object fff theta ff domain projection fff pi grouping returns complex object type fff theta fff gg meaning grouping fy hz yi aggregation groups useful feature especially conjunction aggregate operators 
somewhat query languages set oriented relational data model deals flat relations 
applications needs construct set elements satisfying certain properties parts supplied supplier subsequently manipulated computation find total cost parts composite part 
plethora explosion diagrams industrial catalog points need operation 
practical query languages introduce grouping operation operation plays central role ldl nt complex object model 
case transitive closure give direct implementation grouping avoids powerset 
define fun theta insert hx yi map gd stands hz hz insert hz take grouping hard see definition correct commutativity idempotence conditions satisfied range consists graphs functions gamma 
fff 
connection grouping operator empty insert presentation sets gives interesting expressions negation difference union 
pump partition hom fad ldl nt machiavelli obb construct related structural recursion sets 
fad machiavelli come closest operators pump respectively hom equivalent fun fxg know may commutative idempotent relations transitive ones checking fact better left machine 
restriction transitive relations sufficient purposes 
required idempotent course form commutative monoid 
ldl defines predicate partition imposes disjointness example consider rules computing sum set integers sum gamma sum fng gamma sum gamma partition sum sum style programming useful defining aggregates sum count average pump hom ldl constructs partition natural denotational semantics 
problem operational semantics quite contrived 
case pump hom evaluator evaluate sets eagerly time consuming dynamic tests equality values 
course rules working sets functions example 
sets say integers mapping function disjoint union may yield non disjoint fed hom yield run time error 
obtain statically assurance program goes simple programs shown correct sense 
operational semantics partition possible partitions generated partition 
express functions problematic constructs staying framework described 
way doing replace definition fun insert cleaner method convert sets bags structural recursion bags 
see bs recursion constructs 
suggested fact programs plus dropping disjointness partition conditions just fine computing aggregate operators bags 
sufficient program fundamental function coerces set bag 
structural recursion need appropriate commutative idempotent monoid structure bags 
max operation implementing requires elements underlying type equality 
note interesting features structural recursion sets advocated idempotent operations ability program flexibly objects lack equality relations algorithms quite restricted languages mentioned 
research expect linguistic techniques proposed applicable dealing incomplete objects ink data model captures ideas incomplete specifications 
particular interested studying semantic properties objects sets possible worlds 
transitive closure algorithms section underscore ability structural recursion represent efficient interesting algorithms 
intend investigate representations 
addition transitive closure generalizing idea abiteboul beeri show complex object calculus simulate stratified recursive queries 
conjecture calculus able simulate structural recursion calculus language equivalent terms absolute expressiveness 
main points structural recursion may allow implementation better algorithms functionality 
particular intend investigate ways transforming recursive queries efficient programs structural recursion 
demonstrates structural recursion yields finer grain programming relational complex object algebras 
allow importing classical query optimization techniques principle optimizations 
searching optimizations important topic research 
optimizations apparently general form definition far addition separate occurrences right hand side second clause 
difference similar iteration primitive recursion defining arithmetic functions 
kleene technique representing predecessor function lambda calculus uses pairing applied express flexible form definition terms gave originally 
semantic equalities filter phi phi filter phi filter phi example identities perform classic optimization 
twice oe theta filter phi phi phi phi filter suppose test components rks example ff theta delta delta delta theta ff fi theta delta delta delta theta fi expression equivalent phi phi get phi phi filter theta oe cheaper compute oe theta example replace phi map equivalent map phi identity may yield optimizations phi map phi clearly needed especially investigating general constructs phi different vein intend investigate optimizations result set expressions 
ab abiteboul beeri 
power languages manipulation 
technical report inria 
aco albano 
cardelli orsini galileo strongly typed interactive conceptual language 
technical report bell laboratories bell telephone laboratories internal technical document services murray hill nj usa 
au aho ullman universality data retrieval languages proceedings popl 
bancilhon briggs khoshafian valduriez 
fad powerful simple database language proc 
intl 
conf 
large data bases pages 
bjo buneman jung ohori 
powerdomains generalize relational databases 
theoretical computer science appear available technical report department computer information science university pennsylvania 
bk bancilhon khoshafian 
calculus complex objects 
proc 
acm symposium principles database systems 
beeri naqvi shmueli tsur 
set constructors logic database language 
proceedings pods full appear journal logic programming 
bs breazu tannen subrahmanyam 
logical computational aspects programming lists bags sets proceedings icalp appear 
hs hull su 
expressive power database queries intermediate types 
proceedings pods 
ink imielinski naqvi incomplete objects data model design planning applications proceedings sigmod appear 
nt naqvi tsur 
logical language data knowledge bases 
computer science press 
ob ohori buneman type inference database programming language proc 
acm conference lisp functional programming pages snowbird utah july 
obb ohori buneman breazu tannen 
database programming machiavelli polymorphic language static type inference 
proceedings acm sigmod conference pages may june 
sch schmidt high level language constructs data type relation 
acm transactions database systems 
