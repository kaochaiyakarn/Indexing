automating synthesis completion fran bellegarde pacific software research center oregon graduate institute science technology po box portland oregon usa 
cse ogi edu april completion procedure simple static analyses allow manipulation order functional programs 
shows apply techniques order fully program transformation strategies deforestation eliminating useless intermediate data structures tupling eliminating parallel traversals identical data structures 
techniques enable transform larger class programs current deforestation algorithms 
programs translated constructor rewrite system 
completion procedure synthesis transformed rewrite system 
static analyses rewrite system needed transformation strategy 
permit automatically discover specifications functions need synthesized completion order accommodate strategy control production critical pairs completion process strategy determine orient critical pairs rewrite rules losing termination rewrite system guarantee termination process ensuring termination completion ensuring transformation require infinitely completions guarantee effectiveness transformation 
author supported part contract air force material command 
id sas tex bellegar exp bellegar deforestation functional programming said functional programs constructed functions pieces 
data structures lists trees glue hold 
compositional style programming attractive comes expense efficiency :10.1.1.100.8004
compositions produce intermediate data structures 
way circumvent problem perform fusion deforestation programs advocated burge wadler :10.1.1.30.9032
approaches eliminating useless intermediate data structures proposed 
algorithm proposed wadler performs automatic deforestation restricted class terms called treeless terms :10.1.1.30.9032
chin remarkable fusion applies wider class treeless terms higher order programs general 
sheard fegaras utilizes laws combinator compositions promotion theorems programs written combinators :10.1.1.39.2756
technique applicable class potentially normalizable terms built special set higher order combinators 
automatic way implement deforestation inside haskell compiler shown 
widened deforestation algorithm proposed 
deforestation algorithms recognize expression contains functions consume data structure 
functions create parallel traversal data structure 
functions put tuple single function traverses data structure 
way transforming programs tupling lemma 
general purpose program transformation systems unfold fold method proposed burstall darlington 
deforestation tupling particular instances strategy 
focus system folding unfolding seen rewritings 
pointed dershowitz unfold fold strategy controlled completion procedure 
idea transformation system completion procedures 
versions highly interactive requiring intervention expert user 
transformation system automated effectively tool transformational approach software design 
simple static analyses order recursive equations allows automate deforestation tupling 
consider terminating rewrite systems 
shown completion procedure synthesizing constructor equational definition function synthesis rule specifies defined terms functions 
need deforestation defined composition functions generates intermediate data structures tupling defined tuple pair functions traverse data structure 
rule called eureka fold unfold methodology 
id sas tex bellegar exp bellegar synthesis fully synthesis rules discovered automatically static analysis system equations hand 
completion procedure far general 
purpose generate critical pairs equational consequences set rules coming overlapping left hand sides existing rules 
dershowitz noticed possible completion generates critical pairs constitute constructor definition function generation controlled suitable ordering explosive loop generating infinitely critical pairs 
static analysis system equations allows restrict overlaps left hand sides rules completion procedure computes exactly critical pairs needed synthesis 
automating process production critical pairs needs limited orientation critical pairs rewrite rules automated 
analysis critical pair allows know synthesis achieved critical pairs oriented rule constructor synthesized definition process preserve termination rewrite system 
discovery synthesis rule demands synthesis accomplished completion procedure guaranteed fail terminate 
guarantee process perform infinitely 
process choose strategy ensuring effectiveness transformation resulting program way efficient program 
outline organized follows section introduces basic notations term rewriting systems analyses presents naive examples illustrating completion procedure performs synthesis deforestation tupling 
section presents analysis necessary synthesis rules discovery case deforestation tupling strategies 
section presents analysis necessary control completion process 
section discusses termination effectiveness limitations possible extension issues 
section relates techniques followed concluding remarks section 
application completion unfold fold strategies basic notations set function symbols set variables set terms symbols variables set variables occurring position occurrence term represented finite sequence positive integers describing path root root subterm position denoted tj 
position root term ffl 
set positions function symbols term subsumption ordering instance say encompasses subterm instance term said linear variable occurs id sas tex bellegar exp bellegar rewrite rule ordered pair terms written 
rule left linear linear right linear linear 
rewrite system set rewrite rules 
rewriting relation denoted 
rewrite system terminating infinite sequence terms normal form term term rewrite system overlapping exists overlap left hand sides rules exists position lj unifiable general unifier oe 
critical pair identity oe 
oe oe 
denotes replacement subterm position orthogonal system left linear non overlapping rewrite system 
system constructor proper subterms left hand sides free constructor symbols variables 
roots left hand sides defined symbols 
denote respectively set constructors set defined symbols 
constructor term member 
set rules constructor rewrite system root rewrite system confluent relation verifies diamond property 
confluence ensures unicity normal form termination ensures existence 
non overlapping terminating rewrite system confluent 
completion procedure aims discovering critical pairs terminating rewrite system check sides pair rewrite term 
adds critical pairs orienting way preserve termination property 
procedure fail terminates returns confluent terminating system equivalent rule irreducible 
completion procedure unfold fold method paragraph illustrate basic examples completion procedure interactively controls fold unfold method 
unfold fold method consists rules definition instantiation unfolding folding abstraction law allow new identities introduced equational consequences existing identities 
dershowitz shown combination instantiation folding enabled critical pair generation 
unfolding law simplifications rewriting 
definition synthesis rule user abstraction tupling tactic 
deforestation example consider naive example single deforestation term length length length length xs length xs xs xs list traversed append count length result 
synthesis rule length introduced 
overlaps rules yielding constructor system equations similar set definition equations pattern matching parameters functional programming 
id sas tex bellegar exp bellegar critical pairs length length xs xs pair simplifies second rule length length xs xs 
defined length xs length xs xs traversal compute result 
simple example law necessary 
suppose synthesis rule length lat rule flat lat xs lat xs rule law length length length required simplify left hand side pair length lat xs xs derivation length lat xs length length lat xs length xs yielding rule xs length xs needs laws method obstacle full automatization 
see avoid input laws completion synthesize exactly needed achieve synthesis tupling tactic example consider naive example ave sum length sum sum sum xs sum xs length length length xs length xs list traversed twice parallel compute average 
case introduce rules synthesis sum fst length snd pair fst snd comp fst pair snd pair rewriting left hand sides rules get ave fst snd computed single traversal sharing common computation 
synthesis rules overlap respectively rules sum length yielding pairs fst sum xs fst xs snd length xs snd xs turned rules right left fst fst xs sum xs snd snd xs length xs id sas tex bellegar exp bellegar rules overlap third synthesis rule yielding rules pair xs pair fst xs snd xs rules reduce left hand sides rules 
comp rules reduce left hand sides identical right hand sides 
rules deleted 
worthwhile notice tactic applied transform function computes th fibonacci number time proportional function computes number steps 
example showing completion procedure produces useless explosion critical pairs controlling unfold fold transformation 
way automating tupling deforestation tactics generates exactly needed critical pairs 
discovers automatically synthesis rules 
automatic synthesis rules discovery order functional program constructor orthogonal terminating rewriting system 
purpose analysis discover synthesis rules eliminate useless data structures deforestation call fusion rules eliminate multiple traversal removal tupling call tupling rules 
fusion rules paragraph show analyze term order build fusion rule synthesis rule deforestation 
fusion rule reduce term contains intermediate data structures rule form delta delta delta fresh symbol 
fx delta delta delta 
obviously subsume subterm fusion rule rewrites carefully chosen 
consider example term defined constructor rules xs xs subterm produces intermediary list consumed subterm produces list argument list traversed 
vocabulary invented chin symbol consumer producer term contrary chin consider producer 
say consumer inductive position 
useless data structure produced consumed 
rule reduces contain useless data structure produced 
inductive positions symbol see defined constructor rules indicate positions consumer 
definition inductive positions symbol consumes data structure inductive positions exists rule lj constructor term variable 
id sas tex bellegar exp bellegar inductive positions defined symbols term extract recursively fusion term see term contains symbols produces useless data structures symbols located spine positions see 
definition spine positions position term spine position ffl ffl ffl spine position root tj inductive position inductive positions fresh symbol known analyzing fusion rule see 
variable occurs fusion term spine positions position list delta delta delta right hand side indicates inductive position reason overlaps constructor rules producers substitute constructor terms positions 
perform deforestation constructor system search fusion terms right hand sides definition rules build fusion rule see synthesize constructor system fresh symbol definition fusion rule tc tc delta delta delta tc rule constructor terminating rewrite system fusion term extracted exists position 
rj instance 
top symbol defined symbol functional symbol defined symbol constructor functional symbol occurs located spine position deforestation 
linear linearity 
occurs skip recursive calls 
exists spine position length greater 
contained deforestation term extracted maximality fusion term exists rule delta delta delta fresh symbol delta delta delta variables fusion rule 
linearity ensures preservation termination union rewrite system fusion rule proved 
see skip recursive calls required ensuring termination deforestation process 
example fusion term recursive rule subs xs subs xs map cons subs xs id sas tex bellegar exp bellegar constructors xs ys xs ys constructors xs xs function definitions inductive positions analysis ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi 
xs spine positions fffl ii xxxxx fusion rule id sas tex bellegar exp bellegar map cons inductive position 
method attempts fusion intermediate data structures produced defined symbols produced recursive calls 
performs kind fusion producer constructor example zip xs zip inductive positions fusion term 
tupling rules functional symbols traverse data structure construct tupling rules 
example sum length traverse list sum length fib fib traverse natural number fib fib 
downto xs tails xs traverse list downto xs tails xs 
subterms delta delta delta delta delta delta term share set variables located inductive positions show naive situations 
finds tupling pair subterms right hand side process introduces automatically different rewrite rules tupling rules delta delta delta fst delta delta delta delta delta delta snd delta delta delta fx delta delta delta fresh symbol 
tupling rules rewrite creating common subterms delta delta delta shared level translation 
example replacement fib fib fst snd 
completion synthesizes constructor definition fst composed fst constructor definition snd composed snd example result synthesis fst fst snd snd snd fst snd synthesis possible overlaps elements tupling pair constructor rewrite systems top symbols happen symbols inductive positions constructors variables variable maximal inductive position see 
process introduces systematically pair rule pair fst snd rules fst pair snd pair allows completion achieve synthesis example result pair pair snd fst snd completion cancels useless rules fst snd id sas tex bellegar exp bellegar definition tupling pair rule constructor rewrite system right hand side contains tupling pair rj delta delta delta rj delta delta delta defined symbols positions 
rj rj share variables inductive positions 
rj rj 
rj rj constructors variables inductive positions variable share maximal inductive position 
rj rj different 
rj rj linear linearity 
subterms identical shared local declaration translation resulting rewrite system ml program 
example pair right hand side rule xs xs xs considered tupling 
translated xs val xs linearity separability ensures tupling rules preserves termination rewrite system see 
note fst snd pair reserved symbols 
automatic discovery synthesis rules analyses 
analyses automatization synthesis rules seen far form delta delta delta fusion rule form fst delta delta delta snd delta delta delta tupling rules 
rules rewrite right hand sides system get system fold doing modulo synthesis constructor rules perform desired fusion desired tupling 
proved fold terminating terminating 
critical pair analysis overlaps synthesis rule rule fold happen top symbol occurs producer fusion term left hand side fusion rule top symbol element tupling pair left hand side tupling rule 
overlap produces critical pair substitutes constructor terms variables located id sas tex bellegar exp bellegar ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi xxxxx constructor inductive positions omega omega constructor tupling pair ffifl fflfi omega omega constructor circled spine position tupling pair xxx gamma gamma constructor tupling triple id sas tex bellegar exp bellegar symbol inductive positions step synthesis constructor rule critical pair forms tc tc delta delta delta tc fst tc tc delta delta delta tc snd tc tc delta delta delta tc tc constructor term 
analyze critical pairs 
example critical pair inductive positions said unfilled variable position 
position filled overlap critical pair rule 
case say critical pair 
hand want process overlap rule fills third position 
constrained critical pair verifies variables located positions critical pair generated completion verify property rejected process 
constrained critical pair consider subterm tc inductive position tc variable say inductive position unfilled 
say position filled 
constrained critical pair unfilled positions said unfilled 
exists overlap rule fold fill position example say critical pair say covered 
examples illustrate possible kinds critical pairs 
process forces completion critical pairs rewrite rules destroy termination property rewrite rule ae tc tc delta delta delta tc 
rejection orientation critical pairs automatic 
definition exist overlap done covered critical pair 
able analyze derive rule pair 
analysis covered critical pairs consider covered critical pairs normal form 
want analyze critical pairs order decide synthesis successful 
consider case tupling strategy delta delta delta delta delta delta tupling pair 
criterion success simple occur normalized covered critical pairs 
example tupling pair lat covered critical pair pair xs snd xs xs satisfy criterion 
share variable xs inductive positions 
criterion success guarantees definition show parallel traversal guarantees transformation effective 
consider case fusion consider fusion term consumer consume constructor symbols produced producer 
defined constructor rules 
producer produce constructor defined symbols primitive symbols top symbols consumed 
stay ordered unfailing type completion keep critical pairs pairs 
qualify synthesis process controlled analysis keeps critical pairs pairs partial analysis rejects critical pairs completion procedure 
id sas tex bellegar exp bellegar xs 
xs xs 
xs fusion rule zip zip xs overlapping done unfilled position unfilled uncovered critical pair fusion rule zip ys filled positions zip xs ys xs ys filled covered critical pair fusion rule zip overlapping done unfilled unfilled covered critical pair diverse kinds critical pairs id sas tex bellegar exp bellegar obstructing fusion 
criterion successful fusion fusion term embedded modulo renaming variables covered normalized critical pair 
intuitively term embedded term get removing nodes example fusion term length lat embedded covered critical pair length lat xs xs embedding exists consumer length unable consume symbol produced lat see criterion successful fusion guarantees fusion done 
successful covered critical pairs oriented rules tupling strategy discovery unsuccessful covered critical pair results automatically undoing completion automatically rejecting tupling pair search 
fusion strategy completion turn unsuccessful covered critical pair successful 
secondary fusions illustrate process example see 
process introduces secondary fusion rule length length 
indicates argument subsumes lat xs consumed length 
call length subsumption term unsuccessful covered critical pair 
secondary fusion rule forces consumer length consume produced lat 
rule unsuccessful covered critical pair reduced successful criterion success covered critical pair lat xs xs xs example useless costly occurrence lat xs disappear process 
discuss issue section 
synthesizing rules obtained completion xs length length constructor rule presence length argument 
argument subsumed variable 
result generalization constructor rule xs analyze rule looking useless arguments 
analysis shows second argument useless 
process automatically introduces rewrite rule interreduction synthesis completed shown 
cases useless arguments remove see section 
example suppose rewrite system contains rewrite rule law length length length normalized covered critical pair length xs xs successful 
id sas tex bellegar exp bellegar succeeds fails spine position length flat xs xs length rev xs xs spine position subsumption criterion unfortunately subsumption fail turn covered secondary critical pair constructor rule 
consider example fusion term length rev unsuccessful covered critical pair length rev xs xs 
secondary fusion rule length length located spine position 
overlaps rules substitutes subsumption term length gets modified 
subsumption give constructor rule 
example covered critical pairs length xs xs length xs subsumption criterion unsuccessful covered critical pair transformed secondary fusion producer occur spine position see 
criterion guarantees subsumption term secondary fusion rule preserved critical pairs ensuring subsumption results constructor rule 
criterion successful argument removal needs developed 
example second argument removable definition second third arguments removable definition xs xs xs occurs outside recursive calls 
argument removal criterion variable located position lefthand side rules indicates useless position occur right hand sides occurs position recursive calls 
id sas tex bellegar exp bellegar useless pq ae ae au ae ae length length xs length xs flat xs flat length flat flat xs length flat xs xs embedded flat xs xs xs length length length length xs length length xs xs xs final system synthesis secondary synthesis id sas tex bellegar exp bellegar diverse issues termination different kind termination issues 
proved process preserves termination rewrite system 
termination completion performs synthesis guaranteed finite number overlaps covers inductive positions fresh symbol 
guarantee process generate infinitely fusion tupling rules 
consider example rules xs xs xs looking fusion term process skips recursive calls see section introduce fusion rule 
suppose synthesis return xs 
yield second fusion rule resulting xs 
generate infinitely 
unfortunately termination ensured skipping recursive calls mutually recursive calls 
define equivalence defined symbols calls calls reinforce criterion successful tupling symbols equivalent top symbols tupling pair occur covered critical pair 
reinforce criterion successful fusion fusion term call embedded modulo renaming variables covered critical pair 
call embedding embedding relation induced 
example embedded call embedded covered critical pair declared successful unsuccessful stronger criterion 
secondary fusion rule built process described section replacing equality symbols 
criteria guarantee termination process 
sketch proof fusions secondary rules done 
effectiveness question raise effectiveness process 
fusion tupling remove intermediate data structures parallel traversals loss efficiency 
answer question positive tupling tupling pair occurring replaced fst delta delta delta snd delta delta delta fx delta delta delta 
local introduced share common sub expression delta delta delta suggested section tupling effective level transformation 
condition definition tupling pair see section criterion success covered critical pairs see section guarantee effectiveness removal 
unfortunately answer question negative fusion consumer nonlinear inductive position 
consider example function tails tails xs xs tails xs id sas tex bellegar exp bellegar fusion rule tails 
completion returns tails xs xs xs appends tail results obvious loss efficiency 
chosen skip fusions 
noticed inefficiency disappears tupling 
example processing tupling pair xs xs results tails xs fst xs snd xs pair tails xs pair fst xs fst xs snd xs translation share common sub expression 
consumer nonlinear inductive position ineffectiveness fusion corrected tupling 
phenomenon obvious secondary fusion rule 
example subterms lat xs xs lat xs xs xs 
tupling apply second argument removed 
saw earlier section choose systematically add possibly arguments creating systematically inefficiency 
inefficiency elimination useless argument shown fusion length lat tupling argument removable 
choose systematically perform fusions reasons 
tupling corrects ineffectiveness fusions shown 
fusions subterm delta delta delta meet condition tupling elements see section 
example inductive position term defined symbol constructor put tupling pair occurs maximal inductive position transformed fusion second element tupling pair 
recall fuse recursive calls 
tupling remove intermediate data structures provided recursive calls fib example 
possible extensions section consider limits automatic process deforestation parallel traversal removal described 
indicate possible ways overcome limitations 
id sas tex bellegar exp bellegar consider fusion process described performs fusion involve recursive call producer consumer see section satisfies strong subsumption criterion see subsection 
presentation function overcome syntactic limitations 
example fuse recursive calls known tactic introducing accumulative variables recursive call occurs top right hand side 
tactic called recursion removal 
tactic rev rev xs rev xs transformed rev xs xs intermediate data structure created recursive call rev disappears new presentation 
tactic requires know associative right identity 
transformation allows perform fusions rejected subsumption criterion shown example section fusion length rev rejected rev occurs inductive position length rev xs xs 
suppose point process modify presentation rev accumulator tactic fusion length rev possible producer rev top ready consumed time 
note transformation laws process difficulty mixing laws rewrite system possible providing preserves termination rewrite system 
consider tupling process described remove parallel traversals separability requirement impose tupling pair 
easily overcome 
example suppose inductive position subterms xs xs term set variables considered tupling pair traverse data structure 
processing pair get tupling rule xs xs rewrite rule 
consider pair left element overlapped rewriting 
case subterm xs replaced xs direct replacement rewriting 
related number different proposals program transformations derived unfold fold method 
consider works deforestation order functional programs 
ancestor wadler deforestation algorithm :10.1.1.30.9032
fusion terms composed treeless function symbols accepted algorithm 
terminology defined symbol treeless right hand side rules linear built solely constructors calls defined functions variables arguments 
example zip treeless rev lat tails 
easy see reasons restrictions id sas tex bellegar exp bellegar right hand side linear tails seen fusion risks inefficient 
limitation tupling recursive call right hand side term argument able consume producer position case process yields embedding fusion term creates secondary fusion call function right hand side term argument contains recursive call lat rev create obstruction producer 
process get embedding fusion term creates secondary fusion 
wadler deforestation algorithm considers composed terms reject occurring position create intermediate data structure 
consider case tactic program manipulation point view deforestation composition removal 
complementary tactic completion kind analyses 
chin extended wadler refining analysis 
annotates argument position defined symbol safe variables argument tc occurs recursive call variable constant 
function consume safe positions 
producer safe recursive calls occur safe position consumer 
tails unsafe consumer safe producer 
functions lat rev unsafe producers safe consumers 
chin extended deforestation algorithm accepts fusions length tails lat rev safe 
rejects fusions tails length lat length rev unsafe 
wadler rejects 
annotations permit extended deforestation algorithm track effective fusions require laws secondary fusions 
article compares diverse transformation techniques deforestation supercompilation partial evaluation generalized partial computation respect amount information propagation enable 
proposes widened deforestation algorithm enables information propagation chin extended deforestation algorithm 
superiority respect algorithms deforestation combine deforestation tupling perform secondary fusions 
extends class deforestation 
analyses propose allow completion effective automatic way combining transformation tactics deforestation tupling order functional programs set pattern matching definition rules translated constructor orthogonal rewrite system 
rewrite techniques apply system terminating 
surprised discover combining deforestation tupling fruitful 
superiority rewrite system completion synthesis manipulate equations constructor 
words limited pattern matching presentation rules 
permits implement tupling non constructor rules call tupling rules 
presently fully automatic process implemented id sas tex bellegar exp bellegar permits generate call secondary fusion rules 
purely automatic system describe performs fusions processed adding laws 
user introduce laws desires 
laws facilitate fusions process 
input laws secondary fusions tupling automatic process performs complete deforestation program chin extended deforestation algorithm 
advantage method possible add incrementally strategies transformation 
easy experiment new strategy try interaction mixing user directed version completion 
technically restricted order terminating rewrite systems 
presently higher order removal transformation performed partial evaluation preprocessor system 
combine partial evaluator system 
partial evaluation fly transforms set higher order laws order laws facilitate transformation 
wish olivier danvy encouragement comments laura mckinney help proof reading 
bellegarde 
program transformation rewriting 
proc 
th int 
conf 
rewriting techniques applications volume lecture notes computer science pages springer verlag 
bellegarde 
transformation system completion 
technical report oregon graduate institute 
bellegarde 
transformation system combining partial evaluation term rewriting proc 
hoa international workshop higher order algebra logic term rewriting appear volume lecture notes computer science 
amsterdam sept 
bellegarde 
automatic transformation rewriting techniques 
technical report gamma oregon graduate institute 
burge recursive programming techniques wesley 
burstall darlington 
transformation system developing recursive programs 
association computing machinery 
chin 
safe fusion functional expressions ii improvements 
functional programming 
consel danvy 
tutorial note partial evaluation 
conf 
record twentieth annual acm symposium principle programming languages pages 
acm 
id sas tex bellegar exp bellegar fokkinga 
tupling 

dershowitz 
computing rewrite systems information control 
dershowitz 
completion applications 
resolution equations algebraic structures academic press 
gill launchbury peyton jones 
short cut deforestation 
proc 
th conf 
functional programming languages computer architecture copenhagen pages june 
reddy 
transformational derivation programs focus system 
symp 
practical software development environments pages acm december 
hughes :10.1.1.100.8004
functional programming matters 
computer journal 
reddy 
rewriting techniques program synthesis 
proc 
rd conf 
rewriting techniques applications volume lecture notes computer science pages springer verlag 
sheard fegaras :10.1.1.39.2756
fold seasons 
th conf 
functional programming languages computer architecture pages 
rensen gluck jones 
unifying deforestation supercompilation partial evaluation generalized partial computation 
proc 
symposium programming lecture notes computer science 
springer verlag april 
wadler 
better laziness ii composing functions 
workshop program data objects volume lecture notes computer science pages 
springer verlag copenhagen 
wadler deforestation transforming programs eliminate trees :10.1.1.30.9032
proc 
european symposium programming volume lecture notes computer science pages 
springer verlag 
