language prototyping modular monadic semantics jose juan manuel ez department computer science university calvo cp spain mail lsi es modular monadic semantics allows modular development interpreters semantic specifications means monad transformers 
show structure semantic descriptions folds monadic folds functors express shape programming language 
language extended combining functors changing original definitions 
approach facilitate implementation language prototypes reusable components 
research partially supported project tic integral ii plan regional de del de traditional denotational semantics maps terms values monadic semantics maps terms computations 
computation modelled specific monads 
general possible compose monads obtain new monad possible transform monad new monad monad transformers 
modular monadic semantics monad transformers allows development modular specifications programming languages 
side constructive algorithmics provided theoretical basis generic programming favoured development generic functions parameterised data types 
fold functions application modular monadic semantics results modular interpreters 
monadic folds generalise folds great number practical applications 
folds monadic folds modular monadic semantics improves abstraction level modularity allowing development language prototyping systems 
running example semantic specification simple arithmetic language extend handle boolean expressions modular way 
haskell syntax assume system accepts multi parameter type classes overlapping instances 
section presents extensible union types allow semantic domain extensibility 
section shows represent syntax fixed point functor compose independent components 
sections describe folds monadic folds modular monadic semantics section presents build parser independent parsers 
extending semantic domains liang introduces subtyping mechanism allows addition new types union type 
idea define multi parameter type class class subtype sub sup inj sub sup injection prj sup sub projection declare elements union type subtypes instance subtype inj inl prj id error prj type error instance subtype subtype inj inr inj prj error prj type error prj order allow extensions semantic specification declare fewest restrictions possible 
example want define function increments argument project value increment inject result definition incr subtype integer incr inj resolve overloading subtype integer integer prj way extend semantic domain changing original function 
modular syntax syntax programming language defined fixed point functor captures recursive shape language 
different functors express different features language 
possible combine functors obtain new functor allows language extensibility 
furthermore functors facilitates modular semantic specifications applying folds monadic folds algebras defined 
haskell fixed point fix functor defined newtype fix fix example non recursive functor represents recursive shape simple language arithmetic expressions data cons int add dvd instance functor map cons cons map add add map dvd dvd syntax language type arith fix possible extend language include boolean expressions defining new functor data bool instance functor map map combining functors type expr fix defined data uns instance functor functor functor map left map right map uns initial algebra fold algebra functor function type specific type introduce type synonym type algebra example tag function algebra functor function special algebras sense initial algebra category algebras 
means algebra exists unique function fold defined fold functor algebra fix fold map fold modular monadic semantics fold modular monadic semantics represents monadic approach structured denotational semantics 
composed parts semantic building blocks define semantics individual source language features 
independent defined monad transformers 
monad transformers define notion programming language features continuations state exceptions multiple monad transformers composed form underlying monad semantic building blocks 
go details monad transformers composition consulted 
regard semantic building blocks duponcheel presents modular way compose different blocks folds 
approach define semantics simple language 
need monad supports exceptions handle division zero defined type class class monad raise string semantics arithmetic expressions defined algebra subtype int algebra cons return inj add mx return inj dvd mx err divide zero return inj div assumes value domain contains type int monad computations instance 
change add types value domain new features monad 
semantics arithmetic language easily defined fold algebra arith value fold monadic folds meijer introduced monadic folds technique enables combination programs recursive processing input side effects computing output 
sense programming language semantics natural framework monadic folds input usually recursive syntax output expressed monad computations 
generalisation folds monadic folds studied restrictions stated obtain arbitrary monads data types 
explore implementation ideas modular monadic semantics account different restrictions imposed apply 
monad define monadic function called function type composition monadic functions defined monad structure polynomial functor possible derive definition new function mmap 
similar functor type class define type class class monad functor mmap instance class instance monad mmap cons return cons mmap add mmap dvd note need code definition explicitly induced automatically structure functor 
note definition specifies order evaluation different different monads 
monadic algebra function specific monad type type initial monadic algebra allows definition monadic fold fix phi phi mmap phi return semantics arithmetic expressions expressed subtype int cons return inj add return inj dvd err divide zero return inj div arith value main advantage monadic folds separate evaluation sub expressions obtained automatically datatype declaration semantic specification 
describe semantics boolean expressions subtype int subtype bool return inj vx vy return inj join semantics extensible union functors sem value sem uns parsing possible define independent parsers feature defined functor parsing library 
parser language obtained combining independent parsers 
define type classes contains types parsed contains functors 
class parser parser class parser parser functor instance parser parser add dvd parser parser symbol true return true symbol false return false instance instance string parser parser chop op parser symbol symbol return op combination functors instance instance parser map map left parser map right parser declare syntax fixed point functor instance instance fix parser map parser related monads structure denotational semantics anticipated moggi wadler popularized monads functional programming 
apart applications incremental development interpreter monads 
inspired special interest monad modular interpreters 
attempts steele espinosa liang developed modular monadic semantics monad transformers 
hand meijer folds develop semantics programming languages obtain compilers calculation 
number categorical techniques applied calculating transforming programs fold arbitrary data types 
polyp presents implementation theoretical developments includes library functions including fold standard example 
regard monadic folds fokkinga hu developed theoretical background adapt folds monadic folds meijer advocated practical applications 
hutton presents relationship denotational semantics described folds operational semantics unfolds monadic folds 
duponcheel applied folds development modular monadic semantics inspired 
advances modular monadic semantics connection modular monadic semantics action semantics development modular compilers 
folds structure modular monadic semantics allows development modular interpreters 
monadic folds adapt naturally framework facilitate abstraction subcomponent evaluation semantic specification 
separation kinds monads 
constructs different call mechanisms need explicit control sub component evaluation applicability 
lot remains done theoretical side consider interaction different monad transformers monadic folds 
developing language prototyping system allow users design language obtaining executable prototypes automatically 
regard research hughes arrows generalisation monads obtain efficient implementations specific features 
rewritten subset system class polymorphism model monad transformers avoiding unresolved overloading problems trying combine extensible records obtain extensibility 
folds monadic folds functions 
polyp haskell extension supports functions adoption natural choice want explore 
goal research obtain modular compilers monadic specifications partial evaluation staging 
want mention goal semantic specification machines built part project 
acknowledgments meijer suggesting class polymorphism organizers participants rd international summer school advanced functional programming comments 

danvy compiling monads 
technical report cis kansas state university 

duponcheel meijer expressive power constructor classes glasgow functional programming workshop ayr scotland springer verlag 

duponcheel writing modular interpreters catamorphisms subtypes monad transformers 
research report draft utrecht university 

espinosa semantic lego phd 
thesis 
columbia university 

fegaras sheard revisiting catamorphisms datatypes embedded functions rd acm sigplan sigact symposium principles programming languages st petersburg beach florida 

fokkinga monadic maps folds arbitrary datatypes 
technical report dept inf university twente 

jones polymorphic type system extensible records variants 
technical report tr department computer science university nottingham 

harrison kamin modular compilers monad transformers ieee computer society international conference computer languages university chicago 

hu iwasaki promotional transformation monadic programs international workshop functional logic programming world scientific 

hughes generalising monads invited talk fourth international conference mathematics program construction sweden 

hutton meijer monadic parser combinators 
technical report tr university nottingham 

hutton fold unfold program semantics rd acm international conference functional programming baltimore maryland 

jansson jeuring polylib library functions 
unpublished manuscript chalmers university technology 

jeuring jansson programming advanced functional programming launchbury meijer sheard eds 
springer verlag vol 
pp 


jones duponcheel composing monads 
research report yaleu dcs rr dept computer science yale university 

jones class polymorphism type inference fourth annual acm sigplan sigact symposium principles programming languages paris france 

implementation modular monadic semantics folds monadic folds 
workshop research themes functional programming rd international summer school advanced functional programming 
braga portugal 
liang hudak jones monad transformers modular interpreters popl st acm sigplan sigact symposium principles programming languages san francisco california 

liang hudak modular denotational semantics compiler construction esop th european symposium programming linkoping sweden springer verlag 

liang modular monadic semantics compilation phd 
thesis 
computer science yale yale university 

meijer advice proving compiler correct improve correct compiler phoenix seminar workshop declarative programming springer verlag 

meijer hutton bananas space extending fold unfold exponential types functional programming languages computer architecture la jolla california 

meijer jeuring merging monads folds functional programming international spring school advanced functional programming techniques springerverlag 

moggi view programming languages 
technical report ecs lfcs university edinburgh 

project 
url www es 
sheard fegaras fold seasons proc 
conference functional programming languages computer architecture copenhagen 

sheard benaissa interpreter compiler staging monads pacific software research center oregon graduate institute 

steele building interpreters composing monads popl st acm symposium principles programming languages portland oregon acm press 

wadler essence functional programming th acm symposium principles programming languages albuquerque new mexico acm 

wadler monads composable continuations lisp symbolic computation 

wadler monads functional programming jeuring meijer eds spring school advanced functional programming springer verlag 

wansbrough modular monadic action semantics domain specific languages santa barbara california usenix association 
