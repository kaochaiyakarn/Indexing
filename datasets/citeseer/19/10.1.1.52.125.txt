ende network delay emulator thesis submitted office graduate studies texas university partial fulfillment requirements degree master science august major subject computer engineering ende network delay emulator thesis submitted texas university partial fulfillment requirements degree master science approved style content reddy chair committee pierce member choi member nitin vaidya member singh head department august major subject computer engineering iii ende network delay emulator 
august university chair advisory committee reddy dr internet provides common interface different types computers networks various applications protocols constantly developed 
new protocol application developed tested real internet simulated testbed debugging performance evaluation 
protocol developer typically requires access multiple machines internet reason 
thesis new tool emulate delays hosts requiring access second host 
tool enables user test new protocols realistically single machine 
tool observes network status particular path icmp packets uses real time traffic source 
experimented results show approach effective quite accurate 
iv parents yoon acknowledgments take opportunity advisor reddy dr direction patience shown course 
due dr pierce choi dr vaidya dr nitin time effort expended years past 
extend student members computer engineering group texas university 
specially ashwin raj sumit gupta ravi jo kind help 
kim giving account university california san diego take experiments 
parents justice sacrifices years 
say live lifetimes debt 
vi table contents chapter page ii internet packet behavior characterization measurement tools 

measurement tool udp 

measurement tool icmp 
effective bandwidth estimation 

packet pair technique 

algorithm effective bandwidth estimation network clock synchronization 

removing relative clock offset 

removing relative clock skew 

removing clock shift icmp echoed time 

compensation clock rounding icmp echoed time experimental results 
iii implementation network delay emulator communication kernel ende 
preprocess 
probe packet sender receiver 
forward reverse path simulators 
iv simulation results tests 
tests 
tests ftp 
tests udp application 
vii chapter page appendix appendix appendix vita viii list tables table page udp icmp packet behaviors ii results bytes probe packet tamu syracuse udp iii results size probe simulated packets tamu syracuse udp iv results byte probe packet tamu syracuse tcp results size probe simulated packets tamu syracuse tcp vi results mean acknowledgment size simulated packet size probe packet size tamu syracuse tcp vii emulation results ftp viii experimental results ftp ix emulation results udp application experimental results udp application xi results bytes probe packet tamu ucsd xii results size probe packet simulated packet tamu ucsd xiii results byte probe packet tamu ucsd xiv results size probe packet simulated packet tamu syracuse ix table page xv results mean acknowledge size simulated packet size probe packet size tamu syracuse list figures page simple model ende udp probe packet format example output effective bandwidth estimation packet pair effective bandwidth estimation packet pair minimum rtts various packet size otts udp dataset clock offset otts udp dataset removing clock offset otts second udp dataset removing clock offset otts second udp dataset removing clock skew rtts otts second icmp dataset forward otts clock shifts forward otts expected line otts removing noise forward reverse otts second icmp dataset rtts tamu syracuse top udp bottom icmp fw otts tamu syracuse top udp bottom icmp rv otts tamu syracuse top udp bottom icmp typical client server model internet xi page client server model ende block diagram ende tcp connection ende example probe packets simulated packets example delays simulated packets rtts tamu ucsd top udp bottom icmp fw otts tamu ucsd top udp bottom icmp rv otts tamu ucsd top udp bottom icmp chapter objective research implement new tool testing new protocol application experimental results tool 
internet provides common interface different types computers networks rapidly growing 
various kinds applications protocols running developed run internet 
new protocol application developed tested real internet simulated testbed debugging performance evaluation 
internet large complex network practical conduct sufficient experiments directly real network 
user need access multiple hosts internet 
need tools mimic internet behaviors 
easy simulate packet behavior network great heterogeneity rapid change internet 
known freely available network simulators real sim network simulator ns 
real realistic large initially developed nest network simulation testbed comparing fair queueing gateway algorithm come served scheduling various purposes 
problem real may model behavior real networks hard full implementation common protocols 
sim network simulator kernel object network protocol implementation framework developed university journal model ieee transactions automatic control 

brakmo peterson show sim able simulate topologies traffic patterns large scale networks 
ns simulation tool developed network research group lawrence berkeley national laboratory 
derived real simulator 
eventdriven simulation engine intended explore behavior inherent underlying congestion control algorithms including slow start congestion avoidance fast retransmit fast recovery algorithms 
limit ns aspects don match behavior actual implementations 
example ns provide way data single connection provision piggy backing acknowledgments data packets 
difficulties internet traffic characterization simulation addressed paxson floyd 
shows internet key properties technical administrative heterogeneity rapid growth time immense changes time 
properties difficult obtain general agreement characterizing internet traffic behavior 
basic problem internet simulations generate traffic sources simulations 
difficulty synthesizing traffic lies solid description internet traffic exists 
immediate motivation building network delay emulator ende implement network simulation tool uses real time internet traffic traffic generated data collected particular links past 
internet traffic changes rapidly time sure data collected past valid 
simple model ende fig 

ende simulates packet behavior internet path local host destination host 
shown model ende consists single internet traffic client server forward path reverse path fig 

simple model ende server queues finite buffer 
forward path reverse path 
packets client server queued buffer transferred destination client server experiencing certain delays 
delay consists components fixed component includes transmission delay node propagation delay link variable component includes queueing delays node 
variable component determined internet traffic 
ende estimates internet traffic round trip times rtt internet control message protocol icmp packets 
icmp integral part internet protocol ip 
allows router destination host communicate source typically report error ip datagram passing 
icmp packets collecting data representing current state internet ende simulate current internet packet behaviors login access destination host 
ende examine performance new application level protocol remote host 
rest thesis organized follows 
chapter discusses characterize internet packet behaviors introduces new tools mea analyzing 
chapter presents methodology implement ende 
chapter presents simulation results compares experimental results 
thesis concluded chapter 
chapter ii internet packet behavior characterization chapter propose new network tools measuring internet packet behavior discuss estimate effective bandwidth synchronize network clocks estimating way transit times otts 
internet hard measure packet behavior network great heterogeneity rapid change 
studies proposed characterize internet dynamics 
round trip delays small udp packets sent ms source destination node examined 
measurements indicate ip level service provided internet yields high losses duplicates reorderings packets addition round trip time varies time significantly 
authors show internet may problems need analyzed order improve efficiency protocols control mechanisms uses 
bolot measured round trip delay udp echo packet stream sent fixed intervals internet paths 
characterized internet packet delay loss estimated bottleneck bandwidths paths measurements packet pair technique 
agreement estimating bottleneck bandwidth packet pair technique 
packet pair technique proposed estimate available bandwidths keshav :10.1.1.40.8893
fundamental idea packets sent successively assume internet traffic received queue arrival times consecutive packets packets leave queue interval seconds represent packet size effective bandwidth respectively 
know packet size available bandwidth computed 
keshav characterized behavior packet pair network routers obey fair queueing scheduling discipline developed probably stable flow control scheme packet pair measurements 
packet pair technique provides estimation available bandwidth may fundamental limitation 
paxson pointed limitation :10.1.1.134.20
arises effects routing path changes 
packets pair take path network basic assumption packet pair technique second packet queues violated 
may invoke problems order delivery pair incorrect overestimates underestimates 
solving problem developed modes pbm 
basic idea pbm deal packet pair shortcomings forming estimates range packet bunch sizes allowing multiple bottleneck values apparent bottleneck values 
pbm paxson reports large scale experiment study internet packet dynamics measurements tcp bulk transfers conducted sites :10.1.1.134.20
report covers packet behaviors observed internet including delay loss reordering replication bottleneck 
measurements way transit times otts rtts order avoid delay conflicts forward reverse delay 
clock synchronization local remote host necessary measure otts accurately 
paxson proposed algorithms measurements packet transit times 
algorithms detecting deleting clock adjustment relative skew addition clock synchronization 
packet behavior path network characterized packet delay loss 
generally user level behavior path internet observed user datagram protocol udp 
definition flow transmission control udp evaluate ip level performance internet 
tcp experiment offers connection oriented reliable byte stream service users see packet loss duplication 
ende uses icmp packets obtain information internet traffic loss rates udp icmp packets generated sent kernel automatically need run application program destination host 
may differences icmp udp packet behaviors icmp packet typically transferring control messages 
chapter packet behavior icmp compared udp 
measurement tools 
measurement tool udp measurement tool udp called udp packet behavior analyzing tool implemented client server program 
client running local host consists threads sender receiver 
tool start server destination host typing command 
port number start client 
user specify number packets sent size packets time interval successive packets command line 
destination host name port number number packets packet size min time ms output file name sender generates udp probe packets contain sequence number time stamp sends regular intervals server destination host 
udp probe packet format shown fig 

shown fig 
minimum packet size bytes 
sequence number user data source timestamp echoed timestamp received timestamp fig 

udp probe packet format server immediately echoes packets received back client echoed time stamps 
receiver receives packets server attaches time stamp packets 
finishing sending receiving packets client calculates average rtt standard deviation number lost packets number duplications 
average forward reverse delay standard deviations estimated algorithms described section 
fig 
shows example output 

measurement tool icmp measurement tool icmp called icmp packet behavior analyzing tool sends icmp packets udp consists client icmp packets echoed kernel automatically 
sends icmp packets icmp type field set icmp timestamp 
udp packet behavior measurement tan tamu edu cat syr edu thu apr cst number packets number duplication number loss minimum packet delay msec time adjustment average fwd delay msec std fwd delay msec average rvs delay msec std rvs delay msec average packet delay msec standard deviation msec fig 

example output destination host receives packets replies echoed timestamps 
run user types command 
destination host name port number number packets packet size min time ms output file name generate send icmp packets raw socket tool icmp icmp interface implemented bsd sockets 
effective bandwidth estimation estimate effective bandwidth packet pair technique generally basic limitation mentioned previous section 
section examine packet pair technique propose algorithm estimating effective bandwidth 

packet pair technique section results experiment effective bandwidth estimation packet pair 
experiment modified 
modified sends packets successively sequence number regular intervals receives calculates effective bandwidth 
experimented destinations syracuse university university california san diego 
fig 
show results 
figures estimate effective bandwidths tamu sites mb guess effective bandwidths limited local routers fact bandwidths 
sequence number packet effective bandwidth tamu syracuse bytes second fig 

effective bandwidth estimation packet pair limitation packet pair basic assumptions readily violated 
basic assumptions follows effective bandwidth tamu ucsd sequence number packet bytes second fig 

effective bandwidth estimation packet pair 
packets pair take path 

traffic packets pair 
violated estimate effective bandwidth accurately 
example 
results find peak mb true paths modem line path fatal bottleneck 
may second packet took longer path large traffic arrived 

algorithm effective bandwidth estimation technique estimating effective bandwidth examined packet pair section 
solve shortcomings packet pair minimum rtts different packet sizes 
fundamental idea send different size packets small large alternatively times regular interval assume minimum rtt size packet contains minimum queueing delay 
queueing propagation delay independent packet size difference minimum rtts different size packets caused transmission delay 
estimate effective bandwidth path formula effective bandwidth gamma gamma idea fact delay packet linearly proportional packet size 
fig 
shows relation minimum rtt packet size 
find minimum rtt increases linearly packet size increases 
packet size fig 

minimum rtts various packet size result estimate bandwidth 
effective bandwidth gamma gamma mb value corresponds result packet pair 
packet pair gives estimation short term unstable proposed technique minimum rtts stable 
network clock synchronization section discuss synchronize network clocks estimate way transit time ott 
clock host synchronized just estimate ott calculate accurately 
simply estimate ott dividing rtt half studies variations paths otts asymmetric half rtt ott :10.1.1.134.20
said chapter paxson proposed algorithms clock synchronization ott estimation tcp packets 
research apply algorithms udp packets develop algorithms icmp packets errors icmp echoed timestamps algorithms directly applied icmp packets 
sections udp datasets icmp datasets collected 
consists udp icmp packet traces 
collected texas university syracuse university texas university university california san diego 
packets generated millisecond intervals packet size bytes 
trace time packet arrival departure recorded sender receiver 
clocks remote hosts necessarily synchronized 

removing relative clock offset section discuss detect remove relative clock offset local remote hosts 
relative clock offset means difference clocks certain moment 
fig 
shows forward reverse otts network clocks synchronized 
sequence number forward otts sequence number reverse otts fig 

otts udp dataset clock offset forward otts calculated subtracting sent time echoed time reverse otts calculated subtracting echoed time received time 
estimate relative clock offset network clocks assume minimum forward ott minimum reverse ott 
suppose packet sent time arrived remote host time packet echoed back time arrived local host time clock offset local remote clocks deltat otts minimum forward ott minimum reverse ott dataset respectively assumption gamma deltat gamma gamma gamma deltat deltat gamma gamma calculate deltat synchronized times calculated subtracting deltat echoed time 
fig 
shows forward reverse otts removing clock offset 
sequence number forward otts sequence number reverse otts fig 

otts udp dataset removing clock offset 
removing relative clock skew dataset detect relative clock skew 
clock skew particular moment frequency difference clocks 
clock skew small cause fatal errors estimation otts long period 
section discuss detect remove relative clock skew 
example shown fig 

shown fig 
easily find clock skew graphically easy detect clock skew algorithmically delay different previous know difference caused clock skew sequence number forward otts sequence number reverse otts fig 

otts second udp dataset removing clock offset changes network traffic 
develop algorithms detecting removing relative clock skew assume skew trend linear 
detect clock skew compare minimum ott percent packets dataset minimum ott percent packets dataset picking minimum values reduce noise caused changes network traffic 
difference larger threshold regard clock skew clocks 
threshold determined time difference deltad sent times packets 
want detect clock skew larger percent means clock faster slower percent deltad theta gamma detect clock skew 
skew oe detected calculate remove 
denote sent echoed times th packet respectively 
fig 
shows otts removing clock skew 
oe gamma deltad gamma oe theta gamma sequence number forward otts sequence number reverse otts fig 

otts second udp dataset removing clock skew 
removing clock shift icmp echoed time section discuss detect remove clock shift 
clock shift means clock changed unexpectedly 
example shown fig 

rtt icmp packets sequence number forward otts shifting sequence number fig 

rtts otts second icmp dataset top graph rtts bottom graph part otts bottom graph otts rd rd rd packets greater second 
maximum rtt milliseconds top graph 
ott greater second infer echoed times packets shifted 
causes time shifts time shifts hosts 
detect time shifts compare difference maximum minimum echoed times maximum rtt 
difference greater maximum rtt means time shifts 
need estimate time shift ffi remove 
convenience suppose ffi positive 
divide otts original shifted groups 
echoed time packet mean maximum minimum otts regard shifted 
shifted 
dividing dataset calculate difference minimum echoed times group 
assume minimum times group difference ffi 
subtracting ffi echoed time packets shifted group remove clock shifts 
result shown fig 

time shifts removed problems solved 
discuss section 
algorithm assume single level time shifts 
multiple level time shifts occur removed 
fortunately find host multiple level time shifts occur 
sequence number otts clock shifts sequence number otts removing clock shifts fig 

forward otts clock shifts 
compensation clock rounding icmp echoed time bottom graph fig 
looks stair case 
clock skew limited time resolution icmp time stamp 
observed hosts internet clocks limited time resolution milliseconds echo time stamps 
clock skew removed algorithms udp packets 
need develop new algorithm compensate times rounded limited clock resolution 
discarded times simply compensated adding integer uniformly distributed zero time resolution milliseconds 
cause fatal errors relatively large otts 
incur fatal small otts 
reduce errors estimating otts introduce expected line algorithm 
fig 
find lower values otts look straight line 
property otts small values otts fig 
estimated shown fig 

sequence number otts expected line otts expected line fig 

forward otts expected line expected line line connects point ott starts round 
estimate lower otts accurately noise needs removed otts 
ott measurements noise means additive positive increase induced network traffic 
de noising algorithm proposed remove noise 
basic idea algorithm dividing dataset subsets find otts little network induced noise looking smallest values subset 
fig 
shows de otts 
subset otts 
sequence number fig 

otts removing noise obtain equation expected line connecting points fig 

gamma gamma bc gamma ad gamma estimate original otts compare observed otts expected line 
observed ott expected line difference added observed ott 
just added 
clock skew removed algorithms discussed section 
final results shown fig 

sequence number forward otts sequence number reverse otts fig 

forward reverse otts second icmp dataset experimental results section results datasets section 
table characterizes results icmp udp measurements 
table clear characteristics icmp packets udp packets 
individual packet rtt ott shown fig 
fig 
fig 

results appendix fig 
fig 
find forward reverse paths asymmetric 
chapter explained get delay characteristics path udp icmp packets results 
results show delay characteristics udp icmp packets pretty close 
results clear obtain characteristics udp packets icmp table udp icmp packet behaviors dataset number loss minimum rtt msec average fwd delay msec std fwd msec average rvs delay msec std rvs msec average rtt msec std rtt msec packets access remote host 
sequence number sequence number fig 

rtts tamu syracuse top udp bottom icmp sequence number sequence number fig 

fw otts tamu syracuse top udp bottom icmp sequence number sequence number fig 

rv otts tamu syracuse top udp bottom icmp chapter iii implementation ende network delay emulator chapter methodology implement ende 
ende new network tool emulates packet behavior including packet losses delay internet 
testbed testing new application layer protocols tcp udp 
fig 
shows typical client server model generally testing new applications protocols 
ende test measure performance new protocols remote host internet running application remote host shown fig 

local host remote host client server internet fig 

typical client server model internet local host remote host client internet ende server ip icmp fig 

client server model ende ende works intercepting packets sent specific port number tcp udp holding certain delay determined current network state local destination hosts 
keeps sending icmp packets called probe packets regular intervals observing current network state 
fig 
shows block diagram ende 
sections implementation ende explained detail 
probe packet sender probe packet receiver forward path simulator reverse path simulator ende client server icmp tcp udp tcp udp ip ip fig 

block diagram ende communication kernel ende packet interception implemented kernel order real world application ftp telnet simulated ende modification 
current version ende manipulate tcp udp packets 
intercept packet simulated send ende port numbers server ness reserved simulated server ende respectively 
packet destination source port number equal server regarded simulated redirected ende kernel 
udp packets simulated procedure 
client sends packet server port number server 
udp layer checks port number outgoing packets 
equal server changed ness 
ende receives redirected packet sends port number server raw socket order access ip layer directly 
packet intercepted pass udp layer 

server receives packet ende sends reply ende 

ende receives packet sends client 
tcp connection oriented protocol connection established communication start 
ende designed internet path want open connections ende client server 
interception tcp packet needs complicated procedures system packets connection establishment acknowledgments closing connections 
theses packets generated sent tcp layer user level application 
fig 
shows tcp packets simulated 
preprocess start simulation ende collects data estimate effective bandwidth local destination hosts synchronize clocks 
tcp ip tcp ip tcp ip client server ende connection established fig 

tcp connection ende estimate effective bandwidth ende uses different sizes packets described chapter 
sends different sizes bytes icmp packets alternatively times obtaining minimum rtt packet size 
effective bandwidth estimated 
effective bandwidth gamma min rtt gamma min rtt estimation effective bandwidth ende sends byte icmp packets times millisecond time interval estimate relative clock offset clock skew time shifted 
procedures estimation explained chapter 
preprocess stage takes minutes 
probe packet sender receiver preprocess ende keeps sending icmp probe packets destination milliseconds observe current network traffic local destination host 
observed results stored structure 
structure defined global variable thread access 
struct long sequence number long rtt round trip time long forward delay long reverse delay long arrival time long sent time probe packet sender sets seq number sequence number probe packet sent rtt zero sending probe packet 
ende sends packet destination host milliseconds writes sending time snd time 
probe packet receiver receives probe packet echoed destination host records arrival time rcv time structure sequence number 
packet lost rtt packet remains zero 
receiver checks echoed time stamp 
echoed time shifted adjusted subtracting shifted time estimated preprocess stage 
clock skew removed 
clock offset removed echoed time 
forward reverse delays estimated equations 
fwd delay echoed time gamma snd time rvs delay rtt gamma fwd delay forward reverse path simulators forward path simulator simulates path local host destination host reverse path simulator simulates path destination local host 
implementation ende forward reverse path simulators separated paths asymmetric occasionally 
forward reverse path simulators consists sender receiver buffer 
receiver receives tcp udp packets called simulated packets client server calculates delay packets need deferred 
fig 
shows probe packets simulated packets 
seq 
number packet departure packet arrival probe packets simulated packets loss seconds respect fig 

example probe packets simulated packets calculate delay receiver refers record probe packet sent seconds prior arrival simulated packet 
probe packet returned seconds forward reverse delay probe packet delay bytes simulated packet 
probe packet regarded lost simulated packet discarded 
delay simulated packet calculated delay bytes packet effective bandwidth estimated stage 
denote size simulated packet probe packet respectively 
simulated packet delay gamma delay simulated packet calculated 
case calculation correct 
suppose size simulated packet large transmitted simulated packet arrival simulated packet arrives early transmitted 
case packet wait transmitted completely 
fig 
shows example 
time simulated packets fig 

example delays simulated packets packet transmitted completely packet arrives affect delay packet packet arrives packet leaves 
packet expected leave time packet transferred completely remains queue 
actual leaving time packet time 
calculate time define effective packet length 
effective packet length th packet eff defined sum length th packet remaining length gamma th packet 
suppose th packet arrives time eff gamma gamma gamma eff gamma eff gamma gamma gamma delay calculated substituting eff receiver puts simulated packet buffer delay 
sender checks delay packets logged buffer round robin discipline sends packets deferred delay 
chapter iv simulation results chapter describe sets simulations experiments performed compare ende packet behavior real internet 
issues dealt simulations ffl proper packet size probe packet ende 
ffl ende real world applications 
test ende various probe packet sizes tcp packet behavior analyzing tool tcp version compare results experimental results real internet 
internet traffic rapidly changed time difficult compare results fairly 
traffic change day time greater night time 
reduce traffic change time performed tests night time 
tests try find optimum packet size ende probe packet 
show ende simulate general applications 
simulation experiment performed twice texas university syracuse university second texas university university california san diego 
results university california san diego appendix simulations ende run pentium mhz pc running linux 
tests section results simulations experiments 
determine probe packet size considered choices minimum icmp packet bytes probe packet size probe packet size simulated packet 
examine choices ran sets simulations experiments 
set performed different sizes simulated packets minimum size probe packet 
second performed different sizes simulated packets probe packets 
sent udp packets milliseconds interval simulation experiment 
tables show results 
tables left column packet size shows simulation results right column shows experimental results 
table ii 
results bytes probe packet tamu syracuse udp packet size number losses minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table iii 
results size probe simulated packets tamu syracuse udp packet size number losses minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec 
average rtt msec std rtt msec generally packet size increases packet delay increases 
transmission delay increases packet size increases 
results experiments table ii table iii show transmission delay increases packet size increases 
described chapter effective bandwidth effective packet size estimate delay different size packets probe packet delay 
results simulations table ii show effective bandwidth effective packet size successfully estimated ende various sizes simulated packets 
results tests size probe packet simulated packet table iii show differences delays simulations delays experiments increase packet size increases 
observed results comparison university california san diego table xii 
reason increase queueing delays 
ende sends probe packets small time interval milliseconds probe packet size increase traffic probe packets occupies bandwidth paths 
increased probe packet size causes increase queueing delay addition increase transmission delay 
tests section results simulations experiments 
communications tcp types packets data packet acknowledgment 
users control data packet length acknowledgment bytes 
testing tcp simulation performed sets simulations experiments 
set conducted size probe packet acknowledgment bytes second size probe packet simulated packet size third probe packet mean acknowledgment size simulated packet size 
sent tcp packets second interval simulation experiment 
tables show results 
tables left column packet size shows simulation results right column shows experimental results 
table iv 
results byte probe packet tamu syracuse tcp packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table results size probe simulated packets tamu syracuse tcp packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table iv see ende tcp applications byte probe packets udp applications 
queueing delay increase happened udp tests observed table table vi 
udp tcp tests described section observe ffl ende emulate tcp udp application 
table vi 
results mean acknowledgment size simulated packet size probe packet size tamu syracuse tcp packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec ffl optimum probe packet length minimum length 
sections test results real world applications 
tests ende byte probe packets 
tests ftp section show ende simulate real world application tcp 
show tested ende ftp file transfer protocol 
ftp internet standard file transfer best known application tcp 
tests transfered mb binary file ftp 
check forward reverse path sent received file back 
tables show results 
table vii 
emulation results ftp trial average transfer rate fw path kb transfer rate rv path kb table viii 
experimental results ftp trial average transfer rate fw path kb transfer rate rv path kb run simulation experiments interleaved fashion ftp sensitive network bandwidth 
results non reproducible controlled difficult compare simulation results experiment results directly 
observe results similiar 
tests udp application section describe tests application udp communications results 
application tests implementation adaptive best effort protocols video delivery ashwin 
protocol designed delivery real time multimedia data packet network 
basic concept protocol higher priority packet delivered receiver assume availability prioritized data 
implementation protocols udp consists client server 
purpose tests observe packet behavior ende compare actual behavior real internet analyze results 
ran application times ende internet 
tables shows results 
table ix 
emulation results udp application trial average total packets loss percentage packets sent retransmits stall count low quality rounds table experimental results udp application trial average total packets loss percentage packets sent retransmits stall count low quality rounds protocols udp communications adapt transfer rates bandwidth estimated 
protocols sensitive network bandwidth need run simulation experiment separately 
results coincide exactly find fatal difference results 
differences simulation actual experiments differences successive experiments 
chapter introduced new network tool called ende simulating packet behavior internet simulation results ende 
ende test network protocols applications system connected internet 
approach gives advantages simulation simplicity need complex hardware settings need modification real world application especially real time traffic generation 
ende useful develop new protocol suitable testbed 
generally observe delay loss duplicate reordering packet transmitted internet 
shown packet ende experiences amount delay loss internet 
ende simplifies internet single queueing model reordering happen ende 
duplication pathologies current internet ende ignores duplicated packets 
ende mimic internet limitations need consider 
simulations reality ende approximate emulate behavior real internet approximations assumptions 
violations assumptions cause problems 
conclude thesis brief comments limitations ende 
accuracy simulations highly dependent clock resolution 
events ende occur local system timer accuracy ende limited resolution local system timer 
second problem network clock synchronization 
delay estimations ende clock synchronization local destination host 
clock synchronization critical part 
synchronize clocks algorithms 
algorithms basically assuming minimum delay dataset particular path 
delays measured daytime vary assumption easily violated 
need consider validity echoed time stamp 
estimate otts ende uses icmp echoed time stamp pathologies icmp echoed time stamp clock shifts limited clock resolution 
sites echo minus values 
operation ende limited selective destination hosts 

bolot packet delay loss behavior internet proceedings sigcomm pp 
september 
agrawala jain experimental assessment behavior internet proc 
ieee infocom san francisco ca pp 

march 
vern paxson sally floyd don know simulate internet proceedings winter simulation conference atlanta ga 
postel editor user datagram protocol request comment rfc network information center sri international august 
keshav control theoretic approach flow control proc 
sigcomm pp 
sept 
keshav packet pair flow control technical report bell laboratories murray hill new jersey :10.1.1.40.8893
ftp ftp research att com dist qos pp ps keshav real network simulator technical report department computer science uc berkeley 
vern paxson internet packet dynamics proceedings sigcomm :10.1.1.134.20
larry peterson bruce davie computer networks morgan kaufmann publishers san francisco california 
vern paxson calibrating measurements packet transit times proceedings sigmetrics 
ns available www nrg ee lbl gov ns 
lawrence brakmo larry peterson experiences network simulator proceedings sigmetrics 
hutchinson peterson kernel architecture implementing network protocols ieee transactions software engineering january 
sally floyd simulator tests technical report lawrence berkeley laboratory berkeley california 
available ftp ftp ee lbl gov papers ps ashwin raj reddy adaptive best effort protocol video delivery technical report texas university college station texas 
luigi rizzo dummynet simple approach evaluation network protocol acm communication review vol 
january 
appendix delays udp icmp packets figures show individual delays udp icmp packets texas university university california san diego 
sequence number sequence number fig 

rtts tamu ucsd top udp bottom icmp sequence number sequence number fig 

fw otts tamu ucsd top udp bottom icmp sequence number sequence number fig 

rv otts tamu ucsd top udp bottom icmp appendix results simulations experiments tables show comparison results simulations experiments texas university university california san diego 
left column columns packet size simulation results right column experimental results 
table xi 
results bytes probe packet tamu ucsd packet size number losses minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table xii 
results size probe packet simulated packet tamu ucsd packet size number losses minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec appendix results simulations experiments tables show comparison results simulations experiments texas university university california san diego 
left column columns packet size simulation results right column experimental results 
table xiii 
results byte probe packet tamu ucsd packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table xiv 
results size probe packet simulated packet tamu syracuse packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec table xv 
results mean acknowledge size simulated packet size probe packet size tamu syracuse packet size minimum rtt msec avg fw ott msec std fwd msec avg rv ott msec std rvs msec average rtt msec std rtt msec vita received degree electronic engineering university seoul south korea 
candidate computer engineering texas university 
current research interests include internet performance measurement analysis network simulator real time multimedia server 
typist thesis 
