bridge high performance file system parallel processors peter michael scott department computer science university rochester rochester ny carla ellis department computer science duke university durham nc faster storage devices solve bottleneck problem large multiprocessor systems data passes file system single processor 
implementing file system parallel program significantly improve performance 
selectively revealing parallel structure utility programs produce additional improvements particularly machines interprocessor communication slow compared aggregate bandwidth 
designed prototyped parallel file system distributes file multiple storage devices processors 
naive programs able access files just conventional file system sophisticated programs may export pieces code processors managing data optimum performance 
theoretical early empirical data indicate nearly linear speedup critical operations dozen devices 
parallel operation widely applicable technique maximizing computer performance 
limits imposed algorithms interprocessor communication computing speed system directly proportional number processing nodes 
processing speed increases programs perform increasingly bound 
compute intensive applications system throughput increase corresponding improvements speed subsystem 
point view parallel processing performance limit path secondary storage application program considered bottleneck 
current state art parallel storage device hardware deliver effectively unlimited data rates file system 
bottleneck remains file system uses sequential software interaction file system confined process parallel application 
ideally write parallel programs individual process accessed local files 
files maintained separate file systems separate processors separate storage devices 
approach unfortunately force programmer assume complete responsibility physical partitioning data file systems destroying coherence data research supported nsf cer dcr darpa etl contract number ibm faculty development award 
cally belonging single file 
addition frequent restructuring required data applications idea organize explicit partitions 
thesis possible cake eat designing file system parallel program maintains logical structure files physically distributing data 
approach notion interleaved file consecutive logical blocks assigned different physical nodes 
bit background information introduce notion interleaving section section describe realization experimental file system known bridge 
prototype runs bbn butterfly parallel processor ideas equally applicable large number parallel architectures locally distributed collections conventional machines 
critical file operations early analytical experimental results indicate bridge deliver parallel speedup configurations excess nodes disks 
high performance achieved exporting related portions application processors closest data 
section presents pair applications illustrate technique 
section discusses general issues design algorithms bridge 
final section describes status discusses plans 
background bottlenecks source concern computer system designers early 
time parallelism built individual components data path 
busses example transferred bits parallel years 
similar trivial parallelism hardware increase performance controllers connecting cables indefinitely 
parallelism storage devices achieved ways 
traditional memory interleaving employed solid state ram disks produce high transfer rates 
mechanical disks read heads available vendors cdc fujitsu 
manufacturers introduced investigating called storage arrays assemble multiple drives single logical device enormous throughput 
multiple head drives storage arrays scaled arbitrary levels parallelism unfortunate tendency maximize rotational latency operation wait poorly positioned disk 
alternative storage arrays salem garcia molina studied notion disk striping conventional devices joined logically level file system software 
consecutive blocks located different disk drives file system initiate operations blocks parallel 
striped files limited disk channel speed storage arrays parallel devices limited throughput file system software 
may seen attempt eliminate remaining serialization points path storage devices parallel application 
address possibility communication channels components application program components file system may constitute bottleneck individual process overloaded 
certainly case locally distributed processors broadcast network ethernet 
ideally application process located node file system processes perform allow application run transferring data nodes 
way ensure locality general encourage local access allowing file system execute complex operations provided user 
bridge file system distributes blocks file disks interleaving scheme gives application programs access blocks sequentially parallel 
addition bridge allows program part file system requesting package information main directory server 
sufficient information package allow new program find processors attached disks arrange subprocesses read write blocks locally 
emphasis distribution data parallel file system code local execution application specific operations bridge shares number ideas gamma project university wisconsin 
fundamental difference bridge general purpose file system gamma relational database system 
interest traditional file operations requires general purpose interface 
addition described section anticipated access patterns suggest different file distribution strategy different algorithms common operations 
interleaved files interleaved file regarded dimensional array blocks row major order see 
column array placed separate storage device attached separate processor managed separate local file system lfs 
main file system directory lists names constituent lfs files interleaved file 
blocks distributed round robin order information suffices map interleaved file name block number corresponding local file name block number 
formally instances lfs nth block interleaved file block div constituent file lfs mod assuming processor block numbering starts zero 
round robin distribution start node nth block processor mod block zero belongs lfs course round robin distribution possible strategy allocating blocks nodes 
gamma example allows file divided exactly equal size chunks contiguous blocks 
chunk allocated processor entirety 
gamma allows blocks file scattered interleaved file structure lfs lfs lfs lfs lfs lfs lfs lfs lfs randomly nodes hash function 
argument function appropriate database key world just number block 
approaches appear attractive context relational database general files 
principal disadvantage chunking requires priori information ultimate size file written 
significant changes size appending example require global reorganization involving lfs 
principal advantage hashing tends randomize locations blocks required particular query 
advantage compelling ordinary files sequential access usual case database files 
usual hashing algorithms guarantee consecutive blocks accessed parallel 
placement blocks processors controlled hash function probability consecutive blocks different processors high processors file system probability consecutive blocks different processors extremely low 
round robin interleaving guarantees consecutive blocks different nodes 
parallel execution sequential file operations guarantee optimal 
extreme chunking imagine distributing data level granularity smaller block 
thinking machines pursuing bit level distribution second generation connection machine 
number processors disks slightly larger half number bits block 
block bits drive 
extra drives contain error correction bits loss drive leave data intact 
strategy may sense massively parallel simd machine bit alus 
conventional multiprocessor certainly 
system block distribution provides relatively fine granularity distribution forcing programmer reassemble logical records multiple sources 
appropriate distribution strategy parallel files ultimately depend role files assume parallel applications 
unfortunately information currently available file usage patterns uniprocessor systems necessarily apply multiprocessor environment 
preliminary experience allows educated guesses expect 
principal role sequential file systems blocks connection machine called chunks contain bits data bits ecc 
chunk subdivided bit words word spanning disk drives 
hardware layout communication network processors communication network processors long term storage large amounts data predominant 
generally large size parallel applications tendency confine program development activity front machine files generally larger interactive system 
large amounts main memory reduce need temporary files disk means packages butterfly system result extensive caching 
considerations lead believe sequential access relatively large files overwhelm usage patterns 
appears round robin interleaving support common operations 
sorts performance results reported section hopeful distribution strategy need 
potential gain efficiency alternative ordering large files sorted user 
serious concern strict interleaving may result unreasonable amounts inter processor data movement certain applications 
deleting block middle file example require subsequent blocks moved 
traditional file systems usually support deletion middle necessarily excuse precluding interleaved files 
considering relaxation interleaving rules limited class files possibly offline reorganization 
prototype implementation supports explicit linked list representation files permits arbitrary scattering blocks expense slow random access 
assume sections file strictly interleaved 
full exploration disordered files scope 
bridge system structure bridge file system main functional layers 
top layer consists bridge server group special purpose programs call tools 
middle layer consists local file systems individual nodes 
lowest layer manages physical storage devices 
implementation runs operating system bbn butterfly parallel processor 
components file system implemented user processes changes operating system required 
components communicate message passing 
messages implemented butterfly atomic queues buffers shared memory realized equally local area network 
table bridge server commands command arguments returns create file file id delete file file id open file id lfs file ids sequential read file id data random read file id block number data sequential write file id data random write file id block number data parallel open file id worker list get info lfs handles bridge server bridge server interface bridge file system user programs 
function glue local file systems single logical structure 
implementation bridge server single centralized process need case 
requests server frequent cause bottleneck functionality provided distributed collection processes 
far focused mainly tool bridge case access central server occurs files opened 
order meet needs different types users bridge server implements different system views 
simplest view supports operations reminiscent ordinary sequential file system open read write see table 
users want access data bothering interleaved structure files simple interface 
bridge server transparently forwards requests appropriate lfs 
second view bridge supports parallel reading writing multiple blocks file 
parallel open operation groups processes job 
process issues parallel open job controller 
provides bridge server names workers 
suppose workers 
job controller performs read operation blocks transferred worker parallelism possible 
job controller performs write operation blocks received workers parallel 
performance parallel operations limited number nodes file system bridge server simulate degree parallelism 
width parallel open greater server perform groups disk accesses parallel high level request satisfied 
application programs may ignorant actual amount interleaving file advantage parallelism 
hidden serialization introduced specifying workers parallel open cause incorrect results may lead unexpected performance 
importantly forces workers proceed lock step increase speed random access 
order take full advantage interleaved structure files sophisticated users construct socalled tools get info operation view third bridge server interfaces 
open operation interpreted bridge hint 
bridge server responds setting optimized path file 
close operation 
semi stateless interface particularly significant intrinsic interleaved files adopted sake consistency local file systems stateless see 
software connectivity lfs lfs lfs bridge server tool tool tool bridge tools bridge tools applications part file system 
standard set tools copy sort grep 
viewed part top layer file system application need standard utility program tool 
process knowledge middle layer structure tool 
tools communicate bridge server obtain structural information bridge directory 
direct access lfs level file system see 
insist accesses bridge directory create delete open performed bridge server order ensure consistency providing amounts monitor file management operations 
essence bridge tools communicate server application programs communicate local file systems server 
tools application specific may written users structured wide variety ways 
expect tools knowledge low level structure files create processes nodes lfs instances located minimizing interprocessor communication 
typical interaction tools components system involves brief phase communication bridge server create open files learn names lfs processes creation subprocesses lfs nodes lengthy series interactions subprocesses instances lfs 
open operation provides tool lfs local names pieces file allowing translate global local block names 
operations files copying obvious example require communication nodes startup completion 
sequential file system requires time copy block file bridge tool described section accomplish thing time plus log startup completion 
filter display behavior simple modifications copy tool allow perform character translation encryption lexical analysis fixed length lines 
returning small amount information completion time perform sequential searches produce summary information 
implementation performance sorting tool discussed section 
local file system local file servers bridge adaptation elementary file system efs constructed cronus distributed system project bbn 
efs simple stateless file system flat name space access control 
file names numbers hash directory 
files represented doubly linked circular lists blocks 
pointer block file file efs directory entry 
addition neighbor pointers block contains file number block number 
request efs provide disk address hint 
order find block efs searches linked list closest locations hint assuming course hint points correct file 
cache accessed blocks sequential access efficient keeping neighboring blocks pointers memory 
decision efs pragmatic technical reasons 
pragmatic side simplicity availability portability cronus code easy get prototype running quickly 
technical side level functionality provided exactly needed 
access control example provided bridge server unneeded lfs 
advantage 
individual lfs instances informed bridge file created opened 
bridge server potential performance penalty including appropriate hint call efs 
efs modified fit bridge modifications involved adding instrumentation improving performance adapting butterfly 
additional bytes bridge related header information taken data storage area block leaving bytes data 
pointers original byte efs header lead blocks interpreted adjacent local context 
words block pointed pointer blocks away bridge file 
revised version efs program knows bridge 
particular portion bridge file controlled efs server viewed locally complete file 
efs server ignore fact holds pth block global abstraction 
instances efs self sufficient operate ignorance 
physical storage management lowest layer bridge consists device drivers manage physical data storage 
principle see reason layer entirely conventional 
practical reasons chosen implementation simulate disks memory 
goal simply demonstrate feasibility need purchase real drives 
large butterfly megabytes ram part memory simulate megabytes disk test programs 
device driver code includes variable length sleep interval simulate seek rotational delay different types disk drives 
performance figures delay set ms approximate performance cdc wren class hard disk 
back envelope calculations suggest disks near knee price performance curve currently available hardware 
table bridge operations delete delta ms create ms open ms read ms write ms basic benchmarks figures table taken simple program uses naive interface bridge server order read write files sequentially 
performance open write operations essentially independent number file system nodes 
read operations pay amortized price startup tasks borne open operation traditional lfs including initial reads file header directory information 
average read time typical files substantially disk latency full track buffering version efs 
delete operation runs parallel instances lfs takes time size file deleted 
original cronus version efs included substantial amount code increase resiliency failures 
code file deletion algorithm traverses file sequentially explicitly freeing block 
create operation create lfs file disk 
bridge gets parallelism operation starting lfs operations waiting initiation termination sequential leading linear increase overhead additional processors 
performance improved somewhat sending startup completion messages embedded binary tree 
example tools copy tool copying practice common file operation 
simplest 
ordinary file system copy file length time 
copy program written bridge tool files copied time log way interleaving 
code looks send get info bridge receive lfs names send open source bridge server receive source information send create bridge server receive destination send open destination bridge server receive destination information start instance lfs node wait complete lfs local src local dest send read local src lfs receive data file send write local dest data lfs send read local src lfs receive data endwhile exit write operations pay amortized startup price effect average time negligible partly writes take longer reads partly efs peculiarities caching directory information effective writes reads 
table copy tool performance mbyte file processors copy time sec sec sec sec sec records second processors copy tool ignores bridge headers file copying 
header pointers block number lfs instance pairs pointers valid new file 
loop contain transformation blocks data preserves number order 
filter programs produced inserting transformations run constant factor copy tool time 
copy tool displays nearly linear speedup processors added 
sort tool standard algorithm external sorting merge sort 
unusual demands file system runs log time pathological special cases 
parallel merging algorithm log depth parallel merge sort easy write 
processors records parallel merge sort builds sorted runs length parallel 
merges sorted runs log depth merge tree 
basic structure algorithm follows parallel perform local external sorts lfs 
consider resulting files interleaved processor merge pairs files parallel consider new files interleaved processors discard old files parallel endwhile pass merge sort different parallel behavior processors 
pass sort runs merges uses processors merge kn records 
pass sort provide way parallelism merge provide way parallelism 
pass sort provide parallelism merge provide way parallelism 
best possible performance parallel sorting algorithm log 
conventional merge sort time consumed log passes merge total time pass 
developed parallel merge algorithm runs time limited values optimal sorting algorithm limited built merge 
sake simplicity assume records sorted size disk block 
odd sized records algorithm significantly affect asymptotic complexity 
merge pseudo code type token key originator read record loop receive token token build token false key local file name process send token process input file elsif token file done increment token send token process current input file send record destination process token read new record usual case file build token true token send new token token originator record key token key increment token send token process current input file send record destination process token read new record build token false record key token send new token token originator endif loop algorithm merge way interleaved files way interleaved file involves sets processes 
set contains processes devoted reading input files 
second set contains processes devoted reading input file 
third set contains processes write destination file 
algorithm proceeds passing token processors controlling files merged 
received process token contains unwritten key input file name process holds record key sequence number destination record written derive name process ready write destination record 
process receives token compares key inside unwritten key local file 
key token greater equal local key process forwards token process input file sends output record appropriate process destination file 
key token local key process builds new token key name sends new token originator token received 
special cases required deal termination algorithm follows outline 
fact records scattered collection communicating processes logical flow control directly analogous standard sequential merge 
correctness proven observing token passed twice row writing records written nondecreasing order 
code process handling input file part merge 
sorting proceeds distinct phases 
phase sorts records lfs locally 
second phase performs series successively global merges 
reasonable values merge phase take time log log passes pass 
speedup practice nearly linear improves increases 
sufficiently large token eventually unable complete circuit nodes time takes read write record 
point performance taper merge phase tool final pass merge earlier passes involve shorter circuits 
nodes clearly point merge phase sort tool unable take advantage additional parallelism 
local sorting phase consumes bulk sort tool time small values improves linearly processors added 
expected time local sorting sum times core sorting local merges log log cp size buffer case records 
doubling number processors doubles number disks reading writing explain nearly linear speedup moves pass merging local sorting phase global merging phase 
implementation constant local merge higher constant global merge net result sort tool displays super linear speedup 
faster multi way local merge anomaly disappear 
algorithm design considerations primary design goal bridge file system high performance common operations multiprocessor environment 
second goal system perform uncommon operations file system parallel machine 
particularly anxious ensure bridge perform significantly worse conventional file system operation 
concern played major role design decisions including adoption stateless lfs rejection data distribution chunking 
led provide different user views described section 
programs take advantage parallelism bridge differing degrees depending view 
naive programs conventional interface bridge offers advantage storage arrays disk striping aggregate transfer rate disk arbitrarily high 
assuming local file systems perform read ahead write virtually program uses naive interface compute communication bound 
applications read write files sequentially predictable chunks parallel open eliminate computational bottlenecks transferring data multiple processes 
parallel open access method offers true parallelism interleaving breadth bridge file bandwidth interprocessor communication whichever 
offers virtual parallelism reasonable degree freeing user need know implementation details 
unfortunately hiding low level details means users unable table merge sort tool performance mbyte file processors local sort merge total min min min min min min min min min min min min min min min records second processors parallel merge local sort total time min 
processors place workers appropriate lfs nodes 
communication remain bottleneck situations 
bridge tool level interface addresses limitation communication bandwidth allowing user move functionality bottleneck data 
processing completed lfs node user level code allows data filtered presumably compressed moved 
tools communicate directly lfs instances gain modest performance benefit avoiding indirection bridge server 
unrestricted access lfs constituents file frees programmer constraints lock step multi block access allowing workers proceed rate speed permitting random access 
penalty course access file system vastly 
application parallel interleaved file system sense trivially parallel processing block file independent activities processors 
research order prevent arbitrary programs competing file system cycles suggest user processes run lfs node part tool 
point view interesting problems bridge data movement inter node cooperation essential 
critical observation algorithms continue scale long disks busy time assuming doing useful 
theory limit parallelism exploited algorithm sequential component time scale difference disk accesses cpu operations large hope run money buy disks reaching point diminishing returns 
merge sort tool token generally able pass way ring dozen processes process finish writing previous record reading 
clear tool offer constant factor speedup observation misses point entirely 
constant factors looks replicating hardware 
current impression limiting factor speedup interleaved files infinite financial resources amdahl law murphy law interleaved files striped files storage arrays inherently intolerant faults 
failure system fatal file 
replication helps high cost 
storage capacity doubled order tolerate single drive failures 
hope reduce amount space required errorcorrecting scheme connection machine see obvious way mimd environment block level interleaving 
discussed design initial implementation file system interleaved files exported user code 
interleaving appears natural approach providing parallelism previous experience systems built idea minimal 
prototype version bridge provides concrete implementation measured experimentally 
serves testbed investigating design tradeoffs studying interleaved files put parallel applications 
success interleaving unsophisticated users depend popularity parallel open feature 
clear critical applications significant benefits making interleaved structure explicit 
current implementation tuned high performance empirical measurements far encouraging 
early decision build cronus elementary file system worked fairly 
linked structure files inherited efs expanded global pointers provides degree flexibility important testbed 
resulting system remains relatively simple rich allow explore alternative data distribution strategies 
expect course upcoming year develop additional tools 
developed unconventional mathematical analysis merge sort algorithm expresses maximum available degree parallelism terms relative performance processors communication channels physical devices 
results obtain constants butterfly agree quite nicely empirical data 
hope produce similar analysis tools 
butterfly tm parallel processor overview tech 
rep version bbn laboratories june 
buchholz hawkins ingram rochester architecture ibm early computers ibm journal research development vol 
pp 
september 
maturing parallel transfer disk technology finds applications vol 
pp 
february 
boral dewitt database machines idea time passed critique database machines tech 
rep technion august 
voelcker disks reach gigabyte ieee spectrum vol 
pp 
february 
manuel barney big drag computer throughput electronics vol 
pp 
november 
salem garcia molina disk striping tech 
rep eecs department princeton university december 
dewitt gerber graefe kumar gamma high performance dataflow database machine tech 
rep department computer sciences university wisconsin madison march 
connection machine model cm technical summary tech 
rep ha thinking machines april 
floyd short term file patterns unix environment tech 
rep department computer science university rochester march 
file migration distributed computer systems tech 
rep lbl lawrence berkeley laboratory july 
ousterhout harrison kunze kupfer thompson trace driven analysis unix bsd file system proceedings th symposium operating systems principles operating systems review vol 
pp 
december 
butterfly system tech 
rep bbn advanced computers incorporated september 
bbn advanced computers programmers manual april 
dean schantz programming support cronus distributed operating system sixth international conference distributed computing systems pp 
may 
schantz elementary file system tech 
rep dos bbn april 
scott analysis parallel merge sort tech 
rep department computer science university rochester 
preparation 
