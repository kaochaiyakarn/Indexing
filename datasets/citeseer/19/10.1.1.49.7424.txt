changing ordering knuth bendix completion andrea sattler klein fachbereich informatik universitat kaiserslautern kaiserslautern germany email sattler informatik uni kl de 
answer question posed djk show huet completion algorithm hu incomplete may generate term rewriting system confluent modified way reduction ordering completion changed completion provided new ordering compatible actual rules 
particular show problem may arise modified completion algorithm terminate algorithm terminates failure generated finite noetherian term rewriting system may non confluent 
existing implementations knuth bendix algorithm provide user help choosing reduction ordering equation encountered user options especially orient equation manually 
integration feature widespread assumption equations oriented hand completion completion process terminates success generated finite system nonterminating locally confluent system see kz 
examples show assumption true 
knuth bendix completion procedure important deduction tool term rewriting systems 
finite set equations reduction ordering input knuthbendix completion procedure tries generate complete confluent terminating term rewriting system presents equational theory basic steps completion procedure computation certain equational consequences generation rewrite rules orienting equations reduction ordering 
completion procedure may terminate success generates finite complete term rewriting system equivalent failure may terminate 
case computes successive approximations infinite complete system equivalent completion procedure terminates success generated finite complete system decide word problem terms equivalent normal forms 
correctness specific version knuth bendix completion procedure proved huet hu 
bdh bachmair introduced approach formalized notion completion framework equational inference system introduced notion proof orderings proving correctness completion procedure 
proved correctness large class completion procedures 
proof huet bachmair essentially fact rules generated completion process oriented reduction ordering huet proof mainly noetherian induction reduction ordering 
bachmair proof ordering extension proof 
requirement fixed reduction ordering completion guarantees successively generated systems noetherian 
may wonder completion procedure remains correct required systems noetherian requiring termination systems proved reduction ordering 
practical point view desirable property allow change reduction ordering completion 
general easy choose appropriate reduction ordering set equations 
completion procedure fail tries orient equation corresponding terms incomparable reduction ordering 
failure avoided complete term rewriting system 
failure avoided completion may fail 
equation oriented ordering cases problem circumvented choosing ordering 
restarting completion process new reduction ordering prefer carry completion process incremental fashion continue completion new ordering recomputing critical pairs rules previously considered 
requirements needed ensure completion remains correct modifications 
obviously new ordering compatible actual term rewriting system order guarantee system terminating 
requirement strong guarantee correctness procedure 
practice knuth bendix algorithm usually interactively 
reason human interaction specify incrementally reduction ordering completion stepwise refine reduction ordering input needed 
current implementations completion methods example system rrl kz user refine actual reduction ordering completion orient equations comparable actual ordering hand 
feature allows delay testing termination critical pairs considered proposed de 
case longer guaranteed resulting system generated systems terminating completion process may terminate due computation infinite reduction sequence 
methods detect certain kinds non termination rewriting proposed plaisted pl purdom pu 
successful computation case termination test delayed 
resulting term rewriting system confluent noetherian locally confluent implicitly literature see de pu explicitly stated example kz 
course true interreduction completion critical pair joinable intermediate system joinable resulting system 
practice interreduction essential reasons efficiency 
interreduction rule resolve critical pair completion may exist final system 
final system confluent 
consider questions analyse problems may arise completion algorithm modified ways described 
doing focus attention string rewriting systems 
string rewriting systems viewed special term rewriting systems term rewriting systems unary function symbols occur 
usually order complete string rewriting system total reduction ordering 
case failure arise completion procedure generate infinite complete string rewriting system 
string rewriting system completed desirable possibility change ordering completion incremental fashion way divergence completion non termination completion may avoided 
turn lot problems may arise allowed change ordering completion mentioned input restricted string rewriting systems 
interreduction modified completion algorithm correct algorithm terminate enumerates infinite system infinite system non confluent 
due fact generated system non noetherian local confluence confluence may coincide 
concerning interreduction prove result interreduction corresponding modified completion process terminate generated system may equivalent initial set equations 
corresponding modified completion algorithm partially correct sense generated system complete algorithm terminates success 
obviously generated system noetherian case 
show need locally confluent rules resolve critical pairs completion may deleted interreduction 
example construct illustrate phenomenon interesting theoretical point view artificial reduction orderings artificial completion strategy example recursive path orderings de huet completion algorithm hu 
results give answer open problems listed djk open see djk asking example showing huet completion algorithm hu incomplete allows change reduction ordering completion provided new ordering compatible actual rules 
examples widespread assumption says termination guaranteed completion local confluence assured soon critical pairs considered see kz 
results may affect correctness existing implementations completion provide option orient equations hand 
basic definitions notations recall basic definitions notation brief 
reading concerning string rewriting systems refer bo bo ja 
sigma finite alphabet 
sigma denotes set strings sigma including empty string 
string rewriting system srs short sigma subset sigma theta sigma elements called rewrite rules written 
srs induces step reduction relation sigma defined way sigma exist strings sigma rule urv 
reflexive transitive closure denoted say reduces descendant string called irreducible modulo hold string reduces irreducible called normal form analogously denotes reflexive symmetric transitive closure relation called thue congruence induced called equivalent induce thue congruence 
srs important problem word problem decide arbitrary strings congruent modulo word problem srs undecidable finite 
decidable finite noetherian confluent string rewriting system called noetherian infinite chain form rx rx exists called confluent sigma holds descendants joinable common descendant 
string rewriting systems noetherian confluent called complete convergent 
srs complete string unique normal form holds arbitrary strings congruent modulo normal forms modulo 
srs complete addition finite word problem simply solved reduction 
kb knuth bendix shown noetherian srs confluent called critical pairs joinable 
pair strings called critical pair exist rules conditions satisfied 
ul sigma ur 
vl sigma vr decidable finite noetherian srs confluent 
remains problem decide finite srs noetherian 
general problem undecidable possible transform equivalent finite noetherian srs idea srs noetherian exists ordering sigma admissible implies sigma wellfounded infinite descending chain compatible holds rules 
total wellfounded admissible ordering sigma finite srs transformed equivalent finite noetherian srs orienting rules 
confluent exists critical pair corresponding normal forms identical 
adding rule obtain equivalent system noetherian 
repeating process system confluent transformed infinite equivalent complete system 
algorithm sketched due knuth bendix kb known knuth bendix completion algorithm 
class admissible wellfounded orderings class syllable orderings total ordering sigma called precedence sigma max denote largest letter respect precedence occurs induced syllable ordering defined follows iff max uv max uv max uv au av fi 
syllable ordering corresponds known recursive path ordering monadic terms st 
seminal kb knuth bendix suggested keep rules small possible interreduction execution algorithm 
srs called rule irreducible irreducible gamma fl rg 
admissible ordering exists unique possibly infinite complete system compatible ordering equivalent original knuth bendix completion algorithm kb defined general term rewriting systems 
string rewriting systems may viewed special term rewriting systems term rewriting systems monadic terms constants occur 
set equations reduction ordering input algorithm generates provided failure infinite sequence term rewriting systems sets equations satisfying 
compatible 

set persisting equations empty 
set persisting rules rule called persistent belongs complete 
call limit system system generated knuth bendix completion algorithm 
information completion term rewriting systems refer literature see de 
modified completion order complete term rewriting system fixed reduction ordering 
ensures successively generated term rewriting systems terminating 
pointed important question knuth bendix completion procedure remains correct modified requiring generated systems noetherian 
call corresponding algorithm modified completion algorithm corresponding process modified completion short 
consider problem studying huet completion algorithm analyse remains correct allowed change reduction ordering completion process provided new ordering compatible actual term rewriting system 
precisely analyse correctness algorithm 
modified completion algorithm ca mod initial data finite set equations family recursive reduction orderings 
loop reduce equation select equation resp 
normal form resp 
obtained applying rules order applies 
gamma fm ng compatible 

ae ae add new rule set labels rules left hand side reducible ae say 
gamma fm ng ae ae kg fj ae ae kg fp aeg ae normal form ae rules aeg rules coming marked unmarked new rule ae unmarked 
failure endif failure endif endwhile compute critical pairs rules marked complete 
select unmarked rule say label set critical pairs computed rule rule label greater rule marked 
endloop starting point problem stated list open problems collected dershowitz djk problem 
huet proof hu completeness completion predicated assumption ordering supplied completion change process 
assume step completion ordering able order current rewriting relation necessarily old rules may deleted completion 
example showing completion incomplete persisting rules confluent 
analysing correctness algorithm ca mod particularly direct attention problem 
formulation problem points interreduction play essential role context 
question arises algorithm ca mod correct interreduction replace lines marked ones gamma fm ng fp aeg analyse correctness algorithm denote ca mod 
algorithms adopt fairness selection hypothesis hu 
hypothesis states rule label iteration rule label deleted rule label selected compute critical pairs 
assume stated modified completion algorithm fair sense 
assume algorithms ca mod ca mod simple strategies order compute critical pairs unmarked rule label selected 
furthermore sets implemented queues 
rule overlapped set rules done labels rules set rules considered rule label highest priority 
case algorithm ca mod ca mod terminates success say pair define modified completion interreduction interreduction completion generated term rewriting systems form increasing chain holds equational consequences added completion equivalent input system obviously properties independent fact fixed reduction ordering completion 
hold modified completion 
modified completion allowed change reduction ordering new ordering compatible actual rewrite system 
guaranteed generated systems noetherian modified completion 
successive term rewriting systems generated modified completion form increasing chain critical pair joinable joinable assumed fair strategy locally confluent 
consider case modified completion stops success 
case generated finite system noetherian addition 
modified completion partially correct generates complete system equivalent input system terminates success 
cases modified completion terminate 
generated infinite system complete cases 
consider case 
union family noetherian term rewriting systems form increasing chain need noetherian fact systems generated modified completion interreduction non noetherian 
example 
ab ac 
obviously noetherian overlap rule second 
corresponding critical pair abc 
abc irreducible reduced irreducible string abbc 
confluent knuth bendix completion procedure generate rule abc abbc rule abbc abc depending ordering completion 
consider case rule abc abbc added resulting system ab ac abc abc noetherian 
new overlap new rule abbc 
rule added 
add rule abbc situation similar resulting system ab ac abc abc abbc abbc noetherian new overlap rule added 
going way described generate infinite sequence noetherian string rewriting systems satisfying abg fab ab 
interreduction described process abg fab ab ing 
noetherian 
general modified completion correct may generate non noetherian system 
mentioned generated systems locally confluent 
confluent 
note system example confluent strongly confluent hu 
non noetherian local confluence confluence coincide 
modified completion generate non confluent systems 
know reduction induced acyclic intermediate systems noetherian 
example show non confluent 
example 
uv xa vbc uw abc abbc wa ab wa ab xa ob oc xa ob oc og 
noetherian 
overlaps rule overlaps rule rule overlaps rule 
overlapping rule rule yields critical pair uw joinable way oc uw overlapping rule rule yields critical pair abbc 
abbc irreducible reduced irreducible string rule 
adding rule abbc result noetherian system 
overlapping rule rule results critical pair joinable 
rule added overlaps rule rule 
corresponding critical pairs 
irreducible reduced irreducible 
adding rule result system noetherian 
critical pair joinable 
step new rule overlapped rules 
way infinite locally confluent system fab ab fab ab generated 
uw oc irreducible confluent 
examples simple modified completion algorithm 
easily checked algorithm ca mod generate infinite systems cases appropriate reduction orderings chosen 
algorithm ca mod correct general 
usually reduction orderings completion belong class simplification orderings de 
termination systems constructed previous examples proved simplification orderings example initial system successively generated systems self embedding compatible simplification ordering 
example systems contains set abbc abbc 
simplification ordering contains homeomorphic embedding relation string greater string abc simplification ordering 
srs containing rules abc abbc abbc compatible simplification ordering 
mentioned class orderings complete class syllable orderings 
syllable orderings simplification orderings prove termination previous examples 
question arises similar phenomena may occur restrict reduction orderings may modified completion class syllable orderings 
finite srs sigma underlying alphabet finitely sigma different syllable orderings sigma family 
reduction orderings modified completion process restricted finite set addition interreduction orderings compatible successively generated systems set modified completion interreduction correct reduction orderings input belong finite set 
conclude section theorem summarizes main results obtained far 
theorem algorithm ca mod holds 
algorithm ca mod correct general terminates input 
generated finite system complete equivalent may generate equivalent infinite system noetherian confluent 

algorithm ca mod correct string rewriting systems class syllable orderings started input 
string rewriting system 
family syllable orderings generated system noetherian confluent equivalent modified completion interreduction shown previous section huet completion algorithm remains correct allowed change reduction ordering completion provided new ordering compatible actual set rules interreduction addition orderings belong class syllable orderings 
example illustrated second condition restriction reduction orderings class syllable orderings essential correctness modified completion algorithm 
condition interreduction completion 
requirement essential correctness algorithm 
section consider question analyse correctness algorithm ca mod 
investigating special algorithm consider example analyse happen interreduction incorporated simple algorithm 
example 
ab ac 
mentioned example knuth bendix algorithm may generate rule abc abbc overlapping 
new rule reduce right hand side second rule 
way obtain noetherian system ab ac abbc abc 
overlap new rule rule abbc may generated 
interreduction rule reduce right hand sides second third rule 
yields ab ac abc abbc 
new rule overlaps rule overlap may result rule interreduction 
strategy described may generate infinite sequence noetherian string rewriting systems satisfying abg fab ab 
right hand side rule different wa ab modified infinitely times interreduction abg 
case noetherian confluent equivalent interreduction modified completion system input limit system generated non equivalent 
phenomenon due facts set may non noetherian interreduction process sense simulates computation certain reduction sequences respect course intermediate systems noetherian reduction process performed terminate 
noetherian computation certain infinite reduction sequence may simulated stepwise interreduction way rule may simplified rule simplified 
original rule simplified forms belong limit system may non equivalent example differs intended way syllable ordering compatible example simple modified completion strategy different ca mod shows syllable orderings modified completion longer guaranteed initial system generated limit system equivalent 
example 
fa cg 
syllable orderings induced precedence respectively 
compatible interreduction may result fb cg fa cg 
compatible may step rule added 
way obtain fb ag interreduction may result fc ag fb ag compatible may computations 
rule added fc bg 
new rule reduce right hand side rule 
interreduction results fa bg fc bg 
may change ordering way obtain 
strategy described infinite sequence generated 
persisting rules corresponding limit system empty 
equivalent main difference algorithm ca mod example way right hand sides rules simplified huet completion procedure hu standard completion procedure sense bachmair bdh 
standard completion procedure algorithm ca mod simplification right hand side rule results new rule 
contrast algorithm generated new equation time right hand side rule simplified 
algorithm ca mod applied input system example family 
reduction orderings satisfying steps performed sets fa bg fb cg generated 
equation oriented ordering rule added 
addition right hand side rule simplified 
way obtain fa cg 
overlaps rules algorithm ca mod sets 
generated system complete equivalent important fact illustrated example modified completion algorithm may fair corresponding original completion algorithm fixed reduction ordering interreduction process terminate 
example illustrates longer true allow change reduction ordering interreduction process 
possible case certain overlaps persisting rules considered 
example consider happens slightly modify input example 
add rules de ef extend orderings appropriately algorithm may generate sequence fde ef gg overlap rules de ef considered 
problem circumvented requiring ordering may changed modified completion actual set equations empty 
case guaranteed interreduction process terminate 
striking point example fact process described terminate set finite 
phenomenon arise huet completion algorithm modified versions ca mod ca mod string reducible step process reducible respect systems addition new rules built normal forms happen rule generated twice huet completion algorithm modified versions ca mod ca mod 
algorithm ca mod addition changes ordering restricted cases corresponding sets equations empty system equivalent input system generated 
example 
qh ga qa qh ga qh qa qd qc qh qb wh wa add wh hdd wa abb ee go hbc 
syllable ordering induced precedence syllable ordering induced precedence 
defined 
claim 
input algorithm ca mod generate infinite sequence holds gamma cg ad odd fab odd jg ab jg fad jg fl hd ab cg fl ab og fl hb ad cg fl eegad gog rules rules marked 
proof 
proof appendix 
analysis proof shows ordering changed corresponding set equations empty different empty 
mentioned rule may generated twice execution algorithm ca mod 
claim implies set persisting rules holds gamma ad odd ng fab odd ng ab ng fad ng orderings infinitely times described process compatible 
noetherian 
equivalent initial system initial rule obviously congruent modulo easily checked limit system generated example confluent 
algorithm ca mod generated noetherian confluent system case 
mentioned equivalent due facts right hand side rule simplified infinitely times process described 
original form rule simplified forms belong hand rules redundant obviously non redundant rule simplified infinitely times generated limit system may non confluent crucial non redundant rule may resolve critical pairs 
instance consider modification example 
extend precedences syllable orderings induced 
add rules uv uf way overlap rules uv considered 
algorithm ca mod started input happen moment rules uv overlapped corresponding critical pair joinable way 
symbols left hand sides rules added new ones new rules influence execution algorithm ca mod limit system generated union limit system example set fuv uf 
critical pair joinable limit system limit system confluent case 
example gives answer problem djk give example algorithm generates equivalent noetherian system confluent 
purpose consider example see happen remove crucial rule 
rule overlapping reduction algorithm ca mod generate limit system 
case generated limit system complete equivalent input system 
rule set simplified infinitely times modified completion process rule gabc eegad generated overlapping simplified equation go eegad oriented rule eegad go simplified equation go yield rule go simplified equation go yield rule eegad go 
case infinite simplification affect equational theory limit system rules equations generated simplification process redundant reduction steps performed go odd eegad go greater 
proof claim shows rule go reductions execution algorithm ca mod 
shows rule overlapped corresponding critical pair trivial case 
remove rule go rule input system example algorithm ca mod generate limit system gamma gog limit system generated example 
rule gabc generated overlapping simplified infinitely times example 
limit system generated superset input system systems equivalent 
reduction steps performed go gabc 
go 
noetherian equivalent input system confluent 
order examine phenomenon closely consider relationship components critical pair gabc changes execution algorithm ca mod 
moment critical pair gabc considered string gabc irreducible string reduced irreducible string 
ordering step rule gabc eegad generated situation illustrated 
rules abc eegad go generated 
critical pair gabc joinable illustrated 
note strings gabc eegad comparable reduction ordering induced current set rules moment 
ordering steps 
doing rule added 
new rule simplify rule eegad go 
way equation go obtained 
gabc eegad fig 
gabc go eegad fig 
gabc go eegad fig 
rule ad added rule simplified equation go 
equation go yields rule go 
string reduced go 
critical pair gabc joinable connected string 
gabc go eegad gabc go eegad gabc go eegad fig 
gabc go eegad fig 
steps 
overlapping rule gab eegad generated 
new rule simplification situation illustrated arises 
rule ab generated overlapping strings gabc related illustrated 
gabc go eegad fig 
gabc go eegad fig 
equation go simplified rule eegad go 
situation similar illustrated critical pair gabc connected string peak go 
fact subsequent steps situation arise 
eegad gabc go eegad fig 
gabc go eegad fig 
eegad small steps critical pair gabc connected peaks go odd number greater peaks go number greater 
original rewrite proof gabc illustrated transformed infinitely times execution algorithm ca mod generated limit system gabc joinable 
example shown algorithm ca mod generates infinite noetherian system presenting equational theory input system limit system may non confluent 
remains check algorithm ca mod partially correct generates correct results terminates success 
algorithm ca mod terminates success finite system noetherian equivalent input system 
case generated system may 
example 
dgc ubc abc ef zf hz yb iy ag 
syllable ordering induced precedence syllable ordering induced precedence 
family syllable orderings satisfying 
compatible algorithm ca mod generate sets rules unmarked 
overlaps rules gamma abc ef zf hz yb iy ag rules rules marked 
step rule marked critical pairs rule rules computed 
rule overlaps rule 
corresponding critical pair ubc 
obtain rules rules marked 
critical pair ubc joinable ubc holds 
step rule marked corresponding critical pairs computed 
overlaps rule rules obtain rules rules marked 
rule overlaps rule 
corresponding critical pair 
hg 
irreducible rule added 
new rule reduce left hand side rule 
gives gamma hg 
xh irreducible xh rule xh added 
yields gamma rules rules marked 
overlaps rule rules sets generated 
step rule overlapped rule 
gives fab igg 
compatible step 
ab ig irreducible ig ab rule ig ab generated 
new rule reduce left hand side rule 
way obtain dgc ubc abc ef zf hz yb iy xh ig abg og 
ubc sets generated 
rule overlap rules 
obtain rules rules marked 
rule marked 
rule overlaps rule 
corresponding critical pair joinable way 

rule overlap rules algorithm ca mod sets 
confluent ubc irreducible 
algorithm ca mod terminates success generated noetherian system non confluent 
order illustrate phenomenon consider relationship strings ubc form critical pair changes described process moment process critical pair considered joinable see 
rule solve critical pair ubc simplified 
critical pair longer joinable connected respect illustrated 
ubc fig 
ubc fig 
steps ordering changed ig greater ab respect new ordering 
order illustrate fact rewritten graph 
steps rule ig ab generated overlapping 
rule deleted situation illustrated arises 
graph peaks 
corresponding critical pairs holds critical pair ubc considered critical pair joinable 
critical pair ubc joinable 
ubc fig 
ubc fig 
concluding analysis correctness algorithm ca mod summarize results obtained 
theorem algorithm ca mod correct 
terminate input 
generated infinite system may non equivalent addition may may confluent 

terminates input 
generated finite system noetherian equivalent may non confluent 
concluding remarks analysed huet algorithm remains correct modified way recursive reduction ordering family 
recursive reduction orderings required input 
equation considered step algorithm trivial algorithm proceed follows 
failure ordering compatible actual set rules equation consideration oriented possible 
shown variant huet completion algorithm correct regardless fact interreduction 
particular proved case interreduction algorithm partially correct algorithm terminates success generated finite noetherian system may non confluent 
finite term rewriting system noetherian exists recursive reduction ordering compatible systems generated modify huet algorithm follows reduction ordering ensure termination successively generated term rewriting systems allow choose arbitrary orientation equations 
resulting system proved noetherian certain method algorithm continue usual way 
algorithm terminate failure 
variant knuth bendix completion algorithm apart slight modifications considered times literature see bl ho pl 
versions usually interreduction authors restrict attention cases algorithm considered terminates success 
course system generated way finite complete equivalent corresponding input 
examples show careful restrictions included 
interreduction infinite non noetherian non confluent term rewriting system may generated way 
contrast usual completion algorithm modified algorithm procedure word problem input system 
interreduction incorporated lot problems may arise 
generated limit system may non equivalent corresponding input noetherian equivalent input system confluent 
example shown case may arise algorithm terminates success 
huet oppen state ho case algorithm terminates success generated system locally confluent hu huet brief proof turned difficult expected revealed critical conditions justification rewrite rules simplifications may met existing implementations 
particular require successive term rewriting systems constructed algorithm noetherian 
terminating reason exist uniform reduction ordering showing termination sets 
unfortunately huet explain restriction needed 
apart aware hints literature huet algorithm incorrect modified way described 
contrary usually assumed modified completion algorithm partially correct generates complete system equivalent corresponding input system terminates success 
example widespread assumption 
results important practical point view existing implementations knuth bendix algorithm provide option orient equations hand 
example shows case option completion process corresponding process terminates success thing conclude generated system equivalent input system 
observation may affect correctness existing implementations completion algorithm 
example run example system rrl version kz option orient equations manually 
choosing parameters option critical pick option norm determine strategy computing critical pairs normalization strategy obtained result example system locally confluent 
klaus birgit reinert valuable comments previous version 
bl buchberger 
algebraic simplification 
computer algebra springer berlin 
bdh bachmair dershowitz hsiang 
orderings equational proofs 
proc 
ieee symposium logic computer science cambridge ma 
bo book 
thue systems rewriting systems 
journal symbolic computation 
bo book otto 
string rewriting systems 
texts monographs computer science springer new york 
de dershowitz 
orderings term rewriting systems 
theoretical computer science 
de dershowitz 
completion applications 
ait kaci nivat eds resolution equations algebraic structures vol 
ii rewriting techniques academic press new york 
djk dershowitz 
jouannaud klop 
open problems rewriting 
proc 
fourth international conference rewriting techniques applications como italy lecture notes computer science springer berlin 
djk dershowitz 
jouannaud klop 
problems rewriting 
proc 
fifth international conference rewriting techniques applications montreal canada lecture notes computer science springer berlin 
hermann 
divergent term rewriting systems 
report centre de recherche en informatique de nancy 
ho huet oppen equations rewrite rules survey 
book ed formal language theory perspectives open problems academic press new york 
hu huet 
confluent reductions properties applications term rewriting systems 
journal acm 
hu huet 
complete proof correctness knuth bendix completion algorithm 
journal computer system science 
ja 
confluent string rewriting 
eatcs monographs theoretical computer science vol 
springer berlin heidelberg 
kb knuth bendix 
simple word problems universal algebras 
leech ed computational problems algebra pergamon new york 
kapur winkler 
knuth bendix procedure buchberger algorithm synthesis 
proc 
international symposium symbolic algebraic computation portland oregon 
kz kapur zhang 
rrl rewrite rule laboratory user manual ge corporate research development report new york revised version may 
pl plaisted 
simple non termination test knuth bendix method 
proc 
eighth international conference automated deduction oxford england lecture notes computer science springer berlin 
pu purdom 
detecting loop simplifications 
proc 
second international conference rewriting techniques applications bordeaux france lecture notes computer science springer berlin 
st steinbach 
comparing strings iterated syllable ordering recursive path orderings 
seki report sr universitat kaiserslautern 
appendix example 
qh ga qa qh ga qh qa qd qc qh qb wh wa add wh hdd wa abb ee go hbc 
syllable ordering induced precedence syllable ordering induced precedence 
defined 
claim 
input algorithm ca mod generate infinite sequence holds gamma cg ad odd fab odd jg ab jg fad jg fl hd ab cg fl ab og fl hb ad cg fl eegad gog rules rules marked 
proof 
proof done induction sets generated algorithm ca mod started input 

note compatible check orientation rule generated algorithm ca mod rule belong sets 
induction basis compatible holds rules unmarked 
overlaps rules gamma go hbc 
rules rules marked 
step rule marked critical pairs rule rules computed 
rule overlaps rule 
overlap yields trivial critical pair ego ego 
algorithm ca mod generates sets rules rules marked 
step rule considered 
rule overlaps rules 
corresponding set critical pairs abc 
consider critical pair gabc 
gabc irreducible string reduced irreducible string 
gabc rule gabc generated 
new rule simplify rule 
way obtain gamma gabc step critical pair abc considered 
qc rule abc added 
new rule simplify rule 
way obtain gamma abc og go normalizing critical pair result pair rule added 
holds gamma abc strings go irreducible 
obtain gamma abc gog rules rules marked 
claim holds 
induction step assume claim holds 
suppose algorithm ca mod just generated sets consider steps algorithm perform 
rule marked 
rule overlaps rules 
corresponding set critical pairs ad hd wab cg 
irreducible string reduced rule 
rule added 
new rule simplify rules resulting sets gamma eegad gog fl cg fad hd wab gog normalizing critical pair ad result pair ad rule ad added 
rule simplify rule 
way sets gamma eegad gog ad og wab go go cg obtained 
hd irreducible string wab reduced ab get fl hd ab cg go go cg rule string reduced gives fl gog cg go joinable gamma eegad gog ad og fl hd ab gog step rule ab marked 
overlaps rule rules label smaller obtain rules number smaller marked 
rule overlaps rules 
corresponding critical pairs ab hb wad cg 
normalizing critical pair gab yields pair gab eegad gab eegad rule gab eegad generated 
new rule simplify rules 
way sets gamma eegad gog fl ad hd ab cg fl gab eegad cg fab hb wad gog obtained 
qd qc rule ab generated 
rule gab eegad simplified gamma eegad gog fl ad hd ab cg ab og wad go go eegad cg normalizing equation hb wad yields hb ad gives fl hb ad cg go go eegad cg applying rule string reduced eegad rule eegad go generated gamma eegad gog fl ad hd ab cg ab og fl hb ad eegad gog eegad cg critical pair go eegad resolves trivially 
holds step rule ad marked 
overlaps rule rules label smaller obtain rules rules marked 
claim holds 

