constraint god object method haptic display zilles salisbury department mechanical engineering artificial intelligence laboratory massachusetts institute technology cambridge ma haptic display process applying forces human observer giving sensation touching interacting real physical objects 
touch unique senses allows simultaneous exploration manipulation environment 
haptic display system main components 
haptic interface display device generally type electro mechanical system able exert controllable forces user degrees freedom 
second object model mathematical representation object containing shape properties related way feels 
third component haptic rendering algorithm joins components compute real time model forces give user sensation touching simulated objects 
focuses new haptic rendering algorithm generating convincing interaction forces objects modeled rigid polyhedra fig 

create virtual model haptic interface called god object conforms virtual environment 
haptic interface servo ed virtual model 
algorithm extensible functional descriptions lays groundwork displaying shape information surface properties friction compliance 
process feeling objects interface familiar context teleoperator master devices touch interact remotely located objects 
interest enabling interaction virtual objects led investigate devices algorithms permit touch manipulative interaction collectively haptic interactions virtual objects 
phantom haptic interface permits users feel control forces arising point polygonal model space shuttle polygons 
example complexity objects god object algorithm allow user touch 
actions simulated objects 
point interaction paradigm greatly simplifies device algorithm development permitting bandwidth force fidelity enable surprisingly rich range interactions 
reduces problem computing appropriate interaction forces haptic rendering tracing motion point objects generating force components representing interaction objects 
term haptic interface point describe endpoint location physical haptic interface sensed encoders 
done phantom style device max force 
force virtual objects feel reasonably solid saturating motors 
exploring virtual environments users tend force 
oe gamma gamma gamma gamma gamma gamma generation contact forces volumes small dot represents haptic interface point 
possible paths reach location square shown history know path taken 
vector field method dimensions subdivide square area assume user entered closest edge 
force vectors normal edge proportional distance penetrated 
method easily expanded dimensions 
due inherent mechanical compliance haptic interface devices maximum stiffness virtual object limited 
side effect haptic interface point penetrates simulated object greater distance possible real life 
typical demonstrations system user presses haptic interface half inch virtual object surface 
humans poor position sense usually goes unnoticed 
previous haptic rendering algorithms tried determine feedback force penetration 
volume methods mapping position space force 
group methods label vector field methods 
vector field methods number drawbacks 
unclear piece internal volume associated surface 

force discontinuities encountered traversing volume boundaries 

small thin objects internal volume required generate convincing constraint forces 
volume penetration logic generating proper interaction force vectors difficult 
user contact center large flat surface obvious direction force normal plane 
choice virtual surface user touching ambiguous boundary surfaces approached 
multiple paths different feedback gamma gamma gamma delta delta delta delta force summation multiple objects perpendicular surfaces forces sum correctly surface intersection angle obtuse force vector large 
surfaces parallel force large factor 
forces taken reach internal location 
method suggests subdividing object volume associating subvolume surface 
inside sub volume force normal associated surface magnitude function distance surface hooke law kx 
method causes sensation sharpness felt corners due sudden force discontinuity passing region 
useful truly sharp corners desired confusing transitions accidentally 
method works simple geometric shapes reasonably easy construct subspaces hand 
addition shape described equation modeled 
spheres feedback force direction vector pointing sphere center haptic interfaces point magnitude function distance point penetrated sphere surface 
inherent simplicity methods allowed interesting dynamic objects surface effects methods flexible allow arbitrary geometries drawbacks 
problems multiple objects vector field approach tempting construct complex objects combining overlapping simple objects 
regions object intersections occur consider computing net reaction force adding contributions object force field hope generate correct sensations corners edges 
compute correct force 
user contact object simultaneously net surface stiffness larger surface 
objects meeting perpendicular surfaces forces summed distance solid vector addition orthogonal components 
angle sur xy push thin objects 
user touches surface feels small force pushes harder penetrates deeper object passes halfway object force vector changes direction shoots side 
faces obtuse resulting reaction force magnitude corresponding apparent stiffness approaches twice surface 
surfaces intersecting acute angles stiff surface 
system longer robust stiffness discontinuities exceed maximum stable stiffness 
generating believable forces requires directly determining distance haptic interface point penetrated object surface passed arrive current position 
constraint method described section computes distance directly 
problems thin objects vector field methods break thin objects rendered 
limited servo mechanical haptic interface point travel somewhat object force applied object feel solid 
distance greater thickness object vector field model produces unrealistic sensations 
shown haptic interface point reaches halfway object pulled rest way 
algorithm assumed user entered side 
effect takes place convex corner 
possible solution keep history contact occurrences know surfaces haptic interface point passed 
history old locations clear surface meant touched force displayed unfortunately method rapidly numerically cumbersome 
important compact representation memory processing time 
describe compact representation history 
god object algorithm define explain reasoning god object representation utilized rendering polyhedral representations objects section 
term god object previously similar spirit describe virtual object controlled human user physical simulations 
history god object location calculated previous servo cycle current haptic interface point set surfaces currently impeding motion 
discussion constraints section 
lagrange multipliers find new location god object contact virtual object 
god object new location chosen point locally minimizes distance god object haptic interface point subject constraint god object particular surface 
mathematics method explained section god objects saw previous section number problems arise penetration haptic interface point virtual objects 
know haptic interface point penetrating virtual objects free define additional variables represent virtual location haptic interface 
location call god object 
complete control god object prevent penetrating virtual objects force follow laws physics virtual environment 
god object placed haptic interface point haptic interface object infinitely stiff 
god object remains surface objects direction force ambiguous 
allows realistic generation forces arising touching object 
particular method suitable thin objects arbitrarily shaped polyhedra 
free space haptic interface point collocated haptic interface moves object god object remains surface 
god object location computed point currently contacted surface distance haptic interface point minimized 
assumes god object moves surface impeded friction inclusion friction simple extension storing additional state variables position god object variable degree freedom apparatus keep useful history object motion compact manner 
degree freedom haptic interface god object point needing coordinates fix location 
god object location determined simple impedance control techniques calculate force displayed 
stiffness damping applied haptic interface point god object representing local material properties 
stiffness damping vary objects object long exceed maximum values device limited servo stiffness stability 
addition non linear give surfaces interesting sensations click button 
constraints interested simulating volumes interact volumes surfaces 
general convenient represent objects surfaces 
simplify mathematics problem planar surfaces 
cut haptic representation derived polyhedral geometry represent objects visual rendering 
straightforward lists vertices edges facet orientation standard polyhedral representations sufficient permit god object algorithm 
particularly convenient enables haptic rendering large body existing visually render able objects 
mesh triangular elements fundamental assures nodes coplanar 
graphic models require exactness required haptic models uncommon find objects surfaces nodes coplanar 
problems caused surfaces avoided triangular mesh 
addition plane completely determined points move nodes fly geometrically acceptable surfaces 
moving nodes due applied forces way implement deformable surfaces 
polygonal representation objects collision detection simple 
infinite surface planar constraint denote surface active old god object located positive direction surface normal distance surface due round error digital system newly computed god object position infinitesimally virtual surface 
precautions taken cross longer restrained virtual surface 
prohibit behavior add small constant calculated distance god object virtual surface 
xxxx xxxx xxxx motion convex surfaces takes place steps small dot represents location haptic interface larger dot represents approaching edge left surfaces active new god object location places plane left surface boundaries god object free left surface fall right surface 
distortion shape generally imperceptible 
haptic interface point negative distance surface side 
creates surfaces way constraints penetration surfaces infinite extent surface active require contact take place boundaries surface 
line traced old god object new haptic interface point 
line passes facet edges facet considered active 
touching convex portions objects surface active time 
transition god object surfaces sharing convex edge requires steps 
surface active contact point stay plane surface necessarily boundaries step places god object second surface plane surface 
servo loop surface longer active god object fall second surface 
times distances involved small cause imperceptible transient distortion shape 
probing concavity multiple surfaces active simultaneously 
touching concave conceptually equivalent plane just virtual surface computation god object distances 
method treats surfaces single sided surfaces respecting fact objects formed closed set surfaces 
physical reason touch inside outside object simultaneously 
respects beneficial simulation haptic interface configuration haptic interface starts inside virtual object user simply move object free space 
vector field methods workaround introduced contingency 
theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta acute concave intersection surfaces god object able cross surfaces special precautions taken 
large dot represents position god object small dot represents haptic interface 
user pressing surface sliding god object cross negative side surface haptic interface constraint activated 
prevent iterative routine 
intersection planes constraints active god object motion restricted line intersection planes 
contact intersection surfaces active net constraint point intersection planes 
intersection surfaces active time user constrained point 
identify active constraint temporarily limit search neighboring surfaces 
additional care taken surfaces intersect acute angle viewed outside surfaces form concavity 
user presses surface slides possible god object cross constraint surface haptic interface point 
god object crosses wall free constraint allow crossing 
solution iterate process 
iteration find set active constraints calculate new god object location 
new god object location haptic interface point constraints neighboring surfaces checked see additional surfaces active 
additional constraints new god object location computed 
iteration continues new constraints 
iteration process requires little time number possible constraints neighborhood contact small 
maximum number iterations equal maximum number possible simultaneous constraints 
god object location computation set active constraints lagrange multipliers determine location new god object 
equation gives energy virtual spring unity stiffness coordinates god object coordinates haptic interface point 
constraints added planes order form shown equation 
general case freedom haptic interface involves constraints constrained instances zeros replace unused constraints giving lower order system 
gamma gamma gamma anx bn cn gamma dn new location god object minimizing equation setting partial derivatives 
constraints order second order differentiation simple 
fact differentiation done symbolically actual coefficient values just substituted runtime 
general case variables give partial derivatives organized set simultaneous equations gamma gamma gamma gamma gamma gamma matrix equation number useful properties 
symmetric upper left hand corner identity matrix lower left hand corner null matrix require row swapping invertible 
properties requires multiplicative operations multiplies divides solve important sure surfaces parallel cause matrix singular 
case constraints requires multiplicative operations case single constraint takes 
constraints active god object located position haptic interface 
symmetry identity null portions need variables matrix locations right side vector 
performance described algorithm implemented run mhz pentium interfaced phantom haptic interface 
objects triangular facets simulation runs khz 
time spent running simple collision detection algorithm 
improved collision detection algorithm significant speedups expected 
due local nature god object scheme collision detection part problem scales size model 
constraint god object method allows user intuitively control point probing virtual object prevents point penetrating objects 
god object remains surface virtual objects easy compute realistic force vectors apply user 
addition method allows extensive libraries objects existence 
furthermore god object implementation provides additional computation coordinates contact point suitable visual display haptic interactions 
current research focuses adding number important haptic effects algorithm 
current algorithm faithfully reproduces sharpness occuring discontinuity adjacent surfaces possible interpolate surface normals surfaces smooth transitions way currently practice visual shading algorithms phong shading 
demonstrated commonly encountered haptic sensations friction texture surface impedance convincingly displayed careful modulation force vector applied user 
effects far limited simple demonstrations object shapes requiring generality algorithm expect part general haptic rendering engine currently development acknowledgments supported part contracts onr 
addition authors thomas swarup dr david brock dr brian derek schulte lab contributions suggestions 
durlach virtual reality scientific technological challenges report produced national research council national academy sciences washington december 
zeltzer new model efficient dynamic simulation proceedings fourth eurographics workshop animation simulation pp 
lin manocha canny fast collision detection geometric models tech report tr department computer science university north carolina 
design force reflecting fingertip sb thesis mit eecs department may 
salisbury phantom haptic interface device probing virtual objects proceedings asme winter annual meeting symposium haptic interfaces virtual environment teleoperator systems chicago il november 
salisbury brock swarup zilles haptic rendering programming touch interaction virtual objects appear proceedings acm symposium interactive graphics monterey ca april 
sheridan telerobotics automation supervisory control mit press cambridge ma 
zilles haptic rendering haptic interface ms sb thesis mit mechanical engineering department may 
