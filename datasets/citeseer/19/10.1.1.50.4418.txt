calculus generative communication ciancarini gorrieri zavattaro department computer science university bologna piazza di porta donato bologna italy telephone fax email gorrieri cs unibo introduce theory communicating concurrent processes 
generative communication asynchronous interprocess communication mechanism shared data structure information items introduced read withdrawn data structure parallel processes 
representative language paradigm coordination language linda 
idea embed generative communication process algebra ccs 
advantage having process algebraic framework formal techniques developed process algebra area easily adapted field generative communication 
investigate standard observational equivalences bisimulation failure trace observe failure semantics appropriate model features generative communication 
keywords coordination languages generative communication process algebras observational equivalences asynchronous communication realized means insertion reading withdrawal elements shared multiset peculiar feature family coordination languages gelernter carriero 
communication mechanism referred generative communication introduced time coordination language linda gelernter 
linda provides interprocess communication medium called tuple space ts short shared memory contains set messages produced set processes 
ts accessible parallel process means primitives message produces message read message reads consuming message message reads consumes message 
peculiar features generative communication listed follows ffl process insert message ts performing operation 
ffl process perform read operation required message ts blocks 
side effect execution operation withdrawal read message 
ffl insertion order messages ts influence reading order 
ffl multiple occurrences message ts time ts multiset messages 
communication mechanism said generative message generated process independent existence ts explicitly withdrawn 
fact insertion ts message equally accessible processes bound 
generative communication provided linda languages shared prolog brogi ciancarini bauhaus linda carriero gelernter zuck 
main difference languages type messages shared memory linda uses ordered tuples shared prolog logic terms unordered multisets 
sake generality simplicity messages treated atomic items remainder referred means identification name 
aim introduce framework reason formally generative communication 
idea embed communication mechanism process algebra 
way formal techniques analyzing concurrent systems process algebra area easily adapted field generative communication 
standard process algebras ccs milner csp hoare acp bergstra klop provide synchronous handshake communication mechanism 
hand asynchronous communication 
order embed generative communication process algebra crucial problem way communication medium represented 
trivial proposal provide extra agent able receive messages senders store multiset give required messages receivers 
means implementing asynchronous communication means synchronous communication auxiliary communication manager 
problems arise communication medium represented single agent ffl agent full responsibility managing interprocess communication design may complex may execution bottleneck 
ffl unique centralized store messages may exist 
example distributed linda implementations carriero gelernter messages usually distributed 
far solution problems concerned propose assume communication manager fully distributed precise propose consider message active entity able give contents potential reader 
communicating processes 
way explicit centralized communication manager messages treated autonomous agents 
basic features proposal ffl autonomous agent hai introduced represent sent message ffl prefix denotes message sent 
execution consists addition agent hai environment gamma 
label step representing operation local autonomous step computation depend environment 
ffl extra prefix introduced represent request reading message consuming 
ffl agent hai consumed agent performs operation hai gamma 
read agent performs read operation hai gamma 
hai labels represents complementary actions respectively 
compares different cases generative communication processes graph reader performs operation considered second graph describes case read operation 
important difference cases due behavior synchronization simultaneous execution complementary actions 
fact reader performs operation message withdrawn executes read agent hai removed 
organized follows 
section formally define syntax operational semantics language 
section examples concurrent systems order highlight peculiar features language 
section analyze observational semantics language bisimulation failure trace 
observe failure appropriate fact bisimulation describe features generative communication interested trace coarse 
section report conclusive remarks analyze originality table syntax null agent hai message agent prefix operator eje parallel operator choice operator restriction operator relabeling operator agent variable rec recursion operator message label gamma 
label fl fl fl fl language respect possible representations generative communication mechanism standard ccs compare framework proposals embedding asynchronous communication process algebras 
proofs propositions reported full ciancarini gorrieri zavattaro 
language semantics ffl message ranged set possible messages ffl fa ranged set prefixes ffl label fa ranged ff fi set labels ffl obs label ranged fl set visible labels ffl delta delta delta obs gamma 
obs bijections fl fl ffl ranged set agent variables 
agent expressions ranged defined table 
null agent class terms hai represent possible elementary agents 
agent deadlocked able perform kind action hai represents message ready read withdrawn 
prefix operator define possible actions executed agents actions depending kind prefixes 
second correspond operation read representing request withdrawal reading message respectively 
third prefix represents operation causes addition hai environment table operational semantics gamma 
gamma 
gamma 
gamma 
hai gamma 
hai gamma 
hai ff gamma 
jq ff gamma 
jq qjp ff gamma 
qjp fl gamma 
fl gamma 
jq gamma 
jq ff gamma 
ff gamma 
ff gamma 
fl gamma 
fl fl fl fl fl gamma 
gamma 
gamma 
ff gamma 
ff gamma 
rec ff gamma 
rec ff gamma 
invisible prefix stands local autonomous steps computation 
meaning operators usual 
parallel operator combine agents able perform actions parallel synchronize complementary actions 
choice operator represent non deterministic alternative choice combined agents 
restriction operator define local actions 
relabeling operator allows dynamic changes name messages 
recursion operator definition recursive agents 
say bound occurrence subexpression rec guarded occurrence subexpression say closed guarded bound guarded variables occur 
agent ranged set closed guarded terms 
operational semantics language described labeled transition system agent label gamma 
labeled relation gamma agent theta label theta agent smallest satisfies axioms rules table 
examples dining philosophers classical problem dining philosophers represented language giving message agents hai meaning objects 
message agents represent forks table fork grabbed freed philosophers message sent withdrawn agent language 
fork modeled agent hf table introduces different representations problem dining philosophers 
representation agent philosopher grabs forks fixed order grabs fork right fork takes table dining philosophers specification def hf ij gamma jp jpn gamma def hf ij gamma jp jpn gamma gamma gamma def rec stands sum modulo table drink dispenser specifications dispenser def rec switch rec request drink switch request def fon def rec ok switch ok ok ok def rec ok request drink ok ok ok left fork 
way system give rise deadlock 
fact philosophers grab fork time system able proceed 
second representation agent possibility deadlock removed changing forks grabbing order philosopher pn gamma observed grabbing order changed relabeling operator altering specification philosopher pn gamma drink dispenser table automatic drink dispenser different buttons switch request specified 
button switch turn dispenser 
button request ask drink dispenser turned drink returned turned button request enabled 
possible specifications dispenser dispenser 
specification supposes existence centralized manager buttons second consider separated managers manage buttons switch request respectively 
distributed version objects order allow communication managers 
objects represent state dispenser turned turned respectively prevent possibility manager enabled manager active holds object 
manager button switch replaces message agents respectively 
manager button request test dispenser turned returning drink 
state dispenser tested simply reading removing message message read drink returned done 
agents dispenser different operational semantics considered equivalent able reply way possible users 
equivalence formalized section observational seman example semantically equivalent agents 
tics defined 
example bisimulation equivalence going adapt language equates agents dispenser 
observational semantics investigate standard semantic equivalences bisimulation failure trace order describe formally significant class expected properties generative communication paradigm 
example agents different operational semantics considered semantically equivalent stated insertion order messages ts factor 
sake simplicity order define finite equational proof systems congruences going introduce finite agents recursion free agents considered section 
bisimulation model investigate standard semantic equivalence ccs bisimulation milner identify agents 
order treat labeled transition steps unobservable actions consider standard weak bisimulation 
definition ff def gamma 
gamma 
ff gamma 
gamma 
gamma 
sm 
definition ff def ff ff definition relation agent theta agent bisimulation satisfies condition ff label ff gamma 
ff ii ff gamma 
ff definition bisimulation equivalence agent theta agent bisimulation equivalence identifies example agents bisimulation equivalence congruence 
fact hbi hbi ccs fully semantics bisimulation model observational equality 
definition observational equality def ff label ff gamma 
ff ii ff gamma 
ff proposition full abstractness iff ranges possible contexts 
part proof proposition ciancarini gorrieri zavattaro observational equality proved congruence 
allows investigate equational proof system 
axiomatization uses auxiliary prefix operator 
definition multiple read prefix gamma 
jp gamma 
order extend syntax language introducing multiple read prefix set redefined fa auxiliary prefix axiomatization order transform class message agents equivalent prefix forms easy prove hai 
table axiomatic characterization observational equality 
axioms state choice composition operator commutative associative 
axioms consist standard axioms alternative table axioms observational equality hai jq jq jq ij aq jq ij jp jq ij aq jq choice operator 
axiom describe prefix operator terms prefixes 
axiom corresponds property multiple read prefix introduced 
axiom adaptation known expansion theorem formalism 
axioms usual axioms restriction relabeling operators 
axioms standard laws bisimulation 
remainder means proved equal standard equational reasoning set axioms proposition soundness completeness iff table axioms failure equivalence example inspired de boer palamidessi describes property generative communication mechanism bisimulation semantic capture 
example agent considered equivalent fact choice operations depend environment local choice influenced external agents 
way agent similarly inserts ts message choice completely internal 
bisimulation semantics fact forced look suitable equivalence 
failure model failure semantic model consists observing pairs obtained associating trace obs set actions performed execution definition def ffl ffl fl gamma 
fls ffl gamma 
represents empty string 
definition failure set obs label gamma ff ff gamma ff gamma means ff gamma 
definition failure equivalence def failure equivalence congruence 
fact introduce equivalence proved ciancarini gorrieri zavattaro fully semantics failure equivalence 
definition failure congruence def gamma iff gamma proposition full abstractness iff agents identified observational equality equated failure congruence 
words failure semantics bisimulation 
inverse relation true agents introduced example identified bisimulation failure congruent proposition states congruence 
observational equality allows investigate axiomatic characterization propose adaptation standard equational proof system axiomatization failure equivalence synchronization trees brookes 
property allows state set axioms introduced observational equality sound failure congruence 
table characteristic axioms concerning failure equivalence introduced 
sound complete axiomatization defined follows observed laws required sound failure congruence 
proposition soundness completeness iff trace model definition trace set fs obs definition trace equivalence def easy see trace semantics failure fact trace set defined way fs obs label ccs trace semantics distinguish deadlock 
fact trace equivalent agents show different deadlock behavior composed parallel process 
related introduced process algebraic framework reason formally generative communication 
language extends ccs introducing message agents hai read prefix prefix standard prefix 
thought extensions syntactic sugar hai principle mapped standard ccs translation suggested anonymous referee hai hai jp mapping models reading message means withdrawal consequent emission message 
approach acceptable instant withdrawal emission message state consistent process willing read message may find 
wrong situation happen approach reading message prevent agents read 
problem solved accurate mapping uses extra set prefixes hai rec hai jp problems remain 
manager rec message able give contents arbitrary quantity reading processes time defines order 
language parallel processes read message able perform operations simultaneously implicitly related fact defined interleaving semantics semantics parallel independent operations executed possible order simultaneously 
case non interleaving semantics mapping ccs appropriate introduces unnecessary readers 
language step semantics nielsen thiagarajan adding rules ff gamma 
gamma gamma 
ng ff hai ff ff jg gamma gamma 
hai ff ff jg gamma gamma 
fi fi jg gamma gamma 
sg gamma 
sg ff fi jq fj jg gamma gamma 
jq jq ff fi fi jg gamma gamma 
jq ff ff jg represent multiset contains elements ff ff ff semantics obtained adding rules allows reading processes access message simultaneously ja fj jg gamma gamma 
jq 
analyze originality framework respect approaches formal analysis semantics generative communication 
ciancarini jensen frameworks ccs petri nets chemical machine berry boudol semantic domains coordination language linda 
studies different possible implementations generative communication computational models semantic equivalences axiomatizations 
de nicola pugliese observational equivalences testing de nicola hennessy applied language obtained embedding linda primitives simple sequential host language 
language complex axiomatic characterizations equivalences 
convinced properties generative communication mechanism orthogonal features sequential host language instance important property focused de nicola pugliese program observationally easily proved simpler framework means general law 
formalism compared frameworks asynchronous communication 
fact standard asynchronous communication obtained eliminating read prefix language 
generative communication uses single data structure communication medium difficult model channels formalism 
add information related channel message inserted messages identification name 
represents message sent channel 
de boer klop palamidessi rutten compositional semantic model sequences pairs states defined general asynchronous language 
framework refusal information required order describe deadlock trace model sufficient 
authors said failure semantics fails asynchronous case 
apparent inconsistency approach essentially due basic technical difference frameworks state communication medium included agents single sent message denoted hai approach considered external terms language 
de boer klop palamidessi encapsulation operator introduced model asynchronous communication acp 
encapsulation operator store messages sent certain channel 
basic difference approach order transmission messages factor 
channel queue authors suggest distinction useful messages sent channel queue sending order influences reading order 
approach distinction kept sending order influence way reading order messages sent different channels 
fact corresponding term language equivalent corresponding 
due fact framework execution operation visible sent message read 
standard failure equivalence correctly describes deadlock formalism 
fact agent corresponding corresponding standard failure equivalent considered observationally see example 
order solve problem special purpose refusal sets defined sending intended output operations introduced set failure 
opinion formalism standard equivalences correctly describes properties asynchronous communication suitable frameworks equivalences adapted order capture intended meaning 
papers honda tokoro boudol asynchronous communication embedded calculus milner parrow walker representation sent messages similar explicit prefix operation defined 
fact process sends message directly represented means parallel composition agent representing message calculus means considered structurally equivalent opinion structural equivalence gives rise problems choice composition considered choice free languages 
fact agents hai hbi considered structurally equivalent framework represent different situations 
case agent sends message message choice internal second case messages sent read choice left reading process 
framework similar proposed cleaveland ccs value passing asynchronous communication 
operations executed means local labeled transitions 
differently language message remains related process sent 
fact framework sent message simply composed parallel sending process gamma 
approach message composed sending process means auxiliary operator way gamma 
hai messages read processes sent 
reasons approach suitable model generative communication message equally accessible processes process sent bound generating process 
furthermore semantic equivalences defined formalism order identify terms different operational behavior considered semantically equivalent 
research partially supported ec bra coordination 
palamidessi helpful suggestions preliminary version anonymous referees accurate stimulating comments 
bergstra klop 
process algebra specification verification bisimulation semantics 
cwi monographs 
north holland 
berry boudol 
chemical machine 
theoretical computer science 
brogi ciancarini 
concurrent language shared prolog 
acm transactions programming languages systems 
boudol 
asynchrony calculus 
technical report inria france 
brookes 
relationship ccs csp icalp volume lncs pages 
springer verlag 
carriero gelernter 
net linda kernel 
acm transactions computer systems pages 
carriero gelernter zuck 
bauhaus linda object models languages concurrent systems volume lncs pages 
springer verlag 
ciancarini gorrieri zavattaro 
generative communication process algebra 
technical report university bologna italy 
ciancarini jensen 
operational semantics coordination language object models languages concurrent systems volume lncs pages 
springer verlag 
cleaveland 
operational framework value passing processes popl 
de boer klop palamidessi 
asynchronous communication process algebra lics pages 
ieee computer society press 
de boer kok palamidessi rutten 
failure failures paradigm asynchronous communication concur volume lncs pages 
springer verlag 
de boer palamidessi 
asynchronous nature communication concurrent logic languages fully model sequences concur volume lncs pages 
springer verlag 
de nicola hennessy 
testing equivalences processes 
theoretical computer science 
de nicola pugliese 
observational semantics linda strict series workshop computing pages 
springer verlag 
gelernter 
generative communication linda 
acm transactions programming languages systems 
gelernter carriero 
coordination languages significance 
communications acm 
hoare 
communicating sequential processes 
communications acm 
honda tokoro 
object calculus asynchronous communication ecoop volume lncs pages 
springer verlag 
milner 
communication concurrency 
prentice hall 
milner parrow walker 
calculus mobile processes 
information computation 
nielsen thiagarajan 
degrees non determinism concurrency petri net view th conference foundation software technology computer science volume lncs pages 
springer verlag 
