efficient protocol voting distributed systems agrawal pankaj dept computer science dept computer sc 
engg 
university maryland indian institute technology college park md kanpur india distributed systems data replicated improve availability performance 
algorithms proposed coordinate access replicated data 
algorithms require site initiating operation replicated data communicate sites system 
results high communication overheads 
propose voting protocol reduce communication costs significantly 
proposed scheme nodes arranged small intersecting groups site absence failures needs communicate members group collect quorum 
suggest method constructing logical groups show message overhead operation system nodes failures system 
compare availability communication overheads protocol existing ones 
distributed system data replicated provide fault tolerance site failures network partitions improve performance 
data replication requires replica control algorithm maintain consistency data 
survey methods seen 
method replica control weighted voting scheme suggested gifford 
algorithm node assigned number votes 
total number votes assigned nodes quorum votes required read operation quorum votes required perform write operation 
quorum values ensures write write mutual exclusion read write mutual exclusion 
weighted voting node wants perform operation data sends request nodes network 
nodes reply version number denoting number successful updates data data 
requester node gets votes perform read write operation 
read reads data node highest version numbers nodes replied 
write node determines highest version number writes nodes constitute write quorum 
nodes version number highest version number 
quorum conditions ensure node highest version numbers read write quorum latest copy data 
improvements voting algorithm suggested 
voting scheme high communication cost request operation typically send sites system group sites constituting majority votes satisfies quorum 
extensions voting algorithm proposed reduce communication costs protocol operation requires messages number nodes system absence failures 
message overhead increases failures system property graceful degradation maintained number messages required increases slowly number failures system 
protocol construction logical intersecting groups nodes system 
suggest method constructing groupings 
cardinality group constructed grouping collecting quorum site initiating operation needs communicate members group 
member nodes failed site may need communicate nodes 
rest organized follows 
review approaches reducing communication overheads section 
discuss system model section group structuring section 
quorum requirements protocol discussed section 
discuss communication overheads availability protocol compare existing schemes section 
related section review approaches reduce communication overhead replica control protocols 
projective planes construct logical groups nodes 
method gives lower bound number nodes group fully distributed algorithm 
drawback approach suggest action faults 
nodes group operation may proceed 
effort evaluate availability offered approach 
tree protocol nodes logically arranged binary tree 
group nodes forming path root leaf forms quorum 
case node path fails replaced paths starting children failed node 
number nodes required forming quorum log absence failures approach fully distributed 
root logical tree operational participates quorums heavily loaded 
response time high 
fully distributed approach proper load sharing 
hierarchical quorum consensus protocol set nodes organized multi level hierarchy 
group certain level hierarchy collect votes majority subgroups level call available 
physical nodes lowest level hierarchy group highest level needs available operation proceed 
approach reduces message overhead 
grid protocol arranges set nodes rectangular grid 
node column required read quorum 
nodes column read quorum constitute write quorum approach 
system model consider distributed system nodes 
data item replicated nodes 
assume nodes fail stopping 
assume atomicity transactions maintained site executes local concurrency control mechanism 
assume site failures detected sites different network partition 
assumption needed correctness protocol enhances availability write operations 
assumption satisfied network consists segments get partitioned 
example network may consist networks token rings get partitioned 
response sites segment network implies segment partitioned site segment responding failed 
similar assumptions voting ghosts efficient dynamic voting voting 
group structuring section describe grouping nodes protocol done 
refer method grouping str number groups set nodes arranged 
simplicity consider groups identical cardinality 
having fully distributed algorithm necessary node member identical number groups 
construct grouping manner cardinality group low quorum requirements defined give protocol property graceful degradation 
nodes group responding site initiating operation look quorum high communication overheads 
initially assume number nodes gamma 
groups cardinality gamma constructed follows 
generate combinations numbers set 
gamma combinations 
mapping set nodes set combinations generated 
node mapped combination included th th groups group 
groups system referred 
clearly group cardinality gamma exactly gamma combinations including number groups say intersect exactly node node mapped combination node gamma nodes group forms intersection group exactly group groups distinct distinct nodes group 
number nodes form gamma variation str may generated follows 
choose smallest gamma 
construct str gamma nodes labeled gamma actual nodes gamma gamma imaginary nodes 
mapping set imaginary nodes set actual nodes positive integers upto possible mapping actual node map 
replace th imaginary node mapped actual node 
nodes imaginary node mapped seen having vote 
define intersection ij node forming intersection group group node define groups belongs 
performing operation node initially communicate members 
communication required protocol failures 
fully distributed algorithm assigned manner node member number nodes 
briefly outline method str 
node mapping combination 
odd max min node 
odd results fully distributed algorithm 
example consider nodes system 
nodes grouped str 
groups obtained grouping shown 
group group group group group group note projective plane approach constructing set mutually intersecting groups nodes grouped equal number groups group nodes 
groups intersect exactly node 
nodes group represent intersection group exactly groups 
node member groups 
compare message overheads caused proposed method grouping projective plane approach 
voting algorithm seen nodes system arranged logical groups 
assume total groups system designated 
set nodes satisfies read quorum ij clearly satisfies read quorum 
read quorum satisfied vote node group collected 
set nodes satisfies write quorum ij seen conditions ensure mutual exclusion write write read write operations 
write quorum definition includes sites particular group read quorum includes site group 
clearly intersect mutual exclusion read write quorums ensured 
group intersects group mutual exclusion write write operations ensured 
quorum conditions failure site groups disallow write operations system 
write availability improved site initiating operation distinguish site failures network partitions 
suppose set sites participating operation set sites reported failed 
satisfy write quorum 
write set available ij 
satisfies read quorum condition 
write done operational sites write set 
purpose including read quorum definition write quorum fold 
firstly allows write quorum know latest version number existing system 
formation read quorum disallows concurrent formation write set show ensures mutual exclusion write write operations 
note earlier definition write quorum set ensured read quorum included write quorum 
say write took place group satisfied write set requirement 
maintain correctness site recovering failure needs update latest writes groups member 
site participate read quorum send vote site trying recover recovered updating getting latest updates groups member 
recovery algorithm discussed 
read algorithm read write algorithms basically collect respective quorums 
read algorithm site described 
site initiates operation initially communicates sites 
read request sent sites expected reply version numbers willing participate read quorum 
site initiating operation waits receives replies time occurs 
suppose set nodes replied site examines satisfies quorum condition checks sites included quorum condition satisfied vote received implies impossible get vote node read aborts 
communicates sites groups intersections replied 
keep communication costs low communicates site groups time 
able get vote node group quorum condition group met 
unable satisfy quorum condition group spite having communicated members group implies read quorum met read aborts 
node send read request nodes wait replies time set nodes replied ij ij abort ij repeat select untried node send read request node wait reply time vote collected done untried node left done untried node left abort read site highest version number read algorithm site example take system taken earlier 
consider read request coming node 
assume node group 
node sends read request nodes members group 
suppose nodes reply nodes reply 
read quorum complete 
node needs communicate node suppose communicates nodes 
node replies node doesn vote required suppose node communicates node node replies 
case quorum complete read completed 
write algorithm write algorithm site 
site initiating operation tries communicate sites 
write algorithm possibility distinguishing site failures network partitions improve availability 
write algorithm met requirement write set checks obtained read quorum 
may need communicate sites system collect read quorum 
case failed meet write set requirements needs communicate sites group 
suppose manages collect write set group 
case shall need collect read quorum hasn got 
suppose fails collect read quorum spite having communicated nodes 
update completed operation aborted 
example take system 
write request arrives node node sends write request nodes 
suppose nodes reply known nodes 
write set requirement met node needs collect read quorum vote node 
suppose nodes reply known node 
case write set requirement met node communicates members suppose nodes reply write set read quorum requirements met write operation completed 
recovery failures site restarting operations time needs update updates taken place groups belongs 
site send vote forming read quorum site trying recover recovered 
site said recovered respect group member communicates site group gets vote gets latest copy 
getting copy mean site updates copy copy higher version number 
results site recovering updating update group site copy higher version number site vote recovering site took written write operation group 
site operational recovered recovery procedure having update 
recovering site gets update group 
show formally subsection 
site considers recovered recovered respect groups member 
node send write request nodes wait replies time set nodes replied set nodes known failed ij ij ij abort ij repeat select untried node send read request node wait reply time vote collected done untried node left done untried node left abort repeat find untried group send write request nodes group get replies time write set requirement met try collecting read quorum met done abort untried group left done untried group left abort write operational nodes write set write algorithm site proof correctness easy show proposed protocol works correctly 
give proof correctness protocol 
details available authors 
performance section study performance proposed protocol compare simple voting scheme approaches low communication overheads 
important performance measures voting systems communication overhead incurred protocol availability offered protocol 
study measures 
communication overheads simple voting typically request sent sites system sites respond requests initiator collect majority votes proceed operation 
node system incurs message overhead 
write operation data written majority nodes 
proposed scheme site initiating operation communicates member absence failures able collect quorum group 
total number sites system number sites group gamma approximates communication cost 
absence failures number sites sites data written projective plane method constructing grouping number sites group quorum definitions applied method grouping number sites communicated absence failures compare average communication overhead methods constructing groups system 
analysis shows gamma gamma gamma str gives lower 
node system means str lower communication overheads 
node system value 
see large systems realistic values str efficient 
schemes hierarchical quorum consensus gives communication cost clearly proposed method 
tree protocol requires quorum size log low communication overhead absence failures 
fully distributed algorithm 
absence failures root logical tree participates quorums system response time go 
deficiency approach failures system number sites communicated increases number sites participating operation goes 
worst case number sites participating operation may 
grid protocol requires sites read quorum sites write quorum 
message overhead approach comparable approach 
general see proposed protocol offers significantly lower communication overhead simple voting scheme 
compared approaches reducing communication costs proposed scheme comparable lower communication cost 
availability analysis consider read write availabilities offered protocol 
assume time site reachable site initiating operation probability site reachable assume probability having failed failure known initiator 
analyze read availability offered proposed protocol 
gamma gamma gamma gamma gamma gamma gammak gamma gamma recurrence relation read availability clearly gamma similarly compute availability write set 
gamma gamma ws gamma gamma gamma ws gamma gammak gamma ws gamma ws ws write availability ws write set available simplicity assume write set available equal clearly actual value write set available greater assumption gives lower estimate write availability offered method 
compare read write availabilities offered proposed method availabilities offered voting algorithm protocols low communication costs 
give details availability offered protocols computed 
simple voting quorum consensus tree protocol grid protocol proposed protocol availability availability nodes read availabilities different values consider system nodes comparing availabilities offered proposed protocol approaches 
proposed protocol nodes arranged groups 
voting algorithm take 
fig 
compare read availability offered proposed protocol simple voting scheme approaches different values see read availability offered protocol significantly better schemes 
fig 
write availabilities considered different values 
high values proposed protocol offers better write availability approaches 
general say proposed method offers better read write availabilities existing schemes 
simple voting quorum consensus tree protocol grid protocol proposed protocol availability system write availabilities different values distributed systems data replicated improve availability performance 
proper read write algorithms required maintain consistency replicated data 
existing algorithms involve extremely high communication costs 
protocol low communication costs absence failures 
communication overhead goes failures 
method organizing nodes set logical intersecting groups 
shown groups constructed 
groupings protocol give efficient way reading writing replicated data 
compare communication overheads availability proposed method simple voting scheme approaches low communication overheads 
find communication overhead proposed method significantly lower simple voting scheme 
comparable lower existing approaches reducing communication overheads 
read availability offered protocol significantly better offered simple voting scheme 
big improvement existing schemes reducing communication overheads general offer lower availability simple voting scheme 
availability write operations offered protocol depends frequency site failures compared network partitions 
network partitions frequent site failures detected proposed protocol offers better write availability simple voting scheme approaches 
agrawal abbadi efficient fault tolerant sol 
mutual exclusion problem acm transaction computer systems vol 
pp 
february 
agrawal coding replication schemes distributed systems submitted 
agrawal availability coding replication schemes submitted 
barbara molina policies dynamic vote reassignment proc 
sixth ieee conf 
dist computing sys 
pp 
june 
barbara garcia molina mutual exclusion partitioned distributed systems distributed computing vol 
pp 

ahamad grid protocol high performance scheme maintaining replicated data proc 
sixth ieee conf 
data engg pp 
january 
davidson garcia molina skeen consistency partitioned networks acm computing surveys vol pp 
september 
garcia molina barbara assign votes distributed system journal acm vol pp 
october 
gifford weighted voting proc 
seventh int 
conf 
os principles pp 
may 
jajodia dynamic voting proc 
acm sigmod pp 
may 
agrawal coding support data resiliency distributed systems eighth int 
conf 
data engg 
february 
kumar performance analysis hierarchical quorum consensus algorithm proc 
tenth ieee int 
conf 
dist computing sys 
pp 
may 
kumar hierarchical quorum consensus new method managing replicated data ieee trans 
computers vol 
pp 
september 
new multiple copy update algorithm performance evaluation cs tr md college park july 
algorithm mutual exclusion decentralized systems acm trans 
computer systems vol 
pp 
may 
paris voting witnesses consistency scheme replicated files proc 
sixth ieee int 
conf 
dist computing systems pp 
june 
paris long efficient dynamic voting algorithms proc 
fourth ieee int 
conf 
data engineering pp 
january 
paris voting proc 
ninth ieee int 
conf 
dist sys pp 

renesse tannenbaum voting ghosts proc 
eighth ieee int 
conf 
dist computing sys 
pp 
june 
schneider fail processors approach designing fault tolerant distributed systems acm trans 
computer systems vol 
pp 
august 
