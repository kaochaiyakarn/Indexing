solving graph problems dynamic computation structures jonathan babb matthew frank anant agarwal mit laboratory computer science cambridge ma introduce dynamic computation structures dcs compilation technique produce dynamic code reconfigurable computing 
dcs specializes directed graph instances user level hardware reconfigurable architectures 
problems shortest path transitive closure exhibit general properties closed semirings algebraic structure solving directed paths 
motivating application domain choice closed semiring problems fact logic emulation software maps special case directed graphs logic arrays field programmable gate arrays fpga 
certain type logic emulation software called virtual wires allows fpga array viewed machine independent computing fabric 
virtual wires compiler coupled front commercial behavioral logic synthesis software enables automatic behavioral compilation multi fpga computing fabric 
implemented dcs front compiler parallelize entire inner loop classic bellman ford algorithm synthesizable behavioral verilog 
leveraging virtual wire compilation behavioral synthesis automatically generated designs fpgas single graph instance 
achieve speedups proportional number graph edges versus specint sparcstation 
keywords dynamic computation structures user level hardware fpga computing reconfigurable architecture workstation logic emulation virtual wires closed semirings shortest path 
configurable computers field programmable gate arrays fpgas capable accelerating suitable applications orders magnitude compared traditional processor architectures see splash pam 
performance achieved mapping user application gate level netlist may downloaded programmable hardware 
programming paradigm achieve performance set hand crafted circuits fpga system 
programmers explicitly account machine level details fpga capacity interconnect prohibiting development automatically compiled architecturally independent applications 
research addresses compilation issues reconfigurable computing part mit reconfigurable architecture workstation raw project 
raw system leverages previous multi fpga virtual wires conjunction behavioral compilation technology view array fpgas machine independent ssp design requirements xilinx series fpga technology gate resources pin resources bandwidth gap pin bandwidth gap computing fabric 
viewpoint developed new software system automatically generates dynamic computation structures user input particular directed graph problems 
structures specific application problem instance independent underlying architectural details 
new software operates framework allows structures automatically compiled large array fpgas emulator user intervention 
rest organized follows section provides motivation available virtual wires technology 
section describes dynamic computation structures context complete reconfigurable compiler system 
section overviews application domain section describes prototype hardware system 
section presents results sets graph problems 
section concluding remarks presents research directions 
motivation reconfigurable architectures frequently composed fpga 
previous research systems shown exists bandwidth gap required inter chip routing resources typical architecture pin resources available fpga technology 
naive mapping architecture gates fpga gates architecture signals fpga pins results severe pin limitations low gate utilization 
shows gap various partition sizes ssp shortest path structure reported results section comparison xilinx series fpgas 
previous techniques required user carefully hand craft individual fpga logic overcome pin limitations 
solution virtual wires eliminated pin limitation barrier multi fpga systems intelligently multiplexing physical wire multiple logical wires pipelining connections maximum clocking frequency fpga 
connections synthesized pipelined statically routed communication network need expensive esoteric pc board technology allowing construction scalable fpga fabrics composed solely commodity fpgas 
development commercial availability virtual wires compiler technology enables efficient combining multiple fpgas single giant sea gates higher level synthesis compilation steps 
technology primarily applied circuit emulation logic simulation acceleration applied effectively reconfigurable computing hardware subroutines fpga array implements verilog version subroutine program connects software remote calls host behavioral compiler rtl compiler virtual wires compiler fpga bitstreams fpga compiler input graph dcs generator compiler flow station 
presents results virtual wires technology reconfigurable computing validates effectiveness massive fpga computing systems 
dynamic computation structures explore user level hardware reconfigurable architectures introduce dynamic computation structures dcs compilation technique dynamically modify underlying hardware architecture function user input 
dcs compilation viewed extreme case generation dynamic code new processor instructions dynamically generated input data set 
dynamic code generation software technique allows specialization optimization code program input 
program input available compiler optimizations constant folding dead code elimination removal branches expose instruction parallelism enable code generator create significantly faster code 
dynamic computation structures extend dynamic code generation reconfigurable architectures creating hardware configurations software routines solve specific problem instance 
specialize instruction set abstraction technique automatically creates new operators distributes memory accesses minimizes data widths reduces complex data structures wire permutations 
resulting structures tailored specific problem instance 
software tool flow shows software tool flow compilation system 
comparison standard compilation technology microprocessor computing algorithmic complexity transformations involved min generic semiring behavioral verilog node edge graph instance dcs generator min min min distance distance distance specialized behavioral verilog algorithm semiring instance edge weight node edge dcs flowchart higher 
system begins dcs generator compiler written takes input graph problem specification high level form generates specialized behavioral verilog code 
verilog code describes hardware instance solve problem high level underlying technology 
tools consist behavioral compiler rtl compiler map input verilog single gigantic netlist composed generic logic gates technology 
virtual wires compiler maps netlist multiple fpgas 
specifically virtual wires compiler treats netlist design emulated partitioning placing scheduling inter fpga connections produce individual fpga emulator 
individual netlist processed fpga compiler places routes netlist target fpgas producing fpga bitstreams 
layers hide successive levels detail dcs generator fpga layer hides internal fpga details virtual wires layers hides inter fpga topology communications fpga gate pin capacity rtl layer hides technology libraries behavioral layer hides state machine datapath details 
dcs generator specific user input dcs generator creates computation structures synthesizable behavioral verilog 
verilog code application specific architecture independent 
targeted system 
demonstrates example operation dcs generator semiring applications introduced section 
dcs generator takes input library generic descriptions behavioral verilog node edge computation structures topological description specific user input graph instance semiring parameters phi fi operators discussed section 
generic structures parameters including data widths input edges node semiring operators set particular node edge instantiated 
dcs generator uses structures instantiate hardware proper bus widths operations corresponding input specification 
addition dcs generator specifies connections structures corresponding edges input graph 
dcs generator creates description single circuit higher level functions synthesized gates partitioned compiled specific fpga technology lower levels compilation hierarchy 
addition specialized behavioral verilog code created dcs generator synthesize interface software running host workstation emulated design communicate 
section discusses host interface detail 
briefly circuit shown edge weight registers marked connected host processor interface writable bus 
bus shown 
likewise node distance path registers marked distance connected interface readable bus 
host side buses mapped processor address space edge weight written node path read host software program 
application domain large class applications solved general strategy compiling computation structures problem instance 
input data set generic solution algorithm may compile computation structure specialized rapidly solve particular problem instance 
von neumann style processor compilation results specialized instructions compiled code executed solves problem hand 
reconfigurable architectures computation structures hardware descriptions downloaded reprogrammable technology 
application domain broadly includes certain graph problems logic simulation verification cellular automata neural networks body simulation fluid dynamics discrete event computer network simulation 
domain focuses reconfigurable architecture solve high speed computing problems involving directed graphs 
motivating choice focus fact logic emulation software capable mapping special case directed graphs fpga array 
specific problems solve including transitive closure shortest path exhibit general properties closed semirings algebraic structure solving directed paths 
closed semirings allow iterative solutions directed path problems 
problems iterative subproblems flow matching linear programs turn form inner loop complex combinatorial optimizations power generation transmission water resource allocation silicon compilation 
experimental cases consider semiring cases transitive closure tc shortest path sp min multiplicative version shortest path sm min theta 
problems solved variations bellman ford shortest path algorithm order nm number nodes number edges sequential processor 
parallelizing inner loop show solutions semiring problems order sufficiently large reconfigurable architecture 
hardware system closed semiring system phi fi set elements phi fi binary operations satisfying properties 
phi monoid closed phi phi phi associative phi phi phi phi identity phi phi 
likewise fi monoid 
assume fi fi 
phi commutative phi phi idempotent phi 
fi distributes phi fi phi fi phi fi phi fi fi phi fi 
countable sequence elements phi phi delta delta delta phi phi delta delta delta exists unique 
associativity commutativity idempotence apply infinite finite sums 

fi distribute countable infinite sums finite ones follow property 
closed semiring definition graph vertices edges edge weights source vertex number produce distance weighted distance source vertex path previous vertex best path bellman ford vertex distance infinity path nil distance jv edge cost distance fi operator cost distance phi operator distance cost path bellman ford shortest path algorithm host workstation sparcstation interface card external interface data addr logic emulator prototype reconfigurable computing system prototype hardware system consists emulator systems virtual machine works coupled sun sparcstation bus interface card 
shown scsi interface emulator downloading configurations controlling clock speed 
currently prototype system consisting standalone board user array xilinx fpgas sixteen kx board microcontroller glue logic 
progress upgrading larger production system board system consisting arrays xilinx fpgas 
fpgas board directly connected nearest neighbor meshes augmented longer connections distant fpgas 
boards coupled multiplexed os 
additionally board external os resulting total external connections 
logic emulator external interface generally connected target system design emulation 
reconfigurable computing connected portion external interface card host sparcstation 
card provides asynchronous bus bits address bits data may read written directly memory mapped sparc 
successfully operating interface nominal rates mhz reads mhz write operations providing mbytes sec rates communication host cpu fpgas emulator 
rate allows bit read write cycles mhz host cpu 
experimental results implemented dcs generator constructed experimental software system generator commercial tools 
lists software tool step rough running times tool function software rough running times dcs generator new program seconds behavioral compiler synopsys minutes rtl compiler synopsys minutes virtual wires compiler hours board fpga compiler xilinx hours board workstations experimental software system semiring nodes gate fpga clock solution software rate speedup speedup problem count count rate rate special generic vs instance edges mhz khz hz software fpga stc ssp ssp ssp mesh ssp ssp sm sm semiring results sparcstation class machines 
experiments execute fpga compile step due excessive fpga compile time requirements 
fpga compiles may generally parallelized network workstations provide reasonably effective compile times 
successfully compiled smaller shortest path designs ssp way configuration bitstreams run design emulation system 
execution design validated interface 
performance comparison implemented dcs generator fpga system dynamic code generator system 
compilers create specialized instructions solving semirings classic bellman ford shortest path algorithm 
addition comparing specialized processor code produced dynamic code generator compared fpga results generic version loop unrolling 
software results execution specint sparcstation processor 
shows results range semirings graph topology 
prefix problem specifies semiring type defined section 
number represents number nodes 
exception ssp mesh graph topology randomly generated maximum node degree average degree 
ssp mesh identical ssp exception nodes arranges nearest neighbor mesh topology 
list gate count total number xilinx fpgas required 
list clock rate assuming mhz internal virtual wires clock 
calculate solution speed divide clock rate number iterations required reach solution number graph nodes 
compute speedup dividing fpga speed best software speed 
table lists speedup fpga measure relative efficiency solving particular problem type reconfigurable architecture 
software code specialization benefits significantly unrolling inner loop de referencing pointers architectural specialization allows parallelization entire inner loop producing speedup proportional number graph edges 
fact software specialization improves speed generic software solution small graph sizes 
larger graph sizes specialized code grows larger instruction cache resulting factor slowdown due cache misses 
architectural specialization hand provides consistent speedup shortest path problem times speedup multiplicative shortest path times speedup transitive closure best software version 
speedups result increased parallelization inner loop problem size increases 
shows speedups scale linearly problem size due higher global wiring overhead larger designs resulting slower clock rates fewer gates fpga 
speedup architectural specialization increases problem size increases efficiency graph problem size number fpgas speedup ssp ssp ssp ssp scalability ssp ssp hardware solution decreases shown speedup fpga column 
reduction efficiency due increasing inter fpga communication costs problem size increases 
ssp mesh design greater locality randomly generated graphs problems speedup fpga opposed ssp design similar size poorer locality 
efficiency multiplicative problems lower additive shortest path problems require graph edge efficiency transitive closure problem high speedup fpga number gates required node edge small 
structure area structure combinational sequential total stc edge gates gates gates stc node gates gates gates stc node gates gates gates stc node gates gates gates ssp edge gates gates gates ssp node gates gates gates ssp node gates gates gates ssp node gates gates gates sm edge gates gates gates sm node gates gates gates sm node gates gates gates sm node gates gates gates sample structure sizes ssp ssp ssp ssp percentage speedup effects shows resulting combinational non combinational gate count details generated structures 
node specialized exact degree edges needed nodes edges specialized semiring problem solved 
ssp sm nodes size gates nodes degree stc nodes smaller gates degree 
edge sizes varied proportional complexity operators inside gates add multiply operations stc ssp sm respectively 
effects section analyzes effect host workstation fpga array 
consider algorithm shortest path application domain 
shortest path typically inner loop higher level algorithm edmonds karp maximum flow algorithm 
maximum flow algorithm shortest path determined flow scheduled path 
path needed best path nodes need read call shortest path algorithm 
furthermore values edge weights path change edge weights need written 
study effects system model incremental fraction compute speedup range fraction edges written paths read solving single path instance 
model total solution time particular call shortest path computed theta edges nodes theta nodes cycles 
percentage edge weights written algorithm executed node cycles percentage node weights read 
shows relative speedup shortest path semirings varied 
assume single emulation cycle reads writes may vary clock rate emulator fluctuates interface transfer rates 
speedup achieved high values overhead high resulting roughly factor slowdown graphs study 
results show research significant impact performance 
introduced dynamic computation structures compilation technique automatically map specific problem instances fpga hardware 
implemented dcs generator closed semiring applications including shortest path transitive closure resulting speedups orders magnitude versus conventional microprocessor workstation 
speedups obtained software framework automatically maps high level behavioral verilog output generator hundreds fpgas user intervention 
system fully automated fpga compilation time parallel compilation reduces compile time days hours 
circuit design compilation synthesis time secondary optimization area timing results 
reconfigurable computing compilation time primary concern 
dynamic computation structure useless compiled quickly 
improvements fpga compilation technology directly affect compile time addressing issue developing relocatable hardware library key input behavioral compiler 
library consist pre compiled computation macro blocks reduce synthesis time 
example macros include adders multipliers registers parameterized datapaths 
macros compiled fpga bitstream level ahead time prototype software translate bitstreams implementation 
addition speeding compile time addressing language issues expressing computation structures operating system approaches securely multiplexing reconfigurable hardware multiple user level specializations 
emulation hardware useful targeting application specific portion user level hardware implementing prototype fpgas board processor explore operating system issues new design realm 
acknowledgments research report funded part arpa contract dabt nsf presidential young investigator award prof agarwal 
matthew frank part supported nsf graduate fellowship 
babb tessier agarwal 
virtual wires overcoming pin limitations fpga logic emulators 
proceedings ieee workshop fpga custom computing machines pages napa ca april 
ieee 
mit lcs tm january 
bauer 
design efficient hardware subroutine protocol fpgas 
master thesis eecs mit department electrical engineering computer science may 
touati 
pam programming environments practice experience 
napa pages april 
thomas 
verilog hardware description language 
kluwer academic publishers boston 
dehon 
transit note transis interface 
technical report artificial intelligence laboratory mit june 
engler 
vcode retargetable extensible fast dynamic code generation system 
pldi 
gokhale holmes lucas sweeney lopresti 
building highly parallel programmable logic array 
computer jan 
systems emulation system documentation 
version 
cormen leiserson 
algorithms 
mit press cambridge ma 
