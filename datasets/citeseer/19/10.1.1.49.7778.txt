verse hypertext versioning styles anja haake david hicks gmd german national research center information technology ipsi integrated publication information systems institute 
darmstadt germany mail hicks darmstadt gmd de previous version support hypertext focused primarily development functionality specific hypertext systems specific hypertext ap plication domain 
models address crucial version support problems specific hypertext application domains easily adapted integrated hypertext applications 
hypertext version support environments introduced help alleviate problems 
designed meet version support needs wide range hypertext applications 
far high level versioning facilities constructed environments creating gap facilities provided directly environment versioning needs applications 
intent research bridge gap 
turned task versioning styles easy hy application developers hypertext application users 
shown previous task versioning helps alleviate cognitive overhead disorientation problems users 
addition requires little investment point view application development task versioning necessarily require application incorporate extra notion individual versions 
presents set task hypertext versioning styles offered verse flexible version support environment shows direction design addition versioning styles 
keywords version support control version support environment versioning styles policies task versioning research efforts versioning problem hypertext progressed researchers focused development version support functionality specific hypertext systems specific hypertext application domains 
version models resulting efforts address crucial version support issues cog nitive overhead problem encountered version creation disorientation occur version selection 
models tuned support specific application domain requirements easily adapted integrated hypertext applications 
researchers attempting widen applicability results concentrated development general hypertext version support environments 
versioning functionality offered general hypertext version support environment support needs wide range hypertext applications 
maximize generality versioning services directly offered environment typically low level 
created gap version facilities offered environment needs applications 
intermediate layer versioning functionality hyperbase application layers suggested mechanism bridge gap general hypertext version support environments 
approach appears promising far intermediate layer versioning facilities constructed 
aiming bridging gap designed implemented verse flexible version support environment 
verse offers set flexible low high level version sup port facilities 
meet needs wide variety applica tions underlying design principle verse versioning facilities capable flexibly combined create versioning styles policies 
important goal maximize cost benefit ratio integration resultant versioning styles applications 
verse versioning concepts designed variety ways create versioning styles meet specific versioning needs simple integrate applications 
different versioning styles maintained verse help bridge gap versioning facilities typically provided hypertext version support environments needs applications 
version support environment hyperbase layer intermediate layer application layer hyperbase management system including low level versioning facilities 
general hypertext version support environment high level versioning facilities emphasize applicability results hypertext version support environments describe verse versioning concepts versioning styles general perspective 
discussing current status version support mechanisms hypertext general hypertext version support concepts introduced 
followed discussion concepts develop hypertext versioning styles 
implementation general version support facilities version ing styles verse version support environment described 
research compared related followed brief discussion research 
related versioning key problem applications especially hypertext ones 
described halasz version control problem hypertext started receive increasing attention 
version control identified key topic hypertext databases nsf workshop hyperbase systems hypertext workshop hyperbase systems 
september workshop versioning hypertext systems held connection echt 
spectrum version support proposals hypertext ranges version models implemented monolithic hypertext system concentrating general version support environments hb 
consider versioning issues context specific application area intended support variety hypertext applications 
extremes spectrum version models emerged offered form version server specific hypertext application domains 
focused needs distributed hypertext systems 
abstracting system architecture possible classify version models state task categories 
state version models maintain versions individual hypertext object data structure called version set 
ver object referenced state versioning environment explicitly identify specific version object 
problem frequently encountered basic state versioning approach directly possible track coordinated set changes involving components hypertext network 
additional layers functionality required provide capability 
example bug fix may involve software files modules 
basic state approach possible easily directly identify specific objects versions objects represent coordinated change 
composition versions complex objects hypertext compos ite node requires identification specific versions constituent objects error prone 
particular basic state versioning aggravate cognitive overhead disorientation problems encountered version creation version selection hypertext systems 
state versioning focuses maintaining individual versions individual objects task versioning focuses tracking versions complex systems 
central idea task approach provide sys tem support maintaining relationships versions objects changed coordinated manner performance task assure versions identified having implemented set coordinated changes 
way unintended com component versions ruled priori version selection done change information 
task versioning particular eases version creation version selection problems 
additionally task versioning concepts easier integrate applications 
task versioning inherently provides default version creation mechanism mechanism track coordinated changes hypertext network application code extended additional versioning creation identification operations order functionality 
personal information environment pie software de velopment environment smalltalk task version models 
pie model applied directly provide version support hypertext sys tem offers atomic nodes binary links 
version model system represents step task version support 
allows composite node selection criteria indicates versions objects selected generic links composite contains 
version mod el task approach supports cooperative editing applications 
rhythm uses task approach pro vide version support distributed hypertext system 
cover integrates fully state version support model including versions links composites flow oriented task concept influenced pie layers contexts 
task version models integrated monolithic hypertext systems accessible different hypertext applications 
certain extent cover exception offers version support func tionality form version server 
version model influenced requirements hypertext publishing applications 
underlying design principle course research resultant versioning concepts capable flexibly combined create versioning styles meet versioning needs wide variety applications 
important goal maximize cost benefit ra tio integration version support applications 
task versioning offers benefits help ease user interaction versioning services maximize cost benefit ratio integration applications general version support architectures provide flexible environment versioning services adapted meet needs specific application areas 
versioning concepts developed course research combination approaches 
existing task models built develop easy concepts easily integrated applications 
additionally concepts sufficiently general appropriate integration general hypertext version support environment 
generalization task versioning concepts design decisions required integrating versioning concepts hypertext version support environment 
choices influence range applicability versioning functionality cost benefit ratio experienced application programmers integrate versioning functionality applications 
design decisions address issues particularly important 
issue issue concerns versions particular versioned object accessible time ex ist scope single task 
version versioned object allowed interaction versioning services simplified application developers users 
task concept directly version identification version object scope single task 
prevents possibility presenting working alter native versions task 
example pie system limits number valid versions par ticular time 
contrast cover system allows multiple versions alternatives exist task 
issue second issue define set versioned objects subject change scope task 
fixed set determined de fault mechanism adjustable set defined application program 
set fixed application interaction simplified extra functionality required define set versioned objects included scope task 
example pie system layer represents entire smalltalk image includes objects programming environment 
contrast cover system allows versioned objects explicitly included excluded task 
additionally cover limits default versions automatically included newly created tasks predecessor successor super sub tasks 
issue task organization composition third issue 
systems completed tasks flexibly combined construct new system configurations 
ty systems support automatic derivation system configuration pie 
approach requires application developer user define consistency compatibility constraints different tasks 
contrast organization tasks allowable composition systems inherently defined versioning concept extra effort task organization required 
approach especially useful primary emphasis version support keep history changes system provide meaningful cues version identification 
example approach creation change tasks context hierarchically structured application tasks cover 
mentioned earlier important underlying goals research maximize applicability version ing functionality cost benefit ratio integration 
goals influenced mechanisms selected ad dress issues 
specifically developed general task versioning concepts 
levels identified design change control level task description level 
change control level actual versioning related activities performed environment 
appropriate integration hyperbase level general hypertext ver sion support environment 
change control level uses general change task log changes system development proceeds 
simplest type change task supports single version versioned object scope task issue default applies entire network hypertext objects managed hyperbase management system issue 
task description level provides mechanism organize change tasks change control level 
reduce effort required maintain organization tasks chose incorporate mechanisms specifying application flow history documentation policies versioning concepts issue 
various flow patterns different applications specified task description level 
application task primary mechanism organizing change tasks expressing flow patterns 
application tasks allow change tasks organized groups correspond various subtasks performed course completing larger task 
application tasks performed history evolving system maintained change control level 
functionality task description level appropriate integration intermediate layer general hyper text version support environment 
levels described detail sections 
change control level change task basic unit versioning defined environment 
mechanism preserve intermediate states evolving hypertext network development proceeds 
change task intended represent snapshot image entire hypertext network 
different types change tasks defined change control level 
identified basic types linear change task parallel change task ful supporting objectives versioning styles 
simplify application interaction integration versioning styles linear parallel change tasks contain single version versioned hypertext ob ject issue 
frees application having cope alternative versions aware existence multiple versions objects 
new versions objects created automatically associated placed context appropriate currently active change task 
way versions objects identified simply specifying task 
task contains single version particular versioned object task specification sufficient uniquely identify appropriate version object 
extensions required applications forcing aware multiple versions objects 
provide mechanism defining set versioned ob jects included scope task root task concept defined 
root task collects set objects created application proceeds defining application data space 
created change task includes objects maintained root task providing default set objects task issue 
addition root task provides entry point application task structure 
linear change task linear change task simplest type change task defined change control level 
intended versioning styles supporting applica tions require basic versioning functionality 
linear evolution history supported linear change tasks 
linear change task initial application data space exactly predecessor linear change task 
linear change task may successor lin ear change task 
linear change task inherits pre vious state application data space predecessor linear change task starting point changes 
linear change task stores updates differences version application data space predecessor linear change task 
states defined linear change tasks active fro zen 
created linear change task placed ac tive state 
successor linear change task defined predecessor linear change task automatically immutable preserve state system respect task 
linear change task said frozen 
explicit freeze operation provided allow linear change task frozen independent creating successor linear change task 
necessary successor linear change task created frozen linear change task development continue 
parallel change task parallel change task intended support versioning styles applications elaborate versioning parallel development needs 
directed acyclic graph dag evolution history supported parallel change tasks 
parallel change task may successor parallel change tasks initial parallel change task application data space predecessor parallel change tasks 
linear change tasks parallel change tasks active frozen states 
successor parallel change tasks created predecessor parallel change tasks frozen preserve state system respect tasks 
alternatively parallel change tasks frozen ex plicit freeze operation necessary successor paral lel change tasks created frozen parallel change tasks allow development continue 
parallel change task created multiple pre parallel change tasks merge operation required produce initial state system newly created parallel change task 
support different application types may different cooperation needs flexible merge concepts influenced ideas adapted integrated basic mechanism support merging parallel change tasks 
details adaptation integration 
primary reason support linear change tasks parallel change tasks ensure simpler form inter action applications possible 
interaction required creating linear history sequence snapshots application data space minimal 
simple command suf ficient define linear change task 
parallel development supported type interaction merge operations required ensuring simpler interaction applications functionality 
additional types change tasks possible 
example application capable interacting explicitly multiple versions individual object change tasks supporting alternatives may introduced change control level 
applications merge alter native versions issue 
support structuring workspaces possible 
example applications able indicate objects included excluded context task change task supporting capabilities defined issue 
change task supporting features correspond original change task concept cover system 
due space limitations types change tasks described considered 
task description level general application task defined task description level support version control different levels detail abstraction 
application tasks primarily describe structured patterns organize versions application data space produced change control level issue 
application tasks keep track development history context different flow models 
group change tasks higher level units higher level workflow specifica tion 
support variety different application flow history documentation policies application task concept task description level general 
application de pendent policies defined refining general application task concept 
definition relationships application tasks possible express details particular process job 
degree ex pression allowed application tasks task description level vary versioning styles determines potential patterns specified level 
similar change tasks operations required environment application tasks 
operations support specification patterns required perform job subsequent traversal application task hierarchy job performed creation change tasks preserve state hypertext network signifi cant points course job 
additionally change tasks application tasks notion state current status level activity development process 
possible define variety versioning styles general concepts linear change tasks parallel change tasks application tasks 
legal combinations application change tasks allowable relation ships application tasks status set application tasks may refined create new versioning styles 
additionally particular versioning style set operations required behaviors opera tions applications may select 
introduce discuss meaningful versioning styles concepts section 
task versioning styles versioning concepts described previous section combined variety ways develop useful versioning styles 
building basic change task concept linear parallel versioning styles created 
designed prototyped versioning styles linear parallel 
styles intended sup port different class versioning needs 
directly refinements general change task application task concepts 
versioning style described verse graphical version browser illus functionality 
note applications utilize tools display manipulate task structures ways apply versioning style functionality directly manipulate display structures 
linear versioning styles linear versioning styles intended support applications require basic version control functionality 
implied name linear versioning styles support linear evolution history evolving system 
designed linear versioning styles 
primary difference process specification capabilities 
linear versioning style intended support applications require process specification functionality 
style root task provides initial linear change task application 
application progresses freeze commands issued application application user cf 
discussion section request current state hypertext network preserved 
new linear change task created subsequent updates changes objects 
root task maintains series linear change tasks application 
workflow specification supported linear versioning style root task required task description level 
illustrates screen image graphical task browser displaying instance linear versioning style 
indicated task performed writing 
number linear change tasks created representing snapshot images hypertext network task proceeds 
linear change task labeled date time creation link identifying predecessor linear change task 
linear change tasks linked root task child links 
hierarchical linear versioning style expands ca linear style provide support pro cess specification 
intended support applications require process specification capabilities require support parallel object evolution patterns 
change control level hierarchical linear versioning style similar linear style cf 

simple linear version thread supported capture evolution hypertext network 
task description lev el hierarchical linear versioning case structured tree application tasks allows specification patterns application application user cf 
discussion section 
tree rooted single root task represents job performed writing pa cf 

application tasks defined recursively represent decomposition processes associated task browser displaying linear versioning style 
dashed line superimposed screen image separates root task rt linear change tasks 
task description level change control level task browser displaying hierarchical linear versioning style 
dashed line superimposed screen image separates root task rt application tasks linear change tasks 
task description level change control level job 
application tasks linked subtask link application task tree represent component tasks required perform task 
application tasks defined required depth allowing patterns specified desired level granularity 
parallel activities supported hierarchical linear versioning style 
indicated predecessor links left right ordering sibling application tasks application task tree corresponding temporal sequence tasks performed accomplish job 
example author currently outlining results initial brainstorming session 
note task hierarchy shown represents writing style specific author 
organizations course possible 
operations defined application tasks hier linear versioning style create activate complete 
corresponding states defined application tasks scheduled active complete 
create command defines new application task successor task subtask existing task construct application task tree specifies process 
created application task initial status scheduled application tasks labeled st draft section section 
job performed activate complete commands traverse application task tree create linear change tasks preserve various states system 
activate command changes state application task scheduled active 
indicated linear change tasks hierarchical linear versioning style associated application task active created 
example author completed brainstorming phase currently working outline text 
task represented application task finished com plete operation change status task complete freeze linear change task 
parallel versioning styles parallel change task concept offers ability support numerous different flow models monitoring coordinating parallel activities 
example parallel change task directly linear change task cf 
support basic parallel versioning style 
structured organization mechanism required parallel activities allowed 
describe particular parallel versioning style designed support applications require exten sive process specification version control ties 
parallel versioning styles developed parallel change task proposed 
task description level parallel versioning style introduced cf 
similar hierar linear style 
tree application tasks rooted single root task specify patterns 
patterns may defined application application user cf 
discussion section 
application tasks linked subtask link application task represent component tasks required perform task 
states defined application tasks scheduled active complete 
additionally corresponding operations defined application tasks parallel style create activate complete similar functions 
provide support parallel activities successor predecessor relationships created sibling application tasks 
relationships enable specification temporal constraints component tasks application task 
hierarchical linear case implicit left right ordering tasks application task tree 
sibling tasks related successor sor relationships directly transitively performed parallel 
example illustrates task browser displaying instance parallel versioning style applied write 
note task labels particular change control level shortened allow task structure shown 
application task hierarchy example structured sections 
predecessor successor relationships defined application tasks representing related task concept generalization versioning styles sections sections proceed parallel 
subtasks defined task con cept generalization application task 
predecessor successor relationship established indicating change control level section labeled level task description level change control level task browser displaying parallel versioning style 
dashed line superimposed screen image separates root task rt application tasks parallel change tasks 
dashed ellipsis indicate groupings parent application task 
complete task description level section labeled level 
indicated example support par versioning style enables flexible description process 
parallel change tasks change control level preserve state hypertext network significant points performance task represented application task 
application task task descrip tion level associated set parallel change tasks change control level indicated dashed ellipsis 
correspond snapshots taken preserve significant states system performance application task 
parallel change tasks contained application task set parallel change tasks structured dag allowing parallel development activities supported context task authors working asynchronously subsection 
additionally parallelism allowed application tasks structures sets parallel change tasks dag 
illustrated example dag dags supported change tasks version control level parallel versioning style provides flexible support environment parallel development activities 
additional conditions defined parallel ver style support elaborate task specification capabilities 
application tasks task specification level associated parallel change tasks change control level 
initial parallel change task related application task link fig ure corresponds initial state system perfor mance task began 
final parallel change task related application task link represents state system completion task 
conditions provide types consis tency application tasks 
ensures parallel lines scope application task recursively subtask traced back single common state hypertext network 
second ensures result application task single consistent version hypertext network possibly resulting merge parallel lines development 
example application task labeled level involved parallel development activities started common initial parallel change task 
task completed parallel change tasks parallel development paths merged produce final parallel change task level application task 
task served value initial parallel change task successor application task labeled level 
parallel versioning style leaf node application tasks application task tree represent basic activities required complete task 
context activities performed 
example leaf node application task correspond process writing section subsection application tasks labeled level level 
interior node application tasks applica tion task labeled task conc 
gen serve structural purpose allowing basic activities represented leaf node application tasks organized logical groups reflecting activities required complete task 
support arrangement leaf node application tasks application task hierarchy allowed parallel change tasks 
interior node tasks exactly parallel change tasks representing initial final states 
process performing job described task de scription level progresses activate complete op erations traverse application task hierarchy 
eligible activation application task parent ap plication task active predecessor application tasks complete 
example application task labeled integration eligible activation individual sections pa completed 
application task activated initial parallel change task created 
value assigned initial parallel change task derived predecessor application tasks 
predecessor application task labeled level receives value final parallel change task single application task 
application task multiple predecessors task labeled integration merge operation required derive value initial parallel change task 
application task eli completion component tasks com plete 
application task completed final parallel change task created 
multiple threads devel opment parallel change tasks scope application task completed application task labeled level merge operation required produce final parallel change task 
details merge support parallel versioning style 
discussion design linear versioning styles support elaborate object evolution patterns 
simplicity styles appropriate important class applications basic versioning needs ability investigate state system previous point time 
example dolphin hypertext meeting room support tool useful examine state group discussion earlier point time 
basic versioning styles designed easily integrated applications 
example incorporate linear versioning style application simply needs capable indicating snapshot freeze operation performed 
applications achieved user interface freeze button involving actual cations application 
alternatively freeze function invoked outside application 
example invoked button menu option offered task browser cf 

task browser initiate application previous state application data space supporting version investigation process 
cases modifications required application 
similarly task definition version creation version selection functionality second linear parallel versioning styles invoked task browser figures 
approach applica tion user specify processes manually 
alternatively applications may functionality provided versioning style directly establish monitor application processes user intervention 
example cooperative authoring system state hyper text network automatically frozen new created new member joins cooperative group 
parallel versioning states hypertext network occasionally merged 
automatic merge procedure interactive merge tool available invoked auto matically specific versioning style functionality 
example process completing application task parallel lines development automatically initiate merge operation produce final parallel change task application task 
verse flexible version support environment implemented verse flexible version support environment offering linear parallel change tasks various types application tasks 
verse implemented smalltalk frame kit frame system smalltalk 
implement dolphin cooperative hypertext systems basis cover version server integrate version support 
implementation system supports application data space concept 
instantiation application persistently maintains separate data space 
consequently applied task concepts specified application data spaces 
change task directly statically linked specific application data space 
represents certain state application data space 
initially application data space empty initial change task contain changes 
creating updating objects frames certain application data space respective change task gets updated 
task implementation strategy implement version functionality frames property level 
detailed description implementation 
implementation root tasks application tasks straight forward 
versioning style defined special types root application tasks special object class implemented 
application data space created application user choose version support styles offered example styles application data space initialized accordingly 
general task browser provided verse examine define task struc ture 
figures illustrate implementation different versioning styles verse environment 
addition task browser general tool merging versioned frames list merger provided verse 
discusses tool merging hypertext networks 
comparison related research introduces set versioning styles discusses directions additional versioning styles 
versioning styles developed fit general version support environments proposed hypertext 
change tasks incorporated hyperbase layer application tasks intermediate layer cf 

hb version control framework change tasks correspond hyperbase level functionality application tasks represent metadata level functionality 
set versioning styles influenced pie cover systems 
change tasks correspond pie layers application tasks pie contexts 
change tasks application tasks considered general ization cover change application task concepts root task generalization cover top level task 
pie layers flexibly combined new con texts change tasks application tasks versioning styles arranged tem history cover system 
intent pie system support flexible configuration soft ware systems motivation support versioning process context different flow patterns pro vide easy integrate mechanism monitoring changes 
change tasks similar session concept rhythm delta mechanism system 
knowledge rhythm provide higher level aggregation mechanism sessions deltas 
approach especially suited support versioning hypertext provides mechanism easily cope versioned hypertext network single version time 
additionally keeps minimal changes copying hypertext network 
general versioning concepts hypertext introduced 
task versioning styles concepts developed integrated general hypertext version support environments 
definition versioning style consists selection change tasks change control level selection application tasks task description level 
primary criteria developing versioning styles cost benefit question considered application developer point view 
styles introduced detail assumption versioning applied entire hypertext network version versioned hypertext object version ap plication data space 
assumptions versioning styles easy hypertext applications 
additional styles possible applications willing extend enhance application functionality incorporate version support facilities 
versioning styles described 
implemented task versioning styles illustrated figures verse version support envi ronment 
additional versioning support styles currently development 
testing purposes linear versioning styles provide version support facilities dolphin hypertext meeting room support system 
plan test applicability different ver styles integrated various hypertext applications 
research hope develop set recommended versioning styles hypertext 
additionally mentioned earlier ability merge versions hypertext network single consistent state necessary support parallel versioning capabilities 
currently investigating process merging hypertext net works 
developed list tool merging hypertext networks currently designing graph interfaces provide extended support merge process 
learned process merging hyper text networks hope eventually define semi automatic hypertext merging policies 
authors gratefully acknowledge lothar die fischer providing smalltalk frame kit andreas hn karl assistance implementation verse 

campbell goodman 
ham general purpose hypertext machine 
cacm july 

durand 
cooperative editing synchronization 


durand haake hicks 
eds 

proceedings workshop versioning hypertext systems held connection echt 
available der gmd gmd ipsi darmstadt germany 

fischer 
smalltalk frame kit concepts 
gmd ipsi darmstadt germany march 

garg scacchi 
designing intelligent hypertext systems information management software engineering 
proceedings fifth acm conference hypertext hypertext seattle washington november 

goldstein bobrow 
layered approach software design 
interactive programming environment shrobe sandewall eds 
mcgraw hill ny pp 


haake 
cover contextual version server hypertext applications 
proceedings european conference hypertext echt milan italy nov pp 


haake 
cover implementation contextual version server hypertext applications 
proceedings european conference hypertext echt edinburgh uk sept pp 


haake haake 
take cover exploiting version support cooperative systems 
proceedings interchi human factors computing systems amsterdam netherlands april pp 


haake hicks 
verse flexible version support environment 
der gmd 
gmd ipsi darmstadt germany 

haake haake hicks 
merging hypertext networks 
position workshop version control cscw held connection ecscw 

halasz 
reflections notecards issues generation hypermedia systems 
cacm july 

halasz 
hypertext keynote address 
third acm conference hypertext hypertext san antonio texas december 

hicks leggett 
hypermedia version control framework 
sub acm transactions information systems 

hicks 
version control architecture ad hypermedia environments 
dissertation 
department computer science texas university college station tx 

dyke jenkins 
hypermedia version support online design journal 


leggett 
report workshop hyperbase systems held conjunction hypertext 
available department computer science technical report 
tamu hrl texas uni versity college station tx 

leggett smith fox 
final report nsf workshop hyperbase systems 
available department computer science technical report 
tamu hrl texas university college station tx 

leung 
versioning legal applications hypertext 



external anchors means avoiding bottlenecks widearea distribution hypertext data 



wide area distribution issues hypertext systems 
proceedings ontario canada october 
ller 
versioning structured technical docu mentation 


munson dewan 
flexible object merging framework 
proceedings conference computer supported cooperative cscw chapel hill north carolina oct pp 



structural cognitive problems providing version control hypertext 
proceedings european conference hypertext echt milan italy nov pp 



versioning issues hypertext sys tems 
object management tsichritzis ed 
centre universitaire informatique universit de gen switzerland pp 


soares rodriguez casanova 
nested composite nodes version control hyper media systems 


streitz haake lemke er sch tt th ring 
cooperative hypermedia authoring environment 
proceedings european conference hypertext echt milan italy nov pp 


streitz haake hol 
dolphin integrated meeting support local remote desktop environments 
proceedings conference computer supported cooperative cscw chapel hill north carolina oct pp 


whitehead anderson taylor 
proposal versioning support chimera system 


leggett 
exten develop dynamic open distributed hy systems 
proceedings european conference hypertext echt milan italy nov pp 

