online aggregation joseph hellerstein computer science division university california berkeley cs berkeley edu peter haas almaden research center ibm research division almaden ibm com helen wang computer science division university california berkeley cs berkeley edu aggregation traditional database systems performed batch mode query submitted system processes large volume data long period time eventually final answer returned 
archaic approach frustrating users abandoned areas computing 
propose new online aggregation interface permits users observe progress aggregation queries control execution fly 
outlining usability performance requirements system supporting online aggregation suite techniques extend database system meet requirements 
include methods returning output random order providing control relative rate different aggregates computed computing running confidence intervals 
report initial implementation online aggregation postgres 
aggregation increasingly important operation today relational database management systems dbms 
data sets grow larger users user interfaces sophisticated growing emphasis extracting just specific data items general characterizations large subsets data 
users want aggregate information right away producing may involve accessing condensing enormous amounts information 
unfortunately aggregation processing today database systems closely resembles batch processing 
users submit aggregation query system forced wait feedback system millions records 
significant period time system respond usually small final answer 
particularly frustrating aspect problem aggregation queries typically get rough picture large body information computed painstaking precision situations acceptably precise appear acm sigmod international conference management data may tucson arizona 
online aggregation interface query 
approximation available quickly 
propose changing interface aggregation processing extension changing aggregation processing 
idea perform aggregation online order allow users observe progress queries control execution fly 
motivation methodology initial results enhancing relational dbms support online aggregation 
enhancement requires changes user interface techniques query optimization execution 
show new existing statistical estimation techniques incorporated system help user assess proximity running aggregate final result proposed interface techniques accessible users little statistical background 
discussed online aggregation interface described goes merely providing platform statistical estimation techniques permits interactive approach formal informal data exploration analysis 
motivating example simple example consider query finds average grade course query avg select avg grades cs index attribute query scans entire grades table returning answer shown 
alternative consider user interface appear immediately user submits query 
interface display output soon system retrieves tuple satisfies clause 
output updated regularly speed comfortable human observer 
done status bar display give indication amount processing remaining completion 
avg field shows running aggregate estimate final result records retrieved far 
confidence interval fields give probabilistic estimate proximity current running aggregate final result example current average sigma final result probability 
interval sigma called running confidence interval soon query completes statistical information unnecessary need longer displayed 
interface significantly useful blinking cursor wristwatch icon traditionally users aggregation processing 
presents information times importantly gives user control processing 
user allowed trade accuracy time fly changing human factors including time constraints accuracy needs priority tasks 
user sees ongoing processing need specify factors advance 
obviously example quite simple complex examples 
simple example user considerably control system previously available 
rest highlight additional ways user control aggregation sections 
discuss number system issues need addressed order best support sort control section provide formulas computing confidence interval parameters section appendix results initial implementation online aggregation postgres section 
online aggregation statistical estimation assuming records retrieved random order running aggregate viewed statistical estimator final query result 
proximity running aggregate final result expressed example terms running confidence interval illustrated 
width confidence interval serves measure precision estimator 
previous hot concerned methods producing confidence interval width specified prior start query processing get actual answer probability 
underlying idea methods effectively maintain running confidence interval displayed user sampling soon length interval sufficiently small 
hou hot consider related problem producing confidence interval minimal length real time stopping condition run minutes 
key strength online aggregation interface confidence intervals exploited requiring priori specification stopping conditions 
may simple point consider case aggregation query group clause groups output 
online aggregation system user outputs sign buttons 
traditional dbms user know output groups priori control query group group fashion 
online aggregation interface natural online aggregation interface groups 
easy confidence interval methodology accessible non statistical users traditional dbms 
busy users quite comfortable online aggregation sign buttons interfaces familiar popular tools web browsers 
users certainly comfortable specifying statistical stopping conditions 
want specify explicit real time stopping conditions constraints real world scenario fluid minute processing suddenly worthwhile previously imposed deadline 
familiarity naturalness online aggregation interface 
shown user interface literature status bars improve user perception speed system mye 
combination status bars running estimates final result online processing controls potential significantly increase user satisfaction 
increase power online aggregation interface traditional interfaces calls powerful statistical estimation techniques 
previous methods double sampling hod computing confidence intervals assume records sampled techniques appropriate setting online aggregation 
previous focused primarily count queries number formulas proposed chebyshev inequality 
provide confidence interval formulas see section appendix applicable wider variety aggregation queries 
formulas conservative confidence intervals extensions hoeffding inequality hoe lead conservative confidence intervals typically narrower corresponding intervals chebyshev inequality 
discussion focused issues pertinent statistical estimation important remember benefit derived online aggregation statistical nature 
ongoing feedback provided online aggregation interface allows intuitive non statistical insight progress query 
permits ongoing non textual non statistical representations query output 
common example appearance data map graph retrieved database 
related interesting new class systems developing support called line analytical processing olap ccs 
systems support online aggregation extent proposed system red brick supports running count average sum functions 
features olap systems support roll sub aggregation drill cross tabulation 
cube operator proposed addition sql allow standard relational systems support kinds aggregation 
computing cube queries typically requires significant processing aad batch style aggregation systems unpleasant queries 
accurate computation entire data cube unnecessary online approximations various aggregates suffice numerous situations 
results relational aggregation focused new transformations optimizing queries aggregation cs yl spl shp 
techniques papers allow query optimizers latitude reordering operators plan 
beneficial system supporting aggregation including online aggregation systems 
initial fast query processing attempts quickly return tuples query 
report oracle rdb dec rdb vms system addresses issues fast processing running multiple query plans simultaneously intriguing architecture requires unusual query processing support az 
bayardo miranker propose optimization execution techniques fast processing nested loops joins bm 
potentially applicable online aggregation 
performance goals online aggregation somewhat complex fast queries describe section 
different related notion online query processing implemented system called approximate vl 
system defines approximate relational algebra uses process standard relational queries iteratively refined manner 
query stopped completion superset exact answer returned combined extensional intensional format 
model different type data browsing address online aggregation dependent carefully designed metadata address aggregation statistical assessments precision 
usability performance goals section outline usability performance goals considered design system online aggregation 
goals different traditional real time dbms 
subsequent sections describe goals met initial implementation 
usability goals continuous observation indicated statistical graphical intuitive interfaces allow users observe processing get sense current level precision 
set interfaces extensible appropriate interface aggregate function combination functions 
speed controllable multi group online aggregation interface 
application programming interface api provided facilitate 
control time precision users able terminate processing time controlling tradeoff time precision 
control offered relatively fine granularity 
example consider query query select avg grades group major output query online aggregation system set interfaces output group 
user able terminate processing group individually 
precise control permitted interface 
control fairness partiality users able control relative rate different running aggregates updated 
aggregates computed simultaneously group query group equally important user may want ensure running aggregates updated rate ii widths running confidence intervals decrease rate 
case courses higher variability grades updated frequently courses lower variability 
ideally course user pay performance penalty fairness 
cases may beneficial extend interface users dynamically control rate running aggregate group updated relative 
extension allows users express partiality favor groups 
example interface appears 
performance goals minimum time accuracy online aggregation key performance metric time required produce useful estimate final answer 
definition useful answer depends course user situation 
traditional systems level accuracy reached answer useful 
real time systems answer second late may entirely useless 
traditional real time systems answer available definition useful kinds stopping conditions statistical real time dynamic subjective user judgments 
minimum time completion desirable minimize time required produce final answer goal secondary performance goal 
conjecture large queries users online aggregation typically terminate processing long final answer produced 
pacing running aggregates updated regular rate guarantee smooth continuously improving display 
output rate need regular video system instance significant updates available prevent frustration user frequent user user interface 
building system online aggregation developed initial prototype ideas postgres dbms 
section describe approaches followed trying add online aggregation postgres 
approach trivial implement suffered serious deficiencies usability performance 
second approach required significant modifications postgres internals met goals effectively 
naive approach postgres supports arbitrary user defined output functions possible modification produce simple running aggregates red brick 
consider query requests average grades query select grades postgres write function running avg returns float computing current average tuple 
write functions running confidence running interval statistical results section 
note running functions registered aggregate functions postgres standard user defined functions 
result postgres returns running values tuple satisfies clause 
section performance results demonstrating prohibitive costs handling tuples 
postgres extensibility features convenient supporting simple running aggregates 
unfortunately postgres useful complicated aggregates running functions fact postgres aggregates sql group clause 
number performance functionality problems arise forward looking today database systems traditional performance goal minimizing time complete answer 
detailed approach clear goes meeting performance usability goals naive solution 
modifying dbms support online aggregation online aggregation implemented userlevel addition traditional dbms 
section describe modifications database engine support online aggregation 
implemented bulk techniques postgres performance results section 
random access data running aggregates computed correctly regardless order records accessed 
statistically meaningful estimates precision running aggregates available records retrieved random order 
practically speaking means online aggregation system avoid access methods attribute values tuple affect order tuple retrieved 
guaranteed number ways 
heap scans traditional heap file access methods records stored unspecified order simple heap scans effective online aggregation 
noted order heap file reflect logical order insertion order explicit clustering 
order correlated values attributes records may case bulk load clustered heap files online aggregation system note fact system statistics online aggregation queries attributes choose alternative access method 

index scans scanning index returns tuples order attributes tree index groups attributes hash multi dimensional indices 
techniques inappropriate online aggregation queries indexed attributes 
example column contains copies value copies value ordered grouped access tuples return wildly skewed online estimates average column 
attributes indexed aggregated query index scan produce appropriately random access values attributes aggregated assuming correlation attributes 

sampling indices olken presents techniques pseudo random sampling various index structures 
techniques ideal producing meaningful confidence intervals 
hand efficient heap scans standard index scans require repeated probing random index buckets defeat optimizations clustering prefetching 
heap scans method choice large aggregation queries 
access methods may appropriate heap file ordered aggregation attributes crucial statistically valid running confidence intervals 
implementation postgres supports heap scans index scans currently support sampling access method 
fair non blocking group distinct online aggregation system returning answers soon possible 
aggregates multiple groups displayed simultaneously important groups receive updates fair manner 
traditional technique grouping sort input relation aggregation fields collect groups scanning output sort 
presents problems 
sorting blocking algorithm outputs produced entire input processed sorted runs take considerable time 
second results groups computed entirety time aggregate group computed completion second group considered 
sort grouping algorithms inappropriate online aggregation 
alternative hash input relation grouping columns 
hashing provides non blocking approach grouping soon tuple read input updated estimate aggregate group produced 
groups output updated constituent records read input 
hand drawback hashing scale gracefully number grouping values hash table exceeds size associated buffer space hashing algorithm thrash 
problem alleviated unary hybrid hashing bra 
may expected number distinct groups query relatively small naive hashing may acceptable cases 
optimization unary hybrid hashing called hybrid cache hn guarantees performance equivalent naive hashing cases hash table fits memory scales gracefully hash table grows large 
sql supports aggregates form aggregate distinct columns 
aggregates system remove duplicates aggregation columns computing aggregate 
grouping duplicate elimination similar accomplished sorting hashing 
grouping duplicates eliminated hashing online aggregation system 
scenario unusual hash table grow quite large techniques hybrid cache prove important 
original version postgres sorting remove duplicates form groups modified naive hashing operations 
plan implementation hybrid cache online aggregation system 
index hash grouping updates particular group available constituent records appear input grouping operator 
random delivery tuples input updates groups members infrequent 
prevent problem desirable read tuples input round robin fashion provide random delivery values group choose groups order tuple group tuple group tuple group 
support equal width confidence intervals partiality constraints may desirable weighted round robin scheme fetches groups 
support behavior technique called index 
tree index grouping columns request tuple open scan leftmost edge index find key value assign scan search key sac form 
fetching tuple key value subsequent request tuple open second index index naturally applicable types indices omit discussion due space constraints 
scan search key 
order quickly find group table 
find value change second scan search key return tuple 
repeat procedure subsequent requests value kn search key 
kn returns tuples 
point satisfy requests tuples fetching scans kn possibly weighted round robin fashion 
appropriate buffering index efficient scanning relation unclustered index tuple relation fetched exactly fetch may require random performance improved index primary access method relation ii relation clustered grouping columns iii index keys contain grouping aggregation columns grouping columns prefix 
cases performance index stride scanning relation clustered secondary index block relation fetched 
important advantage index allows control delivery tuples groups 
particular assure group updated output appropriate rate default settings online user modifications 
final advantage user requests group stopped groups deliver tuples quickly 
extended postgres support index weighted round robin scheduling 
technique support sign speed buttons 
index supports usability performance goals 
non blocking join algorithms order guarantee reasonably interactive display online aggregations important avoid algorithms block query processing 
section initial discussion standard join algorithms regard blocking properties 
plan quantitative evaluation tradeoffs initial analysis points important trends 
sort merge join clearly unacceptable online aggregation queries sorting blocking operation 
merge join sort acceptable cases 
complications arise sorted output merge join 
access methods provide tuples sorted order join methods generate sorted output cause problems terms statistics terms fairness grouping 
merge join useful cases chosen care 
hybrid hash join blocks time required hash inner relation 
may acceptable inner relation small particularly fits buffer space available 
pipeline hash join technique wa non blocking hash join treats inner outer relations symmetrically 
pipeline hash join typically efficient terms completion time hybrid hash join shares buffers inner outer relations 
may appropriate online aggregation relations join large 
safest join algorithm online aggregation nested loops join particularly index inner relation 
non blocking produces outputs order outermost relation 
results optimizing pipeline nested loops joins improve speed access tuples bm 
large unindexed inner relation rate production nested loops join may slow albeit steady unacceptable online aggregation 
clearly number choices join strategies satisfy goals online aggregation certain situations 
traditional query processing optimizer choose strategies discuss issue 
optimization thorough understanding query optimization online aggregation require quantitative specification performance goals online processing ii accurate cost model relational operators framework 
consider date preliminary specific analyses 
basic observations vastly improve quality plans produced online aggregation points 
sorting avoided entirely online aggregation system explicitly requested user 
scenarios sorting quick small relations alternative algorithms hashing iteration comparably fast anyway 
second notion interesting orders sac traditional optimizer extended online aggregation 
shown section undesirable produce results ordered aggregation grouping columns 
certain operations scans joins noted interestingly bad orders may pruned space possible sub solutions optimization 
third blocking sub operations processing inner relation hybrid hash join costs disproportionate processing time 
cost model operation online aggregation system broken parts time td spent blocking operations dead time user perspective time spent producing tuples output output time 
appropriate cost function online aggregation form td linear function super linear exponential 
tax operations large amounts dead time may naturally prune inappropriate plans include sorting 
fourth preference plans maximize user control index 
guarantee way characterize controllability features operator weigh benefit features raw performance considerations 
tradeoffs need evaluated output rate query time completion 
cases best batch plan merge join sorted relations aggregation attributes may faster best non blocking plan nested loops join relations batch behavior may preferable online environment 
point tradeoff happens clearly dependent user desires 
interesting direction intend explore devise natural controls allow relatively naive users set preferences regard 
running multiple versions query rdb az natural way decision fly expense wasted computing resources 
aggregate functions order produce running aggregates standard set aggregate functions extended 
aggregate functions written provide running estimates 
single table queries running computation sum count avg aggregates straightforward running computation var std dev aggregates accomplished numerically stable algorithms chan golub leveque cgl 
addition new aggregate functions defined return running confidence intervals estimates 
provide formulae variety confidence intervals section appendix 
extensible systems postgres implementation database extensions relatively easy new aggregate functions added users 
query executor modified provide running aggregate values needed display api provided control rate values provided 
discuss issue 
api traditional sql cursor interface sufficiently robust support kinds feedback wish pass user interface database server 
extensible dbms postgres circumvent problem submitting additional queries call user defined functions turn modify processing dbms 
introduced functions postgres 

takes arguments cursor group value handled accordingly backend speed slow processing group query changing round robin schedule index stride 
fourth function takes cursor name integer arguments sets skip factor cursor 
skip factor set dbms ships update user interface input tuples processed aggregate 
update frequency affect readability performance user interface particularly user interface running different machine dbms 
full user interface postgres includes control skip factor shown 
functionality interface implemented postgres 
window interface grows dynamically new groups discovered processing 
emphasize user interface merely example done appropriate system api 
solution queries user defined functions inelegant workaround insufficient api provided sql 
subsidiary goal push extensions sql api support interfaces online control queries 
running confidence intervals precision running aggregate indicated means associated running confidence interval 
suppose records retrieved random order running aggregate yn computed 
prespecified confidence parameter idea shown examples display precision parameter ffl yn final answer probability approximately equal equivalently random full postgres online aggregation interface 
interval yn gammaffl yn ffln contains probability approximately equal 
previous examples interface confidence parameter labeled confidence precision parameter ffl labeled interval 
large value ffl serves warn user records seen far may sufficiently representative entire database current estimate query result may far final result 
discussed user terminate processing aggregation query ffl decreases desired level 
running confidence interval statistically meaningful provided records retrieved random order 
assumption view records retrieved far random sample drawn uniformly replacement set records database 
types running confidence intervals constructed retrieved records conservative confidence intervals contain final answer probability guaranteed greater equal intervals hoeffding inequality hoe extensions haa inequality valid 
ii large sample confidence intervals contain final answer probability approximately equal central limit theorems clt 
intervals appropriate small records retrieved far viewed sample drawn effectively replacement large approximations clt accurate 
small large say large sample assumption holds 
intervals judiciously true probability large sample confidence interval contains nominal probability advantage large sample confidence intervals applicable typically shorter conservative confidence intervals 
iii deterministic confidence intervals contain probability 
intervals typically useful large 
types confidence interval deterministic confidence interval typically form yn gamma ffl yn ffl ffl ffl practice may desirable dynamically adjust type running confidence interval displayed current value illustrate construction conservative confidence intervals simple example 
conjecture users typically terminate aggregation query records retrieved form useful deterministic confidence interval discuss intervals 
relation containing tuples denoted tm consider query form select avg expression expression arithmetic expression involving attributes typical instance query look select avg price quantity inventory denote value expression applied tuple random index ith tuple retrieved ith tuple retrieved tuple tl assume retrieval orders equally delta delta delta tuples retrieved running aggregate avg query 
obtain conservative confidence interval require exist constants known priori constants typically obtained database system catalog 
denote final answer query 
hoeffding inequality hoe asserts phi jy gamma ffl psi gamma gamma nffl gammaa ffl 
setting right side inequality equal solving ffl see probability running average final answer ffl gamma ln gamma gamma delta obtain large sample confidence interval require priori bounds function large sample assumption hold 
small random indices viewed sequence independent identically distributed random variables 
set oe gamma gamma delta large follows standard clt random variables gamma oe distributed approximately standardized mean variance normal random variable 
standard continuous mapping argument bil section assertion holds oe replaced estimator tn gamma gamma gamma gamma delta follows phi jy gamma ffl psi fi fi fi fi fi gamma fi fi fi fi fi ffl phi ffl gamma ffl phi cumulative distribution function standardized normal random variable 
zp quantile distribution phi 
setting rightmost term equal solving ffl see large sample confidence interval obtained choosing ffl tn example relatively simple utilizes wellknown results probability theory 
aggregation query consists avg sum count variance std dev operator applied tuples base relation tuples result relation specified standard selection join projection operators 
generalizations haa haa hoeffding inequality standard clt permit development confidence interval formulas complex queries 
formulas summarized appendix 
performance issues section initial results implementation online aggregation postgres result illustrate functionality system performance issues 
implementation publicly available postgres distribution pos version 
measurements performed postgres server running dec mb main memory gb disk dec osf operating system 
client application written tcl tk run hp pa risc workstation local network 
experiments enrollment data university wisconsin represents enrollment history students year period 
focus single table enroll records information student enrollment particular class 
table rows postgres occupies mb disk 
experiment query simply finds average grade table query select avg grade confidence interval enroll addition average grade query returns conservative confidence interval average grade interval contains final answer probability 
function formula ffl 
avg aggregate functions registered postgres provide running output online aggregation 
shows results running query various configurations system 
vertical bar seconds represents time taken postgres traditional batch processing 
curves represents half width ffl running interval confidence sequential scan enroll table 
experiment varied skip factor described section 
point note online aggregation extremely useful reasonable estimates available quickly 
addition experiments illustrate need setting skip factor intelligently 
client application written tcl tk interpreted slow language experiments produces output trace tuple displayed 
skip factor reduced client application requests tuples seconds skip skip skip skip half width ffl conservative confidence interval query 
slower rate delivered server note confidence intervals skip order magnitude wider skip skip 
naive implementation online aggregation suggested section correspond setting 
implementation poor performance shipping displaying rows enroll 
second experiment uses similar query requests average grade college university 
query select college avg grade confidence interval enroll group college note query choose lower confidence allows get smaller intervals somewhat quickly 
values college column 
performance large group college tuples small group college tuples variety query plans 
graph measure half width confidence interval time sequential scan clustered index stride unclustered index stride clustered index stride groups measured stopped early pressing sign button soon query begins running figures 
clearly index stride faster clustered indices unclustered ones number heap file os reduced clustering 
interestingly note groups stopped index groups remain computed faster reflected steeper decline clustered clustered relative corresponding clustered curves 
interesting aspect graphs difference sequential scanning index 
sequential scanning retrieves tuples faster index cost lack control 
large group superior speed sequential scanning reflected rate half width confidence interval decreases 
smaller group unclustered index stride drops steeply sequential scan 
seconds unclustered clustered clustered sequential half width ffl conservative confidence interval query large group 
seconds unclustered clustered clustered sequential half width ffl conservative confidence interval query small group 
due fact tuples group appear fairly rarely relation 
sequential scan provides tuples occasionally index groups stopped fetches tuples regular basis part round robin schedule 
highlights additional advantage index provides faster estimates small groups access methods provide random arrivals tuples 
experiments provide initial insights techniques online aggregation serve evidence approach online aggregation provides functionality performance available naive solutions 
clearly additional done measuring costs benefits various techniques proposed 
reserve issues study 
demonstrate need new approach aggregation interactive intuitive user controllable 
supporting online approach aggregation requires significant extension relational database engine 
prototype implementation extended postgres aggregates produce running output hash grouping duplicate elimination index minor optimization changes new api user interfaces 
extensions developed relatively attractive system satisfies performance usability goals set solve 
important feature user interface online aggregation ability produce statistical confidence intervals running aggregates 
indicates confidence intervals implemented dbms stores rudimentary statistics minimum maximum values column 
noted usability performance needs online aggregation defined latitude solution space problem 
intend visit issues detail phase development done context commercial parallel object relational dbms 
conclude listing directions considering ffl user interface online aggregation motivated need better user interfaces clear additional needed area 
direction plan pursue running plots queries dimensional canvas exemplified batch visualization system tioga 
system view screen graphical aggregate data items aggregated progressively refined image 
techniques storing presenting progressive refinements images understood vu exploited popular web browsers 
interesting try find common ground techniques image compression techniques progressive network delivery 
interface problem just information screen 
current olap systems typically handled presenting input data small number default aggregate groups allowing drill roll facilities 
hope combine interface online processing drill available instantly super aggregates continuously computed background users drill ad hoc sub aggregates computed quickly 
ffl nested queries open question provide online execution queries containing aggregations subqueries outer level queries running results top level depend running results lower levels 
traditional block time processing requires lower query blocks processed higher ones blocking execution model violates performance goals 
non blocking approach lead significant statistical problems terms confidence intervals addition complicating performance usability issues 
additional question processing best time sliced various query blocks uniprocessor parallel configurations 
ffl control indices provide maximal user control appropriate index support index 
considering techniques providing control pun intended 
scenarios 
example order provide partiality aggregates joins may beneficial effectively scan base relations multiple times time providing different subset relation join processing early subsets contain preponderance tuples preferred groups 
functionality multiple scans efficiently achieved piggy back schemes allow cursor share single physical scan data 
possibility heaps fly support desirable access orders subsequent 
ffl checkpointing continuation aggregation queries benefit online techniques typically long running operations 
result checkpointed computation saved system crashes power failures operator errors 
particularly natural online aggregation queries users allowed continue queries pieces queries previously stopped 
checkpoints partially computed queries materialized sample views 
ffl tracking online queries users may aggregation processing early may want actual tuples compute partial aggregate 
common request context example financial auditing statistical quality control unusual value online aggregate produced sample population may indicate need study population detail 
order support query tracking generate relation rid list view processing aggregation online 
techniques doing efficiently depend query 
ffl extensions statistical results actively working confidence intervals additional aggregate functions 
addition developing techniques provide simultaneous confidence intervals describe statistical accuracy estimations groups complementing confidence interval group 
statistical techniques assume accurate statistical information system catalogs particularly regarding cardinalities relations 
extension pursuing provide confidence intervals tolerate certain amount error stored statistics 
acknowledgments index inspired comment mike stonebraker 
andrew implemented postgres online aggregation interface 
due jeff naughton praveen seshadri donald margo seltzer interesting discussion 
editorial suggestions alex aiken mike carey alice ford wei hong kabra marcel bruce lindsay adam sah sunita sarawagi anonymous reviewers students cs uc berkeley spring 
wisconsin course dataset graciously provided bob nolan uw madison department information technology doit 
hellerstein wang partially funded informix 
aad agarwal agrawal deshpande gupta naughton ramakrishnan sarawagi 
computation multidimensional aggregates 
proc 
nd intl 
conf 
large data bases mumbai bombay september 
aiken chen stonebraker woodruff 
tioga direct visualization environment 
proc 
th intl 
conf 
data engineering pages new orleans february 
az 
query processing optimization oracle rdb 
vldb journal 
bil billingsley 
probability measure 
wiley new york second edition 
bm bayardo jr miranker 
processing queries answers 
fifth intl 
conf 
information knowledge management pages rockville maryland 
bra 
hashing methods relational algebra operations 
proc 
th intl 
conf 
large data bases pages singapore august 
ccs codd codd 
providing olap line analytical processing user analysts mandate 
url www com papers html 
cgl chan golub leveque 
algorithms computing sample variance analysis recommendation 
amer 
statist 
cs chaudhuri shim 
optimizing queries aggregate views 
apers bouzeghoub editors advances database technology edbt th intl 
conf 
extending database technology volume lecture notes computer science pages 
springer verlag new york 
dewitt katz olken shapiro stonebraker wood 
implementation techniques main memory database systems 
proc 
acm sigmod intl 
conf 
management data pages boston june 
gray bosworth layman pirahesh 
data cube relational aggregation operator generalizing group cross tab sub totals 
proc 
th intl 
conf 
data engineering pages 
gupta harinarayan quass 
processing data warehousing environments 
proc 
st intl 
conf 
large data bases zurich september pages 
haa haas 
hoeffding inequalities join selectivity estimation online aggregation 
ibm research report rj ibm almaden research center san jose ca 
haa haas 
large sample deterministic confidence intervals online aggregation 
ibm research report rj ibm almaden research center san jose ca 
hn hellerstein naughton 
query execution techniques caching expensive methods 
proc 
intl 
conf 
management data montreal june pages 
haas naughton seshadri swami 
selectivity cost estimation joins random sampling 
comput 
system sci 
hod 
hou ozsoyoglu 
count query evaluation relational databases 
proceedings acm sigmod intl 
conf 
managment data pages 
acm press 
hoe hoeffding 
probability inequalities sums bounded random variables 
amer 
statist 
assoc 
hot 
hou ozsoyoglu 
statistical estimators relational algebra expressions 
proc 
th acm sigact sigmod sigart symposium principles database systems pages austin march 
hot 
hou ozsoyoglu 
processing aggregate relational queries hard time constraints 
proc 
acm sigmod intl 
conf 
management data pages portland may june 
lipton naughton schneider seshadri 
efficient sampling strategies relational database operations 
theoretical computer science 
mye myers 
importance percent done progress indicators computer human interfaces 
proc 
sigchi human factors computing systems pages april 
olken 
random sampling databases 
phd thesis university california berkeley 
pos postgres home page 
url www ki net postgres 
sac selinger astrahan chamberlin lorie price 
access path selection relational database management system 
proc 
acm sigmod intl 
conf 
management data pages boston june 
shp seshadri hellerstein pirahesh leung ramakrishnan srivastava stuckey sudarshan 
cost optimization magic algebra implementation 
proc 
acm sigmod intl 
conf 
management data montreal june pages 
spl seshadri pirahesh leung 
complex query decorrelation 
proc 
th ieee intl 
conf 
data engineering new orleans february 
vu vetterli uz 
multiresolution coding techniques digital video review 
multidimensional systems signal processing 
vl liu 
approximate query processor produces monotonically improving approximate answers 
ieee transactions knowledge data engineering 
wa wilschut apers 
dataflow query execution parallel main memory environment 
proc 
intl 
conf 
parallel distributed information systems pages dec 
yl yan 
larson 
eager aggregation lazy aggregation 
proc 
st intl 
conf 
large data bases zurich september pages 
appendix formulas running confidence intervals appendix provide formulas compute conservative large sample confidence intervals variety aggregation queries encountered practice 
fix confidence parameter give formulas precision parameter ffl consider queries form select op expression predicate op count sum avg variance std dev expression arithmetic expression predicate arbitrary predicate involving attributes op equal count assume simplicity expression equal value expression equal tuples 
null values handled modifying predicate counts distinct values handled described 
section relation consists tuples op equal count sum formulas apply provided take equal times value expression applied tuple tuple satisfies predicate 
handle remaining operators avg variance std dev proceed follows 
section value expression applied tuple random index ith tuple retrieved priori bounds function denote set tuples satisfy predicate set 
tuples retrieved running aggregates avg variance std dev query uv zn gamma gamma gamma delta zn respectively function uv defined uv 
assume 
set jaj delta gamma jaj delta gamma gamma jaj delta gamma max gamma bn bin ln gamma gamma delta xy max bxc greatest integer set tn tn gamma gamma gamma tn delta tn gamma gamma gamma tn delta gamma gamma tn delta arbitrary real valued functions defined set gn uv gamma uv uv gamma uv uv gamma uv uv gamma uv gamma tn uv tn tn uv tn uv gamma delta notation table gives formulas precision constant ffl conservative large sample confidence intervals formulas derived haa haa 
quantity appears formulas lower bound unknown type avg variance std dev 
gamma ln gamma gamma delta gamma gamma sb gamma gamma gamma sb gamma lg sample gn nt nt nzn table formulas precision parameters ffl table 
quantity jsj larger lower bound narrower resulting conservative confidence interval 
note set sufficiently large 
predicate empty taken second third entries row table 
entries term sum discarded 
formulas table apply queries form select op expression predicate group attributes group attribute value equal formulas tuple satisfies predicate attribute 
formulas easily modified handle queries form select op distinct expression predicate idea set gamma set 
formulas table hold replaced uv replaced replaced consider queries form select op expression rk predicate op count sum avg expression arithmetic expression predicate arbitrary predicate involving attributes input relations rk expression equal op equal count 
usually predicate conjunction join selection predicates 
typical instance query look select sum supplier price inventory quantity supplier inventory supplier inventory inventory location san jose denote tuples number tuples set equal ff times value expression applied tuples ff op equal avg ff delta delta delta mk op equal count sum 
denote subset theta theta delta delta delta theta rk tuples jointly satisfy predicate 
set 
priori bounds function relation assume tuples retrieved random order independently retrieval order relations 
denote random index ith tuple retrieved relation suppose tuples retrieved relation min kk 
see haa haa extensions case tuples retrieved running aggregate count sum query uv tn delta delta delta type sum count avg 
gamma ln gamma gamma delta gamma lg sample uv gn table formulas precision parameter ffl tables 
definition function uv analogous definition single table case 
running aggregate avg query tn uv tn 
set tn gamma delta delta delta gamma delta delta delta gamma gamma gamma tn gamma tn gamma tn gamma tn tn gamma tn set rn tn uv tn gn uv gamma rn uv notation table gives formulas precision constant ffl conservative large sample confidence intervals 
formulas derived haa haa 
seen currently formula available conservative confidence intervals corresponding avg queries selection predicates 
predicates average taken cross product input relations formula table count sum queries applies 
case uncommon practice 
