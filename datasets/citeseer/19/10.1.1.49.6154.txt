logic reasoning time reliability hans hansson bengt jonsson swedish institute computer science box kista sweden mail sics se bengt sics se department computer systems uppsala university sics research report sics december logic stating properties request service probability service carried seconds 
logic extends temporal logic ctl emerson clarke sistla time probabilities 
formulas interpreted discrete time markov chains 
give algorithms checking markov chain satisfies formula logic 
algorithms require polynomial number arithmetic operations size formula research report revised extended version appeared title framework reasoning time reliability proceeding th ieee real time systems symposium santa monica ca december 
partially supported swedish board technical development stu part esprit bra project spec swedish telecommunication administration 
markov chain 
simple example included illustrate algorithms 
keywords branching time temporal logic markov chains model checking real time reliability research formal methods specification verification computer systems large extent focussed correctness computed values qualitative ordering events ignoring aspects deal real time properties bounds response times 
systems control systems timing behavior important aspect correctness system interest research aspects formal methods increasing moment see jos 
systems important certain time bounds behavior met 
examples flight control systems process control systems 
methods reasoning hard deadlines obtained adding time existing methods 
add time explicit virtual variable standard verification techniques ph sl ow 
logics deal explicitly time quantities designed bh jm emss 
systems interested average performance throughput average response times methods analyzing properties usually employ markov analysis 
systems described different variants timed stochastic petri nets mol abc rp hv 
shall investigate methods reasoning properties request service percent probability service carried seconds 
call properties soft deadlines 
soft deadlines interesting systems bound response time important failure meet response time result disaster loss lives examples systems soft deadlines relevant telephone switching networks computer networks 
logic stating soft deadlines 
logic emerson clarke sistla computation tree logic ctl ces 
ctl modal temporal logic reasoning qualitative program correctness 
typical properties expressible ctl eventually hold execution paths afp hold execution paths hold continuously execution path egr 
independently emerson mok sistla srinivasan emss extended ctl deal quantitative time 
examples properties expressible extended logic true time units af continuously hold time units ag 
suited specification verification hard deadlines 
logic equipped temporal operators time bounds way time discrete time unit corresponds transition execution path 
addition enable reasoning soft deadlines replaced path quantifiers probabilities 
examples properties expressible logic probability hold time units probability hold continuously time units 
interpret formulas logic structures discrete time markov chains 
relates probabilistic temporal logics hs hs temporal logics probabilistic models cy works deal properties hold probability non zero probability 
related research area timed stochastic petri nets tpn mol abc rp hv 
effort tpn research goes generating markov chains tpn probably integrated framework 
main difference tpn approach class properties analyzed markov chains 
tpn tradition analyzes properties mean utilization mean response time average throughput 
section define logic probabilistic real time computation tree logic pctl section provide examples properties expressed pctl 
section discuss algorithms checking structure model pctl formula 
section presents verification simple communication protocol 
section discuss related 
section summarize results propose directions 
proofs theorems claims appendix appendix contains details extra algorithms 
probabilistic real time ctl section define logic called probabilistic real time computation tree logic pctl expressing real time probability systems 
assume finite set atomic propositions 
denote atomic propositions 
formulas pctl built atomic propositions propositional logic connectives operators expressing time probabilities 
set pctl formulas divided path formulas state formulas 
syntax defined inductively follows ffl atomic proposition state formula ffl state formulas ffl state formulas nonnegative integer path formulas ffl path formula real number state formulas 
shall range pctl formulas 
intuitively state formulas represent properties states path formulas represent properties paths sequences states 
propositional connectives usual meanings 
operator strong operator weak operator 
state formulas express holds path probability greater respectively 
shall shorthand shorthand intuitively means probability true time units true true 
intuitively means probability remain true time units true time units true true 
analogous meaning 
pctl formulas interpreted structures discrete time markov chains 
specified initial state associated structure 
addition state assignment truth values atomic propositions appearing formula 
formally structure quadruple hs li finite set states ranged initial state transition probability function theta labeling function assigning atomic propositions states intuitively transition considered require time unit 
display structures transition diagrams states circles labeled atomic propositions transitions non zero probability represented arrows labeled probabilities arrow going state state labelled 
initial state indicated extra arrow 
example shows structure states transitions non zero probability 
state labeled initial state 
ae ae ae ae ae ae xx example structure path oe state structure infinite sequence delta delta delta delta delta delta states state 
th state oe denoted oe prefix oe length denoted oe oe delta delta delta structure state define probability measure set paths measure theory coh ksk defined probability space hx ai set paths starting sigma algebra generated sets foe oe delta delta delta paths common finite prefix delta delta delta measure defined follows finite sequence delta delta delta states foe oe delta delta delta theta delta delta delta thetat gamma measure set paths oe oe delta delta delta equal product theta delta delta delta theta gamma 
define foe oe 
uniquely defines measure sets paths sigma algebra define truth pctl formulas structure satisfaction relation intuitively means state formula true state structure order define satisfaction relation states helpful relation oe jj intuitively means path oe satisfies path formula relations oe jj inductively defined follows iff iff iff iff iff oe jjk iff exists oe oe oe jjk iff oe jjk oe iff measure set paths oe starting oe jjk iff measure set paths oe starting oe jjk greater define initial state properties expressible pctl section examples properties expressed pctl 
discuss facilities pctl suitable specification soft hard deadlines 
main difference pctl branching time temporal logics ctl quantification paths ability specify quantitative time 
ctl allows universal af existential ef quantification paths state property hold computations paths hold computations paths 
possible state property hold certain portion computations computations 
pctl hand arbitrary probabilities assigned path formulas obtaining general quantification paths 
analogy universal existential quantification pctl defined af ef quantitative time allows specify time critical properties relate occurrence events system real time 
important programs operate distributed real time environments communication protocols industrial control systems 
pctl possible state property hold continuously specific time interval property hold time interval 
combining quantification define false true intuitively means formula holds continuously time units probability means formula holds time units probability important requirement real time distributed systems continuously operating time controller receives alarm signal sensor controller take appropriate action 
express requirements pctl operators false aff true egf false eff true intuitively means true states reached non zero probability aff means state true eventually reached probability egf means non zero probability continuously true eff means exists state holds reached non zero probability 
owicki lamport ol defined leads operator intuitive meaning true eventually hold 
pctl define quantified leads operator ag hi ji intuitively means holds probability hold time units 
analogies modal operators derived basic pctl operators 
instance define operator corresponds ctl ces operator follows example specify mutual exclusion property 
consider processes critical section 
atomic propositions indicates non critical trying critical regions respectively 
mutual exclusion property expressed ag sufficient real time systems property states bad behavior avoided safety 
capture real time behavior specify enters trying region enter critical region time units 
pctl expressed systems sufficient deadline met cases 
relaxed property expressed relaxing timing requirement enable costly implementation shows acceptable behavior 
safe side add strict upper limit relaxed property combining hard soft deadlines 
assume want enter critical region time units time units get property model checking pctl section model checking algorithm structure hs li pctl formula determines algorithm algorithm model checking ctl ces 
designed finishes state labeled set subformulas true state 
conclude initial state labeled state structure algorithm uses variable label indicate subformulas true state initially state labeled atomic propositions true label labeling performed starting smallest subformula labeled labeling states 
composite formulas labeled labeling parts 
assuming performed labeling labeling corresponding negation propositional connectives straightforward label label label label label ff label label label ff label label label label ff label label addition new formula subformula sequel shall treat modal operators 
section presents algorithms labeling states modal subformulas pctl 
section discuss labeling cases extreme parameter values 
labeling states modal subformulas pctl shall give algorithm labeling states formula assuming done labeling formulas algorithm section 
introduce function integer 
define measure set paths oe starting oe jj define 
appendix prove satisfies recurrence equation label label theta gamma recurrence equation gives algorithm labels state recurrence equation formulated terms matrix multiplication 
states partition subsets follows success states states labeled states label 
failure states states labeled states label 
inconclusive states states labeled states label label 
define theta matrix column vector size ith element 
define label 

possible optimization collapse states representative states reduce size js theta js 
appendix prove equations equivalent 
formulas form calculations label states model checking formulas form done dual formulas gammap gammap alternatively define analogy case construct algorithms similar algorithms 
done appendix calculating propose algorithms calculating 
algorithm directly derived equation second algorithm uses matrix multiplication matrix equation 
algorithm label label gamma algorithm label algorithm requires jsj arithmetical operations 
ignoring zero probability transitions reduce number arithmetical operations required jsj jej jej number transitions non zero probability 
fully connected structure expressions coincide jej jsj matrix multiplication algorithm performed log jsj arithmetical actual worst case complexity reduced jsj jsj outermost loop run times loops run jsj times assignment statement just innermost loop arithmetical operations innermost assignment statement 
operations calculated log matrix multiplications requiring jsj arithmetical operations 
define size modal operator log integer time parameter operator 
size jf pctl formula defined number propositional connectives modal operators plus sum sizes modal operators problem structure satisfies formula decided tmax jsj jej jf jsj jf arithmetical operations depending algorithm jsj number states jej number transitions non zero probability max maximum time parameter formula jf size formula 
second expression complexity polynomial size formula structure 
section illustrate algorithms verification simple communication protocol 
alternative algorithms labeling states modal subformulas section discuss alternative algorithms cases modal operator extreme time probability parameter values 
section consider formulas case handled dual modal operators 
improve performance actual implementation probably desirable separate algorithms case 
algorithms defined appendix table gives classification possible combinations parameter values complexities performing labeling 
entries left column state labeling problem collapses problem labeling states general case middle entry considered subsection 
alternative algorithms remaining cases table case label states partitioning states defined section algorithm trivially label states states labeled exists path shorter state state inspired time probability variable ef ctl ef jsj jsj variable general case probabilistic ctl jsj jej jsj log jsj af ctl af jsj jsj table combinations parameter values formulas 
dijkstra shortest path algorithm gib observing need consider paths shorter define algorithm label eu follows label eu unseen fringe min js fringe unseen unseen fringe fringe fs unseen fringe intuitively unseen set states considered labeling fringe states labeled labels state formula label label ffg 
passing loop index algorithm labeled states satisfy proof correctness algorithm appendix emerson emss presents similar algorithm model checking 
main difference compared algorithm partition state set label states intermediate formulas holds state investigated formula algorithm label gamma formulas algorithm labels case case reduced case proposition algorithm label eu 
proposition formula holds state iff js holds state 
proof observe path oe satisfies js satisfy follows measure set paths satisfying large measure set paths satisfying js 
state satisfies exists finite sequence states starting state satisfies remaining states satisfy transitions non zero probability 
furthermore choose sequence state visited twice 
longest sequence length js visit states followed state follows satisfy js case case algorithms section require infinite calculations 
define measure set paths oe oe jj algorithm extend failure states include states success state reachable transitions non zero probability 
define new set failure states 
step algorithm identify states done algorithm similar label eu difference interested states labeled algorithm states state reachable 
contains union states similarly extend success states include states measure eventually reaching success state 
define new set success states 
states identified way similar identification states algorithms identifying states appendix step solve set linear equations defined theta done gaussian elimination complexity theta jsj gamma jqj gamma jrj ahu 
appendix verify solution system equations unique solution gives measure set paths oe oe jj case case ensure gives measure set paths oe oe jj 
algorithm label au defined follows label au unseen fringe seen min js fringe unseen unseen fringe seen seen fringe fringe fs unseen seen intuitively seen states labeled 
variables analogous intuitive meanings algorithm label eu passing loop index algorithm labeled states satisfy case similarly case reduced proposition algorithm label au 
proposition formula holds state iff js state 
proof proof follows lines proof proposition 
example section provide simple example illustrate proposed method 
verify soft deadline met communication protocol 
protocol parrow protocol pp par simplified version known alternating bit protocol bsw 
pp provides error free communication medium lose messages 
simplicity assumed ack lost 
pp consists entities sender medium receiver 
components interactions described 
structure presents behavior pp 
assumed messages lost 
oe oe medium sender rec send receiver ack components parrow protocol qk gamma gamma gamma gamma gamma psi gamma gamma pq rec ack send behavior pp 
labels arcs added clarity pp illustrate verification soft deadline property rec receive appear cases time units submission send 
pctl property expressed verification pp model checking algorithms section verify pp model formulated terms basic pctl operators true false labeling states starts smallest subformulas trivial labeled states labeled state labeled state labeled 
labeling states algorithms calculation section 
algorithm labeling states algorithm section illustrated table 
table shows result successive calculations performed left time right time 
conclude states labeled time units states 
algorithm labeling states algorithm start deriving matrix column vector structure 
time state table successive calculations algorithm step calculate conclude states labeled states 
surprisingly probabilities vector exactly probabilities time units obtained algorithm 
label states states labeled labeling states done dual formula false false labeling states trivial states labeled state labeled 
labeling states label eu algorithm 
states labeled label states state labeled note labeling procedure step naive 
drastically simplified special algorithm labeling states form case algorithm straightforward states labeled states labeled labeled structure shown 
conclude holds structure initial state labeled gamma gamma gamma psi pq oe resulting labeled structure related performance analysis tools performance analysis time petri nets 
variants tpn model 
tpn mainly calculate exact performance measures computer system designs 
system assumed wih performance parts 
aim get performance measure system accurate possible 
model true possible actual systems retaining possibility analysis 
time petri nets introduced extended phelps raz rp 
tpn model petri nets associates firing frequencies deterministic firing times transition net 
key steps tpn analysis 
model system tpn 
generate finite state markov chain tpn 
generation take computational effort state space markov chain large 
consequently effort spent finding methods reduce computational complexity part 

analyze markov chain standard methods find long run fraction time spent state 
information utilization resources memory buses waiting times analyzed looking fraction time spent waiting states 
follows utility tpn analysis analysis designed systems tuning behavior components 
experiments various values system parameters determine optimal configurations 
vernon carried analyses number different systems multiprocessor memories hv cache protocols vh 
software packages available help analysis models hv chi 
tpn relation approach structures similar markov chains 
effort tpn research goes generating markov chains tpn probably integrated framework 
main difference tpn approach class properties analyzed markov chains 
tpn tradition analyzes mean utilization mean waiting times 
data obtain mean throughput 
analyze actual response times way done 
approach focussed attention soft deadlines described 
kind analysis seen complement mean time analysis tpn 
logics real time logics employed state properties concurrent programs various forms modal logics pnu abr common ones forms temporal logic 
suitable reasoning events predicates may ordered time bothering time quantities 
logic inspired simple logic ctl ces ec 
ctl simple polynomial time model checking algorithm ces exponential time satisfiability algorithm ec 
ess described logic polynomial time satisfiability algorithm 
emerson mok sistla srinivasan emss extended ctl deal quantitative time 
logic associate time unit transition 
different time model reported alur henzinger ah 
logic time successive states required decrease may remain increase arbitrary amount 
early tried extend modal logics quantitative time bh traditional linear time temporal logic extended cope quantitative time 
bernstein harter inference rules spirit proof lattices owicki lamport ol 
attempt look completeness 
related logic richer includes past time operators inference system 
different approach real time logic rtl jahanian mok jm 
rtl modal logic order logic 
rtl reason occurrences events elapsed times 
logic decidable uninterpreted function symbols special case presburger arithmetic 
course decision procedure highly inefficient 
jahanian mok developed algorithms checking class finite state processes satisfy rtl formula modelchecking 
probabilistic logics logics probabilistic models mentioned logics real time suitable expressing reasoning soft deadlines probabilities included 
hand examples modal logics extended probabilities time ptl hart sharir hs tc lehman shelah ls 
works deal properties hold probability non zero probability 
probabilistic modal logics verification probabilistic algorithms 
objective verify algorithms satisfy certain properties probability 
proof methods properties resemble classical proof methods proving liveness properties fairness assumptions 
non finite state versions pz finite state modelchecking versions var fel hsp hs vw 
courcoubetis yannakakis cy cy investigated complexity modelchecking linear time propositional temporal logic sequential concurrent probabilistic programs 
sequential case models just models markov chains 
give modelchecking algorithm runs time linear program exponential specification show problem pspace 
give algorithm computing exact probability program satisfies specification 
directions defined logic pctl enables formulate soft deadline properties properties form request service probability service carried seconds 
interpret formulas logic models discrete time markov chains 
model checking algorithms different suitability different classes formulas 
markovian models relates timed petri nets 
basis defining specification language structures underlying semantic model 
possible integrate logic model checking algorithms tpn framework 
main difference tpn approach class properties analyzed markov chains 
tpn tradition steady state solution markov chain calculated 
solution mean utilization mean waiting times mean throughput obtained 
analyze transient behavior way done 
analysis seen complement mean time analysis 
logic convenient formulate properties interest 
far considered simple examples 
interesting examine realistic examples handled terms specification verification efforts 
grateful ivan linda fredrik reading discussing drafts manuscript 
partially supported swedish board technical development esprit bra project spec swedish telecommunication administration project 
abc ajmone marsan balbo conte 
performance models multiprocessor systems 
mit press 
abr abrahamson 
decidability expressiveness logics processes 
phd thesis univ washington 
ah alur henzinger 
really temporal logic 
proc 
th annual symp 
foundations computer science 
ahu aho hopcroft ullman 
design analysis computer algorithms 
addison wesley publishing 
bh bernstein harter 
proving real time properties programs temporal logic 
proc 
th symp 
operating system principles pages pacific grove california 
bsw bartlett wilkinson 
note reliable full duplex transmissions half duplex lines 
communications acm 
ces clarke emerson sistla 
automatic verification finite state concurrent systems temporal logics specification practical approach 
proc 
th acm symp 
principles programming languages pages 
chi 
software package analysis generalized stochastic petri net models 
proc 
int 
workshop time petri nets pages july 
coh cohn 
measure theory 
birkhauser 
courcoubetis vardi wolper 
reasoning fair concurrent programs 
proc 
th acm symp 
theory computing pages 
cy courcoubetis yannakakis 
complexity probabilistic verification 
proc 
th annual symp 
foundations computer science pages 
cy courcoubetis yannakakis 
complexity probabilistic verification 
bell labs hill 
ec emerson clarke 
branching time temporal logic synthesize synchronization skeletons 
science computer programming 
emss emerson mok sistla srinivasan 
quantitative temporal reasoning 
proc 
workshop automatic verification methods finite state systems grenoble 
ess emerson sadler srinivasan 
efficient temporal reasoning 
proc 
th acm symp 
principles programming languages pages austin texas 
fel feldman 
decidable propositional probabilistic dynamic logic 
proc 
th acm symp 
theory computing pages boston 
gib gibbons 
algorithmic graph theory 
cambridge university press 
gri gries 
science programming 
springer verlag 
hs hart sharir 
probabilistic temporal logics finite bounded models 
proc 
th acm symp 
theory computing pages 
hsp hart sharir pnueli 
termination probabilistic concurrent programs 
acm trans 
programming languages systems 
hv vernon 
analyzer numerical methods user interface 
technical report sept cs univ wisconsin madison apr 
hv vernon 
exact performance estimates multiprocessor memory bus interface 
ieee trans 
computers jan 
hv vernon 
generalized timed petri net model performance analysis 
ieee trans 
software eng se 
jm jahanian mok 
safety analysis timing properties real time systems 
ieee trans 
software engineering se sept 
jos joseph editor 
formal techniques real time fault tolerant systems 
lncs springer verlag 
ksk kemeny snell knapp 
denumerable markov chains 
springer verlag 
de roever 
real time programming asynchronous message passing 
proc 
nd acm symp 
principles distributed computing canada pages montreal canada 
ls lehmann shelah 
reasoning time chance 
information control 
mol molloy 
analysis stochastic petri nets 
ieee trans 
computers sept 
ol owicki lamport 
proving liveness concurrent programs 
acm trans 
programming languages systems 
ow wonham 
modelling specifying verifying real time embedded computer systems 
proc 
ieee real time systems symp pages dec 
par joachim parrow 
fairness properties process algebra 
phd thesis uppsala university uppsala sweden 
available report docs department computer systems uppsala university sweden 
ph pnueli harel 
applications temporal logic specification real time systems 
joseph editor proc 
symp 
formal techniques real time faulttolerant systems pages 
springer verlag 
lncs 
pnu pnueli 
temporal semantics concurrent programs 
theoretical computer science 
pz pnueli zuck 
verification multiprocess probabilistic protocols 
distributed computing 
raz 
derivation performance expressions communication protocols timed petri net models 
proc 
acm sigcomm pages montr eal qu ebec 
rp phelps 
performance analysis timed petri net models 
proc 
ifip wg symp 
protocol specification testing verification iv pages 
north holland june 
sl shankar lam 
time dependent distributed systems proving safety liveness real time properties 
distributed computing 
var vardi 
automatic verification probabilistic concurrent finite state programs 
proc 
th annual symp 
foundations computer science pages 
vh vernon 
performance analysis multiprocessor cache protocols generalized timed petri nets 
proc 
performance acm sigmetrics joint conf 
computer performance modelling measurement evaluation pages 
acm press may 
vw vardi wolper 
automata theoretic approach automatic program verification 
proc 
ieee symp 
logic computer science pages june 

performance evaluation extended timed petri nets 
proc 
international workshop timed petri nets torino italy 
ieee computer society 
proofs claims proof recurrence equation section proposition assume structure states satisfy labeled 
define recurrence equation label label theta gamma 
measure set paths oe oe jj proof states integers set finite sequences delta delta delta states denote measure set paths oe oe jj definition satisfies delta delta delta theta delta delta delta theta gamma consider cases 
case definition path oe satisfies oe jj 
case definition path oe oe jj 
case consider cases 
case definition path oe oe jj iff 
case finite sequence states 
denote sequence oe oe oe sequence oe minus state 
sequence oe iff oe gamma oe 
delta delta delta theta delta delta delta theta gamma theta delta delta delta gamma theta delta delta delta theta gamma theta gamma see satisfies exactly recurrence equation 
equation unique solution conclude 
definitions section equivalent proposition assume defined recurrence equation defined section 
states integers proof assume structure hs li 
consider different cases 
case definition 
definition 
definitions equivalent 
case definition gives theta gamma 
consider cases 
gamma 
conclude 
gamma 
conclude 
theta gamma cases see exactly definition 
proof correctness algorithm label eu standard program verification methods see gries gri prove correctness algorithm label eu 
step add assertions program 
result shown 
assumed labeled labeled 
initial assumption li denotes th statement program pi denote assertions denotes property verified 
termination follows trivially loop loop 
label eu labeled fringe min js labeled gamma labeled unseen gamma fringe gamma unseen fringe fringe unseen gamma fs unseen fringe gi labeled labeled unseen fringe unseen fringe labeled algorithm label eu added assertions verification verify hoare triple fp label eu fqg 
done verifying hoare triples denotes occurrences replaced 
fp fp 
fpg fp 

verify conjuncts assignment verify implies labeled gamma labeled gamma gamma conjunct trivially true states labeled 
second conjunct follows states satisfies gamma third conjunct follows fourth conjunct trivial 

verify implies assertion labeled fringe labeled fringe unseen gamma fringe unseen fringe unseen conjunct follows third conjuncts second conjunct follows second third fourth conjuncts third conjunct follows second third conjunct fourth follows trivially fourth conjunct 
follows directly part proposition 
correctness equation measure set paths oe oe jj proposition assume structure states satisfy labeled 
defined section 
solution system linear equations theta satisfy measure set paths oe oe jj proof definitions imply proposition 
cases analogously proof proposition show measure set paths oe oe jj satisfies equations 
shows existence solution equations desired 
uniqueness solution seen follows 
assume solutions 
difference denoted delta satisfies equations delta sn theta delta 
know consider set max states delta highest absolute value implies transitions state max state outside max non zero probability 
imply max contradiction 
additional algorithms algorithm section modified case introduce function integer 
define measure set paths oe oe jj convention 
analogously define follows label label theta gamma note difference definition derived values 
algorithm calculates algorithm label label gamma state labeled algorithm section modified case algorithm define algorithm case corresponds algorithm 
algorithm label label algorithm label algorithm label labels states intuitively algorithm label states sequences states length pass label unseen fringe bad min js bad bad fringe unseen unseen fringe fringe fs unseen bad bad intuitively variable bad passing loop index contain states sequences states length pass algorithm label algorithm label labels states intuitively algorithm label states sequence states length ends label unseen fringe bad min js bad bad fringe unseen unseen fringe fringe fs unseen fringe bad intuitively variable bad passing loop index contain states sequence states length passes going algorithm identify states states possible reach state included algorithm algorithm label eu js identify unseen fringe mark js mark mark fringe unseen unseen fringe fringe fs unseen fringe mark algorithm identify states measure eventually reaching success state included exactly states states sequence transitions outside non zero probability leading identify identify unseen fringe mark js mark mark fringe unseen unseen fringe fringe fs unseen fringe mark algorithm set states success states reachable 
mark states state reachable 
complement set mark 
