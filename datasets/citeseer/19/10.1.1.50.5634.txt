ml style polymorphic type system geoffrey smith dennis volpano school computer science florida international university miami fl usa email fiu edu department computer science naval postgraduate school monterey ca usa email volpano cs nps navy mil 
advanced polymorphic type systems come play important role world functional programming 
curiously type systems far little impact widely imperative programming languages 
show ml style polymorphism integrated smoothly dialect call polymorphic pointer operations including address operator dereferencing operator pointer arithmetic 
type system allows operations full generality programmers need give flexibility gain benefits ml style polymorphism 
prove type soundness theorem gives rigorous useful characterization typed polymorphic programs terms go wrong evaluated 
attention developing sound polymorphic type systems languages imperative features 
notable large body surrounding ml gmw tof lew sml wri vos 
efforts addresses polymorphic typing variables arrays pointers class essential ingredients traditional imperative language 
result directly applied get ml style polymorphic extensions widely languages 
presents provably sound type system polymorphic dialect called polymorphic pointer operations including address operator dereferencing operator pointer arithmetic 
type system allows operations restrictions programmers enjoy pointer flexibility type security european symposium programming linkoping sweden april 
material activities supported national science foundation agreements 
ccr ccr 
polymorphism ml 
type system demonstrates ml style polymorphism brought cleanly elegantly realm traditional imperative languages 
establish type soundness theorem gives rigorous useful characterization typed polymorphic programs terms go wrong evaluated 
approach uses natural style semantics formulation subject reduction harper syntactic approach har 
simple require separate type semantics 
expect useful proving type soundness wide variety imperative languages having class pointers mutable variables arrays 
overview polymorphic section 
formally describe syntax type system semantics 
section establish soundness type system 
overview polymorphic polymorphic intended close core kernighan ritchie kr possible 
particular stack variables pointers arrays 
pointers dereferenced explicitly variables dereferenced implicitly 
furthermore pointers class values variables 
polymorphic pointer operations typed polymorphic program system may suffer dangling illegal address errors 
focus eliminating pointer require weakening expressive power adding ml style polymorphism programmers write polymorphic functions naturally soundly standard ml parameterizing functions data sizes pointers type void 
syntactically polymorphic uses flexible syntax similar core ml damas milner dam 
example polymorphic function reverses elements array swap letvar reverse letvar gamma gamma swap gamma gamma construct letvar binds new cell initialized value scope binding lifetime cell ends evaluated 
variable dereferenced implicitly 
achieved typing rule says type var type call swap reverse equivalently written swap gamma gamma array subscripting syntactic sugar equivalent 
arrays introduced construct binds pointer uninitialized array size value scope lifetime array ends evaluated 
type system polymorphic assigns types form var variables types form ptr pointers 
functions swap reverse polymorphic swap type ff ff ptr theta ff ptr ff reverse type ff ff ptr theta int unit notice pointer array types unified variable pointer types related symmetric typing rules var ptr ptr var note dereferencing polymorphic differs dereferencing standard ml ref polymorphic types stratified levels 
ordinary data types oe type schemes type levels damas milner system dam new level called phrase types containing oe types variable types form var stratification enforces second class status variables example return type function data type write function returns variable 
hand pointer types included data types making pointers class values 
polymorphic designed ensure function calls implemented stack static links displays 
traditional imperative languages property achieved rigidly fixing syntactic structure programs 
example functions defined top level 
syntactic restrictions complex unnecessarily restrictive 
contrast polymorphic adopts completely free syntax core ml 
ability implement polymorphic stack static links displays achieved imposing key restriction lambda abstractions free identifiers lambda abstraction declared top level 
roughly speaking top level declaration scope extends way program 
example program letvar identifiers declared top level severely restricted polymorphic anonymous lambda abstractions convenient times 
example write map having declare named successor function 
prefer different syntax polymorphic noted obstacle adopting syntax 
ptr ref avoid confusion ml 
issue type soundness polymorphic effort spent trying develop sound polymorphic type systems imperative extensions core ml 
especially studied problem typing standard ml class tof lew sml wri 
problem easier language variables edinburgh lcf ml subtle problems arise gmw 
key problem variable escape scope lambda abstraction letvar stk stk stk case type system allow type variables occur type stk generalized 
different mechanisms proposed dealing problem gmw vos context polymorphic adopt especially simple approach 
restriction free identifiers lambda abstractions polymorphic allow polymorphic value computed interesting way example write curried functions 
reason suffer essentially loss language expressiveness limiting polymorphism syntactic values identifiers literals lambda abstractions tof 
limiting polymorphism syntactic values ensures soundness polymorphic generalizations pointers new problems type soundness 
careful formulating semantics subject reduction property may hold 
example program dereference pointer cell deallocated reallocated value obtained may wrong type 
semantics designed catch pointer errors 
polymorphic language syntax polymorphic 
sake describing type system need distinguish subset expressions called values syntactic values tof wri language expr letvar values xn context language class functions limiting polymorphism syntactic values limit expressiveness language 
wright argues loss expressiveness problem practice wri 
meta variable ranges identifiers literals integer literals unit addresses 
free identifiers lambda abstraction declared top level restriction precisely defined attribute grammar 
expressions variables pointers respectively 
occur user programs included language solely purpose simplifying semantics clear section 
notice pointers values variables reflects fact variables implicitly dereferenced pointers 
operator denotes pointer arithmetic 
full language overloaded denote integer addition 
subtle difference polymorphic formal parameters polymorphic function constants local variables 
function equivalent letvar polymorphic polymorphic directly express internal static variables 
example declaration static int corresponds directly polymorphic expression letvar violates restriction lambda abstractions free functions transformed eliminate static variables favor global variables letvar type system polymorphic types polymorphic stratified follows 
ff int unit ptr theta delta delta delta theta data types oe ff oe type schemes ae oe var phrase types meta variable ff ranges type variables 
compared type system standard ml type variables polymorphic imperative tof 
rules type system formulated harper system har 
deductive proof system assign types expressions 
typing judgements form fl ae brevity omitted typing rules sequential composition 
var id fl var fl var ident fl fl ptr fl ptr var fl var lit fl int integer literal fl unit unit intro fl xn fl xn theta delta delta delta theta elim fl theta delta delta delta theta fl fl val fl fl close fl fl ord fl fl fl letvar fl fl var fl letvar fl int fl ptr fl val fl var fl val fl ptr fl var address fl var fl ptr assign fl var fl fl arith fl ptr fl int fl ptr subscript fl ptr fl int fl var fig 

rules type system meaning expression type ae assuming fl prescribes phrase types free identifiers prescribes data types variables pointers precisely meta variable fl ranges identifier typings finite functions mapping identifiers phrase types fl phrase type assigned fl fl ae modified identifier typing assigns phrase type ae assigns phrase type fl identifier meta variable ranges address typings needed typing values produced programs 
expect addresses just natural numbers allow semantics detect invalid pointer arithmetic 
address pair natural numbers segment number offset intuitively put variable array segment 
simple variable address element array addresses gamma pointer arithmetic involves offset address dereferencing nonexistent dangling pointers detected segmentation fault 
address typing finite function mapping segment numbers data types 
reason map addresses data types nonexistent pointers produced values programs pointers typable subject reduction hold 
example program typed evaluates nonexistent pointer 
notational conventions address typings similar identifier typings 
generalization data type relative fl written close fl type scheme ff ff set type variables occurring free fl 
write close fl 
say generic instance ff written ff exists substitution domain ff extend definition type schemes saying oe oe oe oe say fl oe fl oe type system property type value determines form value expression type var possible forms lemma correct form 
suppose int integer literal unit unit ptr form theta delta delta delta theta form xn furthermore var form form proof 
immediate inspection typing rules 
note assumes array subscripting syntactic sugar 
consequence part lemma form derivation typing judgement rule val 
typing rules part remain syntax directed 
fact variables possible forms exploited structured operational semantics specifically rules ref update 
semantics polymorphic give structured operational semantics 
closed expression evaluated relative memory finite function addresses values 
may map address dead uninit indicating cell address deallocated uninitialized 
contents address dom value write memory assigns value address value address update dom extension dom 
evaluation rules 
allow derive judgements form asserts evaluating closed expression memory results value new memory write denote capture avoiding substitution free occurrences note substitution rules apply bind 
allows avoid environments closures semantics result evaluating polymorphic expression just expression polymorphic possible flexible syntax language fact expressions closed including lambda abstractions 
semantic soundness section establish soundness type system 
framework harper har show subject reduction basically asserts allocate addresses occur exists address typing condition asserts consistent precisely say 
dom fi dom 
value 
note give type uninitialized dead addresses type 
giving subject reduction theorem require number lemmas establish useful properties type system 
fundamental type substitution lemma val contents dom deref dom ref offset integer apply xn delta delta delta vn xn update dom dead dom dead bind dom letvar dead positive integer dom gamma uninit uninit gamma dead dead fig 

evaluation rules lemma type substitution 
fl substitution sfl typing derivation longer 
lemma 
suppose fl dom fl dom fl fl ae lemma substitution 
fl oe fl oe fl fl var fl var fl preceding lemma hold arbitrary expression substitution 
lemma intro 
fl ff ff occur free fl fl ff ff give subject reduction theorem theorem subject reduction 
exists proof 
induction structure derivation just show bind cases 

evaluation dom letvar dead typing letvar var letvar induction exists dom dom 

rule var var lemma var apply lemma get 
second induction exists remains show dead follows immediately 
go wrong simply removed deallocated address domain final memory marking dead 
current definition forced remove final address typing 
gamma gamma fail dangling pointers range gamma allowed retain typing time allocated change typing extend address typing 
bind 
value evaluation typing val close lemma close lemma induction exists case value similar lemma required induction twice 
subject reduction property ensure type system sensible 
example type system assigns type expression trivially satisfies subject reduction property type system useless 
main limitation subject reduction applies welltyped expressions evaluate successfully 
really able say happens attempt evaluate arbitrary welltyped expression 
approach strengthening subject reduction gunter gun example augment evaluation rules rules specifying certain expressions evaluate special value type 
example attempt dereference value pointer evaluate 
showing subject reduction holds augmented evaluation rules get typed expression evaluate 
errors lead occur evaluation typed expression 
aside drawback requiring augment evaluation rules approach give information 
tells certain bad things happen evaluation typed expression says bad things happen 
different approach leading type soundness theorem characterizes precisely may go wrong attempt evaluate typed expression 
note successful evaluation produces value lemma 
value memory 
roughly speaking combination subject reduction theorem correct forms lemma lemma allows characterize forms expressions encountered evaluation typed expression 
allow characterize go wrong evaluation 
get handle progress attempted evaluation helpful recast evaluation rules recursive evaluation function eval example update rules correspond clauses eval eval dom dead fail eval eval eval dom dead fail introducing eval allows talk type soundness terms happens eval called typed program 
definition 
call eval typed iff exist definition 
activation eval aborts directly activation aborts 
note activation abort directly recursive call aborts terminate 
show key result type soundness theorem 
suppose activation eval typed 
recursive call activation typed 
furthermore activation aborts directly aborts due errors 
attempt read write dead address 

attempt read write nonexistent address 
address exist problem offset invalid 

attempt read uninitialized address 

attempt declare array size equal 
proof 
just consider possible forms expression just give case cases quite similar 
eval typed exist typing assign var lemma form form simplifying notation bit left cases note clause eval applies 
consider cases turn 
activation eval typing assign var var 
recursive call eval typed 
call fails return parent activation eval doesn abort directly 
call succeeds lemma returns value memory eval doesn abort 
subject reduction theorem exists dom 
way activation eval abort directly dom dead 
dom know case holds error offset activation eval typing val followed assign ptr var recursive call eval typed 
call fails return parent activation eval doesn abort directly 
call succeeds lemma returns value memory subject reduction theorem exists ptr correct form lemma form pattern match eval doesn abort 
ptr lemma recursive call eval typed 
call fails return parent activation doesn get stuck 
succeeds returns value memory pattern match eval doesn abort 
subject reduction theorem exists dom 
way activation eval abort directly dom dead 
dom know case holds error offset corollary type soundness 
eval 
succeeds producing value type 
fails halt 
aborts due errors 
proof 
call succeed fail halt abort 
call aborts recursive activations abort directly 
activation reached finite path recursive calls root call eval 
root call typed theorem calls path typed 
activation aborts directly typed 
theorem aborts due errors discussion semantics specifies implementation obligation preserve contents variables scope turn justifies stack implementation 
need static links functions polymorphic closed respect top level declarations 
interesting note light closure property need specify semantics variable dies scope operator 
variable simply unreachable case 
maintain subject reduction semantics ensures program pointer errors produce value 
requires number mechanisms example keeping track cells deallocated expect see realistic implementation semantics 
believe implementation sake efficiency able likes programs yield values error semantics 
example semantics prescribe value dereferencing dangling pointer 
acceptable attempt dereference pointer implementation merely return value stored detect error 
real implementation catch pointer errors practical significance type soundness theorem 
things said 
theorem gives characterization source errors tells program crashes segmentation fault core dumped message causes crash errors example invalid polymorphic generalization 
second directly semantics get robust debugging implementation flags pointer errors 
advanced polymorphic type systems come play central role world functional programming far little impact traditional imperative programming 
assert ml style polymorphic type system applied fruitfully real world language bringing expressiveness polymorphism rigorous characterization behavior typed programs 
polymorphic includes development type inference algorithm preliminary indicates done straightforwardly development efficient implementation le sha ham extending language include features especially structures 
dam damas milner principal type schemes functional programs proc 
th acm symposium principles programming languages pp 

gmw gordon milner wadsworth edinburgh lcf lecture notes computer science springer verlag 
gun gunter semantics programming languages structures techniques mit press 
har harper simplified account polymorphic information processing letters pp 
august 
ham harper morrisett compiling polymorphism intensional type analysis proc 
nd acm symposium principles programming languages pp 

kr kernighan ritchie programming language prentice hall 
lew leroy weis polymorphic type inference assignment proc 
th acm symposium principles programming languages pp 

le leroy unboxed objects polymorphic typing proc 
th acm symposium principles programming languages pp 

sha shao appel typed compiler standard ml proc 
conf 
programming language design implementation pp 

sml standard ml new jersey version february 
tof tofte type inference polymorphic information computation pp 

vos volpano smith type soundness proof variables lcf ml information processing letters pp 
november 
wri wright simple imperative polymorphism lisp symbolic computation pp 
december 
article processed macro package llncs style 
