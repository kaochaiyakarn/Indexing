essence visitor pattern jens palsberg barry jay purdue university dept computer science lafayette usa palsberg cs purdue edu university technology sydney school computing sciences box broadway australia cbj socs uts edu au 
object oriented programming visitor pattern enables definition new operation object structure changing classes objects 
price set classes fixed advance called accept method 
demonstrate program visitors relying accept methods knowing classes objects advance 
idea derived related shape polymorphism functional programming separate accessing subobjects acting 
object oriented setting reflection techniques support access sub objects demonstrated java class walkabout 
supports visitors subclasses programmed reflection 
program visitor pattern understood specialized version program walkabout class 
design patterns aim object oriented systems flexible 
particular visitor pattern enables definition new operation object structure changing classes objects 
examples uses visitor pattern include java tree builder tool tool frontends java compiler compiler javacc 
cases idea user tool write syntax tree operations called visitors changing recompiling node classes 
experience visitor pattern tasks conveniently written visitors 
basic assumption visitor pattern knows classes objects visited 
class structure changes visitors rewritten 
example writing grammar javacc changes grammar imply visitors change 
case changes part grammar direct interest particular visitor 
classes called accept method pass name class back visitor dynamic binding 
demonstrate program visitors knowing classes objects advance relying accept methods 
idea separate accessing subobjects acting 
java class walkabout uses reflection access structure objects visits 
visitors subclasses walkabout programmed reflection 
write visitors interact arbitrary object structures 
classes objects need change 
generic walkabout class traverses object structure performing actions 
actions appropriate different classes objects introduced subclasses produce specific visitors 
inflexible alternative walkabout class may possible cases traditional visitor pattern 
description classes objects visited generate class behavior walkabout class 
approach taken tool 
inflexible class structure changes new walkabout class generated 
new approach walkabout class applications 
walkabout approach raises new range potential applications 
example construct compute statistics associated office organisation having adapt program current organisational structure 
generally techniques may underpin query language object oriented data bases stable respect changes underlying structure data base 
extract names files particular individual update occurrences address knowing structure database 
goal supporting applications shared lieberherr adaptive programming requires new language constructs able exploit reflection capabilities say java 
reflection introduces significant performance penalty 
say price complete flexibility may may worth paying 
optimistic anticipating able automatically support specialised analogous visitors combine efficiency common cases loss generality 
suggestions considered section 
generally view programs constructed executable specifications 
benchmarking establish chief sources inefficiency specialised code constructed 
theoretical possibility inspired emergence shape polymorphism functional programming 
shape polymorphism recognises common functions applied wide variety data structures 
closest visitor pattern higher order function map 
high level algorithm map expressed find datum apply 
challenge find data single algorithm 
analogy extends 
just visitors seen specialised forms polytypic programming seen specialised form shape polymorphism 
section review existing methods visiting objects section introduce 
section benchmark performance walkabout class section explore possible specialisations relate earlier techniques 
section discuss links shape polymorphism functional programming section supply directions 
visitors visitor pattern describes mechanism interacting internal structure composite objects avoids frequent type casts recompilation 
advantages illustrated means running java example summing integer list 
approach instanceof type casts 
attempt summation uses simple list interface summation loop uses instanceof check list object nil object cons object 
cons object fields accessed type casts loop repeated 
interface list class nil implements list class cons implements list int head list tail 
list list object working 
int sum contains sum loop 
boolean proceed true proceed instanceof nil proceed false instanceof cons sum sum cons head type cast 
cons tail type cast 
fig 

type casts advantage code written touching classes nil cons 
drawback code constantly uses type casts instanceof determine class object considering 
second approach dedicated methods 
dismiss piece code simply saying objectoriented 
access parts object classical approach dedicated methods access act subobjects 
running example insert sum methods classes 
interface list int sum class nil implements list public int sum return class cons implements list int head list tail public int sum return head tail sum fig 

dedicated methods compute sum components list object writing sum 
advantage code type casts instanceof operations disappeared code written systematic way 
disadvantage time want perform new operation list objects say compute product integer parts new dedicated methods written classes classes recompiled 
third approach visitor pattern 
visitor pattern lets define new operation object structure changing classes objects operates 
writing dedicated methods programming task recompiling idea insert called accept method class passes control back visitor acts repository new methods 
code running example 
interface list void accept visitor class nil implements list public void accept visitor visit class cons implements list int head list tail public void accept visitor visit interface visitor void visit nil void visit cons class implements visitor int sum public void visit nil public void visit cons sum sum head tail accept 
sv new accept sv system println sv sum 
fig 

visitors accept method takes visitor argument 
purpose inform visitor object class determine appropriate visit method 
interface visitor declares visit method basic classes instantiated 
note visit methods describe action performed sum sum head pattern access tail accept accesses tail list 
instance sv shows compute print sum components list object advantage write code manipulates objects existing classes recompiling classes provided objects accept method 
summary visitor pattern combines advantages approaches represented table frequent frequent type casts 
recompilation 
instanceof type casts dedicated methods visitor pattern demonstrate program visitors relying accept methods 
chief conceptual difference visitors default access pattern supplied generic class walkabout actions performed object need supplied 
expresses insight visitors proceed finding datum acting general mapping algorithm functional programming 
default access pattern determined reflection determine internal structure object specifically fields visited sequence 
reflection determine class object eliminates need accept methods 
walkabout class just method visit takes argument type object 
replacing reflection code pseudo code yields informal description class 
class walkabout void visit object null public visit method class visit primitive type field visit fig 

walkabout pseudo code general visit method invoked try invoke visit method class argument 
method argument object general visit method invoked fields argument 
full java code class 
visitors subclasses walkabout extend visit methods particular classes need reflection 
class walkabout void visit object null object os class getclass class cs try getclass visit cs invoke os catch java lang instanceof number instanceof byte instanceof short instanceof character instanceof boolean java lang reflect field int length try visit get catch java lang happen 
catch java lang exception happen 
fig 

walkabout class walkabout computing printing sum components list object 
compare walkabout corresponding visitor 
customised visitor interface replaced general walkabout class 
basic classes lists defined exactly approach accept methods worry 
customised walkabout simpler corresponding visitor ways 
visit method nil class 
method unnecessary class walkabout determine nil fields 
second fundamental indirection caused accept tail accept replaced direct recursive call visit tail interface list class nil implements list class cons implements list int head list tail class extends walkabout int sum public void visit cons sum sum head visit tail 
sw new sw visit system println sw sum 
fig 

performance measurements running example lists slightly simplified version benchmark program 
full program third implementation list class link basic form looks class link implements list boolean color list li test efficiency code produced various programming styles wrote procedure produces list length alternating cons link cells 
want compute sum integer components 
program repeat summation times 
run times obtained sun ultra model mhz ultrasparc gbyte scsi disk mbyte memory 
compilation execution java code done sun jdk 
approach run time construction list type casts dedicated methods visitor walkabout min results show reflection imposes significant performance penalty discuss 
passing notice extra control flow caused visitor slower instanceof type casts 
walkabout visitors explain program visitor pattern understood specialized version program walkabout class 
explore related avenues leads visitor pattern described section leads variant example java tree builder tool 
specialization class walkabout steps 
step classes objects visited 
suppose object structure visited contains objects classes cn fields fim knowledge specialize class walkabout efficient version 
notice type casts instanceof 
play role played allow access fields visit method specified class current object 
code contains fewer uses reflection original walkabout class faster 
hand rigid original walkabout ignore objects class 
suppose programmer subclass walkabout supplies visit method classes cn default action supplied walkabout 
branches visit method class walkabout executed deleted obtain class 
step accept methods determine class argument outcomes step hide reflection description public visit method class explained section 
class walkabout void visit object null public visit method class visit instanceof visit visit instanceof cn visit cn fn visit cn fig 

walkabout fixed classes class walkabout void visit object null public visit method class visit fig 

walkabout default action problem invoke visit method right class 
course compiler determine class reflection unnecessary general recursive calls visit compiler infer class object 
way getting rid reflection type casts just long piece code shown step 
elegant alternative method accept classes cn simply invokes visit method illustrated section 
accept calls visitor dynamic binding ensuring visitor knows class combining specialisation step leaves possibilities 
case subclasses walkabout may visit method classes cn default behaviour required similar clauses step 
class walkabout takes form 
notice type casts instanceof disappear dynamic binding 
class java tree builder tool 
case subclasses walkabout visit method classes cn invoked directly accept methods 
code class walkabout needed written interface interface named visitor 
class walkabout void visit accept accept void visit cn accept fn accept fig 

walkabout accept methods ideally avoid reflection specialised code supplied retain ability invoke exceptional cases 
partial evaluation eliminate reflection specialised code exists 
investigated 
shape polymorphism walkabout class inspired novel techniques functional programming recursive data types 
standard approaches inductive data type example list tree requires functions traversal typically described pattern matching 
example apply function entry list applies list defined nil nil cons cons mapping binary tree requires different pattern matching algorithm actions leaves nodes 
attempt situation charity 
data type constructor construct say new tree type induced compiler construct code suite combinators map corresponding data structures programmer writing patternmatching definitions cost writing appropriate annotations type constructors 
developed shape polymorphic programming 
shares goals charity uses parametrically polymorphic algorithms type specialisation 
run time code say mapping lists trees specialised type 
algorithms pattern matching information stored data structure determine data stored 
shape polymorphic programming means locating data data structure shape separated description action performed datum 
code reuse arises means locating data described general terms applies arbitrary tree types including little information usual node tree 
related development polytypic programming eliminated need constructor annotations charity improved type inference techniques code specialisation 
polytypic programming principled form ad hoc polymorphism compiler uses type inference determine appropriate choice algorithm 
primary application domain appears compiler construction techniques algorithms tree 
course specialised polytypic programs execute faster generic shape polymorphic ones challenge automate specialisation shape polymorphic programs polytypic counterparts 
striking analogy visitors noted put effect 
correspond shape polymorphic programs 
particular high level mapping algorithm find data act 
similar high level walkabout algorithm find objects act 
main difference ability manipulate state 
difference minimised state monads 
observation lead walkabout class 
precisely walkabout class corresponds map identity perform action objects encountered 
conversely map corresponds sub class walkabout acts update fields shape polymorphic programs completely generic extract little information arguments reflection succeed 
polytypic programs visitors class type information specialise code 
challenge domains automate code specialisation combine benefits parametricity efficiency 
walkabout class improves earlier implementations visitor pattern able act arbitrary object trees 
uniform action achieved reflection techniques allow class fields arbitrary object determined 
java supports reflection able implement walkabout class lines 
inspiration supplied shape polymorphic functional programs mapping 
executing code uses walkabout class slow imagine partial evaluation technique automatically produces efficient visitor code 
objectives include extending walkabout handle array objects object graphs 
acknowledgment 
luca cardelli suggesting java 

bell jay moggi 
functorial ml 
proc 
plilp pages 
springer verlag lncs 

cockett fukushima 
charity 
technical report university calgary 

erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 

jansson jeuring 
polyp polytypic programming language extension 
proc 
popl th annual sigplan sigact symposium principles programming languages pages 

jay 
semantics shape 
science computer programming 

jay noble 
shaping object oriented programs 
technical report university technology sydney 

neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall international 

karl lieberherr 
adaptive object oriented software demeter method propagation patterns 
pws publishing boston 

karl lieberherr silva cun xiao 
adaptive object oriented programming graph customization 
communications acm may 

meertens 
calculate 
proc 
plilp 
springer verlag lncs 

sun microsystems 
java compiler compiler 
www com jack 

jens palsberg cun xiao karl lieberherr 
efficient implementation adaptive software 
acm transactions programming languages systems march 

kevin tao jens palsberg 
java tree builder 
purdue university www cs purdue edu people palsberg 
article processed macro package llncs style 
