international journal foundations computer science 
petri nets step transition systems madhavan mukund school mathematics science foundation road madras india email madhavan ssf ernet labelled transition systems simple powerful formalism describing operational behaviour computing systems 
extended model concurrency faithfully permitting transitions states labelled collection actions denoting concurrent step 
petri nets place transition nets give rise step transition systems natural way marking diagram petri net canonical transition system associated 
characterize class pn transition systems precisely step transition systems generated petri nets 
express correspondence pn transition systems petri nets terms adjunction category pn transition systems category petri nets associated morphisms behaviour preserving strong natural sense 
keywords petri nets models concurrency category theory 
transition systems simple powerful formalism describing operational behaviour models concurrency 
provide common framework investigating relationships di erent models distributed systems 
nielsen rozenberg thiagarajan established close correspondence class transition systems called elementary transition systems basic model net theory called elementary net systems 
describe correspondence terms core ection category elementary transition systems category elementary net systems 
extend results richer model net theory called petri nets known place transition nets 
petri nets give rise transition systems natural way reachability graph petri net de nes canonical transition system associated 
characterize subclass transition systems called pn transition systems precisely transition systems generated unlabelled petri nets 
results established framework conventional sequential transition systems transitions labelled single events 
relatively structure elementary net systems information concurrency recovered sequential transition relation elementary transition system checking local diamond properties 
move petri nets need introduce explicit information concurrency transition systems 
instance consider nets 
give rise sequential transition system shown right 
rst net occur concurrently second net occur sequentially order 
represent concurrency faithfully shall enrich transition relation permitting state transformed single step consisting nite multiset actions 
permit multisets just sets 
call new class transition systems step transition systems 
pn transition systems de ned subclass step transition systems satisfy certain restrictions ensure steps consistent 
describe connection petri nets pn transition systems language category theory 
rst de ne category pnts objects pn transition systems arrows standard transition system morphisms extended respect steps 
construct category pnet petri nets 
morphisms de ne nets smooth generalization morphisms de ned elementary net systems 
morphisms strengthened versions morphisms de ned winskel 
preserve dynamic behaviour nets strong way 
natural functor nt pnet pnts maps petri net transition system associated marking diagram 
main result construction functor tn pnts pnet left adjoint nt 
fact unit adjunction natural isomorphism core ection pair functors 
construct petri net corresponding pn transition system construct places appropriately constrain behaviour net 
generalize notion region 
regions nielsen rozenberg thiagarajan de ne conditions elementary net system corresponding elementary transition system 
notion generalized ways characterize classes au au transition systems corresponding di erent models concurrency 
instance winskel nielsen version regions establish core ection special class asynchronous transition systems safe petri nets 
slightly di erent track thiagarajan regions obtain language theoretic characterization non sequential behaviour petri nets terms generalized version mazurkiewicz trace languages 
shall discuss relationship regions notions concluding section 
organized follows 
de nition step transition systems followed brief petri nets 
section describe class pn transition systems construct category pnts section 
show de ne category pnet petri nets 
section construct functor nt pnet pnts serves right adjoint adjunction described section 
section discuss existence universal constructions products coproducts categories pnts pnet concluding section tie loose ends discuss possible extensions 
compare categories pnts pnet related formalisms described literature 

step transition systems transition system usually de ned quadruple ts set states sequential transition relation describes system evolves state state performing actions initial state enrich transition relation permitting state transformed single step consisting nite multiset actions 
shall de ne class pn transition systems subclass new class transition systems satis es simple axioms ensuring steps system consistent 
rst terminology notation regarding multisets 
de nition 
set 
multiset function set natural numbers set multisets denoted ms 
ms juj size 
nite juj nite 
set nite multisets denoted ms 
empty multiset unique function oa oa 
clear context shall just mean oa ms 
written ms case 
multiset number occurrences abusing notation shall write signify 
simplicity shall usually write multisets sets multiplicities instance fa bg denotes multiset assigns multisets added subtracted pointwise multisets de ned follows 
ms 
partial function sets extended natural way total function ms ms follows ms fa bg convention ob case unde ned convenience shall denote extension multisets de nition 
step transition system structure ts countable set states initial state 
countable set events 
ms transition relation 
shall write 
write denote enabled 
extend relation step sequences usual way 
un ms sequence steps 
put basic restrictions transition systems 
rst introduce idling transitions represented empty multiset self loops state demand special transitions occur self loops 
ensure states transition system reachable initial state 
formally basic axioms 
oe 
ms 
henceforth shall assume step transition system consider satis es axioms 
notice rule presence non trivial self loops form axioms fairly weak 
particular introduced step axioms ensure multisets label transitions represent concurrent steps 
introduce additional axioms pn transition systems shall see steps constrained 
fa ag step transition system example step transition system 
usual graphically represent transition system directed graph nodes states arrows labelled multisets denote relation 
initial state marked specially 
trivial self loops state explicitly drawn avoid cluttering picture 
introducing characteristic axioms pn transition systems take look petri nets 

petri nets give brief place transition nets simply called petri nets 
detailed discussion class nets 
de nition 
petri net quadruple pn set places set transitions 
assumed countable 
weight function 
initial marking 
fs fs 
similarly ft ft 
example petri net 
follow usual graphical notation nets places denoted circles transitions denoted boxes 
arrow drawn place transition labelled value 
convention arrow label corresponds case 
initial marking denoted drawing dots places 
draw dots tokens circle corresponding places petri net intuitively correspond local states system 
global state called marking multiset said assigned tokens transition occur marking 
say enabled denote ti 
petri net transition occurs marking new marking generated rule denote fact evolves tim suppose transitions marking 
occur independently concurrently enabled 
situation evolve single step occurrence marking extend transition relation associated petri net permit steps actions pair markings 
general step multiset subset transition may concurrent phenomenon called 
instance copies transition enabled initial marking 
ms 
enabled marking denoted ui 

recall denotes number occurrences 
occurs transformed denoted uim 
set markings reachable marking denoted mi 
mi smallest set markings mi 
mi ms uim mi 
notice mi nd step sequence leading step sequence singleton step multiset transitions constituting step singleton set 
petri net pn associate transition relation pn ms pn follows 
pn uim just extended transition systems extend pn relation pn step sequences 
un ms sequence steps 
pn mn mn im petri net pn associate step transition system pn describes operational behaviour net pn example easy see transition system step transition system associated petri net 
straightforward verify petri net pn satis es axioms introduced step transition systems previous section 
main aim characterize step transition systems arise describing behaviour petri nets 
mentioned characterization described language category theory terms adjunction category petri nets category subclass step transition systems called pn transition systems 
constructing categories rst de ne pn transition systems 

pn transition systems describe pn transition systems need introduce notion region 
regions originally de ned context sequential transition systems ehrenfeucht rozenberg transition system counterpart notion condition elementary net system 
regions characterize class elementary transition systems represent behaviour elementary net systems 
characterization extended core ection elementary transition systems elementary net systems 
generalize regions capture notion place petri net 
de nition 
ts step transition system 
region pair functions 
ii convenience denote rst component second component words 
iii 


shall denote unclear context component referring 
normally shall write region corresponds place petri net associate step transition system 
recall petri net pn associated transition system states reachable markings pn events transitions pn specify number tokens place marking 
speci es weights 
condition de nition region ensures consistent behaviour net transition system tokens permit occur contain correct number tokens speci ed normal ring rule petri net 
disregard regions disconnected events trivial regions correspond isolated places petri net contribute way characterizing behaviour system 
de nition 
ts step transition system 
region non trivial 
denote set non trivial regions ts ts henceforth statement referring regions assume considering non trivial regions explicitly stated 
pn transition systems characterized regional axioms addition basic axioms ts 
separation ms ts 

forward closure axiom says pair distinct states distinguished non trivial region 
axiom captures fundamental idea underlying dynamic behaviour petri net 
says multiset actions enabled state system regions possible perform reach state system 
words system perform step labelled state region tokens permit occur 
de nition 
pn transition system step transition system ts satis es axioms 
shows step transition systems pn transition systems 
transition system left violates easy see region fa bg step transition systems pn transition systems really denotes state regional point view 
transition system right violates 
step fa bg enabled 
means region allow step consisting just fbg transition corresponding step 
crucial observation pn transition systems deterministic 
ts said deterministic step transition system case true ms implies proposition 
pn transition system deterministic 
proof 
ts pn transition system 
suppose exists ms region know axiom mentioned earlier ensure steps step transition system represent concurrent actions 
instance ramanujam thiagarajan de ne distributed transition systems basically step transition systems step axiom insists step substeps combine consistent way 
pn transition systems required step axiom straightforward consequence 
proposition 
ts pn transition system 
ms exists 
proof 
follows step permitted regions substep know easy compute enabled exists show consider region know 
follows 
agree regions follows done 
step axiom formulated subtle described proposition distributed transition systems general non deterministic 
presence determinacy step axiom reduces simple condition stated proposition 
pnts category pn transition systems construct category pn transition systems de ne morphisms pn transition systems 
morphisms essentially morphisms 
capture notion simulation preserves concurrency 
de nition 
ts pn transition systems 
transition system morphism ts ts pair functions fe fq total function fq 
ii fe partial function 
iii fe fq regions shall denote fq fe unclear context component referring 
normally shall write fq fe 
notice clause ensures step hidden transition results mapped state unde ned implies oe axiom forces 
shows examples transition system morphisms 
important notice clause iii de nition describes simulation requirement fa examples transition system morphisms multisets pairs states mapped morphism 
pair systems shown morphism going opposite direction de ned matching step rst system corresponding step fa second system 
pn transition system ts ts id id denote identity morphism id id total identity functions 
ts ts ts ts transition system morphisms 
composition ts ts de ned pair composition rst component normal functional composition composition second component obvious composition operation partial functions 
easy see pn transition systems transition system morphisms form category 
call category pnts 
rest section devoted establishing results concerning transition system morphisms 
rst observation morphisms preserve regions reverse direction 
ts pn transition systems ts ts morphism region ts de ne follows de ned proposition 
ts pn transition systems ts ts morphism ts possibly trivial region ts proof 
check 

set events de ned value 
know de nition check 

rewriting terms show 

morphism implies region ts know holds 

fe jf straightforward verify result follows 
notice trivial case range ts observation transition system morphisms exploits determinacy 
pn transition systems turns morphisms completely characterized way map events 
lemma 
ts pn transition systems morphisms ts ts proof 
show know reachable nite step sequence sequence steps proceed induction mean number steps sequence 

write 
uk induction hypothesis know 
de nition morphism 
know 
ts pn transition system deterministic 
follows done 

pnet category petri nets construct category petri nets 
de ne suitable notion morphism 
de nition 
pn petri nets 
net morphism pn pn pair partial function 
notice map forward direction relation 
denotes set fy xg 
ii partial function 
iii 
iv unde ned 


directly de ned map places partial function reverse direction relation forward direction inverse partial function 
au au au au examples net morphisms transition system morphisms shall denote unclear context component referring 
normally shall write 
shows examples net morphisms 
notice rst example omit place longer construct morphism mapping behaviour rst net remains unchanged 
problem structurally de ned notions net morphisms sensitive choice petri net implementing behaviour 
quite di erent types morphisms petri nets de ned literature 
morphisms closest spirit morphisms de ned winskel 
main di erence insist map places partial function reverse direction winskel requires forward map relation preserves initial marking neighbourhoods de ned events 
shall discuss connection net morphisms studied greater detail concluding section 
object pn pn id id identity morphism id id total identity functions 
pn pn pn pn net morphisms 
de ne composition morphisms 
follows easily petri nets equipped net morphisms form category 
call category pnet rest section shall prove useful properties net morphisms 
rst show net morphisms preserve concurrent behaviour strong way 
follows result 
lemma 
pn petri nets net morphism pn pn de ne follows exists 
ii suppose pn pn proof 
know step sequence un pn loss generality assume ju sequence singleton steps 
proceed induction condition iii net morphisms write 
exists marking pn ti induction hypothesis suppose unde ned 
places marking changes going images result hand consider know 
furthermore de nition net morphisms 
ti know 
holds 
de nition net morphisms straightforward check 
ii suppose ui part lemma know de nition de nition net morphism straightforward compute pn pn implies corollary 
pn petri nets net morphism pn pn pn implies pn step sequence de ned previous lemma 
abuse notation denoted obvious extension step sequences 
certain restricted cases turns net morphisms transition system morphisms characterized way map transitions 
establish result need restrict attention morphisms source nets simple respect places 
de nition 
pn petri net 
pn simple respect case lemma 
pn petri nets pn simple respect isolated places 
net morphisms pn pn proof 
establish rst show 
suppose 
pn isolated places exists de ned suppose assume loss generality implies exists furthermore establish su ces establish claim 

proof claim 
know 


suppose de ned 



symmetric argument show 
similarly establish establishing claim 
returning main proof pn assumed simple respect places conclude implies 
symmetric argument show implies 

petri nets pn transition systems construct functor nt category pnet petri nets category pnts pn transition systems 
nt maps objects obvious way petri net pn mapped associated transition system pn petri net 
nt pn pn usual set markings reachable pn set transitions pn pn step transition relation petri nets de ned section initial marking pn de ne nt maps arrows 
pn petri nets net morphism pn pn nt de ned follows 

recall exists proposition 
pn petri net 
nt pn pn pn transition system 
proof 
countable assumption 
establish countable rst observe free monoid countable 
marking reachable sequence transitions deterministic sequence transitions lead marking 
follows cardinality equal cardinality countable 
im pn clearly nt pn satis es axiom 
fact nt pn satis es follows directly de nition verify show distinct states nt pn separated non trivial regions 
easy check region non isolated place 
clearly non trivial region separates nt pn 
consider 
suppose ms region nt pn case 
show exists pn know de ned region nt pn 
rs follows 

know uim 

de nition pn pn done 
proposition 
pn petri nets morphism pn pn nt transition system morphism nt pn nt pn 
proof 
recall lemma know total function required 
de nition know partial function show pn pn follows directly second part lemma says pn implies pn theorem 
nt pnet pnts functor 
proof 
veri ed nt maps objects arrows pnet objects arrows pnts correctly 
verify nt preserves identity arrows respects composition 
net pn pnet identity arrow pn id id id id total identity functions 
clearly pn pn id pn identity arrow nt pn 
pn pn pn pn pair net morphisms 
nt nt 
show clearly equal lemma done 

adjunction having constructed functor nt pnet pnts want show left adjoint tn pnts pnet mac lane su ces construct map tno mapping objects pnts objects pnet diagram shown commutes 
object map tno extended uniquely functor tn pnts pnet left adjoint nt 
words rst construct universal transition system morphism pnts serve unit adjunction 
prove object ts pnts object pn pnet transition system morphism ts nt pn unique net morphism tno ts pn nt ts ts nt pn nt tno ts pq ts nt tno ts pn adjunction rst describe object map tno ts pn transition system 
tno ts ts ts ts ts ts ts ts ts proposition 
ts pn transition system 
tno ts ts ts ts petri net 
tno ts simple respect places isolated places 
proof 
checking tno ts petri net straightforward 
know countable set transitions tno ts countable 
notice nite ts may uncountable 
verifying places transitions tno ts disjoint small problem arises pathological case ts disjoint 
shall ignore noting construct tno ts disjoint sets places transitions suitable coding technique 
regions ts simple de nition distinct regions di er value value 
create exactly place tno ts region ts clear net tno ts simple respect places 
ts non trivial regions tno ts isolated places 
describe construct unit adjunction 
rst need lemma 
lemma 
ts pn transition system tno ts ts ts ts 
ts ts 
denote state 
ii ts ts 
denote marking 
iii tno ts proof 
ts show ts 
step sequence ts pn proceed induction ts de nition ts satis es requirement 
write know ts pn im induction hypothesis exists ts 
im know ts axiom uk straightforward compute ts 
having established candidate marking show exactly choice suppose states ts 
axiom know agree regions 
ii similar induction 
iii follows straightforward way ii 
lemma 
ts pn transition system tno ts ts ts ts 
map ts ts nt tno ts ts ts transition system isomorphism 
proof 
previous lemma follows ts transition system morphism 
check fact isomorphism show construct transition system morphism ts ts ts nt tno ts ts ts ts de ne ts nt tno ts ts follows ts ts ts previous lemma easy verify ts transition system morphism 
mq qm ts follows ts ts ts ts ts nt tno ts prove main result 
theorem 
exists functor tn pnts pnet tn nt form adjunction core ection tn left adjoint unit 
proof 
show diagram shown commutes 
ts pn 
tno ts ts ts ts nt pn pn 
de ne follows ts ts unde ned fe nt pn region de ned proof proposition 
words recall nt pn inverse de ned section 
claim net morphism 
proof claim 
suppose 
check ts 
know ts 
follows 
suppose unde ned 
show 
consider ts unde ned ts contradicts 
similarly show 
hand suppose show establish ts ts 
rst show 
de ned ts rs 
conversely show 
suppose de ned non trivial region ts de nition rs ts 
implies follows similarly establish fact ts ts follows easily de nition claim nt ts proof claim 
nt ts nt id nt fe de nition 
fe lemma done 
claim unique 
proof claim 
show tno ts pn net morphism nt ts 
know fe tse tse tse id fe know tno ts simple respect places isolated places proposition 
lemma 
returning main proof claims establish diagram shown commutes 
follows tno uniquely extended functor tn pnts pnet left adjoint nt 
unit adjunction isomorphism fact core ection tn nt 
way tn maps morphisms turns 
ts pn transition systems ts ts transition system morphism 
tn map ts ts ts ts unde ned fe 
universal constructions having established core ection categories pnts pnet look universal constructions categories 
easy verify trivial transition system ts fq initial terminal object pnts similarly image pnet empty net pn initial terminal object pnet standard product construction goes pn transition systems petri nets 
petri nets product nets synchronized parallel composition nets 
de nition 
pn petri nets 
de ne petri net pn follows 
de ne morphisms pn pn follows lemma 
pn petri nets 
product nets petri net pn equipped projections de ned 
proof 
easy verify pn morphisms pn pn pn respectively 
prove pn product pn pn establish 
claim 
net pn exist morphisms pn pn unique morphism pn pn 
proof claim 
convenient rst de ne total functions 
follows 
de ned de ne pn pn follows 
unde ned de ned de ned unde ned easy verify pn morphism furthermore unique map pn pn property 
right adjoint preserves limits pn transition system pnts image net pnet know pnts products 
straightforward verify product pn transition systems ts ts transition system ts equipped projections de ned 
de nition 
ts pn transition systems 
transition system ts de ned follows 
ms exists ms 

de ne morphisms ts ts follows turns pnet coproducts 
initial markings nets reasonably similar sum nets represents nondeterministic choice 
initial markings dissimilar sum corresponds asynchronous parallel composition nets 
de nition 
pn petri nets 
de ne petri net pn follows 
js de ne morphisms pn pn follows transitions enabled initial markings respectively pn common input place provided 
represents kind non deterministic choice composite net pn hand nd independently enabled initial marking pn corresponding asynchronous parallel composition lemma 
pn petri nets 
coproduct nets petri net pn equipped injections de ned 
proof 
easy verify pn morphisms pn pn pn pn respectively 
prove pn coproduct pn pn establish 
claim 
net pn exist morphisms pn pn unique morphism pn pn 
proof claim 
convenience rst de ne total functions 
follows 
de ned de ne pn pn follows 
gs unde ned unde ned de ned de ned rst verify pn morphism 
straightforward check implies suppose unde ned show 
loss generality 
clear form pn implies 
know unde ned 
particular 
arbitrary place follows 
similar argument 
hand suppose show establish 
loss generality assume form 
rst show clearly form pn implies 
follows implies conversely know pn follows 

shown similar argument establishes fact follow easily de nition show unique map pn pn establish gs unique map unique map 
de ne maps follows 
de ned de ne maps hin 
hf 
hin hf ts ts pn pn ts na coproduct construction pnts establish unique map gs su ces show gs unique map hf hin gs suppose hf hin hin hin injective total function follows gs show unique map de ne maps hf hin follows hf hin su ces show unique map hf hin suppose hf hin hin hin surjective function follows hand pn transition systems situation regarding existence coproducts straightforward 
transition systems general canonical way form coproduct ts ts transition system ts ts obtained identifying initial states ts ts operation behaved various special classes transition systems instance sum elementary transition systems de ned manner elementary transition system sum asynchronous transition systems asynchronous transition system 
unfortunately turns pn transition systems case 
words possible de ne pn transition systems ts ts transition system obtained identifying initial states pn transition system 
consider transition systems shown 
ts generated pn ts generated pn ts ts pn transition systems 
hand transition system ts obtained forming normal coproduct ts ts pn transition system 
see observe region ts suppose case fact nite contradicts fact enabled result follows regions enabled words states satisfy axiom pn transition systems enabled regions states transition states 
show indirectly pnts coproducts 
lemma 
category pnts coproducts 
proof 
ts ts pn transition systems 
want nd pn transition system ts maps ts ts ts equipped injection morphisms coproduct ts ts pn tn ts pn tn ts 
pnet coproducts de ne net pn equipped injections pn pn constitutes coproduct pn pn result hinges claim 
pn tn nt pn 
assuming claim moment pn tn nt pn denote direction isomorphism 
conclude tn nt pn equipped injections pn tn nt pn coproduct pn pn follows fact core ection tn nt left adjoint tn full faithful 
nd maps ts nt pn tn 
straightforward show full faithful functors re ect coproduct diagrams 
coproduct diagram consisting pn pn tn nt pn injection maps lies range tn follows corresponding diagram pnts consisting ts ts nt pn maps constitutes coproduct diagram done 
ts nt pn ts nt pn nt pn pq nt nt tn ts pn tn ts pn tn nt pn tn nt pn pn tn nt pn pq pq tn nt tn nt pn tn nt complete proof establish claim pn isomorphic tn nt pn 
proof claim 
core ection tn nt know ts isomorphic nt pn recall pn abbreviates tn ts 
tn full faithful preserves isomorphisms pn tn nt pn 
combining isomorphism tn nt maps pn tn nt pn see 
pn equipped injections coproduct pn pn unique map pn tn nt pn tn nt ignore isomorphism pn tn nt pn 
way adjunction de ned follows set transitions pn tpn set transitions tn nt pn 
similarly tpn tn nt pn 
proof lemma de ne maps hin tn nt tn nt tpn tpn tpn follows way functors nt tn de ned hin tn nt tn nt know hin tn nt tn nt hin surjective map case identity map tpn direction counit adjunction de nes map pn tn nt pn pn follows way adjunction de ned coproduct ts ts pn identity map tpn 
pn identity map tpn know tn nt pn simple respect places isolated places 
lemma conclude pn id tn nt pn morphisms agree way map transitions 
similarly pn identity map tpn pn pn simple respect places isolated places di cult show de nition pn simple respect places isolated places 
appeal lemma conclude pn id pn established pn constitute isomorphism pn tn nt pn done 
lemma show transition system shown obvious injection maps coproduct transition systems ts ts shown 

discussion established core ection category pnts pn transition systems category pnet petri nets 
core ection essentially means category pnts embedded pnet words pn transition systems viewed sub model petri nets 
crucial advantage having core ections di erent models concurrency automatically translate results model 
instance obtain non interleaved model process calculus ccs intuitively easier enrich standard interleaved transition system semantics obtain faithful representation concurrency providing semantics directly terms nets event structures 
example simple extension standard operational semantics ccs provide non interleaved semantics rich subclass language terms asynchronous systems 
asynchronous transition systems belong special subcategory shown correspond closely safe nets 
implies obtain free net semantics language 
advantage working categories interesting operations de nes models captured universal categorical constructions 
instance parallel composition corresponds notion categorical product nondeterministic choice described terms coproducts 
relating categories models compare constructions behave di erent models 
issue discussed detail number relationships models concurrency established categorical setting spanning spectrum linear time branching time partial order approaches modelling behaviour concurrent systems 
establishing core ection placed restrictions nets pnet particular permit isolated transitions nets 
behaviourally isolated transitions unpleasant side ect introducing unbounded concurrency system 
useful restriction place nets transition input place 
corresponding restriction pn transition systems steps enabled state bounded 
introducing restrictions obtain full subcategories pnts pnet related core ection 
removed restriction imposed nielsen rozenberg thiagarajan constructing category elementary net systems nets simple 
restriction crucially establish equivalent lemma elementary net systems 
observed su cient ensure going pn transition systems elementary transition systems petri nets elementary net systems nets constructs simple 
core ection elementary transition systems elementary net systems established continues hold category elementary net systems extended permit non simple nets 
construction petri net pn transition system gives rise nite net case trivial transition system 
non negative linear combination regions region saturate net possible non trivial regions 
interesting try characterize pn transition systems described terms nite basis set regions 
elementary transition systems straightforward see transition system represented nite elementary net system set states set events transition system nite 
petri nets places unbounded nite petri net give rise nite pn transition system 
dealing unlabelled structures set events pn transition system set transitions petri net behaviour represents 
pn transition system representation nite net necessary set events nite 
unfortunately condition su cient 
show example petri net nite number transitions nite number unbounded places behaviour simulated nite net 
case set events set states pn transition system nite construct nite petri net behaviour original transition system 
turn categories petri nets described literature notably winskel meseguer montanari 
de nition net morphisms strengthened version winskel 
winskel permits map places arbitrary relation forward direction preserves initial marking neighbourhoods transitions 
main reason permit morphisms unfolding net original net safe nets 
pointed relaxation permit establish adjunction transition systems nets 
essential problem general nd winskel morphisms pair nets describing behavioural morphism corresponding transition systems 
destroys bijection hom tn ts pn hom nt pn required adjunction 
observation respect elementary transition systems holds pn transition systems 
meseguer montanari de ne variety categories petri nets 
regard multisets places transitions commutative monoids general case de ne net morphisms monoid homomorphisms places transitions respect neighbourhoods transitions 
category maps places monoid homomorphisms maps transitions partial functions closest spirit category pnet obtain adjunction net morphisms net morphism corresponding transition system morphism 
initial markings restricted sets places multisets order coproducts exist 
restriction coproducts correspond non deterministic choice 
pnet restriction necessary obtain coproducts noted previous section nets satisfying restriction initial marking coproducts correspond non deterministic choice 
admittedly net morphisms appear fairly restrictive compared 
restrictions impose net morphisms essential establishing correspondence nets transition systems free construction net tn ts pn transition system ts non trivial regions included places tn ts 
possible way relax notion net morphism obtain core ection pn transition systems nets tighten construction net pn pn transition system ts include say basis set regions places pn non trivial regions 
despite restricted nature net morphisms core ection er solution general problem net morphisms 
ideally morphism exist nets pn pn pn simulate behaviour pn structure pn pn rule morphism behaviours nets related 
true generous setup consequence fact nets concrete representation system behaviour 
core ection gives way get di culty 
suppose nets pn pn transition system morphism nt pn nt pn net morphism pn pn construct net tn nt pn canonical representation pn core ection guarantees net morphism exists tn nt pn pn fact need entire net tn nt pn obtain morphism pn map nt pn nt pn su cient construct net pn pn adding pn places inverse images special regions nt pn recall place pn associate region nt pn 
way meseguer montanari generalize net morphisms permitting single event source net map computation target net 
fact winskel generalizes morphisms permit event mapped multiset events single event 
corresponds sort re nement operation 
interesting see idea transported setup require de ne sophisticated notion transition system morphism 
mentioned generalization results described dealing elementary net systems 
addition winskel nielsen established similar result relating subclass asynchronous transition systems safe petri nets 
tuning regions appropriately results neatly framework 
region restrict range range enforce regional axioms step transition systems terms restricted class regions obtain full subcategory pnts consisting safe pn transition systems corresponds safe petri nets 
transition systems subcategory turns steps transition relation consist sets events multisets ruled 
winskel nielsen established core ection subcategory asynchronous transition systems safe nets 
asynchronous transition system information concurrency incorporated terms binary independence relation events adding structure labels transitions done 
rst sight appears category safe pn transition systems coincide subcategory asynchronous transition systems studied 
show core ection categories indicating asynchronous transition systems slightly concrete model safe pn transition systems model safe nets 
concreteness arises fact independence relation specify events concurrent asynchronous transition system state concurrency exhibited behaviour system 
restricting range exclude obtain full subcategory pnts called elementary pn transition systems corresponding elementary net systems 
establish equivalence category elementary pn transition systems category elementary net systems nielsen rozenberg thiagarajan 
elementary transition systems subclass conventional sequential transition systems categorical equivalence ers alternative proof result rozenberg elementary net systems safe nets 
petri nets asynchronous transition systems winskel nielsen elementary pn transition systems safe pn transition systems pn transition systems elementary transition systems nielsen rozenberg thiagarajan relating various models concurrency elementary transition systems information concurrency lost restricting attention sequential transition systems 
relationship di erent models summarized 
vertical arrows indicate core ections arrow indicates direction left adjoint 
turns interested sequential behaviour petri nets characterize petri nets conventional transition systems 
suppose consider purely sequential transition systems restricting attention sequential ring sequences petri nets 
get obvious sequential de nition region impose corresponding regional axioms obtain category sequential pn transition systems 
somewhat surprisingly turns establish core ection category sequential pn transition systems category pnet 
setup net pn canonical representation tn nt purely sequential place tn nt transition tn nt 
observation sequential step transition systems characterize petri nets indicate objects pn transition systems bridge gap interleaving non interleaving models concurrency smooth way 
conclude pointing major issue ignored study labelling 
theory petri nets abstraction achieved adding set labels associated underlying events system 
crucial nets provide say semantics ccs langages 
labelling introduced categorical treatment di erent models concurrency means brations brations 
point problems de ning constructions categories nets prevent core ection unlabelled transition systems unlabelled nets extended corresponding labelled categories 
explicitly handled labelling framework con dent follow route set di culty 
acknowledgments thiagarajan suggestions criticism greatly uenced formulation presentation 
douglas gurr peter mogens nielsen sassone glynn winskel anonymous referee constructive comments preliminary versions 
part reported done visiting computer science department aarhus university denmark 
author stay denmark supported aarhus university research foundation 

categories asynchronous systems phd thesis report computer science university sussex brighton uk 

brown gurr categorical linear framework petri nets proc 
th ann 
ieee symp 
logic computer science philadelphia usa pp 


degano de nicola montanari distributed operational semantics ccs condition event systems acta inf 


ehrenfeucht rozenberg partial structures part ii state spaces concurrent systems acta inf 


thiagarajan trace semantics petri nets report department computer science leiden university leiden netherlands extended appears proc 
icalp 

rozenberg diamond properties elementary net systems fund 
inf 
xiv 

ramanujam thiagarajan logic distributed transition systems springer lect 
notes comput 
sci 


mac lane categories working mathematician springer verlag new york berlin 

milner communication concurrency prentice hall london 

meseguer montanari petri nets monoids inf 
comput 


mukund transition system characterization petri nets report tcs school mathematics science foundation madras india 

mukund transition system models concurrency report daimi pb computer science department aarhus university aarhus denmark 

mukund nielsen ccs locations asynchronous transition systems report daimi pb computer science department aarhus university aarhus denmark 

nielsen rozenberg thiagarajan elementary transition systems theor 
comput 
sci 



olderog nets terms formulas cambridge university press cambridge 

reisig petri nets springer verlag berlin 

shields concurrent machines computer journal 

winskel petri nets algebras morphisms compositionality inf 
comput 


winskel event structure semantics ccs related languages springer lect 
notes comput 
sci 

winskel nielsen models concurrency appear abramsky gabbay maibaum eds handbook logic computer science 
