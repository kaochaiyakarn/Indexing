strategic pattern matching eelco visser department computer science universiteit utrecht box tb utrecht netherlands www cs uu nl visser visser acm org 
stratego language speci cation transformation rules strategies applying 
basic actions transformations matching building instantiations rst order term patterns 
language supports concise formulation generic data type speci term traversals 
unusual features stratego separation scope matching allowing sharing variables traversals 
combination rst order patterns strategies forms expressive formalism pattern matching 
discuss examples strategic pattern matching contextual rules allow matching replacement pattern arbitrary depth subterm root pattern 
recursive patterns characterize concisely structure languages form restriction larger language 
overlays serve hide representation language generic language 
techniques illustrated means speci cations stratego 
order terms represent data structures term rewriting systems functional logic programming languages 
order patterns decompose terms simultaneously recognizing structure binding variables subterms expressed nested conditional expressions test tags select subterms 
rst order patterns treated rst class citizens poses limitations modularity reuse abstraction patterns provided may occur left hand side rewrite rule arms case heads clauses pattern matching odds data types exposes data representation rst order pattern span xed distance root pattern leafs necessary de ne recursive traversals data structure separately pattern get needed information 
reasons enhancements basic pattern matching features implemented considered languages 
example list matching written author employed paci software research center oregon graduate institute portland oregon usa 
supported part air force materiel command contract 
appear rewriting techniques applications rta trento italy 
springer verlag july 
asf sdf divide list multiple sublists possibly separated element patterns 
associative commutative ac matching obj maude elan supports treatment lists multi sets :10.1.1.51.9254
higher order matching prolog allows matching subterms variable depth 
views haskell proposed provide way view data structure di erent patterns represent 
techniques provides mix structure recognition variable binding term traversal transformation 
instance list ac higher order matching term rst transformed application associative identity laws associative commutative laws conversion matched pattern 
matching view pattern involves transformation underlying data structure view data type 
shows rewriting strategies paradigm provides general framework describing implementing pattern matching combinations 
rewriting strategies programs determine order rewriting rules applied 
important aspects strategies de nition term traversals nd subterms rules applied 
application traversals de nition patterns level individual rules considered 
explores strategic pattern matching stratego language speci cation program transformation systems 
stratego layer syntactic abstractions top system core language de nition rewriting strategies 
basic actions system matching building instantiations rst order term patterns 
language supports concise formulation generic data type speci term traversals 
unusual features system separation scope matching allowing sharing variables traversals 
combination rst order patterns strategies forms expressive formalism pattern matching 
section gives brief overview system stratego 
sections discuss applications strategic pattern matching illustrated means speci cations stratego contextual rules allow matching replacement subterm arbitrary depth respect root pattern 
section shows contextual patterns concise speci cation type checker 
recursive patterns predicates characterize concisely structure languages form subset larger language 
section illustrates idea means characterization conjunctive disjunctive normal forms restriction propositional formulae 
section applies technique characterize embedding asfix syntax representation asf sdf aterms universal data type 
overlays pseudo constructors underlying complex representation real constructors 
overlay language top generic representation language 
section de nes overlays asfix hide details embedding aterms 
related discussed section drawn section 
rewriting strategies section introduces system calculus de nition tree transformations stratego speci cation language providing syntactic abstractions system expressions 
operational semantics see 
system system hierarchy operators expressing term transformations 
rst level provides control constructs sequential non deterministic programming second level introduces combinators term traversal third level de nes operators binding variables matching building terms 
order terms expressions grammar tn tn tn ranges variables constructors 
arity types constructors declared signatures 
notation tn abbreviates list cons cons tn nil 
transformations system applied ground terms terms variables 
level sequential non deterministic programming strategies programs attempt transform ground terms ground terms may succeed fail 
case success result attempt transformed term 
case failure result indication failure 
strategies combined new strategies means operators identity strategy id leaves subject term unchanged succeeds 
failure strategy fail fails 
sequential composition rst attempts apply subject term succeeds applies result 
non deterministic choice attempts apply 
succeeds succeeds fails fail order tried unspeci ed 
deterministic choice attempts apply order 
recursive closure rec attempts apply occurence variable strategy rec applied 
test strategy test tries apply succeeds succeeds reverts subject term original term 
fails fails 
negation succeeds identity transformation fails fails succeeds 
examples strategies de ned operators try repeat 
level term traversal level constructs apply transformations root term 
order apply transformations term necessary traverse 
purpose system provides operators ary constructor congruence operator sn de ned 
applies terms form tn applies si ti example congruences operator map applies element list 
module traversals imports lists strategies try repeat rec try list rec nil cons topdown rec rec bottomup rec rec rec rec rec rec fig 

speci cation generic term traversal strategies 
congruences de ne traversals speci data structures 
speci cation generic traversals pre post order arbitrary structures requires generic operators 
operator applies children constructor application tn 
particular identity constants constructor applications children 
strategy applies child constructor application tn precisely failure strategy constants 
strategy applies children constructor application tn possible 
fails constants 
de nes various traversals operators 
instance tries nd application term starting root working way rst attempts apply fails application recursively attempted children subject term 
application traversal fails 
compare traversal nds outermost applications fails 
level match build variable binding operators introduced far useful repeatedly applying transformation rules term 
actual transformation rules constructed means pattern matching building pattern instantiations 
match succeeds pattern term matches subject term 
side ect variables bound corresponding subterms subject term 
variable bound match binding succeeds terms 
enables non linear pattern matching match succeeds arguments subject term equal 
non linear behaviour arise operations 
example consecutive matches succeed exactly arguments equal 
variable bound unbound 
build replaces subject term instantiation pattern current bindings terms variables scope xn variables xi local strategy means bindings variables outside scope undone entering scope restored leaving 
operation applies strategy subject term 
successful restores original subject term keeping newly obtained bindings variables 
stratego speci cation language stratego provides syntactic abstractions system expressions 
speci cation consists collection modules de ne signatures transformation rules strategy de nitions 
signature declares sorts operations constructors structure language transformed 
example signature shown 
strategy de nition xn introduces new strategy operator parameterized strategies xn body de nitions recursive refer directly indirectly operator de ned 
recursion expressed explicitly means recursion operator rec 
labeled transformation rules abbreviations particular form strategy de nitions 
conditional rule label left hand side right hand side condition denotes strategy de nition xn 
body rule rst matches left hand side attempts satisfy condition succeeds builds right hand side rule enclosed scope term variables xi occurring local rule 
de nition provided name xs xs equivalent single de nition sum original bodies body xs 
de nitions provide useful shorthand 
notation denotes strategy builds term applies 
notation denotes strategy applies current subject term matches result combined notation denotes 
notation build expression 
example strategy expression corresponds new variable 
programming idioms syntactic abstractions support 
recursive patterns idiom directly supported stratego introduced 
syntax stratego extended contexts overlays provide concise syntax idioms 
syntax extensions implemented extending system implementation stratego compiler translates speci cation program reads term applies speci ed transformation succesful outputs transformed term 
compiler rst translates speci cation system expression translated list machine instructions 
instructions implemented run time system aterm library 
compiler implemented stratego 
module pico syntax imports list basic signature sorts program decl stat expr type id operations block list decl stat program decl id type decl natural type plus expr expr expr string type minus expr expr expr skip stat conc expr expr expr assign id expr stat var id expr seq stat stat stat int int expr expr stat stat stat str string expr expr stat stat id string id fig 

syntax pico 
contexts section describes contextual patterns patterns relate bit information root pattern subterm variable depth 
illustrated speci cation type checker toy language pico 
heering gives concise speci cation typechecker combination second order matching relate variable declarations occurrences program interpretation style type checking 
pico small imperative language 
expressions ranging natural number string values usual statement combinators 
program consists block contains list variable declarations statement 
variable declarations associate type natural string variable identi er 
syntax pico de ned 
program statically correct variables consistently declarations 
conventionally type checkers de ned predicate traverses program carrying declarations checking correctness expressions statements 
interpretation style rst variable occurrences replaced types injection tp types identi ers consistent combinations typed expressions statements reduced simpler forms 
example variables type string expression conc var id var id rst transformed conc var tp string var tp string reduces var tp string 
program correct reduce block skip statement 
program contains type errors residuals error remain result type checking procedure point parts program 
example program block decl id natural decl id string var id assign id plus var id var id reduces module pico typecheck imports pico syntax traversals signature operations tp type id rules block ds decl id id block ds tp int var tp natural str var tp string check seq skip check seq skip check assign tp var tp skip check var tp natural seq check var tp natural check plus var tp natural var tp natural var tp natural check minus var tp natural var tp natural var tp natural check conc var tp string var tp string var tp string strategies typecheck repeat repeat check fig 

type checking rules strategy pico 
block decl id natural decl id string assign tp string var tp natural making clear assignment statement type correct 
speci cation approach shown 
typecheck strategy declares traversal program 
way identi ers constants replaced types means rules 
way typed expressions statements reduced simpler forms check rules 
distribution type information program achieved means contextual rule 
sub pattern ds decl id context matches instance pattern decl id subterm ds argument block pattern 
sub patterns id left hand side tp right hand side form context replaces occurrence id statements tp determined match ds context 
contextual rules implemented translation primitive constructs 
context occurring left hand side corresponds traversal term matching trying nd match pattern context left hand side right hand side corresponds traversal term matching replaces occurrence corresponding instantiation rst attempt implementation rule block ds block ds ds rst clause condition traversal declarations nding declaration 
second clause traverses statements replacing occurrence identi er declaration type 
achieve desired ect 
rst traversal nds declaration occurrences identi er statements second traversal fail declarations succeed 
words rst traversal needs backtrack nd declarations second traversal fails 
achieved inlining second traversal rst follows block ds block ds ds clause rule computes new value 
outer traversal walks declarations 
declaration identi er id inner traversal walks statements replaces occurrence id type tp declaration 
occurrence identi er statements outer loop continues search declaration 
declaration matching identi er occurrence statements rule fails 
recursive patterns section treats recursive patterns patterns describe recursive structure opposed xed structure described rst order patterns 
idiom recursive patterns illustrated speci cation language restrictions 
recursive patterns useful tools program analysis 
signature generates language terms 
language restriction subset language 
restrictions syntactic correspond language generated subsignature require constructs certain combinations 
examples language restrictions abound language processing set normal forms respect set rewrite rules restriction 
rewrite rules give operational method obtaining normal form term describe structure normal forms 
core language re ects computational kernel language 
transformation translates program complete language core language program de ne structure core language programs 
intermediate languages produced stages compiler restrictions common language 
subsequent stages introduce lower level features 
combination constructs form valid language 
languages embedded generic representation format 
generic format allows wide range expressions expressions embedded language 
language restrictions dealt informally 
component language processor assumes input certain form de ned 
descriptions language restrictions separate transformations module prop signature sorts prop operations atom string prop prop prop prop prop prop prop prop prop strategies conj rec disj rec conj nf conj disj atom id atom id disj nf disj conj atom id atom id fig 

characterization conjunctive disjunctive normal forms 
produce useful documentation restriction consumed produced language processor validation check input output processor conforms restriction 
strategies support concise description language restrictions means recursive patterns 
recursive pattern strategy describes structure set terms means recursion congruences 
technique illustrated examples disjunctive conjunctive normal forms propositional formulae section embedding asfix aterms 
rst example consider language propositional formulae constructed atoms proposition letters negation conjunction disjunction 
signature describing syntax language shown 
formula conjunctive normal form conjunction disjunctions atoms negated atoms 
likewise formula disjunctive normal form disjunction conjunctions atoms negated atoms 
restrictions characterized concisely means recursive patterns 
strategy characterizes formulae form strategy rec describes conjunctions form leaves form operators conj disj describe conjuncts disjuncts respectively 
combination conj disj describes conjuncts disjuncts 
unfolding de nition conj disj conj nf gives conj nf rec rec atom id atom id conj nf disj nf describe conjunctive disjunctive normal forms respectively 
overlays section introduces overlay patterns patterns composed concrete representation real constructors 
overlays rst class citizens sense operations apply normal constructors matching building congruence apply overlays 
furthermore overlays de ned terms overlays allowing hierarchy abstractions 
technique illustrated de nition overlays representation asfix constructs aterms 
applied example recursive patterns describe restriction aterms asfix expressions 
aterms asfix annotated term format aterms universal data type designed representing data types generic manner purpose data exchange generic manipulation persistent storage data 
gives signature aterms 
aterm application appl afun list terms list alist terms 
afun integer int quoted string str symbol sym 
example aterm appl sym appl sym atom appl str appl sym atom appl str encoding propositional formula atom atom 
asfix syntax algebraic speci cation formalism asf sdf 
intermediate representation language processors term rewriting compiler pretty printer generator 
asfix representation speci cation consists signature list conditional equations typed rst order terms 
unconditional equations rst order terms considered 
characteristics asfix encoding syntactic information 
asf sdf constructors de ned means context free production declares mix syntax sorts arguments 
asfix sort information syntactic information retained 
example production represented asfix expression prod sort lit sort sort productions form constructor names applications form app 
precise de nition asfix 
asfix expressions represented aterms 
instance production represented aterm appl sym prod alist appl sym sort appl str appl sym lit appl str appl sym sort appl str appl sym sort appl str representation allows easy exchange persistency generic manipulation asfix expressions 
representation problems aterm format universal datatype aterm valid asfix expression 
aterm format bulky specifying operations asfix pattern matching aterm representation tedious 
rst module aterms signature sorts afun aterm operations int int afun appl afun list aterm aterm str string afun alist list aterm aterm sym string afun fig 

aterm signature 
problem solved de recursive pattern characterizes aterms valid asfix expressions 
recursive pattern validate input language processors 
second problem solved de ning overlays concrete aterm representation asfix expressions maintaining representation hood 
overlays asfix overlays abstractions term patterns 
overlay de nition xn pat introduces new constructor arguments abbreviation pattern pat 
new constructor places pattern pat match patterns build patterns congruences 
expression occurrence tn denotes expression obtained replacing tn pat tn xn congruence expression sn denotes instantiation congruence derived pattern strategies si substituted variables xi 
de nes overlays constructs asfix 
example overlay prod appl sym prod alist de nes abstraction aterm pattern encoding asfix production 
overlays complicated aterm written prod sort lit sort sort overlays recursive pattern characterizes restriction aterms asfix 
patterns asfix describe syntactic categories asfix congruences expressions lit string app asfix prod list derived overlays 
pattern asfix prod de nes production prod list asfix sorts rst argument asfix sort second argument 
pattern asfix term de nes asfix term literal typed variable application production list terms 
pattern asfix equ de nes equation equation non variable term left hand side term right hand side 
recursive patterns describes raw asfix expressions check argument sorts prod application correspond module asfix imports aterms traversals strings overlays sort appl sym sort appl str lit appl sym lit appl str prod appl sym prod alist app appl sym app alist var appl sym var equation appl sym equation strategies asfix sort sort string lit string asfix prod prod list asfix sort asfix sort asfix term rec lit string var asfix sort string app asfix prod list asfix equ equation asfix term var id id asfix term asfix eqs list asfix equ rules check var check app prod args res args res check equation srt srt equation srt srt strategies typecheck term rec lit id check app id list check typecheck eqs list equation typecheck term typecheck term check fig 

asfix overlays recursive pattern type checker 
sorts actual arguments application 
test typechecker interpretation style similar pico typechecker section de ned 
need distribute type information terms annotated types 
process de ning overlays hide underlying representation repeated de ne top asfix abstractions layer describe patterns speci instantiation asfix terms 
instance take sdf productions overlays de ne shorthands asfix terms productions overlays prod sort lit sort sort app lit plus mul overlays allow domain speci transformation rule distr mul plus plus mul mul rule written level embedded language expressions applied level underlying aterm representation 
related programmable rewriting strategies originate theorem proving tactics rst introduced rewriting speci cation language elan 
algebraic speci cation formalism maude strategies de ned user meta level speci cations :10.1.1.51.9254
system stratego developed sequential non deterministic programming generic term traversal breaking rewrite rules matching building term patterns 
elan supports congruences recursive equations support de nition recursive patterns 
overlays contexts supported elan maude 
see details relation languages 
wide range languages introduce enhanced pattern matching features 
brief necessarily incomplete overview follows transformation languages txl examples languages ad hoc combinations traversal pattern matching 
context patterns implemented means higher order matching prolog 
higher order pattern instantiates function variable application yields term matched 
heering gives example second order matching discussed section 
context patterns haskell similar higher order matching prolog 
sellink verhoef show list matching implement shallow contexts nd statements list statements xed nesting depth transforming cobol programs 
stratego contexts provide additional possibility specifying traversal 
implies restrictions structure context imposed replacement done 
aiken murphy describe language regular tree expressions program analysis 
language similar recursive patterns restricted recognition 
overlay abbreviation abstractions match abstraction build abstraction congruence abstraction 
pattern templates sml aitken reppy de ne abstractions match abstraction build abstraction 
congruences supported sml 
di erence templates templates need linear 
de nition variable occur overlays need linear 
view type wadler proposal views haskell presents alternative view representation data type means pair conversion functions translate representation type view type 
views general overlays templates allow rearrangement underlying pattern 
added expressivity turns disadvantage considers pattern matching 
overlays abstractions result loss ciency views require arbitrary transformation 
view transformations course expressible stratego 
thompson types miranda similar views 
problem general views destroy equational reasoning 
proposals repair allowing views match expressions build expressions 
values underlying data representation constructed means functions 
erwig active patterns considered functions inspect transform argument bind subterms variables fail 
ahndrich boyland syntactically restrict patterns pattern abstractions pattern matching statically checkable 
examples strategic pattern matching contexts recursive patterns overlays 
idioms provide concise speci cation expressive patterns enhance standard rst order patterns 
de nition follows naturally features system techniques new syntactic abstractions added stratego new system constructs needed 
key features enable expressivity ability pattern matching abstraction building common feature languages separation variable scope matching enables communication variable bindings operations generic term traversals 
techniques described applied speci cation bootstrapped stratego compiler optimizer rml speci cation warm fusion transformation functional programs 
includes application techniques program transformations development abstractions concise speci cation program transformations optimization strategies particular traversal fusion important optimization contextual rules 
author andrew tolmach johann referees comments drafts 

aiken murphy 
implementing regular tree expressions 
functional programming computer architecture fpca pages aug 

aitken reppy 
value constructors 
acm sigplan workshop ml applications pages san francisco cal june 

borovansk kirchner kirchner 
controlling rewriting rewriting 
meseguer editor proceedings international workshop rewriting logic applications volume electronic notes theoretical computer science asilomar paci grove ca september 
elsevier 

burton cameron 
pattern matching data types 
journal functional programming april 

clavel eker lincoln meseguer 
principles maude 
meseguer editor proceedings international workshop rewriting logic applications volume electronic notes theoretical computer science pages asilomar paci grove ca september 
elsevier 

cordy halliday 
txl programming language version apr 

van deursen heering klint editors 
language prototyping 
algebraic speci cation approach volume amast series computing 
world scienti singapore september 

erwig 
active patterns 
implementation functional languages volume lecture notes computer science pages 

ahndrich boyland 
statically checkable pattern abstractions 
international conference functional programming icfp pages amsterdam netherlands june 
acm sigplan 


pattern languages prototyping compiler optimizers 
phd thesis university california berkeley 
technical report csd 

heering 
second order term rewriting speci cation static semantics exercise 
van deursen chapter pages 

johann visser 
warm fusion stratego 
case study generation program transformation systems 
technical report department computer science universiteit utrecht 
www cs uu nl visser stratego 

kirchner kirchner vittek 
implementing computational systems constraints 
kanellakis 
lassez saraswat editors proceedings rst workshop principles practice constraint programming pages providence usa 
brown university 

visser 
speci cation rewriting strategies 
sellink editor nd international workshop theory practice algebraic speci cations asf sdf electronic workshops computing berlin november 
springer verlag 


denotational semantics functional tree manipulation language 
computer languages 


context patterns part ii 
implementation functional languages pages 

nadathur miller 
overview prolog 
kowalski editor logic programming 
proceedings fifth international conference symposium volume pages cambridge mass usa 
mit press 

okasaki 
views standard ml 
sigplan workshop ml pages baltimore maryland usa september 

olivier de jong 
cient annotated terms 
technical report programming research group university amsterdam august 

sellink verhoef 
native patterns 
blaha quilici verhoef editors proceedings th working conference reverse engineering wcre pages honolulu hawaii usa october 

thompson 
laws miranda 
acm symposium lisp functional programming pages 
acm august 

visser 
benaissa 
core language rewriting 
kirchner kirchner editors second international workshop rewriting logic applications electronic notes theoretical computer science pont france september 
elsevier 

visser 
benaissa tolmach 
building program optimizers rewriting strategies 
international conference functional programming icfp pages baltimore maryland september 
acm 

wadler 
views way pattern matching cohabit data abstraction 
acm symposium principles programming languages pages munich january 
acm 
