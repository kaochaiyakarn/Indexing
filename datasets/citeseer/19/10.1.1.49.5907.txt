published proc 
concur int 
conference concurrency theory lncs volume 
springer verlag 
fixpoint analysis machine bernhard steffen andreas cla en marion klein jens knoop tiziana margaria universitat passau germany 
fixpoint analysis machine efficient computation homogeneous hierarchical alternating fixpoints regular context free push macro models 
applications fixpoint computations include intra interprocedural data flow analysis model checking various temporal logics verification behavioural relations distributed systems 
fixpoint analysis machine identifies adequate parameterized level uniform treatment problems despite uniformity outperforms standard iteration special purpose tools usually factors additional compilation time taken account 
motivation great number analysis verification problems interpretation data flow analysis model checking determination behavioural relations distributed systems hardware verification synthesis boil computation specific kind fixpoint 
fact areas application specific fixpoint solving tools independently constructed tuned special purposes 
idea fixpoint analysis machine define uniform platform fixpoint computations despite uniformity outperforms iteration special purpose tools 
goal approached translating specific fixpoint problems fine grained computationally advantageous representations allow eliminate redundancy possible 
design stems observation fixpoint problems considered practice formulated model checking problem certain kind 
currently uniformly covering kinds fixpoint computations summarized table depend structure underlying model formula 
structure analysis machine consequence observation different kinds fixpoint computations requires special care large common core soon breaks lehrstuhl fur universitat passau passau germany tel fax steffen fmi uni passau de problem appropriate kind granularity allows limited form parameterization 
fact machine architecture going allows uniformly cover kinds fixpoint problems mentioned performance penalty choice granularity tailored runtime optimization 
fact differences kinds problems corresponding fixpoint computations require change data domain fixpoint computed program controlling order fixpoint computation 
architecture remaining data structures machine coincide applications 
fixpoint model class class regular cfr pda macro homogeneous chaotic iib chaotic iib chaotic high ord 
iib hierarchical layered iib layered iib layered high ord 
iib alternated nesting backtrack iib backtrack iib backtrack high ord 
iib table 
classification fixpoint computations strategy domain practical experience analysis machine confirms known fact compilation better interpretation 
fact additional translation effort account analysis machine outperforms computations standard data structures factors usually 
details reported section 
uniform general structure machine leads excellent experimental features 
practical side supports investigation heuristics important dealing complex kinds fixpoint problems 
theoretical side supports study essence alternated nesting matter research 
noted focus global iterative fixpoint computations 
specific heuristics binary decision techniques model checking extremely efficient cases worse standard iteration techniques bad cases covered 
fixpoint machine constitutes central component computational core meta frame macs uniform environment high level construction verification analysis hardware software systems 
section summarizes domain application section presents analysis machine 
subsequently section discusses optimizing compilation section describes fixpoint computation mechanism section reports performance machine section draws 
application domains scenario summarizes scenario discussed 
upper rows address currently considered application areas ranging kinds dataflow analyses verification behavioural relations top row various classes model checking second upper row 
top row applications reduced model checking logical characterization runtime penalty second upper row showing hierarchy model checking problems represents application level common platform top row applications 
explain upper rows subsequently sketch lower part discussing implementation various kinds model checkers 
intraprocedural dataflow analysis algorithms kind realized efficiently implementation cost analysis machine data flow analysis generator automatically produces fixpoint machine code high level specifications 
discuss implementation performance section 
regular mc macro mc cfr pda mc equational systems solving fixpoint analysis machine intraprocedural dfa higher order dfa interprocedural dfa behavioural relations hardwiring compilation logical characterization hung ande lars bust bust fig 

setup analysis environment interprocedural data flow analysis setting able cover wide class programs contain recursive procedures value parameters 
corresponding data flow analysis generator uses high level specifications intraprocedural version implementation 
requires combination methods bust 
higher order data flow analysis setting allows deal types parameters procedure parameters 
case parameters efficient optimal treatment arbitrary finite mode procedures requires unacceptable effort handled approximatively 
details reader referred method safe efficient optimal programs mode global formal procedure parameters 
essentially methods boil adding specific preprocess interprocedural analysis efficiently realized analysis machine 
corresponding extension interprocedural data flow analysis generator case simple preprocess independent specific analysis 
behavioural relation checking verification behavioural relations distributed systems transformed particular model checking problem logical characterization 
second row presents hierarchy model checking problems classified structure underlying model 
structure possibility extent interference minimal maximal fixpoints generating homogeneous hierarchical alternating fixpoints important classification criterion 
top row applications require hierarchical fixpoints alternating fixpoints necessary dealing properties fairness 
altogether face potential structurally different model checking problems alternating case context free push macro models see table decidable fixpoint characterization 
cases uniformly represented means finite equational system parity vector specifying particular solution minimal maximal interest 
leads third row 
proposed transformations exceptional cases correctness conjecture 
standard model checkers representation level equational systems computation takes place level fixpoint analysis machine 
translation equational representation regarded common intermediate level standard concentrate analysis machine sequel 
presenting architecture analysis machine sections show translate equational description third level machine code 
fact point lies impact optimizing translation performances discussed detail hier regular setting 
extensions settings complicated fully implemented sketched 
fixpoint analysis machine structure machine reflects observation different kinds fixpoint computations table requires special care large common core soon breaks problem appropriate kind granularity allows limited form parameterization 
fact machine architecture going allows uniformly cover mentioned kinds fixpoint problems performance penalty choice granularity tailored runtime optimization 
machine architecture illustrated 
white parts common analyses 
value array control unit shaded parameterized kind problem 
parameter value array type values considered second component table depends kind model investigation control unit steers order chaotic layered backtrack fixpoint computation accordingly 
instruction array parity vector block graph worklist completely problem independent 
paragraphs sketch data type functional unit 
instruction array ia pv block graph bg fixpoint analysis machine parity vector bgp bg pointer wlp worklist wl control unit cu wl pointer value array va fig 

architecture fixpoint analysis machine 
instruction value arrays fixpoint computation proceeds successively updating components value array encoding information equations states model means component specific operations stored instruction array 
choice granularity leads simple structure modeled instruction array comp graphs 
represent kind operation perform conjunction disjunction functional composition ii list operands operation form list components value array iii influence list components influenced value considered component 
easily automatically determined means simple compiler see section 
structure instruction array completely independent considered fixpoint problem component type value array depends kind model considering see table second component regular case single bits sufficient 
indicate specific node model satisfies particular formula 
cfr pda case elements correspond property predicate transformers boolean functions iib iib iib arity determined size considered system formula 
reasons efficiency represented binary decision diagrams bdds 
macro case elements correspond mappings property transformers 
dealing higher order boolean functions 
instruction array completely constructed compile time 
read access runtime 
contrast value array read written runtime space allocation matter compilation 
parity vector fixpoint problem completely specified system mutually recursive equations equation classified maximal minimal kind fixpoint interest 
instruction array contain classification merely stands set fixpoint problems 
classification specified separately vector stores row instruction array desired kind min max fixpoint called parity 
note technically simple algorithmically unpleasant allow changes parity component wise currently demand direction 
instruction array parity vector created compile time read accessed runtime 
block graph homogeneous fixpoint problems solved means totally chaotic iteration value array 
kinds fixpoints involved order fixpoint computation essential 
hierarchical systems layered approach sufficient alternating fixpoint formulas require strict discipline involving backtracking 
observation motivates structure block graphs lists dags directed acyclic graphs 
basic underlying idea edges represent ordering constraints nodes collect blocks collections equations fixpoints computed arbitrary order 
fact see graph structure sufficient uniformly capture strongly optimized organization fixpoint computation alternating case 
technically need blocks arises soon depending minimal maximal fixpoints 
dependency requires strict organization order fixpoints computed 
hierarchical case simple sequentialization layered computation sufficient complicated alternating case backtracking procedure organized underlying block graph 
convenient additionally split blocks parity leads notions min blocks 
additional separation single block comprise completely independent minimal maximal equations 
blocks important allow efficient fixpoint computation 
switching different blocks ordering constraints expensive worklist oriented chaotic iteration allowed block 
efficient fixpoint algorithms completely determine fixpoint block switch 
approach guaranteed optimal counters cf 
section 
homogeneous fixpoints component list containing single node dag sufficient dealing single block ordering constraints need taken care 
hierarchical fixpoint computations postpone evaluation equation equations different parity may influence reached fixpoints 
terms model checking corresponds innermost strategy evaluation formula 
requirement expressed sufficiently means list sets formulas list node dags 
alternating fixpoint computations require backtracking leads exponential complexity alternation depth considered formula 
important source optimization reduction backtracking steps 
block graphs support reduction structuring global dependence graph fixpoint equations fashion ffl list structure reflects dependence ordering constraints strongly connected components dependence graph 
course constraints form general dag structure 
hierarchical case simply collapse dag list runtime penalty 
choice elaboration block graphs 
ffl dag structure reflects part ordering constraints strongly connected component constraint equations kept row precedes row value array 
dag equations collapsed combining equations similar dependence relation node 
omit exact definition complicated collapse 
block graphs constructed compile time read access runtime 
fact need operations bl access set equations evaluation performed arbitrary order case backtracking required reset bl provide similar set case backtracking needed 
worklist block graph mean steer fixpoint computation globally blocks worklist organizes fixpoint computation inside block 
contains addresses value array components current block values updated consequence earlier changes value array 
list dynamically initialized entering new block updated computation appending addresses influenced value array components 
worklist pure runtime entity initialized updated read runtime 
optimizing compilation organization impact interference minimal maximal fixpoints fixpoint computation means block graph essential part compilation 
discussed corresponding programs control unit straightforward concentrate treatment different kinds models regular cfr pda macro 
mentioned concerns value array instruction array indirectly affected simple data domains support optimizations 
particular see partial evaluation feature compiler completely evaluates function compositions regular case 
central feature translation partial evaluation 
certain basic techniques applied specific depending analysis context 
explain context model checking problem starting standard case 

knowledge logic formula suffices determine kind fixpoint computed involved comp subformulas parity part organization blocks 
instantiation provides tool checking considered formula arbitrary models 
knowing kind models considered allows determine domain fixpoint computation 
machines kind correspond usual interprocedural data flow analysis algorithms 
straightforward partial evaluation compilers contain rewriting machine aims minimal equational characterization considered formula 
rewriting machine complex applied formula investigation models case data flow analysis 

knowledge model investigation determines domain fixpoint computation preliminary versions influence dependence sets fixed 
partial evaluation provide minimization procedures collapse model bisimulation 
step sense single model going investigated respect formulas 
typically arises development system designers want verify certain safety liveness properties design 
results separate compilation steps merged single combined representation basis instantiation instruction array 
course model formula known instruction array directly instantiated 
discuss comp functions constituting components instruction array optimized 
functional composition necessary describe effect transition step model 
effect step known compile time case modelling intraprocedural regular analyses functional compositions immediately evaluated 
complicated case interprocedural cfr pda analyses transitions denote procedure calls 
effect known compile time 
functional compositions associated transitions evaluated 
runtime gain partial evaluation usually higher partial evaluation time 

entries instruction array constant functions 
perform constant propagation folding instruction array 

particularly strong optimization possible regular model structures cases components value array store bits 
step know need consider conjunction disjunction case 
observation leads counters intuitively measure distance change value array 
explain idea modified version case homogeneous system maximal equations 
homogeneous systems minimal equations behave dually 
maximal fixpoints computed successively updating maximally initialized value array essentially components assumed true 
monotonicity reasons update switch true false 
conjunction happens soon operand switches false 
counter initialized 
contrast disjunction operands switch value changes 
counter initialized number operands 
working counters avoids evaluate instructions instruction array operation need decrement corresponding counter operands changes value 
counter array component reaches zero indicating switch corresponding boolean value influenced components need informed decrement counters insertion worklist 
optimization applicable fixpoint computation single blocks hierarchical alternating case 
computing fixpoints section sketch computation mechanism various kinds fixpoint problems 
start considering regular problems require fixpoint computation 
subsequently discuss extension context free structures 
decidability model checking problem implied decidability results monadic second order logic known efficient algorithms cover alternation free hierarchical formulas 
best known algorithm general case non elementary 
extension push structures contrast classical automata theory coincide context free structures branching structure models essential straightforward range tractability 
longer case macro structures hung require expensive higher order treatment discussed 
order fixpoints homogeneous fixpoints case homogeneous regular problems regarded common core regular fixpoint computations 
consists determination fixpoint single block 
indicated previous section computation performed counter array successively decrementing counters fixpoint reached 
process steered worklist contains components counters currently known require decrement 
worklist updated adding influenced components counter zero indicates change corresponding boolean value 
hierarchical fixpoints blocks sequentially computed order indicated block graph 
fixpoint computation blocks identical homogeneous case 
noted counters block initialized immediately fixpoint computation 
necessary order capture effects earlier fixpoint computations 
alternating fixpoints blocks treated exactly homogeneous case 
contrast previous cases computation repeated changes blocks different parity higher hierarchy strongly connected component 
detailed description procedure complicated cf 
omitted 
second order higher order fixpoints structurally fixpoint computations follow exactly lines order case 
domain value array components second order determining properties states considered systems determine property transformers certain classes states consequence counter optimization applicable 
alternating case open problem straightforward extension second order domains computes intended values 
hope experimenting machine help clarifying point 
essence algorithm deciding alternation free modal mu calculus context free processes processes terms contextfree grammar apparent viewing processes mutually recursive systems regular processes 
case regular component processes contain call transitions labelled name called component process 
algorithm works directly procedural process representation 
heart computation property transformers telling properties formulas valid nodes component process depending properties considered valid termination component process 
subsequent decision step completing model checking procedure straightforward 
see bust bust details 
complexity resulting algorithm linear size system representation exponential size property 
quite promising practically relevant problems composed small properties bitvector analyses common data flow analysis exponent 
implementation performances prototype fixpoint analysis machine implemented part meta frame macs environment development heterogeneous analysis verification tools currently runs sun sparcstation unix 
order give impression performance gain report series examples 
series deals verification hierarchical properties increasing size versions milner scheduler growing numbers agents considering labels call transitions nonterminals labels terminals establishes formal match context free processes 
conjunctions basic property 
scheduler 
scheduler 
scheduler fig 

scheduler performance gain 

schedulers represented regular models investigated properties checked hierarchical fixpoint analysis 
get indication impact property size checked increasing number conjunctions basic property expressing aspects alternating behaviour cells 
graphically demonstrates performance gain comparing runtime results fam analysis machine conventional model checker cmc 
initially gain rises quickly properties increasing size asymptotically approximates constant factors schedulers agents 
shows individual runtime results various properties schedulers 
scheduler agents detail total time sum time partial evaluation configuration config analysis 
observes higher analysis share total runtime higher performance gain analysis machine initial partial evaluation configuration machine better exploited considered problems hard sense requiring high computation effort compared initialization phase 
furthermore higher branching factors larger schedulers favour analysis machine determines models successor information partial evaluation step prior actual fixpoint analysis 
second series examples checks property alternation depth different parameters modal operators sequence regular models increasing size cf 

modal property expresses atomic proposition holds infinitely fa cg paths 
assuming transitions labeled fa cg true state states reach loop satisfy model states property conjuncts scheduler cmc config 
states analysis trans total fam part eval 
config 
analysis total perform 
gain scheduler cmc total states fam total trans perform 
gain scheduler cmc total states fam total trans perform 
gain table 
runtime results 

nx nx fig 

model property alternating fixpoint analysis 
need recomputations inner minimal fixpoint reach solution 
shows runtime results analysis machine fam conventional model checker cmc 
analysis time increases larger models performance gain constant fixed property 
due fact initialization phase 
fact partial evaluation configuration takes time 
modalities concern possible transitions analysis machine outperforms conventional model checker factor 
soon modality parameterization explicitly analysis machine outperforms conventional model checker factor 
due fact alternating fixpoint analysis requires backtracking resetting recomputation intermediate results 
costly selection successors interest analysis machine partial evaluation step prior fixpoint computation fixpoint analysis nearly takes runtime case 
index modal operator fa cg cmc states fam trans performance gain cmc states fam trans performance gain cmc states fam trans performance gain table 
runtime results alternating fixpoints 
series examples compared analysis machine conventional model checker variety applications 
performance gains differ complexity fixpoint problem 
data flow analysis example achieve factors problems require simple hierarchical homogeneous fixpoint computations cf 

partial evaluation specific machine configuration hardly exploited 
worst cases managed half computation time 
hand performance gains high computation intensive problems requiring alternating fixpoint analysis 
fixpoint analysis machine allows efficient computation homogeneous hierarchical alternating fixpoints regular context free push macro models covering applications reach intra interprocedural data flow analysis model checking various temporal logics verification behavioural relations distributed systems 
turned fixpoint analysis machine identifies adequate parameterized level uniform treatment problems despite uniformity outperforms iteration special purpose tools factors additional compilation time taken account 
hope performance conceptual structure machine help improve understanding complex fixpoint problems second order model checking alternating formulas 
strongly influenced collaboration intensive discussion olaf gerald luttgen oliver 
implementation embedding system meta frame strongly supported carsten friedrich dirk 
ande andersen model checking boolean graphs proc 
esop lncs springer verlag 
bryant graph algorithm boolean function manipulation ieee trans 
computers vol 
pp 

bust steffen model checking context free processes proc 
concur stony brook nj august lncs pp 
springer verlag 
bust steffen pushdown processes parallel composition model checking proc 
concur stockholm sweden august lncs pp 
springer verlag 
cleaveland klein steffen faster model checking modal mu calculus proc 
cav montreal canada lncs pp 
springer 
cleaveland steffen linear time model checking algorithm alternation free modal mu calculus proc 
cav aalborg denmark july lncs pp springer cleaveland steffen computing behavioural relations logically proc 
icalp spain aug lncs springer emerson 
lei efficient model checking fragments propositional mu calculus proc 
lics ieee computer society press pp 

knoop luttgen steffen chaotic fixed point iterations tech 
rep mip university passau germany 
hecht flow analysis computer programs elsevier north holland 
hung model checking macro processes proc 
cav palo alto ca june lncs springer pp 
knoop optimal interprocedural program optimization new framework application phd thesis dep 
computer science univ kiel germany 
appear lncs monograph springer knoop steffen lazy code motion proc 
pldi conference san francisco ca june acm sigplan notices vol pp 

knoop steffen tool kit constructing optimal interprocedural data flow analyses fakultat fur mathematik und informatik univ passau germany mip bericht nr 

knoop steffen interprocedural coincidence theorem proc 
cc paderborn germany lncs pp 
springer 
knoop steffen efficient optimal bit vector data flow analyses uniform interprocedural framework inst 
fur informatik und praktische mathematik universitat kiel germany bericht nr 

lars larsen efficient local correctness checking proc 
cav montreal lncs pp 
springer macs margaria cla en steffen computer aided tool synthesis meta frame 
gi itg workshop anwendung methoden beim entwurf von passau germany march pp 
shaker verlag 
milner communication concurrency prentice hall 
muller schupp theory ends pushdown automata second order logic tcs pp 

steffen freitag cla en margaria intelligent software synthesis environment proc 
th nordic workshop programming theory aarhus denmark october brics report december pp 
steffen margaria cla en meta frame environment flexible tool management proc 
tapsoft aarhus denmark may lncs 
steffen characteristic formulae proc 
icalp italy lncs springer verlag 
steffen data flow analysis model checking proc 
tacs sendai japan lncs pp 
springer 
steffen generating data flow analysis algorithms modal specifications science computer programming pp 
steffen finite model checking invited talk proc 
th nordic workshop programming theory aarhus denmark october brics report december pp 

steffen ing characteristic formulae finite state processes information computation vol 

tarski lattice theoretical fixpoint theorem applications pacific journal mathematics 
article processed macro package llncs style 
