lecture notes computer science springer verlag proceedings th international workshop languages compilers parallel computing flow insensitive interprocedural alias analysis presence pointers michael burke paul carini jong deok choi ibm watson research center michael hind state university new york new paltz ibm watson research center 
data flow analysis algorithms classified categories flow sensitive flow insensitive 
improve efficiency interprocedural analyses intraprocedural control flow information associated individual procedures 
pointer induced aliases change procedure applying known flow insensitive analyses result incorrect overly conservative solutions 
flow insensitive dataflow analysis algorithm computes interprocedural pointer induced aliases 
improve precision analysis making certain types kill information precomputed efficiently computing aliases generated procedure holding exit procedure 
improve efficiency algorithm introducing technique called deferred evaluation 
interprocedural analyses including alias analysis rely program call graph pcg correctness precision 
pcg incomplete overly imprecise presence function pointers 
describes method constructing pcg presence function pointers 
data flow analysis computes information potential behavior program terms definitions uses data objects 
data flow information important providing compiler run time support parallel execution programs originally written sequential languages 
important compilers programming environment tools 
data flow analysis programs written languages static data structures arrays fortran enjoys numerous techniques developed 
data flow analysis programs written languages dynamically allocated data structures lisp fortran successful due pointer induced aliasing 
aliasing occurs exists access path storage location 
access paths value expressions constructed variables pointer indirection operators structure field selection operators 
expressions include indirection operator gamma field select operators 
access paths aliases statement refer storage location execution instances access paths may aliases refer storage location execution instances addresses computation may aliases aliases subset 
refer may aliases aliases meaning clear context 
example consider statement 
statement executed refer storage location aliases express alias relation 
denote alias relations holding statement placing line statement 
flow sensitive flow insensitive 



















fig 

example program segment aliases data flow analysis algorithms classified categories flow insensitive 
flow sensitive algorithms consider intraprocedural control flow information analysis general precise flow insensitive algorithms 
flow insensitive algorithms intraprocedural control flow information analysis 
efficient flow sensitive algorithms primarily class problems flow sensitive algorithms provide increased precision 
exists range trade offs efficiency precision 
flow insensitive analysis improve efficiency potential cost precision class problems flow sensitive analysis yield better precision 
pointer induced aliasing problem class 
flow insensitive interprocedural algorithm computes may aliases presence general pointers languages lisp fortran provide information comparable precision flow sensitive analyses 
algorithm implemented fortran research prototype general framework analysis described algorithmic elaborations 
method constructing program call graph pcg presence function pointers 
method accommodates function pointers precisely efficiently framework pointer induced alias analysis 
applicable flow sensitive flow insensitive frameworks computing aliases 
consider example illustrates major difference flow sensitive flow insensitive analyses 
assume aliases hold modify pointer variables 
flow sensitive analysis compute alias relations holding immediately intraprocedural control information flow insensitive analysis distinguish execution order statements procedure 
shown third column compute aliases holding point procedure procedure entry 
example shows pointer induced aliasing flow sensitive analysis provide better precision flow insensitive analysis 
difference precision analyses negligible certain programs 
consider effect statement 
exclude statement alias relations computed hold immediately flow sensitive flow insensitive analysis 
branches loops tend diminish difference precision analyses 
flow sensitive analysis produces large number alias relations flow insensitive analysis provide efficient alternative 
notice assignment kills alias relations arriving flow sensitive analysis kill information computing alias relations holding possible determine nodes follow control flow information 
section show improve precision flow insensitive analysis incurring full overhead flow sensitive interprocedural analysis making certain types kill information computed efficiently 
correctness precision interprocedural data flow analyses pcg 
illustrates pcg example program segment nodes represent procedures edges represent call sites 
presence function pointers parameters pcg program incomplete resulting incorrect overly conservative analysis 
call site illustrates occur 
precise knowledge aliases pcg edge inserted pcg node correctness 
method constructs pcg program presence function pointers precisely include alias relation holding inferred alias relations holding section 
efficiently framework pointer induced alias analysis 
precision method precision underlying pointer induced alias analysis method 
sub sub sub int sub 
sub sub 
sub sub 
sub sub sub 
fig 

example program segment pcg rest organized follows 
section defines terminology describes background context 
section describes framework flow insensitive interprocedural analysis pointer induced aliasing 
section gives details concerning intraprocedural component analysis 
deferred evaluation show reduce number statements considered iteration step intraprocedural component 
section describes accommodate function pointers framework alias analysis 
section compares section draws 
background ignore computation static aliases occur due union construct fortran equivalence statement 
static aliases change program computed front compiler 
focus computing pointer induced aliasing ignoring parameters call value copy copy 
complete discussions interactions parameters pointer induced aliasing 
fig 

example alias graph pointer induced alias relations determine directed graph called alias graph shown implies de referencing edge object object likewise implies exists object edge method assumes memory location referenced dereferenced unique name 
named object participates pointer aliased relation associated single node directed graph 
proposed method naming dynamically allocated objects malloc sites naming method may employed 
exhaustive list aliases holding example 
notice inferred 
corresponds transitive reduction directed graph 
compact representation utilize pointer induced alias analysis method combines techniques reduce size alias sets 
discards alias pairs named object involve level dereferencing 
representation enables deferred evaluation intraprocedural component flow insensitive analysis 
discussion technique provided section 
tradeoffs representation exhaustive approach discussed 
flow insensitive interprocedural alias analysis improve efficiency flow insensitive analysis rely intraprocedural control flow information 
effects procedure captured summarized form associated node edge pcg 
computation pointer induced aliasing information directly generated node dependent statements procedure information propagated pcg edges node 
determine direct effects procedure interprocedural information 
set pointer assignment statements procedure associated node 
effect alias information computed analysis 
information describing parameters passed call site associated edge 
information input flow insensitive interprocedural alias analysis computes pgen set alias relations generated invocation procedure procedure program 
approach differs previous approaches flow sensitive analysis summarize alias information procedure capturing holds exit procedure 
summarized procedure information flow insensitive analysis set aliases hold exit procedure alias information propagated unrealizable control paths 
advantage approach flow insensitive analysis aliases generated procedure propagated back call site invokes procedure 
example aliases propagated sub sub propagated killed sub call site sub call site sub yielding conservative information 
approach aliases generated sub propagated back sub 
entirely eliminate unrealizable control path problem aliases generated procedure depend aliases hold procedure 
section provides details 
techniques handle problem incorporated algorithm handle indirect effects refine precision 
addition pgen compute sets entry set alias relations hold entry procedure holds set alias relations presumed hold point entry set alias relations generated pointer assignment statements procedure set alias relations generated call sites procedure section describe relationship sets provide set data flow equations representing relationship 
classify sets manner information propagated computing 
categories sets exist interprocedural entry intraprocedural holds pgen 
entry represents alias information holds entry captured propagating alias information holds call site forward corresponding pcg edge 
information unioned alias information propagated call sites invoke represents alias information generated call sites information computed propagating pgen procedures called backward corresponding pcg edges 
information propagated forward backward pcg edges pointer induced aliasing pcg bi directional problem 
flow sensitive analyses kill information reduce size alias sets propagated forward backward pcg edges procedure 
section describe improve precision interprocedural sets selectively utilizing kill information incurring full overhead flow sensitive interprocedural analysis 
overview algorithm shows high level description algorithm interprocedural alias analysis 
major characteristic algorithm interleaving intraprocedural steps interprocedural phases steps 
phase followed uses results previous phase input 
intraprocedural phase flow sensitive flow insensitive 
algorithm flow insensitive 
interleaving removes regard storage allocation deallocation statements pointers malloc free pointer assignment statements 
presence pcg cycles topological order defined removal back edges 
foreach procedure pcg set entry stat ic aliases set fg build initial pcg repeat foreach procedure pcg compute intraprocedural alias sets interprocedural alias sets foreach procedure pcg compute interprocedural alias sets intraprocedural alias sets aliasing converges fig 

algorithm compute interprocedural aliasing requirement iterations alternate topological directions solving bi directional problem 
interleaving paradigm similar previous flow sensitive analysis interprocedural aliasing 
intraprocedural phase intraprocedural sets computed procedure pgen holds computing intraprocedural sets interprocedural sets entry computed previous interprocedural phase 
computing interprocedural sets turn uses intraprocedural sets computed previous intraprocedural phase 
iterations pcg steps handle mutual dependence inter intraprocedural sets 
basic algorithm enhanced number ways 
interprocedural computation steps incorporated intraprocedural phase 
accomplished performing update interprocedural information procedure step soon relevant intraprocedural information computed enhancement topological traversal pcg generally efficient visiting procedures arbitrary order 
iterative algorithm implemented worklist improve efficiency 
sections describe compute interprocedural intraprocedural sets 
descriptions require modifications incorporate enhancements described 
alternating iterations topological reverse topological order may improve efficiency 
interprocedural phase intraprocedural sets computed interprocedural sets computed follows entry call site calls pgen calls call site entry computed propagating information call sites maps set alias relations holding call site referred alias relations holding called routine arguments flow insensitive analysis call site holds similar maps alias relations holding called routine alias relations holding immediately call site arguments 
details mapping mechanisms 
intraprocedural phase interprocedural sets computed intraprocedural sets computed solving equations holds entry holds statement ptr 
assignment pgen cyclic dependences equations require iteration set pointer assignment statements flow insensitive analysis control flow information correctness reflect possible paths constructed set statements associated treat procedure single potentially large loop consisting pointer assignment statements procedure arbitrary order 
illustrates technique 
control flow graph left represents original program 
graph middle illustrates manner capture effect possible paths 
order statements chosen graph arbitrary example worst possible order 
total iterations required construct alias relations result graph 
specifies intraprocedural algorithm 
initially assume aliases reach interprocedurally entry holds 
assume empty 
loop traverses pointer assignment statement adding alias relations generated statement entry entry entry fig 

intraprocedural example holds sets procedure interest 
aliases generated depend holds traversal repeated new aliases generated 
note computing pgen part iteration pgen computed convergence 
kill information considered method equivalent considering possible paths 
section describes identify certain types pointer assignment statements need considered iteration steps 
holds entry fg repeat foreach pointer assignment statement compute set holds add holds aliasing converges pgen fig 

intraprocedural algorithm effect pointer assignment statement aliasing described terms alias transfer function tf follows tf aliases holding immediately respectively 
equation derived tf flow insensitive analysis holds alias information assumed hold point including immediately fixed point reached equation satisfied holds holds tf holds kill information section describe improve interprocedural precision utilizing precomputed kill information 
consider procedure calls procedure assumed values entry provided 
equation alias relations propagated entry hold discussion holds 

entry 





fig 

example correct improve precision solution selectively kill information limit alias relations propagated interprocedurally 
adopt approach defining call site contained procedure represents alias relations killed paths entry point remove alias relations entry factor aliases generated correctness computing aliases propagated example 
propagated 
give updated equation entry equation section 
addition kill information expanded 
entry entry gamma call site located calls computation performed interprocedural propagation needed 
allows interprocedural algorithm remain flow insensitive control flow information required propagation 
pointer variable killed appears indirection operations left side assignment statement malloc free function call 
killing pointer variable indirection requires alias information kill information kind statement alias information required 
analogous manner technique improve precision information backward pcg propagation 
information interprocedurally propagated called routine calling routine call site improve precision set define set call site represent alias relations killed paths exit node set constructing pgen removing alias relations killed call 
aliases generated included pgen correctness 
give updated equation pgen equation section 
divide call site components allow addition kill information 
pgen gamma gives example information improves precision pgen kill information pgen 

new equation pgen get pgen 

computed preprocessing step flow insensitive iteration pcg begun 
spectrum killing criteria amount control flow information required employed computing sets 
computation kill dominator trees described 
possible broaden definition improve precision allowing user function calls kill pointer variables 
deferred evaluation section describes capture effect possible intraprocedural paths treating procedure single loop consisting statements procedure arbitrary order 
section improve efficiency intraprocedural phase identifying certain types pointer assignments need considered intraprocedural iteration 
example consider statements 
alias relations generated statements computed independently alias relations hold executing statements need included iteration 
statements constant set contribute procedure set depend aliases hold 
statements constant set treated information alias relations generate precomputed prior interprocedural propagation 
enhancement reduces number intraprocedural iterations required convergence 
determining alias relations generated statements requires information alias relations holding statements 
statement aliases required 
particular holds create alias relation 
statement requires aliases create alias relations 

holds 
appears types statements included intraprocedural iteration 
aliases generated statement dereference component known furthermore source node edges represent aliases alias graph 
algorithm able defer evaluation statement intraprocedural iteration completed aliases known 
accomplished creating deferred alias relation deferred value 
signifies aliased objects reach path length alias graph 
aliases required iteration infer alias relations deferred alias relation represents 
example represents edges points 
statement remains intraprocedural iteration 
procedure contain statements type intraprocedural iteration required 
intraprocedural iteration completed deferred alias relations expanded full alias relations loss precision 
refer approach deferred evaluation 
shows example program processed deferred evaluation 
notice statement contained loop iteration required aliasing converge 
com case exhaustive representations assuming holds include 
holding considering favorably original analysis iterations required convergence 
see details 
generalize previous example classifying pointer assignment statements categories listed 
type statements constant function processed 
type statements create deferred alias relations deferred value performed iteration expanded iteration converges 
iterate type statements 
type type type gamma gamma equivalent summarize enhanced intraprocedural algorithm deferred evaluation 
algorithm decreases number pointer assignment statements considered considering statements expanding deferred alias relations reduces number statements considered intraprocedural iteration reduce number iterations required convergence phase 
precision lost technique 

add alias relations type statements 
create deferred alias relations type statements 
iterate type statements 
expand deferred alias relations incremental analysis function pointers section describe method constructing pcg presence function parameters variables pointers 
method accommodates function parameters arbitrary levels function pointers framework pointer induced aliasing 
embedded alias analysis generally occurs phases need pcg method incurs minimal overhead 
focus flow insensitive analysis techniques described section accommodate function pointers applied flow sensitive analysis 
term function pointers refer function parameters function variables function pointers 
likewise regular pointers refer pointers function pointers 
recall interleaving intraprocedural steps interprocedural phases steps 
interleaving phases algorithm particularly suited accommodating function pointers incremental interprocedural data flow analysis 
incremental data flow analysis addresses issue updating data flow information full recomputation part program changed 
case program change graphical representation pcg changes analysis proceeds 
changes representation program warrant incremental analysis efficiency 
incremental alias analysis presence function pointers achieved handling function pointers way regular pointers intraprocedural phase analysis steps identifying new pcg edges alias information computation proceeds 
way method compute aliasing scratch new pcg edges 
adds new edges construct new pcg incrementally continues alias computation alias information computed previous pcg initial condition 
formally amounts computing additional interprocedural set procedures set aliases function pointer fp invoked call site follows proc 
proc invoked cg algorithm incrementally updates pcg newly added edges identified steps performed step interprocedural phase 
alias analysis generally occurs phases need pcg embedded pcg construction incur minimal overhead 
applied function pointers algorithm constructs pcg incurring overhead full alias analysis 
way general method construct pcg independently data flow analysis alias analysis regular pointers described 
details provided 
related larus gives flow insensitive intraprocedural algorithm compute aliases lisp programs 
algorithm uses alias graphs similar serve values propagated solve data flow equations representations statements effects propagated values 
uses closure technique graham wegman correctly process alias graphs 
flow sensitive interprocedural algorithms pointer induced aliases :10.1.1.25.6013
utilize kill information provide improved precision flow insensitive analysis utilize kill information analysis 
flow insensitive algorithm utilizes precomputed kill information improve interprocedural precision 
complete discussions interactions parameters pointer induced aliasing 
fp function parameter variable required 
framework flow insensitive interprocedural analysis pointer induced aliasing described algorithmic elaborations 
algorithm described framework 
methods constructing pcg presence function parameters function variables 
method accommodates function parameters arbitrary levels function pointers 
general methods constructing pcg presence function parameters function variables 
framework pointer induced aliasing precise weihl method performs transitive closure alias relations 
emami ghiya hendren independently proposed algorithm similar constructing pcg programming model consider 
similar problem constructing pcg performing control flow analysis functional languages functions class objects 
solutions problem hall kennedy suggested method similar lakhotia method improve weihl approach 
lakhotia performs interprocedural constant propagation analysis system dependence graph 
believe method handling label variables easily incorporated algorithm 
algorithm easily extended list done 
extended build interprocedural control flow graph icfg pcg 
flow insensitive algorithm computes interprocedural pointer induced aliases 
enhance precision interprocedural phase algorithm utilizing precomputed kill information computing aliases generated procedure aliases holding exit procedure 
preserve correctness intraprocedural phase algorithm iterating statements dependent current alias relations 
technique called deferred evaluation introduced improve efficiency intraprocedural phase identifying class pointer assignment statements excluded intraprocedural iteration 
method constructing pcg presence function pointers 
method applied flow sensitive flow insensitive analysis 
uses incremental analysis alias analysis framework 
flow insensitive alias analysis algorithm implemented fortran research prototype 
plan measure efficiency precision algorithms fortran programs 
referees helpful comments careful proofreading 

aho garey ullman 
transitive reduction directed graph 
siam journal computing 

frances allen michael burke philippe charles ron cytron jeanne ferrante 
overview analysis system multiprocessing 
proceedings acm international conference supercomputing 
published journal parallel distributed computing oct pages 

randy allen david callahan ken kennedy 
automatic decomposition scientific programs parallel execution 
conference record fourteenth annual acm symposium principles programming languages pages january 

john banning 
efficient way find side effects procedure calls aliases variables 
th annual acm symposium principles programming languages pages january 

michael burke 
interval approach exhaustive incremental interprocedural data flow analysis 
technical report ibm research august 
report rc 

michael burke 
interval approach exhaustive incremental interprocedural data flow analysis 
acm transactions programming languages systems july 

michael burke paul carini jong deok choi michael hind 
efficient alias analysis presence pointers 
technical report rc ibm watson research center september 

callahan carle hall kennedy 
constructing procedure call multigraph 
ieee transactions software engineering april 

jong deok choi michael burke paul carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
conference record twentieth annual acm symposium principles programming languages january 

jong deok choi jeanne ferrante 
static slicing presence goto statements 
acm transactions programming languages systems 
appear 

alain deutsch 
determining lifetime aliasing dynamically allocated data higher order functional specifications 
th annual acm symposium principles programming languages pages san francisco january 
acm press 

alain deutsch 
interprocedural may alias analysis pointers limiting 
sigplan conference programming language design implementation 

emami rakesh ghiya laurie hendren 
context sensitive interprocedural points analysis presence function pointers 
sigplan conference programming language design implementation 

dennis gannon vincent jr lee 
static analysis runtime support parallel execution proceedings second workshop languages compilers parallel computing august 

susan graham mark wegman 
fast usually linear algorithm global flow analysis 
journal association computing machinery january 

mary hall ken kennedy 
efficient call graph analysis 
acm letters programming languages systems september 

mary harrold mary lou soffa 
efficient computation interprocedural definition chains 
acm transactions programming languages systems march 

susan horwitz thomas reps david binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 

harrison iii 
interprocedural analysis automatic parallelisation scheme programs 
lisp symbolic computation october 

john kam jeffrey ullman 
global data flow analysis iterative algorithms 
jacm january 

kennedy mckinley tseng 
interactive parallel programming editor 
ieee transactions parallel distributed systems july 

arun lakhotia 
constructing call multigraphs dependence graphs 
th annual acm sigact sigplan symposium principles programming languages pages 
acm january 

william landi barbara ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 

larus hilfinger 
detecting conflicts structure accesses 
proceedings acm sigplan conference programming language design implementation july 

james richard larus 
restructuring symbolic programs concurrent execution multiprocessors 
phd thesis university california 
technical report 
ucb csd 

marlowe ryder 
efficient hybrid algorithm incremental data flow analysis 
th annual acm symposium principles programming languages pages january 

thomas marlowe william landi barbara ryder jong deok choi michael burke paul carini 
pointer induced aliasing clarification 
sigplan notices september 

marlowe ryder burke 
defining flow sensitivity data flow problems 
preparation 

torben ae mogensen 
binding time analysis polymorphically typed higher order languages 
proceedings tapsoft volume lecture notes computer science pages 
springer verlag 

panangaden demers 
effect analysis higher order languages 
international journal parallel programming 

barbara ryder 
constructing call graph program 
ieee software engineering may 

peter sestoft 
replacing function parameters global variables 
conference functional programming languages computer architecture pages london september 
acm press 

olin shivers 
control flow analysis scheme 
sigplan conference programming language design implementation pages june 

william weihl 
interprocedural data flow analysis presence pointer procedure variables label variables 
conf 
rec 
seventh acm symposium principles programming languages 
article processed macro package llncs style 
