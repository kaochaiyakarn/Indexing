automatic definition modular neural networks fr ed eric gruau mailing stanford university psychology department ca usa gruau cs colostate edu affiliations centre etude nucl de grenoble ecole normale sup erieure de lyon colorado state university epartement de recherche laboratoire de informatique computer science department ere ee du parall ee fort collins rue des grenoble lyon cedex france usa january illustrates artificial developmental system computationally efficient technique automatic generation complex artificial neural networks ann 
artificial developmental system develop graph grammar modular ann combination simple subnetworks 
genetic algorithm evolve coded grammars generates anns controlling legged robot locomotion 
mechanism automatic definition sub neural networks incorporated 
mechanism genetic algorithm automatically decompose problem subproblems generate solving subproblem instantiate copies build higher level ann solves problem 
report simulation results showing problem solved mechanism automatic definition sub networks suppressed 
support argumentation pictures describing steps development ann structures evolved anns compute 
keywords animats cellular encoding modularity locomotion automatic sub neural networks 
background animat simulated animal real robot rules behavior inspired animals 
usually equipped sensors actuators behavioral control architecture allows control respond variation environment 
compact review animats meyer 
animat hypothesis intelligent behavior emerge interaction agent internal control mechanisms external environment 
highest cognitive abilities man depend evolution simplest cognitive adaptive behavior animals brook 
natural behavior animals amazingly adapted environment embedded 
achieve adaptation animals endowed nervous system dynamic coupled dynamic environment animals engage behavior necessary survival 
complementary processes contribute synthesis optimization animal nervous system ffl natural evolution takes place years 
contributes genetic code 
complex developmental process genetic code translated nervous system 
ffl learning takes place life time 
tunes nervous system particular environment encountered animal 
function biological developmental process nature uses biological developmental process transform genetic code nervous system 
developmental process cells divide genetic information 
allows encodes incredibly complex systems compact code 
example human brain contains neurons average connections 
graph connections encoded list destinations neuron require ln bits 
number genes order numbers differs orders magnitude 
developmental process achieve compression 
conjecture mechanism similar modern programming language 
writing compact computer program languages done hierarchy procedures 
procedure defined single time called times 
procedure corresponds sub neural net encoded single time specific part genetic code 
development specific part read different cells develop copies sub neural net 
refer property modularity 
conjecture implies prediction neural networks encoded modular way lot regularities 
able identify neural structures repeated times 
part brain responsible low level vision contains general structures hubel wiesel 
example regularity nervous system responsible locomotion legged american 
architecture discovered pearson described beer 
similar subnetworks coupled inhibitory connections 
subnetwork controls leg 
motivation term adaptive behavior show simple computer model biological developmental process allow generate regular artificial neural networks controlling animats 
artificial developmental systems artificial neural network ann graph simple computing elements called units model biological neuron nervous system 
architecture specifies graph interconnections connection weighted 
anns widely control animats 
computer equivalent learning method tuning ann weights gradient descent 
weights slightly modified epochs 
learning optimize ann weights fixed architecture 
frequently evolutionary algorithms optimize ann architecture cliff harvey husband 
new emerging field attempts encode anns inspiration biological developmental 
idea indirectly represent ann evolutionary algorithm evolve high level representations computational problem solving animat simulations 
directly describing graph data structure list connections unit unit artificial developmental system describes build ann applying rules cell division 
starting single cell artificial developmental system develops graph cells repeated applications development rules 
development finished graph cells interpreted ann 
survey proposed artificial developmental systems meyer 
system rules modeled formal grammar different approaches classified depending particular kind formal grammars involved 
review matrix grammars geometrical grammars parallel string grammars graph grammars 
artificial developmental systems traced back sharp alpert kitano proposed examples evolving formal grammars context 
idea high level representation grammar implementations involve cell division matrix grammars 
drawbacks gruau 
theta matrix developed ann neurons smallest power bigger order get acyclic graph feed forward ann consider upper right triangle matrix decreases efficiency encoding 
different models proposed parisi nolfi belew dellaert beer classified geometric grammars 
object undergoes division point discrete dimensional space 
approach biologically relevant biological developmental process takes place space 
result realistic effects growth neuron axon dendrite modeled 
context sensitive rules model environmental effects bouncing obstacles growth 
belew approach suggests geometrical grammar best represented implemented dimensional cellular automata 
dellaert beer particularly clear simple model developmental process allows simulation computer 
approaches targeted modeling biology exploiting artificial developmental system engineering 
kitano problems solved geometrical grammar solved easily hand boer kuiper parallel context sensitive string grammar known system operate bracketed expressions 
systems prusinkiewicz lindenmayer proposed model growth plant trees 
natural computer data structure ann graph tree 
order produce graph boer kuiper obliged complex interpretation bracketed expression additional symbols 
knowledge boer kuiper demonstrated efficiency coding non trivial problem xor 
sims sims proposes model body structure segments developed ann encoded direct encoding segment 
complete ann built connecting ann segment 
animats true ann generated generated hand easy 
beer wrote book chapter took author succeed 
walk swim jump 
body expressed tree structure developmental system system model 
sims encodes grammar recursive graph 
sims system effective generating locomotion behavior 
proposed graph grammars efficient way encode graphs gruau 
method called cellular encoding models cell division cell just node graph 
implemented neural compiler called jannet gruau compiles pascal program cellular code ann simulates pascal program 
jannet demonstrates expressive power cellular encoding 
proved theoretical properties cellular encoding gruau completeness compactness closure modularity scalability 
example compactness proved cellular encoding compact methods 
wants artificial developmental system problem solving important prove theoretical properties underlying encoding just computer simulations 
gives hint evolutionary algorithm going successful exploring space codes complex problems solved interesting behavior observed 
exploiting modularity unique property developmental process modularity 
modularity sub ann encoded single time copied times results compact representation 
model developmental process proposed sims indirectly generates modular anns developing modular physical body segments repeated recursively 
segment contains sub ann specifies connect sub ann sub anns segments 
repeated segments contain sub ann resulting architecture modular 
demonstrate modularity cellular encoding developmental process 
cellular encoding may general sim approach ann needs embedded physical body 
generate anns solving arbitrary problem locomotion 
cellular encoding artificial developmental system generate modular anns exploit regularity problem 
gruau gruau whitley cellular encoding evolutionary algorithm able generate recursive graph grammars cellular codes develop families arbitrarily large anns computing boolean functions parity symmetry decoder arbitrary large number inputs 
knowledge particular problems solved automatic methods 
cellular encoding allows control recursive development precise way exactly loops rules recursive grammar 
ann computes boolean function inputs copies sub network case decoder 
cellular code specifies homogeneous way subnetwork put copies 
cellular encoding especially fits boolean functions possible functions define regular ann architectures simple units sigma weights boolean activities 
functions ideal initial benchmark artificial developmental system optimal architectures known comparison 
general boolean functions need regularities 
new problem know regular happen expect cellular encoding efficient problem solve certain amount regularity decomposed hierarchy sub problems 
problems lot regularities 
method solve realistic problem genetic synthesis ann locomotion legged animat 
problem regularity exploited artificial developmental system 
beer proposed model ann copies subnetwork controls leg 
connections subnetworks regular 
symmetries beer gallagher able collapse genetic code bit string parameters perform genetic synthesis ann 
solve problem help evolutionary algorithm knowledge symmetries 
artificial developmental system possible automatically find symmetries 
evolutionary algorithm decomposes problem subproblems generates subnetwork solving subproblem produces copies subnetwork build higher level ann solves problem 
fitness measure distance animal able move fixed amount time 
genome splicing define genome splicing general technique increase efficiency algorithm 
structures evolved sliced vector fixed number components 
crossover vectors components recombined 
component may refer components times 
computation function component may times 
genetic search involve particular kind genome splicing component vector encodes sub neural networks 
john koza uses particular kind genome splicing genetic programming ii 
component vector corresponds lisp function called times 
acknowledge idea technology genome slicing come koza 
genetic programming demonstrated koza koza way evolving computer programs ga original gp paradigm individuals population lisp expressions depicted graphically rooted point labeled trees ordered branches 
gp generally includes approaches language lisp including cellular encoding 
genome splicing called koza automatic definition function tree encodes automatically defined lisp function adf solution hierarchy functions call times 
call automatic definition sub neural networks adsn cellular encoding tree encodes sub neural network 
overview section describes model legged animat states problem going solve cellular encoding 
section precise particular model ann 
section describe cellular encoding 
parallel genetic algorithm described section 
important step ga define evaluation function 
done details section 
interesting possibility improve anns generated ga combining learning developmental process 
section describes learning 
results simulation reported section 
cellular encoding allows user see generated ann 
feature allow analyze pictorially ann produced ga search lead ga analysis done section non trivial animat problem model artificial legged insect described beer 
leg controller motor neurons state foot fs unit 
return stroke controlled rs unit 
power stroke ps unit 
order help coordination legs leg controller sensor unit records position leg 
foot internal state 
foot 
activity fs neuron positive foot pulled ground put ground 
takes time step move foot 
time step leg exert force 
takes account inertia leg induces selective pressure full range leg angle 
inertia trivial solution problem alternate power stroke return stroke time step 
force exerted ps rs unit subtracted 
foot resulting force update leg position relative body 
foot ground resulting force pushes animal backward forward depending sign 
due friction dragging leg exerts constant force pushing backward proportional speed robot 
global friction force pushing backward proportional speed robot 
time step sum forces exerted legs friction forces 
sum update speed robot 
center mass robot lies outside polygon formed feet robot falls speed drops zero 
speed update position robot joint angle legs 
precise algorithm update animat described appendix 
modification beer model discrete sensor neurons cruse dean 
sensor input units called anterior extreme position aep posterior extreme position pep 
aep activity maximum leg anterior extreme position 
pep activity maximum leg posterior extreme position 
got variety different gait multiple runs 
animat jump push leg time fall push legs move leg time 
produce tripod gait legs alternate tree 
choose parameters model tripod gait enabled robot cover maximum distance 
gait far difficult find range possible regular gaits 
needs computer time ga having fixed parameters way gaits local optima ga trapped 
considered simplified model foot automatically controlled 
rs unit activated foot foot put 
foot leg pulled back speed proportional rs activity 
ps unit activated foot foot put 
foot leg exerts force body proportional ps activity 
convention rs ps activated rs wins ps ignored 
think simplified problem benchmark ads easy solve directly hand realistic boolean functions internal regularity 
continuous noisy neural model solve problem locomotion legged robot ann able store internal state 
needs recurrent links 
activities neurons updated time continuous time update neurons activities advocated beer gallagher 
ffi gamma ffit ff gamma net input weighted sum neighbor activities minus threshold neuron time constant value hand coded neural network 
activities integers ranges gamma 
precisely represent sigmoid 
updated neuron activities times updating body state 
sigmoid neuron called model neuron particular symmetric leg position hand coded solution get stuck wrong attractor 
animat legs 
added random noise model 
time unit computes activity adds random number uniformly distributed gamma 
noise perturbed system wrong local attractor 
global attractor stable affected noise 
rhythmic activity legs switch rs ps vice versa ann state come near wrong attractor right attractor 
little noise allow sytem move wrong attractor right attractor 
network right attractor returns wrong attractor 
cellular encoding revisited cellular encoding method encoding artificial neural networks ann 
updated improved version cellular encoding compared gruau 
cellular encoding uses notion cells 
cell input site output site 
linked cells directed ordered links fan cell input site fan cell output site 
cell possesses list internal registers represent local memory store labels 
data structure ann directed labeled graph 
cell concept simplified provide needed describe directed labeled graph 
cellular code local graph transformations graph rewriting rules act cells 
growing number scientists working graph grammars graph grammar proceedings shown graph grammars powerful specifying complex objects compared traditional string grammars 
examples possible graph transformations cellular encoding represented 
picture represents initial graph cells 
composed central cell connected input neighbors output neighbors 
remaining pictures show effect different graph transformations acting central cell 
graph transformations classified cell divisions local topology transformations modifications weights 
ffl picture represent effect different cell divisions 
cell division replaces cell called mother cell cells called child cells 
imagine possible cell divisions depending way links mother cell inherited child cells 
links ordered possible refer link number 
picture number links represented 
sublist consecutive links specified number link number link sublist 
particular cell division implemented copying sublists links mother cell child cell 
cell division specifies child cells linked 
practical purposes give letter name graph transformation set letters set alleles genetic algorithm 
particular letters particular meaning 
division represented picture sequential division 
sequential division child cell inherits input links second child cell inherits output links child cell connected second child cell 
division represented picture parallel division 
child cells inherit input output links mother cell 
link duplicated 
child cells connected 
divisions canonical divisions simple divisions handle links uniform way independently position 
division input link number output link number duplicated 
picture represent possible effects cell division 
division symmetric respect inputs outputs 
allow cell inserted output input link number 
ffl picture represent graph transformations locally transform topology 
called adds recurrent link cell second called argument removes link number 
ffl remaining pictures describe graph transformations argument modify weights 
weight gamma represented dashed line 
value argument sets input link number gamma 
second argument sets output links starting gamma 
program symbols illustrated program symbol sets input weight value argument 
program symbol sets time constant neuron program symbols set sigmoids respectively threshold 
ff family piece wise linear functions takes values gammaff infinite negative value ff infinite positive value crosses origin 
choose particular set graph transformation set allows user provide hand coded solution 
development consists successive graph transformations graph cells causes grow ann 
order combine graph transformations cellular code ordered list labeled trees set grammatical rules 
example cellular code represented 
trees labeled names graph transformations called grammar trees 
cell carries duplicate copy cellular code set grammar trees internal register called reading head points particular position grammar tree 
step development cell executes graph transformation pointed reading head 
ann units cells terminated development lost reading head 
instructions called program symbols 
program symbols indicating cell division label nodes arity cell divides child cell goes read left sub tree second child cell goes read right sub tree 
program symbols indicating graph transformations label nodes arity transformation executed cell simply move reading head unique sub tree 
cells execute instructions piloting reading head instructions finish development produce ann unit 
step development reading heads move level tree come reach leaves 
reading head reads leaf tree events may happen 
ffl encounters program symbol finishes development 
cell considered ann unit distinct particular features 
ffl read program symbol argument number tree currently read cell moves reading head root grammar tree example program symbol moves reading head root grammar tree 
program symbol backtracks reading head root grammar tree currently read program symbol jumps grammar tree 
mechanism relative addresses 
step development cells execute program symbols 
order cells execute program symbols determined follows cell executed program symbol enters fifo queue 
cell execute head fifo queue 
cell divides child reads left subtree enters fifo queue 
order execution tries model happen cells active parallel 
ensures cell active twice cell active 
cases final configuration network depends order cells execute corresponding instructions 
waiting program symbol denoted effect cell wait rewriting step 
necessary cases development process controlled generating appropriate delays 
example example consider problem finding ann legged locomotion problem 
input units sensory inputs test position legs 
output units commands legs feet 
figures show development hand designed cellular code 
cell represented circle 
inside circle write name letter program symbol currently read reading head 
development neural net starts single cell called ancestor cell connected input pointer cell output pointer cell 
pointer cell represented square 
consider picture top left 
initially reading head ancestor cell located root tree reads program symbol 
registers initialized default values 
example threshold set 
cell repeatedly divides gives birth cells eventually units ann neural network 
input output pointer cells ancestor linked execute program symbol 
developmental process upper input pointer cell connected set input units lower output pointer cell connected set output units 
input output units created development added independently 
development complete pointer cells deleted replaced duplicate input output units shown picture lower right corner 
hand coded neural net oscillators coupled inhibitory connections 
oscillator controls leg 
inspired pearson model described beer 
modularity oscillator encoded single time tree number 
tree number encodes line leg controller half body 
tree number puts half bodies produce complete controller 
parallel genetic algorithm parallel genetic algorithm described gruau 
basis parallel implementation ga multiprocessor system divide population subpopulations allocate subpopulation processor 
processors send best solutions 
communications take place respect spatial structure population 
different models parallel gas investigated different spatial structures 
new model called mixed model combines stepping stone model isolating distance model 
advantages models combined 
local mating allows achieve high degree mates collins jefferson 
isolated islands help maintain genetic diversity 
mixed parallel ga individuals distributed islands 
islands form torus 
island mapped processor mimd machine 
processor send individuals processors store neighbor islands 
inside island individuals arranged grid 
spatial structure torus grids sites grid occupied 
density population kept 
means site occupied probability 
mating done follows site randomly chosen grid 
site successive random walks performed 
best individual random walks mated 
verification done ensure mates different 
offspring placed site scheme simulates isolating distance model sequentially processor 
migration rate parametrized single parameter 
ga steady state 
time new individual created built recombination individuals mean exchange 
exchange chosen probability called exchange rate fixed 
processor exchanges individual site selected border grid 
random walk starts site best individual sent processor border 
sent coordinate received coordinates read individual placed exactly site opposite mimd parallel machine ipsc processors 
node machine mips roughly sparc 
communications processor asynchronous overlapped computations 
communication cost null 
theoretical prediction confirmed experiments 
subpopulation processor individuals total population 
set alleles fs ng 
alleles correspond program symbols cellular explained section 
alleles initial random population created grammar trees equal fixed number nodes 
explained section program symbols argument 
example argument number link cut 
program symbols fc lg arguments 
arguments set random values 
ga applied genetic code develops neural net meeting termination criterion explained section allocated time hours elapse 
time offspring created alleles mutated small probability 
allele mutated replacing allele arity 
approaching generalization distributing fitness cases fitness ann problem legged locomotion robot average distance covered robot certain sample initial leg positions 
number input units output units evolved match number inputs outputs problem 
input output units initialize activity input units having high number ignore activity output units high number 
input lower part input vector filled upper undefined components output vector 
aim merely produce ann legged locomotion want ann general 
initial condition legs want robot perform tripod gait transient reasonable length 
experiments carefully test neural networks produced genetic algorithm ga possible initial positions leg legs initially anterior position aep posterior position pep 
tests ann generalize 
delicate tasks devise fitness measures robustness termination criterion 
mean fitness computationally expensive fitness reaches level assume solution acceptable genetic algorithm solution generalizes fitness cases 
test initial leg positions ann produced ga time consuming 
carefully selected fixed set difficult initial positions leg plus easy 
positions reported appendix 
ann may evaluated positions 
order proceed able walk threshold distance preceding 
time saved evaluation initial random position 
individuals better time spent evaluating 
termination criteria generate ann having performance hand coded solution positions 
threshold distance chosen distance walked hand coded solution multiplied 
individuals get fitness cases exceed threshold get sum fitness cases tried average 
individual pass threshold quickly take population 
introduces stages genetic search stage individuals able certain number fitness cases 
new stage population focus exploration precise region 
hand genetic diversity lost 
hand regions believed interesting explored thoroughly 
divided population sub populations gave different evaluation function sub population 
individual mate mainly sub population occasionally neighboring sub populations 
easy implement parallel ga runs processor parallel machine mating sub population means exchanging individuals 
function built follows choose position function number processor distance walked exceeds threshold distance choose particular initial position function number processor set tried 
sub population chooses initial positions particular sequence 
depending processor number 
sub population processor sequence stays fixed runs 
generation sub population concentrates initial positions 
different fitness functions 
anns walked passed threshold distance sub population begins learn anns walk starting different initial positions 
stage fitness functions 
maximum number fitness functions fitness processors grid dimensions 
adjacent processors initial leg position possible 
adjacent processors evolve different genetic material 
mating adjacent processors occurs new genetic material created 
different fitness functions solution ga passed generalization test success average evaluation time individual significantly different average evaluation time obtained single initial position 
furthermore multiple fitness principles enabled broader search space maintained genetic diversity 
sub population different goal mind led explore different parts search space 
intuitively power crossover creative process exploited recombining solution different niches 
stochastic hill climbing weights 
apply stochastic hill climber weights ann produced ga order speed genetic search 
deterministic hill climbing possible involve computer time due large number weight change try 
randomly choose weight modify random value gamma 
modify cellular code ann modified cellular code produces ann modified 
call back coding 
authors gruau whitley ackley littman considered techniques originates ideas back baldwin 
assume automatic definition subnetwork 
genome spliced trees 
tree number encodes subnetwork 
tree number encodes general structure network specify occurrence subnetwork include connect 
suppose back coding modifies tree number 
case back coding interesting side effect sub network instantiated final ann weight modification reproduced 
weight modifications separate parts ann recommend different back coding shared component genome random choice 
compute performance ann developed modified code 
compare performance performance hill climbing 
performance increases accept weight change 
accept weight change probability gamma single epoch hill climbing expensive 
context nearly doubles time fitness evaluation 
possible ways exploit information produced learning 
learning modifies fitness function forget back coded information generation 
called baldwin effect 
modification fitness done implicitly learning method increases fitness 
hinton nowlan hinton nowlan proposed effect learning fitness landscape easy climb 
alternative way transmit learned information offspring 
mechanism proposed 
biologically plausible lamarckian learning computer 
past results gruau whitley shown baldwin effect speed genetic search efficient way lamarckian learning 
preferred lamarckian learning stochastic hill climbing problem specific knowledge computation gradient 
case hill climbing seldom increases fitness 
probably useful remember successful weight change happens reproduced easily 
back coding done program symbols defined section 
different names order keep track information learn inherited lamarckian strategy 
simulation simplified model comparison runs adsn section report simulation results simpler problem legged locomotion feet need controlled 
experiments focussed showing interest genome splicing defined subsection 
kinds experiments comparative study 
kind genome consists single grammar tree crossover done exchanging sub trees 
second kind genome represented vector grammar trees 
cross done exchanging sub trees pairwise component tree 
subtrees exchanged cross 
subtree leaf grammar tree 
program symbol argument 
argument relative address moving reading head tree tree strictly higher number 
tree tree exist tree 
argument allowed recursion 
experiment adsn adsn exactly parameters difference run adsn initial population consisted individuals having nodes upper bound size trees nodes run adsn initial population consisted individuals having trees nodes upper bound nodes 
case genetic material number nodes initial population 
gave possibility grow grammar trees times nodes run adsn 
runs genetic material reused genetic material needed 
table ran trials adsn trials adsn 
program symbol sets time constant 
time constant defined equation chosen neurons 
stochastic hill climbing method described section 
runs robot learns generate oscillatory movements legs learns coordinate movements leg avoid falling 
adsn ga solution trials 
adsn solution run 
cases solution ga general ann produces tripod gait possible initial conditions legs average distance robot hand coded neural network 
table summarizes results runs 
speed produced adsn run adsn uses times fewer individuals 
numbers show average evaluation neural network takes twice time adsn 
adsn tends generate networks units subnetworks repeated times 
average networks generated adsn twice big 
reran experiment adsn stochastic hill climbing disabled 
result indicated fourth row table show learning produces speed 
show genotype adsn 
see genetic code adsn times bigger 
trials sufficient provide statistical information 
appears real difference runs adsn runs adsn analysis anns ga compare anns ga adsn simplified locomotion problem solved previous subsection 
hand coded solution encompasses subnetworks ann generated ga adsn subnetwork repeated times 
subnetwork controls legs 
contains neuron recurrent connection call lr acts latch register 
lr neuron inhibitory connections neuron inhibitory connection lr neuron adjacent controller 
gamma gamma resulting coupling lr neurons 
lr neurons controller connected pairs excitatory connections 
result controllers phase 
hand legs controlled controller anti phase 
ann ga units hand coded solution shown lower right corner 
solution units simplified problem units complete problem 
ga optimal size ann assume leg controlled distinct set neurons 
case needs obviously units leg controller 
ann shown evolved adsn structure 
impossible understand functions 
main reason perform experiments limited access parallel machine 
compute percentage alleles solution learned point evolution inherited lamarckian strategy 
proportion alleles trees particular alleles back coding 
alleles solution adsn come learning 
adsn percentage drops 
foot steps looks efficient longer strides efficient terms inertia legs 
axis represents time distance 
hand uses longer strides hand slower transition stride 
analysis ga run run ga produces files recording genetic code best far individual ga processor 
run program displays phenotype ann best solutions different stages search 
reports sequence ga run simplified model locomotion adsn 
provide useful insights ga proceeds builds anns 
periods general structure architecture remains careful scrutiny reveals connections changed 
changes mutation crossover leaves trees 
impact change genotype big change early development near root tree small late development near leaves tree 
periods deep change structure observed best individual 
due crossover near root tree receipt genetic material neighboring processors 
see species anns alternatively example generation 
adsn impact crossover mutation depends tree applied 
crossover tree changes global structure ann copies sub network included combined 
run adsn generation see marked transition general structure composed oscillators 
structure remain improved times structure takes generation 
new structure oscillators 
improvements oscillators structure leads solution satisfies termination criteria 
improvement operated simple pruning misleading weights 
old dream ga community able interactively watch evolution works 
graphics may step solution human eyes able detect repeated structure graphs bit strings labeled trees 
complete model beer gallagher comparison runs adsn second set experiments model described beer gallagher 
foot controlled foot motor unit 
ga simplified model time constant neuron genetically determined program symbol set time constant 
run trials adsn ga setting experiments simplified model 
report trials done 
trials tune parameters time consuming 
time limit hours population size processor 
ga successful times adsn find solution adsn 
results reported table 
solution ga represented 
hand coded solution generalized initial leg positions 
table comparison beer gallagher results beer gallagher fixed architecture ann 
subnetwork leg 
subnetworks similar intra segmental inter segmental connections similar 
ann subnetworks similar connections subnetworks 
shows subnetwork connected subnetwork 
figures drawn automatically freezing development cells executing program symbol 
program symbol includes subnetworks 
resulting graph called general architecture 
encoded tree number genome 
ann connection subnetwork form 
general architecture perfect circular ring 
ann connections go subnetwork subnetwork parallel back subnetwork 
general architecture ring diameter 
fix architecture 
ga needed subnetworks 
number units subnetwork ann ann 
subnetwork ann ann represented 
developed tree number genome 
tree number 
beer gallagher number units controller real weights binary weights 
furthermore single sensor senses exact position legs binary sensors 
solution amount recurrent connections subnetwork clearly identified 
subnetwork recurrent connections 
subnetwork neuron recurrent connection 
pairs neurons connected 
pair act latch register 
identify interface neurons subnetwork 
function communicate corresponding interface neurons subnetworks 
number connections subnetworks smaller number connections inside subnetwork neurons interface neurons 
subnetwork interface neuron receives send activities 
subnetwork input interface neuron output interface neurons 
beer gallagher architecture neurons input output interface neurons 
neurons coupled inside leg controller leg controllers reason different inside subnetwork total interconnections 
neurons subnetwork numbered 
leg controller neuron connects corresponding neuron leg controller adjacent 
assumption order parametrize architecture parameters possible reduce search space ga point due adsn ga able solve problem solved beer gallagher providing information symmetries 
search space ga automatically reduced adsn 
analysis anns ga tool developed allows animate activities neurons changing ann relaxing 
way analyzing architecture subnetwork separately possible explain behavior anns generated ga computations ann controlled ring interface neurons 
node ring coupled node weight gamma activities flow ring change signs node 
subnetwork feed forward recurrent connections 
node ring root feed forward subnetwork 
receives input aep pep sensors directly controls rs ps fs actuators 
tripod gait simply emerges fact interface neurons connected weights 
thought solution problem 
ga surprise 
architecture robust node ring suppressed synchronization subnetworks broken 
mechanics ann intermediate ann simpler problem ann 
subnetwork latch register interconnections subnetworks flows ring 
ring steps step subnetwork second step subnetwork third step subnetwork parallel 
activities flows networks interface neurons 
tripod gait usual induced correctly placed gamma weights ensures anti phase locking pairs adjacent subnetwork latch register 
pair subnetwork adjacent legs connected 
architecture weights final weights 
final weights determined genetic code subnetworks general architecture 
robust concise preceding 
subnetworks may removed breaking ring synchronization 
direction exploiting modularity regularity occurs pattern repeated possibly different scales 
possible lengthy list examples regularity atoms molecules polymers cells body limbs fractals homogeneity space time cut paste principles word processor words language signs code 
believe regularity basic characteristic information communication coupling interesting phenomenon happen 
natural evolution way exploit produce regularity 
body architecture creatures built natural evolution internal regularities coupled external regularity world 
example body symmetry maps isotropic nature space 
similarly nervous system animals may highly regular 
example part brain responsible low level vision 
different pixels image treated way 
regularity network maps homogeneity space 
nature generates regular animal bodies nervous system developmental process 
structure genetically encoded single time developed times 
shows principles turned efficient computer technique called artificial developmental process 
technique generate automatically artificial neural networks ann non trivial animat control 
anns internal structure exploits regularities inherent problem 
artificial developmental system scheme uses explicit genome splicing 
genome spliced list trees refer hierarchical way subtree encodes subnetwork total ann hierarchy copies smaller subnetworks 
kinds experiments 
kind structure chromosome single tree 
second kind structure list trees 
solved problems problem simplified model legged locomotion second model complete model beer gallagher motor neuron controls foot 
second experimental setting ann solution simplified legged locomotion problem faster setting 
furthermore size genotype number hidden units best phenotypes ann times smaller second setting 
concerning complete problem setting find solutions trials setting times 
despite small number trials believe difference settings sufficiently high show advantage artificial developmental system possible automatically solve problem beer gallagher solved information symmetries problem 
problem problem list non trivial problems solved cellular encoding 
problems considered certain amount regularities 
cellular encoding efficient problem solve regular 
regularity means problem composed hierarchy subproblems concisely expressed algorithmic form 
comparison previous implications adaptive behavior generating modular nervous system may key element producing behavior exploit regularity environment 
artificial developmental process called cellular encoding produce modular structures 
developmental process useful adaptive behavior community reasons 
efficient ann synthesis 
generates anns structure analyzed understood 
models nature closely developmental processes nature 
may important implications development sensor morphologies particularly vision developments sorts repeated neural structures observed nature motion detectors 
compare different aspects method methods 
explores developmental grammar automatic synthesis anns 
space grammars search ga comparison search techniques simulated annealing random search 
second compare developmental process similar methods 
developmental processes simple problems xor 
think time consider difficult problems propose legged locomotion problem simplified version problem benchmarks 
sims exception solve difficult problem sims 
sims generates ann animat locomotion 
method efficient particular problem 
hand general cellular encoding need embed ann physical body 
sims method robot built evolutionary process decoding genotype 
feasibility operation obvious 
long term potential generate robot physical morphology may important 
cellular encoding robot built ann controlling generated simulator 
third compare way doing genome splicing koza way koza 
idea genome splicing general domains evolutionary algorithm community advantageously leave inert fixed length bit string model splice genome order give life dynamism 
needed genome splicing mechanism allowing genome parts 
john koza applied technique extensively koza trees lisp expressions genetic programming gp paradigm 
genome splicing called koza automatic definition function adf tree encodes automatically defined lisp function solution hierarchy functions call times 
call automatic definition sub neural networks adsn cellular encoding tree encodes sub neural network 
gruau compared lisp cellular encoding possible ways splicing genomes 
hand evolving anns lisp expressions computationally expensive 
takes longer develop evaluate neural network lisp expression 
hand genome splicing cellular encoding presents advantages gp 
gp specify adf number arguments passed 
cellular encoding 
koza evolved number arguments 
needs provide upper bound number arguments 
second koza specifies different set alleles main program adf need set alleles cellular encoding homogeneous cell division modification weights 
specifying particular set alleles tree brings lot information ga third generate anns speed genetic search combining ga learning weights 
gruau able speed genetic search factor supervised learning method 
stochastic hill climbing saved computer time simplified model 
sure better elaborate learning hebbian type 
fourth gp implies symbolic search suffers symbol grounding problem map symbols real world 
gp necessarily forces symbolic pre characterization world 
cellular encoding search conducted level 
cellular encoded ann adsn generate increasingly complex adaptive behavior animats 
single fitness function fitnesses turning going backwards wandering edge chemotaxis behavior 
fitness associated subvector trees genome sub vector trees generates ann satisfying fitness function 
ga evolves hierarchy anns solves hierarchy problems 
way hope able ga automatically build ann able task ann hand coded beer control artificial insect simulated environment food obstacles 
took beer complete phd thesis produce clean ann units able job 
aim obtain results hours computation powerful parallel machine 
acknowledgment supported centre etudes nucl de grenoble post doc 
support nfs iri darrell european community working group santa fe adaptive computation program 
oak ridge national laboratory providing access nodes ipsc 
bill macready gave idea having different fitness functions sharing examples learn great idea 
indebted whitley eric siegel melanie mitchell das anonymous precious comments corrections pierre una may reilly kenneth dejong fruitful discussions 
initial graph sequential division parallel division division division division division division recurrent link cut input link change input weight change output weights example local graph transformations hand coded solutions 
tree tree tree example cellular code designed hand 
tree encodes leg controller 
tree defines row leg controllers half body 
tree defines complete neural network 
step step step step step step step step step step step step step step lay input output units steps development hand cellular code genome spliced trees 
crossover genomes crossover 
aep pep aep pep aep pep aep pep aep pep aep pep ps rs ps rs ps rs ps rs ps rs ps rs anns ga simplified legged locomotion problem adsn adsn single tree tree tree tree comparative size genome ga simplified problem 
automatic definition sub network adsn 
adsn number tree nodes inherited lamarckian back coding total number nodes 
adsn number learned nodes total number nodes 
illustration foot steps legged locomotion foot motor neurons 
foot steps represented way leg plot dot plotted 
lines corresponding legs plotted order left posterior left middle left anterior right posterior right middle right anterior 
clearly tripod gait illustrated 
foot steps produced hand coded ann foot steps produced ann ga adsn 
types foot steps produced ann generated adsn 
number evaluations time adsn adsn relative gain adsn hill climbing disabled table comparison runs adsn simplified problem number evaluations time adsn adsn table comparison runs adsn complete problem leg leg leg leg leg leg aep aep aep aep aep aep aep aep aep aep aep pep pep pep pep pep pep pep pep pep pep pep pep aep pep pep pep aep aep aep aep pep aep pep aep pep pep pep pep pep aep aep table learning set initial positions legs generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation generation evolution best individual automatic definition subnetworks simplified model locomotion interface neuron architecture ann subnetwork ann architecture ann subnetwork ann neural network solution neural network solution anns ga complete problem 
general architecture respectively ann 
number indicates leg controlled subnetwork included particular position 
subnetwork ann 
interface neuron connections subnetworks 
international conference graph grammars 
lecture note computer science 
ackley littman 
interaction learning evolution 
artificial life ii 
randall beer 
intelligence adaptive behavior 
academic press 
randall beer john gallagher 
evolving dynamical neural networks adaptive behavior 
adaptive behavior 
belew 
interposing ontogenic model genetic algorithms neural networks 
neural information processing system th 
kuiper 
biological metaphor design modular artificial neural networks 
master thesis leiden university netherlands 
rodney brooks 
intelligence representation 
artificial intelligence 
dave cliff harvey phil 
explorations evolutionary robotics 
adaptive behavior 
collins jefferson 
selection massively parallel genetic algorithm 
proc 
th international conf 
genetic algorithms 
dellaert beer 
evolving body brain autonomous agent developmental model 
ces case western university 
gruau 
genetic synthesis boolean neural networks cell rewriting developmental process 
combination genetic algorithms neural networks 
gruau 
mixed parallel genetic algorithm 
parallel computing 
gruau 
neural network synthesis cellular encoding genetic algorithm 
phd thesis ecole normale sup erieure de lyon 
anonymous ftp lip ens lyon fr directory pub phd file phd ps english phd ps french 
gruau 
neural compiler 
theoretical computer science 
appear 
gruau whitley 
adding learning cellular developmental process comparative study 
evolutionary computation 
muller cruse dean 
artificial neural nets controlling legged walking system 
second international conference simulation adaptive behavior 
hinton nowlan 
learning guide evolution 
complex systems 
hubel wiesel 
brain mechanisms vision 
scientific american 
meyer 
development learning evolution animates 

ieee computer society press 
anonymous ftp ftp ens fr pub reports ps kitano 
designing neural network genetic algorithm graph generation system 
complex systems 
john koza 
genetic programming paradigm genetically breeding computer population computer programs solve problems 
mit press 
john koza 
genetic programming ii automatic discovery reusable programs 
mit press 
meyer 
simulation adaptive behavior animats review prospects 
proc 
st inter 
cont 
simulation adaptive behavior 
eric david sharp bradley alpert 
scaling machine learning genetic neural nets 
la ur los alamos national laboratory 
born 
parallel genetic algorithm function optimizer 
parallel computing 
parisi nolfi 
morphogenesis neural networks 
technical report university rome 
prusinkiewicz 
algorithm beauty plants 

karl sims 
evolving morphology behavior competition 
brook maes editors th intern 
conf 
artificial life mit 

emergent modeling method artificial neural networks 
phd thesis university tokyo 
appendix appendix precise parameters animat 
algorithm computing force exerted leg angle modification leg time step force ps rs foot ground angle angle angle speed 
force speed angle angle force angle angle angle angle force coming leg summed plus global friction equal speed 
speed position animal updated distance distance speed speed speed force animal balanced speed set 
initial leg positions learning set specified table 
number time steps position 
target distance animat walk leg position 
threshold distance 
table 
