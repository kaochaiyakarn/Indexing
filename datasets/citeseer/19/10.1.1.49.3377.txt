identifying semantic textual differences versions program susan horwitz university wisconsin madison text file comparators unix utility diff general tools applied arbitrary files 
tools compare programs unsatisfactory notion change program text program behavior 
describes technique comparing versions program determining program components represent changes classifying changed component representing semantic textual change 
supported part defense advanced research projects agency monitored office naval research contract national science foundation ccr xerox kodak cray 
author address computer sciences department univ wisconsin dayton st madison wi 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm proceedings acm sigplan conference programming language design implementation 
white plains new york june 

tool detects reports differences versions programs obvious utility software development environment 
text tools unix utility diff advantage applicable arbitrary files tools compare programs unsatisfactory distinction textual semantic changes 
describes technique comparing programs old new determining components new represent changes old classifying changed component representing textual semantic change 
general undecidable determine precisely set semantically changed components new technique described computes safe approximation possibly superset set 
computation performed graph representation programs partitioning operation graphs introduced yan summarized section 
partitioning algorithm currently limited language scalar variables assignment statements conditional statements loops output statements 
partitioning algorithm fundamental algorithm described algorithm currently limited language described 
research way expand language particular studying extensions procedures procedure calls pointers arrays 
precise definition semantic change section informally component new represents semantic change corresponding component old component added old create new different sequence values produced corresponding component old 
sequence values produced mean assignment statement sequence values assigned left hand side variable program executed predicate sequence true false values evaluates program executed output statement sequence values output program executed 
shows program old different new programs new program annotated show changes respect old 
worthwhile consider approaches program comparison detect kinds changes illustrated 
program new assignment flagged semantic change value assigned variable corresponding component old assigns value text program comparator flagged changed component changes flagged new detected program comparator 
components represent semantic changes may directly indirectly new value assigned second third semantic changes program new detected def chains aho modified definition program new illustrates situation def chains leads erroneous detection semantic change 
new component flagged semantic change sequence values produced empty variable true sequence values produced corresponding component old empty assignment unconditional 
represents semantic change sequence values produced component new identical sequence values produced corresponding component old flagged change 
def chains incorrectly identify output semantic changes 
fi output old fi output new semantic semantic semantic fi output new semantic fi output new textual textual textual 
program old versions new version new annotated show changes respect old 
language consideration include explicit input statements 
variables defined variables values come initial state 
new illustrates purely textual changes def chains changed component incorrectly identify output semantic change 
technique determining semantic differences versions program comparing program slices wei ott algorithm hor 
technique adapted detect kinds changes illustrated programs new new slice comparison precise partitioning technique described example slice comparison components output new identified semantic changes 
section provides detailed discussion slice comparison technique including examples slice comparison precise partitioning 
discussing examples talked corresponding components old various new programs 
correspondence established possibility rely editing sequence create new old 
example correspondence established maintained editor create new old follows component old unique tag component added new tag component moved modified maintains tag component deleted tag reused 
algorithm detecting semantic textual changes old new assuming editor supplied tags section approach important disadvantages special editor maintains tags required 
set changes new respect old depends semantics programs particular editing sequence create new old 
example possible different editing sequences create programs new new old new programs identical different sets changed components respect old 
section considers determine semantic textual changes old new absence editor supplied tags problem finding correspondence components old new included part program comparison algorithm 
reasonable criterion determining correspondence minimize difference old new show satisfactory define difference old new simply number semantically textually changed components new respect old 
propose defining difference old new number semantically textually changed components new plus number new flow control dependence edges graph representation new flow control dependence edges defined section 
finding correspondence minimizes difference old new definition shown np hard general case study real programs needed determine difficult problem practice 

partitioning program components behaviors program comparison algorithm described relies algorithm partitioning program components programs components partition equivalent behaviors yan 
partitioning algorithm uses graph representation programs called program representation graph 
section summarizes definitions program representation graphs partitioning yan 

program representation graph program representation graphs currently defined programs limited language scalar variables assignment statements conditional statements loops output statements 
language yan slightly restrictive including limited kind output statement called statement appear program clear problems introduced allowing general output statements 
combine features program dependence graphs fer hor static single assignment forms sha alp ros 
program prg defined terms augmented version program control flow graph 
standard control flow graph includes special entry vertex vertex predicate assignment statement output statement program 
static single assignment forms control flow graph augmented adding special vertices variable assignment statement output statement predicate reached exactly definition 
vertex labeled added statement variable defined branches live vertex labeled enter added inside loop immediately loop predicate variable defined loop live immediately loop predicate may redefined inside loop loop vertex labeled exit added immediately loop variable defined loop live loop 
addition variable may defined vertex labeled initial added control flow graph 
figures show program augmented control flow graph 
vertices program program representation graph prg vertices augmented control flow graph entry vertex vertex predicate assignment statement output statement initial enter exit vertex 
edges prg represent control flow dependences 
source control dependence edge entry vertex predicate vertex control dependence edges labeled true false 
intuitive meaning control dependence edge vertex vertex program component represented vertex evaluated program execution value matches label edge assuming termination loops component represented eventually execute value match label edge component represented may execute 
definition entry vertex evaluates true 
algorithms computing control dependences languages unrestricted control flow fer 
restricted language consideration control dependence edges reflect nesting structure program edge labeled true vertex represents predicate vertices represent statements inside loop edge labeled true vertex represents predicate vertices represent statements true branch edge labeled false vertices represent statements false branch fi output entry initial output entry initial output 
program augmented control flow graph program representation graph 
program representation graph control dependence edges shown bold arrows unlabeled example control dependence edges labeled true data dependence edges shown arcs 
edge labeled true entry vertex vertices represent statements inside loop statement 
addition control dependence edge labeled true vertex represents predicate 
flow dependence edges represent possible flow values flow dependence edge vertex vertex vertex represents program component assigns value variable vertex represents component uses value variable definition clear path augmented control flow graph 
shows program representation graph program 
control dependence edges shown bold arrows unlabeled example control dependence edges labeled true data dependence edges shown arcs 

partitioning algorithm partitioning algorithm yan applied program representation graphs programs 
algorithm partitions vertices graph vertices partition program components represent equivalent behaviors sense definition equivalent behavior program components components necessarily distinct programs respectively equivalent behaviors iff hold initial states halt executed sequence values produced component executed identical sequence values produced component executed 
initial states halts executed sequence values produced component initial subsequence sequence values produced vice versa 
initial states halts fails halt sequence values produced initial sub sequence sequence values produced 
initial states halts fails halt sequence values produced initial sub sequence sequence values produced sequence values produced component mean assignment statement including initial statements statements sequence values assigned left hand side variable output statement sequence values output predicate sequence boolean values predicate evalu ates 
partitioning algorithm uses technique call basic partitioning algorithm adapted alp aho algorithm hop minimizing finite state machine 
technique finds coarsest partition graph consistent initial partition graph vertices 
algorithm guarantees vertices class partitioning initial partition predecessor corresponding predecessor class partitioning 
partitioning algorithm operates passes 
passes basic partitioning algorithm apply different initial partitions different sets edges 
pass creates initial partition operators vertices flow dependence edges basic partitioning algorithm refine partition 
second pass starts final partition produced pass control dependence edges basic partitioning algorithm refine partition 
time required partitioning algorithm log size program representation graph number vertices number edges 
initial partition old new new new entry entry entry entry init init init init output output output output final partition old new new new entry entry entry entry init init init init output output output output 
partitioning example 
partitions created partitioning algorithm programs 
example 
illustrates partitioning programs 
shows partitions created partitioning algorithm initial partition final partition 
note components labeled old new final partition execution behaviors transitively flow dependent components final partition components labeled old new 

computing semantic textual differences section presents different algorithms compute semantic textual differences versions program 
algorithms operate programs program representation graphs follows new old program representation graphs program component program representation graph vertex interchangeably 
section assumes special tag maintaining editor create program new program old 
section assumes correspondence components new old computed sections different criteria determining best correspondence 
cases goal find correspondence minimizes size change new old 
section size change defined number semantically textually changed components new section size change defined number semantically textually changed components plus number new flow control dependence edges new 

component correspondence maintained editor program new created program old editor maintains tags program components determining components new represent changes old classifying changed component textual semantic change quite straightforward 
procedure called classifies components new 
procedure partitions programs old new considers component new 
component old tag added old create new represents semantic change 
similarly component old tag component partition represents semantic change 
component old tag partition different text represents textual change 
procedure illustrated considering programs old new 
assume program new created old moving statement branch statement 
case component new component old tag illustrated component new component component old tag final partition 
component new procedure old new program representation graphs returns sets components new representing semantic textual changes respectively declare sets program components apply partitioning algorithm old new component new component old tag component old tag partition insert text component old tag text insert fi fi od return 
procedure classifies components new editor supplied tags 
identified procedure representing change old component identified semantic change 

component correspondence computed section consider compare programs old new assuming program components tagged editor 
correspondence components old new computed part program comparison algorithm 
goal find correspondence minimizes size change old new 
sections consider different definitions size change 

size change number semantically textually changed components new define size change old new number semantically textually changed components new possible define efficient algorithm find correspondence minimizes size 
procedure called computes correspondence simultaneously classifies components new respect old 
procedure tries match component new component old semantically textually equivalent 
procedure considers unmatched components new attempting match unmatched components old semantically equivalent textually different 
components new classified textual changes 
components new remain unmatched classified semantic changes 
applying procedure programs old new produce result procedure old new program dependence graphs returns map components new components old sets components new representing semantic textual changes respectively declare map set program component pairs sets program components apply partitioning algorithm old new map component new unmatched component old partition text insert pair map mark matched mark matched fi od unmatched component new unmatched component old partition insert pair map mark matched mark matched insert insert fi od return map 
procedure computes correspondence new old minimizes number changed components new 
pictured components programs tagged editor 
components new matched component old semantically textually equivalent component unmatched classified semantic change 
procedure partitions old new passes new matching classifying components 
assuming possible determine constant time unmatched component old partition text component new time required matching classifying linear size new time required procedure dominated time required partitioning log sum sizes old new 
old new mapping changed components 
programs old new possible mappings components new components old 
mapping induces set changed components size mappings induce new data dependence second mappings induce new data dependences 

size change includes number new edges new simply minimizing number semantically textually changed components produce satisfactory classification components new illustrated 
shows programs old new possible mappings components new components old 
mappings induce minimal number changed components new respect old intuitively satisfying mappings third fourth mappings 
problem third fourth mappings separate variable corresponding definition avoid choosing mapping mapping redefining size change old new take account prg edges vertices 
definition correspondence new old 
correspondence new old partial function vertices new vertices old vertices new vertex old special value means vertex old corresponds vertex new vertices final partition 
definition unmatched edge 
edge new unmatched correspondence defined iff hold edge old 
definition size change old new 
size change old new induced correspondence defined number vertices new number vertices new text identical text number unmatched edges new 
gives procedure computing correspondence new old minimizes size change old new defined 
problem finding correspondence nphard hor efficient procedure defined 
procedure works follows 
choice vertices new vertices partitions include exactly vertex old vertex new matched single vertex old semantically equivalent 
accomplished procedure match 
backtracking scheme try possible matchings remaining vertices new remaining vertices old 
time complete correspondence defined cost computed cost lowest far correspondence saved 
backtracking performed procedure called match initial working set containing vertices new vertices new unmatched partitions unmatched vertex old 
understand procedure consider working set empty working set contains exactly vertex working set contains vertex 
working set empty 
working set empty partitions include unmatched vertex new unmatched vertex old complete correspondence defined 
case procedure computes size change induced current correspondence current correspondence change size saved best correspondence far 
code function omitted 
function computes size change induced current correspondence number unmatched vertices new plus number vertices new matched textually different vertices old plus number unmatched edges new 
working set contains vertex case removed working set partition subcases partition contains unmatched vertex old partition contains unmatched vertices old 
case correspondence complete test line succeed number unmatched vertices new number unmatched vertices old zero recursive call empty working set 
recursive call compute cost current correspondence 
second case test line fail loop line executed 
time loop current correspondence completed matching vertex different unmatched vertex old recursive call empty working set 
working set contains vertex 
case arbitrary vertex selected removed working set 
test line serves similar purposes 
unmatched vertices old partition test succeed guaranteeing current correspondence completed unmatched loop line serve purpose execute zero times 
second removing unmatched vertices new unmatched vertices old left test succeed recursive call complete current correspondence possible ways unmatched 
loop line take care completions matched available vertex old 
time requirements procedure analyzed follows 
maximum number unmatched vertices old partition unmatched vertex new 
working set size recursive calls empty working set working set size recursive calls working set size 
solving equation find time required call working set size 
value original call procedure match number vertices new remain choice matches 
remains seen large value value practice 
unrealistic upper bound time required number vertices old number vertices new 
declare global bestsofar correspondence new old integer procedure match old new program representation graphs returns correspondence new old minimizes size change old new declare map correspondence new old set vertices new apply partitioning algorithm old new map match choice vertices new partition includes exactly vertex new vertex old insert map mark matched mark matched od put remaining vertices new working set unmatched vertices new unmatched vertex old partition insert od try possible correspondences keep track best bestsofar map best correspondence saved global variable bestsofar return bestsofar procedure map correspondence new old set vertices new vertices new compute size change induced current correspondence save current correspondence change size smaller best far map bestsofar map map fi try remaining possible matches select remove arbitrary vertex partition remove unmatched vertices new unmatched vertices old try correspondences unmatched map fi unmatched vertex old partition insert map mark matched map remove map mark unmatched od put vertex back partition time called add partition insert ni fi 
procedure match finds correspondence new old minimizes difference old new 
procedure match matches choice vertices new calls procedure 
vertices new procedure computes size change old new induced current correspondence 
correspondences consistent incomplete correspondence 

related related falls categories techniques computing textual differences techniques computing semantic differences 
category includes techniques comparing strings san wag nak tic mil techniques comparing trees sel lu tai zha 
different goal technique described textual differencing techniques useful practice compromise requiring editor supplied tags solving np hard problem algorithms compute tags program components 
tags available procedure section classify components new 
case special editor required tags function particular edit sequence create program new program old guarantee size change old new minimal sense section 
mentioned section important part program integration algorithm hor identification changed computations program variant respect original program 
technique algorithm involves comparing program slices wei ott 
slice program respect component set program components affect values variables component 
slice comparison place partitioning algorithm partition components programs old new techniques matching components old new discussed section applied 
approach component new placed partition components old components new identical slices 
compare partitioning partitioning algorithm partitioning slice comparison consider times required techniques accuracy partitions computed techniques 
slice equality pair program components determined time linear size slices components possible determine slices respect equal time linear number vertices edges slices hor 
result straightforward technique partitioning programs old new slice comparison vertices new vertices old create new empty partition class select remove vertex insert vertices slice slice remove insert fi od od technique requires time sum sizes old new 
algorithm partitioning slice comparison described hor better time bound achieved structure sharing 
consider partitions produced partitioning algorithm compare produced slice comparison 
slices considered equal identical structure identical text partitioning slice comparison produces partitions subsets partitions produced partitioning algorithm possible partitions differentiate textual semantic changes 
example components output program new components output program new identified changed distinction semantic changes new purely textual changes new algorithm identifies equal slices structurally identical textually identical variable renaming hor 
case partitions programs old new new produced slice comparison partitions produced partitioning algorithm components new new identified semantic textual changes 
general partitions produced slice comparison subsets partitions produced partitioning algorithm 
illustrated shows old program different new programs components new programs semantically equivalent obvious corresponding component old placed partitions corresponding components old partitioning algorithm slices differ slices corresponding components old flagged arrows 
examples illustrated characterized follows component old uses literal corresponding component new uses variable assigned literal value component old uses variable corresponding component new uses different variable assigned value components old new values assigned structurally different semantically equivalent con rad debug rad fi area rad vol height area old pi rad debug rad fi area pi rad vol height area new rad debug rad fi area rad tmp area vol height tmp new debug rad rad fi area rad vol height area new 
examples yang partitioning algorithm superior partitioning slice comparison 
statements flagged arrows semantically equivalent corresponding statements old different slices corresponding statements old 
structs involving conditional statements 
summarize slice comparison place partitioning algorithm identify semantically equivalent components old new 
time required partitioning slice comparison time required partitioning partitioning algorithm log partitions computed slice comparison subsets partitions computed partitioning algorithm 
remains seen techniques compare practice 

discussed algorithms comparing versions program identifying semantic textual differences 
algorithms technique partitioning programs introduced yan 
partitioning technique currently applicable limited language believe extended include standard programming language constructs 
extensions partitioning algorithm translate directly extensions program comparison algorithms believe algorithms described soon applicable reasonable language example pascal procedure parameters 
extending partitioning algorithm able implement program comparison algorithms determine practice 
determine third algorithm theory provide better classification changes second algorithm practice np hard matching problem incorporates unusable real programs 
aho 
aho hopcroft ullman design analysis computer algorithms addison wesley reading ma 
aho 
aho sethi ullman compilers principles techniques tools addison wesley reading ma 
alp 
alpern wegman zadeck detecting equality variables programs pp 
conference record fifteenth acm symposium principles programming languages san diego ca january 

cytron ferrante rosen wegman zadeck efficient method computing static single assignment form pp 
conference record sixteenth acm symposium principles programming languages austin tx jan 
fer 
ferrante ottenstein warren program dependence graph optimization acm transactions programming languages systems pp 
july 
hop 
hopcroft log algorithm minimizing states finite automaton theory machines computations pp 

hor 
horwitz prins reps integrating noninterfering versions programs acm transactions programming languages systems pp 
july 
hor 
horwitz identifying semantic textual differences versions program technical report department computer sciences university wisconsin madison november 
hor 
horwitz reps efficient comparison program slices acta informatica pp 


kuck kuhn padua wolfe dependence graphs compiler optimizations pp 
conference record eighth acm symposium principles programming languages williamsburg va january 
lu 
lu tree tree distance application cluster analysis ieee transactions pattern analysis machine intelligence pami pp 
april 
mil 
miller myers file comparison program software practice experience pp 
november 
nak 
longest common subsequence algorithm suitable similar text strings acta informatica pp 

cited miller ott 
ottenstein ottenstein program dependence graph software development environment proceedings acm sigsoft sigplan software engineering symposium practical software development environments pittsburgh pa april acm sigplan notices pp 
may 
ros 
rosen wegman zadeck global value numbers redundant computations pp 
conference record fifteenth acm symposium principles programming languages san diego ca january 
san 
sankoff matching sequences deletion insertion constraints proc 
nat 
acad 
sci 
pp 
january 
sel 
selkow tree tree editing problem information processing letters pp 
december 
sha 
shapiro saint representation algorithms technical ca massachusetts computer associates february 
tai 
tai tree tree correction problem jacm pp 
july 
tic 
tichy string string correction problem block moves acm transactions computer systems pp 
november 
wag 
wagner fischer string string correction problem jacm pp 
january 
wei 
weiser program slicing ieee transactions software engineering se pp 
july 
yan 
yang horwitz reps detecting program components equivalent behaviors technical report department computer sciences university wisconsin madison wi april 
zha 
zhang shasha simple fast algorithms editing distance trees related problems appear siam journal computing 

