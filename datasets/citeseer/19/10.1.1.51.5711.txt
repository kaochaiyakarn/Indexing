reorganizing split objects hern john shilling cc gatech edu shilling cc gatech edu technical report git cs college computing georgia institute technology atlanta georgia july object classless models effective elucidating requirements users support exploratory programming rapid prototyping 
hand class models preferred perform design implementation providing descriptive power types error checking 
consider evolution object models class production systems 
difficult problems transition change explicit description individuals implicit description class instances 
reorganization support aims system structures properties evident enforceable 
structural properties useful organize code regardless meaning automated support identify potential structures properties leaving programmer choice alternative workspace organizations 
analyze organization management classless objects regarding goals redundancy elimination consistency maintenance goals complicated existence mechanisms object creation cloning extension split objects 
classification sharing extension patterns terms basic mechanisms examine interaction effect 
research practice shown object oriented analysis ooa powerful tool capturing system requirements early stages development example see mp sm rbp assessment ooa techniques 
techniques ner hh object models objects classes due usefulness representing real world knowledge user system domain requirements 
object models allow representation concepts priori classifications lie support customer dialog similarities differences concrete objects detected discussed bs gom provide flexible development needed rapid prototyping gs 
experiences shown mp boo mey development stages requirements analysis benefit greatly structural behavioral formalization predictability 
classes gr turn explicit description individual objects intensional description groups objects simplifies system description allows code reuse supports change propagation 
believe formalization structure classification necessary development effort result industrial strength system 
short imposing class approaches early stages approach want avoid remaining option consider evolution object requirements models class 
difficult problems transition change explicit description individuals implicit description class instances 
reorganization support aims system structures properties evident enforceable 
structural properties useful organizing code regardless meaning 
automated support identify potential structures properties programmer give validity meaning workspace organization 
consider effect change propagation replication control object systems sharing extension propose compare alternative organizations put factor matrix 
remainder organized follows section introduces object model mechanism built section presents issues mechanism involved organizing managing object workspaces section examines sharing section covers object extension section analyzes interaction effect issues 
simple object model section define terms 
basic entities features objects 
features named object 
object composite set features method 
features marked delegating features object referenced called parent object feature holder 
basic operations object cloning creates copy addition removal features modification feature alters message sending 
message receiver method executed receiver feature matches message forwarded object referenced feature searches recursively parent objects matching feature forward message 
cloned set created object modified set holds initial object adding removing modifying features 
plus objects created cloning member set minus set members modified 
notice definition require existence distinguished prototype continued existence initial object 
organization management objects object systems lack explicit support higher level abstraction intensional sets creates kinds problems 
change propagation clear concept equivalence compulsory set membership clones set usually unknown programmer change object raises question worse skips altogether change applied clones extensions see section 

replication control objects may identical immutable parts space due replication 
control elimination replication entails sharing common elements explicitly delegation implicitly higher level abstraction 
severity concerns depends greatly system policies sharing objects objects extension 
sections introduce issues discuss effects different combinations sharing extension policies 
sharing separate features object immutable features meant change object lifetime record object static properties mutable features change record object state 
clearly kinds features physically separated improve space efficiency immutable features definition identical members set clones 
mechanism distinguish mutable immutable features feature annotations indicating const ness system detection common values objects mechanisms help automate identification separation possible 
approaches separation sharing exist ffl ignored issue fully ignored 
alternative academic real systems quickly suffer effects indiscriminate replication essentially identical material 
ffl system simulated problem acknowledged considered just implementation issue underlying programmer vision objects fully autonomous 
includes language tai provides sharing apparently self sufficient objects virtual copies proposed mittal mbk 
ffl delegation sharing explicit visible programmer determine shared individual clones 
model self sets created description enumeration 
distinction mutable immutable traits orthogonal data methods example callbacks error handlers certainly mutable features conventional programming 
system simulated immutable traits sharing factorized cloning traits shared behavior sharing object mutable part object immutable part factoring immutable traits language traits objects hold shared slots prototypes clones hold individual state 
mentioned approaches implement fact self uses maps support sharing clones 
ffl implicit issue sharing abstracted membership group denoted common description features 
case class cw languages smalltalk gr str classes hold shared members implicit prototype 
mentioned approaches implement caveat visible implementor programmer 
illustrates clones set members labeled simplicity represented sharing system simulated sharing delegation sharing 
shows cloning extension operations combined split object cloned operation clone hierarchy data parents just object 
objects extension basic operation create new objects cloning produces copy object 
systems delegation offer extension new object built incremental modification 
see example creating student cloning existing student extending existing person 
case programming extension new objects classes exist defined extensions existing ones relationship preserves original object integrity allows automatic propagation changes object extensions 
extended object composed desired object plus new object containing additional features see 
representation options exist ffl delegation extended object implemented having components ngt new features defined object original object parents remaining concatenation monolithic prototype object mutable part object immutable part delegation split prototype data parent extended structure cloning cloning extended objects ssn name john gpa extending person creating person gpa name john ssn gpa name john ssn cloning student creating student data parent extended structure cloning cloning extension untouched 
dony call split objects dmc 
avoids redundancy facilitates change propagation self objects extended way called data parents extensions 
ffl concatenation new object built copying object extended modifying satisfy required extension 
extension paradigm tai 
model conceptual cleaner delegation supports self sufficient objects avoiding dependencies hand suffers possible inconsistencies certainly replication 
notice concatenation implemented delegation split objects key point programmer safely unaware 
ffl implicit process extension hidden abstraction 
programmer aware object extension class extension take place 
smalltalk provide subclassing implicit class held prototypes extended instances created sub class monolithic classes viewed implemented split objects tai 
implicit object extension implemented split objects concatenation 
interaction policies consider interaction mechanism redundancy elimination objects extension affects object organization modes 
exposition graphically shown summarized table 
combinations factors evaluate degree change propagation replication control available programmer 
factors 
factorization immutable features object reside object individual shared object called traits self accessed delegating 
traits splitting immutable features reside traits object object single object monolithic traits built concatenation split traits built delegation 

prototype splitting mutable features object reside single object monolithic prototype delegation concatenated objects split prototype 
row corresponds self sufficient objects sharing 
concatenation extension exists delegation sharing place model change propagation explicit replication maximal 
model allows split objects delegation support data parents objects sub parts propagation changes objects extensions immediate changes clones sets explicit 
second row describes object models allow sharing traits object common immutable features traits split object 
means traits extending replicate produce replication previous cases 
propagation changes originally extended traits done cut paste paradigm 
fact stein shown ste inheritance subsumed delegation 
system implements models beneath programmer interface self maps 
cloning traits shared behavior data parent extended structure object mutable part object immutable part split instance cloned object prototype monolithic prototype split traits monolithic prototype monolithic traits split prototype split prototype split traits monolithic traits extension factorization immutable monolithic prototype split prototype part location extension concatenation extension delegation individual shared monolithic traits table combining extension factorization separately mechanism supporting system top ad hoc manner 
way objects implemented str large table referencing class members instances inherited members sub parts 
third row considers object models allow sharing traits traits split object 
cases provide minimal replication immutable features object workspace 
objects allowed split situation maximal change propagation immutable features propagated delegation lattice minimal replication features propagation instance structure changes requires existence higher levels abstraction classes 
fact model programmers perceive system classes defined extension instances superclass parts components 
notice case best redundant worst ambiguous instance inherits sets traits traits solutions situation see involve making part proto copy proto proto consequently advantage split prototypes lost 
notice having blind copy proto parents valid self instances refers part 
difficulties combine split prototypes monolithic traits point fundamental limitation split ness prototypes exceed traits split ness 
considered organization management non class objects 
objects defined sharing extension 
sharing ignored system simulated explicit delegation implicit classes 
objects extension cloning manifest delegation concatenation implicit extension subclassing 
analyzed interaction mechanisms change control objects extension effect organization models 
interesting result apparent limitation split ness prototypes exceed traits 
cloning traits shared behavior data parent extended structure object mutable part object immutable part copy proto modified copy proto dead split instance cloned object split prototype solutions redundant inheritance boo grady booch 
object oriented design 
benjamin cummings series ada software engineering 
benjamin cummings redwood city ca 
bs reinhard 
application domain modelling target system 
reinhard editors approaches prototyping proceedings working conference prototyping pages berlin new york namur belgium 
gesellschaft fur mathematik und mbh springer verlag 
cw luca cardelli peter wegner 
understanding types data abstraction polymorphism 
acm computing surveys dec 
dmc christophe dony jacques malenfant pierre cointe 
prototype languages new taxonomy constructive proposals validation 
andreas paepcke editor oopsla th annual conference object oriented programming systems languages applications pages 
acm sigplan acm press vancouver british columbia canada oct 
gom 
impact rapid prototyping specifying user requirements 
software engineering notes 
gr adele goldberg robson 
smalltalk language 
addison wesley series computer science 
addison wesley 
gs scott 
prototyping tool specification user requirements 
icse editor th international conference software engineering pages 
ieee acm sigsoft ieee computer society 
hh hooper hsia 
scenario prototyping requirements identification 
software engineering notes 
lie henry lieberman 
prototypical objects implement shared behavior object oriented systems 
norman meyrowitz editor oopsla conference proceedings pages 
acm acm press portland oregon usa sept oct 
mbk sanjay mittal daniel bobrow kenneth kahn 
virtual copies boundary classes instances 
norman meyrowitz editor oopsla conference proceedings pages 
acm acm press portland oregon usa sept oct 
mey bertrand meyer 
object oriented software construction 
prentice hall englewood nj usa 
mp david 
research typology object oriented analysis design 
communications acm sep 
ner jean marc 
applying object oriented analysis design 
communications acm sep 
ngt oscar nierstrasz simon gibbs dennis tsichritzis 
component oriented software development 
communications acm sep 
rbp james rumbaugh michael blaha william premerlani frederick eddy william lorensen 
object oriented modeling design 
prentice hall englewood nj usa 
sm mellor 
object oriented systems analysis modeling world data 
prentice hall englewood nj usa 
ste lynn andrea stein 
delegation inheritance 
oopsla editor oopsla conference object oriented programming systems languages applications pages 
acm sigplan acm press orlando fl usa oct 
str bjarne stroustrup 
programming language 
addison wesley series computer science 
addison wesley st edition 
tai taivalsaari 
prototype object oriented language concatenation module 
technical report dcs university victoria victoria british columbia canada june 
david ungar craig chambers bay wei chang urs holzle 
organizing programs classes 
lisp symbolic computation jun 
david ungar randall smith 
self power simplicity 
oopsla editor oopsla conference object oriented programming systems languages applications pages 
acm sigplan acm press orlando fl usa oct 
rebecca wirfs brock ralph johnson 
surveying current research objectoriented design 
communications acm sep 
rebecca wirfs brock wilkerson wiener 
designing object oriented software 
prentice hall englewood nj usa 
