lisa machine description language generic machine model hw sw design stefan heinrich meyr integrated systems signal processing aachen university technology aachen germany new machine description language 
new language lisa generic machine model able produce bit cycle phase accurate processor models covering specific needs hw sw design simulation environments 
development new language necessary order cover gap coarse isa models compilers instruction set simulators hand detailed models hardware design 
main part devoted behavioral pipeline modeling 
pipeline controller generic machine model represented asap soon possible sequencer parameterized precedence resource constraints operations instruction 
standard pipeline description reservation tables gantt charts extended additional operation descriptors enable detection data control hazards permit modeling pipeline flushes 
newly introduced charts reduced parameterization pipeline controller minimum time covered typical pipeline controls state art signal processors 
example application lisa model ti tms signal processor 
simultaneous design hardware software take place different abstraction levels 
hll level compiler processor designed jointly order obtain optimum performance selected high level language constructs 
application level chip hardware role processing accelerator external interface optimized deliver optimum results specific application class 
goal instruction level hw sw design speedup frequently instructions appropriate design instruction set architecture isa processor 
levels correspond software hw sw design realization software starting point hardware alternatives introduced order speedup execution 
independent level processor models machine models compiler terminology unavoidable part hw sw design environment 
currently available processor models cover spectrum applications compilation software hardware design architecture exploration design steps simulation synthesis verification 
surprisingly machine models tailored specific hw sw design needs rare suffer rudimentary division hardware software 
machine models modern dsp embedded processors follow classical distinction instruction set architecture programmers view processor hardware implementation 
general purpose processing hiding implementational details processor programming comfort need different hardware implementations single instruction set architecture 
hw sw design dsp embedded systems arguments especially hold 
standard isa models description languages deliver detailed pipeline pin related information necessary hw sw design 
hand models description languages suited hardware implementation contain lot details superfluous software design design attached hardware 
consequence remarkable increase necessary design effort simulation time 
new machine description language lisa introduced 
development new language generic machine model necessary order cover gap standard isa models description languages compilers instruction level simulators hand detailed behavioral structural models description languages hardware design 
main characteristics lisa operation level description pipeline able model complex interlocking bypassing techniques 
instructions consist multiple operations defined register transfers single control step 
depending requested accuracy control step instruction clock phase cycle 
operation scheduling lisa modified gantt charts charts specifying time resource allocation operations operation sequencer asap soon possible operation sequencing strategy 
resulting timed isa model delivers instruction clock phase accurate timing depending selected control step 
combined bit accurate description operations model contains necessary information produce clock phase accurate model processor pins core interface 
lisa description language developed parameterize generic machine model 
goal single generic machine model single description language covering class processor architectures fig 

resulting machine model target processor simulation compilation purposes 
currently primary application domain lisa timed isa simulation hll application instruction level hw sw designs 
proposed machine model equally ap machine description machine model simulator processor programmer guide machine description machine model simulator compiler processor hardware description machine description language generic machine model generic machine model machine description language 
plications compilation 
main difference simulation compilation lies relation instruction selection scheduling behavior modeling 
code generator compiler starts behavior form address intermediate representation select schedule target instructions order match behaviour 
simulations process reversed 
instructions selected scheduled task simulator reproduce behavior specified simulated program 
essential difference models simulation compilation organization semantics instructions understood compiler irrelevant simulation 
newly introduced lisa pipeline model charts equally useful simulation compilation 
primary focus simulation aspects machine modeling lisa 
hope lisa compilation model lisa soon 
previous lisa motivated wish enable easy retargeting fast compiled simulators various existing exploratory architectures 
goal mind analyzed previous machine models machine description languages 
glance hardware description languages hdl natural selection describing processors 
existing processor hardware models described hdls vhdl verilog 
unfortunately hdl models real time software design hw sw design number disadvantages 
hdl models contain lot superfluous details unnecessary purposes design verification processor hardware 
relevant information isa control pipeline sequencer extracted highly complex task person designed processor 
automatic architecture extraction done processors simple program sequencing logic data path 
hdl descriptions single machine differ enormously representation level style complicating task 
hw sw design field issue machine modeling machine descriptions received specific attention 
concentrated system models multiple processors asics interfaces 
ptolemy environment developed berkeley university fixed system level behavioral simulator motorola dsp signal processor integrated thor hardware design environment 
attempt cover processors reported 
pixie simulator developed stanford university provides detailed modeling pipeline memory system 
system level simulator sable models system aspects external exceptions system 
details machine specification formalism provided 
machine description unavoidable part compiler 
approaches compilation related pipeline modeling distinguished 
reservation tables 
machine description language models pipeline risc processors reservation tables 
similar reservation table approach reported vliw compilation 
cases standard reservation table approach unable capture details pipeline data control hazards interlocks pipeline flushes 
alternative approach latency specification 
machine description formalism nml provides common architectural information compiler instruction set simulator uses storage latencies order describe pipelining effects 
similar pipeline model part gnu gcc compiler 
storage latencies provide highly simplified model pipeline simulation questionable compilation model 
wish capture detailed timing information available isa level motivated operation level behaviour scheduling description 
terms pipeline sequencing representation lisa follows main idea reservation tables gantt charts 
order enable additional modeling data control hazards pipeline flushes extended modeling ability gantt charts introducing charts operation descriptors 
posed requirements machine model ffl application domain real time software design machine dependent finite word length analysis speed memory optimization dsp embedded system design hw sw verification chip accelerator interface design architecture exploration ffl processor class digital signal processors microcontrollers low medium complexity pipelined vliw risc architectures ffl model accuracy selectable instruction clock phase accurate timing bit accurate register transfers exact pipeline interrupt wait state modeling spatial accuracy software level registers memory system level interrupts peripherals hardware level pins ffl state visibility complete state visibility selected control steps 
requirements machine model direct impact generic machine model machine description language 
main requirement generic machine model capture maximum common features target processor class way minimize description size description generation time 
machine specification language capture differences processors class 
main requirement low redundancy description 
language syntax easily understood user language parser 
shall concentrate specification operation constraints sequencer generic machine model 
operation sequencer generic machine model order enable cycle phase true modeling instructions partitioned operations basic schedulable units 
control step admissible operations form transition function changes machine state 
shows instructions operations 
transition function fo applied machine state control step control step new set admissible operations instruction instruction instruction operation sequencing model operation sequencing rules operations admissible operations operation sequencing 
determined 
admissible operations determined precedence resource constraints specified operations instruction 
direct specification general rule approach rejected large number rules accompany instruction 
additionally constraintbased approach proven advantageous instructions added removed instruction set 
despite reduced modeling power compared rule approach constraint model captured pipeline sequencing strategies aforementioned processor class 
known formalism describe precedence resource constraints operations reservation tables 
reservation tables twodimensional representations resource allocation resource time space 
mark place table indicates corresponding processor resource bus functional unit indicated time interval 
gantt charts reservation marks operations uniquely specified 
pipeline instruction scheduling reservation tables deliver necessary details 
clock accurate modeling requires additional information operation precedence gantt charts appropriate 
convert time axis gantt chart precedence axis gantt chart describes precedence constraints 
shows information gantt charts operation sequencer order determine admissible operations control step 
sequencer instruction instruction operation sequencing model gantt charts control steps gantt chart sequencing 
mines admissible operations soon possible asap principle accounting precedence resource constraints imposed gantt charts 
multiple operations coming different instructions compete resource precedence determined logical precedence instructions specified program thread 
main assumption pipeline sequencer inserts bubbles pipeline resource conflicts resolved 
processors order execution excluded 
great deal processors dealing asap sequencing reduced overhead realization pipeline controller 
lisa compact specification style gantt charts 
assumption operation takes single control step gantt chart specified vertical lines commas parenthesized objects specify precedence parallelism resources respectively 
example operation uses resource scheduled operation uses resource 
note precedence operations specified 
pipelined architectures classes pipeline hazards occur structural data control hazards 
hazards detected resolved 
gantt chart models support detection structural hazards 
data hazards control hazards seen data hazards program counter detected properly 
example possible distinguish read write raw hazard read read rar access 
order detect data control hazards necessary extend gantt chart concept 
operations access storage resources memory registers specified access read write access 
second access announced advance operation manipulates storage 
example shows instructions producing hazard introduced notation id ia instruction id ia instruction instruction reserves register writing id operation announcing write access register resource descriptor performs write operation specified descriptor 
instruction shown shifted attempts read register decode operation descriptor 
supplied information data hazard register easily detected resolved interlocking shown example id ia nop nop id ia mechanism describe control hazards effects short circuiting 
special class stalls pipeline stalls introduced states cache 
pipeline behaviour cases described resource reservation external events 
order describe pipeline flushing necessary permit control instructions explicitly change sequencing mechanism generic machine model 
mechanism operations instruction entered pipeline executed 
control instructions follow rule 
order model pipeline flushing introduced descriptor operations 
kill descriptor described example section 
proposed generic machine model suited model statically scheduled pipelines 
assume pipeline fetches instruction issues conflict previous instructions 
dynamic scheduling pipeline hardware rearranges instruction execution reduce stalls needs sophisticated modeling 
example shall illustrate machine modeling lisa example tms signal processor 
pipeline tms stages interlocking short circuiting 
example description pipeline specification conditional branch instruction provided user guide processor 
presents lisa machine description tms instructions 
keywords decode schedule operate re bc id cond code opcode dest address opcode bc pf addr pc bc pf pc bc bc id condition cond code bc ac bc pf bc id bc re bc ex nop bc ac pc bc pf bc id bc re nop id bc ex nop id nop ac nop ac nop re nop re nop ex nop ex bc control addr pc bc control ir mem addr pc bc control pc opcode add id src mem opcode dest accu opcode add pf addr pc add add de add ac addr add re alu reg addr add ex add addr pc add control pc add ir mem addr add addr opcode add alu reg mem addr add dest src ld id src mem opcode dest accu opcode ld pf addr pc ld ld de ld ac addr ld re addr ld ex ld addr pc ld control pc ld ir mem addr ld addr src ld mem addr ld dest lisa description tms instructions 
information specified 
chart specified keyword schedule 
chart bc branch conditional complex single word add ld instructions 
bc instruction needs cycles branch taken branch taken 
kill descriptor describe flushing operations advanced pipeline 
program segment example consists sequential instructions add add instruction target address branch instruction 
scheduling operations delivered asap scheduler lisa generic machine model tables 
table provides operation scheduling branch taken 
note fetch add instruction happens th cycle decode th 
sequencer generic machine model able successfully model pipeline information provided charts 
table shows case branch taken 
case bc instruction specifies kill resources kill descriptor 
kill descriptor add operation execute th cycle 
kill de pf bc bc add ld bc bc add ld id bc bc add ld ac bc add ld re bc add ld ex bc add ld table scheduling bc instruction branch taken 
pf bc bc add ld bc add bc add ld add id bc bc nop nop add ac bc nop nop add re bc nop nop ex bc nop table scheduling bc instruction branch taken 
simply overloads add operation operation case nop 
way operation cancelation takes place propagation issuing instructions add ld 
examples dsp processor compiler processor accelerator emphasized importance accurate machine models 
time model silicon approach established nowadays main strategy shorten time market 
tools applications developed model silicon processor available 
new machine description language lisa generic machine model introduced 
lisa enables fast comfortable specification dsp embedded processor architectures hw sw design 
currently targeted primarily simulators generic machine model lisa equally purposes compilation 
main contribution lisa extended gantt charts charts named 
compared classical reservation tables gantt charts charts additionally permit modeling data control hazards pipeline flushing 
way pipeline interlocking bypassing modeled 
operation sequencing lisa modeled simple asap sequencing strategy obeys time resource constraints specified chart instruction 
limitation approach model order execution superscalar processors 
concentrate issues 
explore set architectures modeled lisa charts 
second shall extend lisa efficiently support compilation lisa way produce unique machine description language processor compiler design 
hennessy patterson computer architecture quantitative approach 
morgan kaufmann publishers 
tjiang meyr compiled simulation programmable dsp architectures proc 
ieee workshop vlsi signal processing osaka japan pp 
oct 
meyr compiled hw sw simulation proc 
design automation conference las vegas nv june 
int 
workshop hardware software design cambridge ma 
de micheli sami hardware software design 
kluwer academic publishers 
gajski specification design embedded systems ieee design test computers spring 
lee hardware software codesign methodology dsp applications ieee design test computers pp 
sept 
hennessy heinrich hardware software codesign processors concepts examples hardware software design de micheli sami eds kluwer academic publishers 
henry eggers marion system retargetable instruction scheduling proc 
acm sigplan conference programming language design implementation toronto canada pp 

rau vliw compilation driven machine description database proc 
nd code generation workshop leuven belgium 
nml machine description formalism tech 
rep technische universitat berlin fachbereich informatik berlin 
van describing instruction set processors nml proc 
european design test conf paris mar 
stallman porting gnu cc 
free software foundation cambridge ma ed 
architecture pipelined computers 
mcgraw hill new york ny 
baker sequencing scheduling 
john wiley sons 
texas instruments tms user guide 
