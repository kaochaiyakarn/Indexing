group theoretic examples completion theorem provers linton shand division computer science school mathematical computational sciences university st andrews st andrews scotland ky ss mail sal dcs st andrews ac uk december 
investigate performance completion theorem provers number group theoretic problems 
different character usual test problems exercise different features programs 
large rewriting systems deeply nested terms arise programs allow additional mathematical information dramatically speed computations 
compare general purpose theorem provers specialised tools conclude drawing lessons design general purpose provers 
expanded version name workshop automated reasoning algebra cade conference nancy france june 
general terms proofs mathematical results obtained ways gamma human invented proof hand gamma special purpose computations gamma automated theorem proving 
apart separate issue proof checking development automated theorem proving largely concentrated automatically deriving proofs sort results normally proved hand 
standard test examples example kind 
linton shand look number results algebra specifically area finitely groups 
completion algebra goes back focused mainly special purpose programs completing axiom systems 
contrast objective look results obtained special purpose programs represented equational reasoning completion problems investigate calculations done various general purpose completion theorem proving systems 
take view general purpose systems desirable reasons 
firstly fewer programs need written maintained debugged secondly investigate problems outside scope specialpurpose programs groups satisfying additional laws see sections 
compare performance various programs range group theoretical problems 
investigate different ways formulating problems effectiveness various special features programs ways additional mathematical information improve performance 
aim set challenge problems problems quite challenging look common features range problems 
section sets mathematical background common problems describes ways mathematical problems converted concrete problems order equational reasoning 
illustrate explicit input lp otter provers 
brevity omit explicit input files giving statement problems 
section introduces systems otter fast resolution theorem prover added knuth bendix facilities lp flexible interactive completion theorem prover specialised knuth bendix completion program strings tc fast coset enumeration program 
section look number presentations finite groups test examples computational group theory community years 
section consider presentations fibonacci groups look particular number features interest 
section look groups free groups varieties groups fixed exponent 
natural questions groups answered directly tools computational group theory lie squarely province equational reasoning 
intro tex date december time version group theoretic examples completion theorem provers section look results infinite nilpotent groups examples sims open questions engel groups 
section draw suggest number features added theorem proving systems suitable problems identify number areas research 
mathematical background material section known 
include ease establish notation 
group theoretic material 
universal algebra see 
groups presentations group defined set equipped associative binary operation identity sided inverse element 
language universal algebra signature sort binary operation written infix implied juxtaposition unary operation written postfix gamma constant class groups equational class alg called theory free group contains equations gamma gamma presentation group consists set constants set ground elements term algebra element called relator viewed denoting equation relation equation represented modulo relator tt gamma group initial algebra signature subject equations group theory see details see information specifically presentations see 
determining structure groups finite presentations major area computational endeavour group theorists nineteenth century 
intro tex date december time version linton shand mechanical procedure formalised todd coxeter advent electronic computers 
computer implementations procedure called coset enumeration followed soon hardware available algorithm progressively refined 
algorithm related methods theorem proving constructs concrete representation group information structure efficiently determined 
information determined ground complete rewriting system equational theory group finite easy see system exist construct knuth bendix completion 
method advantage complete system may exist group finite todd coxeter algorithm terminate case leaving aside question enumerating subgroup 
sims shown knuth bendix completion purposes verifying isomorphisms finitely groups 
alternative formulation problems description formulate group presentation order equational theory turns inefficient practice 
reason easy see 
ordering 
words delta delta delta gamma delta delta delta delta delta delta gamma delta delta delta normal form putting normal form involve rewriting steps 
possible avoided developing special matching unification completion procedures associative operators lines ac operators avoid alternative formulation problems 
note theory free group ground term equivalent term form delta delta delta gamma delta delta delta gamma form new signature sigma sort jcj unary operations transform intro tex date december time version group theoretic examples completion theorem provers term term sigma putting form writing delta delta delta gamma delta delta delta ae gamma term replaced variable consider equational theory equations hard see formulation equivalent original sense bijection initial algebras operations modelled 
new formulation associativity built term structure dramatically reducing amount rewriting needed 
hand fact group elements longer sorts signature prevents quantification group additional laws example stated 
alternative formulation examples wish special features programs suitable 
theoretical results groups deal finite nilpotent existence finite complete rewriting system doubt 
concern obtaining system explicitly 
large body theory concerning exactly groups finite complete rewriting systems indicate high points 
approach typically topological extending directed graph words connected elementary rewriting steps higher dimensional cell complex 
important result groups satisfy finiteness condition called fp non fp groups solvable word problem known shows groups solvable word problem finite complete rewriting systems 
soluble groups fp groups finite complete rewriting systems conjectured true soluble groups general see 
intro tex date december time version linton shand shown group finite complete rewriting system presentation group property called finite derivation type note possible finite complete rewriting system respect set generators respect 
derivational complexity string rewriting system measure number rewriting steps needed show equivalence strings grow length strings increases 
rewriting system group presentation show position derivational complexity grzegorczyk complexity hierarchy related various properties group 
results hold monoids groups 
notation brevity introduce additional operators defined terms gamma define gamman gamma gamma gamma gamma example clarify consider small presentation ab see appear formulation otter lp input file 
input files appear figures 
programs programs experiments 
general purpose theorem provers capable knuth bendix completion specialised completion program coset enumeration program 
intro tex date december time version group theoretic examples completion theorem provers set knuthbendix 
set 
lex 
list sos 








fig 

otter input formulation set knuthbendix 
set 
lex 
list sos 









fig 

otter input alternative formulation otter otter resolution style theorem proving program built version knuth bendix completion algorithm 
otter mainly designed non interactive primitive interactive mode 
otter choice ordering completion lexicographic recursive path order 
otter version 
larch larch prover lp interactive proof debugger implementation knuth bendix completion algorithm 
lp number distinct orderings implement polynomial orderings user intro tex date december time version linton shand declare sort el declare operators el el 
el el el 
el 
el 
el 
declare variables el register height assert 
complete fig 

lp input formulation declare sort el declare operators el 
el el 
el el 
el el 
el 
declare variables el assert 
complete fig 

lp input alternative formulations intro tex date december time version group theoretic examples completion theorem provers input 
uses default ordering called recursive path ordering left 
efficient programs lp tests greater degree interaction extra features useful examples 
lp version beta 
string knuth bendix alternative formulation described section terms arise simply strings unary operators knuth bendix completion procedure optimised number ways 
simpler data structures efficient indexing rewriting procedures 
described 
fast implementation called algorithm due derek holt 
version number version current late 
tc todd coxeter coset enumeration algorithm mentioned 
george havas fast flexible implementation version 
programs input files output obtain results obtained authors 
cpu times obtained sparcstation megabytes main memory running sunos 
times seconds indicated 
finite groups section examine number presentations test examples todd coxeter algorithm report performance various knuth bendix completion programs 
examples take examples established computational group theorists landmark study 
tables report performance various versions todd coxeter algorithm number non pathological pathological examples 
pathological examples show large expansion intermediate data structures collapse smaller final result 
pathological examples repeated versions algorithm 
intro tex date december time version linton shand examples involve enumeration cosets non trivial subgroup corresponds special form ground completion supported programs omit examples 
left non pathological examples pathological ones 
non pathological cases ab bc ca abc ab gamma ab ab gamma ab gamma ab gamma bab ab gamma ab ab ab gamma gamma ab ji gamma jj group see section 
weyl group type 
pathological cases gamma rtr gamma gamma srs gamma gamma tst gamma ab ab ba gamma ab gamma gamma gamma gamma intro tex date december time version group theoretic examples completion theorem provers ab bc ca abc gamma gamma bab gamma aba gamma gamma gamma aba gamma bab gamma gamma gamma bab gamma aba gamma gamma gamma aba gamma bab gamma gamma gamma bab gamma aba gamma gamma gamma aba gamma bab gamma presentation called due higman 
infinite series presentations due neumann trivial group 
member series defined letting gamma tst gamma gamma rtr gamma gamma srs gamma gamma rtr gamma gamma srs gamma gamma tst gamma relators expanded words length easy show theoretically knuth bendix completion presentation presents trivial group demonstrated coset enumeration 
groups table gives results havas program 
table ii gives results specialised knuth bendix program length lexicographic recursive path orderings 
table iii gives results obtained otter 
number observations drawn figures 
firstly low level simplicity high level development coset enumeration faster cases example defines numerous redundant cosets knuth bendix techniques go directly complete system 
examples case suggest knuthbendix procedure may show insight structure group coset enumeration 
secondly recursive path ordering nearly uses fewer rules maximal final system length lex ordering usually faster faster smaller systems suggest 
irreducible strings usually longer 
especially cases generators top precedence quickly eliminated 
notable exceptions related presentations cases rpo gives rise extremely increasingly long rules otter uses rpo complete presentations 
detailed examination output otter suggests time spent forwards lesser extent back demodulation intro tex date december time version linton shand table results coset enumeration group order max 
cosets total cosets time rewriting 
comparison specialised program suggests difference asymptotic complexity rewriting size rule system increases constant difference expected otter greater generality 
case remarkable large group represented small complete rewriting system 
explained fact coxeter group respect canonical generating system simple roots 
large theory groups complex describe important results describe conditions word multiplied generator equal word length equal results come close specifying small complete rewriting system directly close systems obtained programs 
details see chapter 
intro tex date december time version group theoretic examples completion theorem provers table ii results specialised knuth bendix completion program group length lex rpo name order max 
rules final rules time max 
rules final rules time transforming presentations computational group theory necessary transform presentations simpler form means priority reduce number generators second priority reduce number size relators 
finitely group isomorphic finitely group possible transform presentation sequence operations called transformations gamma adding generator gamma removing generator gamma adding relation gamma removing relation intro tex date december time version linton shand table iii results otter theorem proving program group order rules kept rules final rules time course certain restrictions allowed similarity happening doing completion 
adding deleting rules obviously equivalent forming critical pairs normalisation 
add relations choosing string generators delta delta delta am say extend ordering introducing new generator say puts delta delta delta am say generator removed rule delta delta delta am occur delta delta delta am look example symmetric group presentation uses gamma generators presentation symmetric group generators transform presentation gamma generators presentation generators 
look particular case 
appropriate ordering complete system equations ordering lp version lexicographic recursive path intro tex date december time version group theoretic examples completion theorem provers ordering precedences 
add new rules firstly introducing new generator rule secondly rules inverse element ba complete new set rules extra precedences new generator get system lp group 
group 
group 
group 
group 
group 
group 
shows generate gives rise family examples transform symmetric group presentation equivalent generators 
technique able prove equivalence finite group presentation yield examples 
number interesting presentations see johnson book 
fibonacci groups give interesting test case completion theorem provers 
define fibonacci group delta delta delta delta delta delta gamma small values complete system exists deduced group finite obtain completion appropriate ordering 
groups introduced john conway posed question prove group isomorphic cyclic group order 
number suggestions problem solved answers involved rewriting easy replace equals equal hand 
presentation fibonacci group quite circular immediately obvious able cut search space large examples viable 
want prove group cyclic case intro tex date december time version linton shand eliminate gamma generators 
get ordering 
ordering lexicographic rpo totally orders generators orders terms initially largest generator contain encourage elimination generators just precedence delta delta delta kbo weighted way job generator elimination weight get similar precedence 
transformation program section transform presentation generators relations 
general purpose theorem provers completion procedure generated relations know sufficient presentation generators matching rewriting done completion example presentation transformed presentation 
see really large done hand 
isomorphic cyclic group order proving cyclic considered relatively difficult group theorists regular tools nilpotent quotient algorithm todd coxeter procedure 
communication example took minutes redux system 
completed kbo weighting total desired way operators 
critical pair criterion called transformation criterion 
little understood criteria problems better 
progress area especially valuable allowed exploit information structure system 
tables show experiments 
lp complete presentation pre processed 
otter struggled example large rewrite rules large numbers rules otter cope 
otter completed pre processed presentation 
specialised programs extremely quick 
example see special purpose programs group theorists far quicker general purpose provers doing lot extraneous 
noted havas todd coxeter program doing lot extra example calculates cosets minimum number 
short run time shows efficient coding program really reflect badly theorem provers testing 
great deal literature fibonacci groups generalisations 
examples type campbell johnson 
instance look longer strings left hand sides relations form delta delta delta indices intro tex date december time version group theoretic examples completion theorem provers table iv completed lex ordering rewrites cpu time na kb na na table iv completed lex code description completed lp completed otter todd coxeter method kb knuth bendix holt pre processed total cosets defined worked mod 
generalisations look relations parameter giving length right hand sides equations 
non trivial finite groups infinite 
course knuth bendix completion complete certain presentations infinite groups 
unable complete presentation finite complete system 
groups areas feel automated theorem proving programs applicable group theory study varieties groups satisfy additional laws 
examples include variety abelian groups satisfying xy variety nilpotent groups class satisfying attempting study varieties simply completing axioms usually fail giving rise equations 
unfailing completion fail terminate 
intro tex date december time version linton shand completeness stronger condition really necessary 
ground completeness suffice undecidable general 
authors hope investigate application techniques demonstrate ground completeness 
section consider simple results proved case variety groups exponent 
group free generator group variety groups satisfying additional law groups extensively studied computationally theoretically number important questions remain open 
attempting complete fx quickly encounter laws 
unfailing knuth bendix appear terminate 
special case unfailing knuth bendix otter example prove easily fx fact ac operator ac completion fx easy 
case prime power theoretically interesting case finite quotients nilpotent 
quotients explored modified version nilpotent quotient algorithm viewed specialised knuth bendix completion procedure 
investigation finite quotients theory reveals groups finite nilpotent class greater 
proving amounts showing fx tackling problem automatically capability current theorem proving programs essentially expands word letters 
generator group nilpotent class may proved showing constants fx results appear represent limit achieved automatically exponent law law easy prove group finite exist words am intro tex date december time version group theoretic examples completion theorem provers finite collection nth powers sufficient 
experimentation say todd coxeter program little theory quickly shows am ab ab bc ca abc bc ab abc ab gamma ab gamma bab ab gamma ab case example section 
gathering problems theorem proving problems handled specialist group theory programs fx fx fx presentations order order 
attempted problems whichever lp otter specialised knuth bendix program recursive path ordering todd coxeter appropriate 
otter autonomous mode problems lp set prove results completion problem slightly rephrased prove xy yx 
long time taken lp problem partly due lack fast matcher partly due high cost ordering deeply nested terms arise 
intro tex date december time version linton shand table run times group problems problem lp otter nilpotent groups sims example sims introduces algorithm proves groups 
new tool group theorists nilpotent quotient algorithm gives largest nilpotent quotient group say equals group 
sims uses special purpose knuth bendix algorithm groups try certain examples claims fast results groups tried 
groups provide test completion theorem provers bring interesting points provers 
main examples sims uses pose problem quotient free group generators normal subgroup generated certain set basic appropriate free nilpotent group 
gives necessary input examples weight 
family examples interesting dealing infinite groups 
finite presentation group algorithm looks structure complete system presentation ordering 
prove group nilpotent output prove group infinite 
interesting aspect example sims collected ordering 
ordering forces generators lower central series group total ordering precedence generators 
may intuitive group theorists widely seen theoretical computer science circles intro tex date december time version group theoretic examples completion theorem provers recursive path ordering 
direct mathematical application ordering widely seen important theoretical computer science 
example reflects need flexible heuristics completion theorem provers 
orienting equations find size left hand sides equations example means equations length left hand sides 
otter weight equations differently formation critical pairs done respect weighting strategy total control procedure 
lp fixed heuristic looks size left hand sides 
statistics cases 
tried complete presentation table 
second tried fool heuristic stacking generators side corresponding heuristic table equation gamma third case heuristic reimplemented program author corresponding heuristic table look size left right hand sides 
examples generate large number equations involve large search space long time useful information emerges cut size problem 
obvious subsets equations complete search space may large provers handle 
various ways cut prover 
example automated group theoretic theorem group centre nilpotent nilpotent 
automated proofs sims example useful group theorists automate standard results group theory powerful methods proof intuitive proofs may result 
able automate theorem lp called deduction rules 
rules allow deduce new equations equations rewrite rules exist 
cut theorem prover needs 
necessary prove group nilpotent indexing strategy lp able deal effectively vast numbers rules generated 
deduction rule assert yield id obviously invoke theorem constant generators assert theorems higher order logic order theorem prover 
statistics look case theorem case unary operators 
intro tex date december time version linton shand table vi statistics sims example method ordering rewrites cpu time na na table vi statistics sims example code description lp otter completion group axioms completion unary operators extra information added factoring theorem implemented change cp ing strategy lp stacking operators side sort automation theorem obviously property general purpose theorem prover 
theorems implemented way 
see table huge number rewrites lp doing case 
mainly indexing strategy 
lp uses list index equations vast number equations formed strategy help 
see otter doing rewriting lp 
specialised knuth bendix quicker shows unsurprising advantage indexing strategy uses complete presentation 
intro tex date december time version group theoretic examples completion theorem provers engel groups groups example groups laws outstanding questions may able resolved completion 
group presentation words nilpotent quotient algorithm gives generating set largest nilpotent quotient group algorithm mentioned prove isomorphic group defined 
nilpotent 
get generating set largest nilpotent quotient specific instances law format inverses rels obvious generalisations value increasing number example 
example relatively easy complete show nilpotent 
conjectured higher values nilpotent unknown 
treat laws discussed section able solve problems 
basic calculations normally done specialpurpose programs completed todays general purpose systems large performance penalty specialised programs remain time 
hand general purpose systems allow intro tex date december time version linton shand address problems scope specialised tools section apply additional mathematical insight section 
lessons design general purpose systems identified number features general purpose systems suitable kinds problems examined gamma better user control heuristics orderings 
mathematical information easily stated order language problem exploited way 
gamma facility distinguish certain rules special 
optimisations specialised knuth bendix program amount forming critical pairs certain rules particular times 
gamma efficient handling large rewriting systems deeply nested terms 
interesting problems short direct solutions 
gamma implementation special matching unification procedures associative operators mentioned section 
directions combining special general purpose systems approach sort computation combine flexibility generalpurpose systems speed specialised programs allowing generalpurpose systems delegate suitable sub problems special purpose system 
approach cooperating decision procedures added lp tactic languages ability invoke external programs results oracle source hypotheses 
interesting try methods combine generalpurpose theorem prover existing group theoretic tools 
ground completion problems determining structure finitely group computing group exponent complete rewriting system necessary 
ground complete system sufficient 
known testing ground completeness undecidable general number methods attempting suggested 
intend intro tex date december time version group theoretic examples completion theorem provers find write suitable implementations methods see perform practice 
mentioned briefly section coset enumeration look structure finitely group relative subgroup 
terms knuthbendix procedure strings corresponds having certain rewrite rules apply match string 
terms order logic problem formalised algebra sorts require rewriting system complete ground terms sort 
implementation restricted completion procedures kind great interest 
transforming presentations completion alternative supplement transformation procedures promising 
conversely idea defining new generators replace repeated substrings standard transformation help completion problems 
groups semigroups laws sections alluded various open questions theory varieties groups subject additional laws 
theory varieties semigroups semigroup simply set associative binary operation richer 
believe automated theorem proving completion particular enable significant progress areas 

anick homology associative algebra transactions ams pp 


finite group theory cambridge studies advanced mathematics cambridge 

bachmair dershowitz plaisted completion failure proc 
coll 
resolution equations algebraic structures 

brown geometry rewriting systems proof anick groves theorem algorithms classification combinatorial group theory miller eds springer verlag pp 


mail communication 

term completion versus algebraic completion technical report wsi wilhelm institut universitat tubingen tubingen 

walter redux user guide version wilhelm institut fur informatik universitat tubingen germany 

campbell coxeter robertson families finite groups having generators relations proceedings royal society london pp 

intro tex date december time version linton shand 
campbell robertson finitely groups fibonacci type ii journal australian mathematical society pp 


cannon havas watson implementation analysis todd coxeter algorithm math 
comp pp 


conway advanced problem american mathematical monthly 

conway solution advanced problem american mathematical monthly pp 


epstein holt rees knuth bendix methods solve word problem automatic groups symb 
comp 
pp 


garland guttag guide lp larch prover tech 
report dec src dec 

groves rewriting systems homology groups groups canberra kov acs 
ed lecture notes mathematics springer verlag heidelberg pp 


groves smith soluble groups finite rewriting system proc 
edinburgh math 
soc pp 


havas coset enumeration strategies technical report key centre software technology university queensland 

havas newman applications computers questions groups ed 
lecture notes mathematics vol 
pp 
springer verlag berlin 

der lange illinois math 


higman finitely generated infinite simple group london math 
soc 
pp 


humphreys reflection groups coxeter groups cambridge studies advanced mathematics cambridge 

note special rule semi thue system inf 
proc 
letters pp 


johnson topics theory group presentations cambridge university press cambridge 

johnson wright fibonacci groups proceedings london mathematical society pp 


kapur narendran finite thue system decidable word problem equivalent finite canonical system theoret 
comput 
science pp 


knuth bendix simple word problems universal algebras computational problems algebra ed 
leech pergamon press oxford pp 


le canonical forms finitely algebras proceedings th international lncs springer pp 


group theory longman 

mccune otter manual guide argonne national laboratories 

otto pseudo natural algorithms word problem finitely monoids groups symb 
comp 
pp 


otto pseudo natural algorithms finitely generated presentations monoids groups symb 
comp 
pp 


martin lai experiments completion theorem prover journal symbolic computation pp 


martin nipkow ordered rewriting confluence automated deduction cade lnai springer verlag pp 


meinke tucker universal algebra handbook logic computer science vol 
abramsky gabbay maibaum eds clarendon oxford pp 


sims verifying journal symbolic computation pp 


sims knuth bendix procedure strings substitute coset enumeration symb 
comp pp 


sims computation finitely groups cambridge 
intro tex date december time version group theoretic examples completion theorem provers 
word problems homological finiteness condition monoids pure appl 
algebra pp 


finiteness condition rewriting systems preprint 

sutcliffe tptp problem library automated deduction cade ed 
bundy lnai springer verlag pp 


todd coxeter practical method enumerating cosets finite group proc 
edinburgh math 
soc pp 


vaughan lee restricted problem oxford 
intro tex date december time version 
