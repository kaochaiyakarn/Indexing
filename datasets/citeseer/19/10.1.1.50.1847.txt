multithreaded dependence graphs concurrent java programs zhao department computer science engineering fukuoka institute technology ku fukuoka japan zhao cs fit ac jp understanding program dependencies computer program essential software engineering activities including program slicing testing debugging reverse engineering maintenance 
dependence representation called multithreaded dependence graph extends previous dependence representations represent program dependencies concurrent java program 
discuss important applications multithreaded dependence graph maintenance environment concurrent java programs 
java new object oriented programming language achieved widespread acceptance emphasizes portability 
java multithreading capabilities concurrent programming 
provide synchronization asynchronously running threads java language runtime system uses monitors 
nondeterministic behaviors concurrent java programs predicting understanding debugging concurrent java program difficult sequential object oriented program 
concurrent java applications going accumulated development techniques tools support understanding debugging testing maintenance complexity measurement concurrent java software important issue 
program dependencies dependence relationships holding program statements program implicitly determined control flows data flows program 
intuitively computation statement directly indirectly affects computation statement program exist program dependence statements 
program dependence analysis process determine program dependencies analyzing control flows data flows program 
compiler optimizations program analysis testing techniques rely program dependence information topically represented representation dbr example program dependence graph pdg 
pdg originally proposed compiler optimizations various software engineering activities including program slicing debugging testing maintenance complexity measurements 
example program slicing decomposition technique extracts program statements related particular computation greatly benefit pdg slicing problem reduced vertex reachability problem simpler original algorithm 
originally constructed procedural programs 
object oriented software popular researchers applied objectoriented programs represent various object oriented features classes objects class inheritance polymorphism dynamic binding concurrency 
detailed discussions see related section 
existing object oriented software applied concurrent java programs straightforwardly due specific features java concurrency model 
order represent full range concurrent java program extend existing representing concurrent java programs 
dbr called multithreaded dependence graph extends previous represent various types dependencies concurrent java program 
multithreaded dependence graph concurrent java program consists collection thread dependence graphs representing single thread program special kinds dependence arcs represent thread interactions different threads 
discuss important applications multithreaded dependence graph maintenance environment concurrent java programs 
rest organized follows 
section briefly introduces concurrency model java 
section discusses related explains existing represent concurrent java programs correctly 
section presents mul dependence graph concurrent java programs 
section discusses applications graph 
concluding remarks section 
concurrency model java java supports concurrent programming threads language runtime system 
thread single sequential flow control program 
similar sequential program sense thread start sequence execution time runtime thread single point execution 
thread program run independently run program 
programs multiple synchronous threads called multithreaded programs topically 
java provides thread class library defines set operations thread start join suspend resume 
java uses shared memory support communication threads 
objects shared threads called condition variables access synchronized 
java language runtime system support thread synchronization monitors 
general monitor associated specific data item condition variable functions lock data 
thread holds monitor data item threads locked inspect modify data 
code segments program access data separate concurrent threads known critical sections 
java may mark critical sections program synchronized keyword 
java provides methods object class wait notify notifyall support synchronization different threads 
operations different mechanism threads cooperate complete valid method sequence shared object 
java program begins execution main method 
thread execution main method thread running program started 
execution threads started calling start methods begins execution corresponding run methods 
shows simple concurrent java program implements producer consumer problem 
program creates threads producer consumer 
producer generates integer stores cubbyhole object 
consumer consumes integers cubbyhole quickly available 
threads producer consumer example share data common cubbyhole object 
execute program correctly condition satisfied producer ce class producer extends thread private cubbyhole cubbyhole private int number public producer cubbyhole int number cubbyhole number number te public void run int cubbyhole put system println producer number put sleep math random ce class consumer extends thread private cubbyhole cubbyhole private int number public consumer cubbyhole int number cubbyhole number number te public void run int value int value cubbyhole get system println consumer number get value sleep int math random ce class cubbyhole private int seq private boolean available false public synchronized int get available false wait available false notify return seq public synchronized int put int value available true wait seq value available true notify ce class public static void main string args cubbyhole new cubbyhole producer new producer consumer new consumer start start concurrent java program 
put new integer cubbyhole previously put integer extracted consumer consumer wait producer put new integer cubbyhole empty 
order satisfy condition activities producer consumer synchronized ways 
threads simultaneously access cubbyhole 
java thread handle monitor lock object described previously 
second threads simple cooperation 
producer way inform consumer value ready consumer way inform producer value extracted 
done collection methods wait helping threads wait condition notify notifyall notifying threads condition changes 
related essential representation useful compiler optimization program analysis dbr widely studied literatures 
section review related directly indirectly influence explain applied concurrent java programs 
widely studied context procedural programming languages time knowledge apply existing concurrent java programs 
procedural programs ferrante dbr called program dependence graph explicitly represent control data dependencies sequential procedural program single procedure 
horwitz extended program dependence graph introduce dbr called system dependence graph sdg represent sequential procedural program multiple procedures 
cheng dbr called process dependence net generalization program dependence graph represent program dependencies concurrent procedural program single procedure 
represent features procedural program lack ability represent objectoriented features concurrent java programs 
object oriented programs larsen harrold extended sdg proposed handle interprocedural slicing sequential procedural programs case sequential object oriented programs 
sdgs represent object oriented features classes objects polymorphism dynamic binding 
sdgs compute sequential objectoriented programs belong class sdgs defined pass slicing algorithm introduced sequential procedural programs compute slices sequential object oriented programs 
chan yang adopted similar way extend sdgs sequential procedural programs sequential object oriented programs extended sdg computing static slices sequential object oriented programs 
hand krishnaswamy proposed dbr called objectoriented program dependency graph represent sequential object oriented programs compute polymorphic slices sequential object oriented programs object oriented program dependency graph 
chen extended program dependence graph object oriented dependency graph modeling sequential object oriented programs 
represent features sequential object oriented programs lack ability represent concurrency issues represent concurrent java programs 
zhao dbr called system dependence net represent concurrent object programs especially compositional cc programs 
cc synchronization different threads realized single assignment variable 
threads share access single assignment variable variable synchronization element 
system dependence net cc programs straightforward extension sdg proposed larsen harrold sequential object oriented programs represent object oriented features cc program 
handle concurrency issues cc approach proposed cheng originally representing concurrent procedural programs single procedures 
approach applied concurrent java programs problems due reason 
concurrency models cc java essentially different 
java supports monitors low level thread synchronization primitives cc uses single assignment variable mechanism realize thread synchronization 
difference leads different sets concurrency constructs languages requires different techniques handle 
dependence representation concurrent java programs generally concurrent java program number threads having control flow data flow 
flows independent interthread synchronizations multiple control flows inter thread communications multiple data cubbyhole cubbyhole cubbyhole cubbyhole number number number number number seq seq available available control dependence arc data dependence arc parameter dependence arc call dependence arc te te thread producer thread available available value value value number cubbyhole cubbyhole number number number number threads producer consumer 
flows may exist program 
represent concurrent java programs dependence representation called multithreaded dependence graph 
multithreaded dependence graph concurrent java program composed collection thread dependence graphs representing single thread program special kinds dependence arcs represent thread interactions different threads 
section show construct thread dependence graph single thread multithreaded dependence graph complete concurrent java program 
thread dependence graphs single threads thread dependence graph represent single thread concurrent java program 
similar sdg larsen harrold modeling sequential object oriented program 
execution behavior thread concurrent java program similar sequential object oriented program 
technique larsen harrold constructing sdg sequential object oriented programs construct thread dependence graph 
detailed information building sdg sequential object oriented program 
briefly describe construction method 
thread arc classified digraph consists number method dependence graphs representing method contributes implementation thread special kinds dependence arcs represent direct dependencies call called method transitive interprocedural data dependencies thread 
unique vertex called thread entry vertex represent entry thread 
method dependence graph method digraph vertices represent statements control predicates conditional branch statements method arcs represent types dependencies control dependence data dependence 
control dependence represents control conditions execution statement expression depends method 
data dependence represents data flow statements method 
method dependence graph unique vertex called method entry vertex represent entry method 
example method entry vertices methods get put 
order model parameter passing methods thread method dependence graph includes formal parameter vertices actual parameter vertices 
method entry formal vertex formal parameter method formal vertex formal parameter may modified method 
call site method call vertex created connecting called method actual vertex actual parameter actual vertex actual parameter may modified called method 
formal parameter vertex control dependent method entry vertex actual parameter vertex control dependent call vertex 
special kinds dependence arcs created combining method dependence graphs methods thread form thread 
ffl call dependence arc represents call relationships call method called method created call site method entry vertex called method 
ffl parameter dependence arc represents parameter passing actual parameters formal input parameter formal parameter called method 
ffl parameter dependence arc represents parameter passing formal output parameters actual parameters formal parameter defined called method 
addition methods parameter dependence arcs represent data flow return value method exit call site 
shows threads producer consumer 
entry vertex corresponds statement run method 
example entry vertex thread producer te entry vertex thread consumer te 
multithreaded dependence graphs concurrent java programs multithreaded dependence graph mdg concurrent java program arc classified digraph consists collection representing single thread special kinds dependence arcs model thread interactions different threads program 
capture synchronization thread synchronization statements communication shared objects different threads define special kinds dependence arcs mdg 
synchronization dependencies synchronization dependence capture dependence relationships different threads due inter thread synchronization 
ffl informally statement thread synchronization dependent statement thread start termination execution directly start termination execution inter thread synchronization 
java synchronization dependencies different threads may caused ways 
show create synchronization dependence arc 
wait notify relations synchronization realized wait notify notifyall method calls different threads 
case synchronization dependence arc created vertex vertex denoted notify notifyall call thread denotes wait call thread thread object threads different 
special case threads waiting notification thread case create synchronization dependence arcs vertex denoted notify call vertex denoted wait call threads respectively 
example program methods put get java object notify wait methods cooperate activities 
means pe cubbyhole cubbyhole cubbyhole cubbyhole number number number number number seq seq available available control dependence arc data dependence arc synchronization dependence arc parameter dependence arc call dependence arc communication dependence arc te te thread producer thread available available value value value number cubbyhole cubbyhole number number number number mdg concurrent java program 
exists synchronization dependencies wait method call producer notify method call notify method call producer wait method call consumer 
create synchronization dependence arcs showed 
join relations case may cause inter thread synchronization join relationship thread calling join method thread may proceed target thread terminates 
case synchronization dependence arc created vertex vertex denotes statement thread denotes join call thread threads different 
communication dependencies communication dependence capture dependence relationships different threads due inter thread communication 
ffl informally statement thread directly communication dependent statement thread value variable computed direct influence value variable computed inter thread communication 
java uses shared memory support communication threads 
communications may occur parallel executed threads exchange data shared variables 
case communication dependence arc created vertex vertex denotes statement thread denotes statement thread thread object shares common variable different 
special case thread waiting notification thread attribute shared threads communication element 
case create communication dependence arcs statement containing variable threads statement containing variable thread respectively 
example program methods put get java object notify wait methods cooperate activities 
way seq placed cubbyhole producer extracted consumer 
analyzing source code know exist interthread communication statement thread producer statement share variable seq 
similarly inter thread communications may occur statements due shared variable available 
result communication dependence arcs created showed 
constructing mdg construction mdg complete concurrent java program done combining threads program synchronization communication points adding synchronization communication dependence arcs points 
purpose create entry vertex mdg represents entry program construct method dependence graph main method 
control dependence arcs connect entry vertex statement vertex method dependence graph main class 
start arc created start method call main method corresponding thread entry vertex 
synchronization communication dependence arcs created statements related thread interaction different threads 
note focus concurrency issues java sequential object oriented features may exist concurrent java program discussed 
represent features sequential object oriented programs dependence graphs discussed researchers 
techniques directly integrated mdg concurrent java programs 
order develop practical mdg concurrent java programs specific features java interfaces packages considered 
technique constructing dependence graph representing interfaces packages sequential java programs 
technique integrated directly mdg representing interfaces packages concurrent java program 
shows mdg program 
consists threads producer consumer additional synchronization communication dependence arc model synchronization communication producer consumer 
cost constructing mdg size mdg critical applying practical development environment concurrent java programs 
section try predicate size mdg larsen harrold give estimate size sdg sequential object oriented program 
mdg similar sdg sequential object oriented program apply approximation estimate size single thread concurrent java program 
cost table parameters contribute size 
vertices large number statements single method arcs large number arcs single method params largest number formal parameters method largest number class variables class largest number instance variables class callsites largest number call sites method depth inheritance tree determining number possible indirect call destinations method number methods mdg program got combining sizes program 
table lists variables contribute size 
give bound number parameters method bound compute upper bound size method size 
size number methods methods single thread compute upper bound size number vertices including classes contribute size thread 
params 
size vertices callsites 
size size methods 
result single thread compute upper bound number vertices size mdg mdg complete concurrent java program including threads 
size mdg size dg note size size mdg give rough upper bound number vertices mdg 
practice believe mdg may considerably space efficient 
applications mdg having mdg dbr concurrent java programs discuss important applications mdg maintenance environment concurrent java programs 
slicing concurrent java programs purpose constructing mdg concurrent java program computing static slices program 
section define notions statically slicing concurrent java program show compute static slices concurrent java program mdg 
static slicing criterion concurrent java program tuple statement program variable method call called static slice ss concurrent java program static slicing criterion consists statements program possibly affect value variable value returned method call mdg proposed concurrent java program regarded extension sdgs sequential object oriented programs procedural programs pass slicing algorithm proposed compute static slices concurrent java program mdg 
step algorithm traverses backward arcs parameter arcs set marks vertices reached mdg second step algorithm traverses backward vertices having marks step arcs call parameter arcs sets marks reached vertices mdg 
slice union vertices mdg marks second steps 
similar backward slicing described apply forward slicing algorithm mdg compute forward slices concurrent java programs 
shows backward slice represented shaded vertices computed respect slicing criterion seq 
addition slicing complete concurrent java program perform slicing single java thread independently 
may helpful analyzing single thread involved inter thread synchronization communication 
static slicing criterion thread concurrent java program tuple statement thread variable method call called static thread slice ss concurrent java program static slicing criterion consists statements thread possibly affect value variable value returned method call similarly pass slicing algorithm proposed compute static thread slices thread concurrent java program 
understanding maintenance attempt understand behavior concurrent java program usually want know variables statements affect variable pe cubbyhole cubbyhole cubbyhole cubbyhole number number number number number seq seq available available control dependence arc data dependence arc synchronization dependence arc parameter dependence arc call dependence arc communication dependence arc te te thread producer thread available available value value value number cubbyhole cubbyhole number number number number slicing criterion seq backward slice respect slicing criterion seq 
interest variables statements affected execution variable interest program 
discussed slicing forward slicing mdg concurrent java program satisfy requirements 
hand problems software maintenance ripple effect code change program affect behavior codes program 
maintain concurrent java program necessary know variables statements affected modified variable variables statements affect modified variable 
needs satisfied slicing forward slicing program maintained 
complexity measurement software metrics applications software engineering activities including program understanding debugging testing analysis maintenance project management 
imagine complexity metrics proposed concurrent java programs helpful development concurrent java programs 
mdg concurrent java program represents data flows properties program mdg define metrics measuring complexity concurrent java programs different viewpoints 
instance metric defined sum program dependencies concurrent java program measure total complexity program metric defined number synchronization communication dependencies concurrent java program measure complexity concurrency program proportion program dependencies concerning concurrency synchronization communication dependencies program dependencies concurrent java program measure degree concurrency program 
concluding remarks multithreaded dependence graph mdg extends previous represent various types dependencies concurrent java program 
mdg concurrent java program consists collection thread dependence graphs representing single thread program special kinds dependence arcs represent inter thread synchronization communication 
discussed important applications mdg maintenance environment concurrent java programs 
approach term java believe aspects approach widely applicable applied slicing programs monitor synchronization primitive ada protected types 
mdg introduced represent dependencies concurrent java program statement level 
large scale software systems developed java dependencies may efficient system usually contains numerous components interested high level dependence relations dependencies components 
case new dependence analysis technique called architectural dependence analysis determine dependencies components system architectural level 
contrast traditional dependence analysis architectural dependence analysis designed operate architectural specification system source code conventional program 
architectural dependence analysis provides knowledge dependencies high level architecture software system low level implementation details conventional program 
considering integrate architectural dependence analysis traditional dependence analysis framework support dependence analysis largescale software systems developed java statement level architectural level 
believe approach helpful developing understanding large scale software systems developed java 
developing dependence analysis tool javacc java parser generator developed sun microsystems automatically construct multithreaded dependence graph concurrent java programs 
author anonymous referees valuable suggestions comments earlier drafts 
agrawal demillo spafford debugging dynamic slicing backtracking software practice experience vol pp 
bates horwitz incremental program testing program dependence graphs conference record th annual acm symposium principles programming languages pp 
carlin chandy kesselman compositional language definition technical report cs tr department computer science california institute technology 
chan yang program slicing system object oriented programs proc 
international computer symposium december 
chen wang chen slicing object oriented programs proc 
asia pa cific software engineering conference pp december 
cheng process dependence net distributed programs applications development distributed systems proc 
ieee cs th annual compsac pp 
ferrante ottenstein warren program dependence graph optimization acm transaction programming language system vol pp 
gallagher lyle program slicing software maintenance ieee transaction software engineering vol pp 
horwitz reps binkley interprocedural slicing dependence graphs acm transaction programming language system vol pp 
kamkar fritzson bug localization algorithmic debugging program slicing proc 
international workshop programming language implementation logic programming lecture notes computer science vol pp springer verlag 
korel program dependence graph static program testing information processing letters vol pp 
krishnaswamy program slicing application object oriented program dependency graphs technical report tr department computer science clemson university 
kuck kuhn padua wolfe dependence graphs compiler optimizations conference record th annual acm symposium principles programming languages pp 
larsen harrold slicing objectoriented software proc 
th international conference software engineering march 
mcgregor krishnaswamy program representation object oriented software acm sigplan notices vol pp 
ottenstein ottenstein program dependence graph software development environment acm software engineering notes vol pp 
podgurski clarke formal model program dependences implications software testing debugging maintenance ieee transaction software engineering vol pp 
reps horwitz sagiv speeding slicing proc 
nd acm conference foundations software engineering pp december 
stafford wolf architectural level dependence analysis support software maintenance proc 
rd international software architecture workshop pp november 
sarkar concurrent execution semantics parallel program graphs program dependence graphs proceedings th international workshop languages compilers parallel computing vol pp 
sun microsystems www com javacc 
tip survey program slicing techniques journal programming languages vol pp september 
weiser program slicing ieee transaction software engineering vol pp 
zhao cheng static slicing concurrent object oriented programs proc 
th ieee annual international computer software applications conference pp august 
zhao dependence analysis support software architecture understanding li ed new technologies computer software pp international academic publishers september 
zhao cheng dependence representation concurrent object oriented software maintenance proc 
nd euromicro conference software maintenance reengineering pp march 
zhao applying program dependence analysis java software proc 
international computer conference taiwan december 
