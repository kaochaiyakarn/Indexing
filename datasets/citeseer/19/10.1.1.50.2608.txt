lisp symbolic computation international journal fl kluwer academic publishers manufactured netherlands monads composable continuations philip wadler wadler dcs glasgow ac uk department computing science university glasgow glasgow qq scotland keywords monads continuations continuation passing style types 
moggi monads factor semantics model composable continuations danvy filinski 
yields insights type systems proposed murthy danvy filinski 
interestingly modelling aspects composable continuations requires structure quite monad 

continuation passing style introduced model feature programming languages jump explicate execution order programs 
moggi shown monads notion category theory generalise continuation passing style transformation 
monads model wide variety features including continuations state exceptions input output non determinism 
monads applied way structuring functional programs way introducing new features functional languages :10.1.1.100.9674
begins feature programming language modelled monad 
take name moggi hypothesis convenient label conjecture moggi claim 
lack uniform theory programming language features difficult see verify hypothesis 
easy envision falsified counterexample 
composable continuations appear provide counterexample 
usual continuations support escape operation similar landin operator reynolds escape operator call cc scheme sml nj 
increases programmer power expression greatly resulting programs 
composable continuations devised danvy filinski support additional operations shift reset 
increase programmer power expression result programs wadler mind 
operations shift reset similar operations control prompt felleisen 
different type systems composable continuations devised danvy filinski murthy 
purpose note explore utility monads modelling composable continuations 
succession models monads 
correspond type system murthy type system danvy filinski 
monad approach succeeds providing simple way understand type systems 
hand models quite monads types general monad types general monad 
moggi hypothesis appears violated 
violation fairly mild models basic structure monad satisfy monad laws monads provide useful framework parameterising definition level continuations 
kieburtz hook examined monads model composable continuations 
model turns quite monad different reason model 
particular model right type monad fails satisfy monad laws 
model contain spurious complication 
removing complication appears yield model satisfy monad laws 
demonstrates utility functional language power tool performing experiments theoretical computer science 
various points need know general type form assigned lambda expression 
easily computed implementation functional language hindley milner type reconstruction algorithm 
implementation gofer dialect haskell implemented mark jones language hindley milner types suitable 
aimed readers familiar monads composable continuations completeness summaries 
remainder organised follows 
section reviews monads 
section reviews composable continuations shows modeled monads case monad 
section adapts model level continuations way spots monad 
section critiques kieburtz hook 
section concludes 
monads composable continuations 
monads purposes monad consists type constructor operations 
unit 

write type 
functional programmer think type constructor functional language unit polymorphic functions 
domain theorist think operation domains unit operations parameterised domains roughly speaking type represents computation yields value type purpose unit take values computations 
value unit represents computation yield value purpose combine computations second computation may depend value yielded 
computation function values computations represents computation performs computation applies value yielded computation performs computation results 
monad operations satisfy laws 
left unit unit 
right unit 
unit associative 



laws may simplified rewriting 
form shown chosen practice tends write followed lambda abstraction 

translation standard call value translation lambda calculus monad 
ae unit ae ae unit ae ae ae 
ae 
ae unit ae ae 
ae 
unit ae ae 
ae ae ae ae 
ae letrec ae letrec ae ae wadler range terms source language range variables source language ranges constants range values variables target language ae ranges environments mapping source variables values target variables 
call value translation letrec expressions valid recursive variable bound function definition 
representative sampling expressions straightforward add 
translation viewed ways 
right hand side taken meta syntax values result interpreter denotational semantics 
right hand side taken target language variables target language result compiler 
source target languages lambda calculus target language contains unit additional constructs predefined constants prefer 

types viewed compiler translation takes simply typed lambda calculus simply typed lambda calculus 
translation types follows 
ranges base types int bool range types 
terms source target languages contain types target language contains additional type constructor 
typed source term translates typed target term ae ae 
problem source language includes polymorphism hindley milner type system translating loses polymorphism 
limit attention danvy filinski murthy source language polymorphism 
serious restriction alternative approach stronger type systems polymorphic lambda calculus 

recognize monad unit unit kleisli star 
free lambda calculus means working monads composable continuations cartesian closed category 
assumed represented arrow category just operator arrows 
assume object arrow gamma 
gamma 
denotes arrow category denotes exponentiation 
stronger assumptions moggi 
letrec assume object arrow gamma 
model fixpoints 

continuations usual continuation passing style arises special case monad translation 
define monad follows 
type unit 

eval unit eval id type answers id identity function 
added extra operation eval monad extract answer top level computation 
substituting unit call value monad translation simplifying yields usual call value continuationpassing style translation 
pleasant property translation source program call value semantics regardless target program call value call name semantics 
monads sense just abstraction continuation passing style second argument similar continuation 
sense continuations levels meta level continuation object level continuation 
section introduce level continuation 
wadler 
escape extend source language escape operation similar landin operator reynolds escape operator call cc scheme sml nj 
extend translation 
escape ae escape ae second add corresponding new operation monad 
escape escape escape operation binds specified variable function called returns argument context surrounding escape 
example term value 
escape bound function passes argument context surrounding escape 
type escape says type escape construct typed programming language 
type translation section type escape translation type expect escape construct type 
type escape sml nj similar 
identical extra cleverness required get maximum polymorphism see discussion duba harper macqueen 

shift reset extend source language operations shift reset defined danvy filinski 
extend translation 
shift ae shift ae reset ae reset ae second add corresponding operations monad 
shift reset shift id reset id monads composable continuations shift operation binds specified variable context shift nearest dynamically enclosing reset shift body shift returns value nearest enclosing reset 
examples 
example 
terms values respectively 
reset shift reset shift reset shift case bound function behaves context shift enclosing reset adds argument 
example 
odd way reversing list 
letrec perverse null shift head perverse tail reset perverse head tail null cons usual operations lists 
returns 
explanation consult danvy filinski 
example 
stranger program 
reset shift true false bound function returns passed true passed false value term 
application similar idea implement backtracking explored danvy filinski 
despite convoluted nature examples ability express encapsulate features backtracking may composable continuations worthy study 

laws escape shift various properties satisfied escape shift operators 
escape free shift free escape shift shift free wadler third equation acts definition escape terms shift 
equations source language equivalent target language 
escape shift escape shift shift shown straightforwardly definitions escape shift laws lambda calculus 

types 
consider types shift reset shift reset general type derived definition types satisfactory escape 
disturbing number 
recall type answers returned top level 
doesn reasonable uses shift reset restricted apply terms type top level context 
typings suitable building interpreter equivalently denotational semantics 
works interpreter single value type embedded takes type 
short interpreter works essentially untyped 
look better types monads correspond type systems proposed murthy danvy filinski 

murthy types way generalise parameterise monad answer type 
result giving general types monads composable continuations inferred previous definitions 
type unit 

eval escape shift reset 
resulting types correspond murthy section 
type system fact applies general language shift reset operation level gamma possible levels 
system arises special case 
case rules reduce roughly simplification change notation 
gamma gamma shift gamma gamma reset murthy corresponds type typing rules correspond directly typings shift reset 
see section corresponds 
examples typed system example 

danvy filinski types general type system results monad type parameters replacing general sense reason type returned composable continuation need type returned entire computation 
new result inferring general types consistent definitions 
type unit 

eval escape shift reset 
new types correspond danvy filinski 
uses notation gamma gamma wadler environment mapping variables types expression type old new continuation types 
corresponding say translation type writes type functions form argument type result type old new continuation types 
corresponding say translation function type typing rules seen correspond types monad operations 
resulting type scheme general examples typed 

monad 
model danvy filinski type system quite satisfactory 
monad 
monad type 

model murthy type system type 

matches monad pattern corresponds 
second attempt type 

general monad type constructors quite distinct 
monad methodology led successful modeling shift reset process create general monad 
note generalisation fairly mild 
type constructor operations unit verify monad laws satisfied 
just type general 

level continuations semantics shift reset allows applications continuations nested phrase 
result loses pleasant property source program assigned semantics regardless target program taken call value monads composable continuations call need 
property regained definitions shift reset translating continuation passing style 
required levels continuations 
lower level called identical previous monad type unit 

eval lo unit eval id uses level continuations upper level new monad definition changed old answer type replaced new answer type operations unit eval manipulate values type type unit 

eval escape shift reset unit eval eval unit escape shift unit reset unit uses second level continuations definitions unit escape remain unchanged eval shift reset rewritten terms continuation passing operations lower level 
instance phrase old definition shift replaced 
advantage monad approach translation need changed monad definitions 
contrasts previous attempts explain level style levels continuations interwoven translation scheme 
wadler type chosen correspond danvy filinski value type answer type 
expanding definitions unit eval definitions eval shift reset yields definitions corresponding danvy filinski 
eval id shift reset different definitions monad yield different definitions monad particular choose identity monad 
type unit eval expanding yields original definitions eval shift reset section 
laws section hold new definitions 
furthermore hold regardless definition chosen long satisfies right unit law monads 
interesting question laws escape shift depend left unit associative law types shown general inferred definition types highly unsatisfactory appears uniformly 
particular recall definition monad type 

type 

structure specific proper monad 
compare situation section structure general proper monad 
purposes building interpreter doesn matter interested type anyway value type 
model form proper monad somewhat disturbing 
fortunately turns various generalisations suggested previously fix problem 
monads composable continuations 
murthy types recall model murthy type system continuations parameterised answer type 
type corresponding type level system follows 
type type new type definitions level monad operations exactly types section replaced eval explains extra parameter murthy notation comes precise correspondence fixed type correct monad 

danvy filinski types model danvy filinski system continuations parameterised types 
type corresponding type level system follows 
type type new type definitions level monad operations exactly types section replaced eval fixed gone back model general monad 

multiple levels general definitions shift reset arbitrary number levels 
may possible model hierarchy monads 
type type type 
wadler identity monad previous previous murthy type system 
general type corresponds murthy om 
remains seen generalised definitions shift reset corresponding type system fit monad framework 

relation kieburtz hook kieburtz hook model composable continuations quite monad 
case reason failure entirely different 
types right monad laws fails hold 
model sequence type constructors accompanied appropriate unit operations 
type type type monads third fails satisfy monad laws 
close examination model appears overly complicated 
continuation passed computations type appears ignored 
possible simplify system greatly eliding unexamined continuations 
result type simply type type identical simplified definitions essentially section 
failure satisfy monad law due spurious continuation 
closer comparison papers points 
strong assumptions answer type order give eval type effect achieved parameterising answer type giving eval type second version shift differs slightly danvy filinski definition fails clear 

succeeded monads model composable continuations 
way encountered counter examples called moggi hypothesis conjecture programming language feature modeled monad 
models types monads composable continuations general monad types specific 
concept better understood knowing limits place monads don quite reach 
fair count victory monad approach 
models obtained starting obvious monad model modifying straightforward ways 
led directly type systems reported literature provided useful insight understanding relating systems 
factorisation level continuations levels monads may prove useful generalisation 
aided implementation functional language power tool performing experiments 
various monads implemented haskell various types derived automatically hindley milner algorithm embedded haskell implementation 
simple compiler monad translation written haskell translate examples section haskell 
resulting code type checked conjunction various monads testing power induced type systems 
questions remain consideration 
categorical nature various generalisations monad discussed 
better type systems composable continuations outside hindley milner system 
goal composable continuations multiple levels able factor different effects different levels 
danvy filinski claim relatively easy combine different effects uniformly way 
monads intended factor effects way eases combination 
uniform rule combining monads 
monads shine light composable continuations 
composable continuations shed light problem combining monads 

gofer system mark jones comments olivier danvy andrzej filinski james hook dick kieburtz murthy carolyn talcott anonymous perceptive referees 

damas milner principal type schemes functional programs 
th symposium principles programming languages albuquerque new mexico acm january 
wadler 
danvy filinski functional abstraction typed contexts 
technical report copenhagen university august 

danvy filinski abstracting control 
conference lisp functional programming nice france acm june 

danvy filinski representing control 
mathematical structures computer science december 

duba harper macqueen typing class continuations ml 
th symposium principles programming languages orlando florida acm january 

felleisen theory practice class prompts 
th symposium principles programming languages san diego california acm january 

hindley principle type scheme object combinatory logic 
trans 
am 
math 
soc 

kieburtz hook monads continuations 
acm sigplan workshop continuations june 
stanford university report stan cs 

moggi computational lambda calculus monads 
symposium logic computer science asilomar california ieee june 
longer version available technical report university edinburgh 

murthy control operators hierarchies pseudo classical type systems 
proceedings acm sigplan workshop continuations june 
stanford university report stan cs 

peyton jones wadler imperative functional programming 
th symposium principles programming languages charleston south carolina acm january 

plotkin call name call value calculus 
theoretical computer science 

rees clinger 
eds 
revised report algorithmic language scheme 
acm sigplan notices 

reynolds definitional interpreters higher order programming languages 
th acm national conference 
monads composable continuations 
reynolds approaches type structure 
mathematical foundations software development lncs springer verlag 

wadler comprehending monads 
mathematical structures computer science december 
earlier version appears conference lisp functional programming nice france acm june 

wadler essence functional programming 
th symposium principles programming languages albuquerque new mexico acm january 
