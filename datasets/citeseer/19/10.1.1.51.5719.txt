visual language behavioral specifications reactive systems lewis chau gary chan lewis cs ust hk cs ust hk department computer science hong kong university science technology clear water bay hong kong complex reactive systems require specifying relationship inputs outputs time domain 
typically descriptions involve complex sequences events explicit timing constraints combine form system behavior 
addition reactive systems highly concurrent hierarchical 
investigating formal methods behavior specification reactive systems presents real challenges 
new visual language behavioral specification complex reactive systems described 
call constraint narrowing grammar cng 
cng combines concepts logic programming rewriting lazy evaluation 
non deterministic non terminating properties cng nice formalism model infinite reactive systems behavior 
demonstrate graphical specification mapped cng rules show step notations hierarchy concurrency event communication introduced specification 
resulting grammar executable behavioral specification complex reactive systems 
keywords reactive systems visual language logic programming rewriting concurrent programming 
reactive systems systems continuously respond environment speed determined environment 
role systems maintain ongoing interaction environment get final result termination 
events environment stimulate systems internal status systems changes stimuli 
typical examples include telephone systems communication networks automobiles atm machines reactive systems characterized event driven having react external internal stimuli 
behavior specification reactive systems provides description systems intended behavior 
due event driven nature reactive systems models adopted state events approach specify reactive systems 
known model finite state machine fsm consists states transitions input output 
states internal statuses systems input stimuli events cause transitions states generation system responses output events 
reactive systems highly concurrent distributed fall quite naturally multiple levels details hierarchical relationships states usually display unpredictable behavior appear international conference computer languages toulouse france 
unanticipated circumstances 
basic fsm extended order provide notations hierarchy concurrency event communication 
behavior specification reactive systems declarative description systems intended behave 
internal state system time input important reaction 
clarity intuition systems greatly enhanced adoption visual languages 
addition executable language rapidly prototyped 
languages ought possible move easily initial stages requirements specification prototyping design form basis modifications maintenance stages 
describe new visual declarative executable formalism behavioral specification reactive systems constraint narrowing grammar cng 
cng extension narrowing grammar precise rigorous syntax semantics 
syntax order term rewriting system 
semantics defined specialized rewriting strategy proven sound complete 
basic idea develop visual specification extended state machine map set constraint narrowing grammar rules directly executed existing prolog interpreters 
organize follows 
section presents formal definition constraint narrowing grammar illustrates pattern generators pattern acceptors 
section describes basic model behavioral specification graphically extended finite state machine shows mapped grammar rules 
notations hierarchy concurrency event communication introduced sections 
compare approach existing specification methods 
assume basic knowledge logic programming 
readers seeking appropriate background consult 
constraint narrowing grammar section formal semantics constraint narrowing grammar extension narrowing grammar created embedding optional constraints grammar rules 
see definition 
formalism constraint narrowing grammar definition 
term variable expression form ary function symbol term 
ground term term variables 
definition 
constraint narrowing grammar finite set rules form lhs rhs 

lhs term variable rhs term 

lhs term normal form see definition 
definition 
constructor symbols function symbols appear outermost function symbol lhs rule 
simplified term term outermost function symbol constructor symbol 
definition 
term said normal form sub terms simplified 
variable taken simplified term term normal form non ground 
definition 
narrows nu step substitution variable 
unifiable rule lhs rhs 
constructor symbol rule lhs rhs lhs lhs unifiable outermost narrowing rule possible gamma recursively narrows nu step substitution 
definition 
nu narrowing narrowing narrows nu step 
definition 
simplification nu narrowing simplified simplified 
definition 
optional constraints embedded rules form additional grammar rules defined 
true fcg constraint solving 
constraint solving returns true false 
examples consider grammar rules list concatenation 

xjl xj 
rules define list concatenation usual prolog rules append 
consider introductory example showing rewritten 
rewritten term rule aj xjl xj 
bj xjl xj 
significance prefix nu nu step comes fact special strategy select sub term narrowing strategy selects terms outermost normal order fashion 
unification implicitly strategy 
showed completeness simplification term simplified simplified repeatedly applying nu steps 
edinburgh prolog syntax lists 
empty list written nonempty lists written hjt equivalently 
head tail list arguments cons dots function symbol 
list consisting element written lists aj equivalent 
note list concatenation operator punctuation symbol separating function arguments 
potentially confusing feel notation natural readers familiar prolog 
consider grammar rules shuffling lists 
xjy xj 
xjy xj 
nondeterministically selects element head second list 
resulting list arbitrary interleaving lists 
rewritten term rule xjy xj 
aj xjy xj 
bj xjy xj 
consider pair constraint narrowing grammar rules specifying pattern matching 
match match xjl xjs match 
match take pattern term argument stream second argument 
pattern rewrites empty list match simply succeeds 
hand pattern rewrites xjl second argument match rewrite xjs 
intuitively match thought applying pattern argument stream second argument attempt find prefix stream grammar defining pattern generate 
pattern acceptance requested explicitly match 
consider non terminating rule generates infinite stream term matched prefix infinite stream 
stream 
rewritten term rule match stream match stream 
match stream match xjl xjs match 
match stream 
match stream match xjl xjs match 
stream match match succeeds rewriting term stream 
basic specification model basic specification model propose evolves directly fsm 
natural mapping fsm rewriting rules 
define basic symbols mapping constraint narrowing grammar rules follows label init label 
initial state label label 
terminal state event label label label event label 
state transition state grammar rules symbols basic specification model note assume reactive system initial state zero terminal states 
non terminating reactive system terminal state 
introductory example consider state diagram corresponding grammar rules 
init 
simple example readers easily verify pattern init generate regular expression kleene star operator 
consider example adapted 
system vending machine selling tickets 
receives inserted coins sums money 
event choice occurs ticket dispensed appropriate change returned total inserted money ticket price 
event abort occurs machine refund inserted money 
coin money choice abort sum lamp sum lamp coin money state diagram vending machine note argument money event coin attribute event 
indicates value coin inserted 
states correspond ready service status machine 
attributes sum lamp associated states 
attribute sum amount money machine holds amount money price ticket attribute lamp set 
behavioral specification vending machine constraint narrowing grammar rules follows init 
sum lamp coin money sum money lookup sum money 
sum lamp coin money sum money lookup sum money 
sum choice 
sum lamp abort 
assume lookup total function determines status lamp 
total greater price ticket returned 
returned 
just concentrate input event sequence output events dispensing ticket returning sum showing status lamp simply ignored 
easily specified rules necessary 
due attributes model extra information lookup function needed obtain resulting grammar rules 
assume price ticket want check coin coin coin coin choice prefix specification verify term match coin coin coin coin choice init successfully rewritten 
state diagram directly obtain set grammar rules executable specification system 
addressed unmanageable exponentially growing multitude states occur states arranged fashion systems complex 
order useful specification modular hierarchical structured 
power specify concurrency independent components reactive systems 
sections investigate capabilities incorporated model 
hierarchical specification model reactive systems represented hierarchically physical properties 
example automatic teller machine atm main states card inserted card inserted 
card inserted enter password select services provided 
card inserted state implies states asking password checking password selecting services appropriate introduce hierarchy states complex reactive systems 
idea superstate proposed adopted 
superstate virtual state includes states common properties say state transitions 
states included superstate basic states 
symbols hierarchical specification grammar rules defined 
label initial state symbols grammar rules label terminal state label 
event label label state transition state label event label 
label label default entrance label label label 
label label label hierarchical structure label label 
label label 
init label 
hierarchical specification model hierarchical structure specifies hierarchical relationship superstate substates 
default entrance specifies default substate entered superstate reached 
example label state default substate entered superstate label reached 
grammar rules state transition default entrance hierarchical structure form non deterministic choice state transitions shown 
non deterministic choice state transition consider complicated reactive system 
interested input events ignore output events system responses 
complicated reactive system diagram obtain grammar rules 
state transitions init state hierarchy default entrance reader immediately verify event lists possible prefix sequences system 
time init generate hypothesis prefix sequences jl jl jl jl jl unbounded event list 
concurrency specification model complex reactive systems consist set sequential processes running simultaneously 
sequential process fact regarded simpler reactive system concurrency sequential processes composes complex reactive system 
sequential processes orthogonal components active current state 
fact orthogonal components running independently cooperation 
section consider simple case concurrency independent components reactive systems 
simple concurrency model mapping grammar rules shown 
label label default entrance label label label 
label label label label terminal state grammar rules symbols event label label label label join event 
label join event 
event event label 
concurrency label event label label start concurrency label initial state init label 
label label state state event label event label 
transition label 
hierarchical structure label label 
label label 
label event resume label label 
simple concurrency specification model introduce notations start concurrency concurrency 
start concurrency label label activated current state label event occurs 
concurrency triggered concurrent components reached state label label respectively event occurs 
constraint narrowing grammar specification key point model concurrency repeated pairwise shuffling operator introduced section 
shuffles streams event sequence individual components produce single stream represents possible sequence concurrent system 
grammar rules concurrency defined follows 


xjxs ys fxn join xj xs ys 

xs join yj xs ys 

join join join 

resume join 

resume es 
note join event marker indicates component ready rejoin wait concurrent components reach state 
rule detects join event marker 
concurrent components reach final state marker remains 
resume converts marker event symbol event indicating event occurred rejoin concurrent components 
furthermore allows system proceed state rewriting event rule 
consider complex reactive system involving concurrency 
complex reactive system involving concurrency constraint narrowing grammar rules obtained follows init 
resume 


join 



join 
resume 


join 

join 

join 


init generates hypothesis event sequences follows jl jl jl jl jl unbounded event list 
concurrency specification model event communication section extend simple concurrency model allow cooperation concurrent components 
example component may need wait component reach certain state proceed 
cooperation various components handled event communication 
input events initiate state transitions coming outside output events system responses concurrent components 
communication components done events message passing 
refer input events coming outside external input events coming output components internal input events 
output events system broadcasted components regarded internal input events components 
concurrency model event communication defined 
label label state state event transition internal event label event label 
label label state state event transition event external label event label 
label label state output event input event state transition label input event output event label 
label terminal state label 
grammar rules symbols label event label label start concurrency label event resume label label 
label join event 
label join event 
event event label 
label label label label label 
label label 
label initial state init label 
label label default entrance label event label label label concurrency hierarchical structure label label 
concurrency specification model event communications new symbols introduced output events notation internal input events notation 
output events broadcasted components regarded internal input events components 
concurrent component accept internal input events order time events generated component react events independently 
order address problem timing constraints different concurrent components adopt assumption 
component generates output event output event observed components output generating component proceeds state 
introduce markers constructor symbols grammar rules 
event internal input event event output event system response 
relative order event event event stream important event occur event 
capture additional semantics relative order 
idea grammar rules generate hypothesis prefix sequences system sequences valid system behaviors 
extra rules defined eliminate event sequences legal system behaviors example event occurs event 
illustration consider example 
system starts state event occurs concurrent components activated initial states concurrent components communicate internal event left component produces event right component consumes event 
event signals concurrency 
init resume 
join 

join 


reactive system involving concurrency event communications constraint introduced event sequences system preceded immediately 
generation hypothesis event sequences rewriting term init additional constraint follows example summarize ideas previous sections example adapted 
example shows relationship vending machine vm testing agent ta 
vending machine described basic specification model testing agent tests vending machine 
system switched indicated event start vending machine testing agent activated 
testing agent holds money testing 
user gives commands coin choice abort testing agent appropriate event sent vending machine test 
vending machine acts internal event sent testing agent gives corresponding response 
receiving response vending machine testing agent check machine acts correctly 
done keeping track money inserted change returned ticket dispensed 
lastly power system switched indicated event vending machine testing agent deactivated system terminates 
sake simplicity omitted attributes events states introduced basic specification model 
coin resp choice resp abort resp resp coin cmd abort abort cmd coin coin cmd choice choice resp init vm ta start vending machine test agent constraint narrowing grammar specification system listed 
state transitions init start resume vm ta 
coin resp coin resp choice resp abort resp vm join 
cmd coin coin 
cmd choice choice 
cmd abort abort 
resp 
ta join 


default entrance vm ta 
states hierarchy vm 
vm 
ta 
ta 
constraint example simple event preceded event event coin choice abort resp 
reader easily verify event list start cmd coin coin coin resp resp cmd choice choice choice resp resp possible prefix sequence system 
generate hypothesis event sequences specification rewriting term init removing markers applying constraint 
start cmd coin coin resp cmd coin coin resp cmd coin coin resp start cmd coin coin resp cmd coin coin resp cmd choice choice resp start cmd coin coin resp cmd coin coin resp cmd abort abort resp start cmd coin coin resp cmd choice choice resp cmd coin coin resp related behavioral specification reactive systems basic types 
automation oriented specification terms behaviors methods transitions entity object process response event message input 
examples kind specification finite automata petri nets arises naturally people conceptualize systems terms collection entities interacting time 

history oriented specification terms restrictions legal histories event streams 
examples kind specification temporal logic path expressions 
arises relationships constraints valid behaviors complex 
known example behavior specification finite state automata statecharts 
statecharts specify finite state machine graphically advantage hierarchical relationships terms operations set states avoiding combinatorial explosion number states independently specifying orthogonal components cross product operands 
addition event communication orthogonal components specified statecharts 
graphical formalism similar statecharts language argos 
argos program basic processes finite automata receive emit signals 
statecharts argos operators handle design methods parallel decomposition hierarchical decomposition 
addition argos solved problems existing statecharts particular concerning modularity causality loops 
event behavioral abstraction high level approach treats specification process creating models expected system behavior comparing models actual behavior activity system 
context active object oriented databases gehani proposed language regular language specifying composite events event expressions formed event operators primitive events 
event expression maps event history event history contains events event expression satisfied 
gehani showed implement event expressions efficiently finite state automata 
avrunin described approach design concurrent software systems constrained expression formalism 
constrained expression representation distributed system consists system expression collection constraints 
system expression regular expression alphabet symbols 
constraints expressions augmented alphabet formed regular expression operators 
constraints define legal patterns event symbols embody part semantics distributed system development notation expressed system expression 
lotos estelle formal description techniques developed iso specification osi protocols services 
estelle characterized intensional description technique extended state machines communicating fifo pascal representing data 
lotos characterized extensional description technique temporal ordering events data typing technique 
techniques related developed description models particular extended state machines petri nets ccs 
executable specification related declarative languages functional logic ones 
idea specification written declarative languages simpler cluttered control information compared corresponding imperative ones 
declarative languages logic programming particularly suited rapid prototyping invertibility predicates ability accept non ground values inputs produce outputs 
previous approaches behavioral specification reactive systems statecharts event expressions constrained expressions estelle rest finite state automata extension 
computational model rigorous formal semantics language difficult express 
finding way execute specification straightforward 
approach employ executable declarative programming language prolog proposed specification language 
pointed expressive power prolog dcg limited order properties complex reactive systems difficult specify 
propose alternative better solution 
describe cng visual language behavioral specification complex reactive systems 
cng formal visual declarative executable 
language precise rigorous syntax semantics 
syntax order term rewriting system 
semantics defined specialized non deterministic non terminating rewrite strategy proven sound complete 
grammar rules directly executable mapping declarative logic program 
demonstrate graphical specification extended state machine mapped cng rules show step step notations hierarchy concurrency event communication introduced specification 
resulting formalism executable behavioral specification complex reactive systems 
developed graphical user interface gui visual language 
gui allows user design specifications reactive systems translate specifications cng rules execute rules back cng interpreter generate event lists representing possible prefix sequences system 
complex system analysis deadlock starvation detection performed easily 
avrunin dillon wileden riddle constrained expressions adding analysis capabilities design methods concurrent software systems ieee transactions software engineering vol 
se feb 
bates debugging heterogeneous distributed systems event models behavior workshop parallel distributed debugging sigplan notices volume number january 
campbell habermann specification process synchronization path expressions lecture notes computer science vol springer verlag 
chau parker narrowing grammar theory implementation applications journal logic programming november 
chau visual specification language constraint narrowing grammar appear australian new zealand conference intelligent information systems december 
chau parker narrowing grammar proc 
sixth int conf 
logic programming lisbon june published mit press 
chau narrowing grammar lazy functional logic formalism language analysis ph dissertation ucla december 
chau narrowing grammar comparison logic grammars proceedings north american conference logic programming cleveland ohio 
diaz editors formal description technique estelle north holland 
knowledge system debugging concurrent software phd dissertation ucla 
ding katayama attributed state machines behavior specification reactive systems th international conference software engineering knowledge engineering 
van eijk vissers diaz editors formal description technique lotos northholland 
gehani jagadish shmueli event specification active object oriented databases proc 
acm sigmod int conf 
data san diego california june 
gehani jagadish shmueli composite event specification active databases model implementation proc 
th int conf 
large databases vancouver british columbia canada 
halbwachs synchronous programming reactive systems kluwer academic publishers 
harel statecharts visual formalism complex systems science computer programming 
harel pnueli development reactive systems logics models concurrent systems 
open predicate path expressions implementation highly parallel computing environments proc 
int conf 
parallel processing 
kaiser data path debugging data oriented debugging concurrent programming languages notices january 
graphical description semantics verification reactive systems process algebra international workshop automatic verification methods finite state systems 
milner ccs calculus communicating systems lncs springer verlag 
sterling shapiro art prolog mit press 
