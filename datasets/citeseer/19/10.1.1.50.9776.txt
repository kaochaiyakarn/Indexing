recursive functions symbolic expressions computation machine part john mccarthy massachusetts institute technology cambridge mass april programming system called lisp list processor developed ibm computer artificial intelligence group system designed facilitate experiments proposed system called advice taker machine instructed handle declarative imperative sentences exhibit common sense carrying instructions 
original proposal advice taker november 
main requirement programming system manipulating expressions representing formalized declarative imperative sentences advice taker system deductions 
course development lisp system went stages simplification eventually came scheme representing partial recursive functions certain class symbolic expressions 
representation independent ibm computer electronic computer expedient system putting supported arpa onr stanford university john mccarthy 
copied minor notational changes cacm april 
want exact typography look 
current address john mccarthy computer science department stanford ca email jmc cs stanford edu url www formal stanford edu jmc starting class expressions called expressions functions called functions 
article describe formalism defining functions recursively 
believe formalism advantages programming language vehicle developing theory computation 
describe expressions functions give examples describe universal function apply plays theoretical role universal turing machine practical role interpreter 
describe representation expressions memory ibm list structures similar newell shaw simon representation functions program 
mention main features lisp programming system ibm 
comes way describing computations symbolic expressions give recursive function interpretation flow charts 
hope describe symbolic computations lisp give applications recursive function formalism mathematical logic problem mechanical theorem proving 
functions function definitions shall need number mathematical ideas notations concerning functions general 
ideas known notion conditional expression believed new conditional expressions permits functions defined recursively new convenient way 
partial functions 
partial function function defined part domain 
partial functions necessarily arise functions defined computations values arguments computation defining value function may terminate 
elementary functions defined partial functions 
propositional expressions predicates 
propositional expression expression possible values truth falsity 
shall assume reader familiar propositional connectives kleene 
typical propositional expressions prime predicate function range consists truth values conditional expressions 
dependence truth values values quantities kinds expressed mathematics predicates dependence truth values truth values logical connectives 
notations expressing symbolically dependence quantities kinds truth values inadequate english words phrases generally expressing dependences texts describe dependences symbolically 
example function jxj usually defined words 
conditional expressions device expressing dependence quantities propositional quantities 
conditional expression form delta delta delta propositional expressions expressions kind 
may read delta delta delta yields delta delta delta yields give rules determining value delta delta delta defined value examine left right 
value encountered value undefined encountered value conditional expression value sent proposal conditional expressions cacm forum included algol 
item short editor demoted letter editor cacm subsequently 
notation rejected algol decided new mathematical notation allowed algol new english 
algol adopted suggested john backus 
corresponding defined 
undefined encountered true false corresponding true undefined value conditional expression undefined 
give examples 
undefined undefined simplest applications conditional expressions giving definitions jxj gammax ffi ij sgn gamma recursive function definitions 
conditional expressions circularity define functions formulas defined function occurs 
example write 
delta gamma 
formula evaluate 
get answer way value conditional expression defined meaningless expression delta 
arise 
evaluation 
definition proceeds follows 
delta gamma 
delta 
delta delta gamma 
delta delta 
delta delta delta gamma 
delta delta give applications recursive function definitions 
greatest common divisor gcd positive integers computed means euclidean algorithm 
algorithm expressed recursive function definition gcd gcd rem gcd rem rem denotes remainder left divided newtonian algorithm obtaining approximate square root number starting initial approximation requiring acceptable approximation satisfy jy gamma aj ffl may written sqrt ffl jx gamma aj ffl sqrt ffl simultaneous recursive definition functions possible shall definitions required 
guarantee computation determined recursive definition terminate example attempt compute 
definition succeed non negative integer 
computation terminate function regarded undefined arguments 
propositional connectives defined conditional expressions 
write oe readily seen right hand sides equations correct truth tables 
consider situations may undefined connectives seen noncommutative 
example false undefined see definitions false undefined 
applications desirable computed computing false computed 
computation terminate get computing shall propositional connectives sense 
functions forms 
usual mathematics outside mathematical logic word function imprecisely apply forms shall compute expressions functions need distinction functions forms notation expressing distinction 
distinction notation describing deviate trivially church 
expression stands function integer variables 
sense write value expression determined 
expression meet requirement conventional notation attempted define uncertain value turn 
church calls expression form 
form converted function determine correspondence variables occurring form ordered list arguments desired function 
accomplished church notation 
form variables delta delta delta delta delta delta taken function variables value determined substituting arguments variables delta delta delta order evaluating resulting expression 
example function variables 
variables occurring list variables expression dummy bound variables integration definite integral 
may change names bound variables function expression changing value expression provided change occurrence variable variables previously different 
denote function 
shall frequently expressions variables bound 
expression may regarded defining function parameters 
unbound variables called free variables 
adequate notation distinguishes functions forms allows unambiguous treatment functions functions 
involve digression give examples shall functions functions arguments report 
difficulties arise combining functions described expressions notation involving variables different bound variables may represented symbol 
called collision bound variables 
notation involving operators called combinators combining functions variables 
unfortunately combinatory expressions interesting combinations functions tend lengthy unreadable 
expressions recursive functions 
notation inadequate naming functions defined recursively 
example convert definition sqrt ffl jx gamma aj ffl sqrt ffl sqrt ffl jx gamma aj ffl sqrt ffl right hand side serve expression function indicate sqrt expression stood expression 
order able write expressions recursive functions introduce notation 
label denotes expression provided occurrences interpreted referring expression 
write label sqrt ffl jx gamma aj ffl sqrt ffl name sqrt function 
symbol label bound may altered systematically changing meaning expression 
behaves differently variable bound 
recursive functions symbolic expressions shall define class symbolic expressions terms ordered pairs lists 
shall define elementary functions predicates build composition conditional expressions recursive definitions extensive class functions shall give number examples 
shall show functions expressed symbolic expressions shall define universal function apply allows compute expression function value arguments 
shall define functions functions arguments give useful examples 
class symbolic expressions 
shall define expressions stands symbolic 
formed special characters delta infinite set distinguishable atomic symbols 
atomic symbols shall strings capital latin letters digits single imbedded blanks 
examples atomic symbols aba apple number twofold reason departing usual mathematical practice single letters atomic symbols 
computer programs frequently require hundreds distinguishable symbols formed characters printable ibm computer 
second convenient allow english words phrases stand atomic entities mnemonic reasons 
symbols atomic sense substructure may sequences characters ignored 
assume different symbols distinguished 
expressions defined follows 
atomic symbols expressions 

expressions delta 
examples expressions ab delta ab delta delta expression simply ordered pair terms may atomic symbols simpler expressions 
represent list arbitrary length terms expressions follows 
list delta delta delta represented expression delta delta delta delta delta delta nil delta delta delta nil atomic symbol terminate lists 
symbolic expressions deal conveniently expressed lists shall introduce list notation abbreviate certain expressions 
imbedded blanks allowed symbols lists written commas elements 

stands deltan il 

delta delta delta stands delta delta delta delta delta nil delta delta delta 

delta delta delta delta stands delta delta delta delta delta delta delta delta 
subexpressions similarly abbreviated 
examples abbreviations ab ab delta delta nil delta delta nil delta delta delta nil delta delta delta regard expressions commas abbreviations involving commas shall refer expressions 
functions expressions expressions represent 
define class functions expressions 
expressions representing functions written conventional functional notation 
order clearly distinguish expressions representing functions shall sequences lower case letters function names variables ranging set expressions 
brackets semicolons parentheses commas denoting application functions arguments 
write car car cons delta expressions meta expressions expression occur stand 
elementary functions predicates 
introduce functions predicates 
atom 
atom value atomic symbol 
atom atom delta 
eq 
eq defined atomic 
eq symbol eq 
eq eq eq delta undefined 

car 
car defined atomic 
car delta car undefined 
car delta car delta delta delta 
cdr 
cdr defined atomic 
cdr delta cdr undefined 
cdr delta cdr delta delta 
cons 
cons defined cons delta 
cons cons delta delta car cdr cons easily seen satisfy relations car cons cdr cons cons car cdr provided atomic 
names car cons come mnemonic significance discuss representation system computer 
compositions car cdr give subexpressions expression position 
compositions cons form expressions structure parts 
class functions formed way quite limited interesting 
recursive functions 
get larger class functions fact computable functions allow form new functions expressions conditional expressions recursive definition 
give examples functions definable way 

ff 
value ff atomic symbol expression parentheses ignored 
ff delta delta ff atom ff car trace detail steps evaluation ff delta delta ff delta delta atom delta delta 
delta delta ff car delta delta 
delta delta ff car delta delta ff car delta delta ff car delta delta ff delta atom delta 
delta ff car delta 
delta ff car delta ff car delta ff car delta ff atom ff car ff car 
subst 
function gives result substituting occurrences atomic symbol expression defined subst atom eq cons subst car subst cdr example subst delta delta delta delta delta delta 
equal 
predicate value expression value 
equal atom atom eq atom atom equal car car equal cdr cdr convenient see elementary functions look abbreviated list notation 
reader easily verify car delta delta delta ii cdr delta delta delta delta delta delta iii cdr nil iv cons delta delta delta delta delta delta cons nil define null atom eq nil predicate useful dealing lists 
compositions car cdr arise frequently expressions written concisely abbreviate cadr car cdr caddr car cdr cdr useful abbreviation write list delta delta delta cons cons delta delta delta cons nil delta delta delta 
function gives list delta delta delta function elements 
functions useful expressions regarded lists 

append 
append null cons car append cdr example append 

predicate true expression occurs elements list null equal car cdr 
pair 
function gives list pairs corresponding elements lists pair null null nil atom atom cons list car car pair cdr cdr example pair 
assoc 
list form delta delta delta assoc corresponding assoc eq assoc cdr example assoc 

assumed form list pairs delta delta delta atomic may expression 
value result substituting corresponding order define define auxiliary function 
sub null eq sub cdr atom sub cons car cdr delta representation functions expressions 
functions described expressions 
give rule translating expressions expressions order able functions making certain computations functions answering certain questions 
translation determined rules rich denote translation expression 

expression quote 

variables function names represented strings lowercase letters translated corresponding strings corresponding uppercase letters 
car car subst subst 

form delta delta delta translated delta delta delta cons car cdr cons car cdr 

delta delta delta cond delta delta delta delta 

delta delta delta lambda delta delta delta 

label 
conventions substitution function expression label subst atom eq cons subst car subst cdr expression label subst lambda cond atom cond eq quote quote cons subst car subst cdr notation writable somewhat readable 
easier read write cost making structure regular 
characters available computer improved considerably 
universal function apply 
function apply property expression function args list arguments form arg delta delta delta arg arg delta delta delta arg arbitrary apply args arg delta delta delta arg defined values arg delta delta delta arg equal defined 
example cons car apply lambda cons car function apply defined apply args eval cons args nil null nil cons list quote car cdr eval atom assoc characters available sail lisp machines 
alas world went back inferior character sets far back written early 
atom car eq car quote cadr eq car atom atom eval cadr eq car eq eval cadr eval caddr eq car cond cdr eq car car car eval cadr eq car cdr cdr eval cadr eq car cons cons eval cadr eval caddr eval cons assoc car cdr eq label eval cons cdr cons list car eq lambda eval append pair cdr eval eval cdr null nil cons eval car cdr explain number points definitions 

apply forms expression representing value function applied arguments puts evaluating expression function eval 
uses put quotes arguments eval regard standing 

eval arguments expression evaluated list pairs item pair atomic symbol second expression symbol stands 

expression evaluated atomic eval evaluates paired list 
atomic car atomic expression forms quote atom eq cond delta delta delta car cdr cons delta delta delta atomic symbol 
case quote expression taken 
case atom car cdr expression evaluated appropriate function taken 
case eq cons expressions evaluated 
case cond delta delta delta evaluated order true corresponding evaluated 
accomplished 
case delta delta delta evaluate expression results replacing expression paired list 
evaluation label delta delta delta accomplished evaluating delta delta delta pairing label put front previous list pairs 

evaluation lambda delta delta delta delta delta delta accomplished evaluating list pairs delta delta delta put front previous list list eliminated lambda label expressions evaluated substituting arguments variables expressions unfortunately difficulties involving collisions bound variables arise avoided list version isn quite right 
comparison versions eval including implemented debugged influence designer design herbert included artificial intelligence mathematical theory computation papers honor john mccarthy vladimir lifschitz ed academic press calculating values functions apply activity better suited electronic computers people 
illustration give steps calculating apply label ff lambda cond atom quote ff car delta argument expression represents function ff defined section 
shall abbreviate letter oe 
apply oe deltab eval label ff quote deltab nil part oe lambda eval lambda quote deltab ff oe part cond eval cond ffl ffl quote deltab ff oe denoting quote deltab ff oe obtain ffl ffl involves eval eval atom atom eval atom eval assoc quote deltab ff oe atom eval quote deltab atom deltab main continues apply oe deltab ffl involves eval eval quote main calculation continues apply oe deltab eval ffl eval ff car eval cons oe car evaluating car involves eval car car eval car deltab took steps earlier computation atom eval car list list quote quote main quantity eval oe quote subsequent steps calculation 
label lambda cause new pairs added gives new list pairs term conditional eval atom value paired quote quote deltab eval just functions functions arguments 
number useful functions arguments functions 
especially useful defining functions 
function maplist argument argument function expressions expressions 
define maplist null nil cons maplist cdr usefulness maplist illustrated formulas partial derivative respect expressions involving sums products variables 
expressions shall differentiate formed follows 

atomic symbol allowed expression 

delta delta delta allowed expressions plus delta delta delta times delta delta delta represent sum product respectively delta delta delta essentially polish notation functions inclusion parentheses commas allows functions variable numbers arguments 
example allowed expression times plus conventional algebraic notation differentiation formula gives derivative respect diff atom eq zero eq car plus cons plus maplist cdr diff car eq car times cons plus maplist cdr cons times maplist cdr eq car diff car derivative expression times plus computed formula plus times plus times plus zero times plus zero maplist useful function functional arguments search defined search null search cdr function search search list element property element element taken 
element function arguments computed 
lisp programming system lisp programming system system ibm computer compute symbolic information form expressions 
purposes writing compiler compile lisp programs machine language 

writing program check proofs class formal logical systems 

writing programs formal differentiation integration 

writing programs realize various algorithms generating proofs predicate calculus 

making certain engineering calculations results formulas numbers 

programming advice taker system 
basis system way writing computer programs evaluate functions 
described sections 
addition facilities describing functions facilities functions programs written sequences statements lines fortran algol 
features described article 
representation expressions list structure 
list structure collection computer words arranged 
word list structure represented subdivided rectangles 
left box rectangle represents address field word right box represents decrement field 
arrow box rectangle means field corresponding box contains location word corresponding rectangle 
fig 
permitted substructure occur place list structure permitted structure cycles 
atomic symbol represented computer list structure special form called association list symbol 
address field word contains special constant enables program tell word represents atomic symbol 
shall describe association lists section 
expression atomic represented word address decrement parts contain locations subexpressions car cdr respectively 
symbols denote locations association list symbols expression delta delta delta delta represented list structure 
turning list form expressions see expression abbreviation delta delta delta nil delta delta nil represented list structure 
list structure regarded representing list see term list occupies address part word decrement part points word containing term word nil decrement 
expression subexpression occurring represented way 
list structure subexpression repeated depends history program 
subexpression repeated difference results program appear outside machine affect time storage requirements 
example expression deltab delta deltab represented list structure 
prohibition circular list structures essentially prohibition expression subexpression 
expression exist world topology 
circular list structures advantages machine example representing recursive functions difficulties printing certain operations advisable 
advantages list structures storage symbolic expressions 
size number expressions program deal predicted advance 
difficult arrange blocks storage fixed length contain 

registers put back free storage list longer needed 
register returned list value expressions stored linearly difficult blocks registers odd sizes may available 

expression occurs subexpression expressions need represented storage 
association lists lisp programming system put association list symbol required mathematical system described previous sections 
fact information desire associate symbol may put association list 
information may include print name string letters digits represents symbol outside machine numerical value symbol represents number expression symbol way serves name location routine symbol represents function machine language subroutine 
implies machine system primitive entities described sections mathematical system 
shall describe print names represented association lists reading printing program establish correspondence information cards magnetic tape printed page list structure inside machine 
association list symbol differentiate segment form shown 
pname symbol indicates structure print name symbol association list hanging word association list 
second row list words 
address part words points word containing called property lists 
bit characters 
word filled bit combination represent character printable computer 
recall ibm bit word printable characters represented bits 
presence words character information means association lists represent expressions functions dealing expressions sense association list 
pname 
differ 
free storage list 
time part memory reserved list structures storing expressions 
remaining registers system number initially approximately arranged single list called free storage list 
certain register free program contains location register list 
word required form additional list structure word free storage list taken number register free changed location second word free storage list 
provision need user program return registers free storage list 
return takes place automatically approximately follows necessary give simplified description process report fixed set base registers program contains locations list structures accessible program 
course list structures branch arbitrary number registers may involved 
register accessible program accessible reached base registers chain car cdr operations 
contents base register changed may happen register base register pointed reached car gamma cdr chain base register 
register may considered abandoned program contents longer possible program contents longer interest back free storage list 
comes way 
happens program runs free storage 
free register wanted left free storage list reclamation cycle starts 
program finds registers accessible base registers signs negative 
accomplished starting base registers changing sign register reached car gamma cdr chain 
program encounters register process negative sign assumes register reached 
accessible registers signs changed program goes area memory reserved storage list structures puts registers signs changed previous step back free storage list signs accessible registers positive 
process entirely automatic convenient programmer system keep track erase unwanted lists 
efficiency depends coming close exhausting available memory accessible lists 
reclamation process requires seconds execute result addition registers free storage list program spend time reclamation 
elementary functions computer 
shall describe computer representations atom car cdr cons 
expression communicated program represents function location word representing programs give expression answers form 
atom 
stated word representing atomic symbol special constant address part atom programmed open subroutine called process garbage collection guess research laboratory electronics grammar ladies wouldn tests part 
expression atom occurs condition conditional expression symbol generated result test 
case conditional expression conditional transfer symbol generated 
eq 
program eq involves testing numerical equality locations words 
works atomic symbol association list 
atom result conditional transfer symbols car 
computing car involves getting contents address part register essentially accomplished single instruction cla argument index register result appears address part accumulator 
take view places function takes arguments puts results prescribed definition function responsibility programmer compiler insert required instructions get results calculation position 
car mnemonic contents address part register cdr 
cdr handled way car result appears decrement part accumulator cdr stands contents decrement part register cons 
value cons location register address decrement parts respectively 
may register computer time consuming find 
take available register free storage list put address decrement parts respectively value function location register taken 
cons abbreviation construct subroutine cons initiates reclamation list exhausted 
version system cons represented closed subroutine 
compiled version cons open 
representation functions programs 
compilation functions compositions car cdr cons hand compiler program straightforward 
conditional expressions give trouble compiled required computed 
problems arise compilation recursive functions 
general shall discuss exception routine recursive function uses subroutine 
example program subst uses subroutine evaluate result substituting subexpressions car cdr 
subst cdr evaluated result previous evaluation subst car saved temporary storage register 
subst may need register evaluating subst cdr 
possible conflict resolved save routines public push list save routine entered routine recursive function request save set consecutive registers 
block registers called public push list reserved purpose 
save routine index tells registers push list 
moves contents registers saved unused registers push list advances index list returns program control came 
program may freely registers temporary storage 
routine exits uses restores contents temporary registers push list moves back index list 
result conventions described programming terminology saying recursive subroutine transparent temporary storage registers 
status lisp programming system february 
variant function apply described section translated program apply ibm 
routine compute values functions descriptions expressions arguments serves interpreter lisp programming language describes computation processes way 
program apply imbedded lisp programming system features 
programmer may define number functions expressions 
functions may refer certain functions represented machine language program 

values defined functions may computed 

expressions may read printed directly magnetic tape 

error diagnostic selective tracing facilities included 
called stack 
programmer may selected functions compiled machine language programs put core memory 
values compiled functions computed times fast interpreted 
compilation fast necessary punch compiled program 

program feature allows programs containing assignment go statements style algol 

computation floating point numbers possible system inefficient 

programmer manual prepared 
lisp programming system appropriate computations data conveniently represented symbolic expressions allowing expressions kind subexpressions 
version system ibm prepared 
formalism functions symbolic expressions number ways defining functions symbolic expressions quite similar system adopted 
involves basic functions conditional expressions recursive function definitions class expressions corresponding expressions different precise definitions functions 
shall describe variants called linear lisp 
expressions defined follows 
finite list characters admitted 

string admitted characters expression 
includes null string denoted functions strings 
character string undefined 
example abc 
rest string characters remains character string deleted 
rest undefined 
example rest abc bc 
combine string formed prefixing character string example combine bc abc predicates strings 
char single character 

null null string 

defined characters 
advantage linear lisp characters special roles parentheses dots commas lisp 
permits computations expressions written linearly 
disadvantage linear lisp extraction subexpressions fairly involved elementary operation 
hard write linear lisp functions correspond basic functions lisp mathematically linear lisp includes lisp 
turns convenient way programming linear lisp complicated manipulations 
functions represented computer routines lisp essentially faster 
flowcharts recursion usual form computer program recursive function definitions universal computationally interesting display relation 
translation recursive symbolic functions computer programs subject rest report 
section show go way principle 
state machine time computation values number variables 
variables combined vector 
consider program block entrance exit 
defines essentially defined certain function takes machine configuration form 
call associated function program block 
number blocks combined program decision elements decide block completed block entered 
program entrance exit 
oe oe xx xz phi phi phi hj give example 
describe function gives transformation vector entrance exit block 
shall define conjunction functions give transformations undergoes points respectively exit 
flowchart single entrance single exit easy write recursive function gives transformation state vector entrance exit terms corresponding functions computation blocks predicates branch 
general proceed follows 
fi way branch point delta delta delta computations leading branch points fi fi delta delta delta fi oe function transforms fi exit chart oe delta delta delta oe corresponding functions fi delta delta delta fi write oe oe delta delta delta oe gamma gamma gamma gamma gamma gamma 
omega omega omega omega omega ae au cw theta theta thetafl 
fn fi fi fi fi oe oe oe oe acknowledgments inadequacy notation naming recursive functions noticed rochester discovered alternative solution involving label 
form subroutine cons permits composition functions invented connection programming system gelernter ibm 
programming system developed group including brayton edwards fox hodes luckham mccarthy park russell 
group supported computation center research laboratory electronics supported part army signal corps air force office scientific research air research development command navy office naval research 
author wishes acknowledge personal financial sup port alfred sloan foundation 

mccarthy programs common sense symposium mechanization thought processes national physical laboratory england nov 
published proceedings symposium office 

newell shaw programming logic theory machine proc 
western joint computer conference feb 

church calculi lambda conversion princeton university press princeton 

fortran programmer manual ibm new york oct 

perlis international algebraic language preliminary report comm 
assoc 
comp 
mach dec 
