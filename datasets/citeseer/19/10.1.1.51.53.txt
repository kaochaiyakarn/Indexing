page polymorphic type inference data types konstantin ufer martin odersky university chicago universit karlsruhe laufer math luc edu odersky ira uka de june technical report luc abridged version appeared transactions programming languages systems statically typed programming languages provide data type construct module modula 
languages implementations data types class values 
assigned variables passed function parameters returned function results 
higher order functional languages feature strong static type systems parametric polymorphism algebraic data types explicit type variables 
rely hindley milner type inference requiring explicit type declarations identifiers 
languages support data types appears directly provides light weight data types implementations class values 
show add significant expressive power statically typed functional languages explicit type variables incorporating class types extension algebraic data types 
furthermore extend record types allow components 
components records selected dot notation 
mitchell plotkin formalize types terms existentially quantified types 
give syntactically sound complete type inference algorithm prove type system semantically sound respect standard denotational semantics 
categories subject descriptors programming languages language classifications applicative languages programming languages language constructs features data types modules packages logics meanings programs semantics programming languages denotational semantics logics meanings programs studies program constructs type structure general terms languages theory additional key words phrases dynamic dispatching existentially quantified types firstclass types polymorphism type inference universally quantified types preliminary version acm sigplan workshop ml applications san francisco june 
authors addresses ufer department mathematical sciences university north sheridan road chicago il laufer math luc edu odersky institut und universit karlsruhe postfach karlsruhe germany odersky ira uka de 
ufer odersky polymorphic type inference data types page statically typed programming languages provide data type construct package ada cluster clu module modula 
languages data type consists parts interface implementation 
implementation consists representation types operations types interface specifies names types operations accessible user data type 
languages implementations data types class values 
assigned variables passed function parameters returned function results 
higher order functional languages haskell hope miranda ml feature strong static type systems parametric polymorphism algebraic data types explicit type variables 
languages group rely hindley milner type inference requiring explicit type declarations identifiers 
languages support data types appears directly provides light weight data types implementations class values 
provide distinct constructs express data types tuples records closures model data types 
hidden bindings shared closures correspond representation closures correspond operations type tuple record corresponds interface 
shortcoming approach complete encapsulation internal representation hard add operations type implement efficient binary operations 
modules provide mechanism separate compilation data abstraction 
module haskell consists interface implementation interface 
standard ml module system generalizes modules allowing signatures interfaces structures implementations independent entities structures may share signatures single structure may satisfy signatures 
furthermore standard ml provides parameterized structures called functors 
type theoretic reasons class structures entail type types leading inconsistencies language 
structures treated class values 
causes considerable difficulties number practical programming situations 
proposals treat structures class values discussed section 
abstype construct standard ml miranda allows declaration data types admits implementation type 
haskell emulates construct exporting algebraic data type constructors module requires single implementation type 
abstype construct emulated standard ml module system largely superseded 
type theoretic side mitchell plotkin subsequently cardelli wegner shown types represented existentially quantified types 
stating value existentially quantified type mean type fixed private type demonstrates light weight data types class implementations ufer odersky polymorphic type inference data types page conveniently integrated functional language static polymorphic type system explicit type variables algebraic data type declarations 
key idea allow existentially quantified component types algebraic data types 
sake concreteness proposal extension ml 
equally applies languages similar type systems haskell hope miranda 
furthermore proposed extension independent strictness considerations 
show data types existential component types add significant flexibility language changing syntax particular give examples demonstrating express class types multiple implementations type heterogeneous aggregates different implementations type dynamic dispatching operations respect representation type 
deterministic type inference system style damas milner language leads syntactically sound complete type inference algorithm 
furthermore type system semantically sound respect standard denotational semantics 
extend record types allow components 
components records selected familiar dot notation 
semantic soundness extension shown type preserving translation extension 
proposal implemented leroy mauny caml light compiler ml 
examples developed tested compiler caml syntax 
existential types consider type inference permit polymorphic instantiation identifiers existential type 
contrast identifiers bound system may instantiated polymorphically illustrated section 
hope prior known includes damas milner style type inference existential types 
typing rules sufficient guarantee absence run time type errors hope compiler impose sufficient restrictions 
unsafe program ml syntax typed typing rules rejected compiler 
type variable existentially quantified 
type true existential types combine systematic overloading polymorphism provided haskell type classes 
extend haskell data declaration similarly ml datatype declaration 
haskell possible specify type class universally quantified type variable belongs 
extension existentially quantified type variables 
allows construct heterogeneous aggregates type class 
existential types beneficial relation dynamic types 
leroy mauny propose extension ml dynamics pairs consisting value type 
dynamics admit pattern matching value run time type 
existential types match dynamic values dynamic patterns incomplete type information 
dynamics useful typing functions eval 
dynamics provide type abstraction give access type object run time 
possible combine leroy ufer odersky polymorphic type inference data types page mauny system extending existential patterns existential types 
currently investigating point 
pierce turner describe object oriented language existential quantification recursive record types 
language extension includes subtyping sufficiently powerful model features typical object oriented languages including class inheritance methods superclass private instance variables 
language explicitly typed algorithmic type inference considered 
starting earlier mitchell plotkin macqueen ongoing discussion types replaced advanced module system standard ml 
modules class values type theoretic reasons data types limited 
mitchell describe possibility treating modules class values address issue type inference 
hiding type components structure type structure implicitly coerced strong dependent sum type weak existentially quantified sum type 
harper lillibridge independently leroy explore idea new treatment standard ml module system 
approach structures weak sum types act class values 
stratification types different universes small types large strong sum types longer necessary 
furthermore signatures may contain manifest type specifications express constraints types structures functors 
treatment simplifies sharing constraint mechanism standard ml module system supports true separate compilation 
remainder section describes extension algebraic data types existential quantification 
section presents system record types dot notation field selection 
section contains collection examples 
section introduces underlying formal language 
section section discuss type system type inference algorithm 
section presents denotational semantics section concludes 
making algebraic data types section illustrates data types provided form algebraic data types existentially quantified component types 
extension applied language polymorphic type system algebraic data types explicit type variables implemented caml light compiler ml examples caml syntax 
see ml 
algebraic data type declaration form type value constructors optional prefix argument args formal type parameters may appear free component types value constructor functions universally quantified type parameters type variables may appear free 
extension propose works follows altering type declaration syntax args 
ufer odersky polymorphic type inference data types page give meaning type variables appear free component types type parameter list 
interpret type variables existentially quantified 
example type declaration type key key int describes data type value constructor components pairs value type function type int 
question say existentially quantified type variable 
answer ensures type value domain function 
illustrate type expression key fun key type expression key list length length built function lists 
note argument types appear result type expression 
hand key list length type correct type different domain type list length 
recognize key type comprised value type operation type yielding int 
important note values type key class may created dynamically passed freely function parameters 
different values type key previous examples may viewed different implementations type 
constructing values data types existential component types decompose expression pattern matching 
impose restriction type variable existentially quantified expression appear result type expression type global identifier 
analogous restrictions hold corresponding open abstype constructs existential types see discussion 
example assuming type key key defined meaning int result applied application type safe pattern matching succeeds constructed constructor key time enforced safely applied hand key type correct know type statically consequently assign type expression 
extension allows deal existential types improvement decomposed values existential type bound may instantiated polymorphically 
illustrated example type int fun fun true results true 
prior value right hand side binding bound decomposed twice 
ufer odersky polymorphic type inference data types page records dot notation macqueen observes existential types connection elimination construct open abstype impractical certain programming situations 
scope elimination construct large benefits abstraction lost 
particular lowest level entities opened outermost level 
traditional disadvantages block structured languages compared modular ones 
overcome problems cardelli leroy propose dot notation existential types 
notation proposal show combined polymorphic type inference 
model types record types existentially quantified component types 
values components created record construction decomposed record field selection 
mechanism provides comparable expressiveness modules modula crucial difference records class values 
see appendix formal treatment dot notation ml 
informally fields selected record identifier compatible types 
extend rule nested records fields selected identical access paths compatible types 
disallow field selection arbitrary record expressions determine statically types compatible representations 
point discussed leroy 
examples illustrate dot notation ml syntax 
start record type existentially quantified component types type key int expression fun existential type variable type type function application produces result type int 
follows fact selected record identifier consequently types compatible expression type correct 
hand expressions type correct 
instance fun incorrect existential type variable type escapes scope fun different identifiers different private types 
determine statically hold values case assume values different types 
example involves nested records type nest key fun 
ufer odersky polymorphic type inference data types page application type correct context definitions similar expression guarantee statically representation type 
examples examples developed tested caml light system 
see additional examples 
minimum heterogeneous list type declaration section type key key int define heterogeneous list elements type key auxiliary functions 
caml uses semicolons separate list elements 
ks key key list length key true define function takes value type key applies second component function component value key key define function returns smallest element list keys respect integer obtained applying function key elements rec min fun xs min xs key expression key min ks evaluates 
multiple existentially quantified type variables permitted existentially quantified type variable component type value constructor illustrated example type multi multi int multi multi multi prefix multi fun list length multi fun list length application map multi results list 
expression prefix caml syntax equivalent op standard ml turns operator prefix function symbol 
ufer odersky polymorphic type inference data types page lists composable functions algebraic data types preceding examples constructor 
data types constructors possible existentially quantified type variables local component type constructor appear 
type describes lists functions type function allow composed type type combines universal existential quantification 
universally quantified type variables correspond argument type result type function respectively existentially quantified type variable represents intermediate types arising composition functions 
construct lists composable functions example twice equal double fun fl twice equal double write function applies list functions argument 
naive attempt fails type apply recursive call different type apply left hand side 
form polymorphic recursion permitted ml rec apply fun fl apply fl overcome problem encapsulating function list argument type type recursion definition apply monomorphic occurrences type define apply terms apply rec apply fun fl apply fl apply fl apply fl evaluation expression apply fl results true true 
stacks parameterized element type example demonstrates universal existential quantification combined container types 
define record type stack existentially quantified component types 
advantage tuple type refer components name 
type stack self push pop ufer odersky polymorphic type inference data types page top null bool fly implementation int stack terms built type list self push fun xs xs top hd pop tl null fun xs xs systematic implementation stacks provide constructor function implementation lists xs self xs push fun xs xs top hd pop tl null fun xs xs arrays xs self vect list rev xs push fun concat vect top fun vect item vect length pop fun sub vect vect length null fun vect length dynamic dispatching write stack functions uniformly implementations 
wrapper functions decomposing value type stack applying intended inner operation self component constructing new value updated self component 
push self push pop top null self push pop top null result type operation encapsulation necessary top self push pop top null combine different implementations heterogeneous list stacks apply wrapper functions element list 
example expression map top map push evaluates 
parameterized stacks dot notation dot notation lets express stack wrapper functions elegantly 
rewrite push wrapper function update self component applying inner push operation 
similarly new top wrapper function applies inner top operation self component 
keyword part caml express component wise non destructive record update 
push self push self top top self ufer odersky polymorphic type inference data types page language extension mini ml user defined algebraic data types 
addition usual constructs identifiers applications abstractions expressions introduce sugar free versions ml constructs deal data types 
data declaration introduces new recursive data type values type created applying constructor tags inspected expression decomposed pattern matching expression 
names needed definition type environments include identifiers value constructors syntax expressions 
syntax types includes recursive algebraic data types skolem types type identifiers bound pattern matching expression type existentially quantified 
explicit existential types arise domain types value constructors 
syntax types included 
match expression source level caml syntax corresponds nested expressions expressions conditions pattern matching expressions different cases 
ml example type int match written follows assuming type int defined type variables skolem types recursive types types existential types type schemes constructors identifiers names expressions syntax types expressions 
unit bool lx data ufer odersky polymorphic type inference data types page data fst lacks special syntax mutually recursive type declarations mutual recursion algebraic data types add expressive power language supports ordinary recursion 
application bekic theorem states group mutually recursive declarations replaced recursive declarations successive elimination see details 
example illustrates transformation source level ml type declarations type type tcon translate equivalent declarations type system section type system 
system deterministic exactly type rule syntactic construct 
type environment finite mapping names type schemes 
value constructors mapped recursive type schemes belong type scheme domain extension new environment maps free type variables free skolem types type generalizes environments analogously auxiliary predicates functions type inference rules 
predicates describe instantiation type schemes generalization existential types respectively 
corresponding functions replace bound type variables type schemes existential types fresh type variables type inference algorithm see section 
function universally quantifies free variables type free environment 
function replaces bound type variables existential type fresh skolem type constructors parameterized free type variables environment 
typing rules shown mini ml system 
typing variables abstractions applications expressions 
new rules type data type declarations value constructors expressions pattern matching expressions 
explain new rules turn ka int unit data unit unit tcon data unit tcon unit 

kh 
dom dom fv fv 
fv fs fs fv inst inst gen ufer odersky polymorphic type inference data types page decl rule elaborates recursive data type declaration adds new outermost constructors environment belonging type guarantees contain free type variables 
pack rule assigns type constructor looking environment recursive type belongs 
generalizing component type constructor type prospective argument rule observes existential quantification argument position means universal quantification function constructor type 
test rule ensures predicate applied arguments type instance result type constructor open rule governs typing pattern matching expressions 
requires expression instance result type constructor types body iff types iff types fresh type vars fresh type vars fresh skolem type constructors auxiliary predicates functions type inference var app abs type inference rules mini ml expressions fv fv inst inst gen fv fv fs fv fv lx gen data 
ufer odersky polymorphic type inference data types page environment extended typing bound identifier type skolemized generalized version component type new skolem types appear ensures appear type identifier free rule guarantees skolem types appear result type decl rule prohibit nesting undeclared recursive types data type declared 
consequence pack rule values nested data type constructed outermost value constructors put environment preceding application decl rule 
furthermore value constructor subsequent data type declaration declaration hides 
recursive data type comes existence presence outermost value constructors environment 
mechanism corresponds generativity ml 
theorem states conservative extension mini ml theorem mini ml expression iff proof structural induction theorem holds extend mini ml include recursive data types patternmatching expressions existential quantification 
computing principal types section type inference algorithm show correctness 
start definitions 
environment substitution define call closed environment free variables substitution decl pack test open type inference rules expressions involving existential types 
fv 
data 
kh 

kh 
bool 
kh 
gen fs fs mini ml qa dom fv fv dom fv qa dom ufer odersky polymorphic type inference data types page algorithm follows syntax directed type inference rules case rule 
takes arguments current substitution current environment expression typed returns new substitution inferred type expression 
cases identical algorithm 
additional cases deal data type declarations value constructors expressions pattern matching expressions data case adds new outermost constructors recursive data type declaration environment checks new type contain free type variables 
case looks data type constructor belongs 
generalizes component type instantiates result type fresh type variables 
assigned type guarantees constructor applied arguments type generalization component type similarly case looks data type instantiates type fresh type variables 
assigned type guarantees predicate applied arguments type instance result type case assigns type pattern matching expression 
requires expression instance result type constructor types body extended environment bound identifier skolemized version argument type case checks new skolem types appear fresh fresh type inference algorithm mini ml expressions sub env exp sub type inst mgu lx gen 
ufer odersky polymorphic type inference data types page result type remainder section presents lemmas theorems needed establish soundness completeness algorithm 
see proofs 
lemma proof induction structure theorem syntactic soundness algorithm proof induction structure lemma 
definition closed environment 
type principal type expression implies lemma exists proof induction structure theorem syntactic completeness principal types closed principal type type inference algorithm expressions involving existential types data 
fv 
inst 
kh 
inst inst bool 
kh 
gen fs fs fs fs fs qa qt gen qa qt ufer odersky polymorphic type inference data types page proof follows lemma 
formal semantics section standard denotational semantics show type system sound respect semantics 
evaluation function maps expression semantic value context evaluation environment evaluation environment partial mapping identifiers semantic values 
tagged values capture semantics algebraic data types 
distinguish error situations run time type errors wrong nontermination mismatch fail attempt decompose tagged value tag match tag destructor 
type inference system sound respect evaluation function typed program evaluates wrong 
formal proof semantic soundness 
semantic domains shown 
definition stands coalesced sum types share fail values 
semantic function expressions 
strict fail model semantics ml language soundness considerations orthogonal issue strictness 
identify types weak ideals semantic domain type environment partial mapping type variables ideals skolem type constructors functions ideals 
semantic interpretation types defined 
universal existential quantifications range set ideals contain wrong 
noted interpretation handles recursive data types expressed form nonregular data types type leaf node require recursion type constructors 
adequate semantics nonregular types extending weak ideal model machinery extension plotkin 
theorem semantic function types defined 
unit domain boolean domain constructor tags semantic domain semantic domains unit fail false true fail 
fail wrong fail 
ufer odersky polymorphic type inference data types page semantic function expressions semantic function types exp wrong lx lv data lv lv snd fail texp tenv unit bool 


li li li ufer odersky polymorphic type inference data types page proof type expressions formally contractive fixed points exist 
definition semantic type judgment assumption set expression type scheme 
means ii means implies iii means theorem semantic soundness proof induction structure proof tree see appendix proof sketch 
corollary demonstrated light weight data types class implementations integrated functional language static polymorphic type system explicit type variables algebraic data type declarations regardless strictness considerations 
shown data types add significant flexibility expressiveness language changing syntax 
type system extends damas milner system existentially quantified component types data record types type inference algorithm proved type system semantically sound 
class modules harper lillibridge independently leroy provide alternative solutions problems motivated proposal 
modules heavy semantic machinery expressing class data types 
contrast data record types existentially quantified component types quite different flavor provide light weight types easily understandable semantics directly functional core language 
desirable include proposals language allow redundancy core module languages 
acknowledgments express martin abadi ben goldberg fritz henglein radha jagadeesan stefan kaes xavier leroy michel mauny tobias nipkow ross paterson nigel perry benjamin pierce phil wadler helpful feedback stimulating discussions 
grateful anonymous referees detailed comments 

abadi private communication june 

burstall macqueen sannella hope experimental applicative language 
stanford lisp conference pages 
dom dom tenv wrong ufer odersky polymorphic type inference data types page 
cardelli leroy types dot notation 
proc 
ifip working conference programming concepts methods pages sea israel april 

cardelli wegner understanding types data abstraction polymorphism 
acm computing surveys december 

clement despeyroux despeyroux kahn simple applicative language mini ml 
proc 
acm conf 
lisp functional programming pages 

damas type assignment programming languages 
phd thesis university edinburgh 

damas milner principal type schemes functional programs 
proc 
th acm symp 
principles programming languages pages january 

harper standard ml 
technical report school computer science carnegie mellon university september 

harper lillibridge type theoretic approach higher order modules sharing 
proc 
th acm symp 
principles programming languages pages january 

hudak peyton jones wadler report programming language haskell non strict purely functional language version 
acm sigplan notices may 

ufer polymorphic type inference data types 
phd thesis new york university july 
available technical report december new york university department computer science 

ufer odersky type classes signatures types 
proc 
phoenix seminar workshop declarative programming november 

leroy manifest types modules separate compilation 
proc 
th acm symp 
principles programming languages pages january 

leroy mauny dynamics ml 
proc 
functional programming languages computer architecture pages 
acm 

leroy mauny caml light system release documentation user manual september 
distributed caml light system 

macqueen dependent types express modular structure 
proc 
th acm symp 
principles programming languages pages 
acm january 

macqueen plotkin sethi ideal model recursive polymorphic types 
information control 

meyer reinhold type type 
proc 
th acm symp 
principles programming languages pages january 

milner tofte harper definition standard ml 
mit press 

mitchell harper essence ml 
proc 
symp 
principles programming ufer odersky polymorphic type inference data types page languages 
acm january 

mitchell extension standard ml modules subtyping inheritance 
proc 
th acm symp 
principles programming languages january 

mitchell plotkin types existential type 
acm trans 
programming languages systems 

odersky objects subtyping functional perspective 
technical report rc ibm 

perry implementation practical functional programming languages 
phd thesis imperial college 

pierce turner simple type theoretic foundations object oriented programming 
journal functional programming april 

plotkin domains 
course notes 
tex ed edition 

turner miranda non strict functional language polymorphic types 
proc 
functional programming languages computer architecture pages nancy france 
springer 
lecture notes computer science vol 


wadler blott ad hoc polymorphism ad hoc 
proc 
th acm symp 
principles programming languages pages 
acm january 

winskel formal semantics programming languages 
mit press 
proof semantic soundness lemmas proof lemma type environment type scheme proof structural induction lemma substitution proof structural induction proof prove theorem consider cases type inference rules 
applying inductive assumption typing judgments preceding steps type derivation semantics types partial results evaluation 
cases choose arbitrarily include new cases 
lemma frequency 
premises type derivation definition inductive assumption dom wrong wrong data 


data ufer odersky polymorphic type inference data types page premises definition types choose arbitrary finite closure ideals limits 
follow proof macqueen plotkin sethi 
know holds free inductive assumption weak ideals case done 
interesting case 
kh 


finite 

kh 
bool bool 
kh 
fv fv 



fst fail ufer odersky polymorphic type inference data types page variables free choose finite definition union intersection exist functions assuming skolem type constructors generated free extend obtain applying inductive assumption premise obtain continuity expression closure ideals limits 
dot notation formalize dot notation section extension called 
records merely named tuples field selection syntactic sugar tuple component selection types modeled data types existentially quantified component types 
values type created applying constructor value decomposed pattern matching expression 
allow existentially quantified type variables escape scope identifier type appear long expression decomposed identifier existentially quantified type variables escape scope identifier 
decomposition identifier constructor produces iden 








gen gen gen fs fs finite ufer odersky polymorphic type inference data types page tical skolem type constructors 
call notation dot notation uses decomposition pattern matching record field selection 
type inference rules 
var app rules original system 
abs rules modified prevent skolem type constructors associated bound identifier escape scope 
data pack test rules remain unchanged 
new open rule prevents skolem type constructors associated bound identifier escaping scope imposes restrictions skolem type constructors associated identifier decomposed 
type inference algorithm compute principal types obtained straightforward modification algorithm discussed section 
retain original semantic function section 
cardelli leroy prove semantic soundness giving type semantics preserving translation 
idea enclose expression subexpressions form surrounding expression defines replace subexpression form replace chose enclosing expression defining large existentially quantified var app abs decl pack test open type inference rules dot notation fs fs lx gen fs fs 
fv 
data 
kh 

kh 
bool 
kh 
gen fs fs ufer odersky polymorphic type inference data types page type variables arising inner expressions escape surrounding definition 
abs open rules guarantee existentially quantified variables emerging decomposition escape scope safe enclose body expression 
careful surrounding decomposition translation fail enclosed decomposition original expression necessarily reached possible value held constructor tag need replace expression branches possible constructor type reflected definition auxiliary translation function modify open rule function facilitates translation skolem type constructors left unchanged translation type environment 
translation auxiliary functions shown 
remainder section establish semantic soundness 
lemma proof follows immediately suitable typings fail 
lemma proof definition branch 
theorem preservation types proof induction structure consider cases premises derivation inductive assumption lemma claim follows applying original abs rule 
premises derivation inductive assumption lemma apply original rule 
premises derivation inductive assumption lemma branch fs fs branch branch branch lx fs fs branch gen fs fs gen gen branch gen 
kh 
gen ufer odersky polymorphic type inference data types page auxiliary translation functions lx lx branch branch data data branch branch fail fail fail fail fail fail fail fail 
fv branch 
gen snd fail 
fv fv fv ufer odersky polymorphic type inference data types page claim follows original rule 
theorem preservation semantics proof induction structure abbreviate interesting cases follows proof cases trivial claim proved 
corollary semantic soundness proof follows previous theorem theorem 
gen branch dom dom gen lx lx lv lv lv branch branch lx lx branch branch branch branch branch fail snd snd branch snd branch wrong 
