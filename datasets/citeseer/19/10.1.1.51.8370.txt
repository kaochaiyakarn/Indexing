horizontal class partitioning queries object oriented databases department computer science university science technology clear water bay kowloon hong kong cs ust hk gopal department mathematics university science technology clear water bay kowloon hong kong ust hk horizontal partitioning technique reducing number disk accesses execute query minimizing number irrelevant instances accessed 
develop cost model query execution case unpartitioned horizontally partitioned classes 
algorithms perform horizontal partitioning cost driven algorithm cda predicate affinity algorithm paa approximate algorithm 
cda cost model aims reduce number disk accesses executing set queries paa extension graph theoretic algorithm relational model oodb model 
approximate algorithm takes advantages paa cda facilitate efficient horizontal fragmentation scheme design object oriented databases 
evaluate goodness horizontal class fragmentation experiments analytical cost model 
horizontal class partitioning treated object oriented database schema design technique facilitates construction class hierarchies efficient query processing 
keywords object oriented database horizontal class partitioning cost model query processing predicate selectivity hill climbing heuristic 
object oriented database systems emerging generation database technology especially new applications cam cad software engineering multimedia databases :10.1.1.44.5524
horizontal partitioning technique reducing disk accesses execute query minimizing number irrelevant objects accessed 
centralized databases data stored attributes define instances 
data retrieved query instances loaded main memory needed 
number retrieved pages high number irrelevant instances relevant instances high 
instances requested query located main memory number retrieved pages smaller 
class partitioned fragments instances frequently accessed instances placed fragment number pages accessed reduced 
partitioning called horizontal partitioning hp 
little hp comparison relational model 
apply techniques relational model straightforward manner object oriented models fundamental concepts object includes features encapsulation inheritance class composition hierarchy 
features complicate definition representation hp 
issues involved distributed design object database system authors suggest techniques extended object databases 
effective solution 
authors developed representation schemes horizontal fragmentation solution supporting method transparency oodbs 
comprehensive set algorithms horizontally fragmenting class models 
algorithms generating horizontal class fragments primary derived algorithms 
primary algorithm graph theoretic algorithm developed relational databases 
addressed consider representation scheme horizontal class partitioning object databases ignored physical cost corresponding savings amount irrelevant data accessed 
object oriented model basic features described literature 
objects uniquely identified object identifiers oid 
objects having attributes methods grouped class 
instance class object oid set values attributes 
classes organized inheritance hierarchy specialization property isa subclass inherits attributes methods defined superclass es 
database contains root class ancestor class database 
types attributes possible simple complex simple attribute atomic domain integer string 
complex attribute database class domain 
hierarchy arises aggregation relationship classes attributes 
hierarchy known class composition hierarchy rooted directed graph rdg nodes classes arc pair classes domain attribute example rdg 
methods signature including method name list parameters list return values atomic value integer string object identifier oid 
motivation distributed management concentrated main areas object oriented support heterogeneous database systems distributed object storage management 
little done homogeneous distributed object oriented databases 
distributed design facilitates efficient processing applications class partitioning allocation fragments distributed sites 
algorithms developed help design distributed object oriented databases 
partial list benefits horizontal class fragmentation ffl different queries access update fragments class fragmentation reduce amount irrelevant data accessed queries 
ffl fragmentation reduces amount data transfered migration required 
ffl decomposition class horizontal class fragments treated unit permits queries executed concurrently 
ffl horizontal fragmentation treated object oriented database schema design technique takes class generates class hierarchy horizontal fragments increase efficiency queries execution 
need cost driven algorithm literature algorithms horizontal partitioning oodbs 
techniques defined discuss cost performance algorithm defined measure cost executing query 
el algorithm hp extension ra algorithm 
note algorithm uses predicate affinity matrix input 
predicate affinity measure imaginary bound pair predicates 
factors operations data transfer important performance applications distributed database systems 
performance improved adequate distribution design including fragmentation allocation applied 
wanted improve performance applications develop algorithm cost model executing queries algorithm assume predicate affinity matrix set queries access frequencies input respect rule user queries account total data access database systems 
contributions organization algorithm generating horizontal class fragments cost model executing queries 
major feature algorithm minimizes disk accesses best knowledge algorithm uses cost model generating horizontal class fragments 
main contributions 
development mathematical formula calculate number horizontal fragmentation schemes set minterm predicates 

development cost model executing queries horizontally partitioned class collection unpartitioned class collection 

evaluation effect horizontal partitioning size classes number fragments 

development evaluation algorithms achieve horizontal class fragmentation 
rest organized follows section presents definitions specifying problem horizontal fragmentation section presents procedure generate horizontal class fragment schemes section presents cost model unpartitioned classes horizontally partitioned classes section reports experiments section presents horizontal class partitioning algorithms section presents summary mentions currently undertaken 
basic concepts definition query object oriented database models structure clause range clause qualification 
target clause specifies attributes object complete object class returned 
denotes complete object denotes attribute object range clause contains declaration object variables qualification clause 
denoted class 
qualification clause defines boolean combination predicates logical connectives 
example query retrieving name projects cost greater cost method defined class project dept dname proj duration location manufacturer color vid model location employee department project vehicle legend aggregation relationship string numeric pid pname budget ename ssn name class composition hierarchy class employee located hong kong formulated fv pname project cost location hong kong definition simple predicate simple predicate predicate simple attribute defined attribute name method operator value operator comparison operator set operator contained gamma contains set gamma equality 
value chosen domain attribute value returned method 
definition path represents branch class composition hierarchy specified ffl class database schema ffl attribute class ffl attribute class domain attribute gamma class gamma 
class path access attribute method class returns value set oids 
length path defined number attributes call class starting class attribute method attribute method path 
definition component predicate component predicate predicate defined path 
query involves component predicate called component query 
example component query retrieves names employees database project formulated follows fv ename employee dept roj name database dept roj name database component predicate 
note example pname database simple predicate class project component predicate class department employee 
pi fp set simple predicates defined class set minterm predicates fm defined fm pi eliminate contradictory implications predicates 
example suppose predicates fp defined class project follows cost cost location hong kong location aris location montreal minterm predicates defined predicates cost location hong kong cost location aris cost location montreal cost location hong kong cost location aris cost location montreal 
minterm predicates generated 
example possible specify predicates form possible eliminated contradictory 
horizontal class partitioning technique class horizontally fragmented class fragments ff fm fragment satisfy qualification clause 
horizontal partitioning class represented isa hierarchy horizontal class fragment specified class shown 
generation horizontal class fragment schemes consider set queries defined simple predicates fp defined set attributes set methods assume simple pid pname duration budget location instance instance instance instance pid pname duration budget location instance instance cl cl legend cl clause corresponding duration isa relationship clause corresponding duration cl class project class project fragment fragment implicit oid horizontal class fragments class project predicates non minimal 
predicates generate set fm minterm predicates 
definition scheme scheme disjoint partition minterm predicates 
example scheme defines scheme partitions minterm predicates partition second third partition 
scheme forms horizontal fragmentation class minterm predicates calculate number possible horizontal fragmentation schemes class theorem 
theorem number minterm predicates possible schemes 
represents schemes defined minterm predicates having partitions gamma gamma gamma 
proof prove theorem induction notice 
equations hold 
assume holds holds prove hold 
notice side zero 
holds holds 
schemes minterm predicates having partitions formed ways adding minterm schemes having partitions 
addition minterm partitions remains partitions 
way number schemes 
ii way add minterm separately partition simple element gamma partitions partitions 
way number schemes going gamma adding ii obtain gamma satisfied 
proof complete induction observing fact expression true just sum distinct schemes different partitions 
example assume generated schemes minterm predicates 
schemes defined follow note 
schemes generate schemes compute note represents schemes partition generated scheme including minterm result 
scheme partitions generated considering minterm partition group 
schemes partitions firstly generate schemes including partition including second partition 
corresponds term equation 
scheme generated considering minterm partition group corresponds second term equation 
number schemes predicates 
exhaustive enumeration procedure programmed produce schemes 
represents number possible schemes number minterm predicate 
note partition scheme represents fragment 
schemes determined generate clause define fragment 
fragment denotes partition 
minterm predicate number schemes 
lower bound upper bound 
number schemes link connector 
example scheme representing fragment contains case 
example example enumerate schemes scheme partition schemes partitions schemes partitions scheme partitions cost model horizontal class partitioning section analytical cost model executing query horizontal partitioned class 
total cost execute query otal cost io cost cpu cost com cost io cost input output cost reading writing data memory disk cpu cost cost executing cpu instructions example evaluating predicate com cost cost network communication different nodes 
concentrate io cost disregard cpu cost com cost 
large database applications huge amount data accesses cpu cost contribution total cost significant database consider centralized com cost taken account 
cost model parameters order cost model basis cost driven fragmentation algorithm notations 
classify parameters cost model categories database query horizontal class fragments 
database jjc jj cardinality class collection number objects jc total number pages occupied class lc object length size number bytes class collection ps page size file system unit byte query starting class query ref number objects class path evaluation process class composition hierarchy number queries number predicates queries sel selectivity query sel selectivity predicate proj length output result valid binary variable value predicate valid horizontal fragment horizontal class fragments number fragments class sel selectivity class fragment jjf jj cardinality class fragment number objects jf total number pages occupied class fragment ref number objects class fragment path evaluation process class composition hierarchy 
nn legend query part link link example unpartitioned classes cost executing query unpartitioned classes order execute query unpartitioned classes shown develop cost model formulation 
cost broken components cost evaluating predicate cost building output result corresponds number pages loaded order execute predicate number pages loaded build result 
estimation number pages class collection sequential scan index scan major strategies scanning class collection 
objective index attain faster instances access objective horizontal class partitioning reduce irrelevant instances access 
objectives orthogonal complementary 
concentrate sequential scan strategy index incorporated model naturally needed 
objects class assumed stored accessed disk sequentially 
assume objects smaller page size cross page boundaries 
total number pages occupied class collection jcj ps lc ceiling floor functions respectively 
formula class collection horizontal class fragment 
estimation number page accesses predicate evaluation order estimate number page accesses class collection evaluation predicate yao function 
records uniformly distributed blocks contains records 
records randomly selected records expected number page access ao gamma nd gamma gamma gamma yao formula jjc jj jc ref ref ref gamma fan gamma ref jjc jj 
cost formulate query execution note query starting class attribute method shows path class class classes path unpartitioned 
total cost executing query unpartitioned class equation otal cost evaluation cost io building output evaluation cost jjc ps lc ao jjc jc ref io building output sel jjc ps cost executing query horizontal partitioned classes class horizontally fragmented class fragments 
assume query starts class ends class query clause qualification see definition predicates defined subset classes ffi class nb nb number predicates class ffi respectively 
example assume class department horizontally fragmented horizontal class fragments dept dept correspond department computer science mathematics respectively 
query retrieves salary employees computer science department working project located hong kong 
query starts class employee ends class project 
defined clause cl employee dept cs employee dept roj location hong kong 

legend unpartitioned class query 

horizontally partitioned class horizontal class fragment part link isa link example horizontal class partitioning predicate evaluation cost io eval cost sum yao function class involved query need consider effect horizontal partitioning class io eval cost jjc ps lc ao jjc jc ref nb valid ao jjf jj jf ref note jjf jj jjc jj sel ref ref gamma fan gamma sel 
io building output sel jjc ps generalize formulas classes horizontally fragmented 
introduce binary variable hp hp class horizontally fragmented 
recall query defined clause predicates defined clause horizontally fragmented class class composition hierarchy case load horizontal class fragments satisfied predicates 
introduce binary variable valid predicates horizontally fragmented class load class fragments 
predicate evaluation cost defined equation io eval cost hp nb valid jjf jj ps lc gamma hp jjc ps lc hp nb valid ao jjf jj jf ref ao jjc jc ref io building output sel jjc ps comparison total cost unpartitioned partitioned classes subsection compare total cost formula unpartitioned classes horizontally partitioned classes order show utility horizontal partitioning 
unpartitioned classes instances classes loaded main memory see equation horizontally partitioned classes query needs load horizontal class fragments contribute result done valid function see equation 
note jf jc horizontally partitioned classes ao jjf jj jf ref ao jjc jc ref 
case horizontal partitioning improve performance evaluating predicate 
selectivity query high extra overhead deteriorates performance horizontal fragmentation 
evaluation utility horizontal partitioning performance metric order show utility horizontal partitioning analytical experiments see effect number horizontal class fragments fan cardinality improvement performance due horizontal partitioning 
improvement performance characterized normalized io metric defined follow normalized io ios horizontally partitioned class collection ios unpartitioned class collection note value normalized io implies horizontal partitioning beneficial 
experiments consider class collection class composition hierarchy path length see 
existence optimal scheme experiment show existence optimal scheme class 
parameter values produce experimental results shown cardinality class project page size bytes 
curves show optimal scheme exists 
total cost number schemes total io cost min total io cost min total io cost plot total cost vs number schemes class project effect varying cardinality experiment study impact variations cardinality class horizontally fragmented performance gain 
parameter values experience shown cardinality class project varied page size bytes number objects page fan 
number fragments 
experience shows performance terms normalized io constant cardinality increases shows 
normalized io cardinality plot normalized io vs cardinality class project effect varying fan experiment study impact variations fan class department class project performance gain 
varied values fan order see effect normalized io 
parameters values produce experimental results shown cardinality class project page size bytes number objects page 
number horizontal class fragments class project 
observe result performance gain increases increase fan 
fan impact considerable horizontal class partitioning 
normalized io fan plot normalized io vs fan horizontal class partitioning algorithms section algorithms horizontal class partitioning cost driven algorithm cda predicate affinity algorithm paa approximate algorithm 
cost driven horizontal partitioning algorithm assume class fragmented fp set simple predicates defined class 
simple predicates generate minterm predicates fm exhaustively enumerate possible schemes see subsection 
fq set queries defined class composition hierarchy including class note query frequency 
scheme calculate cost executing queries shown 
scheme minimal cost gives best horizontal partitioning class cost driven algorithm cost min loop take schemes cost scheme cost cost query cost cost cost frequency endfor cost cost min cost min cost optimal scheme current configuration endif endfor note algorithm needs exhaustive enumerating strategy generate schemes 
small values procedure computationally expensive 
large values number computation expansive example number schemes 
affinity horizontal partitioning algorithm introduced algorithm horizontal class partitioning graph theoretic algorithm shows 
perform analysis predicates defined queries class query access frequency 
queries obtain parameter ffl means predicate query ffl equal values generate predicate usage matrix predicate affinity matrix value represents sum frequencies queries access predicates simultaneously 
apply graph algorithm class ch horizontally fragmented affinity algorithm apply expand operation apply shrink operation reduction cost 
reduction cost final fragmentation scheme horizontal class fragmentation algorithms order group predicates sets predicates 
group try optimize implications predicates 
generate horizontal class fragments 
major feature algorithm horizontal class fragments generated iteration time represent number queries predicates respectively 
comprehensive algorithm modeling important database characteristics cardinality class parameters mentioned section 
example assume class project horizontally fragmented suppose queries defined class fv pid project duration location hong kong fv pname project duration cost location paris fv dname department proj duration fv employee dept proj cost dept proj location paris characteristics queries shown 
predicates queries duration cost cost location hong kong location paris 
apply predicate affinity algorithm 
obtain fragments clause cl duration cost location hong kong 
clause cl duration cost location hong kong 
clause cl duration cost location paris 
query type query frequency selectivity simple simple component component query characteristics clause cl duration cost location paris 
clause cl 
secondly apply cost driven algorithm 
predicates queries generates minterm predicates generate schemes corresponding scheme calculate cost executing queries defined example scheme minimal cost represents horizontal class fragments class project 
execution algorithm obtain fragments duration cost location hong kong duration cost location hong kong 
duration cost location paris 
duration cost location paris 
note contains connected vee connector class fragments represented minterm 
introduce algorithm mixes algorithms cited algorithm called approximate algorithm subsection 
approximate horizontal class partitioning algorithm cost driven algorithm exponential time complexity optimal solution exhaustive search require see appendix number minterm predicates 
affinity algorithm take consideration cost executing queries 
developed approximate algorithm hill climbing technique order find near optimal solution 
approximative algorithm consider basic concepts 
duration cost location representation class fragments stable sub domains attributes methods domain partition note attribute method domain 
example domain duration attribute class project 
class horizontally fragmented predicates define partitions domain attribute method 
cross product partitions attribute method predicates determines partitioning domain attribute method stable sub domains ssd 
example assume class project horizontally fragmented fragments see example 
partitioning attributes methods defined class fragments follows dom duration dom cost dom location hong kong aris dom duration dom cost dom location hong kong paris represent horizontal class fragments table rows columns represent fragments respectively shown 
value jk equals class fragment valid ssd jk 
example value fragment example defined cost 
define operations fragments represented table 
ffl shrink fragments defined clauses differ predicate queries high frequencies don access predicate shrink fragments fragment example predicates predicate defined location attribute apply shrink operation obtain duration cost 
ffl expand horizontal class fragments horizontal fragmentation scheme defined clause having simple predicates query accesses class clause simple predicates expand clause horizontal fragments augmenting additional simple predicates defined attributes method clause defined new attributes methods 
example class fragment defined clause cl duration cost suppose query defined clause duration cost location hong kong expand clause cl clauses cl cl cover location attribute 
clause cl duration cost location hong kong 
clause cl duration cost location paris 
execution operations guarantee completeness horizontal fragmentation 
introduce subsection 
completeness definition class fragmented set class fragments complete instance object belongs class fragment 
completeness important horizontal class fragmentation horizontal class partitioning algorithm satisfy property 
note predicate affinity matrix guarantees completeness long simple predicates cost driven algorithm non overlapping minimal see subsection resulting class fragments guaranteed complete 
order guarantee completeness approximate algorithm starts complete class fragments resulting predicate affinity matrix shown 
note sum rows table equals attribute method ssd valid fragment 
example fragment equals zero 
execution operation shrink expand introduces new fragment check table especially sum rows equal rows values ssd 
data give information completeness horizontal fragmentation 
approximate algorithm note hill climbing technique needs parameters initial state generate step determine best state test 
initial state obtained applying affinity algorithm 
choice affinity algorithm best heuristic horizontal fragmentation algorithm 
note result algorithm set fragments fragment represented clause 
step determined application operations cited 
best state obtained cost driven approach cost formulas calculate cost required scheme order see lower cost cost current scheme algorithm ends scheme cost lower cost current scheme 
ffl algorithm inputs class fragmented sample queries frequencies predicate affinity matrix outputs scheme satisfies minimum cost initialization old scheme affinity algorithm perform paa predicate affinity matrix old cost cost old scheme calculate cost formulae section 
finish false change false boolean variables exit algorithm iteration finish change new scheme expand new cost cost new cost new cost old scheme optimal scheme new scheme old cost new cost change true endwhile new scheme shrink new cost cost new cost new cost old scheme optimal scheme new scheme old cost new cost finish true endwhile comparison algorithms subsection compare cost driven algorithm affinity algorithm approximate algorithm 
cost driven algorithm advantage affinity algorithm takes consideration cost executing queries drawback uses exhaustive enumeration procedure computation high large number minterm predicates 
affinity algorithm efficient computation cost represent number queries predicates queries respectively 
low comparing cost driven algorithm takes consideration application access patterns queries frequency queries model important database characteristics 
approximative algorithm predicting power cost driven algorithm 
technique algorithm modification affinity algorithm cost driven algorithm 
avoids exhaustive enumeration possible fragmentation schemes time uses cost model effective cost model cost driven algorithm 
hill climbing heuristics give global optimal solution possible come optimal solution approximative algorithm 
summary addressed problem horizontal class partitioning object oriented databases 
problem horizontal partitioning great impact performance system studied intensively relational database systems past 
object oriented database environment supports object oriented data model built fundamental concept object includes features encapsulation inheritance class composition hierarchy restrict application algorithms developed relational database systems 
techniques relational model applied straightforward manner object oriented data model 
developed general purpose cost model queries execution unpartitioned classes horizontally partitioned classes 
developed algorithms generate horizontal class fragments 
algorithm cost driven algorithm uses cost model query execution exhaustively search schemes find optimal horizontal fragmentation scheme 
second algorithm predicate affinity algorithm uses graph algorithm proposed efficient algorithm represent number queries predicates respectively cases give optimal horizontal fragmentation scheme minimizes total number disk accesses execute queries 
case third algorithm approximate algorithm apply predicate affinity algorithm get initial fragmentation scheme apply hill climbing heuristic improve solution obtained affinity algorithm possible 
cost model algorithm similar cost model cost driven algorithm 
preliminary results indicate horizontal class partitioning technique optimize query processing 
executing queries horizontally partitioned classes unpartitioned classes allocating horizontal class fragments different sites distributed environment 
appendix number minterm predicates possible schemes 
find approximative rate growth represents schemes defined minterm predicates having partitions 
find rate growth approximate order growth find lower bound upper bound lower bound start equation gamma obtain equation gamma gamma gamma gamma gamma substituting gamma obtain gamma gamma gamma gamma gamma gamma gamma generalize repeatedly gammak gamma gammak gammak gamma gamma gamma gammak gamma gamma gammak gamma gamma gamma gammak gamma gamma gammak gamma gamma gamma gammak gamma gamma gamma gamma gammak gammak gamma gamma gammak gamma gamma gamma gamma term separately line equation evaluate gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma similar method write gamma gammak gammak gamma gammak gamma gamma gamma gamma gammak gammak gamma gammak gamma gamma gamma gamma gamma gammak gammak gammak note write gammak gammak gammak note gamma equation write gammak gammak 
upper bound light observe gammak 
gamma ln ln take largest integer equal satisfying 
gammak atkinson bancilhon dewitt maier zdonik 
object database system manifesto 
proceeding international conference deductive object oriented databases pages 
banerjee kim kim 
queries object oriented databases 
proceedings ieee data engineering conference february 
simonet 
horizontal class partitioning objectoriented databases 
appear th international conference database expert systems applications dexa toulouse september 
bertino 
object oriented query languages notion issues 
ieee transactions knowledge data engineering 
ceri 
horizontal data partitioning database design 
proceedings acm sigmod international conference management data 
sigplan notices 
cho park whang 
new method estimating number objects satisfying object oriented query involving partial participation classes 
information systems 
barker 
comprehensive approach horizontal class fragmentation distributed object system 
international journal distributed parallel databases 
fung li 
cost driven evaluation vertical class partitioning object oriented databases 
fifth international conference database systems advanced applications dasfaa melbourne australia pages april 


tang 
cost model clustered object oriented databases 
vldb pages 


tang 
cost selection path expression processing algorithms object oriented databases 
vldb pages 
jain 
art computer systems performance analysis 
willy professional computing 
li 
partitioning schemes object oriented databases 
proceeding fifth international workshop research issues data engineering distributed object management ride dom pages march 
li vieweg 
method induced partitioning schemes objectoriented databases 
th international conference distributed computing system icdcs hong kong may 
navathe 
issues distributed design objectoriented databases 
distributed object management pages 
morgan kaufman publishers 
kim 
model queries object oriented databases 
proceedings th 
international conference large databases vldb august 
navathe ceri wiederhold dou vertical partitioning algorithms database design 
acm transaction database systems december 
navathe ra 
mixed partitioning methodology distributed database design 
computer software engineering 
navathe ra 
vertical partitioning database design graphical algorithm 
acm sigmod pages 
ozsu valduriez 
principles distributed database systems 
prentice hall 
simonet simonet 
type model databases knowledge bases 
proceeding nd workshop krdb knowledge representation meets databases bielefeld september 
