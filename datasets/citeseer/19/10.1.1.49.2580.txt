awareness services digital libraries arturo crespo hector garcia molina stanford university 
propose architecture digital library repositories data stores persistently hold digital objects documents interact clients perform indexing replication intellectual property management revenue management functions 
critical components stores awareness mechanism notify clients inserted deleted changed objects 
survey various awareness schemes including snapshot timestamp log describing variations single unified scheme 
possible understand relative differences strengths 
particular focus signature awareness scheme believe especially suited digital libraries show enhancements improve performance 
digital library repository stores manages collection digital objects documents movies simulations 
core repository call data store responsible storing reliable scalable way bits digital objects 
store interacts repository components 
example indexer may support associative searches contents digital objects 
name manager may responsible translating external user names report stan cs local identifier digital object 
replica manager may responsible making copies digital objects multiple stores reliability availability 
essential store offer simple defined interface clients access provide flexibility power needed modern digital library repositories 
example shows scenario data stores containing hci ai db technical reports 
stores may belong different repositories may administered different entities 
may wish computer science indexer provide access reports stores 
time second indexer repository db store may wish index db technical reports 
may convenient index access fraction reports store cs index may reports years old 
data store offers fundamental types services 
object access clients store retrieve digital objects 
access object handle store specific string identifies object 
note db tech reports ai tech reports hci tech reports db indexer cs indexer fig 

scenario stores indexers 
handles typically seen users 
instance user may search report subject author index getting external name report stan cs url 
fetch report name translated name service handle specific object store 

object awareness clients aware changes store new objects deleted objects modified objects 
awareness schemes may push model store informs interested parties pull model clients ask new 
typically awareness services timestamps objects creation times clients ask objects newer timestamp 
focus awareness services 
fundamental services needed want decouple storage digital objects management search access rights naming payment 
furthermore traditional timestamp approach web file system stores common schemes serious problems 
carefully consider spectrum options awareness services suggest solutions important strengths digital libraries 
illustrate problems traditional awareness schemes consider experience cs tr project 
project computer science departments research laboratories currently participate provide access technical reports 
report bibliographic record file created giving basic meta data report title authors date 
various index services need get new bibliographic records regular basis 
indexes sift selective dissemination service stanford users subscribe new reports giving keywords described interests 
cstr store provides interface get new records created timestamp 
sift operated see www com 
cs tr component discontinued service commercialized 
considered timestamp bibliographic record creation time file held record 
scheme store simply look new files client requested new records 
option ruled wanted able migrate replicate records 
example hardware holding collection obsolete want move records new file system keep mind digital libraries long lived need plan generate new timestamps unchanged records 
similarly wanted replicas record stores timestamp index service consider new version 
reasons ruled file system generated timestamps 
application generated timestamps field bibliographic record indicated record created modified librarian 
unfortunately scheme lead problems librarians modify records fix typo author name forget update timestamp 
similarly reason records created old timestamps 
lead services sift records provide incorrect indexing 
timestamps system application generated cope object deletion 
store looking objects timestamps greater value notice objects disappeared entirely 
problem course clear indexes web sites 
sites incapable reporting deleted web pages frequently see indexes point non existent pages 
may acceptable web digital libraries satisfied type awareness service 
alternative timestamp schemes carefully explore content schemes 
illustrate simple version store compute signature large checksum object holds 
sends full collection signatures client compare signatures objects holds indexed yielding identities changed objects 
schemes especially attractive digital libraries sensitive bits stored actual content object 
inefficient compute signatures send clients 
explore techniques content schemes practical 
summary contributions surveys spectrum awareness options highlighting advantages disadvantages 
interestingly awareness options know captured single algorithm configurable options 
unifying algorithm uni aware show different choices parameters lead different awareness mechanisms timestamp log triggered updates signatures 
signature schemes enhancements reduce computation communication costs involved 
stated believe schemes significant benefits digital library environment way objects stored may vary site time 
start discussion section defining awareness problem formally 
section briefly surveys related section surveys design space awareness mechanisms 
unifying algorithm uni aware section section discusses optimizations algorithms 
problem definition data store contains set digital objects fo object handle client retrieve object store 
addition object may attributes timestamp timestamp representing object created modified 
store globally unique identifier store contains object 
name user readable name object stan cs 
names retrieve objects help name service maps names handles 
title object title 
author author object author 
body main body object postscript file object full text ascii 
various sets attributes practice warwick framework dublin core 
defines list possible attributes types strings lists strings nested records 
attributes object called meta data stored object stored linked separate file computed fly object 
example title may stored explicitly meta data file extracted scanning document string follows title 
simplicity assume attributes simply part object model object removal creation deletions insertions set model modification attributes creation new object modification cases consider 
versions old object remains previous version 
handle new object necessarily different order distinguish versions 

place update old object removed handle new object unchanged represents place update object 

shadow updates old object removed new object new handle client data store needs learn digital objects satisfy filter predicate oe 
filter oe specifies objects client wishes learn 
learning object may mean receiving complete copy storing locally reliability 
learning may mean receiving digital object extracting certain attributes interest adding attribute values index discarding learning may mean simply receiving attributes interest full object 
client forget operation undoes action performed learned 
framework define goal awareness scheme store creates new object satisfies filter client client distant time learn store removes object satisfied filter client client forget closing section note general types handles semantic arbitrary ones 
looking semantic handle may able infer attributes identified digital object 
example handles strings form site id determine arbitrary handle conveys information examined store generated 
awareness problem types semantic handles interest sequential handles lexicographical order handles determines order digital objects created 
know object created modified 
note sequential handles place updates defined modified object keep old handle 
content sensitive handles digital objects attributes identical handles identical 
case detect duplicate objects simply checking handles 
similarly store modifies object way handle change making detection change easier 
content sensitive handles place updates 
section discuss sequential content sensitive handles awareness 
related awareness problem related problem maintaining database replicas 
snapshots means update replicas introduced 
differential refresh algorithm updates previous snapshot log 
data warehousing improves efficiency algorithms 
remote file comparison algorithms related awareness problem 
algorithms attempt locate disagreements large remote data files 
class algorithms randomized signatures compare remote file copies 
difference algorithms operate fixed set pages object deletion creation 
assume pages objects differ algorithms assumption 
related problem deployment programs network 
current solutions repository maintains master copy application code 
remote nodes check central node periodically updates master copy 
case update remote node replaces local copy updated application 
commercial software solves problem includes 
solutions awareness problem solutions program deployment problem significant difference scale 
program deployment solutions file granularity assume master copy contains relatively small number files 
client store design space performance complexity awareness mechanism depends store interacts client 
section briefly discuss possible store client interaction modes parameters 
push vs pull 
client store responsible keeping client date 
push model data store responsible notifying client changes happened 
pull model client responsibility query data store changes 
hybrid hint pull model client responsible requesting changes store provide hint client time query 
push model simplifies design client client needs wait changes 
network traffic may reduced messages sent changes 
negative side push model store needs know identity clients sure receive changes 
second problem evident tulip experiment elsevier science distributed internet science engineering journals universities 
tulip project initially push strategy assumption universities able start receiving documents time frame storage space available universities receive information 
assumptions hold practice course project strategy changed pull model 
pull model hand complementary characteristics store simpler client needs 
vs stateless stores clients 
data stores stateless respect clients 
store saves information regarding objects clients learned 
information client client basis global 
instance store may remember timestamp latest object seen client may simply remember single timestamp latest object seen clients 
case client may receive duplicate information 
store state persistent volatile 
state volatile failure destroy information case clients awareness scheme 
example store loses latest timestamp information clients learn objects store time just new ones 
store stateless client save state interaction store 
example client remember largest object timestamp seen 
pulls updates store ask objects timestamp greater 
cognizant clients sources 
cognizant store knows identities clients 
knowledge authorize pull requests clients decide clients push information 
store cognizant stateless store need 
server example non cognizant stateless store 
may sound surprising clients may may cognizant stores access 
web crawler example necessarily list stores access 
performs source discovery examining links existing objects urls contacting appropriate stores web pages 
number clients data store 
ratio number stores number clients parameter strongly affects performance various awareness schemes 
store serves clients may hard store keep state information client client basis forcing effective awareness scheme 
frequency pushing pulling may reduced 
client may interact store instance building index multiple collections 
stores different awareness schemes client prepared run different protocols 
unifying algorithm uni aware may convenient framework client coordinate different interaction styles 
uni aware algorithm section uni aware unified awareness algorithm covers known schemes 
casting schemes framework possible clearly see differences strengths 
section enhanced version uni aware 
presents algorithm uni aware 
stress pseudo code logical explanation necessarily best implementation algorithm 
code functions prefixed store run data store functions prefixed client run client functions started remotely remote procedure calls 
func store func oe pre func oe post func compress obj oe pre contains data store objects compress obj oe post return func client func client oe pre func client oe post func store oe pre func store oe post func compress func decompress obj client oe pre objects client learned compress obj client oe post store store oe pre store oe post compress decompress learn decompress forget fig 

uni aware algorithm algorithm uni aware uses different custom functions functions tailors uni aware execute particular awareness instance timestamps signatures 
custom function takes input list elements call vector performs operation elements constructs vector 
discuss functions 
compress function receives vector digital objects returns vector compressed objects 
intuitively compressed version object summary containing necessary detecting changes particular scheme 
examples valid compression function returns lzw compression object function returns pair object handle update time 
change detected client may need get changed new object replica 
uses decompress function inverse compress 
function receives vector compressed objects returns vector objects object handles 
examples decompression function apply lzw decompression algorithm return object 
second example decompress function returns object handle 
store pre selection function store oe pre eliminate consideration objects client interested 
example cs tr environment client may indicate interest objects containing word database 
store post selection function store oe post eliminate consideration objects client learned timestamp greater value 
uni aware algorithm conclude object needs forgotten receive compressed version data store sent object originally 
case store apply pre post filtering function missing object client check interested original object learn need forget 
uses functions client oe pre client oe post analogous store side 
cycle awareness process starts call client 
pull model client initial call push model store remotely invokes call client 
push model call initiated periodically triggered update store 
client function generates vector compressed objects vector client representing objects client learned past 
keep mind conceptual description instance client may simply cache vector client recompute 
client ask data store generate similar fashion vector store vector sent client compares 
objects represented vector store vector client ones client learn 
represented vector client vector store ones client forget 
client decompresses difference sets obtains handles objects need learned forgotten 
simple uni aware example 
objects store shown top left 
assume client built object cache contents shown top right 
assume client interested objects store oe pre client oe pre evaluate true possible know compressed objects learned client store oe post client oe post return true 
uni aware runs vector client vector store vectors computed shown assuming object compressed handle attribute vector store sent client client finds handles inserted objects performing vector store gamma vector client handle deleted objects vector client gamma vector store note update object title generates forget operation old version followed learn operation new version 
optimize algorithm detect deletion actions object order single modify operation 
discuss 
subsections explore different alternatives custom functions 
changing compression decompression post selection data store handle title tr tr tr client handle title tr tr tr tr tr tr tr tr tr gamma tr tr gamma tr tr fig 

example uni aware algorithm functions produce families strategies snapshot algorithms timestamp algorithms log algorithms signature algorithms 
note pre selection functions change instances 
support client filtering included discussion 
snapshot algorithms snapshot algorithms simplest definitions custom functions 
require store produce snapshot vector objects store 
instances family 
simple snapshot algorithm uses customs functions 
custom functions simply return argument change 
implies store sends objects client changed order update 
clearly wasteful positive side algorithm requires little functionality store useful small stores 
func compress objvector return objvector func store oe post objvector return objvector func decompress objvector return objvector func client oe post objvector return objvector fig 

custom functions simple snapshot algorithm handle snapshot algorithm works versions shadow updates place updates handles deleted objects reused 
content handles special case scenario 
case snapshot need include handles store objects 
comparing previous snapshot new handle current snapshot indicate insertion missing handle indicate deletion 
customs functions algorithm 
recall handle object 
func compress objvector result obj objvector result obj return result func store oe post objvector return objvector func decompress objvector return objvector func client oe post objvector return objvector fig 

custom functions handle snapshot algorithm handle snapshot algorithm extended include object attributes compressed vector addition just handle 
additional attributes help detect modifications case handle sufficient 
variation handle signature algorithm described 
timestamps timestamps store order objects insertion modification time reduce number objects sent client 
instance uses idea timestamp algorithm functions appear 
instance works delete stores 
store delete removes objects 
modifications allowed versions place 
shadow modifications allowed old versions removed 
timestamp algorithm store includes objects timestamp greater tm marker timestamp 
marker computed previous invocation algorithm tells objects client learned 
code computes maker timestamp invocation places 
really needed client compute pass store part function store oe post store compute save iteration 
sample execution timestamp algorithm 
see client learned object handle tr 
marker computed invocation 
func compress objvector return objvector func store oe post objvector max timestamp objvector return objects ts tm func decompress objvector max timestamp objvector return objvector func client oe post objvector return fig 

custom functions timestamp algorithm algorithm starts store creating vector store objects timestamps greater 
client compares vector version discover missing tr 
process marker computed 
data store handle title timestamp tr tr tr client handle title timestamp tr tr marker tr empty gamma tr gamma empty updated marker fig 

example timestamp algorithm variation timestamp algorithm ship full objects handle timestamp algorithm 
show custom functions 
compress function extracts handle timestamp object 
notice handles sequential see section handles play role timestamps need handles 
timestamps timestamp algorithm eliminate objects client aware 
client compares vector store vector client compares handles timestamps 
benefit respect handle snapshot algorithm cope place modifications handle reuse 
timestamp lets detect modifications handle change 
summary handle timestamp algorithm works delete stores version place updates 
reason restrict timestamp handle timestamp algorithms delete stores handle deletions 
problem deletions object removed data store keep record 
data store tell client delete 
approaches handling deletions 
approach client performs lazy deletions 
client keeps deleted entries error occurs client runs algorithm snapshot algorithm handle deletions 
error occurs example user searches client index get handle object interest goes store looking deleted object 
event user ask client delete index entry deleted object 
second approach data store keep deleted objects 
deleted object store inserts object handle attribute indicating 
timestamp creation time deletion time 
change timestamp algorithm handle timestamp algorithm client learns creation object forgets disadvantage take space data store 
space reclaimed store knows clients learned occurs client marker timestamps greater 
requires clients store 
alternatively data store unilaterally discard older certain time marker cut client uses marker tm smaller cut request fails client simple algorithm snapshot algorithm 
logs common metadata structure kept stores mainly crash recovery log 
log sequence records registers update activities database 
log record conceptually form lsn lsn unique sequential number handle affected object action performed update deletion insertion information new object body delta new object body 
essentially ways logs 
simplest timestamps objects 
object handle largest lsn log records contain timestamp 
purpose consider log level objects 
system provides lower granularity log simulate object level log coalescing log records 
similarly ignore log records related updates objects 
example say record lsn registers creation object record lsn registers modification records number current timestamp 
timestamp handle timestamp algorithms directly interpretation timestamps 
second way logs store report changes shipping log records describe changes 
gives log algorithm custom functions 
marker log sequence number lm computed previous invocation tells records need shipped analogous tm timestamp algorithm 
client gets new vector learn replays log actions lsn order takes appropriate actions local state 
example log record says object deleted client forgets record says text inserted client may index new text 
func compress objvector result obj objvector result obj obj log records return result func store oe post objvector discard log records lsn lm object log records left remove object objvector max lsn objvector return new objvector func decompress objvector max lsn objvector return objvector func client oe post objvector return fig 

custom functions log algorithm log algorithm requires substantial sophistication part client needs understand store actions 
may applicable limited situations cases effectively reduce amount data sent client 
timestamp algorithm problem limiting size log 
similar techniques described section 
signature algorithm timestamp log algorithms metadata timestamps log records reduce amount data sent client 
discussed difficult consistently manage timestamps logs stores fail objects migrate computer 
algorithm simple snapshot rely metadata change detection robust face operating system changes failures 
section enhance algorithm full objects need sent client 
idea send store object handle signature summarizes content 
signature token high probability unique object data store ii changes content object changes 
functions comply requirements including cyclic redundancy checks crc checksums 
probability signature unique object content arbitrarily low bits signature 
say bits probability objects signature insignificant safely detecting changes type person worries sun going supernova 
signatures recomputed time needed cached 
cache need reliable signatures lost corrupted re generate re applying signature algorithm objects 
note handles content sensitive see section need signatures handles play role signatures 
timestamps properties previous paragraph signatures assuming system generates unique timestamps object created modified 
timestamps need system support inferred content sense robust content signatures 
custom functions simple signature algorithm 
compression function produces vector tuples containing object handle signature 
vector sent client compares vector detect changes 
new modified objects client uses handle request object learn 
example simple vector algorithm 
func compress objvector result obj objvector result obj signature obj return result func store oe post objvector return objvector func decompress objvector result obj objvector result obj return result func client oe post objvector return objvector fig 

custom functions signature algorithm data store handle title tr tr tr client handle title tr tr tr tr signature tr signature tr signature tr signature tr signature tr signature gamma tr signature tr signature gamma tr signature tr signature fig 

example signature algorithm simple vector algorithm efficient simple snapshot algorithm send signatures client object store 
section discuss improvements reduce cost 
uni aware summary table summarizes uni aware options discussed 
algorithm bytes transmitted need metadata limitations dn handle snapshot ln place updates handle reuse timestamp du delete store shadow updates handle timestamp lu delete store shadow updates handle timestamp lu log lu signature ln may updates arbitrarily low probability bytes transmitted column gives rough estimate communication cost invocation 
assume client send bytes store total objects size client interested inserted deleted updated previous invocation 
assume timestamps log records signatures bytes long 
columns table indicate algorithm requires system supported metadata logical performance related limitations 
distributed uni aware algorithm signature algorithm desirable system meta data timestamps logs 
send substantial data client changes occurred 
section distributed algorithm dist uni aware reduces cost 
algorithm unified algorithm tailored variety specific instances 
intuitively dist uni aware starts sending single compressed version objects store opposed compressed version object 
summary signature matches client client knows immediately changes messages needed 
changes client asks store split objects groups send compressed summary group 
process repeats having client check objects group changed 
presents algorithm dist uni aware 
order form groups objects store client agree conceptual ordering objects 
example objects ordered handle title 
ordering store describe particular group subset minimum maximum objects ordering 
addition store usually wishes describe multiple groups convenient include group descriptor maximum object previous group minimum object group 
algorithm dist uni aware store send client vector group descriptors descriptor applies group store objects contains attributes data compressed objects combined signature bounds record 
record contains turn min identification handle minimum object group max identification maximum object maximum previous group minimum group 
algorithm dist uni aware uses custom functions 
pre selection functions simplicity single function oe pre store client 
compress function receives vector digital objects returns single compressed data item represents objects vector 
decompress function group function packages set objects groups objects 
post selection function oe post operates group descriptors opposed vector objects 
func store 
custom functions 
obj oe pre contains objects data store min min iobj max max iobj null null data compress obj oe post return func store gi 
custom functions 
obj oe pre contains objects data store group iobj gi return func client 
custom functions 
store 
custom functions 
client 
custom functions 
func client gi gi min oe pre contains objects client learn gi min gi max oe pre learn gi max forget handles oe pre inside interval gi gi min forget handles oe pre inside interval gi max gi obj objects oe pre handles interval gi min gi max data compress obj gi oe post return func client 
custom functions 
client data data min max learn min store 
custom functions 
client 
custom functions 
fig 

dist uni aware algorithm cycle awareness process starts call client 
client requests data store group vector calling function store 
data store produces sends client initial group vector spans objects 
client generates vector equivalent sent data store 
equivalent vector vector grouping information boundaries 
generating equivalent vector client may need learn object group boundaries forget objects outside boundaries group boundaries adjacent groups 
client equivalent vector compared vector sent data store 
data attributes equal client concludes group documents changed processing needed 
hand different client asks data store split group vector multiple vectors proceeds recursively algorithm 
recursion stops groups object 
stage client decide needs learn object comparing data store compressed version object compressed version 
hierarchical signatures section describe dist uni aware instance hierarchical signatures algorithm uses signatures objects group 
algorithm uses custom functions 
compression function produces single signature vector digital objects 
grouping function receives set objects information group produces vector groups half content original group 
digital objects grouped value handles 
presents execution example hierarchical signatures algorithm 
example client learned digital objects data store exception object handle tr just inserted tr updated client needs forget object handle tr deleted 
iteration algorithm data store groups digital objects single group sends vector containing group information signature client 
group information shown boxes vector store round 
includes handle object previous group null previous group case handle object group tr handle object group tr handle object group null 
client uses received group information build equivalent vector vector client digital objects learned handles tr tr 
client object handle tr immediately conclude needs learned 
assuming client construct equivalent vector notices signature data component differs 
client starts round requesting data store split initial group 
round data store forms group func group objvector gi sorted list handles objvector delete handles gi min delete handles gi max split divides list equal parts split vlow gi vlow min gi min vlow max max vlow min objects objvector handles vlow data compress vhigh max vhigh min min vhigh max gi max vhigh gi objects objvector handles vhigh data compress return vlow vhigh func compress objvector return signature objvector func client oe post return func store oe post return fig 

custom functions hierarchical signature algorithm vectors sends client 
grouping information vectors client immediately conclude tr needs forgotten 
tr maximum handle vector minimum handle second vector 
client forgets tr builds equivalent vectors 
time group vectors vector sent store processing needed 
vector different client starts round requesting data store subdivide 
round store sends information group tr tr group tr tr 
second group matches client store asked split group 
store round sends individual signatures tr tr 
client receives information atomic groups proceeds concludes needs forget old version tr learn new version tr 
hierarchical timestamps hierarchical timestamp algorithm similar hierarchical signature algorithm signature group objects largest timestamp group 
objects group modified group timestamp maximum timestamp match group timestamp client 
client request group split 
data store handle title tr tr tr tr tr tr tr tr client handle title tr tr tr tr tr tr tr tr round vectors store null tr tr null equivalent vectors client null tr tr null client concludes learn tr start round round vectors store null tr tr tr tr tr tr null equivalent vectors client null tr tr tr tr tr tr null client concludes forget tr start round second vector round vectors store tr tr tr tr tr tr tr null equivalent vectors client tr tr tr tr tr tr tr null client concludes start round vector round vectors store tr tr tr tr tr tr tr tr equivalent vectors client tr tr tr tr tr tr tr tr client concludes learn tr fig 

example hierarchical signature algorithm show custom functions algorithm similar hierarchical signature algorithm 
timestamps effective signatures detecting changes timestamps different objects match 
signatures different objects match probability arbitrarily small making signatures large bits 
course discussed timestamps depend correct operation underlying operating file system 
performance issues performance dist uni aware algorithms depends number new changed objects invocations 
changes round required 
single change takes roughly log rounds number digital objects 
changes require log rounds may need send twice data 
number changes increases having split groups 
eventually changes single group split cost higher just sent object signatures timestamps outright 
enhancements improve performance algorithm 
example groups split factors reducing number rounds log means store send information groups time cost may higher relatively small values initial message may include groups single group done dist uni aware 
improvement client send information objects requests group split 
illustrate consider example 
round client asks store split initial group 
client split objects groups tr tr tr tr send signatures 
way store find objects tr tr exist unchanged client splits group saving round 
store goes directly round 
possible optimization try cluster changed objects small groups 
example suppose changes store appends new objects 
grouping objects sort timestamp opposed signature done function group 
means changed objects contiguous break groups 
implies little effort pinpoint changed groups send detailed individual object signatures 
effective original scheme changed objects randomly distributed sorted objects 
important notice scheme uses timestamps correctness depend correct timestamps 
timestamps incorrect different client object algorithm detects differences signatures timestamps 
timestamps hints clustering objects reduce data exchanged 
illustrates idea 
data store handle title ts tr tr tr tr tr tr tr tr client handle title ts tr tr tr tr tr tr tr tr round vectors store null tr tr null equivalent vectors client null tr tr null client concludes learn tr start round round vectors store tr tr tr tr tr tr tr tr equivalent vectors client tr tr tr tr tr tr tr tr client concludes forget tr learn tr iterations needed pairs signatures equal 
fig 

example clustering technique contents store client shown top timestamps indicating objects modified 
initially store orders objects timestamp forms initial group objects 
descriptor group includes timestamps minimum maximum objects 
client notices signature group match asks store split group 
round store forms groups sends descriptors 
notice objects sorted timestamp changes located second group 
group split expect changes localized 
example group need split algorithm terminates quickly 
general ordering timestamp tends avoid having split groups reducing communication traffic 
example illustrates improvement 
store sent points group tr tr need points subsequent rounds 
round groups tr tr tr tr 
sending smaller groups lets algorithm terminate round 
studied awareness mechanisms repositories digital objects 
argued important cleanly separate storage functionality rest indexing replication varied components stores 
split critical effective awareness schemes correctly objects store migrate environment operating systems file systems hardware gets upgraded 
signature content schemes especially suited scenario believe performance enhancements discussed practical 
believe instructive view awareness schemes variants unifying algorithms uni aware dist uni aware 
differences assumptions performance apparent 
furthermore unified view awareness mechanisms extremely important client deal stores implement different schemes 

lindsay database snapshots 
proceedings international conference large databases 

william arms key concepts architecture digital library 
lib magazine july 
www cnri reston va home dlib july arms html 


www com 

hans albert fischer karen hunter van der loo rob ter paul jaco tulip 
final report 
elsevier science july 

barbara lipton class randomized strategies low cost comparison file copies 
ieee transactions parallel distributed systems volume pages 
april 

national research initiatives computer science technical reports cs tr 
www cnri reston va home cstr html 

robert kahn robert wilensky framework distributed digital object services 
technical report tn 
cnri may 

langdon note ziv lempel model compressing individual sequences 
ieee transactions information theory volume pages 

lindsay snapshot differential refresh algorithm 
proceedings acm sigmod annual conference 

juan hector garcia molina efficient snapshot differential algorithms data warehousing 
vldb 

carl lagoze clifford lynch ron daniel jr warwick framework container architecture aggregating sets metadata 
technical report tr 
cornell university june 

castanet 
www com 

efficient replicated remote file comparison 
ieee transactions computers volume pages 
may 

open software associates 
www osa com products 
korth sudarshan database system concepts 
mc hill 

stuart jean eric miller ron daniel oclc ncsa metadata workshop report march 
