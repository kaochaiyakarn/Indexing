rewriting logic declarative programming gonz alez moreno gonz alez opez rodr iguez artalejo 
de inform atica autom atica 
fac 
matem ucm av 
madrid spain email teresa dia ucm es 
propose approach declarative programming integrates functional relational paradigms possibly non deterministic lazy functions fundamental notion 
programs paradigm theories constructor conditional rewriting logic 
proof calculi model theory logic prove existence free term models provide adequate intended semantics programs 
develop sound strongly complete lazy narrowing calculus able support sharing technical overhead graph rewriting identify safe cases eager variable elimination 
keywords declarative programming non deterministic functions constructor rewriting logic lazy narrowing 
interest combining different declarative programming paradigms especially functional logic programming grown decade see survey 
operational semantics functional logic languages term rewriting narrowing 
cases term rewriting systems adopted order allow model theoretic semantics reflect behaviour partial functions non strict functional languages 
typical examples approach include languages leaf babel 
model semantics non strict partial functions languages called strict equality regards terms equal iff constructor normal form 
hand usefulness non deterministic operations algebraic specification programming advocated hussmann provides examples including specification semantics communicating sequential processes leaves interesting open question integration nonstrict operations non strict constructors see section 
hussmann spirit propose quite general approach declarative programming views possibly non deterministic lazy functions research supported part spanish cicyt project tic cpd esprit br working group ccl 
fundamental notion 
motivated fact relations deterministic lazy functions particular cases non deterministic lazy functions relations expressive model behaviour lazy functions 
approach retains advantages deterministic functions functional logic languages dynamic cut simplification 
addition non deterministic functions modelled means non confluent term may rewritten constructor terms way 
express conditions goals strict equality replaced general notion joinability terms regarded joinable symbols iff rewritten common constructor term 
simple example program illustrates expressivity formalism 
prolog syntax lists 
example 
constructors zero suc functions repetitions copy sublist rules 
repetitions xs true copy sublist xs 
copy zero 
copy suc copy 
sublist xs 
sublist xs sublist xs 
sublist xs sublist xs 
deterministic function produces infinite list elements 
function repetitions represents prolog predicate checks list xs contains repeated occurrences element 
deterministic function copy self explanatory 
non deterministic function sublist produces lists consisting non deterministically chosen elements list xs 
goal repetitions suc suc zero zero suc zero true 
solved lazy narrowing calculus section 
contrast lazy narrowing calculi completeness calculus holds confluence non ambiguity hypothesis conditional rewrite systems extra variables conditions may cause incompleteness narrowing semantics equational logic 
gain generality restrict left linear constructor rewrite rules expressive programming replace equational logic rewriting logic 
proof calculi model theory logic prove existence free term models provide adequate intended semantics programs 
sharing turns essential soundness narrowing modeltheoretic semantics 
consequently lazy narrowing calculus designed achieve sharing technical overhead graph rewriting approaches functional logic programming non deterministic functions 
sake simplicity restrict presentation unsorted case results straightforwardly extended sorted signatures 
proofs omitted due lack space 
organized follows 
section recall technical preliminaries 
section introduce constructor conditional rewriting logic crwl means equivalent proof calculi 
section concerned model theoretic semantics crwl programs including existence free term models 
section lazy narrowing calculus 
section state soundness strong completeness model theoretic semantics crwl 
section summarize argue implementability approach 
preliminaries fix basic notions terminology notations needed rest 
poset bottom set equipped partial order element 

say element totally defined written def iff maximal set totally defined elements noted def 
directed set iff exists subset cone iff ideal directed cone 
write sets cones ideals respectively 
set def equipped set inclusion ordering poset bottom called ideal completion natural order preserving embedding maps principal ideal generated def fy xg poset bottom cpo iff upper bound td called limit directed set finite element written fin directed exists cpo called algebraic element limit directed set finite elements 
poset bottom ideal completion turns cpo including furthermore algebraic cpo finite elements precisely principal ideals see 
note elements def correspond finite maximal elements ideal completion 
signature constructors countable set sigma dc sigma fs sigma dc sigma dc sigma fs sigma fs sigma disjoint sets constructor defined function symbols respectively associated arity 
assume countable set variables omit explicit mention sigma subse quent notations 
write term set terms built aid sigma distinguish subset cterm terms called constructor terms shortly terms dc need enhance sigma new constant arity constructor obtaining new signature sigma 
write term 
cterm 
corresponding sets terms extended signature called partial terms 
frequent notational conventions dc fs cterm 
term 
natural approximation ordering partial terms defined follows partial ordering cterm 
satisfying properties cterm 



dc cterm 
ideal completion cterm 
isomorphic cpo elements possibly infinite trees nodes labelled symbols dc way arity label corresponds number sons node see 
substitutions mappings cterm unique natural extension term term noted 
set substitutions noted 
bigger set 
partial substitutions cterm 
defined analogously 
note result applying substitution term define composition oe oe toe 
substitution called idempotent 
approximation ordering cterm 
induces natural approximation ordering 
defined condition iff subsumption ordering 
defined iff oe oe 
notation means oe oe general variables 
constructor conditional rewriting logic section give proof theoretical presentation crwl constructor conditional rewriting logic propose logical framework approach declarative programming 
spite obvious similarities crwl differs meseguer rewriting logic semantics intended applications 
meseguer logic aims modelling change caused concurrent actions high abstraction level crwl intends model evaluation terms constructor language involving possibly non deterministic lazy functions 
introduce kinds crwl formulas term 
reduction statement intended mean reduced joinability statement intended mean reduced common totally defined value 
allow partial terms crwl statements want model behaviour non strict functions 
partial terms cterm 
intended represent finite approximations values 
reduction statements cterm 
called approximation statements 
intended meaning approximates value say value due non determinism 
crwl theories called simply programs rest defined sets conditional rewrite rules form left hand side right hand side condition fs linear tuple terms cterm term condition consist finitely possibly zero joinability statements term 
sequel notation possibly partial instances rewrite rules 
formal derivability crwl statements program governed calculus definition 
basic proof calculus bpc bottom 
mn monotonicity dc fs 
rf reflexivity reduction instance 
tr transitivity join cterm 
shown rule crwl reduction related idea approximation 
rule term total wish specify joinability generalization strict equality see section terms cterm denote totally defined elements crwl models 
rule shows important difference rewriting usual sense allow apply arbitrary instances rewrite rules 
reflects called call time choice non determinism meaning values arguments function chosen call see chapter 
reason outermost rewriting sound framework lazy narrowing calculus section incorporate sharing 
example inspired hussmann illustrates point example 
constructors zero suc functions coin double add rules coin zero 
coin suc zero 
add zero add suc suc add 
double add 
observe example statements deduced logic double coin zero 
double coin suc suc zero 
double coin add coin coin 
double coin suc zero 
order prepare crwl logic declarative programming introduce second calculus focuses top proofs approximation joinability statements 
definition 
goal oriented proof calculus gpc bottom 
rr restricted reflexivity dc 
dc decomposition dc sigma term 
outer reduction 
join cterm 
induction structure proofs prove proposition 
calculi equivalence program calculi bpc gpc derive approximation joinability statements 
rest notation crwl mean provability approximation joinability statement calculi bpc gpc 
instance program example statements derivable zero suc zero zero suc zero zero suc zero sublist zero suc zero zero zero copy suc suc zero zero sublist zero suc zero model theoretic semantics crwl programs section define models crwl establish soundness completeness crwl provability semantic validity models 
prove program free term model seen generalization semantics horn clause programs 
represent non deterministic functions models posets carriers interpret functions symbols monotonic mappings elements cones 
poset elements best thought finite approximations possibly infinite values poset ideal completion see section 
technical definitions follows definition 
non deterministic deterministic functions posets bottom define set non deterministic functions def set deterministic functions subset specified def fixed deterministic function computes directed set partial values functions continuous mappings algebraic cpos performing ideal completion 
note nondeterministic function extended monotonic mapping defined def 
abuse notation note sequel 
define class algebras models crwl definition 
crwl algebras sigma signature 
crwl algebras signature sigma algebraic structures form da dc sigma fs sigma da poset da dc sigma da fs sigma require additional condition order ensure preservation finite maximal elements ideal completion da un da da un def da case def da 
valuation structure mapping da say totally defined iff def da denote val set valuations set totally defined valuations 
evaluation partial term term 
yields da defined recursively follows def def def dc sigma fs sigma result easy prove structural induction proposition 
crwl algebra term 
val da 
da deterministic defined function symbol occurring da cterm 
def da cterm 
prepared introduce models 
main idea interpret approximation statements approximation sense partial ordering interpret joinability statements asserting existence common totally defined approximation 
definition 
models assume program crwl algebra define model symbols iff satisfies rules satisfies rule iff valuation cj verifies satisfies reduction statement valuation iff satisfies joinability statement valuation iff def da 
crwl provability sound models sense theorem 
soundness program reduction joinability statement 
completeness crwl proved help term models closely related crwl provability 
definition 
term model program term model defined follows dmr poset cterm 
approximation ordering def 
principal ideal cterm 
def cterm 
crwl cterm 
defined crwl algebra 
fact monotonic required definitions consequence lemma useful section 
lemma proved induction structure gpc proofs 
lemma 
monotonicity lemma program term 

cterm 
pi gpc proof crwl exists gpc proof pi crwl length structure pi 
relationship semantic validity crwl provability revealed lemma proof obtained laborious routine inductions 
note partial substitutions valuations lemma 
characterization validity partial substitution 
term 
cterm 
crwl 
help lemma prove main result relating provability models crwl theorem 
model approximation joinability statement conditions equivalent 

id id identity valuation defined id note completeness crwl follows theorem 
result regarded intended canonic model program particular fs denote deterministic function iff ideal cterm 
property undecidable general decidable sufficient conditions known quite practice see sufficient non ambiguity conditions 
state result section need homomorphisms 
exist known homomorphism notions algebras involving non deterministic operations see chapter 
definition follows idea loose element valued homomorphisms hussmann terminology 
definition 
homomorphisms crwl algebras 
homomorphism deterministic function da 
db satisfies conditions element valued da db strict preserves constructors dc da un 
loosely preserves defined functions fs da un 
theorem 
freeness program term model freely generated category models valuation unique homomorphism extending sense hj proof theorem follows basically theorem 
construction similar poset ground partial terms carrier obtain initial models programs 
free term model interesting purposes characterizes crwl provability sense theorem 
lazy narrowing calculus section set basis crwl declarative programming language 
define admissible goals solutions programs lazy narrowing calculus goal solving 
program 
goals certain finite conjunctions solutions substitutions goal affected substitution crwl provable 
precise definition admissible goal includes number technical conditions needed achieve effect lazy evaluation sharing goal solving 
particular sharing achieved delaying propagation bindings certain variables 
similar ideas called outermost strategy functional logic language leaf flattening plus sld resolution constrained lazy narrowing calculus call need strategy higher order lazy narrowing 
comparison approach allow general programs language lacks modeltheoretic semantics uses restricted conditions form ground normal form 
definition 
admissible goals admissible goal program form evar set called existential variables goal precisely true sublanguage omits disequality constraints 
xn set equations called solved part 
total term occur exactly goal 
intuition computed answer multiset approximation conditions cterm 
pvar def var var called set produced variables goal production relation variables defined aep iff var var 
intuition demands narrowing match may produce bindings variables bm multiset joinability conditions 
dvar def called set demanded variables goal 
intuition due semantics joinability goal solving compute totally defined values demanded variables 
additionally admissible goal fulfil conditions tuple linear 
intuition produced variable produced 
produced variables existential pvar evar 
produced variables compute intermediate results 
transitive closure production relation aep irreflexive equivalently strict partial order 
intuition bindings produced variables computed hierarchically 
solved part contains produced variables 
intuition solved part includes intermediate results 
assume convention initial goal joinability part existential variables definition 
solutions admissible goal partial substitution 
allowable iff total term pvar 
solution iff allowable witness witness defined multiset containing gpc proof condition see def 

write sol set solutions definition solution cover case intermediate goals computation 
explains partial substitutions considered produced variables initially existential eventually disappear computation may need partial values serve express approximations 
notice condition accept admissible goal initial goal natural cause major problem minor technical changes results 
allowable substitutions solutions initial final goals solved part total substitutions 
due theorem immediate give model theoretic characterization solutions equivalent proof theoretic definition 
purposes initial goals 
lemma 
program initial goal substitution 
statements equivalent sol id constructor lazy narrowing calculus solving initial goals obtaining solutions sense definition 
consists set transformation rules goals 
transformation rule takes form specifying possible ways performing step goal solving 
derivations sequences steps 
writing failure rules fail representing irreducible inconsistent goal 
recall goal set multisets 
consequently transformation rules particular selection strategy sequential left assumed conditions addition purpose applying rules see conditions symmetric 
notation svar transformation rules stands set variables occurring position ancestor positions occupied constructors 
calculus rules dc decomposition 
id identity pvar 
bd binding oe cterm var pvar var pvar oe fx sg 
im imitation oe cterm var pvar pvar svar oe fx new variables 
nr narrowing variant rule var new variables 
rules 
dc decomposition 
ob output binding ob oe ar pvar oe fx tg 
ob oe ar pvar oe fx tg 
ib input binding oe cterm oe fx tg 
iim input imitation oe cterm dvar oe fx new variables 
el elimination var 
nr narrowing ar dvar variant rule var new variables 
failure rules cf conflict fail 
cy cycle fail svar 
cf conflict fail remarks attempt clarify relevant aspects calculus 
ffl rules involving substitution oe bd im ob ib iim oe replaces variable term 
means particular condition case substitution fx applied possibilities considered rule el deletes condition appear case value valid existential variable satisfy goal 
consequence evaluation needed performed 
rule el crucial respecting non strict semantics functions 
ii rule nr uses rule program reducing detected demanded variable particular implies value solution requires evaluation perform eager replacement fx unsound due call nondeterminism functions 
fact condition variable set dvar relaxed weaker conditions entailing 

applications nr case computation going succeed ib iim applicable propagating partially case iim obtained value occurrences result sharing achieved computations lazy 
iii el nr applicable done waiting applicable 
eventually happen completeness results show 
ffl absence cycles produced variables implies occur check needed ob ib iim 
ffl rules bd ob ib correspond safe cases eager variable elimination binding 
special care taken produced variables 
instance goal admissible bd applied allowed produced variable obtain admissible due presence produced variable solved part remarkable creation cycle aep subsequent need occur check detect unsolvability 
ffl narrowing rules include don know choice rule program 
rest rules completely deterministic modulo symmetry important rules applicable goal don care choice done consequence progress lemma 
kind strong completeness doesn hold general lazy narrowing calculi shown 
additional consequence lemma goal irreducible iff fail takes form call solved forms goals 
easy see solved forms satisfiable 
solved form xn defines associated answer substitution oe fx xn idempotent 
notice oe sol 
soundness completeness section state soundness completeness declarative semantics crwl 
result proves correctness single step 
says steps preserve admissibility goals fail case unsatisfiable goals introduce new solutions 
case care taken possible elimination existential variables 
lemma 
correctness lemma inv admissible admissible 
cr fail sol cr sol exists sol nevar easy obtain result stating computed answers goal solutions recall lemma give proof theoretic model theoretic readings result 
holds completeness theorem 
theorem 
soundness initial goal oe sol 
address question completeness 
reasoning termination introduce founded ordering multisets proofs allow express far goal solved form 
definition 
multiset ordering proofs program 
ff pi pi ff pi pi gg multisets gpc proofs approximation joinability statements define delta ffj pi pi oe ffj pi pi pi length number inference steps pi oe multiset extension usual ordering 
founded ordering delta comparing witnesses goal solutions 
idea proving completeness goal solution solved form rule applicable lemma pr performing step capturing lemma pr descending ordering delta lemma pr 
result proof technically involved lemma 
progress lemma pr fail solved form exists transformation applicable 
pr witness sol transformation applicable exist means transformation ii witness sol iii delta iv evar var var evar prove solution goal subsumed computed answer constitutes main result section 
theorem 
completeness crwl initial goal sol 
exists solved form oe var 
technicalities proof uses lemma 
final example achieved logical presentation quite general approach declarative programming notion non deterministic lazy function 
proof calculi proof theory constructor conditional rewriting logic crwl sound strongly complete lazy narrowing calculus able support sharing identify safe cases eager replacement 
shows potential approach firm foundation development functional logic languages 
hand practicability approach guaranteed existing implementations functional logic languages trivial changes mainly relaxing extra variables executing programs 
example show program executed functional logic programming system implementation techniques borrowed 
program syntax non deterministic functions allows natural formulation grammar simple arithmetic expressions 
concrete token list tokens parsed solving goal tokens exp note syntax respectively 
example 
data tok int gamma 
fun exp list tok 
exp term alt gamma exp 
exp term 
fun term list tok 
term factor alt term 
term factor 
fun factor list tok 
factor exp 
factor 
fun alt alt alt fun list list list xjxs xs 
include experimentation implementations extension approach cover typed higher order programming applicative ideas techniques 
ana gil puri arenas anchez useful comments contributions implementation 

antoy hanus 
needed narrowing strategy 
proc 
st acm symp 
princ 
prog 
lang portland pp 


arenas anchez gil 
user manual 
tech 
rep dia 
available ftp bach mat ucm es pub langs tar gz gamma constant constructor symbols infix notation list concatenation operation 

dershowitz manna proving termination multiset orderings 
comm 
acm 

falaschi levi martelli palamidessi 
model theoretic reconstruction operational semantics logic programs 
information computation pp 


levi palamidessi 
kernel leaf logic plus functional language 
jcss pp 


goguen thatcher wagner wright 
initial algebra semantics continuous algebras 
journal acm pp 


gonz alez moreno gonz alez rodr iguez artalejo 
completeness narrowing operational semantics functional logic programming 
proc 
csl springer lncs pp 


gonz alez moreno gonz alez opez rodr iguez artalejo 
rewriting logic declarative programming tech 
rep dia 

gonz alez moreno 
correctness proof warren ho 
proc 
cz italy 

hanus 
integration functions logic programming survey 
jlp 
special issue years logic programming pp 


hanus 
lazy unification simplification 
proc 
esop springer lncs pp 


hanus 
combining lazy narrowing simplification 
proc 
plilp springer lncs pp 


hussmann 
non determinism algebraic specifications algebraic programs 
birkhauser verlag 

opez rodr iguez artalejo 
demand driven computation strategy lazy narrowing 
proc 
plilp springer lncs pp 


winkler 
dynamic detection determinism functional logic languages 
tcs pp 


opez 
con 
phd thesis univ madrid 
spanish 
meseguer 
conditional rewriting logic unified model concurrency 
tcs pp 


moller 
algebraic specification infinite objects ordered continuous models algebraic types 
acta informatica pp 


middeldorp 
completeness results basic narrowing 
applicable algebra engineering comm 
comp 
pp 


moreno navarro rodr iguez artalejo 
logic programming functions predicates language babel 
jlp pp 


middeldorp ida lazy narrowing strong completeness eager variable elimination 
proc 
caap springer lncs pp 


prehofer 
call need strategy higher order functional logic programming 
proc 
ilps mit press pp 



una la con phd thesis univ la na 
spanish article processed macro package llncs style 
