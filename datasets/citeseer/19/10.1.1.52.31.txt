recursion cyclic sharing traced monoidal categories models cyclic lambda calculi hasegawa lfcs department computer science university edinburgh king buildings edinburgh eh jz scotland email dcs ed ac uk appeared proc 
rd international conference typed lambda calculi applications 
springer lncs 
cyclic sharing cyclic graph rewriting practical technique implementing recursive computation efficiently 
capture semantic nature introduce categorical models lambda calculi cyclic sharing cyclic lambda graphs notions computation moggi power robinson traced monoidal categories joyal street verity 
representing notion sharing cyclic data structures 
new models provide semantic framework understanding recursion created cyclic sharing includes traditional models recursion created fixed points special cases 
cyclic lambda calculus serves uniform language wider range models recursive computation 
traditional methods interpreting recursive program semantic domain fixed point continuous functions 
real implementations programming languages kind shared cyclic structure expressing recursive environments efficiently 
instance call name operational semantics recursive call free may appear write saying evaluating program environment results value call name strategy environment assigns free variable pair consisting environment program 
fx 
letrec evaluating recursive program letrec environment amounts evaluating subprogram cyclic environment 
may see reasonable efficient implement recursive self referential environment cyclic data structure 
equivalently known implement programming language technique sharing fixed point combinator causes unexpected duplication resources efficient get recursion cycles fixed point combinator setting 
fact suggests gap traditional approach fixed points cyclically created recursion 
aim introduce semantic models understanding recursive computation created cyclic data structure especially cyclic lambda graphs studied ak 
task deal notion values non values provides notion sharing notion cycles semantic level 
done combining moggi notions computation mog notion traced monoidal categories introduced joyal street verity jsv 
explaining computation values systematically apply interpreting notion sharing 
originally invented analyzing cyclic structures arising mathematics physics notably knot theory rt natural concept modeling cyclic graph structure 
claim new models natural objects study recursive computation unify aspects recursion just semantic framework 
leading examples graphical syntactical interpretation recursive programs cyclic data structures motivated domain theoretic interpretation meaning recursive program letrec fixed point non deterministic interpretation program letrec interpreted fx set possible solutions equation 
strong tradition computer science 
knowledge attempt give uniform account wellknown related interpretations 
cyclic lambda calculus serves uniform language 
construction recall definition traced monoidal categories section 
section observe traces fixed point operators closely related practically interesting situations cartesian categories special form monoidal adjunction known notions computation motivating examples shown instances setting 
armed semantic observations section give models simply typed lambda calculi cyclic sharing unrestricted substitution restricted substitution values 
settings studied previous section correspond models calculi respectively soundness completeness results stated 
application analyze fixed point operators definable calculi section 
related fixed point operators 
axiomatizations feedback operators similar theorem bloom study dual situation categories coproducts 
authors considered similar axiomatization fixed point operators cartesian closed categories 
ignoring difference presentations conway cartesian categories exactly correspond traced cartesian categories see theorem 
conway cartesian closed categories traced cartesian closed categories additional condition called abstraction identity 
cyclic lambda calculi 
source cyclic lambda calculi version ak 
letrec syntax representing cyclic sharing new presentation inspired graph rewriting system aa call need letrec calculus af 
concentrate equational characterization calculi connection aspects remains important issue 
think relation operational semantics established direction especially connection call need strategy lau af 
note approach applicable cyclic lambda calculi general cyclic graph rewriting systems 
action calculi 
syntax models arisen study milner action calculi mil proposed framework interactive computation 
notions computation models higher order action calculi mil developed gh relation traced categories reflexive action calculi mil studied mif author axioms reflexion proved equivalent trace 
fact cyclic lambda calculus seen fragment higher order reflexive action calculus 
study action calculi direction appear author forthcoming thesis see example 
geometry interaction 
pointed models geometry interaction gir regarded traced monoidal categories see abramsky survey abr 
expect potential applications results direction 
traced monoidal categories notion trace give symmetric monoidal categories adopted original definition traces balanced monoidal categories js jsv 
ease presentation section write monoidal categories strict monoidal products strictly associative coherence isomorphisms identities 
definition 
traced symmetric monoidal categories jsv symmetric monoidal category omega symmetry omega gamma omega said traced equipped natural family functions called trace omega omega gamma subject conditions 
vanishing gamma omega omega omega gamma omega omega gamma omega omega superposing omega omega id omega id omega omega gamma omega omega gamma omega id gamma xi graphical version axioms help intuition traced categories categories cycles feedback reflexion 
graphical languages various monoidal categories developed js 
superposing vanishing note naturality trace axiomatized follows 
naturality left tightening omega id gamma omega gamma omega gamma naturality right tightening omega id gamma omega gamma omega gamma naturality sliding id omega id omega gamma omega gamma omega gamma left tightening right tightening sliding 
axiom superposing slightly simplified original version jsv omega omega id omega omega id omega omega omega gamma omega gamma assuming axioms left right derivable original vice versa 
xi compact closed category kl traced instance category sets binary relations category finite dimensional vector spaces see examples section 
structure theorem jsv tells traced symmetric monoidal category fully faithfully embedded compact closed category obtained simple fraction construction 
fact imply usage traced categories compact closed categories 
study cyclic data structures find traced categories useful compact closed categories strong purpose 
recursion traces section observe traced categories support recursive computation certain circumstances 
results form basis semantic analysis recursion created cyclic structures regard traced categories models cyclic sharing 
fixed point operators traced cartesian categories compact closed categories monoidal product cartesian trivial 
case traced categories 
fact jsv shown category sets binary relations monoidal product traced 
find traced cartesian categories interesting context semantics recursive computation theorem 
cartesian category traced family functions gamma ya theta gamma parameters may omitted 
gamma parametrized fixed point operator theta gamma gamma satisfies hid 
gamma natural theta gamma gamma theta id gamma 
gamma natural theta gamma gamma id theta gamma 
gamma satisfies bekic lemma theta theta gamma theta theta gamma hf gi hid hid thetax gamma theta sketch proof trace operator define fixed point operator gamma hf fi gamma theta gamma conversely fixed point operator gamma define trace hid gamma equivalently id theta theta gamma theta note constructions mutually inverse 
theorem proved martin hyland author independently 
equivalent formulations result 
instance presence conditions restrict case symmetry lemma 
jsv 
practically useful example hyland shown axioms equivalent parametrized dinaturality fi hid gi gamma 
theta gamma theta gamma diagonal property id theta hid id theta theta gamma axiomatization conway cartesian categories 
variations dinaturality symmetric form 
simplest example opposite category sets partial functions coproduct monoidal product trace feedback operator maps partial function determined iterating get answer exists 
setting studied 
immediate consequence theorem close relationship traces fixed point operators traditional domain theory 
example 
fixed point operator domains consider cartesian closed category dom scott domains continuous functions 
fixed point operator satisfies conditions determines trace operator theta theta fixed point operator unique dinatural fixed point operator dom trace unique dom 
xi true cartesian closed categories arising domain theory 
fact systematic account possible 
simpson sim shown mild condition cartesian closed full subcategories algebraic cpos fixed point operator characterized unique dinatural fixed point operator 
hand easy see fixed point operators satisfy conditions theorem 
categories trace uniquely exists determined fixed point operator 
note traces category continuous lattices instance satisfy simpson condition category fixed point operators satisfy conditions greatest continuous 
justification axiomatization fixed point operator comes axiomatic domain theory provides systematic treatment domains covers wider range models domain theory traditional order theoretic approach 
assume working knowledge topic sim 
readers topic may skip subsection 
example 
axiomatic domain theory consider cartesian closed category category predomains equipped commutative monad lift kleisli category cl category predomains partial maps algebraically compact fre 
setting provides canonical fixed point operator derived fixpoint object cp category domains obtained kleisli category induced comonad eilenberg moore category satisfies axioms bekic lemma proved algebraic compactness cl mog idea due plotkin 
requirement solving recursive domain equations algebraic compactness implies resulting category domains traced 
xi regarding facts believe traces provide characterization fixed point operators traditional denotational semantics 
conclude subsection observing attractive fact suggests natural trace fixpoint correspondence digression 
correspondence preserves fundamental concept fixed point operators called uniformity known plotkin condition 
important fixed point operators canonically uniquely characterized property 
proposition 
traced cartesian category conditions equivalent gamma uniformity trace operator theta theta theta theta commutes 
uniformity fixed point operator theta theta commutes case domain theoretic categories second condition equivalent saying strict map preserving map 
fact suggests possibility studying notion strict maps uniformity fixed points general settings subsection 
particular condition sense traced monoidal category 
trace notions computation observation far says trace fixed point operator traditional sense provided monoidal product cartesian 
regarding motivation model cyclic sharing setting somewhat restrictive cartesian category regarded algebraic theory arbitrary substitution justified non trivial notion sharing 
overcome consider mild generalization 
traced category may cartesian assumed sub cartesian category inclusion functor preserves symmetric monoidal structure right adjoint examples 
intuitively sub cartesian category category values substituted freely symmetric monoidal category part category cyclic structures copied general may contain shared resources 
weaker setting exists fixed point operator 
gamma faithful identity objects strict symmetric monoidal functor cartesian category traced symmetric monoidal category right adjoint 
identify objects identity function objects 
readability write theta omega cartesian product tensor product respectively identical strict symmetric monoidal 
assume similar convention terminal object unit object theorem 
gamma family functions gamma ya omega gamma 
gamma parametrized fixed point operator sense omega gamma gamma satisfies delta id omega delta hid id gamma omega 
gamma natural omega gamma gamma omega id gamma 
gamma natural omega gamma gamma id omega gamma sketch proof write gamma right adjoint ffl ux gamma counit 
definition natural isomorphism gamma gamma 
ub 
define theta ux gamma omega id omega ffl define gamma ux uf delta ux ffl gamma omega gamma observe easier construction theorem delta gamma omega gamma fixed point operator construction theorem uses adjunction crucial manner 
general impossible recover trace operator fixed point operator satisfies conditions theorem instance zero object omega rel zero map satisfies conditions 
interesting question ask strengthen conditions recover trace operator 
careful inspection construction reveals need trace operator just objects form ux equivalently ux identity sufficient full subcategory objects form ux omega omega traced 
fixed point operator exists weaker setting 
interesting see fixed point operator determines sub trace structure 
interesting see connection fixed point operator fixed point operators models intuitionistic linear logic studied bra 
observation corresponding proposition follows satisfies uniformity condition trace operator satisfies uniformity condition fixed point operator 
note setting equivalent saying cartesian category monad ffi satisfies mono requirement commutative tensorial strength kleisli category traced 
words dealing notions computation sense moggi mog extra structure trace 
definition inspired reformulation notions computation power robinson pr 
definition 
traced computational model faithful identity object strict symmetric monoidal functor gamma cartesian category traced symmetric monoidal category functor gamma omega gamma right adjoint gamma gamma gamma omega gamma gamma gamma 
xi called kleisli exponent cartesian closed obtained uy traced computational model satisfies assumption theorem right adjoint gamma fixed point operator traced category 
right adjoint gamma interpret higher order higher type computation 
traced computational models structure interpret higher order recursive computation see models simply typed lambda calculus cyclic sharing 
help intuition shall give selection traced computational models 
mentioned section 
example 
traced cartesian closed categories traced cartesian closed category traced computational model cartesian category part traced category part identical 
examples include domain theoretic categories example 
xi example 
non deterministic model inclusion category set sets functions category rel sets binary relations direct product sets symmetric monoidal product forms traced computational model rel omega set rel 
trace operator rel induced compact closed structure rel follows relation omega gamma omega define relation gamma iff relation subobject theta 
parametrized fixed point operator gamma rel fy rg sg gamma omega gamma zero map 
note elementary topos set may provide computationally sophisticated model 
xi example 
finite dimensional vector spaces finite field field just elements characteristic vect fin category finite dimensional vector spaces chosen bases strict symmetric monoidal functor category finite sets vect fin maps set vector space basis functor right adjoint underlying functor 
vect fin traced classical sense instance traced computational models 
note example similar previous compare matrix representation binary relations linear maps 
xi example 
higher order reflexive action calculi gh mif action calculi mil shows higherorder reflexive extension action calculus mil mil forms traced computational model 
calculus fixed point operator gamma ffl ffl idm omega hxi delta ap ffl delta tq delta copy ffl delta ap ffl gamma omega gamma gives essentially operator iter thesis mif 
recursion operators various process calculi typically replication operator 
xi semantics lambda calculi cyclic sharing introduce simply typed lambda calculi enriched notion cyclic sharing simply typed letrec calculus letrec calculus cyclically shared resources represented terms letrec syntax 
shown traced cartesian closed categories traced computational models sound complete models calculi respectively 
syntax axioms semantic observation seen suggests simply typed letrec calculus designed modification moggi computational lambda calculus mog replace syntax letrec syntax allows cyclic bindings 
section fix set base types 
types oe oe base type syntactic domains variables raw terms mn letrec values declarations declaration binding variables assumed disjoint 
typing gamma oe oe variable gamma oe oe gamma gamma oe oe gamma exchange gamma oe gamma oe abstraction gamma oe gamma oe gamma mn application gamma oe xn oe oe gamma oe xn oe gamma letrec xn mn letrec axioms identity letrec fv associativity letrec letrec letrec letrec letrec letrec permutation letrec letrec commutativity letrec letrec mn letrec letrec mn fi letrec oe letrec letrec inm letrec letrec inm letrec fv fv yx sides equations type typing context just typed terms 
assume usual conventions variables 
axioms identity associativity permutation commutativity ensure letrec terms identified correspond cyclic directed graph sort structural congruence representing actual computation 
fi creates sharing function application 
oe describes substitution values dereference garbage collection 
denotes free occurrence fi oe call value fij equations lemma 
letrec calculus derivable 
fi xg jv fv think misleading relate calculus call value operational semantics restricting substitutions values mean calculus call value 
equational theory fairly close callby need calculus proposed af corresponds version lazy implementations call name operational semantics 
expect connection right direction relate calculus operational semantics 
define strengthened version arbitrary substitution reduction allowed term value oe letrec letrec inm letrec letrec inm letrec fv mx fv shall call version simply typed letrec calculus corresponds calculus ak ignoring typing extensionality axiom 
interpretation traced computational models just case letrec calculus case letrec calculus obtained just replacing traced computational model traced cartesian closed category 
fix traced computational model gamma choose object base type interpretation arrow types defined oe oe 
interpret letrec term typing environment oe xn oe arrow oe xn oe oe omega omega oe gamma follows 
oe xn oe oe th projection gamma oe cur gamma oe gamma oe oe delta gamma oe omega gamma ap gamma letrec oe xk oe delta id omega tr oe omega omega oe delta gamma oe omega omega gamma mk oe delta gamma ap omega gamma counit adjoint gamma omega gamma cur fa omega gamma associated natural bijection 
case gamma gamma oe oe delta times copy delta ka hid id times gamma 
omega omega times 
note values interpreted moggi account category values lifted straightforward calculation shows traced computational models sound letrec calculus traced cartesian closed categories letrec calculus theorem 
soundness traced computational model chosen object base type interpretation sound gamma oe gamma oe letrec calculus gamma oe gamma oe 
traced cartesian closed category chosen object base type interpretation sound gamma oe gamma oe letrec calculus gamma oe gamma oe 
example 
domain theoretic model noted dom traced cartesian closed category traced computational model 
interpretation letrec term letrec oe dom just fixed point 
oe gamma oe interpretation oe oe 
xi example 
non deterministic model rel example letrec term interpreted set possible solutions recursive equation 
interpretation letrec oe just set fx oe oe oe subobject oe theta oe 
instance letrec oe oe gamma oe letrec nat gamma letrec nat gamma cases enrich calculus natural numbers 
note model sound letrec calculus letrec calculus copy non deterministic computation model 
xi construct term model enriched unit product types letrec calculus letrec calculus faithfully interpreted 
possible show letrec calculus faithfully embedded higher order reflexive action calculus example instance traced computational models 
completeness theorem 
completeness gamma oe gamma oe traced computational model letrec calculus 
gamma oe gamma oe traced cartesian closed category letrec calculus 

represent parametrized fixed point operator theorem extend letrec calculus unit type unit unique value gamma unit unit unit interpretation unit type traced computational model just terminal object unit object 
type constructor unit gamma plays role right adjoint inclusion category values category terms 
define parametrized fixed point operator gamma oe oe gamma oe letrec unit oe unit oe oe satisfies may satisfy mf xg letrec calculus may value general 
operator section essentially fixed point operator avoiding unit 
xi give untyped version semantic models reflexive object traced computational model traced cartesian closed category 
regarding results section establish connection dinatural diagonal fixed point operator model untyped letrec calculus trace operator cartesian closed category 
interesting compare recursion created recursion created trace cyclic sharing models 
analyzing fixed points letrec calculus weak fixed point operators definable surprising known encodings fixed point operators terms cyclic sharing 
difficult see identified equational theory syntactic reasoning cyclic graph structures easy task non result ak suggests 
hand traditional models recursive computation denotational meaning mainly distinguish values non values models 
purpose developing traced computational models give clear semantic account recursive computations created cyclic sharing 
topic fully developed shall give elementary analysis letrec calculus traced computational model rel 
define letrec terms gamma oe term gamma oe oe follows 
letrec fix oe oe oe oe oe fix fix oe oe letrec oe fx letrec oe gy gn closed term type letrec fixed point operator behaviours 
instance known efficient call need evaluation strategy lau 
satisfies fixed point equation value oe oe 
letrec fix fix commutativity letrec fix fix fix oe letrec fix fix letrec fix fi letrec letrec fix fix fix associativity permutation letrec letrec fix fix fix commutativity letrec value satisfies mx equal value supposed higher order value 
value letrec fi letrec fx yg fi letrec fx yg fx yg oe letrec fi letrec commutativity satisfies term oe oe true fixed point operator 
letrec gy gy oe letrec gy letrec gy fi letrec gy letrec commutativity letrec gy letrec commutativity letrec gy gn identity interpretation operators traced computational model follows 
tr cur id omega delta ap omega id ap delta cur tr ap delta gamma tr cur gamma oe oe omega ap ap delta omega ap oe 
different interpretations rel identified letrec calculus 
assume oe oe rel 
oe oe fx fg oe definition take letrec new semantic models interpreting cyclic sharing terms traced monoidal categories notions computation shown connections cyclic lambda calculi traditional semantics recursive computation 
demonstrated framework covers wider range models recursion traditional approach 
summarize situation examples diagram 
traced computational models ffl term model letrec calculus syntactic model ffl higher order reflexive action calculi ffl non deterministic model rel ffl vect fin traced cartesian closed categories ffl term model letrec calculus syntactic model domain theoretic models ffl category domains cont 
functions am deeply grateful martin hyland john power helpful discussions suggestions encouragement 
gardner alex marcelo fiore alex simpson gordon plotkin comments encouragement 
abr 
abramsky retracing paths process algebra 
proc 
th int 
conf 
concurrency theory concur springer lncs pages 
aa 
ariola arvind properties order functional language sharing 
theoretical computer science pages 
af 
ariola felleisen call need lambda calculus 
technical report cis tr 
appear journal functional programming 
ak 
ariola klop cyclic lambda graph rewriting 
proc 
th symposium logic computer science lics pages 

bloom iteration theories 
eatcs monographs theoretical computer science springer verlag 

bloom fixed point operators ccc 
part theoretical computer science pages 
bra 
girard translation extended recursion 
proc 
computer science logic csl springer lncs pages 
cp 
crole pitts new foundations fixpoint computations fix hyperdoctrines fix logic 
information computation pages 
fre 
freyd algebraically complete categories 
proc 
como category theory conference springer lnm pages 
gh 
gardner hasegawa higher order action calculi notions computation 
draft lfcs university edinburgh 
gir 

girard geometry interaction interpretation system logic colloquium pages north holland 
js 
joyal street geometry tensor calculus advances mathematics pages 
js 
joyal street braided tensor categories 
advances mathematics pages 
jsv 
joyal street verity traced monoidal categories 
mathematical proceedings cambridge philosophical society pages 
kl 
kelly coherence compact closed categories 
journal pure applied algebra pages 
lau 
launchbury natural semantics lazy evaluation 
proc 
st acm symp 
principles programming languages popl pages 
mif 
control structures 
phd thesis lfcs university edinburgh 
mil 
milner higher order action calculi 
proc 
computer science logic csl springer lncs pages 
mil 
milner action calculi reflexive molecular forms appendix jensen 
third draft july 
mil 
milner calculi interaction 
acta informatica pages 
mog 
moggi computational lambda calculus monads 
technical report lfcs university edinburgh 
mog 
moggi metalanguages applications 
draft 
pr 
power robinson premonoidal categories notions computation 

appear mathematical structures computer science 
rt 
yu 
ribbon graphs invariants derived quantum groups 
communications mathematical physics pages 
sim 
simpson recursive types kleisli categories 
manuscript lfcs university edinburgh 
sim 
simpson characterisation fixed point operator dinaturality 
theoretical computer science pages 
