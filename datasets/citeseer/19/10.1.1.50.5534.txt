implementation fourier motzkin elimination bik harry high performance computing division department computer science leiden university box ra leiden netherlands cs nl transformation perfectly nested loop consisting combination loop interchanging loop skewing loop reversal modeled linear transformation represented unimodular matrix 
modeling offers flexibility traditional step wise application loop transformations directly construct unimodular matrix particular goal 
implementation issues arising framework incorporated compiler 
inherent application program transformations optimizing restructuring compiler called phase ordering problem problem finding effective order particular transformations applied 
problem important research topic ws 
important step forwards solving phase ordering problem accomplished observation combination iteration level loop transformations loop interchanging loop skewing loop reversal see ak ban pw pol wol wol wol zim represented unimodular matrix ban ban dow wl 
advantage approach order validity individual transformations irrelevant unimodular transformation constructed directly particular goal provided dependence constraints accounted 
incorporation framework compiler requires implementation math support provided foundation computer science sion dutch organization scientific research nwo ec esprit agency dg xiii 
bra iii 
technique known fourier motzkin elimination ai de lp 
application loop transformation new loop bounds generated 
derivation bounds requires conversion system inequalities arbitrary form form loop bounds generated 
discuss implementation fourier motzkin elimination techniques simplify resulting bounds 
preliminaries section 
section discuss code generation application transformation represented unimodular matrix fourier motzkin elimination 
section drawn 
loop transformations section give outline general approach iteration level loop transformations terms unimodular matrices 
iteration spaces fortran loop important construct define iteration 
individual loops socalled nested loop results 
nested loop depth illustrated enddo enddo terminology pol wol zim 
statements appear individual loops loop called perfectly nested loop 
loop arbitrary statements complete loops appear individual loops referred non perfectly nested loop 
loop body nested loop shown consists sequence indexed statements nesting depth individual indexed statement loop body denoted index vector 
loop body executed value call iteration vector loop 
substituting indexed statement loop body yields instance statement executed iteration 
set iterations loop body nested loop executed called iteration space loop 
integer variables loop indices iteration space subset discrete cartesian space usually assume loop stride loop index iterates integers closed interval 
value lower bound upper bound may depend values indices outer loops 
relatively simple kind loop bounds formed basic bounds lower bound upper bound expressed affine mapping gamma shown ij ij gamma ij delta gamma ij delta programmers basic bounds possible program restructuring kinds loops generated 
slightly difficult class bounds formed simple bounds lower bound upper bound loop index expressed follows ij ij ii ii gamma ij ii gamma ij ii obviously basic lower upper bound simple bound ii ii 
consider compound bounds lower bound consists maximum number simple bounds upper bound consists minimum number simple bounds max 
min 
simple bound compound lower bound gives rise inequality form ceiling function eliminated fact index integer variable ii gamma ij delta ii delta take ij inequality expressed scalar product effectively defining halfspace gamma gamma ii gammai delta gammal similarly simple bound compound upper bound gives rise definition halfspace gammau gamma gamma ii gammai delta compound lower bound maximum number simple bounds taken likewise compound upper bound minimum simple bounds corresponding inequalities satisfied simultaneously 
represent bounds nested loop having compound bounds system inequalities system obtained adding row component scalar products shown inequality arising simple bounds 
basic bounds dealt simply setting ii ii 
lower upper bound expressed maximum minimum function respectively gives rise inequality 
manner system obtained inequality defines half space theta matrix system represents intersection half spaces forming called polyhedral set ps ae furthermore finite execution sets fortran polyhedral set ps bounded forms called convex polytope gru 
integer variables loop indices iteration space loop defined ps means discrete points convex polytope taken 
loop instance compound upper bound loop index min enddo enddo enddo system inequalities representing loop bounds obtained considering bounds increasing order nesting depth shown gamma gamma gamma gamma unimodular matrices iteration level loop transformation perfectly nested loop depth consisting combination loop interchanging loop skewing loop reversal modeled mapping original target iteration space linear transformation represented unimodular matrix 
unimodular matrix theta integer matrix ij det holds 
property transformations represented matrices integer points mapped integer points inverse unimodular matrix unimodular matrix integer point target iteration space corresponds integer point original iteration space 
transformations closed composition 
iteration original iteration space mapped iteration target iteration space 
iterations target iteration space traversed lexicographic order application transformation effectively results new execution order instances 
loop reversal loop interchanging loop skewing represented elementary theta matrix 
elementary matrices unimodular matrices obtained unit matrix multiplying row gamma interchanging rows adding integral multiple row row 
pre matrix elementary matrix performs elementary row column operation respectively 
results application transformations represented theta elementary matrices double loop shown original loop enddo enddo reversal gamma enddo enddo interchanging enddo enddo skewing enddo enddo general reversal ith loop represented unit matrix ii gamma holds exactly element 
skewing jth loop factor respect ith loop represented unit matrix having ij diagonal element 
unimodular matrix decomposed number elementary matrices loop transformations 
conversely combination iteration level loop transformations represented unimodular matrix 
consequently approach offers flexibility traditional step wise application loop transformations usefulness validity transformation considered separately 
validity application application unimodular transformation valid data dependence original nesting satisfied resulting nesting 
dependence distance vectors provide convenient representation data dependences 
iteration depends iteration distance vector induced sequential semantics loops iterations executed lexicographic order 
consequently distance vector loop carried data dependence lexicographically positive denoted nonzero component positive 
linear transformation gamma gamma holds 
application unimodular transformation valid nonzero dependence distance original nest implies dependences satisfied 
wl dependence direction vectors incorporated validity test 
code generation rewritten gamma new loop body loop bounds obtained replacing index original body equation 
consider example application perfectly nested loop valid enddo enddo enddo gamma gamma gamma resulting loop body obtained replacing equation gamma gamma gamma resulting loop bounds derived rewriting system inequalities obtained substitution gamma system representing original loop bounds 
redundant inequalities eliminated code generated min max min enddo enddo enddo conversion original iteration space target iteration space illustrated 
example defined row iterations plane mapped iterations plane target iteration space 
generating loop bounds application transformation represented unimodular matrix perfectly nested loop implemented rewriting loop body generating new loops indices induce lexicographic traversal target iteration space 
equation gamma holds loop indices original target iteration space respectively new obtained replacing index original loop body equation 
unfortunately generating new loop bounds straightforward 
consider instance application simple interchange double loop original iteration space target iteration space application enddo enddo enddo enddo new loop body obtained replacing loop indices equation gamma note gamma case step finding new loop bounds apply substitution arising system inequalities defined original loop inequality directly determine lower bound index outermost loop bound terms innermost loop index general substituting gamma system inequalities defined original loop yields new system unsuited generating bounds directly 
bound function outer loop indices resulting system necessarily form 
bounds innermost loop determined directly 
instance previous example gamma 
lower upper bound loop min gamma respectively 
bounds obtained eliminating system 
performed replacing inequalities involving loop index inequalities lower bound equal upper bound index 
example obtain gamma gamma consequently lower upper bound expressed terms constants respectively appropriate form bounds outermost loop 
point valid range index known upper bound index simplified gamma 
example illustrates problems occur generation new loop bounds 
sections automatic method deals problems successively eliminating loop indices decreasing order nesting depth 
step method bounds index system determined 
fourier motzkin elimination applying transformation represented unimodular matrix perfectly nested loop bounds described derive new loop bounds system inequalities gamma system bounds index may depend indices fourier motzkin elimination ai ban de lp derive system appropriate form 
successively eliminate index decreasing value starting theta matrix vector components system gives rise inequalities ij delta reorder system value coefficient ik particular ik ik ik reordering gives rise sets inequalities positive coefficients occur index ik delta gamma gamma ij delta gammab gamma ij delta gammaa ik delta gamma ij delta inequalities system define upper bounds index gamma inequalities define lower bounds index 
consequently minimum maximum function sets bounds generated upper lower bound respectively 
bounds may evaluate rational constants integer values allowed loop indices ceiling functions lower bounds floor functions upper bounds 
case upper bound results maximum function omitted 
likewise minimum function omitted lower bound results 
ceiling floor functions omitted lower upper bounds having ik corresponding inequality 
generation bounds index eliminated system order enable generation bounds outer loop indices 
original formulation fourier motzkin elimination de index eliminated replacing pair inequalities delta delta inequality replace previous pair inequalities delta delta manner formulation obtained integer arithmetic involved 
resulting inequality divided gcd avoid overflow possible 
implies innermost loop index system inequalities eliminated replacing inequalities delta gamma inequalities gcd ik ik gammaa gamma delta ij delta delta delta delta gamma inequalities new system form obtained different lower value repetitive application elimination loop indices decreasing order nesting depth eventually yields bounds loop nest resulting application unimodular transformation 
process inequality form encountered maximum lower bounds index greater minimum upper bounds index dealing inconsistent system 
context implies target iteration space original iteration space empty 
general possible variables system unbounded occur systems derived loop bounds program 
exclude possibility discussion 
implementation fourier motzkin elimination step system inequalities theta matrix represented column augmented matrix 
rows matrix reordered value elements kth column 
pairwise combinations rows added multiplication ik respectively gcd ik 
resulting rows gamma rows previous matrix excluding elements kth column constitute rows new matrix 
process applied recursively resulting matrix loop indices eliminated 
consequently sequence column augmented matrices terminated column vector obtained illustrated 
column augmented matrix sequence local parameters done section omit superscripts clear context matrix sequence considered 
matrix sequence consists reordered representation original system gamma additional test required loop index eliminated 
implementation additional elimination step applied enable uniform test consistency column vector 
components terminating column vector negative resulting system inequalities inconsistent 
furthermore column augmented matrix represents bounds index system inequalities 
example consider instance application transformation represented unimodular matrix loop nest shown enddo enddo enddo gamma new loop body obtained replacing original loop indices equation gamma delta new loop bounds defined system inequalities represented column augmented matrix gamma system delta represents original loop bounds gamma gamma gamma gamma gamma gamma gamma gamma application fourier motzkin elimination column augmented matrix results sequence column augmented matrices terminating column vector gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma components positive resulting system inequalities consistent 
column augmented matrices sequence define loop bounds max min max min max min enddo enddo enddo lower bound outermost loop evaluates value simplify lower bound 
likewise upper bound replaced 
general obvious simplifications possible topic sections 
ad hoc simplification matrices arising fourier motzkin elimination may define bounds particular index really necessary inequalities define bounds 
elimination called redundant bounds may result generation efficient code expressions need evaluated run time 
evaluation minimum maximum functions required single bound remains 
section computationally inexpensive method detect eliminate redundant bounds 
loop index resulting loop nest depth maintain variables min max min max values gamma 
variables min max record minimum maximum value lower bounds loop index respectively 
likewise variables min max record minimum maximum value upper bounds index respectively 
implies index integer values interval min max 
initially set min max gamma min max subsequently accurate values determined backward scan column augmented matrices sequence 
new loop bounds considered increasing order nesting depth 
theta column augmented matrix sequence find rows represent upper bounds index terms indices gamma rows represent lower bounds index 
lower upper bounds expressed form ik ik gamma gammaa ij delta ik remaining bounds define bounds index eliminated bounds arising inequalities accounted matrices sequence 
min max holds minimum value maximum value numerator expression determined follows define max gamma max gammaa done ban gamma gammaa ij delta min gamma gammaa ij gamma delta max gamma gammaa ij delta max gamma gammaa ij gamma delta min consequently upper bound ik values bl ik bu ik max holds upper bound redundant respect previously considered upper bounds eliminated 
similarly min bound replaces previously considered upper bounds index 
upper bound considered assignments executed min min min max min max likewise lower bound ik values du ik dl ik max bound replaces previously considered lower bounds index 
bound eliminated min consideration lower bound perform statements min max min max max max continuing fashion eventually results new sequence matrices redundant bounds viz 
rows eliminated 
consider instance double loop example section 
show gamma column augmented representation gamma gamma gamma gamma application fourier motzkin elimination yields sequence matrices gamma gamma gamma gamma gamma gamma components terminating column vector positive target iteration space non empty 
subsequently ad hoc simplification method performed backward scan column augmented matrices sequence 
consideration matrix defining bounds know 
min max upper bound index considered 
upper bound index max upper bound eliminated gamma gamma gamma gamma gamma gamma exact simplification ad hoc method discussed previous section inexpensive method eliminate redundant bounds 
efficiency generated code improved expense potential increase compile time incorporation advanced method eliminates redundant bounds including detected ad hoc method 
exact simplification method observation particular inequality enforced inequalities system inequalities system obtained negating inequality inconsistent ai 
instance negation inequality system inequalities yields rewritten integer variables negation gamma 
application fourier motzkin elimination resulting system yields revealing inconsistency system 
third inequality required eliminated system 
matrix form denotes zero column vector appropriate size constructed incrementally successive steps 
step matrix represents bounds loop indices 
number positive elements column column augmented matrix equal number upper bounds index similarly number negative elements column matrix equal number lower bounds index 
upper bounds upper bound negated fourier motzkin elimination applied resulting system test consistency 
resulting system consistent bound recovered upper bound considered 
upper bound eliminated 
process repeated upper bounds considered upper bound remains 
similar steps performed lower bounds 
value incremented matrix form constructed matrix representation negation lower upper bound represented ith row performed follows 
ik 

gammaa gamma ik gammab gamma 
consider example simple interchange loop fragment enddo enddo enddo max enddo enddo enddo ad hoc simplification sequence arising fourier motzkin elimination yields sequence gamma gamma gamma gamma gamma ad hoc method able detect fact enforced lower bound second loop index lower bound third index simplified single expression exact simplification sequence constructed incrementally gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma actions performed matrices define lower upper bound indices 
lower bounds defined index matrix 
lower bound negated followed application fourier motzkin elimination resulting matrix 
sequence matrices results negated inequality marked matrix gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma system inconsistent lower bound eliminated 
lower bound remains third index actions performed sequence matrices results redundant bounds eliminated gamma gamma gamma gamma deliberately chosen consider matrices form separately increasing values bounds redundant respect possible values outer loop indices eliminated 
final matrix matrix test redundancy bounds bounds redundant additional iterations introduced removal bounds induce zero trip loops inner loops 
evaluation overhead reduced expense increase overhead caused execution empty iterations 
redundancy single bounds tested approach result loops indices unbounded 
example upper bound outermost index redundant fragment inequality enforced bounds second loop index 
upper bound greater introducing additional iterations enddo enddo vs enddo enddo comparisons section compare performance simplification methods matrices size gamma having property redundant bounds eliminated ad hoc method 
table show number remaining bounds application elimination ad hoc simplification exact simplification 
table cpu time milli seconds hp ux fourier motzkin elimination ad hoc method followed exact method exact method preceding application ad hoc method examples 
versions compiled optimizations enabled fully hand optimized respect memory allocation 
drawn experiment 
application exact method far expensive actual fourier motzkin elimination possible disable application simplification method 
furthermore advanced simplification required total computational time reduced substantially preceding application ad hoc method acting filter exact simplification 
bounds result application unimodular transformation simplified ad hoc method followed exact method desired 
ad hoc exact table number remaining bounds ad exact total exact hoc table cpu time msecs discussed implementation fourier motzkin elimination 
method incorporated prototype restructuring compiler mt bik support unimodular transformations 
ad hoc simplification method case compilation time premium 
ad hoc method act filter computationally expensive exact simplification methods 
acknowledgments authors peter arnold remco de proofreading article 
ai francois irigoin 
scanning polyhedra loops 
proceedings third acm sigplan symposium principles practice parallel programming pages 
ak randy allen ken kennedy 
automatic translation fortran programs vector form 
acm transactions programming languages systems volume 
eduard jordi torres 
partitioning statement iteration space non singular matrices 
proceedings international conference supercomputing pages 
ban banerjee 
dependence analysis supercomputing 
kluwer academic publishers boston 
ban banerjee 
unimodular transformations double loops 
proceedings third workshop languages compilers parallel computing 
ban banerjee 
loop transformations restructuring compilers foundations 
kluwer academic publishers boston 
ban banerjee 
loop parallelization 
kluwer academic publishers boston 
bik bik 
prototype restructuring compiler 
master thesis utrecht university 
inf scr 
de george dantzig curtis 
fourier motzkin elimination dual 
journal combinatorial theory volume 
dow michael dowling 
optimal code parallelization unimodular transformations 
parallel computing volume 
gru 
convex polytopes 
interscience publishers london 
lam leslie lamport 
parallel execution loops 
communications acm pages 
lp wei li keshav pingali 
singular loop transformation framework non singular matrices 
proceedings fifth workshop languages compilers parallel computing 
pol 
parallel programming compilers 
kluwer academic publishers boston 
pw david padua michael wolfe 
advanced compiler optimizations supercomputers 
communications acm pages 
wl michael wolf monica lam 
loop transformation theory algorithm maximize parallelism 
ieee transactions parallel distributed algorithms pages 
wol michael wolfe 
loop skewing wavefront method revisited 
international journal parallel programming volume 
wol michael wolfe 
vector optimization vs vectorization 
journal parallel distributed computing volume 
wol michael wolfe 
optimizing supercompilers supercomputers 
pitman london 
ws mary lou soffa 
approach ordering optimizing transformations 
proceedings second acm sigplan symposium principles practice parallel programming pages 
zim zima 
supercompilers parallel vector computers 
acm press new york 
