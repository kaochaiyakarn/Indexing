chapter multiple translational containment approximate exact algorithms karen daniels victor milenkovic exact algorithms finding solution twodimensional translational containment problem find translations polygons place inside polygonal container overlapping 
give approximate algorithm ffl finds set translations point polygon ffl inside boundary polygon outside container 
term denotes containment problem polygons convex container nonconvex knn denotes nonconvex polygons container 
polygons vertices container vertices typically 
give exact algorithms cn mn log time cn log time knn mn lp kmn time lp time solve linear program variables constraints 
approximate algorithm knn running time gamma ffl delta log gamma ffl delta log largest number vertices polygon generated applying certain set operations input 
polynomial bound practice usually quadratic research translational containment problems motivated np hard layout problem apparel industry marker making problem lay twodimensional polygonal apparel pattern pieces cloth inside rectangular sheet stock material fixed width minimum length 
promising approach identify pack large pieces heuristic 
regions unused cloth large pieces form collection usually nonconvex polygonal containers smaller pieces trim placed see 
solve np hard trim placement problem transform easier np hard matching set cover problem determining container groups trim pieces fit container 
choosing harvard university division applied sciences 
research funded textile clothing technology funds awarded alfred sloan foundation 
university miami department math computer science 
research funded textile clothing technology funds awarded alfred sloan foundation nsf ccr ccr 
collection groups covers set trim pieces purely combinatorial problem 
deciding groups trim pieces fit container requires solving containment problems 
seek single answer containment problem 
require set possible solutions need fast solution cases 
typically number polygons group application half containers 
domains pants particular trim pieces convex 
created fast exact algorithms placing convex polygons 
algorithm convex polygons separating line orientations means characterizing solution 
solution polygons uses separating line orientation characterization plus simple robust carousel algorithm 
exact approximate algorithms placing number nonconvex polygons 
exact algorithm uses concept subdivision trees linear programming 
approximate algorithm finds ffl approximate solution point polygon ffl inside boundary polygon outside container 
value ffl input algorithm 
characterize solution translational containment create collection containment subproblems characterization 
approximate algorithm solves subproblem restricting configuration space steady state reached 
necessary subdivides configuration space generate new subproblems 
approximate algorithm acceptable manufacturing applications involving cutting machinery cutting tolerance 
cutting tolerance clothing manufacture inch solutions ffl perfectly acceptable 
notation 
notation ffl polygonal container vertices ffl polygon vertices placed container daniels milenkovic placing pieces gap panels 
pieces successfully placed 
multiple containment example apparel industry ffl set translations places interior ffl ij set displacements overlap ij gammau ji 
minkowski sum point sets case defined phi fa bg point set denote set complement define gammaa gammaa ag 
vector define fa ag gamma fa gamma ag 
note phi ftg 
expressed terms set operations minkowski sums phi gammap ij phi gammap denote set ij respectively 
configuration set translations ft kg 
valid configuration inside configuration gamma ij valid configuration exact solution translational multiple containment problem 
dimensional configuration space problem placing similarly ij dimensional configuration space placing respect term configuration space denote twodimensional configuration spaces 
define knn problem finding valid configuration nonconvex polygons nonconvex container 
similarly problem finding valid configuration convex polygons nonconvex container 
cn denotes problem determining groups polygons set convex polygons fit nonconvex container 
refer entire collection problems translational multiple containment problems 
problem approximate version find ffl approximate solution problem 
define max ik assume general express running time containment algorithm terms applications 
presents set geometrical restriction operations add intersection half plane bounded horizontal vertical line 
restrictions replace set subset 
define maximum number vertices polygon generate applying sequence restriction operations known containment algorithms appear operations measure complexity containment problem 
unfortunately polygonal subset polygonal region necessarily fewer vertices open question finite 
restriction generally appears reduce number vertices 
find ranges mn practice 
expressing running time terms call analysis size analysis algorithm 
analysis gives measure practical running time containment algorithm 
need operation subdivide configuration space 
include bounding lines generated extending edge polygon 
multiple translational containment related 
know industrial solution translational multiple containment interactive setting speed critical application 
solution appears inner outer approximations running time increases tightness fit 
published algorithms translational multiple containment small fast purposes tend depend high power arbitrary nonconvex polygons container known algorithms running time exponential fact knn np complete 
naive knn algorithm runs mn log time assuming constant typical iterating choices contacting pairs polygons container 
fortune gives mn log mn time solution cn computing minkowski sum generalized voronoi diagram 
boissonnat minkowski sum convex decomposition solve nn nn log mn log mn log size analysis time respectively gives log mn log time algorithm nn 
devillers gives faster algorithms terms cn cn running times log log log log 
boissonnat give solution np problem nonconvex polygons parallelogram container time log log 
milenkovic offer approaches translational multiple containment 
method provides fast algorithms convex polygons 
cn algorithm essentially cn algorithm simpler algorithm order running time 
second method uses mip mixed integer programming model nonconvex polygons nonconvex container see full details 
mip method takes minute typical workstation polygons slow polygons 
third method earlier version approximate algorithm 
overview 
exact algorithm cn separating line orientations 
give exact algorithm cn 
uses separating line orientation characterization plus sim companies closely guard products way compare algorithms short buying expensive systems 
full version prove translational multiple containment np complete reduction partition 
ple robust carousel algorithm 
describe exact knn algorithm uses subdivision trees linear programming 
approximate algorithm knn 
restriction subdivision configuration space 
running times algorithms 
expression lp denotes time solve linear program variables constraints 
recall upper bound number vertices polygon generated sequence restrictions mn practice 
exact cn mn log log exact cn rmn log exact cn log log exact knn mn lp kmn approx 
knn gamma ffl delta log gamma ffl delta log discuss implementation algorithms 
exact algorithms small cn containment 
previous algorithms cn containment running times essentially equal product times solving cn problems particular log log 
section establishes somewhat surprising fact cn containment requires time cn asymptotically 
furthermore solving cn requires rmn log rs log preprocessing time plus log time 
words time cn problems plus queries log time 
separating lines 
idea fast solution cn containment separating line nonoverlapping convex polygons specifically line interiors polygons opposite sides 
state proof generate line extending edges polygons 
fact implies need consider possible orientations separating line 
orientations edges minkowski sum phi gammap greatly limit set translations vertices convex hull see suppose valid placement inside container separating line vector normal pointing half plane containing choose extreme direction 
vertex far placement safely place daniels milenkovic computing solution 
order compute need know normal vector valid separating line observation leads algorithm cn containment 
cn query vector normal edge ab normal phi gammap 
minimizes delta 
maximizes delta 
gamma delta delta return return solution exists convex hulls perform steps binary search normals 
case input arguments include 
leads result lemma 
cn containment algorithm uses time log plus amount time required compute convex hulls mn log 
corollary 
true applications applications cn query solve cn problem time log 
total query time dominates time rmn log compute convex hulls 
applications practical 
numerically stable 
multiple resolution techniques hope reduce total query time log log 
cn containment 
cn containment problem input convex polygons nonconvex container case cn consider separating line orientations 
case separating line orientations pair polygons 
refer choice orientations orientation triple 
cn algorithm iterates separating line orientation triples 
triple checks configuration separating lines orientations 
naively consider omega gamma orientation triples solve cn shows need consider triples 
cn algorithm cn algorithm move solution vertices valid regions vertices convex hulls 
possible move solution boundaries fact shows need consider special subset boundary called angle visible envelope 
gives carousel algorithm searches envelopes solution jv jv jv time 
gives multiple resolution method considerably reduce number orientation triples practice 
method applied case cn 
orientation triples 
lemma 
nonoverlapping convex polygons separated lines orientations arise contact case pairs polygons contact contact case pairs polygons contact 
furthermore case need consider pairs contacting vertices 
contact case triples contact case triples 
proof 
summary 
polygons scaled twice contacts translated separating lines satisfy lemma 
separating lines transformed polygons separating lines original polygons 
complexity bounds consequences modifications bound number vertices phi gammap angle visible envelopes 
suppose configuration inside container ij line separates ij normal line pointing half plane contains ij gammaw ji 
define partial order points delta delta delta delta satisfies move moving closer separating line angle visible envelope respect set maxima partial order 
envelope clearly subset boundary point envelope see infinity direction concave angle defined name 
clearly replace angle visible envelope eliminating valid placement exists 
angle visible envelopes defined analogously 
state proof lemma see lemma 
angle visible envelope polygon respect monotonic respect topological closure envelope consists jv points closed line segments 
standard techniques envelope computed time theta jv simple polygon time theta jv log jv general polygon 
note moves envelope delta increases delta decreases vice versa 
multiple translational containment thick line segments angle visible envelope respect carousel algorithm 
computed angle visible envelopes particular orientation triple algorithm cn conceptually simple 
polygon placed envelope point point minimizes delta maximizes delta polygon bumps forward point envelope satisfies separating line constraint similarly bumps bumps forth 
phrase round round goes stops knows 
roulette wrong amusement park analogy 
correct analogy combination bumper cars go round 
interests refer carousel algorithm 
algorithm complete turn carousel bumps 
algorithm continues bump polygons forward returns polygon correct side separating line need bumped 
algorithm returns polygon bumped past point envelope 
ij ij edge minkowski sum phi gammap normal ij mod 
rule bumping follows 
current positions polygons respective envelopes 
polygon bumps forward position envelope satisfies delta ij ij delta ij maximizes delta kj mod 
envelope monotonic respect ij kj bumping moves direction envelope 
unfortunately bumping necessarily move different edge envelope 
configuration stuck envelope edges 
happens algorithm advances endpoints respective edges runs carousel turns backwards bumps bumps bumps forth 
finds solution polygon need bumped full turn algorithm returns 
algorithm freezes reverse carousel just moves particular stops exactly endpoint 
algorithm reverses direction guaranteed bumped line segment envelope full turn forward carousel 
theorem 
triple separating line orientations carousel algorithm correctly finds solution indicates exists running time jv jv jv 
iterating triples takes time simple log general polygonal proof 
technical lemmas required show carousel bumps polygon past position envelope corresponding valid solution 
backwards carousel works solution exists envelope segments exists solution endpoint segment 
running time follows constant number carousel turns moves line segment envelope 
analysis running time bound log see 
practical improvements running time 
full gives methods improve practical running time algorithm cn 
effective involves lower resolution versions minkowski sums phi gammap particular inscribed polygons 
reduces number separating line orientations 
simple increase resolution separating lines adding vertex inscribed polygon 
particular edge ab inscribed polygon generates separating line orientation adds new vertex inscribed polygon part phi gammap worst case method generates omega gamma triples method 
practice multiple resolution method checks orders magnitude fewer triples 
appears eliminate factor adding 
exact algorithm knn multiple resolution heuristic handling separating lines case cn provides inspiration knn algorithm 
implement algorithm multiple solutions linear programs single solution mixed integer pro daniels milenkovic gram 
summary knn algorithm 
condition gamma ij solvable linear programming ij usually convex 
approximate convex hull 
resulting linear program infeasible solution original problem 
program feasible arbitrary solution may may solution original knn problem 
lies outside inside convex hull gamma lies outside ij say causes failure 
divide polygons greater convexity 
algorithm recurses replaces replaces analysis 
ways subdivide polygons ij polygons convex subsets 
method involves extending edge ij line cutting polygon line 
theorem 
subdivision implemented cutting lines form described knn algorithm runs mn lp kmn time lp time solve linear program variables constraints 
proof 
basic observation mn jv jv jv delta delta delta jv 
follows edge arises contact vertex edge container vice versa 
corresponds cutting plane full dimensional configuration space 
standard techniques ensure cutting planes general position 
feasible hypothesis solving linear program lp generates feasible configuration intersection cutting planes 
invalid overlapping configuration algorithm selects cutting plane cut vertex feasible exactly vertex feasible algorithm solve new lp evaluate feasibility charge lp call time split hypothesis feasible vertex 
total number lp calls number different times number cutting planes mn times mn equals mn 
call lp variables number constraints equals number cutting lines equals number possible vertex edge contacts kmn contacting plus gamma contacting 
incidentally analysis assumes initial constraint set empty contain lines bounding convex hulls ij assumption significantly affect analysis possible show total number edges convex hulls bounded kmn matter subdivision method possible set problem mixed integer program 
basically variable corresponds choice side cutting plane 
approximate algorithm knn high level description 
algorithm creates collection containment subproblems characterization 
lemma 
instance knn solution solution characteristics contacts contacts polygon polygon number ways assigning contacts pairs polygons exponential applying part second characteristic consider subproblems 
empirical results indicate choice represents balance amount restriction number subproblems 
specifically solve subproblems replaced set vertices solve subproblems replaced boundary 
lemma implies solution exists subproblems solution 
natural fashion apply parallelism solving subproblems plan attempt multiprocessor workstation 
restrict vertices boundary iterate vertices edges nn algorithm naive algorithm 
solve subproblem steady state restriction process combined subdivision 
define apply certain restrictions replacing element subset 
structure algorithm solving subproblem apply restrictions significant shrinking possible 
solution subproblem restricted sets algorithm selects largest subdivides branches replacing recursing resulting sets subdivision method cuts selected vertical horizontal line depending aspect ratio 
shown running time algorithm multiple translational containment gamma ffl delta log gamma ffl delta log see definition 
pseudo code functions call value restrict ss uses callby 
approx sol calls test 
call test solution find exact solution approx sol constructs ffl approximate solution selecting point restrict ss test described detail sections 
solve subproblem status restrict ss status null return failure status small return approx sol status test solution status exact success return exact success return subdivide restrictions 
theorem presents types restrictions operate see full version proof 
restriction remains superset set valid translations allows gamma polygons placed inside overlapping container 
similarly ij remains superset set valid displacement allows gamma pieces placed overlapping 
theorem 
valid restrictions 
restrict ij ij gammav phi 
restrict phi ji 
restrict ij ij ih phi hj restrictions generalizations boissonnat solutions nn np 
set points corresponding valid configuration 
similarly ij set points ij corresponding valid configuration 
notation boissonnat show nn set valid relative positions respect ij ij gammav phi 
yields exact solution nn 
observe knn valid displacement polygons solution nn 
application restrict enforces condition 
restrict viewed generalization boissonnat observation np valid translation exists gamma gamma gamma gamma gamma gamma solution np boissonnat show vector phi guaranteed associated displacement respect corresponding solution np 
proof relies application helly theorem parallelograms affine transformation different axis parallel rectangles intersect pairwise common point 
observe general case ij ih phi hj motivates restrict 
restrict ss accepts arguments 
calls restrict restrict restrict loop polygon null case returns null polygons diameter ffl case returns small fractional area shrinkage polygons ff 
parameter ff ff part algorithm part input 
ff program achieves true steady state additional restrictions shrink polygons 
require infinite number iterations 
ff implementation 
satisfactory practice gives bound number restriction iterations 
steady state restriction process quite powerful 
example noted ij ih phi hj enforced restrict 
true ij ih phi hq phi qj order generalize result define notion path restriction 
theorem asserts restrict ss satisfies path restrictions 
theorem proved induction path length full version term steady state refers true steady state described 
definition 
complete graph nodes nodes path graph delta delta delta path restriction ij corresponding restriction ij ij phi phi delta delta delta phi 
theorem 
multiple applications restrict restrict ss reach steady state possible path restrictions satisfied 
testing solution 
ij turn test solution selects heuristic described ij ij replaces ij set daniels milenkovic fu ij replacement applies restrict configuration sets 
configuration set restricts empty set solution fails solution exist find 
test solution successfully replaces ij single point find valid solution selects sets appropriate selection ij ij appears increase chance solution succeeds 
test solution succeeds algorithm avoids subdivision 
developed heuristics selecting ij ij compare effectiveness practice 
heuristics choosing ij restrict cause vanish 
note ji fu ji phi ji ji heuristic making pairwise intersection phi ji large possible 
choose ji ji maximizes area ji 
conjecture exact calculation ji requires omega gamma jv jv time 
variety ways approximate maximum area intersection polygons see full version details 
practice sampling 
second heuristic selects ji maximize convexity union ji 
theorem proved full 
theorem 
set polygons fq convex analysis 
full prove valid configuration exists algorithm find ffl approximate solution 
calculate asymptotic running time algorithm assume upper bound number vertices polygon generated algorithm see ffl maximum overlap polygons 
full version prove theorem 
theorem 
running time algorithm gamma ffl delta log gamma ffl delta log 
implementation results exact algorithms small implemented versions cn cn algorithms run quickly 
multiple resolution find orientation triple speeds algorithm orders magnitude 
typical running times speedup range second dan roth originally conjectured result 
mhz sparcstation 
solutions cn cn worst case running times better naive algorithm better previous results area 
addition algorithms designed run faster case solution worst case previous algorithms 
find common answer practice important property 
compare performance cn algorithm approximate knn algorithm cn examples 
exact algorithm knn 
preliminary results subdivision knn algorithm shown table 
value estimated compute directly union minkowski sums neighboring pieces explicitly computing container polygon 
algorithm subdivides polygon extending edge concave angle polygon 
uses repeated solutions linear programs mixed integer programming type time type time nn nn nn nn nn nn nn nn cn cn nn nn table running times exact knn algorithm seconds 
denotes infeasible asymptotic running time bound knn algorithm worse naive running time 
naive algorithm frequently attains worst case particularly answer 
knn algorithm repeatedly computes lower bounds solving linear programs convex approximations ij polygons 
technique enables quickly discard regions solution focus regions possible solution 
compare performance algorithm approximate knn algorithm 
approximate algorithm knn 
performance 
ran approximate algorithm collection examples ranging 
representative running times sparcstation trademark sparc international licensed exclusively sun microsystems multiple translational containment table 
running times nearest second mhz sparcstation include time calculate infeasible examples containment problems solution identified selected ones pair polygons fits container area container larger total area polygons 
feasible solution average seconds 
infeasible situations detected average seconds 
shows configurations achieved nn apparel example algorithm 
tightness layouts typical 
type time type time type time cn cn cn cn cn cn cn nc nn nn cn cn cn cn cn cn cn nn nn nn nn cc nn nn nn nn nn cc cc table running times approximate knn algorithm seconds 
denotes infeasible regularization 
polygon modeling algorithms typically produce regularized unions intersections replace point set closure interior 
sufficient application restricted ij contain isolated points line segments polygonal components non zero area 
want throw away potential solutions closed polygon operations replace point set closure 
harder implement necessary 
set operations implemented robustly order minimize error accumulation steady state restriction process 
algorithms polygonal union intersection 
comparing heuristics selecting ij experimented different heuristics selecting shrinking point ij ij random point point approximately maximizes area ji point approximately typical values 
pieces placed marker palette scale different marker 
maximizes convexity union polygons 
heuristics samples grid find approximate maximum 
experiments show maximizing area intersection heuristic performs best solving test problems subdivision 
maximizing convexity heuristic solved problems subdivision random selection heuristic 
comparisons 
table compares running times cn exact algorithm approximate knn algorithm cn examples 
feasible configurations exact algorithm performs times faster approximate algorithm average 
cn algorithm takes advantage convexity polygons nn handle arbitrary nonconvex polygons 
type appr 
ex 
type appr 
ex 
cn cn cn cn cn cn cn cn cn cn table approximate vs exact cn running times seconds calls denotes infeasible type appr 
ex 
type appr 
ex 
nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn nn table approximate vs exact knn running times seconds 
denotes infeasible table compares running times approximate knn algorithm exact knn algorithm 
nn examples approximate algorithm finds valid configurations slightly faster exact algorithm 
nn examples exact algorithm find valid configurations times faster approximate algorithm 
difference primarily daniels milenkovic nn example time seconds caused time required execute steady state restrictions approximate algorithm 
recall restrictions subdivision level approximate algorithm 
time required perform restrictions spent problem infeasible nn example approximate algorithm times faster exact algorithm 
cn cn algorithms fast solve cn cn containment problems apparel marker making 
probably faster cn algorithm practice may possible solve cn factor faster 
modest values knn algorithms run fast practical applications 
tests exact approximate algorithms fastest different types input 
result suggests hybrid containment algorithm best chance successfully handling large values 
currently experimenting hybrid algorithm combines restrictions multiple resolutions linear programming 
may possible generalize carousel algorithm knn develop methods 
knn containment useful operation practice approaches solving fruitful area research 

placement de formes ou ees 
phd thesis universit de france 
boissonnat 
simultaneous containment polygons 
proceedings rd acm symposium computational geometry pages 
daniels milenkovic li 
multiple containment methods 
technical report center research computing technology division applied sciences harvard university 
devillers 
simultaneous containment polygons analysis contact configurations 
technical report inria 
fortune 
fast algorithm polygon containment translation 
proceedings th colloquium automata languages programming pages 
springer verlag 
garey johnson 
computers intractability guide theory np completeness 
freeman san francisco 
guibas ramshaw stolfi 
kinetic framework computational geometry 
proceedings th ieee symposium foundations computer science pages 
li 
compaction algorithms non convex polygons applications 
phd thesis harvard university division applied sciences 
milenkovic 
robust polygon modeling 
special issue computer aided design uncertainties geometric computations september 
milenkovic daniels li 
placement compaction nonconvex polygons clothing manufacture 
proceedings th canadian conference computational geometry pages 
