effective hash algorithm mining association rules jong soo park ming chen philip yu ibm thomas watson research center yorktown heights new york fc park watson ibm com examine issue mining association rules items large database sales transactions 
mining association rules mapped problem discovering large itemsets large itemset group items appear sufficient number transactions 
problem discovering large itemsets solved constructing candidate set itemsets identifying candidate set itemsets meet large itemset requirement 
generally done iteratively large itemset increasing order large itemset large itemset items 
determine large itemsets huge number candidate large itemsets early iterations usually dominating factor data mining performance 
address issue propose effective hash algorithm candidate set generation 
explicitly number candidate itemsets generated proposed algorithm orders magnitude smaller previous methods resolving performance bottleneck 
note generation smaller candidate sets enables effectively trim transaction database size earlier stage iterations reducing computational cost iterations significantly 
extensive simulation study conducted evaluate performance proposed algorithm 
database mining attracted growing amount attention database communities due wide applicability retail industry improving marketing strategy 
pointed progress visiting department computer science women university partially supported korea 
bar code technology possible retail organizations collect store massive amounts sales data 
catalog companies collect sales data orders receive 
record data typically consists transaction date items bought transaction possibly customer id transaction credit card kind customer card 
noted analysis past transaction data provide valuable information customer buying behavior improve quality business decisions put sale placed shelves customize marketing programs name 
essential collect sufficient amount sales data say days draw meaningful 
result amount sales data tends huge 
important devise efficient algorithms conduct mining data 
requirement process large amount data distinguishes data mining database context study ai context 
important data mining problems mining association rules 
example database sales transactions interesting discover associations items presence items transaction imply presence items transaction 
problem mining association rules context database explored :10.1.1.40.6984
pioneering shown mining association rules decomposed subproblems 
need identify sets items itemsets contained sufficient number transactions minimum support requirement 
itemsets referred large itemsets 
large itemsets obtained desired association rules generated straightforward manner 
subsequent literature followed approach focused large itemset generations 
various algorithms proposed discover large itemsets 
generally speaking algorithms construct candidate set large itemsets heuristics discover subset contains large itemsets 
process done iteratively sense large itemsets discovered iteration basis generate candidate set iteration 
example th iteration large itemsets containing items referred large itemsets generated 
iteration construct candidate set large itemsets heuristic expand large itemsets itemset certain constraints satisfied heuristic construct candidate set large itemsets crucial performance 
clearly order efficient heuristic generate candidates high likelihood large itemsets candidate need count appearances transactions 
larger candidate set processing cost required discover large itemsets 
previously reported attested experiments processing initial iterations fact dominates total execution cost 
performance study provided compare various algorithms generating large itemsets 
shown algorithms candidate set generated early iteration generally orders magnitude larger set large itemsets really contains 
initial candidate set generation especially large itemsets key issue improve performance data mining 
performance related issue amount data scanned large itemset discovery 
straightforward implementation require pass database transactions iteration 
note increases smaller number large itemsets fewer transactions containing large itemsets 
reducing number transactions scanned trimming number items transaction improve data mining efficiency stages 
alternative approaches considered apriori 
apriori algorithm iteration requires pass database 
aprioritid algorithm database scanned pass 
transaction id candidate large itemsets transaction generated iteration 
determine detailed description algorithm section 
large itemsets transaction iteration 
initial stages apriori efficient aprioritid candidate itemsets tracked early stages process 
reverse true stages 
hybrid algorithm algorithms proposed shown lead better performance general 
challenge operate hybrid algorithm determine point 
shall propose algorithm dhp standing direct hashing pruning efficient large itemset generation 
specifically dhp proposed major features efficient generation large itemsets effective reduction transaction database size 
seen utilizing hash technique dhp efficient generation candidate large itemsets particular large itemsets number candidate large itemsets generated dhp orders magnitude smaller previous methods greatly improving performance bottleneck process 
addition dhp employs effective pruning techniques progressively reduce transaction database size 
observed prior early iterations tracking candidate itemsets transaction ineffective cardinality itemsets large 
note generation smaller candidate sets dhp enables effectively trim transaction database earlier stage iterations right generation large itemsets reducing computational cost iterations significantly 
seen exploiting features association rules number transactions number items transaction substantially reduced 
extensive experiments conducted evaluate performance dhp 
shown experiments slightly higher cost iteration due generation hash table dhp incurs significantly smaller execution times apriori iterations second iteration hash table dhp facilitate generation candidate itemsets iterations procedure large itemset generation employed algorithms showing advantage effective database trimming dhp 
sensitivity analysis various parameters conducted 
noted hybrid algorithm option switching apriori algorithm aprioritid database tid items example transaction database data mining early passes better performance 
ease presentation option adopted 
benefit aprioritid passes complementary focus dhp initial passes 
mention passing discovery association rules studied ai context various aspects data mining explored literature 
classification approach trying develop rules group data tuples certain common characteristics 
explored ai domain context databases 
source data mining ordered data stock market point sales data 
interesting aspects explore include searching similar sequences stocks similar movement stock prices sequential patterns grocery items bought set visits sequence :10.1.1.45.9405
organized follows 
detailed problem description section 
algorithm dhp proposed generating large itemsets described section 
performance results section 
section contains summary 
problem description fi set literals called items 
set transactions transaction set items note quantities items bought transaction considered meaning item binary variable representing item bought 
transaction associated identifier called tid 
set items 
transaction said contain association rule implication form ae ae oe 
rule holds transaction set confidence transactions contain contain rule support transaction set transactions contain mentioned problem mining association rules composed steps 
discover large itemsets sets itemsets transaction support predetermined minimum support 
large itemsets generate association rules database 
performance mining association rules fact determined step 
large itemsets identified corresponding association rules derived straightforward manner 
shall develop algorithm deal step discovering large itemsets transaction database 
readers interested details second step referred 
preliminary shall describe method prior apriori discovering large itemsets transaction database note comprehensive study various algorithms determine large itemsets apriori algorithm shown provide best performance initial iterations 
apriori base algorithm compare dhp 
apriori iteration pass constructs candidate set large itemsets counts number occurrences candidate itemset determine large itemsets pre determined minimum support 
iteration apriori simply scans transactions count number occurrences item 
set candidate itemsets obtained shown 
assuming minimum transaction support required set large itemsets composed candidate itemsets minimum support required determined 
discover set large itemsets view fact subset large itemset minimum support apriori uses generate candidate set itemsets apriori candidate generation operation concatenation 
consists gamma jl delta itemsets 
note jl large gamma jl delta extremely large number 
transactions scanned support candidate itemset counted 
middle table second row represents result counting hash tree usually fast counting process set example database extracted 
hash tree count support candidate itemset common feature algorithms apriori dhp discussed confused hash technique dhp generate candidate itemsets 
scan gamma 
itemset sup 
fag fbg fcg fdg feg itemset sup 
fag fbg fcg feg itemset fa bg fa cg fa fb cg fb fc scan gamma 
itemset sup 
fa bg fa cg fa fb cg fb fc itemset sup 
fa cg fb cg fb fc itemset fb scan gamma 
itemset sup 
fb itemset sup 
fb generation candidate itemsets large itemsets large itemsets determined support candidate itemset set candidate itemsets generated follows 
large itemsets item identified 
apriori tests itemset consists second items constitutes large itemset 
large itemset know subsets large candidate itemset 
candidate itemset apriori scans transactions discovers large itemsets 
candidate itemset constituted apriori ends process discovering large itemsets 
seen important generate small candidate set itemsets possible support itemset counted scan entire database 
shall see exploiting feature algorithm dhp proposed able generate large itemsets efficiently 
direct hashing efficient pruning fast data mining section shall propose algorithm dhp standing direct hashing pruning efficient large itemset generation 
proposed algorithm utilizes hash method candidate itemset generation initial iterations employs pruning techniques progressively reduce transaction database size 
algorithm dhp described section 
database pruning techniques section 
algorithm dhp algorithm dhp proposed major features efficient generation large itemsets effective reduction transaction database size 
shall describe subsection main flow algorithm dhp explain feature efficient generation large itemsets 
feature reducing database size described section 
illustrated section pass set large itemsets form set candidate large itemsets joining gamma denoted common items pass 
scan database count support itemset determine result general itemsets higher processing cost determining 
noted large database initial extraction useful information database usually costly part 
specifically previously reported attested experiments section processing cost iterations obtaining fact dominates total processing cost 
explained reason minimum support usually large turn results huge number itemsets process 
note jc gamma jl delta apriori 
step determining scanning database testing transaction hash tree built expensive 
constructing significantly smaller dhp generate smaller derive smaller database effectively trimmed 
reasons apriori tid effective trimming database stages 
step size decreases rapidly increases 
smaller leads smaller smaller corresponding processing cost 
view algorithm dhp designed reduce number itemsets explored initial iterations significantly 
corresponding processing cost determine reduced 
essence algorithm dhp uses technique hashing filter unnecessary itemsets candidate itemset generation 
support candidate itemsets counted scanning database dhp accumulates information candidate itemsets advance way possible itemsets transaction pruning hashed hash table 
bucket hash table consists number represent itemsets hashed bucket far 
note resulting hash table bit vector constructed value bit set number corresponding entry hash table greater equal seen bit vector greatly reduce number itemsets implementation detail omitted 
gives algorithmic form dhp ease presentation divided parts 
part gets set large itemsets hash table itemsets 
part generates set candidate itemsets hash table generated previous pass determines set large itemsets reduces size database large itemsets explained section hash table candidate large itemsets 
note part part step building hash table pass unique feature dhp 
part basically part employ hash table 
note dhp particularly powerful determine large itemsets early stages improving performance bottleneck 
size decreases significantly stages rendering little justification filtering 
reason shall part early iterations part iterations number hash buckets count larger equal part minimum support set buckets zero hash table forall transaction insert count items occurrences hash tree forall subsets count leaf node hash part database large itemsets large hash table gen candidate gamma set buckets zero oe forall transactions count support tj tj tg fc jc count sg part gen candidate gamma jc oe forall transactions count support tj tg fc jc count sg jd break apriori gen refer main program algorithm dhp procedure gen candidate gamma oe forall delta delta gamma delta gamma delta gamma gamma jc gamma fcg insert hash tree procedure procedure count support explained section forall delta delta delta count jtj procedure procedure forall subsets delta delta delta subsets tj procedure algorithm dhp part pre defined threshold large :10.1.1.45.9405
note part procedure apriori gen generate essentially method algorithm apriori determining candidate itemsets omit details 
part included dhp completeness method 
setting part part consists phases 
phase generate set candidate itemsets hash table described procedure gen candidate 
apriori dhp generates itemset gamma dhp unique employs bit vector built previous pass test validity itemset 
including itemsets gamma gamma dhp adds itemset itemset passes hash filtering itemset hashed hash entry value larger equal seen hash filtering drastically reduce size itemset passes hash filtering included stored hash tree 
hash tree built probed transaction part database scanned minimum support candidate itemset counted 
second phase part count support candidate itemsets reduce size transaction described procedure count support 
subset function determine candidate itemsets contained transaction 
transactions database reduced scanned subset transaction obtained count support itemsets methods trimming transaction reducing number transactions described detail section 
example generating candidate itemsets dhp 
candidate set large itemsets fag fbg fcg fdg transactions database scanned count support items 
step hash tree built fly purpose efficient counting 
dhp tests item exists hash tree 
increases count item 
inserts item count equal hash tree 
transaction occurrences subsets counted subsets transaction generated hashed hash table way subset hashed bucket value bucket increased 
shows hash table database 
database scanned hash address hash table number items hashed bucket making hash table generating fly count bucket itemset minimum support order order mod example hash table generation tid items counting support hash tree discard keep keep discard count example bucket hash table number itemsets hashed bucket 
hash table minimum support equal obtain resulting bit vector 
bit vector filter itemsets resulted apriori shown 
reducing size transaction database dhp reduces database size progressively trimming individual transaction size pruning number transactions database 
note observed mining association rules subset large itemset large itemset 
fb dg implies fb cg fb dg fc dg fact suggests transaction determine set large itemsets consists large itemsets previous pass 
view subsets transaction counted candidate itemsets able know transaction meets necessary condition containing large itemsets 
turn means number candidate itemsets close large itemsets counting subsets efficiently trim transactions reduce number transactions eliminating items useless large itemset generation 
take closer look transaction size trimmed dhp 
transaction contains large itemsets item contained itemsets appear candidate itemsets result item transaction trimmed appear candidate itemsets concept procedure count support trim transaction size 
certainly necessary condition sufficient condition item appear candidate itemset 
procedure check item transaction covered itemset transaction itemsets contained example trim reduce transactions 
note support itemset increased long subset transaction member described procedure count support keep occurrence frequency th item transaction subset containing th item member increase index item subset transaction corresponds corresponds corresponds :10.1.1.45.9405
procedure hashing subset transaction test subsets checking values corresponding buckets hash table reduce transaction size check item see item included itemsets eligible hashing item discarded meet requirement 
example transaction single candidate itemset ac 
occurrence frequencies items :10.1.1.45.9405
values transaction deemed useful generating large itemsets discarded 
hand transaction candidate items occurrence frequencies items corresponding corresponding corresponding corresponding :10.1.1.40.6984:10.1.1.45.9405
keeps items discards item example transaction abcdef subsets ac ae af cd ef exist hash tree built get values array occurrences item :10.1.1.40.6984
large itemsets items count larger 
keep items transaction procedure count support discard items useless passes 
clearly items contribute large itemset generations 
fact belong large itemset ac cd ad large itemsets 
seen procedure spurious items removed reduced database large itemsets 
consequently transaction scan transactions trimmed removed transactions consist necessary items large itemset generation kept progressively reducing transaction database size 
fact decreases significantly pass number reason dhp achieves shorter execution time apriori iterations procedure large itemset generation algorithms 
shows example experimental results assess performance dhp conducted experiments large itemset generations rs workstation model 
shown techniques hash table progressively reducing database size enable dhp generate large itemsets efficiently 
methods generate synthetic data described section 
effect hash table size dhp discussed section 
comparison dhp apriori algorithms section 
results scale experiments section 
generation synthetic data method study generate synthetic transactions similar modifications noted 
table summarizes meaning various parameters experiments 
transaction consists series potentially large itemsets itemsets chosen set itemsets jlj set 
size potentially large itemset determined poisson distribution mean equal jij 
itemsets generated follows 
items itemset chosen randomly items 
order common items subsequent itemsets itemsets fraction items chosen itemset generated items picked randomly 
fraction called correlation level chosen exponentially distribution mean equal 
number subsequent itemsets correlated itemset chosen number study 
itemsets generated generation process resumes new cycle 
items itemset chosen randomly subsequent itemsets determined correlated itemset way described 
generation process repeats jlj itemsets generated 
noted generation itemset dependent previous itemset 
clearly larger incurs larger degree similarity transactions generated 
larger large itemset generation scenarios observe iterations 
able jlj groups transactions model grouping clustering environment 
potentially large itemset weight probability itemset picked 
weight exponentially distributed normalized way sum weights equal 
obtain transaction series potentially large itemsets data pool contains potentially large itemsets 
potentially large itemset chosen inserted pool itemset assigned number obtained multiplying weight itemset factor 
potentially large itemset assigned transaction number itemset decreased 
number itemset potentially large itemset randomly chosen inserted pool 
control numbers large itemsets corruption level transaction generation model phenomenon items large itemset bought 
transaction stored file system form transaction identifier number items items 
effect size hash table note hash table size dhp affects cardinality generated 
fact process trimming database size described section seen size subsequently affects determination table shows results varying hash table size jd jt jij jlj 
tx iy dz mean jt jij number transactions theta 
notational table meaning various parameters set transactions large itemsets jd number transactions hash table containing jh buckets set candidate itemsets set large itemsets jt ave size transactions jij ave size maximal potentially large itemsets jlj number maximal potentially large itemsets number items table results varying hash table sizes jh ff size kb kb kb kb kb jd total time simplicity fh sg table represent set buckets hashed itemsets execution part dhp denote cardinality fh sg 
ff represents ratio number itemsets hashed fh sg total number itemsets generated original database ff factor represent fraction itemsets involved candidate itemsets 
total number itemsets experiment table slightly larger jd delta gamma jt delta number distinct itemsets gamma delta note gamma delta jh chosen exponent greater jc jl table 
addition note second column table database generating large itemsets small compared original database indicating effective trimming database size dhp 
specifically ratio terms sizes terms numbers transactions 
average number items transaction original database 
number hash entries reduction ratio jc dhp different sizes clearly small number items transaction incurs fewer comparisons hash tree leads shorter execution time 
table values jh dhp varies gamma delta gamma delta 
jh approximately gamma delta column jc jl meaning larger leads smaller cost memory 
jh decreases jc execution time increase 
size increases 
fairly performance till jh quarter gamma delta till fourth column 
noted hash table gamma delta buckets number candidate itemsets significantly smaller gamma jl delta clearly minimum support small number total itemsets large advantageous large jh dhp 
reduction ratios jc dhp various sizes shown logarithmic scale axis ease presentation 
comparison dhp apriori table shows relative performance apriori dhp 
jt transaction items average large itemsets passes interest presentation 
execution times algorithms shown 
dhp jh chosen exponent greater gamma delta buckets 
experiment dhp uses hash table generation part 
starting third pass dhp apriori procedure generating large table comparison execution time apriori dhp number number jd kb kb kb kb kb kb total time itemsets part algorithms different smaller transaction database scanned dhp 
column represents database size th pass dhp cardinality jd 
explicitly apriori scans full database pass dhp scans full database passes scans reduced database 
mentioned hybrid algorithm option switching apriori algorithm aprioritid early passes better performance option adopted 
seen execution time passes apriori larger total execution time dhp seen table execution time pass dhp slightly larger apriori due extra overhead required generating dhp incurs significantly smaller execution times apriori passes second pass hash table dhp facilitate generation passes procedure showing advantage scanning smaller databases dhp 
execution time passes apriori total execution time 
motivation employing dhp passes achieve performance improvement 
shows execution time ratios dhp benefit aprioritid passes complementary focus dhp initial passes 
fact part dhp aprioritid apriori desired 
apriori dhp comparison algorithms pass pass pass passes execution time apriori dhp apriori various minimum supports ranging 
indicates dhp constantly performs various minimum supports 
figures show effect progressively reducing transaction database dhp 
pointed earlier feature dhp feasible practice due early reduction size turns powerful facilitate itemset generations 
shown logarithmic scale axis number transactions database scanned dhp progressively decreases due elimination transactions deemed useless large itemset generations 
note dhp reducing number transactions trimming items transaction 
seen average number items hand reduced process trimming transaction size hand increased process reducing number transactions transactions eliminated usually small ones 
result conflicting factors shown case axis uses logarithmic scale average number items transaction remains approximately pass number example starting items average number items transaction drops increases slightly small transactions eliminated passes 
explicitly show effect trimming transaction size conducted experiment transactions trimmed thrown away process 
average number items transaction resulting experiment shown case indicates trimming method employed dhp effective 
minimum support dhp apriori execution time execution time comparison dhp apriori minimal supports number original tx passes remaining number transactions remaining number transactions pass case filtering small tx case filtering small tx passes average 
items tx case case case case average number items transaction pass database size performance dhp database size increases scale experiment dhp shows execution time dhp increases linearly database size increases meaning dhp possesses important feature apriori 
examine performance dhp number items increases 
table shows execution times dhp number items increase data sets 
experiments table minimum support hash table size exponent greater gamma delta note portion time determining case small transactions table relatively larger case large transactions table 
words large transaction larger likelihood having large itemsets process small transaction 
fixed minimum support number items increases execution time obtain increases size usually close execution time obtain larger itemsets decreases support itemset averaged items decreases 
consequently shown table increases execution times small transactions increase little prominently large transactions 
table performance dhp number items increases examined issue mining association rules items large database sales transactions 
problem discovering large itemsets solved constructing candidate set itemsets identifying candidate set itemsets meet large itemset requirement 
proposed effective algorithm dhp initial candidate set generation 
dhp hash algorithm especially effective generation candidate set large itemsets number candidate itemsets generated orders magnitude smaller previous methods resolving performance bottleneck 
addition generation smaller candidate sets enables effectively trim transaction database earlier stage iterations reducing computational cost stages significantly 
extensive simulation study conducted evaluate performance proposed algorithm 
agrawal faloutsos swami :10.1.1.45.9405
efficient similarity search sequence databases 
proceedings th intl 
conf 
foundations data organization algorithms october 
agrawal ghosh imielinski iyer swami 
interval classifier database mining applications 
proceedings th international conference large data bases pages august 
agrawal imielinski swami :10.1.1.40.6984
mining association rules sets items large databases 
proceedings acm sigmod pages may 
agrawal srikant 
mining sequential patterns 
proceedings th international conference data engineering march 
agrawal srikant 
fast algorithms mining association rules large databases 
proceedings th international conference large data bases september 
beck navathe 
knowledge mining imprecise querying classification approach 
proceedings th international conference data engineering february 
han cai cercone 
knowledge discovery databases attribute oriented approach 
proceedings th international conference large data bases pages august 
swami 
set oriented mining association rules 
technical report rj ibm almaden research laboratory san jose ca october 
coffman jr eve 
file structures hashing functions 
comm 
acm july 
ng han 
efficient effective clustering methods spatial data mining 
proceedings th international conference large data bases pages september 
piatetsky shapiro 
discovery analysis presentation strong rules 
knowledge discovery databases 
quinlan 
induction decision trees 
machine learning 
