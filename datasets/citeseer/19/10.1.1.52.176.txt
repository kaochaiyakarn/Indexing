concert language distributed programming published proceedings winter usenix conference san francisco california 
joshua auerbach arthur goldberg germ goldszmidt gopal mark kennedy rao james russell ibm thomas watson research center box yorktown heights ny concert new language distributed programming extends ansi support distribution process dynamics 
concert provides ability create terminate processes connect communicate 
supports transparent remote function calls rpc asynchronous messages 
interprocess communications interfaces typed concert type correctness checked compile time possible runtime 
data types including complex data structures containing pointers aliases transmitted rpcs 
concert programs run heterogeneous set machine architectures operating systems communicate multiple rpc messaging protocols 
current concert implementation runs aix sunos solaris os communicates sun rpc osf dce udp multicast 
groups inside outside ibm actively concert available anonymous ftp software watson ibm com pub concert 
describes concert new language distributed programming 
describe basic concert features needed write significant concert programs 
show example concert programs comparisons traditional rpc technology motivate design choices 
objective concert project develop tools improve productivity people writing distributed programs today rich networking environments 
workstation pc programmers write chose extend added minimal set new concepts types operators reused existing features possible programmer learn concert easily 
addition concert programs link compatible existing object code avoid sweeping recompilation legacy code 
big organizations lans connect heterogeneous set machines including personal computers running dos windows os workstations running different flavors unix 
variety protocols run nets including sna tcp ip netbios spx ipx 
designed concert exist environment 
compiler portable system ansi compiler multi protocol run time communicate heterogeneous set protocols 
chose implement concert language set library functions pvm set library functions plus stub compiler sun onc assisted tools 
decision language integrated support distributed programming offer higher level functionality approaches demonstrate section 
trademarks appearing recognized registered trademarks respective companies 
concert language concert superset ansi ansi program concert program built separately compiled source files combined link step 
constructing differs constructing ansi program concert compiler ccc ansi compiler cc source files contain concert extensions 
concert fully link compatible ansi small fraction application typically need compiled ccc 
ccc implemented preprocessor ansi back enhances portability helps ensure object code compatibility allows ansi debuggers 
concert program normal executable may placed execution usual means 
design concert extensions exploits fact ccc reads application source files containing interface declarations program logic 
ccc transform program logic example concert control flow primitives taken directly ansi find errors automate certain functions saw interface declarations 
call single translator approach ccc translate cc practice need 
single translator approach contrasts add rpc packages sun onc apollo ncs osf dce may characterized translators approach 
approach compiler reads program original executable logic idl translator stub compiler example reads interface definitions 
translator read source files original executable logic joined stub compiler canned logic marshalling messages link time 
limits extent tool help programmer 
describe features language extensions concert 
fall general categories 
add packages theoretically provide help areas listed provide rpc single method exchanging bindings ones strategy demultiplexing requests locally concurrent threads 
provide messaging know provides help process management 
complete facility distributed computing cover areas 
despite fact concert uses single translator approach feature provided language extension language extensions introduced significant mileage gained 
publish explicit runtime library calls preprocessor macros cases language extension required 
convention concert language keywords simple mnemonic names library functions macros names cn examples section illustrate detail 

transparent remote function calls concert transparently overloads function call construct embrace remote procedure call rpc 
remote instances interface concert uses different function pointer values way determining instance call directed handle parameter purpose 
general pointer remote function serves binding conveying capability invoke function 
placing function port initial port storage class causes message queue associated function enabling called remotely 

asynchronous messaging concert adds way asynchronous queued messaging language 
analogy function pointers pointer remote queue serves binding conveying capability enqueue message 
message type type constructor defines queue messages type messagetype may concert type 
operation send binding message sends message queue binding refers blocking operation receive port message ref moves message queue variable pointed message ref 

process management concert adds process management language 
new types process program describe concert processes programs 
concert program start concert program executing different machine create program binding ref operation 
binding ref argument pointer binding variable parent initialized create provide logical connection child specifically pointer initial port child immediately usable rpc messaging 
create returns value type process terminate operation kill created process 

distributed linking concert provides extensible set external binding facilities store retrieve concert remote pointers external media various kinds 
popular methods finding components distributed system supported way including known ports ones listed services sun onc shared files strings osf dce cell directory service 
vehicle evolving connectivity concert application interoperating popular rpc components written concert way transparently map concert remote pointers express logical connectivity method component 
provided executable macro form convenient declarative form executed automatically program start time 
cases declarative removes need write main function 

demultiplexing concert provides necessary demultiplexing primitives permit server progress face arbitrary request arrival orders 
included category ability deal rpc rendezvous style procedure call decompose request response 
blocking operation accept function port list automatically handles call function ports list arrives 
blocking operation select queue list non blocking operation poll queue list return index queue queue list message poll returns queue 
schedule message receive 
new type typeg holds request message associated remote call 
operation reply issues response message completing decomposed call 

communication complex data types concert permits arbitrary data types including scalars arrays unions data structures built pointers aliases transmitted interprocess communications 
data transmitted argument rpc message contains pointers marshalling deep copy pointers pointers data point copying entire data structure transmission 
marshalling data types requires information data standard type declarations provide 
concert programmer provide additional information annotating ipc data 
annotations placed declarations data types communicated processes declarations definitions ports bindings 
annotations called attributes 
attributes unnecessary simple functions 
function simple uses unions arrays limited character strings pointers don introduce actual aliases parameters pass information obvious directions non pointers directions pointer indirected arguments 
attributes add kinds information communications 
ffl data description attributes expand description data types 
example indicate length arrays presence null terminated character strings case unions 
ffl communication direction attributes indicate transmission direction remote function call parameters 
argument transmitted caller callee argument callee caller argument transmitted ways 
annotation opaque instruct follow pointer 
concert attributes attribute meaning memory allocated hold array 
max length memory array elements allocated 
direction argument transmitted 
argument transmitted caller callee 
argument transmitted callee caller 
argument transmitted caller callee callee caller 
case union 
switch identifier indicates case union 
switch type type specifier type specifier indicates type union discriminant 
case case list case list identifies case union discriminant value appearing case list 
pointer object pointers 
aliased 
detects aliases 
aliased data sending aliased data receiving 
unique 
detect aliases 
big array transmitted 
length array elements 
string character string convention array terminated null character 
allocated memory freed 
keep caller memory caller sender freed 
keep callee memory allocated callee freed 
discard caller memory caller sender freed 
discard callee memory allocated callee freed return 
pointer null 
optional 
check null pointer marshalling 
required 
assumes pointer data transmit 
concert attributes 
ffl storage retention attributes help control heap storage 
allocates heap memory store ipc data 
storage retention attributes control de allocates data 
attributes appear syntax type qualifier const volatile 
comma separated list contained square brackets attribute attribute 
concert attributes summarized 
examples comparisons section detailed examples concert language 
show extension accomplished contrast case limited approach followed add rpc packages 
discussion concrete single programming example elaborate go showing concert things thing need done public domain sun onc 
chose technology comparison familiar widely available readers able try similar examples 
areas packages ncs dce may functional public domain sun onc try point 
limitations focus heavily intrinsic translators approach true add rpc packages 
transparent rpc single server fixed relationship simplest example starts client program server program 
usual rpc style express server subroutine called remotely 
purpose provide error code fails succeeds linked list structures constitutes report machine resource utilization user 
started example translators approach reasonably 
fact translators approach tends long client interact server type 
concert significant advantages stemming programmer ability reason types language simplified mechanics program construction 
conceiving example ansi program interface definition contained header file example look 
enum status success failure enum reason struct user list users utilization expressed list struct user char name unsigned long cpu unsigned long memory unsigned long disk union result struct user enum reason enum status union result answer client look 
include example main union result switch case success display result list anchored break case failure report failure reason server subroutine look omitting purely local logic 
include example enum status union result answer try gather statistics mind answer return success answer return failure concert distributed client server application just take header file annotate definition union result type function get utilization 
enum status union result case success struct user case failure enum reason typedef enum status return union result answer changed function definition type definition strictly necessary convenience 
necessary recompile original client original server subroutine ccc 
server main procedure obtained ccc compile separate concert source file 
include example extern port export line simply declaration function get utilization terms type 
port keyword concert extension informs compiler function question called remotely 
double brackets set section containing declarative form ebf syntax 
statement indicates ebf employed shared file ebf case export invokes ebf specific logic export function message queue pointer external medium requests automatic main function loops forever listening requests exported functions 
client simplest way bind client server provide matching declaration ebf syntax separate ccc source file 
include example import note didn port keyword module going get utilization called remotely module get utilization resolved importing shared file 
putting concert client extensions separate source file avoid recompilation suggestion 
concert client server extensions just easily placed source files original client server source 
comparison provide functionality translators approach needs supply separate idl file 
example shows 
resembles original header file note differs ansi syntax programmer construct separately 
enum status success failure enum reason struct user user string name unsigned long cpu unsigned long memory unsigned long disk union result switch status discrim case success user case failure reason program version result void contrast concert correspondence idl types idl file types source longer exact 
enums retained ansi syntax deviate ansi got struct union 
needed special type string 
assign name discrim type status union discriminant generate structure union union discriminant encapsulated inside 
type name result refer structure union 
order generates understand done transformation general generated interface header file read 
forced relinquish identifiers specified enum struct tags automatically declared typedef names 
accept compromise name get utilization incorporating version number exact type signature remote function needs return single output take account encapsulated form union generates 
rewritten looks 
include example generated result void static result answer try gather statistics mind answer answer discrim success answer answer discrim failure return answer change modest point 
programmer understand number things correspondence language stub compiler programming language order get program correct form 
need mental translation avoided interface declaration language programming language tightly integrated single translator approach 
difficulties inherent translator approach 
stub compilers may better making steps convenient providing expressiveness idl example osf dce idl sufficiently expressive cover things programmers want add rpc packages require programmers mapping different type systems 
packages require treating idl file requiring special compilation step directly usable include file 
mechanically stub compiler produces outputs header file source files need incorporated client server 
concert case complexities require declaration done course 
happens sun onc requires explicit binding call subsequent error handling client program order produce client rpc handle 
requires handle passed client stub procedure making rpc considerably transparent 
won show add rpc packages osf dce succeed hiding particular source complexity concert simple server case 
section see small change problem force explicit binding form rpc handle known rpc tools translators approach 
server main procedure generated automatically just simple cases concert leaving simple example consider variation suppose server written sun onc wish call concert client 
concert require server rewritten concert accomplish 
write client recognize server written technology requires certain restricted forms function signatures simply change view conform slightly modifying concert declaration 
struct result enum status discrim discrim union result case success struct user case failure enum reason struct result void concert client program ebf logic 
host udp host needs value host appropriate sun onc server resides 
get prog get vers get proc constants program number version number procedure number assigned 
indicates nonzero taken known port argument indicates sun onc primary protocols 
argument course function imported 
executing ebf macro call imported function get utilization just 
similar approach dual variation client written server concert ebf macro illustrated provided preprocessor macro backed library function supported convenient form single translator approach requires language extensions underneath 
expansion macro primitive language extensions crt marshall plan get utilization crt get utilization employed 
concert compiler knows type function get utilization responds directives generating table anonymous stubs called marshall plan 
avoids requiring static name assigned stubs event type argument function pointer 
value seen section 
similarly compiler knows get utilization function function pointer responds second directive providing function body known adjusts difference calling mechanics 
permits underlying library function produce function pointer result making general 
key points illustrated variation 
possible advantages concert interoperating non concert world express 
osf dce program interoperate sun onc osf dce 
course deliver interoperability sun onc osf dce components challenge protocol management runtime stub compilation deal aspect concert 
second supporting dynamic greatly aided having single translator approach 
compiler able discover need stub compilation assigning static fixed names stubs separate stub compilation needed 
transparent rpc multiple servers dynamic relationship change problem slightly order see power concert really pays 
suppose want write client invoke multiple instances server subroutine described previous section execute different machine 
suppose list machines command line known statically 
suppose pre planned machines need run servers arranged started automatically inetd register short want start needed fly terminate finished 
concert change header file previous section need change server subroutine 
discard server ccc source containing variation 
include example concert implementation executable macro form ebf don declarative syntax syntax may added soon 
development 
uniform mechanism handling external events unix process api routing event streams various api wish consume windows library sun rpc osf dce runtimes 
initial port main accept accept operator provides rendezvous facility concert main program illustrated accepts exactly call get utilization exits 
making get utilization initial port tell compiler called remotely concert process creates process parent automatically get pointer 
lost automatic main main write trivial 
various translators approaches write main procedure case far trivial 
new client full fledged concert program looks 
define server program name include example include concert get cn library functions macros main int argc char argv char host union result program pgm pgm host argv pgm host create pgm deal create error switch original client case success display result list anchored break case failure report failure reason recall concert extensions header file needed course 
added new ones 
create keyword provides new primitive operator create library function syntax mimics 
program keyword provides new data type generally called program description 
program description complex program designating program file name machine run various options instantiating 
various cn prog library functions initialize program descriptions 
create primitive puts program execution yielding value type process called process handle expression value possibly mutating second argument receive pointer initial function queue created process 
pointer communicate child 
retained process handle example terminate operator cancel child execution available means 
necessary child program written terminate voluntarily call 
process handle example compare special process handle value cn mean child created richer exception handling facility exists concert discussed 
pointer child initial function order rpc child 
illustrated joint power providing process dynamics communication function pointers anonymous re assignable express 
approach able write highly dynamic client complicated original static client 
may obvious single translator solution needed pointer approach effectively 
create operator function ccc involved analyzing type second argument detects pointer pointer function particular type 
necessary marshall plan anonymous stub table generated automatically associated pointer value generated successive calls create 
fact physical marshall plan generated reused different 
concert captures specific information needed find particular server instance containing remote procedure queue 
arranges call right stub right marshall plan right routing information 
frees application need manipulate rpc handles explicit binding information keeps rpcs transparent directing specific servers 
translators approach information translators merged link time static name visible linker assigned generated stub 
stub generated function type support indefinite dynamically determined number instances type add rpc package choice client rpc handle similar construct discriminate server instances making rpc inherently transparent requiring application involved binding process 
parallelism messaging passing bindings elaboration sample program shows convenience features concert suppose gathering statistics server expected take long time useful run servers parallel 
restructure application rpcs servers asking start gathering statistics gather servers send statistics back asynchronously parallel 
set declarations reasonable purpose 
enum status success collapses status reason struct report report user machine char machine char name unsigned long cpu unsigned long memory unsigned long disk longer linked list union longer typedef struct report typedef enum status answer note concert attribute lists needed set declarations 
arrays character strings unions aliased pointers parameters uncertain directionality employed 
new language extension declaration 
simply queue messages type 
declare function type designed initial function server 
function passed pointer kept server send results back 
initial function returns enum status indicating server capable carrying request 
server look 
include example initial port enum status answer set gather statistics answer save queue pointer return success return failure codes main struct report accept call initial port gathering statistics gather record user send build special null user record send logical file client invoke server logic previous section creating servers invoking initial ports 
argument call passes address called answer queue 
issue messages servers couldn perform task count 

struct report 
initial logic described receive real user element logical file server doing similar add rpc packages possible packages provide asynchronous messaging 
obvious way single translator helps ccc check send receive operations type correct finding errors sooner 
addition simple structure solution greatly aided able pass pointers class values 
values typed anonymous 
compiler generates necessary marshall plans anonymous stubs automatically sure associated value type pointer received 
class typed anonymous pointers provided translators solution stubs tied concrete symbol visible link time 
add rpc package best form connection handle class 
anonymous handle typed introduces possibility error 
implementation enhance portability core concert compiler implemented preprocessor executes ansi preprocessor ansi compiler 
compiler shell ccc invokes local ansi compiler preprocess mode passes output concert preprocessor feeds result local ansi compiler 
producing executable ccc invokes pre linker scans object files performs operations require global view program 
usually produces small amount code data turned object file combined files form final executable 
support debugging plain tools ensure error messages compiler understandable ccc passes ansi code directly output stream possible examining modifying 
line number information captured preserved 
cfront implementation ccc names 
concert programs including ones instantiated create debugged tools dbx gdb 
compiler analyze declarations statements program 
concert operations checked translated 
presence port function declaration invocation create may import function pointer call function function pointer argument triggers analysis phase 
concert type examined missing attribute annotations inferred checked 
fully annotated types fed code emits stub functions 
stubs compiled multiple protocols final selection delayed runtime 
runtime invoked rpc concert operation 
dynamically selects available protocols pathways exist destination 
currently supports protocols sun rpc osf dce udp multicast protocol shared memory pointer passing concert processes implemented threads address space 
prototype permits concert processes interoperate existing sun rpc components nis 
details implementation provided 
related concert project choose extend multiple existing languages best satisfy conflicting goals hiding complexity building existing base written code programmer skills 
new language designed support distributed computing argus sr nil emerald hermes survey may hide complexity programmers willing learn new language 
engage feature feature comparison languages influenced concert particularly nil hermes sr share concert philosophy providing message passing rpc 
new languages learned programmers easily draw large body code perform routine tasks day day practice distributed computing 
inherent approach existing implementations new languages multi protocol constructed terms single protocol suite 
opposite extreme commercial packages osf dce apollo ncs pipes momentum horizon message express sun onc software tools matchmaker courier horus permit programmers continue familiar languages incorporate existing code 
packages multi protocol transport level transport protocols multi protocol rpc protocol level interoperating rpc tools concert 
tools second category pure library usually follow translators model separate stub compiler 
attempted show previous discussion concert language approach limits extent complexity hidden programmer 
addition tools provide process management provide rpc messaging rpc ones support demultiplexing requests server indirectly associated thread package 
partly function defined low level limitations translators approach library apis powerful tools class quite complex 
tools attempting address residual complexity library packages typically generate addition stubs prologue establish program initial connectivity help automate program construction process 
tools best making simple clients relatively static set servers 
provide limited help writing servers help programs evolving interrelationships 
single translator language extensions approach concert shared efforts notably linda 
linda radically different model computation concert shared tuple space particularly effective parallelizing single applications 
believe concert model computation connectivity modeled explicitly appropriate client server applications tools cited share concert view 
client server applications components belong semi independent administrative domains connectivity resulting multi application constantly changing 
concurrent extension classify new language legacy code recompiled order incorporated concurrent program 
concurrent primitives process creation termination similar communication synchronization semantics concert differences reflecting concurrent single parallel application design point 
concurrent process process handle invoke exported procedures kill concert provides finer granularity control particularly important crossing administrative boundaries 
concert provides necessary type system extensions support transmission arbitrary data structures heterogeneous system boundaries concurrent lacking extension requires shared memory homogeneous distributed memory cluster 
concurrent requires program bodies instantiated processes statically bound single program concert requirement 
consequence difference concert programs may developed instantiated independent programmers independent administrative domains communicate 
pcn new language compatible type system ability link pcn distributed logic written strictly pcn subroutines perform local computation 
concert possible legacy code directly invoke remote function originally written perform local function calls invoked remotely originally written invoked locally 
degree integration old new logic greater concert mentioned tools support multiple transport protocols designed support multiple rpc protocols interoperate components protocols programming tool 
exception translators tool multiple rpc protocols feature 
things differentiate concert 
gets help translation time uses largely interpretive approach runtime explicit calls layers protocol support control data representation transport order resolve protocol 
concert pre compiles set target protocols compile time single selection runtime marshalling may done example osf dce published programming interface comprising rpc threads function calls counting ones privately stubs 
compiled code 
protocol selected particular rpc handle protocol fixed 
concert class pointer function queue passed network retains knowledge protocols capable reaching process defines function queue 
different protocol selections may different senders different times lifetime binding 
status current concert prototype runs aix ibm risc system sunos solaris sun workstations os 
begun ports vm cms mvs planning windows nt 
programmers concert improve performance applications ways including parallelizing bottlenecks reducing communications moving code input data 
example large concert application searches database genetic information risc system parallel 
concert application uses similar search techniques perform complex visual pattern recognition 
concert connect natural language textual query program collection large geographically dispersed text repositories 
global desktop project uses concert enable graphical interconnection running applications enabling cooperative computing network 
application concert collection analysis time series data observation seismic phenomena 
current prototype performs 
round trip delay rpc communicates single integer takes ms little sun rpc ms delay 
transmission arrays achieves bandwidth mbyte sec 
performance compares favorably systems parallel programming pvm linda studied 
measurement program concert tutorial 
parsons compared usability performance concert tools distributed programming including isis pvm 
concert set compatible extensions important programming languages 
may build concert cobol concert fortran concert languages implement distributed computing model called process model distributed program composed set sequential processes communicating rpc asynchronous message passing 
languages interoperate concert cobol process serve rpc concert process 
support data interoperability ipc messages mapped concert universal type family described 
expanding support osf dce exploit dce services naming security provide richer interoperability dce components written concert improvements available anonymous ftp version year 
currently designing concert investigating preliminary designs concert fortran 
interested developing tools process management control distributed visualizer debugger utilities aid design interoperable interfaces internal function signature representation intermediate form mediate search equivalent representations different languages 
investigating improvements run time add group communication fault tolerant primitives causal atomic multicast 
unix implementations concert comprehensive documentation including tutorial programmer manual example code available anonymous ftp measured performance ibm rs workstations connected mbit token ring communicating sun rpc tcp ip 
software watson ibm com pub concert gregory andrews 
synchronizing resources 
acm transactions programming languages systems october 
auerbach bacon goldberg goldszmidt gopal kennedy lowry russell silverman strom yellin yemini 
highlevel language support programming distributed systems 
international conference computer languages pages 
ieee computer society april 
joshua auerbach steven arthur goldberg german goldszmidt gopal mark kennedy rao james russell 
concert manual programmer guide language distributed programming 
technical report rc ibm watson research center 
joshua auerbach arthur goldberg german goldszmidt gopal mark kennedy james russell yemini 
concert specification definition language distributed programming 
technical report rc ibm watson research center 
joshua auerbach gopal mark kennedy james russell 
concert supporting distributed programming language extensions portable runtime 
th international conference distributed computing systems june 
joshua auerbach james russell 
concert signature representation idl intermediate language 
proceedings acm sigplan workshop interface definition languages january 
bal steiner tanenbaum 
programming languages distributed computing systems 
acm computing surveys september 
bershad ching lazowska schwartz 
remote procedure call facility interconnecting heterogeneous computer systems 
ieee transactions software engineering august 
kenneth birman robert cooper isis system manual version 
technical report cs department cornell march 
black hutchinson jul levy carter 
distribution types emerald 
ieee transactions software engineering january 
califano rigoutsos 
flash fast look algorithm string homology 
proceedings international conference intelligent systems molecular biology washington dc july 
chandy taylor 
composition concurrent programs 
proceedings supercomputing 
acm november 
douglas timothy mattson martin schultz 
comparison distributed shared virtual memory systems networks 
technical report department computer science yale university new haven 
yaleu dcs tr 
gehani 
concurrent programming language 
silicon press beverly road summit nj 
gelernter carriero 
applications experience linda 
sigplan notices september 
phillip gibbons 
stub generator multilanguage rpc heterogeneous environments 
ieee transactions software engineering se january 
arthur goldberg 
concert tutorial language distributed programming 
technical report ra ibm watson research center 
michael jones richard rashid 
mach matchmaker kernel language support object oriented distributed systems 
technical report cmu cs cs department cmu september 
mike kong terence paul leach elizabeth martin nathaniel mishkin joseph geoffrey 
network computing system manual 
prentice hall englewood cliffs nj 
liskov 
distributed programming argus 
comm 
acm march 
andy lowry rob strom danny yellin 
global desktop ibm watson research center 
published available authors 
maarek berry kaiser 
information retrieval approach automatically constructing software libraries 
transactions software engineering august 

language rpc tool 
boulder colorado 

ez rpc manual 
natick ma 
open software foundation cambridge mass osf dce release developer kit documentation set february 
ian parsons 
evaluation distributed communication systems 
alberta 
available author 
rigoutsos hummel 
distributed bayesian object recognition 
proceedings ieee conference computer vision pattern recognition new york city ny june 
patricia gomes soares alan randolph 
implementing delegation model design hpcc application concert proceedings ibm centre advanced studies conference pages october 
robert strom david bacon arthur goldberg andy lowry daniel yellin alexander yemini 
hermes language distributed computing 
prentice hall january 
robert strom alexander yemini 
nil integrated language system distributed programming 
sigplan symposium programming language issues software systems june 
bjarne stroustrup 
history 
sigplan notices march 
sun microsystems 
sun network programming 
sunderam 
pvm framework parallel distributed computing 
concurrency practice experience december 
xerox 
courier remote procedure call protocol december 
technical report 
yemini goldszmidt wei 
concert high level language approach heterogeneous distributed systems 
ninth international conference distributed computing systems pages 
ieee computer society june 
