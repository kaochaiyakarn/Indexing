isern unified framework coupling measurement object oriented systems lionel briand john daly rgen st fraunhofer institute experimental software engineering kaiserslautern germany 
isern increasing importance placed software measurement lead increased amount research developing new software measures 
importance object oriented development techniques specific area occurred coupling measurement object oriented systems 
despite interesting rich body little understanding motivation empirical hypotheses new measures 
difficult determine measures relate application 
consequence difficult practitioners researchers obtain clear picture state art order select define measures object oriented systems 
situation addressed clarified different activities 
standardized terminology formalism expressing measures provided ensures measures expressed fully consistent operational manner 
second provide structured synthesis review existing frameworks measures coupling measurement object oriented systems takes place 
third unified framework issues discovered review provided existing measures classified framework 
review empirical validation concerning existing coupling measures provided 
contributes increased understanding state art mechanism provided comparing measures potential integrating existing measures examine concepts different ways facilitating rigorous decision making regarding definition new measures selection existing measures specific goal measurement 
addition review state art highlights important issues measures defined fully operational form ii relatively explicit empirical models recommended measurement theory iii smaller number measures empirically validated usefulness measures demonstrated 
keywords coupling object oriented measurement 
market forces today software development industry begun place emphasis software quality 
lead increasingly large body performed area software measurement particularly evaluating predicting quality software 
turn lead large number new measures proposed quality design principles coupling 
high quality software design principles obey principle low coupling 
stevens introduced coupling context structured development techniques define coupling measure strength association established connection module smc 
stronger coupling modules inter related difficult modules understand change correct complex resulting software system 
empirical evidence exists support theory structured development techniques see tz sb 
isern principle low coupling migrated object oriented design coad yourdon cy cy research lead large number new coupling measures object oriented systems defined 
coupling complex software attribute object oriented systems different mechanisms constitute coupling attempt provide structured synthesis understanding state art poor 
example standard terminology formalism expressing measures measures fully operationally defined ambiguity definitions 
result difficult understand different coupling measures relate 
unclear potential uses existing measures different measures complementary manner 
fact exists little empirical validation existing object oriented coupling measures means usefulness measures supported 
address clarify understanding state art coupling measurement object oriented systems requires comprehensive framework standard terminology formalism 
framework facilitate comparison existing measures ii facilitate evaluation validation existing measures iii support definition new measures selection existing ones particular goal measurement 
organised follows 
section summarises current state coupling measurement objectoriented system provides detailed motivation need research performed 
section introduces notation formalism required conduct research 
section provides comprehensive review structured synthesis existing object oriented coupling frameworks measures 
results review define new unified framework coupling measurement object oriented systems section 
section review empirical validation studies coupling measures takes place 
conclude review synthesis state art shown unexplored categories coupling measures defined 
addition empirical studies investigating validity existing coupling measures 
exist weak terms validation method various threats construct validity external attribute underlying assumptions theories implicit considered 
motivation object oriented measurement increasingly popular research area 
substantiated fact proposed literature different frameworks coupling cohesion ii large number different measures object oriented attributes coupling cohesion inheritance 
welcomed negative aspects mainly ad hoc manner objectoriented measures developed 
standard terminology formalism exists measures expressed ambiguous manner limits 
difficult understand different measures relate 
example different decisions defining coupling measure decisions respect goal measure defining empirical model hypotheses 
unfortunately measures proposed literature motivation decisions documented making difficult understand underlying assumptions measure unclear constitutes coupling connection classes strength coupling connection measured compared types connections coupling measures 
result unclear potential uses existing measures different coupling measures complementary manner obtain detailed picture coupling object oriented system 
short understanding existing coupling measures 
authors tried address problem introducing frameworks characterise different approaches coupling relative strengths frameworks considered comprehensive 
existing quite different frameworks object oriented coupling reviewed detail section 
eder identify different types relationships eks 
relationships interaction relationships methods component relationships classes inheritance classes derive different dimensions coupling classified different strengths 
second hitz approach coupling deriving different types coupling object level coupling class level coupling determined state object state object implementation respectively hm 
different strengths coupling proposed 
third briand constitute coupling interactions classes bdm 
strength coupling deter isern mined type interaction relationship classes interaction locus impact 
frameworks characterise existing measures different dimensions coupling identified negative aspects highlighted prevalent ones 
review literature example different measures object oriented coupling 
consequently difficult imagine confusing picture serious attempt improve understanding object oriented coupling measurement integrate existing frameworks unique theoretical framework homogenous comprehensive formalism 
review performed existing measures measures categorised unified framework 
framework mechanism compare measures potential integrate existing measures examine concepts different manner allow rigorous ease decision making regarding definition new measures selection existing measures respect utility 
facilitate evaluation validation coupling measures ensuring specific hypotheses provided link coupling measures external quality attributes 
facilitate identification dimensions coupling far neglected measures defined 
framework able integrate new coupling measures defined 
sense formalism framework extensible 
terminology formalism past research area software measurement suffered lack standardised terminology ii formalism defining measures unambiguous fully operational manner manner additional interpretation required behalf user measure 
consequence development consistent understandable meaningful software quality predictors severely hampered 
example churcher shepperd cs hitz hm identified ambiguities members referenced object oriented metrics suite chidamber kemerer ck 
remedy situation necessary reach consensus terminology define formalism expressing software measures importantly terminology formalism 
course level detail scope terminology formalism required subject goal achieved 
rigorously thoroughly perform review structured synthesis software coupling measures seek define terminology formalism implementation independent extended necessary 
allow existing expressed consistent understandable meaningful manner allow measures reviewed expressed operationally defined additional interpretation ambiguous measures required 
disadvantage approach reader formalism review meaningful fashion 
motivation approach argued method facilitate rigorous thorough review 
prevent reader having read complete terminology list provided glossary appendix includes definitions applicable coupling object oriented systems measurement general 
referenced required 
appropriate terminology defined churcher shepperd cs 
express coupling measures consistently unambiguously formalism set graph theory 
note sake brevity assume reader familiar common object oriented principles needs explanation 
readers familiar simple explanations means examples provided appendix system definition system classes inheritance relationships object oriented system consists set classes exist inheritance relationships classes class set parent classes class 
note includes variations measure versions rfc response class measure originally proposed chidamber kemerer ck 
parents isern set children classes class set ancestor classes class set descendent classes class methods class set methods 
definition methods class class set methods class method virtual non virtual inherited overridden newly defined implications measuring coupling 
necessary express difference categories 
definition declared implemented methods class set methods declared methods inherits override virtual methods set methods implemented methods inherits overrides non inherited methods definition inherited overriding new methods class set inherited methods set overriding methods set non inherited non overriding methods notational convenience define set methods system 
definition set methods set methods system represented methods set parameters influence coupling measurement defined 
definition parameters method par set parameters method method invocations measure coupling class necessary define set methods invokes frequency invocations 
method invocations static dynamic necessary distinguish 
consequently method sets defined 
definition sim set statically invoked methods body method invocation invoked object static type class definition number static invocations number method invocations invoked object static type class definition pim set polymorphically invoked methods body children ancestors descendents inh new sim sim pim isern method invocation may polymorphism invoked object dynamic type definition npi number polymorphic invocations npi number method invocations invoked object dynamic type class result polymorphism method invocation contribute npi count methods 
attributes classes attributes inherited newly defined 
attributes modelled similar formalism methods 
definition declared implemented attributes class set attributes class set attributes declared class inherited attributes 
set attributes implemented class non inherited attributes 
notational convenience define set attributes system 
definition set attributes set attributes system represented attribute methods may attributes 
sufficient consider static type object attribute referenced attribute determined dynamically 
discussion measures possible express method set attributes referenced method definition ar ar set attributes referenced method types attributes parameters types contribute coupling 
programming language provides basic set built types user define new class types traditional types records enumerations definition basic types user defined types bt set built types provided programming language integer real character string 
set user defined types global scope records enumerations 
type attribute parameter class built type user defined type 
set available types system defined follows definition set available types set available types system definition determines type attributes parameters denoted 
definition types attributes parameters attribute type attribute denoted method parameter type parameter denoted distinction pointers arrays type derived 
pim bt par isern predicates ensure consistency predicate uses defined 
definition uses class uses class method implemented class method attribute implemented class specific extensions class declare class friend means granted access non public elements able specify class friends class classes declare class friend influence strength coupling classes 
definition friends class define set friend classes class set inverse friends set classes declare friend defined hybrid languages provide features procedural paradigm possible take pointer method pass pointer method 
formalism able express 
definition passing pointers methods methods define number invocations pointer passed parameter 
method invocations located body method system methods classes defined 
notation formalism defined mechanism available express existing coupling frameworks measures consistent precise manner 
survey coupling measurement frameworks measures section perform comprehensive survey critical review existing frameworks measures coupling object oriented systems 
section organized follows 
section existing frameworks coupling 
frameworks discussed compared section 
section survey review includes theoretical validation existing coupling measures takes place 
existing frameworks coupling frameworks coupling object oriented systems proposed eder eks hitz hm briand bdm 
framework different types class method object coupling identified 
framework eder eks eder definition coupling provided stevens smc 
authors identify types relationships interaction relationships methods 
type relationship caused message passing 
component relationships 
object unique identifier object identity 
object may object identifier object introduces component relationship classes inheritance relationships classes 
relationships dimensions coupling derived 
uses pim ar friends friends friends pp isern 
interaction coupling methods interaction coupled method invokes communicate sharing data 
interaction coupling method implemented class method implemented class contributes interaction coupling classes 
component coupling classes component coupled type attribute input output parameter method local variable method input output parameter method invoked method 
inheritance coupling classes inheritance coupled class ancestor 
dimension coupling authors identify different strengths coupling listed strongest weakest 
interaction coupling definition interaction coupling similar original definition coupling 
eder types coupling proposed myers mye adapt object oriented systems see appendix short summary myers types coupling 
content method accesses implementation 
implementation means non public part class interface 
instance method may declared friend class method invoke private methods class access implementation constitutes breach information hiding principle considered worst type coupling 
common methods communicate unstructured global shared data space 
authors give example unstructured global shared data space object oriented languages support 
apparently type coupling listed order consistent myers categories 
external methods communicate structured global shared data space public attribute class 
eder find violation locality principle software design specifying mean 
control methods communicate parameter passing called method controls internal logic calling method 
instance called method may determine execution calling method 
change implementation called method affect calling method change dependencies stamp methods communicate parameter passing called method need data receives 
constitutes avoidable dependency methods 
data structure parameter method changed possible effects change method considered 
parameter unused change parameter data structure effects 
effort spent discover change effects saved avoiding stamp coupling 
data methods communicate parameter passing called method needs data receives 
best type coupling coupling minimizes change dependencies 
direct coupling direct interaction coupling methods occurs 
eder consider direct interaction coupling methods 
definition expanded indirect interaction coupling transitive method invocations 
component coupling degrees component coupling classes listed strongest weakest 
hidden component coupling manifest code 
instance class contains cascaded method invocation type object returned need explicit interface body class interface class object returned method 
order detect occurrences hidden coupling class involved look interfaces classes 
scattered component coupling manifests body class cases definition 
consequently body class searched order detect occurrences type coupling 
isern specified component coupling manifests interface cases 
sufficient search interface class occurrences type coupling 
nil component coupling 
inheritance coupling degrees inheritance coupling listed strongest weakest 
modification inheriting class changes inherited method manner violates predefined practice rules 
eder provide examples rules signature inherited method may changed replacing type parameter say class descendent class inherited method deleted class interface method overridden overriding method keep semantics overridden method 
predefined rules applied certain extent depend design methodology programming language obvious rules subjective easily measured automatically 
modification coupling strongest type inheritance coupling information inherited parent class modified deleted manner justified context inheritance 
types modification coupling exist 

signature modification implementation inherited method changed signature method changed 

implementation modification implementation inherited method changed 
degree coupling weaker previous type signature method changed 
refinement inheriting class changes inherited method change adhering predefined practice rules 
refinement coupling weaker modification coupling inherited information changed predefined rules 
problems occur result refinement coupling changes signature inherited method restrict polymorphism intended semantics method changed 
modification coupling exist different types refinement coupling 

signature refinement implementation inherited method changed signature method changed 

implementation refinement implementation inherited method changed 
degree coupling weaker previous type signature method changed 
extension inheriting class changes signature body inherited method new methods attributes added 
nil inheritance relationship classes 
framework hitz hm hitz approach coupling defining state object value attributes moment run time state object implementation class interface body time development cycle 
definitions derive levels coupling class level coupling clc clc represents coupling resulting implementation dependencies classes system development lifecycle 
object level coupling olc olc represents coupling resulting state dependencies objects run time system 
hitz clc important considering maintenance change dependencies changes server class may lead changes client classes 
authors state olc relevant run time oriented activities testing debugging 
levels coupling authors identify series factors determining strength coupling 

class level coupling 
clc occur method class invokes method attribute class 
cc accessing class client class sc accessed class server class 
factors determining strength clc cc sc stability sc isern sc stable interface body sc changed instance due changing requirements 
typically basic types provided programming language classes imported standard libraries stable 
sc unstable class depending unstable server class considered worse depending stable class change sc means potential change cc 
typically problem domain classes unstable 
cases considered 

body sc changed 

interface sc may modified 
case considered harmful modification 
type access access interface cc invokes method sc 
access implementation cc attribute sc 
access implementation considered stronger coupling constitutes violation information hiding principle 
scope access determines sc visible definition cc 
scope change sc may impact cc 
larger scope stronger classes coupled 
authors identify cases separated categories sc may occur method cc ii sc occur particular method cc clear 
category comprises cases sc type attribute cc 
sc ancestor cc 
sc type global variable 
category ii comprises cases sc type local variable method cc 
sc type parameter method cc 

object level coupling 
discussion olc object level coupling sc object type sc cc object type cc 
factors influence strength coupling objects sc cc type access cc accesses interface sc cc accesses implementation sc distinction implications strengths coupling clc 
scope access smaller scope access weaker coupling objects 
cc able access sc contribute olc object sc listed increasing size scope 
parameter method cc 
non native part cc sc object inherited superclass cc encapsulated aggregation cc local variable cc methods 
global object 
complexity interface case cc sends message sc number parameters invoked method considered 
parameters passed stronger coupling objects 
framework briand bdm earlier approach bmb bmb measure coupling object systems implemented ada adapted expanding include inheritance friendship relations classes 
contrast previous frameworks framework focuses solely coupling relationships available high level design phase 
motivation decision eliminating design flaws errors early propagate subsequent phases save substantial amounts money 
result decision focus early design information framework concentrates coupling caused interactions occur classes 
different facets identified determine kind interaction 
type interaction determines mechanism classes coupled 
different types interaction specified determine particular type accurately indicates fault likelihood 
class attribute interaction class attribute interaction classes class type attribute class aggregation occurs 
isern class method interaction method class class method interaction classes class type parameter method class return type method method method interaction method class method class interaction classes directly invokes receives parameter pointer invoking indirectly 

relationship classes basic relationships inheritance class ancestor class vice versa 
category specified inheritance apparently contradicts notion minimizing coupling considered separately 
coad yourdon proposed design principle recommends high coupling class parents low coupling classes related inheritance cy cy 
friendship class declares class friend class access non public elements category specified breaks encapsulation violates information hiding principle 
inheritance friendship relationship classes 
locus locus impact interaction 
class involved interaction class distinction export class server class interaction import class client class interaction 
motivation distinction investigate direction important predicting fault proneness class 
definition framework briand deliberately assign strengths different kinds interactions propose 
authors state strengths derived empirical validation define measures interval ratio scale 
briand pose hypotheses regarding facets coupling investigate empirically respect prediction fault prone classes see section discussion 
discussion comparison frameworks precise comparison frameworks shows differences manner coupling addressed 
reason different objectives frameworks 
example briand examined early design information investigate potential early quality indicators authors investigated information mainly available low level design implementation differences mechanisms constitute coupling 
second reason issues dealt set authors considered subjective difficult measure automatically 
example stability individual class addressed hitz easily determined say problem domain classes classified unstable 
subsections discuss detail significant differences frameworks learned differences 
mechanisms constitute coupling table mechanisms constitute coupling frameworks 
row represents mechanism indicates mechanism covered framework respective column 
mechanisms numbered purposes 
little overlapping frameworks method invocation mechanism common frameworks 
mechanisms common frameworks briand eder mechanisms unique frameworks 
mechanism inheritance different nature mechanisms 
classes connected mechanisms actual client server relationship classes class isern uses 
classes connected mechanism class ancestor probably need client server relationship classes 
clientserver relationship inter dependencies entails necessarily exist 
coupling mechanisms differ development phase applicable 
instance attribute method invocations mechanisms completely known implementation 
contrast aggregation visible class interface typically available implementation starts 
coupling mechanisms applicable early development process particularly interesting 
instance help identifying fault prone classes information select classes undergo formal verification allocate best people fault prone parts design select optimal design series design alternatives implemented 
development phase detailed description system development detailed analysis coupling 
strength coupling strength coupling classes determined aspects frequency connections classes types connections classes 
aspect count frequency connections classes ultimately resolved defining measures 
aspect addressed framework probably information required decision available source code developed 
section definitions various proposed coupling measures compared shown number different ways count frequency connections classes 
different types coupling different strengths 
eder hitz assign strengths types coupling identified defining partial order set coupling types frameworks 
types connections framework define stronger equal strength strengths comparable 
important note definition partial order degree subjective requires empirical validation 
furthermore validity order clearly depend concrete measurement goal different measurement goals require different partial orders 
instance assuming regression testing means structural testing control flow analysis performed wish estimate effort test class amount import coupling class 
interested method invocations influences flow control 
interested attributes impact flow control 
mechanism eder eks hitz hm briand bdm methods share data public attributes method attribute method invokes method method receives pointer method class type class attribute aggregation class type method parameter return type class type method local variable class type parameter method invoked method class ancestor class table comparison mechanisms constitute coupling isern hand want characterize understandability class import coupling direct attributes equally important method invocations 
briand define set measures count interaction type framework number interactions class classes 
empirical validation conducted evaluate potential identifying fault prone classes see section discussion 
strengths empirically assigned different types coupling 
direction coupling framework briand explicitly distinguishes import export coupling 
consider classes coupled mechanisms mentioned 
introduces client server relationship classes client class uses imports services server class exports services 
distinction important 
class mainly imports services may difficult reuse context depends classes 
hand defects class mainly exports services particularly critical may propagate easily parts system difficult isolate 
conclude direction coupling measured directly influences possible goals measurement 
methods coupled common external coupling framework eder distinction client server methods clients 
note pure object oriented languages occur 
global data space variable type class class considered server 
direct indirect coupling eder derive indirect interaction relationships methods direct interaction relationships transitive closure direct interaction relationships 
idea applied kinds coupling 
class uses class turn uses class class indirectly coupled defect modification class may affect directly coupled class indirectly coupled class extreme case consider circular chain coupled classes class uses class class uses 
class directly coupled classes import export coupling 
class chain indirectly uses class 
briand framework described bmb 
bmb high level design measures coupling cohesion object systems defined validated respect potential identifying fault prone modules 
coupling measures included measures direct indirect coupling 
measures direct coupling useful predictors indirect coupling 
bdm briand include distinction direct indirect coupling framework framework primarily defined derive coupling measures identification classes 
stability server class point unique framework hitz 
stable class better unstable class modifications ripple system occur 
stability server class instance distinguish classes imported standard libraries usually modified stable problem domain classes unstable 
note stability server class subjective concept difficult measure automatically manner suggested 
inheritance aspect unique object oriented systems inheritance influences coupling 
aspect addressed detail eder briand discussion consider case method class invokes method 
question invoking invoked method declared implemented classes affect coupling classes 
isern consider example 
points worth noting method invokes method invoking method contributes import coupling class classes 
invoking method inherited 
method mc class invokes md 
method mc inherited class 
contribute coupling classes 
inherited method overridden case mc 
eder state coupling classes requires invoking method implemented client class 
applied example follows mc declared contribute coupling mc implemented 
agree inherited method contribute import coupling inheriting class invocation inherited method 
instance mc invokes mc implemented 
authors frameworks discussed find invoking inherited method special 
contributes coupling distinguished invoking method unrelated class 
type coupling commonly referred inheritance inheritance related coupling 
due polymorphism method invocation access variety methods implemented different classes 
consider method mc invoking md 
clearly contributes coupling 
dynamic type object pointed may descendent class 
mc contribute coupling 
eder state interaction coupling requires invoked method implemented server class 
applied example method mc class contributes coupling 
couple class method md declared class 
rationale decision framework eder possible relationships possible dependencies methods accounted 
discussed case class invokes method inherited parent class 
consider case client server classes related inheritance 
client class invoke method server class inherited 
instance method mc class invokes method md 
class inherited md 
contribute coupling 
method mc invoking method md 
class inherits overrides method md 
apply principle eder invoked method implemented server class 
follows invocation md contributes coupling md implemented 
invocation md contributes coupling md declared implemented 
class public void mc void mc void mc md void mc md class public public void mc redefined void mc void mc md void mc mc md md class public virtual void md virtual void md void md 
void md 
class public public void md override void md void md 
void md 
class public public void md void md 

example inheritance hierarchy isern summary summarize coupling object oriented systems noted different types coupling classes methods attributes classes methods coupled strongly depending 
type connections 
frequency connections distinction import export coupling client server relationships direct indirect coupling may relevant server class stable unstable effect inheritance coupling considered 
list see exists variety decisions definition coupling measure 
important decisions intended application measure measure useful 
decision particular aspect alternatives investigated 
second observation different aspects coupling independent large number coupling measures defined defines problem space coupling object oriented systems 
section review object oriented coupling measures software engineering literature 
discussion existing measures address different aspects coupling takes place insight provided complete problem space coupling covered measures 
survey coupling measures survey coupling measures organised follows 
section introduces criteria comparing measures 
summary existing measures criteria provided section drawn state art 
sections discuss existing coupling measures address issues highlighted section 
section presents theoretical validation coupling measures summarises results section 
criteria comparison section provide list criteria required allow initial comparison measures performed define different levels criterion 
criteria form basic structure summary table 
name name measure 
definition definition measure defined formalism 
original definition measures ambiguous additional interpretation required define formalism 
provide necessary unambiguous alternative cases plausible versions measure proposed 
operationally defined indicates original definition measure operational additional interpretation measure original definition necessary come definition measure column definition 
objectivity subjective objective objective measure collected measurement data depend person collecting data measure automatable 
subjective measure measurement data depends person collecting measure automatable 
level measurement nominal ordinal interval ratio type scale measure defined 
type scale determined admissible transformations empirical relation system fen 
empirical relation system attribute rarely provided 
provided indicated scale type reflects intuitive judgment 
partially usable hld lld imp column column usable address question development process measures applicable 
purpose generic object oriented development process consisting development phases analysis high level design low level design implementation 
details development phases appendix measure classed partially usable development phase information required isern data collection available phase subject refinement development phases 
column states earliest development phase measure partially usable 
measurement values obtained development phase measure partially usable approximations values change subsequent development phases 
usable hld lld imp measure usable development phase information required data collection available stable information refined limited extent subsequent development phases 
state earliest development phase measure usable 
language specific measure specific particular programming language language provided 
measure language specific imply measure applicable languages adapting measure necessary applied languages 
validation th emp indicates measure validated 
distinction theoretical validation th authors validated measure theoretically usually analyzing mathematical properties 
analysis results publication referenced source column see item list 
empirical validation emp measure empirical validation investigating causal relationship external attribute class subsystem system 
measures validation results discussed section 
source literature measure proposed 
overview measures overview coupling measures proposed literature table 
discussing individual measures detail number simple important observations 
measure table classified usable analysis hld phases 
measures classified partially usable analysis hld approximations values obtained lld implementation computed 
empirical studies required analyse accurate approximations useful predictors external attributes 
second original definitions measures fully operational additional interpretation required formalise measures 
best illustrated example martin proposes coupling measures ca afferent coupling ce efferent coupling term category set classes achieve common goal mar 
measures ce ca defined ca category number classes outside category depend classes category ce category number classes inside category depend classes outside category 
martin specify causes dependencies classes formal definitions ce ca impossible provide 
extreme case underlying concepts interesting measure consistent practice measures usable additional interpretation 
highlights importance precise framework definition new measures 
third measures validated theoretically importantly empirically 
consequently little evidence exists support notion coupling measures useful terms predicting relevant qualities 
strengthen software measurement research convince practitioners usefulness software measures larger number validation studies performed 
isern operational definition objectivity scale partly usable usable validation source sim ancestors uses pim ss isern operational definition objectivity scale partly usable usable validation source anc ss ancestors ss friends friends friends descendents isern operational definition objectivity scale partly usable usable validation source friends friends descendents friends friends ancestors isern operational definition objectivity scale partly usable usable validation source pp friends new friends new ancestors new types coupling note measures table method invocations attributes 
versions rfc mpc icp family lee solely method invocations 
method method interaction measures count method invocations plus occurrences method passed pointer method 
measures cbo cof include methods attributes 
dac dac class attribute interaction measures measures take account aggregation classified component coupling framework eder class method interaction measures metrics suite briand measure component coupling 
measures count occurrences parameter method class type 
comparison types coupling measures table introduced coupling frameworks table shows types coupling measures framework 
contrast types coupling table measures defined type method class local variable class type method class invokes method passing object type class 
types coupling may interesting typically available implementation 
types coupling object oriented systems considered empirical studies required investigate usefulness types 
strength coupling section examine different measures account different strengths coupling 
examine measures deal frequency coupling connections 
measures cbo cof distinguish method invocations attribute types coupling treated 
method method interaction measures briand distinguish method invocation passing pointer method parameter method invoke 
measures focus type coupling 
incorporating type coupling single measure may questionable needs clearly justified requires relative strengths assigned different types coupling consideration measures just mentioned treat different types connections 
assignment subjective empirical validation difficult 
questions arise type coupling contributed measurement values 
answer questions types coupling measured separately 
clear justification strongly recommended combine different types coupling 
addition assignment relative strengths coupling depend measurement goal environmental factors design methodology programming language 
assigning strengths various types coupling part prediction model external attribute model predicts class different types coupling part definition measure 
connection generic term defined occurrence type coupling method invocation attribute having class type 
measures cbo cof take binary approach coupling classes classes coupled number class couples counted 
approach information available 
instance measure cbo proposed chidamber kemerer indicator maintainability testability reusability class ck 
maintainability testability class influenced frequency connections coupled classes number classes coupled 
example class loosely coupled connections classes may easier maintain test class strongly coupled connections classes 
measures include individual connections classes 
rfc counts number methods invoked class 
mpc method method interaction measures briand count number method invocations 
icp measures take number parameters passed method account framework hitz factor complexity interface object level coupling 
dac measures class attribute class method interaction briand count number attributes parameters having class type 
dac counts number classes type attribute 
isern important difference number methods invoked number method invocations 
method invoked invocation counted separately distorted value measure arise 
consider extreme cases class invokes method times 
class invokes different methods different classes 
mpc measure measures counting method invocations mpc mpc 
reality coupling class considered worse coupled different classes coupled 
similar distorted values arise attributes 
contrast measure dac counts number attributes having class type dac counts number classes types attributes 
class attributes type class dac dac 
point concluded ways take account frequencies connections classes 
strengths weaknesses justified empirical relational system 
right way count frequencies connections 
count decided respect measurement goal 
import export coupling cbo distinction import export coupling classes coupled uses vice versa 
cof distinguishes cases class uses class class uses class case classes relationships counted separately 
suite briand provides separate measures import export coupling 
measures consider import coupling role class client 
direct indirect coupling coupling measures consider direct coupling 
rfc number methods possibly invoked sending message class includes methods methods invoked methods methods turn invoke 
sense indirect coupling accounted 
rfc counts nested method invocations specified level easily derive new measures account indirect coupling measures appears sensible 
direct coupling describes relation set elements relation invokes set methods system relation uses set classes system 
account indirect coupling need transitive closure relation 
stability server class aspect addressed proposed coupling measures 
possible application distinguish coupling problem domain classes import coupling classes taken standard libraries classes subject development change ongoing project 
pragmatic method identifying stability server classes defining new measures existing import coupling measure measure class import coupling problem domain classes library classes separately 
determined extent class relies problem domain classes library classes 
inheritance distinction inheritance non inheritance coupling frequently literature 
inheritance coupling refers coupling class ancestors 
non inheritance coupling coupling classes inheritance relationship 
instance design principle coad yourdon suggests maximise inheritance coupling minimise non coupling cy cy 
excluding inheritance coupling corresponds point view isern inheriting class attributes methods inherited inherited method attribute equivalent coupling class 
including inheritance coupling corresponds point view inheriting class inherited attributes methods 
view supported fact programming languages restrict access inherited methods attributes private methods attributes class children classes 
empirical studies required realise inheritance non inheritance coupling distinguished 
conceivable relative importance types coupling depends respective measurement goal empirically justified situation may apply situations 
cbo measures non inheritance coupling ck cbo explicitly includes coupling due inheritance ck 
chidamber kemerer explain excluded inheritance coupling introduced 
similarly definition cof excludes inheritance coupling explanation age 
lee acknowledge need differentiate inheritance non inheritance coupling proposing corresponding measures nih icp counts non inheritance coupling ih icp counts inheritance coupling 
icp sum ih icp nih icp treats types coupling equal 
suite measures briand provides measures count inheritance non inheritance coupling separately 
lee define single measure counts types coupling cf 
discussion types coupling 
measures address inheritance 
definitions measures ambiguous marked operationally defined table 
measures inheritance issues introduced section account polymorphism overriding methods virtual methods considered original definitions 
eks publication aware describes issues detail 
lee emphasize icp measures method invocations take polymorphism account 
measures aim measuring amount information flow methods 
information flow occurs method method possibly invoked includes methods measures method method interaction briand counts static method invocations bdm 
theoretical validation section theoretically validate coupling measures table respect coupling properties defined briand bmb 
motivation defining properties measure supported underlying theory usefulness measure questionable 
coupling properties defined briand proposals characterize coupling reasonably intuitive manner 
properties sufficient say measure fulfils useful reverse statement true 
coupling properties originally defined generic mathematical framework model software system 
purpose validating coupling measures object oriented systems adapt framework model object oriented system defined formalism section 
discussion coupling candidate measure coupling class object oriented system 
relationships capture connections classes respective coupling measure focused 
coupling measure measure import export coupling denote relevant set relationships class 
define set inter class relationships system proposed coupling properties coupling nonnegativity 
coupling class object oriented system nonnegative pim coupling coupling isern coupling null value 
coupling class object oriented system null empty coupling monotonicity 
object oriented system class modify class form new class identical added relationships object oriented system identical class replaced class coupling merging classes 
object oriented system classes class union object oriented system identical classes replaced coupling merging unconnected classes 
object oriented system classes class union object oriented system identical classes replaced relationships exist classes coupling specifies relationship added system coupling decrease 
coupling specifies merging classes increase coupling relationships disappear classes merged 
coupling specifies merging unconnected classes affect coupling 
discuss measures violate coupling properties 
rfc special cases rfc rfc null value coupling class methods invoke methods rfc 
measures dac dac null value 
class attribute type class realistically attribute type pointer class dac dac 
cof violates coupling coupling consider example systems 
boxes classes arrow class class indicates class uses class system cof 
system classes merged form new class cof cof cof 
coupling coupling violated 
due fact cof normalized range 
coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling coupling system system 
counterexample cof class class class class class isern cbo cbo fulfil coupling 
consider example system 
semantics symbols 
system cbo cbo 
system classes merged form new class cbo coupling violated 
measure dac fulfil coupling 
see reinterpret meaning arrows arrow class class indicates class attributes type class dac dac system dac system coupling violated 
measure dac fulfils coupling 
dac dac dac measure counts number attributes having class type 
likewise rfc rfc rfc violate coupling 
consider example 
rfc rfc class method invokes method rfc rfc yield values 
merge classes form new class get rfc class methods calls method 
pattern visible concerning violations property coupling 
measures cbo cbo rfc measures dac common multiple connections method class counted 
unconnected classes third class common merge classes form new class previously connections class counted connection new class class result coupling new class lower sum coupling classes property coupling holds measures count individual connections 
icp information flow measures fulfil coupling properties show special behaviour 
measure amount information flowing class parameters method invocation measures sum number parameters plus passed method invocation 
consequently invoking say methods parameters contributes class coupling invoking methods parameters invoking method parameters 
implies special empirical model weighting method invocations number parameters passed investigated empirically 
table summarizes results section 
measure indicate type coupling uses factors determine strength coupling import export coupling measure indirect coupling accounted inheritance dealt inheritance coupling non inheritance coupling 
columns show violations coupling properties coupling coupling 
indicates violation properties coupling coupling fulfilled measures listed table 
system system 
counterexample cbo class class class class class class class class class class int class obj mc obj class obj md obj 
counterexample rfc isern isern unified framework coupling measurement section new framework coupling object oriented systems proposed 
framework defined basis issues identified comparing coupling frameworks see section discussion existing measures respect issues see sections 
objective unified framework support comparison selection existing coupling measures respect particular measurement goal 
addition framework provide guidelines support definition new measures respect particular measurement goal existing measures available 
framework intended ensure measure definitions explicit decisions understood properties ensure relevant alternatives considered decision highlight dimensions coupling measures defined 
framework consists criteria criterion determining basic aspect resulting measure 
describe criterion decisions available options criterion reflected coupling measures section 
discuss framework derive coupling measures 
criterion choose available options strongly influenced stated measurement goal 
provide set guidelines measurement goal influences choice 
criteria framework 
type connection constitutes coupling 

locus impact import export coupling 

granularity measure domain measure count coupling connections 

stability server 

direct indirect coupling 

inheritance inheritance vs non inheritance coupling account polymorphism assign attributes methods classes 
criteria necessary consider specifying coupling measure 
sufficient aspects properties measures proposed bmb results empirical validation studies considered 
influence aspects addressed 
describe criteria order 
framework criteria type connection choosing type connection implies choosing mechanism constitutes coupling classes 
table summarizes possible types connections links client server item attribute method class reviewed measures 
items listed columns client item server item 
column description explains type connection 
column design phase indicates design phase type connection typically applicable 
numbers column types connections 
column measures lists type connection coupling measures type connection 
isern locus impact decided count import export coupling import coupling analyses attributes methods classes role clients users attributes methods classes 
export coupling analyses attributes methods classes role servers attributes methods classes 
table shows coupling measures import coupling measures export coupling measures 
granularity granularity measure level detail information gathered 
granularity measure determined factors domain measure components measured exactly connections counted 
domain measure table shows possible domains coupling measures measures section domain 
course measures smaller domains class level easily extended larger domains sets classes system level 
client item server item description design phase measures attribute class class class type hld dac dac method class class class type parameter return type hld method class class class type local variable lld method class class class type parameter method invoked lld method class attribute class hld cbo cbo cof method class method class invokes hld cbo cbo rfc rfc rfc mpc cof icp nih icp ih icp class class high level relationships classes uses consists table types connection direction measures import cbo cbo rfc rfc rfc mpc dac dac cof icp ih icp nih icp export cbo cbo cof table import export coupling measures isern count connections decision count connections 
available options decision restricted domain measure 
measures defined method attribute level options listed table 
column provides number purposes description explains option 
columns import coupling example export coupling example illustrate options example attributes methods connection type 
difference options multiple connections items counted separately option counted option 
class level options count connections domain measures attribute method icp ih icp nih icp class cbo cbo rfc rfc rfc mpc dac dac icp ih icp nih icp set classes icp ih icp nih icp system cof table mapping measures domains description import coupling example export coupling example count individual connections method number attributes attribute number attribute count number distinct items connections method number attributes referenced attribute number methods attribute table options counting connections attribute method level description import coupling example export coupling example add number connections counted method attribute class total number attribute methods class total number attributes class add numbers connections counted method attribute class add number attributes referenced method class add attribute class number methods attribute count number distinct items connections starting methods attributes class number attributes referenced methods class number methods referencing attributes class class count number classes connection number classes attribute referenced method class number classes method attribute class table options counting connections class level isern difference options instance methods class attribute counted separately method counted class 
table phrases methods class attributes class 
imprecise specified method attribute declared implemented class order belong 
issue discussed criterion inheritance 
measures defined sets classes system constructed adding number connections relevant classes counted options 
option produces measures finest grain option produces measures coarsest grain 
table shows coupling measures count frequencies connections 
stability server discussion criterion different categories class stability defined unstable classes classes subject development modification project hand 
unstable classes problem domain classes developed exclusively system adapted systems reuse modification stable classes classes subject change project hand 
stable classes classes imported libraries classes reused verbatim systems 
class server class unstable different stable server class 
unstable server class modified may require class modified 
modification turn may trigger modifications 
stable server class subject modification trigger avalanche changes cascade system 
categorizations conceivable verbatim reused classes classes changes expected classes changes expected 
suggest categorization scheme decision category class belongs automatically 
resulting coupling measures may longer automatically 
categorization basically options distinguish stability server class 
summarized table 
class stability addressed definition reviewed measures 
words measures distinction stability server class option iii 
direct indirect connections decide count direct connections indirect connections 
example method invokes method turn invokes method say indirectly invokes methods indirectly connected 
rfc rfc measures take indirect connections account 
measures count direct connections 
option measures icp ih icp nih icp mpc dac icp ih icp nih icp dac rfc rfc rfc cbo cbo cof table mapping measures options counting frequency connections isern inheritance aspects need considered respect inheritance need distinguish inheritance coupling non inheritance coupling 
assign methods attributes classes 
method invocations shall consider static polymorphic invocations 
aspects dealt order listed 
inheritance vs non inheritance coupling decide count inheritance coupling non inheritance coupling 
inheritance coupling analyses connections classes related inheritance 
likewise coupling refers connections classes related inheritance 
options dealing inheritance described table 
column measures list measures section conforms respective option 
measures option iii single measure count inheritance coupling separately option iii 
implement option pairs measures needed measure pair conforms option option ii instance ih icp nih icp 
polymorphism question deal polymorphism 
relevant method invocations connections type 
options account polymorphism method count connections methods account polymorphism method count connections methods 
option description take connections unstable classes account count connections stable classes 
ii take connections stable classes account 
iii take connections account regardless stability class distinguish stability 
iv count separately connections stable unstable classes 
results sets measures 
example class level coupling values class 
table options account stability server class option description measures count inheritance coupling ih icp ii count non inheritance coupling cbo cof nih icp iii count inheritance non coupling separately iv count inheritance non coupling making distinction cbo rfc rfc rfc mpc dac dac icp table options inheritance coupling pim sim isern table shows measures section account polymorphism 
measures concerned method invocations considered 
assign methods attributes classes final question decide class attribute method belongs 
decide inherited methods attributes belong inheriting class 
distinguish cases compute coupling class determine methods attributes class contribute coupling class 
available options methods attributes implemented class contribute coupling class methods attributes implemented declared class contribute coupling class count frequency connections option class count number classes connected cf 
criterion assign items ends connections class 
available options depend counting import export coupling summarized table 
measures defined section methods attributes implemented class contribute coupling class 
application framework apply framework select existing measures derive new measures measurement goal 
application performed steps criterion framework choose available options basing decision objective measurement 
criteria dealt order introduced section explained decision criterion restrict available options subsequent criteria 
choose existing measures accordingly exist match decisions construct new coupling measures 
remember properties section guide definition theoretical validation new measures 
context applying framework measurement goal specify development phase measurement take place 
underlying hypothesis drives measurement 
hypothesis form internal attribute coupling measured coupling measures defined causal effect external quality attribute 
external attribute maintainability reliability discussed bem believe product measures matter defined guaranteed capture relevant phenomenon regarding quality system study 
shown empirically related external system quality attribute interest 
words crucial provide evidence relevant quality indicators order relied 
type measure account polymorphism cbo cbo rfc rfc rfc cof account polymorphism mpc icp nih icp ih icp table mapping measures options accounting polymorphism import coupling export coupling assign server item class es implemented may classes account polymorphism 
assign client item class implemented 
assign server item class 
table options assign methods attributes class isern recommended define measures external attribute hypothesis apply framework derive coupling measures 
having operational definition external quality attribute may help processes choosing appropriate coupling measures 
discuss criterion external attribute target development phase measurement goal influences choice available options applicable aspects may impact choice 
illustrate process constructing appropriate coupling measure means example 
type connection influence development phase selection types clearly influenced development phase measure aimed 
confined types connections applicable target development phase 
table indicated type connection development phase applicable 
influence external attribute difficult provide guidelines external attribute affects choice available types connections 
obvious guidelines provide little practical experience gathered report see section 
exact definition external attribute gives clue types connections relevant 
recommend choose types connections conduct statistical analyses investigate types connections relevant support empirically underlying hypothesis measurement goal 
additional remarks different types connections different strengths 
instance information hiding principles referencing attribute class worse stronger invoking method class 
recommend incorporate type connection single measure 
separate measures type connection 
exceptions rule may justified underlying hypothesis measurement goal require different types connections differentiated measure coarse cf 
criterion granularity 
come back issue description criterion 
locus impact influence development phase 
influence external attribute high import coupling class indicates class depends strongly classes methods attributes 
import coupling may relevant conjunction external attributes understandability understand method class know services class uses 
error proneness similar reasons understandability incorrectly external service misunderstand introduce errors 
maintainability low understandability high error proneness result low maintainability 
reusability class depends large large amount external services difficult reuse systems external services available systems 
high export coupling class means class lot classes methods attributes 
export coupling may relevant conjunction external attributes criticality defects class high export coupling propagate parts system 
defects difficult isolate 
respect classes high export coupling particularly critical 
export coupling measure select classes undergo special effective costly verification validation processes 
isern testability classes high export coupling difficult test 
defects need propagate parts system cause failures may detected testing class isolation 
granularity domain measure finest possible domain measure determined criteria evident table client server item chosen type connection 
example decide measure import coupling connections type methods attributes finest possible domain measure method see row column client item method count attributes referenced method 
likewise decide measure export coupling connections type aggregation finest possible domain measure class class classes type attribute 
influence development phase development phase influences choice domain indirectly determines finest possible domain measure 
explained finest possible domain determined criteria 
target development phase main decisive factor criterion 
target development phase indirect influence domain measure 
influence external attribute similar development phase external attribute indirect influence choice domain 
finest possible domain part determined criterion external attribute main decisive factor 
measurement goals may want choose coarser domain measure finest possible 
instance measurement goal characterize understandability reusability class measure defined class level appropriate 
accomplished account connections starting methods attributes class 
similarly measures defined sets classes system constructed account connections starting methods attributes relevant classes 
icp family measures section provides example measure defined method level icp scaled class level icp set classes level icp ss see table 
count connections criterion options yields finest measures yields coarsest measures see table 
influence development phase precise stable information connections coarser measure 
information actual connections detailed design phase aim may count individual connections 
information detailed change may want coarser measure 
generally speaking design process application measure precise stable available information finer measure 
commonly design methods recommendation options analysis high level design options low level design implementation 
influence external attribute cases may need coarser grain measures 
example assume want characterize understandability class source code available 
hypothesis methods invoked classes lower understandability 
test hypothesis count methods class option source code available hypothesis number methods decisive understandability methods 
additional remarks isern coarser measure says actual strength connections classes 
single coarse measure just take account types connections different types connections different strengths mixing types acceptable coarse measures options strength connections accounted measure 
section cbo cof examples coarse measures option take type connection account 
demonstrated theoretical validation measures section measures count multiple connections items fulfil property coupling 
options count frequency connections manner 
options want measures fulfil property coupling 
stability server influence development phase 
influence external attribute list option examples illustrating may appropriate 
option count connections unstable classes measuring reusability 
typically library classes easy reuse 
import coupling library classes may neglected 
option ii count connections stable classes change impact analysis libraries replaced possibly efficient libraries 
import coupling old libraries indicator effort required update system new libraries 
option iii distinction stable unstable classes analyzing understandability 
hypothesis understandability influenced number services 
matter server classes stable 
additional assumption needed stable unstable classes equally known 
option iv count separately connections stable unstable classes analyzing maintainability 
hypothesis maintainability influenced dependencies stable unstable classes dependencies unstable classes weigh heavier 
verify hypothesis coupling stable unstable classes measured separately 
direct indirect connections influence development phase 
influence external attribute indirect connections relevant estimating effort run time activities testing debugging estimate impact modification class system modification may necessitate modifications classes directly indirectly connected class ripple effects 
indirect connections may relevant reusability class reused system classes coupled provided system classes required coupled classes 
direct connections sufficient analysis understandability understand class need know functionality services directly class 
need know services implemented services services need true services documented 
inheritance options inheritance considered 
isern inheritance vs non inheritance coupling influence development phase 
influence external attribute difficult provide guidelines 
obvious guidelines little practical experience concerning relative importance inheritance non inheritance coupling available section study reported bdm described showed inheritance coupling significant predictor fault prone classes non inheritance coupling recommend measure inheritance non inheritance coupling separately option iii conduct statistical analyses investigate relative importance 
polymorphism influence development phase 
influence external attribute analyze understandability need account polymorphism methods invoked method invocation signature provide functionality know method know 
accounting polymorphism important analysis error proneness testability 
method pim implementation defects propagate originate methods 
assign methods attributes classes influence development phase 
influence external attribute 
additional remarks choice available options largely influenced decision inheritance vs non inheritance coupling criterion count inheritance coupling options iii iv attributes methods class implemented class 
inheritance coupling measure degree class coupled ancestors sense assign methods attributes inherited class assigning inherited methods attributes class sense analyze coupling class classes related inheritance 
connections methods attributes class inherits contribute coupling class provide example shows application option 
imply useful applications option 
leave part framework 
construction coupling measures selection options criterion framework construct set coupling measures accordingly 
assume measurement goal analyse source code system xyz predict maintenance effort maintenance effort defined number person hours spent fixing faults class implementing changes class result requirements changes 
data measured certain period time say year 
criterion framework decisions 
isern type connection criterion method invocations option 
justification source code level assuming system pure object oriented implementation method invocations hypothesized relevant type connection 
locus impact criterion count import coupling 
justification method invokes methods affected changes invoked methods 
granularity criterion required domain class 
justification maintenance effort defined class level 
count individual connections option 
justification method invoked effort required modify invoking method modification invoked method takes place 
stability server criterion count connections unstable classes option 
justification assume stable classes reliable need modification result requirements changes 
indirect direct connections criterion count types connections 
justification clear rationale choosing particular type connection available options investigated 
purpose illustration direct connections considered 
inheritance criterion count inheritance non inheritance coupling distinguish types coupling option iv 
justification know inheritance non inheritance coupling important 
need measure types coupling separately investigate relative importance 
account polymorphism 
justification method class may give rise modification class 
include methods possibly invoked polymorphism dynamic binding 
methods implemented class contribute coupling class 
justification choose option count inheritance coupling criterion 
furthermore count individual connections criterion need distinguish declared implemented methods class 
npi pim uc ancestors domain class criterion pim npi method invocation crit 
account polymorphism crit 
import coupling crit 
invokes methods implemented class contribute coupling class crit 
npi counts individual connections crit 
invoked method implemented unstable class crit 
pim set directly invoked methods criterion 
example criteria reflected measures definitions npi pim uc ancestors invoked method implemented ancestor class crit 
invoked method implemented ancestor class class criterion isern corresponding coupling measures shown 
measure inheritance coupling indicate criterion reflected definition measure 
difference measure non inheritance coupling caused criterion indicated 
distinction stable unstable classes assume partition set classes set stable classes set unstable classes summary conclude discussion unified framework remarks 
measures generated framework counts connections classes 
leads highest level measurement ratio measurement means powerful types statistical analysis techniques performed 
measures guaranteed useful 
useful measures empirically validated respect external quality attribute interest specified measurement goal 
believe measurement internal product attributes meaningful isolation capture relevant external quality attributes full details see bem 
existing measures classified options available criterion framework 
classification allows existing measures compared potential identified 
classification shown particular options framework criteria corresponding measures proposed 
object oriented design methods define specific types connections classes stimuli jacobson oose method links rumbaugh omt method 
framework may tailored particular design method adding types connections unique design method list possible types connections criterion 
empirical validation studies section discuss empirical studies performed reviewed coupling measures 
section focus studies conducted empirically validate measures show usefulness measures 
studies relationship internal attribute external quality attribute software product investigated measures discussed section measure internal attribute 
results studies detail analyse validity 
section give brief overview empirical validation performed reviewed coupling measures 
section summarizes results section 
empirical validation studies aware publications empirically validate measures section 
table provides brief overview research 
see identical systems dependent variables analyses lh bbm bdm 
section describe systems dependent variables studies detail section introduce measures studies discussed 
section presents results analyses section analyse validity results 
sc uc sc uc sc uc isern systems dependent variables systems dependent variables studies described table 
refer systems dependent variable lh bbm bdm setting setting ii respectively 
additional measures empirical validation studies measures coupling measures previously introduced 
definitions measures 
lh size measures size size 
size class defined number non inherited methods non inherited attributes class 
formally define measure size class defined number semicolons class 
lh bbm measure wmc metrics suite chidamber kemerer ck ck 
measure originally defined follows ck publication systems analyzed dependent variable independent variables li henry lh medium sized commercial software systems maintenance effort number lines changed period years chidamber kemerer metrics suite ck mpc dac size measures size size li chidamber kemerer metrics suite ck mpc basili bbm small software systems developed students project fault proneness probability detecting fault class chidamber kemerer metrics suite ck briand bdm metrics suite defined bdm 
table overview empirical validation studies setting lh setting ii bbm bdm systems commercial systems uims ques systems student project developed teams months application domain systems uims user interface system ques quality evaluation system information system video rental businesses design method classic ada design language object oriented extension ada omt rumbaugh implementation language classic ada programming language size classes uims classes ques total classes systems sizes systems developers information available groups students experience previous experience object oriented analysis design dependent variable maintenance effort number lines changed class period years calculated follows deleted line counts added line counts modified line counts deletion addition fault proneness faults detected class acceptance testing 
system underwent hours acceptance testing detected faults traced back classes 
modeling technique linear square regression logistic regression table description systems dependent variables size isern consider class methods complexity methods 
complexities intentionally left undefined 
versions wmc studies lh defined mccabe cyclomatic complexity method mcc 
denote version wmc wmc mcc 
wmc mcc takes non inherited methods class account 
bbm set 
words version wmc counts non inherited methods class 
denote version wmc 
lh measure nom number methods counts number methods class identical wmc 
name nom refer measure wmc 
lh measure lcom ck 
measure defined follows number pairs methods attribute common 
bbm bdm measure lcom ck 
define measure follows denote measure lcom distinguish version lcom defined 
studies described measures dit depth inheritance tree noc number children metrics suite chidamber kemerer 
definitions ck ck identical 
dit class defined maximum length node root tree 
give recursive definition dit 
measure noc straightforward define results studies lh metrics suite chidamber kemerer size size mpc dac tested 
li proposed multivariate regression models conducted square regression tests estimate predictive power 
bbm bdm metrics suite chidamber kemerer suite coupling measures introduced bdm tested 
univariate logistic regression performed test predictive power measure isolation 
multivariate models built stepwise selection process tested 
overview various multivariate regression models table 
assigned numbers model mvm mvm 
wmc lcom ar ar ar ar ar ar ar lcom dit parents max dit parents noc children isern li applied model mvm mvm systems uims ques 
provide adjusted values tests regression models mvm mvm provide regression coefficients values independent variable mvm regression coefficients 
table reproduce results tests mvm mvm 
models mvm mvm basili briand regression coefficients values independent variable model 
results tests table 
table summarize measure results univariate analyses performed results multivariate analyses mvm mvm mvm mvm 
aimed organizing table manner measure obvious univariate multivariate analyses results analyses 
description columns follows column measure name measure 
column model prediction model 
uv stands univariate analysis multivariate analysis indicate number respective multivariate regression model 
column setting setting analysis took place 
explained table setting dependent variable number lines changed square regression 
setting indicate brackets systems uims ques respective analysis 
setting ii dependent variable probability detect fault logistic regression systems analysed systems students projects 
column coefficient regression coefficient measure respective model 
column evaluation impact measure dependent variable logistic regression 
univariate analyses setting ii value notion odds ratio provided 
odds ratio represents ratio probability having fault having fault value measure defined represents reduction increase odds ratio expressed table percentage value increases unit 
column value statistical significance 
setting tests setting ii likelihood ratio test 
number source setting independent variables mvm lh size size dit noc mpc rfc lcom dat wmc mcc wmc mvm lh size size mvm lh dit noc mpc rfc lcom dat wmc mcc wmc mvm dit rfc lcom dat wmc mcc wmc mvm bbm ii dit rfc noc cbo class origin class reused verbatim mvm bdm ii dit rfc mvm bdm ii dit wmc table overview multivariate models number setting system adjusted value mvm uims ques mvm uims ques mvm uims ques mvm uims ques table goodness fit multivariate models lh dy dy dy dy dy isern column indicates measure significant 
setting level significance 
setting ii threshold 
table cells left empty corresponding information available applicable 
measure model setting system coefficient value 
mpc mvm uims ques dac mvm uims ques lcom mvm uims ques wmc mcc mvm uims ques wmc mvm uims ques uv ii mvm ii dit mvm uims ques uv ii mvm ii mvm ii mvm ii noc mvm uims ques uv ii mvm ii rfc mvm uims ques uv ii mvm ii mvm ii cbo uv ii mvm ii lcom uv ii uv ii mvm ii uv ii uv ii uv ii uv ii uv ii uv ii uv ii uv ii table regression coefficients individual measures dy isern discussion results setting ii measurement values lcom showed small variance measure predictor 
basili attributed definition lcom measurement value set zero pairs methods class attribute common pairs methods 
result lcom zero large number classes yield different negative values lcom 
setting multivariate model mvm regression coefficients measures dit mpc lcom rfc mpc opposite signs systems uims ques 
explained li henry 
measures suite defined bdm show small variance 
authors suggest peculiarity data set measures coarse 
particular observe measures inheritance coupling significant 
measure noc zero classes system ques 
explained li henry 
setting ii observed trend noc contrary expected large noc indicates lower probability fault detection 
basili explain fact classes reused verbatim tend higher noc second study systems verbatim reused classes shown fault prone bbm 
comparison size measures lh bbm bdm authors investigate question measures better predictors pure size measures 
li henry defined tested size model mvm table variables size size 
adjusted uims ques respectively concluded size model mvm predictor maintenance effort value 
conducted partial test determine difference predictive power mvm mvm 
rejected hypothesis difference mvm mvm significance level concluded mvm better predictor mvm 
basili bbm calculate correctness completeness mvm classes correctly predicted faulty faulty classes detected 
build multivariate model size measures 
model classes correctly predicted faulty faulty classes detected 
authors conclude mvm better predictor size multivariate model 
briand correlate measures significant univariate analysis size measures number source lines code number executable statements 
find coupling measures strongly related size measures capture different dimensions spearman rank correlation coefficient approaching 
uv ii mvm ii uv ii uv ii uv ii uv ii uv ii uv ii uv ii mvm ii uv ii measure model setting system coefficient value 
table regression coefficients individual measures dy isern threats validity distinguish types threats validity empirical study construct validity degree independent dependent variables accurately measure concepts purport measure 
internal validity degree drawn causal effect independent variables dependent variables 
external validity degree results research generalized population study research setting 
apply criteria studies described 
construct validity choice dependent variable lh measure maintainability maintenance effort questionable number lines changed class may say little actual effort terms person hours spent maintenance class changes class may require effort contribute count number lines changed vice versa 
internal validity bdm bbm function measures design measures emphasized measures applicable early stages development process 
measures useful detect problems design implementation starts potentially saving time effort rework design 
studies measurement performed implementation 
measurement taken place say implementation started different measurement data obtained description system implementation complete implementation instance information method invocations detailed implementation implementation method invocations counted cbo rfc mpc 
turn lead completely different results statistical analyses 
validity measures early development phases shown 
order demonstrate usefulness measures early development phases measures applied deliverables early development phases 
external validity basili list facts may restrict generalizability results bbm 
consequently facts apply results bdm systems developed small lie source lines code 
systems developed limited conceptual complexity 
developers may trained experienced average professional programmers 
point small systems applies studies lh system uims classes system ques classes 
information concerning conceptual complexity systems experience developers 
empirical studies section briefly empirical done measures section 
age ck measures proposed papers applied systems 
distribution measures values ad hoc interpretation data done explanations differences distribution measures values various systems 
studies show measures large systems 
draw usefulness measures discussion 
cohen sc metrics suite chidamber kemerer ck compare objectoriented design methods data driven responsibility driven design method 
data driven method isern emphasizes information modelling responsibility driven method stresses services responsibilities terminology design method system provide 
developed versions system data driven method responsibility driven method 
data driven design yielded measure chidamber kemerer suite higher values responsibility driven design 
authors concluded responsibility driven design method produces complex system designs 
summary measures section useful predictors fault proneness class numbers lines changed class maintenance period 
appear better predictors simple traditional size measures 
results valid relatively small systems stable design information system fully implemented 
usefulness measures large systems stable system design information system implemented remains tested 
small amount empirical validation published concern empirical required 
reason small amount empirical validation may measures provided underlying empirical models hypothesis testing 
reason empirical validation need define measure internal external attribute measuring external quality attribute practice difficult 
measuring internal attribute relatively easy measures quickly defined order apply measure need access artifacts existing systems 
typically systems available perform measurement 
shown section kind measurement frequently reported 
measuring external quality attribute problematic need additional information measured system 
instance want measure maintenance effort need system appropriate maintenance effort data 
typically systems additional required information available organizations adequate measurement programs place 
trade offs definition external attribute circumvent problems limit usefulness study 
instance lh maintenance effort defined number lines changed class 
advantage number lines changed class calculated versions system need actual effort data 
highlighted number lines changed straightforward indicator actual effort spent maintenance class 
standardized terminology formalism provided framework comparison evaluation definition coupling measures object oriented systems 
framework intended exhaustive integrates new ideas existing measurement frameworks literature 
detailed guidance provided coupling measures may defined consistent operational way existing measures may selected explicit criteria 
framework review state art draw rich body ideas regarding way address coupling measurement object oriented systems 
measures explicit empirical models intended application priori difficult determine 
measures undertaken thorough empirical validation 
words usefulness measures currently empirically supported 
empirical validations exist seriously flawed serious threats validity results construct validity dependent variable analysis capture accurately external quality attribute interest 
appears ideas reported little empirical coupling measurement especially context object oriented systems 
hinder effective research design satisfactory solutions practitioners measurement 
isern includes investigation cohesion inheritance complexity measurement object oriented systems 
addition plan perform exhaustive empirical investigation measures reported article 
acknowledgments research reported conducted framework rgen st master thesis quality measures object oriented systems 
age abreu design quality evaluation object oriented software systems th international conference software quality austin texas usa october 
bbm basili briand melo measuring impact reuse quality productivity objectoriented systems technical report university maryland department computer science cstr january 
bbm basili briand melo validation object oriented design metrics quality indicators ieee transactions software engineering 
bdm briand devanbu melo investigation coupling measures technical report isern ieee icse boston usa published may 
bem briand el theoretical empirical validation software product measures technical report centre de recherche informatique de montr 
bmb briand basili measuring assessing maintainability high level design ieee conference software maintenance montreal canada september 
bmb briand basili defining validating high level design metrics technical report university maryland cs tr 
bmb briand basili property software engineering measurement ieee transactions software engineering 
ck chidamber kemerer metrics suite object oriented design paepcke ed 
proc 
conference object oriented programming systems languages applications oopsla october 
published sigplan notices 
ck chidamber kemerer metrics suite object oriented design ieee transactions software engineering 
cs churcher shepperd comments metrics suite object oriented design ieee transactions software engineering 
cs churcher shepperd conceptual framework object oriented software metrics software engineering notes 
cy coad yourdon object oriented analysis prentice hall second edition 
cy coad yourdon object oriented design prentice hall edition 
eks eder kappel coupling cohesion object oriented systems technical report university klagenfurt 
fen fenton software metrics rigorous approach chapman hall 
hm hitz measuring coupling cohesion object oriented systems proc 
int 
symposium applied corporate computing mexico october 
hm hitz chidamber kemerer metrics suite measurement theory perspective ieee transactions software engineering 
jacobson jonsson object oriented software engineering case driven approach acm press addison wesley reading ma 
isern lh li henry object oriented metrics predict maintainability systems software 
li henry kafura schulman measuring object oriented design journal object oriented programming 

lee 
liang 
wu 
wang measuring coupling cohesion objectoriented program information flow proc 
international conference software quality slovenia 
mar martin oo design quality metrics analysis dependencies position workshop pragmatic theoretical directions object oriented software metrics oopsla october 
mcc mccabe complexity measure ieee transactions software engineering 
mye myers composite structured design van nostrand reinhold 
rumbaugh blaha premerlani eddy lorensen object oriented modeling design prentice hall 
sb selby basili analyzing error prone systems structure ieee transactions software engineering 
sc cohen object oriented comparison object oriented development methods software engineering notes 
smc stevens myers constantine structured design ibm systems journal 
tz troy zweben measuring quality structured designs systems software 
isern appendix glossary terms standard terminology object oriented concepts provided follows component system entity properties may measured 
important typically classes methods attributes 
class compound structure encapsulating data functional elements 
object instance class attribute data item encapsulated class 
names instance variable data member state variable method procedure function encapsulated class 
names operation service member function inheritance relationship classes 
class may inherit class methods attributes class available class parent class class inherits class class parent class 
name superclass 
child class class inherits class class child class 
name subclass 
descendent class descendent classes class children classes class children 
class directly indirectly inherits class 
ancestor class ancestor classes class parent classes class parent classes 
class directly indirectly inherits 
signature unique identifier identifies method 
signature specifies method name parameters takes return type 
interface set signatures defined public class interface characterises complete set messages sent instance class 
body body method implementation 
body class implementation methods 
access method method sole purpose provides access attributes class 
constructor method creates initializes object class 
virtual method method implementation 
implementation method deferred children classes 
class class virtual method 
objects instantiated class 
message classes methods send messages request services classes possibly including specific recipients parameters 
polymorphism identifier may refer instances different classes typically having common ancestor run time allowing objects bound identifier respond set messages different ways semantics response similar objects 
defined applicable measurement terminology 
definition terms measure internal attribute external attribute theoretical validation empirical validation taken bem measure domain range set empirical objects measured set classes methods set formal objects real numbers 
measure mapping maps element element call domain measure range name metric 
internal attribute quality property software product measured terms product size coupling external attribute quality property software product measured solely terms product 
instance measure maintainability product measurement maintenance activities product required addition measurement product 
operationally defined measure considered operationally defined interpretation definition required stated unambiguous manner 
theoretical validation demonstration measure really measuring internal external attribute purports measure 
isern empirical validation demonstration measure useful sense related interesting external attribute expected way 
measurement goal specification objectives measurement context 
assumed objective measurement test hypothesis form internal attribute impact external attribute conduct empirical validation 
information typically included measurement goal development phase measurement take place environment measurement take place development team methodology properties measures internal external attributes 
explaining formalism appendix provides illustrating examples definitions formalism provided section 
declared implemented methods definition set methods declared set methods implemented defined 
consider example classes 
class 
class inheritance 
notice unique labels represent method 
case class inherits method override method retains identity provided parent class 
example class inherits method class override 
cases method provided new identity 
example addition certain object oriented programming languages allow method overloading class methods name different signatures 
methods provided unique identity 
inherited overriding new methods definition sets inh new inherited overriding new methods class introduced 
example new inh 
class method method signature declared ancestor class inh new form partition pairwise disjoint method invocations consider example remarks method mc invokes method md pointer object type class static type object pointed 
run time dynamic type object may class descendent class class public virtual void void int void char void int void char ch class public public void void char void void void char ch void 
example methods new inh new isern due polymorphism actual method executed implemented class descendent class example md md may executed md identical md 
body mc contains total statements invoke method md method md invoked run time determined static analysis 
show values sim pim npi definitions method 
sim mc md mc md 
result inheritance method statically invoked objects different classes 
method md statically invoked twice object type object type 
pim mc md md npi mc md npi mc md 
result polymorphism method invocation contribute npi count methods 
notice static type object method invoked may class may virtual method 
dynamic type object class object instance class 
declared implemented attributes illustrate declared implemented attributes definition consider example 
class 
methods attributes modelled elements sets require unique identity 
methods attributes class provided identity inherited attributes provided identity ancestor class 
notice distinction constant attributes regular attributes 
instance class class ptr obj public void mc int void mc int ptr md int ptr md obj md class public virtual void md int void md int class public public void md int void md int class public public void md 
example method invocation class public int 

example class attributes class public int const int public int 
int return isern attribute definition set ar introduced model set attributes referenced method 
ar 
notice distinction read write accesses attributes measures discussed distinction 
generic object oriented development process survey measures section classify measures development process applicable 
able classify measures consistently known certain deliverables required measurement available 
achieve requirement generic development process steps deliverables available defined 
deliverables comprise modelling concepts similar object oriented methodologies exemplified means mapping jacobson oose method 
general step performed iterative cycles deliverables updated problem solution clearly defined 
analysis deliverables available analysis phase high level classes high level classes model entities problem domain 
high level class phases implemented regular classes classes provided programming languages 
analysis phase know internal structure 
idea services provides 
inheritance relationships knowledge inheritance relationships derived mainly identification type relationships 
general number inheritance relationships identified analysis relatively small 
relationships relationships uses consists relationships derived basis services provide 
example requests service provided uses relationship note usual system decomposed subsystems groups closely related 
occurs ease understandability iterative enhancement 
mapping oose terms specific oose terminology set quotes distinguish standard terminology 
analysis phase corresponds robustness analysis oose method 
artifacts described analysis model objects interface entity control objects inheritance relationships direct counterpart oose relationships called associations communication associations acquaintance associations 
services provided object oose part analysis model evident cases defined earlier process step oose 
object oriented methodologies feature early analysis phase introduce graphical notation high level classes represented boxes circles relationships inheritance uses represented different kinds arrows circles boxes 
information contained diagrams considered measurable output analysis 
high level design hld high level design refined 
involves decisions regular classes needed implement high level class methods provide input output parameters methods need regular class method implemented data class hold 
know functionality method fulfill rough idea methods method uses 
methods level high level methods 
methods may required implement high level method new methods added 
input output parameters subject refinement 
refinement creates new classes new inheritance relationships classes arise 
instance identified number classes perform network communication classes functionality methods common wait message send message receive message functionality factored common parent class network communication classes 
mapping oose high level design corresponds half construction phase oose method 
mapped blocks block consists classes implementation environment influence choice classes 
interaction diagrams stimuli isern tween blocks determined information passed stimulus 
stimuli correspond high level methods information passed corresponds parameters 
low level design lld low level design algorithms method designed 
typically techniques state transition graphs flowcharts program description languages pdl 
design algorithms determining precise signature method identify need new methods attributes 
detailed information methods attributes method 
possibilities class abstraction discovered lld library classes considered 
result new classes added system minor rearrangement inheritance hierarchy 
mapping oose low level design phase corresponds second half construction phase oose 
state transition graphs design algorithms methods class 
implementation imp implementation source code available 
mapping oose oose process step implementation produces source code 
levels coupling defined myers appendix restate definition coupling myers mye context structured design 
term module refers set contiguous program statements having name parts system invoke 
myers identified levels coupling modules 
listed tightest worst lowest best coupling content module directly inside normal linkage conventions modules bypassed 
change module require module changed 
common modules global data structure named fortran common statement 
external modules homogeneous global data item 
control module explicitly controls logic passes explicit element control function codes control switch arguments module name arguments module 
stamp modules data structure passing argument 
data modules directly communicate module calls module interface data input output arguments modules homogeneous data items 
