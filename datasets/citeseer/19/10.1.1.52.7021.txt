introducing clover object oriented functional language chris clack lee department computer science university college london clack cs ucl ac uk cs ucl ac uk 
search language combines functional object oriented features long distinguished history :10.1.1.116.1298
aim integrate formal methods benefits functional programming software engineering benefits paradigms 
date know language claim purely functional purely object oriented retains complete type safety 
clover new language functional object oriented 
completely type safe 
explain design issues clover achieves aim 
explain missing discuss relevance illustrate loss new visual programming notation 
object oriented oo paradigm appropriate methodology successfully delivered large projects 
oo design ood extensively industry provides control characteristics structuring design large applications 
oo programming oop disappointing particular expected level code reuse observed 
furthermore oop languages done little reduce testing debugging times current oop languages completely type safe require extensive run time testing debugging 
contrast functional programming fp extensively industry mainly due perceived low performance restricted programmer skill base poor support large scale applications programming typically methodology supporting analysis design 
fp languages bring major benefits program development 
complete type safety ensures high percentage errors detected compile time significantly reducing time required run time debugging 
furthermore functional languages simple syntax semantics key property referential transparency ensures encapsulation programmers securely appropriate level abstraction 
course lee supported epsrc research studentship case award andersen consulting 
goal provide specification language purely functional purely object oriented 
definition terms open interpretation universally agreed definition oo choose define terms features common lazy functional languages define second terms minimal subset common object oriented languages believe captures essence object oriented programming 
define referentially transparent side effects completely type safe lazy evaluation parametric polymorphism higher order functions partial applications purely object oriented object class hierarchy inheritance pure encapsulation subsumption subtyping method overloading method overriding dynamic despatch 
objectoriented may argue missing discuss 
structured follows brief overview relevant oop terms establish problem discussing related difficult design issues new language clover design features syntax type system overview semantics explain missing discuss relevance illustrate loss new visual programming notation report current status clover project suggest directions conclude 
overview object oriented terms assume reader knowledge fp terms necessarily oop terms 
section briefly summarises relevant oo terms oo community 
basic concepts class comprises attributes private data items methods interface functions 
class special constructor function define instantiate instance class specific values attributes 
object instantiation class 
object may manipulated sending message name object methods actual parameters method 
terms binary methods take parameter addition distinguished object type distinguished object 
delegation act object forwarding operation object performed behalf object 
distinguished object run time resolve method overriding determine implementation method application vide overloading overriding 
dynamic binding associates name value run time type known statically vide dynamic typing 
dynamic despatch run time feature invokes implementation associated method name actual type distinguished object 
dynamic typing associates name type run time 
inheritance relationship classes class shares attributes methods defined single inheritance multiple inheritance classes see 
multi methods run time feature allows dynamic despatch parameter 
overloading provides multiple implementations method distinct type 
overriding provides replacement implementation inherited method attribute 
self identifier defined method bound dynamically distinguished object 
subsumption allows function type oe oe provided argument type oe iff oe subtype oe subtyping defined ways see example :10.1.1.117.695
general viewed type system pairwise relation types provides partial ordering 
related early considerable interest formalisation oop notable attempts integrate oop fp 
early flavors involved extension lisp object oriented features 
culminated clos set tools developing object oriented programs common lisp 
significant claims clos combines oop fp lisp flavors referentially transparent fails satisfy primary criterion 
early interest oop fp integration increased newly developed languages 
languages leda quest rapide ufo referentially transparent foops higher order programming facilities life supports simulation fp hop support full oop 
kea rapide hop briefly outlined kea higher order polymorphic lazy functional language supporting multi methods type inference system 
smalltalk kea enforce certain aspects oo encapsulation 
particular kea functions associated classes distinguished object 
furthermore kea notion polymorphism admits single type variable mentions kea currently extended include higher order implicitly polymorphic functions implies features 
rapide extends standard ml sml subtyping inheritance 
objects modelled structures sml extended structures may passed functions 
unfortunately rapide retains sml lack referential transparency relies 
hop functional language object oriented features incorporating dynamic binding subtyping referentially transparent lazy 
extension calculus called label selective calculus known calculus hop experimental language testing provision oo features fp 
clear notion object explanation dynamic despatch inheritance subsumption overloading overriding implemented 
period number notable attempts integration plus extensions previous systems 
obj functional language supports multiple inheritance exception handling overloading higher order programming facilities 
st extension smalltalk type system bringing closer ml result order strict referentially transparent 
extension ufo data flow model visualising execution referentially transparent 
caml special light re named objective caml laid foundations objective ml see subsection unfortunately foundations referentially transparent 
year witnessed intensifying interest field new languages established including language clover 
objective ml implemented top caml special light extension ml objects top level classes multiple inheritance methods returning self binary methods parametric classes 
object ml extends ml objects subtyping heterogeneous collections 
claire high level functional object oriented language advanced rule processing capabilities 
bla claims unite functional object oriented programming class environments 
languages clover referentially transparent 
summary related despite considerable attention research community impossible combine object oriented features inheritance subsumption dynamic method despatch functional features referential transparency higher order functions currying partial applications lazy evaluation single completely type safe language 
closest attempts far kea rapide hop life objective ml object ml 
design issues stringent criterion devise object oriented functional language purely functional referentially transparent side effects property advantages functional paradigm lost static analysis techniques fp languages assume referential transparency 
view extending fp oop way 
note requires immediately discard imperative notions multiple assignment see section missing 
design decisions outset 
discard notion multiple inheritance complicates semantics oop considerably resolving attribute method naming conflicts upwards type coercion 
necessary similar behaviour achieved explicit object delegation 

choose dynamic despatch single distinguished object avoid complexities multi methods approach increase encapsulation 
remainder section design issues illustrate integration oop fp difficult task 
type safety versus dynamic despatch key feature oo languages dynamic typing resolving type object run time 
particular data arriving external source may heterogeneous type fp languages statically define actual type input data 
furthermore subtyping permits conditional statements return different subtypes declared return type 
general possible resolve method despatch statically dynamically typed objects 
dynamic method despatch run time check actual type object receiving message ambiguities arising inheritance method overriding resolved appropriate code executed 
oo languages assume accept implies type errors may occur run time 
having realised undesirable oo language designers created claim type safe oo languages eiffel example claim 
eiffel provides assignment attempt operator handles run time type errors controlled manner assigning void value assumed programmer check possibility void value take appropriate action 
functional programmers think type safe 
fp world requires complete type safety type system guarantees impossible type error occur run time 
dynamic types appear compromise type safety partially problem 
type safety versus overloading partial applications overloading common feature oo languages allowing different definitions method name 
distinguished types message arguments return value overloading unique type signature 
overloading certainly desirable feature wish incorporate allows example multiple ways set date date august date example overloaded versions date take number arguments 
important support overloading different numbers arguments 
example time time noon wish support full overloading overloaded methods able vary type number arguments declared 
unfortunately appear impossible combine dynamic despatch curried partial applications full overloading 
full overloading number arguments different may vary 
partial applications method may applied arguments 
partial application uses curried style example tuple dummy values missing arguments ambiguities impossible resolve run time 
example overloaded definitions hour hour clock time int int int time int int int string application time full application overloading meaning am partial application second overloading eventually am pm 
resolved run time require types known compile time overloaded functions resolved statically complete type safety guaranteed 
established dynamic typing implies know actual types compile time 
curried partially applied methods currying higher order functions partial applications key features functional programming style absent oop 
unreasonable oo programmers normally perceive messages indivisible clear partially applied message mean 
example method takes distinguished object normally takes arguments message denote 
name 
mean operationally 
sent object delayed final argument ready 
sent object object 
store wait final argument arrive 
denotational operational semantics partial applications fully addressed oo world 
furthermore seen difficult reconcile curried partial applications dynamic despatch full overloading 
subtyping subtyping central oop absent current production fp languages 
haskell various times subject claims type classes mechanism facilitates oo programming mistaken assumption haskell type classes provide subtyping :10.1.1.47.1059
unfortunately type classes provide subtype relationship require support structured form overloading 
support dynamic despatch run time method accept argument different types method distinguished object requires subtyping flattening entire type system essentially language 
similarly subsumption requires subtyping applied method arguments 
fp languages rely advanced polymorphic type inference ensure type correctness 
type systems fp languages hindley milner algorithm admit subtypes 
notable exception mitchell extension sml type system admit inclusion polymorphism subtyping 
subtyping hop claims largely mitchell recursive type constraints 
polymorphic type inference considered undecidable inclusion types demonstrated decidable systems implemented 
lazy evaluation versus discrete messages state update wish retain powerful fp feature lazy evaluation natural meaning message passing view oop 
example 
multiple assignment semantics require strict state update 
state update driven arrival message data driven 
messages discrete finite pre evaluated 
sending message atomic action 
views preclude incorporation notion lazy evaluation oop 
clover clover higher order lazy object oriented functional language completely type safe 
clover provides 
new design completely type safe dynamic method despatch overloading 
new object oriented semantics partially applied messages higherorder functions 
new design full overloading methods presence curried partial applications dynamic despatch 
new programming notation semantics object state object identity object oriented lazy evaluation 
clover intended application development low level systems programming 
support programming specification level functional languages write executable specifications 
clover supports traditional oop features class hierarchy subtyping subsumption inheritance method overloading method overriding dynamic despatch 
incorporates fp features referential transparency single assignment attributes polymorphism curried partial applications higherorder functions lazy evaluation 
methods defined expressions pure functions side effects 
language completely type safe pointers memory allocation automatic clover secure language example produce totally secure applets world wide web 
secure clover run time system netscape plug left 
prototype lazy functional programming language intermediate language clover code type checked typechecker translated standard functional language 
allows standard compiler code generation 
eiffel claims type safe dynamic despatch cost losing overloading haskell overloading dynamic despatch 
design features key clover successful support oop fp careful integration number different design criteria 
design parameters subtyping subsumption inheritance overloading overriding genericity partial applications currying laziness design space extremely large goal proven remarkably elusive 
case solution appears quite natural retrospect 
key design criteria related type safety including bounded universal quantification monotonic inheritance shallow subtyping 
furthermore order deal curried partial applications enforce unusual ordering constraint implementation message application 
support object oriented view lazy evaluation new visual notation see missing clover visual object oriented functional language 
bounded universal quantification clear dynamic typing incompatible knowledge actual types compile time require language dynamic typing completely type safe 
step solving apparent conflict ensure types known statically 
allows dynamic typing actual type expression subtype known upperbound whilst ensuring type errors detected compile time 
currently require programmer give explicit upperbound types method type signatures method arguments hope implement subtype inference system 
inclusion polymorphism implemented bounded universal quantification :10.1.1.117.695
monotonic inheritance completely safe method despatch statically resolvable part solution 
message passed object required method defined object 
static knowledge upperbound type object coupled restriction inheritance monotonic method attribute exists class exist identical type signature subclasses 
shallow subtyping order achieve complete type safety essential full method overloading resolved statically 
upperbound types available compile time restrict clover shallow subtyping inherited reimplemented method type ancestor 
provide full method overloading different types numbers arguments insist declared class method name defined 
overloaded method application valid type valid subtypes 
implementation message application message application object written 
traditional way implement function call 
clover wish support curried partial applications application naturally implemented causes problems partial applications messages 
previously discussed problem semantics partial applications object oriented context 
considering implementation technique mean denotationally operationally 
define partially applied message method applied arguments applied distinguished object 
allow partial application named passed argument method returned result method 
fully applied message sent distinguished object 
implement semantics precisely adopt unusual procedure placing distinguished object sequence curried arguments laziness key incorporation laziness clover new concept object identity explained section missing 
language overview clover program consists components 
invocation expression 
class hierarchy tree class 
class unordered set attribute declarations method definitions 
class hierarchy single rooted single monotonic inheritance definition new classes extensions existing classes sharing class hierarchy inherited attributes methods discarded 
smalltalk tradition object message class hierarchy contains class definitions primitive types integer character 
fully applied message method applied arguments distinguished object distinguished object argument 
messages may specialised partial application 
arguments methods results methods may objects messages including partial messages 
clover higher order treating messages class citizens 
class hierarchy represents subtype structure see 
subclasses may inherit methods attributes shallow subtyping inherited reimplemented method type ancestor 
overloaded method declaration allowed greatest superclass method defined separate overloaded instances may inherited reimplemented shallow subtyping described 
clover supports overloading overriding 
class subtype parent subsumption allows formal method parameter type oe bound actual parameter type long subtype oe contravariant rule establish subtypes higher order arguments 
method overloading resolved compile time method overriding resolved run time dynamic despatch type distinguished object distinguished object class define override method searches inheritance hierarchy find superclass definition method note fail run time 
clover provides completely type safe subsumption dynamic despatch bounded universal quantification type names 
consequently need type variables order support genericity 
clover expression syntax syntax expression familiar little typed calculus extended case constructs objects constants explicit method selection value oe oe oe object constructor oe oe curried method definition phi oe built gamma method literal immediate data expr value value oe oe oe curried application oe name oe xn oe oe case oe oe oe oe jn jn oe select oe oe oe select object method name overloaded type oe syntax oe denotes type 
select expression supports type checker static overload resolution implements dynamic method despatch 
bound variables object attributes referenced identifiers key primitive methods built facilitate implementation 
forms top level method binding 
support provided bindings local scope 
bindings may constant applicative forms cafs 
may parameterised may forms may expression returns object partial message 
restriction form bindings undesirable creation new methods local definitions methods formally specified part class interface 
clover type system subsections briefly sketch design clover type system 
prototype currently supports simple type matching full type inference left 
type syntax type object message function type bracketed message 
explicit bracketing necessary denote function type returned method facilitates identification distinguished object argument method 
class distinct type constructor name define correspondence class name type constructor name 
syntax types clover oe oe oe oe oe overview type semantics define object type set names types attributes methods fx fm attributes methods oe oe oe oe oe oe oe oe subtyping intermediate fp compiler type checking preferred language haskell provide subtyping unable check inclusion polymorphism 
currently implement simple subtype matching algorithm 
take traditional set theoretic view class system class types sets attributes methods subclassing equivalent subtyping :10.1.1.116.1298
subtypes ordered inversely set inclusion semantic domain 
define subtype relation operator follows iff oe oe iff oe oe oe oe iff oe oe oe oe oe oe oe oe oe oe overloading method may defined different types types completely unrelated 
require overloaded definition unique type signature statically resolvable overloaded definitions 
overloaded method definitions type oe oe dist oe oe dist oe dist type distinguished object require oe oe oe oe 
generalises multiple arguments different numbers arguments 
note style overloading permits covariant specialisation 
polymorphism polymorphism supported clover bounded universal quantification provides inclusion parametric polymorphism need type variables replaced subtype constraints :10.1.1.117.695
prototype support recursive types essential element clover 
plan implement bounded quantification 
type matcher checks declared return types declared argument types application ensure subset relationship holds 
attempt type inference type inference inclusion polymorphism long considered problematic encouraged 
intend investigate provision incremental type inference left 
expression semantics space permit full exposition clover expression semantics 
partial definition illustrates key issues subsumption static resolution overloading oe 
oe select phi psi oe oe oe oe oe oe oe select phi psi oe oe oe oe oe oe oe oe oe oe oe equations phi returns overloading resolved name method head position expression psi returns type method head position 
essence equations illustrate argument method application special status distinguished object 
note special bracketing syntax types required may detect distinguished object method returns message 
missing section discuss traditional oo notion object identity object oriented functional programming propose alternative notion object identity adopted 
traditional object identity whilst encapsulation extremely important concept software engineering clear mutable internal state important 
clear object identity enforced manner oop 
propose finer level identity assumed concept object behaviour 
example digital watch entirely different behaviour new battery installed 
behaviours viewed different incarnations watch different names 
watch may go phases having having fully charged battery incarnation having separate identity 
way provide history identities provide immediate hooks back past 
example student different option choices different years providing different identities different stages student possible ask questions send messages different stages student academic study 
provides obvious benefits searching algorithms backtracking previous incarnations object immediately accessible 
idea new claire provides versioning entire object database provide versioning object basis 
final example traditional notion object identity note message passing view oop requires discrete messages passed atomic action object explicit declaration behaviour expected object way lazy evaluation meaning system 
contrast view objects having identities explicitly change behaviour changes expected behaviour explicit sequencing behaviour change explicit change opens way incorporation lazy evaluation shown 
foregoing discussion seen align actor model distributed oop sequences behaviours state changes 
similar continuation passing style fp programmers 
notion separating identities behaviour requires new object identifier created change internal state object main consequences 
firstly affects utility resulting language particular patterns programming supported naturally 
typical functional patterns mathematical algorithms exploiting laziness captured benefit addition oo features 
oo patterns exploiting mutable state network simulations captured naturally require additional plumbing 
secondly affects execution efficiency requiring essentially copy semantics update state object old object copied new state identity 
fortunately possible implement procedure low overhead name proliferation illustrated 
object flow new visual notation clover provides visual programming interface 
methods defined nodes arcs build representation clover expression 
choice visual notation straightforward 
choice paramount importance existing suitable notation 
control flow diagrams clearly inappropriate single assignment expression language data flow diagrams provide semantics oo notions object identity behaviours subsumption dynamic despatch common oo notation object diagram known message passing message flow notation unfortunately notation relies multiple assignment support concept laziness 
solution notation dual message flow notation similar notation 
nodes representing objects messages flowing arcs notation nodes represent application methods arguments objects flow arcs 
include higher order methods allow objects messages may partial flow arcs 
call notation object flow 
object flow notation objects actively flow node node arcs 
arc carry object higher order message application node 
notation changing state object explicit object flowing arc particular state accessible name wish avoid plethora names joining new arc existing arc making junction shares access incarnation object 
illustrates account object flowing node represents application deposit method argument 
node comprises sequence boxes top box represents result box represents message applied lower boxes represent parameters box represents distinguished object 
flows node bottom right flows result top left new incarnation object may different state 
state changes explicit object flow notation provides timeline life object 
stage object life accessible providing versioning feature supports easy exploration search spaces backtracking 
original account updated account deposit fig 

method deposit illustrates definition method deposit 
arguments credit amount account flow right names account called self distinguished object 
method updates self new balance calculated adding credit amount existing balance 
result node transmitted arc name referenced see 
plus put balance result credit self deposit money account account get balance fig 

method definition deposit final examples illustrate method overriding dynamic despatch higherorder functions 
assume method charge defined class account inherited subclasses 
method calculates bank charges type money account balance low 
overridden subclasses reflect different charging thresholds implementation course result modified copy self 
charging rates 
demonstrates charge method list accounts 
method passed higher order parameter map method list class applies account list 
produces list money summed sum method method list class 
original list accounts include appropriate charge method selected dynamic despatch 
list accounts corporate personal total charges sum map charge fig 

method charge overridden definitions charge illustrated 
note corporate accounts charged soon balance negative personal accounts allowed incurring charges 
charge money get balance result self definition class charge money get balance result self ii definition class fig 

method definitions charge semantics object flow method application lazy object flow demand driven object message pulled arc evaluated required 
flow arrows arcs method definition demand driven result 
shared demand object evaluated whichever method issues demand 
incarnations object preserved long run time system determine may required soon remaining links incarnation automatically garbage collected 
syntax semantics complete expect change experiment additional features 
draft concrete syntax visual notation implemented prototype visual frontend type checker translator haskell 
includes implementation subtype inference incorporating bounded polymorphism design incremental type checker design clover real world interface including file input output user interaction support event driven programming construction gui builder 
run time analyses assisted addition algorithm animation extension lexical profiling visual profiling 
revised object oriented analysis design notation required existing notations assume stateful objects 
alternatively define translation standard implicit state notation explicit state notation 
summary attempts integrating oop fp starting early 
shown achieving goal difficult identifying key differences paradigms discussing seemingly incompatible design issues raised differences 
achieving goal problem solving apparently conflicting language design requirements 
new language clover meets requirements careful integration number different design criteria 
remaining represents core incompatibility resolved supplying new interpretations 
includes finer level granularity new visual notation facilitate oo notion object identity fp notion laziness 
development clover contributes understanding design space oop fp languages 
demonstrated appropriate set design decisions possible implement object oriented functional language integrates paradigms 
grateful andersen consulting encouragement sponsorship relation 

agha hewitt actors conceptual foundation concurrent object oriented programming 
shriver wegner eds research directions object oriented programming mit press 
aiken fahndrich dynamic typing subtype inference 
technical report computer science division university california berkeley 
aiken murphy static type inference dynamically typed language 
technical report ibm almaden research centre 
aiken type inclusion constraints type inference 
technical report ibm almaden research center 
aiken wimmers soft typing conditional types 
proc 
st popl 
ait kaci podelski meaning life 
journal logic programming 
berger fp oop haskell 
technical report department computer science university texas austin 
bobrow demichiel common lisp object system specification 
sigplan notices 
bobrow gabriel white clos integrating object oriented functional programming 
cacm 
bobrow kahn merging lisp object oriented programming 
proc 
acm oopsla 
booch object oriented analysis design applications second edition 
benjamin cummings 
bourdoncle merz primitive subtyping implicit polymorphism object orientation 
proc 
rd fool 
budd multiparadigm programming leda 
addison wesley 
canning cook bounded polymorphism objectoriented programming 
proc 

cannon flavors non hierarchical approach object oriented programming 
symbolics 
cardelli semantics multiple inheritance 
proc 
intl 
symposium semantics data types 
cardelli longo semantic basis quest 
journal functional programming 
cardelli wegner understanding types data abstraction polymorphism 
computing surveys 
caseau laburthe claire programming language 
technical report liens 
castagna covariance contravariance conflict cause 
acm toplas 
clack lexical profiling theory practice 
journal functional programming 
damas milner principal type schemes functional programs 
proc 
th popl 
vitek hop functional objectoriented language 
submitted publication 
drossopoulou yang st smalltalk types 
technical report doc imperial college 
drossopoulou yang permissive types 
proc 
rd fool 
gelernter jagannathan london environments class objects 
proc 
th popl 
goguen winkler meseguer futatsugi jouannaud introducing obj 
tutorial manual computing laboratory oxford university 
goldberg robson smalltalk language implementation 
addison wesley 
hudak peyton jones wadler 
eds report programming language haskell 
department computing science university glasgow 
leroy le systeme caml special light modules compilation en caml 
research report institut national de recherche en informatique automatique inria 
meyer eiffel language 
prentice hall 
milner tofte harper definition standard ml 
mit press 
mitchell extension standard ml modules subtyping inheritance 
proc 
th popl 
mugridge hosking hammer multi methods programming language 
proc 
ecoop 
bla language extending functional programming class environments 
masters thesis department computational linguistics university amsterdam 
incremental type systems implicit parametric overloading visual languages 
ieee symposium visual languages 
remy vouillon objective ml simple object oriented extension ml 
proc 
rd fool 
reppy riecke simple objects standard ml 
proc 
pldi 
uniting functional object oriented programming 
proc 
lncs springer verlag 
anderson computational model intermediate format 
technical report umcs department computer science university manchester 
design implementation evaluation declarative object oriented programming language 
thesis computing laboratory university oxford 
steele jr common lisp language 
digital press 
turner functional programs executable specifications 
hoare shepherdson eds mathematical logic programming languages prentice hall 
wadler blott ad hoc polymorphism ad hoc 
proc 
th popl article processed macro package llncs style 
