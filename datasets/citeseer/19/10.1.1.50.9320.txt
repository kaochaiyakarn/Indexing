essence lr parsing michael sperber peter thiemann wilhelm institut fu informatik universita tu bingen sand tu bingen germany partial evaluation turn parser generator 
generated parsers surpass produced traditional parser generators speed compactness 
inherently functional approach implement general lr parsers specialize partial evaluator similix 
functional implementation lr parsing allows concise implementation requires achieve specialization results 
contrast traditional stack implementation general lr parser requires significant structural changes amenable satisfactory specialization 
inherently functional implementations general lr parsers direct style order textbook version continuation passing style cps 
requires handling explicit parsing stack 
parsers specialized respect grammar lookahead yield efficient residual parsers 
achieve results small number changes general parsers necessary ffl binding time improvements notably applications trick duplication procedures occur multiple bindingtime contexts ffl unrolling loops lists discard unneeded computations ffl prevention infinite specialization lr cps parser 
describe important applications improvements 
generated parsers compact fast faster mossin 
traditional stack requires representation stack structure parsing algorithm 
furthermore parse stack static value dynamic control specialization suffers termination problems 
issues arise firstorder approach deal explicit stacks 
cps approach immediately obvious generalization necessary prevent infinite specialization 
parsers modified specialization retain structure ancestors simplicity 
organized follows section introduces basic concepts lr parsing non deterministic functional algorithm 
section presents deterministic order direct style implementation algo rithm scheme describes binding time improvements 
section describes alternative formulation scheme implementation functional lr parsing cps description binding time improvements 
section describes additional features added parsing algorithms 
section gives results practical experiments section discusses related section concludes 
lr parsing notational preliminaries mainly standard notation context free grammars 
definition bunches follows specific functional interpretation lr parsing 
context free grammar tuple 
set non terminals set terminals start symbol set grammar symbols set productions form ff non terminal sequence ff grammar symbols 
additionally denotes set sequences grammar symbols analogously ffl empty sequence 
furthermore ff denotes sequence copies ff jk sequence consisting terminals 
letters default assumed elements certain sets ae oe ff fi fl ffi grammar rules text implicitly elements induces derives relation ff fi ff fi ffi fl lr item triple consisting production position right hand side terminal string length lookahead 
item written ff delta fi ae dot indicates position ae lookahead 
lookahead omitted 
lr augmented grammar contains terminal denoting input production appears production 
start separated strings derived grammars assumed lr augmented 
bunch unordered sequence values 
values ja ja bunch consisting values ak empty bunch said fail denoted fail 
bunch boolean expression reads false fails true cases 
functions distribute bunches 
subexpression fails surrounding expressions fail 
operator conditional expressions boolean expression bunch bunch means fail 
bunch means occurs functional lr parsing section contains brief description functional lr parsing 
parser context free grammar function sequence terminals input 
finds derivation starting start symbol leading 
traditional model lr parser operates stack parser states state set items 
automaton certain state item ff delta fi means seen ff input looking fi 
fi ffl parser decision choose derivation originating functional lr parser set mutually recursive functions corresponds lr state xn produces bunch ranging possible derivations fi ff delta fi fi derives prefix xn derivation represented item originated rest input string parsed 
lr parsing algorithm adheres specification cf 
xn gamma ff delta fi fi delta ff delta fi xn initial state lr parser consists just item deltas specification follows xn iff deltas ffl occurs bunch produced xn 
auxiliary definitions necessary cast definition algorithm 
function constructing lr parser needed computing lookahead information ff phi ff fi psi state comes set predict items predict phi delta ae ff delta fi ae delta oe ff delta fi ae psi transitive closure relation defined ff delta bfi ae oe oe 
predict items predictions derivations may entered 
elements predict exactly leftmost symbol derivations starting items union predict called closure henceforth predict denotes closure state states result applications goto state grammar symbol goto fa ffx delta fi ae ff delta xfi ae qg construction parser grammar includes auxiliary function state invocation xn means grammar symbol string derived just seen input 
called functional equivalent shift action happens 
implementation functions detailing algorithm underlying presentation function shifts terminal symbol additionally ffl production delta shifts lastly contains item ff delta reduced returns item part input string seen 
calls function associated goto returns item rest string 
parser arrived state containing item ff delta returns jffj function invocations moving dot back return ffx delta fl returned goto ff delta xfl 
second alternative considered dot arrived front right hand side process just described 
case shifts corresponding left hand side parsing stack traditional lr parsers implicit runtime stack procedure calls 
note returning procedure invocations really necessary pass item integer representing number levels left return left hand side production sufficient 
implementation specification exploits property 
delta ae predict jk ae ff delta ae jk ae ff delta ae ff delta xfl ffx delta fl goto ae ff delta xfl predict delta ffi goto ae specification functional order lr parser direct implementation lr parsing straightforward implementation lr parsing algorithm obtained making specification deterministic 
conflict detection omitted simplicity sake 
function implemented function parser accepts set items input list 
produces parse result result accept result reduce lhs dot inp 
actions function returns actions apply current lookahead 
parse results subsequently processed function act implementation 
result reduce 
stands partially performed reduction production left hand non terminal lhs position dot dot corresponding item remaining input inp 
function act catches results parser 
argument result reduce inp possibilities 
symbols popped case act surrounding parse terminates result reduce inp 
symbols right hand side reduced production popped parser called current state shifted inp 
result act 
notice act called tail call position imperative language implemented loop 
special case observed shifting non terminals attempt shift new start symbol initial state leads result accept input exhausted generates error 
specializing direct parser apart places trick needed direct style parser specialized surprisingly easy 
termination problems specialization explicit generalizations need inserted due absence explicit stack functional parser order nature 
define parser items inp state closure items define act result rhs rr rhs result lhs rr lhs result inp rr inp result zero 
rhs symbol rhs just popped goto state lhs zero 
lhs reducing start production 
equal 
car inp input result accept err act eof expected act parser shift items symbol lhs state non empty rhs continue popping symbols result reduce lhs rhs inp define reduce action null 
get rhs action epsilon production 
act parser shift items symbol get lhs action state inp result reduce get lhs action length get rhs action inp null 
state err parser illegal input inp actions actions input inp state items get shift items actions actions get reduce actions actions null 
actions act parser items cdr inp reduce car actions scheme implementation direct style functional parser trick trick applied dynamic value known belong finite set static values 
context replaced loop foreach nicely cascade tests occurrence static possible reduced specializer 
situation appears places parser actions input selecting applicable actions current state input second shift items symbol shifting non terminal reduction completed 
cases introduced association lists pairs consisting lookahead set actions 
case lookahead string length just non terminal symbol second case 
checking lookahead input done way residual program contain superfluous operations dynamic input list expands test cascade 
nature loop association list ensures effect grouping default actions tests 
mossin achieved effect programming trick cps version loop 
static loop select non terminal shift actions special property construction goto table tests loop guaranteed succeed non terminal shift ona performed reduction ff 
alternative shift non terminal chosen looking non terminal improvements due properties lr parsers furthermore included improvement observed mossin state items form deltaff entries goto table 
non terminal action association list need checked state empty 
check input necessary initial stateof parser closure deltas 
inserting explicit test state code prevents specializer duplicating test versions act 
initial state return result items dot right hand sides 
removes test residual code 
constructed data modeled parse result constructed datatypes provided similix hope turn partially static interesting places 
partially static call sites act unfortunately 
argument act classified dynamic similix monovariant binding time analysis 
places constructor application partially static produce residual code shown result result reduce cdr inp act rr lhs result rr rhs result rr inp result rr xxx functions selectors result reduce 
reduction expressions shown achieved making similix postprocessing phase somewhat aggressive 
care taken discard duplicate reorder computations 
newly introduced rule unfolds constructor application values vk value variable constant constant literal constant evaluation order independent primitive operator applied constants occurrences form selector constructor test 
modified removed occurrences pattern 
cases pattern remained constructor application hidden function application body constructor application define tca loop reduce result reduce reduce tweak postprocessor removes function calls functions just application constructor selector constructor test primitive operation unfolded addition callsite aside note reductions performed postprocessor performed line specializer anyway 
experiments revealed constructed values bea bottleneck 
runtime residual parsers improves factor just changing representation constructor result reduce vector 
get computations concerned computing lookahead sets items closures actions classified static desired 
direct dependencies input parse results remain dynamic 
furthermore partial evaluator performs optimization parse tables known compiler community section parse tables simplified merging reduce actions immediately preceding shift action shift reduce action conflicts arise 
continuation lr parsing algorithm lr parsing section converted concise formulation continuation passing style 
cps parser amenable specialization 
functional parser section reduces production ff return jffj invocations lr states step step 
continuations reach correct state 
cps parser needs new definitions 
state associated number active symbols active active max ff delta fi qg parser state active maximal number states return reduces production formulating cps lr parser convenient shifting terminals subject condition 
set contains terminals lr state perform shift action fx ff delta xfi qg definitions cps version functional parser considerably simpler original reduction occurs cps version directly calls continuation belonging correct state shifting dot multiple procedure invocations active ae goto ae active goto ff delta ae jk ae jffj purposes implementation mainly interested deterministic parsers 
lr transliteration specification shown fig 

addition lookahead information obtain parsers achieved way direct implementation section 
state state represented list items continuations list containing active state specification 
take function extracts elements list accept just extracts items form ff delta closure current state 
define cps parse grammar state input continuations final 
state grammar null 
input accept closure append state predict state grammar define symbol input state goto closure symbol grammar cps parse grammar state input cons take active state continuations item set accept closure null 
item set item car item set list ref cons continuations length item rhs item item lhs item input member car input closure grammar car input cdr input error cps functional parser specializing cps parser just parser section improvements necessary na implementation parser specializes 
obvious improvements apply cps version checking input final accepting state 
cps parser needs specific improvements trick just parsing algorithm section number binding time improvements immediately obvious 
parameter state static trick application goto function 
similix binding time analysis requires code duplication passed parameter state parameters necessarily dynamic 
copies code shifts terminals shifts non terminals reduction ffl productions 
loop introduced trick amenable optimization parser section duplication called non terminal argument case need checked 
unrolling loops lists unfortunately residual parsers accesses list ref explicit constructions cons take 
argument take active state static beneficial unfold call 
canonical definition take follows define take inl loop inl inl zero 
reverse loop cons car inl cdr inl implementation take shortcoming call loop reverse returned evaluates cdr inl needed 
similix preserve termination properties program call cdr fail similix assumes inserts superfluous calls cdr inl residual program results needed 
unrolling loop removes deficiency define take inl zero 
cons car cdr inl take cdr inl define take inl zero 
cons car inl take inl similar improvements loop checking correct lookahead shown touched symbol input 
removing list continuations standard scheme lists storing continuations introduces problem specific similix 
treats cons car cdr primitive operations constructors selectors storing continuations list immediately dynamic 
element list list ref cons continuations length item rhs item extracted length item rhs item 
step solving problem replace cons car cdr calls specially defined constructors partially static similix provides 
consequence list take need adapted new primitives 
similix unfold elements continuations 
unfortunately leads infinite specialization similix tries unfold instances continuation possible call sequences lead 
problem solved applying version collapse operator uses 
collapse stops infinite specialization recursive occurrence definition inserting generalization operator nested redexes 
redexes allow specialization generalization point generate specialized code respect 
similix completely reduces continuations effectively removing newly defined list constructors 
optimization crucial performance residual parsers speed improved factor 
additional features features added parsers parser generators problems 
ffl conflict resolution techniques slr lalr implemented 
preliminary experiments general slr parser show specialization times get significantly shorter canonical parsers 
implementation lalr conflict resolution construct canonical lr item closure simplify conflicts arise 
requires slight restructuring parsers computation closure item set take place call site parser 
ffl semantic actions added direct style parser cost introducing explicit attribute stack classified dynamic bindingtime analysis 
semantic action production function takes list elements correspond attribute values symbols right hand side production 
action evaluated reduce created constructor simply gets additional slot attribute value 
obvious reasons similix allow functional objects input 
actions specified quoted lambda abstractions passed interpreter subset scheme program supplied addition grammar 
specializer mis copy text semantic actions grammar residual program 
ffl nondeterministic parsing easily added continuation parser parser generator supplying failure continuations 
experimental results implementation models generated lr parsers compare generated traditionally built parser generators rk produced partial evaluation stack implementations 
implementation models different merits direct style approach leads compact parsers cps parsers faster cases 
table shows sizes input grammars sizes generated parsers 
sizes number cells scheme representations 
column mossin gives numbers parsers generated mossin general parser lr direct style parsers cps lr cps parsers 
example grammars mossin defines balanced parentheses arithmetic expressions language 
similix experiments 
size mossin lr cps lr table size residual parsers cons cells parser generators built applying similix compiler generator general lr parser similar results hold cf 
table direct style approach significantly shorter generated mossin parser cps 
notice parsers general lr parsers mossin lr parsing 
mossin lr cps lr table size parser generators cons cells input mossin lr cps lr rk size scm scm scm table speed residual parsers timings ms table shows speed generated parsers factor direct style parsing surpasses cps approach generated stack approach mossin 
taken scheme heap scm ibm rs model mb real memory running aix 
scm garbage collection statistics indicate cps parsers allocate significantly heap objects generated mossin approach factor 
scheme uses byte code engine scm interpreter comparisons parsers written generated yacc sensible 
mossin measurements indicate native code scheme compiler may produce code slower factor generated yacc 
case timings clearly indicate practicability approach conjunction high performance scheme system 
related overview functional parsing leermakers book 
summary description cps approach author 
uses cps parsing algorithm implement sophisticated attribute evaluation 
resulting algorithms parser generator rk system preprocessor generation described 
mentioned mossin similix obtain specialized lr parsers general parsers starting stack order approach specialize 
transforms stack data structure continuation pops elements stack complicates program requires intricate binding time improvements optimizations achieve specialization 
previous attempt specialize general parsers described 
automatic specializer similix generate fast compact lr parsers general functional parser grammar 
alternative approaches implement general parser represents parsing stack procedure call stack continuation passing style 
sacrifice generality programs necessary amenable specialization 
need cater specific optimizations parser generators 
stack parsing algorithms requires quite intricate transformation stack data structure continuation specialize functional approach needs straightforward known improvements generate residual code 
generated parsers faster compact generated straightforward parser generator feasible extend approach create production quality parser generator 
planned integrate approach parser generator rk system compare previous implementation 
availability sources programs described available www pu informatik uni tuebingen de sperber lr essence 
wewould christian mossin graciously supplying source code programs sample inputs 
bondorf similix manual 
diku university copenhagen may 
bondorf rgensen efficient analysis realistic line partial evaluation 
journal functional programming july 
chapman lr parsing theory practice 
cambridge university press cambridge 
parsers partial evaluation experiment 
student report diku university copenhagen denmark july 
ieee 
standard scheme programming language 
tech 
rep institute electrical electronic engineers 
johnson yacc compiler compiler 
tech 
rep bell laboratories murray hill 
jones sestoft experiment partial evaluation generation compiler generator 
rewriting techniques applications france 
jouannaud ed springer verlag pp 

lncs 
leermakers functional treatment parsing 
natural language processing machine translation 
kluwer academic publishers boston 
mossin partial evaluation general parsers 
sigplan symposium partial evaluation semantics program manipulation june schmidt ed 
ruf topics online partial evaluation 
phd thesis stanford university standford ca mar 
technical report csl tr 
sperber attribute directed functional lr parsing 
submitted oct 
sperber rk generator preprocessors 
master thesis universita tu bingen mar 
available www www pu informatik uni tuebingen de sperber mork ps gz 
weise ruf seligman automatic online partial evaluation 
proc 
functional programming languages computer architecture cambridge ma hughes ed springer verlag pp 

lncs 
