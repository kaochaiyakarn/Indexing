fast yacc compatible parsers little effort todd proebsting tr developed yacc compatible parser generator creates parsers times faster generated yacc bison 
tool mule creates directly executable hard coded parsers ansi yacc produces interpreted parsers 
hard coding lr parsers speed new idea 
attributes distinguish mule parser generators create hard coded lr parsers mule compatible yacc including yacc peculiar error recovery mechanisms mule absolutely complex automata analysis previous hard coded parser generators 
mule creates simple fast parsers little analysis 
september department computer science university arizona tucson az developed yacc compatible parser generator creates parsers times faster generated yacc joh free software foundation yacc clone bison 
tool mule creates directly executable hard coded parsers ansi yacc produces interpreted table driven parsers 
yacc prototypical generator table driven lalr parsers distinction bison relevant 
counter intuitive advantage mule requires analysis generate parsers yacc mule produce tables require table compression techniques 
mule compatible yacc obscure macro 
hard coding lr parsers speed new idea 
attributes distinguish mule parser generators create hard coded lr parsers mule compatible yacc including yacc peculiar error recovery mechanisms mule absolutely complex automata analysis previous hard coded parser generators 
error recovery notable necessary yacc compatible thought complicated hard coded parsers mechanism mule trivial implement 
complete lack optimizations notable mule parsers show impressive speedups 
criticism hard coded lr parsers create parsers bigger compressed table interpretive systems 
attempt reduce size mule parsers average twice size table systems modest grammar subset mule increased size gcc parser fold represented increase kb 
mule project began determine fast simple hard coded parser answer fast 
small increase size believe represents better method encoding yacc compatible parsers current table driven method 
previous know previous lr parser generators create hard code 
mule differs utter lack sophisticated optimizations producing impressively fast parsers 
furthermore mule differs system ways ffl mule produces ansi assembler 
ffl mule accepts yacc bison input 
ffl mule yacc style error recovery 
ffl mule manages semantic stack user code access 
created parser generator produced hard coded parsers assembly language pen 
hard coded parsers showed fold improvement speed table driven system 
system yacc compatible 
size increased factor enabling error recovery responsible larger increases 
hard coded parsers directly manipulated jump addresses data directly expressed ansi furthermore exploited low level assembler purposes register allocation stack manipulations 
parsers directly run time stack parser stack stack management operating system 
parser generator responsible analyzing transitions state determine best realized linear search binary search jump table 
jump tables compressed way ordinary state transition tables table driven parser fl 
eliminate unnecessary checks stack overflow parser generator employs heuristic break cycles characteristic finite state machine strongly connected components optimal solution np complete problem 
contrast mule generates ansi checks stack overflow uses switch statement compute transitions translation compiler 
eliminating overflow checks mule parsers test case speed increased 
system accept yacc specifications maintain semantic stack error recovery differs yacc 
horspool whitney horspool whitney developed additional optimizations hard coded lr parsers hw 
system accepts yacc input support yacc semantic stack error recovery 
parser generator retargetable generate assembler special intermediate representation 
parsers show fold increase speed table driven counterparts 
size increased 
detail optimizations relevant hard coded lr parsers 
optimizations characterized global optimizations require analysis entire finite state machine just individual states 
minimal push optimization seeks avoid pushing states stack possible 
unfortunately optimization complicated obviously compatible parser controlled semantic stack yacc 
similarly right recursive rule optimization requires nontrivial analysis incompatible yacc semantic stack 
unit rule elimination valuable optimization table driven parsers poses complications respect semantic actions 
direct goto determination optimization eliminates unnecessary nonterminal state transition computations 
addition global optimizations horspool whitney list low level coding optimizations increase speed decrease size 
attempt optimize decision sequences linear searches binary searches jump tables 
incorporate branch chaining system relying peephole optimizer simple optimization 
eliminate duplicate code attempt code sharing possible including finding code sequences match carefully encoding program matching code shared 
contrast mule supports semantic stack supports error recovery defers low level coding decisions compiler avoids complex global optimizations 
created parser generator accepts yacc specifications creates hard coded parser ansi pfa 
generated parser error recovery 
hard coded parsers times faster yacc generated parsers bigger 
concentrate doing low level optimizations invent new parser design new global optimizations 
parser generator creates hard coded parsers simpler structure 
structure time space efficient may require replicating semantic action routines multiple times 
part structure inverted table requires piece code nonterminal computing state transition nonterminal current state 
inverted table optimization decreased code size increased speed factor 
global optimizations require nontrivial analysis finite state machine 
elimination optimization special case known shift reduce optimization employed table driven parsers gives fold speedup requiring growth code size due code replication 
additionally parser generator complex analysis stack access minimization 
optimization requires heuristics attacking np complete problem results speed improvements 
contrast mule supports error recovery avoids complex optimizations 
chain rule elimination may require replicating semantic actions multiple times parser may cause code explosion worse incorrect code labels declared replicated code 
mule attempt powerful optimization 
unfortunate optimization appears simplest best known global optimizations 
mule adapt inverted tables new design simplicity reported speed size advantages 
adaptation avoids replicating semantic action routines 
system uses inverted tables error recovery bookkeeping required mule speedups fold compared table driven techniques mule fold bookkeeping 
lr parsing mechanics briefly explain fundamentals shift reduce parsing represents lr family going detail necessary subsequent exposition 
lalr parsers yacc simulate directly indirectly simple automaton stack automaton states fl 
parsers generated yacc maintain semantic stack stack grows parallel state stack describe state stack 
simulating automaton requires mechanisms determining action determined current input symbol state top stack determining state transitions current top stack grammar symbol 
time lalr grammar analysis builds tables called action goto respectively 
analysis necessary regardless table driven hard coded parser desired 
functionally tables signatures 
goto state theta symbol state action state theta token reduce accept possible actions reduce shift accept error 
reduce actions parameterized grammar production reduced 
actions described tos state top stack token current lookahead token 
shift shift pushes goto tos token stack updates token advancing lexical analyzer 
reduce reduction processes production requires popping states stack followed pushing goto tos 
semantic action parser relating production executed prior popping states stack 
accept accept signals successful parse 
error error requires error reporting recovery 
simple implementation mule creates single parsing routine simulates lalr parser directly ansi interpreting tables 
routine simple parts initialization automata states reduction actions nonterminal transitions error recovery 
similar inverted table structure pfa structure avoids duplication semantic action routines 
difference yacc compatible error recovery 
structure simple code generated tiny set small defined templates directly mirror grammar lalr automaton 
state stack semantic stack grow unison wrap stack entries single structure 
initialization phase simply sets bookkeeping data structures subsequent automata simulation 
grammar independent 
define return define return define token define define goto user error handler define typedef struct int state state stack element 
semantic semantic stack element 
semantic value computed 
int void int token get token 
unsigned initialize error recovery counter 
variable holds semantic value 
stack start max stack stack 
stack stack start stack pointer 
eos stack start max stack stack 
goto state start state 
hard coded states automata state mule creates code responsible simulating action state current input token 
transitions state labeled grammar symbol 
states labeled token called shift states require extra code advance lexical analyzer 
template code state state stack state subsequent lines appear iff shift state 
stack semantic put lexical semantic entry stack 
token advance lexical analysis 
update error recovery counter 
stack eos goto stack overflow state action error recovery entry point 
switch token case goto state iff shift action goto case goto reduce iff reduce action case goto error handler iff error action case iff accept action 
action table determines default action default goto error handler default goto reduce state number stored stack followed possibly invoking lexical analyzer 
optional lines store semantic value current token advance lexical analyzer error recovery bookkeeping 
incrementing stack pointer completes push 
case arms switch determined action table computed lalr analysis condition met comments case arm generated 
default actions developed compressing table driven parsers similarly employed generating switch default fl 
reduction actions piece code generated production 
template 
reduce production user code production iff user code exists 
stack semantic default semantic action iff 
stack pop rhs symbols stack 
stack semantic copy semantic stack 
goto nonterminal compute transition production lhs 
user actions associated reductions code corresponding production expanded place 
user code symbols associated right hand side production popped followed copying semantic stack 
jump code compute appropriate state left hand side symbol production 
nonterminal transitions nonterminal code produced compute jump appropriate state current state 
simple switch statement 
nonterminal switch stack state top stack 
case goto state iff goto 
case arms switch statement taken directly goto table computed lalr grammar analysis 
switch fail default entry needed 
making common case arm default trivial time space 
error recovery yacc error recovery mechanism idiosyncratic 
fact examining books asu output generated yacc yields different descriptions recovery mechanism 
tried faithful output yacc 
fortunately mechanism consequences generation rest hardcoded parser 
change parser maintenance variable 
relatively short code subtle explanation yacc error recovery mechanism 
code completeness 
error handler syntax error user error handler token input 
token switch stack state error recovery implementation assumes max uint tokens shifted syntactic errors number bit machine feel safe 
mechanism flawed tokens max uint tokens furthermore assumption disturb correct parse error recovery processing 
making completely safe trivial require conditional increment shift consider costly benefit 
case goto state action case goto state action 
stack stack start switch stack state case goto state iff goto error 
stack empty stack 
case arms part code depends automaton 
state outgoing transition yacc special error symbol case arm second switch statement 
experimental results implementation prototype implementation mule adaptation bison 
bison grammar analysis remains unchanged 
bison internal tables mule directly produces hard code 
generated parser statistics tested mule generated parsers hardware platforms different compilers 
initial tests grammar subset isolate parser costs trivial lexical analyzer reads token numbers pre initialized array 
lexical analysis costs procedure call table lookup index increment token 
semantic actions invoked timings 
tested bison yacc mule parsers platforms gcc vendor compiler 
ffl dec alphastation 
mhz 
ffl sparc station 
table summarizes results parsing tokens tokens times different hardware compiler combinations 
compiles flag necessary flags increase basic block limit optimizer mule creates really huge function 
worst columns indicate speedup expansion mule parsers relative better yacc bison words give ratios conservatively indicate mule behavior 
bison produced smaller slower parsers yacc 
machine compiler speed sec 
size bytes bison yacc mule worst bison yacc mule worst speedup increase alpha gcc cc sparc gcc cc table results results show speedup factors range size increases 
increase size may high increase kb grammar 
tests show gcc parser grew kb built mule 
represented approximately fold size increase 
difficult run gcc parser isolation speed comparison expect comparable speedups subset grammar instruction cache effects hurt larger gcc parser 
implemented simplest yacc compatible hard coded parser generator imagine creates fast parsers trivial translation input grammar lalr automaton 
despite simplicity mule parsers times faster yacc bison growing kb reasonable tradeoff situations 
believe complexity previous area hard coding lr parsers unfairly implementors hard coding yacc parsers belief heavy duty optimizations necessary get reasonable time speed behavior hope mule remove prejudice 
asu aho sethi ullman 
compilers principles techniques tools 
addisonwesley reading massachusetts 
fl charles fischer richard leblanc jr crafting compiler 
benjamin cummings menlo park california 
hw horspool whitney 
faster lr parsing 
software practice experience june 
joh steven johnson 
yacc compiler compiler 
computer science technical report bell laboratories murray hill 
john levine tony mason doug brown 
lex yacc 
reilly associates 
pen thomas 
fast lr parsing 
proceedings sigplan symposium compiler construction pages 
pfa peter 
optimizing directly executable lr parsers 
compiler compilers third international workshop cc pages october 
