projections strictness analysis philip wadler programming research group oxford university programming methodology group chalmers university goteborg hughes department computer science university glasgow may contexts proposed means performing strictness analysis non flat domains 
roughly speaking context describes sub expression evaluated surrounding program 
shows contexts represented notion projection domain theory 
clearer previous explanation contexts terms continuations 
addition describes finite domains contexts non flat list domain 
means recursive context equations solved standard fixpoint techniques algebraic manipulation previously 
lazy functional languages widely sung 
reason praise laziness supports programming styles inconvenient impossible joh hug wad 
reason laziness hinders efficient implementation 
acceptable efficiency lazy languages achieved 
done means graph reduction pey machine aug joh ponder implementation fw 
essential trick evaluate expression immediately safe construct graph 
strictness analysis reveal places optimisation safe 
ponder implementation strictness analysis speeds programs factor 
addition strictness analysis may enable optimisations destructive updating arrays hb 
accordingly strictness analysis received attention see ah collection 
elegant approach strictness analysis interpretation 
approach applied mycroft myc extended higher order third international conference functional programming languages computer architecture portland oregon september 
languages hy polymorphism abr 
excellent see cp 
remaining question great interest perform strictness analysis data types non flat domains lazy lists 
early proposal direction hughes analysis context expression may evaluated hug hug 
method determine useful information strictness programs lazy lists 
drawbacks 
clear exactly context 
somewhat informal concluded proper treatment welcome 
provided second modeled contexts abstractions sets continuations 
model completely intuitive proofs involved lengthy 
second context analysis yielded equations difficult solve 
equations solved algebraic manipulation descriptions manipulations required ran pages 
exact simplifications possible heuristics required decide approximations introduce 
example hug shows apparently reasonable heuristic lead unreasonably bad approximation 
third method applied order untyped languages 
extensions higher order polymorphic languages need developed 
wadler part inspired hughes discovered different method analysing strictness non flat domains drawbacks wad 
method straightforward extension interpretation built existing mathematical foundations intuitions 
second interpretation finite domains 
fixpoints straightforward techniques cp methods finding fixpoints efficiently directly applied pc yh 
algebraic manipulation required 
third interpretation extended include higher order languages polymorphism method 
open shut case 
quite 
turns context analysis reaches places interpretation reach 
shall see section primarily kinds strictness interest lazy lists head strictness tail strictness 
context analysis find 
interpretation find tail strictness find head strictness combined tail strictness 
find head strictness 
shame 
major paradigm lazy functional programming involves functions read bit input list produce bit output list acting coroutine 
functions head strict tail strict 
additional power context analysis important 
provides new description contexts addresses previous shortcomings 
simple believe intuitive explanation contexts 
notion context identified notion projection domain theory 
proofs involved simpler hug 
second finite domains contexts lists 
means standard fixpoint methods algebraic manipulation longer required 
third isn bad 
method limited firstorder monomorphic language 
reasons believe context analysis follow footsteps interpretation extended higher order functions polymorphism way doing outlined hug 
hoped new explanation contexts aid task 
history follows 
wadler discovered represent contexts projections sections studying hughes hug 
hughes discovered define finite domains contexts lists sections studying wadler wad 
written wadler 
contexts close relations strictness analysis including burn bur dybjer dyb hall hw wray fw 
contexts may applied analysing time space complexity analysing pre order traversal wad 
issues discussed section 
assumes reader knows domain theory see sco sto sch 
domains consistently complete algebraic cpos 
familiarity interpretation authors previous helpful required 
organized follows 
section introduces head strictness tail strictness 
section formalizes projections 
section extends method deal ordinary strictness 
section discusses finite domains contexts flat domains 
section discusses finite domains contexts lists 
section develops fundamentals context analysis 
section presents examples 
section compares related 
section concludes 
head strictness tail strictness usual list construction operator cons denotes list 
function identical strict head field computable function lists replaces example similarly function identical strict tail field computable function replaces say function head strict safe replace argument words head strict ffi similarly say tail strict ffi example head strict function returns segment list zero see 
cons cell examined head examined see zero head strict 
bottom occurs zero say xs case xs ys ys length xs case xs ys length ys doubles xs case xs ys theta doubles ys example programs required 
bottom occurs zero say required 
example tail strict function length finds length list 
cons cell examined length tail examined length tail strict 
tail field contains bottom length undefined instance length length required 
tail field contains bottom length defined head bottom instance length required 
characterization strictness useful enable important optimizations 
say program containing fragment form ffi know head strict 
fragment equivalent ffi ffi may replace call call new version operation produces part result replaced head arguments cons operations may evaluated immediately constructing graph evaluated 
lead significant improvements efficiency 
goal label sub expression program context function indicates components structure evaluated immediately 
see contexts indicate simple strictness information arguments function call need evaluated 
contexts provide useful information propagating contexts 
consider function doubles doubles element list 
clearly doubles head strict 
instance doubles doubles 
doubles doubles ffi hard see ffi doubles ffi doubles ffi doubles head strict head strict context 
head strict ffi doubles ffi ffi doubles ffi ffi doubles ffi showing safe replace argument doubles result examined head strict function 
reason head strictness particular importance printing may induce head strict context 
say expression returns list characters printed terminal 
print exactly results said character printer head strict tail strict 
traditionally function said strict 
tail strictness characterized similarly strict function tail strict iff tail 
holds tail 
similarly strict function head strict tail strict iff head tail 
approach wad 
true head strict head 
counter examples appear head 
main advantage context approach describe head strictness approach 
projections continuous function ff projection sco object ff ff ff ff line says projections remove information object 
second line says information removed applying projection second time effect 
properties written ff id ff ffi ff ff id identity function defined id ff fi fl denote projections 
seen projections characterize context value needed useful style strictness analysis 
words projection context 
projections form complete lattice ordering id top bot bottom bot function defined bot example projections seen far form lattice id ffl ffl ffl ffl bot ffl projection corresponds head tail strict 
say function fi strict context ff ff ffi ff ffi ffi fi write ff fi 
example seen id doubles alternate characterization ff fi result 
proposition ff fi iff ff ffi ffi fi 
proof forward direction ff ffi ff ffi ffi fi ff id may conclude ff ffi ffi fi 
reverse direction composing ff side gives ff ffi ff ffi ff ffi ffi fi ff ffi ff ff ff ffi ff ffi ffi fi 
fi id ff ffi ff ffi ffi fi gives desired equality 
strictness relation satisfies useful composition result 
proposition ff fi fi fl ffi ff fl 
proof immediate ff ffi ffi ffi fi ffi ffi ffi fl 
example id doubles may conclude noted previous section ffi doubles id similar argument shows ff fi fi fl fl ffi ff ffi 
particular ff id ff 
verify assertion projections form complete lattice 
take care upper bound 
proposition set projections exists projection 
proof ff ff id clearly exists id follows ffi remains show ffi object fff ff ag ff ff ag fff ff ff ag fff ff ag required 
difficulty arises 
ff fi denote largest continuous function ff fi may projection 
counter example consider domain fa cg ff fa 


cg fi fa 


bg 
fa 


bg projection 
adopt convention ff fi denotes largest projection fl fl ff fl fi 
counter example fl fa 


ag convention greatest lower bound set projections ua ffi ff fi ffg fi ranges projections 
follows proposition ua exists projection 
strictness absence projections characterize exotic concepts head strictness tail strictness tackled ordinary strictness defined 
projections characterize strictness possible requires extensions framework described far 
roughly speaking problem projections described far specify information sufficient information necessary 
example say head strict ffi know argument say sufficient value 
characterize strictness say information necessary 
particular projections say necessary value defined 
order specify information necessity projections extend domains new element pronounced abort symbol intended resemble lightning bolt 
interpretation ff ff requires value defined order interpretation require functions strict functions intuitively value acceptable mapped causes computation abort immediately 
define strictness projection str accept str 
projection satisfy ff beneath domain ordering 
extend domain new domain derived lifting adding new bottom element beneath existing bottom 

function extended function making strict 
functions strict may may strict 
particular cons strict 
technical point conditional strict fixpoint recursive function definition constant function 
want 
recursive functions definitions language take fixpoint function bot defined bot 
bot 
extended domains allow contexts specify information necessity 
value unacceptable context ff ff 
proposition ff fi unacceptable fi unacceptable ff 
proof assuming ff ffi ff ffi ffi fi fi gives ff ff fi ff required 
projection str defined setting str str str 
capture notion strictness precisely 
proposition str str iff strict 
proof forward direction value unacceptable str follows preceding result implies strict 
backward direction show strict str str follows str follows sides inequality reduce left str str right str 
id top element domain projections bot longer bottom 
new bottom element projection fail defined fail say function divergent results interest 
proposition str fail iff divergent 
proposition fail fail function proofs simple exercises 
corollary composition rule implies divergent ffi old projection bot abs absent defined abs abs abs 
say function ignores argument results interest 
proposition str abs iff ignores argument 
proposition abs abs function proofs simple exercises 
corollary composition rule implies ignores argument ffi projections discussing domain ordering id ffl abs ffl ffl str fail ffl just subdomain domain projections discussed fully section 
context analysis yield useful information compiler 
analysis succeeds labelling sub expression contexts interpretations apply ffl fail 
value returned acceptable 
compiler may safely implement code aborts program immediately 
ffl abs value ignored 
compiler may safely implement code returns dummy value 
ffl str 
value required 
compiler may safely implement code evaluates immediately graph need constructed 
ffl id value may required may ignored 
compiler safely implement constructing graph 
strictness annotations having exactly meanings wray strictness analyzer fw 
strictness analysers distinguish strict non strict arguments corresponding distinction str id 
compilation possibilities afforded fail abs extra optimisations available compilers 
call ff projection strictly speaking write id abs indicate domain projections 
usually omit domain subscript derived phrase goes context 
strict part projection ff ff ff str 
example id str abs fail 
context ff strict equal strict part equivalently ff str 
ironically implies ff called strict iff ff non strict iff ff 
problem analysing strictness context ff reduced analysing strictness context ff proposition ff non strict ff fi ff abs fi 
proof ff non strict ff abs ff abs ff ffi abs ffi ff ffi ffi abs ffi fi ffi abs fi required 
instance say strict function str str 
result needed argument needed 
id str abs str id id id result may may needed argument may may needed 
finite domains int flat domain integers 
clearly infinite number projections ff int specify quite precise information functions 
example integer equal projection defined equal equal equal equal follows applications expressiveness may useful precise required strictness analysis compiler 
fortunately need maintain precise information 
purpose context analysis label sub expression program context ff ff return result larger context sub expression appears 
clearly safe label ff safe label fi ff fi 
example safely approximate equal str gives notion approximation inverted usual 
inequality ff fi traditionally read ff approximates fi meaning ff defined fi may read ff approximated fi meaning ff conveys precise information fi values acceptable context 
purposes strictness analysis compiler may choose subset projections long closed operations interest long contains largest projection id analyzing flat domains integers choice point subdomain projections fid str abs discussed preceding section 
subset projections choose need include fail 
example point domain fid provide quite useful analyses 
point domain abs approximated id fail approximated str 
safe id safely approximates safe construct graph str safely approximates fail function going diverge anyway fail safe evaluate argument advance str 
finite domains lists list non flat domain lists elements domain example list int domain lists integers list list int domain lists lists integers 
discussed projections list section presents finite domains projections list analogous finite domains projections int previous section 
convenient define projection nil projection generator cons projection nil list defined nil nil nil nil ff projection fi projection list projection cons ff fi list defined cons ff fi cons ff fi cons ff fi cons ff fi ff fi projections describe lists precisely 
example cons id cons equal nil specifies context accepts lists length second element zero 
special interest projections treat elements list way 
ff projection projections fin ff inf ff list defined fin ff nil cons ff fin ff inf ff nil cons ff abs inf ff roughly speaking fin ff accepts finite lists element accepted ff inf ff accepts finite infinite lists element accepted ff 
accepts fin ff inf ff strict ff ff non strict 
projections related ones discussed previously equations str inf id id abs inf id inf str abs inf str fin id abs fin id fin str abs fin str projections defined introduced non strict 
corresponding strict versions course example length str fin abs length defined finite lists elements list ignored 
dc finite domain projections example int dc idg 
finite domain list dc projections list consists projections inf ff abs inf ff fin ff abs fin ff ff dc plus fail abs note str id implicitly included list dc str inf id id abs inf id id dc example dc point domain fid list dc point domain consisting projections plus abs fail 
diagram domain appears 
second example dc point domain fid str abs list dc domain sixteen points 
expect eighteen points theta fin fail inf fail abs fin fail abs inf fail points collapse 
identifications arise cons fail ff fail projection ff fin fail inf fail nil 
context analysis problem context analysis program defining projection ff wish find projection fi ff fi 
course just take fi id possible find smaller projection 
id ffl ffl str ffl ffl ffl ffl ffl ffl abs ffl ffl fail finite domain projections lists ideally ff find smallest fi ff fi 
difficulties 
clear smallest fi exists 
second exist computable 
observed str fail holds iff diverges argument find smallest fi solve halting problem 
settle finding fi necessarily smallest 
language analyse function need examine program defines 
small order language grammar variables constants function applications conditionals case ys case expressions function fixed arity function definitions form infixes allowed usual equivalent function name 
programs language shown section section 
projection transformers function arguments define transformer takes projection applied result projection may safely applied th argument 
satisfy safety requirement fi ff ff fi particular function argument fi ff safety requirement ensures ff fi easy show safety requirements satisfied iff ff fi fi fi ff similar expression variable define transformer takes projection applied projection may safely applied instance satisfy safety requirement fi ff ff fi values variables including 
usual denotes result substituting instance 
definition formal give semantics language defining ae expression environment ae 
safety requirement fi ff ff ae ae fi ae environment ae 
formal ff write ff 
having specified safety conditions give definitions satisfying conditions 
definitions primitive appear section 
program defining defined ff ff definition may turn refer definitions mutually recursive 
full definition 
looks forbidding don worry explained go 
clear rule defining safe satisfies safety condition rules defining safe 
follows show rules defining safe safe safe primitive follows recursion induction definitions safe 
ff ff ff ff strict ff fail ff ff ff abs ff abs constant ff ff delta delta delta ff ff str ff ff case ys ff nil ff cons ff ys ff ff definition ff rules definition obvious ff ff ff abs ff abs constant generally safe set ff abs appear example say constant function defined ff ff ff ff ff abs words evaluating context ff causes argument evaluated context ff second argument ignored 
operation results section guarantee safe set fail fail abs abs ff non strict may set ff abs ff defining ff restrict attention case ff strict fail 
aid doing introduce operator pronounced guard defined fail fi fail abs fi abs ff fi fi ff strict ff fail abs ff fi abs fi ff strict ff fail follows may safely set ff ff ff rule holds ff effect ff non strict fail 
assume rules ff strict fail 
application operation say wish determine ff 
need find ffi ff ffi go doing stages 
know definition ff fi fi fi ff 
second know definition fi fi fl fl fl fi 
third need find ffi fl fl ffi clearly take ffi fl fl little better 
functions strict assuming appears fl fl left hand side evaluates may safely set ffi 
define fl fl fl fl fl fl ffi fl fl shown rule ff ff ff safe 
function arguments get rule show 
appear problem 
appear fl fi abs won fl course 
example str str str str abs abs abs abs expression ignores value expect 
operation satisfies laws shown commutative associative idempotent abs unit fail zero distributes satisfies various properties nil cons people expect role played worth noting certainly different instance abs str str abs str fail 
shall see section dybjer inverse image analysis dyb considered restriction class projections identical 
commutative associative ff ff ff abs ff ff fail ff fail ff fi fl ff fi ff fl cons ff fi nil fail cons ff fi cons fl ffi cons ff fl fi ffi laws conditional expressions derive rule conditional expressions need find ffi ff ffi derivation proceeds sequence steps 
pointing incorrect derivation 
obvious step ff str ff ff ff strict str booleans 
domain containing law invalid 
example ff str integers true left hand side equation yields right hand side yields true evaluates 
step rule ff str ff str ff ff strict str booleans 
easy verify rule valid considering possibilities true false value ff str ff str ff fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi str fi ff fi ff 
step uses distributive law 
establishes rule ff str ff ff ff strict 
intuitive reading rule follows 
conditional expression evaluated strict ff evaluated str evaluated ff evaluated ff 
readers familiar strictness analysis interpretation note resemblance rule rule interpretation 
case expressions rule case expressions case ys ff nil ff cons ff ys ff ff ff strict 
intuitive reading rule follows 
case expression evaluated strict ff evaluate nil cons cell 
evaluates nil evaluated nil ff 
evaluates cons cell head cons cell evaluated evaluated ff head evaluated ff 
similarly tail evaluated ys ff 
evaluated cons ff ys ff ff 
concepts developed preceding sections proof safety rule straightforward lengthy 
outline key points 
start translate case expression case ys equivalent form null head zs tail zs ys zs zs new variable null head tail defined usual way 
proof uses facts ff head head cons ff abs ff tail tail cons abs ff laws 
pointed wad including case expressions language essential analysis uses finite domains lists 
case expressions rewritten terms head tail context analysis yield precise results 
case expressions essential gather place information head tail list evaluated 
primitive functions need define primitive function 
strict arguments may set ff ff str definition suitable primitives functions flat domains integers 
functions non flat domains lists need primitives defined language 
exception constructor function 
writing head tail confuse ff head ff tail ff ff 
hard verify definitions fit bill head ff list head ff tail ff tail ff ff list usual head tail follows head cons ff fi ff fi fail tail cons ff fi fi ff fail head tail take smaller 
examples applying analysis method previous section definitions figures gives results length ff nil cons abs length ff ff nil cons str head ff abs tail ff doubles ff nil cons head ff doubles tail ff append ff nil cons head ff append tail ff append ff ff append tail ff reverse ff nil cons head append ff rev append ff append xs zs case xs zs ys append ys zs reverse xs case xs ys append ys example programs append ff xs xs nil zs xs ff xs xs cons append ys zs ff append ys zs ys ff append ys zs xs ff nil abs cons head ff append ys zs tail ff ys head ff append ys zs ys tail ff abs nil cons head ff append tail ff append ff xs zs nil zs zs ff xs zs cons append ys zs ff append ys zs ys ff append ys zs zs ff abs ff abs zs head ff append ys zs zs tail ff ff append tail ff context analysis append usual assumes ff strict fail rule ff ff ff interested reader details derivation append shown 
results simplified improve readability reducing terms form abs fi fi 
surprisingly recursive function definitions yield recursive definitions projection transformers 
finite domains sections solve usual way limits ascending kleene chains cp 
instance length define length ff fail length ff nil cons abs length ff length str fail length str nil cons abs fail fin fail length str nil cons abs fin fail fin abs length str nil cons abs fin abs fin abs length str fin abs just expected length finite list ignores lists elements 
domains finite ascending chains guaranteed reach fixpoint finite number iterations 
algebraic simplification methods required 
list domain may construct finite tables calculating relevant functions cons head tail compute limits completely mechanical fashion 
applying techniques derive results id abs inf str str inf str doubles str str doubles inf str inf str append fin str fin str append fin str fin str append inf str inf str append inf str abs inf str reverse str fin id reverse fin str fin str line shows head strict recalling abs inf str line shows addition strict 
fact line follows immediately line application guard rule 
line shows doubles strict says line shows doubles head strict head strict context 
lines show context requiring completely evaluated list append completely evaluate arguments 
lines show head strict context append head strict arguments strict argument 
line shows argument reverse finite list line shows reverse evaluated head tail strict context argument 
results reverse particularly significant original contexts hug analysis reverse problematic 
analysis method applied functions common definition reverse insertion sort equally results 
method limitations 
major conditional case expressions special role 
instance define function cond cond replace arbitrary conditional equivalent call cond analysis transformed function may give worse result 
worrying research needed discover significant problem practice 
relation burn evaluation transformers 
geoffrey burn suggested evaluation transformers way controlling parallelism functional language implementation bur 
close relationships important differences 
burn introduces evaluators correspond projections id str main result re phrased terms follows safe evaluator sense waste safe apply corresponding projection sense change result 
example writing means spine evaluated parallel application different writing insists entire spine evaluated passed wastes evaluates unneeded portion spine tail strict 
key burn link operational notion safety wastes denotational doesn change result 
burn analysis wadler previous wad 
evaluation transformers take advantage extra information revealed projection analysis absence head strictness remaining open questions 
dybjer inverse image analysis 
inspired earlier context analysis peter dybjer devised method analysis inverse images open sets dyb 
method simple elegant mathematical foundation 
earlier contexts uses algebraic manipulation solve equations 
interestingly open sets dybjer correspond exactly restricted class projections 
open sets correspond projections ff additional restriction ff ff easy see restriction operation defined section exactly equivalent projections str satisfy restriction abs 
open sets describe strictness tail strictness appear ill suited describing absence head strictness 
hall strictness patterns 
cordelia hall strictness analyser strictness patterns hw 
striking similarities strictness patterns projections compare strictness pattern laws projection laws ff ff ff ff note strictness patterns reverse ordering 
appear strictness pattern corresponding abs hall extract useful strictness list say element strict 
hall examined question generate different versions procedure depending context called 
works appear complementary 
stressed simple foundations hall stressed practical issues building prototype 
wray strictness analyser 
relation point domain fid str abs stuart wray fw mentioned 
wray analyser handles higher order functions flexible type system inspired similar extensions backwards analysis outlined hug 
applications projections outside strictness analysis 
complexity analysis 
important open problem analysis time space complexity lazy functional programs 
devised elegant solution problem programming language martin lof type theory 
solution evaluation notes describe result program required 
appears straightforward adapt projections evaluation notes adapt method lazy functional languages 
pre order traversal 
connection wadler transformer necessary describe notion pre order traversal data structure wad 
done introducing function pre satisfying pre id pre ffi pre pre function pre order pre ffi pre ffi ffi pre words pre order traversal characterized projection 
applied directly solving problem posed analyse pre order 
exactly time authors pursuing strictness analysis described 
year wadler realized approach describe hughes 
provided simpler explanation contexts available previously 
finite domains lists possible solve recursive equations straightforward way standard fixpoint techniques advantages previous method algebraic manipulation 
important step extend backwards analysis languages higher order functions polymorphic typing way doing outlined hug 
applications projections outside strictness analysis suggested section 
hope approach provide fertile soil developments 
projection strictness analysis 

owes debt programming methodology group chalmers university technology goteborg 
context analysis written hughes visitor chalmers written wadler visitor 
grateful members staff pmg enjoyable stimulating supportive environment provided 
richard bird geoffrey burn peter dybjer cordelia hall thomas johnsson kent karlsson jon fairbairn simon peyton jones stuart wray fruitful discussions comments earlier draft 
wadler particularly grateful peter dybjer comments mathematical rigour lack earlier version 
part performed wadler research fellowship supported icl 
abr abramsky 
strictness analysis polymorphic invariance 
jones ganzinger editors workshop programs data objects springerverlag copenhagen october 
lncs 
ah abramsky hankin 
interpretation declarative languages 
ellis horwood 
aug augustsson 
compiler lazy ml 
acm symposium lisp functional programming pages austin 
burn hankin abramsky 
theory strictness analysis higher order functions 
jones ganzinger editors workshop programs data objects springer verlag copenhagen october 
lncs 

complexity analysis programs type theory 
programming methodology group chalmers university technology goteborg sweden 
bur burn 
evaluation transformers model parallel evaluation functional languages 
conference functional programming languages computer architecture portland oregon september 
cp clack peyton jones 
strictness analysis practical approach 
conference functional programming languages computer architecture nancy france 
dyb dybjer 
computing inverse images 
international conference automata languages programming 
fw fairbairn wray 
code generation techniques functional languages 
acm symposium lisp functional programming pages boston 
hb hudak bloss 
aggregate update problem functional programming systems 
th acm symposium principles programming languages pages january 
hug hughes 
functional programming matters 
technical report programming methodology group chalmers university technology goteborg sweden 
hug hughes 
strictness detection non flat domains 
jones ganzinger editors workshop programs data objects springer verlag copenhagen october 
lncs 
hug hughes 
analysing strictness interpretation continuations 
abramsky hankin editors interpretation declarative languages ellis horwood appear 
hug hughes 
backwards analysis functional programs 
university glasgow research report csc march 
hw hall wise 
compiling strictness streams 
th acm symposium principles programming languages pages munich january 
hy hudak young 
higher order strictness analysis untyped lambda calculus 
th acm symposium principles programming languages pages january 
joh johnsson 
efficient compilation lazy evaluation 
acm symposium compiler construction 
joh johnsson 
attribute grammars paradigm functional programming 
programming methodology group chalmers university technology goteborg sweden 
myc mycroft 
interpretation optimising transformations applicative programs 
phd thesis university edinburgh 
pc peyton jones clack 
finding fixpoints interpretation 
abramsky hankin editors interpretation declarative languages ellis horwood 
pey peyton jones 
implementing functional languages graph reduction 
prentice hall 
sch schmidt 
denotational semantics methodology language development 
allyn bacon newton massachusetts 
sco scott 
lectures mathematical theory computation 
technical report prg oxford university programming reseach group may 
sco scott 
domains denotational semantics 
conference automata languages programming pages springer verlag july 
lncs 
sto stoy 
denotational semantics scott strachey approach programming language theory 
mit press cambridge massachusetts 
wad wadler 
replace failure list successes 
conference functional programming languages computer architecture nancy france 
wad wadler 
better laziness ii composing functions 
jones ganzinger editors workshop programs data objects springer verlag copenhagen october 
lncs 
wad wadler 
strictness analysis non flat domains interpretation finite domains 
abramsky hankin editors interpretation declarative languages ellis horwood appear 
wray 
implementation programming techniques functional languages 
phd thesis university cambridge january 
yh young hudak 
finding fixpoints function spaces 
technical report yaleu dcs rr yale university dept computer science december 
