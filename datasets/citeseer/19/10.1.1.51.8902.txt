submitted aaai fall symposium question answering systems www cs utexas edu users papers knowledge approach question answering peter clark john thompson bruce porter knowledge systems dept computer science maths computing technology univ texas austin boeing po box seattle wa austin tx peter clark john thompson boeing com porter cs utexas edu march long term research goal create systems capable answering wide variety questions including questions unanticipated time system constructed questions tailored novel scenarios user interested 
approach augment line text knowledge question answering component capable reasoning scenario user provides synthesizing customized answers run time questions 
answer question system creates model user scenario interest infers facts required answer assembles facts single structure presents user 
process guided answer schemata di erent question type specifying information included answer organized 
describe implemented system approach applied di erent application domains 
conclude discussion strengths limitations approach 
long term research goal create systems capable answering wide variety questions including questions unanticipated time system constructed questions tailored novel scenarios user interested 
approach augment existing line text resources 
manuals documentation capable answering routine questions question answering component allowing system infer answers users questions outside scope text 
question answering component infers answers hand built knowledge base domain converts english simple template techniques presenting user 
resulting integrated system thought dynamic book dynamic manual user browse search material proactively ask questions reading receive answers back 
answers may customized user specific situation user desired level detail include answers requiring reasoning system 
implemented architecture style system evolved years projects 
architecture includes pragmatic style user interface user browse pre written text ask questions knowledge base integrated fashion reasoning component inferring situation specific inferring answers run time 
approach evolved earlier large scale knowledge base botany explored new domains including distributing computing help desk application training tool performing space science experiment 
application system included simulation capability allowing user simulation perform experiment ask questions context simulation 
discuss motivation knowledge question answering provide overview system architecture 
section describe detail questions answered step process creating initial representation user scenario interest inferring additional facts required answer guided answer schema assembling facts single unit presenting unit back user 
section critique approach highlighting strengths weaknesses 
motivation knowledge question answering clear literature certain classes questions simply retrieving paragraphs text achieve high performance levels 
start turing test winners modern case help desk applications systems easily rely heavily user interpret answer question text 
knowledgebased question answering system viewed augmentation rival retrieval approaches help answering questions requiring situation specific answers multiple pieces information need combined suitable pre written text available 
potential benefits knowledge component er follows customization answers synthesized knowledge base answers customized user particular situation example answering questions space experiment application state motor light come 
controllable level detail similarly level detail dynamically controlled suit user level expertise controlling information knowledge base included answer 
robustness inferring answers run time pre written paragraph text system respond questions unanticipated time system construction 
prototypes developed approach described demonstrate benefits particular exploiting inference scenario greater extent earlier knowledge question answering systems 
quest mckeown 
believe track achieving third current robustness limited incompleteness knowledge bases constructed 
discuss near achieving goals section 
client binds server access cds providing endpoints 
definition 
generalizations 
specializations 
questions page generator description 
purpose 
duration 
subevents 
knowledge base inference engine document repository section 
added links original links text hyperlinks added concept description menu questions machine generated thing 
documentation topic page user interface dce 
dce components binding event topic binding event description binding event 
purpose binding event 
qn answering procedures schemata application architecture 
left hand window displays text hyperlinks known concepts added 
right hand window displays machine synthesized page selected topic including hot spots asking questions topic answers 
approach system architecture describe architecture system section describe knowledge base inference engine user interface interact provide run time question answering capabilities 
mainly distributed computing environment dce application illustration 
briefly goal dce application augment line documentation dce knowledge question answering capabilities provide additional support novice users trying understand dce 
examples include manual pages questions distributed computing concepts 
architecture system depicted distributed computing application shown 
illustrated figures user interface consists side side windows left hand window displaying dce application pre written manual pages right hand window displaying run time generated screen topic topic concept represented knowledge base 
pages left hand window browsed user normal way independent question answering facilities clicking hyperlinks take new page 
displaying page module scans words phrases denoting concepts system knows 
represented knowledge base concept kb associated example screen dce application 
left hand window displays pre written text right hand window machine synthesized displaying information user selected concept topic 
user clicked question describe binding event described scenario interested shown 
system responded situation specific machine synthesized answer shown underneath question 
thing intangible activity physical artifact agent info image 
parts 
purpose 
describe 
actors 
malfunctions related 
role 
logging di erent question types attached general concepts kb question sense 
illustrates question types distributed computing application 
set english words phrases refer scans document words phrases 
adds hyperlinks words phrases indicating user click get information 
user clicks concepts page generator constructs page information concept displays right hand window 
user viewing page information concept binding event 
synthesize page page generator retrieves formats pieces information concept knowledge base generalizations superclasses concept specializations subclasses concept definition concept sentence text list applicable questions concept list related concepts pointers relevant manual pages concept important items list questions entry points knowledge question answering 
similar way system small collection generic question types 
describe parts knows answer 
question answering procedure defined 
question type associated concept kb set applicable questions concept attached concept superclasses 
example question equipment needed attached space experiment application concept activity appear list questions concepts list questions say physical objects 
way system selects displays questions sense particular concepts type 
question types attachment taxonomy distributed computing application shown 
user clicks questions right hand window starts question answering procedure 
computing answer user prompted describe select particular scenario system context generate answer customized scenario 
example user clicked describe binding event shown prompted name players scenario interested client netscape server web server server machine name 
answer procedure executed answer generated customized scenario displayed back user spliced original text window question illustrated 
user provided di erent scenario di erent answer generated 
di ering superficially names players involved customized answers may di er structurally types players selected ect answer 
example oracle client binds idiosyncratic way user selected oracle client prompted scenario entirely di erent answer reflecting generated question 
having read answer question user may ask questions click concepts explore information return browsing line material left hand window 
way user able navigate existing documentation view information concepts reads ask questions get customized machine generated responses concepts jump related pages original text 
allows user mix passive browsing information active question asking suits learning style 
question answering examples questions answers system generate di erent applications text form actual interface web browser illustrated 
note questions answered system context particular scenario part assumed scope purpose application part specified user described shortly 
answer vary depending scenario user describes 
pose question concept viewing right hand window 
binding event user clicks appropriate question displayed list applicable questions concept 
system request scenario synthesize answer stages 
creation ask create representation initial scenario act context answering question 

elaboration rules kb infer additional information scenario needed answer 
step guided answer schema question type specifying information included answer 

assembly gather inferred information format single html unit 

presentation answer user 
describe stages detail 
question describe binding event 
user selected scenario client server oracle sybase web server host speedy answer machine synthesized queries cell directory server network id oracle 
queries endpoint point mapper speedy oracle endpoint 
assembles binding network id endpoint 
distributed computing domain question rework rivet 
user selected scenario rivet type 
gf ft fv ms rivet diameter 
skin thickness 
answer machine synthesized skin thick standard replacement 
set tool diameter depth 
apply tool 
insert rivet 
rivet place 
ii factory task domain question equipment needed phase activation step 
scenario experiment current state simulation answer machine synthesized need screwdriver mm blade 
iii space experiment domain examples answers generated system response user 
user selects question list applicable question types prompted provide details scenario interest shown 
system synthesizes answer knowledge base reason scenario section 
interaction shown plain text form actual interface web browser 
host server client thing computer client server activity binding event instance superclasses domain knowledge represented frames run time generated instance graph representing particular scenario static dynamic working memory persistent memory speedy oracle knowledge base contains parts static persistent part containing frames representing domain knowledge dynamic part containing run time generated instances model particular scenario interest 
inference engine applies rules static part infer properties instances elaborating instance graph order answer questions 
creating initial scenario containing rules domain concepts kb contains working memory reason particular scenarios user may interested 
working memory populated ground facts instances interest answering question 
facts constitute partial model user scenario thought pictorially instance graph 
subsequent step elaboration section rules kb applied instances infer additional properties elaborating graph 
organization knowledgebase illustrated 
stage question answering system seeds instance graph initial instances representing scenario interest 
context user wants answer generated 
instances thought key players scenario 
key players range possible values listed frame concept user currently looking 
way system knows players needs ask user name select 
system asks user identity players popping html fill form fill containing menus radio buttons text boxes select appropriate 
textual equivalents forms shown 
example players listed kb binding event client server server host machine clicking question binding events user asked select provide values players 
describe event 
subevent se event query 
summary se query 

recursively subevents query add see details hot spot hyperlinked procedure describe event se 

known problems occur query add possible problems hot spot hyperlinked procedure possible problems se 
parts 
foreach part query 
name query 
subparts query add see subparts hot spot hyperlinked procedure parts 
image object 
find image file associated query 
display image 
answer schemata question types 
schema specifies answer contain components assembled 
component kb query associated denoted sent kb compute value needed 
system creates instances denoting players working memory 
describe binding event question working memory contain initial instance graph shown host server binding event client oracle speedy elaboration inference guided answer schema answer schemata stage question answering look infer various pieces information required answer 
system know constitutes answer question 
information required answer order 
specified answer schema referring far answer procedure type question asked question type having single answer schema associated answer schema spec fact single question type may multiple answer schemata handling di erent class object 
example describe answer schemata object components information required answer 
components kb query expression associated submitted inference engine find information context current scenario 
shows examples answer schema 
approach similar inspired explanation design packages knight system similar style schemata question answering systems 

inference schema filled queries contains sent inference engine answers computed returned schema 
answer queries inference engine may need apply general rules kb instance graph infer requested properties 
kb expressed frame representation language km similar style 
concept domain represented data structure called frame number slots filled values 
values frames expressions evaluate point frames 
formally just convenient notation horn clause rules typed fol frame names correspond classes types instances constants slots correspond relations frame structures correspond grouping horn clause rules share type restriction head predicate argument 
part frame concept binding event distributed computing application shown 
full details kb language 
query schema asks property instance scenario 
example query describe event schema query subevents instance topic concept scenario 
binding event 
inference engine finds property simple lookup instance graph evaluating expression inherited instance classes kb 
evaluating expression may involve calls inference engine recursing 
results added instance graph inference thought growing instance graph lazy fashion applying rules kb elaborating just answer queries posed answer schema 
di erent initial instances may result graph growing di erent ways depending properties initial instances 
exchanges inference engine shown issued manually knowledge engineer query interpreter prompt km 
queries issued automatically answer schema 
create initial scenario binding event client server server host specified 
km binding event client server oracle server host speedy binding event activity 
question type object type uniquely determine appropriate schema 
binding event superclasses event binding event event 
binding event binding event client client process client process server server process server process network network occurs computer network 
subevents binding event subevents query 
query 
agent client self client 
queried cell directory server queries cds 
network self requested network id host host network id 
server self query 
query 
agent client self client 
queried endpoint mapper queries host ep mapper 
host server self requested endpoint endpoint 
server self assemble 
assemble 
agent client self client 
assembled binding assembles binding 
components 
network id network id 
host server self endpoint server self server endpoint 
players client self key players client 
server self server 
host server self server host 
subevents binding event query query assemble server client network agent queried request queried agent agent request components network server process client process cds net id host host net id host representation concept binding event distributed computing kb shown formally language km informally sketched graph 
note access paths resolved run time inference engine particular instance binding event denoted self consideration 
subevents binding event 
km subevents binding event query query assemble agent second subevent 
km agent query result inheriting evaluating path client self binding event queried second subevent 
km queried query endpoint mapper endpoint mapper 
km endpoint mapper endpoint mapper speedy note answer queries inference engine pulled information binding event frame frames kb 
example subevents binding event evaluating expression subevents slot binding event creating instances query query assemble denoting subevents 
queries attached answer schemata issued run time schema find components answer 
example describe event answer schema binding event issue queries 
subevents binding event query 
subevent returned 
query query assemble 
summary query query 
subevents query query 
possible problems query query result query instance graph gradually elaborated 
inference engine answered queries graph looks subevents host server client network cds agent queried request network id endpoint queried agent agent request components query query assemble binding event network cds endpoint net id endpoint mapper oracle speedy additional nodes arcs depict additional information inferred binding event related instances inference process answering queries 
text generation english sentences generated kb simple fill blank templates 
describing query event template queries templates stored summary slots concepts kb frame query includes template query summary agent self queries queried self request self answer schema ask values summary slot query instance inference engine return list strings instance names 
simple sentence procedure replaces instances print names concatenates result capitalizes letter adds period print name unnamed instance class default illustrate km query create query 
agent fred queried joe request address query km summary query ask summary query 
fred queries joe address km sentence summary query concatenate pieces 
fred queries joe address 
km sentence summary query similarly query earlier 
payroll queries endpoint mapper speedy oracle server endpoint 
km subevents binding event create new binding event query query assemble customization 
km sentence summary query summarize query subevent 
client process queries endpoint mapper server machine server process endpoint 
examples show template filled di erent ways 
example specify client new binding event km knows client process client slot binding event name client process constructed similarly fillers 
assembly answer specifying components needed answer question answer schemata specify assemble components single structure shown 
involves straightforward manipulation answers queries example concatenating strings adding low level html formatting commands 
bullets extra hyperlinks result web interface 
presentation user answer relayed back user displayed 
separate module keeps track right hand page user currently viewing constructs new page similar user viewing assembled answer spliced 
new page returned user giving user impression page expanded include answer illustrated 
user click hyperlinks get details view di erent concepts return browsing original material left hand window 
status discussion lessons learned performed formal evaluation approach substantial number significant interesting issues concerning discuss 
architecture originally developed distributed computing help desk prototype 
applied aircraft assembly task boeing knowledge tutoring system space experiment 
addition simple illustrations approach built domains 
prototypes received achieved regular usage primarily due incompleteness underlying knowledge bases discuss shortly 
significant potential benefits knowledge approach provides ability generate situation specific answers run time answer questions unanticipated time system construction 
described achieved run time inference model reason user provided scenario 
situation specific questions di cult impossible answer pre written paragraphs text available 
major motivation original distributed computing dce application typically general text line documentation unhelpful users frequently di culty working applies situation 
ability answer unanticipated questions idea general knowledge kb 
space application lights burn applied specific concepts 
power light space experiment run time 
able demonstrate capability limited way specific questions achieve fully requires knowledge base complete substantially knowledge general concepts kb 
main bottleneck projects known literature task building knowledge base place 
applications part knowledge required cover application domain encoded final systems able answer handful questions substantially ort needed complete coverage 
barrier stumbling block knowledge projects solution actively pursuing research theme construction knowledge base prefabricated reusable knowledge components hand built scratch 
approach research topic hopeful significantly ease knowledge modeling bottleneck 
second related issue constructing knowledge base requires skilled knowledge engineer see need powerful easy authoring tools allow subject matter expert knowledge engineer enter required knowledge simple interface 
limitation original dce application inability knowledgebase model dynamic situations 
represent reason actions ects 
result certain important classes questions requiring hypothetical reasoning 
handled dce application 
major step forward add simulation capability knowledge representation language km situation calculus model reason world dynamics 
space application user browse text perform experiment simulation selecting actions perform step pose questions context current simulation state 
improved original dce application scenario question automatically 
current simulation state having manually entered user time question asked 
course questions user situation specific simply retrieving paragraph pre written text su ce 
user browse access pre written text architecture added capabilities better search index text focussed primarily knowledge aspect 
clearly beneficial applications better incorporate methods questions customization required 
addition certain classes questions outside scope framework particularly require sustained dialog 
diagnosis shot question response 
dealing types questions challenging high style question answering outside scope text approaches 
despite cost knowledge approach believe long run question answering system understand 
inference capable internal representation talking avoid brittleness achieve versatility people ultimately desire 
architecture presents implemented practical framework systems illustrates potential benefits provided 
porter lester murray pittman acker jones 
ai research context multifunctional knowledge base botany knowledge base project 
tech report ai dept cs univ texas austin sept 
peter clark bruce porter 
dce help desk project 
www cs utexas edu users dce html 
peter clark john thompson mary lynne 
kb phase training tool space station experiment 
technical report boeing applied research technology seattle wa 
www cs utexas edu users papers 
requiring reasoning hypothetical situation wasn boris katz 
sentence processing information access world wide web 
proc 
aaai spring symposium natural language processing world wide web ca 
aaai 
www ai mit edu projects 
michael mauldin 
chatterbots turing test entering prize competition 
aaai pages ca 
aaai 
see www net prize html 
arthur graesser stanley franklin 
quest cognitive model question answering 
discourse processes 
kathleen mckeown 
text generation 
cambridge univ press uk 
james lester bruce porter 
developing empirically evaluating robust explanation generators knight experiments 
computational linguistics 
kathleen mccoy 
generating context sensitive responses object related misconceptions 
artificial intelligence dec 
peter clark bruce porter 
km knowledge machine users manual 
technical report ai lab univ texas austin 
www cs utexas edu users km html 
bobrow winograd 
overview knowledge representation language 
brachman levesque editors readings knowledge representation pages 
kaufmann ca 
originally cognitive science 
peter clark bruce porter 
building concept representations reusable components 
aaai pages ca 
aaai 
www cs utexas edu users papers 
peter clark bruce porter 
km situations simulations possible worlds 
technical report ai lab univ texas austin 
www cs utexas edu users km html 
