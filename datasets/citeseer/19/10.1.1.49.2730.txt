calculus uml rt specifications grosu broy selic gh 
stefanescu institut fur informatik tu munchen munchen limited ontario faculty mathematics university bucharest ro bucharest email grosu broy tum de bran com ro unified modeling language uml developed coordination object management group omg important standards specification design object oriented systems 
standard currently tuned real time applications form new proposal uml real time uml rt rational software limited 
importance uml rt investigating formal foundation joint project limited technische universitat munchen university bucharest 
part foundation theory flow graphs 
specification design interactive system complex task data behavior architecture distribution aspects modeled system 
specification assure successful communication customer software expert 
order fulfill requirements uml rt specification interactive system combined visual textual specification called capsule class built hierarchically shown left 
capsule class associated visual specifications structure specification behavior specification 
structure specification gives architecture capsule terms capsules connectors duplex channels capsules 
connectors typed associated protocol classes defining messages allowed flow connectors 
types messages protocols defined terms data classes directly rpl flow messages channels controlled run time system 
behavior capsule controlled state transition diagram 
state variables functions occurring diagram defined terms data classes rpl 
detailed description actions associated transition rpl 
uml rt visual specifications build top sequential object oriented language 
special actions sending message setting timer performed calling run time system 
uml rt builds communication synchronization model 
sender may send message asynchronous communication model 
behavior structure controls uses uses models implemented component model models models structure model behavior model state model interaction graphs flow graphs controls uses rpl uses uses uses uses uses encoded embedded data class run time system capsule class layers uml rt semantics currently define uml rt joint project limited technische universitat munchen university bucharest follows similar hierarchy shown right 
consists behavior model state model 
model interprets associated interaction graph 
graphs closely resemble uml rt visual specifications 
completely formalized ideal candidate semantics 
structure model defines structure capsule class terms capsules connectors capsules 
defines synchronization capsules 
behavior model defines behavior capsule terms hierarchical states transitions states 
state model equivalent data classes object oriented languages 
allows define arbitrary data types functions processing types 
structure behavior models 
contrast uml rt model interaction graphs 
semantics uml rt completely visual independent particular programming language 
rpl rapid prototyping language simple object oriented language smalltalk 
interaction graphs implemented flow graphs 
contrast interaction graphs appropriate high level design ones low level graphs causality explicit 
obvious space limitation concentrate theory flow graphs 
theory characterized elements visual notation textual notation calculus 
visual notation consists set primitives visual form 
define user interface editor diagrams 
textual notation consists set graph construction primitives textual form 
define internal representation primitives 
textual form automatically generated visual form usually hidden user 
roughly understood program runs computer 
calculus engine allows transform diagram diagram meaning optimizes time space 
determines diagrams equivalent 
calculus consists set equations identify equal graphs 
immediately allows compare diagrams 
orienting equations left right obtains rewriting calculus interpreter 
rest organized follows 
section introduce syntax flow graphs 
section calculus flow graphs 
section non trivial flow graphs transformation calculus 
section draw 
flow graphs syntax hierarchical flow graph consists set nodes connected set directed arcs 
treat syntax flow graphs axioms 
nodes consider graph shown left consisting nodes arrow regarding sets types regarded function transition relation mapping elements elements corresponding textual notation alternative representation nodes arrows turns important element graph change roles nodes arrows obtain graph shown right 
graph intuitive computational interpretation computation unit receiving input port messages type environment sending output port messages type environment 
notation suited description open systems 
systems connected environment 
shall notation 
example right hand side notation uml rt architecture behavior specifications shown 
actors states uml rt architecture specification capsule receiving messages type sending messages type duplex port 
tuple gamma said protocol defining input output messages flowing port 
behavior specification extended state entry point incoming transition exit point outgoing transition 
graph primitives shown consider operators nodes sequential composition visual attachment feedback visual attachment sequential composition feedback node operators sequential composition 
basic way connect nodes sequential composition shown left connecting output node input node type 
textually denote operator semicolon 
define type regarding nodes computation units left says output produced directed input connection units internal words define connection relation containment relation 
visual attachment 
visual attachment mean nodes corresponding arrows put near shown middle 
obtain textual representation visual attachment need attachment operator arrows nodes 
denote operator arrows visual attachment expressed nodes visual attachment expressed visual attachments defines containment relation 
say contained feedback 
sequential composition allows connect nodes linear way 
deal loops introduce feedback operator shown right allows connect rightmost output node rightmost input node type 
define feedback introduces containment relationship 
say feedback arrow contained connectors graph primitives allow construct wide variety graphs set nodes 
primitives strongly typed arrows involved nodes match arrows expected primitive 
take care possible mismatches introduce shown standard nodes identity transposition identification ramification allow plug nodes call connectors 
transposition identity identification ramification connectors identity 
conjunction visual attachment identity connector allows adapt interface node way explicit change 
transposition 
transposition connector ab allows take care left right mismatch exchanging left arrow right arrow 
identification identification connectors aa allow merge concentrate control flows behavior specifications synchronize communication architecture specifications 
ramification 
ramification connectors allow distribute control behavior specifications copy broadcast messages architecture specifications 
flow graphs properties section properties graph construction primitives connectors 
define calculus flow graphs 
general flow graphs section deal general flow graphs 
section treat specific aspects data flow control flow graphs 
cat unit cat associativity properties sequential composition sequential composition section defines axioms sequential composition 
associativity unit 
suppose connect nodes shown left 
require maps way sequential composition associative 
consequence drop internal box visual notation parenthesis textual notation 
put way implementation left parsing composition considered equivalent right parsing mixed parsing 
arrow require existence identity node node forwards input output 
visually represent node arrow arrow surrounded dashed box want emphasize 
node plays role neutral element composition shown right 
mathematical terms graph equipped composition operation identities composition associative identities neutral elements called category cat 
commutativity associativity unit preserves composition preserves identities properties visual attachment visual attachment functoriality 
composed nodes form wonder visual attachment relates sequential composition 
reasonable assumption visual attachment preserves sequential composition identities shown gamma 
mathematical terminology mapping nodes arrows having properties called functor 
associativity unit 
similarly sequential composition require visual attachment nodes associative unit identity node shown gamma 
arrow unit visual attachment arrows 
mathematical terminology category equipped functor associative neutral element called strict monoidal category smc 
commutativity 
nodes may visually attached different ways left left 
mainly interested near relation attachments equivalent 
general assume think sets product safely assume isomorphic denote corresponding transposition isomorphism 
commutativity expressed 
transposition extended neutral arrow composed arrows shown gamma 
mathematical terminology strict monoidal category symmetric 
tmc superposing tmc tmc vanishing tightening tmc tmc vanishing sliding tmc properties feedback feedback naturality properties 
desired relation feedback sequential composition shown tmc gamma 
equation called tightening scope feedback 
second equation called sliding slides feedback loop 
mathematical terminology says feedback operator natural arrows superposing 
relation feedback visual attachment transposition shown tmc gamma 
equation called superposing feedback visual attachment 
second equation called behaves rope 
feedback composed arrows 
category monoidal contains arrows consequence define behavior feedback arrows 
defining behavior reducing behavior behavior shown tmc gamma 
equations called vanishing equations show decompose feedback loop 
mathematical terminology strict symmetric monoidal category feedback operator satisfying tightening sliding superposing vanishing axioms called trace monoidal category tmc 
identification mon mon commutativity mon unit mon identification mon unit associativity mon identification mon unit properties identification associativity 
visual attachment associative unit commutes transposition require shown mon gamma aa associative unit commutes transposition 
equation mon allows construct replace ary identification left right parse binary identifications 
equation mon allows eliminate identifications equation mon allows eliminate transpositions 
equations may optimize internal representation 
mathematical terminology says arrow equipped commutative associative connector neutral element commutative monoid 
extension arbitrary arrows 
identification connectors extended shown mon gamma 
equations mon gamma allow eliminate identifications empty arrows 
equations mon gamma give inductive algorithm construction identification connectors composed arrows 
arrow monoidal category commutative monoid structure 
mon mon unit com com counit properties morphisms monoid morphisms 
nodes preserve structure called monoid morphisms 
morphism property mon gamma 
morphism property tremendous role optimization allows eliminate nodes 
example optimization section 
ramification com ramification com counit com ramification com counit com com counit com properties ramification 
properties ramification mirror image corresponding properties identification shown 
monoids com allows optimize sequences binary ramifications com allows eliminate ramifications com allows eliminate transpositions 
mathematical terminology says arrow equipped connector neutral element commutative comonoid 
extension arbitrary arrows 
ramification connectors extended shown com gamma 
equations com gamma allow eliminate ramifications empty arrows equations com gamma give inductive algorithm construction ramification composed nodes 
arrow monoidal category comonoid structure 
comonoid morphisms 
nodes preserve structure called comonoid morphisms 
morphism property com gamma 
morphism property plays important role optimization allows eliminate nodes 
identification ramification visual attachment identification ramification generates monoid comonoid structure arrow consider structures relate 
reasonable requirement identification preserves structure generated ramification equivalently ramification preserves structure generated identification 
words identification comonoid morphism ramification monoid morphism 
analogy call case 
requirement comonoid morphism bim gamma 
bim bim counit bim counit unit unit bim properties practical point view equations bim bim allow eliminate identifications ramifications 
requirement comonoid morphism bim gamma 
optimization point view bim gamma allow eliminate identifications ramifications 
flow graphs equations far express properties common structure behavior diagrams 
sections introduce additional properties refine flow graphs 
properties closely related monoid comonoid morphism properties 
data flow graphs data flow graph flow graph arrow unique node mapping arrow unit arrow connector mathematical terminology says node satisfies comonoid morphism property com terminal element 
write case 
deterministic data flow graphs node satisfies comonoid morphism property com node deterministic data flow graph comonoid morphism 
connector allows define projection connectors shown 
comonoid properties show projections properties prod gamma 
prod nd projection st projection prod definition projections projection connectors properties uniqueness assures unique nodes isomorphism having properties prod gamma 
composed node written axioms mathematical terminology unique connectors satisfying prod prod product data flow graphs finite products 
monoidal functor written case theta identification ramification connectors ffi ffl ffi ffi respectively 
ramification connector called case diagonal connector 
control flow graphs control flow graph flow graph arrow unique node mapping unit arrow connector mathematical terminology says node satisfies monoid morphism property mon initial element 
write case 
deterministic control flow graphs node satisfies monoid morphism property mon node deterministic control flow graph monoid morphism 
st injection nd injection definition injections injection connectors properties connector allows define injection connectors shown 
monoid properties show injections properties equations gamma 
uniqueness assures unique nodes isomorphism having properties gamma 
composed node written axioms node works case analysis argument comes applies comes applies mathematical terminology unique connectors satisfying gamma coproduct sum control flow graphs finite coproducts 
monoidal functor written case identification ramification connectors ffl ffl respectively 
case identification connector called connector 
note controlflow graphs obtained data flow graphs reversing direction arrows 
say control flow graphs dual data flow graphs 
mixed flow graphs mixed flow graph flow graph having sums products products distribute sums arrows exist isomorphism thetab thetac theta 
isomorphism new connector denoted ffi 
mathematical terminology theta ffi define distributive category structure flow graphs 
explicitly distinguish sums products mixed flow graphs different interface layering shown 
information may left implicit 
sum assoc mem product shading conventions connectors ffi gamma ffi may understood generalization de multiplexers associative memories 
particular case obtain theta set booleans 
case connector ffi gamma thetab acts de multiplexer 
data input control input forwards output second output 
values written simply false true 
connector ffi thetab acts associative memory 
forwards data output channel number received control output 
true false branching predicate define help ffi gamma branching connector um rt charts mixed flow graph shown left 
connector conjunction sequential composition identification allows define fi construct middle 
allows define conjunction feedback od construct shown right 
binary branching may easily extended ary branching replacing delta 
isomorphism properties 
properties dis gamma say ffi ffi gamma inverse 
mixed superposing 
important question answer relate product dually multiplicative feedback sum 
corresponding properties dis gamma 
isomorphism right left dis superposing product dis isomorphism left right dis superposing sum dis properties distributivity intuitively dis says compute parallel output result simultaneously 
faster idle finishes computation 
achieved feedback requiring nodes idempotent 
perspective dis allows push feedback outside expression 
intuitively dis says time unit allowed compute result depending control information input data ffl ffi 
input form output produced case current feedback value preserved 
achieved putting parallel identity simply forwards output 
input form output form computed feedback input perspective dis allows push feedback outside expression 
example flow graph transformation suppose team developed component second team implement component im third team implement component question component may optimized 
definitely possible shown 
sliding tmc def tmc tmc def tmc tmc mon mon tmc graph transformation tmc move tightening tmc move inside internal box 
morphism property mon move identification 
tightening tmc drop internal box 
transformation non trivial 
visual representation interface textual representation tool designer interface immediately related original diagram textual representation 
final component optimized eliminated component may important consequences large hardware component 
main benefits flow graph theory summarized follows 
introduces set graph construction primitives consistent way diminishes arbitrariness choice primitives 
second provides mathematically precise semantics primitives 
useful tool designers system development engineers eliminates misinterpretation 
third provides calculus allows compare optimize designs rapid prototyping 
visual notation interface system engineers textual notation interfaces tool developers 
general calculus flow graphs new 
context flow charts 
axioms feedback independently rediscovered 
intuitive names axioms borrowed 
similar properties identification ramification 
flow graphs operators description interactive systems dynamic systems 
treatment data flow control flow graphs specialization flow graphs knowledge new 
holds treatment mixed flow graphs 
particular axioms bis gamma relates additive timeless feedback multiplicative parallel composition 
second relates multiplicative timed feedback additive alternative composition 
conditions related bis occur 
lacks feedback operators formalization complicated transparent 
flow graph theory context visual formalisms especially uml rt new 
theory forms basis development theory interaction graphs 
particularly relevant uml rt structure diagrams definition procedures behavior diagrams 
treating structure diagrams procedures ordinary data manipulated sent channels interaction graphs allow description mobile systems 
axiomatization interaction graphs similar spirit general form geometry interaction 

retracing paths process algebra 
seventh international conference concurrency theory concur lecture notes computer science pages 
benson 
foundations distributed concurrent computation 
fundamenta informaticae 
broy 
semantics finite infinite networks concurrent communicating agents 
distributed computing 
gh 
stefanescu 
new algebraic foundation flowchart scheme theory 
fundamenta informaticae 
grosu st len 
model mobile point point data flow networks channel sharing 
proc 
th int 
conf 
algebraic methodol ogy software technology amast munich pages 
lncs 
joyal street verity 
traced monoidal categories 
math 
proc 
camb 
phil 
soc 
vigna rfc walters 
note recursive functions 
mathematical structures computer science 
selic rumbaugh 
uml modeling complex real time systems 
available www com uml april 
