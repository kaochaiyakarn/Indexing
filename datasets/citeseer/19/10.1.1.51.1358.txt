points analysis type inference programs structures unions bjarne steensgaard microsoft research interprocedural flow insensitive points analysis algorithm monomorphic type inference 
source language model important features including pointers pointer arithmetic pointers functions structured objects unions 
algorithm non standard type system types represent nodes edges storage shape graph 
extension previous performing points analysis programs linear time 
new contributions 
extension type system describing storage shape graphs include objects internal structure 
second constraint system deal arbitrary pointers incorporates tier domain pointer offsets improve results analysis 
third efficient inference algorithm constraint system leading algorithm close linear time space performance practice 
keywords interprocedural program analysis points analysis programs nonstandard types constraint solving 
modern optimizing compilers program understanding browsing tools pointer languages ame kr dependent semantic information obtained alias analysis points analysis 
alias analyses compute pairs expressions access paths may aliased lr 
pointsto analyses compute store model locations cwz egh wl ruf 
points analysis results serve purpose prerequisite analyses transformations imperative programs computing def relations permitted code motion detection uninitialized variables 
current compilers programming tools intraprocedural points analyses polynomial time space complexity common data flow points analyses prevents interprocedural analyses large programs 
interprocedural analysis increasingly important prerequisite program optimization various program understanding tools 
author address microsoft microsoft way redmond wa usa 
mail research microsoft com int float struct fint struct fint float int int phi phi phi phi phi phi phi phi phi phi phi phi phi phi ae ae ae ae ae 
small program fragment storage shape graph algorithm builds types typing program variables 
type represents structured variables program 
third type component represents structure elements extend previous flow insensitive interprocedural points analysis programs type inference methods ste ste enabling algorithm distinguish components structured objects increasing precision analysis presence structures unions program analyzed 
members research group extension crucial value accuracy subsequent analyses detection uninitialized variables 
extended algorithm linear time complexity original algorithms exhibiting close linear time complexity practice sect 
discusses complexity 
algorithm type inference domain types model storage shape graph cwz 
inferred types describe memory locations 
declarations locations irrelevant 
algorithm computes valid typing memory locations inconsistent ways contrast ml type inference fail compute typing case 
example illustrating types modeling storage shape graph program shown fig 

computed solution storage shape graph conservative description dynamic storage shape graphs program points simultaneously 
programmers locations consistent manner programs loss precision computing separate solutions program point typically small 
computing storage shape graph permits algorithm fast large programs 
proceed stating source language sect 
captures essential parts programming language non standard set types model storage sect 
set typing rules programs sect 

finding typing program obeys constraints imposed typing rules amounts performing points analysis 
show efficiently deduce minimal typing obeys constraints sect 
report practical experience algorithm sect 

describe related sect 
point directions sect 

allocate op fun syntax relevant statements source language 
range unbounded set variable names constants 
ranges unbounded set structure element names 
op ranges set primitive operator names 
denotes sequence statements 
assignment operator annotated size indicating size representation value assigned 
control structures language irrelevant 
source language describe points analysis pointer language structures unions captures important properties programming language ame kr 
analysis flow insensitive control structures language irrelevant 
important feature language memory object may accessed unit structured object 
type casts variable declarations irrelevant source language permits inconsistent locations memory object structured object constructs 
unions implicit memory objects 
shows syntax relevant parts language 
syntax pointer operations borrows programming language 
variables assumed unique names 
op expression form describe primitive computations arithmetic operations 
allocate expression dynamically allocates block memory size functions constant values described fun expression form variables formal parameters called parameters variables return values called parameters 
function calls call value semantics asu 
formal return parameter variables may appear left right hand side position statements function body 
assume programs behaved portable programs 
allow assignment structured value location supposed hold pointer values vice versa provided representation assigned value fits size representation object modified 
analysis algorithm may produce wrong unsafe results programs construct pointers scratch bitwise duplication pointers control flow data flow non portable programs programs rely specific compiler allocates variables relative 
previously described analyses suffer problem 
analysis algorithm deal exclusive operations pointer values flow values 
allow functions multiple return values feature types purpose performing points analysis define non standard set types describe store 
types unrelated types normally integer float pointer struct 
types model storage program runtime storage model 
locations program variables locations created dynamic allocation described types 
type describes set locations possible runtime contents locations 
types able model simple locations accessed integer variables structured locations locations accessed inconsistent ways 
want accommodate inconsistent accesses locations minimal information loss 
different kinds types blank describes locations access pattern simple describes locations accessed struct describes locations accessed structured objects object describes locations accessed ways covered kinds types 
structured objects may accessed inconsistent ways 
want struct types able describe commonalities accesses anyway 
assume structures common prefix share layout common prefix elements 
struct types component types describing distinguishable components location distinguishable means access part memory object accesses single component 
program fragment fig 
distinguishable component describes element structured objects second element third remaining components 
size access important 
example pointer value may point integer component structured object access pointer larger size integer components structure pointed may modified retrieved 
example program fragment shown fig 
extended long structures distinguishable components 
type memory object describe contents object 
pointer values relevant 
describe pointers locations type representing object pointed offset may zero unknown 
pointer unknown offset indirect assignment don know part referenced object modified object described object type 
functions function pointer values described signature types describing locations argument result values 
non standard set types points analysis algorithm described productions simple ff struct object ff blank objects ff theta pointers zero unknown offsets lam functions size 
sizes 
parents element 
mapping elements simple simple ptr simple ptr simple ptr simple ptr struct int 
int int 

simple ptr simple ptr simple int simple int object typing program fragment fig 
terms types analysis algorithm 
types describe objects object components ff types describe pointers locations types describe pointers functions 
type components mappings structure element specifiers component types 
element specifiers symbolic numeric 
type components describe object object component sizes 
sizes numeric symbolic 
size indicates rest memory object types describing objects different sizes 
type components describe set struct types parents type component 
value means parents introduced enable requirement type parents allowing upper bound operators inference algorithm 
assume programmer denied knowledge activation record layout consider parents type 
types may recursive type graph may cyclic 
types may written type identifiers type variables 
types equal described type identifier 
note different usual structural equality criterion types 
structural equality criterion added tag types 
shows typing variables program fragment fig 

typing rules section define set typing rules set non standard types defined previous section 
typing rules specify program typed 
typed program static storage shape graph indicated types safe conservative description possible dynamic runtime storage configurations safely describes storage 
kinds storage source language 
pointer indirection uses pointer location 
computing address structure element location structured object 
uses force location addressed described simple struct type respectively partial order described 
third kind assignment entire objects 
example assign structured value location contents location assigned inconsistent ways 
assigned location described object type assigned location may described struct type 
partial order describe relationship type assigned location type assigned location 
partial order parameterized size size representation assigned value smaller types assigned location avoid problems unmodeled capture adjacent elements structured object 
size constraints trivially fulfilled types describe entire objects entire rest objects 
partial order uses hierarchy kinds types blank gamma simple struct gamma object necessary sufficient requirement hold kind kind appears kind hierarchy 
offset component unknown assume worst usage described memory location memory object component object kind 
flow data assigned location assigned location pointer content assigned location described content components assigned location 
describe relationship assigned assigned location contents partial order memory function pointer component types respectively defined follows theta theta 
sizeof zero 
sizeof denotes size component kind type example necessary requirement simple ff simple ff hold ff ff hold 
equality ordering 
primary reason doing discussed ste 
particular importance type system permits non pointer content components struct mappings value struct location assigned object location 
theta zero theta zero welltyped sim obj ff theta zero ff welltyped sim obj ff ff theta zero welltyped sim obj theta welltyped allocate sim obj ff theta zero ff welltyped theta zero theta zero sim obj theta unknown welltyped op sim obj ff sim obj theta object ff theta ff welltyped sim obj ff simple theta zero struct compatible theta zero ff welltyped sim obj ff lam sizeof sizeof theta zero theta zero theta zero sn theta zero welltyped welltyped fun sim obj ff lam sizeof theta zero theta zero theta zero theta zero welltyped sn type rules relevant statement types source language 
sim obj pattern matches simple object types 
variables assumed associated type type environment partial order typedness simple assignment statement expressed follows theta zero theta zero welltyped fig 
state typing rules relevant parts source language 
program typed typing environment statements program typed typing environment associates variables type 
statements form op op operation may comparison bit wise operation addition consider subtraction bitwise exclusive pointer values 
result pointer value pointer values result pointer value result described location type input pointer values unknown offset 
operations operand pointer values result comparisons 
true implementations subtraction pointers different objects implementation dependent ansi specification ame 
operations result required described type input pointer value 
treat primitive operations identically 
typing rule dynamic allocation states pointer value assigned 
type describes allocated location need type variable program 
type allocated location indirectly available type variable assigned 
locations allocated statement type locations allocated different allocation statements may different types 
typing rule computing address structure element predicate compatible 
details predicate dependent choice representation element specifiers predicate capture mapping describes structure prefix matches structure accessed including element defined typing rules assumption number formal actual parameters results match 
rules trivially extendible handle programs case handle programs variable arguments 
efficient type inference performing points analysis amounts inferring typing environment program typed 
typing environment seek minimal solution typedness problem location type describes locations possible function type describes functions possible 
section state efficiently compute minimal solution 
basic principle algorithm start assumption variables described different types type variables proceed unifying merging types necessary ensure typedness different parts program 
merging types means replacing type variables single type variable typing environment 
parts program processed program typed 
algorithm stages stage algorithm provide typing environment program variables described different type variables 
type variable consists fast union find structure equivalence class representative ecr associated type information 
allows replace type variables single type variables constant time union operation 
initial type program variable blank size representation variable 
assume name resolution performed encode typing environment program representation get constant time access type variable associated variable name 
second stage algorithm process statement program exactly 
type variables joined necessary ensure typedness statement described section 
joining type variables associated type information unified computing upper bound types joining component type variables necessary 
joining types typed statement longer typed 
type variables joined necessary ensure typedness final type graph minimal solution seek 
processing constraints processing statement ensure constraints imposed partial orders obeyed 
achieved joining type variables upgrading simple struct types object types blank types simple struct object types 
may happen effects constraint determined time processing statement introducing constraint 
algorithm uses latent constraints annotating type variables actions invoked value type variable change 
example consider partial order constraint function types joined meet constraint 
may know time processing statement constraint final solution 
joining type variables safe may conservative final result may minimal solution seek 
time encounter constraint add set latent actions associated joined changes value 
provides precise set rules processing relevant kinds statements program 
processing rules follow immediately typedness rules straightforward implement 
provides details join operations 
complexity argue space time complexity exponential size input program theoretically correct practically meaningless metric quadratic size program reasonable metric close linear size program practice 
number distinguishable memory locations program exp size program 
achievable building structure shape binary tree 
size program populate left leaves binary tree pointers root tree 
points solution program size exp 
runtime complexity points algorithm computing solution exponential worse 
theoretically correct expressing algorithm complexity terms practically meaningless metric complexity algorithm 
know related metric specify complexity terms really different metric 
reasonable metric measures complexity algorithm terms combined size variables program 
number type variables created stages algorithm 
constraints involving struct types processed linear space linear time complexity terms number type variables joined 
programs structured variables algorithm space ecr ecr ecr ecr ensure sim obj sim obj ff type expand join theta zero ff ecr ecr ensure sim obj sim obj ff type theta ff zero allocate ecr ensure sim obj sim obj ff type expand theta ff type settype blank ecr ecr ensure sim obj sim obj ff type theta ff zero fun ecr ensure sim obj sim obj ff type expand type lam settype lam sizeof ecr sizeof ecr op ecr ecr ensure sim obj sim obj ff type theta ff type zero unknown ecr ecr ensure sim obj ensure sim obj sizeof sim obj ff type sim obj ff type expand theta ff type unknown collapse join ff ff zero type blank settype struct compatible join theta zero ff elseif type struct compatible join theta zero ff promote sizeof join ff ff sn ecr ensure sim obj sizeof sim obj ff type type lam settype lam sizeof ecr ecr inference rules corresponding typing rules fig 

compatible side effecting predicate modifies mapping compatible access structure element possible necessary returns boolean value indicating success modification 
constructs list new associated bottom type 
provides details functions rules 
join theta theta type zero pending pending elseif type zero unknown join join type pending pending join ecr union pending pending pending type type settype unify settype type pending case join join ensure sim obj case type settype simple blank settype simple expand simple ff expand struct promote expand blank settype unify type promote object settype unify type collapse object settype unify type unknown type unknown pending case collapse collapse unknown zero type zero pending collapse pending collapse pending pending case type blank expand elseif type settype blank elseif sizeof type expand simple ff expand case type settype simple ff blank settype simple ff expand simple ff join ff ff join expand struct promote object ff join ff ff join struct expand case type settype struct blank settype struct expand simple ff promote struct dom compatible dom sizeof expand object ff dom sizeof object ff type object ff join ff ff join promote implementation details function inference rules 
ecr ecr representing type variable type type associated ecr join performs conditional join performs conditional join ecr union performs fast union find join operation ecr arguments returns value subsequent find operation 
sff time complexity ff inverse ackerman function tar 
ff component time complexity due fast union find data structures 
complexity result equal previous algorithm ste 
constraints involving struct types may require processing element types addition joins performed 
structures fewer elements algorithm space time complexity 
means algorithm quadratic worst case running time complexity terms actual running time complexity close linear typically fairly small number 
grow program size growth controlled tendency programmers group structure elements substructures number elements grows large 
experience implemented slightly improved version algorithm prototype programming system value dependence graph vdg 
implementation performed scheme programming language cr 
implementation uses weaker typing rule primitive operations returning boolean values leading better results 
uses predetermined transfer functions calls library functions effectively making type inference algorithm polymorphic context sensitive direct calls library functions 
implementation demonstrates running time algorithm roughly linear size input program test suite programs 
performed points analysis programs lines code experience algorithm encouraging considering doing implementation allows piecewise analysis programs permitting analysis programs lines code 
table empirical data performance algorithm unoptimized representation number programs 
programs subset programs william landi test suite todd austin test suite spec benchmarks version xerox parc 
programs results previous ste 
included information analysis microsoft tool lines code 
column indicates running time implementation algorithm 
time result single measurement 
time includes initial setup type inference 
runtime measurements directly comparable runtime measurements ste old implementation able trick reduce number initial type variables 
second column indicates number extra distinguishable elements structured objects compared previous algorithm ste 
object distinguishable elements contribute count number 
numbers significant cases represent separation distinguishable elements central data structures 
separation significant second order effects results space limitations prevent providing details 
largest program represented vdg program representation 
benchmark running struct name time count landi allroots landi assembler landi loader landi compiler landi simulator landi lex landi football austin anagram austin backprop austin bc austin ft benchmark running struct name time count austin ks austin yacr spec compress spec eqntott spec espresso spec li spec sc spec alvinn spec ear ms tool table running time wall time process time mhz indigo running chez scheme number extra distinguishable structure components relative previous algorithm ste 
related algorithm extension linear pointsto analysis algorithms distinguish components structured objects ste ste 
william landi independently arrived earliest algorithms lan 
barbara ryder sean zhang independently developed similar algorithm distinguishes components structured objects zha 
type system element substituting operator operator precise algorithm 
david extended earliest algorithm distinguish components structured objects mor 
algorithm uses type system element incorporate pointer offsets constraint system 
furthermore implementation meant deal correctly unions 
analysis performed parsing program 
henglein type inference perform binding time analysis linear time hen 
types represent binding time values 
points analysis algorithms inspired henglein type inference algorithm 
choi developed flow insensitive points analysis data flow methods cbc 
algorithm developed language pair structures cons cells lisp 
algorithm worse time space complexity algorithm 
burke describes improvement algorithm :10.1.1.49.2704
improved algorithm deal pointers structured objects worse time space complexity algorithm 
algorithms potentially accurate algorithm analysis results permit location representative pointers multiple location representatives 
andersen defined flow insensitive context sensitive points analysis terms constraints constraint solving 
values constrained sets locations analysis conventional analysis 
algorithm assumes source programs strictly conforming ansi may generate unsafe results large class programs written andersen uses term inter procedural mean context sensitive 
programmers creative assumptions language implementation 
context insensitive version andersen algorithm compute results similar faster constraint solving data flow analysis :10.1.1.49.2704
callahan jackson convert programs ml programs ml type inference compute equivalent points results oj 
programs converted ml techniques algorithm may compute unsafe results due type casts source program 
exist interprocedural flow sensitive data flow analyses cwz egh wl ruf 
algorithm chase cwz ruf algorithm ruf context insensitive polynomial time complexity 
algorithms context sensitive 
algorithm emami egh exponential time complexity theory practice performs virtual unfolding non recursive calls 
algorithm wilson lam wl exponential time complexity exhibit polynomial time complexity practice uses partial transfer functions summarize behavior analyzed functions procedures 
flow insensitive interprocedural context insensitive points analysis type inference methods 
algorithm implemented 
empirical evidence algorithm efficient practice final version due 
part effort construct efficient points analysis algorithms large programs 
type inference methods useful tool doing 
algorithms previous papers ste ste monomorphic type inference methods 
investigated extending algorithm ste polymorphic type inference methods 
combine extensions generate context sensitive polymorphic points algorithm distinguish elements structured objects 
acknowledgments roger crew michael ernst erik ruf daniel weise analysts group microsoft research developed vdg programming environment come existence 
daniel weise reviewers provided helpful comments 
author enjoyed interesting discussions david william griswold barbara ryder sean zhang bill landi performing points analysis type inference methods 
ame american national standards institute programming language december 
lars ole andersen 
program analysis specialization programming language 
phd thesis department computer science university copenhagen may 
asu alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley 
michael burke paul carini jong deok choi michael hind :10.1.1.49.2704
flow insensitive interprocedural alias analysis presence pointers 
proceedings th international workshop languages compilers parallel computing volume lecture notes computer science pages 
springer verlag 
extended version published research report rc ibm watson research center september 
cbc jong deok choi michael burke paul carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
proceedings twentieth annual acm sigplan sigact symposium principles programming languages pages january 
cr william clinger jonathan rees editors 
revised report algorithmic language scheme november 
cwz david chase mark wegman kenneth zadeck 
analysis pointers structures 
proceedings sigplan conference programming language design implementation pages june 
egh emami rakesh ghiya laurie hendren 
context sensitive interprocedural points analysis presence function pointers 
sigplan conference programming language design implementation pages june 
hen fritz henglein 
efficient type inference higher order binding time analysis 
functional programming computer architecture pages 
kr brian kernighan dennis ritchie 
programming language second edition 
prentice hall 
lan william landi 
linear time points analyses 
personal communication popl january 
lr william landi barbara ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
william landi barbara ryder sean zhang 
interprocedural modification side effect analysis pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
mor david 
poster presentation pldi june 
oj robert callahan daniel jackson 
detecting shared representations type inference 
technical report cmu cs school computer science carnegie mellon university september 
ruf erik ruf 
context insensitive alias analysis reconsidered 
sigplan conference programming language design implementation pages june 
ste bjarne steensgaard 
points analysis linear time 
technical report msr tr microsoft research march 
ste bjarne steensgaard 
points analysis linear time 
proceedings rd sigplan sigact symposium principles programming languages january 
tar robert tarjan 
data structures network flow algorithms 
regional conference series applied mathematics volume 
siam 
daniel weise roger crew michael ernst bjarne steensgaard 
value dependence graphs representation taxation 
proceedings st sigplan sigact symposium principles programming languages pages january 
wl robert wilson monica lam 
efficient context sensitive pointer analysis programs 
sigplan conference programming language design implementation pages june 
zha sean zhang 
poster presentation pldi june 
