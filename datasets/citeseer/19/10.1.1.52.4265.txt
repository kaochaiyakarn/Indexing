collision detection dimensional intersection testing stephen cameron june collision detection problem easily stated objects desired motions decide objects come collision time span 
solution problem useful robotics problem domains 
describe method solving collision detection involves transforming problem intersection detection problem space time 
give theoretical basis solution describe efficient implementation describing objects motions constructively 
consider related problems describing collision region detecting collisions moving objects 
appeared ieee transactions robotics automation june 

contact address oxford university computing laboratory wolfson building parks road oxford ox qd uk 
phone 
collision detection problem may stated objects desired motions decide objects come collision time span 
solving problem useful right solution parts algorithms try generate collision free paths 
especially interested solving collision detection problem robotics reported interest problem domains vlsi electronic circuit layout cloth cutting bin packing assembly planning driving numerically controlled machines 
previous problem mainly arisen sources 
source proliferation cad descriptions shapes desire design computer boy mey mye ck 
source algorithm design right emphasises design algorithms low computational complexity 
rooted firmly camp emphasis production efficient algorithms 
different algorithms collision detection 
argued cam class algorithms conceptually simplest choose number times ft interest perform static interference test algorithm advantages relatively simple necessary derive closed form motion access sampling function suffice gives operator feedback part simulation 
algorithm perfect particular objects come contact 
method compute volume swept objects motions declare collision swept volumes intersect 
method intuitive shall see method described effectively better special cases 
describes method collision detection problem transformed detecting collisions point configuration space lp 
effectively canny considers intersection detection line dimensional configuration space obstacles algebraic techniques find intersection regions 
configuration space normally associated solutions collision avoidance problem lp don 
believe collision detection worthy separate study solved far faster collision avoidance collision avoidance schemes require collision detector run generate information collision region mye 
give formal basis dimensional intersection testing 
visualise process may imagine analogue perform collision detection dimensional world abb 
imagine polygonal objects shown starting positions shown having velocities 
imagine dimensional universe inhabit fact floor lift moving vertically upwards constant velocity 
polygons sweep prisms dimensional space shown 
think vertical dimension case time dimension particular horizontal slice prisms gives positions polygons corresponding time 
shall show polygons collide prisms intersect 
shows union prisms shows non null intersection 
describes problem transformation performed geometric modelling system called ca 
gives meat implementation general routine described cam examples routine action 
routine natural extension tackle collision detection problem possible pairs objects collide outlined 
extensions connections problems described 
mathematical basis regard object defined point set 
equivalent assuming know exactly objects shape object assume existence location function function tells object time 
particular takes time returns transformation tells move position time time occupies point set fx normally write 
example object rest position time constant velocity location function moves point point vt time concerned rigid body motions note motions normal materials including elastic deformations fluid flows principle described invertible continuous location functions matter lost transformation 
extrusions definitions give structure formally define extrusion operation introduced informally 
object corresponding location function define extrusion operator ex ex aka 
elevator 
gamma gamma gamma delta delta delta delta delta example dimensions 
equivalent definition invertible transformations ex gamma og note object location function collides object location function ex ex objects collide extrusions intersect 
extrusions give mathematical framework considering collision detection problem 
definitions tell construct extrusions 
er considers extrusion collections simple shapes spheres 
st fs description called bintree describe space time bintree constructed algorithm similar described continues division space time region full empty 
gla uses space time perform ray tracing moving objects animation samples extrusion required 
jp give construction boundary extrusions location functions correspond linear velocities objects polyhedral general boundary extrusion may quite complex 
constructive solid geometry csg method describing dimensional shapes shape set combination simple shapes common description method solid models rv 
effectively csg description equivalent boolean function number simple objects object 
pm obtained set operations union intersection difference 
may derive function obtained replacing threedimensional set operation corresponding dimensional set operation distribution theorem gives way simplifying construction extrusions pi distribution theorem extrusion operation distributes set operations ex 
pm ex ex 
ex pm proof standard set operations denote logical formula derived set formula normal way replacing 
ex 
pm gamma 
pm gamma 
gamma pm ex 
ex pm ex ex 
ex pm required 
distribution theorem simplifies construction extrusions easy write form extrusion simple shape particular half space function similar quadtree sam essentially look distinguished reasons 
extruded half space half space ex ffi gamma ffi denotes functional composition 
specific case interest halfspace object linear moving constant linear velocity 
corresponds half space scalar product operator location function corresponding identity transform time constant velocity find ex corresponds dimensional half space gamma vt combination distribution theorem model extrusions objects 
extrusions say 
pm 
denote extruded primitives objects collide extrusions intersect 
pm 

pm 

pm 
transformed collision detection problem detecting point satisfies region set theoretic formula 
mathematical standard set operations generally geometric modelling practise possible construct non dimensional objects 
closed regularised set operations equivalent performing standard set operation followed closure interior resultant set 
informally perform set operation stretch tight skin resultant set 
operations shown form boolean algebra tr main problem careful considering boundaries sets formed 
result shown cam pi distribution theorem regularised sets extrusion operator ex distributes closed regularised set operations 
proof just give outline proof theorem details cam 
argument standard set operations find reg ex 
pm ex 
ex pm reg dimensional regularisation operation 
result follow ex 
pm regular set 

pm regular dimensions inverse continuous bijections show ex 
pm regular provided time span interest regular dimension long time domain forms closed set 
see reasonable requirement consider extrusions dimensional objects extrusion carried open time interval tops bottoms extrusions open extrusions regular 
property behaved geometric models req effectively boundaries described finite number elements 
reported follows finiteness csg descriptions interesting note preserved extrusion standard location functions cam 
connection sweeping mentioned common way performing collision detection compute volume swept object test swept volumes interference 
sweeping formalised introducing operator sw sw fx comparing equation note sweeping equivalent extrusion spacetime followed projection operation back original space functionally sweeping complex extrusion 
explains sweeping moving objects testing interference sufficient test collisions objects objects occupy space different times temporal information suppressed sweeping operation 
sweeping sufficient test considering relative motions objects 
relative motions may complex objects moving may consider pairs relative motions 
extrusion solve pair problem promising explained 
added built complexity sweeping extrusion interesting speculate popularity sweeping method 
postulate reasons 
firstly shapes motions swept volume particularly nice form 
example spheres rotated translated form volumes modelled cylinders spheres 
cases fairly conventional solid modeller 
second reason lack familiarity mathematics involved 
hope help alleviate fears 
implementation implementation part solid modelling system called ca shapes entered expressions describe shapes terms parameterised simple shapes blocks cylinders rigid body transformations joint parameters mechanisms set operations 
descriptions read parser converts tree structure leaf nodes instances simple shapes branch nodes represent transformations binary set operations 
simplicity may imagine trees equivalent trees transformation nodes branch nodes denote binary set operations leaf nodes include appropriate transformation simple shape 
construction paradigm denote location functions 
expression type motion chain primitive motion commands times applicable 
example expression rest vel vel rest denotes motion rest time time velocity times velocity times 
effectively gives derivative location function fix particular function specify motion corresponds identity transformation time 
syntax convenience syntax easily place specifying points 
attach motion expression shape worm expression connecting shape expression motion expression 
collision detection function worms input time bound test collisions 
strictly necessary explained turn worm internally binary shape tree list primitive motion components shape 
inputs converted single binary tree branch nodes set operations leaf nodes correspond dimensional half spaces 
rest section gives procedure generating tree gives procedure testing tree corresponds null set objects collide time bounds 
procedure deriving tree single motion component straightforward 
leaf nodes shape tree correspond complete simple shapes 
rewrite simple shape appropriate combination half spaces example block replaced intersection linear half spaces 

shape tree extruded effectively primitive replacing dimensional set operation dimensional version 
fact second operation null step single set operation node regardless dimensionality 

gives extrusion defined time 
limit time time span interest say intersect extruded shape tree intersection linear half spaces gammat gammat example consider block gamma moving velocity rest 
complete extrusion union 
intersection half spaces gamma 
intersection half spaces gamma 

intersection half spaces 
construct csg description multiple time components say 
find extrusion component separately bound tree max min take set union extrusion trees get total extrusion 
gives binary tree completely specifies worm intersected symbolically represent entire region space time objects overlap 
alternative approach identify time spans objects constant velocities run collision detection process separately time span 
approach current implementation restrict generating linear half spaces 
done simply considering polyhedral approximations shapes moving motions composed linear velocity segments 
rewrite say cylinder intersection number dimensional linear half spaces half spaces 
called imagine corresponding extrusions worms space time null set detection dimensional intersection set specified boolean tree want see set empty 
regarded set satisfiability problem exist dimensional point satisfies set boolean formula 
techniques exist solving intersection problem fewer dimensions techniques amenable tackling dimensional problem 
follow general approach detailed cam giving modifications required particular geometric domain 
effectively algorithm split stages operate cascade provide efficient solution problem 
stages 
pre processing stage reasoning approximations subtrees 
stage called bound preprocessing stage 

divide conquer stage problem dynamically split number simpler problems reduce computational complexity 

generate test stage exact geometry problem considered 
purpose cascade reduce time cost algorithm relatively cheap processing solve easy parts problem passing stages parts doubt 
part means rectangular region space time search point intersection set 
note simplicity implemented redundancy routine described cam 
order follow development algorithm improve presentation describe bound preprocessing stage 
divide conquer input stage csg description plus rectangular region space time search evidence non 
finding evidence implies extrusions overlap objects collide 
original implementation bounding region space computed object enclosing object points time velocity changes space time region generated intersecting space regions objects adding time bounds clash function 
current implementation space time region directly bound preprocessing step described 
region intersection tree passed straight routine reasons computational efficiency interpose divide conquer stage replaces single problem number smaller problems 
mechanism involved discussed detail cam give brief details 

region space time tree measure complexity decide continue generate test routine divide problem 

divide problem split region number subregions fr subregions covering simplified copy intersection tree technique discussed 
region tree pairs hr recursively evaluated step 
rectangular imply product set closed intervals aligned rectangle dimensions box 
entire problem terminates subproblem discovers intersection set non null subproblems reached generate test stage 
note space requirement process proportional maximum depth subdivision total number regions examined 
regions aligned rectangular boxes dimensions simple strategy splitting regions split box sixteen parts bisection coordinate axis 
fact strategy adopted number heuristics invoked try balance size subproblems generated woo gives examples heuristics dimensional situation 
simplification strategy observation boundary half space pass region corresponding leaf removed 
convex half spaces convex polyhedral regions check boundary intersects region simply computing half space function region extreme points 
worth noting may discover region simplifies null region completely full region proving non having consider boundary intersections region half space boundaries passing 
case efficient closed form solutions exists treating simplified tree defining formula propositional logic testing contradiction 
example sphere radius centre time moves velocity 
cube sides centred time moves velocity 
test collision occurs consider intersection extruded half spaces gamma gamma gamma gamma gamma gamma gamma division mechanism quickly decides space time bounded contains points interest goes pass regions width stage investigation 
means approximately original explored detail 
calculation computational complexity process difficult worst case analysis experimentally extremely pessimistic difficult characterise set realistic cases give measure expected complexity analysis suggest expected complexity worse cam 
apply heuristics speed process relating measure complexity tree size region 
implementation measure complexity tree number leaf nodes decide conquer divide complexity smaller number division steps performed 
implementation 
region size small assume intersection small ignored 
practise happened 
generate test generate test routine general routine checks 
sophisticated routines devised rv divide conquer mechanism ensures problems routine bounded size chosen go simplicity follow approach cam 
involves generating sufficient set test points space time checking points see inside intersection set 
generate point set go loop 
triple half spaces referenced tree find intersection 
general case line space time 

intersect line half space 
course need intersect triple line formed 
gives number potential edge segments intersection polytope non null edge segments lie inside intersection set 

edge segment classify mid point 
algorithm requires point classifications 
non regularised set system sufficient classify point evaluating half space functions point combine boolean truth values see set intersection classification case linear time process total complexity stage 
regularised system take neighbourhood points account choice points test mid points potential edges significant take cross section line test point 
reduces problem evaluating intersection planes dimensions isomorphic problem classifying vertex dimensions 
turn solved considering edges surrounding vertex intersections pairs original triple half space boundaries cross section hypersurface neighbourhood classification techniques directly 
compare classifying edge dimensions cross section perpendicular edge reduce dimensional classification problem 
eventually classification problem reduced testing number points tested logic formula approach 
details appendix bounds test null intersection works works dumb way computes initial space time bound consider 
illustrate imagine pair unit cubes aligned world coordinate axes cube starting origin moving velocity length time second starting moving velocity considered theta coordinate frame moving velocity cubes fixed considered theta 
practise drawback divide conquer algorithm quickly prove large regions space time null entirely outside extrusions 
bounds provide way focusing attention algorithm help remove called redundant primitives consideration cam 
overview bounds binary tree representing intersection set contains information relative constraints half spaces due root node tree relative constraints subtrees 
bounds give way organising constraints quickly reason parts tree mutually 
bounds described detail cam 
bound system defined class bounds operators regularised sets essential wish deal reliably objects contact 
denote general node tree left child right child parent fi bound 
rules upward rule branch node set fi fi fi fi fi fi fi operator downward rule root node set fi fi fi upward downward rules bounds 
bounds subsets space case chosen easily described manipulated 
operators satisfy rules bounds uses rectangular boxes aligned world coordinate system dimensional bounds operators atb smallest aligned box contains operators implemented unit time simply maximum minimum pairs coordinates define corners box 
tree initial set bounds generated setting bounds leaf nodes supersets relevant primitive shapes omega universal set 
set bounds bounds property set subtree need evaluated outside appropriate bound 
real power bounds lies fact rewrite bound set set rewrite rules get new smaller set bounds bound property upward rule applied bottom manner tree followed downward rule top manner repeating 
shown cam procedure converges quickly dimensional intersection detection problems leads significant computational savings demonstrate entire subtrees replaced null set need explored detail 
bounds dimensions discussed problem standard divide conquer algorithm mentioned considered grow large bound space relative moving frame 
reason simply extending bounds rectangular regions space time efficient 
decided slightly complicated bounds system dimensional intersection detection choosing bounds exactly bound extrusions 
formally dimensional bounds consist union number convex polytopes space time polytopes overlapping time 
particular split problem time dimension number time spans objects moving constant velocities time span 
objects motion components time spans consider 
choose operators relatively simple form dsb extrusion dsb motion corresponding object root node dsb unevaluated intersection children 
see permits simple combination operations consider form fi fi see considering spatial temporal dimensions separately fi fi fi fi gives suitable definition dimensional operators standard dimensional aligned box operators 
subtrees object effectively dimensional combination operators ignore motions 
matters slightly complicated root node 
need able intersect rectangular regions space time moving arbitrary linear velocities express result intersection new rectangular regions space time moving velocity 
consider operation root node intersection node collision detection 
computed closed form solution problem detailed appendix note consider root node may generate smaller time bound originally 
terms example equivalent placing bounding rectangle triangle solving exactly space time rectangle bound square overlap 
sufficient prove triangle square overlap limit search space divide conquer algorithm 
example consider example 
original bounding procedure considers space time region dimensions theta theta theta 
applying closed form solution rectangular bounds case gives space time region dimensions theta theta theta 
examples shows snapshot pair composite objects motions cause collision 
sets objects autonomous vehicle carrying load moving straight forward line carrying loads moving direction perpendicular motion vehicle supported invisible overhead rail 
terms geometric complexity composite objects described primitive shapes csg descriptions require linear half spaces describe 
figures show snapshots showing collision loaded tray load vehicle 
collision detection routine asked search clashes time span length bound stage correctly identified length interest witness collision point space time collision occurring cpu time sun floating point accelerator 
illustrate usefulness bound stage note original primitives survived bound stage passes reducing considered factor 
figures illustration practise regions discarded bound stage quickly discarded division stage 
terminating point collision routine asked find earliest witness point collision starts 
done ordering division simple extension arguments cy show dimensional bounds converge linear number passes 
vehicle moving straight line stage routine earliest regions examined terminating routine sure earliest point missed 
involves search time slower just finding witness particular case extra time required small example consumed cpu time 
final extension ask routine find edges skeleton common collision region 
case way terminating early example process took cpu time 
morale simple answer normally far easier obtain 
example considered single motion components 
show objects lowered part vehicle tray pass centre section 
moving constant velocity vehicle moves forward stops moves forward allowing tray move process 
avoids collisions just 
routine able check bound stage sufficient passes paths objects happen aligned spatial axes 
problem harder run test spatial axes skewed respect natural axes defined problem 
case checking collision took bound stage passing leaf tree divide conquer stage time spans providing leaf trees time spans 
multiple objects problem considering problem finding collisions pair objects 
objects moving wish detect collisions pair objects time span 
simple way performing consider possible pair objects separately 
cases quite sensible strategy may wish test collisions certain pairs 
example robot manipulator ignore possibility collisions adjacent links 
general case objects theta possible object pairs consider 
extrusions possible minimise duplication effort scheme 
follow order description case single pair objects theoretical basis divide conquer mechanism bounds 
theoretical basis moving objects say 
having location function tell pair collide need determine ex 
follow union non null fe new ary set operation defined fx completeness define return argument sets 
consider intersections pair fe form single csg tree combine children node 
operation space time complexity linear size extrusions 
vehicle weaving divide conquer composite csg tree operation root node division process little modification 
starting tree region space time need able simplify tree respect region 
comparing individual half spaces leaves works exactly rewrite tree need additional rewrite rules operation 
identities ffl fx fx ffl pair equivalent omega fx omega case yields proof intersection 
conquer stage similar 
just form candidate lines space time triples half spaces split half space boundaries form candidate edges consider interior edges points check 
point tested considering number logical formulae step easily extended take operator account 
course extra penalty considering objects size tree considered bigger factor 
assuming division strategy reduces problem subproblems bounded size effect increased size increase division time depending statistical distribution primitives expected increase slightly worse linearly cam 
bounds bounds pairs case straightforward 
presence operator root node tree changes effective topology expression graph possible find paths root node leaf 
rewrite rules bounds efficient defined tree structures 
consider properties bounds operator rewrite equivalent tree 
example fe 
note subtrees look entire tree case single pair objects concentrate attention subtree operators described including special operation 
apply upward rule root node operation obtain bound entire tree bound bigger subtrees subsequent application downward rule root node effect bounds subtrees subtree effectively island receive useful information subtrees 
suggests way dealing bounds operator producing expanded tree 

entire tree fe associate node array threedimensional aligned boxes 
start process form dimensional bounds considering just placing result node element set dimensional bound node omega gamma 
pair apply dsb processing implicit subtree done scheme bounds jth array elements vice versa 
satisfied bounds formed add implicit bound operator 
result processing total dimensional bound root node plus set bounds node jth set bounds corresponding possible interactions noted considered interaction theta pairs objects process 
regard necessary evil effect trying minimise 
possible produce bad cases object conceivably collide object routine cases prepared consider pairs objects 
believe real life situations better behaved pairs objects collide 
cases bounds decide pairs collide give bounds region space time collision occurs parts object involved collisions 
normal situations result bounds created 
possible disable consideration collisions certain pairs objects adjacent links robot structure setting relevant bounds effectively prunes relevant pair csg description 
created bounds need divide conquer mechanism 
suggest schemes 
pairs objects shown capable colliding simply identifies pairs bounds tackles pair separately 
scheme space efficient process pair bounds considered storing bounds 
performing divide conquer process times 
avoid second scheme treat union array bounds stored leaf node outer bound node take bounds account division process done ignoring leaf node total bound intersect region interest division process proceeds regions interest get smaller leaf nodes average pruned 
conquer stage take bounds account point classification stage 
second scheme efficient large number possible collision regions large number pairs objects organisational complexity scheme increases 
intermediate approaches possible forming exact union bounds array list bounds form approximation union 
relative advantages approaches heavily influenced geometrical domain intermediate approach possible collision regions object localised space time 
approach useful pairs case build hierarchy approximations objects 
example ft list approximations shape objects approximations finer earlier approximations 
may think early approximations shells objects algorithm initially considers relationships outer shells get close current shell broken approximation 
variable resolution models depending distances different objects 
idea build series coarse bounds approximation different levels approximations different pairs moving objects 
fact may regard bounds csg tree naturally forming approximation hierarchy sub components objects separate objects 
summary introduced formalism allows model objects motion subsets spacetime explained topological properties objects motions affect extrusions formed 
extrusions transform collision detection problem loss generality consider leaf nodes bounds formed monotonic decreasing size csg trees 
tion detection problem space time 
problem transformation general takes particularly easy form objects described set combination half spaces 
implementation method developed case objects polyhedral moving linear motions 
implementation uses preprocessing step determines interesting regions space time search collisions 
step identifies parts object involved collisions simplifies size intersection detection problems 
noted preprocessing step easily extended deal geometries need bounds sizes regions 
forms shape descriptions example reps rv bound stored boundary feature difficult identify subcomponents objects involved collisions 
special case dimensional modeller test collisions dimensional objects 
output preprocessing step processed divide conquer mechanism 
splitting original problem number simpler problems tackled generate test routine 
stages generate step difficult generalise arbitrary shapes motions knowledge properties linear equations produce set points test 
preprocessing step seen efficient selecting regions space time test objects moving linear motions 
conjecture preprocessing general motions select bounds extrusions simple shape spheres cam moving centre mass objects involve complicated bound combination strategy effectively solve collision detection problem spheres 
objects moving may wish consider potential pairs objects collision 
tackled framework slightly complicated preprocessing system identifies object pairs interest 
remainder processing performed potentially parallel simple extension divide conquer framework 
objects theta object pairs collide advantage approach share processing extrusions object regardless object potentially involved collision 
case say swept volume method collision detection relative motions objects 
main limitation routine described terms shapes motions consider 
ability deal linear motions useful cartesian mechanisms robots vehicles effectors general robots cartesian control 
general rotations affected body anthropomorphic robot cause practical difficulties 
routine easily extended real problem performing final null object detection tests generate sufficient set points sure collisions 
effectively double number different types surfaces considered number ways generating test points goes large factor extensions stages scale linearly 
effect known geometric modelling community 
partial solution adapt canny algorithm solution null object detection problem quaternion mapping encode rotations polynomial half spaces calling routine hard cases vertices surfaces regions divide conquer mechanism 
canny implementation combines traditional hand encoded programming describe configuration space obstacles computer algebra techniques find roots polynomials 
truly general solution terms coverage surface rotation types believe need advances computer algebra theorem proving order write routines automatically handle new surface types added 
reported financed science engineering research council postgraduate studentship university edinburgh atlas research fellowship rutherford appleton laboratory 
due mike brady encouragement anonymous referees comments 
abb edwin abbott 

dover new york 
second edition originally published 
boy 
interference detection solids surfaces 
communications acm 
ca stephen cameron jon aylett 
geometry engine robotics 
int 
conf 
robotics automation pages philadelphia april 
cam cameron 
modelling solids motion 
phd thesis university edinburgh 
available department artificial intelligence 
cam cameron 
study clash detection problem robotics 
int 
conf 
robotics automation pages st louis march 
cam cameron 
efficient intersection tests objects defined constructively 
int 
robotics res february 
similar oxford programming research group tm 
john canny 
detecting collisions moving polyhedra 
ieee pattern analysis machine intelligence march 
john canny 
complexity robot motion planning 
mit press cambridge 
ck 
collision detection algorithm velocity distance bounds 
int 
conf 
robotics automation pages san francisco april 
cy cameron yap 
refinement methods geometric bounds constructive solid geometry 
acm transactions graphics january 
don bruce donald 
search algorithm motion planning degrees freedom 
art 
intelligence march 
de pennington 
geometric modelling contribution intelligent robotics 
th 
int 
symp 
industrial robotics chicago 
er van 
intersection algorithm moving parts 
proc 
nasa symposium computer aided geometric modeling pages hampton va april 
conf 
publ 

fs hanan samet 
hierarchical strategy path planning moving obstacles 
ieee trans 
robotics automation february 
ft bernard pierre 
local approach path planning manipulators high number degrees freedom 
int 
conf 
robotics automation pages raleigh march 
gla andrew glassner 
spacetime ray tracing animation 
ieee comp 
graphics applications 
jp deborah joseph harry 
efficient algorithms polyhedron collision detection 
preparation department computer science university wisconsin madison 
lp lozano erez 
spatial planning configuration space approach 
ieee transactions computers february 
lp lozano erez 
simple motion planning algorithm general robot manipulators 
ieee robotics automation june 
mey meyer 
emulation system programmable sensory robots 
ibm res 
dev november 
mye myers 
supervisory collision avoidance system robot controllers 
master thesis carnegie mellon university 
req requicha 
mathematical models rigid solid objects 
technical report pap tm university rochester november 
rv requicha voelcker 
solid modeling historical summary contemporary assessment 
ieee comp 
graphics applications march 
rv rossignac voelcker 
active zones csg accelerating boundary evaluation redundancy elimination interference detection shading algorithms 
acm trans 
graphics january 
ibm research report rc yorktown heights ny february 
sam hanan samet 
quadtree related data structures 
acm computing surveys june 
st hanan samet tamminen 
csg trees time 
acm comp 
graphics july 
acm siggraph conference 
tr requicha 
closure boolean operations geometric entities 
cad september 
woo 
generating wire frames set theoretic solid models spatial subdivision 
computer aided design 
appendix neighbourhood computation dimensions 
neighbourhood input boolean function csg tree number linear halfspace passing common point containing line direction sorting normals half spaces multiple half space complement express boolean function function unique set normals fp turn forming orthonormal basis expressing convert neighbourhood equivalent dimensional case number planes passing origin 

fp linearly independent logic approach suffices cam 
linear dependence easily checked generating basis vectors schmidt process 

fp lie plane useful 
consider boolean function count possible inputs return true 
answer greater sure neighbourhood empty exactly spatially redundant cases 
practise steps take care vast majority cases 

fp lie plane consider new set test points form theta ng theta vector product operator normal common plane 
test point amenable logic approach 

similarly fp span dimensions consider test points form theta equivalent testing general vertex dimensions crawling possible edges leading vertex testing recursively 
special form operator routine described takes bounds consisting spatial rectangular bound moving constant velocity computes new spatial bounds tightly enclose intersection new time span valid 
may obtain null time span indicates space time bound null objects collide time span 
algorithm proceeds follows 
compute new time span considering intersection spatial bounds 

considering spatial dimension separately compute new spatial bounds 
note objects velocity temporal bound unaffected change spatial bound equivalent dimensional bound system 
computing spatial parameters 
ignore spatial parameters relationships form ut ut ff vt vt fi ff fi obtained directly velocity components 
solving inequalities gives gamma ff gamma fi gamma formed intersection intervals formed way 
null time interval causes null set returned signifying provably null region 
computing spatial bounds spatial component effectively compute bounds push spatial bounds touch bounds 
bound max ut vt min ut ff vt fi obtain similar expressions bounds 
note choice need choose values new spatial bounds ff fi relevant space time bounds ut ut ff contain intersection region 
satisfied setting min gamma ut gamma ut simplifies max min gamma gamma ff min ff fi max gamma gamma similar expressions fi 
derive forms apply affine transformations gamma ut gamma vt turn 
note guaranteed ff example dashed region shows intersection bounds reduction size bounds possible spatial dimension 
temporal bounds lie dashed line reduction size possible 
ut ut ff vt vt fi example projection space optimal fitting final region final region intersection time bound 
need find single rectangular bound region passed divide conquer routine 
liberty measure velocities respect frame choose selecting frame 
equivalent applying affine transform space time diagrams fitting optimal parallelogram region projection parameter fact choose measure respect frame moving velocity direction noting intersections left right bounds redundant choose better bounds see choosing outside range give optimal fit 
consider gamma 
show sides parallelogram deltac apart measured direction deltac ff gamma gamma fi gamma best choosing optimal case 
notice necessarily choosing regard objects fixed decide object fix spatial dimension separately 
