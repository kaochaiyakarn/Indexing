arguments results james noble mri school macquarie university sydney 
kjx mri mq edu au july object oriented program collection communicating objects objects protocols define languages program speaks 
unfortunately protocols difficult design isolation programs protocols designed 
presents patterns describe objects protocols designed redesigned 
patterns programs designs simple general easy change 
object protocols know interfaces important object oriented design 
object protocol face object presents objects surrounding 
object protocol objects program object server accessing behaviour object provides 
similarly object act client objects turn protocols access services 
presents patterns designing object oriented protocols see 
patterns focus aspects protocol design messages objects receive results objects return response messages 
patterns attempt describe novel techniques established solutions object oriented design 
patterns useful introducing techniques novice programmers experienced programmers illustrate particular techniques applicable relative strengths weaknesses 
patterns interrelated form language 
patterns fragments patterns arguments patterns results may day form part larger pattern language 
fragments structure see general pattern couple specific patterns refine general pattern handle specialised contexts 
illustrates relationships patterns 
pattern refine pattern meaning pattern specific version 
alternatively patterns conflict meaning patterns mutually exclusive providing different solution similar problem 
forces patterns resolves number different forces conflicting patterns resolve similar problems different ways 
patterns consider ease reading writing particular solution generally solutions easy write chosen programmers solutions easy read easier maintain 
smaller simpler programs generally easier read write patterns concerned complexity size design number messages object understands number arguments needed message 
complexity avoided patterns prefer complexity handled server objects times client object uses servers 
pattern problem solution arguments object simplify complex protocol regular argument structure 
arguments object capture common parts protocol 
selector object simplify protocol messages differ mainly names 
single message object representing message selector extra argument 
curried object simplify extremely complicated protocol 
send simpler messages intermediary elaborates context 
result object manage difficult answer difficult question 
result object answer question 
object answer question think 
object computers answer parallel 
lazy object answer question easy answer may asked 
lazy object answer question necessary 
summary patterns arguments object selector object curried object result object object lazy object structure language patterns address cohesion coupling resulting designs designs high cohesion objects low coupling flexible understandable easier maintain 
related concept represented explicitly single object design implicit communication objects 
representing concept explicitly object generally easier identify concept design change implementation concept necessary reuse concept especially object represents real concept program application domain 
patterns concerned efficiency time space cost design number objects requires runtime 
consequences common principle underlies patterns designs improved introducing finding additional objects program 
objects place program program evolves objects better integrated design recognised modelling concepts application domain 
find new objects patterns tend generate designs small simple objects introducing extra level indirection imposing space time costs runtime 
patterns simplify design locally example changing particular protocol impose global changes program extra objects needed implement changed protocol 
result objects may easier understand isolation global design program may confused 
quote alan perlis long run program 

patterns applied accelerate process 
limited solely patterns 
patterns effect including design patterns smalltalk best practice patterns parnas criteria program decomposition 
form patterns written electric modified portland form 
begins question italics describing problem followed paragraph describing pattern context second describing forces pattern resolves 
boldface introduces summary solution followed description solution detail 
follows example pattern patterns consequences benefits boldface liabilities known uses related patterns 
patterns protocols objects communicate protocols program protocols glue binds objects 
patterns describe objects protocols 
arguments object simplify complex protocol regular argument structure 
objects large complex protocols regular internal structure 
example graphical view object provide protocol drawing types objects different ways message take arguments specify colour line thickness drawing 
combinations arguments may occur protocols result arguments may passed parallel messages objects 
large protocols easy offer large amount behaviour clients 
unfortunately difficult time consuming implement client programmers learn 
client large protocol depends protocol fine details names arguments required message dependencies large protocols difficult change 
large protocols changed small protocols adding eleventh argument message arguments qualitatively quite different adding second argument unary message 
quote alan perlis procedure parameters probably missed 
arguments object capture common parts protocol 
simplest form arguments object variable argument eliminated protocol usual messages access update variables 
change protocol implementations accept single arguments object place eliminated arguments change protocol clients create arguments objects required 
support optional arguments initialise arguments object variables default argument values created 
example consider protocol provided graphical view object topleft colour colour topleft colour colour topleft colour colour messages take number arguments common topleft colour 
arguments object eliminate arguments protocol 
arguments object call graphic uses variables replace common arguments 
graphic protocol includes messages create new graphic objects read write variables 
view protocol changed accept single graphic argument common arguments 
client view colour colour colour create graphic graphic topleft colour colour 
draw view client graphic graphic graphic view colour graphic colour graphic colour graphic consequences arguments object tradeoff size complex protocol messages common arguments versus messages fewer arguments plus new argument object requires arguments create 
resulting protocols usually easier learn read 
arguments object decreases coupling objects involved protocol objects coupled arguments object object changes protocol limited arguments object objects fundamentally rely changed protocol 
ideally arguments object explicitly reveal object application domain 
arguments object clients may difficult write programmer understand server protocol arguments objects create necessary arguments objects appropriate 
patterns pattern introduces additional object design requiring modifications program increasing runtime space time costs 
known uses uses event objects package arguments sent widgets response user actions 
window system drawing operations package large number arguments font colour line width clip region 
smalltalk point rectangle objects seen arguments objects package integer arguments describe points rectangles 
smalltalk uses message objects record arguments name message caused error 
related patterns patterns describe arguments object applied particular situations 
number message names protocol reduced selector object 
constant slowly varying arguments factored curried object introduces intermediary object elaborate protocol 
selector object simplify protocol messages differ mainly names 
protocols include messages perform underlying function 
example graphical view object provides messages draw graphical objects 
messages take substantially arguments differ fine details precise function perform case view draw rectangle filled rectangle oval 
protocols messages perform similar functions difficult learn especially similarity obvious protocol documentation 
messages conceptually closely related need maintained group require changing number method implementations servers different message sends clients 
single message object representing message selector extra argument 
remove similar messages protocol replace single message takes selector object additional argument 
message perform essential function performed messages original protocol selector object argument discriminate functions detail typically multimethods double dispatching 
change protocol clients servers new protocol 
cases selector object lightweight object symbol enumeration determine fine details function performed 
cases selector object substantial state behaviour 
arguments object selector object folded resulting message object 
example consider protocol provided graphical view object uses graphic arguments object described 
messages performs essentially function drawing view 
details function draw rectangle outline filled rectangle oval encoded message selector 
example arguments object graphic apply selector object pattern incorporate message selector arguments object 
graphic extended record type selects outlined rectangles filled rectangles ovals drawn 
view protocol contains single message draw modelling essential function protocol 
create graphic graphic type rectangle topleft colour colour 
draw view draw alternative family graphic subclass type argument 
graphic colour red 
view draw graphic 
client rectangle oval view colour draw rectangle colour draw colour draw oval consequences selector object pattern refinement arguments object benefits liabilities similar 
tradeoff slightly different selector object trades similar messages server message extra argument plus selector object creation message 
factorisation results selector objects meaning domain protocol smaller easier modify easier learn 
clients need create selector object servers need mechanism select actual function message perform 
known uses selector objects build object oriented interfaces existing file graphics systems 
example visualworks uses symbols representing file access modes arguments messages manage files 
oo graphics systems including visualworks provide geometric graphic objects combine selector object arguments object patterns 
related patterns lightweight selector objects 
curried object simplify extremely complicated protocol 
course program objects exchange messages objects passed arguments messages usually different time 
object receive series messages arguments constant 
example text editor draw number different strings exactly font size typeface colour 
arguments may sent sequence argument message predicted corresponding argument previous message text editor draw strings left margin offset line lower screen 
kinds arguments increase complexity protocol 
protocol difficult learn programmers arguments changed remain constant 
information explicitly represented protocol provided standard documentation 
protocol difficult clients cache constant arguments sends compute values slowly varying arguments 
send simpler messages intermediary curried object elaborates context 
curried object stores constant slowly varying arguments original protocol provides simpler protocol arguments eliminated 
curried object stores original server object forwards messages object passing stored arguments updating slowly varying arguments 
curried object change clients sending messages server create curried object initialise required send messages 
protocol added server creating initialising curried object refers server 
original protocol remain publicly available server restricted curried object 
example consider drawing lines text graphical view font font named 
offset font 
view origin font font 
view origin offset font font 
view origin offset font font 
client view font font font font message takes arguments 
argument string draw different message sent second argument point draw string varies arithmetic progression third argument font constant 
protocol simplified introducing curried object 
curried object call pen requires variables hold view server object origin font arguments font message 
pen protocol include messages read write variables single argument message draw string advance line updating origin variable 
view object needs single argument message pen returns new pen object associated view 
pen example pen view pen origin font font named 
pen 
pen 
pen 
client pen view pen new font font font font consequences curried object quite similar arguments object shares benefits liabilities pattern requires fewer changes existing servers 
curried object displaces receiver protocol arguments object 
curried object introduces action distance messages sent object curried object executed original server object 
curried object level abstraction server acts alias server 
programmers need know original server curried object understand distinctions particular messages send object 
pattern called curried object underlying mechanism partial function application colloquially known currying mathematician haskell curry 
name curried object suggests pattern little exotic probably beginner 
known uses iterators common kind curried object common languages class libraries 
iterator server collection object iterator maintains slowly varying index collection 
graphics systems curried objects servers views example 
example visualworks uses objects smalltalk uses pen objects 
visualworks includes objects curried version message arguments object 
inherits message adds extra variable store message receiver allowing message sent explicit ultimate receiver object 
related patterns arguments object provide radical alternative curried object 
original server act factory create curried object 
curried object similar object level adaptor adaptor allows object conform existing protocol curried object introduces new simpler protocol 
accumulator pattern variant curried object simplifies protocol create objects 
type safe session pattern curried object emphasises type 
patterns results messages ask questions objects sent results messages answers questions 
patterns describe objects simplify asking answering questions 
result object store manage difficult answer difficult question 
long important computation performed server object wish retain results computation 
computation returns object result needed times places program need keep information result obtained 
example consider programming environment calculates software metrics system development 
calculating metrics long computation needs return values number different metrics 
programming environment needs keep values different metrics store values track evolution system time 
client object cache results increases client complexity resulting caching code obscure main application logic making difficult read modify 
alternatively server object cache store results similar problems caching code implementation domain computation 
complicates server protocol return previous current results 
result object answer question 
variable result object value returned provide usual accessor initialisation messages additional information result required store result object 
provide usual accessor messages information retrieved result object 
modify server create return result object server clients retrieve results result object 
example consider object calculating software metrics anobject 



client various compute messages traverse target object inheritance hierarchy compute metrics 
hierarchy traversed individual metric required repeated metric needed 
metric requires exactly traversal inheritance hierarchy really single computation returning multiple results various different metrics 
protocol improved introducing result object 
metrics calculated traversal result object called returned 
individual metric values retrieved 
object store ancillary information metric calculation date metrics calculated 
example anobject 



client new consequences result object quite curried object shares benefits liabilities pattern curried object substitutes message receiver result object substitutes message result 
result object trades server protocol size extra objects messages server replaced message return result object plus messages retrieve result values resulting protocols usually easier learn read reduced coupling easier change 
result object particularly powerful new result object corresponds concept domain 
client object programmer result objects difficult server side caching client needs extract actual results result object 
server object programmer similarly require client side caching 
known uses visualworks date class returns result object called timestamp package current date time 
simplifying client code avoids problems occur time returned second midnight date second 
martin fowler discusses similar result objects called timepoints 
expert system telecoms capacity planning result object package decisions returned logic supporting decisions 
system users check supporting logic verify decisions appropriately 
self programmer manual describes result objects self return multiple values messages 
result objects provide error handling resulting error objects 
representing errors result objects allows errors queued occur displayed user 
result objects provide textual descriptions errors appropriate help information 
example visualworks includes objects result objects package return codes identifying arguments errors occurring outside system 
related patterns question answered parallel try object 
question answered easily answer may needed try lazy object 
object answer question think 
need ask question waiting answer arrive 
example programming environment may need respond user interface computes metrics latest release 
cases computation result returned program eventually needed immediately 
computation performed independently rest program computation modify objects rest program depends vice versa possible compute result parallel thread 
unfortunately managing parallel threads quite difficult practice 
computation result eventually required program thread started parallel left devices 
result returned program computation finishes 
server starts parallel computation server computation clients extract result thread 
increase complexity object chosen responsibility reduces cohesion process management issues 
practice programmers adopt simplest solution ignoring issue computing result immediately delaying program execution computation complete consequently reducing program responsiveness performance 
object computes answer parallel 
object result object computes answer parallel thread initial information supplied original server 
object receive computation arguments server cache information may change main computation resumes 
object handle thread management creating new thread perform computation extracting results thread completes 
object provide synchronisation clients access object associated thread running blocked thread completes 
object control thread performing computation 
control direct object provide interface control thread indirect object deleted computation completes unneeded computation deleted 
example consider example result object pattern 
object implement exactly interface different performance profile 
result object program wait computation performed 
object computation performed parallel thread started message program wait thread accesses object diagram message sent 
creation object access sufficiently separated metrics computation delay main thread 
consequences object protocol exactly result object similar benefits increased readability decoupling decreased complexity 
addition object separates concurrency issues clients servers domain code implementation concurrency easier change 
object manage concurrency larger overhead standard result object 
object difficult write client new result object languages sufficiently flexible single generic object written reused necessary 
object avoid intrinsic problems imposed concurrency program performance predictable harder debug 
pattern applied parallel computation independent rest program 
known uses objects quite common parallel distributed computing 
introduced multilisp smalltalk mushroom systems 
related patterns object seen proxy object hasn computed 
lazy object answer question easy answer may asked 
computations best performed immediately computation result may needed 
example data needed may accessible current version software developed user want metrics calculated intermediate version 
kind computation depends information available may available 
simplest solution problem client ask question time store results needed 
results needed cause large amount unneeded computation complicate client code making harder write 
alternatively server object answering question compute cache results similar problems efficiency increased server complexity 
client postpone asking question answer required question asked information answer depends may lost 
lazy object answer question necessary 
lazy object result object start computation answer requested 
laziness managed lazy object clients server 
server object initialise return lazy object exactly way return result object 
server pass computation arguments lazy object cache information may change time created time 
accessed lazy object return result computation computation carried 
time lazy object perform computation cache results 
requests serviced cache 
example consider metrics calculator example result object 
lazy object changing performance characteristics interface 
lazy object metrics computation performed metric requested example message sent 
result needed lazy object deleted garbage collected metrics calculated 
client new consequences lazy object refinement result object shares benefits liabilities pattern 
addition lazy object avoids overhead unnecessary computations calculating results required 
lazy object protocol exactly corresponding result object choice lazy evaluation completely encapsulated client objects 
similarly lazy object manages evaluation server insulated details laziness 
gains efficiency traded need identify cache information computation depends changed rest program ensure computation eventually performed side effects rest program 
lazy object may program performance difficult predict program difficult debug easy determine calculation carried 
result object object lazy object patterns distinguished computation started result returned main thread 
result object starts computation returns result soon created object starts computation soon created returns result accessed lazy object starts computation returns result accessed 
known uses mushroom system implements generic lazy object 
loom virtual memory system smalltalk lazy objects called leaves represent objects swapped secondary storage 
design patterns describes uses lazy objects called virtual proxies represent large images may need displayed 
related patterns ken auer kent beck described similar patterns optimising smalltalk programs 
patterns revised versions patterns objects pattern language inspired discussions patterns discussion mailing list 
particular kent beck described parameters object suggested result object 
patrick logan noticed similarity patterns david laurence provided telecoms example result object mike described result objects handle errors 
authors reviewers europlop writers workshop provided pertinent comments suggestions 
lorraine body linda rising charles weir provided detailed comments conference draft david holmes back mri number anonymous reviewers 
ward cunningham paul dyson provided important suggestions regarding form content 
ole agesen lars bak craig chambers bay wei chang urs holzle john maloney randall smith david ungar mario wolczko 
self programmer manual 
sun microsystems stanford university edition 
ken auer kent beck 
lazy optimization patterns efficient smalltalk programming 
pattern languages program design volume 
addison wesley 
kent beck 
result object 
com cgi wiki 
kent beck 
parameters object 
email message sent patterns digest list march 
kent beck 
smalltalk best practice patterns 
prentice hall 
grady booch 
object oriented analysis design applications 
benjamin cummings second edition 
brian foote ralph johnston 
reflective facilities smalltalk 
oopsla proceedings 
martin fowler 
analysis patterns 
addison wesley 
erich gamma richard helm ralph johnson john vlissides 
design patterns 
addison wesley 
adele goldberg david robson 
smalltalk language implementation 
addison wesley 
robert halstead jr multilisp language concurrent symbolic computation 
acm transactions programming languages systems october 
martin henson 
elements functional programming languages 
blackwell scientific 
trevor hopkins mario wolczko 
writing concurrent object oriented programs smalltalk 
computer journal october 
ted glenn krasner 
loom large object oriented memory smalltalk systems 
glenn krasner editor smalltalk bits history words advice chapter 
aw 
wilf lalonde 
discovering smalltalk 
benjamin cummings 
james noble 
objects 
reviewed europlop 
parcplace systems 
visualworks smalltalk user guide edition 
david parnas paul clements david weiss 
modular structure complex systems 
ieee transactions software engineering march 
alan perlis 
programming 
acm sigplan notices september 
nat 
type safe session 
europlop proceedings 
robert scheifler jim gettys 
window system 
acm transactions graphics april 
kurt 
application framework 
byte 
phillip 
creating host compliance portable framework study existing design patterns 
oopsla proceedings 
walter zimmer 
relationships design patterns 
pattern languages program design 
addisonwesley 
