advanced modeling features mhdl david barton jones branch dr mclean va dlb wash com november previous papers presentations mhdl covered basic modeling features language structures connectors assignments equations signals attributes 
presents advanced modeling features mhdl 
includes encapsulation packages models generate statements structure functions specifying strict sequencing monads 
mimic hardware description language mhdl features assist modeling analog microwave devices 
covered papers public forum 
natural 
language new natural public discussion concentrate basic features 
advanced features mhdl recommendations concerning modeling style tricks doing 
structure follows 
section discuss splitting definitions model chunks practices involved selecting split modeler job easier 
section discuss generate statement building models depending structure model information provided user 
section discuss view structure function functions specify things optimal device device range values 
section discuss primitive values ability provide window mhdl outside world 
section discuss ability mhdl specify order evaluating functions precisely ability improve efficiency correctness models 
packages models modern programming languages mhdl statically typed 
means insists declarations definitions names uses 
engineering models particularly analog models definitions numerous 
mhdl created package accommodate profusion definitions 
packages mhdl somewhat different packages ada similar languages sense cumulative 
means package includes package includes package gets definitions package having name package explicitly 
collections definitions accu packages include 
means packages models ordered level change undergo 
definitions fairly stable 
defined package inherited 
may change 
general stable specific packages include stable general packages 
general philosophy followed directed graph packages results 
benefits approach packages grouped packages having single model inherit packages needs may approach complex situations 
gradual differentiation package name allows models identify lumped circuit distributed model packages inherit packages included library standard 
example include packages partitions different packages fall ffl package described domain description electrical thermal distributed signal flow domain discourse 
ffl project package specific design device contains definitions unique project 
example specific project may choose cost estimation tool gathers data mhdl attribute called cell yield 
project package contain definition attribute 
ffl package identifies position model design hierarchy 
identify model root test bench intermediate leaf node hierarchy 
example usefulness shown 
ffl tool package 
specific model may contain statements information equations constructed particular tool 
case tool may require certain definitions model provides 
definitions contained package tool 
ffl device type designator 
example tr modules may require certain attributes defined part standard footprint including power dissipation frequency range 
device package included tr module designed government program industry wide standardized 
models similarly organized 
general model describe tr module broad level generality 
level refined needed re writing invalidating tr module 
categorization similar packages may suggested models additions 
mhdl specific parts may created design hierarchy model specific instances tr module may appear design potentially described model 
level description specific number parts created model grows smaller 
assignments model correspond specific values design described model example connectors added model electromagnetic coupling adjacent devices model part specific describes single instance example tr module radar system 
instance specific level description correspondence packages 
rare package included single model specifically model corresponding single instance part 
model may layer specific breakdowns ffl general model specifies connectivity device basic parameters 
ffl behavioral specification terms relationship signals time domain 
ffl similar model frequency domain 
ffl structural model gives implementation existing components components design 
may repeated different implementations ffl cost model gives cost system derived cost production individual components 
include yield data necessary 
ffl model represents electromagnetic coupling device models design 
ffl model derived simulation results example parameter representation produced electromagnetic simulator 
ffl model derived measured data produced component measured operation 
items previous list instance specific design hierarchy 
follows pattern mentioned models include derived general versions model 
models specific fewer instances models exist fewer parts created model move single model part relationship models include part specific organization 
selection include definition model package fairly simple 
definition placed package little justification repeating definitions mhdl 
required definitions rarely placed model model concern reflecting reality microwave design setting environment 
particular class instance definitions type definitions property definitions rarely occur model 
function definitions placed package re encapsulation hiding desirable 
packages conjunction generate statements provide powerful mechanism creating general models models similar structures 
generate statements including structure definitions packages allow definitions placed structure model includes package 
example ground power connectors included electrical structures package connecting requires generate statement 
models packages deceptively simple structure mhdl 
section includes syntax examples purposefully 
syntax model package inclusion trivial consists listing models package included including model package 
implications proper model package facilities mhdl requires thought planning 
planning match project organization team mhdl design process 
generate statements generate statement powerful feature mhdl 
provides ability repeat regular structures multiple times parameters model select different numbers models 
labels changed necessary unique labels components connectors 
rule mhdl structures identical names structure build chained series devices 
example consider model amplifier uses db amplifiers implement db amplifier db amplifiers fifteen db amplifier 
simple model model includes structure elec connectors source result components components connect source source connect result source elec gain db generate structure elec connect result result elec generate gain db generate structure elec components components connect result source connect result result elec generate seen common part design structure 
generates distinguish cases db fifteen 
appropriate statements added structure 
mhdl rule identifies structure definitions name essential process 
true power generate statement seen combined inclusion semantics package 
details documented purposes model may hidden package package included part project standard package 
excellent example may seen package includes structure elec connectors ground component generate connect ground ground generate ground volts elec package effectively implements idea global ground 
electrical structure structure named elec model includes project standard connector ground connected ground subcomponents 
addition ground set zero volts 
component hierarchy power ground associated potential connectors identical zero volts 
fact ground included components resistors need practice 
non physical connectors frequently represent information flow various sorts including electromagnetic coupling 
physical ground connector power connector connectors common class devices example boundary scan complex devices included separate package included device 
package implement various detailed effects ground bounce different ground potentials 
ground pin conceptual universal ground offered simulation languages programs 
primitive values functions primitive values values mhdl defined outside language 
implementation describe fit primitive values mhdl evaluation mechanism provided implementation 
general implementations may differ gives ability provide outside functions routines mhdl model 
mhdl lrm requires primitive values referentially transparent execute side effects store internal variables affect things give answer time called identical input mechanism relaxing restriction somewhat discussed section 
primitive value mechanism things 
provide access existing models written mhdl description 
models typically written functions values connectors structure mhdl terms terms model quite different 
model expressed primitive value function recall mhdl functions values similar integers strings 
function takes input provides output values routine reflected name definition function gives type function 
primitive value name definition 
preliminaries including model mhdl description simple matter writing single equation uses primitive value defined equiv routine 
exact details implementation dependent 
note implementation dependence overly alarm proponents portable descriptions 
models outside language inherently non portable best lack portability reflected features required include model 
wish non mhdl model pay price 
extremely important primitive values give mhdl model access measured parameter values 
may assume measurement data base kept particular project 
device measurement data entered data base testers eventually production floor 
wish simulations devices pick directly measured data data updated new measurements model best data available 
best mechanism package encapsulation 
package resemble package includes string 
string 
complex primitive function called function expression assignment effectively writes data attribute example 
gain 
model structure elec gain gain elec package things 
provides data base access entire description necessary 
second encapsulates dependence outside values single package changed porting model different systems 
different complex processing added data base access routine changing single package 
wish interpolate values various data bases add take account statistical variation average multiple measurements may changed single point reflected description 
noted 
primitive value defined polymorphic type returns type class complex 
means floating point complex value may returned description needed 
adds possibility error outside function returning wrong kind value tremendous convenience 
measured parameter measured gain may returned routine parameter complex number gain physical value units decibels 
primitive values extremely important thing provide coarse grained access external tools mhdl model 
surprise considered external tool simply function may called just function 
surprisingly powerful integration mechanism 
example consider root model model root structure elec spice netlist definitions go elec root attribute netlist representation model netlist gathered manner ground connected structure example generate statement package 
functions translate inputs translate outputs convert internal forms ascii files omitted sake space straightforward 
attribute calculated values may passed tree combined generate statement package just netlist gathered 
root model gives mere sketch eventual implementation 
indicate combination packages generate statements primitive values sufficient extract information mhdl description provide external tool take information back distribute design hierarchy 
advanced modeling features 
monads primitive functions mhdl functional language 
functional languages normal imperative languages pascal sense variables state storage explicit sense control flow 
suited purposes mhdl possible represent mathematics models algorithms computing 
models descend level connecting outside world tends things difficult 
particular executing actions affect outside world primitive values saving state form calculations extremely useful 
functional programmers feature called monad provide benefits imperative programming functional framework 
general discussion monads scope discussed :10.1.1.100.9674
purposes discussing connections external tools sequencing vital limit monads specify ordering operations 
monad need specify functions unit says form monad map says apply function information monad join states combine monads 
addition wish monad specific ways example start fresh giving lot information useful state empty monad looks 
done package defines call strict monad package ordered type str str instance functor str map strict instance monad str result join instance monad str zero case 
order str 
order str ordered fairly straightforward strict monad applies strict function input creating monad identity function 
complexity case expression means cause expression diverge try create strict monad information 
expressions may ordered generators intimately bound mhdl monads 
meaning expression order exp exp exp evaluate exp bind result evaluate exp bind result evaluate exp return value 
order evaluation expressions strictly controlled exp evaluated entire expression evaluated exp evaluated 
ensures functions evaluated order preserved needed example calling primitive values order dependent 
structure functions structure function creates function structure 
may complex allows user treat model function purposes evaluating 
feature allows numerical answer questions frequency design consume power 
fact model answers precisely question model sample includes elec freq maximize ghz ghz structure elec structure goes elec sample function maximize finds maximum value function range interesting numerical techniques area functional languages see 
interesting part definition elec takes structure elec function takes frequency returns power boolean indicates constraints violated 
lazy evaluation features functional languages structure produce required answer evaluated 
example spice evaluation included structure power consumption independent spice solved voltage current flows spice tool called produce answer 
voltage current flows needed spice invoked call function elec user may feel free go home weekend waiting answer 
mhdl number language features aid specification values model depend external tools 
packages generate statements allow sophisticated user assemble extremely sophisticated capabilities modelers may needing know details 
tools may integrated mhdl model change possible fairly coarse level information exchange words level entire tool invocations 
invocation order may controlled necessary side effects taken account 
combination features allows model writer standard mhdl evaluator integral part design process 
advanced modeling features explicitly included language permit flexible mhdl descriptions models 
david barton 
mhdl 
proceedings ieee mtt international microwave symposium june 
john hughes 
functional programming matters 
computer journal april 
simon peyton jones phillip wadler :10.1.1.100.9674
imperative functional programming 
proceedings th annual symposium principles programming languages 
acm 
phillip wadler 
comprehending monads 
proceedings conference lisp functional programming 
acm 
phillip wadler 
essence functional programming 
proceedings th annual symposium principles programming languages 
acm 
