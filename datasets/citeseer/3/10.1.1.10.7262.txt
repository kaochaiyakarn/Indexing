remindin semantic query routing peer peer networks social metaphors christoph tempich institute aifb university karlsruhe karlsruhe germany tempich aifb de peer peer networks finding appropriate answer information request answer query rdf data depends selecting right peer network 
investigate social metaphors exploited effectively efficiently solve task 
define method query routing remindin lets peers observe queries successfully answered peers ii memorizes observation iii subsequently uses information order select peers forward requests 
remindin implemented swap peer peer platform simulation environment 
simulation environment order investigate successful variations remindin compare baseline strategies terms number messages forwarded network statements appropriately retrieved 
categories subject descriptors information storage retrieval content analysis indexing abstracting methods information storage retrieval information search retrieval selection process information storage retrieval systems software information networks general terms algorithms experimentation performance keywords ontologies peer peer peer selection query routing 
spite success distributed systems world wide web large share today information available computers available outside remains personal computers stored files emails databases information call pc data 
theory peerto peer networks ideally suited facilitate pc data exchange research performed master student aifb 
copyright held author owner 
www may new york ny usa 
acm xxx xxx 
steffen staab institute aifb university karlsruhe karlsruhe germany staab aifb de adrian institute aifb university karlsruhe karlsruhe germany isi fraunhofer de peers 
practice remain obstacles 
pc data constitutes open domain 
define core schema done learning object metadata lom core schema needs extended frequently 

peers know find information 

deciding information peers maintain difficult relevance data hard assess possibilities duplication limited 
individual problems solutions instance haystack shown pc data nicely managed rdf supports flexible semi structured data model :10.1.1.12.3481
current search engines show find information 
current applications tap show handle text semi structured data :10.1.1.58.2546
full text search indices maintained centralized indices exchange indices :10.1.1.123.8939
fixed schemata algorithms exist allow finding relevant information local knowledge 
requirements just possibilities current peer peer systems offer 
contribution described peer peer system easily accommodates various semantic descriptions organizes way local knowledge sufficient localize data sources maintains knowledge non obtrusive manner observed answers peers 
brief conceived query routing capability person doing social network retains meta information peers know ask knowledge observe communication fixed schema easily builds new schematic taxonomic knowledge structure decides ask peers estimates coverage reliability information particular topics 
kmr nada kth se el ims md html implemented general platform swap platform semantic web peer peer platform developed original algorithm remindin routing enabled memorizing information distributed information 
selects peers set known peers triple query avoids network flooding 
forwards query 
assesses retains knowledge peer answered queries successfully 
contrast lazy learning approach advertise peer capabilities upfront estimates observation main advantage dynamic semantic topology possible adapting user queries 
evaluate algorithm simulation platform structure aligned structure original system 
evaluate hypotheses 
remindin advantageous effective query routing estimate capabilities observation queries 
particular effect achieved meta information accumulated time 
remindin accommodate changes typical information available queried changes 
remindin background knowledge improves effectiveness 
conclude survey related embedding objectives self organizing information systems 

scenarios eu ist project swap semantic web peer peer features case studies 
build top swap platform exploiting principal features outlined section 
case study sharing databases documents cooperating tourism organization group spanish islands mediterranean 
features case study include definition unique global schema ontology possible topics drift knowledge management support provided peer peer deal flexibility 
swap bibliography case study explore sharing bibtex information peers researchers 
bibtex locally harvested files stored swap local node repository 
may search peer network order retrieve appropriate bibliographic data 
scenario particularly interesting investigation small realistic successful ii bibtex data stable interesting core greatly varying additional fields user may define bibtex entries iii bibtex data fully captured centralized repository repository dblp reflect small set topics databases ai organizational issues knowledge management 
case studies realistic necessary effectively efficiently locate appropriate peer answer particular questions 
survey swap platform describe algorithm conceived solve localization problem viz 
remindin 
table data structures parameters data structures local node repository ontology query mo meta data object specific peer resource configuration parameter pmax maximum number peers selected query forwarding hmax maximum number hops query allowed travel horizon query mean distribution standard deviation distribution proportion peers selected bution randomly algorithm tc parameter contribution confidence value rating parameters observed runtime oc confidence peer mo rc confidence knowledge specific peer specific resource set peers forward query 
swap platform swap platform built jxta 
features set modules information extraction local peer information storage query routing 
information meta information information peer stored local node repository 
implementation rdf statements sesame :10.1.1.15.3594
rdf statement consists subject predicate object 
statement may describe data 
tbl conceptual information 
university subclassof organization 
swap storage model cf 
just capture statement examples just provides meta information statements order memorize statement came resource specific confidence confidence put statements peers respectively 
swap model meta information consists rdfs classes peer 
classes properties defined provide basis social metaphors outlined specified 
corresponding data structures summarized table 
mo objects capture meta information statements resources 
comprise properties mo peer property track peer object associated 
resource specific confidence mo rc confidence value indicates knowledgeable peer specific resource scale 
high confidence expressed sake simplicity spell namespaces useful exploited swap platform 
swap semanticweb org swap peer values near low confidence expressed values near 
object capture rdf resource confidence assigns remote peer concerning matters particular resource 
link rdf resource property 
reader may note speak confidence assigned remote peer concerning particular statement equivalent longer formulation confidence assigned remote peer concerning subject particular statement 
gather confidence meta information resources anchors avoid inefficient reification 
peer statement memorize peer originated 
information peer name specified instances class peer 
links peer 
particular peer memorizes updates confidence oc peers may knowledgeable 
peer attribute measure confidence scale indicating remote peer indicating opposite 
knowledgeable peers ones provide lot information general 
querying data consider querying modes swap platform 
general query language serql conceived broekstra combines advantages languages rql rdql qel :10.1.1.58.2546
second reduce complexity simulation get better experimental grip peers ask simulation environment restricted general serql queries parts consists viz 
queries triples 
comparably tap query getdata concrete uris literals :10.1.1.58.2546:10.1.1.58.2546
addition may wildcard intuitive meaning uri literal match 
instance getdata uri match triples uri bill uri uri hillary uri ronald uri uri nancy 
reasonable simplification serql queries eventually compiled sets triple queries simple querying mechanism allows comprehensive information requests 

algorithm social metaphors peer peer system computer networks 
decentralized governing principles peer peer networks resemble social networks large extent 
mentioned core task network finding right peer multitude possible addressees peer returns answer question 
effectively efficiently remindin builds social metaphors human network works observe human searches answers question may exploit assumptions claim observations social networks way exhaustive exceptions 

question asked person assumes best answers question 

perceives person knowledgeable certain domain knew answers previous questions 

general assumption person informed specific domain probably informed similar general topic 

quite extent people knowledgeable independently domain 

knowledge perceives persons measured absolute scale 
considered relative knowledge 
remindin builds metaphors peer peer networks human social network adopts mentioned assumptions algorithmic manner 
remindin consists major phases realizing assumptions 
peer selection remindin assumptions 
query relaxation remindin weakens conditions met select peer assumption 
statement evaluation modifies estimation general peer knowledge topic specific 
phases embedded high level network protocol 
protocol scenario remindin consists steps executed locally network forwarding answering queries receiving responses 
assuming user peer issues query peer network query evaluated locally local node repository 
answers 
network forwarding 
simultaneously peer selection algorithm invoked select set peers appear promising answer query 
select peers query query relaxation algorithm broaden query peers selected eventually known peers returned 
original query send subset selected peers strength 
message containing query unique id stores id visited peers message path avoid cycles 
network answering queries 
peer receives query try answer store instance peer local repository referencing querying peer 
meta object created resource query 
answer returned directly querying peer 
just return answer empty 
peers selected querying peer peer rating algorithm invoked answers 
number maximum hops reached query forwarded selected set peers peer selection described 
receiving responses 
arrival answers querying peer relevant answers selected statement selection algorithm included repository 
answering peer included statements rated statement evaluation algorithm 
briefly survey just mentioned algorithms go details sections 
best current terms means knowledge 
versions may consider properties latency costs peer selection algorithm motivated section peer selection observations remote peers knowledge 
statements local node repository match query constitute basis yielding meta information came 
statements help identify set knowledgeable peers 
procedure result sufficient number peers forward query 
query relaxation algorithm applied query 
resulting set statements peers combine oc value peer mo rc values may vary statement peer order derive ranking algorithm 
result algorithm ordered set peers forward query see section details 
query relaxation algorithm just outlined query local node repository may directly match statements 
observation remindin relaxes query subsequently targeting peers similar knowledge see section details 
statement selection answer query contains information wants retain local node repository 
user manually determine information store system provide automatic mechanism 
currently swap supports manual statement selection 
evaluation remindin simulation retained statement answer order test remindin worst case assumption 
update oc resource specific mo rc confidence values algorithm oc mo rc values peer assigns remote peers associated statements updated separately basis received answers 
number statements returned measured statements matching original query known querying peer 
measure combined existing ratings order adjust oc mo rc values algorithm see section details 
peer selection algorithm evaluating query local node repository returns set statements matching query 
statement retrieve meta data viz 
set meta objects comprise confidence values peer knowledge particular statement confidence values peer 
remote peers local peer omitted sorted strength 
best rated peers returned targets query 
remindin able select suitable remote peers remindin relax query repeat procedure 
algorithm formalizes procedure 
called ontology peer considering query forwarding query queue containing query empty queue 
algorithm uses algorithm subroutine 
table summarizes auxiliary functions procedures 
query relaxation algorithm relaxation query achieved number ways 
exploit considerations summarized table 
table auxiliary functions procedures algorithm evaluate getdata local node repository returning statements retrieves local repository mo meta data object subject specific statement peer subject attached queries object generalizes mo peers returns sets metadata algorithm rates peer queue pairing confidence values returns ranked queue algorithm returns current state query state table state returns queue relaxed queries algorithm update update map value value 
actual outcome depends function update iu iu reverses mapping done update 
mapping means keep resource specific confidence value 
peer knowledgeable particular query knows statements subject object combination predicates states 

peer knowledgeable subject predicate combination knows statements subject predicates state 

peer knowledgeable object knows statements object object appeared subject position state 

peer knowledgeable property knows statements state 

peer knowledgeable subject subject class knows peer knowledgeable superclass state subject instance knows peer knowledgeable class subject immediate instance state 

query root concepts properties rdf rdf resource rdfs class rdfs property rdf type relaxed 
algorithm implements considerations 
exploits table order derive single element set relaxed queries 
may note particular multiple relax queries exist asks property immediate types algorithm peer selection require queue queries queue peers queue sq sq mo mo push mo peer mo rc append pmax return algorithm peer rating require queue pairs set rc rc pn pdo rc rc rc rc strength tc oc tc queue strength return rc rc rc rc subject ii implicitly relaxation recursively applied algorithm iii remain options query relaxation tests revealed ones give quite results selecting appropriate peer send original query 
general exploration optimization current design choices desirable 
table query relaxation order state query relaxed query super super class root root update resource specific confidence values algorithm updates confidence values memorizes peer oc updates algorithm query relaxation require state state return resource specific confidence values mo memorizes pair peer resource 
algorithm consists major parts 
quantifies local peer knows original query measure quantifies remote peer knows query measure lines 
second compares ratio different numbers depend mean standard deviation statements regard average query lines 
counting results observed queries assuming gaussian distribution 
correspondingly third step increases decreases touch oc values lines mo attached subjects objects subjects statements lines 
size modifications depend particular size result set compared local result 
interesting special case happens remote peer asked directly local peer returned answer 
remindin assumes certain time queried peer answer correspondingly oc mo rc values downgraded 
remote peer knowledgeable unwilling answer queries remote peer considered worthy candidate querying simple form load balancing achieved 

evaluation setting plans swap bibliography case study involve participation dozens researchers cf 
section number small evaluate remindin 
addition difficult investigate crucial parameters remindin running network 
opted evaluating remindin simulating peer peer network plausible datasets statements query routing remindin 
discuss data source local node repositories individual peers viz 
dmoz open directory rdf dump section 
briefly discuss assignment statements peers modeling human editors dmoz peers section 
describe queries generated sent section initial configuration peer peer network section evaluation measures section consider subsequently assess remindin 
data source characteristics dmoz open directory project manually categorizes web pages general interest topic hierarchy 
topic editors responsible define subtopics related topics contribute links outside web pages topic pages dmoz 
semi structured data source exists rdf dump comprising small schema instances 
main classes dmoz data set topic alias observed remote peer asked indirectly 
rdf dmoz org algorithm update resource specific confidence require cover cover compute changes resource confidence cover cover large increase resource confidence cover cover cover cover cover moderate increase resource confidence cover cover cover definitive range 
decrease resource confidence cover update resource confidence values peer oc update oc mo mo rc update mo rc topic resource topic properties link containing editor viz 
editor topic 
properties related symbolic narrow describe relations topics aliases 
alias resource alias properties title target 
target relation topic 
properties title description data source interesting properties rendering adequate evaluation purposes relations taxonomic ones topics contrast datasets 
topic editor implying natural way assign statements peers 
topics populated links 
dmoz hierarchy available pure rdf 
enhance semantic description converted rdfs 
converted topics instances class 
narrow narrow converted rdfs subclassof 
properties link interpreted rdf type topics belong 
instance www org people berners lee dmoz distinguishes important important links categorization link link link 
merged property 
analogous case true symbolic table survey dmoz open directory structure realized rdf schema instances dmoz rdf example num entity schema ber topic class top arts property property symbolic related property domain topic class top arts property range topic alias class top arts instances link rdf type www 
org people berners lee rdf type top computers internet symbolic symbolic top arts re related related lated top business arts entertainment narrow subclassof top arts movies sub narrow top arts editor peer table major statistical parameters property mean standard deviation 
topics editor 
links topic 
links editor 
queries expected 
answers query peer instance dmoz org computers internet history people berners lee tim 
order handle sheer size dmoz hierarchy included levels hierarchy experiments 
properties remaining data source summarized table 
distribution statements topics levels dmoz hierarchy editors assigned 
everybody editor category dmoz 
dmoz encourages users choose topic know join 
assume editors edit topic classes rdf store links assigned topic locally 
topic editor links need come editor 
editors may add links topics 
probably informed related topic lesser extent 
assumptions led distribution instances simulation 
represent editor peer peers 
assuming editor source instances topic class choose randomly direct instances class assigned peer local node repository 
addition considered classes directly related class subclassof related randomly assigned direct instances directly related classes peer local node repository 
peers assigned local node repository 
give impression resulting information distribution list number topics editors 
topics editor topics editors topics editors topics editors 
topics editors topic editors 
generation queries experiment queries generated experiments instantiating blueprint rdf type topic topics arbitrarily chosen set topics instance 
generated queries retrieved instances topic considering transitivity subclassof relationship subtopics 
generated different queries 
different scenarios evaluating effectiveness remindin 
set scenarios continuously choose queries evaluated right away results 
second set scenarios partitioned set queries sets equal size 
phases 
learning phase peer network confronted set queries 
explicit test phase observe peer network re adjust second set queries 
initial configuration peer peer network simulation simulation initialized network topology resembles jxta network 
peers connect rendezvous peer randomly rendezvous peers connect central jxta peer remote peer visible peers rendezvous peer 
simulation peer visible peer network knows unique identifier 
identifiers propagated queries assumption valid focus semantic routing queries technical routing 
simulation peers chosen randomly randomly selected query question remote peers network 
peers decided basis local node repository remote peers send query 
peer remindin select pmax peers send query 
baseline compared remindin naive algorithm 
case peer selected randomly pmax peers send query 
peer received query tried answer query 
query stores path forwarded peer appeared path 
evaluation scenarios integrated 
percentage selected peers randomly exchanged randomly selected ones known querying peer 
query forwarded maximal number hops hmax reached 
experiments considered leaving joining nodes far 
evaluation measures criteria evaluate algorithms peer peer systems 
summarize 
evaluation rely major measures 
recall recall standard measure information retrieval 
setting describes proportion relevant statements peer network retrieved ones 
ip numbers central jxta rendezvous peers downloaded servers initialization phase peer setting visible known possible direct addressee query synonymous table standard parameter evaluation parameter value pmax hmax tc retrieved relevant recall assess effectiveness remindin measure extent may retrieve statements peerto peer network local knowledge possibly relevant peers 
network load 
measured different 
messages query traces extent network flooded query 
number average hops indicate goal oriented query routed fast answer may returned 
network load messages query particular assess efficiency approach 

results simulations show remindin reaches significant higher recall naive baseline 
particular peer selection improved query relaxation random selection peers 
final evaluation results summarize major hypotheses wanted investigate 
hypotheses 
proposed algorithm provides better results terms recall naive algorithm 

network load needed reach specific recall decreases time measured terms messages query number hops 

peers adapt quickly new requirements expressed new queries 

query relaxation mechanism better considering just original query select peers 

parameters algorithm effect effectiveness peer selection 

randomness contributing peer selection helps escape fitting 
evaluation table define different parameters algorithm 
case state set values table 
naive approach peer parameters remindin peers chosen randomly 
points graphs represent averages queries 
hypothesis summarizes comparison re naive approach 
scenario queries queries 
naive approach produced average messages query constant recall approximately 
recall remindin random contribution increases steadily time reaches recall queries 
note queries total result just recall statements remindin remindin random naive algorithm comparision query routing algorithms 
queries proposed algorithm provides better results terms recall baseline 
recall statements messages hops 
queries messages hops hops hops hops number messages decreases time standard parameter setting 
recall increases time numbers hmax 
contribution additional recall highest hmax 
queries peer fairly low number 
remindin little random contribution peer selection produces better results 
queries reaches recall 
hypothesis illustrates simulation run remindin random contribution 
note plot number queries left hand side average recall right hand side number messages query 
depicts number messages needed reach recall average 
remindin increases recall requiring third messages query compared baseline approx 

observe recall contribution decreases number hops 
recall increases large margin hops hops accounting total recall recall increases hops 
suggests decrease number hmax significantly changing recall producing network load 
recall increases time number messages query remains 
number messages comes peers built model agree topic 
hypothesis confirm hypothesis basic algorithm random contribution 

messages query recall statements comparison distribution parameters relaxation algorithm remindin relaxation mean std 
dev 
mean std 
dev 
mean std 
dev 
mean std 
dev 

queries relaxation broaden set selected peers especially useful previously unknown queries introduced queries 
parameters distribution affect effectiveness peer selection 
recall statements trust contribution trust contribution trust contribution 
queries peer selection confidence effective mixed accounts resource confidence 
demonstrates different parameters recall degrades introduce new queries queries cf 
second scenario generating queries section 
note completely new queries rarely happens real world applications 
promising 
peer selection randomized 
result recall retains adaptation occurs quickly 
random contribution helps avoid overfitting 
hypothesis nicely exemplifies effect query relaxation algorithm 
peer selection relaxation works relaxation 
new queries arise remindin relaxation performs significantly better 
hypothesis contrasts effects different parameters query relaxation algorithm peer selection 
hypothesis confirmed 
consequence parameters severe application query relaxation algorithm 
particular simulation runs suggest certain ranges harm 
expected setting cover matching actual distribution cover case cover rates peers minor knowledge hinders identification real champions 
concentrates parameter tc contribution confidence value peer rating peer selection 
particular interest argue store information peer knowledgeable 
see diagram inclusion confidence rating increases achievable recall adapts better new queries 
test performed random contribution 
interesting note confidence fare bad 
recall statements recall random contribution recall random contribution remindin random selection messages messages 
messages 
hops selecting peers randomly enhances recall 
hypothesis hypotheses supported strength combined algorithm proportion randomly selected peers 
motivate result want recall observation human interaction 
happens meet previously unknown person provides new view world certain topics 
analyzes observation detail 
put side side average recall random contribution averaged messages 
obvious achievable recall remindin random contribution reaches certain level increase 
note average just messages peer needed get recall 
difference obvious case messages 
randomness recall enhanced substantially 

related consider areas research related 
general research peer peer systems 
second area deals semantic peer peer systems third area related chosen respect query relaxation algorithm 
general research peer peer system concentrates efficient topologies networks distribution documents 
small world effect cf 
example topologies exploited establish connection nodes efficiently 
contrast content node advertised neighbors needs updates nodes content changes 
algorithm ensures query forwarded node neighbors 
number research system related question allocate documents peer peer network 
require equally shaped keys nodes contents key searched content created address root target peer easily :10.1.1.28.5987
problem system generates substantial overhead nodes join leave network 
algorithm proposed replicates documents different peers way joining leaving produces overhead efficient structured search documents possible 
contrast examine known resource possible messages 
provide solution relevant resource place 
question examined second group related works 
edutella peer peer system jxta platform offers similar base functionality swap system :10.1.1.58.2546
propose query routing mechanism super peers 
peers topics common arranged hypercube topology 
topology guarantees node queried exactly query 
algorithm explicit topology generate overhead establish 
simulations illustrate need queries number peers reach peers 
furthermore information reach hops advantageous terms expected response time 
provide test performance algorithm 
proposed hypercube topology peers equal distinguish knowledgeable peers 
semantic overlay network son introduced 
resources clustered topic hierarchy peers subsequently join son 
sons peer joins depend clustering result local knowledge 
contrast peer actively joins peers assigned certain son 
establish connections remote peers queries 
case resources organized graph hierarchy 
exploit relations hierarchical ones find promising peers 
weight connections 
algorithm concentrates load balancing peers 
interested querying peers equally concentrate selection knowledgeable peers 
algorithm adapts self organizing way peer overloading leading nodes calculate different measures reassign categories depending results algorithm 
regarding query relaxation algorithm lot research done field query relaxation context cooperative databases cf 

contexts queries relaxed similarity function case query result answers posted database 
similarity concepts determined length shortest path interesting non hierarchical taxonomies multiple concept inheritance :10.1.1.55.5277
exploit relations knowledge structure find relevant peers map query different schema 
knowledge approach applied peer peer networks 

principle self organization discussed long time paradigm introducing order complex systems centralized control 
years see principle entry different types engineering applications cf particular ones involve web identification communities better harvesting classification information ones selforganization peer peer networks :10.1.1.16.1168
theory possibilities self organizing appear open ended ideas ranging social systems human machine agents form networks enormously effective communication structures knows milgram experiment degree sep 
idea transferring communication principles original social networks comparable technical networks peer peer networks time cf 
corresponding research taken serious stance 
devised remindin highly original algorithm find peers semantic peer peer network social metaphors 
algorithm comprises peer selection algorithm confidence ratings query relaxation observation useful responses peers 
algorithm provides significantly better results naive counterpart 
experiments remindin shown intriguing results randomness peer selection helps escape overfitting improves effectiveness remindin learning network reduces network load time parameter settings play role behaviour remindin elastic setting 

research reported partially financed eu ist project swap ist semanticweb 
org 
colleagues swap project aifb fruitful discussions 

aberer mauroux datta despotovic hauswirth schmidt 
grid self organizing structured system 
acm sigmod record 
adamic rajan lukose amit bernardo huberman 
search power law networks 
physical review 
david aha editor 
lazy learning 
kluwer dordrecht 
broekstra kampman van harmelen :10.1.1.15.3594
sesame generic architecture storing querying rdf rdf schema 
semantic web iswc volume lncs pages 
springer 
broekstra 
serql sesame rdf query language 
ehrig editor swap deliverable method design pages 

swap semanticweb org public publications swap pdf 
wesley chu hua yang chiang michael chow chris larson 
scalable extensible cooperative information system 
intell 
inf 
syst 
arturo crespo hector garcia molina 
semantic overlay networks systems 
submitted publication www db stanford edu crespo publications op pdf 
crespo garcia molina :10.1.1.123.8939
routing indices peer peer systems 
proceedings nd international conference distributed computing systems pages 
ieee press 
ehrig evaluation peer peer distributed knowledge management systems 
van editors agent mediated knowledge management international symposium stanford ca usa lnai pages 
springer berlin 
discussed noteworthy exceptions section 
karvounarakis rql declarative query language rdf 
proc 
www conference pages hawaii usa 
broekstra metadata model semantics peer peer systems 
aberer editor semantics peer topeer grid computing collocated www conference budapest may 
schlosser scalable ontology infrastructure semantic web services 
proceedings nd int 
conf 
peer peer computing pages 
ieee press 
nejdl edutella networking infrastructure rdf :10.1.1.58.2546
proc 
www conference pages hawaii usa may 
flake lawrence giles coetzee 
self organization identification web communities 
ieee computer march 
guha rob mccool :10.1.1.58.2546
tap semantic web platform 
computer networks august 
ser efficient data store discovery scientific network 
ashish goble editors proc 
ws semantic web technologies searching retrieving scientific data ceur ws 
colocated 
iswc sunsite informatik rwth aachen 
de publications ceur ws vol 
mcbride 
jena semantic web toolkit 
ieee internet computing 
milgram 
small world problem 
psychology today 
motro 
flex tolerant cooperative user interface databases 
ieee trans 
knowledge data engineering tkde jun 
nejdl super peer routing clustering strategies rdf peer peer networks 
proc 
www conference budapest hungary may 
andy oram editor 
peer peer 
harnessing power disruptive technologies 
reilly 
dennis quan david huynh david karger :10.1.1.12.3481
haystack platform authoring user semantic web applications 
semanticweb iswc lncs pages heidelberg 
springer verlag 
resnik :10.1.1.55.5277
information content evaluate semantic similarity taxonomy 
proc 
th ijcai pages 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing large scale peer peer systems 
proc 
int 
conference distributed systems platforms middleware pages 
staab heylighen gershenson flake pennock de roure aberer 
shen 
neurons fluids freshwater polyp hydra self organizing information systems 
ieee intelligent systems july aug 
stoica chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm conference pages 
triantafillou high performance peer peer content resource sharing systems 
proceedings cidr conference 
