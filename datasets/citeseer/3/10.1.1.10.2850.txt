ccmperf benchmarking tool corba component model implementations arvind krishna balachandran natarajan gokhale douglas schmidt electrical engineering computer science vanderbilt university nashville tn usa bala gokhale schmidt dre vanderbilt edu wang gautam computer science department lockheed martin advanced technology labs washington university st louis mo usa cherry hill nj usa cs wustl edu atl com commercial shelf cots middleware widely develop distributed real time embedded dre systems 
dre systems increasingly combined form systems systems diverse quality service qos requirements 
earlier generations cots middleware object request brokers orbs corba standard facilitate separation qos policies application functionality hard configure validate complex dre applications 
new generation component middleware corba component model ccm corba standard addresses limitations earlier generation middleware establishing standards implementing packaging assembling deploying component implementations 
little systematic empirical study performance characteristics component middleware implementations context dre systems 
provides contributions study ccm dre systems 
describe challenges involved benchmarking different corba component model ccm implementations 
second describe key criteria comparing different ccm implementations key black box white box metrics 
third describe design ccmperf benchmarking suite illustrate test categories evaluate aspects ccm implementation determine suitability dre domain 
demonstrate ccmperf collect metrics ccm implementation designed dre applications 
keywords ccm benchmarking ccmperf white box metrics black box metrics 

emerging trends 
distributed real time embedded dre systems widespread important 
common dre systems include telecommunication networks wireless phone services tele medicine robotic surgery defense applications total ship computing environments 
dre systems increasingly range applications multiple systems interconnected form system systems possess stringent quality service qos constraints bandwidth latency jitter dependability requirements 
challenging requirement systems involves supporting diverse set qos properties predictable latency jitter throughput guarantees scalability availability dependability security satisfied simultaneously real time 
conventional distributed object computing doc middleware frameworks dcom java rmi earlier versions corba standard provide capabilities developers users specify enforce qos requirements simultaneously complex dre systems 
component middleware class middleware enables reusable services composed configured installed create applications rapidly robustly 
corba component model ccm standard component middleware technology addresses limitations earlier versions corba middleware doc model 
ccm standard defined corba specification extends corba object model support concept components establishes standards specifying implementing packaging assembling deploying components 
empirically evaluating ccm implementations 
component middleware general ccm particular maturing technology base represents paradigm shift way complex dre systems developed traditionally 
particular provide higher level capabilities developers users dre systems specify enforce qos requirements complex dre systems 
implementations ccm available including component integrated ace orb ciao ccm 
ccm platforms mature suitable dre systems desirable devise standard set metrics compare contrast different ccm implementations terms suitability suitable ccm implementation dre applications particular domain avionics total ship computing telecom systems 
quality service ccm implementation dre domain provide predictable performance consume minimal time space resources 
conformance ccm implementation conform omg standards meeting portability interoperability requirements defined ccm specification 
earlier efforts open corba benchmarking middleware comparator projects focused metrics compare middleware doc middleware standard defined corba specifications :10.1.1.149.6219
enhances efforts focusing previously unexplored topic designing benchmarking framework compare ccm implementation quality developing metrics evaluate suitability implementations representative dre applications 
quantify comparisons systematically developed ccmperf open source benchmarking suite focuses black box white box metrics criteria latency throughput footprint measures 
metrics partitioned follow categories distribution middleware tests quantify overhead ccm applications relative applications earlier versions corba standard support component run time configuration deployment capabilities 
common middleware services tests quantify suitability different implementations corba services real time event notification services 
ccmperf available download doc wustl 
edu download html 
domain specific middleware tests quantify suitability ccm implementations meet qos requirements particular dre application domain static linking deployment components avionics mission computing architecture 
provides contributions study component middleware implemented accordance omg ccm standard describing challenges involved benchmarking different ccm implementations criteria comparing different ccm implementations key black box white box metrics design ccmperf benchmarking suite evaluates aspects ccm implementations determine suitability dre domain 
vehicle test obtain analyze results ccmperf component integrated ace orb ciao opensource implementation ccm built real time corba infrastructure ace orb tao 
shows ccmperf collect metrics evaluate ccm implementations dre domain 
results show ciao corba ccm capabilities add appreciable overhead relative tao corba foundation 
organization 
remainder organized follows section provides overview elements ccm section discusses design ccmperf focusing performance experiments supports section analyzes sample quantitative results obtained benchmarking ciao ccmperf section compares middleware benchmarking efforts section presents concluding remarks 

overview ccm corba component model ccm forms key part corba standard 
ccm designed address limitations earlier versions corba middleware supported distributed object computing doc model 
depicts key elements architecture ccm 
remainder section describes ccm elements 
components 
components ccm implementation entities collaborate ports 
ccm supports types ports including facets define interface accepts point point method invocations components indicate dependency point point method interface provided component event sources sinks ciao available download doc wustl edu download html 
dii client idl stubs obj ref orb core os kernel network protocols network interface args operation args return orb interface network component servant idl skel container object adapter os kernel network protocols network interface services component middleware layer distribution middleware layer host infrastructure middleware layer 
elements ccm architecture indicate willingness exchange typed messages components 
container 
container ccm provides run time environment components manages various pre defined hooks strategies persistence event notification transaction security component 
container responsible initializing instances component types manages connecting components common middleware services 
developer specified metadata expressed xml instruct ccm deployment mechanisms control lifetime containers components manage 
meta data xml files called descriptors 
sidebar 
component assembly 
distributed system component may need configured differently depending context 
number component configuration parameters options increase tedious error prone configure applications consisting individual components 
address problem ccm defines assembly entity group components characterize meta data describes components assembly 
component meta data turn describes features available properties features requires dependencies 
component server 
component server abstraction responsible aggregating physical entities implementations component instances logical entities distributed application services subsystems 
component packaging deployment 
addition run time building blocks outlined ccm component implementation packaging deployment mechanisms 
packaging involves grouping implementation component functionality typically stored dynamic link library dll meta data describes properties particular implementation 
ccm component implementation framework cif helps generate component sidebar separating configuration concerns ccm configuration components ccm performed different levels abstraction involves different tradeoffs 
ccm uses xml descriptors configure components 
descriptor exposes different aspects component system 
sidebar describes different types descriptors defined ccm deployment configuration specification explains help separate component configuration concerns component interface descriptor ccd describes interface ports properties single component 
implementation artifact descriptor iad describes implementation artifacts dlls os platform associated single component 
component package descriptor cpd describes multiple alternative implementations single component 
component implementation descriptor cid describes specific implementation component interface implementation monolithic 
component domain descriptor cdd describes composition domains related set nodes inter connects 
bridges 
component deployment plan cdp describes artifacts component implementation target domain information deployment provides information create component instances artifacts 
implementation skeletons persistent state management automatically component implementation definition language 
summary 
depicts interaction various ccm elements discussed section 
shown deployment application creates assembly manager charge creating component assemblies configuration files 
assemblies hosted component server plays role factory create containers provide execution environment components 
component home factory manages lifecycle type component 
illustrates ccm layer residing atop orb leverages orb functionality connection management data transfer de marshaling messages management data transfer event message demultiplexing higher level corba services higher level corba services load balancing transaction security persistence 
ccm applications may incur additional overhead compared corba counterparts form additional processing code path additional function calls 
interaction ccm entities data path parameter passing underlying orb ccm layers 
processing occur critical path request response overhead may non trivial 
remainder presents key criteria compare ccm implementations 

overview design ccmperf goals ccmperf create comprehensive benchmarks allow users ccm developers 
evaluate overhead corba ccm implementations impose corba implementations earlier generation doc model 

devise apply benchmarks systematically identify performance bottlenecks popular ccm implementations 

compare different ccm implementations terms key metrics latency throughput performance criteria 

develop framework automates benchmark tests facilitates seamless integration new benchmarks 
section describes key challenges involved developing benchmarking suite ccm address goals outlined shows challenges addressed ccmperf 
illustrate experimentation categories ccmperf sample empirical results obtained applying ciao ccm middleware 

ccm benchmarking challenges resolutions design ccmperf encountered number challenges including heterogeneity ccm im differences quality ccm implementations differences application domains heterogeneity hardware software platforms 
describe challenges discuss resolved ccmperf 

heterogeneity ccm implementations context 
ccm implementations different tools mechanisms develop configure applications ccm header files standardized omg 
process obtaining generated files compilation chain different descriptor files explained section ccm specific orb ccm implementation 
conformance ccm features automation component assembly inconsistent ccm implementations 
problem 
benchmarking framework encapsulate implementation heterogeneity ensure tests representative test equivalent configurations repeatable amenable continuous benchmarking 
course challenges microcosm issues ccm application developers address ensure portability heterogeneous ccm implementations 
solution 
shield ccmperf ccm implementation heterogeneity developed set scripts configure run benchmarking tests 
scripts automatically generate ccm platform specific code project build files implementation 
scripts similar cor project provides support corba orbs 

difference quality ccm implementations context 
ccm implementations differ data structures algorithms internally affects qos deliver dre applications 
problem 
evaluating differences requires instrumenting code orb ccm implementation presents challenges thorough understanding ccm implementations needed instrument ccm middleware probes measure performance accurately 
systematic body knowledge exists identifies critical features ccm instrumentation points added 
ccm implementations layered architectures necessary isolate layer measure influence application performance 
orb specific configuration options influence presence absence layers hard identify set steps layer combination configuration options 
solution 
discussed section ccmperf provides benchmarks combination white box blackbox metrics evaluate ccm quality implementation issues 

differences ccm configuration options context 
ccm implementations differ configurable parameters provide tune performance run time configuration options number threads logging levels locks enabled fine tune different ccm implementations 
problem 
presence implementation specific ccm configuration options yields challenges set configuration options supported ccm implementations ciao allows applications configure type locks orb ccm 
implementation optimized set configurations perform poorly configurations ccm optimized singlethreaded applications performs poorly multithreaded configurations 
solution 
ensure equivalent configurations ccmperf provides automated scripts configure run test 
scripts capture right options different implementations get equivalent ccm configurations 
ensure consistent hardware os configurations ccm perf tests run emulab lockheed martin advanced technology lab atl middleware comparator framework 
testbeds support systematic testing conditions enable equivalent comparisons performance differences ccm implementations 
atl middleware comparator framework allows experiment data accessed convenient web interface www 
atl external com projects qos 

differences application domain context 
ccm implementation tailored particular application domain ciao ccm implementation tailored dre domain ccm targeted general purpose distributed computing domain 
problem 
different domains applicability pose challenges cases may change domains dre applications require total startup time performed seconds 
component middleware catering dre domain needs optimized meet requirement middleware general purpose distributed computing may 
qos requirements may change domains 
certain metrics predictable latency static dynamic memory footprint important dre domain important domains enterprise desktop computing 
solution 
evaluate domain specific suitability provide scenario tests specific cases deemed important domain dre domain 
context evaluating ccm implementations scenarios boeing bold stroke prism component model described section 

ccmperf benchmark design describe design ccmperf focusing experimentation categories metrics collected categories 
benchmarking tests ccmperf focus black box white box metrics discussed 
black box metrics 
black box metrics performance evaluation techniques require instrumentation software internals select analyze benchmark data 
ccmperf benchmark ccm implementations knowledge internal structure standard operations published ccm interfaces modifying ccm orb internals 
black box performance metrics supported ccmperf include round trip latency measures response time twoway operation single type parameter array corba long 
throughput compares number events second processed component server number requests second client 
jitter measures variance round trip la tency series requests 
collocation performance measures response time throughput client server process vs processes different machines 
data copying overhead compares variation response time increase request size determine ccm implementation incurs excessive buffer copying relative corba orb 
footprint measures static dynamic footprint ccm implementation determine suitable memory constrained dre systems 
ccmperf measure metrics singlethreaded multi threaded configurations servers clients 
white box metrics 
white box metrics performance evaluation techniques employ explicit knowledge software internals select analyze benchmark data 
black box metrics white box metrics evaluate performance instrumenting software internals probes 
white box performance metrics supported ccmperf include functional path analysis identifies ccm layers orb adds instrumentation points determine time spent layers 
ccmperf analyze jitter measuring variation time spent layer 
lookup time analysis measures variation lookup time certain operations finding component homes obtaining facets obtaining component instance key 
context switch overhead measure time required interrupt currently running thread switch thread multi threaded configurations 
benchmarking tests ccmperf categorized general areas discussed 
area uses range black box white box metrics compare ccm implementations 
distribution middleware benchmarks 
ccmperf benchmarks employ black box white box metrics measure various aspects distribution middleware performance overhead orb ccm implementation round trip metric measures increase response time incurred corba ccm implementation corba doc model support 
application developers users apply ccmperf distribution middleware benchmarks evaluate ccm implementations meet qos requirements 
benchmarks benefit users considering moving doc middleware component middleware quantify pros cons transition 
common middleware services benchmarks 
ccmperf benchmarks quantify performance various implementation choices associated integrating common middleware services ccm containers 
ccm leverages standard services features described section 
ccm implementations standard corba service specifications customized implementations services 
ccm implementations publish subscribe model standard corba event service customized implementation real time event service 
benchmark scenario container uses event channel publish events ccmperf measures overhead introduced extra de marshaling indirection costs incurred container publishing events receivers 
black box white box metrics defined section empirically compare contrast implementation choices particular application domain 
domain specific middleware benchmarks 
characteristics application domain influence selection suitability particular service implementation 
designed ccmperf benchmarking test suites black box white box metrics defined section empirically compare contrast implementation choices particular application domain 
ccmperf benchmarks include blackbox white box tests tailored key domain specific middleware cases occur certain domains boeing bold stroke prism platform supports avionics mission computing dre domain 
purpose tests identify ccm implementation meet qos requirements particular domain organization large number components need deployed certain amount time 
dre domain instance boeing bold stroke prism architecture cases stringent timing constraints 
category benchmarks include tests analyze domain specific corba implementations real time corba real time protocols stream control transmission protocol standardized omg 
ccm specification explicitly standardize real time extensions ccm implementations ciao target dre domain support integration real time corba sctp ccm 

empirically evaluating ciao ccm perf section presents results distribution middleware benchmarks black box tests quantify overhead ciao underlying tao orb 
experiment performed intel pentium iv ghz processor mb main memory tao version ciao compiled compiler version executed linux kernel 
experiment run linux real time scheduling class sample size data points result analysis 
ciao tao support variety configuration options assumptions analysis native exception handling enabled logging disabled orb config run single threaded mode normal corba servants inherited org omg 
servant consider dii dsi proprietary policies associated orb 
assumptions consistent orb usage dre applications 
experiment description 
experiments consider usage scenarios user may ccm corba server interacting corba client corba server interacting ccm component playing role client ccm component playing role server interacting corba client ccm component interacting ccm component playing client server roles 
cases represent combinations mixing matching ccm component corba clients servers represent dre applications apply ccm implementations 
interaction scenarios get combinations tao tao tao server interacting tao client ciao tao ciao component interacting tao client tao ciao tao server interacting ciao component ciao ciao ciao component server interacting ciao component client 
tao tao interaction servers baseline compute overhead added combinations 
round trip analysis 
section analyzes results benchmarks measure average latency 
shown latency tao ciao tao tao ciao tao ciao ciao tao tao average tao ciao orb ciao tao ciao ciao 
round trip latency analysis average latency case nearly tao tao scenario having minimum average latency secs ciao ciao scenario having maximum latency secs 
average case overhead added ccm corba secs 
results indicate ciao corba ccm capabilities add significant overhead underlying tao corba implementation 

related section summarizes benchmarking efforts relate component middleware general ccm particular 
decompose middleware layers describe representative benchmarking efforts middleware layers 
host infrastructural middleware 
layer encapsulates enhances native os mechanisms create reusable event demultiplexing interprocess communication mechanisms 
benchmarking effort layer open source benchmarking suite measures quality various real time specification java implementations 
provides benchmarks features critical real time embedded systems 
distribution middleware 
distribution middleware enables clients program applications invoking operations target objects hard coding dependencies location programming language os platform 
benchmarking effort layer open corba benchmarking project generic benchmarking suite various orb implementations :10.1.1.149.6219
goal effort measure commonly orb functionality metrics tailored orb developers orb users 
common middleware services 
layer provides higher level domain independent reusable services 
benchmarking effort layer lockheed martin advanced technology lab atl middleware comparator evaluates range middleware layers including common middleware services easily accessible web interface 
method identical test conditions application hardware permits comparisons reveal performance differences various systems 

concluding remarks component middleware general qos enabled corba component model ccm implementations particular important technologies 
initiatives underway develop commercial research implementations qos enabled ccm 
systematic body knowledge describes develop metrics systematically evaluate correctness suitability quality ccm implementations 
empirically evaluating feature rich component middleware implementations ccm poses challenges 
described ccmperf benchmarking framework addresses heterogeneity ccm implementations differences configuration options implementation quality domain application provides black box white box metrics compare contrast ccm implementations multiple middleware layers distribution middleware common middleware services domain specific middleware tests categories clarify structure benchmarks facilitate integration new benchmark tests 
empirical results section show ccmperf quantify metrics overhead increases mean ciao corba ccm implementation incurs underlying tao corba implementation 
ccmperf focus benchmarking open source ccm implementations ccm completing white box scenario benchmarks enhancing ccmperf 
integrating model synthesis benchmarking experiments cosmic integrated modeling design runtime aspects qos enabled component middleware 
cosmic model approach benchmark synthesis enables quality assurance engineers testers configure components model test configurations generate benchmarking code automatically 
schmidt 
evaluating real time java features performance real time embedded systems 
proceedings ieee real time technology applications symposium san jose sept 
ieee 
gautam implementation experience omg mapping 
proceedings international symposium distributed objects applications nov 
gokhale schmidt natarajan wang 
applying model integrated computing component middleware enterprise applications 
communications acm special issue enterprise components service business rules oct 
harrison levine schmidt 
design performance real time corba event service 
proceedings oopsla pages atlanta ga oct 
acm 
institute software integrated systems 
component synthesis model integrated computing cosmic 
www dre vanderbilt edu cosmic vanderbilt university 
labs 
atl qos home page 
www atl external com projects qos 

corba component project 
www fpx de 
object management group 
notification service specification 
object management group omg document telecom edition july 
object management group 
event service specification version omg document formal edition mar 
object management group 
corba components omg document formal edition june 
object management group 
deployment configuration adopted submission omg document ptc edition july 

qos enabled distributed objects 
de 

tool providing support corba 
ua 
schmidt tao pattern oriented object request broker distributed real time embedded systems 
ieee distributed systems online feb 
sharp 
reducing avionics software cost component product line development 
proceedings th annual software technology conference apr 
sharp pla 
evaluating real time java mission critical large scale embedded systems 
editor proceedings ieee real time technology applications symposium pages washington 


sourceforge net 

model integrated computing 
ieee computer apr 
szyperski 
component software object oriented programming 
addison wesley santa fe nm 
:10.1.1.149.6219
open corba benchmarking 
international symposium performance evaluation computer telecommunication systems 
wang schmidt gokhale gill natarajan rodrigues loyall schantz 
total quality service provisioning middleware applications 
journal microprocessors microsystems mar 
white integrated experimental environment distributed systems networks 
proc 
fifth symposium operating systems design implementation pages boston ma dec 
usenix association 
