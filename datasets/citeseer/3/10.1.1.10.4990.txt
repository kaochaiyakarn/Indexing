discovering models behavior concurrent workflows jonathan cook du liu alexander wolf department computer science new mexico state university las cruces nm usa department computer science university colorado boulder usa understanding dynamic behavior workflow crucial able modify maintain improve 
particularly difficult aspect behavior concurrency 
automated techniques seek mine workflow data logs discover information workflows able handle concurrency manifests workflow executions 
presents techniques discover patterns concurrent behavior traces workflow events 
techniques probabilistic analysis event traces 
metrics number frequency regularity event occurrences determination concurrent behavior manifested system 
discovering behavior help workflow designer better understand improve processes managing 
elsevier rights reserved 
keywords dynamic analysis workflow data analysis behavior inference concurrency analysis workflow model discovery 
computers industry workflow management systems log activities occur executed workflows non workflow specific computer systems generally log activities users perform 
workflow systems rich source data mined learn processes occurring 
research centered discovering behavioral models processes capture structured orderings activities 
model driven workflow system actual activities occur contain exceptions model occupy subset model 
discovering model offer corresponding author 
tel fax 
mail address cs nmsu edu cook 
see front matter elsevier rights reserved 
doi method learning new aspects performed 
methods view activity logs trace events produced black box system 
previous developed methods event traces automatically discover sequential model behavior 
purpose event trace viewed sentence unknown language discovery methods produce grammar form finite state machine model language 
domain finite state machines allows capture basic structure sequential processes sequence selection iteration 
workflows exhibit concurrent behavior thread control producing events comprise single event trace 
cases sequential state machine model capture true behavior system sequential discovery algorithm discover overly complex models tries impose cook computers industry sequencing events interleaved different ways 
motivated discover concurrent behavior 
develop demonstrate methods detect concurrent behavior event trace infer model describes concurrent behavior 
technique uses statistical probabilistic analyses determine concurrent behavior occurring dependence relationships may exist events 
approach rely assumption randomness event orderings resulting concurrent behavior 
goal necessarily reconstruct model similar engineer understood system write identify gross patterns behavior useful understanding system 
technique may valuable revealing actual behavior match preconceived notion workflow perform 
consider goal discovery concurrent process identify individual threads individual behaviors 
step just 
concurrent process important locate points threads interact 
workflow constructed having threads example threads may execute lock step exhibit concurrency 
engineer fairly quickly see specification intended concurrency workflow identifying points thread interaction actual concurrent behavior exhibited straightforward 
contributions techniques probabilistically identifying concurrent patterns behavior event traces 
extends formalizes preliminary presentation contributes small extension previous sequential individual thread discovery techniques 
section provides definitions background discussion place technique context 
section discusses techniques discover individual thread behaviors thread specific events identified 
section discusses techniques discover threads thread information available pre associate events threads 
section details example technique discusses success methods examples 
section concludes observations related 

background section detail view events concurrency dependencies events constrain concurrency 
discuss assumptions underlie 
term system mean workflow system term thread mean sequential execution control path workflow running concurrently threads 

events previous eventbased model system actions events characterize dynamic behavior system terms identifiable instantaneous actions sending message activity invoking development tool 
events characterize behavior widely accepted diverse areas software engineering program visualization concurrent system analysis distributed debugging 
instant event relative time granularity needed desired 
certain activities short duration relative time granularity represented single event 
activity spanning significant period time represented interval events 
example document review review review event pair 
similarly order submitted queue represented events enter queue job job 
take event level view behavior attempt reason higher level activities 
purposes maintaining information action events typed attributes attribute time event occurred 
generally event attributes items agents resources data associated event tangible results action decision loan application information gives character specific occurrence type event 
described attributes logical time ordering events 
overlapping hierarchical activities system represented sequence events refer event trace 
simplicity assume single event trace represents execution system depending data collection method assumption may relaxed 
general interested discovering patterns behavior involving event types 
example discover pattern events type involved 
event shorthand refer events type event refer specific occurrence event type 
context usage clear 
detailed presentation event data systems collect event data event data analysis purposes please see 
addition demonstrates event data available industrial workflow setting software maintenance specifically collected 

view concurrency concurrent workflow simultaneously executing threads control producing events resulting event trace 
event trace represents interleaved event sequences concurrent threads assuming threads easily captured separate traces 
threads presumably cooperating achieve goal totally independent 
addition created destroyed synchronize certain points reflected sequences events produced 
example models concurrent systems familiar petri net formalism 
separate threads execution petri net models visible connectedness places transitions 
events produced transition firings sequence events produced system exactly sequence transition firings 
fig 
shows small concurrent system petri net formalism threads single events note figures cook computers industry automatically drawn textual model specifications graph layout tool dot 

event classifications types events trace workflow execution quite varied depend trace collection instrumentation available 
assume certain class events available 
workflow systems log events activity non workflow computer applications generate history actions 
clearly reverse engineer part system behavior collect information discovered abstractions reflect view system provided collected event trace 
able uncover interesting aspects concurrent behavior views may helpful engineers needing understand system 

event dependencies discovering workflow model event data basically involves determining logical dependencies events 
direct dependence defined occurrence event type directly depending probability event type 
define types direct dependence 
sequential dependence captures sequencing events event directly follows 
conditional dependence captures selection choice event set fig 

example petri net 
cook computers industry events potentially event 
concurrent dependence captures concurrency terms fork join fork set events follow event necessarily simultaneously join specific event follows set events 
synchronization point threads meet coordinate thought join fork combined instant 
terms fork join mean imply particular concurrency construct 
regardless model concurrency event trace contain points parallel threads synchronize assuming events fact represent cooperating threads 
entering synchronization point threads execute lock step joined 
exit freely execute parallel forked 
synchronization point involves sequential events fork join points bound sequential events 
direct dependencies inferred order discover model 
example iteration construct sequential case built direct conditional dependencies connected cycle 
indirect dependencies arise transitive closure direct dependencies need discovered separate dependencies 
systems may higher order complexity immediate event event dependence 
occurrence event depend previous events just previous 
example may occur preceded ab cb 
need able infer higher order direct dependencies 
time spanning activity represented instantaneous events event pair know events represent activity boundaries 
gives dependency events predefined require discovery 
relationship events necessarily direct dependence 
activity composed sequence complete activity completed 
event level event activity directly dependent event ordering maintained 
directly dependent event activity indirectly dependent 
addi tion activity fork threads simply synchronization point 
cases event directly dependent event 
points dynamic relationships events complicated static relationships events imply 
mind assume presence information denoting thread event belongs 
information may fact readily available collection mechanisms tag event thread belongs 
deciding direct dependence explained knowledge useful may misleading times 
demonstrate technique information move develop techniques thread identifying information 

tabulation event sequence characteristics event trace numerical representation characteristic sequencing behavior needed analysis performed 
successful sequential techniques markov notion frequency tables 
tables record frequencies event event sequence occur event trace 
frequencies record number occurrences event type sequence maximum sequence length 
similar representation add different analysis techniques 
working example consider system shown fig 

system simply produces event followed concurrently events repeats 
sample event trace system represent sequence subsequence event trace data tabulated 
define sequence constructors prefix sequence event removed sequence concatenated event construct sequence shorter longer respectively 
related prefix length single event prefix null 
basis data tabulation start simple counting sequences define occur number occurrences sequence example occur ac example 
define occur null total number events event trace 
define conditional probability occurrence sequence occur occur prefix essentially frequency occurrence event prefix 
example look frequency event sequences example table entry frequency row event followed column event 
example occur ba occur ba 
words occurs event trace time event time time 
frequencies interpreted conditional probability second event occur event 
event trace shown frequency table highly structured values differ greatly table entry entries 
note frequencies event add followed trace event shown table 
sake conciseness text just indicate formulas 
non zero frequencies directly represent probabilistic dependence relations second cook computers industry event type depends occurring probability 
entries frequency table interpreted immediately signifying independence imagine scenarios true 
instance event type reason depend event preceding immediate predecessor locality frequency table mask effect 
partially account noise data setting threshold low valued entries frequency table treated 
assume event trace exactly correct contains noise derives sequential system non zero entry table signify correct event sequence transition sequence discovered state machine 
system produces event trace concurrent table entries indicate spurious false dependencies 
example ab ba entries significant see system fig 
produced independently 
large part concurrency discovery problem involves deciding entries frequency tables significant 
example shows table event sequences extend representation longer sequences event sequences table aa ab ac interpret numbers conditional probability time defining conditional probability event preceding events 
general view frequency tables length sequences providing observed conditional probability event follows preceding events 
table shows increasing sequence length sequences gives frequency values offer exact predictability 
higher order tables important 
cook computers industry 
assumptions described represents initial investigation problem simplifying assumptions 
underlying approach assumption related events appear high frequency inference relation 
similar markov principle states current state higher order markov model states determines step behavior input 
essentially assume behavior part locally determined 
certainly happen system produce events directly dependent appear contiguous event trace 
occur instance slow thread mixed fast threads 
current technique handle situation issue points area 
locality assumption focus creating descriptive models simpler powerful notations petri nets concise visualizations concurrent relationships event trace 
specifically tools output moore state labeled mealy transition labeled state machines allowing vector active states just single state state machine model viewed having multiple concurrent threads 
create destroy threads states specified special fork join states 
fork state transitions leaving state taken 
join state transitions entering state taken 
example system represented petri net fig 
discovered model shown fig 

marking node box annotation signifies input transitions join threads instant executes output transitions execute concurrently 
represents synchronization point 
representation may powerful prescribe system useful describing system 
advantage visually simple representation cleanly separates behavior terms event sequencing clearly depicts concurrency exists 
important fig 

equivalent model fig 
fork join node 
offering engineer model fact may wrong incomplete places probabilistic automated method 
intend give engineer descriptive model understand deeply actual behavior 
advantage simple representation clear presentation examples 
descriptive model easily transitioned foundation prescriptive model powerful notation petri nets uml activity charts statecharts 
second assumption observed sequences events display randomness fact happening concurrently 
essential outcome true independent concurrency 
concurrent systems may display randomness level events 
technique targeted kinds systems 
third assumption repeated presentations system behavior form multiply executed loop multiple traces 
looking event sequence frequency need multiple occurrences events event sequences reliably interpret frequency 
example sequences ab ac occur presence ac trace due noise sequences frequency validity 
need data analysis meaningful 
data technique require 
statistical rule thumb probabilities number observations occurrence probability inference minimal level quite weak 
ab example occur times going frequency analysis 
assumed half possible event sequences occurred space event types occurred equally events collected analysis done 
course event sequences occur times minimal lower bound realistic 
show lower bound grows square number event types considering event sequences grow higher powers longer sequences occurring sequences tend sparser 

techniques discover individual threads event data contain information threads individual events belong extract individual thread event trace grep awk stand fashion infer thread behavior 
certainly useful start information exists offer complete picture concurrent system may intentional unintentional sequencing dependencies threads 
section briefly method inferring sequential behavior detailed 
method starts frequency tables discussed section 
process single thread event trace nonzero frequencies directly represent actual correct event sequencing assuming noise data collection 
create moore type state machine state event type instantiate transition event states direct dependence 
point model captures lowest possible behavior state event type 
need refine model account higher order dependencies 
higher order frequency tables infer event states split contexts event share similar subsequent behavior need split event state multiple states consistent contexts 
example abc occur event trace abe dbc occur state needs split abc path path 
cook computers industry previous refinement event sequences 
level model refined split middle event example shows 
extended longer event sequences 
assuming shorter sequences processed model refinement taken place 
case longer sequence needs refine model event longer sequences 
way processing middle event sequences just special case processing event higher order event sequences 
generalized algorithm shown fig 

current tools allow user select highest order processing 
practice event order worked rare systems complex require orders higher 
summary advanced techniques take sequential single thread event traces infer model behavior represented event trace 
thread identification available collected event trace parallel system valuable step understanding behavior system 

discovery concurrent behavior possible separate events different threads possible may useful try find relationships events different threads 
introduce technique discovering concurrent behavior 
section proceeds bottom fashion 
specific metrics contribute key information task discovering concurrency framework metrics combined discover complete models concurrent behavior shown event streams 
metrics include entropy measure amount information specific event type contains event type counts important distinguishing sequential concurrent behavior periodicity measure regularity occurrence event type causality metric distinguishes sequential dependence concurrent inde cook computers industry fig 

event state splitting algorithm 
algorithm executed node fsm processing length 

early formulation ideas 
section higher order processing similar detailed previous section 
assume order view system unique event type unique aspect system behavior modeled single place discovered model 
attempt split event types higher order contexts 
necessary metrics discover concurrency previous section deal 
working example process shown fig 

process simply produces event followed concurrent events process repeats event produced 
sample event stream process 
analysis purposes section longer event stream execution process particular events long generated stochastic simulation model 

entropy key calculation derived frequency tables entropy gives measure randomness conversely amount information contained event sequence occurrences 
essence entropy calculation tells frequencies distributed 
event follows event frequency ab events ae 
means behavior perfectly deterministic entropy 
event types occur frequencies distributed entropy increases event types equally entropy 
entropy means complete information seen know event hand entropy means information seeing gives insight event type 
fig 

simple concurrent process modeled petri net 
cook computers industry entropy sequence defined standard formula entropy logn set event types jej log base 
think concurrency discovered represented apparent randomness noise event stream 
precisely randomness look 
measure entropy event sequence 
assume fork style concurrent behavior specific values entropy signal fork point 
take example way fork shown fig 

perfectly balanced production order events branch fork frequency values events 
row event frequency table produced just fork produced branch fork 
entropy 
value represents asymptotic bound way fork process producing event types 
fork process balanced data entropy fork approach greater absence noise 
way fork event types entropy limit simple formula straightforward algebraic reduction eq 

logn closer entropy value limits signifying way behavior 
note formula metric apply joins simply viewing event stream backwards 
reverse frequencies easily computed forward frequencies bayes rule extra tables needed efficiency reasons implementation cook computers industry explicitly record reverse metrics forward metrics 
unfortunately metric insufficient reasoning applies sequential branching behavior 
way branch balanced production events frequency values entropy way fork 
metric help distinguish cases 

event type counts event type event types various frequencies decision behavior point sequential selection concurrent fork 
indication happening count events event types involved 
true occur occur case look individual counts 
recall assuming part event type produced single point process 
individual event counts characterize point 
selection occurring point process counts event types selection point sum count sequence selection point 
example followed selection behavior event counts say occur occur occur hand concurrency occurring point counts event types fork point equal count event sequence fork point occur occur occur sum multiple count event fork point 
occur occur occur way fork 
example reasoning assumes forks symmetric synchronous sense participating threads starting single point model multiple nested fork points 
system example worker threads created asynchronously count differentiation probably help rely mechanism distinguish threads 
behaved system relationships exactly hold event types involved paths model may noise event trace 
numbers conform neatly scenario 
counts indicate selection fork hold large difference expected event counts 

deciding causality previous metrics directed discovering synchronization points concurrent process 
multiple threads events produced concurrently may spurious frequencies chance happen produced near 
events decide sequentially causally related 
remember non concurrent case events sequentially dependent conditionally dependent 
section deals identically sequential dependence special case conditional dependence choice 
discussion assuming eliminated events signaling forks joins synchronization points 
see sequences ab ba probabilities threshold say directly dependent 
significant frequencies sequences occurring decision needs related 
see ab ba occurring decide causal order event second 
see sequences possibilities events iterate simple event loop independent causally related occurring order chance 
recall assuming event site event type model possibilities 
distinguishing relation frequencies separate cases 
sum ab ba greater equal events causally related event loop 
sum ab ba independent 
reasoning follows 
part event loop minimal sequences see recognizing loop events assuming loop exit seeing just ab determine loop 
frequencies ab ba second ab ba 
longer length sequences sum frequencies increase asymptotically approaching endpoints play role 
course possibility concurrent production events threads ab loop possibility noise act reduce sum ab ba sum truly loop 
threshold minimal expect data just event example loop user definable threshold parameter near serves help deal situation seen results threshold set test cases 
independent event types non zero frequencies aa bb may non zero frequencies likelihood ab ba occurring small 
possible independent chance sequences occur frequencies case data eventually show independent hidden constraint system truly causing exhibit behavior 
example assume model fig 
followed concurrent independent model true ab ba occur cook computers industry mistaken dependent 
assume concurrent single event loops mechanism produce mistaken dependence result 
occur timing loops high degree synchronization discovering causal relation may reflect implementation factor important understand unforeseen resource constraint timing effect 

periodicity periodicity metric consider repetitive behavior process event stream 
probabilistic analysis mentioned depends repeated presentations behavior system 
repetition event sequence period occurring 
threads period may irregular regular 
looking event sequences regular periods identify points process potential synchronization points regular 
periodicity measurement regularity period occurrence event sequence 
consider example fig 

events produced inside threads bit periods regular 
event marking fork marking join period events threads occur 
threads selection branches produce differing numbers events internal loops synchronization points exactly regular period 
period regular events internal concurrent processes suffer differences top irregularity exhibit 
define position ith occurrence sequence position position event ith occurrence event event trace numbered sequentially 
cook computers industry average period sequence position occur position position position occur occur standard deviations capture regularity periods event types periodicity measurements 
means capture long events produced process period supplemental measurements 
event types lowest standard deviations event types mark synchronization points process 

putting metrics separate metrics described sections combined single technique discovering concurrency 
framework combining techniques discover true dependencies explaining occurrences event types appear event stream 
goal find dependencies explain event stream possible know noise event stream 
specifically keep track numbers number occurrences explained inferred dependency number occurrences explain dependency 
keeping track number explained know trying explain event type occurrence keeping track number explain know event type explain 
fork join reverse inferred event denoting fork marked fully occur event dependency explained amount explained occur 
noted assume event marking fork system 
events occurrences path system occurrences potentially explained discovery process 
sequential dependency event event inferred mark explained observed occurrence sequence occur explained occur 
way conditional dependencies event explained proportion occurrence 
event trace concurrent system spurious event sequences due interleaving threads 
order account occurring sequence infer dependency satisfy metrics detailed perform update occur 
manner acknowledging occurrences followed ignored 
key approach order dependencies inferred explanations created 
haphazard processing order infer correct dependencies infer dependencies correct rest hopefully fall place 
probabilistic framework means process event types best information values 
words need infer ranking quality information infer dependencies information 
entropy direct measure information particular event type sequences 
just looking entropy directly rank event types ignores entropy limits ideal branching factors discussed section 
example event followed equally events higher entropy occurred time 
gives better information exactly shows balanced branch fork second sure branch slightly unbalanced occurrences just spurious due example thread 
find branch entropy limit eq 
closest actual entropy event sequence eq 
difference ranking 
defined entropy entropy difference branch entropy limit gives minimal entropy difference 
sequences ranked value shown definition calculate rank number unique event types raised power entropy calculation logn calculation 
linearizes ranking value 
difference sufficient rank event types processing 
entropy value close branching factor entropy limit actuality derived sequences branching factor allows 
example event types follow event way entropy measured close limit branching factor 
distinguish cases calculate total frequency highest probability sequences branching factor indicated chosen entropy limit 
defined sorted list sequences subtracting highest sequences gives amount event sequence frequency accounted branches allowed entropy limit include periodicity sequence ranking formula cook computers industry length simply standard deviation period normalized maximum period standard deviation sequences length 
final ranking combination entropy unaccounted frequency periodicity rankings rank wf wp ranking sequences processed lowest rank value best information highest rank value worst information 
sum weighted components vary differently 
entropy differences generally large compared frequency differences experience put preference periodicity 
periodicity largely unrelated metrics useful print periodicity values separately user inspect 
experience date led wf wp coefficient weights experimentation needed determine user definable parameter relationship perform better different variety data 
example ranking assume events occur trace just event types ab ac bd bf sequences occur 
furthermore assume 
entropy difference ideal branch limit log 
event entropy difference ideal branch limit 
unaccounted frequency 
applying weights rank 
example frequencies entropy closest branch entropy difference 
closer branch limit event type unaccounted frequency branch periodicity cook computers industry rank ranked lower terms quality information gives 
ranking done simultaneously forward entropies frequencies direct sequence occurrences stream reverse entropies frequencies reverse sequences event stream 
ranking processing forward reverse indications dependence manner best indications dependence direction process weaker indications dependence 
algorithm shown fig 
outline form 
phrase describing processing fig 

discovery algorithm 
uses detail metrics described 
algorithm instantiated discovery tool reads files events produces textual graph representation discovered model visualized dot graph layout tool 
discovery tool input event stream produced stochastic simulation model fig 

table shows forward frequencies event sequences periodicity metric forward reverse rankings event indicates processing order event information 
table forward frequencies periodicity deviation processing order ranking simulation fig 
pd rev event processed reverse information 
occurrences just exactly preceded giving entropy perfect information 
note forward information processed essentially information succeeds event stream 
event processed reverse forward 
preceded occurrence reverse ranking high 
successors closely balanced occurrences results entropy ranking close way branch limit forward ranking high way fork inferred nicely 
events bit step ranking note example processed relatively late events display nondeterminism orderings 
resulting discovered model shown fig 
thicker arrows stronger dependencies inferred 
event types entropy metric fork join events periodicity metric synchronization points 
event types successfully separated correct dependence relations rankings causality metric 
section demonstrates application technique larger workflow example 
fig 

discovered model process fig 

cook computers industry 
example consider example workflow process reviewing conference petri net model shown fig 

process author submits contact information program chair assigns reviewers 
reviewers obtain submit reviews 
version reviewers remotely collaborate attend pc meeting read reviews submit comments satisfied done 
program chair reads reviews decision accepted rejected 
petri net simulator generated event traces workflow process events representing executions workflow 
applied concurrency discovery tool data produced discovered model shown fig 

discovered model closely matches model generate trace validating discovery method ability find structure event trace 
mark forks joins correct events cleanly separated concurrent sub processes 
weakly inferred erroneous dependency reviewer review finished reviewer read reviews infer dependency add comments review finished reviewer sub process model discovered highly accurate noticable correct fork join points 
original model missing important control reviewer sub processes 
able read reviews reviewers submit 
example easy sense threads display completely independent behavior concurrent interleavings easy detect 
augmented original workflow model synchronization controls threads new model shown fig 

petri net model reviewer submit action marks synchronization place tokens reviewers threads wait synchronization places marked proceed reading reviews 
cook computers industry check assignment download submit review read reviews add comments review finished enter info upload assign reviewers check assignment download submit review read reviews add comments review finished read reviews accept reject check assignment download submit review read reviews add comments review finished fig 

petri net model review process workflow 
enter info upload assign reviewers check assignment check assignment check assignment download download download submit review read reviews add comments cook computers industry review finished submit review read reviews add comments review finished read reviews submit review read reviews review finished accept reject fig 

discovered model event traces fig 

add comments cook computers industry check assignment download submit review read reviews add comments review finished enter info upload assign reviewers check assignment download submit review read reviews read reviews check assignment download submit review add comments review finished read reviews accept reject review finished add comments fig 

petri net model augmented review process workflow 
check assignment download cook computers industry enter info upload assign reviewers check assignment download submit review submit review check assignment download submit review read reviews read reviews read reviews add comments review finished review finished read reviews add comments add comments accept reject review finished fig 

discovered model event traces fig 

cook computers industry simulated workflow model resulting events executions workflow 
note set event types exactly 
applied discovery tool event trace discovered model shown fig 

discovered model quite remarkable correctly identifies fork join points reviewer threads identifies synchronization dependencies threads 
furthermore dependencies discovers threads 
void mistake fig 
reviewer threads erroneous dependency 
synchronization middle reviewer threads acts anchor point breaks possible concurrency threads threads easier separate real concurrency synchronizations discovered correctly 
model loops add comments events infers optional single event path 
examples average comment events thread single event loops heavily exemplified event trace unreasonable discovery algorithm especially face concurrency 

related long history theoretical concerned inferring grammars languages example sentences language 
efforts statistical methods 
early efforts looked problem concurrency trace 
research efforts specifically workflow area aimed inferring sequential concurrent models event activity logs 
herbst investigates discovery sequential concurrent workflow models logged executions 
data log partially ordered time spanning activities totally ordered instantaneous events 
allows algorithms view activity ordering correct useful datum induce model 
techniques geared recovering model face noise randomly ordered instantaneous events 
weijters van der aalst explore area workflow process mining 
view data instantaneous events frequency counts heuristic rules infer dependency appear similar 
causality metric cleverly takes account possibility causal events appearing directly contiguous event trace concurrent process useful framework 
translate dependency graphs desired workflow modeling notation petri nets 
agrawal investigate producing activity dependency graphs event workflow logs 
logs identify partial ordering concurrent time spanning activities concerned producing correct minimal graphs 
notion identifying synchronization points activities 
related area debugging understanding distributed concurrent software systems 
due popularity message sequence charts msc scenario requirement design specification method efforts centered combining individual mscs single behavioral model 
efforts quite different traces small human designed sequences represent unique aspect behavior system 
sequence sure represent important aspect need probabilistically reason observed sequences useful 
dynamic analysis efforts take large amounts trace information condense mscs aggregate state diagrams 
purely sequential traces 
explore methods design recovery distributed systems look recovering design architecture task flow source code 
look dynamic behavior point limitation approach 
venkatesan event framework testing debugging distributed programs 
provide distributed algorithms evaluating global predicates specify correct behavior system exhibiting 
diaz event framework line validation distributed systems 
mechanism employs active observer listen events messages compare actual behavior formal specification correct behavior 

developed demonstrated probabilistic techniques inferring concurrent models system behavior event traces 
events attribute identifies thread belong sequential model techniques applied infer single thread model 
summarized previous area minor extension 
events thread identifying information new techniques needed find correct dependencies random orderings events produced multiple concurrent threads 
mathematically formalized extended techniques sketched example workflow demonstrating capabilities techniques 
providing techniques engineers maintaining creating workflow models enhance effectiveness understanding actual processes help making changes beneficial improvement workflow 
directions need explored 
assumption single place events restrictive 
extending technique allow model produces event type multiple points significant improvement 
previous sequential discovery method markov just concurrent case complex computations entropy periodic behavior 
computations need cook computers industry separated set production points event type 
built extension 
incorporating domain existing knowledge system enhance validity metrics 
engineer example know priori certain event type signal synchronization point threads workflow know total threads 
mentioned previously collection methods may able associate events specific threads remove difficult points detecting actual concurrency 
domain knowledge may allow information gleaned 
example knowledge number persons involved workflow lead statements number threads inherent 
investigating thresholding behavior technique providing better threshold parameters guidance important direction technique widely usable 
technique essentially greedy algorithm retracts decisions dependencies instantiate 
extending allow multiple possible dependencies explored significantly enhance quality results achieved 
problems techniques usually increase running times algorithms prohibitively 
limitation mentioned previously slower threads producing events near recognized worth studying pursuing 
domains looked lagged frequencies calculates frequency immediate event event lag investigate suitability method problem concurrency discovery modeling 
causality metric demonstrates positive results lines 
methods purely relative time timed event trace absolute time provide different alternatively interesting results 
long period inactivity look short relative time states system may purposely synchronized idle period 
researchers heading direction 
cook computers industry supported part national science foundation ccr ccr eia eia air force materiel command rome laboratory advanced research projects agency contract number 
content information necessarily reflect position policy government official endorsement inferred 
cook wolf discovering models software processes event data acm transactions software engineering methodology 
cook wolf event detection concurrency proceedings sixth acm sigsoft symposium foundations software engineering association computer machinery pp 

wolf rosenblum study software process data capture analysis proceedings second international conference software process ieee computer society pp 

leblanc robbins event driven monitoring distributed programs proceedings fifth international conference distributed computing systems ieee computer society pp 

avrunin buy corbett dillon wileden automated analysis concurrent systems constrained expression toolset ieee transactions software engineering 
bates debugging heterogenous systems event models behavior proceedings workshop parallel distributed debugging acm press pp 

cuny forman hough kundu lin snyder stemple debugger scalable application event abstraction proceedings acm onr workshop parallel distributed debugging acm press pp 

cook process discovery validation event data analysis technical report cu cs university colorado boulder november 
cook votta wolf cost effective analysis place software processes ieee transactions software engineering 
peterson petri nets acm computing surveys 
harel statecharts visual formalism complex systems science computer programming 
devore probability statistics engineering sciences third ed brooks cole pacific grove ca 
koutsofios north drawing graphs dot bell laboratories october 
angluin smith inductive inference theory methods acm computing surveys 
pitt inductive inference dfas computational complexity analogical inductive inference vol 
lecture notes artificial intelligence subseries lncs springer verlag new york pp 

gold language identification limit information control 
valiant theory learnable communications acm 
jain sharma monotonic strategies learning languages algorithmic learning theory vol 
lecture notes artificial intelligence subseries lncs springer verlag new york pp 

lange language learning examples algorithmic learning theory vol 
lecture notes artificial intelligence subseries lncs springer verlag new york pp 

carrasco oncina learning stochastic regular grammars means state merging method grammatical inference applications vol 
lecture notes artificial intelligence subseries lncs springer verlag new york pp 

syntactic structural pattern recognition theory applications vol 
series computer science grammatical inference world scientific new jersey chapter pp 

herbst inducing workflow models workflow instances proceedings scs concurrent engineering europe conference society computer simulation 
herbst machine learning approach workflow management proceedings th european conference machine learning vol 
springer verlag berlin pp 

herbst dealing concurrency workflow induction proceedings th european concurrent engineering conference 
weijters van der aalst process mining discovering workflow models event data proceedings th belgium netherlands conference artificial intelligence pp 

weijters van der aalst rediscovering workflow models event data proceedings th dutch belgian conference machine learning pp 

agrawal gunopulos leymann mining process models workflow logs lecture notes computer science 
kruger grosu scholz broy mscs statecharts proceedings distributed parallel embedded systems kluwer academic publishers dordrecht pp 

scenarios timed automata building specifications users requirements proceedings asia pacific software engineering conference ieee pp 

alur yannakakis inference message sequence charts proceedings nd international conference software engineering pp 

understanding behavior java programs proceedings working conference reverse engineering pp 

piazza roberts harris design recovery distributed systems ieee transactions software engineering 
venkatesan testing debugging distributed programs global predicates ieee transactions software engineering 
diaz observer concept formal line validation distributed systems ieee transactions software engineering 
cook wolf software process validation quantitatively measuring correspondence process model acm transactions software engineering methodology 
van der aalst van discovering workflow performance models timed logs proceedings international conference engineering deployment cooperative information systems lncs vol 
pp 

cook computers industry jonathan cook faculty member computer science department new mexico state university 
research interests areas software process data analysis dynamic analysis software reliable component systems large software system maintenance 
dr cook member acm ieee computer society 
du received ms degree computer science new mexico state university 
liu received bs ms geophysics china university geosciences respectively 
currently phd student department computer science new mexico state university 
current research interests include parallel distributed systems logic programs event software model discovery 
alexander wolf faculty member department computer science university colorado boulder 
previously bell laboratories 
dr wolf research interests discovery principles development technologies support engineering large complex software systems 
published papers areas software engineering environments tools software process software architecture configuration management distributed systems persistent object systems networking security 
dr wolf currently serving chair acm special interest group software engineering editorial boards acm journal transactions software engineering methodology wiley journal software process improvement practice 
