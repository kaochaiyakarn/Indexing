inferring type isomorphisms generically frank johan jeuring institute information computing sciences utrecht university netherlands cs uu nl 
datatypes differ names structure said isomorphic example ternary product isomorphic nested pair binary products 
canonical cases conversion function uniquely determined solely types involved 
article describe implement program generic haskell automatically infers function normalizing types algebraic theory canonical isomorphisms 
simple generalization technique allows infer non invertible coercions projections injections ad hoc coercions base types 
explain technique drastically improve usability haskell xml schema data binding suggest applied improve type safe language embeddings 
typed functional languages haskell ml typically support declaration user defined polymorphic algebraic datatypes 
haskell example define datatype representing dates number ways 
straightforward conventional definition probably date data date date int int int dutch programmer prefer date nl data date nl date nl day month year data day day int data month month int data year year int american programmer hand opt date follows date format data date date month day year programmer access existing library compute dates int triples may prefer date data date date int int int sake simplifying data conversion application library 
cases example datatype declarations programmer deal unusual declarations data date date int int int data date date int int int data date date int int int types represent data structure represent differently certainly unequal firstly different names fundamentally exhibit different surface structures 
consequently programs types applications conversion functions 
case amount code required define conversion function large declarations machine generated number representations simultaneously supported large size conversion code unmanageable 
show infer conversions automatically 
isomorphisms fact types represent type captured notion isomorphism types isomorphic exists invertible function desired conversion function 
invertibility basic facts isomorphisms isos short identity function iso type isomorphic composition isos iso 
considered relation isomorphism equivalence types 
familiar isos consequence semantics base types 
example conversion meters miles non identity iso floating point type double preserve origin conversion cartesian polar coordinates example 
polymorphic isos arise structure types example hears products associative isomorphism 
sort called canonical coherence iso morphisms chief interest 
canonical isos special uniquely determined types involved canonical iso polymorphic type schemes 
assume datatypes strict haskell non strict semantics typically entails transformations nesting add new value renders claim false 
monoidal isos 
canonical isos haskell summarized syntactic theory 
unit unit zero zero isomorphisms witness identities evident ones 
identities row express fact unit resp 
zero right left unit resp 
says resp 
associative 
call isos collectively monoidal isos 
list exhaustive 
example binary product sum canonically commutative currying distributivity isos canonical subtle important difference monoidal isos isos mentioned 
canonical possess unique polymorphic witnesses determined type schemes involved case monoidal isos uniqueness property transfer unconditionally setting types 
see consider instantiating product commutativity iso scheme obtain int int int int identity witnesses intended twist map identity function 
distinction part attributable form identities involved monoidal isos strongly regular 
variable occurs left hand side identity occurs exactly right hand side vice versa 
occur order sides 
strong regularity condition adapted generalized multicategories 
claim proved strong regularity sufficient necessary condition ensure pair types determines unique canonical iso witness 
strong regularity properties types determine unique iso exists generate automatically 
program infers monoidal isos commutativity distributivity isos attempted treat currying iso 
type syntax familiar generic haskell literature unit respectively nullary binary product zero respectively nullary binary sum constructors 
datatype isos 
generic haskell datatype declaration effectively induces canonical iso datatype underlying structure type 
example declaration data list nil cons list induces canonical iso list unit list call isos datatype isos 
note datatype isos strongly regular general example list identity mentions twice right hand side 
intuitively witness datatype iso constructor 
claim hope prove isos sort uniquely determine canonical witness 
largely side effect way generic haskell works inference mechanism infer datatype isos 
outline remainder article organized follows 
section give informal description user interface inference mechanism 
section discusses significant application iso inference way automatically customizing haskell xml schema data binding 
section examine generic haskell implementation iso inferencer 
section summarize results discuss related possibilities area 
inferring isomorphisms generic haskell user point view iso inference simple matter generic functions reduce univ expand univ reduce takes value type converts universal normalized representation denoted type univ expand dual converts universal value back regular value possible 
iso converts expressed expand reduce expand reduce mutual inverses 
merely isomorphic expansion may fail succeeds types canonically isomorphic monoidal datatype iso theories 
example consider expression expand bool bool int string reduce bool bool int string true inl inr evaluates true inr inl function reduce picks type isomorphism class serves normal form uses canonical witness convert values form 
normalized values represented special way type univ typical user need understand internals univ expand fails 
essentially structurally substantially different automatic conversion save user substantial amount typing time effort 
functions infer coercions invertible canonical witnesses projection product left injection sum 
reductions expression expand bool int reduce bool int true evaluates left true note evaluate right reduction involve projecting suffix injecting right infer prefix projections left injections 
course prefer theory include dual pair coercions doing break property pair types determines unique canonical witness 
see section coercions cleverly laid datatype simulate single inheritance 
look examples fail 

conversion expand bool int reduce int bool fails theory include commutativity 

conversion expand bool reduce int fails types isomorphic 

conversion expand bool reduce fails chose represent certain base types bool reducing 
currently implementation depends universal type univ failure occurs run time message helpful pinpointing error source printed 
section discuss possible may provide static error detection 
improving haskell xml schema data binding program processes xml documents implemented xml data binding 
xml data binding translates xml document value programming language 
bindings defined number programming languages including java python prolog haskell 
default translation scheme data binding may produce unwieldy convoluted redundant types values 
haskell xml schema binding called suffers problem 
section case study show iso inference address practical problem problem overwhelmingly complex data representation tends accompany type safe language embeddings 
outline problem explain design criteria gave rise show attack 
essence strategy define customized datatype chosen client programmer especially application 
mechanism automatically infer functions convert customized representation bracketing core program reduce expand 
generic haskell rest programmer largely relieved burden imposed data representation 
technique situations example compilers similar language processors designed exploit type safe data representations 
problem space describe detail briefly give reader sense magnitude problem 
consider xml schema describes simple bibliographic record doc including sequence authors title optional publication date year followed month 
element name doc type doctype complextype name doctype sequence element ref author minoccurs maxoccurs unbounded element ref title element ref minoccurs sequence attribute name key type string complextype element name author type string element name title type string complextype name sequence element ref year element ref month sequence complextype element name type element name year type int element name month type int example document validates schema doc key homer author homer author title title doc binding tool translates types doc doctype pair types explained section data doc doc elem le doc le doctype data le doc eq doc doc data doctype doctype seq key seq rep le author zi seq le title rep le zs zz data le doctype eq doctype doctype le le example document eq doc doc elem eq doctype doctype seq key attr eq string string homer seq rep zi eq author author elem eq string string homer seq eq title title elem eq string string rep zs rep zz knowing details encoding definitions unfamiliar datatypes see problem user wants say retrieve content author field pattern match constructors reaching homer 
larger complex documents document types problem worse 
conflicting issues usability issues side effect design goals 
discuss depth close suggesting similar issues may plague applications process typed languages 
type safe preserves static type information possible eliminate possibility constructing invalid documents 
contrast java xml bindings tend ignore great deal type information types repeated elements partly limitations java collections 
second translates sublanguage xml schema types expressive dtds 
entails additional complexity compared bindings merely target dtds 
example xml schema supports just distinct notions subtyping general treatment mixed content dtds 
third translation closely follows model schema language msl formal semantics going far replicate formalism syntax closely haskell type syntax allows 
advantages able prove soundness translation valid documents translate typeable values translator relatively easy correctly implement maintain 
strict adherence msl introduced number dummy constructors wrappers eliminated 
fourth haskell directly support subtyping xml schema binding tool emits pair haskell datatypes schema type equational variant represents documents validate exactly closed variant represents documents validate subtypes expectation typical haskell user read document closed variant pattern match determine exact equational type bulk computation 
intended foremost support development schema aware xml applications generic haskell 
describes programs xml compressor operate documents schema necessarily parametrically 
example exploits type information schema improve compression ratios 
generic haskell works traversing structure datatypes employ methods wash encode schema information non structural channels haskell type class system 
information necessarily expressed structure types complex 
schema aware applications complexity issue generic functions typically need pattern match deeply datatype 
mixed content refers character data interspersed elements 
example xhtml element contain character data elements em 
help illustrate example schema translation posited doctype hypothetical subtype 
appears body second constructor le doctype section 
aim conventional applications demonstrated overwhelming problem 
closing emphasize similar issues arise data bindings machine generated programs type safe representation typed object language metalanguage haskell 
preserving type information necessarily complicates representation 
style object language preserved desire staying close msl representation complicated 
subtyping involved 
representation intended support generic programming obliged express information possible structurally entails complexity 
reasons tempted eschew type safe embeddings entirely point programming statically typed language exploit type system 
arguably complexity problem arises static typing insistence single data representation 
section show iso inference drastically simplifies dealing multiple data representations 
exploiting isomorphisms datatypes produced complicated 
consider ideal translation target look 
obvious conventional haskell style translation image doc module doc data doc doc key string authors string title string data year integer month integer observe particular target types doc conventional names look machine generated fields typed conventional haskell datatypes string lists attribute key treated just elements intermediate wrapper elements title year elided generate new types positional information encoded wrappers available field projection names field name authors changed element name author natural authors projects list author tag wraps single author 
achieving analogous result java data binding require annotating editing source schema directly writing binding customization file substantially longer datatype declarations 
methods require learning xml vocabulary details translation process uses xpath syntax denote parts require customization maintenance hazard schema structure may change 
iso inference system provided document known exactly type doc proper subtype required haskell declaration plus modest expand doc reduce doc expression denotes function type doc doc converts unwieldy representation doc idealized form 
example complete generic haskell program reads doc conforming document standard input deletes authors named de writes result standard output 
module censor import framework import automatically translated xml schema import doc datatype declarations main interact toe doc censor censor authors filter de authors toe doc doc expand doc reduce doc expand doc reduce doc parse doc role coercions recall system infers non invertible coercions course half story hear 
easily implement dual pair coercions implement ad hoc fashion refrain doing 
partly reducing universal type thrown away type information 
knew types involved clear example coercion determine left right injection 
fortunately biased form subtyping proves quite useful 
particular xml schema called extension subtyping exactly matches form projection coercion allows documents validating type contexts type matches prefix extension schema form subtyping called restriction allows documents validating type contexts type document validating validates restriction happen regarded grammar reformulated disjunction productions appears left injection coercion capture part subtyping relation 
due combination circumstances situation better expected 
subtyping schema manifest nominal purely structural consequently restriction holds types assigned name schema 
second translation models subtyping generating haskell datatype declaration closure named schema type 
example colored point example familiar object oriented literature expressed data point point data cpoint cpoint data le point eq point point le cpoint le cpoint data le cpoint eq cpoint cpoint 
third arranged translator eq 
constructors appear leftmost summand 
means injection equational variant translated type closed variant leftmost injection consequently picked expansion mechanism 
eq point point le point eq cpoint cpoint le cpoint haskell equipped dealing subtyping reading xml document coercion way read le point point course unsafe 
writing value document coercions save inserting constructors 
course schema coercion mechanism structural employ capability ways 
instance writing value document fact leftmost injection type omit optional elements 
summarize main points case study 
demonstrated example translated datatypes overwhelmingly complex redundant 
address complaints problem stems merely bad choice representation enumerated design criteria explained necessitate representation 
suggested translations type safe embeddings problem 
described exploit iso inference mechanism address problem coercion inference simplify treatment object language features subtyping optional values metalanguage inherently support 
generic isomorphisms section describe automatically generate isomorphisms pairs datatypes 
implementation platform generic haskell particular dependency style gh 
section assumes basic familiarity generic haskell definitions remarkably simple 
address problem parts treating product sum isos isolation showing merge implementations 
describe simple modification resulting program implements non invertible coercions 
case build requisite morphism reducing value value universal data type reduce univ type univ plays role normal form expand value expand desired type canonically isos 
handling products define functions reduce expand infer isomorphisms expressing associativity identities binary products unit unit assume set base types may include integers booleans strings 
brevity sake mention integers code 
data uint int bool string functions merely serve convert back forth larger world little universe base types 
type int uint type int uint know ignore types remove occurrences unit right associated tuple simply cons list representation univ defined type univ implementation reduce depends auxiliary function red accepts value accumulating argument type univ returns normal form value respect laws 
role reduce just prime red empty list 
type red univ univ red red red int int red unit id red red red reduce univ reduce red example reduce action reduce int int int uint uint uint function expand takes value universal data type returns value type depends generic function len computes length product number components tuple type len int len len len int len unit len len len observe unit assigned length zero 
write expand reduce defined terms helper function exp time dual fashion unparsed remainder appearing output 
type exp univ univ exp exp exp int int exp int error exp exp unit unit exp exp exp type expand univ expand expand expand case exp error expand case compute lengths factor product determine values project remember need base type 
information tells split list recursive calls 
example expand action expand int int int uint uint uint handling sums turn treatment associativity identity laws sums zero zero implement zero type visible constructors data zero handling sums section redefine universal type right associated sum values data univ univ note datatype univ isomorphic data univ uin int prefer simplifies definitions 
add second integer field data univ uin int int uin shall call arity remembers width sum value reduced call rank denotes zero indexed position arity choice 
guarantee course unit zero observable values representation univ defined 
time function reduce represents values ignoring choices zero right associating sums 
examples show example inputs reduced write int uint uin inl zero uin inr zero uin inl uin inr uin inl inl uin inl inr uin inr uin function reduce depends generic value arity counts number choices sum 
type arity int arity arity arity int arity zero arity arity arity define reduce type reduce univ reduce reduce reduce int uin int reduce zero reduce inl uin arity uin reduce reduce inr uin arity arity uin reduce treats base types unary sums computes rank value examining arities summand effectively flattening sum 
function expand defined follows type expand univ expand expand expand int uin int expand zero error expand expand uin aa ab aa inl expand uin ab aa ab inr expand uin aa aa error expand aa ab arity arity logic case checks universal value fits sum type injects appropriate summand comparing value rank arity sure adjust rank arity recursive calls 
sums products may difficulty handling sums products simultaneously arises designing type univ na amalgamation sum univ call product univ call permits multiple representations values identified canonical isomorphism relation 
rules isomorphism theory interact particular account sort distributivity simpler solution exists nest representations add top layer new base type 
example place add new constructor encapsulate sums 
data uin integer data unil data uint int omit details changes code examples straightforward 
handling coercions reader may noticed expansion functions impose unnecessary limitations 
particular expand product require length universal value equals number computed len expand sum require arity universal value equals number computed arity 
lift restrictions replacing equality inequality project prefix universal value tuple smaller length inject universal value choice larger arity 
modified definitions shown products expand case exp sums expand uin aa ab aa inl expand uin ab aa ab inr expand uin aa aa error expand aa ab arity arity changes implement canonical coercions projection product left injection sum ad hoc coercions 
schema conventional languages defines subtyping relation primitive types 
example int subtype integer subtype decimal 
easily model adding base types modifying functions convert base types 
decimal decimal integer dec decimal uint int dec integer integer uint int integer int uint primitive coercions easy handle due care break coherence properties inference inferred coercion depends operational details inference algorithm 
described simple powerful general mechanism automatically inferring behaved class isomorphisms demonstrated addresses usability problems stemming complexity haskell xml schema data binding 
mechanism leverages power existing tool generic haskell established growing theory type isomorphisms 
believe general idea exploiting isomorphisms implementation technique application 
example libraries written distinct developers application include different representations amounts datatype 
passing data library data converted conform library internal conventions 
technique simplify conversion task sort application practical iso inference probably integrated type inference class isos inferred enlarged 
discuss possibilities 
related mentioned wash xml data bindings haskell 
model schema language semantics superseded newer investigating adapt encoding treatment 
special purpose languages xslt xduce yatl xm xtatic take different approach xml problems 
computer science type isomorphisms popularized demonstrated value software retrieval tasks searching software library functions matching query type 
area places start theory type isomorphisms di cosmo book bruce 
focused linear type isomorphisms 
category theory mac lane initiated study coherence seminal book treats case monoidal categories 
dybjer mac lane coherence theorem influenced technique 
strong regularity condition sufficient ensuring algebraic theory cartesian cartesian monads hermida formalize notion generalized multicategory generalizes usual category imposing algebraic theory objects letting domain arrow term theory 
schema matching 
areas database management electronic commerce plethora data representation standards formally schemas transmit store data hinder reuse data exchange 
deal growing problem schema matching problem construct mapping elements schemas active research area 
size complexity number schemas increasing finding ways accurately efficiently automate task important see rahm bernstein survey approaches 
believe approach exploits syntax semantics types provide new insights schema matching 
particular notion canonical iso morphism help clarify mapping semantics forced entirely structural considerations additional information linguistic descriptive provably required disambiguate mapping 
implicit coercions 
thatte introduced declaration construct introducing user defined implicit conversions types equational theory types 
thatte presents principal type inference algorithm language requires equational theory unitary unifiable pair types unique general unifier 
ensure theories unitary thatte demands finite acyclic uses syntactic condition related different strong regularity ensure finiteness 
thatte system coherence hold user supplied conversions true inverses 
relationship thatte system requires investigation 
ways thatte system liberal allowing example distributive theories 
hand requirement rules associative theories infinitary 
acyclicity condition rules commutative theories strongly regular currying iso difference thatte system catches errors compile time implementation run time 
final difference finite acyclicity condition decidable requirement conversions invertible consequently users may introduce declarations break coherence property produce ambiguous programs 
system user defined conversions obtained structurally datatype isos datatype declarations fail canonical possible break coherence 
generic haskell implementation 
see ways improve current implementation iso inference 
detect inference errors statically dynamically see 
inferring isomorphisms linear currying isos powerful kinds isomorphisms commutativity products sums distributivity attractive 
currently adding new ad hoc coercions requires editing source code coercions typically depend domain application better approach parametrize code 
exploit fact generic haskell allows define type cases type constructor providing generic functions reduce expand provide single generic function coerce expand reduce fact unique witness property readily transfer type schemes types circumvented inferring class polymorphic functions instantiated suitable types 
generic haskell currently allow write expressions coerce 
infer canonical isos restriction handle examples date nl date section 
inference failure 
implementation depends universal type univ failure occurs dynamically message helpful pinpointing error source printed 
situation unsatisfactory invocation expand reduce functions mentions types involved principle detect failures statically increasing program reliability 
early detection enable new optimizations 
example types involved isomorphic equal conversion identity compiler omit altogether 
types isomorphic reduction unreasonably done compile time isos known terminating just amounts adjusting data representation match exactly 
investigated tested approach static failure detection extension generic haskell type indexed datatypes 
idea introduce type indexed datatype nf denotes normal form type iso theory reformulate functions assigned types reduce nf expand nf example considering products type nf defined follows type nf norm unit data norm unit data norm data norm int int give gh compiler information reject bad conversion compile time 
unfortunately semantics gh type indexed datatypes generative approach 
problem apparent try compile expression expand int reduce int gh flags type error treats nf int nf int distinct unequal structurally identical datatypes 
possible solution issue may considered gh extension called type indexed types opposed type indexed datatypes 
nf implemented type indexed type haskell type synonyms structurally identical instances ones forced equal expression compile 
type indexed types currently envisioned share limitations haskell type synonyms recursion type indexed type nf list int cause compiler loop tries expand recursive occurrences traversing datatype body 
approaches considered addressing problem static error detection type indexed types promising 

authors dave clarke andres comments eelco comments earlier version 
tom kindly clarified questions cartesian monads strong regularity condition 
swierstra helped investigate approaches static detection inference failure 

frank dave clarke johan jeuring 
scripting xml generic haskell 
proc 
th brazilian symposium programming languages 
see utrecht university technical report uu cs 

vincent roberto di cosmo 
linear logical view linear type isomorphisms 
csl pages 

ilya peter dybjer 
extracting proof coherence monoidal categories proof normalization monoids 
types pages 

allen brown matthew fuchs jonathan robie philip wadler 
msl model xml schema 
proc 
www may 

kim bruce roberto di cosmo giuseppe longo 
provable isomorphisms types 
mathematical structures computer science 

sophie cluet sim 
yatl functional declarative language xml 

jorge coelho rio 
type xml processing logic programming 
padl pages 

roberto di cosmo 
isomorphisms types lambda calculus information retrieval language design 
birkh user 

vladimir benjamin pierce 
regular object types 
european conference object oriented programming ecoop 

hermida 
representable multicategories 
advances mathematics 

ralf hinze johan jeuring andres type indexed data types 
proceedings th mathematics program construction conference mpc volume lncs pages 

haruo hosoya benjamin pierce 
xduce typed xml processing language 
third international workshop web databases webdb volume lecture notes computer science pages 

oleg shriram 
manipulation language xml 
padl pages 

thomas 
higher dimensional category theory 
phd thesis trinity college st john college cambridge 

tom 
higher higher categories 
cambridge university press 

xavier leroy objective caml system release documentation user manual december 
available caml inria fr ocaml 

andres dave clarke johan jeuring 
dependency style generic haskell 
proceedings international conference functional programming icfp august 

saunders mac lane 
natural associativity commutativity 
rice university studies 

saunders mac lane 
categories working mathematician volume graduate texts mathematics 
springer verlag new york nd edition 
st ed 

bruce 
repair type errors automatically 
trends functional programming proc 
scottish functional programming workshop volume 

brett mclaughlin 
java xml data binding 
reilly 

erik meijer mark shields 
functional language constructing manipulating xml documents 
available www cse ogi edu mbs 

metz allen brookes 
xml data binding 
dr dobb journal pages march 

sun microsystems 
java architecture xml binding 
java 
sun com xml 

robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press may 


xml data bindings python parts 
xml com 
www xml com pub py xml html 

simon peyton jones john hughes haskell non strict purely functional language 
available haskell org february 

rahm philip bernstein 
survey approaches automatic schema matching 
vldb journal large data bases 

mikael 
retrieving library identifiers equational matching types 
conference automated deduction pages 

mikael 
retrieving library functions unifying types modulo linear isomorphism 
informatique applications 

mark shields erik meijer 
type indexed rows 
th annual acm sigplan sigact symposium principles programming languages pages 
available www cse ogi edu mbs 

sim philip wadler 
essence xml 
proc 
popl 

sergei 
complete axiom system isomorphism types closed categories 
voronkov editor proceedings th int 
conf 
logic programming automated reasoning lpar st petersburg russia july volume pages 
springer verlag berlin 

satish thatte 
coercive type isomorphism 
proceedings th acm conference functional programming languages computer architecture volume lncs pages 
springer verlag new york 

peter thiemann 
typed representation html xml documents haskell 
journal functional programming july 


xsl transformations 
www org tr xslt 

malcolm wallace colin runciman 
haskell xml generic combinators type translation 
international conference functional programming pages 
