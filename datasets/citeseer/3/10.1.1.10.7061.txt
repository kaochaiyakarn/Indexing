opportunistic content addressable storage distributed file systems michael satyanarayanan brad karp thomas bressoud adrian perrig appear proceedings usenix annual technical conference san antonio texas irp tr june disclaimer document provided warranties whatsoever including warranty non infringement fitness particular purpose 
intel authors document liability including liability infringement proprietary rights relating implementation information document 
provision document provide license express implied intellectual property rights copyright intel rights reserved 
opportunistic content addressable storage distributed file systems michael satyanarayanan brad karp thomas bressoud adrian perrig intel research pittsburgh carnegie mellon university denison university motivated prospect readily available content addressable storage cas introduce concept file recipes 
file recipe class file system object listing content hashes describe data blocks composing file 
file recipes provide applications instructions reconstructing original file available cas data blocks 
describe application recipes casper distributed file system 
casper client opportunistically fetches blocks nearby cas providers improve performance connection file server traverses low bandwidth path 
measurements prototype evaluate performance varying network conditions 
results demonstrate significant improvements execution times applications network file system 
conclude describing fuzzy block matching promising technique approximately matching blocks cas providers exact desired contents file client 
exploding interest distributed hash tables dhts suggests content addressable storage cas basic facility computing environments :10.1.1.140.3129:10.1.1.105.3673:10.1.1.28.5987
show cas improve performance conventional distributed file system built client server model 
nfs afs coda examples distributed file systems computing environments 
goal improve client performance situations distant file server accessed slow wan cas providers export standardized cas interface located nearby lan 
concept file recipe central approach 
recipe file synopsis contains list data block identifiers block identifier cryptographic hash contents block 
data blocks identified recipe obtained combined prescribed recipe reconstruct file 
cache low bandwidth network client may request file recipe data 
client may able reconstruct file recipe contacting nearby cas providers including cas services available client lan access 
usage scenario recipe helps transform wan accesses lan local client accesses 
recipe class entity substitute file situations 
example space tight file cache files may replaced corresponding recipes typically smaller 
preferable evicting file entirely cache recipe reduces cost cache resulting file 
client disconnected presence recipe may difference replacing cache file reconstruction 
important note approach opportunistic dependent cas correct operation distributed file system 
recipes way compromise attributes naming consistency write sharing semantics 
cas completely transparent users applications 
reconstructing file blocks may available cas providers 
case blocks fetched distant file server 
situation loss consistency correctness 
cas providers organized peer peer networks chord pastry may impromptu systems 
example desktop lan enhanced daemon provides cas interface local disk 
cas interface extremely simple just calls query fetch explained detail section 
arrangement system administrators offer cas access required abide peer peer protocol provide additional storage space 
particular cas providers need guarantees regarding content persistence availability 
proof concept implemented distributed file system called casper employs file recipes 
evaluated casper different bandwidths variety benchmarks 
results indicate substantial performance improvement possible recipes 
casper imposes requirements regarding availability cas providers free terminate service time 
encourages users offer desktops cas providers full confidence withdraw time 
envi ronments system administrator may prefer dedicate machines cas providers 
dedicated cas provider referred jukebox 
summarizing related section discuss utility recipes propose xml representation section 
describe architecture casper section relate details implementation section 
section evaluate performance casper quantify performance dependence availability matching cas blocks 
briefly review security considerations associated recipes section 
propose technique section similar blocks exactly matching blocks cas 
summarize findings conclude section 
related content hashes represent files file systems explored previously 
single instance storage uses content hashes compression coalesce duplicate files venti employs similar approach block level 
low bandwidth file system lbfs operates variable length blocks exploits commonality distinct files successive versions file context distributed file system :10.1.1.10.8444
pastiche backup system employs similar mechanisms :10.1.1.101.3227
systems content hashes internally 
casper file system described uses similar techniques proposes canonical representation hash file descriptions recipes promotes descriptions members class data type 
casper introduces concept portable recipe support legacy applications 
addition casper allows nodes storage participate cas providers prior systems lbfs restrict search file system commonality individual peer client server 
attention devoted overlay networks form distributed hash tables dhts 
area includes chord pastry freenet 
believe dhts valuable cas context may act content providers system 
file systems built atop dhts include cfs past ivy 
systems completely decentralized share model participants join overlay offer write access local storage participants directly indirectly 
cas participants may offer share contents storage agreeing store data 
casper client function connectivity widely dispersed collection overlay members 
casper client fall back requesting data file servers choose exploit available dht infrastructure beneficial 
exception ivy peer peer file systems traditionally read single publisher systems 
casper layered traditional network file system changing original file system semantics 
fluid replication pangaea attack distributed file system performance problem widearea networks 
fluid replication differs casper dependence dedicated machines aid update propagation implemented casper techniques complement approach 
casper provides conventional access control model client server architecture pangaea uses decentralized model designed allow ad hoc sharing replication data 
significant body area delta encoding methods require fixed point data comparison 
casper hand opportunistic need fixed file works correctly absence previous version object 
recipes file recipes provide instructions construction files cas data blocks 
recipe lists addresses cas blocks compose desired file describes arrangement component blocks 
example file object divided sequence kb blocks 
listing sha hash block order derive possible recipe file 
possible recipes exist sequence sha hashes kb blocks sequence hashes sized blocks generated rabin fingerprints 
object recipe known object may reconstructed fetching component cas objects ingredients named recipe available source combining specified recipe 
recipe may include multiple recipe choices 
choice possible method describing original file 
choice available recipe application casper file system may select appropriate recipe choice situation 
suppose example cas providers campus support sha hashes kb blocks cas providers neighboring campus support md hashes kb blocks 
file recipe contains choices sha kb hashes md kb hashes corresponding file reconstructed recipe applications campus 
recipe maps set ingredients cas namespace higher level namespace filesystem namespace 
recipes firstclass objects may stored higher level namespace 
benefit class status recipes cached consistency recipes may maintained traditional coherency mechanisms 
example casper file system file recipes stored ordinary files xml version recipe type file metadata length length modified modified file system type coda name coda projects shared casper pl name fid fid version version file system metadata recipe choice hash list hash type sha block type fixed fixed size number hash af dd hash hash fa hash hash list recipe choice recipe choice hash list hash type sha block type variable number hash size hash hash size db ff hash hash list recipe choice recipe choice hash list hash type md block type fixed fixed size number hash hash hash list recipe choice recipe 
sample file recipe may cached file system cache 
consistency cached recipes server version recipe maintained cache coherency protocol 
consistency file recipe maintained lazily maintaining version numbers files 
adopted xml extended markup language language expressing recipes 
example file recipe shown 
course main motivation employing xml portability 
believe recipes generally useful abstraction encoding recipes portable format various applications able infrastructure 
sample recipe describes file bytes 
generating recipe application created recipe included additional metadata modified time type file system file file system specific data 
naturally recipe metadata extended information file ownership access permissions 
information required casper may benefit applications leverage file recipes 
metadata xml element possible recipe choices recipe choice elements recreating data constitute file 
recipe choice list sha hashes corresponding kb blocks 
grammar hash list denote series hashes contents concatenated form region 
case hashes compose entire file 
fact kb blocks described hash list compose object slightly larger length metadata 
cases assembly resultant object truncated proper length 
second recipe choice hash list comprising sha hashes variable length blocks generated employing rabin fingerprints find block boundaries 
file blocks corresponding hashes hash list need concatenated form original file 
third recipe choice hash list comprising single md hash entire file 
hash may final checksum ensure statistically file integrity 
assembling file constituent blocks recipe application may fail find requested cas components 
missing components retrieved mechanism obtained complete file assembled 
file wide hash enables cas application provide confidence file assembled correctly 
note various choices provided recipe typically orthogonal cases cas data fetched cas source 
example suppose attempting reconstruct file kb hash list recipe application determines blocks 
client query cas providers determine appropriate blocks variable length list cover missing blocks 
data fill missing regions file 
casper distributed file system casper distributed file system employs file recipes reduce volume data transmitted file server clients 
casper clients cache files granularity relies centralized file servers guarantee data persistence file consistency 
novel aspect casper clients opportunistic nearby cas providers improve performance scalability 
available client server bandwidth low file fetch operation client requests recipe contents file 
hashes contained recipe casper attempts reconstruct file fetching components nearby cas providers 
components near client fetched casper server responsible maintaining master copy file serves 
small files implementation classifies files smaller kb small files enjoy benefits cas acceleration due recipe metadata network overhead costs 
consequently casper employ recipe mechanism transferring small files 
data composing small file transferred directly 
casper caches data file granularity provide file session oriented open close consistency model afs coda 
consequently file reconstructed placed client cache 
efficiency casper clients treat caches cas providers 
requesting component nearby external cas providers clients inspect caches determine component part previously cached file 
way casper mimics fetch behavior lbfs 
primarily concerned client reads 
intend extend current implementation accommodate client write operations adopting similar local cache lookup mechanism server side 
leverage recipe mechanism view client writes server reads modified file 
sending file modifications server client sends recipe modified file file contents 
server data instances components request components locally nearby cas providers retrieve remaining components client directly 
recipes casper treated hints consistency files recipes managed lazy fashion 
file system maintains version number file 
recipe generated recipe includes version file derived 
casper clients check expected version file version stored recipe metadata cached stale recipe reconstruct file 
recipe determined stale casper triggers creation new recipe server 
implementation implementation casper derived coda distributed file system adopted modular proxy layering approach described data staging 
depicts organization system 
coda client coda file server modules unmodified releases coda client server respectively 
proxy module responsible intercepting communication client server determining activate casper cas functionality 
coda client proxy act casper client 
likewise coda file server recipe server act casper server 
recipe server component responsible forming responses recipe requests 
proxy design enables prototype new file system features cas performance en modifying coda 
design proxy provides client interface identical coda server interface 
proxy monitors network conditions determines available cas provider 
optimal conditions casper system behaves identically unmodified coda installation proxy 
detecting low bandwidth network conditions proxy registers recipe server cas provider 
provider example jukebox 
low bandwidth conditions persist proxy intercepts file requests client asks corresponding recipe recipe server 
recipe server responsible generating recipe current version file delivering proxy 
proxy attempts retrieve data blocks named file nearby cas providers including client file cache 
proxy request recipe server deliver blocks cas provider 
file reconstruction complete passed back coda client places file file cache 
traffic writes currently intercepted proxy passes directly file server 
sections describe design implementation recipe server proxy jukebox detail 
recipe server name indicates recipe server generates recipe representation files 
module responsible responding requests missed data blocks forwarding callbacks 
recipe server specialized user process accesses file system information standard filesystem interface 
implementation maintains generated recipes files casper file system 
user files directory zeta recipe server stores corresponding recipes sub directory zeta zeta shadow 
show recipe server located coda server 
machine server may act recipe server 
fact user lan connected workstation workstation may excellent choice location user primary recipe server machine warm client cache 
recipe request arrives recipe server recipe server determines recipe file corresponding request exists file system 
recipe read recipe server cache coda file server checked consistency 
versioning information recipe compared current version file 
recipe stale exist recipe server generate new send proxy store shadow directory potential reuse 

file read coda client client lan connection 
cas request proxy cas storage jukebox 
system diagram mentioned section recipe server responds requests recipes small files file contents file recipe 
threshold current implementation kb 
reason special handling transfer time small messages low bandwidth networks dominated network round trip time 
data blocks queried cas providers referred missed blocks 
implementation proxy fetches missed blocks recipe server 
recipe server supports requests byte extents 
missed block request form fetch file offset length 
reduce number transmitted requests missed blocks adjacent file combined single extent request proxy employ optimization combining multiple fetch requests single multi fetch message 
alternative implementations missed block requests serviced file server 
chose recipe server reduce file server load installations recipe server located file server 
recipe server contributes maintaining consistency forwarding callbacks file server proxy files proxy reconstructed recipes 
recipe server receives invalidation callback file sending recipe file client callback forwarded requesting client proxy 
recipe server user process coda client recipe server receive consistency callbacks directly 
recipe server communicates coda client module coda standard socket interface exports callback messages 
consequently implementation callback forwarding mechanism require modification client server 
mechanisms gather similar information tool potentially serve function casper 
cas reply 
recipe request 
recipe response wan connection 
missed block request 
missed block response file writes recipe server coda file server server ported network file systems provide necessary interface 
proxy proxy entity transparently adds file reconstruction distributed file systems modifying file system code 
arrangement necessary operation casper eased implementation prototype 
main tasks performs fetching recipes reconstructing files 
proxy acts server client proxy intercepts file read requests originating client 
client cache misses induce fetch requests caught proxy 
fetch operation causes proxy send request file recipe recipe server file system operations forwarded directly coda server 
assuming recipe fetch request successful proxy compares version received recipe expected version file 
recipe version upto date proxy expected version number proxy contacts coda server confirm file version number 
recipe version older problem recipe server recipe server may disconnected coda server request redirected file server 
request redirected file server unexpected recipe server errors occur 
version numbers match proxy selects available recipe choices recipe file proxy proceeds reconstruct file 
interpreting xml data received proxy queries client local cache nearby hashes recipe 
matching blocks fetched remaining blocks fetched recipe server 
proxy assembles constituent pieces returns resulting file client 
retval query hash bool retval hash bool retval fetch hash bool block blk retval hash bool block blks retval enumerated type indicating operation succeeded 
operation requires identification channel input argument shown 

core cas api note disabled nagle tcp ip algorithm recipe hash requests issued proxy algorithm induced performance overhead small requests 
content addressable storage api cas api defines interface cas consumers cas providers 
cas consumers request data blocks specifying hash blocks contents providers storage devices respond requests 
api proxy cas consumer uses communicate cas providers 
interface level cas consumers address providers handles known channels 
abstraction provides common interface providers peer peer networks devices 
cas api provides mechanism obtaining characteristics channel 
currently mechanism envision consumers determine channel characteristics type hashes supported channel bandwidth measure channel topological proximity consumer 
enumeration available channels responsibility cas api module running client system 
general topic service discovery network rich area discussed 
context cas api role service discovery enumerate set available local remote services relay associated characteristics consumer 
underlying mechanisms employed may varied may range static specification local operating system mechanisms network protocols ldap universal plug play 
summarizes operations cas api 
core operation cas api retrieval cas data block block hash fetch call 
consumer specifies hash object retrieved hash data structure includes hash type block size hash value channel 
fetch returns boolean indicating block specified channel block 
consumer may single request multiple blocks function specifying array hashes channel 
function returns array booleans set data blocks 
cas api provides associated query operations inquiring presence block allocating buffer space network bandwidth block returned 
currently developing content addressable storage wire protocol companion cas api 
common wire protocol multiple cas providers discovered consistent manner requiring rewriting consumer side cas library code 
jukebox evaluate casper prototype implemented jukebox cas provider conforms api described 
consumer provider proxy jukebox communication supports query fetch functions currently implemented lightweight rpc protocol 
jukebox linux workstation uses native ext fs file system store cas data blocks 
currently system administrator determines set files exported cas objects 
jukebox recipes track location data blocks exported files 
jukebox creates memory index data startup 
index keyed hash provides efficient lookup mechanism 
evaluation measured performance benefit recipe file reconstruction different benchmarks 
evaluated benchmark combinations network bandwidth network latency jukebox hit ratio 
describe experimental methodology discuss benchmarks results 
experimental methodology experimental infrastructure consisted contemporary single processor machines 
jukebox client workstations ghz pentium processors 
client mb sdram jukebox gb 
file server contained ghz pentium iii xeon tm processor gb sdram 
jukebox client ran red hat linux distribution kernel file server ran red hat linux distribution kernel 
machines ran version coda large disk cache client prevent eviction experiments 
recipe server process located file server 
discount effect cold buffer caches ran trial experiment measurements 
ensured coda client cache cold experiments 
simulate different bandwidths latencies nist net network emulator version 
client connected jukebox mb ethernet client connection server controlled nist net 
benchmarks ran different client server bandwidths mb mb kb report results mb client server connection casper clients fetch data server directly client server bandwidth equal better client jukebox bandwidth 
extra latencies ms ms introduced mb kb cases respectively 
extra latency introduced mb case 
effectiveness recipe reconstruction casper highly dependent fraction data blocks client locate nearby cas providers 
sensitivity analysis explore effect cas provider hit rate casper performance 
experiment bandwidth cases jukebox populated various fractions requested data 
case jukebox explicitly populated data requested execution benchmark 
chunks population jukebox selected randomly 
extreme give indication best case performance system overhead 
baseline comparison execution benchmarks unmodified coda client server 
recipes employed casper experiments included single type recipe choice sha hashes variable size blocks average block size kb similar lbfs 
experiments recipes cached client 
client cache generated recipe fetch file 
client cache big prevent eviction reconstructed files client requested file recipe 
measured commonality hit rate requests cas providers highly dependent commonality data file server cas providers 
expect degree commonality depend applications trying exploit 
applications virtual machine migration benchmark evaluation wellsuited casper approach 
benchmark reconstructs data including common operating system application code typical disk drives 
preliminary study authors user systems prior suggest high degree commonality may expected application 
commonality may expected retrieving common binary source code distributions 
software developer different versions source tree exhibit trend 
example compared commonality various releases linux kernel source commonality linux kernel releases mozilla commonality linux kernel releases mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla mozilla commonality mozilla nightly binary releases data series represents measured commonality version software package previous releases package 
point data series represents percentage data blocks version occur previous release 
horizontal axis shows set possible previous releases vertical axis relates percentage blocks common 
data series peaks compared 

linux kernel mozilla commonality code 
study define commonality fraction unique blocks common pairs releases 
mozilla mozilla mozilla mozilla mozilla figures show measured commonality versions linux kernels 
applied block extraction algorithm casper kernel source tree collected unique hashes blocks tree 
compared set hashes derived release set hashes derived previous release series 
results show commonality uncommon compared source trees versions apart 
minimal commonality observe approximately 
show section degree commonality lead significant performance benefits cas low bandwidth conditions 
small changes accumulate source code time corresponding compiled binary diverge progressively content earlier binaries 
assess commonality binaries changes small source level changes accumulate examined nightly mozilla binary releases march th march th 
measurements 
binary average shares content common binary preceding revision 
worst case cas jukebox binary march th client desires binary th observe commonality 
performed analysis major mozilla releases observed significantly commonality binaries great increase code size functionality releases 
interesting exception concerned release security fix release commonality previous 
measurements cross revision commonality source code binaries promising somewhat domain specific 
degree commonality users files bears investigation 
highly personalized data held common multiple users 
may cases users share large objects email attachments sent users organization 
investigation cross user commonality scope requires study substantial user population 
demonstrate measurements presence relatively little commonality casper offers performance improvements clients low bandwidth connection file server 
measurements show casper adds little overhead file system operations blocks jukebox 
benchmarks evaluated different benchmarks casper file system mozilla software installation execution trace virtual machine application modified andrew benchmark 
descriptions benchmarks experimental results sections 
normalized runtime kb mb mb mozilla install times different jukebox hit ratios kb mb mb ms ms added latency respectively 
bar mean trials maximum standard deviation observed 

results mozilla install mozilla install software distribution application casper may prove effective 
installing upgrading software package previous version package may target machine machine near target previous version may provide wealth matching blocks 
evaluate software distribution casper measured time required install mozilla browser 
installation packaged different rpm package manager rpm files ranging kb mb total size mb 
files kept directory coda file system installed rpm command options 
reports time taken mozilla install complete various network bandwidths 
times shown mean trials maximum standard deviation 
compare benefits different settings time shown normalized respect time taken baseline install just coda 
observed average baseline install times kb mb mb seconds seconds seconds respectively 
note apart network transfer time total time includes time taken rpm tool install packages 
expected gain casper pronounced low bandwidths relatively modest normalized runtime kb mb mb internet suspend resume benchmark times different jukebox hit ratios kb mb mb ms ms added latency respectively 
bar mean trials maximum standard deviation observed 

results isr benchmark hit rates dramatically improve performance system 
example reduction benchmark execution time mb jukebox population 
expect casper system networks high bandwidth low latency characteristics mb case graph shows worst case overhead low noticeable reduction benchmark time possible approximately population case 
internet suspend resume original motivation pursuing opportunistic content addressable storage arose internet suspend resume isr 
isr enables migration user entire computing environment layering virtual machine system top distributed file system 
key challenge realizing isr transfer user virtual machine state may large 
virtual machine state include installations popular operating systems software packages data may expected cas providers 
investigate potential performance gains obtained casper isr employ trace approach 
workload traced virtual disk drive accesses observed execution isr system running desktop application benchmark mode 
cda common desktop application benchmark uses visual basic scripts automate execution common desktop applications microsoft office suite executing windows xp environment 
replaying trace re generate file access pattern isr system 
isr data interest stored kb files casper 
trace replay files fetched casper client machine 
benchmark approximately files accessed 
trace include user think time 
shows results internet suspend resume benchmark various network bandwidths 
time shown mean trials maximum standard deviation 
times shown normalized respect baseline time taken unmodified coda 
actual average baseline times kb mb mb hours minutes seconds seconds respectively 
comparing previous mozilla experiment see benefit casper pronounced quantity data transferred grows 
mozilla experiment mb case shows significant gains exploiting commonality hit ratios 
note isr experiment mb link hit rate casper reduced execution time 
interaction application reads writes explains anomaly 
time application writes disk block virtual machine resumes write triggers read block block fetched virtualized disk 
writes asynchronous flushed disk periodically 
casper speeds execution fewer writes flushed disk shorter run time fewer write triggered reads occur execution 
conversely casper slows execution writes flushed disk longer run time reads occur execution 
interaction writes reads explains higher expected overhead hit ratio cases mb link 
modified andrew benchmark evaluated system modified andrew benchmark 
benchmark similar original pastiche uses larger source tree :10.1.1.101.3227
source tree apache consists files total size mb 
script driven benchmark contains phases 
original source tree scripts recreate original directory structure executes bulk file copy source files new structure stats file new tree scans files builds application 
isolate effect cas acceleration file fetch operations modified andrew benchmark experiments executed write disconnected mode 
copy jukebox network bandwidth hit ratio kb mb mb baseline results copy phase modified andrew benchmark run kb mb mb ms ms added latency respectively 
result mean trials standard deviation parentheses 
results modified andrew benchmark copy phase phase complete local copy files allowed remaining phases unaffected network conditions copy phase show benefit casper system 
modified andrew benchmark differs mozilla isr benchmarks average file size small half files kb size 
described section current system configured recipe requests files kb rejected recipe server favor sending file 
jukebox data file casper fetches slow network link 
note operations happened write disconnected state affected bandwidth limitations local operations 
shows phases affected network conditions mb case 
observed similar numbers kb mb cases 
presents results copy phase experiments copy phase execution time depends bandwidth 
shows relative benefits opportunistic cas different bandwidths 
time shown mean trials standard deviations included parentheses 
interestingly total time taken kb experiment hit ratio baseline 
attribute behavior fact data apache source tree replicated consequently matches blocks client cache 
results mb case show high overhead cases 
benchmark illustrates weakness current casper implementation 
small files transferred network performance casper dominated sources overhead 
example proxy approach induces additional inter process transfers file relative baseline coda installation 
jukebox inspection introduces multiple additional network round trip time latencies associated jukebox query messages subsequent requests 
normally sources overhead compensated improved performance converting wan accesses lan accesses 
particular benchmark difference peak bandwidth lan connection simulated wan connection sufficient compensate additional overhead 
practice casper detects high bandwidth situation system revert baseline coda behavior 
adjustment avoid system slowdown illustrated example 
security considerations focus investigation largely distributed file system performance security considerations raised recipes 
section briefly comment interaction recipes file system security 
consider security properties data confidentiality data authenticity data integrity data privacy user access control 
foremost security concern raised recipes querying jukebox file poses privacy risk jukebox learns checksums blocks user desires 
large database common blocks checksums malicious jukebox eavesdropper deduce content user requests 
privacy risk appears fundamental approach 
efficient solution remains open problem 
conventional encryption techniques pose challenge recipe systems 
user encrypts decrypts data distinct secret key plaintext data encrypted different ciphertext users different encryption keys 
case commonality obscured encryption user share blocks marginal benefit best 
convergent encryption encrypting block hash block key recipes applicable identical data encrypted identical ciphertext recipe identify matching blocks 
hand recipes easily coexist data authenticity 
data authenticity non repudiation required file simply contain message authentication code digital signature 
authentication data simply part file recipes describe 
likewise recipes ensure data integrity 
recipe provides strong cryptographic checksums file contents user strong guarantee file integrity block checksums match 
recipe system enforce access control requirements recipes identical requirements corresponding files 
recipes contain way hashes file data reveal information useful malicious user wishes learn file contents 
attacker old version file date recipe file compute changed versions old file brute force checksums ab phase baseline copy total modified andrew benchmark run mb column represents hit ratio jukebox 
times reported seconds standard deviations parentheses 
results modified andrew benchmark mb recipe identify correct version new file 
prevent attacks casper assigns recipes identical permissions files summarize 
extension fuzzy block matches experimental results clearly show bandwidth client server dominant factor determining performance benefit afforded cas block hit ratio jukebox 
relationship suggests strategies increasing hit ratio may improve performance cas enabled storage systems 
section propose fuzzy block matching promising enhancement cas topic continuing research implementation efforts 
recipe block types considered far fixed variable length blocks require exact matches block hash recipe block hash jukebox 
matching hashes prove extremely high probability jukebox home file server generated recipe canonical instance file data hold data block 
inexact match block contents possible 
blocks may share bytes common differ bytes 
fuzzy block matching allows cas client request blocks approximate contents needs jukebox approximately matching blocks reconstruct file contents exactly match canonical version file 
simply block contents approximately match desired 
resulting reconstructed file differ canonical file stored home server 
lee view block jukebox approximately matches desired block version desired block received noisy channel 
lee error correcting codes correct short replacements similar disk blocks 
note analogous opportunity cas correct errors jukebox block produce exact desired block 
fuzzy block matching specification block recipe includes pieces information exact hash value matches correct block fuzzy hash value matches blocks similar correct block error correcting information applied block similar correct block may recover correct block 
hit rate increase offered fuzzy block matching improve added error correcting information note items compact total size 
recipes viable mechanism significantly smaller file contents 
expect bytes suffice hold useful fuzzy hash values error correcting information 
fuzzy block matching works follows cas client sends jukebox enhanced recipe entry block described 
jukebox determines holds block hash matches exact hash value returns block client 
jukebox uses fuzzy hash value find candidate blocks holds approximately match block sought client 
jukebox applies error correcting information candidate block 
corrected block hash matches exact hash value recipe jukebox returns corrected block client 
jukebox candidate blocks corrected match exact hash cas client missed jukebox 
algorithmic aspects fuzzy block matching identifying approximately matching blocks fuzzy hashing error correcting approximately matching blocks recover correct block 
sketch techniques pursuing solve problems 
shingle block length byte 
structure disk block length shingle contiguous bytes 

fuzzy hashing known technique efficiently computes resemblance web documents 
douglis iyengar apply identify similar data objects file system may terms 
briefly describe adaptation broder binary disk blocks cas context 
assume variable length blocks boundaries determined rabin fingerprints block contents described section 
consider block length bytes 
define shingle sequence contiguous bytes block 
shingles overlap shingles block length bytes bytes zero shows shingle disk block 
horizontal arrows denote sliding byte window block produce different shingles 
compute hash shingle disk block 
broder enhanced version rabin fingerprints hashing reasons computational efficiency 
procedure produces set integral shingle values 
sort shingle values numeric order select smallest unique values 
values form represents approximate contents disk block 
estimating resemblance blocks simple computation involving number shingle values share common 
cas stored recipe fuzzy hash block 
client presents jukebox may identify blocks similar desired block 
similar blocks essence approach divide variablelength disk block fixed length non overlapping subblocks subblock may shorter detect possibly offset subblocks remain unchanged content insertions deletions replacements full disk block 
subblocks changed treated 
targeting specific maximum number changed subblocks store ecc information recover original data block 
scheme replacements insertions deletions fixed length blocks amount corruptions subblocks 
client fingerprints ecc subblocks jukebox insertion subblocks ecc subblocks original subblocks recovering correct block version stored jukebox ecc data jukebox scans unchanged subblocks uses ecc blocks produce correct block 

example similar block correction working disk block length define fixed subblock length client recipe includes rabin fingerprint subblock 
client requests similar blocks jukebox includes rabin fingerprints subblocks request 
candidate block holds jukebox scans subblock rabin fingerprints receives client 
scan mean jukebox computes rabin fingerprint subblock candidate block scanning contiguous region length described previously rabin fingerprints computationally efficient compute sliding window offset block data 
candidate block contains insertions deletions replacements contain subblocks identical subblocks correct block 
example ecc procedure provided 
client desires disk block subdivided subblocks 
client stores recipe rabin fingerprint subblocks 
stores ecc subblocks bytes long originally derived block canonical contents 
assume jukebox candidate block contains insertion length shorter subblock 
jukebox computes rabin fingerprint contiguous byte subblock candidate block identifies subblocks rabin fingerprints match provided client subblock correspondences correct block jukebox block shown vertical dashed arrows 
jukebox applies ecc unchanged subblocks ecc blocks overcomes erasure modified subblock produce exact desired block 
final check jukebox computes exact match hash corrected block compares exact match hash requested client 
assume chosen ecc robust loss subblocks practice degree redundancy chosen ecc reflect degree difference blocks wishes recover successfully 
pays increased robustness changes candidate block increased storage ecc blocks recipes 
detail size block components recipes prototype implementation fuzzy block matching currently developing 
prototype uses variable sized blocks mean size subblocks bytes length 
sha exact match hash content total size bytes sha exact hash fuzzy hash subblock rabin fingerprints ecc information average block recipe storage cost prototype supporting fuzzy block matching variable sized blocks kb mean block size 

fuzzy block matching recipe storage requires bytes storage 
fuzzy hash consists bit rabin fingerprints 
subblock fingerprints computed rabin fingerprints require bits 
prototype includes byte ecc subblocks block successfully reconstruct desired block similar block differs byte subblocks 
total recipe storage block bytes size block order magnitude longer exact match sha hash 
note storage cost conservative fuzzy block matching recipe storage block achievable 
truncating rabin fingerprints subblock bits bits reduce storage requirement bytes size block 
truncating fingerprints increases likelihood collisions fingerprint values cause overestimate resemblance cause subblocks falsely identified matching 
block hash verified returning corrected block client collisions compromise correctness fuzzy block matching 
measuring increase hit rate afforded fuzzy block matching subject continuing research 
introduced file recipe abstraction 
file recipes useful synopses file contents may treated class objects 
abstraction enhanced distributed file system retrieve file data nearby content addressable storage opportunistically 
cases network path client home file server offers low bandwidth resulting distributed file system casper offers significantly improved performance traditional coda installation 
efficiency casper depends directly ability system locate data blocks cas providers 
preliminary measurements overlap data blocks revisions linux kernel sources mozilla nightly binary releases show significant commonality non consecutive pairs releases 
ongoing fuzzy block matching algorithm holds promise improving data block hit rate approximately matching blocks cas providers exact desired contents file 
acknowledgments jason flinn help feedback design casper casey help setting test machines 
benefited greatly jan peter past contributors coda 
shepherd amin vahdat anonymous reviewers gave valuable feedback suggestions improving 
unidentified trademarks properties respective owners 
adya bolosky castro douceur howell lorch theimer wattenhofer farsite federated available reliable storage incompletely trusted environment 
proceedings th symposium operating systems design implementation osdi december 
bolosky goebel douceur single instance storage windows 
proceedings th usenix windows systems symposium pages 
seattle wa august 
bolosky douceur ely theimer feasibility serverless distributed file system deployed existing set desktop pcs 
acm sigmetrics performance evaluation review 
issn 
bray paoli sperberg mcqueen maler extensible markup language xml second edition october 
www org tr rec xml 
broder glassman manasse zweig syntactic clustering web 
proceedings th international www conference 
clarke sandberg wiley hong freenet distributed anonymous information storage retrieval system 
lecture notes computer science 
cox murray noble pastiche making backup cheap easy :10.1.1.101.3227
osdi symposium operating systems design implementation 
dabek kaashoek karger morris stoica wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles sosp 
chateau lake louise banff canada october 
douceur adya bolosky simon theimer reclaiming space duplicate files serverless distributed file system 
proceedings nd international conference distributed computing systems icdcs july 
douglis iyengar application specific resemblance detection 
proceedings usenix annual technical conference 
san antonio texas june 
druschel rowstron past large scale persistent peer peer storage utility 
hotos viii pages 
schloss germany may 
flinn narayanan data staging untrusted surrogates 
proceedings fast conference file storage technologies 
howard kazar menees nichols narayanan sidebotham west scale performance distributed file system 
acm transactions computer systems february 
howes smith scalable deployable directory service framework internet 
technical report center information technology integration michigan 
kim cox noble safety visibility performance wide area file system 
proceedings fast conference file storage technologies 
monterey ca january 
satyanarayanan internet suspend resume 
fourth ieee workshop mobile computing systems applications 
new york june 
lee leung satyanarayanan operation update propagation mobile file system 
proceedings usenix annual technical conference 
monterey california june 
mogul douglis feldmann krishna murthy potential benefits delta encoding data compression 
sigcomm pages 
muthitacharoen chen mazieres low bandwidth network file system :10.1.1.10.8444
proceedings th acm symposium operating systems principles 
chateau lake louise banff canada october 
muthitacharoen morris gil chen ivy read write peer peer file system 
proceedings th usenix symposium operating systems design implementation osdi 
boston massachusetts december 
nagle rfc congestion control ip tcp internetworks january 
nist 
secure hash standard shs 
fips publication 
nist net 
ncsl nist gov itg 
quinlan dorward venti new approach archival storage 
proceedings fast conference file storage technologies 
rabin fingerprinting random polynomials 
harvard university center research computing technology technical report tr 
ratnasamy francis handley karp shenker scalable content addressable network 
proceedings acm sigcomm 
rivest md message digest algorithm 
rfc 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
proceedings ifip acm international conference distributed systems platforms middleware 
heidelberg germany november 
rpm software packaging tool 
www rpm org 
saito karlsson ma taming aggressive replication pangaea wide area file system 
osdi symposium operating systems design implementation 
satyanarayanan ebling coda file system user system administrators manual 
carnegie mellon university 
satyanarayanan kistler kumar siegel steere coda highly available file system distributed workstation environment 
ieee transactions computers april 
satyanarayanan evolution coda 
acm transactions computer systems may 
stoica morris karger kaashoek bal chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm 
san diego ca august 

www com 
tichy rcs system version control 
software practice experience 
tridgell efficient algorithms sorting synchronization 
ph thesis australian national university 
universal plug play 
www upnp org 
copyright intel rights reserved 
