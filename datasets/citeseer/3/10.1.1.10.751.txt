appear algorithmica line construction suffix trees ukkonen department computer science university helsinki box fin university helsinki finland tel fax email ukkonen cs helsinki fi 
line algorithm constructing suffix tree string time linear length string 
new algorithm desirable property processing string symbol symbol left right 
suffix tree scanned part string ready 
method developed linear time version simple algorithm quadratic size suffix tries 
regardless quadratic worst case algorithm practical method string long 
variation method shown give natural way known algorithms constructing suffix automata 
key words 
linear time algorithm suffix tree suffix trie suffix automaton dawg 
research supported academy finland alexander von humboldt foundation germany 

suffix tree trie data structure representing suffixes string 
trees central role algorithms strings see 
quite commonly felt linear time suffix tree algorithms literature difficult grasp 
main purpose attempt developing understandable suffix tree construction natural idea complete picture suffix trees essential way 
new algorithm important property line 
processes string symbol symbol left right suffix tree scanned part string ready 
algorithm simple observation suffixes string delta delta delta obtained suffixes string gamma delta delta delta gamma symbol suffix gamma adding empty suffix 
suffixes string delta delta delta obtained expanding suffixes suffixes suffixes obtained suffixes gamma contrast method weiner proceeds right left adds suffixes tree increasing order length starting shortest suffix method mccreight adds suffixes tree decreasing order length 
noted despite clear difference intuitive view problem algorithm mccreight algorithm final form functionally closely related 
algorithm best understood linear time version algorithm quadratic size suffix tries 
elementary algorithm resembles position tree algorithm section 
unfortunately run linear time takes time proportional size suffix trie quadratic 
transparent modification describe section gives line linear time method suffix trees 
offers natural perspective linear time suffix tree construction understandable 
point section suffix trie augmented suffix links gives elementary characterization suffix automata known directed acyclic word graphs 
immediately leads algorithm constructing automata 
fortunately resulting method essentially 
felt new perspective natural helps understanding suffix automata constructions 

constructing suffix tries delta delta delta string alphabet sigma 
string possibly empty strings substring string delta delta delta suffix particular ffl empty suffix 
set suffixes denoted oe 
suffix trie trie representing oe 
formally denote suffix trie st rie root define trie augmented deterministic finite state automaton tree shaped transition graph representing trie oe augmented called suffix function auxiliary state 
set states st rie put correspondence substrings denote state corresponds substring initial state root corresponds empty string ffl set final states corresponds oe 
transition function defined xa sigma 
suffix function defined state follows 
root 
ay sigma set root 
auxiliary state allows write algorithms sequel explicit distinction empty nonempty suffixes root states avoided 
state connected trie root sigma 
leave 
undefined 
note transitions root defined consistently transitions state corresponds inverse gamma symbols sigma 
gamma ffl set root root corresponds ffl 
call suffix link state suffix links utilized construction suffix tree uses applications 
automaton strie identical aho corasick string matching automaton key word set ft suffix links called failure transitions 
fig 

construction strie cacao state transitions shown bold arrows failure transitions thin arrows 
note layers suffix links shown explicitly 
easy construct strie line left right scan follows 
denote prefix delta delta delta intermediate results construction gives strie fig 
shows different phases constructing strie cacao 
key observation explaining strie obtained strie gamma suffixes obtained suffix gamma adding empty suffix 
oe oe gamma ffflg definition strie gamma accepts oe gamma 
accept oe examine final state set gamma st rie gamma 
gamma transition transition new state new leaf trie added 
states old new transition state gamma constitute root final states strie 
states gamma get new transitions suffix links follows 
definition suffix function implies gamma gamma gamma 
states gamma path suffix links starts deepest state gamma strie gamma ends 
call important path boundary path st rie gamma 
boundary path traversed 
state boundary path transition new state zt new transition zt added 
gives updated get updated new states zt linked new suffix links form path starting state obviously boundary path st rie 
traversal gamma boundary path stopped immediately state state zt transition zt exists 
zt state 
strie gamma contain state transition 
words zt substring gamma suffix zt substring gamma note exists state boundary path transition possible traversal stopped way procedure create new state suffix link examined traversal 
implies procedure take time proportional size resulting automaton 
summarized procedure building strie strie gamma follows 
top denotes state gamma algorithm 
top undefined create new state new transition top create new suffix link create new suffix link top top 
starting strie ffl consists root links repeating algorithm obviously get strie 
algorithm optimal sense takes time proportional size result strie 
turn proportional jqj number different substrings unfortunately quadratic jt case example theorem suffix trie st rie constructed time proportional size st rie worst case jt 

suffix trees suffix tree stree data structure represents strie space linear length jt achieved representing subset states strie 
call states explicit states 
set consists branching states states transitions leaves states transitions strie 
definition root included branching states 
states strie states root exactly transition called implicit states states stree explicitly stree 
string spelled transition path strie explicit states represented stree generalized transition save space string represented pair pointers left pointer right pointer way generalized transition gets form pointers exist suffix transition path strie goes select smallest point substring spelled transition path transition called transition transition sigma 
transitions root represented similar fashion sigma fa amg 
root represented gammaj gammaj root suffix tree stree components tree string linear size jt jt leaves leaf nonempty suffix contain jt gamma branching states jt 
jt gamma transitions states constant space pointers explicit string 
assumed standard ram model pointer takes constant space 
augment structure suffix function defined branching states root branching state ay sigma root 
defined branching state branching state 
suffix links explicitly represented 
helpful speak implicit suffix links imaginary suffix links implicit states 
suffix tree denoted stree root 
refer explicit implicit state suffix tree pair explicit state ancestor string spelled transitions corresponding suffix trie 
pair canonical closest ancestor shortest possible 
explicit canonical pair obviously ffl 
represent string pair pointers way pair gets form 
pair ffl represented 
technically convenient omit final states definition suffix tree 
explicit final states needed application gets adding marking symbol occur leaves suffix tree correspondence suffixes constitute set final states 
possibility traverse suffix link path leaf root states path explicit states final states stree 
applications stree start location suffix stored corresponding state 
augmented tree index finding substring 
line construction suffix trees algorithm constructing stree patterned algorithm 
done part immediately clear 
fig 
shows phases constructing stree cacao simplicity strings associated transition shown explicitly 
get linear time algorithm details need careful examination 
precise algorithm 
gamma root 
states strie gamma boundary path 
smallest index leaf smallest index transition 
leaf non leaf transition defined lemma obvious 
fig 

construction stree cacao lemma algorithm adds st rie gamma transition states new transition expands old branch trie ends leaf new transition initiates new branch algorithm create transitions 
call state active point point st rie gamma 
states explicitly implicitly st ree gamma 
example active points trees fig 
root root ca root ffl 
lemma says algorithm inserts different groups transitions st rie gamma states boundary path active point get transition 
states leaves transition expand existing branch trie 
ii second states active point point point excluded get new transition 
states leaves new transition initiate new branch 
interpret terms suffix tree stree gamma 
group transitions expand existing branch implemented updating right pointer transition represents branch 
gamma transition 
right pointer point position gamma gamma leaf path leading spell suffix gamma occur gamma updated transition string spelled transition longer change states making updates take time 
trick 
transition stree gamma leading leaf called open transition 
transition form gamma stated right pointer point position gamma gamma necessary represent actual value right pointer 
open transitions represented indicates transition open grow 
fact represents branch length state imaginary state infinity 
explicit updating right pointer inserted branch needed 
symbols replaced jt completing stree 
way group transitions implemented explicit changes st ree gamma 
describe add stree gamma second group transitions 
create entirely new branches start states finding states needs care need explicit states moment 
boundary path st ree gamma pairs suffix links 
canonical pair active point 
boundary path strie gamma suffix gamma gamma want create new branch starting state represented gamma 
test gamma refers point done 
new branch created 
state referred gamma explicit 
explicit state denoted created splitting transition contains corresponding implicit state 
transition created 
open transition new leaf 
suffix link added created splitting transition 
construction proceeds pair gamma canonical pair gamma pair canonical updating state left pointer note right pointer gamma remains unchanged canonization 
operations repeated point 
way obtain procedure update transforms stree gamma stree inserting transitions second group 
procedure uses procedure mentioned procedure test split tests pair refers point 
procedure creates returns explicit state pair provided pair represent explicit state 
procedure update returns pair point state left pointer pair second pointer remains gamma states boundary path 
procedure update gamma canonical pair active point 
root point test split gamma 
point 
create new transition new state 
root create new suffix link 

gamma 
point test split gamma 
root create new suffix link 
return 
procedure test split tests state canonical pair point state strie gamma transition 
symbol input parameter test result returned output parameter 
point state explicit splitting transition 
explicit state returned second output parameter 
procedure test split 

transition 
gammak return true 

replace transition transitions gamma gamma new state 
return false 

transition return false 
return true 
procedure benefits canonical answer point test constant time considering transition procedure follows 
pair state finds returns state left link canonical pair state closest explicit ancestor explicit 
string leads suffix string leads right link change left link procedure 
return 

find transition 
gamma gamma 
gamma 

find transition 
return 
able continue construction text symbol active point stree 
note active point st ree gamma delta delta delta gamma delta delta delta gamma longest suffix gamma occurs twice gamma second note point st ree gamma delta delta delta gamma delta delta delta gamma longest suffix gamma delta delta delta gamma substring gamma means point st ree gamma delta delta delta gamma longest suffix occurs twice state active point st ree 
shown result 
lemma gamma pair point st ree gamma 
pair active point st ree 
algorithm constructing stree follows 
string processed symbol symbol left right scan 
writing sigma ft gamma gammam possible transitions way transitions 
algorithm 
construction stree string alphabet sigma ft gamma gammam marker appearing 
create states root 
create transition gammaj gammaj root 
create suffix link root 
root 


update 

steps lemma step pair gamma refers point st ree gamma refers active point st ree 
theorem algorithm constructs suffix tree st ree string line time 
proof 
algorithm constructs stree intermediate trees stree stree stree stree 
line construct stree needs access symbols running time analysis divide time requirement components turn 
component consists total time procedure 
second component consists rest time repeatedly traversing suffix link path active point point creating new branches update finding active point transition point step alg 

call states pairs paths visited states 
second component takes time proportional total number visited states operations state create explicit state new branch follow explicit implicit suffix link test point state implemented constant time excluded 
precise requires sigmaj bounded independently 
active point stree visited states gamma path consists suffix links transition 
suffix link decreases depth length string spelled transition path root current state transition increases 
number visited states including gamma excluding path depth gamma gamma depth total number depth gamma gamma depth depth gamma depth 
implies second time component 
time spent execution upper bound form bq constants number executions body loop steps 
total time spent bound proportional sum number calls total number executions body loop calls 
calls call visited state step update directly step alg 

execution body deletes nonempty string left string represented pointers pair 
string grow process step alg 
right non empty deletion possible times 
total time body loop altogether component needs time 

due final form algorithm close relative mccreight method 
principal technical difference execution body main loop algorithm consumes text symbol execution body main loop mccreight algorithm traverses suffix link consumes zero text symbols 

hard generalize algorithm dynamic version suffix tree problem adaptive dictionary matching problem maintain generalized linear size suffix tree representing suffixes strings set ft operations insert delete string resulting algorithm updates time jt 

constructing suffix automata suffix automaton sa string minimal dfa accepts suffixes strie dfa suffixes sa obtained minimizing strie standard way 
minimization works combining equivalent states states strie accepts set strings 
suffix links obtain natural characterization equivalent states follows 
state strie called essential different suffix links pointing delta delta delta theorem states st rie 
set strings accepted equal set strings accepted suffix link path starts contains path contains subpath contain essential states possibly 
proof 
theorem implied observations 
set strings accepted state strie subset suffixes accepted string different length 
string length accepted state strie suffix link path starts state delta delta delta gammai contains suffix links form tree directed root root 
suggests method constructing sa modified algorithm 
new feature construction create new state state essential 
state merged essential state suffix link path correct theorem states equivalent 
jt essential states resulting algorithm linear time 
algorithm turns similar algorithms 
omit details 

pointed inaccuracies earlier version 
author indebted sutinen wood particular kurtz stephen useful comments 

aho corasick efficient string matching aid bibliographic search comm 
acm 

amir farach adaptive dictionary matching proc 
nd ieee ann 
symp 
foundations computer science pp 


apostolico myriad virtues subword trees combinatorial algorithms words apostolico galil eds springer verlag pp 


blumer smallest automaton recognizing subwords text theor 
comp 
sci 


crochemore transducers repetitions theor 
comp 
sci 


crochemore string matching constraints mathematical foundations computer science eds lect 
notes computer science vol 
springer verlag pp 


galil giancarlo data structures algorithms approximate string matching complexity 

bayer time optimal left right construction position trees acta informatica 

mccreight space economical suffix tree construction algorithm journal acm 

ukkonen constructing suffix trees line linear time algorithms software architecture 
information processing vol 
van leeuwen ed elsevier pp 


ukkonen approximate string matching suffix trees combinatorial pattern matching cpm apostolico crochemore galil manber eds lect 
notes computer science vol 
springer verlag pp 


ukkonen wood approximate string matching suffix automata algorithmica 

weiner linear pattern matching algorithms ieee th ann 
symp 
switching automata theory pp 


