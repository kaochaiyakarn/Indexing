semantic web logic programming tools alferes dam sio pereira centro de ncia artificial departamento de inform tica de ci tecnologia universidade nova de lisboa portugal jja cd lmp di fct unl pt 
decades research logic programming theoretical practical levels addressed topics highly relevant semantic web effort providing concrete answers open questions 
describes succinctly contributions logic programming group centro de ncia artificial universidade nova de lisboa prelude description efforts develop integrated standard tools disseminating research interested web communities 
intended survey logic programming techniques applicable semantic web interested reader try obtain missing information logic programming journals conferences 
extensible markup language provides way organizing data documents structured universally accepted format 
tags predefined meaning 
proposed resource description framework rdf exposing meaning document web community people machines intelligent agents :10.1.1.44.6030
conveying content documents just step achieving full potential semantic web 
additionally mandatory able reason information spread world wide web 
applications range electronic commerce applications data integration sharing information gathering security access control law diagnosis course modelling business rules processes 
rules provide natural wide accepted mechanism perform automated reasoning mature available theory technology 
identified design issue semantic web clearly stated tim berners lee semantic web function computers access structured collections information sets inference rules conduct automated reasoning challenge semantic web provide language expresses data rules reasoning data allows rules existing knowledge representation system exported web adding logic web means rules inferences choose courses action answer questions task semantic web community moment logic programming expressing knowledge form rules making inferences rules 
major advantage logic programming provides operational reading rules declarative reading understood semantics 
defend generalized extended logic programs logic programs monotonic explicit negation non monotonic default negation appropriate expressive formalism knowledge representation web 
important feature logic programming able deal negative knowledge express closed world assumptions 
expressing reasoning negative knowledge fundamental advanced applications capabilities currently lacking existing proposed web standards 
clearly identified limitation feature rdf latest working draft rdf semantics rdf assertional logic triple expresses simple proposition 
imposes fairly strict monotonic discipline language express closed world assumptions local default preferences commonly non monotonic constructs non monotonic default negation brought new theoretical problems logic programming addressed differently major semantics founded semantics wfs stable model semantics sm :10.1.1.24.6050:10.1.1.121.6788
start defending founded semantics appropriate semantics semantic web rule engines illustrating usage 
proceed section describe project founded semantics www aims developing standard prolog inter operable tools supporting distributed secure integrated reasoning activities semantic web describe implementations developed project 
semantic web living organism combines autonomously evolving data sources knowledge repositories 
dynamic character semantic web requires declarative languages mechanisms specifying maintenance evolution 
stance respect logic programming choice representational language attending inference maintenance mechanisms section briefly describe research efforts defining implementing logic programming systems capable dealing updates knowledge base evolution 
case founded semantics mentioned generalized extended logic programs appropriate expressive formalism knowledge representation web 
generalized extended logic program set rules form 
ln literals 
ln objective literals say default negated objective literals say atom firstorder language 
loss generality non ground rule stands ground instances 
notice forms negation available default weak negation explicit strong negation occur head body 
ln rule 
default negation non monotonic captures believed assumed false closed world assumption whilst explicit negation monotonic expresses known false open world assumption 
rationale forms negation better grasped example attributed mccarthy example 
suppose driver intends cross railway decision proceed 
major possibilities encode knowledge logic programming language captured rules cross train cross train rule represents usual behaviour safe driver stating cross rail tracks explicit evidence train approaching 
second rule represents situation careless driver advances evidence train approaching believes assumes train approaching 
default negation brought new theoretical problems addressed differently major semantics logic programs founded semantics wfs stable model semantics sm :10.1.1.24.6050:10.1.1.121.6788
suggest founded semantics appropriate semantics semantic web rule engines reasons adopted semantics definite acyclic locally stratified logic programs coinciding stable model semantics 
defined normal logic program default negation bodies explicit negation atomic heads 
polynomial data complexity efficient existing implementations slg wam engine implemented xsb 
structural properties 
undefined truth value 
extensions exist wfs capturing paraconsistent incomplete uncertain reasoning 
permits update semantics dynamic logic programs 
readily combined dbmss prolog stable models engines 
minimal herbrand model semantics definite logic programs programs default explicit negation understood widely accepted 
founded semantics stable model semantics coincide minimal herbrand model semantics definite logic programs 
major advantage wfs possible assign unique model normal logic program constrast sm semantics 
applies extensions wfs treating explicit negation supporting paraconsistent reasoning forms shall discuss section 
existence undefined logical value fundamental semantic web aware inference engines 
hand distributed web environment communication failures non response times remote logic inference assumed undefined computation proceeds locally 
remote computation terminates returns answer undefined truth value logically updated true false 
hand rule bases web naturally introduce cycles default negation 
founded semantics deals cycles default negation assigning truth value undefined literals involved 
particular situation stable models may exist may explode 
computation founded model tractable contrary stable models efficient implementations exist notably xsb prolog engine 
xsb resorts tabling techniques ensuring better termination properties polynomial data complexity 
tabling way address distributed query evaluation definite normal logic programs 
xsb prolog supports full order syntax fully available state art stable model engines 
xsb prolog distribution integrated smodels system applications better exploit founded stable model semantics 
summary founded semantics seen light inference basic mechanism deploying today complex semantic web rule applications stable model semantics complementary semantics addressing complex reasoning forms 
knowledge representation explicit negation section illustrate explicit default negation representing ontological knowledge may contradictory incomplete 
ability deal pinpoint contradictory information desirable feature semantic web rule system natural obtain conflicting information different sources 
classical logic assigns model inconsistent theory fully appropriate general knowledge representation formalism semantic web 
limitation inherited classical logic formalisms rdf daml oil owl 
interesting example case taxonomies 
example natural common sense knowledge animal world limited new species discovered frequently 
examples showing capabilities generalized paraconsistent founded semantics explicit negation short 
full account formal details reader referred 
example 
consider common sense rules identifying birds mammals warm animals bill birds hairy warm animals mammals birds mammals vice versa birds fly mammals nurse offspring 
chunk knowledge represented extended logic program rules bird bill warm blood 
bird mammal 
flies bird 
mammal hair warm blood 
mammal bird 
nurses mammal 
information regarding dogs ducks correctly filled gets expected results 
just add program set facts hair dog 
warm blood dog 
bill duck 
warm blood duck 
duck 
model program entails expected mammal dog nurses dog bird dog bird dog flies dog bird duck flies duck mammal duck mammal duck nurses duck trip australia user discovers creatures named platypus lay eggs warm blood sport bill hairy 
nice contradiction obtained program containing facts hair platypus 
warm blood platypus 
bill platypus 
platypus 
model entails new mammal platypus mammal platypus mammal platypus mammal platypus nurses platypus nurses platypus nurses platypus bird platypus bird platypus bird platypus bird platypus flies platypus flies platypus flies platypus remarkable points example manifold 
contradictory information coexist safe interfering particular relinquish information dogs ducks 
second detect contradiction mammal bird predicates mammal mammal hold bird bird consequences propagated aware knowledge regarding nursing flying capabilities depends contradiction 
recognized noticing nurses platypus nurses platypus hold nurses platypus absent model 
third right solution covered program model platypus mammals fly nurse 
unsound heuristic rule saying drop objective default knowledge 
platypus want retain nurse descendants discard fly platypus 
rationale non trivially extract maximum number contradictory information 
provides user information necessary decide possible scenarios taken account 
user warned potential problems take right decision 
possible due adoption coherence principle relates forms negation known false believed false holds hold holds hold 
hold coherence produces localized explosion consequences propagated semantics dependant literals model 
semantics exploited represent taxonomies exceptions expressing general absolute non defeasible rules defeasible rules exceptions defeasible rules exceptions explicitly making preferences defeasible rules 
assume presence contradictory defeasible rules prefer specific information 
example 
consider statements corresponding hierarchy depicted mammals animals 
normally animals don fly 
bats animals 
normally bats fly birds animals 
normally birds fly penguins birds 
normally penguins don fly dead animals animals 
normally dead animals don fly penguin joe absolute rules defeasible rules negated rules individuals bird tweety flies animal mammal bat fig 

non monotonic hierarchical taxonomy mammal 
bat 
tweety bird 
dead animal 
joe penguin 
preferences dead bats fly bats 
dead birds fly birds 
exception preferences 
dead animal hierarchy represented program animal mammal bird penguin mammal bat animal dead animal animal bird flies animal flying animal flies flying animal flying animal flies bat flying bat flies flying bat flying bat flies bird flying bird flies flying bird flying bird flies penguin flying penguin flies flying penguin flies dead animal flying dead flying dead flying dead mammal bat bird tweety dead animal penguin joe implicit hierarchical preference rules prefer specific information flying animal bat flying bat flying animal bird flying bird flying bird penguin flying penguin flying dead bat flying dead bat 
explicit problem statement preferences flying bat dead animal bat flying dead bat flying dead bat flying dead bat flying bird dead animal bird flying dead bird flying dead bird flying dead bird flying dead bat model programs non contradictory get expected results joe don fly tweety fly 
rules automatically generated description hierarchies shown 
wfs advantage computation founded model tractable defined generalized extended logic program particular contradictory programs 
furthermore able detect dependencies contradiction just looking model 
generalized answer set semantics extension stable model semantics generalized extended logic programs appropriate declarative representation complex problems inherits problems stable model semantics explodes faced contradiction 
project founded semantics www project aims developing standard prolog inter operable tools supporting distributed secure integrated reasoning activities semantic web 
results project expected contribute approved rewerse european network excellence 
long term objectives development prolog technology xml rdf ruleml 
development general semantic framework ruleml including default explicit negation supporting uncertain incomplete paraconsistent reasoning 
development distributed query evaluation procedures ruleml tabulation previous semantics 
development dynamic semantics evolution update rule ml knowledge bases 
integration different semantics ruleml founded semantics answer sets fuzzy logic programming annotated logic programming probabilistic logic programming 
started implementation efforts previously described theoretical implementations ruleml language proposal 
full ruleml compiler available extension ruleml see 
ruleml compiler supports default explicit negation heads bodies rules assert statements programs see section 
semantics implemented paraconsistent founded semantics explicit negation 
shortly illustrate ruleml example session example 
consider taxonomy example encoded ruleml format 
rules capturing sentence normally bats fly flies bat flying bat flies 
corresponding ruleml encoding imp head atom opr rel flies rel opr var var atom head body atom opr rel bat rel opr var var atom atom opr rel flying bat rel opr var var atom neg atom opr rel flies rel opr var var atom neg body imp rule base loaded follows ruleml taxonomy ruleml 
predicate capable reading ordinary prolog files 
loading rule bases user start querying tuple atime demo predicate 
argument name loaded rule base second query usual prolog syntax extended unary operators neg representing default explicit negation respectively demo animals flies 
tweety demo animals neg flies 
joe demo animals animal flies 
joe demo predicate invokes meta interpreter implements semantics program transformation normal logic programming wfs making tabling primitives xsb prolog 
predicate allows user collect answers query list write xml format output stream 
argument rule queried second list terms form query goal label queries issue argument variable output stream 
animals query flies animal ans 
ans answer animal answer animal tweety animals query flies animal query neg flies non ans 
ans answer animal answer animal tweety answer non joe answer non animals query flies animal 
answers answer ind ind subst var animal var ind ind subst answer answer ind ind subst var animal var ind tweety ind subst answer answers animals query flies animal query neg flies non 
answers answer ind ind subst var animal var ind ind subst answer answer ind ind subst var animal var ind tweety ind subst answer answer ind ind subst var non var ind joe ind subst answer answer ind ind subst var non var ind ind subst answer answers mark answer may labelled user provided labels order identify corresponding query variables user understandable names 
format answers specified ruleml proposal 
ruleml compiler supports imported ruleml files prolog files files 
converter prolog syntax ruleml syntax ruleml syntax prolog syntax included 
experimental rdf engine provided extensive tabling facilities xsb prolog engine 
exploiting nmr features new xsb prolog support provided stable models answer set semantics 
package originally developed xsb prolog porting prolog systems foreseen 
open issues definition remote goal invocation method exchange soap messages selection distributed query evaluation algorithms corresponding protocols 
standard integration ruleml ontologies lacking 
applications testing evaluation required construction practical systems 
updates evolution rule bases features developed research corresponding implementations updates evolution rule knowledge bases 
logic programming seen representation language static knowledge just shown move open dynamic environment typical example agency paradigm consider ways means representing integrating knowledge updates external sources inner source knowledge updates self updates 
fact agent comprises knowledge state knowledge transitions states 
may represent agent knowledge environment evolution coupled behaviour evolution rules 
similar arguments apply semantic web 
knowledge stored various autonomous sources repositories evolve time exhibiting dynamic character 
declarative languages mechanisms specifying semantic web evolution maintenance order worked goal 
address concerns introduced dynamic logic programming dlp addressed similar concerns 
dlp knowledge linearly ordered sequence generalized extended logic programs represent distinct dynamically changing states world 
states may contain mutually contradictory overlapping information 
semantics dlp ensures previous rules remain valid inertia long contradicted newer prevailing rules 
developed implementations dlp implements exactly semantics defined stable models semantics 
implementation provided pre processor sequences generalized programs programs run dlv system computing stable models 
implementation generalization founded semantics sequences programs sound complete respect semantics :10.1.1.121.6788
advantages founded semantics stable models section 
implementation consists meta interpreter sequences programs runs xsb prolog 
consult sequences generalized programs update running sequence set generalized rules 
queries literals posed current latest state previous state 
possibly ask states literal holds 
integrated mechanism preferences generalizes preferences sequences programs 
implementation updates preferences pre processor dlv programs transformation defined 
cope updates knowledge coming various sources extended dlp developed multi dimensional dynamic logic programming mdlp 
dlp allows encode single update dimension dimension time hierarchy strength rules priorities mdlp dimensions dealt single framework allowing model evolution time hierarchically organized sets rules 
mdlp implementation enacted meta interpreter running xsb prolog 
directed acyclic graphs dags programs consulted special syntax representing graph queries put programs dag 
implementations mentioned section di fct unl pt jja languages implementations logic programs describe knowledge states sequences dags updating knowledge states 
fit logic programs utilized describe transitions knowledge states 
achieved associating state set transition rules obtain state 
till lp considered adequate modelling dynamics knowledge change time typical update commands defined 
overcome limitation introduced implemented language related languages epi kabul 
logic programming command language specifying logic program updates 
viewed language declaratively specifies construct dynamic logic program means successive update commands 
sentence set simultaneous update commands pre existing sequence logic programs semantics corresponds knowledge state produces new dlp program corresponding knowledge results previous sequence performing simultaneous update commands 
program sequence sentences 
simple command assert rule simply asserts rule program running sequence 
elaborate commands take care retraction rules persistent assertion rules cancellation persistent assertions event assertion persistent event assertion 
example command persistent rule assertion form rule conds moment till cancelled conds true rule asserted 
dlp implementations developed stable models running pre processor dlv programs running xsb prolog 
worked general language evolving logic programs integrates simple way concepts dlp language closer traditional logic programs 
generalizes logic programming allow specification program evolution evolution due external events single unified way permitting rules indicate assertive form program rules 
rules simply generalized lp rules plus special predicate assert appear heads bodies rules 
argument assert full blown rule allowing nesting rule assertions assertions possible rule updates updated evolution line 
meaning sequence rules sequences models 
sequence determines possible evolution knowledge base 
model determines true number evolution steps state sequence model sequence built computing semantics program assert predicate assert rule true state program updated rule state updating computation model sequence performed dlp 
current implementation meta interpreter runs xsb prolog 
possible consult sequences sets rules update running sequence new set rules 
queries literals current state previous state interval states 
possibly ask states literal true 
process integrating implementation mentioned encompasses features dlp ruleml compiler described section supports syntax expect finish soon allow usage care evolution maintenance ruleml rule bases semantics web 
applied languages mentioned implementations various domains actions agents architecture specification agents behaviours software specification planning legal reasoning active databases 
running examples url 
illustrate expressiveness languages briefly illustrate employed model evolving personal assistant agent email management able perform basic actions sending receiving deleting messages storing moving messages folders filtering spam messages sending automatic replies forwarding notifying user special situations 
dependent user specified criteria specification may change dynamically 
details application 
application messages stored basic predicates msg identifier rom subject body identifier older specifying folder message stored 
new messages simply events form msg identifier rom subject body 
basic actions easily modelled 
example dealing incoming messages specify new message arriving time stored inbox folder marked deletion 
message marked deleted stored folder 
modelled rules assert msg time delete assert inbox delete assert inbox delete rules filtering spam added updates program simple way 
example wants filter delete messages containing word credit subject simply update program delete spam spam contains credit note definition spam updated ensuring conflicts older newer rules automatically resolved 
example wants update definition spam stating messages coming considered spam update program rule spam contains update ensures messages considered spam contain word credit subject user doesn worry guaranteeing manually consistency rules previous ones 
example complex rule consider user organizing conference assigns papers referees 
suppose wants automatically guarantee receipt referee acceptance message assigned forwarded corresponding referee 
terms means message received referee accepting review rule asserted stating new messages sent referee assert send contains id assign id id contains accept illustration elaborate rules showing features possibility dynamically changing policies agent triggered internal external conditions commands span various states reader referred 
opinion founded semantics major player ruleml properly integrated stable models 
full blown theory available important extensions standard wfs sms addressing open issues semantic web 
extensions resort polynomial program transformations evolution update knowledge bases 
handle uncertainty incompleteness paraconsistency 
efficient implementation technology exists important progress distributed query evaluation 
open fully distributed architecture elaborated proposed 
acknowledgments summarized developed collaboration jo alc ant nio brogi dell acqua jo leite przymusinski przymusinska paulo cf 
publications 
joint 
part logic programming updates supported projects flux flexible logical updates posi sri funded feder tabulation reasoning distributed prolog environment funded fct 

alferes brogi leite pereira 
evolving logic programs 
flesca greco leone editors proceedings th european conference logics artificial intelligence jelia volume lnai pages 
springer verlag 

alferes brogi leite pereira 
logic programming evolving agents 
klusch omicini editors proceedings th international cooperative information agents cia lnai 
springer verlag 

alferes dam sio pereira 
logic programming system non monotonic reasoning 
special issue journal automated reasoning 

alferes dell acqua pereira 
compilation updates plus preferences 
flesca greco leone editors proceedings th european conference logics artificial intelligence jelia volume lnai pages 
springer verlag 

alferes leite pereira przymusinska przymusinski 
dynamic updates non monotonic knowledge bases 
journal logic programming september october 
short version appeared cohn schubert eds kr morgan kaufmann 

alferes pereira 
reasoning logic programming volume lecture notes artificial intelligence 
springer verlag 

alferes pereira 
updates plus preferences 
de guzman brewka pereira editors proceedings th european conference logics artificial intelligence jelia volume lnai pages 
springer verlag 

alferes pereira przymusinska przymusinski 
language updating logic programs 
artificial intelligence 
short version appeared gelfond leone pfeifer eds lpnmr springer lnai 

dlv project disjunctive datalog system 
www dbai tuwien ac proj dlv 

tim berners lee james hendler ora lassila 
semantic web 
scientific american may 

brewka eiter 
preferred answer sets extended logic programs 
artificial intelligence 
short version appeared cohn schubert eds kr morgan kaufmann 

brickley guha 
rdf vocabulary description language rdf schema january progress 
www org tr wd rdf schema 

connolly van harmelen horrocks mcguinness patel schneider stein 
daml oil march description 
www org tr daml oil 

carlos viegas dam sio lu pereira 
default negated dyckhoff schroeder heister editors proc 
th international workshop extensions logic programming elp number lnai pages 

carlos viegas dam sio lu pereira 
paraconsistent semantics contradiction support detection 
rgen dix ulrich furbach anil nerode editors proceedings th international conference logic programming nonmonotonic reasoning lpnmr volume lecture notes artificial intelligence pages de dagstuhl july 
springer 

carlos viegas dam sio lu pereira 
survey paraconsistent semantics logic 
gabbay smets editors handbook defeasible reasoning uncertainty management systems volume reasoning actual potential contradictions 
por besnard hunter pages 
kluwer academic publishers 

dean schreiber van harmelen hendler horrocks mcguinness patel schneider stein 
owl web ontology language august candidate recommendation 
www org tr cr owl ref 

eiter fink tompits 
framework declarative update specifications logic programs 
ijcai 
morgan kaufmann 

eiter fink tompits 
properties update sequences causal rejection 
theory practice logic programming 

van emden kowalski 
semantics predicate logic programming language 
journal acm 

van gelder ross schlipf 
founded semantics general logic programs 
journal acm 

gelfond lifschitz 
stable model semantics logic programming 
kowalski bowen editors th international conference logic programming pages 
mit press 

gelfond lifschitz 
logic programs classical negation 
warren szeredi editors th international conference logic programming pages 
mit press 


editor hayes 
rdf semantics january progress 
www org tr wd rdf mt 

rule markup initiative 
www ruleml org 

lassila swick 
resource description framework rdf model syntax specification february 
www org tr rec rdf syntax 

leite 
evolving knowledge bases 
ios press 

leite alferes pereira 
multi dimensional dynamic knowledge representation 
eiter faber truszczynski editors proceedings th international conference logics programming non monotonic reasoning lpnmr volume lnai pages 
springer verlag 

lifschitz woo 
answer sets general non monotonic reasoning preliminary report 
nebel rich swartout editors proceedings th international conference principles knowledge representation reasoning kr 
morgan kaufmann 

xsb logic programming systems 
xsb sourceforge net 

smodels system 
www tcs hut fi software smodels 

ruleml compiler 
fct unl pt cd 
