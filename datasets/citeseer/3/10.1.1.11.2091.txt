lemmas demand satis ability solvers leonardo de moura harald rue csl sri com sri international computer science laboratory ravenswood avenue menlo park ca usa 
investigate combination propositional sat checkers constraint solvers domain speci theories linear arithmetic arrays lists combination thereof 
procedure realizes lazy approach satis ability checking propositional constraint formulas iteratively re ning boolean formulas lemmas generated demand constraint solvers 

search optimization problems ectively solved propositional reasoning techniques 
finiteness inherent restriction propositional encodings computational systems environment models usually expressed succinctly logics enriched domain speci constraints 
planning problems ai example may involve solving numeric resource constraints program analyses require reasoning constraints combination datatypes integers arrays lists 
decidable constraint theory address problem constructing ective solutions satis ability problem propositional combinations constraints 
course satis ability solvers propositional constraint formulas easily obtained combination propositional sat solver decision procedures simply converting problem disjunctive normal form resulting algorithm usually prohibitively expensive 
alternatively propositional search capabilities added theorem provers ective augment propositional sat solvers theorem proving capabilities 
look speci combination sat solvers constraint solvers propose method call lemmas demand invokes constraint solver lazily order eciently research supported sri international internal research development darpa nest program contract afrl national science foundation ccr ccr 
kluwer academic publishers 
printed netherlands 
sat tex prune spurious counterexamples counterexamples generated sat solver discarded theorem prover interpreting propositional atoms 
example sat solver yield satisfying assignment propositional variable represents atom represents 
decision procedure easily detect inconsistency assignment 
importantly generate set con icting assignments construct lemma constrains search 
example lemma added new clause input sat solver 
process re ning boolean formulas similar spirit re nement abstractions analysis spurious counterexamples failed proof attempts 
set inconsistent constraints spurious counterexample obtain explanation approximation minimal inconsistent subset constraints 
smaller explanation generated spurious counterexample greater pruning subsequent search 
way computation explanations accelerates convergence procedure 
structured follows 
section includes background material section describes lemmas demand approach various re nements thereof 
initial experience technique reported section 
section draw 

background familiar concepts notations propositional logic constraint logic 
truth values true false assigned propositional variables 
literal propositional variable negation clause disjunction literals cnf formula conjunction clauses 
linear time satis ability preserving transformation cnf 
propositional sat solver sat purposes computable function receives cnf formula returns satisfying truth assignment unsatis able assignment exist 
conjunctive constraint solver say sat constraint theory computable function checks set constraints theory satis able 
instance linear programming system constraint solver linear arithmetic 
constraint theory set boolean constraints bool includes constraints closed conjunction sat tex disjunction implication negation notions satis ability inconsistency satisfying assignment satis ability solver lifted set boolean constraints usual way 
formulas bool translated able boolean formulas long consistency sets constraints decidable 
translation schemes propositional formulas boolean constraint formulas needed 
formula correspondence easily obtained abstracting constraints fresh propositional variables 
function maps constraints propositional variables 
mapping induces mapping boolean constraint formulas propositional formulas 
example formula linear arithmetic mapped 


assignment propositional variables induces set constraints 
function performs mapping 
instance assignment fp 
false 
true 
falseg induces set fx 
easy see cnf formula bool able boolean formula cnf fl ng set subsets fl literals interpretation inconsistent bool formula transformed able boolean formula long constraint solver hand reduction infeasible exponential number inconsistency checks required worst case 
observed practical cases small fragments set inconsistencies needed 
main problem identify small subsets set inconsistencies sucient establish satis ability boolean constraint formula hand 

lemmas demand propose algorithm re nement boolean formulas inconsistency lemmas generated demand 
restrict formulas cnf boolean sat solvers expect input format 
procedure sat combines boolean sat solver sat domain speci constraint solver sat sat generates sat tex procedure sat loop sat unsatis able return unsatis able sat return satis able re ne 
lemmas demand bool 
candidate boolean assignment 
candidate algorithm terminates clearly unsatis able 
satis ability solver sat check boolean assignment determines valid assignment 
assignment valid new propositional clauses inconsistency lemmas added propositional formula hand 
procedure re ne crucial generates new clauses 
order guarantee soundness interpretations clauses returned re ne assumed implied 
addition algorithm complete clause returned re ne subsumed clauses alternatively completeness achieved disabling nite loops re ne adding clauses subsumed clauses return discussion speci implementations re ne functions section 

constraint theories examples advantage approach works uniformly large class constraint theories main requirement theories decidability conjunctive satis ability problem 
review important constraints theories polynomial satis ability problem conjunction constraints 
follows satis ability problem corresponding boolean constraint theories np complete 
assume countably nite set variables conjunctions constraints represented nite sets 

equality constants 
satis ability conjunctive constraints consisting equalities disequalities variables decided linear time size graph built nodes variables edge nodes contains equality sat tex satis able case connected graph 

equality uninterpreted functions 
terms variables applications function symbol signature arity satis ability conjunction equations disequations terms decidable log congruence closure 
satis ability procedures theories cons car cdr obtained congruence closure algorithms adding relevant instances universally quanti ed axiom schemes car cons 
similarly ackermann trick variation thereof transform boolean constraints equalities uninterpreted terms able boolean problem equations variables literals adding possible instances congruence axiom renaming uninterpreted subterms variables 
worst case number axioms proportional square length formula 

theories arithmetic 
linear arithmetic constraints built inequalities linear arithmetic terms including rational constants addition 
interpreted rationals conjunctive satis ability problem linear arithmetic constraints polynomial equivalent linear programming problem known polynomial interpreting linear arithmetic terms integers problem np complete integers 
conjunctive satis ability problem nonlinear arithmetic constraints include multiplication decidable interpreted rationals undecidable integers 
pratt observed inequalities program veri cation form constant 
think conjunction constraints representing directed graph nodes labelled variables edge weight constraint satis able exists negative weight cycle graph 
bellman ford algorithm satis ability decided time quadratic number variables shostak loop residue algorithm linear constraints reduces pratt algorithm applied di erence constraints 
sat tex 
theory fixed sized 
core theory equalities xed sized includes variables interpreted width extraction bits concatenation bitvector terms 
results follows conjunctive satis ability problem theory decidable polynomial time width variables extraction positions integer constants 
problems easily translated able propositional sat problems bitwise splitting bitvector constraints 
practice considerable performance gains reported domain speci bitvector procedures sat solvers 
example bitvector encoding shift register bmc benchmark exponentially succinct corresponding boolean formula 

combination satis ability procedures 
veri cation problems require solve constraint problems union constraint theories 
basic paradigms combining decision procedures 
nelson oppen method combines decision procedures disjoint theories exchanging equality information shared variables 
constituent decision procedures polynomial combined nelson oppen procedure polynomial 
shostak method combination theory pure equality solvable theories decided extension congruence closure yields combined theory 
constituent solvers polynomial time shostak algorithm runs polynomial time 
individual theories listed combined nelson oppen shostak approach 
consequently satis ability propositional logic constraints combination subset theories np complete 

refinements describe possible implementations re ne function 
simple implementation re ne creates clauses increasing size iteration 
example 




rst call re ne produces clauses second produces clauses 
unguided enumeration sound complete procedure usually infeasible practice number clauses size number constraints 
sat tex alternatively clauses added guided way analysis set constraints corresponding boolean assignment 
instance boolean assignment fp 
true 
false 
falseg tested yield inconsistent set constraints procedure re ne adds clause clause clearly prevents invalid assignment regenerated sat procedure iteratively re ning boolean formula newly detected inconsistencies terminating complete 
naive implementation inecient practice small fragments assignment inconsistent 
example suppose invalid assignment associated set constraints fx clear fx fx sucient describe con ict 
assume function explain returns approximation minimal set constraints implies inconsistency detected sat function similar con ict resolution procedures boolean sat solvers grasp cha 
abstractly con ict resolution procedures boolean sat solver seen function receives con icting clause returns new clause prevents speci con ict iterations 
new clauses called con ict clause process constructing referred learning 
obvious trade conciseness approximation cost computing 
proposing algorithm nding approximation rerunning constraint solver times upper bound number iterations see number constraints 
run illustrates procedure 
constraints asserted sat left right 
sat detects con ict asserting constraint minimal inconsistent set 
approximation minimal inconsistent sets produced connecting constraints common variables 
approximation iteratively re ned collecting constraints array illustrated 
con gurations consist triples set constraints guaranteed minimal inconsistent set integers lower upper bounds constraint indices consideration 
initial con guration example fy 
re nement step maintain invariant con icting clause clause literals assigned false 
sat tex array 
trace linear time explain function 
hg inconsistent 
con guration individual constraints index added inconsistency detected 
rst iteration running example process constraints right left inconsistency detected processing 
new con guration fy obtained adding constraint set constraints known minimal inconsistent set leaving unchanged setting increment index new constraint 
order constraints asserted inverted iteration 
step example successively add constraints left right set fy 
inconsistency rst detected asserting set new con guration obtained fy lower bound left unchanged upper bound set decrement index constraint inconsistency detected 
procedure terminates current con guration inconsistent re nements 
example re nement steps yield minimal inconsistent set fy 
general number assertions linear number constraints algorithm returns exact minimal set cardinality equal upper bound iterations 
additional re nement introduced procedure sat cases assignment small subset need considered 
overly eager assignments result useless search overly speci counterexamples 
instance assume formula assignment fq 
true 
true 
trueg suppose situations 


sat returns unsatis able fx inconsistent 
assignment discarded search continues 
constraint clearly irrelevant don care 
sat tex procedure collect return collect choose fc return collect return collect collect return collect constraint return ffg return fg return 
collecting relevant constraints 



sat returns satis able 
resulting set models overly speci value restricted interval 
solve problem keep structure formula cnf translation 
structure formula decide constraint relevant assignment 
procedure collect collects relevant constraints formula assignment 
simplicity procedure considers propositional connectives 
cnf translation adds new propositional variable non atomic sub formula 
important notice true formula assigned true assignment 
function returns true constraint 
instance formula represented translated cnf formula auxiliary propositional variables 
assignment fq 
true 
true 
true 
true 
falseg clear collect fq value don care 
summarizes guided re nement procedures discussed 
procedure re ne implements naive approach explanation capability speci consideration don cares 
sat tex procedure re ne return clausify procedure re ne return clausify explain procedure re ne return clausify collect procedure re ne return clausify explain collect procedure clausify return 
re nement functions 
procedure dpll loop decide done return satis able loop cc bcp cc nil break con ict resolution cc return unsatis able 
davis putnam procedure 
procedure clausify converts set con icting constraints clause 
procedure re ne uses explanation facility don cares re ne uses explanations handles don cares collecting relevant constraints collect 
procedure re ne uses optimizations described section 

online integration far described ine integration sat sat solvers treated black boxes procedures restarted re nement step 
sat tools support backtracking 
case online integration appropriate choices propositional variable assignments synchronized extending logical context sat corresponding atoms 
detection inconsistencies logical context sat triggers backtracking search variable assignments 
furthermore detected inconsistencies propagated propositional search engine adding corresponding inconsistency clause explanation function approximation minimally inconsistent set atoms logical context 
contains main loop davis putnam procedure boolean sat solvers 
algorithm starts sat tex procedure dpll loop status decide status done propagate cc propagate cc nil status done con ict resolution cc return unsatis able status done return satis able loop cc bcp cc nil break con ict resolution cc return unsatis able procedure propagate relevant constrains collect assert relevant constrains return nil return clausify explain relevant constrains 
online integration 
empty boolean assignment traverses space truth assignments implicitly backtrack search algorithm 
search process iteratively performs steps extends current assignment making decision assignment unassigned variable procedure decide extends current assignment logical consequences assignments far procedure bcp deduction process may identify return con icting clause variable cc implying current assignment satis able undoes backtracks current assignment con ict detected allowing assignment tried procedure con ict resolution 
procedure bcp implements boolean constraint propagation corresponds application unit clause rule proposed davis putnam :10.1.1.24.7475
described explain function similar con ict resolution procedure boolean sat solvers 
con ict resolution procedure re ne result produced explain function online integration 
instance suppose explain function returns set fy explanation con ict detected sat set sat tex build con icting clause sent con ict resolution procedure sat con ict clause produced sat contains online algorithm 
procedure propagate responsible send assigned constraints sat returns con icting clause inconsistency detected 
words procedure propagate implements bridge sat sat online algorithm procedure collect behaves slightly di erent handle unassigned variables partial assignment 
keep track constraints sent sat procedure collect collects constraints 
procedure assert incremental version procedure sat extends logical context sat new constraints variable relevant constrains 
procedure propagate called satis able boolean assignment decide returns done ag propagate active 
di erent heuristics activate ag implementation activated time number new constraints assigned boolean value 
problem contains propositional variables algorithm behave standard boolean sat solver 
described procedure decide request sat create new backtracking point con ict resolution request sat execute backtracking 
integrated algorithm compatible kind decision heuristic standard optimizations non chronological backtracking learning 

experiments implemented re nements basic lazy theorem proving algorithm section cha ine integration ics deciding constraints 
ics ground decision procedure combination linear arithmetic constraints theory tuples arrays equality uninterpreted functions 
state art boolean sat solvers cha missing necessary api realizing online integration home grown sat realizing online integration 
describe experiments bakery mutual exclusion protocol 
initial states 
basic idea bakery customers take numbers lowest number gets service 
course service means entry see www csl sri com bmc examples 
sat tex 
bakery mutual exclusion protocol 
critical section 
example processes 
program location represents critical section process 
variable contains number uses enter critical section zero process trying enter critical section 
process execute transition time 
example interested property processes critical sections time 
validating property bounded model checking bmc search counterexamples length model checking problem system program veri ed mutual exclusion property 
technique introduced nite systems 
working extension bmc methodology nite state systems 
convention current variables written state variables written addition represents value variable time variable pc pc program counter process 
formula describes initial state pc pc want verify property pc pc counterexample length trace reaches goal pc pc 
transitions encoded pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc pc sat tex pc pc pc pc includes frame axioms describe variables transition ect 
program counter pc pc encoded propositional variables domains nite 
table ine lazy theorem proving time secs 
depth re ne re ne re ne time con icts time con icts time con icts table includes statistics di erent ine con gurations depending re ne procedure described section 
con guration list total time seconds number con icts detected decision procedure 
table indicates ort detecting relevant constraints linear explain function essential eciency 
recall experiments far represent worst case scenarios formulas unsatis able 
bmc problems counterexamples procedure usually converges faster 
consider example mutual exclusion problem bakery protocol assignment 
corresponding counterexample produced fraction second adding lemmas 







notice counterexample represents family traces parametrized newly introduced constants 
results online integration bakery example table ii di erent con gurations 
di erences number con icts compared table due di erent heuristics sat solvers 
sat tex table ii 
online lazy theorem proving 
depth explain explain time con icts calls ics time con icts calls ics con guration list total time seconds number con icts detected ics total number calls ics 
altogether explanation facility clearly pays number re nement iterations con icts reduced considerable 

related special case equality theories terms uninterpreted function symbols ackermann de ned reduction boolean logic adding propositional encodings relevant instances congruence axiom 
variations ackermann trick example shostak arithmetic reasoning presence uninterpreted function symbols various reductions satis ability problem boolean formulas theory equality uninterpreted function symbols propositional sat problems described goel zhou aziz pnueli rodeh siegel bryant german 
similar vein eager reduction propositional logic constraints pratt di erence logic described bryant 
simple constraint theory exponential number constraints may generated preprocessing stage 
compared eager reductions lazy integration procedure uniformly works logics rich set data types 
constructing able boolean formula priori compute sequence re nements adding propositional lemmas obtained analysis spurious propositional assignments 
way semantics constraints introduced gradually sat tex demand 
way inconsistency lemmas relevance satis ability formula added 
research closely related barrett dill stump describe integration cha cvc abstracting boolean constraint formula propositional approximation incrementally re ning approximation diagnosing con icts theorem proving nally adding appropriate con ict clause propositional approximation 
integration corresponds directly online integration lemmas demand paradigm 
approach generate explanations di erent extend cvc capability proofs approximating minimal sets inconsistencies 
optimizations don cares considered explicitly 
experimental results coincide suggest lazy theorem proving explanations called naive approach ine integration quickly impractical 
equivalence checking pipelined microprocessors speedups orders magnitude earlier svc system obtained 
armando giunchiglia propose sat approach special case solving disjunctions pratt di erence constraints 
experiments observe excessively redundant computations largely eliminated explanation capabilities 
preprocessing step computing inconsistency clauses literals simplify problems 
advantageous inconsistencies accelerate convergence 
optimizations don cares considered 

main contribution lazy integration propositional sat solvers constraint solvers ectively deciding satis ability problem propositional constraint formulas 
key idea constraint solvers suggesting demand useful inconsistency lemmas 
way inconsistency lemmas relevance satis ability formula added 
various re nements online integration acceleration convergence explanation functions needed lemmas demand approach ectively practice 
sat tex 
ackermann 
solvable cases decision problem 
studies logic foundation mathematics 

armando giunchiglia 
sat procedures temporal reasoning 
proceedings fifth european conference planning ecp 

barrett dill stump 
checking satis ability order formulas incremental translation sat 
cav 

armin biere alessandro cimatti edmund clarke zhu 
symbolic model checking bdds 
proceedings tools algorithms analysis construction systems tacas number lncs 

bryant german 
exploiting positive equality logic equality uninterpreted functions 
proceedings cav volume lncs pages 
springer verlag 

edmund clarke orna grumberg jha yuan lu helmut veith 
counterexample guided abstraction re nement 
proceedings cav volume lncs pages chicago il 
springer verlag 

david harald rue oliver oller 
ecient decision procedure theory xed sized bit vectors 
computer aided veri cation cav volume lncs pages haifa israel 
springer verlag 

das david dill 
successive approximation transition relations 
symposium logic computer science pages 
ieee 

martin davis hilary putnam 
computing procedure quanti cation theory 
journal acm 

leonardo de moura harald rue maria 
lazy theorem proving bounded model checking nite domains 
voronkov editor international conference automated deduction cade lecture notes computer science copenhagen denmark july 
springer verlag 

downey sethi tarjan 
variations common subexpressions problem 
journal acm october 


atre owre rue shankar 
ics integrated canonization solving 
proceedings cav volume lncs pages 
springer verlag 

goel zhou aziz 
bdd procedures theory equality uninterpreted functions 
proceedings cav volume lncs pages 
springer verlag 

thomas henzinger majumdar gr 
lazy abstraction 
acm sigplan notices 

drechsler 
formal veri cation register transfer level utilizing high level information hardware veri cation 
ifip international conference large scale integration vlsi pages montpellier france 

lakhnech bensalem sergey sam owre 
incremental veri cation abstraction 
margaria yi editors tools algorithms construction analysis systems th international conference tacas volume lecture notes computer science pages genova italy april 
springer verlag 
sat tex 
joao marques silva sakallah 
grasp new search algorithm satis ability 
proceedings iccad pages 

oliver oller harald rue maria 
predicate abstraction dense real time systems 
electronic notes theoretical computer science 

matthew moskewicz conor madigan ying zhao zhang sharad malik 
cha engineering ecient sat solver 
proceedings dac 

nelson oppen 
fast decision algorithms congruence closure 
technical report stan cs computer science department stanford university 

nelson oppen 
simpli cation cooperating decision procedures 
acm transactions programming languages systems 

david plaisted steven greenbaum 
structure preserving clause form translation 
journal symbolic computation 

pnueli rodeh siegel 
deciding equality formulas small domains instantiations 
proceedings cav volume lncs pages trento italy 
springer verlag 

harald rue natarajan shankar 
deconstructing shostak 
th annual ieee symposium logic computer science pages boston ma july 
ieee computer society 

eli 
proving safety properties integrating static analysis theorem proving abstraction 
rance cleaveland editor tools algorithms construction analysis systems tacas volume lecture notes computer science pages amsterdam netherlands march 
springer verlag 

sa di 
modular incremental analysis concurrent software systems 
th ieee international conference automated software engineering pages 
ieee computer society press 

shankar harald rue 
combining shostak theories 
invited floc rta 

robert shostak 
deciding linear inequalities computing loop residues 
journal acm october 

robert shostak 
deciding combinations theories 
journal acm january 

maria 
bounded model checking timed automata 
electronic notes theoretical computer science 

bryant 
deciding separation formulas sat 
international conference computer aided veri cation cav 
springer verlag july 
sat tex 
