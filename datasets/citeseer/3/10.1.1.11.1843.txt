deriving tabular event specifications goal oriented requirements models renaud de emmanuel letier axel van lamsweerde partement ing informatique universit catholique de louvain louvain la neuve belgium rdl avl info ucl ac 
goal oriented methods increasingly popular elaborating software requirements 
provide systematic support incrementally building intentional structural operational models software environment various techniques early analysis manage conflicting goals anticipate abnormal environment behaviors prevent goals achieved 
hand tabular event methods established specifying operational requirements control software 
provide sophisticated techniques tools late analysis software behavior models simulation model checking table exhaustiveness checks 
proposes take best worlds engineer requirements control software 
presents technique deriving event specifications written scr tabular language operational specifications built kaos goal oriented method 
technique consists series transformation steps resolves semantic structural syntactic differences kaos source language scr target language 
steps need human intervention illustrate kind semantic subtleties need taken account integrating multiple formalisms 
result technique scr specifiers may upstream goal processes la kaos incremental elaboration early analysis organization documentation tables kaos modelers may downstream tables la scr analysis behavior models derived goal specifications 

goal orientation increasingly recognized paradigm eliciting elaborating structuring specifying analyzing negotiating documenting modifying software requirements 
goals prescriptive statements intent satisfaction may require cooperation agents active components software environment 
goals organized refinement structures may refer functional non functional concerns range high level strategic concerns safe system nuclear power plant low level technical prescriptions requirements software safety injection overridden block switch pressure permit expectations environment block switch plant enters normal phase 
goal modeling reasoning advantages 
goals may specified precisely declarative fashion refined incrementally operational software specifications provably assure higher level goals allow trace low level details back high level concerns strategic goal dependencies agents analyzed responsibility assignment :10.1.1.16.4054:10.1.1.19.7952
goals provide criterion requirements completeness pertinence positive negative interactions goals captured managed appropriately exceptional conditions environment may prevent critical goals achieved pointed generated resolved produce robust requirements 
tables long recognized appropriate format presenting operational specifications compact readable form amenable various kinds exhaustiveness redundancy checks 
context embedded control software tables may capture input output functions software behavior firm precise mathematical basis :10.1.1.17.6363
consequence wide range analysis techniques defined automated including dedicated consistency completeness checks model simulation model checking test data generation invariant generation theorem proving 
integration goal oriented re methods kaos tabular specification techniques proceedings re th ieee joint international requirements engineering conference monterey ca sept best research award 
scr provide complementary benefits :10.1.1.17.6363
domain requirements models captured terms rich ontology goals agents requirements expectations objects including entities associations explicit events monitored controlled attributes operational services conflicts models organized documented goal refinement abstraction basic structuring mechanism 
built incrementally constructive method 
analyzed early stages re process available techniques goal refinement operationalization responsibility assignment scenario abstraction conflict management obstacle anticipation 
converted scr tables goal readable format due tabular display output driven structuring 
rich arsenal analysis techniques tools deployed tables point inadequacies inconsistencies operational software specification underlying goals specification operationalizes 
motivated complementarity 
objective discuss illustrate procedure transforming kaos specifications operational services derived goals techniques described scr tables :10.1.1.19.7952
organized follows 
section introduces required background kaos scr running example 
section discusses various steps transformation procedure kaos scr semantic structural syntactic difference resolved step 
section provides evaluation comparing scr specification derive running example smv model checker 

background presentation rely safety injection system nuclear power plant introduced 
reader may refer full kaos elaboration goal object agent operation models original scr specification :10.1.1.17.6363

goal oriented modeling kaos operational software requirements derived gradually underlying system goals 
word system refers software environment 
goal refinement graph elaborated identifying relevant goals input material typically looking intentional keywords natural language statements asking questions statements goal elaboration step uml classes attributes associations derived goal specifications object modeling step agents identified potential monitoring control capabilities alternative assignments goals agents explored agent modeling step operations domain pre postconditions identified goal specifications strengthened pre post trigger conditions derived ensure corresponding goals operationalization step 
parallel steps method handle goal mining scenarios management conflicts goals management obstacles goal satisfaction respectively 
goal statement intent satisfied cooperation various agents making system humans operators nuclear power plant devices sensors actuators software safety injection controller 
goals capture sets intended behaviors formalized real time temporal logic 
refinement links relate goal set subgoals called refinement means satisfying subgoals refinement sufficient condition domain satisfying goal 
links relate goal alternative set refinements means satisfying refinements sufficient condition domain satisfying goal 
core goal model system amounts refinement abstraction graph 
obstacle goal condition satisfaction may prevent goal achieved 
example goal named basic nuclear power plant system 
goal obstructed obstacle 
goal introduced mitigate obstacle 
goal seen conflicting goal elicited source document goal 
formal developments skipped obvious space reasons 
conflict resolved weakening goal yields new goal textually specified follows goal maintain startup def safety injection signal loss normal start cool 
safetyinjectionsignal startup fig 
shows goal model portion weakened goal refined application introduce accuracy goal tactics frequently phenomena referenced goal formulations monitorable controllable software agents 
startup goal refinement monitorability textual specifications annotating child nodes fig 
goal maintain startup def safety injection signal water pressure low set point normal start cool 
safetyinjectionsignal low startup def water pressure low set point loss plant normal start cool mode 
low startup note goals prescriptive domain properties descriptive 
goal refinement ends subgoal realizable candidate individual agent expressible terms objects monitorable controllable agent 
goal refinement partially driven target reaching variable model agent 
requirement terminal goal assigned agent software expectation terminal goal assigned agent environment 
state system defined aggregation states objects 
object entity relationship event agent active object characterized attributes domain properties invariants 
object model represented uml class diagram derived systematically goal model highlighting attributes relationships referenced goal formulations 
agent model captures responsibility links agents goals monitoring control links agents object attributes 
object attributes monitored controlled agent define interface agents monitored controlled variables derived systematically see 
modeling objects agents may essential multicomponent applications involving complex inter related objects 
goal assigned agent software operationalized functional services called operations performed agent 
operation model collects operations operationalization links goal model performance links agent model input output links object model 
operation input output relation objects operation applications define state transitions 
specifying operation distinction domain pre postconditions additional pre post trigger conditions required achieving underlying goal 
pair domain precondition domain postcondition captures elementary state transitions defined operation applications domain 
required precondition goal captures permission perform operation condition true 
required trigger condition goal captures obligation perform operation condition true provided domain precondition true 
required postcondition defines additional condition application operation establish order achieve corresponding goal 
produce consistent operation models required trigger condition operation imply conjunction required preconditions 
consider goal assigned engineered safety feature actuation agent 
goal operationalized partly operation operation input overridden output safetyinjectionsignal dompre safetyinjectionsignal safetyinjectionsignal trig pressure low overridden specification required trigger condition requires safety injection signal set soon water pressure higher low safety injection signal overridden 
case condition required precondition safety injection may set water pressure higher low safety injection signal overridden 
assumes correct complete derived goal specifications techniques described :10.1.1.19.7952

operational specification scr scr built original variable model defines requirements relation monitored controlled variables software specifications relation software input output variables 
system globally consists agents machine consisting software associated input output devices environment 
defines values controlled variables defines values monitored variables 
basic constructs scr modes terms 
mode class auxiliary variable behavior defined state machine monitored variables 
states called modes mode name shorthand implicit logical expression monitored variables 
mode transitions triggered events 
complex machine may defined mode classes operating parallel 
term auxiliary variable defined function monitored variables mode classes terms term names repeating definition helps making specification concise 
scr specification defines machine set tables associated information variable declarations type definitions initial state definitions assumptions table specifies behavior variable mathematical function 
table may mode transition table condition table event table 
mode transition table specifies mode class defining various modes function previous corresponding mode events 
condition table defines various values controlled variable term function corresponding mode associated mode class amc conditions 
event table defines various values controlled variable term function corresponding amc mode events 
condition predicate defined monitored controlled internal variables point time 
conditions condition table expected disjoint table function covering entire state space function total 
event occurs variable changes value 
particular input event occurs monitored variable changes value 
conditioned event occurs event occurs specified condition true 
kaos events implicit scr manipulated notations means evaluated current state evaluated state 
example block reset amounts block block reset 
event occurs block reset old state block new 
note condition refers single state event refers pair consecutive states 
kaos scr built synchrony hypothesis machine assumed react infinitely fast changes environment handles input event completely processed 
variable framework means value controlled variable state may depend values monitored variables current state 
synchrony hypothesis justifies mode transition table specifies value mode class terms current values monitored variables current value mode class event table specifies value target variable terms current values variables current value variable condition table defines value target variable terms value variables 
formal model scr defined terms functions prescribes deterministic machine behaviors behavior environment course nondeterministic :10.1.1.17.6363
old mode event new mode toolow low permitted permitted low toolow permitted permit permit permitted table mode transition table mode class come back running example 
scr specification software agent includes mode class modes toolow permitted high term overridden controlled variable safetyinjectionsignal monitored variables block reset 
table illustrates mode transition table mode class 
line table states toolow event low occurs switches permitted 
lines applies current state change 
mode events toolow permitted block reset reset false overridden true false table event table term overridden table illustrates event table defining term overridden capture situations safety injection blocked 
term defined function amc variables block reset 
entry false event table means event may cause variable defined table take value column entry event may cause overridden true 
notation row captures transition modes specified row column row table states toolow permitted reset overridden false table illustrates condition table specify controlled variable safetyinjectionsignal function amc term overridden column row states toolow overridden true safetyinjectionsignal 
note output value corresponding condition true 
mode conditions toolow overridden overridden permitted false true signal table condition table controlled variable safetyinjectionsignal note rationale rows tables may obvious kaos model upstream tables may explain tracing specification decisions back underlying goals obstacles 
example shows unexplained condition second row table resolves obstacle generated obstacle operator forgetting push reset button normal start phase resolution safety injection actuated overridden true plant longer normal start phase 
note scr flat language provides structuring mechanism table refinement composition incremental specification argument mechanism needed goal refinement upstream mechanism structuring documenting specification 

deriving scr tables kaos models procedure assumes goal model transformed kaos operation model techniques described :10.1.1.19.7952
procedure converts model semantically close set scr tables 
semantically close mean relation hold source kaos operation model kom target set tables sst sst kom kom denotes source operation model kom state shift performed squeeze model scr synchrony hypothesis required preand trigger conditions evaluated state respect state corresponding domain precondition evaluated see 
words set scr behaviors included set kaos behaviors modulo state shift required synchrony hypothesis 
step procedure resolves difference kaos scr semantic difference allowed form non determinism synchrony hypothesis structural difference grouping expressions syntactic difference 
various steps reviewed successively shifting pruning semantics generative mapping multi agent model bi agent getting rid non determinism grouping transition classes output translating transition predicates scr expressions identifying mode classes deriving mode conditions generating scr event tables mode transition tables simplifying tables condition tables 

pruning semantics generative kaos specification language pruning semantics behavioral change allowed ones explicitly forbidden specification 
hand scr state machine formalisms generative semantics behavioral change forbidden ones explicitly required specification 
semantic difference resolved making closure assumption source operation model assumed capture acceptable behaviors 
words behavioral change captured source operation model forbidden corresponds changes frame assumption 
case new operation added source model conversion procedure reapplied model produce new set tables 

variable model variable kaos agent model captures multiple cooperating agents software agents legacy software software human agents devices sensors actuators hand scr specification considers agents machine environment see section 
kaos controlled variables agent may object attribute values may modified agent controlled variable interface variable internal variable 
scr machine controlled variables restricted variables interface environment 
resolve differences analyst asked agent aggregate wants consider machine specified scr tables 
agents aggregated scr environment 
monitored controlled variables scr specification derived rules kaos variable monitored machine agent controlled environment agent monitored variable scr specification kaos variable controlled machine agent monitored agent environment controlled variable scr specification kaos variable controlled machine agent monitored environment agent auxiliary variable term mode class scr specification 
running example machine aggregation software agent corresponding sensors actuators environment include system plant operator actual safety injection mechanisms 
variable safetyinjectionsignal controlled variable scr model variables controlled agent monitored environment 
variables block reset monitored variables scr model variables monitored agent controlled environment 
hand variable overridden auxiliary variable term controlled agent monitored agent environment 

getting rid non determinism kaos agents non deterministic 
obliged perform operation operation trigger condition true agent may freedom perform operation required preconditions true 
hand scr environment non deterministic scr machine deterministic 
remove kaos non determinism necessary analyst asked choose eager lazy behavior scheme operation performed machine agent 
eager behavior scheme agent performs operation soon soon required preconditions true lazy behavior scheme agent performs operation really obliged required trigger conditions true 
note eager scheme guarantees obligation fulfilled kaos consistency meta constraint imposing required trigger condition operation imply required preconditions 
similarly lazy scheme guarantees permission violated kaos consistency meta constraint 

grouping transitions output operational specification items organized ways grouping input grouping output grouping transition class 
case grouping transition class focus specification unit set state transitions meet pre trigger postconditions 
case grouping output focus specification unit set state transitions affect value output 
kaos operation model specification items grouped transition class grouped agent goal operation contributes 
scr specification items grouped output 
standard way resolving structure clashes introduce intermediate data structure 
output table associated controlled term variable collect various transition classes variable 
row output table associated kaos operation declares variable associated table output clause 
table shows output table controlled variable safetyinjectionsignal 
abbreviation goal pressure 
table derived corresponding operation specifications section 
safetyinjectionsignal operation dompre trigger target value goals injection low overridden injection safetyinjectionsignal low overridden table output table safetyinjectionsignal row output table defines transition class information name kaos operation defining transition class name goals operationalized information keep track original specification step transformation domain precondition operation general condition variable defined table condition triggering transitions class condition operation conjunction required preconditions case eager behavior scheme selected operation previous step operation disjunction required trigger conditions case lazy behavior scheme selected new value taken target controlled term variable transition class enabled format assumes domain postconditions specified equationally case implicit nonconstructive postconditions leading form non determinism considered 
semantics transition class captured row output table associated controlled term variable kaos semantics corresponding operation dompre trigger means holds state 

translating output table expressions scr expressions step enriches output tables extra column composed scr translations corresponding dompre trigger expressions 
problem sub expressions form trigger scr translation refer current states conditions trigger output tables produced previous step refer current state state 
point introduce state shift order squeeze output table expressions scr synchrony hypothesis see impact synchrony hypothesis evaluation scr expressions section specification conversion procedure section 
shift may defined visually follows kaos transition scr transition current state state dompre trigger dompre trigger trigger pair dompre trigger output table row translated scr expression follows trigger non disjunctive dompre trigger trigger dompre trigger disjunctive dompre trig trig trig dompre trig dompre translation rule trigger replaced trig trig case disjunctive trigger enable transitions scr specification second rule aimed keeping transitions kaos operation model scr specification 
kaos constructs may involve temporal operators real time operator operator 
comprehensive set translation rules mapping additional kaos constructs corresponding scr ones :10.1.1.11.1843
second translation rule obtain enriched output table portion sketched table transition class associated operation injection table 
table shorthand scr expression low safetyinjectionsignal overridden safetyinjectionsignal operation dompre trigger scr expression target value goals 
injection 

table enriched output table safetyinjectionsignal step suggest scr event table created controlled term variable fact necessarily case simplifications subsequent steps 

identifying mode classes step consists determining enriched output tables auxiliary variables mode classes 
choice mode classes determines structure scr specification strong impact readability modifiability 
various heuristics available support analyst task 
input history abstraction identify mode class variable allows away past histories input events 
heuristics scr case studies see cruise control system 
input aggregation build mode class aggregation discrete monitored variables values state constrained exclusion coverage rules asserted kaos goal specifications domain invariants 
rules convey application specific terms sequential state machine time possible states partitioning state space 
outlines algorithm implementing heuristics applies systematic derivation mode classes autopilot case study 
continuous variable abstraction build mode class partitions range values continuous monitored variable discrete set subranges 
subranges derived corresponding conditions constrain monitored variable output tables variable appears 
finite output variable promotion consider variable defined output table candidate mode class finite range auxiliary variable monitored controlled machine promotion mode class improve clarity specification 
safety injection case study variable continuous constrained conditions output tables defining controlled variable safetyinjectionsignal term overridden 
range partition derived variable abstraction heuristics permit permitted low permit toolow low ranges define modes mode class named 
scr expressions output tables rewritten replacing conditions continuous monitored variables equivalent formulation terms modes 
scr expression table associated target value safetyinjectionsignal obtain mode expression permitted safetyinjectionsignal overridden safetyinjectionsignal finite output variable promotion heuristics overridden considered mode class auxiliary variable finite range 

generating scr tables step generates mode transition tables event tables output tables scr expressions mode 

generating mode transition tables mode class obtained continuous variable abstraction heuristics mode transition table derived range partition conditions monitored variables define partitioning prefixed operator produce events triggering transitions source target modes transition collected mode definitions 
table shows resulting mode table mode class 
mode class obtained finite output variable promotion heuristics mode transition table obtained deriving event table see transforming event table mode transition table technique described 

initializing event tables initial event tables controlled term variables obtained determining mode class corresponding output table associated event table populating column various amc modes populating row various target values output table filling cells false 
selection heuristics may case multiple candidate amc select referenced mode class corresponding output table 
mode events toolow false false permitted false false false false signal table initialized event table safetyinjectionsignal table shows initialized event table controlled variable safetyinjectionsignal case mode class appearing scr expressions output table associated safetyinjectionsignal 
choice needed 

strengthening event tables scr expressions version scr event tables obtained initialized tables strengthening column false event cells scr mode expression output table cell associated target value simplifying scr expression cell strengthened column propagation mode properties event cell line associated mode disjunct form amc replaced scr predicate disjunct form amc deleted replaced false amc take different values time 
table shows resulting intermediate event table obtained controlled variable safetyinjectionsignal processing third column table third line table mode expression obtained section amc 
mode events toolow false overridden safetyinjectionsignal permitted false safetyinjectionsignal overridden safetyinjectionsignal false safetyinjectionsignal overridden safetyinjectionsignal signal table partially strengthened event table 
simplifying event tables domain invariants upstream kaos specification scr specific rules may simplify strengthened event table eliminating redundancies 
example conditions values variable defined table may trivially satisfied source state leading new target value view domain restrictions possible values event cell event cells false line may simplified event mode cause transition value variable making disjunct get back target value lines identical event cells may merged single line mode cell containing union original modes 
table shows final event table obtained processing second column application simplification rules 
mode events toolow overridden overridden permitted false safetyinjectionsignal table final event table safetyinjectionsignal 
event tables condition tables event tables obtained may simplified condition tables provided conditions hold clause table condition table obtained meets disjointness coverage criteria 
set transformation rules includes rules true table shows result transforming event table table condition table 
mode conditions toolow overridden overridden permitted safetyinjectionsignal false true table condition table safetyinjectionsignal resulting table meet coverage disjointness criteria 
criteria checked scr toolset 
decision making transformation left analyst 

evaluation may compare specifications safety injection case study native scr spec native kaos spec scr spec derived 

derived scr spec vs original scr spec scr specification derived kaos model nearly identical original slight differences event table term overridden 
original table term table table shows derived procedure 
mode events toolow permitted block reset false overridden true false table derived event table term overridden may notice original specification extra condition reset event block leading state overridden true redundant view domain invariants block reset 
original specification extra disjunct strengthening event reset may lead state overridden false disjunct really needed hard understand documentation rationale underlying goal model 
hand expression scr specification derived may traced back goal model 
course incomplete insufficient obstacle analysis 
corrections goal model obstacle analysis tables derived feel difficult follow reverse engineering path 

derived scr spec vs original kaos spec compared derived scr specification original kaos model smv model checker 
basically translated specifications smv syntax tried prove controlled variables safetyinjectionsignal original kaos model derived scr specification value 
turned exactly case view state shift introduced squeeze output table expressions scr synchrony hypothesis see section 
smv showed values quiet input assumption 
means roughly input events sparse respective values equal previous time unit clock cycles ago 
scr derived scr spec smv generated scr spec translated smv kaos original kaos spec original kaos spec translated smv fig 
comparing kaos derived scr specifications fig 
helps visualizing verification experiment 
vertical arrows denote translation smv syntax horizontal dotted arrow represents derivation process denotes pseudo equivalence 
provides formal framework derivation process includes formal representation step formal semantics intermediate model 

method deriving scr specifications kaos models scr specifiers may follow upstream goal processes incrementally elaborate structure document tabular specification guided fashion perform goal level analysis earlier detection resolution obstacles conflicts 
conversely kaos modelers may obtain downstream tabular specifications systematic way specification analysis exhaustiveness checking simulation model checking test data generation 
approach led point complementarities subtle differences frameworks 
derivation process consists series steps aimed removing semantic structural syntactic differences kaos scr frameworks 
derivation process may shown complete respect differences 
discussed price pay integrating different re frameworks 
semantic differences due absence non determinism scr machine behaviors synchrony hypothesis resulting incompatible rules evaluation expressions states impossible derive target specification behavior models exactly source ones 
alternative approach combining goal oriented specification tabular event specification derive scr tables directly goal specifications passing kaos operation model 
derivation process simpler shortcut structuring transition class proceed directly output driven restructuring required scr tables 
deriving scr tables directly goals overcome technical problems related synchrony hypothesis hypothesis injected directly goal model technically weakening definition realizability allow machine agents take responsibility goals require synchronous reaction 
problem deriving scr specifications directly declarative goal specifications somewhat inverse problem inferring declarative invariants scr tables 
insights techniques gained process described extracting mode classes eager lazy strategies getting rid non determinism applicable problem deriving scr tables directly declarative goals 
direction worth investigating 

reported partially supported belgian fonds national de la recherche scientifique 
anton potts goals surface requirements evolving systems proc 
icse th int software kyoto april 
archer heitmeyer sims steve tame pvs interface simplify proofs automata models proc 
july 
state model checking event driven system requirements ieee transactions software engineering vol 
january 
berry gonthier esterel synchronous programming language design semantics implementation science computer programming 

chung nixon yu mylopoulos non functional requirements software engineering 
kluwer academic 

courtois parnas documentation safety critical software proc 
icse th intl 
conf 
software engineering pp 

dardenne van lamsweerde fickas goal directed requirements acquisition science computer programming vol 

darimont van lamsweerde formal refinement patterns goal driven requirements elaboration proc 
fse th acm symp 
foundations software engineering oct 
de deriving tabular event specifications goal oriented requirements models 
ms thesis university louvain june 
heitmeyer model generate tests requirements specifications proc 
esec fse springer verlag lncs nr 

heimdahl leveson completeness consistency hierarchical state requirements ieee transactions software engineering vol 
june 
heitmeyer jeffords labaw automated consistency checking requirements specifications acm trans 
software eng 
methodology july 
heitmeyer kirby labaw 
tools formal specification verification validation requirements proc 
compass june gaithersburg md heitmeyer labaw archer bharadwaj abstraction model checking detect safety violations requirements specifications ieee transactions software engineering vol 
november specifying software requirements complex systems new techniques application ieee transactions software engineering vol 
january 
jackson principles program design 
academic press 
jeffords heitmeyer automatic generation state invariants requirements specifications proc 
fse th acm symp 
foundations software engineering 
van lamsweerde darimont letier managing conflicts goal driven requirements engineering ieee transactions software engineering special issue managing inconsistency software development november 
van lamsweerde requirements engineering year research perspective keynote proc 
icse nd intl 
conference software engineering acm press may 
van lamsweerde letier handling obstacles goal oriented requirements engineering ieee transactions software engineering special issue exception handling october 
van lamsweerde goal oriented requirements engineering guided tour invited proc 
re th intl 
symp 
requirements engineering toronto august pp 

letier goal oriented elaboration requirements safety injection control system www info ucl ac people safety injection pdf letier van lamsweerde agent tactics goal oriented requirements elaboration proc 
icse th intl 
conf 
software engineering orlando ieee press may 
letier van lamsweerde deriving operational software specifications system goals proc 
fse th acm symp 
foundations software engineering charleston november 
mc smv system smv version november www cs cmu edu smv ps mylopoulos chung nixon representing nonfunctional requirements process oriented approach ieee trans 
software 
engineering vol 
june 
parnas madey functional documents computer systems science computer programming vol 
pp 

pollack hicks decision tables theory practice 
wiley 
potts schematic scenarios understand user needs proc 
dis acm symposium designing interactive systems processes practices techniques univ michigan august 
calvert cha formal verification functional properties scr style software requirements specification pvs proc 
tacas springer verlag april 
derivation tabular specification goal oriented specifications simple autopilot system thesis university louvain june 
van parnas madey documentation requirements computer systems proc 
re st int 
symp 
requirements engineering san diego ieee 
easterbrook formal modeling space shuttle software change requests scr proc 
re th intl symp 
requirements engineering limerick ieee june 
yu modelling organizations information systems requirements engineering proc 
re st intl symp 
requirements engineering ieee 
yue mean say specification complete proc 
fourth international workshop software specification design monterey 
