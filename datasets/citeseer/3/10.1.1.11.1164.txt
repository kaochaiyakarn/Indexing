efficient dynamic network flow algorithms dissertation faculty graduate school cornell university partial fulfillment requirements degree doctor philosophy bruce edward hoppe august fl bruce edward hoppe rights reserved efficient dynamic network flow algorithms bruce edward hoppe ph cornell university dynamic network flows model transportation 
dynamic network consists graph capacities transit times edges 
flow moves dynamic network time 
edge capacities restrict rate flow edge transit times determine long unit flow spends traversing network 
dynamic network flows studied extensively decades 
thesis introduces polynomial algorithms solve important dynamic network flow problems 
solve computing chain decomposable flows new class structured dynamic flows 
solve quickest transshipment problem 
instance problem consists dynamic network sources sinks 
source specified supply sink specified demand flow 
goal move appropriate amount flow source sink time 
previously problem solved efficiently special case single source single sink 
quickest transshipment algorithm depends efficient solutions dynamic transshipment problem lexicographically maximum dynamic flow problem 
version quickest transshipment problem time bound specified 
maximum flow problem dynamic network prioritized sources sinks goal maximize amount flow leaving high priority subset sources sinks 
consider universally maximum dynamic flow problem 
universally maximum dynamic flow sends flow source sink sink receives flow quickly possible subject source releases flow late possible 
describe polynomial algorithm approximate universally maximum dynamic flow factor ffl ffl 
describe polynomial algorithm compute value universally maximum dynamic flow single specified moment time 
biographical sketch bruce edward hoppe born william patricia hoppe february pennsylvania 
years footsteps sister bruce attended hanover elementary school east hills junior high school freedom senior high school graduated 
bruce attended princeton university split time studies bicycle 
bruce raced princeton cycling team years team 
obtained computer science 
graduating princeton bruce worked years princeton transportation consulting group led development strategic optimization program companies 
bruce left pursue ph computer science cornell university 
bruce resumed racing bikes years cornell retired collegiate cycling focus studying 
obtained computer science january 
completion ph bruce plans return 
iii elizabeth christine stephanie am especially grateful advisor eva tardos 
collaborated closely aspects thesis 
eva generous sharing insights knowledge experience time enjoyed support academic personal journey cornell 
hope forget lessons learned 
go members special committee jim renegar steve vavasis inspiring courses helpful advice letters recommendation proofreading efforts 
years cornell funded national science foundation graduate research fellowship 
appreciated financial support freedom afforded pursue interests 
research partially funded cornell university sage fellowship national science foundation presidential young investigator award eva tardos 
despite previous background transportation modeling study dynamic network flows second year cornell read coauthored bettina 
subsequent mail collaboration helped get research ground conversation office months inspired universally maximum dynamic flow snapshot algorithm chapter 
interim monika rauch enjoyed series technical discussions contributed polynomial integral evacuation algorithm eventually evolved quickest transshipment algorithm chapters 
vii attempting explain research colleagues occasionally revealed gaps reasoning 
interesting conversations stubborn questions clarified thoughts am grateful david shmoys neal young 
cornell university department computer science treated years ithaca 
addition institutions graciously hosted 
followed eva department computer science alma princeton university spring semester year 
research really got moving new jersey time appreciated teaching support undergraduate advisor bob tarjan 
summer followed eva farther afield department computer science alma university budapest hungary 
years graduate student easy support god friends family 
am grateful god 
believing am grateful elizabeth christine cunningham stephanie clark 
great research collaborator lasagna true friend am grateful lorenzo alvisi 
lessons faith friendship am grateful marty carlisle rob hunt eric savage 
companionship home office am grateful rick aaron cori allen ray katherine guo ron minsky rod mike richman viswanath 
family mom dad love 
viii table contents biographical sketch iii dedication vii list figures xi preface xiii definitions research survey static network flows dynamic network flows chain decomposable flows standard chain decomposable flows maximum dynamic flows chain decomposable flows universally maximum dynamic flows exact algorithms approximation algorithm lexicographically maximum dynamic flows applications lex max flows lex max dynamic flow algorithm proof correctness ix dynamic transshipment problem dynamic transshipment feasibility feasibility polytope polynomial algorithm feasibility testing strongly polynomial algorithm dynamic transshipment algorithm overview algorithm iteration algorithm proof correctness extensions applications dynamic dynamic network flows quickest transshipment problem network scheduling summary open problems epilogue bibliography list figures dynamic network transit times time expanded network standard chain decomposable flow chain flows induced dynamic flows non standard chain decomposable flow zero flow chain decomposition universally maximum dynamic flow algorithm snapshot universally maximum flow edge yz time universally maximum flow ffl approximation algorithm lex max dynamic flow algorithm transforming connecting new source parameterized capacity connecting new source parameterized transit time reduction mortal edge traditional network xi preface dark night 
jack lay motionless cabin motionless stomach gut mad ride 
jack wanted ride get 
lamb curry rare 
mmm 
rachel comfortably jack half asleep 
jack cast iron stomach 
knew reason stand cooking 
full moon 
jack enjoy view 
real jack 
rachel talk cruise 
rachel loved adventure nature outdoors read arctic whale watch travel magazine 
jack night asked 
sure spend week cruising waves north atlantic 
watching whales 
captain dirk crandall hard wheel brace sea 
duty dirk knocked back jack daniels man air 
said nerves 
calm nerves serve calm sea tonight dirk gaze comprehend waves crashing hull 
vessel command 
sea rachel 
kissed jack gently drew imaginary patterns rugged torso 
oh man lose jack bathroom 
xiii rachel second thoughts jack whale watch 
jack charm complemented lean athletic physique trip bringing 
wanted lie bed clear path toilet 
driving rachel totally stir crazy 
rachel slipped white silk dressing slipped cabin 
ship crashed sea passengers quietly hiding rooms 
rachel climbed way observation deck wrong turn 
suddenly bridge 
full moon framed silhouette manning helm 
rachel recognize pair broad shoulders beneath massive hands emerged clamped firmly wheel 
dirk rachel said softly 
voice rare moment vulnerability 
captain lit needed see flowing raven tumbling shapely female form 
rachel replied come long way find 
alcohol hanging dirk soften features entirely mask impression power projected 

rachel dirk presence 

years ago rachel thought hoped time quench fire dirk lit soul 
get 
dirk thought distance erase rachel awful consequences violent temper memory 
storm 
rachel mind lost balance fell dirk embrace 
resist pulled close 
kiss filled white light 
oh dirk 
suddenly shot rang 

popped ship crashed iceberg 
cold poured rip hull opened hard ice 
levels water jack stood happening retrieved papers left cabin 
dirk lay half conscious helm 
impact taken feet head landed hard deck 
get 
rachel 

emergency lights bells awakened passengers decks rachel hardly noticed ship sinking 
dirk 
dirk saw vision receding dark tunnel 
rachel reached 
felt arms struggled hang 
love 
sorry said 
said 
time stood 
seemingly moments jack entered bridge 
feet 
time go commanded 
ship go 
take corridor left go stairs just seats left 
honey 
don time explain 
go 
jack bridge followed final 
handed rachel life jacket helped aboard 
reached overhead get life jacket dirk 
dirk rage mine 
dirk jack hands ready rend limb limb 
pinned jack grip 

rachel ordered 
hands aimed loaded flare gun dirk eyes 
please dirk 
don 
control 
wimp 
dirk 

deserve real man hand clamped jack neck dirk reached underneath coat 
rachel saw blade hand pulled trigger 
dirk head lit night sky piercing wind 
staggered back collapsed deck 
rachel pulled jack aboard released ties flames remains 
ship xv rolled slowly 
jack 
speak 
perfect rescue planned 
wasn supposed 
rachel watched disappeared view 
felt part go 
suddenly noticed filled grateful survivors lit final flames 
quick head count revealed saved 
jack amazing 
ship sunk minutes 
evacuate quickly 
reading dynamic network flows jack replied 
passengers just instance quickest transshipment problem 
felt impact iceberg knew 

rachel jack arms 
want know secrets 
please tell 
long story xvi chapter modern society depends transportation 
goods move producers consumers 
people commute shop travel 
information speeds electronic web connecting homes schools offices world 
lives filled decisions go 
pervasive role society transportation deserves study 
understanding transportation better lead greater efficiency translating lower costs transportation providers better service customers 
interest transportation spawned field network flows 
network consists nodes edges 
node corresponds factory warehouse computer location production consumption consolidation 
edge connects pair nodes corresponding roads cables channels 
commodities flow node node transported edges network 
edge capacity restricts amount transport 
network flows applications transportation modeling 
scheduling personnel assignment dna sequencing open pit mining just tiny sample applications posed network flow problems 
complete list see textbook ahuja 
study network flows developed simultaneously linear programming optimization general 
network flow problems specially structured linear programs may solved 
yield specialpurpose combinatorial algorithms received attention interested researchers ford fulkerson approach landmark text network flows 
structure network flow problems leads solution techniques computationally efficient theoretically practically known solve linear programs 
computer science operations research communities pursued efficient network flow algorithms decades 
vast body literature lies wake contains curious omission 
despite natural connection network flows transportation research network flow theory ignored question asked child back seat car 
parents endure persistent line questioning undoubtedly consider time deciding go 
ford fulkerson aware importance time transportation incorporated network flow model 
generalized standard definition network include transit times nodes resulting dynamic network 
edge yz dynamic network models pipeline node node capacity edge yz corresponds cross section pipeline restricts amount flow enter edge yz unit time 
transit time edge yz corresponds length pipeline determines time passes flow moves edge yz 
dynamic flow moves time dynamic network extension traditional network flow mapping edge time pairs flow values edges flow values 
ford fulkerson dynamic network flows studied extensively operations research community 
survey articles aronson powell summarize progress 
research area focused theoretical questions mathematical modeling practical concerns algorithm implementation paid attention algorithmic theory 
particular little known computational complexity dynamic network flow problems 
thesis study dynamic network flows focus development theoretically efficient algorithms 
bridges gap study traditional network flows dynamic network flows 
researchers traditional network flows strive best possible asymptotic bounds worst case algorithm performance 
algorithms solve dynamic problems realistic model typically considered researchers transportation 
algorithms efficient techniques known respective problems 
initial versions results appeared 
polynomial vs pseudopolynomial algorithms 
dynamic network flow algorithm represent dynamic flow edge flow changes time 
standard technique consider discrete steps time copy original network time step time zero time horizon flow left network 
process results time expanded network 
algorithms time expanded networks running times depending polynomially algorithms pseudopolynomial 
algorithms thesis true polynomial running times depend polynomially log achieve breakthrough eliminating time expanded network 
computing flow edge individual time step algorithms produce solutions characterized long time intervals edge flow remains constant 
explicitly compute intervals product chain decomposable flows structured class dynamic flows define chapter 
algorithms compute chain decomposable flows 
polynomial algorithms may represent theoretical breakthrough technique practical significance 
dynamic network flows model continuous time problems real world 
accurate model relies finer granularity implying time steps dynamic flow finished step representing real time 
performance pseudopolynomial algorithm degrades linearly worse improvement model granularity restricts accuracy achieved model 
performance polynomial algorithm degrades logarithmically better finer model granularity may allow accurate modeling traditional techniques 
universally maximum dynamic flows 
ford fulkerson focused attention basic dynamic network flow problems maximum dynamic flow problem 
instance problem time horizon dynamic network source sink solution feasible dynamic flow sends possible source sink time ford fulkerson discovered ingenious polynomial algorithm problem algorithms thesis descend 
gale wilkinson minieka considered variant maximum dynamic flow problem sink receive flow possible intermediate time step including addition flow leave source late possible 
call flow universally maximum dynamic flow 
existence flows obvious proved gale 
wilkinson minieka independently described pseudopolynomial algorithms compute flows 
chapter reexamine identical algorithms wilkinson minieka describe equally similar algorithm chain decomposable flows 
perspective leads polynomial algorithm compute value universally maximum dynamic flow edge single time step time step snapshot full solution 
describe polynomial algorithm approximate universally maximum dynamic flow factor ffl ffl 
algorithm runs polynomial time respect ffl gamma input network 
quickest flows 
variant maximum dynamic flow problem quickest flow problem flow value find feasible dynamic flow sends units flow source sink possible time 
quickest flow problem reduced maximum dynamic flow problem binary search 
burkard studied problem described efficient solution techniques 
evacuation problem multi source generalization quickest flow problem supply value source asked find feasible dynamic flow sends specified amount source sink time 
traditional network transit times evacuation problem reduces trivially single source flow problem supersource 
dynamic setting evacuation problem complicated quickest flow problem 
useful evacuation problem originally formulated practical model building evacuation 
evacuation problem studied groups 
avoided bad news technique known compute optimal solutions required exponential time space 
chapters describe strongly polynomial algorithm quickest transshipment problem generalization evacuation problem allows multiple sinks addition multiple sources 
previously polynomial algorithm known evacuation problem just sources 
algorithm solves quickest transshipment problem computes integral flow integral data 
network scheduling 
evacuation quickest transshipment problems easy motivate disaster contingency plans applications settings 
consider set computers network machine queue unit size jobs waiting execute 
job run locally go network remote execution 
link network characterized capacity transit time 
problem executing jobs job executes soon possible reduces easily integral quickest transshipment problem 
applying quickest transshipment algorithm obtain polynomial algorithm scheduling unit size jobs network 
groups obtained polynomial algorithms unit job network scheduling special cases 
deng considered networks unit transit times capacities 
stein considered ring networks unit transit times unit capacities 
algorithm handles general networks arbitrary non negative integer capacities transit times 
outline thesis 
define basic terminology notation chapter 
chapter formally introduce dynamic network flow problems thesis survey research related 
chapter presents chain decomposable flows structured class dynamic flows algorithms thesis generalization temporally repeated flows described ford fulkerson 
algorithmic results chapter discuss universally maximum dynamic flows 
chapter consider lexicographically maximum dynamic flows multi terminal generalization maximum dynamic flows 
results chapters show lexicographically maximum dynamic flows solve dynamic transshipment problem version quickest transshipment problem time horizon specified leads quickest transshipment algorithm 
conclude observations open problems chapter 
chapter definitions directed graph set edges associated set nodes edge ordered pair nodes yz path directed graph ordered set edges gamma distinct edge appending creates cycle 
forest graph contains cycle edge may forward backward 
cut partition node set parts contains say cut refer set edges endpoint dynamic network consists directed graph non negative integral capacity yz integral transit time yz associated edge yz special subset nodes called terminals 
maximum capacity denoted maximum transit time refer transit times length cost 
terminal source sink set sources denoted set sinks gamma distinguish edges positive capacity including set simplicity assumptions 
symmetric yz zy antisymmetric yz yz gamma zy parallel edges restrict integral capacities merely simplicity 
allow real valued capacities 
zero length cycles contains opposite edges edges non negative transit time 
sources entering edges sinks leaving edges denote jsj likewise jv jej 
suppose source sink network dynamic flow function yz theta satisfies constraints yz zy yz gammaf yz fs tg yz notation yz yz zy yz yz 
equation antisymmetry constraint inequality relaxed conservation constraint allows non terminal node store non negative amount holdover flow temporary inventory 
usually need holdover flow 
see chapter 
dynamic flow defined time horizon zero time finite horizon dynamic flow 
dynamic flow time horizon feasible satisfies capacity constraints yz yz yz holdover flow remaining non terminal nodes time fs tg yz absence time horizon infinite horizon flow 
dynamic flow feasible satisfies capacity constraints 
notice antisymmetry constraint edge yz capacity constraint zy yz zy requires yz 
time bound node value net dynamic flow time jf yz usually consider value terminals 
particular terminal jf net dynamic flow sink 
slightly awkward definition advantage ignores flow transit net flow source jf counts flow network time 
throughput edge yz total flow yz time jf yz yz absence time bound jf jf yz corresponding infinite sums 
dynamic flows sources sinks defined analogously 
multi terminal networks denote net flow subset terminals jf associate multi terminal network supply vector denoted assume source sink gamma subset terminals denote total supply 
assume total supply terminals zero 
say supply vector satisfied dynamic flow horizon jf terminal refer flows traditional sense static flows 
static flow function yz satisfies antisymmetry constraints yz gammaf zy edge yz conservation constraints yz node notation yz yz static circulation defined analogously satisfy conservation constraints nodes 
static flow circulation feasible satisfies capacity constraints yz yz edge yz 
residual network static flow subject capacity defined residual capacity function yz yz gamma yz notation capacities clear context 
edge zero residual capacity saturated 
value static flow jf yt multi source multi sink static flows defined analogously 
time steps holdover edges dynamic network transit times time expanded network dynamic flow time horizon equivalent static flow network 
node copies denoted 
edge yz gamma yz copies capacity yz denoted yz time yz 
addition contains holdover edge infinite capacity node time dynamic flow equivalent static flow infinite time expanded network defined analogously 
example depicts dynamic network edge labeled transit time 
capacities indicated assume unit capacities 
shows time expanded network associated dynamic network 
edge unit capacity holdover edges 
unfortunately terminology dynamic network flows consistent literature 
notably orlin refers dynamic networks static networks time expanded networks dynamic networks 
holdover flow 
defined dynamic flows allow node hold arbitrary non negative amount flow 
conservation constraint expresses capability formally holdover edges time expanded network 
real world network nodes may little capacity hold inventory may want tighten constraint equality eliminate holdover edges non terminal nodes 
valid concern feasibility holdover flow matter problems described thesis algorithms solve problems allow holdover flow solutions find holdover flow 
exceptions rule discuss mortal edges chapter 
chapter research survey static network flows traditional static network flows studied extensively ford fulkerson seminal textbook 
literature field enormous related tangentially results thesis 
excellent ahuja 
particularly interested topic static network flow theory minimum cost flow problem important applications dynamic network flows 
problem requires input network supply vector solution feasible static flow network satisfies supply flow exists additional constraint yz yz yz minimum flows 
ahuja survey current state art studied problem 
algorithms thesis solve minimum cost flow problems repeatedly rely efficient minimum cost flow algorithms important subroutines 
concerned internals minimum cost flow algorithms treat black box 
mcf denote time single minimum cost flow computation time bounded nm log log nt goldberg tarjan nm log log log nt ahuja log log orlin 
note algorithm strongly polynomial 
results depend existence efficient minimum cost flow algorithms basic properties minimum cost flows 
rest section review properties minimum cost flows useful development dynamic flow algorithms rely wellknown results ford fulkerson 
theorem ford fulkerson static flow network residual network negative cost positive capacity cycles 
consider minimum cost static flow network nodes network length shortest path residual network infinity path exists 
note theorem implies function defined 
lemma ford fulkerson minimum cost static flow edge yz maxf gamma yz gamma yz gamma yz proof suppose gamma yz gamma 
flow saturate edge yz path shorter 
uniqueness 
dynamic flow algorithms depend flow subroutines compute unique minimum cost flow feasible combination network supply vector chapter define networks zero length cycles lemma implies minimum cost flow algorithm compute unique solution network 
lemma shows lose generality assuming networks zero length cycles perturb cost function lexicographically guarantee property 
lemma suppose static flow satisfies supply network unique minimum cost flow satisfying positive capacity cycle residual network positive cost 
proof suppose positive capacity cycle positive cost theorem implies minimum cost flow 
flow satisfying gamma consist zero cost residual cycles suppose unique minimum cost flow satisfying theorem implies positive capacity cycle non negative cost 
fact cycles positive cost produce minimum cost flow different augmenting zero cost residual cycle 
lemma network node set edge set edge cost function order edges fe assign edge vector cost 
feasible supply unique flow satisfies supply lexicographically minimum cost respect flow minimum cost respect furthermore network negative cost positive capacity cycles zero flow unique minimum cost circulation network 
proof clear flow lexicographically minimum cost respect minimum cost respect equally clear zero length cycles respect combined assumption negative cost positive capacity cycles uniqueness follows lemma 
monotonicity 
ford fulkerson originally solved minimum cost flow problem shortest augmenting path algorithm 
starting zero flow algorithm repeatedly finds shortest path current residual network augments flow path 
ford fulkerson showed augmentation current flow minimum cost shortest residual path lengths decrease 
correctness dynamic flow algorithms depends crucially slightly general lemma 
lemma ford fulkerson suppose minimum cost static flow nodes terminals network static flow augment shortest path residual network minimum cost static flow network node network 
lemma suppose minimum cost static flow nodes terminals network minimum cost static flow residual network minimum cost static flow network node network 
proof suppose contradiction minimum cost static flow false jgj minimum flows 
note lemma implies jgj jgj gamma value flow lemma holds unit value static flow augment shortest path residual network lemma conditions hold static flow contradicts assumption condition violated 
dynamic network flows aronson powell survey field dynamic network flows comprehensively 
results area relate tangentially thesis 
survey results closely related 
maximum dynamic flows 
maximum dynamic flow problem time horizon dynamic network single source single sink seek maximize value feasible dynamic flow time horizon ford fulkerson focused efforts dynamic flows formulating solving problem 
discovered surprisingly simple polynomial algorithm temporally repeated flows structured subclass dynamic flows 
refer temporally repeated flows standard chain decomposable flows simple type chain decomposable flows 
define terms discuss maximum dynamic flow problem fully chapter 
universally maximum dynamic flows 
shortly ford fulkerson solved maximum dynamic flow problem gale considered complicated variant 
earliest arrival flow problem seek single feasible dynamic flow specified time horizon maximizes total amount flow reaching sink time step including note clear flow generally exist 
fact gale proved flows exist conjectured prove algorithm compute flows 
gale wilkinson minieka independently confirmed conjecture 
minieka considered latest departure flow problem seek feasible dynamic flow time horizon maximizes total amount flow departing source time step subject constraint flow finished time 
minieka showed single flow earliest arrival latest departure schedule proved algorithm conjectured gale confirmed wilkinson solves earliest arrival latest departure flow problems simultaneously 
call flow universally maximum dynamic flow 
terminology conflicts traditional nomenclature earliest arrival flows equivalent universally maximum dynamic flows jointly sink optimal flows called earliest arrival latest departure flows 
review extend wilkinson minieka results chapter 
lexicographically maximum dynamic flows 
lexicographically maximum dynamic flow problem multi terminal extension maximum dynamic flow problem 
time horizon dynamic network ordered set terminals fs gamma seek feasible dynamic flow lexicographically maximizes amount flow leaving terminal order 
note terminal set includes sources sinks 
maximizing amount flow leaving terminal equivalent minimizing amount flow entering terminal 
previous research problem focused static network flows 
minieka studied lex max static flows goal solving universally maximum dynamic flow problem viewed special lex max flow problem time expanded network 
minieka discussed special case sources ranked higher sinks 
megiddo studied lex max static flows single source multi sink networks problem somewhat different 
assume source ranked assumed pre specified ordering sinks 
sought maximum flow source maximize minimum amount flow entering sink pair sinks intuitively solution problem maximally balanced flow 
gallo described parameterized maximum flow algorithm minieka megiddo problems special cases algorithm gallo solves problems host time required push max flow computation goldberg tarjan 
algorithms lex max static flows apply lex max dynamic flows exponentially large time expanded network 
chapter describe polynomial algorithm lex max dynamic flow problem 
quickest flows 
variant maximum dynamic flow problem minimize time horizon flow value maximizing flow value time horizon 
quickest flow problem flow amount seek minimum time feasible dynamic flow time horizon value burkard introduced problem 
minimum time known problem identical maximum dynamic flow problem complicated fact maximum dynamic flow time may value greater 
minimum time easily determined binary search yielding simple polynomial algorithm quickest flow problem 
burkard described complicated search algorithms better worst case bounds binary search strongly polynomial algorithms 
contrast devised continuous time version problem np complete 
quickest path problem seek quickest flow uses path 
quickest path problem solved polynomial time discovered chen chin rosen hung chen 
results improved 
burkard described compute quickest flow disjoint paths fixed evacuation problem multi source single sink version quickest flow problem 
dynamic network supply vector problem find feasible dynamic flow satisfies supply minimum time flow exists 
berlin studied problem means modeling emergency evacuation buildings 
jarvis proved different optimality criteria achieved simultaneously earliest arrival schedule maximizes total flow sink time step minimization time required evacuate network minimization average time flow reach sink 
showed prevent unnecessary movement building optimizing evacuation time 
described evacuate building divided prioritized zones solution evacuate highest priority zone quickly possible highest zone quickly possible choi studied evacuation flow dependent exit capacities see 
results rely time expanded networks involve pseudopolynomial algorithms efficient techniques considered results fall short general optimality 
hajek considered continuous time version evacuation problem special case transit times zero 
obtained polynomial algorithm reducing problem maximum flow computations 
solution sequence stationary dynamic flows flow edge moment time 
thesis consider multi source multi sink version quickest flow problem quickest transshipment problem 
dynamic network supply vector seek feasible dynamic flow minimum possible time horizon satisfies supply flow exists 
quickest transshipment problem closely related dynamic transshipment problem time horizon specified goal move appropriate amount flow network time possible 
describe polynomial algorithms dynamic transshipment problem chapter quickest transshipment problem chapter 
dynamic dynamic network flows 
flows dynamic networks change time generally assume dynamic networks change time edge capacities transit times constant 
results networks time varying edge characteristics 
minieka studied maximum dynamic flow problem edge may specified time added network time deleted network model prohibits holdover flow 
halpern generalized maximum dynamic flow problem allow time varying edge capacities prohibition holdover flow specified nodes specified time intervals 
minieka halpern time expanded networks proved stronger correctness finiteness algorithms 
cases advantage simple time expanded approach depends having small list network changes manage 
chapter give polynomial algorithm dynamic transshipment problem network built entirely mortal edges admit flow specified time interval solution uses holdover flow 
network scheduling 
unit size job network scheduling problem set computers network machine queue unit size jobs waiting execute job run locally go network remote execution 
link network characterized capacity transit time 
objective schedule job execution job finishes soon possible 
deng described polynomial algorithm special case problem links unit transit times capacities 
algorithm uses time expanded network obtained polynomial bound time horizon reducing problems exponentially jobs problems small polynomial number jobs 
stein considered special case problem ring networks unit transit times unit capacities obtained particularly efficient polynomial algorithm 
chapter reduce general unit size job network scheduling problem quickest transshipment problem obtain polynomial algorithm general problem 
general unit size job network scheduling problem special case field network scheduling 
complicated problems area closely related studied problems parallel machine scheduling 
difference network scheduling parallel machine scheduling parallel machine scheduling assumes instantaneous communication different machines network scheduling allows links machines restricted transit times capacities 
network scheduling problem generalization parallel machine scheduling problem see lawler 
scheduling challenging jobs unit size 
phillips studied problem scheduling jobs network identical machines connected uncapacitated links arbitrary transit times optimal schedule completes job soon possible 
gave polynomial algorithm compute schedule twice long optimal schedule proved ratio improved np 
network scheduling problems hardness results approximation algorithms computational results discussed ph thesis 
infinite horizon dynamic flows 
dynamic network flow problems surveyed far finite time horizons 
finite horizon optimization problems harder sense infinite horizon optimization problems 
long infinite horizon dynamic flow asymptotically optimal finite interval time steps suboptimal flow optimal 
optimal finite horizon dynamic flow sub optimal single time step 
finite horizon dynamic flow problems complicated time steps schedule intervening time described stationary dynamic flow 
case infinite horizon dynamic flow problem solution inconsequential stationary flows solve infinite horizon problems 
stationary flows structured computed efficient static network flow algorithms 
orlin formulated solved infinite horizon dynamic flow problems 
discussed maximum throughput dynamic flow problem 
throughput flow time total amount flow transit time flow started edge time reached edge 
orlin showed dynamic flow maximum throughput stationary stationary flow computed minimum cost static network flow problem 
showed result generalization ford fulkerson maximum dynamic flow algorithm 
generalization orlin considered minimum convex cost dynamic network flow problem 
problem edge convex cost function addition capacity transit time goal find feasible infinite horizon dynamic flow minimum average cost time step zero throughput throughput sense 
orlin proved problem solved stationary flow albeit fractional showed round fractional stationary solution periodic integral 
minimum cost dynamic flows 
finite horizon case adding edge cost function dynamic network quickly leads np hard problems 
woeginger proved hardness results minimum cost dynamic flow problems discussed greedy algorithm works special cases 
discussed efficient algorithms minimum cost dynamic flow problems flawed motivated important ideas chapter 
continuous time flows 
continuous time natural extension dynamic network flow model considered number researchers 
continuous time models know assume transit times zero result static network flow evolves continuously time 
hajek studied evacuation problem setting obtained polynomial algorithm reduces problem maximum static flow problems 
generally anderson considered minimum cost dynamic network flow problem obtained continuous zero transit time dynamic network version traditional network simplex algorithm 
generally studied continuous linear programs finite collections variables constraints replaced relations bounded measurable continuous functions called infinite linear programs 
described class continuous linear programs strong duality result holds described approximation improvement step algorithms problems 
survey touched continuous linear programming attempt exhaustive survey tangential nature topic thesis 
periodic networks 
time expanded networks dimensional subclass periodic networks 
dimensional periodic network natural expansion dynamic network dimensional vector transit times 
general study periodic networks particularly relevant dynamic network flows areas share common concern finding algorithms efficient respect small implicit representation large repetitive network 
orlin studied connectivity colorability properties infinite time expanded networks giving polynomial algorithms test properties underlying dynamic network steiglitz kosaraju sullivan cohen megiddo studied algorithms detect cycles periodic networks 
chapter chain decomposable flows dynamic network flow problems thesis equivalent easy static flow problems time expanded networks 
size network depends exponentially log time expanded network takes exponentially space underlying dynamic network time horizon large 
time expanded networks generally lead efficient algorithms dynamic network flow problems 
ford fulkerson introduced temporally repeated flows represent repetitive dynamic flows efficiently 
introduce chain decomposable flows allow efficient representation considerably larger class dynamic flows 
refer temporally repeated flows standard chain decomposable flows simple subclass chain decomposable flows 
algorithms thesis compute chain decomposable flows 
standard chain decomposable flows chain flow fl hv static flow positive value path cycle network 
denote length chain flow fl equal total length path includes node fl length node node path includes edge yz say fl uses yz 
time horizon fl chain flow fl induces dynamic flow sending units flow path time step time zero till time gamma fl 
units flow reach time chain flow proper starts ends terminal set gamma ffl fl set proper chain flows 
say gamma chain decomposition static flow fl gamma standard chain decomposition chain flows gamma edges direction 
gamma standard chain decomposition chain flow gamma longer time horizon feasible gamma induces feasible dynamic flow obtained summing dynamic flows induced chain flow gamma 
dynamic flow computed manner called standard chain decomposable flow denote gamma absence time horizon gamma induces infinite horizon standard chain decomposable flow gamma repeating chain flow endlessly 
denote gamma yz subset chain flows gamma directed edge yz 
say chain flow fl gamma touches edge yz fl gamma yz gamma zy fl induced flow fflg covers yz time fflg yz 
infinite horizon case note fflg covers yz time fflg covers yz times 
example consider network time horizon 
shows maximum static flow network decomposed chain flows 
figures show dynamic flow induced chain flows time expanded network sequence time step snapshots 
maximum dynamic flows standard chain decomposable flows simple class dynamic flows 
interesting dynamic flow problems necessarily solved standard flows 
ford fulkerson showed standard time steps standard chain decomposable flow chain decomposable flows suffice solve maximum dynamic flow problem 
review results section 
consider standard chain decomposition gamma static flow ford fulkerson observed value gamma depends independent choice standard chain decomposition gamma 
lemma ford fulkerson suppose gamma standard chain decomposition flow chain flow gamma longer gamma jf gamma yz yz yz proof chain flow fl gamma contributes jflj units flow time till time gamma fl total dynamic flow value fl gamma gamma fl jflj easily reduces desired formula 
lemma suggests algorithm find standard chain decomposable flow maximum value 
dynamic network source sink time horizon add artificial return edge ts network infinite capacity length gamma 
minimum cost static circulation network 
notice maximizes formula lemma standard chain decomposition induces maximum standard chain decomposable flow 
generalize construction multi terminal networks follows dynamic network source set sink set gamma time horizon add network connected source infinite capacity zero transit time edge connected sink infinite capacity edge transit time gamma 
call result extended network denote discussing extended network implicitly include artificial edges edge set wish exclude artificial edges notation 
just proved corollary lemma corollary ford fulkerson finding maximum standard flow dynamic network time horizon reduces finding minimum cost static circulation extended network theorem shows standard chain decomposable flows sufficient solve general maximum dynamic flow problem 
result crowns ford fulkerson dynamic flows theorem ford fulkerson dynamic network time horizon maximum standard chain decomposable flow maximum dynamic flow 
proof network time horizon minimum cost circulation extended network gamma standard chain decomposition assume non zero clear maximum dynamic flow zero theorem easy consequence theorem 
consider cut fy infinite time expanded network 
easy see separates source sink gamma feasible dynamic flow time horizon show gamma saturates cut deriving capacity comparing lemma 
proves theorem 
suppose edge crosses 
direction considered opposite edge 
definition implies non holdover edge capacity yz reverse holdover edge zero capacity 
holdover edge yz crosses gamma yz total capacity cut yz maxf gamma yz gamma gu yz applying lemma edges yz zy formula reduces yz gamma yz gamma yz yz yz note 
second equality depends assumption non zero 
facts plus flow conservation imply capacity cut jf gamma yz yz yz lemma completes theorem 
chain decomposable flows ford fulkerson standard chain decomposable flows reduce maximum dynamic flow problem network simple static flow problem extended network hope similar results dynamic flow problems unfortunately standard chain decomposable flows 
just problem maximum dynamic flow fails yield ford fulkerson efficient technique 
research area resorts time expanded networks 
notable exceptions rule infinite horizon dynamic flow problems orlin zero transit time evacuation problem hajek stationary flows quickest flow problem burkard uses standard chain decomposable flows 
introduce chain decomposable flows 
chain decomposable flows extend foundations standard chain decomposable flows slightly resulting extension supports considerably range solve interesting dynamic flow problems previously handled time expanded networks 
extension relies generalized notion chain decomposition 
recall chain flow standard chain decomposition flow edges direction 
chain flows non standard chain decomposition may directed flows edges 
chain decomposable flows induced non standard chain decompositions exactly manner standard chain decomposable flows induced standard chain decompositions generalization introduce complications 
time travel 
chain flow non standard chain decomposition may residual edge negative transit time 
luckily network flow simpler things imagine going back time simplicity allows intuition explain time travel works 
consider edge yz positive transit time yz symmetry implies edge zy negative transit time gamma yz unit flow sent time reaches time yz hand negative unit flow sent time yz reaches time 
different ways describing exactly event 
cases loses unit flow time gains unit flow time yz residual capacity edge yz behaves way perspective 
suppose unit flow leaves time travels back time reaches time gamma yz backward time travel equivalent sending negative unit flow time gamma yz reaches time 
figures show equivalence positive flow moving backward time negative flow moving forward time 
time steps time steps positive flow negative flow chain flows induced dynamic flows time steps non standard chain decomposable flow example consider network time horizon 
shows non standard chain decomposition maximum static flow network 
dynamic flows induced separately chain flows depicted figures 
added non standard chain decomposition induces dynamic flow figures 
feasibility 
feasibility chain decomposable flows depends crucially timing chain flow brings dynamic flow edge 
consider previous example depicted fl denote solid edged chain flow fl dashed chain flow 
chain flow fl uses opposite edge zy cancel flow edge yz induced fl transit times network different fl reached fl flow induced fl start cancelling yz fl provided flow cancel 
resulting dynamic flow infeasible fl fl feasible 
contrast trivial feasibility proofs standard chain decomposable flows argue carefully show chain decomposable flows violate capacity constraints 
finite vs infinite horizons 
introduced standard chain decomposable flows distinguished finite horizon flows form gamma infinite horizon flows form gamma context general chain decomposable flows distinction clear appears 
suppose gamma chain decomposition flow extended network fl longest chain flow gamma 
notice time fl static flow exactly characterizes dynamic flow gamma gamma yz yz suppose zero flow 
gamma standard chain decomposition dynamic flow gamma trivially zero 
allow non standard chain decompositions gamma may non zero 
gamma non zero fact zero means gamma zero time fl remain zero forever 
words gamma may finite horizon dynamic flow 
non standard chain decompositions zero flow extended network induce dynamic flows 
chain flow starts ends 
general framework chain decomposable flows problem solved standard chain decomposable flows finite horizon flows gamma solved method 
example suppose network consists single edge st unit length unit capacity 
consider extended network 
depicts network different chain flows 
chain flow fl pushes unit flow cycle st chain flow fl pushes unit flow opposite cycle ts 
taken ffl fl chain decomposition zero flow ffl fl finite horizon dynamic flow time horizon notice ffl fl equivalent standard chain decomposable flow fflg fl unit value chain flow path st 
conclude chapter deriving edge throughput dynamic flow gamma apply result corollary obtain value flow time steps nodes time steps nodes time steps nodes chain flows induced dynamic flows zero flow chain decomposition terminal network show equivalence dynamic flow value static flow cost 
lemma suppose gamma chain decomposition zero flow extended network edge yz total throughput gamma edge yz gamma yz fl gamma zy fl jflj gamma fl gamma yz fl jflj proof consider time late chain flow gamma touches edge yz covers yz time 
throughput time edge yz equal amount flow gamma yz reaches time minus amount flow gamma zy reaches time gamma yz fl gamma yz gamma fl jflj gamma fl gamma zy gamma fl jflj fl gamma yz jflj gamma fl gamma zy jflj gamma fl gamma yz fl jflj fl gamma zy fl jflj gamma chain decomposition zero flow term cancels lemma follows 
corollary suppose gamma chain decomposition zero flow extended network source total value gamma gamma fl gamma fl jflj yz yz fl gamma fl yz sink gamma total value gamma gamma fl gamma jflj gamma fl gamma fl jflj gamma yz yz fl gamma fl yz case single source single sink network corollary equivalent lemma 
notice corollary includes artificial edges extended network lemma adds cost explicitly 
chapter universally maximum dynamic flows defined universally maximum dynamic flows chapter 
wilkinson minieka described virtually identical algorithms compute universally maximum dynamic flows 
algorithms pseudopolynomial uses form chain decomposable flows 
wilkinson consider chain decomposable flows prove standard chain decomposable flows insufficient solve universally maximum dynamic flow problem 
section solve problem general chain decomposable flows algorithm little restatement wilkinson minieka results terms chain decomposable flows 
perspective algorithm leads new results area 
section describe polynomial algorithm compute timestep snapshot universally maximum dynamic flow 
computing complete dynamic flow algorithm computes dynamic flow value particular edge yz particular time step yz 
final section chapter consider approximating universally maximum dynamic flow 
describe simple novel scaling algorithm approximates universally gamma zero flow shortest path minimum residual capacity augment gamma gamma fhv ig return gamma universally maximum dynamic flow algorithm maximum dynamic flow factor ffl ffl 
algorithm runs polynomial time respect ffl gamma input network 
exact algorithms wilkinson minieka solved universally maximum dynamic flow problem approach ford fulkerson shortest augmenting path algorithm 
essentially algorithm express solution chain decomposable flow 
algorithm shown 
consider dynamic network time horizon suppose static minimum cost maximum flow computed shortest augmenting paths 
fl fl fl sequence augmentations gamma ffl fl fl gamma chain decomposition lemma implies fl fl gamma set chain flows fl longer algorithm computes gamma theorems show gamma universally maximum dynamic flow 
theorem wilkinson minieka gamma feasible dynamic flow 
proof flow conservation constraints trivial consider capacity constraints 
gamma zero trivially obeys capacity constraints 
suppose gamma gamma feasible show gamma feasible 
note gamma gamma gamma ffl consider capacity constraint edge yz time 
ffl yz induction hypothesis implies constraint violated 
ffl yz means gamma gamma gamma 
lemma implies distances gamma gamma increase monotonically fl touches yz fl covers yz time 
means gamma gamma yz gamma yz ffl feasible dynamic flow residual network gamma capacity constraint violated 
theorem implies earliest arrival flow symmetric departure arrival schedules latest departure flow universally maximum dynamic flow 
theorem minieka consider dynamic network time horizon earliest arrival flow sends units flow sink time step latest departure flow sends units flow source time step gamma 
proof time earliest arrival flow maximizes total amount dynamic flow reaching sink time 
similarly latest departure flow maximizes total amount dynamic flow leaving source time gamma till time maximum dynamic flows time steps value 
cumulative values equal time bound amounts arriving sink individual time step departing source time step gamma identical 
theorem wilkinson minieka gamma universally maximum dynamic flow 
proof prove gamma earliest arrival flow 
time gamma ffl gamma fl lemma implies sum chain flows gamma minimum cost flow fact converted minimum cost circulation adding return edge ts network length gamma 
corollary theorem gamma induces maximum dynamic flow time horizon 
note gamma gamma gamma effect flow value time 
prove gamma latest departure flow universally maximum dynamic flow 
consider dynamic flow induced single chain flow fl gamma arrival departure flow obey simple symmetry jfl units flow arriving sink time jfl units flow departing source time gamma 
summing chain flows gamma observe departure schedule gamma symmetric arrival schedule theorem implies gamma latest departure flow 
snapshot algorithm 
zadeh constructed bad networks shortest augmenting path algorithm proving universally maximum dynamic flow algorithm generate exponential number chain flows 
regardless compute universally maximum dynamic flows context time expanded networks chain decomposable flows polynomial algorithm 
considering chain flows networks derive polynomial algorithm compute universally maximum dynamic flow value specified edge yz specified time 
algorithm 
snapshot algorithm relies insight edge yz time longer need know chain flow gamma induces universally maximum dynamic flow need know sum chain flows gamma cover edge yz time 
sum chain flows minimum cost static flow compute efficiently shown theorem zero flow gamma return minimum cost maximum flow gamma return yz jf gamma minimum cost value flow gamma jf jf minimum cost value flow return yz snapshot universally maximum flow edge yz time theorem universally maximum dynamic flow network time horizon edge yz time step compute yz log nu mcf time 
proof theorem lemma consider unique universally maximum dynamic flow gamma gamma ffl gamma gamma desired flow value yz equal fl gamma fl yz lemma implies distances increase monotonically gamma chain decomposition minimum cost flow 
note yz depends minimum cost flow chain decomposition 
algorithm computes minimum cost flow equal sum chain flows gamma 
lower bound maintains property gamma contains shortest augmentation added value flow lemma means gamma contains chain flow computing value minimum cost flow shortest augmenting paths 
upper bound maintains property augmentation value minimum cost flow gamma 
algorithm terminates maximum flow value point value minimum cost flow satisfies yz yz running time algorithm easy bound 
gap gamma initially nu iteration cuts gap half dominated minimum cost flow computation 
approximation algorithm section develop efficient capacity scaling algorithm approximates universally maximum dynamic flow factor ffl ffl 
algorithm unusual feature scaling upwards 
traditional scaling gamma delta zero flow path length oe oe delta ffl path length shortest path minimum residual capacity augment gamma gamma fhv ig oe oe delta delta yz yz yz gamma yz mod delta return gamma universally maximum flow ffl approximation algorithm algorithms initially capacities rounded big scaling factor idea large capacity edges important small capacity edges 
dynamic flow small capacity edge short carry flow large capacity edge long 
algorithm idea short chain flows important long ones 
algorithm shown 
essence computes minimum cost flow shortest augmenting paths repeatedly rounded network 
chain decomposition defined sequence augmentations induce dynamic flow 
rounding guarantees number augmentations bounded polynomial log ffl gamma algorithm starts augmenting exact shortest paths 
depending ffl algorithm periodically rounds edge capacities increasing scaling factor delta 
rounding implies residual capacities integer multiples delta subsequent augmentations carry delta units flow static network 
notice edge yz carries delta units flow rounding residual capacity zy results negative capacity edge zy lower bound flow edge yz 
corresponds irreversible flow edge yz 
need additional notation order analyze algorithm 
say scaling phases algorithm numbered index phases delta inner loop phase gamma gamma gamma denote set chain flows phase denote length longest chain flow gamma denote static flow phase denote rounded capacity function phase theorem gamma feasible dynamic flow 
proof induction number scaling phases 
scaling phase identical exact algorithm wilkinson minieka gamma induces feasible dynamic flow theorem 
suppose gamma induces feasible dynamic flow scaling phase starts rounded capacity theorem know gamma gamma gamma induces feasible dynamic flow residual network need show gamma induces feasible dynamic flow original network feasibility rests primarily fact rounding process increase capacity edge 
consequence fact gamma gamma gamma induces feasible dynamic flow residual network consequence fact shortest residual path lengths decrease scaling phases node monotonicity implies chain flow gamma gamma gamma covers edge yz time chain flow gamma touches yz cover time gamma yz yz combined consequence noted proves theorem 
capacity scaling algorithm reduce edge capacities scaling phases maximum dynamic flow value rounded network may original maximum dynamic flow value 
analyze lost dynamic flow value 
notational simplicity observation feasible gamma time value gamma equal gamma consider lost dynamic flow value due single rounding 
denote chain decomposition inducing earliest arrival flow residual network denote chain decomposition inducing earliest arrival flow rounded residual network time loss dynamic flow value due rounding phase gamma lemma bounds loss ffl times value dynamic flow induced chain flows added phase lemma gamma fflj gamma gamma gamma gamma proof static flow equal sum chain flows construct repeatedly finding edge violates rounded capacity constraint subtracting value chain flow uses edge 
rounding phase reduces capacity edge process subtracts chain flows furthermore canceled chain flow length phase path length residual network denote standard chain decomposition resulting flow gamma gamma note feasible earliest arrival flow problem defined rounded residual network feasible optimal problem gamma gamma implies chain flows gamma gamma gamma gamma total value ffl 
chain flows length obtain gamma gamma gamma gamma ffl gamma theorem suppose denote maximum dynamic flow value time 
algorithm computes dynamic flow gamma time gamma log log ffl gamma proof claimed running time follows easily 
log scaling phases 
capacity rounding guarantees ffl augmentations phase requires non negative edge length shortest path computation running time log see fredman tarjan 
lemma prove approximate optimality 
theorem implies phase begins compute earliest arrival flow rounded residual network phase means gamma gamma gamma similarly gamma get chain equalities gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma phase residual network contains paths length follows 
applying lemma observing gamma gamma gamma obtain gamma gamma fflj gamma corollary gamma ffl approximate universally maximum dynamic flow 
proof theorem shows gamma ffl approximate earliest arrival flow 
approximate optimality departure schedule follows symmetry optimal arrival departure schedules see theorem fact unit flow gamma arriving sink time corresponding unit flow departing source time gamma see proof theorem 
chapter lexicographically maximum dynamic flows lexicographically maximum dynamic flow problem dynamic network time horizon ordering terminals fs gamma seek feasible dynamic flow lexicographically maximizes amount flow leaving terminal order 
note terminal set includes sources sinks 
maximizing amount flow leaving terminal equivalent minimizing amount flow entering terminal 
denote high priority subset terminals fs gamma 
denote instance lex max dynamic flow problem triplet chain nested high priority subsets fs describe polynomial algorithm compute lex max dynamic flows 
lex max dynamic flow algorithm important subroutine algorithms solving dynamic transshipment quickest transshipment problems describe subsequent chapters 
applications lex max flows lex max flows especially useful interesting important property repeat minieka megiddo 
consider dynamic network time horizon subset terminals denote maximum amount flow sources send jointly sinks time regard needs terminals 
notice compute single source single sink maximum dynamic flow value supersource connected sources connected sinks outside 
minieka megiddo observed fundamental property multi terminal flows lemma minieka megiddo suppose dynamic flow solves lex max dynamic flow problem 
jf high priority subset words lexicographically maximum flow static dynamic simultaneously sends flow possible high priority subset terminals network ordering network terminals 
interest lex max dynamic flow problem stems primarily applications dynamic transshipment problem 
dynamic transshipment problem dynamic network time horizon supply vector seek feasible dynamic flow time horizon satisfies supply flow exists 
denote instance dynamic transshipment problem triplet 
chapter show reduce dynamic transshipment problem lex max dynamic flow problem 
section describe simpler application lex max dynamic flows 
dynamic network time horizon set supply vectors dynamic transshipment problem feasible 
optimizing linear objective function set reduces solving lex max dynamic flow problem theorem dynamic network time horizon set supply vectors dynamic transshipment problem feasible 
cost vector find lex max dynamic flow computation 
proof suppose gamma case terminals time required sort terminals dominated time required compute lex max dynamic flow 
supply vector observe cost gamma gamma gamma gamma compute lex max dynamic flow jf terminal lemma maximal high priority subset theorem follows facts gamma revisit theorem chapter describing terms submodular functions extended 
lex max dynamic flow algorithm minieka described intuitive algorithm computing lex max static flow network start computing maximum static flow jointly gamma gamma residual network flow compute maximum flow jointly gamma gamma continue fashion final iteration sends flow residual network previous iterations 
iteration algorithm saturates cut ultimately leads lexicographically maximal flow 
algorithm dynamic version problem similar structure 
iterations maximum flow computation evolving residual network iteration computes maximum dynamic flow maximum static flow 
induce maximum dynamic flows standard chain decompositions minimum cost static flows technique ford fulkerson chapter 
zero flow empty chain decomposition gamma lex max dynamic flow algorithm computes successive layers minimum cost static flows residual networks previous layers 
layer yields standard chain decomposition added set gamma 
algorithm gamma lexicographically maximum dynamic flow 
lex max dynamic flow algorithm formally 
starts adding input network connecting source infinite capacity zero transit time artificial edge denote resulting network zero flow network gamma empty set 
algorithm consists iterations indexed descending fashion 
iteration gamma consider terminal source delete edge network create compute minimum cost maximum flow residual network flow network sink add infinite capacity edge transit time gamma network create network compute minimum cost circulation residual network flow network complete iteration source sink add obtain flow compute standard chain decomposition delta flow add delta gamma get chain decomposition gamma theorem lex max dynamic flow problem lex max dynamic flow computed mcf time 
proof algorithm consists iterations dominated minimum cost flow computation 
correctness algorithm proved section 
zero flow gamma gamma delete edge minimum cost maximum flow add edge gamma minimum cost circulation delta standard chain decomposition gamma gamma delta return gamma lex max dynamic flow algorithm proof correctness section theorems proving gamma feasible dynamic flow time horizon maximizes amount flow leaving subset prove preliminary lemmas 
lemma iteration static flow minimum cost circulation network proof induction number iterations 
initially zero flow minimum cost circulation network input network negative cost residual cycles suppose lemma true iteration source 
lemma implies minimum cost flow 
need worry disturbing balance flow nodes artificial edges connecting sink nodes fact sources input network incoming capacity guarantee maximum flow exactly equal value flow edge deleting edge adding maximum flow leaves balanced zero net flow 
remaining case trivial 
sink lemma true iteration lemma implies minimum cost circulation node iteration denote length shortest path residual network flow network infinity path exists 
note lemma theorem imply negative cost cycles residual network defined 
lemma node iteration 
proof consider iteration effect shortest residual path lengths 
suppose terminal source 
shortest path lengths decrease deleting edge obviously decrease adding minimum cost flow lemma 
sink iteration adds edge network computes minimum cost circulation resulting residual network 
adding edge decrease shortest residual path lengths new shortest paths new edge 
concerned paths rest network new edge reduce path lengths creating negative cost residual cycle node 
adding minimum cost circulation saturates negative cost residual cycles decrease shortest residual path lengths theorem lemma respectively 
lemma suppose fl delta gamma fl cover yz time 
proof definition residual network contains path length 
claim chain flows delta gamma likewise constrained 
gamma source path chain flow delta gamma path gamma sink edge gamma chain flow gamma edge chain flow effect chain flow covers edge 
lemma suppose fl delta fl touches yz fl covers yz time 
proof suppose contradiction fl touches yz cover time 
fl gives residual path cost gammap 
definition means network cycle contradicting lemma theorem 
ready main theorems prove correctness lex max dynamic flow algorithm 
theorem gamma feasible dynamic flow 
proof consider capacity constraints proving feasibility induction number iterations 
gamma zero trivially obeys capacity constraints 
suppose gamma feasible show gamma gamma feasible 
note gamma gamma gamma delta gamma 
consider capacity constraint edge yz time 
delta gamma yz induction hypothesis implies constraint violated 
delta gamma yz lemma implies consequently lemmas imply gamma yz yz delta gamma feasible dynamic flow gamma capacity constraint violated 
consider flow conservation 
constraints trivial source nodes chain decomposition gamma includes chains flows terminating sources 
validity capacity constraints assumption source incoming capacity guarantee source net incoming flow 
theorem gamma time horizon proof prove gamma finite horizon flow prove theorem 
gamma finite time horizon 
edge yz yz longest length chain flow gamma touching yz zero chain flow gamma touches yz clearly value finite 
final network negative cost cycles lemmas imply final static flow zero gamma yz time yz dynamic flow gamma finished max yz ft yz time steps 
gamma time horizon consider sink gamma recall artificial edge transit time gamma 
ys edge input network chain flow ys forward ends edge part minimum cost circulation reach sink time chain flow ys backward starts edge reaches sink time 
flow entering sink network time assume contradiction flow left network time edges positive capacity non negative length flow reach sink time stay network forever 
contradicts fact gamma finite time horizon 
theorem gamma lexicographically maximum dynamic flow 
proof index prove amount dynamic flow leaving set terminals fs gamma maximum 
proof relies infinite time expanded network 
construct cut network separates source set fs fs gamma sink set fs ns fs gamma ns show gamma saturates cut sends flow possible ns time horizon cut defined fy fs gamma easy see contains source set artificial edges network guarantee sources harder see contains element sink set considering iteration terminal gamma iteration adds infinite capacity artificial edge transit time gamma subsequent minimum cost circulation establishes iteration saturates residual path 
facts lemma imply terminals terminal sink set fs fs gamma contained show gamma saturates cut consider edge crosses 
direction considered opposite edge 
cases applies distinguish non holdover edges holdover edges 
gamma recall assumption sink gamma outgoing capacity input network implies capacity edge yz zero 
consider holdover edge crosses definition reverse holdover edge gamma 
capacity reverse holdover edge zero 
suppose holdover edge 
yz yz crosses gamma yz total capacity cut yz maxf gamma yz gamma gu yz lemma applied edges yz zy formula reduces yz gamma yz gamma yz yz yz flow conservation implies sum cancels terminal nodes 
notice source sink gamma ys 
simplify remaining terms considering artificial edges network deriving capacity cut gamma yz yz yz value gamma equal net flow derived follows observe sum chain flows corollary implies total cost equal dynamic flow value dynamic flow conservation value exactly opposite net flow capacity cut equal value gamma 
note maximum dynamic flow problem just lexicographically maximum dynamic flow problem network source sink theorem essentially terminal special case theorem uses standard chain decomposable flow gamma chain decomposable flow gamma 
chapter dynamic transshipment problem dynamic transshipment problem dynamic network time horizon supply vector seek feasible dynamic flow time horizon satisfies supply flow exists 
denote instance dynamic transshipment problem triplet 
chapter describe polynomial algorithm solve integral dynamic transshipment problem 
algorithm takes input integral instance dynamic transshipment problem output finds integral solution exists 
integral solution exists fractional solution 
algorithm reduces dynamic transshipment problem equivalent lex max dynamic flow problem slightly modified network 
described polynomial lex max dynamic flow algorithm chapter 
discussing main algorithm describe determine feasibility dynamic transshipment problem polynomial time 
test core subroutine main dynamic transshipment algorithm 
dynamic transshipment feasibility ford fulkerson proved best known result network flow theory maximum value flow equal minimum capacity cut network famous theorem implies multi terminal corollary exists feasible flow satisfying supply vector subset terminals maximum flow jointly value 
derived similar results dynamic network flows 
consider dynamic network time horizon recall maximum value function defined chapter terminal subsets dynamic transshipment problem feasible clearly terminal subset observed condition equivalent ford fulkerson cut condition feasibility applied time expanded network 
condition necessary sufficient 
known result ford fulkerson single commodity static network flow problems solved integral flows input data integral 
fact applies equally dynamic transshipment problem reason equivalent static network flow problem 
theorem dynamic transshipment problem feasible subset furthermore problem feasible input data integral integral solution 
violated sets 
dynamic transshipment problem call subset terminals violated 
theorem implies test feasibility dynamic transshipment problem simply searching violated set terminals 
dynamic transshipment algorithm requires subroutine determines feasibility dynamic transshipment problem finds violated set problem infeasible 
simple exhaustive search testing possible subsets yields result lemma dynamic transshipment problem violated set feasibility proven mcf time 
proof subsets particular subset terminals computing reduces directly single source single sink maximum dynamic flow problem corollary theorem imply determine mcf time 
remainder section derive theoretically efficient alternatives brute force algorithm 
geometric algorithms feasibility polytope induced dynamic transshipment problem discuss polytope subsection 
unfortunately algorithms complicated simple approach just described 
networks terminals exhaustive search preferable currently known polynomial techniques feasibility testing 
feasibility polytope consider dynamic network time horizon recall chapter denotes set feasible supply vectors network time horizon 
testing feasibility supply vector equivalent determining subsection prove polytope bounded set form fv av bg 
consider vector space spanned 
origin contained equivalent affine hull 
notice contained gamma dimensional subspace fv require total supply terminals zero 
subspace spanned determined generalization observation 
suppose terminal set partitioned flow possibly go network time horizon supply vector feasible 
seek partition subsets possible 
construct partition shortest path computations network construction relies bipartite graph sources node set sinks gamma node set 
source sink pair gamma connect edge shortest path longer subsets connected components bipartite graph 
say subset trivial consists terminal supply terminal trivial subset zero 
denote subspace fv hg 
prove lemma spans space 
prove contained ball centered close origin contains smaller ball space convexity properties determine efficiently rest subsection depends definitions 
spanning forest bipartite graph just described theta gamma node edge incidence matrix ij gamma edge leaves enters node ij times sum columns norm denote closed ball fx kx gamma xk rg 
lemma full dimensional polyhedron subspace proof clear gamma dimensional subspace contained space 
claim full dimensional polyhedron subspace 
columns linearly independent forest notice column vector implies full dimensional theorem implies polyhedron necessarily bounded set form fv av bg 
rows characteristic vectors terminal subsets entries values subsets 
additional constraint 
lemma polytope 
contained knu 
proof terminal send receive nu units flow time step time zero till time implies nu 
gamma edges kxk implies nu 
lemma follows fact kxk lemma contains 
proof kxk kxk prove lemma boxes 
source non trivial subset edge leaving 
similarly gamma sink non trivial subset source sink gamma edges 

lemma follows fact source sink expressed convex combination columns zero vector 
polynomial algorithm feasibility testing dynamic transshipment problem want determine lies feasibility polytope 
grotschel proved polynomial algorithm test membership convex set polynomial algorithm optimize linear objective function set 
proved theorems polynomial algorithm optimize convex set arrive result theorem dynamic transshipment problem violated set feasibility proven polynomial time 
applications testing membership convex set considered easier problem optimizing set 
usual application construct optimization algorithm oracle test membership 
opposite situation 
lex max dynamic flow algorithm gives efficient combinatorial algorithm optimize efficient combinatorial algorithm test membership theorem implies necessarily combinatorial efficient algorithm exist 
ellipsoid method described derive polynomial algorithm testing feasibility obtain efficient algorithm relying algorithm vaidya 
vaidya states result efficient optimization algorithm oracle test membership 
building membership algorithm optimization oracle apply vaidya algorithm polar defined fw pg 
characterized known fact lemma suppose closed convex set containing origin 

lemma implies testing membership reduces linear optimization problem convex set value dynamic transshipment problem feasible 
order solve optimization problem vaidya algorithm needs know vector space spanned radii balls contained centered origin contains needs oracle test membership membership oracle determine membership set provide separating hyperplane point set 
full dimensional polytope gamma dimensional subspace polar contains dimensional subspace fw zg full dimensional convex set containing non trivial subspace 
unfortunately bounded 
order obtain bounded convex set consider affine variant polar restricted subspace zx fw gamma pg run vaidya algorithm set zx result depends technical lemmas prove subsection lemma zx gamma 
lemma zx contains knu gamma 
lemma zx contained 
lemma suppose lex max dynamic flow algorithm determines zx mcf time 
zx computes vector maxfc zx theorem dynamic transshipment problem violated set feasibility proven mcf log nut time 
proof assume easy check find violated set 
vaidya algorithm solve maxf gamma zx algorithm works full dimensional convex set contained ball radius centered origin containing ball radius gammal algorithm takes kl iterations dimensional set 
iteration inverts theta matrix calls membership oracle 
lemmas imply log nut 
lemma lex max dynamic flow algorithm provides membership oracle notice mcf running time dominates time required invert theta matrix 
total running time algorithm mcf log nut 
maxf gamma zx lemma implies dynamic transshipment problem feasible 
vaidya algorithm returns zx gamma 
claim ff fs ffg violated set ff 
assume notational simplicity gamma defined chapter 
inner product gamma gamma gamma gamma consider maximizing theorem lex max dynamic flow problem maximizer objective function value gamma gamma gamma gamma zx assume formulas imply notice time required run vaidya algorithm dominates time compute time takes find violated set 
conclude subsection proving technical lemmas 
proof lemma suppose lemma implies definition zx implies gamma zx prove converse consider lemma applied polytope fx gamma pg traditional polar lemma trivial gamma gamma 
lemma follows observation zx lemmas help prove lemmas lemma zx 
proof suppose 
wellknown schwarz inequality gamma wj kx gamma xk kwk assumptions imply value zx lemma zx 
proof suppose zx suppose kwk trivial 
consider rw kwk kx gamma xk follows gamma 
gamma positive scalar multiple gamma kx gamma xk kwk kwk proof lemmas lemmas imply zx contains knu gamma 
lemmas imply zx contained 
proof lemma theorem compute pg lex max dynamic flow computation 
lemma implies zx maximum value zx lex max dynamic flow computation returns supply vector gamma 
definition zx means maxf gamma zx 
gamma theorem implies procedure takes mcf time 
strongly polynomial algorithm strongly polynomial algorithm simple corollary theorem results megiddo grotschel theorem megiddo pair subsets dynamic network time horizon function submodular 
theorem grotschel suppose submodular function 
subset ae minimizing strongly polynomial time 
corollary dynamic transshipment problem violated set feasibility proven strongly polynomial time 
proof consider submodular function gamma 
violated set set negative 
violated set feasibility proven minimizing submodular function extended 
submodular function induces polyhedron ep fv sg 
polyhedron called extended special structure ideal optimizing linear objective functions discovered edmonds 
vector order elements gamma edmonds proved vector maximizing vectors ep greedy algorithm ep ep gamma gamma ep gamma gamma dynamic transshipment problem theorems imply feasibility polytope facet extended ep specifically fv sg 
lex max dynamic flow algorithm greedy algorithm 
theorem proves lex max dynamic flow algorithm optimizes linear objective functions follows fact facet extended 
dynamic transshipment algorithm section describe polynomial algorithm dynamic transshipment problem section prove running time correctness algorithm 
algorithm relies feasibility testing black box feas denote time required test feasibility dynamic transshipment problem 
overview algorithm algorithm reduces dynamic transshipment problem equivalent lex max dynamic flow problem slightly complicated network described polynomial lex max dynamic flow algorithm chapter 
tight sets 
dynamic transshipment problem call subset terminals tight 
tight sets characterize special type dynamic transshipment problem reduces directly lex max dynamic flow theorem suppose chain nested tight subsets terminals dynamic transshipment problem jcj 
dynamic transshipment problem solved single lex max dynamic flow proof jcj relabel set terminals fs gamma tight set lemma definition tight sets imply solution lex max dynamic flow problem satisfies jf yields solution dynamic transshipment problem 
dynamic transshipment problems satisfy requirements theorem reduce directly lex max dynamic flow 
describe modify dynamic transshipment problem satisfy requirements theorem 
algorithm attaches network new set terminals creates new supply vector initially contains unit capacity unit length edge uncapacitated zero length edge non trivial tight set transforming source source connected edge infinite capacity zero transit time likewise contains sink sink connected edge infinite capacity zero transit time 
define obvious manner clearly equivalent 
example depicts dynamic transshipment problem time horizon 
non trivial tight set 
trivial tight sets 
shows corresponding problem 
algorithm maintains chain elements tight subsets ordered inclusion 
goal algorithm extend complete chain size js 
theorem implies complete chain reduces associated dynamic transshipment problem single lex max dynamic flow problem network 
body algorithm loop 
iteration loop adds new terminals new terminal attached terminal original network edge described finite capacities nonnegative transit times 
capacities transit times restrict ability new terminals send receive flow algorithm assigns supply new terminal restrictions adjusts supply corresponding original terminal total supply new terminals associated maintains invariant solution yields solution 
measure progress algorithm formula jcj gamma js initially jcj gamma js gamma theorem done jcj gamma js need increase value expression 
subsection describe iteration algorithm increases jcj gamma js maintains feasibility 
dynamic transshipment problem reduced equivalent lex max dynamic flow problem gamma iterations 
network inversion 
straightforward implementation algorithm iteration add new sources new sinks network 
treatment sources sinks entirely symmetric describing cases proofs somewhat tedious 
simplify presentation symmetry precise network inversion describe treatment sources algorithm 
dynamic network inverted network gamma consists exactly nodes edges terminals capacities transit times edges reversed gamma yz zy gamma yz zy family subsets universe denote inverted family gamma fs cg 
symmetry sources sinks captured lemma minieka lemma minieka suppose flow solves lex max dynamic flow problem 
inverted dynamic flow gamma yz gammaf yz gamma solves inverted lex max dynamic flow problem gamma gamma 
iteration algorithm iteration begins modified dynamic transshipment problem 
network contains terminal set addition iteration starts chain tight subsets ordered inclusion 
goal iteration increase jcj gamma js 
step goal add sources done arbitrarily sources take algorithm farther goal new sources connected network edges carefully computed capacities transit times 
assigning supplies new sources capacities transit times adjusting supplies sources appropriately algorithm creates modified equivalent problem new tight sets jcj gamma js increases 
ae adjacent sets jr qj 
adjacent mean ae ae 
exist jcj gamma js done 
algorithm maintains invariant terminal terminals source lemma implies lose generality assuming source 
sources invert network negate supply vector invert chain obtain equivalent problem source 
check set fs tight add chain current iteration done 
set fs tight steps increase jcj gamma js 
source adjacent original sources suppose gamma sources adjacent add new source connected unit capacity unit length edge uncapacitated zero length edge zero length edge capacity non trivial tight set connecting new source parameterized capacity parameterized ff capacity zero length edge 
fs recall maximum dynamic flow subset terminals define new supply ff supply gamma supply reduced gamma terminal supplies remain unchanged 
consider parameterized dynamic transshipment problem ff ff 
notice ff maximum flow zero problem equivalent feasible 
opposite extreme ff ff ff infeasible feasible fs tight set determined fs tight 
binary search integer ff ff ff yields feasible problem ff ff yields infeasible problem 
upper bound binary search total capacity original source example shows result choosing source network completing ff binary search determine capacity edge critical value ff gives source supply zero 
note choosing ff give supply fs gamma leaves supply gamma infeasible incoming capacity 
unit capacity unit length edge uncapacitated zero length edge zero length edge capacity unit capacity edge length non trivial tight set connecting new source parameterized transit time consider dynamic transshipment problem ff ff 
network add source connected parameterized ffi length edge 
fs define new supply ffi supply gamma supply reduced gamma terminal supplies remain unchanged 
new parameterized dynamic transshipment problem ffi ffi 
notice ffi maximum flow zero problem equivalent old capacity parameterized problem ff ff feasible 
hand ffi problem equivalent old capacity parameterized problem ff ff infeasible 
binary search integer ffi ffi ffi yields feasible problem ffi ffi gamma yields infeasible problem 
example shows completion iteration run algorithm 
rest run illustrated figures ffi binary search determines transit time edge critical value ffi gives source supply fs gamma fs leaves supply zero 
notice final network complete chain nested tight subsets including trivial tight sets resulting dynamic transshipment problem solved single lex max dynamic flow theorem 
far described iteration adds new sources dynamic transshipment problem obtain ffi ffi iteration 
chain contains tight sets problem modified 
progress algorithm depends properties new dynamic transshipment problem ffi ffi property tight sets 
property tight set 
property tight set 
property exists tight set ae ae 
properties follow definitions 
section prove property show find tight set polynomial time 
properties augment follows ae replace 
add 
find set satisfying property add steps maintain invariant chain tight subsets increase jcj gamma js 
proof correctness main goal section prove theorem property theorem exists tight set ffi ffi ae ae computable feas time 
proving theorem correctness running time dynamic transshipment algorithm quickly follow 
prove lemmas concerning subset terminals functions refer feasible dynamic transshipment problem ffi ffi refer infeasible ffi gamma ffi gamma 
lemma proof suppose 
feasibility implies 
decreasing delay ffi source decrease maximum dynamic flow set 
furthermore decreasing ffi effect unit decrease ffi increase applied means 
combined observation terminal supply increase inequalities yield gamma notice element chain fact equal tight set 
chain shows parameter ffi changes exactly opposite means lemma 
proof prove lemma parts 
suppose lemma need consider case means submodularity get gamma 
tight 
lemma implies gamma 


suppose implies submodularity get gamma 
lemma implies 
assume part proof implies 
property implies 
obtain gamma 
lemma known property tight sets follows submodularity function lemma feasible dynamic transshipment problem union intersection tight sets tight 
ready prove theorem proof theorem violated set infeasible problem ffi gamma ffi gamma 
lemma tight set ffi ffi 
lemma implies means 
lemma implies consider 
statements imply ae ae 
furthermore rewriting observe properties lemma imply tight set ffi ffi 
prove running time observe arbitrary violated set computation requires feasibility test ffi gamma ffi gamma 
theorem dynamic transshipment problem solved log nut feas time 
proof algorithm dominated iterations described section 
iteration dominated binary searches 
ff binary search tests feasibility time seeks integer ff nu 
second ffi binary search tests feasibility time seeks integer ffi 
theorem dynamic transshipment problem solved strongly polynomial time 
proof proved corollary dynamic transshipment feasibility tested strongly polynomial time 
strongly polynomial algorithm suppose algorithm consists comparisons additions depend number nodes edges network 
parametric search technique megiddo replace binary search polynomial algorithm strongly polynomial subroutine consisting operations 
result dynamic transshipment algorithm running kp time 
sketch megiddo technique 
parametric search 
megiddo described parametric search 
suppose strongly polynomial algorithm test feasibility dynamic transshipment problems step algorithm consists additions scalar multiplications comparisons 
modify algorithm test feasibility parameterized dynamic transshipment problems input includes linear parameter scalar value considered corresponds linear function parameterized problem 
adding scalars modified algorithm adds linear functions 
modification scalar multiplication change big oh running time algorithm parameterized comparisons difficult 
distinguish possible relationships information 
need know relationship critical value determined 
ff capacity ffi length binary searches network linear parameter 
cases determine running original algorithm non parameterized network substitutes critical value parameter information hand modified algorithm resume computing parameterized network 
improved sequential strongly polynomial algorithm may derived similar technique megiddo uses parallel algorithms solve parametric optimization problems efficiently 
chapter extensions applications section describe solve dynamic transshipment problem network edges admit flow specified time intervals 
section solve quickest transshipment problem version dynamic transshipment problem time horizon specified minimized 
section apply quickest transshipment algorithm solve problem scheduling unit size jobs network computers 
dynamic dynamic network flows argue dynamic networks consider thesis particularly dynamic 
flow dynamic network change time assume dynamic network change essentially static 
section discuss enhancements traditional dynamic networks allow characteristics network change time yielding efficient algorithms thesis 
enhancements idea mortal edges 
mortal edge yz characterized capacity yz transit time yz start time ff yz time fi yz mortal edge yz admit flow outside time interval ff yz fi yz allow node hold arbitrary non negative amount flow time 
show solve dynamic transshipment problem network mortal edges polynomial time 
note allow mortal edges holdover flow observed problem np hard 
connecting nodes parallel mortal edges model problems time varying edge capacities transit times unfortunately algorithm performance suffers time varying edge characteristics remain constant time 
terminal restrictions 
traditional dynamic transshipment problem flow may leave source node starting time zero 
generalize problem specifying release time vector source send flow release time problem reduces original version simply adding network new set sources new source corresponds old source connected uncapacitated edge transit time augmented network allowing flow leave time zero equivalent holding flow release time similar manner allow deadlines sinks sink receive flow specified deadline case connect new sink network uncapacitated edge transit time gamma limit rate sources send flow sinks receive flow augmenting network capacitated edges 
mortal edges 
solve dynamic transshipment problems networks built mortal edges reducing mortal edge small set traditional edges 
discussion focus positive capacity mortal edges mortal edge yz assume ff yz fi yz mortal edge yz requires new source yz release time ff yz new sink gamma yz deadline fi yz terminal yz gamma yz send receive yz fi yz gamma ff yz total units flow rate yz time step 
mortal edge yz reduces yz yz yz yz yz yz release time deadline flow limit yz supply yz reduction mortal edge traditional network traditional edges ys gamma yz yz gamma yz yz capacity edge yz edge yz transit time yz ys gamma yz yz gamma yz length zero 
supplies remain unchanged 
figures depict reduction mortal edge yz traditional network release times deadlines flow limits 
reduction similar standard technique transforming capacitated minimum cost flow problem uncapacitated minimum cost flow problem 
reduces network terminals release times deadlines flow limits 
dynamic transshipment problem mortal edges 
reduction yields dynamic transshipment problem release times deadlines terminal flow limits mortal edges 
prove problems equivalent solution easily yields solution 
direction trivial check lemma suppose flow solves dynamic transshipment problem solved flow defined ys gamma yz yz yz gamma yz yz gamma yz yz yz yz ff yz fi yz 
rest zero determined antisymmetry 
prove solution problem yields solution problem 
claim proof solve problem reduction problem release times deadlines flow limits trivial 
need lemma concerning solution lemma suppose flow solves dynamic transshipment problem edge yz time ff yz jf yz ff yz jf yz yz gamma ff yz fi yz gamma yz yz gamma ff yz fi yz gamma yz yz fi yz gamma ff yz proof constraints follow release time ff yz source yz time yz send flow afterward send yz time step 
constraints follow deadline fi yz sink gamma yz time gamma yz received flow additional yz remaining time step meet demand afterward 
lemma suppose flow solves dynamic transshipment problem solved flow defined yz yz gamma yz gamma yz yz ff yz fi yz yz yz ff yz fi yz 
proof prove satisfies terminal supplies 
follows fact satisfies supplies plus observation total supply yz gamma yz zero means jf yz yz fi yz gamma ff yz gamma jf yz gamma yz jf ys gamma yz jf yz edge yz prove feasible 
dynamic flow obey antisymmetry conservation capacity mortality constraints 
antisymmetry constraints trivial 
node conservation constraint follows argument prove satisfies terminal supplies 
capacity constraint edge yz follows feasibility flow definition guarantees edge mortality 
remaining constraint conservation constraint 
check holdover flow non negative node 
capacity constraint time expanded network 
prove jf yz jf yz gamma xy jf xy node time proving jf xy jf xy jf yz jf ys gamma yz edges xy yz inequalities feasibility identical transit times xy xy imply lemma 
jf xy jf xy consider edge xy ff xy jf xy jf xy fi xy jf xy jf xy jf xy jf xy jf xy xy gamma ff xy gamma jf xy gamma xy lemma jf xy gamma jf xy gamma xy jf xy 
jf yz jf ys gamma yz consider edge yz ff yz jf yz jf ys gamma yz fi yz jf yz jf yz jf ys gamma yz jf ys gamma yz jf yz yz gammaff yz yz gamma yz lemma gamma yz gamma jf yz gamma yz jf ys gamma yz quickest transshipment problem quickest transshipment problem dynamic network supply vector seek feasible dynamic flow satisfies supply minimum possible time horizon flow exists 
denote instance quickest transshipment problem pair 
solve quickest transshipment problem find minimum time dynamic transshipment problem feasible 
done polynomial time binary search theorem 
analyze binary search bound optimal time horizon terms input network supply vector recall maximum transit time network denotes total supply sources 
lemma quickest transshipment problem optimal time horizon nt proof theorem implies terminal subset ae quickest flow sending units flow collectively sources sinks takes time steps equivalent single source single sink quickest flow 
upper bound simpler problem upper bound quickest transshipment problem 
consider time step flow reaches sink happen time nt single source single sink setting easy see nt time steps unit flow reach sink time step flow 
optimal time horizon quickest transshipment problem nt corollary optimal time horizon quickest transshipment problem log nv feas time strongly polynomial time 
strongly polynomial time bound megiddo parametric search binary search 
sketched megiddo technique proof theorem 
optimal time horizon quickest transshipment problem dynamic transshipment problem know solve efficiently theorem 
notice running time need determine dominated running time need solve dynamic transshipment problem 
quickest transshipment algorithm requires running time dynamic transshipment algorithm lemma express bound terms corollary quickest transshipment problem dynamic transshipment problem solved log nuv feas time strongly polynomial time 
network scheduling introduced network scheduling chapters 
section consider unit size job network scheduling problem show reduces quickest transshipment problem 
quickest transshipment algorithm efficient algorithm general unit size job network scheduling 
theorem unit size job network scheduling problem solved quickest transshipment computation 
proof consider instance unit size job network scheduling problem 
set processors connected set directed links characterized capacity transit time functions number unit size jobs initially assigned processor reduce integral quickest transshipment problem adding network 
connect processor unit capacity zero transit time edge xt 
denote augmented graph likewise denote extended capacity transit time functions define supply vector follows nodes gammav 
network supply vector integral quickest transshipment problem 
solution dynamic flow problem corresponds directly optimal network schedule unit flow corresponds unit size job sending unit flow node corresponds executing job processor notice proof model faster processors 
processor execute jobs time step non negative integer reduction edge xt entering capacity groups obtained polynomial algorithms unit job network scheduling special cases 
deng considered networks unit transit times capacities 
stein considered ring networks unit transit times unit capacities 
varieties network scheduling problems interesting open questions research area sketch chapter 
chapter summary open problems current theory practice field dynamic network flows relies overwhelmingly time expanded networks 
introduce chain decomposable flows thesis alternative traditional technique 
chain decomposable flows lead polynomial algorithms important dynamic network flow problems notably quickest transshipment problem dynamic transshipment problem lexicographically maximum dynamic flow problem 
chain decomposable flows compute universally maximum dynamic flows approach leads polynomial approximation algorithm problem polynomial algorithm compute time step snapshot universally maximum dynamic flow 
chain decomposable flows generalize previously known techniques efficient dynamic network flow algorithms stationary dynamic flows standard chain decomposable flows 
techniques proven useful solving problems maximum dynamic flow problem little 
structure chain decomposable flows flexible support polynomial algorithms wider range problems 
rest chapter discuss interesting open problems related dynamic network flows 
combinatorial vs geometric algorithms 
inception field network flows coincided development optimization general 
network flow problems quickly recognized special type linear program amenable solution simplex method general techniques optimizing linear objective functions polyhedra 
ford fulkerson progress network flow theory exclusively combinatorial relying special structure networks general structure polyhedra 
intriguing result thesis general polyhedral theory state art network flow algorithms 
moment test dynamic transshipment feasibility geometric algorithm optimize arbitrary linear objective function convex set 
interesting open problem develop purely combinatorial polynomial dynamic transshipment algorithm 
successful investigation yield efficient algorithm theoretically certainly yield practical 
intriguing lines attack problem 
geometric methods ignore network structure inherent dynamic transshipment problems 
considering direct approach uses network structure obtain better algorithm feasibility testing 
furthermore algorithm decide feasibility compute solution feasible dynamic transshipment problem 
current dynamic transshipment algorithm relies repeated feasibility testing order compute solution replacing geometric feasibility algorithm network approach yield bigger improvements dynamic transshipment algorithm 
second queyranne discovered simple combinatorial algorithm minimize symmetric submodular functions 
dynamic network consisting way streets edges yz zy paired identical capacities transit times directly apply result may way generalize queyranne approach case 
multicommodity dynamic network flows 
multicommodity flows model transportation distinct types flow single network commodity supplied set sources demanded set sinks 
multicommodity flow problems typically harder single commodity counterparts 
traditional network transit times multicommodity flow problem formulated linear program solved polynomial time provided fractional solution allowed 
integral flows required commodity flow problem np complete research area focused approximation algorithms 
dynamic network integral multicommodity flows better known packet routing topic great interest 
tremendous difficulty vital importance problem spurred huge research effort 
flow theory played role 
research area typically involves heuristics empirical support stochastic models queuing theory deterministic models distributed line approximation algorithms 
interesting open problem develop polynomial algorithm solve fractional multicommodity dynamic flow problems 
static counterparts fractional multicommodity dynamic flow problems formulated linear programs 
dynamic case linear program corresponds exponentially large time expanded network existing linear program solvers suffice 
needs take advantage fact despite exponential number variables constraints linear program simple underlying structure 
minimum cost dynamic network flows 
quickest transshipment problem multicommodity extension know long takes flow get edge want drain unit flow network time bound 
natural extend problems considering cost sending flow edge want drain network time bound cost constraint budget 
unfortunately woeginger showed controlling time cost simultaneously leads np hard problems networks controlling time cost separately trivial 
suppose model roads greater los angeles cost cents mile transit time minutes mile 
lives source node network works sink node network 
solving minimum cost multicommodity dynamic flow problem indicate route morning rush hour traffic longest commute short possible total transportation costs minimized 
scenario leads naturally special class dynamic networks cost edge proportional transit time 
networks class know minimum cost dynamic network flow problems np hard unfortunately know polynomial algorithms problems 
know approximate dynamic flows time budget constraints 
interesting open problem consider single commodity minimum cost dynamic flow problems proportional edge costs transit times 
preemptive network scheduling 
non preemptive schedule interrupt job restart job preemptive schedule allowed interrupt job execution restart left 
distinction pointless unit size job network scheduling problem reason interrupt unit size job assuming data integral 
job sizes uniform preemptive schedules may execute faster non preemptive schedule 
results phillips apply non preemptive scheduling capacities 
despite fact systems schedule jobs preemptively virtually known preemptive network scheduling 
smith proved tive network scheduling np hard network clique interprocessor delays 
interesting open problem find approximation algorithm general preemptive scheduling networks capacities transit times 
appendix epilogue jack rachel relaxed aboard manetho nearby cargo ship picked distress call recovered passengers 
wonderful jack rachel 
question implement polynomial quickest transshipment algorithms just exhaustive search compute tight sets cabins 
think secrets jack said 
implementation proprietary 
want know 
dirk crandall gone jack 
re man love maximally 
bibliography ahuja goldberg orlin tarjan 
finding flows double scaling 
mathematical programming 
ahuja magnanti orlin 
network flows theory algorithms applications 
prentice hall englewood cliffs nj 
anderson 
continuous time network simplex algorithm 
networks 
aronson 
survey dynamic network flows 
annals operations research 
berlin 
directed routes assessing escape potential 
national fire protection association boston ma 
burkard 
quickest disjoint flow problem 
technical report institute mathematics university technology graz austria 
burkard 
quickest flow problem 
zor methods models operations research 
francis saunders 
network models building evacuation 
management science 
chen chin 
quickest path problem 
computers operations research 
choi francis 
network models building evacuation problems flow dependent exit capacities 
editor proc 
th int 
conf 
operations research pages 
north holland amsterdam august 
choi 
modeling building evacuation problems network flows side constraints 
eur 
operations research 
cohen megiddo 
strongly polynomial time nc algorithms detecting cycles dynamic graphs 
proc 
st annual acm symp 
theory computing pages 
deng liu xiao 
deterministic load balancing computer networks 
proc 
nd ieee symp 
parallel distributed processing pages 
edmonds 
submodular functions matroids certain polyhedra 
guy sauer editors combinatorial structures applications pages 
gordon breach 
stein 
scheduling ring unit capacity links 
technical report pcs tr dartmouth college 
ford fulkerson 
flows networks 
princeton university press new jersey 
fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
journal assoc 
comp 
mach 
gale 
transient flows networks 
michigan mathematical journal 
gallo tarjan 
fast parametric maximum flow algorithm applications 
siam journal computing 
goldberg tarjan 
new approach maximum flow problem 
journal acm 
goldberg tarjan 
solving minimum cost flow problems successive approximation 
mathematics operation research 
grotschel lov asz schrijver 
geometric algorithms combinatorial optimization 
springer verlag 
hajek 
optimal dynamic routing communication networks continuous traffic 
networks 
halpern 
generalized dynamic flows problem 
networks 

temporally repeated flow algorithms dynamic min cost flows 
proc 
th ieee conference decision control pages 

lexicographic min cost flows evacuation modeling 
naval research logistics 
hoppe tardos 
polynomial time algorithms evacuation problems 
proc 
th annual acm siam symp 
discrete algorithms pages 
hoppe tardos 
quickest transshipment problem 
proc 
th annual acm siam symp 
discrete algorithms pages 

hung 
chen 
quickest path problem 
proc 
pages 
springer verlag 
lecture notes computer science 
steiglitz 
testing cycles infinite graphs periodic structure 
proc 
th annual acm symp 
theory computing pages 
jarvis 
equivalent objectives dynamic network flow problems 
management science 

computation fast data transmissions networks capacities delays 
proc 
workshop algorithms data structures 
appear 

personal communication 
woeginger 
minimum cost dynamic flows case 
balas clausen editors proc 
th conference integer programming combinatorial optimization pages 
springerverlag 
lecture notes computer science 
kosaraju sullivan 
detecting cycles dynamic graphs polynomial time 
proc 
th annual acm symp 
theory computing pages 
lawler lenstra rinnooy kan shmoys 
sequencing scheduling algorithms complexity 
graves editor handbooks operations research management science vol 

elsevier science publishers 
megiddo 
optimal flows networks multiple sources sinks 
mathematical programming 
megiddo 
combinatorial optimization rational objective functions 
mathematics operations research 
megiddo 
applying parallel computation algorithms design serial algorithms 
journal acm 
minieka 
maximal lexicographic dynamic network flows 
operations research 
minieka 
dynamic network flows arc changes 
networks 
orlin 
maximum throughput dynamic network flows 
mathematical programming 
orlin 
minimum convex cost dynamic network flows 
mathematics operations research 
orlin 
problems dynamic periodic graphs 
pulleyblank editor progress combinatorial optimization pages 
academic press orlando fl 
orlin 
faster strongly polynomial minimum cost flow algorithm 
operations research 
phillips stein wein 
task scheduling networks 
proc 
fourth scandinavian workshop algorithm theory pages 
powell 
stochastic dynamic networks routing 
ball magnanti monma nemhauser editors handbooks operations research management science networks 
elsevier science publishers 

algorithm class continuous linear programs 
siam journal control optimization 
queyranne 
combinatorial algorithm minimizing symmetric submodular functions 
proc 
th annual acm siam symp 
discrete algorithms pages 
smith 
complexity preemptive scheduling interprocessor communication delays 
inf 
proc 
letters 
rosen 
sun 
xue 
algorithms quickest path problem enumeration quickest paths 
computers operations research 
vaidya 
new algorithm minimizing convex functions convex sets 
proc 
th annual ieee symp 
foundations computer science pages 

multiprocessor scheduling communication delays 
ph dissertation cwi amsterdam 
wilkinson 
algorithm universal maximal dynamic flows network 
operations research 
zadeh 
bad network problem simplex method minimum cost flow algorithms 
mathematical programming 
