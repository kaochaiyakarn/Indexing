kernels distances structured data thomas rtner thomas ais fraunhofer de knowledge discovery fraunhofer institut systeme germany machine learning department computer science university bristol uk department computer science iii university bonn germany john lloyd csl anu edu au computer sciences laboratory research school information sciences engineering australian national university peter flach peter flach bristol ac uk machine learning department computer science university bristol uk 
brings strands machine learning increasing importance kernel methods highly structured data 
propose general method constructing kernel syntactic structure data defined type signature higher order logic 
main theoretical result positive definiteness kernel defined 
report encouraging experimental results range real world datasets 
converting kernel distance pseudo metric nearest neighbour able improve best accuracy literature dataset 
keywords kernel methods structured data inductive logic programming higher order logic instance learning 
brings strands machine learning increasing importance kernel methods highly structured data 
start real world data natural representation single table 
order apply traditional data mining methods structured data extensive pre processing performed 
research inductive logic programming ilp multi relational data mining zeroski lavra aims reduce pre processing efforts considering learning multi relational data representations directly 
support vector machines boser vapnik popular development machine learning data mining communities 
learning algorithms gaussian processes kernel principal component analysis form class kernel methods ller sch lkopf smola 
computational attractiveness kernel methods comes fact applied high dimensional feature spaces suffering high cost explicitly computing mapped data 
kernel trick define positive definite kernel instance space 
functions known exists kluwer academic publishers 
printed netherlands 
main tex rtner lloyd flach embedding instance space linear space kernel pairs instances corresponds inner product space 
representation key issue bringing kernel methods learning structured data 
inductive logic programming community traditionally logic programs represent structured data scope gradually extended includes knowledge representation languages 
want devise kernel function structured data generalises kernel functions successfully applied attribute value problems useful representation structured data close attribute value representation 
represent individuals closed terms typed higher order logic lloyd 
typed syntax important pruning search spaces modelling closely possible semantics data human machinereadable form 
individuals terms representation natural generalisation attribute value representation collects information individual single term 
outline follows 
section introduces kernel methods defines meant valid kernels 
section gives account knowledge representation formalism typed higher order logic 
section defines kernel terms logic investigates theoretical properties describes kernels adapted particular domains 
section reviews kernel define distance function basic terms satisfies metric conditions 
section provides variety experimental evaluations kernel distance 
section concludes 

kernel methods section give brief overview kernel methods review kernels data structures strings trees 
components kernel methods distinguished kernel machine kernel function 
different kernel machines tackle different learning tasks support vector machines supervised learning support vector clustering ben hur unsupervised learning kernel principal component analysis sch lkopf sch lkopf smola feature extraction 
kernel machine encapsulates learning task way solution sought kernel function encapsulates hypothesis language set possible solutions 
different kernel functions implement different hypothesis spaces different knowledge representations 
section notation refer function notation refer value function similarly main tex kernels distances structured data function arguments function free argument value function 

valid kernels usually learning algorithms applied high dimensional feature space transforming data map 
computational attractiveness kernel methods comes fact rely explicit construction images instances feature map computation inner products pairs instances feature space 
closed form inner product mapped data exists performing expensive transformation step explicitly kernel calculating inner product directly 
function feature transformation hilbert space exists checked verifying positive definite 
means set linear space admits positive definite kernel embedded linear space 
take valid mean positive definite 
definition positive definite kernel 
set positive integers 
definition positive definite kernel functions 
set 
symmetric function positive definite kernel xn cn follows ci xi xj note positive definite kernel left hand side inequality corresponds squared length linear combination vectors feature space ci xi xj ci xi easy prove positive definiteness kernel positive definite kernels nice closure properties 
particular closed sum direct sum multiplication scalar product tensor product zero extension pointwise limits exponentiation cristianini shawe taylor haussler :10.1.1.21.2820
noted kernel method perform domain positive definiteness kernel issue 
valid kernel performs poorly valid kernel performs ideally kc member concept 
suitability kernel ultimately verified experiments 
main tex rtner lloyd flach 
kernel machines usual supervised learning model vapnik considers set individuals set labels relation individuals labels probability measure set basic wellknown approach supervised learning prediction hypothesis function minimises empirical risk training error min yi xi set functions hypothesis space function takes small values guess large values bad guess loss function 
practice may sufficient minimise empirical error 
necessary sure functions considered solutions stable respect small perturbations training data 
approach problem known tikhonov regularisation tikhonov arsenin means add regularisation term empirical risk 
kernel methods common assume hypothesis space forms hilbert space norm corresponding hilbert space regularisation term 
gives rise corresponding optimisation problem min yi xi different kernel methods arise different loss functions see 
support vector machines example arise called hinge loss max 
representer theorem wahba sch lkopf shows quite general conditions solution minimising regularised risk form cik xi kernel corresponding inner product socalled reproducing kernel hilbert space hinge loss making knowledge form solution problem minimising regularised risk transformed called primal optimisation problem soft margin support vector machines minc rn ni subject kc main tex kernels distances structured data ki xi xj 
optimisation problem convex kernel function hessian matrix objective function optimisation problem positive definite 
solution dc globally optimal solution 

kernels vectors investigating kernels structured data detail traditionally kernels vector spaces briefly reviewed section 
denote scalar product apart linear kernel normalised linear kernel frequently kernels vector spaces polynomial kernel gaussian rbf kernel 
parameters polynomial kernel defined intuition kernel definition useful construct new features products original features 
way example xor problem turned linearly separable problem 
parameter maximal order monomials making new feature space bias lower order monomials instance feature space consists monomials order original features 
parameter gaussian rbf kernel defined kernel function support vector machine seen radial basis function network gaussian kernels centred support vectors 
images points vector space map lie surface hilbert space images orthogonal set images linearly independent 
kernels vectors described similar form section discuss kernel modifiers adapt default kernel basic terms actual problem domains 
kernel discrete data 
matching kernel defined main tex rtner lloyd flach image element map vector orthogonal images elements 

kernels structured data best known kernel representation spaces mere attributevalue tuples convolution kernel proposed haussler haussler :10.1.1.21.2820
basic idea convolution kernels semantics composite objects captured relation object parts 
kernel object composed kernels defined different parts 
objects xd tuples parts objects 
relation xd define decomposition 
positive definite kernels kd xd xd convolution kernel defined kd xd term convolution kernel refers class kernels formulated way 
advantage convolution kernels general applied different situations 
generality require significant amount adapt specific problem choosing real world applications non trivial task 
kernel definitions structured data literature usually focus restricted syntax fairly domainspecific 
examples string tree kernels 
traditionally string kernels lodhi focused applications text mining measure similarity strings number common necessarily contiguous substrings 
string kernels defined different domains recognition translation initiation sites dna mrna sequences zien 
tree kernels collins duffy applied ordered trees number children node determined label node 
compute similarity trees common subtrees 
tree kernels applied natural language processing tasks 
kernels applied graphs introduced rtner inokuchi rtner 
extensive overview kernels structured data reader referred rtner 
main tex kernels distances structured data 
knowledge representation syntax driven kernel definition needs knowledge representation formalism able accurately naturally model underlying semantics data 
knowledge representation formalism principles typed syntax representing individuals closed terms 
theory knowledge representation formalism lloyd brief outline section 
typed syntax important pruning search spaces modelling semantics data closely possible human machinereadable form 
individuals terms representation natural generalisation attribute value representation collects information individual single term 
setting typed higher order logic provides variety important data types including sets multisets graphs representing individuals 
logic church simple theory types church extensions 
assume set type constructors various arities 
included constructor arity 
domain corresponding set containing just true false boolean values 
types logic expressions built set type constructors set parameters type variables symbol function types product types 
example type constructor list provide list types 
type list type lists elements type 
closed type type containing parameters set closed types denoted standard types include nat type natural numbers 
set constants various types 
included true false 
different kinds constants data constructors functions distinguished 
knowledge representation context data constructors represent individuals 
programming language context data constructors construct data values 
data constructors called functors prolog 
contrast functions compute data values functions definitions data constructors 
semantics logic data constructors construct models cf 
herbrand models prolog 
signature declared type constant 
example empty list constructor signature list parameter list type constructor 
list constructor usually written infix signature list list expects arguments element type list type list produces new list type list 
constant signature denote 
read list list main tex rtner lloyd flach terms logic terms typed calculus formed usual way abstraction tupling application constants set variables 
denotes set terms obtained particular alphabet 
term type called formula 
function codomain type called predicate 
logic introduce usual connectives quantifiers functions appropriate types 
connectives conjunction disjunction functions type 
addition type abstraction written emphasise intended meaning set 
tuple forming notation 
tn terms type respectively tn term type come key definition basic terms 
intuitively basic terms represent individuals subject learning prolog ground terms 
basic terms fall kinds represent individuals lists trees represent sets multisets represent tuples 
second kind abstractions 
example basic term representing set representation multiset occurrences occurrences 
adopt abstractions form tn sn represent extensional sets multisets 
term called default term case sets multisets 
generally define default terms closed type 
set default terms denoted full details default terms lloyd 
definition basic terms 
set basic terms defined inductively follows 

data constructor having signature ak tn tn 
tn sn tn sn 
tn tn main tex kernels distances structured data part definition set basic terms states particular individual natural numbers integers basic terms 
term formed applying data constructor arguments basic term basic term 
consider lists formed data constructors having signature list having signature list list basic term type list representing list constants having signature 
basic terms coming part definition called basic structures type form abstractions formed part definition constant abstractions take default term value finite number points domain 
called basic abstractions type form 
class abstractions includes useful data types finite sets multisets assuming default terms 
generally basic abstractions regarded lookup tables value items table 
fact precise definition basic terms lloyd little complicated definition basic abstractions tn ordered sn default terms 
conditions avoid redundant representations abstractions 
part definition basic terms just states form tuple basic terms obtain basic term 
terms called basic tuples type form compared prolog knowledge representation offers type system express structure hypothesis space acts declarative bias 
important extension abstractions allow genuine sets multisets 
fact prolog data constructors functors emulate tuples 
convenient gather basic terms type general specific closed type 
definition types general exists type substitution 
definition basic terms type 
define type general 
intuitive meaning set terms representing individuals type 
definition kernel introduce notation 
denotes value returned applied 
precise definition lloyd 
example 
support denoted supp set 
supp 
main tex rtner lloyd flach example formalism directed graphs type constructor graph type graph graph type information vertices type information edges 
graph defined graph label label label label type labels 
note definition corresponds closely mathematical definition graph vertex uniquely labelled edge uniquely labelled ordered pair labels vertices connects 

kernels basic terms having introduced kernels section knowledge representation formalism section ready define kernels basic terms 
section define default kernel basic terms 
section show kernel positive definite 
section show adapt default kernel match closely domain investigation 

default kernels basic terms definition kernel basic terms assumes existence kernels various sets data constructors 
precisely type constructor assumed positive definite kernel set data constructors associated example type constructor nat nat product kernel defined nat nm 
type constructors say matching kernel 
definition default kernel basic terms 
function defined inductively structure terms follows 

si ti sn tm 

supp supp 
main tex kernels distances structured data 
si ti sn tn 

exist 
definition generalises definition lloyd part definition restricts attention case matching kernel supp supp 
extension important practice applications described section 
proceed giving examples intuition default kernel defined 
examples somewhat sloppy notation identify basic terms lists sets multisets represent 
example default kernel lists 
nullary type constructor usual data constructors lists 
choose list matching kernel 
list 
list list list 
similarly 
intuition matching kernel list constructors elements lists decompose kernel length shorter list number consecutive matching elements start lists lists length 
kernel example related string kernels lodhi far apply kind data 
underlying intuition list string similarity different 
string kernels main tex rtner lloyd flach measure similarity strings number common necessarily consecutive substrings 
list kernel defined takes longest common consecutive sublist start lists account 
line usual ilp interpretation lists head tail trees kind matching performed anti unification 
example default kernel sets 
nullary type constructor choose matching kernel 
set bm 

similarly 
intuition matching kernel elements set corresponds computing cardinality intersection sets 
alternatively computation seen inner product bit vectors representing sets 
example default kernel multisets 
nullary type constructor choose matching kernel nat product kernel 
bm nat multiset containing occurrences 
similarly 
intuition product kernel elements multiset corresponds computing inner product multiplicity vectors representing multisets 
examples kept deliberately simple order illustrate main points 
kernel defined definition provides flexibility important respects allows nesting types main tex kernels distances structured data sets range objects structured ii allows flexibility choice kernels data constructors elements lists partially match dna sequences iii allows flexibility way examples modelled framework list represented head tail tree match semantics 

positive definiteness default kernel formulate main theoretical result 
proposition positive definiteness 
function defined definition 
holds positive definite kernel kernels data constructors associated type constructor positive definite 
full inductive proof proposition appendix 
similar result general kernel function lloyd 
key idea proof base induction bottom definition relevant definition 
definition 
define bm inductively follows 
data constructor arity bm tn data constructor arity tn bm tn sn tn bm sn bm tn tn bm 
prove bm bm bm 
intuitive outline proof proposition follows assume kernels occurring right hand side definition positive definite 
positive definiteness left hand side kernel follows closure properties class positive definite kernels 
kernel basic structures positive definite closure sum zero extension direct sum kernels defined data constructors assumed positive definite 
kernel basic abstractions positive definite function supp returns finite set kernels closed zero extension sum tensor product 
kernel basic tuples positive definite closure direct sum 
main tex rtner lloyd flach 
specifying kernels kernel defined previous section closely follows type structure individuals learning 
indicated kernel assumes existence atomic kernels data constructors 
kernels product kernel numbers matching kernel just checks constructors user defined kernel 
addition kernel modifiers customise kernel definition domain hand 
section describe commonly kernel modifiers 
suggest atomic kernels kernel modifiers specified extension haskell language jones hughes 
incorporate domain knowledge kernel definition frequently necessary modify default kernels type 
formally describe modifications terms function modifier modifier parameters element parameter space maps kernel modified kernel 
modifiers choices offered 
default modifier default 
polynomial version default kernel polynomial 
gaussian version gaussian 
frequently modification normalisation kernel normalised norm feature space normalisation kernel equal cosine angle feature space 
modifiers defined user syntax 
suggest kernels defined directly type structure specifying structure domain declarative bias 
introduce suggested kernel definition syntax means example east west challenge michie 
train bool type train car bool modifier gaussian main tex kernels distances structured data type car shape length roof wheels load data shape rectangle oval data length long short data roof flat peaked kernel type wheels int kernel type load data rectangle circle triangle type int line declares learning target mapping trains booleans 
train set cars car tuple describing shape length roof number wheels load 
specified data constructors load pair data constructors describing shape number loads 
keyword describes property type case kernels kernel modifiers 
declarations state trains gaussian kernel modifier bandwidth 
default shape length matching kernel product kernel 
default kernel overridden defined integer uses matching kernel 
roof endowed user defined atomic kernel defined follows roof roof real flat peaked peaked flat kernel counts identical roofs matching flat peaked roofs cases car open closed 
normalisation modifier implemented higher order function normalised real real normalised sqrt section kernel structured data closely follows syntactic structure individuals expressed higherorder type signature 
default setting assumes product kernel numbers matching kernel symbols overridden match semantics data closely 
approach general kernel method 
furthermore straightforward main tex rtner lloyd flach transform positive definite kernel pseudo metric arbitrary distance methods discuss section 
contributes growing body distance ilp 

distances basic terms section briefly review relation kernel functions distances satisfying metric conditions 
technically straightforward relation practically important extends applicability kernel functions distance methods nearest neighbour 
main insight inner product feature space calculated positive definite kernel define euclidean distance feature space norm vector leads definition 
definition distances kernels 
kernel distance measure induced defined dk valid kernel dk behaved satisfies conditions pseudo metric triangle inequality symmetry 
metric implication strengthened equivalence 
proposition valid kernels induce pseudo metrics 
kernel dk distance induced positive definite dk pseudo metric 
omit proof basic result linear algebra 
embedding linear feature space provided kernel define pseudo metric structured data expressed basic terms 
corollary default distance basic terms 
function defined definition dk distance induced kernels data constructors associated type constructor positive definite dk pseudo metric 
proceed giving simple examples default distance basic terms 
main tex kernels distances structured data example default distance lists 
continue example 

dk dk dk 
intuition matching kernel list constructors elements lists denotes length list earlier saw matching kernel length shorter list number consecutive matching elements lists aligned head lists length 
putting dk number non matching elements longer list lists length 
example default distance sets 
continue example 

dk dk dk 
earlier saw matching kernel get sets dk square root cardinality symmetric difference example default distance multisets 
continue example 
dk dk dk 
noted distance measure inherits flexibility default kernel basic terms types nested kernels data constructors adapted domain 
furthermore kernel modifiers ones discussed section 
distance functions discrete structures investigated time 
distance functions defined literature metric properties hold 
example known distance function discrete structures distance described th symmetry triangle inequality hold 
specifically symmetry violated sets cardinality 
section show nearest neighbour classifier default metric considerably outperforms dataset achieved best result published far 
distances summarised th ramon bruynooghe shown distances suggested far non metric unsuited real world problems 
exception main tex rtner lloyd flach ramon bruynooghe 
distance function suggested rb distance idea computing legal flow maximal flow value minimal cost weighted bipartite graph 
shown distance satisfies properties metric 
best knowledge shown rb distance exists positive definite kernel induces 
hand rb distance general allows non ground terms 

applications experiments section empirically investigate appropriateness kernel definitions variety domains 
implementation application algorithms mentioned simplified weka data mining toolkit witten frank 
tables section acronym kes kernel structured data refer support vector machine kernel basic terms acronym des distance structured data refer nearest neighbour algorithm distance basic terms 

east west challenge performed experiments east west challenge dataset introduced earlier section 
default kernels types product kernel numbers matching kernel atomic types kernel modifiers 
toy data set contains labelled instances aim experiment achieve high predictive accuracy check problem separated default kernel 
applied support vector machine nearest neighbour classifier full data set 
experiments achieved training accuracy verifying data separable default kernels 

drug activity prediction multi instance problems introduced name dietterich 
similar problems algorithms considered earlier example pattern recognition keeler 
couple years approaches proposed upgrade attribute value learning algorithms tackle multi instance problems 
approaches focused new algorithms specifically designed multi instance learning 
examples represented subsets domain concepts different concepts sets 
functions cset 
main tex kernels distances structured data concepts referred multi part concepts 
multi instance concepts specific kind concepts 
definition 
multi instance concept function cmi defined cmi ci ci concept instance space referred underlying concept set 
different multi instance concepts 
difficulty task just generalise examples identify characteristic element set 
learning algorithm sees positive set infer elements set elements positive underlying concept 
large sets information limited 
popular real world example multi instance problem prediction drug activity introduced dietterich 
drug active binds enzymes cell surface receptors 
binding strength determined shape drug molecule 
molecules change shape rotating internal bonds 
possible shapes molecule combination angles rotatable bonds molecule known conformations 
drug binds enzymes cell surface receptors conformations binds 
drug activity prediction problem multi instance problem 
molecule represented set descriptions different conformations 
shape conformation described feature vector component corresponds length ray origin molecule surface 
musk domain introduced dietterich involves predicting strength synthetic musk molecules 
class labels human domain experts 
overlapping data sets available 
musk contains molecules labelled musk molecule known smell labelled non musk 
molecules altogether described conformations 
musk contains musk molecules non musk molecules described conformations altogether 
uniformly distributed rays chosen represent conformation 
additionally features describe position oxygen atom conformation 
formal specification structure musk data set kernel applied rtner follows main tex rtner lloyd flach table classification accuracy musk musk mi nn iapr mi svm mi svm kes type molecule con bool modifier normalised type con rays distance offset modifier gaussian type rays real real real type offset real real real type distance real table compares results achieved support vector machine kernel labelled kes results reported andrews 
results achieved multiple fold cross validations algorithms compared zhang goldman maron lozano rez mi nn ramon de raedt iapr dietterich mi svm mi svm andrews 
parameter gaussian modifier chosen leave cross validation training fold 
musk dataset small parameters better results achieved 
example choosing parameter leads accuracy musk musk 
mentioned literature multi instance problems capture complexity relational learning problems de raedt 
experiment demonstrates general approach competitive special purpose algorithms applied structured data 
furthermore approach additional advantage learning problems simple classification tackled simply changing different kernel method 

structure elucidation analyses problem structure elucidation nuclear magnetic resonance nmr spectra introduced machine learning community zeroski 
different algorithms compared dataset nmr spectra 
compounds units general term kes evaluated leave cross validation 
number instances cases roughly fold leave cross validation equivalent practical purposes 
main tex kernels distances structured data 
major component essential plants 
biologically active exhibit medical properties due presence 
nmr spectroscopy important techniques analytical chemistry 
tool search new pharmaceutical products help determining structure activity relationships biologically active compounds 
determined clear variations compound lose biological activity 
nmr experiments sample placed external magnetic field nuclei excited pulse range radio frequencies 
signal emitted nuclei return equilibrium surrounding analysed obtain nmr spectrum radio frequencies 
dataset considered zeroski spectrum described frequency multiplicity peaks 
depending number connected carbon atom multiplicity peak proton proton triplet quartet 
formal specification data kernel follows type spectrum frequency multiplicity type frequency real modifier gaussian data multiplicity default addition multiplicities introduced multiplicity declared default data constructor 
maps frequency real number emitted molecule emitted frequency multiplicity corresponding carbon atom 
dataset consists spectra classified different classes skeleton structure follows number examples class brackets classes example 
accuracies reported literature range achieved emde wettschereck 
results reported foil quinlan tilde blockeel de raedt icl de raedt van laer 
see table ii details 
including manually constructed features accuracy achieved best system nearest neighbour classifier order distance 
applied support vector machine see column kes kernel function dataset manually con main tex rtner lloyd flach table ii 
classification accuracy data foil icl tilde kes des structed features achieved results accuracy range parameters parameter gaussian modifier chosen default complexity parameter svm 
applied nearest neighbour algorithm see column des domain achieved accuracies set parameters 
overview table ii experiments parameter gaussian modifier fixed 

left projection structure type principal directions 
right roc curve binary classification problem separating nearest neighbour algorithm 
strengthen results performed kernel principal component analysis data plotted roc curve 
kernel principal component analysis sch lkopf algorithm finds directions feature space data highest variance 
allow useful illustration restricted data molecules structure classes 
left shows projection molecules classes principal components 
main tex kernels distances structured data seen principal directions separate classes quite 
roc curves introduced machine learning community provost fawcett investigate performance learning algorithms changing conditions misclassification costs class distributions 
roc analysis applied binary classifier illustrates classifier tradeoff correctly classified positive examples axis incorrectly classified negative examples axis 
lower left corner corresponds algorithm classifying examples negative upper right corner corresponds algorithm classifying examples positive 
area roc curve measure algorithm behaves changing conditions 
right shows roc curve obtained nearest neighbour algorithm leave experiment 
area curve 
close optimal area roc curve 

spatial clustering problem clustering spatially close thematically similar data points occurs example demographic data households city trying optimise facility locations demographic data 
location planning algorithms usually deal fairly small number customers small cities number households easily exceeds 
households aggregated little information possible lost 
households aggregated spatially close little geographic information lost similar demographic description little demographic information lost 
problem automatically find aggregation unsupervised learning algorithm 
due difficulty obtaining suitable data investigated problem slightly smaller scale 
demographic data aggregated data protection anonymity reasons information household level part street level 
data set describes roughly points small german city geographic coordinates statistics number people certain age levels number people certain income levels number males females living small area data point 
simplest way represent data feature vector entries coordinates statistics 
drawing results simple means algorithm representation clearly shows spatial coordinates taken account spatially compact clusters achieved 
due fact semantics coordinates demographic statistics different 
main tex rtner lloyd flach better representation kernel specification follows 
type neighbourhood coords statistics type coords real real modifier gaussian type statistics real real real modifier normalised type coords geographical coordinates type statistics statistics neighbourhood households 
neighbourhood represented abstraction type coords statistics maps coordinates neighbourhood statistics coordinates neighbourhoods default term 
abstraction lookup table single entry corresponding neighbourhood represented abstraction 
abstractions capture functional dependency coordinates determine statistics neighbourhoods 
means kernel neighbourhoods multiplies kernel coordinates kernel statistics 
see part definition 
plots households spatially clustered different parameters left right 
spatial compactness increases parameter decreased 
worth noting abstractions convenient method getting background knowledge kernel 
generally abstraction single entry consisting individual item features individual value item 
features represented feature vector booleans example constructed background knowledge application 
application section individuals coordinates neighbourhoods features statistics 
main tex kernels distances structured data representation applying version means algorithm kernel shows clusters spatially compact compactness depending choice kernel parameter 
sample illustrations 
instances belonging cluster represented symbol 

bringing kernel methods structured data important direction practical machine learning research 
requires defining positive definite kernel structured data embedding structured data linear space 
defined kernel proved positive definite showed works practice 
kernel definition follows syntax driven approach making knowledge representation formalism able accurately naturally model underlying semantics structured data 
principles typed syntax representing individuals closed terms 
typed syntax important pruning search spaces modelling closely possible semantics data human machinereadable form 
individuals terms representation simple natural generalisation attribute value representation collects information individual single term 
spite simplicity knowledge representation formalism powerful accurately model highly structured data 
definition kernel example applications show structured data reasonably embedded linear spaces 
main theoretical contribution proof kernel positive definite basic terms type 
appropriateness kernel verified real world domains 
instance dataset support vector machine nearest neighbour classifier kernel function framework improved best accuracy published literature respectively 
corresponds making third errors best algorithm applied problem far 
consider extending specialising kernel function 
extending kernel definition means example considering general abstractions finite lookup tables considered 
specialising framework implies definition specialised note performing means feature space requires modifications algorithm 
description scope 
coloured illustrations parameters www ais fraunhofer de main tex rtner lloyd flach kernel functions type constructors special semantics 
instance sequences occur text mining bioinformatics speech processing different semantics domains 
single default kernel handling sequences need specialised kernel definitions domains 
believe approach followed declarative language kernel specifications provides useful framework defining domain specific kernels 
research supported part eu framework project ist data mining decision support business competitiveness solomon virtual enterprise bmbf funded project dfg project wr methoden und ume 
authors tam th stefan wrobel anonymous reviewers valuable comments 
andrews tsochantaridis hofmann support vector machines multiple instance learning 
advances neural information processing systems vol 

mit press 
theory reproducing kernels 
transactions american mathematical society 
ben hur horn siegelmann vapnik support vector clustering 
journal machine learning research 
blockeel de raedt top induction order logical decision trees 
artificial intelligence 
boser guyon vapnik training algorithm optimal margin classifiers 
haussler ed proceedings th annual acm workshop computational learning theory 
pp 
acm press 
church formulation simple theory types 
journal symbolic logic 
collins duffy convolution kernels natural language 
dietterich becker ghahramani eds advances neural information processing systems vol 

mit press 
cristianini shawe taylor support vector machines kernel learning methods 
cambridge university press 
de raedt attribute value learning versus inductive logic programming missing links extended 
page ed proceedings th international conference inductive logic programming vol 
lecture notes artificial intelligence 
pp 
springer verlag 
de raedt van laer inductive constraint logic 
jantke shinohara eds proceedings th international workshop algorithmic learning theory vol 
lnai 
pp 
springer verlag 
main tex kernels distances structured data dietterich lathrop lozano rez solving multiple instance problem axis parallel rectangles 
artificial intelligence 
zeroski lavra eds relational data mining 
springer verlag 
zeroski schulze kremer wettschereck blockeel structure elucidation nmr spectra inductive logic programming 
applied artificial intelligence 
special issue order knowledge discovery databases 
emde wettschereck relational instance learning 
proceedings th international conference machine learning 
pp 
morgan kaufmann 
pontil poggio regularization networks support vector machines 
advances computational mathematics 
rtner exponential geometric kernels graphs 
nips workshop unreal data principles modeling data 
rtner survey kernels structured data 
sigkdd explorations 
rtner flach kowalczyk smola multi instance kernels 
sammut hoffmann eds proceedings th international conference machine learning 
pp 
morgan kaufmann 
rtner flach wrobel graph kernels hardness results efficient alternatives 
proceedings th annual conference computational learning theory th kernel workshop 
haussler convolution kernels discrete structures 
technical report department computer science university california santa cruz 
th wrobel relational instance learning lists terms 
machine learning 
jones hughes eds haskell non strict purely functional language 
available athttp haskell org 
inokuchi kernels graph classification 
icdm workshop active mining 
keeler rumelhart 
integrated segmentation recognition hand printed numerals 
lippmann moody touretzky eds advances neural information processing systems vol 

pp 
morgan kaufmann 
lloyd logic learning 
springer verlag 
lodhi saunders shawe taylor cristianini watkins text classification string kernels 
journal machine learning research 
maron lozano rez framework multiple instance learning 
jordan kearns solla eds advances neural information processing systems vol 

mit press 
flach improved distances structured data 
th yamamoto eds proceedings th international conference inductive logic programming vol 
lecture notes artificial intelligence 
pp 
springer verlag 
michie muggleton page srinivasan international computing community new challenge 
technical report oxford university computing laboratory oxford uk 
ller mika tsch tsuda sch lkopf kernel learning algorithms 
ieee transactions neural networks 
provost fawcett robust classification imprecise environments 
machine 
quinlan learning logical definitions relations 
machine learning 
main tex rtner lloyd flach ramon bruynooghe polynomial time computable metric point sets 
acta informatica 
ramon de raedt multi instance neural networks 
attribute value relational learning crossing boundaries 
workshop seventeenth international conference machine learning icml 
sch lkopf herbrich smola generalized representer theorem 
proceedings th annual conference learning theory 
sch lkopf smola learning kernels 
mit press 
sch lkopf smola 
ller kernel principal component analysis 
sch lkopf burges smola eds advances kernel methods support vector learning 
mit press pp 

tikhonov arsenin solutions ill posed problems 
winston 
van laer de raedt upgrade propositional learners order logic 
zeroski lavra chapt 

vapnik nature statistical learning theory 
springer verlag 
wahba spline models observational data vol 
cbms nsf regional conference series applied mathematics 
philadelphia siam 
witten frank data mining practical machine learning tools techniques java implementations 
morgan kaufmann 
zhang goldman em dd improved multiple instance learning technique 
dietterich becker ghahramani eds advances neural information processing systems vol 

mit press 
zien ratsch mika sch lkopf lengauer 
muller engineering support vector machine kernels recognize translation initiation sites 
bioinformatics 
main tex kernels distances structured data appendix proof proposition function defined definition 
show holds positive definite kernel kernels data constructors associated type constructor positive definite 
proof 
symmetry established 
sym property bm follows 
shown induction sym holds symmetry follows immediately exists bm bm bm bm 
shown sym holds 
case data constructors arity associated type constructor say 
definition result follows symmetric 
assume sym holds 
proved sym holds 
suppose sc bm 
shown 
cases consider corresponding having form case easy see definition induction hypothesis 
completes proof symmetric 
remaining part proof pd property tn bm cn follows ci ti 
shown induction pd holds remaining condition positive definiteness follows immediately tn exists tn bm 
shown pd holds 
case ti data constructor arity associated type constructor say 
definition ti ti result follows assumed positive definite 
assume pd holds 
proved pd holds 
suppose tn bm cn shown ci ti 
cases consider 
main tex rtner lloyd flach 
suppose ti ci ci 
ci ti ci ci cj mi ci ci cj arity ci 
ci ci cj mi fact positive definite kernel set data constructors associated ci ci cj arity ci ci cj arity induction hypothesis 


ci ti ci arity ci ci cj ci ti supp ti supp ci ti supp ti supp supp tk ci ti 
main tex kernels distances structured data step proceed follows 
induction hypothesis positive definite bm bm 
function bm bm bm bm defined positive definite tensor product positive definite kernels sch lkopf smola 
consider set ti supp ti points bm bm corresponding set constants ci supp ti ci ci supp ti 

suppose ti ci ti ci ci induction hypothesis 
main tex main tex 
