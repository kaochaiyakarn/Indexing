forward secrecy password key exchange protocols jonathan katz ostrovsky moti yung department computer science university maryland college park cs umd edu telcordia technologies research telcordia com department computer science columbia university moti cs columbia edu done columbia university 
password authenticated key exchange protocols designed secure users choose short passwords 
security requires particular protocol broken line dictionary attack adversary enumerates possible passwords attempt determine correct previously viewed transcripts 
provably secure protocols idealized random oracle ideal cipher models standard model general assumptions ddh assumption :10.1.1.38.2475:10.1.1.102.4190
protocol koy protocol currently known practical solution standard assumptions 
proof basic security protocol appeared 
basic setting adversary assumed corrupt clients learning passwords servers modifying value stored passwords 
simplifying unifying previous natural de nition security incorporates challenging requirement forward secrecy 
demonstrate explicit attack koy protocol originally secure de nition 
provides rst natural example showing forward secrecy strictly stronger requirement protocols 
slight modi cation koy protocol prevents attack main technical contribution rigorously prove modi ed protocol achieves forward secrecy 
protocols allowing mutual authentication parties generation cryptographically strong shared key authenticated key exchange underly secure interactions internet 
near impossible achieve level security unauthenticated network mutual authentication key exchange protocols 
necessary needs know communicating required cryptographic techniques encryption useless shared key periodically refreshed 
furthermore high level protocols frequently developed analyzed assumption authenticated channels assumption realized secure mechanism implementing channels previously shared information 
client server authentication requires information shared client server distinguishing client parties network 
classical example shared information high entropy cryptographic key key message authentication digital signatures 
rst systematic formal treatments authenticated key exchange assumed participants shared cryptographically strong information secret key public keys 
strong setup assumptions protocols party case designed proven secure 
client ultimately human user unrealistic expect client store remember high entropy key 
reasonable assume client stores low entropy password 
protocols secure users share keys demonstrably insecure users share passwords 
example challenge response protocol client sends server replies fk shared key secure entropy suciently large 
low entropy eavesdropper monitors single conversation hr xi determine high probability value line trying possibilities value fk password shared distinguish hybrid password public key model client server share password client additionally knows public key server password model client server share password public information may available parties network 
cases important design protocols secure line dictionary attacks adversary enumerates possible passwords attempt determine correct password transcripts 
consideration attacks crucial security guaranteed users protocol choose passwords poorly 
password protocols public information assumed practical advantages protocols designed hybrid model 
password model eliminates need pki avoiding issues user registration key management key revocation 
furthermore eliminating pki means line trusted certi cation authority ca longer needed note access ca performance bottleneck number users large 
password model public information existence information typical universal assumption 
example die hellman key exchange group generator assumed public 
established new users may join time informing central authority presence 
password model global secret key eliminates risk compromise single participant compromise security entire system 
motivation 
formal de nitions security password authenticated key exchange non trivial subject ongoing research 
di erent frameworks setting proposed :10.1.1.102.4190
complicating issue frameworks levels security distinguished depending forward secrecy required 
making matters worse various de nitions forward secrecy subtly di erent multitude security notions exists example distinct notions forward secrecy mentioned 
goals simplify unify previous de nitional 
important design protocols provably achieve forward secrecy 
number protocols achieving basic security known 
rst protocol bellovin merritt give heuristic arguments security 
rst formal proofs basic security protocols random oracle ideal cipher models 
subsequently protocols designed proven secure standard model goldreich lindell construct protocol general assumptions require public parameters katz ostrovsky yung give protocol koy protocol decisional die hellman assumption :10.1.1.102.4190
subsequently protocols provable security random oracle model proposed 
protocols known achieve forward secrecy 
forward secrecy claimed protocol proof 
full proof forward secrecy protocol subsequently appeared 
standard model goldreich lindell prove forward secrecy protocol :10.1.1.102.4190
point de nitions forward secrecy considered previous works weaker de nition see discussion section 
contributions mentioned number de nitions proposed forward secrecy protocols 
feel de nitions adequately capture realistic attacks 
building framework bellare extending de nition forward secrecy contained propose new de nition forward secrecy weak corruption model 
believe de nition better captures underlying issues previous de nitions fact show concrete examples potentially damaging attacks prevented previous de nitions forward secrecy handled de nition 
section demonstrate explicit attack koy protocol achieve forward secrecy respect rest consider weak corruption model 
terminology explained greater detail section 
de nition 
attack represents potentially serious threat protocol practice 
additional interest attack shows natural separation notions basic forward secrecy setting 
suggest modi cation koy protocol prevents attack main technical contribution give complete proof forward secrecy modi ed protocol section 
de nitions due space limitations assume reader familiar oracle model bellare pointcheval rogaway building de nition basic security 
point departure de nition regard forward secrecy summarize aspects model necessary understanding 
details refer reader 
participants passwords initialization 
assume simplicity xed set protocol participants called principals users client client server server client server disjoint 
client password pw server vector pws client contains passwords clients 
assume clients share passwords servers 
protocol run initialization phase occurs global public parameters established passwords pwc chosen client 
assume passwords client chosen independently uniformly random set ng constant xed independently security parameter 
outset protocol correct passwords stored server pw pw client server 
execution protocol 
real world protocol determines principals behave response signals environment 
model signals sent adversary 
principal execute protocol multiple times di erent partners modeled allowing principal unlimited number instances execute protocol 
denote instance user instance may 
instance associated variables state term acc sid pid sk function variables 
adversary assumed control communication network 
adversary interaction principals speci cally various instances modeled access oracles described detail 
local state values state term maintained instance adversary interacts state directly visible adversary 
analysis extends handle arbitrary distributions including users interdependent passwords 
state instance may updated oracle call oracle output typically depend state 
oracle types send sends message instance oracle outputs reply generated instance 
execute executes protocol instances client server outputs transcript execution 
represents occasions adversary passively protocol execution 
reveal outputs current value session key sk corrupt 
discuss oracle section 
oracle de nition basic security de ne forward secrecy 
test query allowed time adversary execution 
random bit generated adversary sk adversary random session key 
correctness 


say instances client server server client sid sid null pid pid sk sk 
slightly clari es notion 
forward secrecy mentioned earlier main departure de nition forward secrecy 
completely de ne notion orthogonal components speci ed nature corrupt oracle means adversary succeed breaking protocol 
corruption model 
corrupt oracle models corruption participants adversary 
adversary setting ability impersonate send messages behalf parties network corruption setting involves learning modifying secret information stored participant 
speci possibilities corruption player may allow adversary learn internal state active instances 
corruption client may allow adversary learn pw corruption server may allow adversary modify passwords stored change password pw desired value 
de ned strong corruption model allows attacks weak corruption model allows attacks 
terminology universally accepted 
particular weak corruption models allow attack allow adversary install bogus passwords servers 
focus weak corruption model allow adversary learn passwords clients change passwords stored servers words allow attacks 
precise formalization corrupt oracle di ers consider attack separately 
formally oracle corrupt returns pw client input 
oracle call corrupt pw server client sets pw pw 
emphasize adversary install di erent passwords di erent servers client 
de nition adversary installs password pw learns actual password pw assumption 
note case poorly administered server may easy modify users passwords learning actual passwords 
choose focus weak corruption model strong corruption model reasons 
fully satisfactory de nitions security model appeared particular know protocols satisfying reasonable de nition forward secrecy model 
part problem current de nitions strong corruption model overly restrictive fact generalization argument shows forward secrecy de nition impossible strong corruption case 
leave subject research 
secondly weak corruption relevant practice easier compromise machine completion protocol execution compromise machine protocol execution 
installing bogus passwords servers realistic threat server password le encrypted protected malicious tampering 
advantage adversary 
signi cant departure previous regard de nition adversary success 
previous definitions number aws allow attacks supposedly secure protocols de nition aims correcting aws 
de nition forward secrecy adversary succeeds guess bit test oracle oracle queried fresh instance adversary advantage adv simply twice success probability minus 
di erences de nitions arise due di erent de nitions freshness 
note de nition freshness necessary reasonable de nition security notion de ned adversary succeed example submitting test query instance submitted reveal query 
de nition instance fresh true point adversary queried reveal point adversary queried reveal adversary corrupt query test query point adversary queried send de nition adopted subsequent aware 
de nition considers secure protocol revealing client password enables adversary impersonate di erent client 
de nition instance adversary interacts corrupt query guarantees called fs fresh focus forward secrecy abbreviated name 
regard instances 
example aw de nition consider adversary installs password pw client server interacts server able impersonate server de nition protocol considered secure 
fact attack sort represents real threat section demonstrate precisely type attack original koy protocol 
careful de nition freshness 
de nition instance pid fresh true adversary queried reveal reveal 
adversary queried corrupt corrupt test query point adversary queried send adversary queried corrupt pw test query point adversary queried send note contrast previous de nitions explained exposing password user longer automatically results instances user 
de ned mean secure protocol 
note ppt adversary succeed trying passwords line impersonation attack 
informally say protocol secure best adversary 
formally instance represents line attack true point adversary queried send point adversary queried reveal test 
particular instances adversary interacts execute calls counted line attacks 
number line attacks represents bound number passwords adversary tested line fashion 
motivates de nition de nition 
protocol secure protocol achieving forward secrecy ppt adversaries making line attacks exists negligible function 

particular adversary essentially better guess single password line attempt 
calls execute oracle included help adversary breaking security protocol means passive eavesdropping line dictionary attacks essentially 
previous de nitions security consider protocols secure long adversary better guess constant number passwords line attempt 
believe strengthening de nition adversary guess single password line attempt important 
space possible passwords small degradation security avoided possible 
say protocols meet de nition security protocol aware constant implicit proof security 
public client server vk sk 
pwc client cd client vk client cd 
pws server cd server server cd sig sign sk sig pwc skc vk sig pws sks sks null fig 

koy protocol 
examination security proofs protocols shows protocols achieve stronger level security de nition :10.1.1.38.2475
security proofs protocols inconclusive leave open possibility password guessed adversary line attack 
case explicit attack known allows adversary guess passwords line attack 
koy protocol due space limitations include details koy protocol necessary understanding attack modi cation proof security 
refer reader details 
high level description protocol 
initialization phase public information established follows security parameter primes chosen jqj values de ne group decisional die hellman ddh assumption believed hold 
values selected random function chosen random universal way hash family 
public information consists description values hash function part initialization phase passwords chosen randomly client stored server 
assume passwords lie mapped fashion example passwords lie range ng password pw mapped pw mapping reasonable values client client client wants connect server server server client begins running key generation algorithm time signature scheme giving vk sk 
client chooses random computes 
pwc client computes sets cd values sent server rst message protocol 
receiving rst message server rst chooses random computes sets cd additionally random chosen server computes 
pw pw password stored server client named incoming message 
server computes sets cd values sent client second message protocol 
receiving second message jji client chooses random computes sets cd client signs jk sk 
value resulting signature sent nal message protocol 
point client accepts computes session key rst computing pwc setting sk receiving nal message server checks sig valid signature jk vk 
server accepts computes session key rst computing pw setting sk received signature valid server accept session key remains null 
omitted description assume users check incoming messages formed server receives rst message veri es client client ill formed message received receiving party terminates accepting session key remains null 
attack koy protocol demonstrate koy protocol achieve forward secrecy de nition showing explicit attack 
results impact basic security protocol 
fix client client 
attack begins having adversary impersonate client server arbitrary password say pw adversary chooses vk constructs message password sends message server server respond message jji computed password pw client 
adversary changes password stored client pw client value oracle call corrupt client 
adversary computes nal message protocol choosing sending 
adversary obtains sk reveal query claim adversary determine successfully impersonate client di erent server see note computes session key receiving nal message protocol uses pw client sk cd adversary compute adversary sk determine value exhaustive search password dictionary adversary identify unique value modifying protocol achieve forward security attack described previous section succeeds precisely password server changes middle protocol execution 
ensure happen modify protocol password pw client construct server response saved part state information instance 
server computes session key instance uses value pw client stored part state information particular instance actual value pw client stored long term memory password le 
note multiple server instances active concurrently possible di erent passwords instance 
modi cation simple crucial change implementation protocol 
main technical contribution detailed proof forward secrecy modi ed protocol rst proof random oracles ideal ciphers forward secrecy model 
proof forward secrecy modi cation previous section thwart known attacks particular section rigorous proof forward secrecy challenging 
proof note rst proof protocol natural de nition forward secrecy appearing 
theorem 
ddh assumption modi ed koy protocol secure protocol achieving forward secrecy 
proof 
due space limitations sketch proof 
complete proof appears full version 
adversary access oracles send representing di erent types messages including initiate message sent 
imagine simulator runs protocol adversary adversary completes execution outputs simulator tell succeeds checking single test query instance instance fresh success adversary denoted event 
refer real execution experiment experiment adversary succeed occur 
veri cation key vk simulator responding send query repeated 

adversary new valid message signature pair veri cation key simulator responding send query 

value simulator responding send queries repeated 

value simulator responding send query msg jji equal value simulator responding send query msg je jf jg ji jj furthermore case je jf jg ji probability events occur negligible assuming security signature scheme universal way hash function negligible function 
experiment receiving oracle query execute client server values chosen independently random simulator checks pw server client session keys computed sk client sk server pw server client hand pw server client result corrupt oracle query session keys computed sk client sk server pw server client pw server client aspects execute oracle handled 
ddh assumption show negligible function 
details appear full version 
experiment receiving query execute client server simulator checks pw server client sk client chosen randomly sk server set equal sk client sk client sk server chosen independently random claim 
negligible function 
claim follows negligible statistical di erence distributions adversary view experiments 
proof pw server client exactly parallels proof 
pw server client proof complicated techniques exactly 
details omitted appear full version 
introduce notation 
query send server msg say msg previously previously output send oracle 
similarly query send client msg say msg previously previously output send oracle 
msg called new 
experiment simulator runs modi ed initialization procedure shown values stored 
initialize return fig 

modi ed initialization procedure 
new msg query send client jji said newly valid say newly invalid 
new msg query send server newly valid pw server client value pw server client time send query note pw server client may change result corrupt queries 
say newly invalid 
receiving query send client msg simulator checks previously query form corrupt client 
send query answered 
simulator examines msg 
msg newly invalid query answered experiment msg newly valid query answered experiment simulator stores value sk client session key 
msg previously note negligible probability newly valid message may valid protocol message 
ne far proof security concerned 
simulator checks unique send query msg output 
say query send server msg 
msg newly invalid send query answered experiment msg newly valid query answered experiment simulator stores value sk client session key 
receiving query send server msg client def pid server simulator rst checks query send server rst msg 
send query query corrupt client query form corrupt server client behavior send oracle unchanged 
simulator responds experiment rst msg newly valid 
case query answered experiment simulator stores value sk server session key 
adversary queries test reveal queries form corrupt corrupt pid session key stored form sk adversary test reveal query corrupt query adversary value sk test reveal queries answered experiment completing description experiment adversary receives value response reveal test query adversary succeeds 
adversary succeeds correctly guessing bit adversary view unchanged receives value adversary succeeds case clearly 
remaining transformations simulator modify actions response query send query query corrupt 
similarly simulator response query send pid changed query send queries corrupt corrupt 
brevity follows simply say simulator modi es behavior send oracle queries corrupt queries 
experiment simulator responds send query stores values cd receiving query send server assuming query send server rst msg corrupt queries simulator checks value rst msg 
rst msg new query answered experiment rst msg previously vk jk sig query answered experiment session key assigned value 
rst msg previously vk jk sig experiment aborted simulator rst checks exists unique sid client sid server sk server assigned value sk client rst msg jji 
simulator stored values cd true experiment aborted sig valid signature jk output simulator send query 
session key assigned value sk server pw pw claim 

distribution adversary view identical experiments crucial value pw pw server client responding send query stored part state value subsequently responding send query 
case value pw server client change result corrupt query send send queries 
experiment receiving query send server assuming query send server rst msg corrupt queries simulator checks value rst msg 
rst msg newly invalid session key assigned value session key assigned value randomly chosen query answered experiment claim 

step similar identical step crucial value pw server client send send queries instance 
experiment receiving query send server msg assuming query corrupt queries msg newly valid query answered 
component computed dictionary legal passwords ng 
claim 
ddh assumption negligible function 
proof claim follows depends non malleability messages protocol 
details appear full version 
note query send server rst msg corrupt queries rst msg newly valid simulator require order respond subsequent query send server msg case query 
hand contrast basic case corrupt queries allowed simulator require case rst msg newly valid 
reason assume adversary queries send server corrupt queries newly valid 
assume adversary subsequently learns corrupt query 
adversary query send server followed reveal server 
case simulator give adversary correct session key sk server impossible knowledge experiment queries send oracle handled di erently corrupt queries 
msg newly invalid session key assigned value chosen randomly msg previously simulator checks send query msg output 
say query send server msg 
msg newly valid send query answered 
msg newly invalid session key assigned value chosen randomly queries send server msg handled di erently assuming query send server rst msg corrupt queries 
rst msg previously vk jk sig exist sid client sid server session key assigned value chosen randomly claim 

claim follows equivalence distributions adversary views experiments 
details appear full version 
denote event adversary succeeds receiving value test reveal query occur corrupt queries 
pr pr pr 
pr event occur ways de nition freshness adversary queries test corrupt queries receive return adversary queries test corrupt query acc true adversary queried send case sk randomly chosen independent remainder experiment pr 
pr 
pr 
upper bound pr 
de ne experiment adversary succeeds receives value response reveal test query 
clearly pr pr de nition event 
adversary succeed experiment corrupt query simulator aborts experiment case 
reason simulator previously store values sk session key sk returned response test reveal query corrupt query simulator need store experiment queries send oracle handled di erently 
simulator computes msg newly valid 
proof similar follows ddh assumption negligible function 

key point proof msg newly valid simulator longer need worry simulating adversary view corrupt query 
experiment queries send handled di erently 
simulator computes proof similar follows ddh assumption negligible function 

note session keys computed send query chosen randomly value needed simulator simulator break cramer shoup encryption scheme 
adversary view experiment independent passwords chosen simulator adversary receives response reveal test query case adversary succeeds 
probability adversary receives exactly pr completes proof theorem 

bellare canetti krawczyk 
modular approach design analysis authentication key exchange protocols 
stoc 

bellare pointcheval rogaway 
authenticated key exchange secure dictionary attacks 
eurocrypt 

bellare rogaway 
entity authentication key distribution 
crypto 

bellare rogaway 
provably secure session key distribution party case 
stoc 

bellovin merritt 
encrypted key exchange password protocols secure dictionary attacks 
ieee symposium research security privacy ieee pp 


bird gopal herzberg janson kutten molva yung 
systematic design party authentication protocols 
crypto 


public key cryptography password protocols multi user case 
acm cccs 

mackenzie patel 
provably secure password authenticated key exchange die hellman 
eurocrypt 

die hellman 
new directions cryptography 
ieee transactions information theory 

die van oorschot wiener 
authentication authenticated key exchanges 
designs codes cryptography 

goldreich lindell 
session key generation human passwords 
crypto 

halevi krawczyk 
public key cryptography password protocols 
acm transactions information system security 

katz 
ecient cryptographic protocols preventing man middle attacks 
phd thesis columbia university 

katz ostrovsky yung 
ecient password authenticated key exchange human memorable passwords 
eurocrypt 

lomas gong saltzer needham 
reducing risks poorly chosen keys 
acm operating systems review 

mackenzie 
ecient password authenticated key exchange 
rsa 

mackenzie 
security password authenticated protocol 
manuscript 

mackenzie 
personal communication 
april 

mackenzie patel swaminathan 
password authenticated key exchange rsa 
asiacrypt 

shoup 
formal models secure key exchange 
available eprint iacr org 

wu 
secure remote password protocol 
proceedings internet society symposium network distributed system security pp 

