robot programming environments bruce macdonald david yuen sylvia wong evan woo rowan toby collett lix tr geoff biggs department electrical electronic engineering university auckland private bag auckland new zealand email macdonald auckland ac nz robot programming systems kept pace developments general purpose programming environments 
robot systems special demands related complex interactions real environments complex sensors actuators 
focus robot programming laboratory research environment robots operating systems hardware platforms programming languages researchers differ change 
robot programming systems provide appropriate human robot programming interaction programming languages tools distributed infrastructures 
describe developing robot programming system including layer distributed corba service broker application infrastructure distributed robot programming associated graphical simulation tool provides virtual environment rich graphics capabilities 
keywords robot programming human robot interaction robot infrastructure robot programming systems kept pace developments general purpose programming environments robot researchers face difficulties developing large software systems 
software infrastructure proprietary necessarily targeted specific hardware robot software development kits may limiting lack open standards promote collaboration code reuse integration 
robot systems special demands related complex interactions robots real environments complex sensors actuators robots including thousands devices input output storage far exceed human programmers familiar senses effectors compared devices desktop server 
simultaneous unrelated activity inputs outputs 
real time requirements automation system operate real environment 
unexpected real world conditions 
wide variations hardware interfaces opposed highly desktop 
programmers robot arms complex articulated automatic devices deal non intuitive geometry 
programmers mobile robots deal widely varying unpredictable conditions robot moves environment 
discuss providing robot programming environment 
robot programming view robot programming systems having important conceptual components interest designers fig 
programming component including designs programming language libraries application programming interfaces apis enable programmer describe desired robot behaviour 
underlying infrastructure including designs architectures support execute robot behaviour descriptions especially distributed environments 
design interactive systems allow human programmer interact programming component create modify examine programs system resources statically execution 
human programmer may interact human programmer human robot interaction programming infrastructure robot robot virtual robot parts robot programming system 
infrastructure component examine monitor configure resources directly robots perform tasks 
components particular concern designers robot programming systems robots operating systems compilers robot hardware drivers 
aspects real time operating system performance concern 
sections describe main components 
programming programming activity describe desired robot behaviour supported programming system 
robot programming systems distinguished aim method programming 
aim may programming system level task level 
system programming typically undertaken developers releasing software includes low medium level tasks 
task level programming allocation tasks consumer higher level little overt programming viewed configuration 
example developer program ability perform navigation guiding task robot system level programming 
consumers task interface program robot guide people museum 
main programming methods manual automatic 
manual programming involves text graphical systems 
automatic programming includes programming demonstration pbd currently popular training specific tasks particularly industry 
considerable ef interaction architecture level autonomy teleoperation tele robotics director agent model fully autonomous hri interaction medium gesture text gui natural language haptic augmented reality robot programming aspects human robot interaction 
fort aimed improving pbd systems 
simply playing back demonstration robot may pick important movements grasps plan path points may execute key steps different order 
text programming common industry simple robot languages typically provided robot developer 
basic syntax built robot commands 
text systems diverged robot specific languages develop general purpose higher level programming languages suitable robot 
typically involves extending existing languages java haskell :10.1.1.5.2886
graphical icon languages hybrid automatic manual method manual user show actions perform automatic code generated results user interaction 
user greater control robot actions compared fully automatic system 
graphical languages require technical skill text system sacrificing versatility usability useful task level programming 
flowcharts popular graphical system children graphs 
human robot interaction hri design humans interact robots activities associated programming 
fig 
distinguishes issues human robot programming design architecture medium interaction programming related 
architecture varies direct control model director agent model human gives instruction supervision fully autonomous mode 
considerable interest humans robots interact 
hri areas direct control teleoperation telerobotics social interaction user programming little hri system development level 
current research needs integrating program development stages allowing effective development interaction developer robot 
main levels hri distinguished purpose interaction 
lowest level robot development corresponds system level programming activities previous section developing robot system 
level interaction customizing robot tasks task level programming example giving list commands vacuuming robot assembly robot 
final level social interaction example tour guide robot 
programming environment focuses robot prototype development interface development largely neglected researchers traditional application development programming tools standard keyboard screen mouse interfaces 
infrastructure infrastructure supports executes robot behaviour descriptions 
robot programming systems little coherence focus underlying architecture 
themes include client server tools specific methods producing robot software example graphically reusable software architecture portable apis hierarchies classes attention interfaces fault tolerance component interaction blackboard mission programming aimed users layer architectures real time object oriented automation component systems real time programming 
propose simulation virtual reality support programming 
authors describe distributed robot programming systems including architectures separation cognitive reactive components planning components patterns distributed development levels workflow user system execution hybrid models integrating decision reactive levels layered object oriented client server architecture sensorimotor systems 
focuses object oriented components patterns 
corba inspires distributed communications 
miro object oriented layered client server robot middleware system ace associated real time corba orb tao 
mca focuses reusable modules standardised interface 
claraty provides architecture functional decision layers set functional components jpl mobile robot systems 
objectives focus robot programming laboratory research environment want avoid time consuming practices porting software special robot environments 
programming component developer tools provide editors enhanced code aware presentation browsing useful application components help systems debuggers inspectors 
simulations robot behaviour essential enabling programmers visualise evaluate robot programs repeatable safe environments 
quality models simulations environments essential enabling programmers reason robot behaves environment test reasoning 
standards protocols components reuse robot programming follow common standards protocols encourage creation reusable components including object oriented concepts standards robot 
programming environment open extendable allow experimentation programming abstractions object oriented functional reactive behaviour 
standards common components provided open source form enhance openness allow importing encourage groups contribute 
sensors actuators essential including sensor actuator models reasoning errors asynchrony uncertainty imperfections noise 
abstractions motion commands sensor management provide convenient programming example guarded moves 
real time apis sensors actuators provided programmer accurate time stamps recorded sensory data 
control systems programmers need libraries tools creating sophisticated controllers accurate notions continuous time control graphical tools provided matlab 
concurrency real time multithreading real time operating system networking provide interactions robots 
autonomy intelligence autonomous intelligent decision making facilities needed inference problem solving reasoning time learning teacher experience simulation 
sophisticated exception processing needed just errors manage uncer tainty example averaging erroneous results allowing retries see 
robust error handling recovery fault tolerance essential 
robotics oriented programming language abstractions provide domain specific data program abstractions including libraries operators variety types basic number string enumerated logical types oriented types time probabilities modern compound structures lists sets dictionaries tuples class functions 
types tuned analog digital data domains specific robotics include positions orientations geometry transforms geometric paths interpolation path planning control dimensional objects maps sensory data vision signal processing kinematics statics dynamics force control temporal reasoning learning artificial intelligence 
infrastructure bring robotic systems developed different domains enabling common tools interoperability reuse 
sound foundations founded robot languages provide possibility verifying accuracy safety characteristics robot software functional languages 
robot programs generated requirements specification 
hri component rich set human interaction modes robot systems need comprehensive interaction techniques including graphical user interfaces speech gesture interaction screen graphical visualisation robot real simulated behaviour electronically augmented visual representations haptic interaction 
robot components primarily designed interaction robot systems need find recognise track humans interact need facilities cooperating humans physically manipulate objects 
robot model reason human programmer intentions able recognise plans human 
interactive programming tools development environment provide typical full set tools including intelligent editing program stepping breakpoints browsing code data dynamic tracing intelligent logging monitoring 
robot systems human interacts directly robot tools integrated direct hri example programming teaching techniques guiding demonstration instruction text generation text skeleton see 
times programmer manipulate robot directly teleoperation varying degrees local autonomy robot depending bandwidth latency communication link 
interactive system provide virtual collaboration facilities metaphors working distance groups programmers groups robots 
virtual world provided simulations enhance programming environment providing information interaction example collaboration programmers robots locally 
robot information database interactive tools allow users create store manipulate representations robots objects environments robot locations paths convenient way 
example enabling programmer easily name paths objects locations robot manipulate follow 
infrastructure component authors describe systems strong architectural decisions necessary software production settings 
focuses reuse researchers easily accessible infrastructure 
software components eventual goal usually don know create research matured standard forms 
infrastructure enable experimentation 
low level infrastructure accommodate different languages platforms promote collaboration software reuse leverage projects 
higher level infrastructure services ideally architecturally neutral may experiment different architectural styles 
possible program different levels sensor actuator control geometry planning problem solving simulation levels strong barriers levels 
example low level events may important highest level 
components robot programming system includes robot localisation coverage navigation robot arm control speech command recognition environment modelling visualisation machine learning problem solving systems teaching robots 
projects include development underlying infrastructure robot programming systems associated simulation visualisation tool discussed 
distributed robot programming application infrastructure evan woo layer corba service broker application architecture provides distributed programming infrastructure including tests robots ranging single microcontroller lego khepera considerably sophisticated platform 
improve integration leverage projects 
adopts corba application architecture comprising layers application infrastructure services middleware 
application layer contains components developed researchers registered services 
infrastructure services layer broker corba trader specification 
broker provides protocol services query facilities clients 
middleware layer handles communications services 
implementation includes robot services khepera lego robots service broker remote robot control application plus web enabled version 
real time facilities included 
issues overcome particular orb compatibility performance busy network application infrastructure provides framework researchers 
robot simulation visualisation tool lix tr graphical simulation visualisation tool aims help humans visualise robot behaviours operating different environments 
integrated broader robot programming environment supported service architecture mentioned 
tool display robot model controlled robot behaviour state art game engine render virtual world giving accurate perspective behaviour robots virtual environment 
tool uses registered services control simulated robots 
tool register simulation service robotic applications tool intervention human 
simulation accessed researchers time robots controlled behaviours possibly research group 
addition simulation recorded replayed 
performance measurements show simulation robots typical behaviour environment 
design development robot programming environments face considerable barriers creating convenient human robot interaction programming 
rich set programming components needed sophisticated human robot interaction techniques programming broad set distributed infrastructure components 
goal design build comprehensive versatile system programming robots 
chen zelinsky programming demonstration removing sub optimal actions partially known configuration space proc ieee intl 
conf 
robotics automation icra vol 
may pp 

kimura ikeuchi generation task model integrating multiple observations human demonstrations proc ieee intl 
conf 
robotics automation icra vol 
may pp 

dai hager peterson specifying behavior proc ieee intl 
conf 
robotics automation icra vol 
may pp 

hardin wiley getting dirty device level programming real time specification java object oriented real time distributed computing 

proc 
fifth ieee international symposium pp 

wu time mobile robots programmable proc 
ieee int 
conf 
robotics automation icra vol 
april pp 

peterson hager composable robot controllers computational intelligence robotics automation 
proc ieee international symposium pp 

hudak courtney nilsson peterson arrows robots functional reactive programming summer school advanced functional programming oxford university ser 
lecture notes computer science 
springer verlag appear 
bischoff style guide icon programming robot human interactive communication 
proc 
th ieee international workshop pp 

lego lego com eng products ris asp 
robot behavior engineering dd designer robotics automation 
proc icra 
ieee international conference vol 
pp 

miller object oriented environment robot system architectures ieee control syst 
mag vol 
pp 
february 
hayes roth pfleger balabanovic domain specific software architecture adaptive intelligent systems ieee trans 
software eng vol 
pp 
april 
coste mani re language environment specification validation control robotic missions proc 
iros intelligent robots systems vol 
september pp 

schneider chen pardo component real time programming system proc 
ieee int 
conf 
robotics automation icra vol 
may pp 

light architecture real time mobile robotics proc iros intell robots sys vol 
pp 

winter wilson hart design distributed software architecture intelligent planning system iee proceedings control theory applications vol 
pp 
march 
beck anderson garner applying component software architecture robotic applications ieee trans 
robot 
automat vol 
pp 
june 
kuniyoshi predn achieving efficiency code re usability programming system complex robotic applications proc 
ieee int 
conf 
robotics automation icra vol 
april pp 

chatila gen en om tool specification implementation operating modules distributed robot architecture proc 
iros intelligent robots systems vol 
september pp 

schlegel rz software framework implementing sensorimotor systems proc 
iros intelligent robots systems vol 
pp 

www org 
miro middleware mobile robot applications ieee trans 
robot 
automat vol 
pp 
aug 
schmidt adaptive communication environment ace online 
available www cs wustl edu schmidt ace html mca online 
available mca sf net claraty robotics jpl nasa gov tasks claraty homepage html 
cox gehani exception handling robotics ieee computer vol 
pp 
march 
nilsson hager functional reactive robotics exercise principled integration domain specific languages proc 
fourth acm sigplan conf 
principles practice declarative programming october 
navarro leveson model robotic software control system digital avionics systems 

th conference vol 
pp 

czarnecki eisenecker generative programming methods tools applications 
addison wesley 
lewis macdonald machine learning conditions exploiting pedagogical behavior proceedings ai cs limerick ireland september 
sheridan plan recognition generalization command languages application telerobotics ieee trans 
syst man cybern vol 
pp 
march april 
summers grossman experimental system programming robots example international journal robotics research vol 
pp 

macdonald pauli adaptive robot training programming guiding journal intelligent manufacturing systems vol 
pp 

macdonald systems knowledge acquisition vol 
pp 
december 
yuen macdonald evaluation sequential monte carlo technique simultaneous localisation map building proc 
ieee int 
conf 
robotics automation icra taipei may appear 
natural landmark localisation system panoramic images proc 
ieee int 
conf 
robotics automation icra vol 
washington dc may pp 

comparison extended kalman filtering sequential monte carlo technique simultaneous localisation map building proc 
australian conference robotics automation auckland new zealand november 
considerations mobile robot implementation panoramic stereo vision system single optical centre proc 
image vision computing new zealand auckland new zealand november pp 

wong macdonald topological coverage algorithm mobile robots international conference intelligent robots systems iros las vegas october appear 
macdonald learning planning understanding human instructions proceedings machine learning workshop ai gi vi banff alberta canada may pp 
vii vii available research report department computer science university calgary university drive nw calgary alberta canada 
sch ler macdonald learning repetition string transformations proceedings tenth canadian artificial intelligence conference 
canadian society computational studies intelligence may pp 

macdonald distributed architecture problem solver proceedings th hawaii international conference systems sciences maui january pp 
emerging paradigms intelligent systems decision support knowledge systems track 
woo macdonald tr distributed mobile robot application infrastructure international conference intelligent robots systems iros las vegas october appear 
tr graphical simulation visualisation tool distributed mobile robotics applications master thesis university auckland new zealand 
tr developing intelligent robots computer games proc 
australian conference robotics automation auckland new zealand november poster 
supervised bruce macdonald 
