minimal hierarchical collision detection gabriel zachmann university bonn cs uni bonn de novel bounding volume hierarchy allows extremely small data structure sizes performing collision detection fast classical hierarchical algorithms cases 
hierarchical data structure variation axis aligned bounding box trees 
addition memory efficient constructed efficiently fast 
propose criterion construction bv hierarchies formally established previous heuristics 
idea argument general applied bounding volume hierarchies 
furthermore describe general optimization technique applied hierarchical collision detection algorithms 
describe box overlap tests exploit special features new bv hierarchy 
compared experimentally dop tree benchmark suite real world cad data 
keywords interference detection virtual prototyping hierarchical partitioning hierarchical data structure shape approximation physically modeling trees 
fast exact collision detection polygonal objects undergoing rigid motions core simulation algorithms computer graphics 
particular virtual reality applications virtual prototyping need exact collision detection interactive speed complex arbitrary polygon 
fundamental problem dynamic simulation rigid bodies simulation natural interaction objects haptic rendering 
important vr system able simulations interactive frame rates 
feeling extended vrst version immersion usability vr system impaired 
requirements collision detection algorithm virtual prototyping real time situations assumption input convexity topology cad data usually behaved assumptions estimations position moving objects 
polygon numbers high usually range polygons object 
performance collision detection hierarchical bounding volumes depends factors tightness bounding volumes bvs influence number bounding volume tests simplicity bounding volumes determines efficiency overlap test pair bvs glm :10.1.1.35.3436
algorithm sacrifice tightness fast overlap test 
hierarchical data structure tree boxes axis aligned object space 
leaf encloses exactly polygon object 
classical aabb trees children box positioned arbitrarily call data structure restricted boxtree just boxtree 
allows fast overlap tests simultaneous traversal boxtrees 
restriction place relation child parent box node tree needs little memory build store hierarchies large models little memory 
important number polygons rendered interactive frame rates increase currently faster moore law predict 
propose efficient algorithm constructing boxtrees 
important virtual prototyping manufacturing industries want applications compute auxiliary derived data startup time need stored product data management system 
algorithm boxtrees constructed load time geometry high complexities 
order guide top construction bounding volume hierarchies criterion needed determine split set polygons associated node 
formal argument previous heuristics derive criterion yields hierarchies respect collision detection 
idea argument generally applicable hierarchical collision detection data structures 
propose general optimization technique applied hierarchical collision detection algorithms 
new bv hierarchy speed ray tracing occlusion culling aabbs 
rest organized follows 
section gives overview previous 
new data structure algorithms introduced section section describes efficient computation boxtrees 
results section 
related bounding volume trees efficient data structure tackle problem collision detection rigid bodies 
hierarchical spatial decomposition bounding volume data structures known computational geometry geometrical data bases ray tracing long time 
trees octrees ps trees bkss obb trees ak 
collision detection sphere trees explored hub pg 
glm proposed algorithm fast overlap tests oriented non axis parallel bounding boxes obbs :10.1.1.35.3436
showed obb tree converges rapidly shape object aabb tree downside expensive box box intersection test 
addition heuristic construction obb trees glm just splits median longest side obb :10.1.1.35.3436
dop trees applied collision detection zac 
aabb trees studied zac lam 
data structures quite efficiently practice memory usage considerably higher needed hierarchy sphere trees 
hierarchical convex hulls proposed collision detection proximity queries el 
showing excellent performance memory footprint data structure larger previously cited ones 
increased optimization techniques authors propose collision detection algorithm 
lock car body empty border space nodes aabb tree little empty space parent sides 
non hierarchical approaches try subdivide object space instance voxel grid mpt delaunay triangulation gei 
particular non hierarchical approaches promising collision detection deformable objects abg hmb fl 
regarding name data structure point bcg theoretical results class bounding volume hierarchies called boxtree 
data structure substantially different provide run time results 
bounding volume hierarchies areas nearest neighbor search ray tracing 
point trees ddg shown cut produces optimal trees context nearestneighbor searches 
rule apply collision detection 
data structure algorithms hierarchical bv data structures objects general algorithm scheme quickly discard sets pairs polygons intersect traverse overlap return leaves return intersection primitives enclosed children traverse splitting planes lower child upper child child nodes obtained parent node splitting side 
drawing shows case parent lower upper child coplanar splitting planes 
hierarchical collision detection algorithms implement traversal scheme way 
allows quickly zoom pairs close polygons 
characteristics different hierarchical collision detection algorithms lie type bv overlap test pair nodes algorithm construction bv trees 
introduce type bv algorithms check overlap 
restricted boxtrees bv hierarchy node bv associated completely contains bvs children 
usually parent bv tight possible 
binary aabb trees usually means parent box touches child box sides 
pursued observation aabb tree representative objects measured empty space nodes parent nodes 
shows half nodes volume empty space bounding box parent bounding box 
reason closeness child parent box directions way split set polygons 
course imagine splitting procedures lead boxtrees exhibiting property 
usefulness construction schemes questionable 
consequently waste memory computations collision detection stored full box node 
hierarchy stores nodes side excluded calculation side construction performed split 
bv hierarchy bytes flops restr 
boxtree restr 
boxtree restr 
boxtree sphere trees aabb tree obb tree dop tree table table summarizes amount memory node needed various bv hierarchies number floating point operations node pair worst case collision detection 
number bytes includes pointer children 
optimization technique section applied flops counts reduced factor boxtrees 
box explicitly 
node stores plane perpendicular axes possible amount data needed represent box sufficiently different parent box 
store plane float representing distance sides parent box see 
reason clear 
addition axis stored bits need distinguish cases node box lies lower side upper side plane upper lower defined local coordinate axes object box hierarchy restricted sides call restricted boxtree 
obviously restriction nodes boxtree hierarchy slightly tight regular aabb tree 
see hurt collision detection performance 
contrary resulting hierarchical data structure allow fast traversal 
observation aabb trees probably true hierarchies utilizing kind axis aligned bv dops 
dop tree hierarchy built heuristics proposed zac proposed obb trees glm half sides child dop touch corresponding side father dop fact subset :10.1.1.35.3436
technique proposed testing overlap applied 
section describe detail algorithm construct restricted boxtree 
picture resulting hierarchy cross trees aabb trees 
value axis needs recomputed overlap test 
reduced version separating axis test compromise number false positives computational effort 
box overlap tests basic step hierarchical collision detection algorithm overlap test nodes hierarchy 
usually contradictory requirements fast return false positives 
describe variations algorithm test overlap restricted boxes exploiting special properties restricted boxtree 
algorithms assume boxes coordinate frame box respect object space 
axis alignment axis aligned boxes offer probably fastest overlap test idea overlap test enclose axis aligned box test axis aligned 
show done minimal computational effort restricted boxtrees 
know parent boxes overlap test proposed 
notice need compute values axis 
reused parent box 
notice need perform operation derive box parent box 
assume derived parent box splitting plane perpendicular axis distance away corresponding upper side parent box lower child 
requirements somewhat related ones type bv allow fast overlap tests tight possible 
sets requirements expressed total cost function interference detection bv bv tr tr glm :10.1.1.35.3436
computed parent axis aligned box denote 
computed see cb cb similarly upper child computed cb cb analogously new value axes computed 
addition saving lot computations save half comparisons overlap tests aligned boxes 
notice need compare pairs coordinates status changed 
example comparison need axis overlap coordinates box note decision computing course comparisons precomputed traversal check precomputed boolean value 
method needs floating point operations mul 
add 
comp 
checking overlap pair nodes restricted boxtree 
lookup tables fixed complete traversal boxtrees range known traversal computations possibly sped lookup table 
traversal compute lookup tables entries table component traversal term form cb replaced integer splitting axis 
see results discussion 
separating axis test separating axis test sat different way look linear separability convex polytopes convex bodies disjoint find separating plane equivalent finding axis bodies projected axis yielding line intervals disjoint separating axis 
boxes glm shown suffices consider axes :10.1.1.35.3436
apply test nodes restricted boxtree 
previously need compute line intervals scratch 
modify ends line intervals different ones parent 
candidate separating axes assume lower box see 
lower box compute analogously upper box 
course precompute possible products advantage test precise false positives 
disadvantage test axes perpendicular edge edge cross products 
instance order update line intervals separating axes need multiplication 
possible edge edge axes 
fact test axis alignment considered variant separating axis test special subset axes considered full set 
total method needs flops worst case higher method flops worst case obbs 
sat lite seen section candidate axes obtained possible cross products edge orientations lend nice optimizations 
natural choice subset axes set axes consisting coordinate axes resp 
see 
proposed called sat lite :10.1.1.26.2046
apply idea restricted boxtrees show computational effort saved 
variant viewed variant executed times coordinate frame 
total operation count 
optimizations section describe techniques improve speed restricted boxtrees hierarchical collision detection general 
optimization technique general applied algorithms hierarchical collision detection overlap test pair nodes involves node specific computations performed independently node opposed pair specific computations 
examples matrix multiplication node obb hierarchy traversal computations needed axis alignment separating axis intervals restricted boxtree traversal 
idea shift node specific computations level traversal 
assume costs node pair overlap test consist node specific part overlap test specific part costs pair overlap pairs children need checked 
compute node specific computations visiting pass children pairs reduces costs node specific computations applied hierarchies node specific costs hierarchy difference larger vs depending actual proportions result dramatic savings 
case restricted boxtrees overlap test axis alignment technique reduces number floating point operations worst case course happens exactly half node pairs visited simultaneous traversal 
multiplications additions comparisons 
case restricted boxtrees suggests store splitting plane offset node parent node holds splitting planes 
additional advantage spend storage leaves triangle information proper restricted box available 
technique implemented collision detection code identified general optimization technique hierarchical collision detection 
usual arrange children common parent node contiguously memory need keep pointer parent children 
necessity hierarchies nodes large net memory footprint save considerable memory restricted boxtrees 
construction boxtrees performance hierarchical collision detection depends traversal algorithm crucially quality hierarchy construction algorithm 
algorithm pursues top approach usually produces hierarchies allows efficient construction 
researchers pursued bottom approach bcg insertion method gs bkss 
general criterion top construction bv hierarchies consists steps set polygons computes bv chosen type covering set polygons splits set number subsets usually 
describing construction algorithm derive general criterion guide splitting process hierarchy produced sense fast collision detection 
expected costs node pair condition determined collision detection need traverse hierarchies 
assuming binary trees unit costs overlap test expressed children resp probability pair visited condition pair visited 
possible locus anchor points estimating volume minkowski sum bvs derive estimate cost split set polygons associated node 
optimal construction algorithm need expand leaves 

find minimum 
interested finding local criterion approximate cost function discarding terms corresponding lower levels hierarchy gives 
derive estimate probability 
sake simplicity assume aabbs bvs 
similar arguments hold kinds convex bvs 
event box intersecting box equivalent condition anchor point contained minkowski sum situation depicted 
child know anchor point lie minkowski sum anchor anchor 
chosen lower left corner anchor point arbitrary course minkowski sum invariant translation 
inside inside know arbitrary convex bvs probability overlap vol vol vol vol case aabbs safe assume aspect ratio bvs bounded 
consequently bound volume minkowski sum vol vol vol vol vol vol vol vol vol estimate volume minkowski sum boxes vol vol vol yielding vol vol vol vol vol vol committed earlier step recursive construction equation minimized minimizing vol vol 
criterion constructing restricted boxtrees 
algorithm criterion derived recursion step try split set polygons cost function minimized 
done trying find splitting coordinate axes selecting best 
axis consider cases subsets form lower boxes respect parent upper boxes upper lower box 
case try find seed polygon subsets close possible outer border perpendicular splitting axis 
second pass consider polygon turn assign subset volume increased 
order prevent greediness happens instance sequence polygons happens ordered polygon increases subset volume just little bit subset gets polygon assigned 
sphere car lock plot shows build time restricted boxtrees various objects 
run alternatingly array polygons 
alternative access random order splitting candidates obtained axes just pick total volume subsets 
algorithm criterion propose applied construct hierarchies utilizing kinds bvs obbs dops convex hulls 
suspect volume aabbs fairly estimate volume respective bvs 
tried variant algorithm considers axis cases axis 
axis corresponding longest side current box 
experiment motivated result trees ddg 
result see section 
current implementation splitting planes children coplanar 
explored full potential allowing perpendicular splitting planes 
algorithm proven geometrically robust error propagation 
simple epsilon guard comparisons suffices 
complexity complexity constructing boxtree log number polygons 
supported experiments see section 
algorithm takes constant number passes polygons associated node order split set polygons pass linear number polygons 
split produce subsets cn 
words polygon gets visited exactly cn times level 
assuming log levels total levels log 
objects test suite 
left right body car car lock car door torus 
data courtesy vw bmw door lock distance sat full sat lite axis benchmark procedure computes average collision detection time range distances object test suite 
example objects polygons door lock polygons algorithm sat lite 
comparison different overlap tests pairs boxtree nodes shows sat lite test offer best performance 
results memory requirements different hierarchical data structures compared calculating memory footprint node binary tree leaves nodes 
table summarizes number bytes node different bv hierarchies inner nodes considered leaf nodes store information polygon bv 
table compares number floating point operations needed node node overlap test methods described fast hierarchical collision detection algorithms obb dop sphere tree 
course imply actual performance algorithms 
results obtained pentium iii ghz mb 
algorithms node memory consumption sensible measure comparing ary trees provided bvh stores number polygons leaf 
implemented top scene graph 
compiler gcc 
timing performance algorithms set cad objects varying complexities see plus synthetic objects sphere torus 
benchmarking performed scenario identical objects positioned certain distance start 
distance computed centers bounding boxes objects objects scaled uniformly fit cube size performs full tumbling turn axis fixed large number small steps 
step collision query done average collision detection time complete revolution distance computed 
decreased new average collision detection time computed 
shows example output benchmarking procedure objects 
order get better overview comparing different algorithms sum dop tree boxtree dop tree boxtree lock dop tree boxtree car dop tree boxtree torus runtime comparison restricted boxtree dop tree various objects polygon complexities 
plot average time taken range distances usually occur practical applications physically simulation 
compares performance various box overlap tests section cad objects 
similar results obtained objects suite 
full separating axis test determine overlap boxes false positives computational effort worth axis aligned boxes arrived similar general aabb trees 
experiments sat lite offers best performance variants 
runtime comparison boxtree algorithm dop trees various objects 
boxtrees offer performance needing memory 
result puts restricted boxtrees league dop trees zac obb trees glm :10.1.1.35.3436
sake brevity omitted experiments assessing performance lookup table approach 
turned lookup tables offer speedup slower non lookup table version lower polygon complexities setup time tables 
reason floating point integer arithmetic operations take number cycles current cpus 
shown section boxtrees built 
reveals constant small boxtrees constructed startup time application 
proposed new hierarchical bv data structure restricted boxtree needs arguably possible amount memory bv trees performing fast dop trees 
uses axis aligned boxes nodes tree store explicitly 
just stores update information node uses instance factor memory obb trees 
order construct restricted boxtrees developed new algorithm runs number polygons process polygons second ghz pentium iii 
propose better theoretical foundation criterion guides construction algorithm splitting procedure 
basic idea applied bv hierarchies 
number algorithms developed fast collision detection utilizing restricted boxtrees 
gain efficiency special features bv hierarchy 
benchmarking shown perform consistently better 
optimization techniques increases performance new collision detection algorithm 
important applied hierarchical collision detection algorithms significantly improve performance 
suite cad objects comparison dop trees suggested performance restricted boxtrees fast cases 
bv trees rigid objects open issue extend data structures accommodate deforming objects 
new bv hierarchy queries ray tracing occlusion culling 
interesting evaluate application domains 
stated bv trees binary trees 
es observed arities yield better performance 
parameter optimized constructing boxtrees 
far approximated cost equation order level 
approximating higher order possibly arrive kind look ahead criterion construction algorithm result better hierarchies 
voss patient responsive help converting models 
abg pankaj agarwal guibas hershberger zhang 
deformable free space tiling kinetic collision detection 
proc 
th workshop algorithmic 
robot 
appear 
ak kirk 
survey ray tracing acceleration techniques 
ray tracing glassner ed pages 
academic press san diego ca 
isbn 
bcg gill barequet bernard chazelle leonidas guibas joseph mitchell tal 
boxtree hierarchical representation surfaces 
computer graphics forum september 
issn 
bkss beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
proc 
acm sigmod conf 
management data pages 
ddg dickerson duncan goodrich 
trees better cut longest side 
lncs esa pages 
el stephan ming lin 
accurate fast proximity queries polyhedra convex surface decomposition 
computer graphics forum vol 
pages 
issn 
es jens eckstein 
dynamic collision detection virtual reality applications 
proc 
th int conf 
central europe comp 
graphics vis 
interactive digital media wscg pages 
university west czech republic february 
fl susan fisher ming lin 
fast penetration depth estimation elastic bodies deformed distance fields 
proc 
international conf 
intelligent robots systems iros 
gei bernhard geiger 
real time collision detection response complex environments 
computer graphics international 
geneva switzerland june 
glm stefan gottschalk ming lin dinesh manocha :10.1.1.35.3436
obb tree hierarchical structure rapid interference detection 
siggraph conference proceedings holly rushmeier ed pages 
acm siggraph addison wesley august 
held new orleans louisiana august 
gs jeffrey goldsmith john salmon 
automatic creation object hierarchies ray tracing 
ieee computer graphics applications may 
hmb huh dimitris metaxas norman badler 
collision resolutions cloth simulation 
ieee computer animation conf 
seoul korea november 
hub hubbard 
approximating polyhedra spheres time critical collision detection 
acm trans 
graph july 
james klosowski martin held mitchell henry karel 
efficient collision detection bounding volume hierarchies dops 
ieee transactions visualization computer graphics january 
lam thomas larsson tomas mller 
collision detection continuously deforming bodies 
eurographics pages 
short presentation 
mpt william kevin james troy 
degrees freedom haptic rendering voxel sampling 
proceedings siggraph pages august 
isbn 
held los angeles california 
pg palmer 
collision detection animation sphere trees 
computer graphics forum june 
issn 
ps preparata shamos 
computational geometry 
springer verlag rd ed october 
isbn 
van den bergen 
efficient collision detection complex deformable models aabb trees 
journal graphics tools 
zac gabriel zachmann 
real time exact collision detection interactive virtual prototyping 
proc 
asme design engineering technical conferences 
sacramento california september 

cie 
zac gabriel zachmann 
rapid collision detection dynamically aligned dop trees 
proc 
ieee virtual reality annual international symposium vrais pages 
atlanta georgia march 

