current issues software engineering natural language processing jochen leidner school informatics university edinburgh buccleuch place edinburgh eh lw scotland uk 
jochen leidner ed ac uk natural language processing nlp research results software engineering software technology neglected 
describes factors add complexity task engineering reusable nlp systems conventional software systems 
current area design patterns composition languages described claimed relevant natural language processing 
benefits nlp barriers reuse outlined dichotomies system versus experiment toolkit versus framework discussed 
argued order live name language engineering neglect component quality architectural evaluation reporting new nlp research 
notoriously difficult construct conventional software systems systematically timely sommerville industrial development projects failing 
natural language processing nlp applications author aware studies estimate project failure rate 
risks failure higher area language engineer faces additional complexity accuracy 
fundamental difference nlp systems conventional software incompleteness property current language processing techniques guarantee provide correct results system design affected having take account providing appropriate fallbacks 
efficiency 
human users demanding shneiderman reports system response times render system unacceptable 
debated dimensions language engineering complexity 
scenarios natural language interaction machines superior menus keyboard commands means 
date unclear efficiently nlp systems efficiency top priority research questions related software design technology considered mere 
contrast areas computing data structures algorithms carefully selected customized maximum gain domain learning partition problem classes seen part knowledge acquisition process attacking problem 
productivity 
time scarce resource 
research environments produce prototypes demonstrate feasibility method leave efficient complete implementation industrial exploitation 
industry time pressing re implementation prototype production system doesn happen 
research productivity loss occurs lack knowledge exist ing resources lack trust non house components inability install integrate existing software 
price licensing concerns play role 
argued software engineering techniques improve productivity researchers little initial investment 
section relates short term productivity long term gains choice building framework carrying experiment 
flexibility 
software nlp systems need flexible parser developed primarily analyze written online newspaper text employed tomorrow process business mails 
different data formats handled representational input output knowledge needs factored core linguistic processing knowledge 
section describes design patterns help nlp regard section gives example leads flexibility 
robustness 
engineering robustness refers device ability varying conditions 
language engineering terms robustness portability obtained narrow meaning typically describe viability linguistic method applied different text types domains terms precision recall 
decrease robustness sense means soft degradation complete system failure 
type failure needs handled working system accuracy decreases performance subtle difficult detect 
scalability 
nlp system deployed usually needs run distributed fashion cope large number users documents 
complexity observed runtime memory results reported 
engineering scenario space runtime limits specified advance product management lead architects techniques selected properties consistent requirements 
nlp components rely components resource demands high compared system nlp component part text editor 
multimodality 
language engineer applying parser investigate discourse structure th century novels encounter challenges colleague trying apply speech dialogs absence letter case information 
different modalities idiosyncrasies difficult factor necessary trend multi modal systems intra system reuse requires high degree adaptability 
data sparseness 
current nlp methods cf 
forthcoming special issue natural language robustness journal natural language engineering 
data driven means rely availability potentially large number training examples learn 
training corpora typically expensive virtually non existent data resource bottleneck 
holds multilingual scenario 
insufficient training data yields unacceptable accuracy 
multilinguality 
world users want system multiple languages 
issue conventional software independence character encodings different lexicographic sorting orders display numbers dates 
need ensured translations iconic textual messages user currently preferred language interaction localization provided 
nlp applications complex grammars lexicons rule sets statistical models language specific need re created new target language cost significant proportion total nlp sub system budget 
heterogeneous components different suppliers incompatible linguistic software paradigms integrated 
maynard forthcoming argue convincingly architectural support improve predictability construction process 
reuse need reuse nlp global amount reuse low currently activities community en large focus reuse data resources annotation standards data repositories ldc 
software side despite similar efforts declerck reuse rate low partially difficulty integration high underestimated instance developers different implementation languages deprecated environments diverse paradigms 
especially far developers language engineering components put effort designing defining api 
olsson 
re implementation integration cause major productivity loss 
properties lead reuse productivity loss avoided 
researchers build prototypes sound application programming interfaces apis input output separated core functionality 
workings algorithms clearer re usability increased applications different assumptions data formats 
potential lack error handling caused time pressure restricted prototype application shell impairing core code 
main ltg muc hybrid muc named entity recognizer maximum entropy classification english chunk parser hmm english pos tagger maximum entropy english sentence splitter tokenizer english text lt ttt suite xml sgml aware tools building fsgmatch deterministic finite state transducer construction toolkit remove sgml markup text sgml replacement tool sgml stream editor lt xml ltg xml api table sgml aware nlp tools university edinburgh language technology group 
principle design dissect problem domain set highly cohesive components interact loosely coupled fashion sommerville 
barriers reuse reuse software components blocked factors including lack knowledge existing components lack trust component quality mismatch component properties project requirements unacceptable licensing policies patent cost issues 
political issues include investment needed package reusable components budget provided 
technical issues contain software platform incompatibility dependencies installation difficulties lack documentation support inconsistencies modules 
considering nlp components specific formalisms linguistically compatible 
components differ language coverage accuracy efficiency 
linguistic components black box integration particularly tricky technique internally unknown component break case domain changed domain specific rules training 
problem posed fact different paradigms perform sub tasks different levels disambiguation 
case sensitivity case awareness problematic 
code reuse toolkits edinburgh language technology group nlp tools mikheev comprise set programs rely common lt xml api annotate text cascading deterministic finite state transducers table 
www ltg ed ac uk software xml semi ergodic blackboard pipeline blackboard global architectural choices 
tools typically sequential unix pipeline top 
integrated query language allows selective processing parts xml sgml document instance tree 
major advantage ltg pipeline toolkit approach frameworks described maximal decoupling components communication means data exchange fat xml pipe toolkit specific glue code needs developed developers programming language choice 
disadvantage repeated xml parsing components may time consuming production scenario 
code design reuse frameworks framework collection pre defined services embody certain organization user extend functionality provided frameworks impose certain organizational principles developer 
general architecture text engineering gate theory neutral framework management integration nlp components documents operate cunningham cunningham bontcheva cunningham maynard forthcoming 
gate compliant tipster architecture grishman contains example system annie freely available including source java open languages due underlying unicode 
data type annotating text spans provided allows generic visualization editing components graphical plug play development environment 
gate ac uk developers sample component toolbox 
zajac tipster compliant architecture implemented java see basili comparison 
whiteboard project uses monotonic xml annotation integrate deep shallow processing middle 
closest coupling takes place architectures components allowed talk german verbmobil speech translation system 
advanced language engineering platform early framework focused multilinguality 
offers hpsg typed avm unification formalism parsers infrastructural support 
ls gram project build analyzers languages 
criticized committed particular approach linguistic analysis representation cunningham 
text handling component declerck uses particular sgml annotation enriched user defined tags 
standard components provided rules allow mapping sgml tags avms lifting sri open agent architecture oaa martin cheyer martin software platform offers library distributed agent implementation bindings programming languages java lisp prolog 
agents request services service agents facilitation coordinating service procedure transparent delegation facilitators consider strategic knowledge provided requesting agents trying distribute optimize goal completion 
control specified prolog interagent communication language icl contains separates declarative procedural knowledge 
discussion framework toolkit 
disadvantage frameworks infrastructure bound steep learning curve write wrapper glue code understand control developers reluctant adopt existing frameworks 
frameworks excludes due inherited design dogma 
toolkits hand typically smaller easier adopt frameworks allow freedom respect architectural choices course flip side coin toolkits offer guidance reuse architecture infrastructure 
see www ai sri com oaa menzel discussion architectural issues nlp 
design reuse design patterns design patterns gamma harrison reusable units software architecture design emerged objectoriented software development research certain collaborative object configurations re occur different contexts 
finite state automata fsas historically devices received software engineering treatment watson pervasive compiler technology software engineering 
ammar describe design pattern separates certain facets facilitate interoperability mealy moore hybrid fsas 
manolescu identifies pattern useful abstraction information retrieval natural language processing factory objects knows database 
numerical techniques machine learning overcome curse dimensionality data sparseness singular value decomposition latent semantic indexing principle component analysis pca instances pattern 
worth noting patterns domain specific software engineering aspects interact type linguistic processing 
basili generalize typical nlp components combining data flow diagrams linguistic processing module lm lexical acquisition module lam application module am generic model nlp application 
result lam cunningham call data resource opposed processing resource corresponds lm 
basili uml model class linguistically annotated text interoperable application dependent classes 
productivity gain composition languages 
software engineering focused composition languages nierstrasz allow construct systems meta level specifying composition transformations separate glue notation editing component source code amann 
approach support view held daelemans argue nlp tasks seen productivity pyramid 
light nlp tasks involving disambiguation segmentation locally language level closely related language levels compositions light nlp tasks task surpasses complexity single light nlp tasks 
nlp processing involves generic preprocessing pos tagging taken evidence need dedicated linguistic composition languages 
toolkits frameworks nlp developed date exists dedicated nlp composition language 
language linguistic structures typed avms processing resources taggers tag set mappers order status 
composition languages logical step ongoing development new abstraction layers computing 
experiment system 
depicts trade researchers face deciding carrying experiment building prototype program implementing fleshed self contained system building complete generic toolkit invest long term providing community new framework 
hand experiments ensure high short term productivity hardly reuse projects 
frameworks visual application builder part gate seen visual composition language 
see abelson sussman view programming constant development application growing collection abstraction mechanisms 
may difference orders magnitude complexity tip bottom pyramid 
hand possible larger groups long range funding pay back relatively late offer synergies due embracing nature overcome developers reluctance adopt new framework 
summary evaluation effectiveness nlp methods integral part research papers architectural evaluation neglected 
recognized vital part engineering research publications including assessment standard compliance rapid deployability maintainability flexibility design nyberg 
researchers strive development component apis prototypes foster cross fertilization reuse 
frameworks valuable asset way embody common assumptions toolkits normally inter operable frameworks 
horizon nlp composition languages attractive solution problems productivity reuse 
acknowledgments 
author acknowledge financial support german academic exchange service daad gmbh research contract uk 
harold abelson gerald jay sussman 

structure interpretation computer programs 
mit press cambridge ma nd edition 
uwe amann 

invasive software composition 
springer berlin 
roberto basili massimo di maria pazienza 

engineering systems objectoriented approach 
maria pazienza editor information extraction 
lecture notes artificial intelligence lnai pages 
springer berlin 
bontcheva cunningham tablan maynard saggion 

developing reusable robust language processing components information systems gate 
proceedings third international workshop natural language information systems 
andrew thierry declerck frederik bradley music axel 

linguistic engineering 
proceedings international conference advances natural language processing sofia bulgaria september 
adam cheyer david martin 

open agent architecture 
journal autonomous agents multi agent systems 
frank kiefer krieger mller neumann siegel xu 

integrated architecture shallow deep processing 
association computational linguistics th anniversary meeting acl university pennsylvania philadelphia july 
cunningham wilks gaizauskas 

gate general architecture text engineering 
proceedings th conference computational linguistics coling copenhagen 
cunningham humphreys gaizauskas wilks 

software infrastructure natural language processing 
proceedings fifth conference applied natural language processing anlp pages washington 
cunningham maynard bontcheva tablan 

gate framework graphical development environment robust nlp tools applications 
proceedings th anniversary meeting association computational linguistics acl philadelphia 
cunningham 

software architecture language engineering 
ph thesis department computer science university sheffield sheffield uk 
walter daelemans van den bosch zavrel veenstra sabine buchholz 

rapid development nlp modules memory learning 
proceedings pages 
thierry declerck alexander werner hans 

new edition natural language software registry initiative acl hosted dfki 
proceedings nd international conference language resources evaluation lrec may june athens greece 

thierry declerck 

interface text structures linguistic descriptions 
ellen bradley music editors proceedings june pages denmark 
bjorn fredrik olsson 

experiences language engineering algorithm reuse 
proceedings international conference language resources evaluation lrec 
erich gamma richard helm ralph johnson john vlissides 

design patterns elements reusable objectoriented software 
addison wesley reading ma 
gunther markus jorg hans weber 

research architectures integrated speech language systems verbmobil 
proceedings conference computational linguistics coling copenhagen 
frank 


konzepte und eines 
heidelberg 
ralph grishman 

tipster phase ii design document architecture 
version 
technical report new york university new york 
neil harrison brian foote hans rohnert editors 

pattern languages program design 
addison wesley reading ma 
ken 

information processing 
reilly sebastopol ca 
anton manolescu 

feature extraction pattern information retrieval 
harrison 
harrison pages 
martin cheyer moran 

open agent architecture framework building distributed software systems 
applied artificial intelligence 
diana maynard valentin tablan hamish cunningham cristian horacio saggion bontcheva yorick wilks 
forthcoming 
architectural elements language engineering robustness 
natural language engineering 
special issue robust methods analysis natural language data 
wolfgang menzel 

architecture problem information fusion 
proceedings international symposium natural language processing linguistic inquiry systems engineering pages hamburg 
andrei mikheev claire grover marc moens 

xml tools architecture named entity recognition 
journal markup languages theory practice 
oscar nierstrasz theo dirk 

architecture problem information fusion 
proceedings ecoop workshop models languages coordination parallelism distribution 
eric nyberg 

evaluating qa system multiple dimensions 
proceedings lrec workshop qa strategy resources las palmas gran spain 
ben shneiderman 

designing user interface 
addison wesley reading ma rd edition 
neil marius 

project 
technical report cray systems cec luxembourg 
ian sommerville 

software engineering 
addisonwesley reading ma th edition 


creating worldwide software 
sun microsystems press mountain view ca 
bruce watson 

taxonomies toolkits regular language algorithms 
ph thesis department mathematics computer science eindhoven university technology eindhoven netherlands 
ammar 

finite state machine patterns 
harrison 
harrison pages 
zajac mark casper nigel 

open distributed architecture reuse integration heterogeneous nlp components 
fifth conference applied natural language processing anlp 
