metric index approximate string matching edgar ch avez gonzalo navarro de ciencias matem universidad 
mich 
umich mx 
leave absence universidad de chile 

de ciencias de la computaci universidad de chile 
blanco santiago chile 
dcc uchile cl 
radically new indexing approach approximate string matching 
scheme uses metric properties edit distance applied metric strings 
build metric space sites nodes suffix tree text approximate query seen proximity query metric space 
permits finding occurrences pattern length text length average time log log space log index construction time 
complexity improves far previous methods 
show simpler scheme needing space 
related indexing text permit efficient approximate searching main open problems combinatorial pattern matching 
approximate string matching problem long text length comparatively short pattern length threshold retrieve pattern occurrences text substrings edit distance pattern edit distance strings defined minimum number character insertions deletions substitutions needed equal 
distance applications distances interest 
line version problem pattern preprocessed text 
numerous solutions problem acceptable text long search time proportional text length :10.1.1.21.3112
indexing text approximate string matching received attention 
despite progress decade indexing schemes problem immature 
exist indexing schemes specialized word wise searching natural language text :10.1.1.17.6054
indexes perform quite case supported vii project authors author second author 
extended handle general case 
extremely important applications dna proteins music oriental languages fall outside case 
indexes solve general problem divided classes 
backtracking uses suffix tree suffix array dawg text order factor repetitions :10.1.1.9.8541
sequential algorithm text simulated backtracking data structure 
algorithms take time exponential cases independent text size 
attractive searching short patterns 
partitioning partitions pattern pieces ensure pieces appear alterations inside occurrence :10.1.1.21.2942
index able exact searching detect pieces text areas evidence containing occurrence checked sequential algorithm 
algorithms small 
third class hybrid 
pattern divided large pieces contain errors searched backtracking potential text occurrences checked partitioning methods 
hybrid algorithms effective find right point length pieces search error level permitted 
appropriate partition pattern methods achieve average search time depends tolerate moderate error ratios propose brand new approach problem 
take account edit distance satisfies triangle inequality defines metric space set text substrings 
re express approximate search problem range search problem metric space 
approach attempted cases particularities problem possible index elements :10.1.1.21.3317
general case text substrings 
main contribution devise method suffix tree text meaningfully collapse text substring sets find way build metric space sets 
result indexing method cost requiring average log space log construction time permits finding approximate occurrences pattern log average time 
complexity breakthrough previous easier approaches extend idea distance functions reversals 
represents original approach problem opens vast number possibilities improvements 
consider simpler version index needing space despite involving complexity breakthrough promises better practice 
notation 
string sigma denote length jsj 
denote th character integer 
denote empty string jsj empty string denoted 
string said prefix xy suffix yx substring 
metric spaces describe section concepts related searching metric spaces 
concentrated part relevant 
exist surveys complete information desired :10.1.1.21.3242
metric space informally set black box objects distance function defined satisfies triangle inequality 
problem proximity searching metric spaces consists indexing set query elements set close query quickly 
applications vast number fields non traditional databases concept exact search search similar objects databases storing images fingerprints audio clips machine learning classification new element classified closest existing element image quantization compression vectors represented coded closest representable point text retrieval look documents similar query document computational biology want find dna protein sequence database allowing errors due typical variations function prediction want search similar behavior function past predict probable behavior formally metric space pair xis universe objects theta gamma 
distance function defined returns nonnegative values 
distance satisfies properties reflexivity strict symmetry triangle inequality 
finite subset size juj set objects search 
queries interest metric space interested called range queries query xand tolerance radius find set elements distance formally outcome query fu rg 
goal preprocess set minimize computational cost producing answer plethora existing algorithms index metric spaces focus called pivot ones built single general idea select elements fp called pivots identify element dimensional point distances pivots 
index basically set kn coordinates 
query time map dimensional point 
information hand filter triangle inequality element jd gamma pivot case know need evaluate 
elements filtered rule directly compared interesting feature pivot algorithms reduce number final distance evaluations increasing number pivots 
define max jk jd gamma pivots equivalent discarding elements pivots added need perform distance evaluations exactly compute called internal evaluations hand increases value higher chance filtering elements comparisons elements filtered called external 
follows exists optimum interested number distance evaluations performed total cpu time required scanning elements filter may unacceptable 
case needs multidimensional range search methods include data structures kd tree tree tree :10.1.1.137.9369
structures permit indexing set objects dimensional space order process range queries 
interested metric space universe set strings alphabet sigma distance function called edit distance levenshtein distance 
defined minimum number character insertions deletions substitutions necessary strings equal :10.1.1.21.3112
edit distance fact distance defined best way convert element reflexive strictly positive long zero cost operations symmetric long operations allowed symmetric satisfies triangle inequality 
algorithm compute edit distance ed dynamic programming 
imagine need compute ed 
matrix jxj jyj filled ed jxj jyj ed 
computed gamma gamma min gamma gamma gamma gamma algorithm takes time 
matrix filled column wise row wise sophisticated ways 
reasons clear prefer row wise filling 
space required jyj previous row stored order compute new just keep row update 
text indexing suffix trees widely data structures text processing 
position text defines suffix suffix trie trie data structure built suffixes leaf nodes pointers suffixes stored 
substring traversing path root 
roughly speaking suffix trie leaf represents suffix internal node represents different substring improve space utilization trie compacted patricia tree compressing unary paths 
edges replace compressed path store string represent pointers initial final text position 
unary paths trie called suffix tree nodes worst case trie 
suffix tree directly built time 
algorithm suffix trie simulated cost suffix tree 
call explicit suffix trie nodes survive suffix tree implicit collapsed 
shows suffix trie tree text 
note special endmarker smaller character appended text suffixes external nodes 
text suffix trie suffix tree bra bra ra suffix array fig 

suffix trie suffix tree suffix array text 
shows internal nodes trie numbered italics inside circles represent text substrings appear external nodes numbered inside squares represent text substrings appear just 
leaves represent unique substrings extensions full suffix 
suffix tree internal nodes left represent substring plus prefixes may collapsed 
example internal node suffix tree represents compressed nodes strings br bra 
external node represents full suffix 
suffix array compact version suffix tree requires space poses small penalty search time 
leaves suffix tree traversed left right order suffixes text retrieved lexicographical order 
suffix array simply array containing pointers text suffixes listed lexicographical order shown 
suffix array stores pointer text position 
suffix array directly built building suffix tree log worst case time log log average time 
suffix trees searched tries suffix arrays binary searched 
algorithm suffix trees adapted suffix arrays log penalty factor time cost 
subtree suffix tree corresponds interval suffix array containing leaves subtree 
follow edge suffix trie binary search find new limits suffix array 
example internal node suffix tree corresponds interval suffix array 
note implicit nodes interval representing explicit node 
algorithm indexing straightforward approach text indexing approximate string matching metric spaces techniques problem principle different substrings text index objects unacceptable 
suffix tree provides concise representation substrings text space 
indexing text substrings index explicit suffix tree nodes 
objects indexed metric space edit distance 
explicit internal node represents nodes descend unary path 
explicit node corresponds string xy parent corresponds string represents set strings fxy xy notation just introduced 
example internal node represents strings bra ab abr leaves suffix tree represent unique text substring extensions full text suffix obtained 
unique text substring prefixes unique corresponding suffix tree node explicit leaf represents set fxg 
table shows substrings represented node running example 
note external nodes descend terminator character represent substring represented parent disregarded 
node suffix trie suffix tree node suffix trie tree bra ab ra abr bra br bra bra bra ra ra ra table 
text substrings represented node suffix trie tree 
internal nodes represented 
indexing text substrings index sets strings sets represented explicit internal external nodes suffix tree 
example set bra bra ra bra ra decide index metric space formed sets strings 
options possible concentrated pivot approach 
select random different text substrings pivots 
reasons clear choose select pivots lengths delta delta delta gamma 
explicit suffix tree node pivot compute distance strings represented 
set distances node store minimum maximum ones 
strings form fxy edit distances computed jp time 
example assume selected pivots br cad 
left shows computation edit distances bra cad 
result shows minimum maximum values node respect pivot respectively 
case external suffix tree nodes string tends quite long length average yields high computation time edit distances anyway large value maximum edit distance note ed xy gamma jp 
solve pessimistically assuming maximum distance suffix tree node external 
minimum edit distance jp max jp jxj time necessary consider arbitrarily long strings xy compute matrix row row having processed minimum value seen point considering rows jxj gamma jp row jp gamma jxj jp fig 

dynamic programming matrix compute edit distance cad bra left right 
emphasized area minima maxima taken 
right illustrates case cad 
note compute new set edit distances started parent node suffix tree 
done depth traversal suffix tree saves construction time 
note necessary compute rows measure edit distance strings length length 
distance smaller point minimum equal 
fact just assume maximum minimum maximum value external node pivot 
particular indexing external nodes ed computed indexed jp time 
done suffix tree nodes pivots set minimum maximum values explicit suffix tree node 
regarded hyperrectangle dimensions min ed min ed gamma max ed max ed gamma sure strings lie inside rectangle 
example minima maxima respect 
represented hyperrectangle hand ranges hyperrectangle searching consider query searched errors 
range query radius metric space suffix tree nodes 
pivot algorithms compare pattern pivots obtain dimensional coordinate ed ed 
pivot node 
holds ed min ed ed gamma max ed triangle inequality know ed xy xy 
elimination done pivot fact nodes eliminated rectangle nonempty intersection rectangle ed gamma ed gamma ed ed illustrates 
node contains set points store minimum maximum distance pivots 
define dimensional rectangle distances substring node pivots lie 
query pattern tolerance defines circle distances pivots create hypercube square case width 
square intersect rectangle substring node close node min min max max min max min ed node node ed node max fig 

elimination rule pivots 
solve problem finding dimensional rectangles intersect query rectangle 
classical multidimensional range search problem :10.1.1.137.9369
example variant trees yield data structure secondary memory 
nodes eliminated pivot directly compared minimum distance report occurrences starting points written leaves subtree rooted node matched 
running example searching abr tolerance node qualifies report text positions corresponding tree leaves 
observe order compare suffix tree node edit distance algorithm forces compare prefix 
prefixes correspond suffix tree nodes path root 
order repeat mark suffix tree nodes compare explicitly mark node path root 
backtrack suffix tree entering marked node keeping track edit distance node 
new row computed row parent just done pivots 
avoids recomputing prefixes different suffix tree nodes incidentally similar simplest backtracking approach case follow marked paths 
respect algorithm thought preprocessing backtracking algorithm filters paths 
practical matter note step suffix tree required 
print text substrings match pattern help suffix tree need order report text positions 
sake suffix array cheaper better job text positions listed contiguous interval 
fact suffix array replace suffix tree indexing time 
analysis consider construction cost 
maximum length repeated text substring average height suffix trie log 
recall pivots length 
computing kn minima maxima takes time kn theta log log log time compute distance 
start computation edit distances node row parent 
reduces average construction cost pivot compute dynamic programming row suffix trie node average number nodes suffix trie 
leaves computed jp time 
total space required data structure kn need store explicit node pointer suffix tree coordinates 
suffix tree takes space 
remains determine average search time 
key element analysis constant ff probability random hyperrectangle set fixed coordinate corresponding segment query hypercube intersects corresponding segment hyperrectangle 
way put coordinate query point falls inside hyperrectangle projection coordinate enlarged units dimension 
operational terms ff probability pivot corresponding selected coordinate permit discarding element 
note ff depend part search computation edit distances pivots pattern length takes time 
second part search rectangles intersect query rectangle 
analyses performance trees exist literature 
despite deal exact number disk accesses result expected amount tree variants kdb tree nff log :10.1.1.21.3112
third part direct check pattern suffix tree nodes rectangles intersect query rectangle 
discard random pivots probability discarding node ff suffix tree nodes check average ff nodes total cost ff theta 
cost compute edit distance pattern length candidate length gamma pivot removes shorter longer candidates 
report results time suffix tree traversal 
total average cost bounded nff log nff ff 
optimized log ff log log log ff theta log 
log ff pivots search cost log average 
note influence search radius embedded ff 
better complexity previous obtains mn time 
previous requires omega log obtain approach 
price construction time space log log respectively 
especially prohibitive may content smaller tradeoff space time obtain time need theta log pivots 
indexes require space construction time 
worth mentioning automatically discard internal node length gamma pivot worst case limit oe number suffix tree nodes consider phase 
limit exponential independent indexing schemes suffix tree share property 
practical implementation despite obtained important reduction time complexity respect result hiding multiplying factor depends search radius 
possible constant large ff close approach useless 
extra space requirement increases ff tends unmanageable 
section consider alternative approach simpler obtain better results practice despite involving complexity breakthrough 
indexing suffixes simpler index derives ideas considers text suffixes internal nodes 
suffix represents text substrings starting indexed minimum distance substrings pivot 
point approach reduced space 
set half elements original approach values stored element maximum values 
permits times number pivots previous approach memory requirement 
note need build store suffix array just read suffixes text index 
storage need metric index 
bad point selectivity pivots reduced redundant done 
consequence storing minimum values second consequence factoring repeated text substrings 
substring close appears times check occurrences 
suffix tree structure construction index done time jn follows 
algorithm depicted section compute edit distance modified case minimum edit distance suffix reverse jp reverse jp minimum edit distance jp prefix tn gammaj precisely min ed tn gammaj 
need jp jn time pivot 
space compute just jp doing computation column wise 
index high dimensions space strings distance distribution concentrated mean happens distances pivot suffixes pattern discard suffixes ed min ed suffixes large min ed value discarded storing distances waste space 
memory introduce pivots 
illustrates 
idea fix number pivot store largest min ed values 
suffixes discarded pivot space index ks construction time unchanged 
tree search rectangles cover space coordinates 
selectivity similar discarded uninteresting coordinates tune number versus selectivity pivots space usage ks 
go obtain space follows 
choose pivot determine farthest suffixes 
store list increasing distance order suffixes distance pivot remove consideration 
choose second pivot find farthest suffixes remaining set 
continue suffix included list pivot 
note suffix appears exactly list 
search time compare pivot ed smaller smallest distance list skip list 
traverse list ed smaller element 
traversed suffix directly compared variant idea proven extremely useful deal concentrated histograms 
permits ed ed fig 

distance distribution pivot including pattern grayed area represents suffixes discarded efficient secondary storage implementation packing pivots disk pages storing lists consecutively order pivots 
choose pivots construction time high jp 
space low constant close practice competitive economical structures problem 
search time jp jmn compare pivots time traverse lists difficult analyze 
pivots chosen short minimum distance jp fact pivot longer useless 
specific strings properties complement information metric index knowledge string properties indexing 
example suffix proven distance discard suffixes starting range gamma gamma 
idea compute edit distance reverse pivot reverse pattern 
result learn distances pivot suffixes pattern 
useful discard suffixes verification time ed know index ed gamma match possible 
ideas hybrid algorithms partition pattern search pieces permitting errors implemented metric index suffix tree array 
data structure compete area backtracking algorithms orthogonal 
novel approach approximate string matching problem 
idea give set text substrings structure metric space algorithm range queries metric spaces 
suffix tree conceptual device map text substrings sets strings 
show analytically search complexity better obtained previous price slightly higher space usage 
precisely search average cost log time log space suffix tree best known technique search mn time space 
technique extended distance function strings reversals distance problematic handle previous approaches 
proposal opens number possibilities 
plan explore methods reduce number substrings suffix tree nodes suffixes metric space indexing methods pivots multidimensional range search techniques trees pivot selection techniques took random practical setup needing space described section 
method promises efficient implementation secondary memory trees weak point current approaches 

apostolico 
myriad virtues subword trees 
combinatorial algorithms words nato isi series pages 
springer verlag 

apostolico galil 
combinatorial algorithms words 
springer verlag new york 

baeza yates navarro 
block addressing indices approximate text retrieval 
proc 
acm cikm pages 

baeza yates navarro 
fast approximate string matching dictionary 
proc 
spire pages 
ieee computer press 

baeza yates navarro 
practical gram index text retrieval allowing errors 
electronic journal 
www cl 
baeza yates navarro 
hybrid indexing method approximate string matching 
discrete algorithms 
special issue matching patterns 

beckmann kriegel schneider seeger 
tree efficient robust access method points rectangles 
proc 
acm sigmod pages 

bugnion roos shi widmayer widmer 
approximate multiple string matching spatial indexes 
proc 
st south american workshop string processing wsp pages 

ch avez navarro 
effective clustering algorithm index high dimensional metric spaces 
proc 
spire pages 
ieee cs press 

ch avez navarro baeza yates 
searching metric spaces 
acm comp 
surv 
appear 


fast approximate matching suffix trees 
proc 
cpm pages 
lncs 

crochemore 
transducers repetitions 
theor 
comp 
sci 

faloutsos kamel 
uniformity independence analysis concept fractal dimension 
proc 
acm pods pages 

gaede gunther 
multidimensional access methods 
acm comp 
surv 

gonnet 
tutorial computational biochemistry darwin 
technical report informatik switzerland 

guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages 

jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
mfcs volume pages 

kamel faloutsos 
packing trees 
proc 
acm cikm pages 

levenshtein 
binary codes capable correcting spurious insertions deletions ones 
problems information transmission 

manber myers 
suffix arrays new method line string searches 
siam computing pages 

manber wu 
glimpse tool search entire file systems 
proc 
usenix technical conference pages winter 

mccreight 
space economical suffix tree construction algorithm 
acm 

morrison 
patricia practical algorithm retrieve information coded alphanumeric 
acm 

myers 
sublinear algorithm approximate keyword searching 
algorithmica oct nov 

navarro 
guided tour approximate string matching 
acm comp 
surv 

pagel widmayer 
analysis range queries 
proc 
acm pods pages 

papadias theodoridis 
multidimensional range queries spatial relations 
geographical systems 

robinson 
tree search structure large multidimensional dynamic indexes 
proc 
acm pods pages 

sedgewick flajolet 
analysis algorithms 
addison wesley 

shi 
fast approximate string matching blocks sequences 
proc 
wsp pages 
carleton university press 

sutinen tarhio 
filtration samples approximate string matching 
proc 
cpm lncs pages 

szpankowski 
probabilistic analysis generalized suffix trees 
proc 
cpm lncs pages 

sellis 
model prediction tree performance 
proc 
acm pods pages 

ukkonen 
approximate string matching suffix trees 
proc 
cpm pages 

ukkonen 
constructing suffix trees line linear time 
algorithmica 

white jain 
algorithms strategies similarity retrieval 
technical report vcl visual comp 
lab univ california july 
