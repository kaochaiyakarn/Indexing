developing multiagent systems gaia methodology franco zambonelli nicholas jennings michael wooldridge october dipartimento di scienze dell ingegneria universit di reggio reggio italy 
franco zambonelli school electronics computer science university southampton southampton bj uk 
ecs soton ac uk department computer science university liverpool liverpool zf uk 
wooldridge csc liv ac uk systems composed interacting autonomous agents offer promising software engineering approach developing applications complex domains 
multiagent system paradigm introduces number new abstractions design development issues compared traditional approaches software development 
accordingly new analysis design methodologies new tools needed effectively engineer systems 
background contribution twofold 
synthesize clarify key abstractions agent computing pertain agent oriented software engineering 
particular argue multiagent system naturally viewed architected computational organization identify appropriate organizational abstractions central analysis design systems 
second detail extend gaia methodology analysis design multiagent systems 
gaia exploits aforementioned organizational abstractions provide clear guidelines analysis design complex open software systems 
representative case studies introduced exemplify gaia concepts show effectiveness different types multiagent system 
keywords multiagent systems agent oriented software engineering analysis design methodologies distributed systems software architectures categories subject descriptors software engineering design methodologies artificial intelligence distributed artificial intelligence multiagent systems 
general terms algorithms design 
appear acm transactions software engineering methodology characteristics expectations software systems changed dramatically past years result range new software engineering challenges arisen :10.1.1.19.9750
firstly software systems de facto concurrent distributed expected interact components exploit services dynamically network 
secondly software systems entities stopped restored maintained traditional way 
thirdly natural consequence characteristics software systems tend open exist dynamic operating environment new components join existing components leave continuous basis operating conditions change unpredictable ways 
characteristics apply example semantic web grid computing pervasive environments 
new landscape advocate multiagent systems mass software engineering paradigm designing developing complex software systems :10.1.1.119.2204
mass applications designed developed terms autonomous software entities agents flexibly achieve objectives interacting terms high level protocols languages 
characteristics suited tackling emerging complexities number reasons 
firstly autonomy application components ability agent decide actions take time reflects decentralized nature modern distributed systems considered natural extension notions modularity encapsulation systems owned different stakeholders :10.1.1.119.2204
secondly flexible way agents operate balancing reactive behaviour response environment proactive behaviour achievement design objectives suited dynamic unpredictable situations software expected operate :10.1.1.119.2204
high level dynamic nature multiagent interactions appropriate open systems constituent components interaction patterns constantly change 
case new software engineering paradigm successful widespread deployment complex software systems mass requires new models technologies identification appropriate set software engineering abstractions 
abstractions serve system identification analysis providing basis methodologies enable developers engineer systems robust reliable repeatable fashion 
years attempts identify appropriate abstractions mass develop software engineering methodologies accordingly 
tuned specific systems agent architectures lacks generality defined simple extension existing object oriented methodologies dependent abstractions tools unsuitable modeling agent systems :10.1.1.53.3254
background number proposals attempted define complete general methodologies built agent specific abstractions specifically tailored analysis design mass 
methodologies adopt different terminologies provide different abstractions recognize process building mass radically different process building traditional software systems 
particular recognize varying extents idea mas conceived terms organized society individuals agent plays specific roles interacts agents protocols determined roles involved agents cf 
traditional functional composition view system architectures 
show organization simply collection roles methodologies assume order effectively build mas organizational terms organization oriented abstractions need devised placed context methodology 
advances state art agent oriented software engineering important ways articulates role agent computing software engineering paradigm identifies set organizational abstractions necessary designing building systems complex open environments 
extends gaia methodology exploit new organizational abstractions 
extensions preserving simplicity original gaia proposal enable analysis design open mass previously closed communities cooperating agents 
remainder organized follows 
section details key concepts agent computing pertain agent oriented software engineering 
outlines similarities differences object component methods 
section focuses organizational metaphor describes motivates organizational abstractions necessary agent oriented software engineering 
section details abstractions exploited gaia order provide methodology analysis design mass section discusses related 
section concludes outlines open issues 
software engineering perspective agent computing section introduces key concepts agents mass outline main differences object component computing software architectures 
aim arguments agent oriented software engineering suitable paradigm designing building today complex systems 
basic concepts key concept agent viewed software entity exhibiting characteristics pursuit design objectives autonomy agent passively subject global external flow control actions :10.1.1.119.2204
agent internal thread execution typically oriented achievement specific task decides actions perform time 
situatedness agents perform actions situated particular environment 
environment may computational web site physical manufacturing pipeline agent sense effect portions 
proactivity order accomplish design objectives dynamic unpredictable environment agent may need act ensure set goals achieved new goals opportunistically pursued appropriate 
instance software component charge filtering emails viewed simple agent 
autonomous implemented threaded application logically detached client mail reader assigned specific task analyzing modifying content user mailboxes 
proactive draw user attention specific new mails specific situations occurring folders 
situated lives world mailboxes sense changes mailboxes effect state 
agents useful stand entities delegated particular tasks behalf user example goal driven robots 
majority cases agents exist environments contain agents 
multiagent systems global behaviour derives interaction constituent agents 
brings second key concept agent computing sociality agents interact cooperate coordinate negotiate achieve common objective necessary achieve objectives :10.1.1.119.2204
broadly speaking possible distinguish main classes mass distributed problem solving systems component agents explicitly designed cooperatively achieve goal open systems agents designed share common goal possibly developed different people achieve different objectives 
composition system dynamically vary agents enter leave system 
class systems includes applications primarily devoted solving computationally intensive problems assigning task exploring different portions search space different agents goal search 
class includes software systems devoted controlling directing single physical process 
different agents delegated task manipulating sub portion physical space process takes place 
cases system closed agents known priori supposed cooperative trust interactions 
class includes distributed systems agents services knowledge capabilities agents spread network agents information retrieval workflow management virtual enterprises pervasive computing systems involve interactions agents represent different stakeholders commerce agents web service agents 
cases take account possibility self interested competitive behaviour course interactions preventing agents inherently trusting dynamic arrival unknown agents 
objects components agents distinction contemporary view objects agents sharp time 
consider traditional historical object oriented perspective 
object se autonomous internal activity solicited service requests coming external thread control 
consequence object capable proactive behavior capable autonomously deciding specific situation object capable action selection 
traditional object applications explicit conception environment objects encapsulate resources terms internal attributes perceive world terms objects names 
hand objects components today distributed concurrent systems somewhat removed canonical definition starting approach view agents terms observable behaviour 
objects components may active may integrate internal threads execution enabling perform specific computational tasks 
may serve requests concurrent way preserve unauthorized unsafe requests services words select action 
existence systems active components objects passive objects provides clear distinction active computational part system world external resources environment 
fact objects components access external resources deal unexpected situations doing exception event handling may require explicit modeling situatedness explicit identification context dependencies component systems 
similar considerations apply mod ern pervasive computer systems 
entities enter complex interactive scenario wireless enabled building pda wireless network distributed sensors network controllers automobile observable behaviour viewpoint system designer autonomous agent 
addition fact modern object component systems exhibit characteristics agents agents implemented terms active objects components java threads synchronization exception handling event handling capabilities 
emphasize mean agents add modern objects real advantages agent computing appreciated presence ai techniques 
fact objects agents converging technological viewpoint evidence fact software engineering viewpoint agent abstractions suit development complex software systems 
appears clearer shifting attention single object components complex systems 
software architectures multiagent systems traditional object computing promotes perspective software components functional service oriented entities directly influences way software systems architected 
usually global design relies static architecture derives decomposition modularisation functionalities data required system achieve global goals definition inter dependencies 
particular objects usually considered service providers responsible specific portions data charge providing services objects contractual model software development explicitly promotes view interactions objects usually expression inter dependencies objects interact access services data available locally system tends modeled terms objects distinction active actors passive resources typically neglected 
words object oriented development promoting encapsulation data functionality functional oriented concept interactions tends neglect modeling encapsulation execution control 
sort global control activity system usually assumed presence single execution flow limited set controllable globally synchronised execution flows 
assuming enforcing control may feasible complex systems 
risk losing control better solution explicitly delegate control execution system components mass fact delegating control autonomous components considered additional dimension modularity encapsulation 
entities encapsulate control addition data algorithms better handle dynamics complex environment local contingencies handled locally components reduce inter dependencies limiting explicit transfer execution activities 
leads sharper separation component level intra agent system level inter agent design dimensions control component longer global 
dynamics openness application scenarios impossible know priori potential inter dependencies components services needed point execution components interact functional oriented perspective typically requires 
autonomous components delegated control enriched sophisticated social abilities capability decisions scope nature interactions run time initiating interactions flexible manner looking negotiating service data provision 
complex systems clear distinction active actors systems autonomous charge control passive resources passive objects autonomous control may provide simplified modeling problem 
fact software components application real world counterpart active passive consequently better suited modeled terms active entities agents passive ones environmental resources 
emphasize modern approaches recognize limitations 
outlined subsection traditional object abstractions enriched incorporating novel features internal threads execution event handling exception handling context dependencies substituted architectural styles higherlevel abstraction self contained possibly active coarse grained entities components 
changes fundamentally alter way software architectures built active self contained components intrinsically introduce multiple loci control naturally considered repositories tasks simply services 
need cope openness dynamics requires application components interact flexible ways making external directory lookup security services 
attempting enrich conventional approaches novel features characteristics meet novel needs addition increasing complexity modeling introduce dangerous mismatch abstraction level adopted conceptual level application problems solved 
put simply objects components low level abstraction dealing complexity today software systems important concepts autonomy task orientation situatedness flexible interactions 
instance object component approaches say subject designing negotiation algorithms govern interactions offer insights maintain balance reactive proactive behaviour complex dynamic situations 
forces applications built adopting functionally oriented perspective turn leads static software architectures need complex middleware support handle dynamics flexible re configuration support negotiation resources tasks 
particularly desirable 
summary believe agent computing promotes abstraction level suitable modern scenarios appropriate building flexible highly modular robust systems technology adopted build agents 
organizational metaphor suitability modeling approach autonomous situated agents interact flexible ways need understand abstractions inspired metaphor complete agent oriented mindset 
motivations years researchers area mass proposed number different approaches modeling systems different metaphors reasonably claim generalpurpose 
instance ant algorithms metaphor shown useful efficiently solving complex distributed problems routing distributed sorting physical metaphors focusing spontaneous reshaping system structure may useful applications pervasive mobile computing societal metaphors effectively applied robotics applications understanding control highly decentralized systems :10.1.1.101.3346
approach focuses development medium large size systems possibly open dynamic environments guarantee predictable reliable behaviors 
kinds systems believe appropriate metaphor human organization software system conceived computational instantiation possibly open group interacting autonomous individuals agents 
agent seen playing specific roles defined set responsibilities sub goals context system responsible pursuing autonomously 
sub goals may altruistic contribute global application goal opportunistic agent pursue interests 
interactions longer merely expression inter dependencies seen means agent accomplish role system 
interactions clearly identified localized definition role help characterize structure organization position agent 
evolution activities organization deriving autonomous execution agents interactions determines achievement application goal priori identified global goal example workflow management systems altruistic agents contribute achievement specific cooperative project goal related satisfaction individual goals example agent mediated auctions purpose satisfy needs buyer seller agents example network enterprises exploiting market mechanisms improve efficiency 
organizational perspective leads general architectural characterization mas depicted 
simpler systems viewed single organization soon complexity increases modularity encapsulation principles suggest dividing system different sub organizations dashed ellipses subset agents possibly involved multiple organizations 
organization agent play roles accomplish agents typically need interact exchange knowledge coordinate activities 
interactions occur patterns protocols dictated nature role institutionalized definition role 
addition mas typically immersed environment ensemble resources represented gray ellipse agents may need interact accomplish role 
interactions environment occur sorts sensors effectors mechanisms enabling agents perceive act part environment 
portion environment agents sense effect represented darker ellipses inside environment determined agent specific role current status 
organizational metaphor natural human developers continuously immersed variety organizational settings opening possibility reusing variety studies experiences related real world organizations appears appropriate wide range software systems 
hand systems concerned controlling supporting activities possibly open real world organization manufacturing control systems workflow management enterprise information systems electronic marketplaces 
organization design may reduce conceptual distance software system real world system support 
hand software systems associated pre existing real world organization may deal problems human organizations act fruitful source inspiration having shown produce effective solutions resource sharing task multiagent systems computational organizations 
service negotiation 
generally software system complex warrant agent approach requires significant degree predictability reliability parts organizational metaphor may appropriate 
fact relying agents playing defined roles interacting institutionalized patterns organizational metaphor promotes micro level agents level macro level system level control design understanding system behavior 
metaphors ant colonies artificial societies focusing achievement average macro level behavior system sacrifice micro level aspects individual agents matter little 
may acceptable say wide area file sharing applications heuristic allocation systems definitely manufacturing control systems enterprise information systems electronics marketplaces agent important right 
example applications illustrate arguments show map real world applications consider sample problems act running examples 
manufacturing pipeline example class distributed problem solving closed mass consider system controlling manufacturing process 
specifically consider manufacturing pipeline items transformed augmented pipeline metal items painted 
different agents may devoted control different stages pipeline agent devoted controlling paint controlling heat treatment paint controlling cooling process 
organization role agent stage controller charge ensuring specific portion pipeline works properly oven maintains constant temperature cooling system cool items fast 
agents need sense effect portion environment represents stage pipeline charge 
portions agent senses effects may sensed effected neighboring agents pipeline sort indirect interaction mediated environment occur agents 
addition agents may need interact directly achieve proper global functioning pipeline instance guaranteeing uniform flux items guaranteeing global flux items exceed processing capabilities stages 
conference management example system raising issues typical open systems agents exhibiting self interested behavior may known deployment time consider agent system supporting management international conference 
setting running conference multi phase process involving individuals groups 
submission phase authors send papers informed papers received assigned submission number 
review phase program committee pc handle review papers contacting potential referees asking review number papers possibly bidding papers 
eventually reviews come decide acceptance rejection submissions 
final phase authors need notified decisions case acceptance asked produce revised version papers 
publisher collect final versions print proceedings 
conference management problem naturally leads conception system number different mas organizations phase process 
organization corresponding mas viewed agents associated persons involved process authors pc chair pc members reviewers support representing active part system 
roles played agent reflect ones played associated person conference organization 
may require agents interact directly indirectly environment composed passive papers review forms openness conference management system evidenced number ways 
clearly authors submitting unknown deployment time total number author agents involved process 
appears problematic issue author agents generally simply send pc chair need strongly modeling differs considerably traditional object modeling problem see application problem typically modeled making distinction active entities environmental resources despite different nature interactions express functional inter dependencies organizational relationships cause 
interact agents system 
problematic fact agents associated different stakeholders competing interests unpredictable strategic opportunistic behaviors emerge application 
trivial case reviewer agent acting behalf person author trying bidding papers review possibly competing papers 
addition emphasize reviewer pc member may decide exploit personal agent agents available conference management system enter organization interact agents 
case reviewers known advance know case large conferences agents interact system may 
organizational abstractions characterization mas highlights basic abstractions characterize computational organization appropriately exploited analysis design phases environment mas immersed roles played different agents organization interactions roles 
addition identified abstractions implicitly integrated ones believe need considered right organizational rules organizational structures 
environment mas situated environment believe considered primary abstraction analysis design phases 
generally speaking identifying modeling environment involves determining entities resources mas exploit control consume working achievement organizational goal 
cases environment physical including things temperature room status washing machine average speed cars 
case manufacturing pipeline agents intended control correct processing global flux items pipeline 
cases environment virtual including things enterprise information systems web services database management systems 
case conference management system agents execute environment populated papers review forms digital libraries 
case explicit modeling environment important account example previous version gaia methodology may complicate design may introduce mismatches mas design actual operation :10.1.1.10.2242
instance conference management example lack environmental modeling imply considering specific application agents repositories papers review forms charge explicitly transferring agents 
complex solution explicitly modeling environ mental data repository conceptually farther operating environment world web sites agents access papers review forms 
physical computational environments issues come fore considering explicit environmental modeling phase environmental resources agents effectively sense effect 
constraints may exist respect possibility accessing manipulating resources environment model distinguish existence accessibility resource 
manufacturing pipeline may case sensors exist effectively evaluate quality parameters 
conference management may case reviewer agent pay access particular digital library needed compare submitted published 
environment may characterised dynamic may case resources ephemeral nature intermittently available 
dynamics may need identified modeled evaluated technological capabilities cope 
agent perceive environment 
words representation environment appropriate situation 
choice naturally dependent available technologies pre existing scenarios 
manufacturing pipeline choice may depend sensors passive active leading characterization environment terms data world service world 
conference management choice may depend characteristics available services providing access papers review forms 
existing scenario characterized part environment 
existence active entities agents mas interact computerbased sensors manufacturing pipeline active databases web scenario means decision taken viewed agent viewed terms dynamic environmental resources 
words distinction agent environment clear cut 
may require accurate analysis may ultimately depend problem characteristics 
summarizing environment mas implicitly assumed characteristics identified modeled possibly shaped meet application specific purposes 
roles interactions role agent defines expected organization concert agents respect organization 
agent role simply defined terms specific task accomplish context organization 
notion role precise gives agent defined position organization associated set expected behaviours :10.1.1.41.4369
organizational role models precisely describe roles constitute computational organization 
terms functionalities activities responsibilities terms interaction protocols patterns 
organizational interaction models describe protocols govern interactions roles 
interaction model describes characteristics dynamics protocol protocol executed 
approaches mas modeling including version gaia consider role interaction models sole organizational abstractions base entire development process :10.1.1.10.2242
consequently analysis design process starts directly identification definition role interaction models 
role interaction models useful fully describe existing organization limited value building organization 
fact design process define actual organization possibly described terms role interaction models need identify organization expected kind organization possible ones best fits requirements identified analysis phase 
observation elaborated motivates notions organizational rules organizational structures 
organizational rules requirements capture phase mas development certainly possible identify basic skills functionalities competences required organization basic interactions required exploitation skills 
case manufacturing pipeline easy identify need agents act stage controllers conference management case study easy recognize need agents act authors reviewers pc chair 
analysis lead identification preliminary version role interaction models identification produce complete models 
fact able fully characterize organization analysis mas identify constraints actual organization defined respect 
typically constraints spread horizontally roles protocols context identified preliminary roles protocols ii express relations constraints roles protocols roles protocols 
actual organization constraints enacted agents playing roles interacting hardly expressed terms individual roles individual interaction protocols way social conventions directives horizontally influence social life associated specific actor 
explicit identification constraints captured concept organizational rules important correct understanding characteristics organization express subsequent definition system structure designer 
explicit identification organizational rules important context open systems 
arrival new previously unknown possibly self interested agents organization able enforce internal coherency despite dynamic untrustworthy environment 
identification global organizational rules allows system designer explicitly define allow new agents enter organization accepted position ii behaviours considered legitimate expression self interest prevented organization 
context organizational rules may drive designer definition specific organization structure eases enforcement organizational rules instance facilitate prevention undesirable behaviour part unknown agents 
manufacturing pipeline example different stages maintain speed flow items pipeline 
requirement simply expressed terms global organizational rule replicating requirement role organization example previous version gaia methodology making explicit organizational rules required 
conference management system number rules drive proper implementation organization 
notable examples agent prevented playing role author reviewer pc members charge collecting reviews papers 
constraints easily expressed terms properties responsibilities associated single roles protocols notably increase complexity roles protocol description 
represent global organizational rules 
organizational structures role model describes roles organization positions organization 
role model implicitly defines topology interaction patterns control regime organization activities 
implicitly defines architecture mas organization organizational structure 
example role model describing organization terms master role slave roles charge assigning load balancing activities implicitly defines organizational structure hierarchical topology load partitioning control regime 
exemplar organizational structures include collectives peers multi level multi hierarchies dynamic structures deriving market oriented models 
organizations modeled terms role model 
role model may define organizational structure implicit way structure mas appropriately derived explicit choice appropriate organizational structure organizational structures viewed class abstractions right 
argument conventional architecture centered software design calls specific design choice generally anticipated analysis phase exploit information collected analysis 
specific context mas development argument motivated considerations organizational structure mas may directly inspired structure real world system mas support automate monitor consider example enterprise information systems workflow management systems automatically imply organization software system mimic real world system 
reasons 
real world organization may necessarily structured 
second issues may driven human organization adoption particular structure may necessarily apply agent organization 
third mere presence software may introduce changes realworld organization 
course may case specific sub structures real world organization necessarily preserved mas level come predefined analysis phase 
considered general case prevent developers explicitly addressing organizational structure issue 
starting organizational structure may prevent optimizing efficiency organization may prevent subsequent optimizations changes 
consideration assumes particular emphasis dynamic applications scenarios virtual enterprises global pervasive computing system may need frequently adapt organizational structure prevailing situation possibly run time unsupervised way :10.1.1.101.3346
explicitly deal dynamic unsupervised re organizations methodological approach propose making definition organizational structure explicit design decision facilitates line re organization paves way supporting dynamic line re organization 
organization defined respect organizational rules 
starting predefined organizational structure assuming know advance committing priori organizational structure difficult organizational rules respected enforced 
natural choice organizational structure follow identification organizational rules 
manufacturing pipeline natural choice organizational structure stages pipeline form collective peers 
instance manufacturing pipeline collective peers organization manufacturing pipeline hierarchical organization various stages pipeline controlled agents specifically devoted controlling stage agents may directly interact stages agree issues requiring global coordination regulating flux items pipeline 
words topology interactions fully connected subject fully distributed cooperative control regime 
possible choice necessarily best 
instance real time nature pipeline control problem may case problem requiring complex global coordination agents solved time high coordination costs associated peer peer interactions 
cases designer adopt different organizational structure 
example sketched global coordinator agent introduced control mediate interactions agents 
turn leads hierarchical organization 
conference management structure mas generally derived directly structure conference officials explicitly decided adopt 
small conference usually relies solely pc members review process pc chair acting global coordinator single level hierarchy control reviewing pc members see 
higher workload large conference usually requires different approach see 
instance pc chair may partition papers pc members pc members may charge finding reviewers papers partitions asking reviewer review specific alternatively calling bids papers sort conference management single level hierarchy contract net protocol 
pc members may negotiate re allocating papers different partitions 
words organizational structure composed hierarchy higher level ruling interactions pc chair pc members market organization lower level ensure proper assignment papers reviewers enable direct negotiations collective pc member agents 
development mas conference take account fact conference may change dimensions structure year year support agent system reducing conference officials may suggest different organizational choice originally planned 
analysis describes system requirements committing specific organizational structure suggest designer reuse analysis produce new design conference new needs 
additional note related organizational structures believe despite huge number structures possibly conceived comparatively small subset structures time 
opens significant opportunities re exploitation catalogues agent oriented organizational patterns including cases reporting efficiency robustness degree openness ease enactment organizational structures support designers choosing appropriate organizational structure problem 
instance manufacturing example collective organization expresses pattern re appear applications 
said hierarchical structure 
conference management example various organizational structures conferences different sizes tend adopt fairly typical single hierarchies composite ones contract nets currently area agent oriented software engineering pattern related focuses detailed design patterns 
near expect research studies carried area architectural organization oriented patterns extend specific studies performed area regard adapt studies performed conference management multi level hierarchy area organization management exploitation agent oriented methodologies 
gaia methodology having introduced defined various organizational abstractions believe necessary analyzing designing mass step fashion design process 
produce ordered sequence steps identifiable set models indication interrelationships models showing exploit models abstractions development mas 
design process propose uses previous gaia methodology point departure :10.1.1.10.2242
new extended version gaia simply called gaia exploits new organizational abstractions identified section significantly extends range applications gaia applied 
going details gaia provide overview key stages models see 
gaia process starts analysis phase aim collect organize specification basis design computational organization 
includes identification goals organizations constitute system expected global behaviour 
involves identifying fruitfully decompose global organization loosely coupled sub organizations 
models gaia methodology relations gaia process environmental model intended computational representation environment mas situated 
preliminary roles model identifying basic skills required organization 
preliminary model contains roles possibly completely defined identified committing imposition specific organizational structure 
notion roles stage mapping agents 
preliminary interaction model identifying basic interactions required accomplish preliminary roles 
model away organizational structure left incomplete 
rules organization respect enforce global behaviour 
rules express constraints execution activities roles protocols primary importance promoting efficiency design identifying developing mas support openness self interested behaviour 
output analysis phase consisting environmental model preliminary roles model preliminary interactions model set organizational rules exploited design phase logically decomposed architectural design phase detailed design phase 
architectural design phase includes definition system organizational structure terms topology control regime 
activity exploit catalogues organizational patterns involves considering organizational efficiency ii real world organization mas situated iii need enforce organizational rules 
completion preliminary role interaction models 
adopted organizational structure involves separating possible aspects detected analysis phase organizational dependent ones derived adoption specific organizational structure 
demarcation promotes design change perspective separating structure system derived contingent choice goals derived general characterization 
architecture system identified completed roles interactions model detailed design phase 
covers definition agent model 
identifies agent classes system agent instances instantiated classes 
may correspondence roles agent types number closely related roles mapped agent class purposes convenience efficiency 
definition services model 
identifies main services intended coherent blocks activity agents engage required realize agent roles properties 
detailing analysis subsection architectural design phase subsection detailed design phase subsection important explicitly state scope limitations methodology gaia directly deal particular modeling techniques 
proposes commit specific techniques modeling roles environment interactions 
time large amount ongoing research devoted defining suitable possibly standardized notation techniques agent systems detailed section believe commitment premature 
gaia directly deal implementation issues 
outcome gaia process detailed technology neutral specification easily implemented appropriate agent programming framework fipa compliant agent system modern object component framework supporting distributed concurrent objects 
course aware specific technology platforms may introduce constraints design decisions typical example relates environmental modeling environmental resources passive nature rely having agents perceive terms events 
generally speaking situations known time requirements capture 
gaia explicitly deal activities requirements capturing modeling specifically early requirements engineering 
aware importance activities ongoing area see section 
particular believe gaia fit easily integrated modern goal oriented approaches requirements engineering abstractions closely match agent oriented computing 
investigation issue scope 
analysis phase main goal analysis phase organize collected specifications requirements system environmental model preliminary role interaction models set organizational rules sub organizations composing system 
basic assumption gaia analysis phase rely output produced early requirements engineering phase devoted analyzing characteristics exhibited goals achieved system emerge needs stakeholders specific operational environment 
increasing acceptance goal oriented approaches early requirements engineering modeling specifications systems terms actors involved roles goals suited organizational abstractions exploited gaia 
may facilitate gaia analysis accordingly considered form late requirements engineering phase subsequent design phases 
organizations phase gaia analysis concerned determining multiple organizations exist system autonomous interacting mass identifying organizations reasonably easy system specification identifies ii system mimics structure real world involves multiple interacting organizations 
conditions hold modularity concerns may suggest considering system terms multiple organizations sake splitting global complexity problem set smaller manageable components 
generally speaking sub organizations portions system exhibit behaviour specifically oriented achievement sub goal ii interact loosely portions system iii require competences needed parts system 
turning running examples 
agents controlling manufacturing pipeline conceived belonging organization share goal making pipeline run efficiently ii need interact intensively interact frequently agents concerned controlling parts factory electric plant iii required agent skills closely related section manufacturing process 
regard conference management example clearly identified 
firstly organization responsible submission process charge distributing call papers collecting submitted papers possibly doing preliminary review control papers 
secondly organization responsible review process 
charge assigning submitted papers reviewers collecting ranking reviews defining technical programme 
thirdly organization responsible publication proceedings 
cases clear sub goal pursued organization interactions organizations loose scheduled specific intervals time entities participate organizations 
environmental model difficult provide general modeling abstractions general modeling techniques stated section environments different applications different nature related underlying technology 
develop reasonably general approach ambition universal suggest treating environment terms computational resources variables tuples available agents sensing reading values effecting changing values consuming extracting environment 
identification environmental model simplest form viewed list resources associated symbolic name characterized type actions agents perform possibly associated additional textual comments descriptions 
simple way represent follows inspired fusion notation operation schemata pp var readable resource environment var readable resource var variable changed agent returning running examples 
manufacturing pipeline assuming mas deployed sole goal ensuring correct flow items pipeline resources interest number items produced flow pipeline stages resources temperature humidity position may relevant specific activities stages 
appropriate sensors actuators available detect control respectively flux environmental model reduces flux number items flowing stage pipeline conference management resources handled agents papers review forms 
minimal representation environmental model follows papers papers submitted review reviews reviews submitted papers clearly realistic development scenarios analyst choose provide detailed structured view environmental resources 
instance represented data structure including information authors title keywords 
worth pointing specific modeling techniques may better adopted depending specifications technological constraints 
instance development web information xml documents may case conference management system profit environmental model preserving available xml data representation simply enriching annotations related mas access structures 
case specific issues related modeling environmental resources may required enrich complement proposed basic notation 
particular due distributed nature environment logical physical relationships existing resources graphical possibly annotated scheme may help represent relationships identify resource accessed 
manufacturing pipeline various stages intrinsically distributed space may case data related flux item particular stage accessed stage 
case graphical representation facilitates capturing understanding environmental characteristics 
similar representation conference management environment papers review forms may grouped logical relationships type submission network distribution multiple track conference invites graphical representation manufacturing pipeline environment submissions directly web sites track chairs 
environment mas immersed typically characterized dynamics 
hand content environmental resources may change time patterns may relevance may require explicit modeling sake example analytical modeling 
cases generally dealt annotations basic environmental model 
hand resources intermittently available ephemeral nature simply priori unknown 
cases may require enriching basic access model resources take account uncertainties 
instance associative access model linda tuple spaces may suit purpose proved increasing adoption open distributed systems 
important issue borne mind modeling environment fact operational environment mas may include active components services computerbased systems agents mas interact 
introduces problem deal entities modeled resources environment 
modeled terms additional agents mas general guidelines provided respect issue role active components simply data provider consider example web server dbms mediating access dataset simple computerbased sensor better away presence model terms resources 
rationale presence influences mechanisms agents retrieve resources obtaining data requesting service performing sensing operation nature resources internal activities agents 
similar considerations may apply simple components capable event notification services change resource value 
environment contains components services capable performing complex operations active databases active control systems humans loop effects agents perception environment hard model simple resource repository identifiable patterns dynamic change sensed agents interact event notification mechanisms 
cases components treated part environment 
preliminary role model analysis phase intended design actual organization mas purpose subsequent architectural design phase 
knowing structure organization possible cases identify characteristics system remain independently actual organizational structure 
particular equates identifying basic skills required organization achieve goals basic interactions required exploitation skills 
identification activities may facilitated goal oriented early requirements analysis modeled characteristics system terms actors involved goals 
identification basic skills basic interaction needs respectively analysis phase provide preliminary definition organization roles protocols 
definition completed stage 
fact basic skills preliminary roles truly organizational roles known roles interact 
turn requires definition global organizational structure 
analogously basic interaction needs preliminary protocols fully defined organizational protocols adoption organizational structure clarifies roles protocols involve execution triggered 
addition design phase introduce additional roles protocols directly derived adopted organizational structure identified analysis phase 
anticipated section may case need adopt specific organizational sub structures system derives specific requirements case roles protocols may assume complete definition stage 
manufacturing pipeline preliminary roles pr devised associated stages pipeline pr stage stage stage :10.1.1.101.3346
addition depending global structure manufacturing process possible devise preliminary roles 
example flux items pipeline require power currently supplied additional role may introduced task coordinate electric plant better agent organization electric plant negotiate supplies energy 
design identified system structured organization peers hierarchy role specification completed possible identify roles involved organization 
analogously may clear analysis phase protocol defined enabling stage ask slowing flux items pipeline 
case certain entity protocol involve stages pipeline global controller depending chosen organizational structure 
conference management case particular organization review process comparatively easy devise number preliminary roles played organizational structure 
example roles associated selecting reviewers assigning papers role reviewer charge filling review forms assigned papers reviewer role charge collecting ranking reviews role technical programme 
depending actual organizational structures different actors pc chair pc members external reviewers called play roles 
actual organizational structure defined architectural design phase may require additional roles introduced 
example big conference may opt subdivide submitted papers set chairs competences 
case additional role required partitioning submitted papers defined criterion 
influence definition protocols require definition protocols example protocols achieve form load balancing partitions 
represent preliminary roles gaia adopts semi formal description express capabilities expected behaviors 
represented main attribute classes respectively permissions ii responsibilities 
permissions attributes mainly aimed identifying resources legitimately carry role intuitively say spent carrying role ii stating resource limits role operate intuitively say spent carrying role 
general permissions relate agent roles environment situated order carry role agent typically access environmental resources possibly change consume 
represent knowledge agent possibly received communications roles 
represent permissions gaia notation representing environmental resources 
attributes associated resources longer represent done resources reading writing consuming environmental perspective agents playing role allowed accomplish role allowed 
manufacturing pipeline example agent charge controlling specific stage pipeline may need sense read resource representing flux items entering region responsibility 
previous stage controlled different agent control change 
role requires agent sense effect flux items stage representing input flux stage 
reduces representation permissions generic role stage flux flux previous stage flux flux stage conference management example reviewer role requires capability read papers assigned review writing associated review forms papers papers receives papers due strict relations permission environmental models graphical representation relating preliminary roles connections environment useful outcome analysis phase 
details graphical representation manufacturing pipeline example 
specifically environment role diagram may help identify inconsistencies operations environment permits agents need allowed 
relations environment roles permissions identified arrow going environmental model box preliminary role model box helps identify key points developing mas suppose environmental resource available reading identified roles needs change 
case environmental model possible capabilities roles reduced re distributed roles 
physically distributed environments diagram helps determine reasonable feasible single role access wide variety widely distributed resources appropriate divide capabilities set roles 
role needs access variable direct access possible solution access mediation role 
may help identifying need role involved specific protocol gain mediated access variable 
inter dependency environmental model preliminary interaction model denoted proper arrow 
responsibilities attributes determine expected behavior role key attribute associated role 
responsibilities divided types liveness properties safety properties 
liveness properties intuitively state happens describe states affairs agent bring certain conditions 
conference management example liveness property reviewer role may specify environment preliminary roles diagram operator interpretation followed occurs occurs times occurs times occurs indefinitely optional interleaved table operators liveness expressions reviewer receipt start review eventually produce completed review 
manufacturing pipeline example liveness property may specify substantial change occurs flux items stage controllers engage coordinated activity restore stable condition 
contrast safety properties invariants 
intuitively safety property states bad happens acceptable state affairs maintained 
manufacturing pipeline role stage controller guarantee flux items kept specific range 
widely formalism specifying liveness safety properties temporal logic formalism strongly advocated agent systems 
strengths mathematical tool expressing liveness safety properties doubt viability formal tools everyday software engineering practices 
excluding possibility formalism proposes alternative approach regular expressions understood larger audience 
liveness properties specified liveness expression defines life cycle role see table 
liveness expressions similar life cycle expressions fusion turn essentially regular expressions 
liveness expressions additional operator indefinite repetitions 
liveness expressions defining potential execution trajectories various activities interactions associated role general form rolename expression rolename name role liveness properties defined expression defines liveness properties rolename 
atomic components liveness expression activities protocols 
activity somewhat method object oriented terms corresponds unit action agent performs involve interaction agent 
protocols hand activities require interaction 
give reader visual clues write protocol names sans serif font font underlined activity names 
illustrate liveness expressions consider responsibilities simple reviewer role conference management example maximum reviewer number expression says reviewer consists executing protocol mo ment treat protocols simply labels give accurate definition shortly followed activity protocol 
sequential execution protocols activities repeated maximum number papers role deal 
case emphasize analysis phase may impossible completely determine liveness expression role 
instance committed specific organizational structure determine reception reviewer preceded sort negotiation bidding 
cases preliminary roles definition sketch activity liveness expression role completed design 
additional example consider liveness expression role stage manufacturing pipeline example stage expression says stage consists continuously executing indefinite number times activity continuously check flux incoming items possibly interrupted followed execution protocols 
protocols intended negotiate new speed speed change pipeline respectively executed safety rule expressing fact input output fluxes respected 
parallel continuous activities continuous activity devoted controlling item processing stage 
turn safety requirements 
specified means list predicates typically expressed variables listed role permissions attribute 
returning reviewer role agent carrying role required ensure received received review form 
expressed safety expression number papers number review forms convention simply list safety expressions list item list expressing individual safety responsibility 
assumed responsibilities apply states system execution 
role infinitely long duration invariants true 
unexpected occur complex systems prefer assume weaker notion safety expressions considering agent playing role best preserve 
words safety expressions indirectly express abnormal situations agent able react 
course need respect safety expressions may require agent tune liveness properties accordingly 
requirement appears clearly manufacturing pipeline example 
basic safety rule role stage ensure flux items exceeds threshold ti possibly short time interval able process flux flux ti ensure property stage monitor flux eventually request flux reduction identified discussing liveness expressions role 
definitions place possible precisely define gaia roles model 
analysis phase define preliminary roles design phase give complete specification roles involved system 
roles model comprised set role schema role system 
role schema draws various attributes discussed single place 
case preliminary role model schema may simply leave parts undefined completed architectural design phase 
exemplar instantiation reviewer role 
preliminary interaction model model captures dependencies relationships various roles mas organization terms protocol definition type inter role interaction 
roles role schema name role description short description role protocols activities protocols activities role plays part permissions rights associated role responsibilities liveness liveness responsibilities safety safety responsibilities role schema reviewer template role schemata description preliminary role involves receiving papers review conference official reviewing sending back completed review form 
protocols activities permissions papers papers receives papers responsibilities liveness reviewer safety number papers number schema role reviewer maximum number model preliminary stage corresponding protocols model necessarily preliminary reasons 
gaia protocol viewed institutionalized pattern interaction 
pattern interaction formally defined abstracted away particular sequence execution steps focus attention essential nature purpose interaction precise ordering particular message exchanges cf 
interaction diagrams objec tory pp scenarios fusion 
protocol definition consists attributes protocol name brief textual description capturing nature interaction information request schedule activity assign task initiator role responsible starting interaction partner responder role initiator interacts preliminary protocol definition inputs information role initiator enacting protocol outputs information supplied protocol responder interaction description textual description explaining purpose protocol processing activities implied execution 
manufacturing pipeline consider protocol forms part stage roles 
protocol initiated stages pipeline notices input flux items longer tolerated global reduction pipeline flux required 
stage development process possible know roles protocol involve 
case possible identify outcome protocol new value properly negotiated flux items 
conference management case study consider protocol part reviewer role 
states protocol initiated role undefined stage charge assigning papers review 
involves role reviewer asked review proposed eventually leading reviewer receiving specific protocol initiated 
course detailed protocol definition including example sequencing messages protocol added time complement conceptual definition provide specific guidelines design implementation 
instance auml notation serve purpose 
organizational rules preliminary roles interaction models capture basic characteristics functionalities interaction patterns mas system realise independently pre defined organizational structure 
previously stated may general relationships roles protocols roles protocols best captured organizational rules 
preliminary protocol definition gaia perspective organizational rules consistent roles responsibilities organizational rules considered responsibilities organization 
accordingly possible distinguish safety liveness organizational rules 
refer invariants respected organization coherently express dynamics organization execution evolve 
particular liveness rules define dynamics organization evolve time 
include example fact role played entity played previous role protocol may execute protocol 
addition liveness organizational rules relate liveness expressions belonging different roles relating way different roles play specific activities 
safety rules define time independent global invariants organization respected 
include example fact role played entity organization lifetime roles played entity 
addition relate safety rules different roles expressions environmental variables different roles 
due similar nature organizational rules expressed making formalism adopted specifying liveness safety rules roles illustrate consider organizational rules expressing exemplar liveness rules means role played entity earlier played role means role played entity earlier played times role interested reader refer treatment organizational rules temporal logic leads formal approach 
incorporated reasons ease practitioners 
conversely safety expressions organizational rules detail properties true life mas means roles played concurrently entity recall operator liveness rules expresses concurrency activities 
means roles played agent play roles concurrently means role played times property role role means specified property spread roles listed 
manufacturing pipeline correct management pipeline requires stage roles played 
expressed safety rule stage stage stage liveness organizational rule example possible consider fact addition tolerated bias flux items single stage pipeline required maximum tolerated bias stages :10.1.1.101.3346
property intended global responsibility mas expressed organizational rule flux flux flux turning conference management example 
rule expressing fact author act reviewer expressed reviewer author rule role reviewer played times submitted papers receive reviews expressed reviewer number submitted papers rule coupled avoiding referee review multiple times 
rule expressing fact role charge setting conference program played charge collecting reviews played expressed similarly liveness safety organizational rules imposed protocols 
example protocol executed protocol executed role protocol necessarily precede execution protocol protocol necessarily executed role execute protocol manufacturing pipeline stages may need request reduction speed items longer operate current speed 
reduction speed requested protocol protocol protocol involved stages 
expressed conference management example rule expressing fact reviewer send review executing protocol reviewer rule expressing fact reviewer received review send back review form initiating appropriate protocol reviewer reviewer rules previously introduced expressing fact receive reviews ensure receive reviews different referees 
summary organizational rules correct identification fundamental design phase constrain definition actual organizational structure population restrict number proper implementations organization 
addition definition organizational rules necessary system open 
case organizational rules important analyze new agent admitted organization roles allowed play ii kinds protocols initiated members organization kinds protocols expression legitimate 
final note examples organizational rules clearly show collecting defining system specifications may imply discovering agents organization 
organizational rules roles reflected design phase driving example number agents instantiated number roles played single agent 
design decisions may clear design phase analysis phase disregard presence agents focus concept roles 
design phase architectural design output gaia analysis phase systematically documents functional extent non functional characteristics mas express characteristics operational environment mas situated 
structured specifications architectural design identify efficient reliable way structure mas organization complete accordingly preliminary roles interactions models 
worth emphasizing analysis phase mainly aimed understanding mas design phase decisions taken actual characteristics mas 
activities design completion roles interactions models appear aimed refining outputs analysis fact rely actual decisions organizational structure lead modeling mas actual characteristics starting specifications 
course real world project faces difficult task identifying analysis phase considered complete mature design decisions taken 
cases initiation design activities enables missing incomplete specifications identified conflicting requirements noted 
case findings typically require regression back earlier stages development process 
gaia exempt problems making explicit decisions implicit methodologies architectural design promotes earlier identification 
different forces involved identification organizational structure choosing organizational structure choice organizational structure critical phase mas development affecting subsequent phases 
unfortunately case architectural design possible identify precise formal methodology obtain best design 
design methodology give guidelines help designer choices 
illustrates number nearly orthogonal forces may drive identification appropriate organizational structure 
include choice appropriate topology appropriate control regime range possible choices dimensions 
forces affecting choice may include need achieve organizational efficiency equivalently need mas properly handle computation coordination complexity problem need respect organizational rules need minimize distance real world organization 
may tension desire keep design simple 
organizational efficiency simplicity organizational theory successfully applied analysis design distributed software systems states member organization human hardware component software agent exhibits bounded rationality 
amount information able store process amount time limited 
organization efficiently overload members 
problem bounded rationality affect organization organization enlarge resources members better distribute workload 
fact organizations different sizes may require different organizational topologies derives coordination costs incurred number members organization increases 
general guideline see simplest organization topology possible properly handle computational coordination complexity chosen 
extreme single member organization experiences coordination costs advantage extreme simplicity cases impossible charge single agent duties 
organization composed members coordination costs sufficiently low collective decisions members possible 
resulting organizational network collective peers members possibly committed different roles authority global organization 
size organization increases members collective longer bear increased coordination costs hierarchical topology adopted 
hierarchy organization members freed duty handling coordination activities leader member assumes responsibility 
organization size increases collective leadership may needed handle increased coordination costs multi level hierarchy may emerge 
general composition basic structures adopted definition organizational structure 
cases hybrid organizational networks emerge 
example collective peers ruled leader limited portion global coordination needs maintaining capability direct peer peer coordination equivalently leader hierarchy take charge limited set coordination activities leaving subordinate members directly coordinate remaining ones 
control regime handling interactions members organization somewhat orthogonal organizational topology 
contrast simplified representation may influence organizational efficiency significant direct way topology 
collective peers example control regime workload partitioning regime peers role provides services workload specialization peers provides specific service activity 
solutions depending specific application characteristics may lead different coordination costs influencing organizational efficiency large numbers similar tasks performed partitioning better reducing complexity coordination costs workload derives complex activities specialization may incur lower coordination costs 
similar considerations may apply different control regimes applied different topologies 
instance possible opt hierarchy main goal leader coordinate activities subordinates obtain sensible partitioning load balancing 
alternatively possible opt hierarchy subordinate specialized supply specific service product leader charge allocation resources services subordinate full load 
case large organizations competitive self interested behavior emerge cooperative control regimes collectives authoritative control regimes hierarchies ineffective 
unavoidable inefficiencies multi level hierarchies hierarchies high fan 
cases control regime market models distribution workloads supply services needs adopted 
manufacturing pipeline example identified subsection collection peers charge specific piece directly coordinating hierarchy leader handles coordination needs stages possible 
choice alternatives consider coordination costs stages directly sustained stage roles 
conference management example discussed number papers dealt review process sustained humans bounded rationality influences structure real world organization consequently supporting agent systems 
additional note worth pointing additional forces influence choice organizational structure specifically topology 
instance problem intrinsically distributed physical space manufacturing pipeline resources environment accessed agent costs may mandate adoption certain specific distributed topologies 
influence organizational rules factor impacting choice organizational structure primarily control regime exclusively need mas respect organizational rules able enact execution 
types organizational rules typically safety ones may express direct intuitive constraints directly driving adoption specific organizational structures constraints specifying roles played agent agent play specific roles 
clearly cases specific topology adopted control regime tuned distribute tasks organization respect constraints 
conference management example fact submitted reviewed different reviewers simply rules possibility review assignments consider partitioning regime sake load balancing 
significant case organizational rules impact organizational structure presence competitive self interested behaviour 
cases necessary adopted structure system respects organizational rules adopted structure promotes active enactment 
fact hand agents dynamically enter organization may unaware local rules hand self interested agents may strive opportunistically ignore rules achieve specific aims 
cases organizational structure specifically control regime interactions shaped possible enact form control execution foreign self interested agents equivalently control agents play specific role play organizational rules respected 
case big conference example need pc members evenly efficiently distribute papers reviewers suggests adoption market inspired bidding mechanism rule activities lowest level multilevel hierarchy 
solution potentially efficient implement review assignments rely making list papers public having papers assigned reviewers expressing availability willingness review 
avoid reviewer handling papers generally leave reviewer free choice papers review control regime solely mechanism 
bidding process considered preliminary phase guide final authoritative decisions pc members review assignments 
discussion highlights fact enforcement organizational rules may significant effect computational coordination costs example need control review assignment charges pc members additional tasks supervising bidding process 
organizational rules may impact choice organization topology 
instance consider liveness rule forces specific ordering execution set interaction protocols involving group agents 
case adoption simple collective peers basic topology impose load agents control enactment rule designer better opt hierarchy leader charge controlling protocols execution sequence 
situation kind may occur manufacturing pipeline 
need ensure stages executed protocol executed 
may turn primary force suggesting adoption hierarchical topology collective 
influence real world organization cases mas intended support structure real world organization 
general structure real world organization acts attracting force definition organizational structure shown natural tendency define mimic reflect real world structure 
notable examples agent systems computer supported cooperative agents associated team members agents usually cooperate interaction patterns real world organization 
similar way agent systems electronic commerce patterns interactions agents organizational roles mimic ones human commercial transactions 
having structure mas reflect structure real world organization may important sake conceptual simplicity cases may come requirement portions structure 
case attracting force accommodated 
construction mas necessarily implies depth analysis corresponding real world organization happens process uncovers inefficiencies real world organization 
inefficiencies may simply related fact organizational structure appropriate size objectives organization may subtle 
case includes discovery role duties member organization significantly lower cope role ambiguities members organization defined role misunderstand responsibilities 
cases designer system authority modify improve real world organization possible improve software counterpart 
addition availability software systems support teams organizations tends strongly impact way working real world organizational structure previously efficient phenomenon applies information technology placed situation 
members organization part delegated agents role organization underloaded real world organization may forced re think structure face reduced computational coordination costs efficient way 
possible problem taken account design software system 
problem show effect time mas entered life real world organization designer may forced tune chosen organizational structure mas new needs 
conference management example exemplifies influences 
instance pc chair charge manually assigning papers reviewer pc members finding pc members act reviewer may overwhelmed number papers large 
usual large conferences pc chair forced simply partition papers pc members pc members help find needed number reviewers assigned papers delegating pc members role 
agent system provided support conference organization committee may case pc chair pc members dramatically reduces instance pc chair may able directly recruit reviewer pc members larger number papers 
exploiting organizational patterns specific factors may determine choice organizational structure similar issues faced past led similar considerations choices 
stage availability catalogue possibly modular composable organizational structures describing detail done exploit specific structure greatly help designer effectively complement general guidelines 
fact guidelines described intended help evaluating right trade coarse grained taxonomy structures control regimes 
consider number variations theme conceived number non functional aspects possibly affecting detailed choice mobility security resilience 
specific identification variations impact specific non functional aspects may supported structured catalogue organizational structures 
help designer re documented motivated design choices design related representation structure 
representing organizational structure identification suitable organizational structure mas complete designer determine effectively represent 
context suggest coupled adoption formal notation intuitive graphical representation 
obvious means formally specify organization explicate inter role relationships exist represent topology organizational structure types represent control regime organization 
emphasize universally accepted ontology organizational relationships 
pass complete characterization formalization identify certain types relationships frequently occur mas organizations 
give examples control relationship may identify authority relationship role role partially control actions role peer relationships may express fact roles equal status dependency relation may express fact role relies resources knowledge roles accomplishment 
case exemplar relationship types mutually exclusive control relationship may imply dependency relationship dependency relationship may exist peers claim define complete set types relationships identified 
manufacturing pipeline assuming collective organization chosen stages peers 
simply expressed stage peer stage hierarchical organization chosen coordinator charge supporting stages protocol speed negotiation 
structure expressing dependencies stages coordinator negotiate pipeline flux represent stage depends coordinator manufacturing pipeline representation hierarchical organizational structure conference management example assuming choice multilevel hierarchy representation organizational structure 
relations respectively express fact pc chair controls papers assigned roles role controls reviewers peers respect negotiation papers 
pc chair control control reviewer peer representations useful developers properly detailed description semantics relations protocol activities involved relations detailed subsection additional textual comments possibly enrich notation comprehensible 
formal representation relationship may sufficiently intuitive practitioners graphical representation may complement 
representation simply reduce representing roles terms blocks connected annotated arrows represent relations types 
representation manufacturing example hierarchical organization 
coupling graphical representation environmental model representing way operational environment mas situated lead complete intuitive graphical representation entities involved mas interactions operational environment 
emphasize gaia se intended commit adoption specific notation 
regard organizational structure simple representational methods described notations graphical representation adopted describe represent roles interactions auml diagrams 
completion role interaction models organizational structure defined preliminary role interaction models identified analysis phase transformed complete roles interactions models describing detail characteristics roles stages involved mas produced 
fact organizational structure identified designer knows roles interact derived organization topology protocols executed derived control regime organization 
completion role protocol model amounts defining activities role involved liveness safety responsibilities defining organizational roles presence identified analysis phase identification derives directly adoption organizational structure completing definition protocols required application specifying roles protocol involve defining organizational protocols identification derives adopted organizational structure 
complete definition roles protocols exploit representation introduced respect preliminary roles protocols see figures 
regard identified preliminary roles protocols difference complete representation includes characteristics roles protocols roles full identification activities services protocols complete identification involved roles 
simple example shows preliminary protocol represented completed hierarchical organizational structure chosen partner stage initiating protocol identified controller leading hierarchy 
regard roles protocols definition directly derives adoption specific structure representation defined scratch exploiting templates catalogues organizational patterns 
simple example shows definition protocol manufacturing pipeline application derives having chosen hierarchical organization controller having contacted stage asking speed reduction negotiate acceptable new speed stages 
completing preliminary role interaction models important clearly preserve distinction characteristics intrinsic independent completion protocol definition protocol role protocol specific organizational structure characteristics extrinsic derive adoption specific organizational structure 
instance pipeline example fact stage roles initiate protocol intrinsic fact protocol involves coordinator role extrinsic coordinator role organizational role integration system derives choice organizational structure 
separation simply preserved comment description protocols figures assumes fundamental importance perspectives re design change 
definition role clearly specifies logical separation parts implementation role enables role re different systems independently specific organizational structure 
distinction means changes organizational structure forcing system developers re design re code agents scratch 
furthermore implementation role maintaining clear separation intrinsic extrinsic characteristics supports dynamic changes agent structure example frameworks supporting run time modification roles played agents approach promote definition implementation systems capable dynamically changing internal organizational structure having agents re adapt extrinsic part fit new organizational structure response changed conditions 
dealing dynamic re organizations need multiagent system monitor execution take decisions re structuring issues scope current version gaia 
completed roles interaction models represent operational description mas organization effectively exploited possibly support environmental model get better idea characteristics mas operational environment detailed design mas 
design phase detailed design detailed design phase responsible eventually identifying agent model services model turn act guidelines actual implementation agents activities 
definition agent model gaia context agent active software entity playing set agent roles 
definition agent model amounts identifying agent classes defined play specific roles instances class instantiated actual system 
typically outlined subsection may correspondence roles agent classes role played instance agent class charge implementing role 
correspondence naturally derives methodological process adopted especially identification organizational structure concept role implicitly assumed greater concreteness 
organizational efficiency affected ii bounded rationality problems emerge iii violate organizational rules designer choose package number closely related strongly interacting roles agent class purposes convenience 
obviously trade coherence agent class easily functionality understood efficiency considerations come play designing agent classes need minimize mismatches real world organization system intends support 
conference management example may clear desirable agent playing role 
choice affects efficiency bounded rationality agent roles played different times 
addition choice conflict organizational rules 
contrast choice may compact design reducing number agent classes instances may minimize conceptual complexity real world organization roles typically played person 
manufacturing pipeline choice mapping roles agent classes natural easy think reasonable alternative 
system described stage class coordinator class instances charge implementing roles names 
agent model gaia defined simple diagram table specifying agent class roles map 
addition agent model document instances class appear mas 
done annotating agent classes qualifiers fusion 
annotation means exactly agents class run time system 
annotation means instances class run time system 
annotation means zero instances run time means instances run time 
conference management example notation pc chair play simply expresses agent class pc chair defined play role role single instance class created mas 
case manufacturing pipeline notations play stage stage coordinator play coordinator express fact agents stages pipeline class stage play stage role hierarchical organizational structure chosen single agent class coordinator play coordinator role 
worth highlighting agent model gaia driving static assignment roles agent classes implementation agent class assumed code implement roles 
course implementation adopts framework enabling agents dynamically assume roles example brain framework concept agent class gaia gaia agent model longer 
final note inheritance part gaia agent models experience mas typically contains comparatively small number roles classes making inheritance little design 
course comes implementing agents inheritance normal object oriented fashion 
services model name suggests aim gaia services model identify services associated agent class equivalently roles played agent classes 
services model applies case static assignment roles agent classes case agents dynamically assume roles 
oo terms service roughly correspond method agent services available agents way object methods available object invoke discussed section 
due intrinsically active nature agent service better thought single coherent block activity agent engaged 
service necessarily triggered external requests agent autonomous activities external request necessarily trigger service autonomy implies internal decision capabilities 
service may performed agent necessary document properties 
specifically identify inputs outputs pre conditions post conditions 
inputs outputs services derived obvious way protocols model services involving elaboration data knowledge exchange agents environmental model services involving evaluation modification environmental resources 
pre post conditions represent constraints execution completion respectively services 
derived safety properties role organizational rules may involve constraints availability specific values assumed environmental resources data knowledge agents 
services compose agent derived list protocols activities responsibilities liveness properties roles implements 
extreme service parallel activity execution agent execute 
sequential activities execution may need introduce services represent different phases agent execution 
return conference management example specifically reviewer role 
activities protocols associated role 
protocols activities performed sequentially agent execution possible think defining agent terms single service activated request protocol eventually leading execution protocol 
input service request reviewing 
output service completed review form 
pre conditions execution service agent executed service maximum number times reviewing maximum allowed number papers available reading environment 
post condition review form correctly completed 
outcome protocol may different reviewer may decline review design better split larger service smaller ones 
may separate service associated execution protocol associated review executed accepted review 
gaia services model prescribe implementation services documents 
developer free realise services implementation framework deemed ap 
example may decided implement services directly methods objectoriented language 
alternatively service may decomposed number methods 
outcome design phase successful completion gaia design process developers provided welldefined set agent classes implement instantiate defined agent services model 
stated gaia deal implementation issues considers output design phase specification picked traditional method implemented appropriate agent programming framework 
considerations rely assumption specific technological constraints may occur regard modeling accessing environment identified earlier process 
additional note methodology explicitly conceived open agent systems outcomes exploited third party developers agents intend agents execute organizations case agents agent marketplaces agent users wish exploit personal assistant agents context specific workgroup applications 
cases assuming developers existing mas gaia models publicly available agent developer able check agent enter system rules procedures needs conform 
related research area agent oriented software engineering expanded significantly past years 
groups started addressing problem modeling agent systems appropriate abstractions defining methodologies mass development 
modeling abstractions researchers area defined modeling techniques specifically tuned abstractions promoted agents mass discussed section attempting define complete methodologies development mass stated section believe conventional analysis design methodologies object oriented ones ill suited mass fundamental mismatch abstractions provide :10.1.1.10.2242
consequently believe efforts area agent computing attempt describe agents mass simply applying assessed objectoriented modeling techniques inevitably fall short 
instance may possible represent concepts organizational rules complex interaction protocols terms abstractions say object oriented computing convoluted process lowers abstraction level 
aware adoption known notations modeling techniques facilitate rapid diffusion agent computing software engineering paradigm 
reasons feel promising approach attempt extend assessed abstractions modeling techniques 
instance auml effort starts uml extends additional abstractions notations specifically tuned particular problems agent applications 
date auml achieved results modeling complex interaction protocols components 
lacks appropriate models complex organizational structures associated organizational laws 
auml gaining acceptance area large amount devoted finding suitable ways extending suitable 
matures auml useful companion gaia 
object oriented notations number agent specific modeling abstractions techniques proposed years see survey discussion 
attempt exploit idea mas computational organization 
cases proposals define organization simply collection roles role model 
happens example aalaadin system models mass terms organizations group structure characterizing organizations simply collection roles compose 
analogously toolkit approach organization defined simply set roles compose interaction protocols occur roles 
approaches incorporate notions organizational rules organizational structures reasons outlined section limited range agent systems deal 
limited amount explicitly addresses problem defining organizational rules orchestrate behavior multiagent organization 
application area particularly strong need organizational rules computational markets 
systems heterogeneous agents meet perform commercial transactions important identify enact rules guarantee activity market correctly progress despite possibly opportunistic behavior participants 
considerations implementation framework agent mediated auctions example 
need compel agents act accordance social conventions rule organization auction 
implemented terms controller agents associated agents participating auction 
agent approaches web workgroup applications start similar considerations conceive interactions agents occurring active environments behavior modeled implement specific policies governing agent interactions 
words active environments exploited repository organizational rules 
differs endeavors focus particular organizational abstractions appropriate software engineering process specific technologies implement 
agent oriented methodologies complete methodologies analysis design mass proposed far see survey 
explicitly focus organizational abstractions 
mase methodology provides guidelines developing mass multi step process 
analysis requirements define cases application goals subgoals eventually identify roles played agents interactions 
design agent classes agent interaction protocols derived outcome analysis phase leading complete architecture system 
mase process fails identify organizational abstraction role model abstractions exploited analysis phase assimilated organizational rules definition organizational structure derived implicit outcome analysis phase 
explicitly acknowledged mase designers mase suitable closed agent systems 
message methodology exploits organizational abstractions mapped abstractions identified gaia 
particular message defines organization terms structure determining roles played agents topological relations interactions occurring 
corresponds concept organizational structure promoted gaia 
addition message organization characterized control entity workflow structure 
concepts taken map gaia concept organizational rules determine laws agents actions interactions conform execution 
message address problem identifying explicitly modeling organizational rules implicitly woven organizational structure recognize need explicitly design organizational structure assumed implicit outcome analysis phase 
additional note message tightly bound uml auml gaia general provides clear guidelines committing specific modeling techniques 
gaia methodology described extension version described :10.1.1.10.2242
version gaia case current provided clean separation analysis design phases 
noted suffered limitations similar ones message mase caused incompleteness set abstractions 
objective analysis phase version gaia define fully elaborated role model derived system specification accurate description protocols roles involved 
implicitly assumed organizational structure known priori case 
addition focusing exclusively role model analysis phase version gaia failed identify concept global organizational rules making unsuitable modeling open systems controlling behavior self interested agents modeling environment important extensively discussed 
new version gaia overcomes limitations 
extension version gaia proposed aimed addressing limitations representation environment organizational rules 
proposal preliminary lacks coherent integration gaia process 
tropos methodology proposed refined shares gaia adoption organizational metaphor emphasis explicitly study identification organizational structure 
gaia tropos recognizes organizational structure primary dimension development agent systems appropriate choice needed meet functional non functional requirements 
tropos differs gaia aspects 
hand tropos methodology defines uniform coherent guidelines activities early late requirements engineering gaia analysis deals late requirements engineering 
stated exclude possibility integrating gaia early requirements analysis possibly adapting tropos methods techniques goal oriented analysis 
hand tropos analysis explicitly identify concept organizational rules 
explicit structural dependencies roles required identified analysis phase tropos model able capture global laws apply multiple organizational roles organization 
discussed may undermine effectiveness analysis increase complexity subsequent design phase 
argued agent oriented computing appropriate software engineering paradigm analysis design development contemporary software systems 
particular focused key issues related identification appropriate abstractions agent software engineering definition suitable methodology analysis design complex applications terms multiagent systems 
doing main contributions clarification relationship agent oriented approach software development traditional object component approaches identification suitable set core abstractions inspired organizational metaphor analysis design multiagent systems development clear methodology centered organizational abstractions analysis design open multiagent systems 
important step widespread acceptance agent computing software engineering paradigm remains done 
particular robust tools programming models development environments embody appropriate set agent abstractions need widely available easy software engineering practitioners catalogues organizational patterns guide definition organizational structure libraries re usable design components guide detailed design agents need developed disseminated widely accessible form gaia methodology suggests sequential approach software development proceeding linearly analysis design implementation software development deal unstable requirements wrong assumptions missing information 
requires designer step back current activities re think decisions 
stands explicit structures processes gaia doing 
abelson allen hanson knight rauch weiss 
amorphous computing 
communications acm may 
babaoglu meling montresor :10.1.1.101.3346
anthill framework development agent peer peer systems 
proceedings nd international conference distributed computing systems pages 
ieee cs press vienna july 
bass clements kazman 
software architectures practice nd edition 
addison wesley reading ma 
bauer muller odell 
agent uml formalism specifying multiagent software systems 
international journal software engineering knowledge engineering april 
berners lee hendler lassila 
semantic web 
scientific american may 
bonabeau dorigo theraulaz 
swarm intelligence 
natural artificial systems 
oxford university press oxford uk 
booch 
object oriented analysis design second edition 
addison wesley reading ma 
giorgini giunchiglia mylopoulos 
knowledge level software engineering methodology agent oriented programming 
proceedings th international conference autonomous agents pages 
acm press montreal ca june 
bussmann 
agent oriented programming control tasks 
proceedings rd international conference multi agent systems pages 
ieee cs press paris june 
ferrari leonardi 
enabling mobile agents dynamically assume roles 
proceedings acm symposium applied computing pages 
acm press melbourne fl march 
leonardi zambonelli 
mobile agent coordination models internet applications 
ieee computer february 
leonardi zambonelli 
engineering mobile agent applications contextdependent coordination 
ieee transactions software engineering november 
caire garijo gomez kearney stark evans massonet 
agent oriented analysis message uml 
proceedings nd international workshop agent oriented software engineering volume lncs pages 
springer verlag 
castro mylopoulos 
requirements driven information systems engineering tropos project 
information systems june 
ciancarini omicini zambonelli 
multiagent systems engineering coordination viewpoint 
agents vi agent theories architectures languages volume lnai pages 
springer verlag 
coleman arnold hayes 
object oriented development fusion method 
prentice hall international hemel uk 
drogoul benhamou 
agent oriented design soccer robot team 
proceedings nd international conference multi agent systems pages 
ieee cs press kyoto 
demazeau rocha costa 
populations organizations open multi agent systems 
proceedings st national symposium parallel distributed ai 

rodriguez aguilar sierra garcia 
formal specifications agent institutions 
agent mediated electronic commerce volume lncs pages 
springer verlag 
estrin culler pister 
connecting physical world pervasive networks 
ieee pervasive computing 
ferber gutknecht 
meta model analysis design organizations multi agent systems 
proceedings rd international conference multi agent systems pages 
ieee cs press paris june 
foster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann san francisco ca 
fox 
organizational view distributed systems 
ieee transactions systems man cybernetics january 
handy 
understanding organizations 
penguin books london uk 
yokoo matsubara yoshida 
multiagent systems supporting network communities 
march 
communications acm garijo gonzales 
survey agent oriented methodologies 
agents iv agent theories architectures languages volume lnai pages 
springer verlag 
jennings 
agent approach building complex software systems 
communications acm april 
juan pierce sterling 
roadmap extending gaia methodology complex open systems 
proceedings st acm joint conference autonomous agents multi agent systems pages 
acm press bologna july 
kendall 
agent software engineering role modelling 
proceedings st international workshop agent oriented software engineering volume lncs pages 
springer verlag 
kephart chess 
january 
vision autonomic computing 
ieee computer giorgini mylopoulos 
goal organizational perspective multiagent architectures 
intelligent agents viii agent theories architectures languages volume lnai pages 
springer verlag 

january 
expanding automotive electronic systems 
ieee computer lind 
iterative software engineering multiagent systems massive method volume lncs 
springer verlag berlin 
maes 
agents reduce information overload 
communications acm july 
zambonelli leonardi 
distributed motion coordination fields 
proceedings th symposium autonomous decentralized systems pages 
ieee cs press pisa april 
manna pnueli 
temporal verification reactive systems safety 
springer verlag berlin 
mataric 
integration representation goal driven behaviour robots 
ieee transactions robotics automation december 

structuring organizations synthesis research 
prentice hall englewood cliffs nj 
moses tennenholtz 
artificial social systems 
computers artificial intelligence 
mylopoulos chung yu 
object oriented goal oriented requirements analysis 
communications acm january 
noriega 
agent mediated auctions metaphor 
ph thesis universitat de barcelona barcelona 
odell van dyke parunak bock 
representing agent interaction protocols uml 
proceedings st international workshop agent oriented software engineering volume lncs pages 
springer verlag 
parunak 
go ant engineering principles natural agent systems 
annals operations research 
ricci omicini 
agent coordination infrastructures virtual enterprises workflow 
international journal cooperative information systems september 
iamnitchi foster 
mapping gnutella network 
ieee internet computing january 
rumbaugh jacobson booch 
unified modeling language manual 
addison wesley reading ma 
schwabe rossi 
cohesive design personalized web applications 
ieee internet computing april 
shaw deline klein ross young 
abstractions software architecture tools support 
ieee transactions software engineering april 
shaw garlan 
software architectures perspectives emerging discipline 
prentice hall englewood cliffs nj 
shehory sturm 
evaluation modeling techniques agent systems 
proceedings th international conference autonomous agents pages 
acm press montreal ca june 
simon 
models man wiley new york ny 
smith 
contract net protocol high level communication control distributed problem solver 
ieee transactions computers december 

agent system development agent patterns 
proceedings st international conference software engineering pages 
acm press los angeles ca may 
david tennenhouse 
embedding internet proactive computing 
communications acm may 
wood 
multiagent system engineering 
international journal software engineering knowledge engineering april 
wooldridge 
agent software engineering 
iee proceedings software engineering february 
wooldridge 
multiagent systems 
john wiley sons indianapolis 
wooldridge jennings :10.1.1.119.2204
intelligent agents theory practice 
knowledge engineering review 
wooldridge jennings kinny :10.1.1.10.2242
gaia methodology agent oriented analysis design 
journal autonomous agents multi agent systems 
wooldridge 
reasoning rational agents 
mit press cambridge ma 
zambonelli jennings omicini wooldridge 
agent oriented software engineering internet applications 
coordination internet agents models technologies applications pages 
springer verlag berlin 
zambonelli jennings wooldridge 
organizational rules abstraction analysis design multi agent systems 
international journal software knowledge engineering april 
zambonelli parunak 
signs revolution computer science software engineering 
rd international workshop engineering societies agents world volume lncs pages 
springer verlag 

