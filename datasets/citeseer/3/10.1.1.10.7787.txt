pairs shortest paths dor halperin uri zwick department computer science tel aviv university tel aviv israel unweighted undirected graph vertices 
simple argument shows computing distances additive sided error hard boolean matrix multiplication 
building chekuri motwani describe minfn time algorithm apasp computing distances additive sided error 
algorithm apasp simple easy implement faster fastest known matrix multiplication algorithm 
furthermore describe minfn gamma gamma time algorithm apasp computing distances additive sided error give time algorithm apasp producing stretch estimated distances unweighted undirected graph vertices 
constant stretch factor previously achieved time 
say weighted graph emulates unweighted graph ffi ffi ffi show unweighted graph vertices emulator edges emulator edges 
results asymptotically tight 
show weighted undirected graph vertices spanner edges spanner built mn time 
describe time algorithm estimating distances weighted undirected graph vertices stretch factor 
pairs shortest paths apsp problem fundamental algorithmic graph problems 
complexity fastest known algorithm solving prob mail addresses math tau ac il lem weighted directed graphs negative cycles mn log number vertices edges graph johnson see 
special case pairs shortest paths problem input graph unweighted closely related matrix multiplication 
fairly easy see solving apsp problem exactly unweighted graphs hard boolean matrix multiplication 
works alon galil margalit alon galil margalit naor galil margalit seidel shown matrix multiplication performed time apsp problem unweighted directed graphs solved time apsp problem unweighted undirected graphs solved time means polylog 
currently best upper bound matrix multiplication coppersmith winograd 
results extremely interesting theoretical point view little practice fast matrix multiplication algorithms better naive time algorithm large values interest obtaining fast algorithms apsp problem fast matrix multiplication 
currently best combinatorial algorithm unweighted apsp problem log time algorithm obtained feder motwani see 
offers marginal improvement naive time algorithm 
algorithm apsp problem yield algorithm similar time bound boolean matrix multiplication little hope developing combinatorial gammaffl time algorithm apsp problem 
hope obtaining practical algorithm running time gammaffl relaxing requirements 
looking problem approximating distances shortest paths 
awerbuch cohen considered problem finding stretch pairs paths fixed constant path stretch length times distance endpoints 
cohen improving results awerbuch obtains example time algorithm finding stretch ffl paths distances weighted undirected graphs ffl weights assumed positive 
exhibits tradeoff running time algorithm obtained stretch factor 
stretch ffl paths pairs vertices time 
works awerbuch cohen construction sparse spanners awerbuch peleg schaffer 
spanner graph subgraph ffi delta ffi ffi distance vertices possibly weighted graph different approach employed chekuri motwani see :10.1.1.42.2824:10.1.1.42.2824
describe simple elegant time algorithm finding distances unweighted undirected graphs additive sided error 
important observation small distances long distances hardest approximate 
ideas orlin unpublished obtained time algorithm finding distances additive sided error :10.1.1.42.2824
improve extend result orlin obtain minfn time algorithm called apasp finding distances unweighted undirected graphs additive sided error :10.1.1.42.2824
algorithm apasp just sequence algorithms apasp exhibits trade running time accuracy 
algorithm apasp runs minfn gamma gamma time sided error algorithm apasp example runs time 
algorithms described easily adapted find shortest paths lengths equal estimated distances 
addition show stretch estimates produced algorithm apasp 
increases running time algorithm apasp decreases 
theta log running time 
apasp algorithm apasp blog nc 
algorithm apasp produces stretch distances unweighted undirected graphs time 
mentioned fixed stretch factor previously achieved time 
introduce notion emulators 
emulators may seen additive counterparts spanners 
show graph vertices emulator edges emulator edges 
constructed time respectively 
able obtain sparser emulators 
able construct emulators size time 
bounds number edges emulators emulators asymptotically tight 
graphs vertices emulated graphs gammao edges graphs vertices emulated graphs gammao edges 
able obtain results weighted undirected graphs 
show weighted graph vertices spanner edges spanner mn time 
describe time algorithm finding stretch distances weighted undirected graph vertices 
extended improved results weighted graphs including time algorithm finding stretch distances time algorithm finding stretch distances appear 
preliminaries simple observation small set vertices dominates high degree vertices graph :10.1.1.42.2824
set vertices said dominate set vertex neighbour observation central 
lemma see pp :10.1.1.42.2824
undirected graph vertices edges 
set size log dominates vertices degree graph deterministically ns time 
note running time deterministic algorithm 
picking vertex independently random probability log large yield desired dominating set size log high probability 
deterministic algorithm obtained simple greedy approximation algorithm set cover problem 
see details :10.1.1.42.2824
subsequent sections algorithm called dominate receives undirected graph degree threshold algorithm outputs pair set size log dominates set vertices degree set set edges size vertex degree edge dominating set obtained set easily obtained adding single edge vertex degree ingredient algorithm classical dijkstra algorithm 
lemma dijkstra algorithm weighted directed graph vertices edges 
dijkstra algorithm runs log time finds distances tree shortest paths vertices furthermore weights edges integers range ng algorithm implemented run time 
dijkstra algorithm appeared originally running time version described 
modern description dijkstra algorithm see 
running time log obtained fibonacci heaps 
observation dijkstra algorithm implemented run time weights range ng simple exercise 
algorithms described section start unweighted undirected graph 
build auxiliary weighted graphs run dijkstra algorithm 
weights edges auxiliary graphs integers range ng fact simple time implementation dijkstra algorithm 
running dijkstra algorithm vertex graph get mn log time algorithm solving pairs shortest paths problem apsp 
goal reduce running time apsp algorithms close possible 
achieve goal willing settle shortest paths genuine shortest paths 
algorithms involve runs dijkstra algorithm 
runs performed graphs substantially edges original input graph 
typical step algorithms composed choosing vertex choosing set edges running dijkstra algorithm graph 
set edges necessarily subset edge set input graph 
furthermore set varies step step 
weight edge taken currently best upper bound distance input graph bounds obtained run dijkstra algorithm subsequent runs 
algorithms symmetric theta matrix denoted ffi hold currently best upper bounds distances pairs vertices input graph 
initially ffi ffi 
dijkstra ffi denote invocation dijkstra algorithm vertex graph weight edge taken ffi 
edges considered undirected 
mentioned edge necessarily edge edge original graph weight weight greater 
call dijkstra ffi updates row column belonging matrix ffi distances run smaller previous estimates 
note matrix ffi serves input output dijkstra 
graph subgraph input graph call dijkstra ffi amounts running bfs want stress fact denote call bfs ffi 
clear discussion time run algorithms ffi ffi ffi distance input graph additive error obtained algorithm approximating distances undirected unweighted graph sided additive error :10.1.1.42.2824
describe faster algorithms accuracy 
algorithm apasp runs time 
second algorithm apasp runs 
algorithm faster input graph sufficiently sparse combining algorithms get algorithm apasp mentioned 
description algorithm apasp 
deg denote degree vertex algorithm extremely simple 
starts partitioning vertices graph classes class includes high degree vertices vertices degree class includes low degree vertices vertices degree similar partition alon yuster zwick :10.1.1.42.2824:10.1.1.101.4120
edge set composed edges touch low degree vertex je delta nm 
algorithm proceeds finding set size dominates vertices edge set size exists main part algorithm composed steps 
bfs graph vertex second final step dijkstra algorithm run nd graph fug thetad 
important note dijkstra algorithm run input graph may contain edges slightly different graph vertex graph dijkstra algorithm run includes edges touch low degree vertices edges connect high degree vertex vertex dominating set edges connecting algorithm apasp input unweighted undirected graph 
output matrix ffi estimated distances 
fv deg deg deg dominate ffi ae 
run bfs ffi run dijkstra fug theta ffi 
time algorithm computing surplus distances 
case proof theorem 
case proof theorem 
vertices dominating set 
number edges nm 
important note graph weighted graph 
weight edges unweighted graph 
weight edge fug thetad distance distance bfs started theorem algorithm apasp runs time number vertices number edges input graph ffi ffi ffi 
proof start complexity analysis 
finding dominating set requires lemma time 
jd total running time bfs delta 
number edges graph dijkstra algorithm applied nm total running time calls delta nm running time algorithm 
examine accuracy algorithm 
weights attached weighted edges graphs distances graph implies approximations produced algorithm small 
words ffi ffi prove ffi ffi vertices consider non exclusive exhaustive cases case shortest path contains vertex vertex path belongs see 
edges path touch vertices belong 
edge belongs 
weighted edge added 
weight edge ffi distance bfs note ffi ffi 
running dijkstra algorithm find ffi ffi ffi ffi ffi ffi ffi case shortest path contain vertex algorithm apasp input unweighted undirected graph 
output matrix ffi estimated distances 
fv deg deg gamma deg gamma dominate ffi ae 
run bfs ffi run bfs ffi run dijkstra theta theta fug theta ffi 
time algorithm computing surplus distances shortest path contained ffi ffi 
algorithm apasp described similar algorithm apasp dividing vertices classes degrees divide classes 
threshold thresholds important difference apasp apasp graphs dijkstra algorithm run contain edges thetad 
edges weighted 
weight edge distance bfs weight edge thetad distance graph 
note distance may larger distance theorem algorithm apasp runs time number vertices input graph ffi ffi ffi 
proof start complexity analysis 
finding dominating sets requires time 
jd jd je je bfs vertices take delta time bfs vertices take delta time 
jd jd thetad graph dijkstra algorithm run edges 
total time taken runs delta 
clear ffi ffi remains show ffi ffi vertices consider cases case shortest path contains vertex see 
edges belong graph dijkstra algorithm run weights edges ffi ffi distances bfs note ffi ffi ffi ffi 
running dijkstra algorithm find ffi ffi ffi ffi case shortest path contains vertices case similar case proof theorem 
vertex path belongs edges path touch vertices belong graph dijkstra algorithm run graph contains weighted edges connecting vertices contains particular weighted edge 
weight edge distance ffi graph bfs edges path belong get ffi ffi 
running dijkstra algorithm find ffi ffi ffi ffi ffi case shortest path contain vertex shortest path contained ffi ffi 
proof remains correct edge set thetad added graphs dijkstra algorithm run 
added may improve accuracy algorithm certain cases proof theorem 
replace edge set fug thetad algorithm apasp edge set fug thetad algorithm apasp larger edge set fug increasing running times algorithms 
easily get randomized version algorithm apasp property reported distances greater high probability correct 
similarly get randomized version apasp reported distances greater high probability correct 
simple observation similar idea ullman yannakakis theorem weighted directed graph vertices edges 
time randomized algorithm finds high probability exact distance pair vertices connected shortest path uses edges 
proof random set vertices obtained picking vertex independently probability log large 
expected size 
run dijkstra algorithm vertex graph obtained reversing edges 
complexity step nm 
know ffi ffi exactly 
pair vertices ffi minw fffi ffi complexity step 
easy see ffi ffi shortest path passes vertex shortest path length high probability vertices path belong pairs vertices connected shortest paths edges focus path pair get high probability paths pass vertex exact distances pairs 
follows set algorithm apasp chosen random picking element probability cn gamma log high probability ffi ffi exact distance long distances easier compute 
trading time accuracy obtained algorithm splitting vertices classes degree :10.1.1.42.2824
obtain time algorithm dividing classes 
natural try divide vertices classes 
describe algorithm apasp divides vertices classes runs gamma time 
algorithm apasp described special case general algorithm 
show algorithm apasp additive error gamma 
theorem log algorithm apasp runs gamma time number vertices number edges input graph ffi ffi ffi gamma 
proof start complexity analysis 
edge set graph dijkstra algorithm run easy check jd gammai gammai je delta gamma gamma gamma gamma gamma cost running dijkstra algorithm gammai gammai delta gamma gamma gamma gamma 
total running time algorithm delta gamma gamma log 
ffi value ffi running dijkstra vertices prove induction ffi ffi ffi gamma 
recall get ffi ffi ffi gamma required 
graph dijkstra algorithm run claim clear ffi ffi suppose claim true gamma 
consider shortest path edges belong ffi ffi done 
vertex gamma path argument follows similar argument case proof theorem case proof theorem 
vertex gamma path subpath connects vertices belong gamma edges belong gamma graph contains edge weighted edge weight ffi gamma ffi gamma 
induction hypothesis algorithm apasp input unweighted undirected graph 
output matrix ffi estimated distances 
gamma gamma gamma fv deg deg gamma deg gamma gamma dominate ffi ae 
run dijkstra fug theta ffi 
gamma time algorithm computing surplus gamma distances ffi gamma ffi gamma ffi gamma 
consequence get ffi ffi gamma ffi ffi ffi gamma ffi ffi gamma completes proof theorem 
previous section obtain slightly better algorithm denser graphs 
algorithm apasp described 
differences apasp apasp degree thresholds gammai gammai second edges thetad added graph dijkstra algorithm run vertex theorem log algorithm apasp runs time number vertices input graph ffi ffi ffi bk 
analysis algorithm slightly complicated analysis previous algorithms omitted 
get additive error algorithm apasp running time gamma algorithm apasp gamma running time gamma 
combination algorithms algorithm apasp mentioned 
show multiplicative error estimates produced algorithm apasp 
theorem log algorithm apasp runs gamma time ffi ffi ffi gamma 
proof theorem omitted 
theta log get time algorithm finding stretch approximate distances 
extension algorithm weighted graph 
boolean matrix multiplication boolean theta matrices 
construct graph fu un fv vn fw wn ik kj graph corresponding theta matrices depicted 
theta boolean matrix multiplication clearly ij ffi 
theta 
boolean matrix multiplication 
algorithm apasp input unweighted undirected graph 
output matrix ffi estimated distances 
gamma gamma gamma fv deg deg gamma deg gamma gamma dominate ffi ae 
run dijkstra fug theta theta ffi 
time algorithm computing surplus distances furthermore graph ga bipartite ij ffi 
consequence get theorem distances undirected vertex graph approximated sided additive error time boolean matrix multiplication performed time 
adding disjoint path length gamma get distinguishing distance fixed hard boolean matrix multiplication 
note distinguish high probability distance time 
similarly approximation algorithm finds approximated distances stretch strictly distinguish distance distance get getting approximate distances stretch pairs vertices hard boolean matrix multiplication 
turning graph directed graph edges directed right get ij iff ffi 
approximating distances directed graphs multiplicative factor hard boolean matrix multiplication 
difficult see remains directed graph required strongly connected 
distance emulators closely related algorithms sections notion emulators 
definition emulators unweighted undirected graph 
weighted graph said emulator ffi ffi ffi significant difference emulators auxiliary graphs algorithms sections 
constructed vertex auxiliary graph supplied approximations distances vertices graph 
want single graph supply approximations distances 
constructing sparse emulator harder computing surplus distances 
definition emulators related definition spanners awerbuch peleg schaffer 
weighted undirected graph 
subgraph said spanner ffi 
subgraph ffi ffi 
definition differs definition emulators respects 
require additive error multiplicative error 
insist getting subgraph original graph allow weighted edges 
consider steiner spanners vertices edges may added graph 
steiner spanners closely related emulators 
consider additive spanners 
able obtain sparse additive spanners specific graphs pyramids grids hypercubes 
additive spanners emulators subgraphs original graph 
emulators may described weighted additive steiner spanners 
definition emulators related definition hop sets cohen 
implicit time algorithm constructing emulators edges :10.1.1.42.2824
get slightly stronger result 
theorem unweighted undirected graph vertices emulated subgraph edges 
subgraph constructed time 
omit simple proof due lack space 
subgraph emulator additive spanner multiplicative spanner 
section theorem show weighted graphs spanners size 
efficient algorithm running time mn finding spanners 
bipartite graphs omega gamma edges contain cycles length result tight polylogarithmic factors 
show theorem unweighted undirected graph vertices emulator edges 
graph constructed time 
proof difficult check graph thetad constructed algorithm apasp emulator 
tempting claim emulators similarly obtained running apasp 
unfortunately true 
infimum numbers graph vertices emulator ek edges 
shown 
conjecture 
able construct emulators edges 
construct emulators edges time 
theorem unweighted undirected graph vertices 
emulator edges constructed time 
easy see emulators steiner spanners 
show steiner spanners graphs vertices omega gamma edges 
show steiner spanners may require omega gamma edges steiner spanners may require omega gamma edges omega gamma omega gamma polylog 
stretched paths distances section describe algorithms finding stretched paths weighted graphs 
result part folklore 
lemma truncated dijkstra weighted graph vertices 
suppose adjacency lists vertices sorted weight 
vertex shortest paths vertices closest time 
set vertices returned truncated dijkstra algorithm running uniquely defined may vertices distance require set vertices returned algorithm ffi ffi 
theorem weighted undirected graph vertices edges 
preprocess graph time vertices time output estimated distance ffi satisfying ffi ffi delta ffi 
proof parameter chosen 
run truncated dijkstra algorithm vertex find set vertices closest time required finding sets ns 
find set size 
set ns time 
vertex keep pointer vertex 
run full dijkstra algorithm vertices time required nm 
keep theta matrix distances vertices vertices graph 
time far ns nm 
minimized total time 
pair vertices check 
output exact distance ffi computed truncated dijkstra output estimated distance ffi ffi ffi 
distance ffi truncated dijkstra distance ffi full dijkstra clearly ffi ffi 
ffi ffi 
ffi ffi estimate ffi satisfies ffi ffi ffi ffi ffi ffi ffi ffi ffi required 
essentially algorithm get theorem weighted undirected graph vertices spanner edges 
spanner constructed mn time 
proof parameter chosen 
run truncated dijkstra algorithm vertex find vertex set vertices closest find set size 
run full dijkstra vertex spanner composed shortest paths trees truncated full runs dijkstra algorithm 
total number edges ns 
choose number edges spanner total running time ns nm mn 
note mn original graph required spanner 
interested distances willing settle larger stretch factor number edges graph close get efficient algorithms 
appear full version 
howard karloff helpful discussions comments earlier version extended cohen david peleg clarifications regarding papers 
chekuri indyk motwani :10.1.1.42.2824
fast estimation diameter shortest paths matrix multiplication 
manuscript 
chekuri motwani :10.1.1.42.2824
fast estimation diameter shortest paths matrix multiplication proceedings th annual acm siam symposium discrete algorithms atlanta georgia pages 
alon galil margalit 
exponent pairs shortest path problem 
proceedings rd annual ieee symposium foundations computer science san juan puerto rico pages 
alon galil margalit naor 
witnesses boolean matrix multiplication shortest paths 
proceedings rd annual ieee symposium foundations computer science pittsburgh pennsylvania pages 
alon spencer 
probabilistic method 
wiley 
alon yuster zwick :10.1.1.101.4120
finding counting length cycles 
proceedings nd european symposium algorithms utrecht netherlands lecture notes computer science vol 
pages 
springer verlag 
journal version appear algorithmica 
das dobkin joseph soares 
sparse spanners weighted graphs 
discrete computational geometry 
awerbuch 
complexity network synchronization 
journal acm 
awerbuch berger peleg 
cost sequential distributed constructions sparse neighborhood covers 
proceedings rd annual ieee symposium foundations computer science palo alto california pages 
khanna motwani 
diameter verification boolean matrix multiplication 
technical report stan cs department computer science stanford university 
chandra das narasimhan soares 
new sparseness results graph spanners 
proceedings th annual acm symposium computational geometry berlin germany pages 
cohen 
fast algorithms constructing spanners paths stretch extended 
proceedings rd annual ieee symposium foundations computer science palo alto california pages 
cohen 
polylog time near linear approximation scheme undirected shortest paths 
proceedings th annual acm symposium theory computing montreal canada pages 
cohen zwick 
pairs small stretch paths 
submitted publication 
coppersmith winograd 
matrix multiplication arithmetic progressions 
journal symbolic computation 
cormen leiserson rivest 
algorithms 
mit press 
dijkstra 
note problems connexion graphs 
numerische mathematik 
feder motwani 
clique partitions graph compression speeding algorithms 
proceedings rd annual acm symposium theory computing new orleans louisiana pages 
fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
journal acm 
galil margalit 
pairs shortest distances graphs integer length edges 
submitted publication 
galil margalit 
witnesses boolean matrix multiplication 
journal complexity 
johnson 
efficient algorithms shortest paths sparse graphs 
journal acm 

additive graph spanners 
networks 
peleg schaffer 
graph spanners 
journal graph theory 
seidel 
pairs shortest path problem 
proceedings rd annual acm symposium theory computing victoria canada pages 
ullman yannakakis 
high probability parallel transitive closure algorithms 
siam journal computing 
wenger 
extremal graphs 
journal combinatorial theory series 

