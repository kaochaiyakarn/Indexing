validation verification implementation timed protocols aorta steven bradley william henderson david kendall adrian robson february aorta implementable timed process algebra proposed design language hard real time systems 
show aorta design model timed protocols illustrated alternating bit protocol 
describe tools developed simulation verification automatic implementation aorta systems outline relationship formal models verified code generated 
communication protocols embedded hard real time systems share important features timing concurrency communication central issues designers 
close relationship embedded system design techniques applied communication protocols vice versa show aorta applied timed communication protocols 
main distinction aorta timed process algebras lotos tccs aorta aimed specifically design algebras meant wide spectrum languages useful specification design modelling 
focus aorta ways restrictive ways expressive languages guarantee designs implemented directly 
timed bisimulations preorders relate sytems different levels abstraction language prefer timed modelchecking temporal logic easier construct specifications 
demonstrate practicality aorta set tools developed allow systems simulated verified automatically implemented 
structure follows 
introducing syntax aorta section description alternating bit protocol aorta section example illustrate techniques described 
validation testing aorta systems simulation described section verification model checking explained section including translation aorta timed graphs 
timed graphs verification implementation providing assurance verification theorems apply directly implementation 
show sections aorta model different assumptions behaviour communication line ranging bounds time taken transmit loss messages 
code generation techniques relationship timed graphs outlined section concluding section 
authors department computing university newcastle ellison place newcastle tyne ne st uk aorta syntax aorta timed process algebra draws untimed process algebras particular ccs syntax 
aorta system statically defined parallel composition sequential processes may 
individual process may wait communication communication synchronised blocks progress perform computation branch different behaviours recurse 
simplest process defined waits communication gate behaving process words process ready offer actions 
simple buffer process defined adding computation recursion describes process communicates gate possibly accepting data performs computation takes time units complete communicating gate possibly offering data returning start 
important points note firstly data handled explicitly aorta extensions computation represented amount time takes secondly computation delays represented bounds execution times exact figures 
bounds computation delays communication delays time outs easier provide verifiable implementation techniques 
implementation considered detail section 
behaviour branching dependent communication represented operator 
communications offered subsequent behaviour depends taken 
operator implement channel accepts delivers kinds messages channel channel channel process sends message channel available message received far gate 
choice communication extended timeout allows behaviour branch followed communication occurs certain time 
force limit long channel wait message accepted channel channel channel channel channel notice brackets indicate communication time affect time bounds specifying time value 
forms branching behaviour depend communication data dependent branching faulty behaviour 
represented non deterministic choice operator aorta shall describe little detail section 
table summarises syntax sequential process syntax 
having defined processes system placed parallel gates connected internal external communication 
communication delays expressed bounds system level represent amount time taken system communication communication choice 
sn bounded delay bounded time 
sn non deterministic choice 
sn recursion equational definition table summary aorta sequential process syntax notice effect communication 
information connection set lists pairs gates internal connection gate may connected externally connected gates corresponding delay bounds 
connection sets realised graphically processes correspond milner flow graphs 
example connection set section describe alternating bit protocol aorta 
alternating bit protocol aorta alternating bit protocol widely discussed example probably simplest examples protocol useful guarantees integrity communication situation messages may duplicated lost 
description milner ccs description 
concerned constructing send reply processes connected possibly noisy channels trans ack 
way alternating bit protocol works messages tagged bit successive messages tagged alternating bits 
having sent tagged message sender waits tagged arrive certain amount time message sent 
arrive message sent time tagged 
waits tagged message delivers data sends tagged 
receives tagged message simply sends tagged tagged message causes deliver message return tagged 
layout system shown 
reply process simpler defined aorta follows reply trans deliver deliver deliver reply reply reply trans deliver trans reply deliver deliver reply reply reply trans deliver trans reply time added send process resend messages sent certain amount time 
send accept send send send sending sending ack accept ack sending send accept accept send send send sending sending ack accept ack sending send accept accept send channel processes trans ack modelled aorta 
simple model send reply ack trans send send send send ack ack ack ack reply reply reply reply trans trans trans trans accept accept deliver deliver alternating bit protocol system processes accepting transmissions replies passing certain delay loss replication 
aorta written ack reply ack ack reply ack ack trans send trans trans send trans trans notice minimum delay time units taken buffers reach send process unit time expires maximum delay incurred sending process retransmit data 
processes connected send reply processes defining parallel composition connection set send reply ack trans send send trans send send send trans send send ack ack ack send ack ack ack reply reply ack reply reply reply ack reply reply trans trans trans reply trans trans trans send accept external reply deliver external 
connections listed inside angle brackets connection associated communication delay 
graphical representation system diagram aorta simulator indicate internal external communications available 
section discuss simulator relation formal semantics aorta 
simulation validation aorta formal semantics terms timed transition system defined operational rules 
aorta expression units time written gamma communication takes place written gamma gate name external communication distinguished action internal communication 
behaviour observed aorta simulator takes aorta description system described section allows behaviour stepped simple menu driven system 
similar simulators concurrency workbench tools facility showing graphically communications available 
shows screen shot simulator internal action available corresponding connection shown dashed line 
transition time action menu possible transitions offered possible action transitions displayed system layout diagram 
action transition chosen corresponding connection flashed diagram 
time transition chosen prompt asks time value commands 
commands progress time crucial point delay time possible internal communication respectively 
time value system aged amount provided go possible internal communication 
internal communications take place soon available maximum progress principle enforced semantics communication delay follows occurrence action semantics 
non determinism expressed time bounds non deterministic choice resolved simulator 
variety tactics available prompted simulator started 
resolution time bounds done choosing minimum value choosing maximum value choosing random value prompting user value 
resolution non deterministic choice achieved prompting user 
simulator system tested formal semantics attempt formally verify model checking see section implement coded generation see section 
approach save lot time frustration spent trying verify properties true 
alternating bit protocol system exercised simulator 
choosing time bounds resolved minimum value protocol required retransmit data normal behaviour examined 
maximum values times chosen sending process time part behaviour exercised 
different assumptions buffer behaviour built system altering trans ack processes simulating behaviour new system 
example include possibility transmit buffer losing messages non deterministic choice represent failure 
non deterministic choice written operator chooses branches non deterministically branch normal behaviour faulty behaviour 
version trans process allows possibility messages lost delays involved internal communication delays screen dump simulator trans send trans trans trans send trans trans trans process allows arbitrarily messages lost 
general case channel bounded response theorems proved system may repeat message arbitrarily times 
describe channel may lose copy message changed trans send trans trans send trans trans send trans trans send trans trans operator represent failures powerful tool modelling assumptions system evaluate extent system may perturbed losing functionality 
second process system simulator asks user choose cases corresponding message transmitted attempt necessary 
case simulator validates protocol successfully delivers message acknowledges transmission 
formal verification fact automatically achieved model checking described section 
duplication messages handled similar way 
timed graphs verification approaches automatic verification finite state concurrent systems known decade 
techniques checking state graph concurrent system model temporal logic formulae specify desired system properties 
approach great practical interest allows developer verify system constructing proof verification fails possible provide automatically trace unsatisfactory behaviour useful debugging 
shown systems large number states checked symbolic representation state graph approach adapted verification real time systems :10.1.1.26.7422
timed graphs timed graphs shown appropriate models real time systems adopted construction model checking tools approach verification depends translating aorta expressions timed graphs order tools 
section describe detail basis translation follows closely differs number interesting respects 
syntactic restrictions aorta allow simpler translation lead graphs inevitably possess number desirable properties including bounded variability bounded number transitions possible finite time non time able progress eventually 
translator implemented standard ml incorporated aorta tool set 
adapt variant timed graphs described relevant definitions completeness 
timed graph automaton extended finite set clocks clock realvalued variable records elapsed time 
clocks advance uniformly time reset zero 
assume time domain non negative reals results hold domains natural rational numbers 
finite set clocks rationals set clock formulae fc qg clock valuation function assigns clock value write valuation write valuation 
evaluation clock formula clock valuation written say satisfies clock formula definition timed graph tuple tcp ffl finite set nodes ffl initial node ffl finite set clocks ffl theta label theta theta theta finite set edges representing transitions 
transition consists source location target location label clock formula set clocks ffl tcp bool predicate determines location clock valuation time value system remain location time allowed progress amount timed graph gives rise labelled timed transition system gamma 
ffl theta set states ffl initial state ffl transition relation gamma 
rules action gamma time tcp gamma translation method give syntax aorta expressions 
finite indexing set finite set gate names act act set process names proc proc set sequential expressions seq seq js jx correspond summation time non deterministic choice recursion respectively 
usual write sum empty indexing set process perform action 
computation delay deterministic versions timed operators natural abbreviations follows def non deterministic computation delay def deterministic computation delay def deterministic time computation delays equivalent formulations time outs level abstraction notation introduced simply convenience require different treatment implementation apparent section 
set system expressions sys sys parallel composition finite number sequential expressions finite set internal connections connection represented unordered pair gate names require gate connected exactly gate environment single external connection assume case gate name occurring system expression associated connection set 
give translation sequential process expressions 
translation depends fact sequential process implemented single clock write clock associated process abbreviate singleton fc context clear 
clock associated sequential process reset transition simply records time process transition 
sequential process associated clock define compositional translation timed graph structure true true true la ua lb ub summation true eps true eps false non deterministic choice eps time simple timed graph constructions order introduce new distinguished action ffl act label time transitions transitions arising resolution non deterministic choice 
set labels label act fflg 
translation function takes aorta expression equivalent timed graph 
shows simple examples shows graph constructed send process alternating bit protocol 
exhibits pleasing symmetry reflects process description 
summation general sum form translation expression covers cases process action prefixing addition deterministic choice 
gate lower upper bounds possible communication delay written respectively 
graphs tcp fn tcp true ji ig tcp tcp locations tcp true clock valuation time value time tcp 
tcp ffl tcp tcp locations tcp tcp case non deterministic time subsumes deterministic time computation delay obvious way 
non deterministic choice tcp 
fn tcp ffl true ji ig tcp tcp locations tcp false clock valuation time value words choice resolved time progress 
recursion syntactic restrictions recursion allow translation proceed straightforward manner 
process name encountered translation sequential expression translation simply graph associated association exist encountered 
case associate add list names graphs constructed 
pass translation construct graph name list translating right hand side defining equation name 
initial node graph constructed way identified initial node graph previously associated name 
continue way constructed graphs names encountered 
parallel composition giving translation parallel composition adopt notational abbreviations theta theta theta jij jij ij jij jij assume indexing set fi jg translation aorta system expression fc ji ig tcp set transitions ic ec ic ij true fc true true kg ec true fc true icg ffl oe fc oe location clock valuation time value tcp tcp location ic require tcp false words true true true true true true true true true true true true true true accept eps send eps eps eps ack ack eps accept eps eps accept eps send eps eps ack ack eps timed graph send process time progress processes allow location capacity internal communication enforcing maximal progress principle 
sets give transitions internal communication external communication timeouts nondeterministic choice respectively 
notice external communication allowed state internal communication possible 
simple priority mechanism ensures desirable implementation property component swamped communication environment 
labelled transition system induced timed graph constructed aorta expression equivalent directly aorta semantics 
omit proof semantics reasons space 
observe graphs constructed approach simple structure edges constrained clock condition arising time outs computation delays simple constraint single clock 
intend explore simplicity structure exploited construction efficient model checker 
kronos verify timing requirements kronos symbolic model checker implements approach described henzinger 
allows timed graphs checked properties expressed real time logic tctl 
finite set atomic propositions formulae tctl defined follows oe pj oe joe oe joe oe natural number relational operators 
tctl formulae interpreted sequences states generated transition system timed graph 
details 
intuitively oe oe means exists sequence finite prefix oe satisfied state time oe satisfied continuously 
oe oe means sequence property holds 
number abbreviations commonly oe true oe oe true oe oe oe oe oe 
tctl expressive allow express system properties interest 
example bounded response property easily stated stimulus response captures requirement occurrence stimulus response happen time units 
useful properties bounded invariance bounded inevitability expressed just easily 
timed communication protocol property interest certain assumptions message accepted sending eventually delivered correctly certain time words bounded response property 
context description alternating bit protocol property stated init accept enable deliver course possible state check properties concerning correct operation protocol sending message strictly alternates receiving message tagged respectively tagged message sent tagged respectively tagged message received 
interest case explore design protocol checking properties varying assumptions transmission channels way discussed section simulator 
kronos check bounded response property protocol assuming error free communication assuming transmission channel loses message successful deliveries 
seen easily approach extended check property elaborate assumptions possible communication faults including lost garbled duplicated transmissions 
implementation code generation having validated verified aorta system semi automatic techniques implementing design 
techniques discussed detail 
section concentrate implementation individual processes relationship construction timed graphs model checking described section 
individual processes constructed executed separately case distributed implementation alternating bit protocol processor 
multitasking complicates issue timing addressed dedicated aorta kernel 
construction code implement aorta process done imperative language admits timing analysis 
entirely pragmatic reasons viz 
availability cross compilers timing tools effect portable assembler 
done implementing process algebra systems synchronous languages uses standard techniques rely standard synchronous language assumptions immediate responsiveness computer system 
code generated parts program related communication choice time recursion accounts send reply processes 
structure process built exactly way timed graph process state timed graph corresponding label generated program 
transition state corresponds goto statement 
communication handled kernel call takes array gates offered choice returns value corresponding gate communicates 
simple communication choice send process equation send send sending generated code looks process section send 
code send sending send switch communicate case goto send array contains names gates terminated array passing data communication simplicity 
label send pass control process sending goto 
possible sophisticated approach eliminated goto goto done compilers anyway resulting object code exactly structure corresponding timed graph 
complicated communication offers choice time definition process section sending 
code ack accept ack sending send sending switch case goto sending case goto sending case goto sending gates array kernel call extra argument specifies minimum real time clock increment required activate time 
time value returned time takes place values correspond communications gates ack ack respectively 
send process computation delays non deterministic choices implemented annotating design relevant piece hand written code branch condition inserted code correct point corresponding relevant node edge timed graph 
small pieces code connected gotos process built forming graph corresponds described section topology 
labels graph nodes edges define timing behaviour system 
timing behaviour guaranteed timing analysis kernel combined code timing pieces computation 
having formed graph topologically equivalent timed graph timing constraints nodes edges guaranteed kernel confidence properties system proved modelchecking hold implemented system 
implementation communication handled entirely kernel 
internal connections managed checking list pairs connected gates external communication achieved supplying function standard form called corresponding gate waiting communication 
functions standard form easily replaced help small scale prototyping easy 
processes implemented way model checking prove properties assumptions way processes behave 
case alternating bit protocol means assumptions way ack trans buffers behave 
behave way modelled losing copy single message example verified system hold 
described aorta implementable real time algebra shown model alternating bit protocol simple captures important features communication protocols 
shown aorta systems validated simulation formally verified model checking 
implementation techniques aorta systems partly described relationship established timed graph model formal verification 
aorta describe complex systems car cruise controller control logging system implemented techniques outlined 
translation process algebras timed graphs new timed graphs model checking timed protocols novelty providing tool supported framework timed systems designed tested verified verifiably implemented 
current aorta includes development efficient model checking algorithms advanced scheduling algorithms implementation investigation distributed parallel implementation systems 
authors university newcastle northern research financial support 
alur courcoubetis dill 
model checking real time systems 
ieee fifth annual symposium logic computer science philadelphia pages june 
alur courcoubetis dill 
model checking dense real time 
information computation 
bradley henderson kendall robson 
formally hard real time kernel 
microprocessors microsystems november 
bradley henderson kendall robson 
application oriented real time algebra 
software engineering journal september 
bradley henderson kendall robson 
designing implementing correct real time systems 
langmaack de roever editors formal techniques real time fault tolerant systems lecture notes computer science pages 
springer verlag september 
bradley henderson kendall robson 
modelling data real time algebra 
technical report npc trs department computing university uk 
submitted publication 
bradley henderson kendall robson hawkes 
formal design implementation method systems predictable performance 
technical report npc trs department computing university uk 
submitted publication 
burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
cleaveland parrow steffen 
concurrency workbench semantics tool verification concurrent systems 
acm transactions programming languages systems january 
olivero yovine 
verifying lotos programs kronos 

emerson clarke 
branching time temporal logic synthesize synchronization skeletons 
science computer programming 
henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
information computation 

timed lotos supporting dense time domain including new timed operators 
formal description techniques 
mcmillan 
symbolic model checking approach state explosion problem 
kluwer 
milner 
communication concurrency 
prentice hall new york 
moller 
temporal calculus communicating systems 
technical report ecs lfcs edinburgh university december 
nicollin sifakis yovine 
compiling real time specifications extended automata 
ieee transactions software engineering 
olivero yovine 
kronos tool verifying real time systems users guide manual draft 
park 
predicting program execution times analyzing static dynamic program paths 
real time systems march 
park shaw 
experiments program timing tool source level timing schema 
ieee computer may 
schneider davies jackson reed reed roscoe 
timed csp theory practice 
de bakker huizing de roever rozenberg editors real time theory practice rex workshop lecture notes computer science pages 
springer verlag june 
yovine 
ethodes pour la de syst emes es 
phd thesis institut national polytechnique de grenoble may 

