gast generic automated software testing pieter koopman jan tretmans rinus plasmeijer nijmegen institute information computing sciences netherlands pieter tretmans rinus cs kun nl 
software testing labor intensive expensive heavily technique control quality 
introduce gast fully automatic test tool 
properties order logic expressed system gast automatically generates appropriate test data evaluates property values analyzes test results 
way easier cheaper test software components 
distinguishing property system test data generated systematic generic way generic programming techniques 
implies need user indicate data generated 
duplicated tests avoided finite domains gast able proof property testing possible values 
important side effect encourages stating formal properties software 
testing important heavily technique measure ensure software quality 
part software project 
testing phase typical projects takes total project contributes significantly project costs 
change software potentially influence result test 
reason tests repeated 
error prone boring time consuming expensive 
introduce tool automatic testing 
automatic testing significantly reduces effort individual tests 
implies performing test cheaper tests budget 
restrict functional testing examination software obeys specification 
context distinguish steps process functional testing formulation property obeyed tested generation test data decision input values property examined test execution running program generated test data test result analysis making verdict results test execution 
introduced generic automatic software test system gast performs steps fully automatically 
gast generates test data types properties executes test generated test values gives analysis test results 
system produces message software successfully passed specified number tests particular property shows arguments property hold 
testing easier cheaper 
important side effect encourages writing properties hold 
contribute documentation system 
empirical evidence writing specifications contributes quality system 
gast implemented functional programming language clean 
primary goal test software written clean 
restricted software written clean 
functions written languages called foreign function interface programs invoked 
properties tested expressed functions clean 
properties power order predicate logic 
properties state properties individual implemented functions datatypes larger pieces software complete programs 
definition properties semantics introduced section 
existing automatic test systems random generation :10.1.1.47.1361
test involves user defined datatypes tester indicate elements type generated 
test system gast improves points 
systematic generation test data duplicated tests involving user defined types occur 
proofs possible 
generic generator tester define elements userdefined type generated 
generic programming deals universal representation type concrete types 
explained section 
automatic data generation treated section 
tester wants control generation data explicitly able section 
preparations test execution straightforward 
property tested generated test data 
gast uses code generated clean compiler compute result applying property test data 
important advantages 
exist semantical differences ordinary clean code interpretation properties 
secondly keeps gast simple 
way able construct light weight test system 
treated section 
test result analysis illustrated examples 
section introduce additional tools improve test result analysis 
discuss related open issues conclude 
generic programming generic programming universal tree representation datatypes 
required elements datatype transformed universal tree representation 
generic algorithm defined tree representation 
applying appropriate transformations generic algorithm applied type 
generic programming essential implementation gast 
users know generic programming 
reader wants get impression gast skip section reading 
generic extensions currently developed haskell clean 
clean loss generality 
generic types universal type constructed type definitions 
unit unit leaf type tree pair pair branch tree left right choice example give algebraic datatypes color list generic representation listg 
symbol generic version definition indicates just type synonyms define new types 
color red yellow blue ordinary algebraic type definition unit unit unit generic representation list nil cons list listg unit pair list transformation user defined type generic counterpart done automatically generated functions color unit unit unit red left left unit yellow left right unit blue right unit list unit pair list nil left unit cons xs right pair xs generic system automatically generates functions inverses 
generic functions representation types define generic functions 
example show generic definition equality generic geq bool geq unit true geq pair fa fx pair pair fa fx geq fl fr left left fl geq fl fr right right fr geq false geq int instances pair additional arguments 
arguments provided generic system define subtypes compared 
respect generic functions differ ordinary classes functional programming 
order equality color instance geq color derived derive geq color 
system generates code equivalent clean uses additional constructs information constructors record fields 
direct generic representation result types type synonyms listg shows structure result clearly 
consider basic type int 
basic types handled similarly 
geq color geq geq geq unit geq unit geq unit additional arguments needed geq geq color determined generic representation type color 
version equality want define instance geq color deriving default 
infix version equality defined infix bool geq geq enables write expressions red blue 
necessary type conversions form color need specified generated applied appropriate places generic system 
important note user types color list need aware generic representation types 
types introduced usual static type system checks consistent types usual 
specification properties step testing process formulation properties formalism handled gast 
order handle properties order predicate logic gast represent functions clean 
property expressed function yielding boolean value 
expressions value true indicates successful test false indicates counter example 
solves famous oracle problem decide result test correct 
arguments property represent universal variables logical expression 
properties number arguments arguments non polymorphically type 
functions specify properties single functions operations clean properties large combinations functions entire programs 
consider defined finite values test data 
due restriction able operator operator clean represent logical operators respectively 
example involves implementation logical function input nand function basic building element 
bool bool bool nand nand desired property value function equal value ordinary operator clean 
operator serves specification new implementation 
logic bool bool property represented function clean 
convention prefix name properties prop 
propor bool bool bool propor user invokes testing property main function start test propor gast yields proof success arguments tests property 
finite types involved property proven testing 
second example consider classical implementation stacks stack pop stack stack pop top stack top push stack stack push desirable property stacks pushing element stack element top stack 
popping element just pushed stack yields original stack 
combination properties expressed stack bool geq top push pop push property hold type stack element 
polymorphic functions generic equality 
gast generate test data concrete type 
specify type gast type argument instance int stack int bool contrast properties overloaded types matter concrete type choose 
polymorphic property hold elements type holds elements type int 
test executed start test 
gast yields passed tests 
property involves large type integer infinite type stack testing finite number cases possible 
propor implementation state property function 
expressed desired property directly relation functions datatype 
kind properties state relations input output functions model checking properties 
instance tested system safe communication unreliable channels alternating bit protocol requirement sequence received messages equal input sequence messages 
adds implication operator primitive predicate logic 
instance law implement infix bool bool bool order predicate logic existential quantifier 
introduce values constructive way directly transformed local definitions functional programming language instance directly expressed local definitions 
real bool sqrt general possible construct extensionally quantified value 
instance type day function tomorrow require day exists tomorrow day tomorrow day day searched type day 
gast operator exists express day property day exists tomorrow day task tester write properties propor invoke testing start test propor 
type arguments needed property test system generate test data execute test values analyze results tests 
sections explain gast works 
tester know 
semantics properties gast extend standard operational semantics clean 
standard reduction weak head normal form denoted whnf additional rules applied ordinary reduction 
implementation follow semantics rules directly 
possible results evaluation property values suc success ce counterexample 
rules represents function 
expression type partially parameterized function lambda expression 
evaluation property eval yields list results eval eval eval true suc eval false ce eval eval whnf test property evaluate test rule analysis list test results rule maximum number tests 
possible test results proof indicates property holds defined values argument types passed indicated property passed tests finding counterexample fail indicates counterexample 
test eval whnf proof passed ce rest fail rest rest ce important properties semantics test proof test fail test passed take eval ce property state gast produces proof property universal valid 
system yields fail counter example exists 
systems yields passed tests contain counterexample 
properties proven induction case distinction rules 
introduce additional rules eval way properties preserved 
semantics exists operator eval exists eval ce undef suc rest suc rest rest suc rule scans list semantic results yields success list results contains success results 
soon results rejected system proof property 
successfully test property values 
ensure termination number rejected test limited additional counter 
changes implemented analyse section 
generating test data test property step test process need list values argument type 
gast evaluate property values list 
testing context referentially transparent language dealing pure functions result function completely determined arguments 
implies repeating test arguments useless referential transparency guarantees results identical 
gast prevent generation duplicated test data 
finite types bool non recursive algebraic datatypes generate elements type test data 
basic types real int generating elements feasible 
far elements integers typical computer 
types want gast generate common border values random values type 
preventing duplicates usually repeating test 
require gast prevents duplicates 
recursive types list infinitely instances 
gast able test properties involving types finite values 
recursive types usually handled recursive functions 
function typically contains special cases small elements type recursive cases handle elements 
order test functions need values special cases values general cases 
achieve generating list values increasing size 
preventing duplicates important 
standard implementation technique functional languages probably classes generate compare print elements datatype involved tests :10.1.1.47.1361
instances standard datatypes provided test system 
user defined types require user defined instances types classes 
defining instances error prone time consuming boring 
class approach hinder ease test system 
special gast generic programming techniques general solution provided 
generation test data gast generates list generic representations desired type 
generic system transforms values instances types needed 
obviously generic tree transformed instances type 
type color trees left left unit left right unit right unit represent valid values 
fortunately generic system provides necessary information guide generation trees form additional arguments geq example shown 
recursive types generic tree grow infinitely 
detailed knowledge type predict infinite branches occur 
implies systematic depth strategy traverse tree possible values fail terminate 
small values appear close root generic tree generated 
depth traversal encounter values late 
left right strategy favor values left branches visa versa 
bias direction undesirable 
order meet requirements strategy uses random choice type tree 
prevent duplicates record tree representation generated values datatype trace 
trace unit pair trace trace trace trace bool trace trace int int done empty single type trace keep track visited parts generic tree generated values generic representation avoid type incompatibilities 
want manipulate generic representations type single function generic 
type trace looks quite different ordinary generic tree record generated values single tree 
ordinary generic tree just represents single value 
new parts trace constructed generic function generate 
function prepares trace generation element list test data 
uses list pseudo random values choose randomly extending left right branch trace 
generation chosen branch fails tries extend branch 
branches extended values subtree generated result done 
function uses generate produce list values desired type 
generates values trace indicates done 
generate rnd empty rnd done rnd rnd rnd generate rnd rnd rnd rnd code fragment handling listed 
interesting case 
class produces element desired type random stream 
tl tr rnd rnd rnd tl rnd tl rnd case tl done tr rnd tr rnd case tr done done rnd right tl tr rnd left tl tr rnd tr rnd tr rnd case tr done tl rnd tl rnd case tl done done rnd left tl tr rnd right tl tr rnd corresponding instance generate follows direction indicated trace 
trace empty takes boolean random stream creates desired value initial extension trace 
generic generate trace trace generate fl fr empty rnd rnd rnd tl rnd fl empty rnd left left tl empty rnd tr rnd fr empty rnd right right empty tr rnd generate fl fr left tl tr rnd left tl rnd fl tl rnd left left tl tr rnd tr rnd fr tr rnd right left tl tr rnd pair extend branches turn step 
lists tuples keep track 
convention tuple list contains traces generate 
second list efficiently implement adding new tuples tail list 
step new tuples added exist current left branch right branch left branch new empty right branch 
generic generation functions test data clean higher order language perfectly legal function argument result function 
properties higher order functions useful 
known property function map expressed bool geq xs map map xs map xs order test property choose concrete type polymorphic arguments 
choosing int type variables yields int int int int int bool leaves problem generating functions automatically 
functions datatypes generated default generic generator 
fortunately generic framework provides way create functions 
generate function type defining generic instance generate 
function defined generating list values type argument type transformed generic way index list 
generated function just transforms argument index selects corresponding element list values 
instance generated function type int color look red yellow blue 
abs 
due space limitations omit details 
test execution step test process test execution 
implementation individual test direct translation semantic rules introduced 
type class testable contains function evaluate directly implements rules eval class testable evaluate admin admin order able show arguments specific test arguments represented strings result test record called admin 
possible results test undefined undef success ok counter example ce 
admin res result args string result undef ok ce instances argument property 
system able generate elements type generate transform string order add administration 
class generate semantic equations implemented instance evaluate type bool 
instance testable bool evaluate rs result result res ok ce args reverse result args rule function application semantic equation complicated slightly function arguments 
instance testable testable evaluate rs result rs rs split rs forall gen rs rs result forall list rs diagonal apply seed list seed rs apply rs evaluate rs args show args function diagonal takes care fair order tests 
argument function system generates sequences arguments call 

respectively 
order tests 

test result evaluation final step step test process evaluation results 
system just scans generated list test results indicated extension showing number arguments current test test result evaluated 
way tester gast able identify data causing runtime error lot time 
somewhat simplified version function test test string testable test analyse evaluate analyse admin int int string analyse success arguments analyse tostring tests analyse tostring arguments analyse res rest blank tostring res args case res res undef analyse rest ok analyse rest ce res args additional features order improve power test tool introduce additional features 
possibilities realized combinators functions manipulate administration 
consider groups combinators improved implication discards test hold combinators collect information actual test data combinators apply user defined test data generated test data 
implication implication operator works correctly operational drawback hold property holds counted successful test 
operator put restriction arguments considered wants consider tests holds situations test taken account 
represented result undefined 
introduce operator purpose 
eval true eval eval false rej predicate holds property evaluated explicitly yield undefined result 
implementation infixr bool property testable prop evaluate prop rs res undef need access administration property righthand side boolean datatype holding function access administration 
property prop admin admin instance testable property evaluate prop rs result rs result operator 
result executing test counter example tests 
failure caused finite precision reals 
information test data properties impossible test possible arguments 
tester curious known actual test data test 
system provides combinators help label property testable classify bool property testable function label adds label classify adds label condition holds 
order able collect labels extend administration admin field labels type string 
gast collects strings orders alphabetically counts computes fraction tests contain label 
label expression type converted string generic way 
functions change semantics specification effect additional information report tester 
eval label eval adds administration eval classify true eval label eval classify false eval illustrate functions 
possible view exact test data testing property stacks int stack int property label top push pop push possible result testing combinations arguments passed tests function classify instance count number empty stacks occurring test data 
int stack int property classify isempty top push pop push typical result tests passed tests user defined test data gast generates sensible test data type arguments 
tester satisfied behavior 
occurs generated elements obey condition implication cause enormous calculations overflow 
property uses known naive definition fibonacci function fib specification 
property states value efficient version function equal value fib non negative arguments 
fib fib fib fib fib fib prevent long computations overflow limiting size argument implication 
instance fib unsatisfactory solution 
success rate tests generated list test values low due condition test results undefined condition implication false 
situations efficient user specifies test values letting gast generate 
purpose combinator defined 
implementation simple machinery developed infixl property testable list prop forall list instance test equivalence fibonacci functions arguments testing yields proof success arguments tests 
semantics combinator eval list list eval related testing labor intensive boring error prone 
done software engineers 
surprisingly large number tools developed automate testing 
see incomplete overview existing tools 
tools engineered gives automatic support gast steps testing process 
tool able generate test data systematically arbitrary types types properties 
functional programming world related tools 
tool quickcheck similar ambitions tool 
distinguishing features tool generic generation test data arbitrary types user defined instance class systematic generation test data random 
consequence systematic generation test data system able detect possible values tested property proven 
gast offers complete implementation order predicate logic 
tool automatic benchmarking functional datatypes 
able generate form test data systematic generic way 
specification properties runtime errors detected 
haskell variant junit java 
junit defines structure test cases provides tools run 
executes test defined user 
tests implemented subclass testcase 
important area automatic test generation testing reactive systems control intensive systems 
systems interaction environment terms stimuli responses important 
typical examples communication protocols embedded systems control systems 
systems usually modelled specified kind automaton state machine 
main approaches automatic test generation specifications 
finite state machines fsm uses theory checking experiments mealy machines 
academic tools exist tests derived fsm specifications conformance kit 
gast able test properties fsm checking actual state requires additional research 
second approach labelled transition systems emanates theory concurrency testing equivalences 
tools approach tgv torx 
state tools concentrate control flow usually cope complicated data structures 
shown gast able cope data structures 
discussion introduce gast generic tool test software 
complete code lines downloaded www cs kun nl pieter 
tests properties software stated functions order predicate logic 
types properties system generates automatically test data systematic way checks property generated values analyzes results tests 
define various kind properties 
functions describe properties slightly powerful order predicate logic 
system able express properties known names black box tests algebraic properties model pre post conditional 
ability specify test data user guided white box tests possible 
experience indicate kinds errors spotted gast 
system distinguish errors 
tester analyze 

errors implementation 
kind mistakes expect find 

errors specification 
situation tested software obey property 
analysis indicated counter example shows specification wrong software 
testing improves confidence accuracy properties 
errors caused finite precision computer 
especially properties involving reals frequent problem 
general specify difference obtained answer required solution smaller allowed error range 

non termination run time errors 
system explicitly handle errors tester notices error occurs 
gast lists arguments executing test values causing error known 
appears detect partially defined functions effectively 
efficiency gast mainly determined evaluation property generation data 
instance standard pc system generates integers lists integers second 
experience errors pop soon exist 
usually tests sufficient reasonably sure validity property 
contrast proof systems gast restricted welldefined finite arguments 
proof systems investigates property non terminating arguments usually denoted infinite arguments instance list infinite length 
possible generate undefined infinite arguments impossible evaluation property argument 
direct consequence decision ordinary compiled code evaluation properties 
restrictions current system types known system possible handle types generics restrictions types enforced explicitly world access supported 
general undesirable world file system disk effected random tests 
currently tester indicate property tested writing appropriate start function 
near want construct tool extracts properties clean modules tests properties fully automatically 
gast restricted testing software written implementation language clean 
possible call function written language foreign function interface invoke program 
people contributed gast 
name marko van eekelen maarten de mol peter susan evens 

plasmeijer generic programming extension clean 
ifl lncs pp 

gaudel software testing formal specifications theory tool software engineering journal pp 

claessen hughes 
quickcheck lightweight tool random testing programs 
international conference functional programming acm pp 
see www cs chalmers se quickcheck 

claessen hughes 
testing monadic code quickcheck haskell workshop 

van eekelen de mol reasoning explicit strictness lazy language mixed lazy strict semantics draft proceedings ifl report computer science universidad de madrid pp 

hinze jeuring 
generic haskell practice theory summer school generic programming 

hinze peyton jones derivable type classes proceedings fourth haskell workshop montreal canada 

hinze polytypic values possess types fifth international conference mathematics program construction lncs pp 

home page sourceforge net 
peyton jones hughes report programming language haskell non strict purely functional language www haskell org 

home page junit sourceforge net 
de mol van eekelen plasmeijer 
theorem proving functional programmers lncs pp 
see www cs kun nl 

graeme moss colin runciman 
inductive benchmarking purely functional data structures journal functional programming pp 
home page www cs york ac uk fp 
rinus plasmeijer marko van eekelen concurrent clean language report version 
www cs kun nl clean 

maurice testing tools sleep working 
see www nl 

tretmans software engineering formal methods development storm surge barrier control system revisiting myths formal methods formal methods system design pp 

lee yannakakis principles methods testing finite state machines survey proceedings ieee pp 

moonen conformance testing multimedia system workshop testing communicating systems pp 

brinksma tretmans testing transition systems annotated bibliography modeling verification parallel processes th summer school lncs pp 

fernandez ron fly verification techniques generation test suites lncs 

ron automated test generation sdl specifications sdl millennium proceedings th sdl forum pp 

turner protocol inspired hardware testing int 
workshop testing communicating systems pp 

vries tretmans formal test automation simple experiment int 
workshop testing communicating systems pp 

tretmans brinksma te de automated model testing progress rd workshop embedded systems pp 

