universit degli studi di bologna deis magma multiagent architecture metaheuristics andrea roli milano august deis technical report 
deis lia lia series magma multiagent architecture metaheuristics andrea roli milano deis universit degli studi di bologna viale bologna italia deis unibo august 
introduce multiagent architecture conceived conceptual practical framework metaheuristic algorithms magma multiagent metaheuristics architecture 
metaheuristics seen result interaction di erent kinds agents level agents constructing initial solutions level agents improving solutions level agents providing high level strategy 
framework classical metaheuristic algorithms smoothly accommodated extended new algorithms easily designed de ning agents involved interactions 
furthermore fourth level agents coordinating lower level agents magma describe uniform way cooperative search general combination metaheuristics 
propose perspective aim achieve better clearer understanding metaheuristics obtain new algorithms suggest guidelines software implementation 
specializations general architecture provided order show existing metaheuristics easily described framework 
keywords metaheuristics agents combinatorial optimization contents metaheuristic algorithms classi cations problem models fitness landscape search problem formalization 
fitness landscapes 
examples 
traveling salesman problem 
satis ability problem 
magma multiagent metaheuristic architecture de nition multi level architecture 
specializing magma grasp 
ant colony optimization 
iterated local search 
memetic algorithms 
cooperative search 
discussion related deis technical report 
deis lia lia series metaheuristic techniques solve hard problems generally np hard problems conjunction exact algorithms 
problem size large exact algorithms computationally expensive 
cases approximate algorithms guarantee nd optimal solution ective alternative complete methods 
metaheuristics approximate algorithms encompass combine constructive methods local search strategies local optima escaping strategies population search 
include restricted tabu search simulated annealing evolutionary computation memetic algorithms scatter search ant colony optimization grasp iterated local search variable neighborhood search :10.1.1.145.8411
surveys current research metaheuristics 
revisit metaheuristics multiagent perspective provide uniform framework magma existing newly designed metaheuristic algorithms smoothly accommodated 
section survey commonly classi cations metaheuristics 
section de nes basic concepts de nition metaheuristics 
describe magma section provide formal de nition agents 
section show specializations magma describe best known metaheuristic algorithms 
section discuss important themes approach section outlines related works 
open perspectives 
metaheuristic algorithms classi cations classi cations metaheuristics useful help outline similarities differences algorithms 
discriminant set properties classify algorithms 
important aspect classi cation level abstraction algorithms described 
common key properties recognized general description formulated algorithms class de ned specializations 
metaheuristics framework useful comparing existing algorithms analyzing algorithm properties identifying strengths weaknesses designing hybrid brand new algorithms supporting software engineering 
di erent ways classify describe metaheuristic algorithms 
familiar easiest description algorithm origins 
algorithms genetic algorithms ant algorithms non nature inspired ones tabu search iterated local search 
classi cation quite rough main reasons hybrid algorithms memetic algorithms completely class sense time ii classi cation helpful compare algorithms 
way classify metaheuristics di erentiating single population heuristics 
rst commonly called trajectory methods encompass local algorithm adaptive memory programming initialize memory stopping condition met generate new solution data stored memory improve local search improved solution update memory pieces knowledge brought search metaheuristics tabu search iterated local search variable neighborhood search 
share property describing trajectory continuous search space search process 
population metaheuristics conversely generate search processes dynamically describe evolution set points search space 
important population methods evolutionary computation memetic algorithms scatter search ant colony optimization 
interesting framework called adaptive memory programming amp 
amp describes class metaheuristics algorithms memory store information collected search process information bias solution construction search term adaptive 
amp high level algorithm reported algorithm 
general framework metaheuristics described tabu search ant colony optimization aco scatter search 
tabu search explicitly handles short term memory tabu list avoid cycling set states 
population metaheuristics memory implicitly embedded shared data structures population evolutionary algorithms pheromone trails aco 
amp clearly points importance memory solution construction search 
level abstraction chosen enables informally introduce concepts memory stored information solutions usefulness limited general description algorithms search history 
amp framework helps design new algorithms descriptive level general 
ways describing metaheuristic algorithms proposed 
example framework evolutionary computation algorithms discussed evolutionary algorithms described depending main features individual representation evolution process neighborhood structure information sources infeasibility cation diversi cation 
sections introduce preliminary concepts problem model tness landscape examples 
de ne magma multilevel multiagent architecture designed metaheuristics 
specialization architecture grasp ant colony optimization iterated local search memetic algorithms cooperative search provided showing large class metaheuristics proposed framework 
appears 
problem models fitness landscape section introduce problem classes metaheuristics usually attack brie discuss design issues problem 
furthermore introduce tness landscape fundamental component de nition search process 
search problem formalization widest class problems metaheuristics deal constraint satisfaction problems csps combinatorial optimization problems cops 
de ned set variables fx variable domains constraints variables objective function optimized minimized maximized 
csps objective function constant solved feasible solution whilst cops non trivial function 
important variants problems max csps objective maximize number satis ed constraints weighted sum multi criteria cops criterion optimized 
model non ambiguous formal de nition problem main entities constraints costs values associated con gurations entities goal 
objects de ned model directly algorithm 
choice speci model general algorithm oriented see tailored algorithm solve problem 
holds systematic constructive methods metaheuristics 
example problem modeled binary variables linear inequalities ectively solved integer programming techniques model general best constraint programming nite domain solver applied 
metaheuristics context instance simple genetic algorithms solutions may coded binary strings 
model may de ne alternative objective function example introducing penalties infeasible solutions smoothing functions shape search landscape 
observe search process may dynamically change models swapping di erent objective functions 
fitness landscapes local search process viewed exploration landscape aimed nding global optimum local optimum 
fitness landscape de ned triple algorithm algorithm algorithm problem definition model 
model model 

conceptual process original problem representation algorithm 
model de nition algorithm dependent solution space neighborhood structure objective function tailored chosen metaheuristics 
set solutions states neighborhood function de nes neighborhood structure assigning set states objective function speci case called tness function ir fitness landscape referred fl interpreted graph see nodes solutions tness value arcs represent neighborhood relation states 
neighborhood function implicitly de nes operator takes state transforms state 
dually operator possible de ne neighborhood variable fs fs obtained application usually operator symmetric neighbor neighbor graph representation depicted undirected arcs represent symmetric neighborhoods 
property neighborhood structure allow path pair nodes graph connected 
notion fl neighborhood permits frame local search algorithms search processes graph 
search starts initial node explores graph moving node neighbors reaches termination condition 
exists de nition tness landscape formal general 
purpose contribution sucient know formal de nition deal states nodes search graph composed populations solutions 
key point multi sets sets possible repetitions elements 
multi set substitutes single solution operator 
example undirected graph representing tness landscape 
node associated solution corresponding tness value 
arcs represent transition states means 
undirected arcs correspond symmetric neighborhood structure 
transforms multi set 
furthermore operator de ned function assigns probability possible transition states 
de nition fl enables deal population heuristics genetic algorithms way simple local search algorithms 
important design issues developing search algorithm fl solution representation neighborhood structure tness function 
furthermore ways cope constraints 
example possible map csp cop free optimization problem constraints infeasible solutions penalized tness function 
worth underlining tness function choice operator determines properties landscape 
operator landscape concept introduced 
algorithm performance strongly ected model chosen general best choice exists leads best performance algorithm problem combination examples section examples previously introduced concepts 
empirical conjecture theoretically supported free lunch theorem 

example exchange move 
tour reconstructed way 
traveling salesman problem traveling salesman problem tsp de ned follows undirected graph supposed fully connected nodes arc associated positive value nd hamiltonian tour minimum total cost 
problem de nition representations models possible 
shall discuss common ones 
representation solution hamiltonian tour represented sequence arcs nodes graph 
solution cost sum costs arcs tour 
successful neighborhood structures introduced representation called exchange exchange lead opt improvement algorithms 
algorithms need start feasible solution 
exchange operator deletes arcs feasible tour reconnects paths tour way see 
exchange move sketched arcs removed feasible tour reconstructed di erent arcs case possible ways reconstruct cycle 
fl generated moves di erent de ned neighborhoods di er size connectivity properties 
exchange neighborhood ex cardinality proportional exchange jn ex proportional observe solutions de ned model feasible original problem moves preserve hamiltonian tour structure 
representation solution hamiltonian tour alternatively represented sequence values fv nodes graph solution represents sequence nodes tour 
example represents tour 
solution cost sum costs arcs tour 
simple move operator may exchange nodes sequence 
initial solution feasible tour result move guaranteed feasible 
similarly possible de ne moves pick nodes exchange leading 
example exchange move 
removal arcs possible ways reconstruct tour 
gure just shown 
de nition neighborhoods perm observe operators de ne neighborhoods cardinality proportional 

worth note representation chosen fv interpreted position node introduce additional constraint avoid 
satis ability problem example discuss possible representation satis ability problem sat solved local search 
sat de ned follows set clauses logical disjunction literals literal variable negation goal nd assignment variables satis es clauses 
example set clauses satis ed assignments suppose solve sat local search 
sat problem involve optimization criteria solution satisfying constraints accepted 
solving sat ls need introduce model objective function evaluates assignments respect closeness satisfying ones 
typical objective function number satis ed clauses choices possible feasible solution sat problem mapped optimal solutions model 
magma multiagent metaheuristic architecture weak notion agent states agent software system enjoys properties see example non oblivious functions maxsat problems 

example hill climbing local search fl 
agent starts node moves best neighbor tness value 
node possibilities move neighbors lower tness 
agent reached local optimum reach global optimum autonomy social ability reactivity pro activeness context adopt metaphor agent referring system able build solution move landscape communicate agents active goal oriented possibly adaptive 
fact devise di erent kinds agents di erent functionalities perspectives goals 
agents act multi level architecture magma depicted composed levels corresponds di erent level abstraction 
level specialized agents implementing algorithm 
level provides feasible solution set solutions upper level considered solution level 
level deals solution improvement agents perform local search termination condition veri ed de ned level deals neighborhood structure 
level agents global view space task guide search promising regions 
de ned landscape level 
fourth level level introduced describe higher level strategies cooperative search combination metaheuristics 
de ned coordination level deals di erent landscapes strategies 
level solution builders level strategic agents level solution level coordination level 
multi level architecture metaheuristic algorithms 
communications levels possible algorithm described result interaction agents algorithmic components specialized speci task 
kinds communication possible horizontal communication characterizes information exchange agents level vertical communication agents belonging di erent levels exchange data 
communication agents implemented kind mechanism protocol 
designer free choosing suitable communication scheme 
example agents blackboard message passing mechanism 
agents formally de ned tuples elements describes computational capabilities knowledge goals 
de nition encompasses current metaheuristics extended include new metaheuristics 
tuple composed main components model strategy formalize tuples level section specialize tuples speci algorithms 
de nition multi level architecture level level belong solution builder agents task produce starting solutions 
level agents referred agents deal problem entities variables domain values constraints partial solutions depending representation chosen 
agents goal construct starting solution upper level 
agents may exploit strategies random initialization greedy construction probabilistic construction pheromone computational capabilities usually quite limited 
generally reactive agents behavior heuristic criterion may dynamically changed upper levels agents 
agents level de ned tuple hm hv ofi 
components domains de ne values components assume constraints nally objective function 
strategy specialized depending metaheuristic algorithm describing 
provide examples section 
strategy actual constructive algorithm instance random greedy probabilistic components variables partial solutions element building block solutions 
constraints needed agent construct solutions feasible respect model possible infeasible original problem shown section example ls sat discussed 
output level provides solutions upper levels 
addition level triggered time restart performed 
level level contains solution agents 
agent searches fitness landscape fl local search trying improve initial solution got lower level 
level agents agents implement various search algorithms constitute single independent search agents cooperating agents 
agents deal solutions neighborhood structures 
usual concept short term memory belongs level agents past intensify search escape local optima 
agents usually just reactive goal oriented 
agents de ned tuple hm fi 
strategy improve solution specialized speci metaheuristic 
consider model sol initial solution neighborhood structure search history tness function 
initial solution provided level arrow starting point search guided strategy general search history tness function 
important element neighborhood structure de nes portion search space visible state 
neighborhood structure dynamic tabu search agent dynamically change neighborhood search process suggested upper level agents arrow 
output level improved solution general represents local optimum state corresponding search stagnation 
worth stress complex agent dicult separation basic algorithmic components 
having level agents sophisticated dynamic neighborhood structures architecture suggests design simpler agents coordinated upper level agent 
example metaheuristics dynamic neighborhoods described system composed level agents neighbor alternate search process coordination strategic agent level 
level level agents agents strategic agents sample search space looking promising regions explore 
solutions produced level provide useful information structure optimal suboptimal solutions 
level agents store best solutions provided level arrow suggest building blocks highest probability part optimal solution arrow suggest regions search space promising arrow dynamically bias cation diversi cation balance arrows provide new building blocks level arrow 
agents deal landscapes 
long term memory implemented exploited level data concerning history search process lower level agents stored 
main uses long term memory implementation diversi cation strategies 
agents implement techniques direct comparison solutions statistics positive feedback mechanisms search fl approximation fl explored agents return guiding lights search level arrow 
agents described tuple hm hp fi strategy guiding lower level agents 
model contains set solutions agents history tness function set solutions provided agents mainly population methods recombination mutation operators applied population 
history structured ensemble data collected search process 
includes information agent search process instance best solution 
information exploited strategy leads lower level agents 
level agents belonging level called agents coordinate lower level agents behavior 
example cooperative search implemented agents know model strategy lower level agents coordinate behaviours communications 
agents may evaluate lower level agents results reward agents extracted best solutions building blocks 
apply learning algorithms evolutionary ones select adapt improve population lower level agents actions involve communications expressed arrows 
agents perform meta reasoning behavior agents lower levels 
computational capabilities agents highest levels learning reasoning agents 
agents described tuple hm ht strategy guiding lower level agents 
model contains complete description lower level agents strategy de nes speci coordination scheme 
worth noting level structure composed model strategy 
observe higher level higher abstraction 
fact strongly problem dependent components represent problem entities constraints relations 
contrary manipulates solutions independently semantics enlarges gap problem representation focuses tness landscape analysis 
consider meta model containing tuples lower level agents 
specializing magma magma exploited conceptual implementation framework metaheuristic algorithms metaphor designing multiagent algorithms optimization problems 
section concentrate rst topic show ective metaheuristic algorithms described terms magma agents 
describe specializations architecture showing trajectory population algorithms easily de ned framework 
sections specialize tuples describing agents involved metaheuristic 
obviously models depend particular problem algorithm greedy randomized adaptive procedure stopping criterion satis ed construct solution greedy randomized procedure apply local search memorize best solution solved skipped 
tuple describe strategy 
metaheuristics just described agents agents 
example basic tabu search realized single agent randomly constructs initial solution single agent performs search tabu lists 
course tabu search metaheuristics long term memory need agent level balances cation diversi cation instance enlarging restricting tabu list 
detailed description discussion metaheuristic algorithms scope just easiest general form 
worth noting variants algorithms easily obtained changing algorithms implemented level 
possible introduce agent level 
communications levels important principle involve possible combinations links levels metaheuristic algorithms designed far just possible communication links 
grasp start series examples simple algorithm grasp 
algorithm composed greedy construction procedure local search procedure see algorithm 
construction procedure builds solution applying greedy function step adds randomly chosen component ones highest greedy function value 
local search phase starts choice local search algorithm depends problem solved 
grasp easily described magma rst level generates solution means greedy algorithm single agent performs local search nally agent keeps track best solution 
communications unidirectional information ows level level level level 
magma version grasp depicted 
instantiations strategy tuple grasp greedy random constructive strategy simple local search strategy implementing hill climbing stores current best solution 
ant colony optimization ant colony optimization known population metaheuristic designing algorithms cops :10.1.1.145.8411
inspiring idea aco foraging behavior real ants way communicate 
real ants deposit pheromone trail walking select direction stochastic way 
higher pheromone value path higher probability ant chooses path 
arti cial ants simple agents construct solution choosing component probabilistic way function pheromone 
aco pheromone mean communicate solution components 
level level level greedy randomized construction local search store best solution 
multi level architecture version grasp 
algorithm ant colony optimization stopping criterion satis ed construct set solutions fs pheromone trails heuristic information apply local search solution update pheromone trails implementations aco proposed di erent choices construction rules way update pheromone trails 
generic aco algorithm described algorithm 
depicted magma specialization agents provide initial solutions constructive procedure biased pheromone trails 
agents perform local search agent updates pheromone 
information new pheromone values agents construct new solutions 
observe case communication third level rst means process self adapting feedback loop involves initial nal steps 
instantiations strategy tuple aco agents implement probabilistic constructive procedure agents implement trajectory method agent stores current best solution update pheromone trails iterated local search iterated local search ils simple powerful metaheuristic algorithm 
applies local search general trajectory method initial solution nds local optimum perturbs solution restarts local search perturbed state 
importance perturbation change solution obvious small change solution possible escape local optimum basin attraction side strong modi cation comparable simple random restart 
order accomplish requirements criteria adopted level pheromone trails update local search level level pheromone construction 
multi level architecture version aco local search 
algorithm iterated local search generate initial solution execute ls initial state local optimum stopping criterion satis ed perturb obtain execute ls nds local optimum basis acceptance criterion decide set history search 
simple version ils described algorithm 
design ils algorithms degrees freedom choice initial solution perturbation acceptance criteria 
magma framework ils described follows see agent provides initial solution randomly heuristically generated stops activity 
level solution agent applies local search algorithm solution meets local optimum stops waiting new solution improve 
level agent keeps track search process local search agent stops evaluates new starting solution modi cation current 
observe case continuous communication level level level participates just initialization random restart instantiations strategy tuple ils agent implements randomly heuristically generated constructive procedure agent implements trajectory method level agent stores current best solution perturbs solution returned agent random restart course added approximate algorithm 
level level level perturb solution local search initial solution 
multi level architecture version ils 
algorithm memetic algorithm generate initial population stopping criterion satis ed apply local search individual apply cooperation operators obtain apply competition operators obtain memetic algorithms section propose application magma framework memetic algorithms mas 
include category genetic algorithms apply local search way similar aco plus local search 
ma see algorithm initial population solutions generated solution improved applying local search 
resulting new population cooperates competes produce new population 
cooperation way exchange information individuals implemented genetic operators mating crossover competition implemented selection genetic operator elaborated mechanisms 
ma magma described follows agents generate initial population solutions 
solution generated randomly means constructive procedure 
agents take solutions lower level improve local search steps local search algorithm reach local optimum 
level agent task generate new solutions applying recombination mutation operators 
new population produced applying cooperation competition operators 
new population directly input level 
shows multi level architecture generic ma 
instantiations strategy tuple ma similarities rst levels ils agent level 
ma agents implement randomly heuristically generated constructive procedure agent level cooperation competition level level local search generate population 
multi level architecture version memetic algorithms 
implements local search agents evaluate population apply recombination mutation selection competition operators cooperative search landscape explored means strategy possibly di erent perspectives information exchanged strategies obtain called cooperative search 
empirical results see instance show algorithms agents perform better particular kinds problems outperformed problems 
conjectured depends agent ability exploit tness landscape characteristics 
properties ruggedness number local optima distribution local optima topology basins attraction 
choice tness function operator de nes characteristics reasonable combination searches di erent tness landscapes derived original problem smooth problem hardness ectively face 
cooperative search consists search performed agents exchange information states solutions search space characteristics 
agents homogeneous implementing algorithm heterogeneous di erent algorithms 
cooperative search main advantages di erent operators di erent landscapes generate di erent projections search space 
di erent representations extract show di erent problem properties 
agents exchange complete incomplete solutions information promising regions explore promising regions avoid 
example respectively positive information negative information 
level cooperation competition store best solution local search level level level coordination information exchange greedy randomized construction generate population local search memetic algorithm grasp 
multi level architecture version cooperative search 
usefulness multiagent metaphor emerges considering design issues synchronization communication information ltering implementation 
meaningful example cooperative search multiagent system reported addition search agents referees agents lter information 
architecture permits develop separately search agents focusing search algorithms agent collect lter evaluate information communication mechanisms policies 
important mention cooperative search algorithms systems show ectiveness eciency sequentially implemented 
means improvements arise information exchange parallel implementation 
provide example cooperative search description magma 
suppose system composed memetic algorithm ma collaborating grasp 
metaheuristics described magma architecture respectively sections 
aim cooperative search metaheuristics communicate exchange results 
particular suppose new generation ma ma needs diversi cation insert best solutions grasp 
vice versa suggestions building restricted candidate list grasp derived best individuals ma 
agents described previous sections ma grasp 
tuples associated agents represent model agent supervises coordinates information exchange 
strategy de nes frequency solution exchange builds new population ma restricted candidate list grasp see gure 
discussion magma direct communications levels allowed 
previous examples possible communication exploited possibilities combine design new algorithms investigated 
explicit presence levels permits clearly identify information ows 
example algorithms loop level level level level exhibit feedback loop 
feedback loops characterize self adapting systems emerging phenomena aco dynamics 
point underlined di erent agents coexist concurrently level example cooperative search 
di erent models communicate means agents lter translate information 
perform kind horizontal cooperation achieved higher level agents 
example cooperative search solutions horizontally exchanged agents level 
key features magma level 
generally solutions just implicitly analyzed genetic algorithms ant algorithms ad hoc algorithms vocabulary building scatter search 
agents provide explicit way combine building blocks know promising regions explore 
typical metaheuristics terminology level implements actual search strategy guides lower level search adjusts balance cation diversi cation 
interesting aspect magma concerns possibility introducing meta reasoning metaheuristics agents apply cooperative search instance learning techniques clustering information extraction reinforcement learning 
interesting possibility level perform resource management lower levels 
instance agent decide priorities agents cpu time agents depending requirements 
strategy useful case anytime algorithms soon solution required provided 
agents select lower level agents function quality solutions provided 
relevant issue concerns agent synchronization 
specializations discussed easiest way implement algorithms sequential synchronous way level produces solution level improves nally level takes decision depending search strategy 
magma architecture especially distributed systems choice restrictive 
possibility implement asynchronous algorithms provide synchronization mechanisms agents exploiting date technology communication synchronization 
advantage speeding computation asynchrony introduces robustness scalability 
related multiagent perspective metaheuristics relations object oriented frameworks algorithms implementation distributed arti cial intelligence dai 
section brie discuss issues 
magma conceptual framework metaheuristics framework algorithms implementation 
literature implementation frameworks local search metaheuristics introduced 
share aims hand fast prototyping implementation hand systematic comparison algorithms 
di erent implementation choices provide basic structure levels construction initial solution improvement 
interesting hierarchical structure object oriented classes goes direction magma restricted local search metaheuristics 
authors de ne levels 
basic components state moves 
local search problem elements state manager neighborhood explorer 
local search metaheuristics iterative improvement tabu search simulated annealing 
local search solving strategy simple solver token ring solver fourth level interpreted level guides search performed third level corresponds level 
fourth level just represents outermost cycle algorithms implement search strategy 
note model component put altogether rst level magma allow di erent models components di erent levels 
research dai multiagent systems covers theoretical applicative topics 
relations multiagent approach metaheuristics emerge mainly distributed search agents cooperate solve search problem 
basic approach consists subdividing search space assigning agent subspace agent locally search subspace 
protocols algorithms developed maintain consistency combine solutions provided agents complete solution 
cooperative techniques proposed studied di erent synchronization methods 
distributed search deals distributed implementation classical complete search algorithms concepts researches formalization communication cooperation heterogeneous agents may ectively included specializations implementations magma 
discussed multiagent approach metaheuristics 
described multi level architecture magma agents characterized di erent levels abstraction objectives 
advantages magma framework metaheuristic algorithms easy way comparing varying algorithms 
restricted level algorithm paradigm create agents level try exploit power cooperation 
advantage multiagent metaphor gives direct suggestions algorithm implementation 
sequential parallel synchronous asynchronous implementations easily designed 
opinion magma framework metaheuristics clearly shows algorithms simple local optima escaping strategies 
enhanced intelligent strategies expressed framework terminology 
explore search space learning mechanisms aco advanced trajectory guidance ils 
covers topics design new hybrid algorithms 
explore possibilities cooperative search 
complex system metaphor particular information ow explicitly traced magma characterization emergence metaheuristics algorithms developed 
acknowledgments paolo helpful comments suggestions 
supported socs project funded cec contract ist 
information provided sole responsibility authors re ect community opinion 
community responsible data appearing publication 
aarts lenstra editors 
local search combinatorial optimization 
wiley interscience 
carvalho ribeiro 
object oriented framework local search heuristics 
proceedings th conference technology objectoriented languages systems tools usa pages 
ieee piscataway 
talbi 
evolutionary metaheuristics 
proceedings congress evolutionary computation cec pages 
battiti 
reactive search history base heuristic max sat 
acm journal experimental algorithmics 
battiti 
solving max sat non oblivious functions history heuristics 
du jun gu panos pardalos editors satis ability problem theory applications number dimacs series discrete mathematics theoretical computer science pages 
american mathematical society association computing machinery 
blum roli 
metaheuristics combinatorial optimization overview conceptual comparison 
technical report iridia universit libre de bruxelles belgium 
blum roli dorigo 
hc aco hyper cube framework ant colony optimization 
proceedings mic meta heuristics international conference volume pages porto portugal 
hertz 
taxonomy evolutionary algorithms combinatorial optimization 
journal heuristics 
charon 
noising methods generalization metaheuristics 
european journal operational research 
corne dorigo glover editors 
new ideas optimization 
advanced topics computer science series 
mcgraw hill 
de backer shaw 
object model meta heuristic search constraint programming 
proceedings cp ai workshop integration ai techniques constraint programming combinatorial optimization problems 
erman 
cooperation evolutionary algorithms search paradigms 
proceedings congress evolutionary computation cec pages 
di schaerf 
object oriented framework exible design local search algorithms 
technical report rr dipartimento di matematica informatica universit di udine 
di schaerf 
object oriented framework design local search algorithms metaheuristics 
proceedings mic meta heuristics international conference volume pages porto portugal 
dorigo di caro 
ant colony optimization meta heuristic 
corne dorigo glover editors new ideas optimization pages 
mcgraw hill 
available technical report iridia universit libre de bruxelles belgium 
dorigo di caro gambardella 
ant algorithms discrete optimization 
art 
life 
dorigo gambardella 
ant colony system cooperative learning approach travelling salesman problem 
ieee transactions evolutionary computation april 
eiben 
constraint satisfaction problems 
ack fogel michalewicz editors handbook evolutionary computation 
iop publishing oxford university press 
feo resende 
greedy randomized adaptive search procedures 
journal global optimization 
fink voss 
reusable metaheuristic software components application software generators 
proceedings mic meta heuristics international conference volume pages porto portugal 
laburthe 
local search constraint programming 
proceedings mic meta heuristics international conference volume pages porto portugal 
talbi 
fitness landscapes performance meta heuristics 
stefan voss martello ibrahim osman catherine editors meta heuristics advances trends local search paradigms optimization 
kluwer academic 
freuder wallace 
partial constraint satisfaction 
arti cial intelligence 
gambardella taillard dorigo 
ant colonies quadratic assignment problem 
journal operational research society 
glover 
scatter search path relinking 
corne dorigo glover editors new ideas optimization advanced topics computer science series 
mcgrawhill 
glover laguna 
tabu search 
kluwer academic publishers 
hansen 
tabu search multiobjective optimization mots 
th international conference multiple criteria decision making 
hansen mladenovi variable neighborhood search 
stefan voss martello ibrahim osman catherine editors metaheuristics advances trends local search paradigms optimization chapter pages 
kluwer academic publishers 
hertz 
framework description evolutionary algorithms 
european journal operational research 
hogg williams 
solving really hard problems cooperative search 
proceedings aaai pages 
aaai press 

measure landscapes 
evolutionary computation 
stadler 
amplitude spectra tness landscapes 
adv 
complex systems 
available sfi working 
johnson mcgeoch 
traveling salesman problem case study 
aarts lenstra editors local search combinatorial optimization pages 
john wiley sons 
jones 
evolutionary algorithms fitness landscapes search 
phd thesis univ new mexico albuquerque nm 
jones 
operator landscape 
santa fe institute technical report santa fe institute 
jones forrest 
fitness distance correlation measure problem diculty genetic algorithms 
eshelman editor proceedings th int 
conference genetic algorithms pages 
kaufman 
kau man macready 
technological evolution adaptive organizations 
complexity march 
gelatt vecchi 
optimization simulated annealing 
science may 
laburthe caseau 
salsa language search algorithms 
maher puget editors principle practice constraint programming cp volume lecture notes computer science pages 
springer 
lesser 
overview dai viewing distributed ai distributed search 
journal japanese society arti cial intelligence special issue distributed arti cial intelligence 
macready kau man 
criticality parallelism combinatorial optimization 
science january 
merz freisleben 
fitness landscapes memetic algorithm design 
david corne marco dorigo fred glover editors new ideas optimization advanced topics computer science series 
mcgraw hill 
michael van hentenryck 
localizer modeling language local search 
informs journal computing 
moscato 
evolution search optimization genetic algorithms martial arts memetic algorithms 
tech 
rep caltech concurrent computation program california institute technology pasadena california usa 
moscato 
memetic algorithms short 
glover corne dorigo editors new ideas optimization 
mcgraw hill 
gendreau 
view local search constraint programming 
freuder editor principles practice constraint programming cp 
lncs pages 
springer verlag berlin heidelberg 
prasad lander lesser 
cooperative learning composite search spaces experiences multi agent design system 
proceedings thirteenth national conference arti cial intelligence volume pages 
aaai press mit press 
roli blum dorigo 
aco maximal constraint satisfaction problems 
proceedings mic meta heuristics international conference volume pages porto portugal 
russell norvig 
arti cial intelligence 
modern approach 
simon schuster 
voss 
cooperative intelligent search adaptive memory techniques 
voss martello osman editors meta heuristics advances trends local search paradigms optimization chapter pages 
kluwer academic publishers 
stadler 
theory landscapes 
lop ez pe na garc editors complex systems binary networks volume lecture notes physics pages berlin new york 
springer verlag 
sfi preprint 
stadler 
landscapes correlation functions 
math 
chem 
sfi preprint 
st utzle 
iterated local search quadratic assignment problem 
technical report aida fg intellektik tu darmstadt 
st utzle 
local search algorithms combinatorial problems analysis algorithms new applications 
zur intelligenz 

st utzle dorigo 
aco algorithms quadratic assignment problem 
corne dorigo glover editors new ideas optimization pages 
mcgraw hill 
st utzle hoos 
max min ant system 
generation computer systems 
taillard gambardella gendreau 
adaptive memory programming uni ed view meta heuristics 
european journal operational research 
toulouse sans experimental study systemic behavior cooperative search algorithms 
voss martello osman editors meta heuristics advances trends local search paradigms optimization chapter pages 
kluwer academic publishers 
voss martello osman editors 
meta heuristics advances trends local search paradigms optimization 
kluwer academic publishers 
weiss editor 
multiagent systems 
modern approach distributed arti cial intelligence 
mit press 
luc van 
solving scheduling problem 
european journal operational research 
wolpert macready 
free lunch theorems optimization 
ieee transactions evolutionary computation 
wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 

