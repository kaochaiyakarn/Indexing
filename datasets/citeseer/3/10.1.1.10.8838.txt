proc 
st international workshop engineering self organising applications melbourne australia july lncs adaptiveness linda coordination models menezes robert tolksdorf florida institute technology department computer sciences university blvd melbourne fl usa cs fit edu cs fit edu freie universitat berlin institut fur informatik ag informationssysteme 
berlin germany research robert tolksdorf de www robert tolksdorf de 
today software engineering ability adapt requirement changes fly major asset computer systems 
traditionally systems developed process consisting requirements study design implementation phases 
nowadays requirements dynamic changing constantly 
engineering distributed complex software systems frameworks implementation phase need able cope environment changes bandwidth fluctuations network topology host time looks ability linda systems adapt predictable unpredictable changes distributed environments 
adaptiveness aspects discussed linda systems analyzed 
software engineers constantly faced hard task developing systems adapt changes computational environments 
concepts mobility commonplace job designing simple client server system trivial 
mobile environments clients dynamically change location servers 
standard techniques socket communication may applicable 
coordination models linda advocate distributed systems better designed think control dependencies computational components isolation 
coordination distributed components dealt separately computational task ensemble trying perform 
unfortunately need complex applications current status quo coordination systems inappropriate deal intricacies systems dynamism environments implemented 
word adaptiveness 
traditionally developed systems define phases requirements study design implementation 
requirements study today systems incomplete able predict possible environment changes 
decades seen advent specialized areas trying deal changes distributed systems environments 
seen research fault tolerance attempt deal unpredictable predictable failures parts environment 
nodes network links lost 
witnessed advent mobile computation mechanism deal movement data processes attempt improve communication latency cardelli argued mobile computation way cheat communication latency 
deny areas relative success 
fault tolerant systems reality mobile computation 
uncommon see research areas trying isolate problems 
research faulttolerance disregard fact entities may mobile research mobile computation may disregard fact failures frequent 
scenario observed coordination systems ones linda model 
early linda models coordination expressive able deal dynamism today applications 
years extensions new models proposed deal problems mentioned expected normally focus issue 
important extensions original linda model mts linda laura klaim plinda tucson lime 
models tackle simple things separations concerns interesting problems mobility fault tolerance 
discusses problems fault tolerance mobility awareness specialization general problem call adaptiveness awareness 
argue adaptive model able cope problems clean simple way having burden users developers details truly don concern 
discuss section adaptiveness aspects 
section discusses models cope issues raised section 
section describes concept swarming adaptive mechanism demonstrates concepts thought terms linda rise model call swarmlinda :10.1.1.68.5864
discussion issues related swarmlinda section 
aspects adaptiveness ability adaptive major benefit open distributed system 
adaptiveness important reasons inability predict problemsolving workloads changes existing information requests failure additions resources environment characteristics require system organization migration data agents 
context distributed systems inability predict workloads relate network problems unpredictable bandwidth fluctuations network latencies bottlenecks created due overload particular network nodes 
changes patterns information request reflect directly distributed systems 
agents need able store search information efficiently 
historically systems dealt issue design time 
choosing static distribution mechanism dynamism today applications causes patterns unpredictable 
openness desirable feature requirement large scale distributed systems 
ubiquity internet availability framework distributed applications open system issues rule exception 
software engineers need consider fact resources may added removed runtime 
removal may occur due resource 
network node failures 
sufficient life software engineer mobility common mechanism improve system efficiency 
resources move closer requestors system gain 
patterns requests unpredictable mobility design harder 
discuss issues facets adaptiveness distributed systems 
network unpredictability aspect adaptiveness needs considered ability system handle unpredictable network behavior 
ideally engineer systems efficient internet unpredictable behavior lack quality service qos engineering practical application hard 
engineering distributed systems constantly faced issue distribute information required processes way fair loadbalancing nodes achieved 
problem base information distribution scheme static information close nodes 
closeness networks measured delays units geometric distance seen close design time may far application deployed 
systems dealing complex systems attempt maintain closeness characteristics spite network unpredictability 
way achieve finding different routes source destination 
alternatively information mobile kept close required described mobility section 
engineers need freed pointless task identifying best distribution information 
best engineers accurately predict status wide networks internet 
failures failures common think exceptional special cases 
models coordination opt unrealistically assume environment applications failure free 
course fault tolerant coordination models plinda simplistic view failures worse solutions costly 
instance plinda uses transaction mechanism guarantee set operations take place transactional semantics 
implementation transactions fully distributed environment may expensive involves distributed locking mechanisms 
studied mechanisms provide fault tolerance linda systems 
approaches taken fall categories transactions mobile coordination replication checkpointing 
mechanisms static assume fixed location faults fixed locations faults managed 
take strict approach failures system state failure case managed perfection failure 
intermediate state partially inconsistent replicas considered valid state system 
approach proposed adds slightly flexibility mobile code 
computations transfered server accesses tuple space 
computation fails transmitted code executed death computation 
application level flexibility added static reactions failures 
want see failures natural phenomenon large distributed systems running unreliable networks internet 
node failure minimum effect application behavior 
severe effect entering state exclusive managing failure situation 
allowing partial failures incremental working fault free state suitable approach 
selforganization incremental mechanism establish optimal state step works 
mobility feature common ability agents mobile environment 
addition older form mobility data passive information mobility 
motivation mobility primarily performance 
allowing passive active entities roam network attempt requestor requested closer minimizing communication overhead 
look passive data mobility 
result allowing passive data hop place place network applications need able find information 
piece information closer agent useless agent know re describing agents need able adapt changes location data need aspect adaptiveness 
conversely environment needs know requests coming 
agents mobile may request information location migrate location information received 
environment know agent information requested find agent 
simple scenarios show modern distributed applications need exhibit level adaptiveness able cope fly changes environment 
different approach mobility physical mobility mobile computing 
pdas notebooks smart phones opposed mobile computation described 
approach adds different mobility level system 
data mobility added physical mobility nodes independently 
movement nodes causes topology network change 
physical mobility common characteristic systems need able adapt changes network topology may incapable finding information require 
openness big 
small just right 
question developers years today 
developing distributed system say client system servers need able cope client requests 
pretty hard question answer programmer trying decide array re declaring program big 
confidently answer questions need open think context array problem 
context distributed systems ability add remove resources words ability open paramount 
addition resource unproductive resource effectively 
means system needs adapt existence new resources 
removing nodes related adaptiveness openness 
resource removed environment able cope extra load 
information held resource removed may need moved remaining resource assuming scheduled failure 
adaptiveness linda linda coordination model quite successful dealing intricacies building ensembles distributed components 
unfortunately extensions 
linda family models able cope demand adaptiveness exist novel applications 
section look models linda mts linda lime demonstrate cope various aspects adaptiveness described section 
tuple distribution prior getting models wise describe main aspects linda models tuple distribution 
way tuples distributed differs model model 
literature describes plethora approaches distributing tuple spaces 
major strategies identified centralization partitioning full replication intermediate replication 
centralization simple client server distribution strategy specific server machine operates complete tuple space tspaces 
accessed clients arbitrarily located network see fig 

fig 

centralized tuple spaces centralized tuple space server advantage easy implementation basically attaches network interface non distributed tuplespace 
carries disadvantages centralization services 
tuple space server bottleneck high load induced large number active clients single point failure entire system fair network resources 
partitioning tuple spaces strategy tuples common characteristics located set tuple space servers see fig 

requests characteristics routed machine 
simple partitioning 
locating tuples parity lead unbalanced partitions carefully chosen hashing function tuples better 
fig 

partitioned tuple spaces partitioning advantage providing distributed management tuple space including concurrent execution operations partitions slightly relaxes problems centralization 
include centralization certain sets tuples 
partitioning scheme handles reconfigurations poorly 
automatic adaption hashing function induced distributed reorganization tuple spaces content complex costly 
full replication places complete copies tuple spaces machines different locations 
addition removal data replicated nodes searches data performed locally machine see fig 

fig 

full replication full replication distributes load data searches inherently offers support fault tolerance 
cost keeping replicas consistent participating nodes high requires locking protocols equivalents multiple local searches may lead decision remove piece data 
intermediate replication proposed early implementations linda 
schema uses grid nodes formed logical intersecting busses 
node part exactly 
data stored replicated nodes searches performed 
intersects provides complete view tuple spaces see fig 

simulated nodes number nodes change dynamically retaining virtual grid 
intermediate replication schema allows concurrent replications searches data respectively 
removal data requires consistent update nodes respective 
fig 

intermediate replication tuple distribution mechanisms ones described play role adaptiveness linda models 
approaches useful modification implementation adaptable large scale distributed linda systems intermediate replication schema general flexible 
conceptually captures centralized approach single size fully replication case single size participating nodes 
approaches described scale number processes system cope dynamic aspects common place systems 
long term solutions problem due 
linda models linda models tried years original linda appropriate deal real world applications 
important modification original model occurred gelernter realized linda lacked ability provide separation concerns 
original model tuples kept logical location 
multiple tuple space mts linda allowed processes create tuple spaces discretion making available processes 
mts linda far able adapt change environment 
reason conceptually mts linda model parallel computing adaptiveness plays lesser role 
worth pointing quickly recognized attractive paradigm open distributed systems 
bit precise statement linda model open distributed systems needs worry real world issues 
implementation provided yale group model flavor distributed environment 
unclear tuple distribution mechanism implementation important context adaptive linda models assumes processes class objects created read snapshot destroyed archived re activated 
operations model aware certain adaptiveness aspects 
point view network unreliability 
communication mechanism standard assume messages re routed certain communication paths avoided load status network 
stronger failure mobility adaptiveness 
failures handled system exhibit level adaptiveness scheduled failure 
case processes tuple spaces class objects suspended resumed location 
scheme may implement level mobility adaptiveness migration processes data may implemented resume approach 
lime system emphasized dynamics networked environment tried establish coordination model accommodated natural way 
lime agent mobile 
carries local tuple space 
notion global tuple spaces local tuple spaces agents colocated node federated host level transiently shared tuple space 
operations search federated space matches operations drop tuple tuple space bound agent 
lime agents adapt mobility agents current partial view conceptual global tuple space 
breaks static roles components servers clients 
lime provides additional operation send tuple agent agent located agent executing primitive tuple stored 
stored current agent transported colocation emerges 
model prescribe structure distribution tuples 
eventually destination 
plinda fault tolerant implementation linda model 
fault tolerance realized mechanisms transactions 
plinda adds operations defines start transactions 
transaction execution forces rollback transactions operations 
users need able identify transactions model leave actual reaction faults user 
worth pointing plinda closed system plinda transactional semantics appropriate open systems 
heavy locking mechanism implemented plinda approach impossible realized dynamic open distributed environment 
true plinda assumes users discretion identifying operations required implicit locks associated operation 
jeong discuss ability plinda processes migrating machine 
migration treated failure followed recovery node 
approach consistent open environments migration frequent operation 
failure recovery cost may high may domino effect processes 
proposal coordination model peer peer networks 
premise networks dynamic regards topology new peers join leave network point 
words networks open nature 
owning characteristic applications demonstrate degree self configuration 
aims burden programming interaction peers away developers 
order achieve degree generality useful plethora applications allows developers define structure data stored coordination media 
added ability developers define attribute individual datum 
attributes kind located data fixed peer local remote generic data closest standard linda tuple datum environment discretion place data replicable data data immutable safely cheaply replicated peers immutability require expensive consistency protocols implemented 
attributes defined operation write attributed data 
level adaptiveness particularly regards generic attribute 
author indicate migrate peer peer transparently run time necessary 
due load balancing systems 
attributes mechanism provides deal special cases 
instance replication data may necessary data maintained close requestors 
reason better developer think located data time design environment decide application characteristics data maintained fixed 
means distribution mechanism entire system 
closest classification uses full replication partitioning 
interesting aspect definition search space data request 
space proximity origin request works similar fashion ttl time live network packets 
adds size search space operations defines take read 
mechanism allows discover data newly added peers defined search space 
deal openness mechanism search space defined user better 
ideal search space emerge interactions peers converge nearly optimum particular application 
aspects adaptiveness mobility network unpredictability authors quickly mention possibility elaborate achieved 
fact unclear mobility achieved part system facility implemented network 
true network unpredictability 
tuples air take swarm abstractions linda complementary propose swarmlinda see section 
highlights dynamic adaption tuple flows applications structures 
emphasizes locality perception surrounding tuples context agents provides complete abstraction underlying network structure 
tuples propagated network nodes fixed predetermined location 
tuples content rules propagation scope tuples global space 
tuples stationary 
runtime node mobile maintains list neighbor node provides api clients 
propagation rules establish structure network routing content contained tuples remote destination 
variety overlay networks generated dynamically adapt applications needs 
tuples coordinated form swarms flocks 
base coordination global view completely decentralized local sensing collection equal peers network 
deal dynamic reconfiguration network unclear reconfiguration overlay data structures tuples replicas may expensive operation node movement frequent 
potential source performance loss may caused size lookup tables necessary implement propagation specific tuple tuples uniquely identified may having entry lookup table 
programmability propagation rules plus algorithm components efficient propagation rule adaptable 
swarmlinda approach described assumes developers responsible define propagation rules need concerned propagated information 
swarming adaptive mechanism swarm intelligence new field artificial intelligence advocates systems written way solutions emerge local interactions small agents 
locality emergence achieved stigmergy swarming respectively 
simplified terms stigmergy form communication uses environment main communication channel 
basically local agents ants termites leave information environment agents system 
information normally represented pheromone data 
swarming collective activity resulting agents local information available environment decisions updating local information necessary feedback loop 
instance ants leave trails successful paths food supplies ants trails marked environment decide follow scent 
negative feedback occurs pheromone defines trails volatile 
positive feedback occurs ant follows marked path re enforces finds path 
swarming system self organize 
system reach level organization directly programmed emerges open system interacting components 
optimization area approach success avoids local optima 
general terms means swarm systems converge attempts explore new better solutions 
exploration new solutions occurs agents required choose attractive choice 
fact swarming take place 
choice agent normally stochastically 
typical probability formula defined ij ij ij il il formula indicates probability agent take path ratio attractive path summation attractiveness paths 
levels information considered pheromone value distance position 
negative positive feedback normally implemented formula defined ij ij ij negative feedback occurs value 
pheromone value path ij step decreased added re enforcement value path ij ij 
turns stigmergy swarming implemented linda model inherit adaptiveness characteristics swarm system 
generative communication advocated seen stigmergic form communication 
swarming part done abstracting linda entities particular tuples templates ants food 
linda nodes seen environment information available tuple template ants 
abstraction call swarmlinda 
swarmlinda swarmlinda condensed form extended description build :10.1.1.101.3400
swarmlinda uses adaptations algorithms taken abstraction natural multi agent systems 
distribution mechanism area swarmlinda abstraction natural multi agent systems distribution tuples nodes 
historically tuples distributed various static mechanisms described section 
swarmlinda partitioning tuple space dynamic concept brood sorting ants 
ants able sort different kinds things keep anthill food eggs anthill normally sorted type 
importantly ants process spite amount type scalable 
individuals operate tuple ants opposed template ants 
environment network swarmlinda nodes 
state set tuples stored far 
swarmlinda implementation may brood sorting process tuple distribution 
see tuples grouped template lead formation clusters tuples 
process tuples food ant active process representing primitive 
execution primitive start visiting nodes 

observe kind tuples template match nodes storing 
ant limited memory doesn remember information entire network nodes guarantees decision local information 

store tuple node nearby nodes store tuples matching template 
decision store stochastically defined 
decision considers small random factor enable tuples stored locations 

nearby nodes contain similar tuples randomly choose random factor drop continue carry tuple node 
order guarantee steps certain conditions satisfied 
ant eventually able store tuple 
time process decides store tuple random factor tend 
increases chance storing tuple step 
likelihood store tuple calculated stochastically kinds objects memory objects memory kind carried likelihood store tuple high 
power approach compared common partitioning scheme 
partitioning primarily hash function decide tuple placed 
hashing able cope failures changes application behavior 
failures certain nodes may fatal system changes application behavior may require changes hash function 
approach described able improve availability system having count costly techniques replication data 
ant approach assumptions behavior applications predefined distribution schema special scenarios implemented deal failures node 
searching tuples distribution tuples part problem obviously tuples need 
ants look food proximity anthill 
food brought anthill trail left ants may know food 
ants know way back anthill short memory steps took anthill distinctive scent tracked ants 
tuple space context view tuples food 
locations tuples stored seen terrain templates seen ants wander locations search tuples 
anthill process executed operation 
individuals template ants environment consists tuple space nodes state composed tuples stored scent different kinds template indicate likelihood matches template available 
volatile disappear slowly time 
tuple searching ant follow rules 
step diffuse scent process node connected node neighborhood 
distinctive scent represents anthill tracked ants need return anthill 

check matching tuple current location 
match return origin location leave scent template matched step ij 
find way back short memory direct anthill tracking distinctive scent process described 
match check direct neighborhood 

current location fit template randomly choose direction network nodes look tuple 

scent indicates direction step matching scent move step scent start 
want guarantee adaptability swarmlinda want maintain non determinism searching tuples 
achieve adding small random factor range scent 
enables paths strongest scent chosen described section 

life ant limited ensure seek tuples produced 
unsuccessful step match ant stops search probability 
factor increased unsuccessful step 
increases time 
ant decides searching takes actions sleep time continue 
pure limitation activity 
ant reached area matching tuples produced long time ant hard time get location 
sleeping allow system change get state tuples location 
die time location search started 
materialize random location continue search tuples 
lead ant find match lead optimal trail original location tuple location 
marked trail may template ants operate region help find optimal trails origins tuples 
template ant simply stops quiescent tuple ant finds 
move quiescent mode forced environment example production tuples nearby nodes 
effects template ant quiescent process produced blocked 
action taken depends age ant 
ant times tries 
decides 
may decide quiescent 
action swarmlinda equivalent blocking 
result emergence application specific paths tuple producers consumers 
volatile paths dynamically adapt changes system consumers producers join leave move system 
question remains ants find way back anthill 
mentioned earlier anthill distinctive scent tracked ants 
addition ants short memory allows follow back steps anthill 
worth noticing ants tend change direction radically 
know came short memory avoid going back direction 
guarantee ant finds anthill maximizes chances 
idea steps ant short memory lead anthill 
moving right direction anthill trail left ant searches 
swarmlinda client process fig 

searching tuple fig 
shows example search algorithm 
client connected node diffuses scent nodes template ant goes searching tuple 
purposes example assume template ant remember steps took 
template ant wanders searching tuple making decision node 
steps template ant finds matching tuple node path took tuple 
tuple template ant uses short memory return anthill 
steps returning taken memory 
template ant tries track scent anthill 
template ant influenced scent moves back client 
observe return path necessarily path took find tuple 
return path marked scent particular template 
returning ant works similarly backward ant antnet 
returning ant apply positive feedback successful path indicated 
negative feedback part done evaporation controlled swarmlinda system 
compare approach standard mechanism find distributed tuples hashing 
tuples normally searched hash function takes template input generate location tuple output 
hashing definitely fast unfortunately adaptive 
determinism exist hash functions forces tuples template placed location matter size system causing bottleneck problems tuples matching template demand system 
swarmlinda tuples matching template tend stay necessarily true cases 
tuples produced locations far tuples remain separate create clusters system 
avoid creation bottlenecks tuples certain template required processes 
searches start various locations tuples tend retrieved closest cluster source search 
problem hashing approaches fault tolerant tuple hashed location location expected working 
hashing may fault tolerant conflict resolutions techniques implementation normally cumbersome practice may expensive effectiveness doubtful 
point view swarm techniques failures just change environment 
failures behave ants trying search food food supply suddenly destroyed 
surely problem ants starve food 
dealing openness openness known main challenges distributed systems ability system deal changes great asset 
instance open linda systems need tuples specific formats templates may change overtime 
order enable swarmlinda show adaptive behavior collections similar tuples tuple ants individuals 
environment terrain nodes state 
swarmlinda want tuples matching template kept described section want fixed location 
want dynamically adapt changes 
function sc templates tuples relation scent defines similarity scent 
say template te tuple tu match sc te sc tu 
new tuple ant carries tuple tu emits sc tu origin 
new carries template te emits sc te origin 

template ants remain position move 

tuple ants sense environment scent similar sc tu 
template tuple ants 

strength detected scent plus small random factor tuple ant decides move direction stay causes tuples stay closer similar tuples needed produced number primitives executed consists migrating node 
effect distribution mechanism explained section 
tuple stored scent left previous primitives considered deciding drop tuple current node keep walking terrain nodes searching place drop tuple 
swarming allows swarmlinda open terms configuration nodes 
uncommon systems overloaded due inability predict demand performance 
swarmlinda new nodes added necessary new nodes explored ants long part current nodes neighborhood 
addition node ensure new node added node neighbor list 
aspect openness easy guarantee implementations topology normally implemented linda system 
balancing tuple template movement preceding algorithms identified tuple ants individuals move perform continued search 
section describe intermediate approach ants tuples templates 
tuple template ant decides birth goes nodes seeking matches stays origin ant 
consider application node consumes lot tuples generated nodes 
trails producers consumer programming tuple ant algorithm section sense consumer start template ants seek producers 
system history known consumer path tuple ants pushed template ants consumer remain stationary basically wait matching tuple ant appear 
consumer starts producer calculation results reasonable start template ants producers reach result 
algorithm lead dynamic balance active passive ants takes account current producer consumer configuration system 
algorithm individuals tuple template ants 
environment terrain nodes 
state location includes scent indicates location visited successfully ants attraction outsider 
success means visiting ant match location 
call visitor scent 
second scent producer consumer scent ranges 
positive values indicate matches took place visiting template ant retrieved tuple location showing location producer information 
negative scent indicates visiting tuple ants matched template location location consumer tuples 
tuple template ants follow algorithms section find matching templates resp 
tuples 
tuple ant finds match bit scent location 
template ant finds match adds bit scent location 
kinds ants leave bit visitor scent case success 
new ant born tuple template ant depending kind operation requested 
new tuple ant emits bit producer consumer scent location birth template ant 
ants behave different ways active move search algorithms described passive remain origin 
fate new ant depends current state location born 
state distinguishes producing consuming locations location attractive visitors 
table shows new ants behave characteristics producer consumer attraction passive tuple ant passive active template ant active passive tuple ant passive template ant outsider active tuple ant passive template ant passive tuple ant active template ant producer visited ants need send tuple ants 
template ants passive active depending visitors satisfy important keep balance active passive template ants 
ratio passive active adjusted 
attractive consumer template ants may remain passive 
owing global balance argument tuple ants active 
producer visited ants send tuples ants find matches 
template ants remain passive 
consumer visited ants send active template ants find matches generate passive tuple ants attract active template ants 
generation passive tuple ants improves chances attraction 
algorithm compared intermediate replication scheme linda systems 
leads broadcast template search matching tuple 
leads replication tuple local lists waiting tuples searched 
resemble idea having tuple ants template ants go seek matches 
intermediate replication usually static 
swarmlinda algorithm balance tuple template ants highly dynamic adapts current behavior running applications 
search algorithms section eventually find matching tuples templates 
consequence random walk finite number steps possible nodes visited 
similar linda implementation predefined list nodes searched nodes possibly match visited 
discussed aspects adaptiveness importance large scale dynamic systems 
focused investigating aspects related adaptiveness network unpredictability failures mobility openness tackled various linda systems 
summarizes discussion 
lime plinda swarmlinda network unpredictability failures mobility physical data openness fig 

summary models deal aspects adaptiveness 
indicates model demonstrate handle particular aspect adaptiveness 
indicates model levels particular aspect 
indicates indirectly model potential dealing particular aspect 
clearly see swarmlinda adaptable 
difference systems lie fact swarmlinda wants designers oblivious swarming may happen system 
ideally swarmlinda designer need understanding swarming related concepts propagation rules defined 
demonstrated various aspects adaptiveness uniformly dealt swarmlinda 
distinction aspects adaptiveness tackling way mechanism swarming stigmergic communication 
swarmlinda implementation developed available website 

brian anderson dennis shasha 
persistent linda linda transactions query processing 
banatre le metayer editors research directions high level parallel programming languages number lncs pages 
springer 

robert 
linda distributed memory multiprocessors 
phd thesis yale university department computer science 
technical report 

dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford press 

busi montresor zavattaro 
data driven coordination peer peer information systems 
international journal cooperative information systems 
appear 

luca cardelli 
wide area computation 
lecture notes computer science pp 

di caro marco dorigo 
antnet distributed stigmergetic control communications networks 
journal artificial intelligence research 

nicholas carriero david gelernter 
net linda kernel 
acm transactions computer systems 

leonardi zambonelli 
strategies protocols highly parallel linda servers 
software practice experience 

rocco de nicola gian luigi ferrari pugliese 
klaim kernel language agents interaction mobility 
ieee transactions software engineering special issue mobility network aware computing 

keith decker sycara mike williamson 
intelligent adaptive information agents 
ibrahim editor working notes aaai workshop intelligent adaptive agents portland 

david gelernter 
generative communication linda 
acm transactions programming languages systems 

david gelernter 
multiple tuple spaces linda 
rem 
editors parle vol 
ii parallel languages lncs pages 

susanne 
linda multiple tuple spaces 
phd thesis yale university february 
yale dcs rr 

kennedy eberhart 
swarm intelligence 
morgan kaufmann 

marco franco zambonelli letizia leonardi 
tuples air middleware context aware computing dynamic networks 
proc 
nd international workshop mobile computing middleware rd international conference distributed computing systems icdcs pages providence ri usa may 
ieee 

menezes andrea omicini 
semantics coordination models distributed systems case study 
proc 
nd international workshop foundations coordination languages software architectures 
appear electronic nodes theoretical computer science 

menezes robert tolksdorf 
swarmlinda website 
cs fit edu swarmlinda 

menezes robert tolksdorf 
new approach scalable linda systems swarms 
proceedings acm sac pages 

menezes robert tolksdorf 
new approach scalable linda systems swarms extended version 
technical report cs florida institute technology department computer sciences 
www cs fit edu tr cs pdf 

andrea omicini franco zambonelli 
tucson coordination model mobile information agents 
david schwartz monica editors st international workshop innovative internet information systems pages pisa italy june 
idi ntnu trondheim norway 

parunak 
go ant engineering principles natural multi agent systems 
annals operations research 

gian pietro picco amy murphy roman 
lime linda meets mobility 
international conference software engineering pages 

antony rowstron 
mobile ordination providing fault tolerance tuple space coordination languages 
ciancarini wolf editors coordination languages models coordination number lncs pages 
springer verlag 

jim snyder menezes 
logical operators extended coordination mechanism linda 
coordination models languages pages 

tolksdorf rowstron 
evaluating fault tolerance methods large scale linda systems 
proceedings international conference parallel distributed processing techniques applications pdpta 

robert tolksdorf 
laura service coordination language 
science computer programming special issue coordination models languages applications 

robert tolksdorf menezes 
swarm intelligence linda systems 
andrea omicini paolo petta jeremy pitt editors proceedings fourth international workshop engineering societies agents world 
appear 

wyckoff lehman ford 
spaces 
ibm systems journal 
