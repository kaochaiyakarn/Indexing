implementing ordered disjunction answer set solvers normal programs gerhard brewka ilkka niemel tommi universit leipzig helsinki university technology institut ur informatik dep 
computer science engineering lab 
theoretical computer science leipzig germany box fin hut finland brewka informatik uni leipzig de niemela tommi hut 

logic programs ordered disjunction add new connective logic programming 
connective allows represent alternative ranked options problem solutions heads rules intuitively means possible possible semantics logic programs ordered disjunction preference relation answer sets 
show implemented answer set solvers normal programs 
implementation generator produces candidate answer sets tester checks candidate maximally preferred produces better candidate 
discuss complexity reasoning tasks 
propositional logic called qualitative choice logic introduced 
logic contains new connective representing ordered disjunction 
intuitively stands possible impossible shown ordered disjunction added logic programs kinds negation answer set semantics 
resulting logic programs ordered disjunction short allow combine default knowledge knowledge preferences simple elegant way 
show implemented answer set solvers asp solvers normal non disjunctive programs 
means implementing possible exploit constantly improving performance asp solvers standard logic programs smodels dlv 
implementation normal logic programs generator produces candidate answer sets tester checks candidate maximally preferred 
tester produces better answer set candidate preferred 
iteration leads maximally preferred answer set 
discuss complexity reasoning tasks 
restrict discussion propositional programs 
usual answer set programming admit rule schemata containing variables bearing mind schemata just convenient representations set ground instances 
constructed prototype implementation smodels ecient asp solver developed helsinki university technology 
generator tester programs special rule types smodels system modi ed asp solver 
prototype implementation available www tcs hut 
software smodels priority 
rest organized follows 
section recall basic notions underlying syntax semantics 
detailed discussion reader referred 
section discusses alternative preference relations answer sets obtained satisfaction degrees rules 
section presents smodels implementation 
section gives complexity results 
section gives short discussion applying preferences problem con guration management :10.1.1.43.2727
section concludes 
logic programs ordered disjunction logic programming ordered disjunction extension logic programming kinds negation default strong negation 
new connective representing ordered disjunction allowed appear head rules 
propositional consists rules form 
cn am ground literals 
intuitive reading rule head possible possible cn possible cn literals called choices rule 
extended logic programs special case rules 
omit rule fact 
rules form body constraints abbreviations body appearing rest program 
ect answer sets containing body exist 
notations lit denote sets atoms literals occurring discussed answer sets inclusion minimal certain cases exclude answer sets consideration intuitively satisfy rules best 
de nition answer sets notion split program 
notion rst disjunctive logic programs 
split program consists single head rules obtained original program picking available alternatives 
de nition split programs di ers respects sakama inoue comply intuitive reading ordered disjunction 
require split program contains exactly alternatives provided original program single rule 
single head rules slightly complicated guarantee choice better choice isn derived rule 
precise de nition follows de nition 

cn body rule 
de ne kth option body de nition 

split program obtained replacing rule options 
simple example 
consist rules obtain split programs split programs contain ordered disjunction 
de ne de nition 

set literals answer set consistent answer set split program exclude inconsistent answer sets consideration represent possible problem solutions 
example obtain answer sets fa bg fcg fbg 
note answer sets proper subset answer set 
hand rules original sanctions literal answer sets intended 
answer sets satisfy intended options 
clearly fa bg gives best options rules fcg gives second best option fbg second best option 
introduce notion preferred answer set section 
preferred answer sets distinguish intended answer sets introduce degree satisfaction rule answer set de nition 
answer set satis es rule cn am degree degree minfr sg :10.1.1.43.2727
degrees viewed penalties higher degree satis ed 
body rule satis ed reason ed best degree obtained 
denote degree 
satisfaction degrees rules program basis de ning preference relation answer sets di erent ways inducing preference relation 
discuss 
rst preference criterion cardinality sets rules satis ed particular degree 
set literals fr ig 
cardinality preference de ned follows de nition 
answer sets cardinality preferred js js js js certain applications counting provide best way de ning preferences answer sets 
propose second inclusion criterion 
criterion originally de nition :10.1.1.43.2727
answer sets 
inclusion preference cautious cardinality preference cautious cases adding unattainable preferences changes set preferred answer sets 
consider decision possible ice cream cake ee tea ee ice cream preferred answer sets cream ee 
dominates satisfy rule rst degree rule second degree 
replace cookie ice cream cake add fact cookie program 
ee cake preferred answer set 
adding unsatis able preference cookies inadvertently second preference important rst 
avoid ects kind pareto criterion de nition 
answer sets 
proof proposition straightforward pareto criterion suggested proposition 
answer sets implies implies de nition 
set literals preferred fc pg answer set answer set answer set particular preference criterion say literal contained preferred answer sets applications instance design con guration preferred answer set represents solution satis es preferences best 
may want express preference important 
consider dessert program original form 
assume ice cream ee 
mechanism express di erences preference importance 
convenient way express meta preferences de ning relation rules 
case simply say dicult take rule preferences account 
illustrate pareto preference de nition 
answer sets preference relation rules pareto preferred 

implies 
principle possible represent preferences rules programs context dependent 
rule preference information part generated answer sets careful loose anti symmetry 
instance perspective answer sets answer set preferred 
long di erent answer sets disagree preferences rules safe side 
pursue issue 
implementation compute preferred answer sets standard answer set implementations programs 
similar approach compute stable models disjunctive logic programs smodels 
programs generator stable models correspond answer sets tester checking answer set preferred 
programs run interleaved fashion 
generator constructs answer set tester tries nd answer set strictly better know preferred answer set 
construct candidate 
want nd preferred answer set save ort directly new answer set candidate 
basic idea encode possible split programs program adding explicit choice options ordered disjunction 
encode choice new atoms form denote kth option rule model comparison easier add set new atoms denote rule satis ed degree atoms strictly necessary programs readable 
de nition 

cn body rule translation kth option de ned follows fc body satisfaction translation fs ng translation fc body fg ng generator de ned follows fg pg de nition straightforward points may need explaining 
rule fc body states body true exactly atoms true 
formal semantics de ned seen shorthand pairs rules form body constraints reason having rules may clear ensures correct answer sets split generated :10.1.1.43.2727:10.1.1.43.2727
consider situation consequence di erent part program 
answer set true blocks 
words chosen satisfy degree satis ed degree rule prevents unintuitive behavior forcing choose lowest possible degree 
example 
program translated fc fc answer sets fa fb fc note case atom body rst rule satis ed 
proposition 
answer set lit answer set proof 
answer set rule 
cn body de ne fc body satis ed mg fs body unsatis ed mg 

de nition satis es rules 
satis ed exactly atom added rule body true 
suppose answer set 
atom lit exists rule form head atom occurs positively body 
de ne fr fr see split program generates answer set answer set di erent optimality criteria need di erent tester programs 
consist common core augmented rules want tester nd answer set strictly better de ne new atoms better worse 
intuition follows better worse true aspect better worse true answer sets incomparable 
de nition 

core tester de ned follows fo mg pg better preference tester fc pg de ned follows better rule degree degree worse rule degree degree fig 

pareto preference tester tp better rule degree degree worse rule degree degree better degree better degree worse degree worse degree fig 

inclusion preference tester case speci parts di erent testers shown figures 
atoms store degrees satisfaction original answer set added fact preference tester fig 
far simplest 
states better exists rule lower degree satisfaction worse rule higher degree 
preference tester fig 
considers di erent degree satisfaction separately 
preferred exists degree satis es better degrees worse preference tester fig 
quite similar add new atoms card card encode cardinalities sets comparisons 
proposition 
answer set 
answer set fc pg lit answer set preferred proof 
preference suppose answer set better worse see better true exactly 
worse know card fs rule degree card fo rule degree better card card degree worse card card degree better better degree worse degree worse degree fig 

cardinality preference tester tc better rule degree degree worse rule degree degree better rule rule better better rule fig 

meta preference tester lit conversely exists generated part fp pg answer set 
cases preference analogous 
corollary immediate proposition corollary 
answer set 
preferred fc pg answer set 
handle meta preferences modifying rules worse atom 
de ne new predicate denote important rule satis ed lower degree allow satis ed higher degree 
shows preference tester modi ed take meta information account 
preference tester altered similar fashion 
adding meta preferences preference tester complex discuss 
complexity previous section de ned extended logic programs interleaved compute preferred answer sets 
possible compute single disjunction free program 
unfortunately turns impossible general case credulous reasoning complete fi pg preferences 
preference slightly easier computationally stays 

complete open question 
section prove complexity results 
start noting di erent relations antisymmetric founded preferred answer set answer sets 
theorem 

deciding preferred fc pg answer set np complete 
theorem 
answer set deciding preferred fc pg conp complete 
proof 
inclusion preferred answer set exists answer set nd query np oracle showing preferred conp 
hardness sat instance construct property sat dg preferred answer set exactly unsatis able 
translation follows sat sat sat sat sg fa theorem 
literal lit deciding exists fi pg preferred answer set complete 
proof 
inclusion rst guess verify answer set 
theorem np oracle verify fi pg preferred 
hardness sat instance literal hard decide true minimal model 
construct true fi pg preferred answer set true minimal model sg preferred answer set minimal model see noting rules form generate possible truth valuations atoms rules satis ed clauses 
suppose minimal model exists answer set implies exists atom exist atom contradiction model assumed minimal 
suppose fi pg preferred answer set 
implies answer set minimal model theorem 
literal lit deciding exists preferred answer set 
proof 
answer set induces tuple jm jm jm denotes number rules satis ed degree see de nition preferred answer set induces tuple 
nd correct value log adaptive np oracle queries number rules add rules force jm upper lower bounds perform binary search narrow bounds 
bound rules may expressed notation fig 
follows card card establishing proceed establish linear respect size nd log np queries 
add issue query see true preferred answer set 
application con guration management illustrate want brie discuss application con guration management 
answer set programming techniques suitable modeling di erent con guration domains :10.1.1.43.2727:10.1.1.43.2727
con guration process alternative way satisfy requirement 
example workstation may possible email client 
consider examples show model kinds di erent preference criteria linux con guration domain 
usually available versions software package 
cases want install latest version older 
handle preferences de ning new atom di erent version demanding version selected component installed 
example rule de nes versions emacs available emacs emacs emacs emacs second component may di erent variants 
example programming libraries come versions normal version containing les necessary run programs linked library developer version header class les allow developer create new applications 
common user prefer normal variant programmer prefer developer version 
may model preferences way libc libc dev need libc developer libc dev libc need libc developer possible preference criteria con guration domain 
clear combined comprehensive preference structure direction needed 
showed implemented asp solvers non disjunctive programs step approach 
rst create generator program answer sets asp solver nd candidate answer set disjunction free tester program check preferred 
tester declarative representation preference criterion easy switch di erent notions preference de ne new ones 
contributions pareto style preference criterion best knowledge prioritized nonmonotonic reasoning combination ordered disjunctions preferences rules complexity results 
discussion related approaches logic programming context dependent priorities see 
want study general qualitative decision making problems 
settings sucient consider preferred answer sets amounts extremely optimistic view world behave view called thinking 
wellknown decision theory realistic models decision making necessary clearly distinguish control agent may constitute agent decision 
answer set programming done distinguishing subset literals decision literals 
describe possible actions decisions consequences states world desired outcomes 
preference ordering answer sets ordering possible decisions de ned decision strategy 
plan detail separate 
helpful comments 
want academy finland project nancial support 

brewka 
logic programming ordered disjunction 
proc 
aaai 
morgan kaufmann 

brewka benferhat le 
qualitative choice logic 
proc 
principles knowledge representation reasoning kr 
morgan kaufmann 
available ifi report www informatik uni leipzig de brewka 

eiter gottlob 
propositional circumscription extended closed world reasoning complete 
theoretical computer science 

gelfond lifschitz 
classical negation logic programs disjunctive databases 
new generation computing 

ilkka niemel patrik simons jia 
unfolding partiality disjunctions stable model semantics 
principles knowledge representation reasoning proceedings th international conference pages 
morgan kaufmann publishers april 

ilkka niemel patrik simons 
extending smodels system cardinality weight constraints 
jack minker editor logic arti cial intelligence pages 
kluwer academic publishers 

sakama inoue 
alternative approach semantics disjunctive logic programs deductive databases 
journal automated reasoning 

soininen 
approach knowledge representation reasoning product con guration tasks 
phd thesis helsinki university technology finland 
