conceptual code mining mining source code regularities formal concept analysis kim mens partement ing informatique universit catholique de louvain ucl place louvain la neuve belgium tom centrum voor wiskunde en informatica cwi box nl gb amsterdam netherlands understanding conceptual structure large software systems software understanding reengineering purposes nontrivial task 
particular knowing start comprehension process difficult especially system large complex time scarce 
propose approach mine system source code automatically efficiently relevant concepts interest refer source code regularities concerns addressed code patterns programming idioms conventions adopted implemented 
formal concept analysis actual source code mining filter classify combine results format convenient software engineer 
applied prototype tool implements approach small medium sized smalltalk applications 
tool discovered interesting source code regularities 
tool approach improved ways tool provide useful results having contact system 
obtained results illustrate relevance feasibility formal concept analysis technique source code mining 
key words source code mining formal concept analysis software classification 
corresponding author 
email addresses kim mens info ucl ac kim mens tom cwi nl tom 
urls www info ucl ac people html kim mens preprint submitted elsevier science may start crucial questions answered embarking important reengineering task 
demeyer devote entire chapter book object oriented reengineering contact unfamiliar code 
apart confronted system completely new contact phase typically days allocated initial reasonably accurate assessment system needs 
variety software reengineering support tools exist tools dedicated contact phase really clear exactly looking 
tools need minimum information specific goal applied 
contact phase software reengineer performs better relying informal techniques chat maintainers read code hour skim documentation interview demo mock installation 
complement enhance techniques automated support phase 
investigate technique formal concept analysis known applications data analysis knowledge processing applicable early stage 
essence contribution lies idea applying fca source code particular choice elements properties fca algorithm filtered classified discovered concepts order mine system source code relevant source code regularities way independent actual system analyzed 
proposed approach improved ways spite apparent simplicity allows mine smalltalk source code interesting regularities design patterns programming idioms conventions 
allows discover certain opportunities refactoring features implementation spread source code 
discovered information provides starting point understanding source code detail 
remainder structured follows 
section briefly introduces mathematical technique formal concept analysis 
section explain approach formal concept analysis mine source code relevant concepts interest 
section briefly presents tool section gives overview experiments conducted source code regularities discovered 
sections discuss related 
conclude section 
www cwi nl tom 
formal concept analysis formal concept analysis fca branch lattice theory identify meaningful groupings elements common properties 
fca algorithm takes input relation boolean table potentially large finite set elements set properties elements 
example table table different programming languages properties related 
cross table cell means programming language corresponding row property corresponding column 
table programming languages supported programming paradigms 
progr 
language oo functional logic static typing dynamic typing java smalltalk scheme prolog table input fca algorithm determines maximal groups elements properties called concepts element group shares properties property group holds elements element outside group properties property outside group holds elements group 
intuitively concept corresponds maximal rectangle table allow arbitrary permutations table rows columns 
concepts ordered concept lattice example depicted 
lattice bottom concept contains elements properties 
programming language example concept contains elements 
similarly top concept contains properties hold elements 
property 
concepts represent related groups programming languages concept java static typing object oriented groups statically typed object oriented languages 
ar prefer terms element property object attribute traditional fca literature terms specific meaning oo software development 
java static typing object oriented java smalltalk object oriented smalltalk dynamic typing object oriented java smalltalk scheme prolog scheme dynamic typing functional object oriented functional logic static typing dynamic typing scheme prolog smalltalk dynamic typing prolog dynamic typing logic fig 

concept lattice corresponding table 
details formal concept analysis refer 
section explains details approach fca source code mining 
mining source code regularities applying fca mining smalltalk source code choose elements properties compute concept lattice 
computing lattice lots concepts produced irrelevant redundant 
filter discovered concepts classify combine annotate way relevant software engineer 
novelty contribution idea applying fca source code 
important particular choice elements properties filters analyzers allow discover interesting sourcecode regularities way independent considered application 
generate fca elements properties goal mine smalltalk source code fca elements chose source code entities classes methods method parameters 
source code entities variables method protocols class categories bundles packages namespaces considered initial believe largely independent considered programming language validate claim real experiment 
experiment order avoid cluttering results 
properties take simple substrings names source code entities 
discovered concepts group entities similar names 
motivation choosing properties smalltalk particular programming languages programmers rely naming conventions reveal intentions implement certain programming idioms design patterns 
keeping properties simple additional benefit generated manipulated efficiently 
limit number properties consider possible substrings 
split class method parameter names substrings capitals separators occurring 
addition discard substrings little conceptual meaning object substrings small characters 
ignore colons plurals difference case comparing substrings 
example properties associated class substrings quoted code constant 
properties corresponding method named inenv unify delayed variable env index source 
compute concept lattice applying fca algorithm elements properties generated previous step results large concept lattice hundreds thousands concepts cf 
table section shows quantitative results applying approach different smalltalk applications 
suffice give single illustrative example kind concepts discovered fca algorithm accessing methods 
accessor mutator methods named instance variable share substring 
concept discovered soul application groups accessor mutator methods instance variable defined environment class environment environment grouped properties call stack shared methods methods soul 
filter concepts see section cf 
third column raw table number concepts discovered fca applying filtering order magnitude number considered elements 
imply software engineer needs look significant number concepts order try understand source code 
luckily lot redundancy noise discovered concepts 
reduce noise apply simple filters 
filter ignores concepts contain elements concepts generally small provide relevant information 
note filter discards accessing method concepts typically contain elements accessor mutator method 
accessing methods fine grained lot inspected standard browsers easily retrieved dedicated tools don mind get discarded 
second filter ignores concepts share property substring 
filter may discard interesting concepts throw away irrelevant concepts 
think contact setting getting quick focussed idea certain source code regularities important getting precise list possible regularities 
nice improvement filter discard concepts properties cover small fraction threshold name elements 
filter relative size elements names 
generic filters independent kinds elements analyzed third filter targetted 
discards concepts contain classes similar name hierarchy 
concepts typically provide useful information want discover exactly naming convention classes relying classes belonging hierarchy similar names 
classify filtered concepts mere sets elements classes methods properties substrings elements names concepts remain filtering unstructured 
reorganize concepts automatically way easy software engineer analyze interpret 
precisely flatten concept lattice classify concepts way sense software engineer 
visualize classifications concepts directly 
distinguish main groups concepts fact classification finer grained space restrictions prohibit explain entirely single class concepts group concepts elements methods parameters methods belonging single class hierarchy concepts larger scope group classes methods parameters methods belong single class hierarchy crosscutting concepts explicitly require different class hierarchies involved 
verifying specific common superclass considered classes object methods concept defined object class degenerate case hierarchy concept 
taxonomy helps software engineer ways 
depending trying understand looking single class hierarchy crosscutting concern prefer classifications 
addition knowing certain concept belongs classification helps better understand concept 
example knowing concept containing methods exactly name belongs hierarchy concepts classification allows qualify methods polymorphic methods 
combine annotate concepts organizing concepts taxonomy structure lattice lost 
concepts nearby lattice subconcept relationship necessarily belong classification vice versa 
consequence lot overlap concepts nearby lattice reorganizing concepts may lead redundancy concepts get classified different classifications 
possible nearby concepts concept lattice put classification automatically reconstruct part original structure lattice order reduce redundancy 
specifically recombine highly overlapping concepts single nested 
addition automatically regroup annotate concepts belonging classification order way convenient software engineer different concepts related class es combined methods annotated classes belong concepts annotated properties 
conceptual code mining tool developed prototype tool implements approach outlined presents discovered concepts way easy manipulate 
tool called dutch word designates result delving process 
english meaning verb delve careful investigation facts knowledge 
coincidentally pronunciation word sounds english delve stuff tool 
capitalize letters st tool implemented completely smalltalk analyzes smalltalk source code 
approach tool generalized easily analyze source code languages intend generalize mining java source code near 
fig 

discovered concepts refactoring browser 
going details tools consists efficient fca algorithm set filters set analyzers charge classification combination annotation concepts 
resulting taxonomy concepts visualized 
screenshot tool essentially plugin 
discovered source code regularities applied tool different cases summarized table 
table quantitative results fca applied smalltalk applications 
case elements properties raw filtered time sec soul codecrawler refactoring browser row corresponds different application mined source code regularities 
soul interpreter prolog language conceptual code mining tool 
chose applications know implementation allowed better assess relevance discovered results 
refactoring browser advanced smalltalk browsers codecrawler language independent reverse engineering tool combines metrics software visualization 
cases chosen wanted better understand implementation anyway context experiment tool currently working 
column elements gives indication size considered case equals total number classes plus methods case 
number brackets number classes 
note store method parameters separate elements part method signature 
column properties shows number substrings generated considered elements 
observe number properties factor case refactoring browser factor number elements 
sign implies significant amount properties shared elements 
third column raw shows raw number concepts discovered fca 
column filtered shows concepts remain having applied simple filters explained 
observe filtering remain times concepts number considered elements 
think bit especially larger cases come back discussion section 
considered cases time computation includes steps explained section computation concept lattice acceptable ranging seconds minutes increases non linear way number considered objects 
remainder section discusses regularities discov ered manually analyzing results fca experiments 
refine taxonomy classify explicitly automatically regularities 
certain trade needs requires automated analysis front slows tool 
want keep tool sufficiently general applied languages non oo languages 
extended tool classifies automatically accessing methods polymorphic methods chained messages delegating methods cf 

programming idioms accessing methods explained easily recognized tool naming convention rely 
typically exist lot accessing methods really offer valuable information discarded applying filter requires source code entities concept 
polymorphic methods source code regularity readily recognized tool polymorphic methods exactly name 
consequently grouped concept 
addition polymorphic methods class hierarchy grouped automatically single combined concept 
example source code refactoring browser discovered concept containing methods named implemented different subclasses 
typical example polymorphism examples oo application 
fact class polymorphic method concepts discovered seen 
polymorphic methods class hierarchies equally interesting detect may trigger interesting refactorings tell possible multiple inheritance problems original developers encountered 
chained messages concepts group method auxiliary methods class 
chains recognized fca auxiliary methods name similar originating method slightly longer extra parameter 
codecrawler application class implements method calls auxiliary method turns calls 
methods share substrings chosen metrics 
delegating methods delegate responsibility calling method name 
tool discovered interesting sets delegating methods similar name belonged class 
presence delegating methods single class may indicate class decorator 
code duplication closely inspecting discovered concepts detected cases copy paste reuse concepts contain methods similar name similar implementation 
may logical methods implement similar behavior expected similar names 
implementation point view duplicated code just factored reused 
example codecrawler class discovered concept methods nearly implementation 
longer assume original developer created methods copying replaced calls old new forgot remove old method 
general particular reasons duplication may clear looking classification concepts developer aware method implementing desired behavior defined may accidentally implement method similar name behavior 
methods grouped concepts classified hierarchy concepts method implements desired behavior probably implemented class developer looking sub superclasses 
method needed behavior differed slightly behavior implemented existing method behavior copied adapted slightly extracting common code separate method merely deleting original version longer needed example class 
concepts containing duplicated methods tend classified single class concepts duplication typically occurs inside single class 
duplicated behavior factored single piece code reused 
due fact duplicated code occurs classes defined different class hierarchies 
concepts classified crosscutting concepts 
design patterns design patterns certain naming conventions surprise detected tool 
example visitor pattern uses convention visit method defined visitor class encodes name class visited 
clearly share substrings tool group class corresponding visit methods inside single concept 
soul uses visitor design pattern order perform variety operations logic terms copying renaming 
terms represented subclasses hierarchy visitor hierarchy defined class hierarchy 
tool recovered design pattern instance concepts combined concept classification hierarchy concepts groups polymorphic methods hierarchy implement behavior executed particular term visited 
concept consists sub concepts contains methods defined subclasses class dealing particular term 
example concept defined properties visit compound contains various implementations method defined hierarchy responsible implementing behavior associated object 
specifically concept consists methods implemented classes 
second concept hierarchy concept contains accept methods defined subclasses 
methods responsible calling appropriate method corresponding term visited supplied visitor object 
grouped visitor accept substring properties 
example concept takes account method name name formal parameter accept methods define formal parameter named 
note polymorphic methods depicted part visitor pattern refactoring browser implementation 
design patterns similar naming conventions detected occurrences factory builder observer decorator design patterns 
due space limitations give examples 
relevant domain concepts frequently occurring properties give idea important concepts application problem domain 
information useful understand domain provide common vocabulary talk maintainers 
example applying fca tool source code concepts properties concept attribute analyze filter classification important concepts domain formal concept analysis 
opportunities refactoring revealing interesting source code regularities approach identify opportunities refactorings improve source code quality 
obvious opportunity refactoring get rid code duplication detected 
way concept containing duplicated methods classified provide useful hints refactorings apply 
concept classified single class concept duplication occurs single class extract method refactoring appropriate 
concept occurs hierarchy concepts classification combination extract method pull method refactorings probably appropriate 
course duplication caused having copied method longer suffices simply remove method 
concepts recognized polymorphic methods inspected refactoring opportunities ensure polymorphism implemented check classes class hierarchy understand polymorphic method 
may need add additional 
polymorphic method implemented subclasses particular superclass superclass 
case pull method add class refactoring may appropriate define methods superclass insert intermediate superclass 
particular example discovered soul method defined separately subclasses common superclass 
introducing intermediate superclass appropriate 
codecrawler case examples polymorphic method appeared subclasses common superclass 
examples code subhierarchy believe code moved part hierarchy developer forgot remove original code 
crosscutting polymorphic methods suspicious 
example discovered soul multiplicity method implemented hierarchies 
smalltalk dynamic typing allows classes hierarchies polymorphically 
static type system java prohibit polymorphic 
case situation may call refactoring 
concepts represent design pattern instances scanned particular design flaws 
example visitor design pattern requires visitor class defines appropriate visit method vice versa element class defines accept method calls appropriate visit method 
concepts identify instances visitor design pattern inspect implementation quick straightforward way verify constraints adhered 
related fca software engineering new 
snelting fca reengineer class hierarchies ar analyze objectoriented framework reuse fca 
closer techniques tonella ducasse 
fca detect instances design patterns source code 
specifically tune fca algorithm detecting instances able detect kinds regularities approach 
fca reveal structure single classes 
partition methods class fields methods concept lattice visualize understand structure class 
tilley provide overview fca software engineering purposes 
large number tools verify quality source code application exists 
spectrum ranges simple tools detect basic coding errors specialized clone detection tools tools detect high level bad smells propose appropriate refactorings 
tools exist capable detecting high level structures source code coding conventions design patterns 
main difference tools approach requires priori knowledge 
existing tools rely fact design pattern implementations follow particular naming conventions guidelines 
approach targeted detecting specific kind regularities able detect variety regularities reveal bad code bad smells duplication code design patterns programming idioms opportunities refactoring 
particularly useful contact setting phase code better understood directed tool preferable 
important topic improve filtering concepts discovered fca reduce remaining redundancy discovered concepts 
problem redundancy occurs concepts classified different categories 
briefly mentioned redundancy consequence having flattened concept lattice 
doing lost important dependencies concepts 
exactly information may useful get rid redundancy 
propose keep lattice internal representation advanced filters take advantage resolve remaining redundancy 
time computation tool increases non linear way number considered objects may pose problems regarding scalability approach 
think idea apply approach large amounts source code tool assumes certain naming convention adhered consistent way 
large cases 
context better apply approach multiple times smaller pieces know independent developed development team 
side effect resolve problem time computation 
proposed fairly efficient tool capable mining application source code meaningful interesting regularities 
tool combines formal concept analysis filtering classification techniques order provide simple effective views important parts source code 
validate approach applied tool number small medium sized smalltalk applications 
spite relying similarity names source code entities discovered regularities programming idioms code duplication design patterns domain concepts interesting opportunities refactoring 
approach improved ways particular reduce redundancy believe useful contact context little priori knowledge source code available time scarce 
mens wuyts gonz lez ar anonymous reviewers ecoop workshop objectoriented reengineering aosd workshop foundations aspect languages feedback earlier versions 
efficient implementation fca algorithm smalltalk 
cointe 
gu jussien 
instantiating detecting design patterns putting bits pieces 
proc 
int 
conf 
automated software engineering 
ar mens 
analysing object oriented application frameworks concept analysis 
lncs september 
baker 
finding duplication near duplication large software systems 
proc 
second ieee working conference reverse engineering pages july 
received ieee outstanding award 
baxter moura anna bier 
clone detection syntax trees 
proc 
int 
conf 
software maintenance icsm pages 
ieee computer society press 
brown 
design reverse engineering automated design pattern detection smalltalk 
master thesis university illinois urbana champaign 
dekel gil 
revealing class structure concept lattices 
proc 
th working conference reverse engineering 
demeyer ducasse nierstrasz 
object oriented reengineering patterns 
morgan kaufmann 
ducasse rieger demeyer 
language independent approach detecting duplicated code 
yang white editors proc 
int 
conf 
software maintenance pages 
ieee computer society press september 
fowler 
refactoring improving design existing code 
addison wesley 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley massachusetts 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
ernst griswold notkin 
automated support program refactoring invariants 
proc 
int 
conf 
software maintenance pages 
horwitz 
slicing identify duplication source code 
proc 
th international symposium static analysis 
springer verlag 
mens wuyts 
supporting software development declaratively codified programming patterns 
journal expert systems applications december 
paul prakash 
framework source code search program patterns 
ieee transactions software engineering june 
st phane 
unanticipated integration development tools classification model 
journal computer languages systems structures pp 

snelting tip 
reengineering class hierarchies concept analysis 
proc 
acm sigsoft symposium foundations software engineering 
tilley cole becker eklund 
survey formal concept analysis support software engineering activities 
proc 
st international conference formal concept analysis 
tonella antoniol 
inference object oriented design patterns 
journal software maintenance research practice september october 
mens 
identifying refactoring opportunities logic meta programming 
proc 
th european conf 
software maintenance reengineering pages italy 
ieee computer society 
van emden moonen 
java quality assurance detecting code smells 
proc 
th working conference reverse engineering 
ieee computer society press october 
wuyts 
declarative reasoning structure object oriented systems 
proc 
tools usa ieee computer society press pages 

