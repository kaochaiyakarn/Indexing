software programming languages means specifying hardware quite 
different design methodologies exploited advantages flexibility fast simulation models described programming languages 
time mismatch software languages expressing power hardware systems caused difficulties 
past novel approaches helped reducing semantic gap easing creation design flows support system level specifications 
hardware synthesis models current design electronic circuits systems characterized features constraints 
system complexity increasing time design time shrink 
design methodologies tool flows support synthesis highlevel specifications fast means verification 
second electronic design target embedded systems increasingly larger component software 
efficient design optimal implementation require exploiting hardware software design strategies 
balancing hardware software components search optimal implementation may require migration software blocks hardware vice versa 
third design complex circuits systems leverage re existing hardware software components 
efficient component re requires specification high level abstraction ability mapping specifications different targets 
programming language models compiled object code architectures highly desirable able compile hardware 
context clearly obvious designers write functional models hardware software systems hardware circuits familiar programming languages 
functional models evaluated quickly simulation directly compiled software solution sought 
time legacy models software functions written programming languages hardware synthesis models giovanni de micheli csl stanford university stanford ca part new system design 
drawbacks programming languages hardware design 
shall outline important ones 
hardware circuits execute operations wide degree concurrency 
conversely software programming languages conceived uni processor sequential execution 
second specifications hardware circuits entail structural information 
example interface circuit environment internal blocks may require definition input output ports data formats ports 
addition designer may want express hints constraints partitions circuit 
structural information constraints missing programming languages 
third detailed timing operations important hardware performance interface requirements circuit described 
hand programming languages support timing constructs 
result common practice designers model circuits systems perform functional simulation translate portion model implemented hardware suitable subset hardware description language hdl verilog hdl vhdl synthesized logic gates 
needless say manual translation time consuming errorprone tedious task 
decade research groups tried ease mapping hardware models programming languages corresponding hdl models 
approaches extended restricted programming language constructs 
extensions needed express concurrency structural information partitions os data formats various types constraints 
restrictions motivated avoiding constructs hardware meaning print statements avoiding constructs translation hardware difficult pointers 
extending software model annotations support hardware synthesis task usually acceptable designer just adds information steer particular implementation restriction usable constructs problematic 
example designer legacy model language uses pointers design system support pointers re write model 
model re writing time consuming generating new model scratch 
result research trend area extend subset synthesized hardware possible 
time important research objective insure mapping models hardware efficient wasteful silicon area memory space performance 
shall briefly summarize research trajectory area decade 
sake conciseness shall report major contribution differentiate modeling synthesis approaches 
addition shall concentrate hardware modeling synthesis 
large body exists modeling hardware programming languages simulation support reported 
stroud developed design system cones late eighties 
name suggests cone block combinational logic output cone vertex primary output input register 
cones combinational logic modeled programming language assignment branching iterative constraints 
cone models expanded sum products minimized 
time ku developed language called larger expressing power cones fully synthesized 
just annotated differs semantics available constructs support pointers supports send receive 
syntax cycle hardware semantics 
supports concurrency structural timing constraints unambiguous hardware semantics making suitable front synthesis 
major drawback just hardware design language translation trivial possible limited effort 
strong interest system vendor industries hardware design surfaced years 
efforts devoted embedding support models existing design flows compatible language models verilog hdl vhdl 
commercial product focus design language interoperability support interface design 
notable examples scenic design environment synopsys cyber design system nec toolset frontier design verilog level design 
environments toolsets described detail subsequent papers volume 
time research groups explored alternative design paths model 
example ernst developed design system called extracts computational kernel model implements hardware processor accelerating software execution 
groups looked mapping part model field programmable gate arrays purpose achieving execution speedups achieving re configurable processors 
researchers developed design environment supports design 
despite efforts providing synthesis path ansi model hardware formidable task 
dynamic memory allocation recursion require dynamically changing storage structures cast hard wired circuits typically done hardware synthesis 
solutions may come incorporating memory synthesis techniques hardware synthesis 
generation hardware circuits corresponding design tools probably benefit having large local embedded dram arrays 
pointer resolution hardware synthesis hard problem long time 
spc toolset demonstrated pointers resolved synthesis time 
pointer resolution encoding may done way generate efficient hardware circuits 
summary stage models synthesized hardware making easier migrate software models hardware avoid hardware specification 
unresolved technical problems solved techniques need perfected 
examples models mapped synthesis tools product level industrial designs prove concept design viable convenient 
nec spins variant ease logic synthesis ee times july 
de custom memory management methodology exploration memory organisation embedded multimedia system design kluwer 
ernst henkel benner hardware software synthesis micro controllers ieee design test pp 
december 
ku de micheli high level synthesis asics timing synchronization constraints kluwer academic publishers 
liao tjiang gupta efficient implementation reactivity modeling hardware scenic design environment design automation conference pp 

engels 
programming environment design complex high speed asics design automation conference pp 

ria de micheli spc synthesis pointers application pointer analysis behavioral synthesis iccad proceedings international conference computer aided design san jose ca november pp 

stroud munoz pierce behavioral model synthesis cones ieee design test computers june pp 

www com htm www com htm www com html 
