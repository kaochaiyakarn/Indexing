resources concurrency local reasoning peter hearn queen mary university london 
show resource oriented logic separation logic reason usage resources concurrent programs 
resource central concern concurrent programming 
number processes share access system resources memory processor time network bandwidth correct resource usage essential working system 
dijkstra hoare brinch hansen attacked problem resource control basic works concurrent programming 
addition synchronization mechanisms provide protection inconsistent stressed importance resource separation means controlling complexity process interactions reducing possibility time dependent errors 
revisits ideas formalism separation logic 
initial motivation simple minded 
separation logic extends hoare logic programs manipulate data structures embedded pointers 
main primitive logic separating conjunction allows local reasoning mutation portion state way automatically guarantees portions system state remain unaffected 
far separation logic applied sequential code way breaks state chunks formalism suited shared variable concurrency assign different portions state different processes 
motivation comes perspective general resource oriented logics linear logic bi 
development logics natural try apply problem reasoning resources concurrent programs 
attempt separation logic assertion language instance bi certainly final story 
directions discussed 
number approaches reasoning imperative concurrent programs ideas early hoare concurrency theory parallel programming henceforth fit particularly viewpoint separation logic 
approach revolves concept spatial separation way organize thinking concurrent processes simplify reasoning 
syntactic constraints ensuring separation hoare described formal partial correctness proof rules shared variable concurrency beautifully modular reason locally process simple syntactic checks ensured process tamper state way invalidated local reasoning 
initial step just insert separating conjunction appropriate places proof rules extension rules studied owicki gries 
mere insertion separating conjunction straightforward handle number valuable programming idioms opened number unexpected possibilities 
describe nature programs suppose way programming language express groupings mutual exclusion 
mutual exclusion group class commands elements occurrences required overlap executions 
notice requirement atomicity execution commands mutual exclusion group overlap execution command group 
monitor concurrency monitor determines mutual exclusion group consisting calls monitor procedures 
programming semaphores semaphore determines group pair semaphore operations 
collection conditional critical regions common resource name forms mutual exclusion group 
terminology may state crucial distinctions 
program cautious concurrent processes access piece state commands mutual exclusion group 
program 
obviously nature mutual exclusion guarantee cautious programs racy concurrent processes attempt access portion state time explicit synchronization 
simplicity modularity proof rules achieved syntactic restrictions ensure caution main contribution take method realm programs maintaining modular nature 
programs 
examples include double buffered process renders image represented buffer second process filling second buffer buffers switched image changes efficient message passing pointer passed process avoid redundant copying large pieces data memory managers resource managers thread connection pools avoid overhead creating destroying threads connections databases 
concurrent systems programs microkernel os designs programs manage network connectivity routing application programs web servers 
court danger processes access portion state outside common mutual exclusion grouping just time get inconsistent results 
possible safe know program design observes principle resource separation 
separation property 
time state partitioned owned process mutual exclusion group 
combined principle program component accesses state owns separation implies race freedom 
proof system designed ensure program gets past proof rules satisfies separation property 
logical connective separating conjunction scoping constraints express separation able describe dynamically changing state partitions ownership right access transfers program components 
takes safely territory programs 
fluency logic reason metatheory refer reader companion stephen brookes thorough theoretical analysis 
addition soundness brookes shows proven program race execution starting state satisfying precondition 
describing proof rules give examples buffer toy memory manager 
examples combined illustrate modularity aspect 
point attempt demonstrate specification program component local self contained sense assertions local remarks portions state program components global remarks entire system state 
local specification reasoning essential reasoning methods scale course readers judge specifications meet aim 
preliminary 
long version include examples including semaphore programs proof parallel mergesort 
programming language presentation programming language proof rules section follows owicki gries alterations account heap 
concentrate programs special form single resource declaration possibly prefixed sequence assignments variables single parallel composition sequential commands 
init resource variable list rm variable list cn cons en dispose skip 
false table 
sequential commands possible consider nested resource declarations parallel compositions basic case allow describe variable side conditions briefly old fashioned style 
restrict basic case mainly get quickly examples main point exploration idioms fluency 
refer modern presentation programming language observe restricted form 
grammar sequential processes included table 
include constructs programs operators accessing program heap 
operations mutating reading heap cells commands cons en dispose allocating deleting cells 
note integer expressions pure contain heap dereferencing 
expressions range arbitrary integers heap addressed non negative integers negative numbers represent data apart addresses atoms truth values comment examples section include true false nil expressions meaning say 
command accessing resource conditional critical region ranges heap independent boolean expressions commands 
resource name determines mutual exclusion group commands resource name overlap executions 
execution proceed region currently executing boolean condition true wait conditions proceed fulfilled 
possible study monitors ccrs require include procedure mechanism theoretically simpler 
programs subject variable conditions formedness 
say variable belongs resource associated variable list resource declaration 
require 
variable belongs resource syntax emp false abbreviations false true false fn fn free table 
assertions 
variable belongs resource appear parallel process critical region 
variable changed process appear belongs resource 
third condition note variable changed assignment command heap cell variable altered 
conditions ensure variables accessed concurrent processes protected synchronization 
example racy program ruled conditions 
presence pointers syntactic restrictions avoid races 
legal program denote integer starting state aliases race unequal race 
proof rules proof rules refer assertions separation logic see table 
assertions include points relation separating conjunction empty heap predicate emp classical logic 
grammar means open ended allow possibility forms connective bi predicate describing linked lists section 
semantics assertions included appendix 
familiarity basics separation logic assumed 
remind reader main points 
means current owned heap split components true true 
second reason dereferencing operation know cell exists precondition 
instance holds statement mutates address imply assertion true dangling 
precondition confers right access certain cells guarantees dangling provides connection program logic intuitive notion ownership discussed 
reason program init resource variable list rm variable list cn specify formula resource invariant resource name ri 
formulae satisfy command changing variable free occur critical region ri 
owicki gries stronger condition requiring variable free belong resource ri 
weaker condition due brookes allows resource invariant connect value protected variable value unprotected 
soundness need require resource invariant precise 
definition precision example reynolds showing need restrict resource invariants postponed section just say invariants examples adhere restriction 
complete program resource invariants separately established initialization sequence additional portion state parallel processes access outside critical regions 
resource invariants removed pieces state accessed directly processes 
embodied rule complete programs init cn init resource variable list rm variable list cn parallel composition simply give process separate piece state separately combine postconditions process 
parallel composition rule pn cn qn variable free pi qi changed cj pn cn qn proof rule prove program potential race long race ruled precondition 
precondition guarantees aliases 
helpful annotation notation binary case parallel composition rule 
annotation form precondition postcondition come vertically broken annotated constituent processes just proof pictured reasoning establishes triples pj cj qj sequential processes parallel rule done context assignment invariants resource names ri 
contextual assumption critical region rule process modifies variables free idea rule inside critical region code gets see state associated resource name local process part outside region reasoning proceeds knowledge resource state 
side condition process refers form program composed fixed number processes cn occurrence command processes cj 
proof rules allow sequential separation logic see appendix 
soundness proof rules sequential constructs delicate presence concurrency 
instance readily derive separation logic interference process say altering contents second statements triple true 
essential point proofs system build assumption interference outside processes affect explicit synchronization points 
mirrors classic program design principle dijkstra apart rare moments explicit individual processes regarded completely independent 
allows ignore minute details potential interleavings sequential programming constructs greatly reducing number process interactions accounted verification 
terms say specified processes mind business proven processes dereference cells known exist precondition program point 
combined partition program states implements dijkstra principle 
intuitive statements interference ownership receive formal underpinning brookes semantic model 
remarkable part analysis interplay interleaving semantics traces actions local enabling relation executes trace portion state owned process 
enabling relation skips intermediate states explains interference outside idea 
example pointer transferring buffer efficient message passing better pass pointer value process passing value avoids unneeded copying data 
example packet processing systems packet written storage process inserts pointer packet message queue 
receiving process finishing packet returns pointer pool subsequent reuse 
similarly large file transmitted process better pass pointer copy contents 
section considers pared version scenario place buffer 
section operations cons dispose allocating deleting binary cons cells 
literal dispose section expanded dispose dispose syntax section 
initialization resource declaration full false resource buf full code putting value buffer reading 
put buf full full true get buf full full false presentational convenience definitions form name encapsulate operations resource 
introducing procedure mechanism merely name abbreviation 
focus code 
cons get put dispose creates new pointer process points binary cons cell containing values transmit values process copying pointer placed buffer 
second process reads pointer uses way 
reason dispose operation second process ensure holds 
section place code snippets loops part producer consumer concentrate snippets 
resource invariant buffer full full emp 
understand invariant helps ownership permission reading separation logic assertion program point implies right dereference cells briefly 
reading assertion says binary cons cell don 
assertion emp say global state empty don heap cells 
reading resource invariant says buffer owns binary cons cell associated full true owns heap cells 
proof body command put 
full full emp full true full emp rule commands gives put emp 
postcondition indicates sending process gives ownership pointer placed buffer value held sender 
crucial point proof body implication full applied penultimate step 
step reflects idea knowledge points flows user program buffer resource 
exit critical region point global state information recorded postcondition put 
reason re establish resource invariant having postcondition tantamount asserting body command assertion necessarily false equal point 
process giving ownership second assumption emp full full full false full full emp gives emp get 
prove parallel processes follows assuming satisfies indicated triple 
emp emp emp emp cons get put emp dispose emp emp emp emp fact initialization establishes resource invariant way gets ready parallel rule emp full false full emp emp emp obtain triple emp prog complete program prog 
writing annotated programs generally include assertions program points show important properties hold formally connect proof theory apply axiom followed hoare rule consequence structural rules 
instance left process postcondition cons get official postcondition just observe implies 
omit mention little implications 
emp full false emp full ri buf emp emp resource buf full emp emp emp emp true true emp emp produce get cons put dispose emp emp false false false false ri buf false false table 
pointer passing producer consumer program verification just shows add command say dereferences put command left process able prove resulting program 
reason emp postcondition put separation logic requires point owned precondition operation dereferences verification concentrated tracking ownership assertions type nature say kind data exists various program points speak identities data 
instance assertions track flow values left right process 
show stronger correctness properties track buffer contents generally need auxiliary variables 
stands code proven completely sequential left process go 
properties shown straightforward prove producer consumer program code snippets parts loops table 
code emp invariant loop property proven ensures race condition 
example memory manager resource manager keeps track pool resources requesting processes received back reallocation 
example consider toy manager resources memory chunks size 
manager maintains free list singly linked list binary cons cells 
free list pointed part declaration resource mm 
invariant mm just points singly linked list dangling pointers link fields list list predicate satisfying recursive specification 
list nil emp list user program asks new cell mm gives pointer element free list list nonempty 
case list empty mm calls cons get extra element 
alloc mm true nil cons mm true command reads cdr binary cons cell places ram model separation logic similarly access car cons cell 
rule commands obtain interface specifications emp alloc emp 
specification alloc illustrates ownership pointer materializes user code subsequent 
conversely specification requires ownership 
proofs bodies operations rule describe ownership transfer way previous section omitted 
critical region protect free list corruption possible parallel processes interact mm 
tiny example just processes allocates mutates deallocates 
emp emp emp emp alloc alloc emp emp emp emp emp little program example safe 
see aspect consider execution left process goes right completion right begins 
statements mutating fact alter cell statements critical regions 
potential aliasing program proof tells possibility racing execution 
hand insert command immediately leftmost process race 
resulting program get past proof rules postcondition emp 
issue exclusive memory managers 
connection pool thread pool web server example handle returned pool returning process sure inconsistent results may ensue 
combining buffer memory manager show put treatment buffer memory manager mm alloc cons dispose 
aim show different resources interacting modular way 
presume resource declarations mm buf associated resource invariants 
proof parallel processes section done time mm 
emp emp emp emp alloc get put emp emp emp emp emp code pointer ownership transferred mm resource lefthand user process 
gets sent buf resource taken righthand process promptly returned mm 
initialization sequence resource declaration form full false resource buf full mm triple list full false emp emp sets reasoning parallel composition 
rule complete programs obtain property complete program 
point change code verifications done mm buf inside parallel processes just preconditions postconditions get put alloc proof rule ccrs 
crucial point rule ccrs include resource invariant interface specification described rule 
result proof specifications need repeated change implementation internal resource invariant module 
effective resource separation allows localized view state resource hidden user programs outside critical regions 
reynolds counterexample counterexample due john reynolds shows concurrency proof rules incompatible usual hoare logic rule conjunction example uses resource declaration resource invariant true 
stand assertion 
derivation axiom skip rule consequence rule critical regions 
true skip true emp true skip emp true emp true skip emp proof construct derivations emp true skip emp emp true skip emp emp true skip emp true skip emp true skip emp true skip emp derivations rule consequence implications emp emp emp 
derivation continues application ordinary frame rule invariant consequence 
derivations incompatible 
says ownership single cell kept user code second says resource 
application conjunction rule gives premise rule consequence leads inconsistency 
true skip emp true skip false triple indicate program diverges clearly 
fact resource invariant true precisely say storage owned nature fool proof rules 
way problem insist resource invariants precisely nail definite area storage 
semantic notation appendix assertion precise states area storage precise predicate identifies 
reynolds counterexample discovered august year author described proof rules pointer transferring buffer example unpublished note 
realizing difficulty example information hiding concurrency author yang reynolds studied version problem sequential setting precise resource invariants describe internal state module 
difficult concurrent case settled brookes main result theorem brookes proof rules sound resource invariants precise predicates 
rules reynolds counterexample true precise predicate 
resource invariants place buffer toy memory manager precise 
may intuitive points separation apply generally shared variable concurrency particular interesting attempt provide modular methods reasoning process calculi resource oriented logics 
csp concepts resource separation sharing modelled way 
calculus powerful primitives name manipulation certainly reminiscent pointers imperative programs 
cases natural wonder logic allows names successively owned different program components maintaining resource separation basis system designs 
right way extending ideas process calculi obvious 
line bears formal similarity cardelli gordon logics process calculi 
mixture substructural logic ordinary classical logic consider concurrency 
independence processes emphasized analogue called separation property considered impact race conditions 
focus expression call intensional properties number connections processes 
similar underlying logical technology approach uses technology different way 
idea ownership expect central ownership types 
interesting attempt describe formal connection 
stepping back time important early works reasoning imperative concurrent programs owicki gries 
difference system rules racy programs theirs 
handle racy programs assuming fixed level granularity assumption explicit critical region programs principle reach methods 
importantly owicki gries method involves explicit checking non interference program components system rules interference implicit way nature way proofs constructed 
result method modular 
claim controversial just echoes statement owicki gries 
fact classic owicki gries works extends approach hoare powerful involves explicit non interference checking 
acknowledge proof process longer powerful method way view attempt extend modular approaches proof process shorter wider variety programs 
number immediate directions 
incorporation passivity allow read sharing heap cells processes 
proof methods require complete resource separation rely guarantee method aim separation logic local nature cut sizes rely guarantee conditions 
third incorporation temporal features 
generally believe direction resource oriented logics offers promise reasoning concurrent systems hope demonstrated form proofs specifications 

am grateful brinch hansen david pym john reynolds discussions resource concurrency impacted form steve brookes theoretical analysis josh richard cristiano yang embrace programming idioms 
research supported epsrc 

brinch hansen 
nucleus multiprogramming system 
comm 
acm 

brinch hansen 
structured multiprogramming 
comm 
acm 
reprinted 

brinch hansen editor 
origin concurrent programming 
springer verlag 

brookes 
semantics concurrent separation logic 
volume springer lncs proceedings th concur london 
august 

cardelli 
spatial logic concurrency 
th international symposium theoretical aspects computer science lncs springer 

cardelli gordon 
anytime 
modal logics mobile ambients 
th acm sigplan sigact symposium principles programming languages pages 

clarke noble potter 
simple ownership types object containment 
proceedings th european conference object oriented programming pages springer lncs 

dijkstra 
cooperating sequential processes 
editor programming languages pages 
academic press 
reprinted 

dijkstra 
hierarchical ordering sequential processes 
acta informatica october 
reprinted 


girard 
linear logic 
theoretical computer science 

hoare 
theory parallel programming 
hoare editors operating systems techniques 
academic press 
reprinted 

hoare 
monitors operating system structuring concept 
comm 
acm 
reprinted 

hoare 
communicating sequential processes 
prentice hall 

jones 
specification design parallel programs 
ifip conference 

milner 
polyadic pi calculus tutorial 
bauer brauer schwichtenberg editors logic algebra specification pages 
springer verlag 

hearn reynolds yang 
local reasoning programs alter data structures 
proceedings th annual conference european association computer science logic lncs pages 
springer verlag 

hearn pym 
logic bunched implications 
bulletin symbolic logic june 

hearn yang reynolds 
separation information hiding 
st acm sigplan sigact symposium principles programming languages pages venice january 

owicki gries 
axiomatic proof technique parallel programs 
acta informatica 

owicki gries 
verifying properties parallel programs axiomatic approach 
comm 
acm 

pnueli 
temporal semantics concurrent programs 
theoretical computer science 

reynolds 
separation logic logic shared mutable data structures 
invited proceedings th ieee symposium logic computer science pages 

stirling 
generalization owicki gries hoare logic concurrent language 
theoretical computer science 

yang hearn 
semantic basis local reasoning 
foundations software science computation structures springer lncs 
appendix sequential separation logic reasoning atomic commands small axioms assumed distinct variables 
dispose emp emp cons ek ek emp emp typically effects small axioms extended frame rule doesn change variables free addition usual proof rules standard hoare logic 
skip stated substitution rule rule introducing existential quantifiers 
consequence rule holds semantics domain contains free variables 
semantics oracle proof system 
state consists components stack heap finite partial functions indicated domains 
variables 
nats 
ints 
nats fin ints variables fin ints states integer boolean expressions determined valuations ints true false domain includes free variables notations semantics assertions 

dom denotes domain definition heap dom domain 
indicates domains disjoint 
denotes union disjoint heaps union functions disjoint domains 
partial function goes satisfaction judgement says assertion holds stack heap 
assumes free dom free set variables occurring freely iff true iff iff ints 
emp iff empty heap iff dom iff 
notice semantics exact required active address current heap 
build descriptions larger heaps 
example describes adjacent cells contents 
permissions reading assertions intimately related way semantics works portions heap 
consider example formula list memory manager example 
heap satisfying formula partition contains free list contains binary cell pointed evident regard assertion describing entire state assertion part conjunct 
