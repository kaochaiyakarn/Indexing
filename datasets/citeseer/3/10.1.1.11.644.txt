crossmine efficient classification multiple database relations yin uiuc uiuc edu jiawei han uiuc cs uiuc edu today structured data stored relational databases 
database consists multiple relations linked conceptually entity relationship links design relational database schemas 
multi relational classification widely disciplines financial decision making medical research geographical applications 
classification approaches single flat data relations 
usually difficult convert multiple relations single flat relation introducing huge undesirable universal relation losing essential information 
previous works inductive logic programming approaches known relational mining proven effective high accuracy multi relational classification 
unfortunately suffer poor scalability number relations number attributes databases 
propose crossmine efficient scalable approach multi relational classification 
novel methods developed crossmine including tuple id propagation performs semantics preserving virtual join achieve high efficiency databases complex schemas selective sampling method highly scalable number tuples databases 
theoretical backgrounds implementation techniques crossmine introduced 
comprehensive experiments real synthetic databases demonstrate high scalability accuracy crossmine 
supported part national science foundation univ illinois ibm faculty award 
opinions findings recommendations expressed material author necessarily reflect views funding agencies 
yang uiuc cs uiuc edu 
philip yu ibm watson 
ctr 
ibm com today structured data stored relational databases 
real world applications evaluation credit card applications fraud detection information stored multiple relations needs decision making 
important classification approaches neural networks support vector machines applied data represented single flat relational form :10.1.1.117.3731
multiple relations database usually connected semantic links entity relationship links er model database design 
data stored relation closer semantic relationship reachable remote links 
counterproductive simply convert multiple relational data single flat data relation conversion may lead generation huge universal relation lose essential semantic information carried semantic links database design 
tackle multi relational classification problem relational databases major challenges efficiency scalability accuracy classification 
building classifier database relations search space usually large perform exhaustive search 
hand semantic links usually weak passing long chain links 
multirelational classifier needs handle efficiency accuracy problems 
lack accurate efficient scalable multi relational classification methods handle large databases complex schemas 
widely category approaches multirelational classification inductive logic programming ilp :10.1.1.35.951
ilp approaches achieve classification accuracy multi relational classification 
ilp approaches scalable number relations number attributes database 
usually inefficient databases complex schemas 
ilp classification approaches aim finding hypotheses certain format predict class labels examples background knowledge 
hypotheses sets rules consisting set predicates 
take foil order inductive learner example :10.1.1.34.5768
foil constructs set conjunctive rules distinguish positive examples negative ones 
build rule repeatedly searches best predicate appends rule 
evaluates possible predicates find best 
evaluate predicate needs append current rule find number positive negative tuples satisfying rule 
process time consuming number relations large number possible predicates large 
database multi relational classification target relation rt tuples called target tuples 
target tuple associated class label 
relations non target relations may contain relevant information helps classification 
build multirelational classifier needs find predicates non target relation help distinguish positive negative target tuples 
ilp approaches efficient evaluate predicates separately takes join operations equivalents evaluate predicate 
method reduce computational cost join target relation relations evaluate predicates result relation 
predicates evaluated simultaneously scanning result relation 
repeatedly find predicates build rules needs join relations different ways expensive time space 
propose crossmine scalable accurate approach multi relational classification 
basic idea propagate tuple ids associated class labels target relation relations 
relation ids propagated tuple associated set ids represent target tuples joinable tuple id propagation flexible method 
propagating ids target relation non target relations propagate ids transitively additional non target relations search predicates relations 
idea tuple id propagation virtually join relations minimal cost find predicates joined relation 
crossmine obtains high scalability avoiding high cost physical joins 
crossmine uses rules classification 
uses sequential covering algorithm repeatedly constructs rules removes positive examples covered rule 
construct rule repeatedly searches best predicate appends current rule 
search process crossmine limits search space relations related target relation related relations rule 
way strong semantic links identified search process controlled promising directions 
hand search space crossmine larger typical ilp approaches 
tuple id propagation crossmine considers predicates time join value constraint 
crossmine performs look ahead considers predicates time 
crossmine achieves high efficiency high accuracy controlling search space identifying strong semantic links 
sequential covering algorithms negative examples removed rule building process algorithm inefficient databases large numbers tuples 
common building rule positive examples negative ones causes classifier spend large amount time build low quality rules 
address issue crossmine employs selective sampling method reduce number negative tuples numbers positive negative tuples unbalanced 
helps crossmine achieve high scalability number tuples databases 
experiments show sampling method decreases running time significantly slightly lowers accuracy 
remaining organized follows 
section introduce related 
section introduces idea tuple id propagation theoretical background 
describe algorithm implementation issues section 
experimental results section study concluded section 
related important category approaches multirelational classification ilp 
formal definition ilp problem follows 
background knowledge set positive examples set negative examples find hypothesis set horn clauses completeness consistency known ilp systems include foil golem progol :10.1.1.34.5768:10.1.1.34.5768:10.1.1.31.1630:10.1.1.35.951
foil top learner builds rules cover positive examples negative ones 
golem bottom learner performs generalizations specific rules 
progol uses combined search strategy 
tilde approach uses idea inductively constructs decision trees :10.1.1.135.8361
tilde efficient traditional ilp approaches due divide conquer nature decision tree algorithm 
ilp probabilistic approaches popular multi relational classification modeling :10.1.1.106.5791
important probabilistic relational models prm extension bayesian networks handling relational data 
prm integrate advantages logical probabilistic approaches knowledge representation reasoning 
approach proposed integrate ilp statistical modeling document classification retrieval 
way modeling classifying relational data frequent pattern association rule mining 
approach proposed frequent pattern mining graphs applied multi relational data 
authors propose approach association rule mining relational databases 
take foil typical example ilp approaches show working procedure 
foil sequential covering algorithm builds rules 
building rule positive target tuples satisfying rule removed 
predicates added building rules 
step possible predicate evaluated best appended current rule 
evaluate predicate needs appended current rule get new rule constructs new dataset contains target tuples satisfying relevant non target tuples join path specified evaluated number positive negative target tuples satisfying databases complex schemas search space huge possible predicates step 
build rules foil needs repeatedly construct datasets physical joins find predicates time consuming 
inefficiency method verified experiments 
loan loan id account id date amount duration payment class label order order id account id bank account amount type account account id district id frequency date transaction trans id account id date type operation amount balance symbol card card id disp id type issue date disposition disp id account id client id type client client id birthdate gender district id district district id name region people lt lt lt gt city ratio urban avg salary den enter crime crime 
financial database pkdd cup 

tuple id propagation section explain idea tuple id propagation method finding predicates propagation 
essence tuple id propagation method virtually joining non target relations target 
flexible effective method costly physical join time space 

basic definitions database consists set relations target relation class labels associated tuples 
relations non target relations 
relation may primary key foreign keys pointing primary key relation 
consider types joins 
join primary key foreign key pointing 
join foreign keys point primary key 
example join loan account id order account id ignore possible joins represent strong semantic relationships entities database 
shows example database 
arrows go primary keys corresponding foreign keys 
target relation loan 
target tuple positive negative indicating loan paid time 
class labels usually assigned experts derived sophisticated computation rules payment history customer 
define goodness predicates 
predicate constraint certain attribute certain relation 
example predicate loan means duration loan months predicate loan means loan value account id attribute 
take sample database example 
suppose current rule empty goal find best predicate 
foil gain measure goodness predicate :10.1.1.34.5768
definition foil gain 
rule denote number positive negative examples satisfying suppose current rule denote rule constructed appending predicate foil gain predicate defined follows log foil gain loan loan id account account id account id frequency amount duration payment class label date account account id frequency date monthly weekly monthly weekly loan loan id account id amount duration payment class 
sample database column loan relation contains class labels 
intuitively foil gain represents total number bits saved representing positive examples appending current rule 
foil gain measure goodness predicate target relation loan 
predicate account monthly suppose rule loan loan account monthly 
say tuple loan satisfies tuple account joinable value monthly attribute frequency 
example tuples account id account satisfy predicate account monthly 
tuples loan id loan satisfy rule 

search predicates joins consider sample database 
compute foil gain predicates non target relation account need set current rule loan loan predicate account relation find positive negative tuples satisfying example account monthly rule loan loan account monthly converted sql query select loan id loan account account id account id frequency monthly foil gain computed result query 
database stored main memory set arrays simulate process executing sql query find target tuples satisfying ilp approaches multi relational classification similar methods evaluate predicates 
disadvantage method takes nontrivial computation evaluate predicate needs evaluate predicates find best 
costly databases complex schemas 
noted computation performed repeatedly process 
join target relation non target relation performed times evaluation predicates 
efficient approach join compute foil gain predicates 
sample database relations joined shown 
joined relation foil gain predicate relations computed 
compute foil gain predicates certain attribute needs scan corresponding column joined relation 
handle continuous attribute 
find best predicate attribute account date sort column iterate smallest value largest value value compute foil gain predicates date date 
loan account id id amount dur pay freq date class monthly monthly weekly monthly monthly 
join loan account 
join evaluation quite expensive repeatedly search predicates performing joins 
needs evaluate numerous predicates different relations needs join relations different ways 
rule gets long joined relation wide contains huge number tuples redundant shown relational schema normalization studies 
time ing perform computation relation 
sections approach called tuple id propagation proposed overcome problem 

tuple id propagation loan loan id account id amount duration payment class account account id frequency date ids class labels monthly weekly monthly weekly 
example tuple id propagation 
suppose primary key target relation attribute integers represents id target tuple 
consider sample database shown schema 
performing physical join ids class labels target tuples propagated account relation 
procedure formally defined follows 
definition tuple id propagation 
suppose relations joined attributes tuple associated set ids target relation represented 
tuple set 
theorem corollary show correctness tuple id propagation compute foil gain propagated ids 
theorem suppose relations joined attribute target relation primary key id tuples satisfy current rule eliminated 
current rule contains predicate id enables join 
tuple id propagation tuple represents target tuples joinable join path specified current rule 
proof 
definition 
represents target tuples joinable join path specified current rule 
corollary suppose relations joined attribute target relation tuples satisfy current rule eliminated 
ids propagated foil gain predicate computed propagated ids 
proof 
current rule predicate foil gain computed 
computed process building current rule 
computed way find tuples propagated ids find target tuples joined tuple join path specified current rule count number positive negative tuples 
example suppose current rule loan loan 
predicate account monthly find tuples account relation satisfy predicate 
find tuples loan relation joined tuples 
maintain global table class label target tuple 
table know tuples contain positive negative examples 
information easily compute foil gain predicate account monthly 
please notice compute foil gain class labels tuple account relation see 
suppose tuple loan relation joined tuples account relation 
number positive negative tuples associated tuple account relation compute foil gain tuple counted twice get exact number positive negative tuples satisfying rule 
propagated ids find exact set target tuples satisfy rule 
propagating ids target relation relations directly joinable propagate ids transitively propagating ids non target relation theorem 
theorem suppose non target relations joined attribute tuples satisfy current rule eliminated 
tuple represents target tuples joinable join path specified current rule 
propagating ids join tuple represents target tuples joined join path current rule plus join 
proof 
suppose tuple joined vm join vi 
target tuple joinable vm id vi 
target tuple joinable join path current rule plus join id 
corollary similar proved theorem 
tuple id propagation non target relations compute foil gain propagated ids 
tuple id propagation way perform virtual join 
physically joining relations virtually joined attaching tuple ids target relation tuples non target relation certain join path 
way semantic links target relation non target relations foil gain predicates computed physical join performed 
tuple id propagation flexible efficient method 
ids associated class labels easily propagated relation 
dong predicates different relations evaluated little redundant computation 
required space small ids take additional storage space 
id propagation valuable enforced semantic constraints mind 
cases propagation counter productive propagate large fan outs propagate long weak links 
case happens tuples produced propagation 
suppose ids propagated relation tuple joined target tuples target tuple joined tuples semantic link target relation usually weak link 
example propagation people birth country links may productive 
second case happens propagation goes long weak links linking student car dealer pet car dealer may productive 
consideration efficiency accuracy system discourages propagation links large fan active relations explained 

crossmine algorithm section algorithm crossmine building rules tuple id propagation 
sequential covering algorithm developed repeatedly builds rules removes positive tuples satisfying rule 
build rule algorithm find rules input relational database target relation rt 
output set rules predicting class labels target tuples 
procedure rule set emptyset rule find rule add remove positive target tuples satisfying positive target tuples left return 
algorithm find rules repeatedly searches best predicate adds current rule 
algorithm selected guarantees quality rule keeping large number negative examples greedy nature efficient large databases 
crossmine uses sampling method improve scalability number tuples database 

rule representation algorithm aims finding rules distinguish positive target tuples negative ones 
rule list predicates associated class label 
form rules different traditional ilp approaches 
conventional predicates complex predicate elements rules 
complex predicate contains parts 
prop path indicates propagate ids 
example loan account id account account id indicates propagating ids loan relation account relation join loan account id account account id 

constraint indicates constraint relation ids propagated 
example account frequency monthly indicates tuples account relation value monthly attribute frequency 
prop path complex predicate may empty right tuple ids relation constraint applied 
complex predicate usually equivalent conventional predicates 
example rule loan loan account monthly represented loan loan account id account account id account frequency monthly 
algorithm find rule input relational database target relation rt 
output rule predicting class labels target tuples 
procedure rule empty rule set rt active complex predicate find best pred foil gain min foil gain break remove target tuples satisfying update ids active relation constraint inactive relation set relation active length max rule length return 
algorithm find rule 
crossmine algorithm relational database target relation crossmine builds classifier containing set rules contains list complex predicates class label 
idea repeatedly build rules 
rule built remove positive target tuples satisfying 
algorithm shown 
build rule repeatedly searches best complex predicate appends current rule criterion met 
relation active appears current rule target relation 
active relation required correct propagated ids tuple searching best predicate 
algorithm shown 
procedure find best predicate active relation find best complex predicate constraint applies id propagation involved relation joined active relation propagate ids find best complex predicate consider database 
originally loan active 
suppose best complex predicate loan account id account account id account frequency monthly 
account active 
try propagate tuple ids loan account possible way find best predicate 
idea algorithm building rule follows 
starting target relation rt find best com loan loan id account id date amount duration payment class label loan loan id client id client client id birthdate gender district id 
sample database 
district district id name region people city ratio urban avg salary plex predicate propagates ids rt relation start rt find complex predicate 
algorithm greedy nature 
extends rule predicates active relations relations directly joinable active relation 
algorithm may fail find predicates databases containing relations join relations database shown 
database meaningful predicate loan relation 
rules built involve predicates client relation district relation 
problem solved look ahead method 
searching best predicate ids propagated relation contains foreign key pointing relation ids propagated search predicates method example find rules loan loan loan id loan loan id loan client id client client id client birthdate 
correct ids relation scan compute number positive negative target tuples satisfying predicate approach :10.1.1.136.3242
continuous attributes method section search predicates 
algorithm searching best complex predicate shown 
algorithms show procedure building rules crossmine 
basic idea building rule start target relation keep appending predicates active relations relations related active relation stopping criterion met 
running time crossmine affected number relations database size search space mainly determined number active relations number joins active relation 
verified experiments synthetic databases 
achieve high accuracy multi relational classification algorithm able find useful predicates database builds rules algorithm find best pred input relational database target relation rt current rule output complex predicate foil gain 
procedure complex predicate pmax empty active relation complex predicate best complex predicate foil gain foil gain pmax pmax relation key foreign key joined active relation propagate ids best complex predicate foil gain foil gain pmax pmax foreign key propagate ids relation pointed best complex predicate foil gain foil gain pmax pmax return pmax 
algorithm find best pred 
commercial databases model design types relations entity relation relationship relation 
usually entity relation reachable entity relations join paths going relationship relations 
suppose entity relation contains useful information classification 
usually join paths target relation rt representing important semantic links 
reached useful entity relations relationship relations 
method look ahead highly probable utilize information ilp approaches perform search building rules 
search spaces approaches usually smaller crossmine 
complex predicates crossmine considers predicates time join value constraint 
look ahead consider predicates rule generation 
enables crossmine find predicates build accurate classifiers traditional ilp approaches 
hand crossmine different joining large number relations indiscriminately universal relation approach 
limits search process tuple id propagation active relations look ahead 
search space confined promising active links indiscriminate joins lead high efficiency classification accuracy 

tuple sampling algorithm see procedure building rules number positive tuples keeps decreasing number negative tuples remains unchanged 
usually rule covers certain proportion remaining positive tuples usually 
rules cover majority positive tuples 
positive tuples covered takes similar amount time build rule large number negative tuples remain 
sup sup number positive negative tuples satisfying rule bg bg number positive negative tuples built 
accuracy estimated method shown equation accuracy sup sup sup number classes 
algorithm described bg equals number negative tuples 
bg small bg large quality guaranteed 
bg small confident accuracy estimate real world accuracy time spent building rules quality rules usually lower rules high bg bg observation method proposed improving effectiveness 
rule built require number negative tuples greater neg pos ratio times number positive tuples 
sampling performed negative tuples requirement satisfied 
require number negative tuples smaller max num negative large constant 
analyze improvement efficiency sampling 
experiments show small portion positive tuples remain rule generated usually covers smaller portion remaining positive tuples 
possible reason usually noisy positive tuples covered rule 
consequence number rules generated usually increases number target tuples 
suppose tuples database half positive 
assume number rules sublinear function suppose takes time find rule 
algorithm sampling takes time 
sampling time building rule proportional number remaining positive tuples 
rules cover majority positive tuples total number tuples decreases sharply finding rules 
total running time close 
sampling accuracy rules estimated different way 
suppose building rule positive negative tuples 
negative tuples randomly chosen sampling 
building rule suppose positive negative tuples satisfying need estimate number negative tuples satisfying simplest estimation safe estimation quite possible luckily excludes negative examples 
want find number probability 
say know negative tuples chosen sampling 
assume know negative tuples satisfy consider event negative tuple satisfying random event 
random vari able obeying binomial distribution 
considered sum random variable 
large central limit theorem 
random variable 
require equation converted equation easily solved solutions corresponding positive negative squared root equation 
greater solution chosen corresponds positive squared root 
negative tuples satisfying rule sampling tuples satisfying rule sampling 
safe estimation estimated estimate accuracy equation 
presents algorithm building rules 
simply describe classification process 
build rules certain class set tuples class positive negative 
estimate accuracy rule equation 
rules class built predictions target tuples 
predict class label target tuple accu rate rule satisfied class label rule prediction 

experimental results performed comprehensive experiments synthetic databases real databases show accuracy scalability crossmine 
compare crossmine foil tilde experiment source code foil binary code tilde authors :10.1.1.34.5768:10.1.1.135.8361
crossmine foil run ghz pentium pc running windows professional 
tilde run sun blade workstation 
fold experiments specified 
parameters crossmine 
min foil gain 
max rule length 
neg pos ratio 
max num negative accuracy running time crossmine sensitive parameters 

synthetic databases evaluate scalability crossmine set synthetic relational databases generated 
databases mimic real world relational databases 
data generator takes parameters shown table generate database 
columns table represent parameter name description default value 
name description def 
relations tmin min tuples relation expected tuples relation amin min attributes relation expected attributes relation vmin min values attribute expected values attribute fmin min foreign keys relation expected foreign keys relation rules lmin min complex predicates rule lmax max complex predicates rule fa prob 
predicate active relation table 
parameters data generator 
generate database generate relational schema relations target relation 
number attributes relation obeys exponential distribution expectation amin 
attributes primary key 
number values attribute primary key obeys exponential distribution expectation vmin 
attributes relation foreign keys pointing primary keys relations 
number foreign keys relation obeys exponential distribution expectation fmin 
schema generated generate rules lists complex predicates 
number complex predicates rule obeys uniform distribution lmin lmax 
complex predicate probability fa active relation probability fa inactive relation involving propagation 
class label rule randomly generated number positive rules negative rules differ 
generated tuples added database 
target relation exactly tuples 
target tuple generated randomly chosen rule 
way need add tuples non target relations satisfy rule 
target tuples generated add tuples non target relations 
non target relation number tuples obeys exponential distribution expectation tmin 
tuples leave unchanged 
randomly generate tuples add tuples 
rx represent synthetic database relations expected tuples relation expected foreign keys relation 
multi relational classification approach interested scalability size database schema number tuples relation number joins involving relation 
experiments conducted databases different number relations different number tuples relation different number foreign keys relation 
experiment running time accuracy crossmine foil tilde compared 
test scalability number relations databases created relations respectively 
database expected number tuples relation expected number foreign keys relation 
shows running time approaches 
fold experiments tests average running time fold shown 
running time algorithm close greater hours fold tested experiments 
experiment running time greater hours 
experimental results see crossmine thousands times faster foil tilde cases 
running time affected number relations 
foil tilde scalable number relations 
run runtime seconds accuracy number relations crossmine foil tilde 
runtime 
number relations crossmine foil tilde 
accuracy 
ning time foil increases times number relations increases running time tilde increases times 
accuracy approaches shown 
see crossmine accurate foil tilde 
test scalability number tuples databases created expected number tuples relation respectively 
number relations expected number foreign keys 
experiment performance crossmine sampling tested show effectiveness sampling 
shows running time approaches 
see crossmine scalable foil tilde 
running time crossmine increases times number tuples increases foil tilde increase times times respectively 
sampling crossmine scalable running time decreases third non sampling version number tuples 
runtime seconds accuracy crossmine sampling crossmine sampling foil tilde number tuples 
runtime 
crossmine sampling crossmine sampling foil tilde number tuples 
accuracy 
accuracy approaches shown 
crossmine accurate foil tilde sampling method slightly lowers accuracy 
test scalability number foreign keys 
databases created expected number foreign keys relation 
number relations expected number tuples relation 
running time approaches shown accuracy shown 
see crossmine scalable number foreign keys efficient foil tilde 
fortunately commercial databases number foreign keys relation pretty limited 
crossmine efficient number large 

real databases experiments conducted real databases compare efficiency accuracy crossmine foil runtime seconds accuracy crossmine foil tilde number foreign keys 
runtime 
number foreign keys crossmine foil tilde 
accuracy 
tilde 
database financial database pkdd cup 
schema shown 
modify original database shrinking rans relation extremely huge removing positive tuples loan relation numbers positive tuples negative tuples balanced 
final database contains relations tuples total 
loan relation contains positive tuples negative ones 
performances database shown table 
second database mutagenesis database frequently ilp benchmark 
contains relations tuples 
target relation contains tuples positive negative 
mutagenesis database pretty small sampling method influences crossmine 
performances shown table 
experiments see crossmine achieves accuracy efficiency 
efficient traditional ilp approaches especially databases complex schemas 
approach accuracy runtime crossmine sampling sec crossmine sampling sec foil sec tilde sec table 
performances financial database pkdd cup 
approach accuracy runtime crossmine sec foil sec tilde sec table 
performances mutagenesis database 

multi relational classification important issue data mining machine learning involving large real databases 
widely disciplines financial decision making medical research geographical applications 
traditional ilp approaches usually inefficient unscalable databases complex schemas evaluate huge number rules selecting predicates 
propose crossmine efficient approach multi relational classification 
uses tuple id propagation reduce computational cost dramatically crossmine highly scalable size database schemas 
crossmine uses negative training data sampling method reduce cost building rules small numbers positive examples crossmine scalable number tuples relation 
sampling method causes insignificant decrease accuracy 
process building rules crossmine performs broader search traditional ilp approaches considering predicates time 
enables crossmine identify predicates build accurate rules 
experiments show crossmine highly efficient comparing traditional ilp approaches achieves high accuracy 
features appropriate multi relational classification real world databases 
possible extensions crossmine 
currently crossmine uses sequential covering algorithm build rules 
efficiency improved decision tree algorithm uses idea divide conquer 
crossmine performs quite broad search build rules greedy algorithm searches tiny part search space 
interesting study application classification approaches svm neural networks multi relational environment achieve better accuracy 
blockeel de raedt ramon :10.1.1.135.8361
top induction logical decision trees 
proc 
int 
conf 
machine learning icml madison wi aug 
burges 
tutorial support vector machines pattern recognition 
data mining knowledge discovery 
clark boswell 
rule induction cn improvements 
proc 
european working session learning ewsl porto portugal mar 
dehaspe toivonen 
discovery relational association rules 
springer verlag 
garcia molina ullman widom 
database systems complete book 
prentice hall 
gehrke ramakrishnan ganti 
rainforest framework fast decision tree construction large datasets 
proc 
int 
conf 
large data bases vldb new york ny aug 
getoor friedman koller taskar 
learning probabilistic models relational structure 
proc 
int 
conf 
machine learning icml ma 
lavrac dzeroski 
inductive logic programming techniques applications 
ellis horwood 
mitchell 
machine learning 
mcgraw hill 
muggleton 
inductive logic programming 
academic press new york ny 
muggleton 
inverse entailment progol 
new generation computing special issue inductive logic programming 
muggleton feng 
efficient induction logic programs 
proc 
conf 
algorithmic learning theory tokyo japan 
popescul ungar lawrence pennock 
structural logistic regression combining relational statistical learning 
proc 
multi relational data mining workshop alberta canada 
quinlan 
programs machine learning 
morgan kaufmann 
quinlan cameron jones :10.1.1.34.5768
foil midterm report 
proc 
european conf 
machine learning vienna austria 
taskar segal koller 
probabilistic classification clustering relational data 
proc 
int 
joint conf 
artificial intelligence seattle wa 
yan han 
gspan graph substructure pattern mining 
proc 
int 
conf 
data mining icdm japan dec 
