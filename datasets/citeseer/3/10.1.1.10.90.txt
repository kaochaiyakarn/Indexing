workflow mining discovering process models event logs van der aalst weijters department technology management eindhoven university technology box nl mb eindhoven netherlands 
aalst tm tue nl centre information technology innovation queensland university technology box brisbane qld australia 

contemporary workflow management systems driven explicit process models completely specified workflow design required order enact workflow process 
creating workflow design complicated time consuming process typically discrepancies actual workflow processes processes perceived management 
developed techniques discovering workflow models 
starting point techniques called workflow log containing information workflow process executed 
new algorithm extract process model log represent terms petri net 
demonstrate possible discover arbitrary workflow processes 
explore class workflow processes discovered 
show algorithm successfully mine workflow represented called swf net 
key words workflow mining workflow management data mining petri nets 
decade workflow management concepts technology applied information systems 
workflow management systems staffware ibm mqseries cosa offer generic modeling enactment capabilities structured business processes 
graphical process definitions models describing life cycle typical case workflow instance isolation configure systems support business processes 
pure workflow management systems software systems adopted workflow technology 
consider example erp enterprise resource planning systems sap baan oracle crm customer relationship management software despite promise problems encountered applying workflow technology 
problems systems require workflow design designer construct detailed model routing 
modeling workflow far trivial requires deep knowledge workflow language workers management involved 
starting workflow design start information workflow processes place 
assume possible record events event refers task defined step workflow ii event refers case workflow instance iii events log events recorded tasks executed parallel 
system transactional systems erp crm workflow management systems offer information form 
note assume presence workflow management system 
possible collect workflow logs event data 
workflow logs construct process specification behavior registered 
term process mining method distilling structured process description set real executions 
illustrate principle process mining consider workflow log shown table 
log contains information cases workflow instances 
log shows cases tasks executed 
fifth case tasks executed tasks case starts execution ends execution task executed task executed 
cases task executed task information shown table assumptions completeness log assuming cases representative sufficient large subset possible behaviors observed deduce example process model shown 
model represented terms petri net 
petri net case identifier task identifier case task case task case task case task case task case task case task case task case task case task case task case task case task case task case task case task case task case task case task table 
workflow log 
starts task finishes task tasks represented 
executing choice executing parallel just executing task execute parallel non observable tasks split join added 
tasks added routing purposes workflow log 
note assume tasks parallel 
start events events tasks possible parallelism 
start events events indicate tasks take time 
presentation assume tasks atomic losing generality 
fact tool emit refine assume customizable transaction model tasks involving events start task withdraw task resume task complete task 
important realize approach events recorded time occurrence 
basic idea process mining referred workflow mining construct information split join fig 

process model corresponding workflow log 
table 
new algorithm prove correctness 
process mining useful reasons 
tool find people procedures 
consider example processes supported erp system sap procurement process 
system logs transactions enforce specific way working 
environment process mining gain insight actual process 
example flow patients hospital 
note environment activities logged information underlying process typically missing 
context important stress management information systems provide information indicators resource utilization flow times service levels underlying business processes causal relations ordering activities 
second process mining analysis comparing actual process predefined process 
note descriptive prescriptive process model 
model specifies people organizations assumed expected 
descriptive prescriptive process model discovered model discrepancies detected improve process 
consider example called models context sap 
models describe system 
process mining possible verify case 
fact process mining compare different departments organizations erp system 
additional benefit process mining information procedures differences actual processes predefined processes trigger business process reengineering bpr efforts configure process aware information systems workflow erp crm systems 
table contains minimal information assume 
workflow log contains timestamp event information extract additional causality information 
interested relation attributes case actual route taken bya particular case 
example handling traffic violations car relevant routing corresponding traffic violations 
people driving ferrari pay fines time 
simple example quite construct process model able regenerate workflow log 
larger workflow models difficult 
example model exhibits alternative parallel routing workflow log typically contain possible combinations 
consider tasks executed parallel 
total number interleavings 

realistic interleaving log 
certain paths process model mayhave low remain undetected 
logs containing rare events exceptions data complicate matters 
focus issues noise 
assume noise workflow log contains sufficient information 
ideal circumstances investigate possible rediscover workflow process class workflow models possible model logs 
simple 
consider example process model shown 
corresponding workflow log shown table show information split join 
needed process 
problems addressed 
purpose workflow nets wf nets 
wf nets class petri nets specifically tailored workflow processes 
shows example wf net 
wf net wf net wf generate workflow log wf net workflow log wf wf construct wf net applying workflow mining techniques wf fig 

rediscovery problem class wf nets guaranteed wf equivalent wf 
illustrate rediscovery problem 
suppose log process described bya wf net wf 
workflow log mining algorithm construct wf net wf 
interesting question wf wf 
explore class wf wf 
note explore theoretical limits process mining test algorithm 
results develop tools discover unknown processes tools mine real processes 
remainder organized follows 
introduce preliminaries petri nets wf nets 
section formalize problem addressed 
section discusses relation log places connecting transitions wf net 
results algorithm process mining 
algorithm supported bythe fact able rediscover large class workflow processes 
appendix gives involved proofs 
appendix presents mimo tool supporting algorithm 
mimo starting point process mining tools emit little thumb interface commercial systems tested real processes 
finishes overview related 
preliminaries section introduces techniques remainder 
introduce standard petri net notations define class wf nets 
petri nets variant classic petri net model transition nets 
elaborate petri nets reader referred 
definition 
nets place transition net simply net tuple 
finite set places 
finite set transitions 
set directed arcs called flow relation 
marked net pair net bag denoting marking net 
set marked nets denoted set places function natural numbers 
square brackets enumeration bag denotes bag 
sum bags difference presence element bag notion defined straightforward handle mixture sets bags 
net 
elements called nodes 
node input node node iff literature class petri nets introduced definition referred class unlabeled ordinary nets distinguish class petri nets allows arc place transition 
directed arc 
node output node iff superscript omitted clear context 
shows net consisting places transitions 
transition input place output place transition split input place output places transition join input places output place 
black dot input place represents token 
token denotes initial marking 
dynamic behavior marked net defined bya firing rule 
definition 
firing rule marked net 
transition enabled denoted iff firing rule smallest relation satisfying 
marking shown token source place transition enabled firing transition removes token input place puts token output place 
resulting marking transitions enabled split 
enabled fire 
split fires token consumed tokens produced 
definition 
reachable markings marked net marking reachable initial marking iff exists sequence enabled transitions firing leads set reachable markings denoted marked net shown reachable markings 
convenient know sequence transitions fired order reach marking 
uses notations sequences 
alphabet identifiers 
sequence length natural number alphabet function sequence length zero called written 
sake readability sequence positive length usually written function values example sequence written aab 
sequences alphabet written definition 
firing sequence marked net 
sequence called firing sequence iff natural number exist markings sn transitions tn tn si ti si si ti ti 
note implies firing sequence 
sequence said enabled marking denoted firing sequence results marking sn denoted sn 
definition 
connectedness connected iff nodes inverse reflexive transitive closure relation strongly connected iff nodes xf assume nets nodes 
net shown connected strongly connected directed path sink place source place definition 
boundedness safeness iff set reachable markings finite 
safe iff 
note safeness implies boundedness 
marked net shown safe bounded reachable states puts token place 
definition 
dead transitions liveness marked net 
transition dead reachable marking 
live iff marking reachable marking liveness implies absence dead transitions 
transitions marked net shown dead 
marked net live possible enable transition continuously 
workflow nets workflow systems offer standard building blocks split join split join 
model sequential conditional parallel iterative routing wfmc 
clearly petri net specify routing cases 
tasks modeled causal dependencies modeled arcs 
fact place corresponds condition pre post condition tasks 
split corresponds transition output places join corresponds transition input places 
splits joins correspond places multiple outgoing ingoing arcs 
close relation tasks transitions terms interchangeably 
petri net models control flow dimension workflow called workflow net wf net 
noted wf net specifies dynamic behavior single case isolation 
definition 
workflow nets net fresh identifier workflow net wf net iff 
object creation contains input place 
object completion contains output place 
connectedness strongly connected net shown wf net 
note net short circuited net net transition connecting 
net meets syntactical requirements stated definition corresponding process may exhibit errors deadlocks tasks active livelocks garbage left process termination define correctness criterion 
definition 
sound wf net input place output place sound iff 
safeness safe 
proper completion implies 
option complete 
absence dead tasks contains dead transitions 
set sound wf nets denoted wf net shown sound 
soundness verified standard petri net analysis techniques 
fact soundness corresponds liveness safeness corresponding net :10.1.1.30.3125
algorithms tools applied 
example tool tailored analysis wf nets woflan 
rediscovery problem introducing preliminaries return topic workflow mining 
goal workflow mining find workflow model wf net basis workflow log 
table shows example workflow log 
note ordering events case relevant ordering events cases importance 
define workflow log follows 
definition 
workflow trace workflow log set tasks 
workflow trace log 
workflow trace case table abcd 
workflow log corresponding table abcd aed 
cases 
identity attributes case relevant workflow mining 
theoretical results 
similar reasons workflow traces 
table workflow trace abcd appears twice case case workflow trace appears twice case case workflow trace aed case appears 
frequencies registered workflow log abcd aed 
note dealing noise frequencies utmost importance 
deal issues noise 
abstraction 
readers interested deal noise related issues refer find workflow model basis workflow log log analyzed causal dependencies task followed task causal relation tasks 
analyze relations introduce notations 
definition 
log ordering relations workflow log 
iff trace tn ti ti iff iff iff consider workflow log abcd aed log shown table 
relation describes tasks appeared sequence 
clearly relation computed direct causal relation derived workflow log ande note relation suggests potential parallelism 
log tasks parallel tasks follow order possible interleavings parallel 
relation gives pairs transitions follow directly 
means direct causal relations parallelism 
property 
workflow log relations ware partition verified 
note 
inverse relation 
confusion possible subscript omitted 
logs sequences introduce additional notations 
definition 
set sequence length defined follows 
iff 
ifn 
ifn 
reason workflow mining algorithm need assumptions completeness log 
complex process handful traces suffice discover exact behavior process 
relations crucial information mining algorithm 
relations derived assume log complete respect relation 
definition 
complete workflow log bea sound wf net workflow log iff firing sequence starting state 
complete workflow log iff log 
workflow log sound wf net behaviors exhibited bythe corresponding process 
workflow log complete tasks fact trace log 
note transitions connect input place wf net output place invisible second requirement added 
transitions requirement dropped illustrated bythe property 
property 
sound wf net 
complete workflow log 
proof 
consider transition sound firing sequence containing ift sequence length andt appear sequence containing ift sequence length followed bya transition appears definition completeness definition 
note unrealistic assume possible firing sequences log 
number possible sequences infinite case loops 
second parallel processes typically exponential number states number possible firing sequences may enormous 
parallelism loops just number possible sequences need weaker notion completeness 
parallelism loops just number cases required little 
course large choices observed just cases indicates requirement demanding observing possible sequences 
holds processes loops parallelism 
process sequential fragments exhibit parallelism number cases needed observe possible combinations exponential number fragments 
notion completeness case 
consider weaker notions completeness shown remainder notion completeness definition situations weak detect certain advanced routing patterns 
formulate introduced section assuming complete workflow log described definition 
formulating problem define means rediscovered 
definition 
ability rediscover bea sound wf net andlet mining algorithm maps workflow logs sound wf nets workflow log mining algorithm returns modulo renaming places able rediscover note mining algorithm able find names places 
ignore place names able rediscover iff modulo renaming places 
goal twofold 
looking mining algorithm able rediscover sound wf nets complete workflow log corresponding workflow process model derived 
second algorithm want indicate class workflow nets rediscovered 
clearly class large possible 
note mining algorithm able rediscover sound wf nets 
example add place connecting transitions mining algorithm able detect place implicit addition place change behavior net visible log 
conclude summarize rediscovery problem algorithm able rediscover large class sound wf nets basis complete workflow logs problem illustrated 
workflow mining section tackled 
mining algorithm able rediscover large class sound wf nets investigate relation causal relations detected log presence places connecting transitions 
show causal relations presence places 
explore class nets reverse holds 
observations mining algorithm 
causal relations imply connecting places causal relation transitions workflow log place connecting transitions 
theorem 
sound wf net complete workflow log implies 
proof 
assume 
show leads contradiction prove theorem 
firing sequence tn ti ti lets state just firing ti 
lets marking firing state 
note enabled enabled firing produce tokens input places 
enabled aand enabled consumes token input place return 
place andp 


net safe contains token marking token consumed ti returned 
enabled firing ti 
firing sequence starting 
wf net parallel see 
abcd complete log 
place place corresponds letn 
wf net choice seen 
abd acd complete log 
place similarly place places correspond 
example correspond different places second example causal relations correspond single place 
connecting places imply causal relations subsection investigate places detected log 
clearly places detected 
example places implicit means affect behavior process 
places remain undetected 
limit investigation wf nets implicit places 
definition 
implicit place net initial marking called implicit iff reachable markings transitions contains implicit places 
indicated adding place connecting transition yields implicit place 
mining algorithm able detect addition place change behavior net visible log 
fig 

constructs allowed swf nets 
structure wf net behavior 
rule constructs shown 
left construct illustrates constraint choice synchronization meet 
transitions share input place fight token require synchronization 
means choices places multiple output transitions mixed synchronizations 
right hand construct illustrates constraint synchronization preceding transitions fired allowed synchronizations directly preceded join 
wf nets requirements named structured workflow nets 
definition 
swf net wf net structured workflow net iff 
implies 
implies 
implicit places 
sight requirements definition quite restrictive 
practical point view case 
swf nets allow routing constructs encountered practice sequential parallel conditional iterative routing possible basic workflow building blocks split split join supported 
second wf nets swf nets typically difficult understand avoided possible 
third management systems workflow processes correspond swf nets 
observation explained bythe fact workflow management systems language separate building blocks splits joins 
pragmatic argument 
drop requirements stated definition relation contain information successfully mine processes resulting class 
reader familiar petri nets observe swf nets belong class free choice nets 
allows efficient analysis techniques advanced theoretical results 
example results possible decide soundness polynomial time 
swf nets interesting property 
property 
swf net 
ifp 
definition swf nets states transitions connected places 
structure swf net behavior vice versa 
need able rediscover wf net log 
causal relations presence places 
prove reverse class 
focus relation presence places theorem 
sound swf net complete workflow log implies proof 
see appendix 
fig 

sound swf nets 
unfortunately imply illustrate consider 
nets tasks connected iff causal relation 
hold 
inn andb place connecting places connecting vice versa examples indicate loops length see length see harmful 
fortunately loops length longer problem illustrated theorem 
theorem 
sound swf net complete workflow log implies proof 
see appendix 
acyclic nets loops length length 
derive property 
property 
acyclic sound swf net complete workflow log iff results far focus correspondence connecting places causal relations 
causality just log ordering relations defined definition 
theorem explores relation sharing input output places theorem 
sound swf net complete workflow log 
thena 
thena wb 

anda wb thena 

anda 
proof 
see appendix 
relations 
derive sound swf nets short loops implies 
implies similarly implies results underpin mining algorithm subsection 
mining algorithm results previous subsections algorithm mining processes 
algorithm uses fact nets tasks connected iff detected log 
definition 
mining algorithm workflow log defined follows 

tw 
ti 

xw tw tw ba aa bb 
yw xw xw 
pw yw iw ow 
fw yw yw iw ti ow 
pw tw fw 
mining algorithm constructs net pw tw fw 
clearly set transitions tw derived log 
fact shown property traces length tw derived possible find initial transitions ti final transition construct connections transitions iw ow source place iw sink place ow places form added 
place subscript refers set input output transitions place added iff places need merged case splits joins splits joins 
purpose relations xw yw constructed 
xw causal relation member member members occur 
note ora thena 
relation yw derived xw largest elements respect set inclusion 
see section example 
fig 

algorithm unable rediscover 
defined definition turn rediscovery problem 
possible rediscover wf nets 
consider swf nets shown 
applied complete workflow log resulting net modulo renaming places 
similarly applied complete workflow log net modulo renaming places 
expected able rediscover cf 

arcs connecting place new places 
input output arc removed 
wf net connected rest net 
wf net connected rest net 
cases arcs missing resulting net 
illustrate mining algorithm unable deal short loops 
loops length longer problem 
example modulo renaming places 
theorem proves able rediscover class swf nets provided short loops 
theorem 
sound swf net complete workflow log ta modulo renaming places 
proof 
pw tw fw 
complete easy see tw remains prove corresponds place 
need prove pw pw pw pw ifp source place sink place see corresponding place 
transitions fire sequence 
construction definition involving iw ow ti yields source sink place identical input output transitions 

place pw follows definition flow pw relation fw definition 
prove pw place need show yw xw theorem implies ba theorem implies aa theorem implies bb 
prove yw need show possible 
suppose ba aa theorem implies property implies find contradiction 
suppose aa bb theorem property show leads contradiction 
yw pw pw pw pw need prove pw pw iw pw ow corresponds respectively 
direct consequence construction definition involving iw ow ti 
pw iw ow sets yw pw 
pw pw remains prove yw implies xw place connecting theorem 
theorem prove just place 
place 
clearly remains prove suppose 
select arbitrary theorem show theorem show holds xw possible yw maximal 
find contradiction 
find similar contradiction assume conclude fig 

process model corresponding workflow log shown table 
nets shown requirements stated theorem 
surprise able rediscover nets 
net shown swf net short loops 
net split join visible log 
assumption realistic transitions correspond real 
fact log shown table list occurrence events indicates assumption valid 
split join considered invisible 
apply log abcd aed result quite surprising 
resulting net shown 
illustrate algorithm show result step log abcd aed log shown table 
tw 
ti 

xw 
yw 
pw iw ow 
fw iw ow 
pw tw fw 
resulting net swf net sound wf net observable behavior identical net shown 
note wf net shown rediscovered swf net 
example shows limited swf nets 
wf nets possible guarantee rediscovered 
limitations algorithm demonstrated theorem algorithm able rediscover large class processes 
prove class processes maximal better algorithm able rediscover processes 
reflect requirements stated definition swf nets theorem short loops 
consider requirements stated definition 
illustrate requirements consider figures 
wf net shown sound requirement violated free choice 
mining algorithm complete workflow log obtain wf nets shown 
clearly rediscovered 
sound swf net behavior different workflow trace ace fig 

non free choice wf net rediscovered algorithm 
possible 
example motivates requirement definition 
second requirement motivated 
violates second requirement 
mining algorithm complete workflow log wf net shown 
rediscovered mining algorithm 
requirements stated definition necessary order prove class workflow processes rediscovered basis complete workflow log limited swf nets 
examples section show wf net derived 
note third requirement stated definition implicit places dropped allowing behaviorally equivalent wf nets 
cases resulting wf net results meaningful process represented different process represented cf 

similar captures behavior 
fig 

wf net rediscovered algorithm 
returns wf net behavioral equivalent 
fig 

wf nets behavioral equivalent identical respect 
requirement imposed absence short loops 
examples motivating requirement 
clear algorithm improved deal short loops 
unfortunately trivial may 
illustrate 
shows wf nets 
wf nets behaviors complete logs identical relations 
note wf nets swf nets non free choice construct involving essence problem short loop involving short loop algorithm create petri net unconnected rest net 
clearly improved complete logs relations hold andb relations suggest andd parallel 
log seen case followed despite information algorithm able distinguish identical respect 
gives example demonstrating dealing short loops far trivial 
swf nets behavioral equivalent algorithm able distinguish assuming notion completeness logging explicit start events 
problem similar examples implicit places 
swf nets examples implicit places just wf nets satisfying requirements stated definition 
despite problems illustrated possible solve problem notion completeness 
assume possible identify loops loops 
done patterns aa loop aba loop 
refine relation new relation splits existing transitions involved short loop transitions 
tasks involved loop mapped transitions start execute 
tasks involved loop loop mapped transitions start 
goal translation short loops longer additional information loops loops preserving original properties 
refined relation fig 

swf nets behavioral equivalent algorithm unable distinguish assuming notion completeness 
input algorithm 
approach able deal possible situations illustrated 
note algorithm able distinguish logs processes shown 
real problem 
formal terms replace requirement theorem bythe weaker requirement transitions having identical input output places 
detailed description preprocessing algorithm proof correctness scope 
explicit requirements stated definition theorem number implicit requirements 
indicated hidden tasks detected cf 
split join 
definition petri net assumes transition bears unique label 
labeled petri net 
choice realistic complicate matters enormously 
current definition wf net assumes task appears network 
assumption task refer multiple indistinguishable transitions label show problems hidden tasks duplicate tasks wf net transitions having label corresponding hidden transitions transition labeled relations explicit requirements stated definition theorem implicit requirements just mentioned cases non free choice wf net free choice hidden transitions 
findings indicate class swf nets close upper bound workflow processes mined notion completeness stated definition 
move swf nets resort heuristics strengthen notion completeness require observations 
conclude section consider algorithm 
event logs huge containing millions events 
fortunately algorithm driven 
time takes build relation linear size log 
remaining steps algorithm exponential number tasks 
note number tasks typically depend size log 
bottleneck large scale application 
related idea process mining new 
cook wolf investigated similar issues context software engineering processes 
methods process discovery neural networks purely algorithmic approach markovian approach 
authors consider promising approaches 
purely algorithmic approach builds finite state machine states fused futures terms possible behavior steps identical 
markovian approach uses mixture algorithmic statistical methods able deal noise 
note results limited sequential behavior 
related different domain markovian approach restricted sequential processes 
cook wolf extend concurrent processes 
specific metrics entropy event type counts periodicity causality metrics discover models event streams 
provide approach generate explicit process models 
recall final goal approach find explicit representations broad range process models want able generate concrete petri net set events 
cook wolf provide measure process model actual behavior registered event data 
idea applying process mining context workflow management introduced 
workflow graphs inspired products ibm mqseries workflow known flowmark inconcert 
problems defined 
problem find workflow graph generating events appearing workflow log 
second problem find definitions edge conditions 
concrete algorithm tackling problem 
approach quite different approaches nature workflow graphs need nature joins splits 
shown workflow graphs true false tokens allow cyclic graphs 
partially deals iteration occurrences task folding graph 
resulting conformal graph complete model 
tool algorithms 
developed mining tool suitable discovering workflow processes 
requires splits joins balanced 
herbst karagiannis address issue process mining context workflow management inductive approach 
limited sequential models 
approach described allows concurrency 
uses stochastic task graphs intermediate representation generates workflow model described adonis modeling language 
induction step task nodes merged split order discover underlying process 
notable difference approaches task appear multiple times workflow model approach allows duplicate tasks 
graph generation technique similar approach 
nature splits joins discovered transformation step stochastic task graph transformed adonis workflow model block structured splits joins 
contrast pre vious papers characterized bythe focus workflow processes concurrent behavior adding ad hoc mechanisms capture parallelism 
heuristic approach simple metrics construct called dependency frequency tables dependency frequency graphs 
variant technique examples health care domain 
heuristics focus issues noise 
approach described differs approaches sense algorithm proven certain subclasses possible find right workflow model 
emit tool uses extended version algorithm incorporate timing information 
note detailed description algorithm proof correctness 
process mining seen tool context business process intelligence bpi 
bpi toolset top hp process manager described 
bpi tools set includes called bpi process mining engine 
engine provide discussed 
uses generic mining tools sas enterprise miner generation decision trees relating attributes cases information execution paths duration 
order workflow mining convenient called process data warehouse store audit trails 
data warehouse simplifies speeds queries needed derive causal relations 
design warehouse related issues discussed context workflow logs 
describes pisa tool extract performance metrics workflow logs 
similar diagnostics provided bythe aris process performance manager ppm 
tool customized version ppm staffware process monitor spm tailored mining staffware logs 
note tools extracting process model 
main focus clustering performance analysis causal relations 
theoretical point view discussed related discussed 
papers limits inductive inference explored 
example shown computational problem finding minimum finite state acceptor compatible data np hard 
generic concepts discussed papers translated domain process mining 
possible interpret problem described inductive inference problem specified terms rules hypothesis space examples criteria successful inference 
comparison literature domain raises interesting questions process mining deal negative examples suppose log log traces possible added bya domain expert 
despite described differences mining net level sequential lower level representations markov chains finite state machines regular expressions 
additional related seminal regions 
investigates transition systems represented compact petri nets called synthesis problem 
setting different notion completeness weaker knowing transition system related problems duplicate transitions addressed workflow 
problem formulated follows find mining algorithm able rediscover large class sound wf nets basis complete workflow logs algorithm able rediscover large relevant class workflow processes swf nets 
examples showed algorithm provides interesting analysis results workflow processes outside class 
point time improving mining algorithm able rediscover larger class wf nets 
tackled problem short loops focusing hidden tasks duplicate tasks advanced routing constructs 
observation class swf nets close upper limit assuming notion completeness new results provide heuristics require stronger notions completeness observations 
important see results context larger effort 
goal 
goal able analyze log underlying process presence noise 
theoretical results provide insights consistent empirical results earlier 
quite interesting see challenges encountered practice match challenges encountered theory 
example fact workflow process exhibiting non free choice behavior violating requirement definition difficult mine observed practice 
consider stepping stone robust process mining techniques 
applied workflow mining techniques real applications 
application health care flow multi disciplinary patients analyzed 
analyzed workflow logs visits different specialists patients peripheral arterial vascular diseases elizabeth hospital tilburg academic hospital maastricht 
patients peripheral arterial vascular diseases typical example multi disciplinary patients 
showing process mining difficult spaghetti nature process 
focusing specific tasks abstracting infrequent tasks able processes 
second application concerns processing fines bythe bureau dutch judicial collection 
process information cases 
process comprises tasks validated bythe 
positive result shows process mining algorithm tools emit little thumb feasible structured processes 
findings encouraging show potential algorithm 
authors ana alves de medeiros eric verbeek proof reading earlier versions van efforts developing emit solving problem short loops 

van der aalst 
verification workflow nets 
az ma balbo editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

van der aalst 
application petri nets workflow management 
journal circuits systems computers 

van der aalst de van hee van der 
executable specification tool hierarchical colored petri nets 
nielsen simpson editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

van der aalst desel oberweis editors 
business process management models techniques empirical studies volume lecture notes computer science 
springer verlag berlin 

van der aalst van 
discovering workflow performance models timed logs 
han tai editors international conference engineering deployment cooperative information systems volume lecture notes computer science pages 
springer verlag berlin 

van der aalst van hee 
workflow management models methods systems 
mit press cambridge ma 

agrawal gunopulos leymann 
mining process models workflow logs 
sixth international conference extending database technology pages 

angluin smith 
inductive inference theory methods 
computing surveys 

cook wolf 
discovering models software processes event data 
acm transactions software engineering methodology 

cook wolf 
event detection concurrency 
proceedings sixth international symposium foundations software engineering fse pages 

cook wolf 
software process validation quantitatively measuring correspondence process model 
acm transactions software engineering methodology 

desel esparza 
free choice petri nets volume tracts theoretical computer science 
cambridge university press cambridge uk 

eder wolfgang gruber 
data warehouse workflow logs 
han tai editors international conference engineering deployment cooperative information systems volume lecture notes computer science pages 
springer verlag berlin 

ehrenfeucht rozenberg 
partial set structures part part 
acta informatica 

fischer editor 
workflow handbook workflow management coalition 
strategies lighthouse point florida 

gold 
language limit 
information control 

gold 
complexity automaton identification data 
information control 

casati dayal shan 
improving business process quality exception understanding prediction prevention 
apers atzeni ceri paraboschi ramamohanarao snodgrass editors proceedings th international conference large data bases vldb pages 
morgan kaufmann 

herbst 
machine learning approach workflow management 
proceedings th european conference machine learning volume lecture notes computer science pages 
springer verlag berlin 

herbst 
dealing concurrency workflow induction 
zobel editors european concurrent engineering conference 
scs europe 

herbst 
ein ansatz zur und adaption von workflow modellen 
phd thesis universit ulm november 

herbst karagiannis 
integrating machine learning workflow management support acquisition adaptation workflow models 
proceedings ninth international workshop database expert systems applications pages 
ieee 

herbst karagiannis 
inductive approach acquisition adaptation workflow models 
ibrahim editors proceedings ijcai workshop intelligent workflow process management new frontier ai business pages stockholm sweden august 

herbst karagiannis 
integrating machine learning workflow management support acquisition adaptation workflow models 
international journal intelligent systems accounting finance management 

ids scheer 
aris process performance manager aris ppm 
www com 

jablonski bussler 
workflow management modeling concepts architecture implementation 
international thomson computer press london uk 

kiepuszewski 
expressiveness suitability languages control flow modelling workflows 
phd thesis queensland university technology brisbane australia 
available www tm tue nl research patterns 

leymann roller 
production workflow concepts techniques 
prentice hall ptr upper saddle river new jersey usa 

mannila 
decomposing event sequences independent components 
kumar grossman editors proceedings siam conference data mining pages 
siam 

mannila toivonen verkamo 
discovery frequent episodes event sequences 
data mining knowledge discovery 

van der aalst weijters van den bosch daelemans 
automated discovery workflow models hospital data 
kr se schreiber andm editors proceedings th belgium netherlands conference artificial intelligence pages 

weijters van der aalst van den bosch 
process mining discovering direct successors process logs 
proceedings th international conference discovery science discovery science volume lecture notes artificial intelligence pages 
springer verlag berlin 

leymann 
data mining von workflow zur von 
proceedings ro technik und wissenschaft pages 
informatik springer berlin germany 

zur hlen 
process driven management information systems combining data warehouses workflow technology 
editor proceedings international conference electronic commerce research pages 
ieee computer society press los alamitos california 

zur hlen 
workflow process controlling measure control 
fischer editor workflow handbook workflow management coalition pages 
strategies lighthouse point florida 

zur hlen 
workflow process monitoring controlling technical organizational issues 
sprague editor proceedings rd hawaii international conference system science hicss pages 
ieee computer society press los alamitos california 

murata 
petri nets properties analysis applications 
proceedings ieee april 

pitt 
inductive inference dfas computational complexity 
jantke editor proceedings international workshop analogical inductive inference aii volume lecture notes computer science pages 
springer verlag berlin 

reisig rozenberg editors 
lectures petri nets basic models volume lecture notes computer science 
springer verlag berlin 

casati shan dayal 
business process cockpit 
proceedings th international conference large data bases vldb pages 
morgan kaufmann 


process mining 
www de 


generic linear business process modeling 
liddle mayr thalheim editors proceedings er workshop conceptual approaches business world wide web conceptual modeling volume lecture notes computer science pages 
springer verlag berlin 


process mining gesch 
proceedings gesch 


process mining ein ansatz zur von 
proceedings 



process miner tool mining process schemes eventbased data 
flesca editors proceedings th european conference artificial intelligence jelia volume lecture notes computer science pages 
springer verlag berlin 

staffware 
staffware process monitor spm 
www staffware com 

verbeek basten van der aalst 
diagnosing workflow processes woflan 
computer journal 

weijters van der aalst 
process mining discovering workflow models event data 
kr se schreiber van someren editors proceedings th belgium netherlands conference artificial intelligence pages 

weijters van der aalst 
rediscovering workflow models event data 
de pauw editors proceedings th dutch belgian conference machine learning pages 

weijters van der aalst 
workflow mining discovering workflow models event data 
editors proceedings ecai workshop knowledge discovery spatial data pages 
proofs theorems section theorem 
sound swf net complete workflow log implies proof 
assume considering cases 

consider firing sequence transition firing sequence exists sound 
firing sequence marks ifp marked enabled swf net implies transitions consuming tokens 
ii bis transition ifp input place followed ifb multiple input places fact swf net implies 
producing tokens implicit marking blocks sound tokens input places removed firing sequence leading theorem 
sound swf net complete workflow log implies proof 
assume 
prove show follows theorem 
remains prove prove possible firing sequence tn tn tn sn sn tn sn 
note sn ba sn 
state sn marked 
enabled sn enabled firing 
lets marking firing sn sn 
produces token token place contains tokens 
possible sound wf net safe 
contradiction 
case firing disables possible firing sequence 
theorem 
sound swf net complete workflow log 
thena wb 

thena wb 

anda wb thena 

anda 
proof 
prove items separately 

common output place 
vice versa subsequent transitions produce token transitions consume tokens 
contains tokens firing possible safe 
implies 
similar arguments situation 
assume anda wb 
theorem implies places assume 
implies 
demonstrate assumption leads contradiction 
firing sequence number times 
fact fire alternatingly 
firing sequence fires firing byt 
possible directly followed directed path lab directed path lab delayed enabled firing sequence directly followed possible 
lab set paths lab marked places contains token lab unmarked places contains token 
followed firing sequence fires firing byt 
transitions removing tokens lab transitions conflict transitions preserving tokens lab 
free choice conflicts controlled 
choices controlled depending fire 
find contradiction 

similar arguments situation tool support algorithm implemented tool 
executable specification tool supports high level petri nets build toolbox named mimo mining module 
mimo consists parts workflow log generator workflow log analyzer 
workflow log generator generates workflow traces basis process model 
possible build graphical model workflow process terms hierarchical wf net 
mimo toolbox workflow log generated automatically 
generation process controlled started stopped bythe designer 
workflow log generator possible upload workflow traces file 
workflow log analyzer interesting part mimo toolbox 
analyzer straightforward implementation mining algorithm previous section 
part mimo toolbox petri net basis workflow log 
possible generate petri net user inspect anytime 
fig 

screenshot module mimo mining workflow process 
shows screenshot module mimo 
screenshot shows architecture upper left window workflow log generator upper right window workflow log analyzer bottom window 
examples analyzed mimo toolbox 
mimo starting point development additional process mining tools emit little thumb 
tools extended versions algorithm interface commercial systems tested real cases 
emit deals short loops able rediscover net construct shown implements preprocessing algorithm discussed section 
emit takes timestamps account generate performance information 
little thumb extends algorithm features able deal noise 
preprocessing massage relation 
detailed discussion emit little thumb scope 
interested reader refereed 
describing tools mimo emit little thumb interesting discuss performance tools algorithm 
event logs huge containing millions events 
fortunately algorithm driven 
time takes build relation linear size log 
large logs construct 
preprocessing step build sets tw ti effort 
preprocessing step tw ti contain information needed 
remaining steps algorithm exponential number tasks 
note number tasks typically depend size log 
performance issue logs containing millions events processed seconds 

