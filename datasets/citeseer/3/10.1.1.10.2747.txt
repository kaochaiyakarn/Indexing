higher order symbolic computation kluwer academic publishers 
manufactured netherlands 
partial evaluation computation process approach compiler compiler futamura central research laboratory hitachi tokyo japan 
reports relationship formal description semantics interpreter programming language actual compiler 
describes method automatically generate actual compiler formal description sense partial evaluation computation process 
compiler compiler inspired method differs conventional ones method describe evaluation procedure interpreter defining semantics programming language conventional describes translation process 
keywords partial evaluation program transformation compiler interpreter futamura projections 
known methods formally describe semantics meaning programming languages 
describe procedure language defined translated language semantics known description translator 
describe procedure evaluating results statement belonging language defined source program description interpreter 
conventional compiler compiler description translator describe semantics programming language 
users conventional write translation program terms translator description language defining semantics programming language 
difficulty writing translator pointed feldman follows difficult concepts translator writing distinction actions done translate time done run time 
mastered difference taken basic step gaining understanding computer languages describing semantics programming language interpreter necessary set distinction actions 
describing interpreter easier describing translator 
description interpreter implicitly places report algol manuals programming languages 
interpreters complex languages algol pl described formally 
updated revised version partial evaluation computation process approach compiler compiler futamura originally published systems computers controls volume number pages 
reprinted permission john wiley sons futamura 
structure compiler compiler 
large bold line block generated compiler 
object language compiler semantic metalanguage interpreter described 
object program translated machine codes 
reasons described section called interpreter efficient called compiler language processing 
describes algorithm automatically transform interpreter compiler application compiler compiler 
algorithm sort partial evaluation procedure see 
partial evaluation computation process means new concept 
programming languages pop implies somewhat similar concept called partial application author belief instance concept applied compiler compiler 
kind partial evaluation algorithm applicable compiler compiler 
purpose probe properties algorithm 

partial evaluation transformation called partial evaluation computation process respect variables cm values computation process containing variables cm rn evaluate portions evaluated values assigned variables cm respectively constants contained 
portions evaluated values remaining variables left intact 
transformed computation process having variables 
computation process obtained evaluated values assigned variables rn respectively result equivalent result evaluation values variables partial evaluation cm rn respectively denote transformation equation call partial evaluation algorithm cm partial evaluation variables rn remaining variables respectively 
may refer usual evaluation total evaluation opposed partial evaluation 
example consider evaluation computation process function values evaluate value execute step additions performed 
representing times elapsed addition multiplication respectively computation requires partial evaluation respect elapsed time partial evaluation partial evaluation involves evaluation 
execute step computation time required 
relation holds partial evaluation gives faster computation 

generation compiler interpreter interpreter programming language computation process containing variables 
sentence source program programming language substituted variables value 
variables contained interpreter int classified groups follows 
variables source program information needed syntax analysis semantic analysis values classified group variables classified group int assumed variables result partial evaluation interpreter respect value int 
assigned value relation derived eq 
int int futamura computations concerning performed partial evaluation time generated computation process int contain computation process syntax semantic analysis source program brings result int evaluated data int viewed computation process translated semantic metalanguage describing interpreter 
regarded object program corresponding partially evaluated respect int right side eq 
relation derived int int int considered compiler generates object program operating 
suppose properties 

partially evaluating computation process evaluates portions possible evaluated constants values partial evaluation variables 

evaluates portions possible evaluated generated computation process evaluated values remaining variables 
property reduces computation time process generated partial evaluation evaluated value remaining variables 
property reduces computation time partial evaluation 
partial evaluation algorithm possesses properties efficient execute source program compiled interpret directly source program contains iterations loops recursive calls iteratively executed input data 
simplest partial evaluation algorithm neglects property substitutes values partial evaluation variables 
algorithm considering property fitted partial evaluation interpreter described rest section 
ease explanation computation process represented graph 
nodes represent conditional branching points branches arrows represent subcomputation processes containing branching point flow control leaves represent termination points computation process 
nodes branches marked ni different subscripted different number respectively 
denote entry branch may entry branch assume selected partial evaluation time denote total number branches 
determines partial evaluation variables remaining variables stage partial evaluation depending criteria partial evaluation variables partial evaluation variables preceding stage variables formal parameters functions values depending constants partial evaluation variables preceding stage assigned 
ii variables partial evaluation variables remaining variables 
partial evaluation 
graph representation computation process denote nodes denote branches 
algorithm operations description algorithm integer variables list variable 
set set nil 
proceed operation 
allocate address space result partial evaluation bg stored memorize address 
result stored memory computer program address program 
result written graph address label attached entry point branch bg 
enters triplet bg sg ag list sg denotes set pairs partial evaluation variables values entry point th entry bg ag denotes address space result th partial evaluation bg generated 
proceed operation 
evaluate portions bg evaluated partial evaluation variables constants 
portions attach marks indicating evaluated 
bg denote new computation process generated bg operation note address bg ag bg left intact 
increment value proceed operation 
process bg arrowhead bg termination symbol partial evaluation 
process bg conditional branching point nk proceed 
nk evaluated values partial evaluation variables constants select branches value nk 
bp express branch selected 
set value proceed operation 
nk evaluated values remaining variables nk left intact 
bp bq denote branches nk 
set value proceed operation 
set value proceed operation 
futamura examine list see triplet second terms coincide bg respectively 
triplet transfer control generated computation process position indicated third term ax triplet generated computation process written draw arrow place labeled ax 
partial evaluation 
triplet return operation 
example 
suppose conditional branching points evaluated partial evaluation variables constants evaluation selects branch respectively 
transformed described 
example 
consider case evaluated partial evaluation variables constants value depends values remaining variables 
select branch select branch time select branch second time 
transformed described 
example 
example invariably selects terminate computation may generate infinite graph described 
selects simply partial evaluation variables cyclically take values computation terminated operation 
produces result described case values partial evaluation variables change 
partially evaluating interpreter respect source program contains loops recursive calls case occurs 
operations essentially important compiler compiler method described 
example 
assume depends remaining variables 
case repetitive partial evaluation process produce infinite graph generated 
totally evaluating process possible computed times selects computation terminate 
contain remaining variables contains infinite loop selects total evaluation trivial example 
example 
partial evaluation 
example 

example nonterminating case 
computation process total evaluation terminates partial evaluation terminate 
evaluation portions computation process evaluated total evaluation time example avoided procedure 
futamura 
example terminating case 

example 
portions computation process exception conditional branching points known evaluated total evaluation time portions conditional branching points values depend values remaining variables evaluated partial evaluation time values substituted remaining variables 
procedure necessary avoidance wasteful evaluations partial evaluation time guard printing erroneous statements troublesome portions interpreter evaluated partial evaluation time input output operations 
exception conditional branching points foregoing procedure 
order reduce number nodes branches contained resulting computation process partial evaluation evaluate conditional branching points partial evaluation time possible 
portions computation process follow conditional branching points containing remaining variables contain remaining variables recursively applied portions 
idea portions computation process containing remaining variables include recursive calls interpreter worthwhile risk partial evaluation portions 
functions procedures pseudo variables evaluated partial evaluation time marked handled exceptionally describe interpreter carefully avoid meaningless loop described example 
desired algorithm obtained modifying evaluates portions computation process marked unnecessary evaluated partial evaluation time 
partial evaluation algorithm described preceding discussion details thereof omitted quite different programming language describing computation process 
partial evaluation example 
partial evaluation lisp function append defined append null cons car append cdr append cons cons append null cons car cdr note function name equation generated process 
example 
partial evaluation algol program 
denote lists integers integer arrays 
contain length list respectively 
contain elements lists 
program concatenating lists described denotes subscript bound array 
goto step result partial evaluation program respect described 
goto 
discussion criterion possibility generating compiler interpreter nontrivial sufficient termination condition partial evaluation 
parts object program result partial evaluation interpreter respect source program efficient corresponding parts source program extent 
characteristics object program may optimized respect time space 
quantitatively extent describing interpreter easier describing translator 
find partial evaluation algorithm generating compiler efficient compiler generated translator 
futamura kind semantic metalanguage shall describe interpreter order achieve efficient partial evaluation interpreter 
author answer questions clearly 
considered investigations lines solve questions 
understanding structures interpreters programming languages 
development semantic metalanguage efficiently compiled easily describe syntax programming languages states machines stack table list transitions numerical computation list processing 
implementation complete partial evaluation algorithm specific semantic metalanguage 
theoretical study partial evaluation computer programs 
optimization semantic metalanguages 
author little progress item 
partial evaluator equivalent implemented lisp compiler program features generated interpreter program features partial evaluator 
compiler translates algol programs written program features equivalent system recursion equations 
example prog null return cons car cdr go translated prog assoc eval eval null eval prog assoc eval cons car prog assoc eval cdr function names generated compiler object program 
superfluous equations avoided optimization semantic metalanguage case lisp 
partial evaluation 
compiler generation method described conceptual stage 
remains determine method put practical near 
author hopes explains relationship formal methods programming language description actual compilers 
hoped contribution study compiler compiler 

burstall pop manual 
machine intelligence 

feldman formal semantics computer oriented languages 
technical report comput 
ctr carnegie institute technology 

lauer formal definition algol 
technical report tr ibm laboratory vienna 

advances computers vol 

academic press new york 

mccarthy edwards hart levin lisp programmer manual press 

naur 
ed 
revised report algorithmic language algol 
comm 
acm january 

description algol 
springer 

walk bekic gerhard oliva syntax interpretation pl technical report tr ibm laboratory vienna 
