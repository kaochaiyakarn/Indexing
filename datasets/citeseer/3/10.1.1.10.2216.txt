forgetting bad behavior memory management case navigation kira ronald arkin mobile robot laboratory college computing georgia institute technology atlanta georgia arkin cc gatech edu successful strategies forgetting cases case reasoning cbr system applied autonomous robot navigation 
extends previous involved cbr architecture indexes cases spatio temporal characteristics sensor data outputs selects parameters behaviors behavior robot architecture 
system removal cases applied new situation current case library encountered library full 
various strategies determining cases remove proposed including metrics frequently case novel spreading activation mechanism 
experimental results show mechanisms increase performance system significantly allow essentially forget old environments trained favor new environments currently encountering 
performance new system better purely reactive behavior system cbr module forget cases 
furthermore forgetting mechanisms useful major environmental shift training cases potentially harmful rarely 
relationship forgetting mechanism case library size discussed 
keywords mobile robot navigation case reasoning behavior robotics behavior robotics advocates tight coupling perception action provides performance dynamic unpredictable environments 
paradigm robot chooses subset behaviors behavioral assemblage execute predefined behavioral repertoire 
behavioral response solely current sensor data 
usually behaviors parameterized applied research supported darpa mobile autonomous robotic software program contract 
views contained document authors interpreted representing official policies expressed implied sponsoring organizations agencies companies government 
situations problem parameters optimized manually order achieve performance 
optimization requires knowledge robot behaviors preliminary experimentation 
furthermore constant parameters may optimal environments vary widely 
order address issues added case reasoning cbr module architecture 
case reasoning method previous problems situations addition solutions remembered 
agent encounters similar situation adapt previous solution current accommodating differences situations 
previous applied case reasoning order learn behavioral parameters situations 
case library created manually extended adding capability learning cases scratch 
enhanced system able outperform behavioral system learning parameters held constant environment 
problem arose case library filled relatively quickly 
library full best matching case current environment adapted drastically different 
adaptation changes input output values case adaptation done case tuned entirely different situation degraded performance result 
ideally robot adapt knowledge world changes creating new cases removing old ones 
system parameters case outputs optimized hill climbing type strategy 
success rates cases converge converge lowest possible success rate provide knowledge improve performance 
despite previously kept library took space better cases occupied 
cases potentially harmful similar cases current situation library selected 
decision case weighted success alternative worse cases different chosen adapted 
new reported extends system adding mechanism cases removed case library full new situation encountered 
general hypothesis forgetting mechanism cases deleted strategies proposed improve performance case base reasoning system 
methods necessarily restricted particular system potential mechanisms case removal discarded due peculiarities applied system mentioned 
example case features cases determined case reasoning systems 
forgetting done restricting size case library deleting cases case library full done periodically 
take approach investigation periodic forgetting done 
importance forgetting recognized researchers machine learning community specifically respect case reasoning 
markovitch showed domains machine learning acquired knowledge negative effects correct 
showed randomly forgetting knowledge improve performance improved performance equaled learning place 
striking true removal knowledge performed testing additional learning place 
words correct knowledge randomly removed testing results better performance 
furthermore heuristics determining delete achieve greater performance boost random deletion 
approach forgetting research occurred training phase different rates random deletion tested 
watanabe restricted size case library cbr planner manage power grids 
properties cases deciding remove including age case reliability similarity new situation 
forgetting cases advantageous system forgetting especially changing environment 
lieber studied criteria comparing case libraries implications forgetting determine effects removing case 
fig 

high level structure learning cbr module 
course deletion adverse effects competence range problems covered library done improperly 
smyth considered forgetting mechanism took account different categories cases pivotal cases important competence system deleting cases 
compared random utility deletion scheme degrade competence 
competence preservation issues studied 
case autonomous robot navigation problem space constant robot moves new environments competence preservation necessarily objective 
ii 
architecture previous case reasoning architecture robot navigation seen 
input entire system obtained environment form raw sensor data goal data 
feature identification module analyzes data outputs feature vector spatial temporal characteristics sensor data 
order calculate spatial feature vector space robot split uniform angular regions current implementation 
spatial characteristics involve region changes size largest obstacle cluster distance cluster change 
temporal feature vector involves normalized shortterm long term robot velocities 
feature vectors obtained best matching case multiple stages selection 
best spatially matching case current environment retrieved similarity weighted euclidean distance spatial feature vectors environment case 
set cases selected randomly probability case selected taken gaussian distribution proportional difference spatial similarity environment spatial similarity best spatially matching case environment 
new set cases similar method find cases temporally matching 
case selected new set randomly probability case selected proportional weighted sum case spatial similarity temporal similarity case success 
case success measured terms relative motion goal interwoven delayed reward mechanism 
refer details 
single case chosen decision tree determining case replace case currently 
decision long current case active spatial similarities short term relative motion long term relative motion full descriptions appear 
decided new case decision new case created temporal spatial similarities success selected case 
forgetting added previous system new cases created library full 
new system decided new case created library full forgetting applied 
candidate remove new case created 
candidate removed new case created place 
adaptation step output parameters cases adapted method similar hill climbing 
case improves due previous adaptations case adapted similar direction 
adaptation direction changed 
second adaptation step output parameters altered short term long term relative velocities robot 
completed case applied changing parameters current behavioral assemblage ones specified new case 
complete system integrated system implements autonomous robot architecture aura 
cbr module integrated goto behavioral assemblage depicted 
module input sensor goal data output behavioral parameters 
changeable parameters assemblage include noise add navigation sphere influence obstacles 
iii 
forgetting strategies forgetting mechanism implemented resides new case creation needed step fig 

interaction behavioral control module running goto behavioral assemblage cbr unit 

various strategies selecting case forgotten library full decision create new case 
strategies forgetting employed 
interesting idea ruled clustering algorithms compact existing set cases representative cases 
method applicable due small size case library 
strategies chosen described 
random forgetting simplest forgetting strategy pick random case remove 
surprisingly improve performance domains 
anticipated improve performance due factors specific domain 
case library relatively small cases improved experience chances removing successful cases high 
usually redundant successful cases library 
blindly removing cases clearly result cases trained especially rich environment robot encounters new situations 
strategy baseline strategies compared 
metrics removal heuristics metrics estimate cases deleted 
metrics include performance recency relative frequency performance case success defined previous 
note success case bounded 
recency case time elapsed application case pseudocode weighted metrics forgetting new case created library full case deleted case remove case create new place remove add new case table pseudocode weighted metrics forgetting strategy 
relative frequency case number time steps case applied denominator summation time steps current cases case library applied note may different number time steps system running cases may removed 
division serves normalize bound 
metrics higher numbers indicate better cases deleted 
functional combination metrics weighted sum determine case replace new situation dissimilar case appears case library full 
problem determining function relative weights metrics 
method measure performance gains metrics independently data suggest weights 
clearly complex interaction strategies relatively reasonable objective approximation 
table shows process worst case selected deletion 
activation forgetting final strategy evaluated spreading activation 
case activation level associated case activated certain events 
case created activated constant subsequently case selected activated 
activation level proportional similarity current environment success case changed activated amount proportional change negative activation level cases decreases time passes strategy accounts metrics previously described strategy 
instance activating case accounts recency success accounted change activation corresponding change success 
differences 
difference history automatically maintained previous activations case remain time steps long depends constants decay rate 
metrics values metrics current time step 
second difference lies spreading activation 
case activated cases similar terms input space activated decayed amount 
amount proportional similarity initially activated case 
computed follows suppose case just activated amount justification usually environments tend change slowly 
cases similar currently case kept event situation changes slightly 
deletion policy activation level cases case activated activation threshold selected deletion 
threshold prevents cases deleted cases happen highly activated 
pseudocode strategy similar table case case activation case 
iv 
experimental results modified system various forgetting strategies implemented tested simulation environment 
experiments case library size navigation conducted modified goto behavior containing obstacle avoidance vectors circulate obstacles 
usually leads better performance favor purely reactive system 
training done twice obtain different case libraries results averages libraries 
differences performance case fig 

homogeneous environment case library trained tested 
environment shown fifteen percent density 
densities training testing 
fig 

old heterogeneous environment different phases obstacle patterns changed 
libraries certain strategies mainly random recency metric strategies 
thresholds deletion chosen maximum values values optimized way 
metrics judge performance average distance traveled complete missions meters percentage missions completed 
environment simulated robot trained consisted homogeneous environment randomly placed obstacles particular density shown 
densities training percent clutter 
training versions different random seeds density maps training times 
system trained empty maps obstacles consistent previous 
complete training cycle repeated twice giving total number training missions 
resulting case libraries strategy fig 

graph shows distance traveled robots missions 
obstacle densities tested homogeneous maps 
notice performance frequency weighted metrics outperformed purely reactive system original cbr architecture higher densities 
fig 

distance traveled missions old heterogeneous environment 
performance frequency weighted metrics outperformed purely reactive version finished percent missions versions finished missions 
frozen 
learning new cases fine tuning existing cases occurred evaluation 
libraries tested homogeneous environments heterogeneous environments 
densities homogeneous environment tested maps random seeds times 
average distance traveled theses tests seen 
easier maps lower obstacle densities forgetting impact performance fact reduced small amount 
percent density cbr module forgetting purely reactive system scale performed poorly 
weighted metrics successful performance metric frequency metric performing 
interest performance metric fig 

new heterogeneous environment different environment different patterns obstacles including box canyon 
cases success rate zero frequency metric half versus average respectively performed 
strategies scale fact beaten unit forget 
expected random deletion strategy performed worst 
terms number missions completed systems cbr completed range percent missions random strategy completed half harder maps 
reactive version completed missions densities percent hardest environment obstacle density percent 
testing heterogeneous environments conducted different maps variations totaling runs 
environments shown referred old heterogeneous maps previous 
shows results testing 
weighted metrics performance metric frequency metric performed best strategies proposed slightly beat system forgetting 
completed missions system forgetting difference percent 
rest performed worse original 
case purely reactive version best successful forgetting strategies performed 
surprising reasons 
modules cbr completed missions reactive version completed percent 
furthermore training conducted type environment parameters reactive version manually optimized environment 
shows cases learned original homogeneous environment relatively general applicable situations 
fig 

distance traveled missions new heterogeneous environment 
fresh training version case library trained new heterogeneous environment starting empty library 
started training case library resulted previous training homogeneous environment 
notice performance successful forgetting strategies versions original cbr module degraded performance re trained new environment 
shows robot run performance metric strategy evaluation 
seen case library includes cases tight situations squeezing dense obstacle field required 
order verify robot forget cases longer relevant current situation case library training session training completely different environment referred new heterogeneous 
training conducted environments starting empty library order compare performance trained solely new environment versus training uses previously trained library 
maps similar training addition empty environments total missions 
seen environment completely different various patterns obstacles including box canyon 
training maps modified various ways testing conducted maps variations times yielding total testing runs 
seen training initially empty library cbr systems performed equally recency metric 
cbr systems outperformed reactive architecture significantly environment consisted box purely reactive architectures typically trouble addressing 
cbr modules learned useful cases box canyon situation able consistently escape 
training performed library homogeneous environment training advantages forgetting came apparent 
performance system forgetting decreased large amount successful forgetting strategies performance empty library 
slight degradation metrics especially regarding number missions completed system forgetting better 
furthermore forgetting strategies able retain successful cases original homogeneous environment useful new environment 
shows number cases library training success rate zero 
metrics shows forgetting strategies resulted converged cases previous architecture 
resulted libraries cases empty environment regions robot obstructed obstacles 
successful strategies cases robot surrounded particular pattern obstacles noise persistence set low value 
cases represent parameters robot maneuver tight spaces 
cases successful homogeneous environment useful new environment usually removed various metrics case case success decreased 
strategies fewer successful cases re training started 
occurred forgetting strategies ended total successful cases seen graph 
instances unsuccessful cases replaced new successful ones 
shows forgetting strategies selectively retain cases old environment useful discard learn new ones place unsuccessful ones 
seen robot performance metric strategy able learn cases getting box canyon relatively quickly 
different library sizes tried order ascertain efficacy forgetting library large 
sizes tried maximum number cases created architecture reached unlimited case library 
shows results experiments 
seen small sizes forgetting extremely advantageous produces significant performance increases 
size grows larger performance systems converged forgetting occurred due large case library size 
shows situations memory restricted environment complex forgetting applied 
interesting see periodically forgetting improve fig 

number cases success rates zero training 
performance metric uses exactly criteria removing cases surprising converged cases 
forgetting strategies resulted converged cases 
performance memory unlimited 
weighted metric mechanism tested homogeneous heterogeneous environments 
result performance increase environments tested robot trained environment moved drastically new environment 
forgetting shown beneficial 
results research clearly show performance frequency metrics result best performance terms distance traveled missions completed 
weighted metrics weights proportional performance individual metrics inherit advantages successful metrics 
spreading activation mechanism perform slightly worse architecture forgetting 
possible reasons 
originally anticipated metric strategies thresholds constant parameters set reasonable values system 
spreading activation strategy careful thought go selecting constant thresholds 
current system activation case approximately equal activation rates events occur 
case certain events case occur orders magnitude frequently 
means events weight parameters adjusted accordingly 
addressed 
recency metric perform fig 

performance forgetting weighted metrics non forgetting systems cbr case library size varied 
exhibited unstable behavior 
may result large amount thrashing due nature metric 
certain areas map cases frequently parts different set 
results system deleting re creating set cases 
certain threshold parameters adjusted account just metric 
expected random deletion performed poorly extremely unstable 
implications results 
forgetting cases poor terms metrics defined results significant performance increase 
type forgetting restricted situations environmental shift lifetime robot significant performance increases seen training environment 
usefulness mechanism increases environmental shift 
robot retain knowledge acquired experience useful current situation 
important result shown case reasoning system learn general cases useful different situations shown fact cases continued prove successful drastically different environment 
environments engineered happen occurred automatically 
important note metrics specific current navigational system 
example frequency metric performed quite applied cbr system 
furthermore cases optimal knowledge case success probably measured systems 
implication results training robot environment halting learning mechanisms robot continue training lifetime lifelong learning possible 
questions addressed performance robot training 
performance various ways addressed 
example robot certain thresholds measurements new situations reflected library encountered threshold halt training 
restart training detects entered drastically new environment 
done area periodic forgetting performance environmental shift 
acknowledgment authors michael initial metrics 
arkin spatio temporal case reasoning behavioral selection proc 
ieee international conference robotics automation pp 


arkin learning behavioral parameterization spatio temporal case reasoning proc 
ieee international conference robotics automation vol 
pp 

kolodner case reasoning morgan kaufmann publishers san mateo 
markovitch scott role forgetting learning machine learning proc 
fifth intl 
conf pp 

san mateo morgan kaufmann 

watanabe strategy forgetting cases restricting memory ieice transactions information systems pp 
october 
smyth keane remembering forget competence preserving case deletion policy case reasoning systems proc 
th international joint conference artificial intelligence pp 

montreal ijcai 
lieber keane criterion comparison case bases advances case reasoning second european workshop pp 

november 
mackenzie arkin cameron multiagent mission specification execution autonomous robots pp 

arkin balch aura principles practice review journal experimental theoretical artificial intelligence pp 

arkin behavior robotics mit press 
