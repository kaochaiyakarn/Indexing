feature cellular texturing architectural models justin julie dorsey steven gortler laboratory computer science division engineering applied sciences massachusetts institute technology harvard university cellular patterns tiling shingles materials 
patterns especially architectural settings influenced geometric features underlying shape 
bricks turn corners stones frame windows doorways patterns disconnected portions building align achieve particular aesthetic goal 
strategy feature cellular texturing resulting texture derived patterns cells geometry applied 
part strategy perform texturing operations features welldefined order simplifies interdependence cells adjacent patterns 
occupancy maps indicate regions feature occupied cells neighbors regions remain textured 
introduce notion pattern generator cellular texturing analogy shader local illumination show build complex textures 
results obtained implementation strategy discuss details example pattern generators 
cr categories computer graphics computational geometry object modeling geometric algorithms languages systems computer graphics dimensional graphics realism color shading shadowing texture 
additional keywords cellular texturing computer aided design procedural modeling texturing 
scene object modeling complicated structures requires substantial human time effort 
important automate process possible 
way achieve goal procedural methods help generate complex repetitive detail 
goal methods relieve designers tedious difficult manual modeling tasks give high level control 
models especially architectural settings clear distinction basic shape walls doors windows arches patterns bricks stones tiles shingles 
cases useful decompose design process components 
basic shape described traditional geometric modeling tools placement patterned arrangements geometric incorrect texturing cells 
cells encapsulated abstraction refer cellular texture 
placement pattern cells governed procedural cellular texture pattern generator 
complex operations generating cellular texture coalesced handful parameters drive process 
ideally parameters designer give power unmanageable 
major limitation previous approaches generation resulting patterns strictly having little surface pattern applied 
specifically problem mapping pattern surface commonly cast problem associating regions surface corresponding regions pattern 
regions aligned carefully seams may visible boundaries 
consequently user left difficult task trying generate set textures objectionable discontinuities 
see 
cellular texturing techniques need recognize cells dimensional objects size shape affect pattern create 
apparent corners multiple sides cell visible 
addition cellular patterns flush surface create cells extend outwards mortar joints 
shadows cast cells due geometry great effect appearance pattern 
framework geometry base mesh functions scaffolding cells 
base mesh cellular patterns separate allowing designer consider edit individually 
patterns flexible adapt changes model applied model entirely different designed 
design space explored changing original model adjusting parameters patterns computer creating result new combinations 
contributions main contribution strategy applying cellular textures base mesh 
treat dimensional problem considering geometry model cells create 
strategy show create patterns cells adapt features model aligning edges wrapping corners responding annotations supplied designer 
discuss geometric requirements input base mesh organization cellular patterns tree pattern generators application pattern generators base mesh 
avoid problems boundary adjacent patterns placing constrained cells starting corners texturing edges finishing faces 
describe details example pattern generators create specific patterns 
wide array literature subject 
discuss useful techniques creating pattern generators hope encouraging envision types patterns create 
simplicity require input models nice parameterizations defined structure 
claiming strategy tile inch cube foot stones texture sphere regular pattern square cells perform impossible nonsensical tasks 
easy create model pattern simply incompatible leave burden ensuring sensible combination human 
overview remainder organized follows 
discuss related pattern texture generation section 
section discuss input model base mesh cellular textures applied section describe generation cellular textures 
section show details example pattern generators results 
section conclude suggest areas research 
related algorithms creating cellular patterns 
described prototype computer drafting system common materials included number algorithms generating cellular patterns 
algorithms place cells require special treatment perimeter regions 
build idea extending cells geometry 
described algorithm automatically generating stone wall patterns 
generates displacement data create cells render patterns bump mapping 
techniques produce realistic patterns faces model consider shape cells affects pattern consider geometry model applied 
rendered model seams apparent textures face boundaries 
wong addressed problem creating patterns fill arbitrary shapes 
patterns adapt shape region filled techniques strictly technique 
fleischer particle systems simulate cells constrained lie surface governed set cell programs 
cells react properties model environmental factors 
technique suited generating cellular patterns biological nature authors warn cell programs difficult write effects modifications hard predict 
cell programs control local interactions cells practical achieving particular desired global structure 
solid texturing techniques elegantly solve problem texturing geometry seamlessly arbitrarily complex face boundaries 
introduced cellular texture basis function special case generates cells voronoi diagram set seed points remarkable results 
solid textures tile complex geometry seamlessly typically respond geometry 
resulting textured model appears carved solid block texture 
texture synthesis techniques heeger de bonet generate texture visually similar source image 
praun took different approach covering object overlapping source image relying viewer inability see seams textures 
praun adapt texture base object aligning textures vector field defined model 
general texture synthesis techniques responsive features underlying model 
methods natural materials patterns fail types structured cellular patterns addresses 
operate images texture synthesis techniques suitable generating patterns composed geometric entities 
different body related field parametric modeling 
models defined terms steps taken construction set geometric constraints 
details steps constraints edited reevaluated designer really generating parameterized family class objects 
cellular texturing form parametric modeling 
resulting cellular texture parametric model parameterized base mesh cellular patterns applied 
important contribution parametric modeling borrow idea features 
working just pure geometry features object annotated capture higher level meaning purpose model 
deal problem resolving conflicts procedurally generating geometry 
elements scene communicate respond working satisfy mutual constraints 
take different approach problem goals similar 
cook introduced idea shade trees building complex shaders smaller units 
idea defining cellular patterns tree simpler pattern generators 
base mesh section discuss base mesh geometric input system 
important aspects base mesh 
mesh stored level geometric hierarchy 
addresses dual role input model specify geometry surfaces cellular textures applied supply annotated features influence drive patterns 
second edges faces mesh parameterized providing pattern generators mapping parameter space world space projection world space parameter space 
third base mesh stores occupancy maps edges faces record portions features get covered cells placed model 
hierarchical representation model annotation features parameterization important parts cellular texturing strategy actual preparation input model focus 
create annotate parameterize input models examples combination automatic interactive tools 
anderson discuss algorithm automatically detecting architectural features 
geometry features context term geometry connotes things see 
low level interpretation geometry actual low level mesh geometry high level mesh features low level shape object defined child mesh consisting vertices polygon edges polygons high level features defined parent mesh consisting corners edges faces 
shape object defined model polygons 
expect form created cellular texture correspond shape 
high level interpretation identification geometric features model faces walls roofs edges boundaries faces corners intersections edges 
cellular texture defined terms applies cells types features 
capture additional information annotate features labels indicating features part windows doors arches structures 
labels stored strings attached features 
terms vertices polygon edges polygons refer elements low level mesh define shape object cells aligned 
terms corners edges faces refer elements high level mesh targets cellular texturing operations 
mesh representation provide access levels 
hierarchical version winged edge adjacency data structure complete mesh structures maintained levels 
elements high level parent structure correspond elements lowlevel child structure 
parent faces correspond collection connected child polygons parent edges correspond chain child polygon edges 
parent corners correspond single child vertex child vertices middle parent edges faces corresponding parent corner 
important note parent faces may concave may contain holes multiple edge loops 
example consider wall window middle 
envision segmenting model complex features span multiple geometric elements model 
stick corners edges faces show just 
experience quite natural decompose patterns parts corresponding corners edges faces 
parameterization require edges faces base mesh closed form parameterizations 
parameterizations support operations mapping points parameter space coordinate frame world space projecting points world space points parameter space 
pattern generators mapping place cells created parameter space model 
projection world space parameter space filling occupancy maps section cells adjacent features 
examples implemented parameterizations edges composed linear circular segments faces combinations flat cylindrical regions faces sectors disks 
corners parameterized 
shows examples geometry types parameterizations 
occupancy maps cells stored base mesh feature created 
cells generated adjacent features know space occupied 
information encapsulated occupancy map bit mask tells pattern generator parts feature parameter space occupied cells neighbors areas responsible filling 
occupancy maps kept edges faces 
corners need occupancy maps textured 
occupancy maps faces dimensional initialized fully occupied 
polygons low level mesh corresponding face rasterized face occupancy map areas set empty 
prevents pattern generator filling cells areas parameter space part face inside windows arches 
adjacent corners edges textured cells projected face rasterized map setting areas occupied 
see 
occupancy maps edges dimensional initialized empty 
geometry edge need projected occupancy map done face edges holes 
adjacent corners textured cells projected edge setting intervals occupied map 
space cells claim occupancy maps actual geometry 
patterns create cells fill regions completely shrink leave gaps adjacent cells mortar see 
space filling shapes cells claim occupancy maps actual shapes rendering 
implement occupancy maps edges array boolean values 
faces implement occupancy maps quad tree speed allow higher resolution 
required resolution depends size complexity cells 
single valued occupancy map avoid intersections cells curve edge surface face 
sufficient patterns including examples shown 
representations octrees layered depth images store volumetric information allow patterns cells fit overlapping fashion 
occupancy map face indicates areas occupied cells adjacent features 
pattern generator creates cells fill unoccupied region fitting cells available space clipping occupancy map 
pattern generators section presents details cellular texturing framework 
way shade trees define shaders smaller simpler reusable parts discuss building cellular textures smaller units term pattern generators 
check label arch window arch bricks check type corner edge face orientation 
vert 
small white blocks red bricks window bottom bricks small white blocks analyze window bottom bricks check label window arch arch stones check type corner edge face orientation 
vert 
orientation 
vert 
small brown blocks random small brown blocks brown window stone small brown blocks random random rgb blocks check type corner edge face red blocks green blocks blue blocks examples pattern generator trees 
tree pattern generators pattern generators implement basic building blocks patterns 
arranged tree collection pattern generators applies cellular texture base mesh operating feature time 
features mesh start root tree passed fully textured 
individual pattern generator place cells feature pass feature children processing 
pattern generators may pass features different children criteria label type corner edge face result geometric analysis 
example pattern generator look feature label pass window features subtree rest subtree 
subtree window features pattern generator pass vertical edges subtree horizontal edges 
pattern generators create cells general simple nodes create brick shaped cells specific nodes create stones arches particular style 
simple nodes typically reusable useful elements different patterns 
shows examples pattern generator trees 
simple rgb blocks tree visualizes cells placed different types features corners edges faces 
result applying pattern different base meshes seen second row 
bricks tree creates pattern bricks special treatment features labeled arches performing simple geometric analysis find bottom windows 
pattern seen third row 
random tree creates randomized stone pattern special treatment features labeled windows arches result applying pattern seen bottom row 
details individual pattern generators examples section 
ordering texturing operations key avoiding conflicts intersections placing cells adjacent features perform cellular texturing operations correct order 
consider placement cells edge stone building 
cells really part patterns wall 
cells placed walls working edge side may difficult impossible create final cells edge 
likewise cells placed multiple edges working corner may tricky place final cells corner 
constraints edges cells faces cells constraints corners cells edges cells 
suggests easier place cells edges faces corners edges 
terms corner edge face thought relationships slightly general usual geometric interpretations corner region interaction edges edge region interaction faces corners textured proceed edges worrying edges interact 
constrained cells part patterns multiple edges placed 
likewise edges textured proceed faces worrying faces interact 
difficult cells part patterns multiple faces placed edges 
means pattern generators patterns create partitioned parts cells go corners cells go edges cells go faces 
shows simple example placing blocks cube corners textured edges textured faces textured 
applying cells corners edges faces 
examples results tools experimenting writing pattern generators developed tools useful different patterns 
tool reused function impose grid structure face potentially stretching shrinking grid areas lines shape face 
sorted lists coordinates corner face solid lines 
divide interval segments close possible desired grid size dashed lines 
simple rgb blocks pattern generator simply uses grids face testing potential block occupancy map creates cells pass 
tools useful creating pattern generators functions clipping polygonal footprint cell occupancy map creating cell geometry intersection set planes shrinking cell full claimed volume create actual geometry 
patterns section describe individual pattern generators 
bricks create pattern bricks pattern generator overlays grid faces marks grid space unoccupied 
connects pairs blocks form bricks 
single bricks placed corners 
bricks alternating directions placed edges filling empty interval occupancy map 
fill faces options combining bricks see 
want minimize eliminate number half bricks 
fill area picking option creates number bricks yields better pattern 
directions edge bricks chosen poorly may possible create nice pattern faces 
flip directions edge bricks interactively storing extra bit corner edge purpose 
bad window bottom bricks pattern generator operates corners edges creating row header bricks bottom window 
corner creates simple block opposite direction adjacent concave edge 
edge creates simple blocks direction normal edge adjacent vertical face 
error construct tree passes faces pattern generator 
arch stones pattern generator creates multiple rows stones edges 
length extrusion row cells parameters 
demonstrated pattern cells necessarily touch feature created 
arch bricks create bricks edge arch pattern generator looks tangent vector edge 
vertical portions edge behaves identically bricks pattern generator placing bricks alternating directions 
direction deviates vertical bricks placed outer face determined choosing direction vector greater component 
random random pattern grid tool described small grid size dashed lines 
pattern places single stone corners 
edges creates stones alternating directions bricks random heights lengths 
tile faces creates small rectangle unoccupied space grid 
picks rectangles random attempts merge neighbors maintaining rectangular shape obeying maximum size parameters pattern generator 
process repeated rectangles merged solid lines 
geometric analysis build interesting patterns pattern generators decision feature pass children processing 
straightforward criteria type feature corner edge face label attached feature 
pattern generators decisions geometry model 
orientation pattern generator passes edge face horizontal vertical subtree 
edges passed vector largest component direction edge considered vertical 
faces passed normal vector largest component direction face considered horizontal 
note criteria may appropriate curved edges faces 
corners horizontal vertical 
passed subtree boolean parameter pattern generator 
analyze window feature labeled window pattern generator determines feature part top bottom 
corners outgoing edge direction edges neighboring face normal vector direction faces normal vector direction classified bottom sent subtree 
features top determined similarly 
features sides windows sent third subtree 
mortar cellular textures complete mortar joints cells 
create actual geometry fill space cells shrink base mesh renderings mortar see 
base mesh shrunken mesh cell claimed volume cell actual shape cell geometry mortar 
results shows ray traced images patterns applied different base meshes 
model column labels model second column annotated window labels curved edges third model labeled arch 
pattern generator trees bricks random patterns give special treatment windows arches 
base mesh features particular label corresponding portion tree may utilized 
base mesh column pattern generator tree row 
figures show different brick patterns applied model steps square columns 
intermediate results applying pattern seen creating cells corners edges decorative pattern faces columns remaining space faces 
brick patterns rely heavily geometric analysis place bricks properly 
corners classified valence number convex concave adjacent edges direction horizontal single concave convex edge 
cases choice directions bricks corners edges choices interactively 
pattern creates diagonal bricks top corners steps 
glance may bricks edges need interact violating assumptions section 
patterns fit nicely framework generating bricks cells corner see 
cement stones second pattern placed corners edges steps 
meshes cells created pattern generator marked polygons roughness parameters 
meshes decimated displaced turbulence function prior rendering 
decorative patterns columns example pattern generator placing cells feature passing feature tree processing 
shows decorative pattern rest face tiled 
size position pattern set carefully regular brick pattern nicely align 
modeled separately hand added scene cells generated 
summary described strategy feature cellular texturing applied architectural models 
algorithmically generate cellular textures result underlying model patterns cells 
elements resulting patterns full entities react features model 
demonstrate technique patterns 
just scratching surface opens interesting areas 
countless real world patterns implement explore framework 
believe higherlevel classification specification patterns great benefit 
concerned outward appearance cellular textures 
real buildings stone deep 
interesting direction take generate textures full internal structure 
create detailed geometry material mortar cells different joint cause different shadows cast affecting appearance texture 
framework applied general types models including non manifolds 
example may natural specify stone wall single polygon closed mesh 
general curves surfaces 
currently models patterns designed independently user responsible ensuring sensible combination 
area research build constraint solving layer top framework 
system help coordinate design geometry assignment pattern parameters 
acknowledgments barb cutler endless supply ideas encouragement constructive criticism 
stephen duck provided valuable information suggestions modeled 
supported nsf awards ccr ccr nsf cise research infrastructure award eia gift animation studios 
allen fundamentals building construction 
john wiley sons new york 
whitted managing geometric complexity enhanced procedural models 
proceedings siggraph pp 

anderson frankel marks beardsley hodgins leigh sullivan yedidia tangible interaction graphical interpretation new approach modeling 
proceedings siggraph pp 

polyhedron representation computer vision 
proc 
afips natl 
comput 
conf 
vol 
pp 

tiles 
clarkson potter new york 
ed 
brick terra architecture full color 
dover publications new york 
cook shade trees 
proceedings siggraph pp 

de bonet multiresolution sampling procedure analysis synthesis texture images 
proceedings siggraph pp 

dowsland dowsland packing problems 
european journal operational research 
fleischer barr cellular texture generation 
proceedings siggraph pp 

gr shephard tilings patterns 
freeman new york 
heeger bergen pyramid texture analysis synthesis 
proceedings siggraph pp 

hofmann joan parametric modeling 
published chapter handbook 
current text available author web page www cs purdue edu homes html 
method generating stone wall patterns 
proceedings siggraph pp 

perlin image synthesizer 
proceedings siggraph pp 

praun finkelstein hoppe textures 
proceedings siggraph pp 

shade gortler wei szeliski layered depth images 
proceedings siggraph pp 

weiler topological structures geometric modeling 
ph thesis rensselaer polytechnic institute aug 
wong zongker salesin computer generated 
proceedings siggraph pp 

cellular texturing basis function 
proceedings siggraph pp 

computer drafting stones wood plant ground materials 
proceedings siggraph pp 

