model delimited information release andrei sabelfeld andrew myers department computer science chalmers university technology gothenburg sweden andrei cs chalmers se department computer science cornell university ithaca ny usa cs cornell edu 
security typed languages lacks satisfactory account intentional information release 
context confidentiality typical security guarantee provided security type systems noninterference allows information flow secret inputs public outputs 
intuitively secure programs allow release declassification secret information password checking information purchase spreadsheet computation 
noninterference fails recognize programs secure 
respect security type systems enforcing noninterference impractical 
side spectrum type systems designed accommodate information leakage 
little guarantee leaked 
consequence type systems vulnerable laundering attacks exploit declassification mechanisms reveal secret data intended 
bridge gap introduces new security property delimited release guarantee declassification exploited construct laundering attacks 
addition security type system straightforwardly provably enforces delimited release 
keywords computer security confidentiality information flow noninterference security type systems security policies declassification 
long standing problem computer security verifiably protect confidentiality sensitive information practical computing systems 
vexing difficulties realistic computing systems release confidential information part intended function 
challenge differentiate proper improper release confidential information 
example possible learn small amount information user password attempting log attacker learns password guessed 
secure system distinguished insecure system directly reports entire password attacker 
proposes delimited release new definition security helps distinction 
partly done author cornell university 
proceedings international symposium software security tokyo japan november 
lncs 
springer verlag protect confidentiality computing system important control information flows sensitive information transmitted inappropriately system outputs 
way control flows associate security level information system prevent higher level confidential information affecting lower level confidential information 
embodying approach language setting system validated program security levels types program :10.1.1.34.3298:10.1.1.40.1122:10.1.1.101.441:10.1.1.2.1684:10.1.1.149.4907:10.1.1.149.7391
program written sort security typed language considered secure typed rules example assignments high level variables low level variables 
kind static checking tends restrictive preventing practical programming 
typically languages intended enforce version noninterference security property prevents low level information depending high level information 
practical programs password checker mentioned release information 
example aggregating data large database employee database compute confidential result average salary 
confidential information released part transaction agreed protocol information purchased 
programs violate noninterference rejected type systems current security typed languages 
assuming confidentiality data expressed security level additional mechanism needed order express programs intentional release information 
security typed languages added declassification mechanism coerces security level information downwards :10.1.1.2.1684
declassification serves escape hatch rigid restrictions security type systems intentionally violates noninterference 
question addressed satisfactorily earlier security guarantees offered presence declassification 
delimited release guarantee 
noninterference attractive property defines security terms program semantics terms non standard mechanisms 
controls behavior program extensional security property 
rest imperative language section formally define delimited release security section give security type system provably enforces delimited release section discuss password checking example section sketch related section conclude section 
security typed language illustrate security model consider simple sequential language consisting expressions commands 
language similar high low fig 

general security lattice lattice security typed imperative languages semantics largely standard cf 

language syntax defined grammar val op declassify skip val ranges values val false true 
ranges variables var op ranges arithmetic boolean operations expressions ranges security levels 
assume security levels data elements security lattice ordering specifies relationship different security levels 
information level visible level 
information level invisible level 
join operation useful example computing upper bound security level expression combines sub expressions different security levels 
example security lattice elements high low representing high low confidentiality levels respectively ordering low high 
general security lattice top element bottom element depicted lattice security environment var describes type program variable security level 
security lattice security environment constitute security policy specifies information flow variable variable allowed 
simplicity assume fixed upcoming formal definitions 
language expression standard declassify construct security level expression level require declassify expressions nested 
semantic level declassify equivalent regardless 
intention declassification controlling security level information affecting execution program 
semantics defined terms transitions configurations 
configuration consists memory finite mapping var val variables values command expression command resp 
expression refer command configuration resp 
expression configuration 
transition configuration configuration denoted transition configuration terminating configuration memory denoted usual reflexive transitive closure 
configuration terminates denoted simply unimportant 
assume operations expressions total expression configurations terminate denoted val 
delimiting model confidentiality usual way defining confidentiality noninterference security property stating inputs high confidentiality affect outputs lower confidentiality 
various definitions noninterference language security 
noninterference characterize security program designed release confidential information part proper functioning 
propose new confidentiality characterization delimits information release precludes laundering attacks 
noninterference noninterference defined follows programs written language section input memories indistinguishable attacker security level behavior program memories indistinguishable 
formally memories indistinguishable level assume fixed notation parameterized security environments 
behavior program configurations indistinguishable written 
behavior expression configurations indistinguishable written val val val 
ready formulate noninterference security condition 
definition noninterference command satisfies noninterference security levels 
noninterference useful dependency security specification restrictive programs declassification 
example suppose need intentionally release parity secret variable way information leaked 
program performing release declassify parity low par high low lattice sense program intuitively secure 
noninterference rejects program depend escape hatches delimited release example want express requirement explicitly declassified data information released 
specification security relative expressions appear declassify operators 
expressions viewed part security policy specifying escape hatches information release 
security policy explicit require escape hatch expressions declared separate interface 
unimportant technical development omit requirement 
new security specification delimits information release allowing release escape hatch expressions definition delimited release suppose command contains exactly declassify expressions declassify 
declassify en 
command secure security levels 
ei ei intuitively definition says information leak escape hatches 
en observable level ei ei leak allowed conditions imposed 
difference invisible escape hatches ei ei difference invisible entire execution way interpreting delimited release definition program secure long updates variables declassified occur way increase information visible attacker escape hatches 
variables declassification updated actual declassification delimited release reduces noninterference 
observation leads simple way automatically enforcing delimited release reported section 
instructive compare delimited release noninterference 
clearly noninterference stronger delimited release proposition program satisfies noninterference secure 
furthermore program declassify primitives security properties coincide 
proposition declassify primitives occur secure program satisfies noninterference 
examples security provided delimited release understood simple examples averaging salaries electronic wallet password checking 
example average salary 
suppose variables 
hn store salaries employees 
average salary computation intended intentionally release average information 
hn public variable avg avg declassify hn low avg assume lattice hi high avg low 
clearly program satisfy noninterference dependency 
hn avg 
nature information flow high low limited 
low level observer learns average secret inputs possible learn information 
example swapping values hi hj visible low level 
allowing limited flows program accepted secure delimited release definition 
hand consider laundering attack program avg leaks salary employee avg 
hi 
hn hi avg declassify hn low avg attack program satisfy delimited release 
see take variables different 
low hn hn expression configurations evaluate avg attack avg attack final value public variable avg respectively violates definition 
laundering attack rejected insecure 
example electronic wallet 
consider electronic shopping scenario 
suppose stores secret amount money customer electronic wallet stores public amount money spent current session stores cost item purchased 
code fragment checks amount money wallet sufficient transfers amount money customer wallet spent far variable declassify low skip wallet assume lattice high low 
program avg program fails satisfy noninterference satisfy delimited release 
attack abuses declassification primitive leaks secret variable bit bit assuming bit integer declassify low skip wallet attack low 
laundering attack effect magnified loop 
difficult see attack rejected delimited release model 
features extensions interesting feature delimited release forces programmer explicit information released 
security policy form expressions declassify simply part program text 
example consider program parity declassify low high low lattice security policy initial value information intended declassification 
low level observer learns parity initial value laundering attack rejected delimited release model 
produce semantically equivalent secure version program programmer may rewrite program declassify parity low secure program definition 
parity subject intentional information release evident security policy parity 
desire automate transformation leads extensions security ordering programs 
program secure program written sec security levels memories intuition leaks secret information security ordering 
straightforward see security ordering sec preorder reflexive transitive 
partial order formed equivalence classes sec programs satisfying noninterference belong top security class sense programs strictly secure 
decidable furthermore attack compromises integrity customer wallet variable 
orthogonal confidentiality issues dealt 
approximation security ordering driving security enhancing program transformation attractive direction 
delimited release model limitations describing security policies information release declassified expressions assumed released 
model permit expression security policy information released certain conditions 
example consider program leaks declassify low declassify low high low lattice program secure definition 
appear declassify definition means program leak values 
requirement variables released expressed definition 
delimited release enhanced disjunctive policies representing finer policies released delimited release integrated techniques controls information release robust declassification :10.1.1.14.1928
integration help specify decision released may may hands attacker 
combination delimited release robust declassification follows section 
security type system delimited release section presents type system statically enforces security 
typing rules displayed 
general form typing expression meaning expression type effect environment typing commands form pc meaning command typable effects environment program counter pc 
program counters range security levels help track information flow due control flow 
program counter records lower bound security level variables assigned program 
type system guarantees branching commands data level branches typable program counter preventing leaks assignments branches 
tracking information flow assignments control flow spirit type system collects information variables declassification recorded effect expression command variables updated commands recorded effect command 
example effect declassify expression set variables appearing written vars 
key restriction guaranteed type system variables declassification may updated prior declassification 
restriction enforced rules sequential composition loop 
programming discipline enforced type system ensures typable programs secure formalized theorem 
val op declassify vars pc skip pc pc pc pc pc pc pc pc pc pc pc pc pc pc fig 

typing rules theorem 
pc secure 
proof induction typing derivation sketched appendix 
note type system restrictive necessary enforce security condition 
example consider program parity declassify low high low lattice updated prior declassification entire program leaks parity initial value information complete initial value leaked assignment 
definition program secure rejected type system 
devising permissive type system enforcing delimited release security condition worthwhile topic 
password checking example section applies delimited release model password checking illustrating type system gives security types password checking routines prevents laundering attacks 
consider unix style password checking system database stores images hashes password salt pairs 
salt publicly readable string stored database user id protection dictionary attacks 
successful login user required provide query hash string salt matches image database 
typed expressions programs computing hash matching user input password image database updating password 
arrows types expressions indicate types arguments left arrow type result right arrow 
expression hash pwd salt concatenates password pwd salt salt applies way hash function concatenation denoted 
result declassified level low 
hash pwd salt pwd salt low declassify pwd salt low expression match salt query checks password image equal hash user query query salt salt 
match salt query salt query low hash query salt notice expression typable security level result confidential security level low 
program update salt updates old password hash querying old password matching hash matched updating hashed password hash 
update salt low match salt hash salt skip instantiate typings lattice show capture desired intuition 
honest user applying hash password salt hash pwd salt high low low 
attacker hashing password honest user public salt hash pwd salt low low low 
honest user matching password match salt query low low high low 
attacker attempting guess password matching legitimate password image salt match salt query low low low low 
honest user modifying password low update salt low low high high 
attacker attempting modify honest user password low update salt low low low low 
typable secure programs 
rationale considering programs secure succeed attacker needs guess password large password space little prior knowledge 
programs typable guarantees password checking mechanism vulnerable laundering attacks 
example consider attack similarly wallet attack bit bit secret variable assuming bit integer declassification mechanism built hash expression 
hash sign hash skip low high sign returns argument positive negative respectively 
attack leak bit bit fashion easy see inequality holds inequality holds sensible hashing algorithm equivalent hash sign hash 
clearly program insecure definition 
notice program rejected type system 
variable occurs declassification updated body loop 
furthermore observe programs avg wallet typable attacks avg attack wallet attack rejected type system 
related policies intentional information release active area research 
cohen selective dependence security definition viewed precursor 
cohen definition partitioning secret input domain subdomains requiring noninterference secret variables restricted subdomain 
example program par revealing parity satisfies selective independence respect partitioning domain integers odd numbers 
security policy specifying leaked relies semantic specification subdomains 
incarnations selective independence variables equivalence relations noninterference need specified semantic level 
contrast escape hatches facilitate syntactic way specifying selective independence values subdomain results evaluating expression declassify primitive values values 
escape hatches provide flexibility condition release information public values cf 
program wallet represented original definition selective independence 
syntactic escape hatch policy mechanism leads security type system enforces security appears automatic enforcement mechanisms variation selective independence 
related grouped categories information released information released relative information released 
detailed overview area refer survey 

common approach relaxing noninterference account intentional information release intransitive noninterference originated early conditional noninterference 
mantel sands addressed intransitive noninterference language setting 
intransitive flows context declassification sensitive unwinding explored 
intransitive noninterference accommodates policies information flow level directly 
goal information may declassified passes special security level 
assurance provided approach portions computation declassification actions certain sense secure 
guarantees entire computation 
myers liskov decentralized model offers security labels selective declassification permitted basis static analysis process authority relationships principals 
security labels additional structure describes entities capable performing declassification 
policies help express information released fail account released 
particular intransitive noninterference selective declassification directly prevents laundering attacks 

quantitative approach information flow gives bounds information may released 
instance useful measuring information password revealed login attempt password checking 
shannon information theory early ideas quantitative security go back denning provide automated tools estimating bandwidth 
clark propose syntax directed inference rules computing estimates information flow resulted statements imperative language 
line di pierro suggests approximate noninterference thought noninterference modulo probabilistically specified noise setting lowe quantitative definition information flow measures capacity information flow channels 
tracking quantity information program construct appears daunting task 
date appears static analysis reasonably permissive rules loops 
relative 
rest section discuss models information release relative attacker power observe affect declassification 
volpano smith proposed type system allows password matching operations security assurance typed program leak secrets polynomial length secret time ii secret leaks possible negligible probability 
subsequent volpano proves leaking passwords system passwords stored images way function easier breaking way function 
studies tailored password checking scenario 
abadi gives type system declassification connected uses encryption calculus cryptographic protocols spi calculus 
secret keys usage hidden security definition allowing result encryption considered publicly visible 
pierce employ relational parametricity techniques reasoning cryptographic protocols involving encryption 
laud complexity theoretic security definition specific declassification encryption 
security definition ensures polynomial time length secret adversary imperative language able leak secrets abusing encryption declassification mechanism 
idea underlying dam admissibility implementation specification satisfies admissibility information flows described confidentiality policy specification 
relativity information release respect information release specification 
zdancewic myers proposed security condition called robust declassification captures idea attacker may learn information intended 
key idea attacker controlled computation allowed increase observations secrets causing misuse declassification mechanism 
robust declassification ensures active attacker affect system behavior learn passive attacker may observe system behavior 
zdancewic proposed type system intended enforce robust declassification 
myers generalized robust declassification enforceable security property introduced qualified robustness provides untrusted code limited ability affect information release :10.1.1.14.1928
security model intentional information release 
model delimits information flow explicit policies able capture information released opposed released 
approach enables track laundering attacks undetectable models information flow 
information flow relies creating special security levels compartments data restrict information flow fence laundering attacks 
seen average salary electronic wallet password checking examples panacea 
model viewed line defense prevents attacks missed 
delimited release model ways orthogonal robust declassification controls may declassified ensures attacker control decisions declassified 
synthesis security definitions language setting improve assurance information released properly 
delimited release opens possibilities security typed languages jif write components larger systems written conventional languages java 
delimited release security guarantee security critical jif code wrapped java programs disclose information released jif code 
acknowledgment due fabio david sands steve zdancewic helpful comments 
research supported department navy office naval research onr 
opinions findings recommendations contained material authors necessarily reflect views office naval research 

abadi 
secrecy typing security protocols 
acm september 

abadi banerjee heintze riecke 
core calculus dependency 
proc 
acm symp 
principles programming languages pages january 

abadi gordon 
calculus cryptographic protocols spi calculus 
information computation january 


transforming timing leaks 
proc 
acm symp 
principles programming languages pages january 

banerjee naumann 
secure information flow pointer confinement java language 
proc 
ieee computer security foundations workshop pages june 

piazza rossi 
modelling downgrading information flow security 
proc 
ieee computer security foundations workshop june 
appear 

clark hunt malacaria 
quantitative analysis leakage confidential data 
proc 
quantitative aspects programming languages volume entcs 
elsevier 

cohen 
information transmission sequential programs 
demillo dobkin jones lipton editors foundations secure computation pages 
academic press 

dam 
confidentiality mobile code case simple payment protocol 
proc 
ieee computer security foundations workshop pages july 

denning 
cryptography data security 
addison wesley reading ma 

denning denning 
certification programs secure information flow 
comm 
acm july 

di pierro hankin 
approximate non interference 
proc 
ieee computer security foundations workshop pages june 

duggan 
cryptographic types 
proc 
ieee computer security foundations workshop pages june 

giacobazzi 
non interference parameterizing noninterference interpretation 
proc 
acm symp 
principles programming languages pages january 

dam 
secure implementation security protocols 
proc 
european symp 
programming volume lncs pages 
springer verlag april 

goguen meseguer 
security policies security models 
proc 
ieee symp 
security privacy pages april 

goguen meseguer 
unwinding inference control 
proc 
ieee symp 
security privacy pages april 

gosling joy steele 
java language specification 
addison wesley august 

heintze riecke 
slam calculus programming secrecy integrity 
proc 
acm symp 
principles programming languages pages january 

joshi leino 
semantic approach secure information flow 
science computer programming 

laud 
semantics program analysis computationally secure information flow 
proc 
european symp 
programming volume lncs pages 
springer verlag april 

laud 
handling encryption analysis secure information flow 
proc 
european symp 
programming volume lncs pages 
springer verlag april 

lowe 
quantifying information flow 
proc 
ieee computer security foundations workshop pages june 

mantel 
information flow control applications bridging gap 
proc 
formal methods europe volume lncs pages 
springer verlag march 

mantel sands 
controlled downgrading intransitive non interference 
draft july 

mclean 
specification modeling computer security 
computer january 

myers 
jflow practical static information flow control 
proc 
acm symp 
principles programming languages pages january 

myers liskov 
decentralized model information flow control 
proc 
acm symp 
operating system principles pages october 

myers liskov 
complete safe information flow decentralized labels 
proc 
ieee symp 
security privacy pages may 

myers sabelfeld zdancewic 
enforcing robust declassification 
proc 
ieee computer security foundations workshop june 
appear 

myers zheng zdancewic chong nystrom 
jif java information flow 
software release 
located www cs cornell edu jif july 


absorbing covers intransitive non interference 
proc 
ieee symp 
security privacy pages may 

pottier 
information flow inference free 
proc 
acm international conference functional programming pages september 

pottier simonet 
information flow inference ml 
proc 
acm symp 
principles programming languages pages january 

roscoe goldsmith 
intransitive noninterference 
proc 
ieee computer security foundations workshop pages june 

rushby 
noninterference transitivity channel control security policies 
technical report csl sri international 

sabelfeld myers 
language information flow security 
ieee selected areas communications january 

sabelfeld sands 
probabilistic noninterference multi threaded programs 
proc 
ieee computer security foundations workshop pages july 

sabelfeld sands 
model secure information flow sequential programs 
higher order symbolic computation march 

saltzer reed clark 
arguments system design 
acm transactions computer systems november 

shannon weaver 
mathematical theory communication 
university illinois press 

smith volpano 
secure information flow multi threaded imperative language 
proc 
acm symp 
principles programming languages pages january 

pierce 
logical relations encryption 
proc 
ieee computer security foundations workshop pages june 

volpano 
secure way functions 
proc 
ieee computer security foundations workshop pages july 

volpano smith 
probabilistic noninterference concurrent language 
computer security november 

volpano smith 
verifying secrets relative secrecy 
proc 
acm symp 
principles programming languages pages january 

volpano smith irvine 
sound type system secure flow analysis 
computer security 

winskel 
formal semantics programming languages 
mit press cambridge ma 

zdancewic 
type system robust declassification 
proc 
mathematical foundations programming semantics entcs 
elsevier march 

zdancewic myers 
robust declassification 
proc 
ieee computer security foundations workshop pages june 

zdancewic myers 
secure information flow cps 
proc 
european symp 
programming volume lncs pages 
springer verlag april 
appendix appendix presents proof theorem 
theorem 
pc secure 
proof 
sketch proof induction typing derivation exception straightforward case subsumption rule bottom induction structure suppose contains exactly declassify expressions declassify 
declassify en 
suppose security level memories ei ei need show assume relation obvious configurations diverges 
remains shown 
skip straightforward 
clearly case 
case typing rule assignments ensures security levels variables occurring outside declassify primitives 
values variables 
values expressions declassify primitives guaranteed assumption ei ei 
note declassification level allowed typing rule assignments 
sum values variables outside declassification primitives values expressions declassify 
clearly application op operations subexpressions gives results 

typing rule sequential composition typable 
set declassify ei occurs viewed union declassify ei occurs declassify ei occurs 
apply induction hypothesis 
receive order show apply induction hypothesis 
requires demon strate 
ei ei different know 
ei ei 
effect system ensures variable ei updated infer variable occurs ei 
assures 
ei ei induction hypothesis 
suppose case pc mechanism type system ensures variables may assigned 
assignments variables 
memories unaffected execution results 
ei ei including occurrences ei declassify val val val 
computation take branch val true 
follows application induction hypothesis respectively 
suppose case resolved fashion 
ei ei includes occurrences ei declassify val val val 
computation proceeds val true terminates 
loop terminates computation represented sequential composition series commands 
case reduces consequently applying sequential composition case 
note keeps evaluating value iteration effect system ensures variable declassify updated 
false loop terminates executing number commands 
implies 

