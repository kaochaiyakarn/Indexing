fast universal method querying graphs department mathematics computer science university catania viale catania italy dmi application independent method querying graphs finding occurrences subgraph database graphs 
interface graph grep regular expression graph query language glide combines features xpath smart 
glide incorporates single node variable length wildcards 
algorithm uses hash fingerprinting represent graphs form filter database 
tested databases size molecules performs entire range 

applications industry science engineering share problem subgraph find occurrences database graphs 
increasing size application databases requires efficient structure searching algorithms 
examples database substructure searching methods computational chemistry vision web exchange data xml 
finding occurrences subgraph set graphs known np complete 
graph graph matching algorithms efficiency considerations suggest special techniques reduce search space time complexity 
extensive literature graph substructure searching 
review see 
existing methods designed specific applications 
example querying methods semistructured databases particular xml databases proposed 
methods different data models query languages indexing strategies 
data objects xml databases viewed rooted labeled graphs 
regular path expressions address substructures database 
cycles dennis shasha courant institute mathematical sciences new york university mercer street new york ny shasha cs nyu edu searched evaluating recursion functions formulating complex queries 
avoid unnecessary traversals database evaluation path expression indexing methods introduced 
daylight proposes searching system database molecular graphs 
finds molecules contain subgraph occurrence query 
daylight uses fingerprints consisting bit vectors position represents small path 
provides graph expression language smiles molecule representation formulate queries 
messmer bunke propose application independent method 
method indexes graphs database computes graph isomorphism 
indexing matching possible permutations adjacent matrices graphs 
algorithm works extremely small graphs doesn scale larger graphs large databases graphs 
article application independent method perform exact subgraph queries database graphs 
system finds occurrences graph database graphs 
formulate queries introduce graph query language term glide graph linear description language 
glide descends query languages xpath xml documents smart molecules 
xpath queries expressed complex path expressions filter matching conditions included notation nodes 
glide uses graph expressions path expressions 
smiles language designed code molecules smart query language discover components smiles databases 
glide borrows cycle notation smiles generalizes graph application 

description assumes nodes database graphs identification number id node label label node 
edges undirected unlabeled pur poses 
define id path length list id nodes edge consecutive nodes 
similarly label path length defined list label nodes 
example fig 
label path graph id path corresponding 
graph graph graph 
database containing graphs 
labels strings arbitrary length 
basic steps build database represent graphs sets paths step done filter database submitted query reduce search space perform exact matching 
discuss steps turn 
database construction 
graph node find paths start node length single node small constant value nodes 
graphs database 
paths may contain label sequence group id paths associated label path set 
path representation graph set label paths graph label path set id paths see fig 

keys hash table hash values label paths 
row contains number id paths associated key hash value graph 
refer hash table fingerprint database see fig 

ab ac cb ba bab abc acb bc bac cba cab bcba bca ca key ca path representation graph fingerprint database 
path representation 
fingerprint database showing part rows 
parsing query graph 
query graph glide language see sec 
fig 
seen linear representation tree generated depth search dfs traversal query graph see fig 

query parsed build fingerprint hashed set paths branches depth tree decomposed sequences overlapping label paths call patterns length see fig 

overlaps may appear cases consecutive label paths node pattern coincides node pattern decomposed patterns abc cb node branches included pattern branch see node fig 
node visited cycle appears twice pattern cycle pattern cycle pattern identical fig 

glide graph query graph query depth tree patterns bca cb 
query graph glide representation 
graph query 
depth tree glide expression corresponds 
set patterns obtained inthis example overlapping labels marked asterisks underlining 
labels mark represent node 
filtering database 
avoid visiting graphs database query search space reduced discarding graphs clearly contain occurrences query 
remaining graphs may contain subgraphs matching query 
filter database comparing fingerprint query fingerprint database 
graph value fingerprint corresponding value fingerprint query discarded 
example graph query fig 
graphs filtered contain label path 
finding subgraphs matching queries 
filtering look matching subgraphs remaining graphs 
path representation graphs look occurrences query 
parts candidate graph id path sets correspond patterns query selected compared query 

id path sets selected identify overlapping id path lists concatenate removing overlaps build matching subgraph 
overlapping case pair lists combined lists contain id node overlapping position 
overlapping case list removed contain id node overlapping positions lists removed id nodes placed overlapping positions equal 
example consider steps match query fig 
graph fig 


select set paths matching patterns query cb 

combine list list cb third id node equal id node id node equal fourth id node 

remove lists contain equal non overlapping positions positions list involved 
substructures composition yields graph queries wildcards treated considering parts query graph wildcards disconnected components 
example disconnected components graph fig 
path ab single node 
matching algorithm described done component 
cartesian product sets match component constitutes candidate matches 
entry cartesian product valid match graph contains entry path length equal wildcard value nodes connected wildcards 
paths candidate graph checked dfs traversal graph 
step optimized maintaining transitive closure matrices database graphs searching candidate graph wildcard value greater equal shortest path nodes 
complexity 
description worst case complexity 
number graphs database 
number nodes number edges maximum valence degree nodes database graph respectively 
worst case complexity building path representation database memory cost query nodes edges maximum valence finding patterns takes time building fingerprint takes filtering database takes linear time size database 
matching algorithm depends number query graph patterns need combined somewhat difficult determine average case 
roughly speaking directly proportional query size maximum valence nodes query 
larger smaller relationship 
general maximum number nodes having label worst case time complexity matching size database filtering 
query containing pairs nodes connected wildcards complexity matching 
glide graph linear query language main idea glide coming smiles represent graph branches linear notation node 
nodes represented labels separated slashes branches grouped nested parentheses cycles broken cutting edge labeling integer 
vertices cut edge represented labels followed integer 
node vertex cut edges label node followed list integers 
example glide representation graph fig 
fig 
fig 

unspecified components graph described wildcards 
wildcards represent single nodes paths 
wildcard matches single node matches zero nodes matches zero node matches nodes see fig 


glide expression matches graph specific properties exist path node label node label edge node label node label edge node label node label 
results assess practical efficiency performed set numerical experiments nci databases molecules 
graphs databases average number nodes graphs nodes 
old sun workstation equipped mhz ultra processor 
experiments varied query size nodes database sizes graphs values fig 

left diagram gives preprocessing times logarithmic scale 
running time exponential linear size database 
right diagram reports query times logarithmic scale different query lengths different values see fig 
different values influence running queries query matching time sec lp lp lp database size lp lp lp time sec lp lp lp lp lp lp size lp lp lp lp lp lp 
abscissa gives size database ordinate cpu time measured seconds logarithmic scale 
left diagram gives preprocessing times database construction times right diagram gives querying times 
query 
query 
query molecule nodes undirected edges max valence node 
queries database discarded query discarded 
experiment changing value didn change effectiveness filtering 
molecules database subgraphs 
algorithm performs better consistent time complexity analysis 
addition examples verify querying time linear size database exponential 
recall number paths size tested proportional query size 
expected decreases substantially larger paths 
note exponential dependency data graph size 

search graph query language database graphs 
shown performs small query graphs large graph databases thousands large size nodes 
compute inexact subgraph matching 
software implementation freely available www cs nyu edu shasha papers 
clark derose 
xml path language xpath 
www org tr xpath 

efficient algorithm inexact matching arg graphs contextual transformational model 
proceedings th icpr volume pages 
ieee computer society press 
dickinson pelillo zabih 
special section graph algorithms computer vision 
ieee transactions pattern analysis machine intelligence october 
dewitt naughton maier 
paths xml data algebraic framework xml query evaluation 
submit 
garey johnson 
computers intractability guide theory np completeness 
freeman 
james 
daylight theory manual daylight 
daylight chemical information systems www daylight com 
mchugh abiteboul goldman quass widom 
lore database management system semistructured data 
sigmod record volume pages september 
messmer bunke 
subgraph isomorphism detection time preprocessed model graphs 
lecture notes computer science pages 
springer 
milo suciu 
index structures path expressions 
icdt pages 
shanmugasundaram gang tufte zhang de witt naughton 
relational databases querying xml documents limitations opportunities 
vldb journal 
sheng ozsoyoglu ozsoyoglu 
graph query language query processing 
icde pages 
suciu 
overview semistructured data 
sigact news acm special interest group automata computability theory 

algorithm subgraph isomorphism 
journal association computing machinery 
wang shapiro shasha 
pattern discovery biomolecular data 
new york oxford oxford university press edition 

smiles 
encoding rules 
journal chemical information computer science 
