paradigm change computer science software engineering synthesis franco zambonelli van dyke parunak dip 
di scienze dell ingegneria universit di reggio reggio italy franco zambonelli institute green ct suite ann arbor mi usa van parunak org 
identify analyze set characteristics increasingly distinguish today complex software systems traditional ones 
examples different areas show characteristics limited application domains widespread 
discuss characteristics impact dramatically way software systems modeled engineered 
particular appear edge radical shift paradigm change attitudes software systems modeling engineering 
keywords distributed systems design paradigms multiagent systems 
published knowledge engineering review corresponding author franco zambonelli computer science software engineering going change dramatically 
scientists engineers spending great deal effort attempting adapt improve established models methodologies software development 
complexity introduced software systems emerging computing scenarios goes capabilities traditional computer science software engineering abstractions object oriented component methodologies 
scenario initiating software crisis rapidly emerging computing systems connected active 
computer systems embedded object est physical environments clothes furniture bodies 
wireless technologies network connectivity pervasive computing device connected network traditional internet ad hoc local networks bro 
computing systems active perform activity behalf improve comfort home control automate manufacturing processes bus 
scenario simply affect design development software systems quantitatively terms number components effort required 
qualitative change characteristics software systems methodologies adopted develop 
particular main characteristics addition quantitative increase interconnected computing systems distinguish software systems traditional ones situatedness software components execute context environment influence influenced openness software systems subject decentralized management dynamically change structure locality control components software systems represents autonomous proactive loci control locality interactions despite living fully connected world software components interact accordingly local geographical logical patterns 
characteristics ones typically characterize multi agent systems research community distributed artificial intelligence jen 
go details characteristics see research communities focused different topics manufacturing environmental control systems bus est mobile pervasive computing wei internet computing recognizing importance adapting models technologies take account 
contribution attempt synthesizing single conceptual framework novel concepts abstractions emerging different areas recognition basic lack interaction common terminology 
synthesis argue integration concepts abstractions software modeling design simply represent proper evolution current models methodologies 
anticipate real revolution kuhn term kuh scientific change paradigm impact research communities horizontally change way conceive model build software components software systems 
clear signals testify generation software systems longer modeled designed terms mechanical architectural systems terms physical intentional systems 
new 
characteristics identified situatedness openness local control local interactions affect different flavors different extents today software systems 
situatedness today computing systems situated 
explicit notion environment components allocated execute affected execution environmental characteristics components explicitly interact environment 
emphasize software systems worked isolation immersed sort environment 
instance execution running process multi threaded machine intrinsically affected dynamics multiprocessing system 
traditional modeling engineering approaches tried mask presence environment 
cases specific objects components wrap environment model terms normal component environment exist primary abstraction 
unfortunately environment components live interact exists may impact application execution application modeling entities software components may need interact complex structure behavior enable trivial wrapping 
software system explicit goal monitor sense control affect physical environment logical computational environment masking environment natural choice 
providing explicit consciousness may primary application goal 
environment dynamics independent software system intrinsic dynamics 
wrapping environment application entity introduce forms unpredictable non determinism inside applications 
reasons current trend computer science software engineering define environment software system executes explicitly primary abstraction explicitly defining boundaries separating software systems environment reciprocal influences systems 
approach avoids odd wrapping activities needed model component external world internal application entity allows software system deal natural way real world environment software system may devoted monitor control 
addition explicit modeling environment activities possible identify confine clearly sources dynamics unpredictability non weg concentrate software components terms deterministic entities deal dynamic possibly unpredictable environment 
examples 
control systems physical domains manufacturing traffic control home care health care tend built explicitly managing environmental data explicitly account unpredictable dynamics environment specific event handling policies 
similar problems arise sensor robot networks est multitude components spread unknown physical environment duty exploring monitoring 
mobile pervasive computing applications recognize primary importance context awareness need applications maintain explicit models environmental characteristics characteristics related sensed physical environment position specific components environment pri environmental data data provided embedded infrastructure environment implicit models terms internal attributes objects 
internet applications web systems immersed existing intrinsically dynamic internet environment typically engineered clearly defining boundaries system terms application including new application components developed middleware environmental substrate components embedded 
clearly identifying defining boundaries key points web application engineering 
similarly systems workflow management computer supported collaborative built shared data space abstractions exploited common environment execution workflow processes agents tol 
final example worth noting promising proposals area distributed problem solving optimization ant colonies model centered dynamic virtual environment influencing activities distributed problem solver processes 
openness living environment perceiving affected intrinsically imply sort openness software system 
fact system longer conceived isolated world considered sub system boundaries permit reciprocal side effects 
cases achieve objectives software systems interact external software components provide services data acquire 
generally different software systems independently designed modeled live environment explicitly interact 
forms open interactions call common ontologies communication protocols suitable broker infrastructures enable interoperability 
small part problem simply enabling interoperability software systems may come life die environment independently dynamic way software system components explicitly move different environments life 
characteristics introduce additional problems component interacts components software systems components move different environment may difficult impossible clearly identify system component belongs 
words difficult understand boundaries software systems clearly 
component comes life environment moved specific environment aware environmental context components eligible interaction interact newly entered system system 
enabling components enter leave environment fully free way interact may hard understand control behavior software systems single software system 
due problems software development may require facing problem modeling environment systems execute understanding modeling dynamic changes system structure 
need preserve coherence system despite openness may require identifying enacting specific policies intended support re organization software system response changes structure enact contextual laws activity components entering system 
general aim increase ability control system execution despite dynamic structural changes 
examples 
control systems critical physical domains typically run forever stopped removed environment embedded 
systems need continuously updated environment live change frequently addition new physical components consequently new software components software systems 
systems managing openness capability system re organize automatically establishing new effective interactions new components changing structure interaction graph important ability component enter new execution contexts safety effectively 
respect pervasive computing systems sensor networks networks embedded computer systems lack power simply communication unreachability est nodes come go unpredictably requiring frequent restructuring communication patterns 
mobility users software devices moves concept openness extreme making components move context execution changing structure software system executing context whi 
requires capability components acquire knowledge newly entered context execute capability organize control component interactions context 
challenges exacerbated context mobile ad hoc networking interactions fruitful controllable despite lack intrinsic structure dynamics connectivity bro 
similar considerations apply internet open distributed computing 
software services survive dynamics uncertainty internet able serve client component able enact security resource control policies local context administrative domain 
marketplaces typical examples class open internet applications rods 
systems gnutella freenet correspond internet applications ad hoc networking corresponds mobile computing system 
cases components allowed interact fruitfully properly pre determined interaction structure surviving dynamics services data availability 
local control flow control concept key aspects computer science software engineering levels hardware level high level design applications 
software systems components live interact open world concept flow control meaningless 
independent software systems autonomous flows control mutual interactions imply join flows 
modeling designing open software concept software system vague discussed subsection concept global execution control disappear 
trend exacerbated fact independent system flow control may components individually autonomous 
fact components today software systems active entities active objects internal threads control processes daemons passive ones normal objects functions 
aware concurrent parallel programming established paradigms applications multiple threads processes long time 
traditional concurrent parallel programming order improve efficiency performance exploit multiple flows execution avoiding making multiple threads control 
fact traditional approaches limit possible autonomy multiple flows execution strict synchronization coordination mechanisms goal preserving determinism control application execution 
tendency seen approaches multiagent systems engineering aimed limiting agents autonomy 
today autonomy application components different motivations handled differently open world autonomy execution enables component move systems environments having report back wait acknowledgment original application 
components systems immersed highly dynamic environment evolution monitored controlled autonomous component effectively delegated take care portion environment independently global flow control 
software systems software components integrate computer systems nature autonomous systems modeled accordingly 
size software system increases need delegating control components longer simply matter performance matter conceptual simplicity 
fact coordinating global flow control large number components may unfeasible autonomy additional dimension modularity par 
examples 
today software systems integrate autonomous components 
weakest autonomy reduces ability component react handle events case graphical interfaces simple embedded sensors 
cases autonomy implies component integrates autonomous thread execution execute proactive way 
case modern control systems physical domains control simply reactive proactive realized set cooperative autonomous processes case embedded complete computer systems interacting distributed sensor networks est 
integration complex distributed applications systems software running mobile devices type tackled modeling terms autonomous software components 
internet distributed applications typically autonomous processes possibly executing different nodes cooperating choice driven conceptual simplicity decentralized management actual need autonomous concurrent activities 
local interactions directly deriving issues concept local interactions global world today software systems 
delineated scenario software system components immersed specific environment execute context specific sub system delegated perform task autonomously 
taken aspects naturally lead strict enforcement locality interactions 
fact autonomous components interact environment immersed sensing affecting 
environment physical amount physical world single component sense affect locally bounded physical laws 
environment logical minimization conceptual management complexity favors modeling local terms limiting effect single component environment 
components normally interact context software system belong locally system 
open component system interact components systems 
cases minimization conceptual complexity suggests modeling component temporarily moved context interacts locally 
open world components need form context awareness execute interact effectively 
component aware context effectively efficiently context necessarily locally confined 
locality interactions strong requirement number components system increases scale distribution increases 
presence autonomous threads control may tracking controlling concurrent autonomous autonomously initiated interactions difficult object component applications interactions strictly local 
examples 
control systems physical domains tend enforce local interactions nature 
control component delegated control portion environment interactions components usually limited control neighboring portions environment typically strictly coordinated est 
mobile computing including applications wearable systems sensor networks nature wireless connections forces locality interactions 
wireless communication limited range mobile computing component directly interact limited portion world time bro 
applications distributed internet take account specific characteristics local administrative domain components execute interact components usually allocated internet nodes enforce possible locality interactions whi 
general model fig 

scenario modern software systems sum software systems increasingly assimilated scheme 
software systems dashed ellipses autonomous components black circles interacting locally possibly components systems 
accordingly components may part software systems different times depending current interaction activities 
systems components immersed environment typically composed modeled set environment partitions 
components system sense affect local portion environment 
portions environment components may access may overlap components may interact indirectly environment 
scenario different component object programming matches prevailing model agent computing jen 
agents considered situated software entities live environment execute autonomously local control actions interact agents 
local interactions promoted may explicitly mentioned part model 
despite fact scientists working agent computing focus artificial intelligence aspects discipline noticing simply deliberately ignoring agents agent computing potential general model today computing systems different research communities facing similar problems starting adopting similar modeling techniques 
similarly outside artificial intelligence community computer scientists software engineers fail recognize current systems assimilated agent systems modeled agent systems 
issues discussed help clarify strict relationships need interaction different research communities due strong similarities tempted say isomorphism problems address 
changing attitudes traditionally software systems modeled mechanical stance engineered design stance 
computer scientists burdened urge define suitable formal theories computation prove properties software systems provide formal framework engineering 
software engineers analyzing functionality system exhibit top way designing software architectures reliable multi component machines capable providing required functionality efficiently predictably 
scientists engineers design software system execute world multitude autonomous embedded mobile software components executing interacting environment basis local interaction patterns 
scenario may require models methodology 
computer science change 
modeling handling systems large number components feasible components autonomous subject single flow control 
activities components autonomous hard conceptually computationally infeasible track describe precisely system behavior terms behavior components 
addition software systems distributed subject decentralized control possibly embedded unreachable environment est tracking components controlling behavior simply impossible 
systems described modeled terms macro level observable characteristics just chemist describes gas terms macro properties pressure temperature 
problem exacerbated fact components interact 
accordingly behavior system emerge sum behavior components result mutual interactions 
may argue interactions tend confined locally subsection quite easy control effect 
unfortunately effect local interactions propagate globally difficult predict pris 
propagation local effects long distance hallmark phase transitions physical systems analogs discovered distributed computational systems vat 
knows initial status system accurately nonlinearities amplify small deviations arbitrarily great making prediction long time horizon impossible 
additional problem consider software systems execute open dynamic scenario new components added removed time components autonomously move part system changing structure interaction graph 
difficult predict control precisely global dynamic behavior system behavior influenced openness 
fact shown effects interactions autonomous active components strongly depend structure interaction graph wat dynamic behavior system change completely slight changes structure interaction graph 
situatedness causes similar problems 
fact modern thermodynamics social science tell environmental forces produce strange large scale dynamic behaviors situated physical biological social systems pris 
expect large scale effects emerge situated software systems dynamics environment preliminary set experiments suggest 
problems force computer scientists change attitudes dramatically modeling complex software systems 
traditional formalisms methods aimed proving properties software logical tools deal effectively small systems small portions large systems 
dream dealing fully formalizable software systems started vanish advent concurrent interactive systems weg impractical years 
fact soon system large open autonomous situated components behavior complex irreducible wol 
way understand behavior system execute system observe 
challenge find alternative models radically adopt brand new scientific background study software systems enabling study predict control properties system dynamic behavior relevant properties specific kinds observable behavior despite inability control predict micro level behavior individual components 
signals 
signals trend different areas research community 
study monitoring activities web networks clear unpredictable large scale behaviors requiring new models tools description 
instance shown traditional web caching policies longer effective peculiar dynamic web access patterns emerge traditional reliability models fall short due specific emergent characteristics web networks 
approaches model describe software systems terms thermodynamic systems proposed 
ideas research twofold provide synthetic indicators capable measuring closely system approaching desired behavior provide tools measure influence environmental dynamics system 
extent similar approach adopted area massively parallel computing need measure specific global systems properties dynamically requires synthetic indicators 
similarly recognized modeling large dynamic overlay networks faced introducing macro properties direct representation network 
area clearly shows trend artificial intelligence 
claim rational intelligence emerge complex machine capable manipulating facts logic theories strongly debated origins computer science alternative ways model intelligence build intelligent systems terms large interactive systems proposed neural networks evolutionary algorithms 
proposals led special purpose applications entered mainstream computer science artificial intelligence 
abstractions promoted agent computing multiagent systems matching characteristics today software systems subsection promoted shift concept intentional intelligence capability component system behave autonomously interact achieve general purpose goal 
context organization theory social science starting influence research recognized behavior large scale software system assimilated appropriately human organization aimed reaching global organizational goal society global behavior derives self interested intentional behavior individual members logical mechanical system 
similarly inspiration computer scientists comes increasingly complex mechanisms biological ecosystems biological sciences nag 
signals expect theories models complex dynamical systems modern thermodynamics biology social science organizational science sine qua non cultural background computer scientist today researchers area multiagent systems 
software engineering change 
change modeling understanding complex software systems definitely impact way systems designed tested maintained 
regard design lack micro level control software system impossible obtain defined behavior multi component system design mechanical deterministic terms 
challenge effective construction large software systems build guarantee system behave desired reasonably close ideal desired behavior despite lack exact knowledge micro behavior 
instance adopting physical attitude software design possible approach build system despite uncertainty initial conditions basin attraction leading stable attractor 
adopting teleological attitude idea build ecosystem society components able behave intentional way robust direct global activities achievement required goal approach goal reasonably closely 
design explicitly take account fact system immersed open dynamic environment making useless design isolation 
promoting environment dynamics primary design abstraction design may assume defensive approach treating sources uncertainty damaging global behavior system system prepared face offensive approach considering openness environmental dynamics additional design dimensions exploited possibility improving behavior system 
testing traditionally amounts analyzing system state transitions see correspond designed ones components exhibit bad state transitions bugs 
known hard large concurrent systems may impossible autonomy environmental dynamics produce practically uncountable number states non deterministic state transitions 
large software system longer tested goal finding errors regard ability behave needed independently exact behavior components initial conditions huh 
software system immersed existing dynamic environment systems executing stopped simply tested evaluated terms capability achieving required goal 
test evaluate effect environment software system effects software system environment 
better robust system greater ability advance goals independently dynamics environment lower impact surrounding environment software systems 
maintaining software change 
autonomy openness software system considered extent unstable continuous need maintenance due changed conditions 
traditional perspective maintenance large software system longer behaves needed instance external conditions require change behavior software system update longer imply stopping system rebuilding retesting 
imply intervening system outside adding new components different attitudes removing existing components change needed behavior system 
case openness situatedness system autonomy component maintenance updating smoother expensive system designed tolerate support dynamic changes structure 
signals 
possible identify exemplary projects adopting different extents novel software engineering perspective 
area distributed operating systems management policies management distributed resources designed terms autonomous components able guarantee achievement global goal local actions local interactions despite dynamics environment cyb 
design policies cases inspired physical phenomenon diffusion 
perspective proven useful re establish global equilibrium dynamic situations despite fact equilibrium perfect locally perturbed 
systems ant colonies designed bottom way able solve complex problems hard solve simple autonomous components interacting dynamic environment par 
idea mimic software behavior insect colonies living dynamic world able solve group problems interesting computational counterpart sorting routing 
case environmental dynamics plays primary role design emergence specific useful behaviors 
fact systems fundamental phase design testing relates understand verify environmental activities impact behavior insect colony 
inspiration social phenomenon epidemics useful understanding distributed information dynamic networks components mobile ad hoc networks despite inability control information paths structure network exactly 
dynamics network source uncertainty useful property guarantee message propagated network reasonable time 
information dissemination systems exploit similar way dynamic properties spontaneously generated community network survive dynamics changes users interests network structure sort centralized management user directed maintenance 
related phenomenon gossip information reach person social network dramatic speed inspired routing algorithms different areas wide area event notification routing sensor networks 
impossibility detecting structure network components dimension intrinsic dynamics network challenging concepts information routing information retrieval 
different areas pervasive mobile computing internet computing rat sto middleware sensor networks est general understanding dynamics networks require novel content oriented path oriented approaches information retrieval routing 
words basic idea paths information sources destinations dynamically relying overlay networks continuously automatically reshape response system dynamics data queries follow shape overlay network just ball rolls surface 
final destination important paths followed data queries proceed direction eventually reach point nodes interested routed message interesting information 
worth noting systems typically tested evaluated terms system tolerate network dynamics exhibiting reasonably behaviors fast overlay network re organize response dynamic changes addition removal components impact behavior network 
biological phenomenon evolution despite intrinsic uncertainty useful tool software engineers 
instance cellular automata potential perform complex computations result dynamic evolution turns impossible understand rules imposed cells interaction produce system certain required properties wol 
approach successfully experienced cellular automata rules evolve genetic algorithms eventually come specific rules leading desired global behavior automata having directly designed behaviors sip 
approach successful computational systems complex cellular automata 
discussion modern software systems different application areas exhibit characteristics different software systems scientists engineers accustomed 
characteristics impact dramatically way software systems modeled engineered leading paradigm shift computer science software engineering kuh 
fact required change traditional design attitude implying mechanical perspective intentional attitude requiring physical biological teleological perspectives consequently brand new set conceptual tools methodologies 
possible criticism approach software systems humans dependent everyday activities control safe critical situations engineered way traditionally envisioned 
claim software system exhibit predictable fully controllable behaviour parts duty software engineer produce reliable systems 
instance foresee sudden death peer peer software systems despite current success unreliability impossibility properly modelling 
opinion approach correct 
constraining behaviour highly interactive system may sacrifice computational power may require waste resources obtain functionalities 
engineering needed system fully controllable may greater needed useful global behaviour reliable stable emerge 
constraining design software system may simply lose properties needed support openness tolerate environmental dynamics 
despite opposing forces difficulties inherent revolution including need restructuring cultural background envisioned revolution computer science software engineering definitely open door new interesting research engineering challenges enable new powerful applications ict technologies 
abe abelson allen hanson knight rauch sussman weiss amorphous computing communications acm pp may 
abowd mynatt charting past research ubiquitous computing acm transactions computer human interaction pp march 
adjie winoto schwartz lilley design implementation intentional naming systems acm operating systems review pp dec 
albert jeong barabasi diameter world wide web nature pp sept 
albert jeong barabasi error attack tolerance complex networks nature pp july 
fisher newman 
theory critical phenomena renormalization group 
clarendon press oxford uk 
estrin rumor routing algorithm sensor networks proceedings st international workshop sensor networks applications atlanta ge acm press pp sept 
bro broch maltz johnson hu jetcheva performance comparison multi hop wireless ad hoc network routing protocols proceedings th acm conference mobile computing networking dallas tx acm press pp october 
bus bussmann self organizing manufacturing control industrial application agent technology proceedings th ieee international conference multiagent systems boston ma ieee cs press pp july 
leonardi zambonelli engineering mobile agent applications context dependent coordination ieee transactions software engineering pp sept 
cap capra web life new understanding living systems doubleday new york ny oct 
carzaniga rosenblum wolf design evaluation wide area event notification service acm transactions computer systems pp aug 
leonardi zambonelli diffusive load balancing policies dynamic applications ieee concurrency pp january 
crovella bestavros self similarity world wide web traffic evidence possible causes ieee acm transactions networking pp december 
cyb cybenko dynamic load balancing distributed memory multiprocessors journal parallel distributed computing pp feb 
est estrin culler pister connecting physical world pervasive networks ieee pervasive computing pp jan 
gellersen schmidt beigl multi sensor context awareness mobile devices smart artefacts acm journal mobile networks applications pp oct 
gustavsson coordination control computational ecosystems vision coordination internet agents omicini eds springer verlag berlin pp 

howard mataric sukhatme incremental self deployment algorithm mobile sensor networks autonomous robots pp sept 
huberman hogg emergence computational ecologies lectures complex systems addison wesley reading ma 
huh huhns interaction oriented programming proceedings st international workshop agent oriented software engineering lecture notes computer science springer verlag berlin jan 
estrin directed diffusion scalable robust communication paradigm sensor networks proceedings th acm ieee conference mobile computing networking boston ma acm press pp aug 
jen jennings agent approach building complex software system communications acm pp 
kuh kuhn structure scientific revolutions university chicago press chicago il rd edition nov 
roli zambonelli dissipative cellular automata systems study emergent behaviours proceedings th euromicro conference parallel distributed network processing genova ieee cs press february 
moses artificial social systems computers artificial intelligence pp 
nag programmable self assembly biologically inspired multiagent control proceedings st international conference autonomous agents multiagent systems bologna acm press pp july 
shrobe bachrach organizing global coordinate system local information ad hoc sensor network proceedings nd international workshop information processing sensor networks palo alto ca acm press april 
odell parunak fleischer brueckner 
modeling agents environment proceedings rd international workshop agent oriented software engineering lecture notes computer science springer verlag berlin vol 
pages 
par parunak go ant engineering principles natural agent systems annals operations research pp 
parunak entropy self organization agent systems th international conference autonomous agents montreal ca acm press pp 
may 
parunak sauter erim approach fine grained agents nasa jpl workshop radical agent concepts md jan 
picco cugola murphy efficient content event dispatching presence topological reconfiguration proceedings rd international conference distributed computing systems providence ri ieee cs press june 
picco murphy 
roman software engineering mobility roadmap software engineering finkelstein ed acm press pp 
pri priyantha miu balakrishnan teller cricket compass context aware mobile applications proceedings th acm ieee conference mobile computing networking rome acm press pp july 
pris prigogine certainty time chaos new laws nature free press 
rat francis handley karp scalable content addressable network proceedings acm sigcomm conference san diego ca acm press aug 
ricci omicini activity theory framework mas coordination proceedings rd international workshop engineering societies agents world lecture notes artificial intelligence springer berlin vol 
march 
iamnitchi foster mapping gnutella network ieee internet computing pp jan feb 
rods rodriguez aguilar sierra enabling open agent institutions socially intelligent agents creating relationships computers robots dautenhahn 
eds kluwer academic publishers new york ny pp 
rowstron druschel pastry scalable decentralized object location routing large scale peer peer systems proceedings th ifip acm conference distributed systems platforms heidelberg nov 
sauter matthews parunak brueckner 
evolving adaptive pheromone path planning mechanisms 
proceedings st international joint conference autonomous agents multi agent systems bologna acm press pp july 
sip sipper 
emergence cellular computing ieee computer pp july 
sto stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proceedings acm sigcomm conference san diego ca acm press aug 
tol tolksdorf coordinating web workspaces proceedings th ieee workshops enabling technologies infrastructures collaborative enterprises gaithersburg ma ieee cs press june 
tennenhouse proactive computing communications acm pp may 
vat 
web page hu htm 
wat watts small worlds dynamics networks order randomness princeton university press princeton nj 
weg wegner 
interaction powerful algorithms communications acm pp may 
wei weiser hot topics ubiquitous computing ieee computer pp october 
whi white mobile agents software agents bradshaw ed aaai press menlo park ca pp 
wol wolfram new kind science wolfram 
new york ny 
wooldridge jennings 
pitfalls agent oriented development 
proceedings nd international conference autonomous agents minneapolis mn acm press pp 
zambonelli jennings wooldridge developing multiagent systems gaia methodology acm transactions software engineering methodology september 

