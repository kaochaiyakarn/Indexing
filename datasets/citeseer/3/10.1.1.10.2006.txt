logical approach stack typing develop logic reasoning adjacency separation memory blocks aliasing pointers 
provide memory model logic sound set natural deduction style inference rules 
deploy logic simple type system stack assembly language 
connectives logic provide flexible concise mechanism controlling allocation deallocation access heap allocated stack allocated data 
categories subject descriptors programming languages formal definitions theory logics meanings programs specifying reasoning programs logics meanings programs semantics programming languages general terms reliability security languages verification keywords stack memory management ordered logic bunched logic linear logic type systems typed assembly language 
proof carrying code system low level program accompanied proof program perform bad action executed 
host verify program behaved checking proof running code having trust program compiler 
proof carrying code technology supported part darpa nsf trusted computing ccr generous gift microsoft research 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
january new orleans louisiana usa 
copyright acm 
amal ahmed david walker department computer science princeton university olden street princeton nj amal cs princeton edu enables hosts verify safety programs purposes allows donate idle computational resources supercomputing projects seti home having afraid system corrupted 
order develop proof carrying code technology point pcc systems enforce complex security policies required applications grid computing researchers invent convenient abstractions help structure proofs common program properties 
abstractions flexible concise relatively easy compiler implementor understand manipulate 
successful abstractions easier build certifying compilers 
may find way lowlevel compiler intermediate languages general purpose programming languages 
fact seen migration grossman cyclone uses tofte talpin region abstractions deline fahndrich vault incorporates walker capabilities callahan improves jvml type system mechanisms morrisett stal :10.1.1.1.3704
focus reasoning memory management domain tests ability encode wide range invariants 
safety properties rely directly ability reason memory precisely 
order able enforce higher level security policies program properties statically able provide accurate picture memory 
main contribution logic reasoning adjacency separation memory blocks aliasing pointers 
time developed simple concise theory reasoning concepts simultaneously 
logic inspired pfenning ordered linear logic logics type systems reasoning aliasing :10.1.1.36.5390:10.1.1.36.5390
related petersen calculus reasoning data layout 
logic reason stack allocation simple typed assembly language 
presentation typed assembly language new 
encode state machine entirely new substructural logic consequently language feel hoare logic 
wrap logical formulae higher order types provides simple way extend traditional order hoare logic higher order domain type theory 
section introduce state logic sl 
discuss meaning judgments formulae terms concrete memory model 
provide logical inference rules prove simple metatheoretic properties 
section introduce typed assembly language show logic reason stack 
proof progress preservation lemmas demonstrates type system sound 
section discuss related greater detail section suggest directions research 

sl state logic section describe sl logic reasoning adjacency separation aliasing memory blocks 
power logic comes fact adjacency separation properties contained directly connectives logic 
previous similar power roots classical hoare logic reasons adjacency separation equating locations integers reasoning arithmetic 
reasoning exclusively integers arithmetic possible technique results overflow auxiliary arithmetic equations keep track adjacency aliasing information 
sl specifications simpler rich logic allows omit auxiliary arithmetic equations 
introducing logic introduce values memories serve model logic 
values reasoning different sorts values including integers code locations contain executable code proper memory locations aka heap locations fixed finite set registers 
need reason store values set values may stored register proper memory location 
registers included set store values 
integers nt proper locations loc registers reg code locations store values sval nt loc order discuss adjacent locations take step organizing set loc total order relation 
assume total function succ loc loc maps location location immediately follows 
write succ 
write syntactic sugar succ location succ 
types 
subsequent semantics formulae incorporate simple typing judgment values 
give integers locations singleton types identify exactly 
code locations code types described code context 
code types form logical formula describes requirements satisfied state machine safe jump code 
code return explicitly jumping continuation return address passed argument code types proper return types 
types arise existential universal quantification 
types code contexts store values types judgment form 
code context changes typing derivation normally omit judgment form rules 
int loc code memories memory partial map generic locations store values generic loc loc reg memories loc reg sval registers special second class locations may appear domain memory may appear stored locations 
notation manipulate memory 
dom denotes domain memory denotes store value location denotes memory maps dom update undefined 
set locations loc greatest member supremum set member infimum set total order 
reg 
undefined 
indicates memories disjoint domains denotes union disjoint memories domains memories disjoint operation undefined 
denotes union disjoint memories additional caveat dom dom empty 
formulae presents syntax formulae 
notation reminiscent connectives linear logic pfenning ordered logic :10.1.1.36.5390
logics approximate guide meaning formulae 
differences see 
addition multiplicative linear ordered connectives logic contains additive connectives quantification 
bindings quantification formulae describe sort integer proper location type formula bound variable 
reuse metavariable concrete locations location variable 
predicates formulae bindings sl formulae reason distinguish concrete location compute case location variable 
reader may assume occurrences denote variable noted text 
abbreviations common formulae 

abbreviated int 
abbreviated 
abbreviated ns metavariable range formulae shape rn logic contains quite number formulae need 
formula defined orthogonally understood independently 
logic sense choose subset formulae 
consequently system designer need understand implement connectives choose subset suits application 
semantics 
formulae describe memories write formula describes memory reader safely ignore superscript 
basic formulae predicates form 
predicates describe memories contain single location holds value type 
basic predicates describe infinite sequence locations increases left right 
indicate stack may grown left 
analogously may indicate region memory may grown right 
key reasoning adjacent memories form ordered conjunction call fuse 
semantically divided adjacent parts 
formally require 
get accustomed properties fuse reason memories contain locations set location set adjacent sequence 
memory domain describing notice may described formula supremum adjacent infimum 
memory described fuse generally commutative 
hand described 
supremum infimum adjacent infimum supremum respectively readily fuse describe relationship memories 
don know don care ordering relationship disjoint memories unordered multiplicative conjunction call tensor 
memory described exist 
definition differs definition disjoint union operator ordering requirements adjacent disjoint union operator 
see impact change consider memories 
memory domain describing memory described formula broken disjoint parts satisfy subformulae respectively 
memory satisfies formulae defined terms associative commutative disjoint union operator 
logic contains sort conjunction additive 
memory described formula memory thing 
described subformulae 
additive disjunction formulae describes memory entire memory described 
multiplicative describes empty memory serves right left unit fuse tensor 
words 
unit additive conjunction describes memory unit additive disjunction describes memories 
properties easily verified semantic definitions connectives 
semantics connectives largely standard 
semantics quantifiers notation denote capture avoiding substitution variable object extend notation substitution sequence bindings 

case objects substituted variables correct sort type formula location integer sequences length substitution undefined 
semantics formulae collected 
include semantics linear ordered implications interest space describe 
semantics connectives follow hearn 
extended example 
recall safe jump code location type requirements described satisfied current state machine 
specifically require current memory described dom dom dom dom exist exist memories memories dom dom memories dom dom conditions need satisfied false formula satisfied 


exists semantics formulae consider type code location things requires registers point locations memory contain address continuation mem 
int int mem cont cont mem number things note calling convention described type 
semantics dictate jump caller pack variable mem formula describes proper non register locations memory 
second formula describing proper locations abstracted variable mem code jump continuation register free subset memory state jumping caller may jump code location exists location register points location register points 
locations may may location illustrate considering different scenarios 
scenario 
consider memory concrete locations int int int consecutive proper locations may thought stack 
memory consists registers contain aliases location stack 
register contains code location conclude may safely jump code location current memory follows 
formula int describes describes formula int describes memory 
similarly conclude formula int describes 
formula int int int describes consecutive locations 
describes 
describes 
cont int int int mem describes 
formula describes int int int int int cont 
existential location serves witness int int int serves witness mem conclude 
mem 
int int mem cont consequently memory jump scenario 
consider memory identical location longer aliased registers reasoning similar conclude formula describes int int int int int cont 
conclude safe jump current memory existential locations witnesses respectively 
noted type ascribed somewhat simplistic 
normally formula describes stack variable mem type prohibits code allocating additional space stack 
rectify problem describe part memory additional stack cells may allocated requiring register rsp points top stack follows 
hd tail 
hd int int tail cont rsp hd cont hd tail contexts may model separation adjacency judgments form hearn pym logical contexts bunches trees simple lists 
nodes bunches labeled ordered separator unordered linear separator 
leaves bunches empty single formula labeled variable write contexts follows 
frequently reason context containing single hole may filled context 
metavariable range contexts hole write fill hole 
require variables repeated context consider undefined variables common 
hearn pym define equivalence relation contexts 
reflexive symmetric transitive closure axioms 







semantics 
individual formulae contexts describe memories 
semantics contexts appears 
notice semantics ordered separator mirrors semantics fuse semantics linear separator mirrors semantics tensor 
proofs require give semantics contexts hole 
semantic judgment form may read saying memory described hole filled context describes memory defined locations set dom dom dom dom dom dom 
dom dom dom dom 
semantics contexts basic semantic properties section outline simple necessary properties semantics 
need reason decomposition memory described context parts part described part described 
lemma allows decompose memories 
lemma semantic decomposition exist dom 
dom 
proof 
induction structure 
semantics distinguish equivalent contexts 
lemma soundness context equivalence proof 
induction definition context equivalence 
case equivalence rule lemma 
append operator requirements context disjoint union operator may easily prove memory described context described context 
notion formalized lemma 
lemma semantic disorder 
proof 
induction structure 
logical deduction support universal existential quantification extend judgments logic additionally depend variable context 
basic judgment natural deduction formulation logic form consists set variables may appear free variables may integer location type formula variables 
syntax bindings 
variable contexts inference rules see figures similar rules hearn pym highlight central differences 
important difference course presence ordered separator linear separator opposed linear separator additive separator focus hearn pym 
single unit contexts units hearn pym 
additive separator context elimination form additive conjunction slightly different elimination form hearn pym 
additives suggested hearn pym compatible system investigated possibility 
explicit structural rule mark movement equivalent contexts 
treat equivalence implicitly logical judgments inference rules operate equivalence classes contexts 
example write implicitly assume presence equivalence explicit rule 
rules figures define sound logical system 
application property possible forget adjacency information 
saw previous section lemma memory satisfies context imposes ordering conditions memory satisfy context impose ordering conditions words sound replace 
order include principle deductive system allow proof judgment form considered proof mark inclusion proof premise rule put asterisk name rule derivation 
inclusions give rise principle 
principle logical disorder borrow idea including sort proof pfenning davies judgmental reconstruction modal logic 
include proofs truth directly proofs possibility 
alternative approach add explicit structural rule prefer avoid structural rules rule changes structure height derivation 
logic obeys standard substitution principles deduction sound respect semantic model 
lemma substitution fv fv 

proof 
induction appropriate derivation case 
lemma soundness logical deduction proof 
induction natural deduction derivation 
operations formulae typing rules extensive operation look type location offset index formula 
facilitate operation notation defined follows 
definition formula lookup gi update type location formula notation defined follows 
hypothesis linear ordered unit linear conjunction hyp ordered conjunction linear implication ordered implications sl multiplicative connectives definition formula update def gi gi lemma states formula lookup update sound respect semantics 
lemma extensively proof soundness type system 
additive conjunction unit additive disjunction unit universal quantification existential quantification sl additive connectives quantifiers lemma 

proof 
soundness logical deduction semantics formulae 

simple assembly language section develop simplest possible assembly language allows write stack programs 
syntax main components program 
code region finite partial map code values blocks code block sequence instructions terminated jump instruction 
operands appear instructions values seen 
operands instructions add rd rs sub rd rs mov rd ld rd rs st rd rs blocks jmp code region types typing rules type system assembly language defined judgments 
operand type instruction requires context yields ok block formed context code region type assuming ok state formed judgments operands instructions blocks formally parameterized normally omit annotation 
static semantics figures 
assume type system context proof carrying code 
specifically assume complete derivation attached assembly language program needs checked safety 
check program formed need check corresponds attached derivation derivation uses rules type system associated logic 
problem inferring derivation unannotated program surely undecidable relevant code application compiler generate appropriate derivation highly structured program 
operand typing 
rules giving types store values extended allow give types operands include store values registers 
rule registers requires look type register formula describes current state 
instruction typing 
instruction typing performed context free variables described current state memory described input formula instruction generally transform state memory result new state described formula instance initial state described verify rs contain integers instruction add rd rs transforms state result described rd int 
resulting formula uses formula update notation defined section 
simple rule integer subtraction identical 
type check conditional branch show second operand code type formula describing current state entails requirements specified function type 
rule typing move straightforward 
rules typing load store instructions formula lookup operations 
formula lookup operation suffices verify location exists memory contains value type recall lemma 
type system allows simple pointer arithmetic sval reg rs int int add rd rs rd int add rs int int sub rd rs rd int sub int mov rd rd mov rs ld rd rs rd ld rd rs st rd rs rs add rd rs rd rs sub rd rs rd st addr add addr sub static semantics values instructions bump stack pointer 
rules addr add addr sub provide alternate typing rules addition subtraction operations 
rs contains constant variable location constant integer prove current memory described result addition location come know exactly locations re dealing 
fuse operator allows reason locations sequence formula adjacent locations 
may reason address subtraction typing rule analogously 
block typing 
block typing described 
basic block typing rules instr processes instruction block rest block jmp types jump instruction ends block 
block typing includes rules extend view memory retract view memory 
typically wish push data stack rule times ok jmp ok ok ok jmp instr ok ok ns ok ok ok ok unpack ok ok weaken dom dom dom 
implies ok ok ok ok state static semantics blocks states necessary add appropriate amount stack pointer store stack data wish keep 
pop stack reverse loading data stack registers subtracting appropriate amount stack pointer rule 
state typing 
rule typing code standard rule mutually recursive set functions 
rule typing machine state requires type check program check code currently executing assumption describes current memory example 
stack may save temporary values course computation 
code sequence saves registers rn contain values types stack performs computation restores values original registers 
formulae right instruction describe state memory step 
operational semantics machine states 
machine state tuple containing code region complete memory block code currently executed 
complete memory total function generic locations store values loc reg sval 
require memories complete order justify rule 
operational semantics 
define execution machine small step operational semantics operational semantics 
semantics convert operand value may stored location 
fact overloaded operate integers locations 
allows write single specification execution addition subtraction operations 
aside details operational semantics quite intuitive 
add rd rs rd rs sub rd rs rd rs mov rd rd ld rd rs rd rs st rd rs rs rd jmp operational semantics progress preservation demonstrate language sound proven progress preservation lemmas 
preservation requires lemma case rules 
lemma stack cut stack grow soundness complete memory ns proof 
inspection semantics formulae 
theorem progress preservation ok 


ok code describing formula rsp repeat times unpack repeat times ns ns rsp sub rsp rsp rsp rsp st rsp st rsp rn code rsp 
rsp ld rsp rsp 
ld rn rsp rsp add rsp rsp rsp rsp 
related logic type system assembly language grew number previous efforts handle explicit memory management type safe language 
language incorporates ability reason separation multiplicative connectives logic adjacency ordered connectives saving temporaries stack aliasing singleton types 
systems considered properties individually consider 
consider related primarily terms concepts 
separation aliasing 
immediately girard developed linear logic researchers rushed investigate computational interpretations logic take advantage separation properties safely manage memory 
projects linear logic variant type system lambda calculus explicit allocation deallocation memory 
early researchers consider problem safe initialization data safe low level programming languages jvml typed assembly language invented :10.1.1.24.6526
straightforward add extra junk type linear languages reason initialization 
new approach suggested john reynolds hearn 
substructural logic type lambda terms logic describe shape store 
focused hearn pym bunched logic contains additive linear separators linear ordered separators done 
consequently aware simple encoding stack memory management invariants system 
hearn briefly mentions adding adjacency operator logic bunched typing investigate idea detail 
alias types smith walker morrisett closely related reynolds hearn hoare logic :10.1.1.1.5638
key difference group uses singleton types encode aliasing relationships pointers 
borrow technique 
adjacency 
type system containing pairs uses juxtaposition type structure reason adjacent locations 
development proof carrying code typed assembly language provides motivation consider sophisticated logics reasoning adjacency interaction spatial concepts :10.1.1.12.4086
morrisett developed algebra lists reason adjacent locations stack 
discipline quite inflexible compared logic 
impossible hide relative order objects stack analogue tensor connective 
deficiency impossible store data deep stack 
analogue additive connectives allow specify different views stack 
stack typed assembly language quite limited ability handle aliasing 
research inspired pfenning ordered linear logic :10.1.1.36.5390
fact initially attempted encode memory invariants logic directly 
particular linear ordered judgment incompatible adjacency property desired 
formulae linear mobile may placed formulae juxtaposed 
describes relative ordering necessarily adjacency 
pfenning ordered logic works type system ordered lambda calculus 
pfenning applied logic problem reasoning continuations allocated deallocated stack 
petersen observed pfenning mobility modality interpreted pointer indirection fuse connective join adjacent structs 
develop calculus ideas reason allocation pointer bumping commonly done copying garbage collector 
petersen consider aliasing separation deallocation data 

investigate explicit memory management type safe language tofte talpin developed provably sound system regionbased memory management 
approximately time reynolds hearn investigating semantics algol translation low level languages explicit memory management 
development proof carrying code typed assembly language provided new motivation study safe memory management low level abstraction :10.1.1.12.4086
researchers developed rich logics capable expressing essentially compile time property programs 
instance appel higherorder logic code semantics flexible type system shao crary incorporate logical frameworks type systems 
effort implementors surely code abstractions systems 
logic language serves purpose settings may convenient concise logical intermediate language 
matter powerful logic necessary think carefully structure proofs 
research defines logic just right level abstraction reasoning stack provides structure 
bunched logic described extended allow reasoning hierarchical memory management 
extended logic describe layout bits memory word layout memory words region layout regions address space layout address spaces multiprocessing environment 
ahmed logic develop type system simplified version kit machine intermediate language ml kit regions 

directions 
continue investigate substructural logics reasoning explicit memory management 
particular determine find logic deduction complete memory model related model store model hearn 
second study certifying compilation stack allocation algorithms detail 
limitations stack logic 
current optimization techniques capture 
third feel confident able walker morrisett recursive formulae hearn inductive definitions code recursive data structures handle topic deserves deeper investigation 
discussed arrays 
handled special macro bounds check system need augmented arithmetic formulae xi pfenning 
acknowledgments bob harper leaf petersen stimulating conversations early development peter hearn comments earlier version 
peter helped explain details bunched logic 

ahmed jia walker 
reasoning hierarchical memory management 
unpublished manuscript nov 
appel 
foundational proof carrying code 
sixteenth annual ieee symposium logic computer science pages 
ieee 
appel felty 
semantic model types machine instructions proof carrying code 
seventh acm symposium principles programming languages pages 
acm press jan 

chang crary harper vii pfenning 
grid computing concert 
grid workshop number lncs 
springer verlag 
chirimar gunter riecke 
counting computational interpretation linear logic 
journal functional programming mar 
crary 
expressive scalable type theory certified code 
acm international conference functional programming pittsburgh oct 
acm press 
deline hndrich 
enforcing high level protocols low level software 
acm conference programming language design implementation pages snowbird utah june 
acm press 
elsman 
region machine ml kit 
technical report tr royal veterinary agricultural university denmark university copenhagen august 
university technical report series 

girard 
linear logic 
theoretical computer science 
grossman morrisett jim hicks wang cheney 
region memory management cyclone 
acm conference programming language design implementation berlin june 
acm press 
hofmann 
type system bounded space functional place update extended 
smolka editor european symposium programming volume lecture notes computer science pages berlin mar 
hearn 
bi assertion language mutable data structures 
eighth acm symposium principles programming languages pages london uk jan 
lafont 
linear machine 
theoretical computer science 
lindholm yellin 
java virtual machine specification 
addison wesley 
morrisett crary glew walker 
stack typed assembly language 
second international workshop types compilation pages kyoto mar 
published xavier leroy atsushi ohori editors lecture notes computer science volume pages 
springer verlag 
morrisett crary glew walker 
stack typed assembly language 
journal functional programming jan 
morrisett walker crary glew 
system typed assembly language 
acm transactions programming languages systems may 
necula 
proof carrying code 
fourth acm symposium principles programming languages pages paris 
necula lee 
safe kernel extensions run time checking 
proceedings operating system design implementation pages seattle oct 
callahan 
simple comprehensive type system java bytecode subroutines 
sixth acm symposium principles programming languages pages san antonio jan 
hearn 
bunched typing 
journal functional programming 
appear 
hearn pym 
logic bunched implications 
bulletin symbolic logic 
hearn reynolds yang 
local reasoning programs alter data structures 
computer science logic number lncs pages paris 
hearn reynolds 
algol polymorphic linear lambda calculus 
journal acm 
petersen harper crary pfenning 
type theory memory allocation data layout 
acm symposium principles programming languages jan 
appear 
pfenning davies 
judgment reconstruction modal logic 
mathematical structures computer science 
appear 

ordered linear logic applications 
phd thesis carnegie mellon university 
available technical report cmu cs 
pfenning 
natural deduction intuitionistic non commutative linear logic 

girard editor typed lambda calculi applications volume lecture notes computer science pages berlin 
springer verlag 
pfenning 
relating natural deduction sequent calculus intuitionistic non commutative linear logic 
electronic notes theoretical computer science 
pfenning 
properties terms continuation passing style ordered logical framework 
workshop logical frameworks meta languages santa barbara june 
reynolds 
functor categories generate intermediate code 
second acm symposium principles programming languages pages san francisco jan 
reynolds 
intuitionistic reasoning shared mutable data structure 
perspectives computer science 
seti home 
ssl berkeley edu 
shao saha trifonov 
type system certified binaries 
acm symposium principles programming languages london jan 
acm press 
smith walker morrisett 
alias types 
european symposium programming pages berlin mar 
tofte birkedal elsman olesen sestoft bertelsen 
programming regions ml kit version 
technical report computer science department university copenhagen 
tofte 
talpin 
region memory management 
information computation 
wadler 
linear types change world 
broy jones editors concepts methods sea israel apr 
north holland 
ifip tc working conference 
walker 
typed memory management 
phd thesis cornell university jan 
walker crary morrisett 
typed memory management calculus capabilities 
acm transactions programming languages systems may 
walker morrisett 
alias types recursive data structures 
workshop types compilation montreal sept 
xi pfenning 
eliminating array bound checking dependent types 
acm conference programming language design implementation pages montreal june 
