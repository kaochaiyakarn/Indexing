congestion control linux tcp pasi university helsinki department computer science pasi cs helsinki fi institute nuclear research moscow ms inr ac ru tcp protocol majority network applications internet 
tcp performance strongly influenced congestion control algorithms limit amount transmitted traffic estimated network capacity utilization 
freely available linux operating system gained popularity especially network servers tcp implementation affects network interactions carried today 
describe fundamentals linux tcp design concentrating congestion control algorithms 
linux tcp implementation supports sack tcp timestamps explicit congestion notification techniques undo congestion window adjustments incorrect congestion notifications 
addition features specified ietf linux implementation details specifications aimed improve performance 
discuss show performance effects quick rate halving algorithms correcting incorrect congestion window adjustments comparing performance linux tcp implementing features performance achieved implementation algorithms question 
transmission control protocol tcp pos ste evolved years commonly transport protocol internet today 
important characteristic feature tcp congestion control algorithms essential preserving network stability network load increases 
tcp congestion control principles require tcp sender detects packet loss reduce transmission rate packet probably dropped congested router 
linux freely available unix operating system gained popularity years 
linux source code publicly available linux attractive tool computer science researchers various research areas 
large number people contributed linux development lifetime 
people find tedious study different aspects linux behavior just reading source code 
describe design solutions selected tcp implementation linux kernel version 
linux tcp implementation contains features differ tcp implementations today believe protocol designers working tcp find features interesting considering 
internet protocols standardized internet engineering task force ietf documents called request comments rfc 
currently thousands rfcs tens related tcp protocol 
addition mandatory tcp specifications number experimental informational specifications tcp enhancements improving performance certain conditions im linux kernel source obtained www kernel org 
plemented optionally 
building single consistent protocol implementation conforms different rfcs straightforward task 
example tcp congestion control specification aps gives detailed description basic congestion control algorithm making easier implementor apply 
tcp implementation supports sack tcp mmfr needs follow congestion control specifications partially different set concepts variables standard congestion control rfc ff baf 
strictly algorithms specifications implementation unnecessarily complicated usually algorithms need included tcp implementation time 
approach taken linux tcp implementing congestion control algorithms 
linux tcp implements rfc specifications single congestion control engine common code supporting sack tcp newreno tcp sack information 
addition linux tcp refines specifications order improve tcp efficiency 
describe linux specific protocol enhancements 
additionally goal point details linux tcp behavior differs conventional tcp implementations rfc specifications 
organized follows 
section describe tcp protocol congestion control algorithms detail 
section introduce main concepts linux tcp congestion control engine describe main algorithms governing packet retransmission logic 
section describe number linux specific features example concerning retransmission timer calculation 
section discuss linux tcp conforms ietf specifications related tcp congestion control section illustrate performance effects selected design solutions 
section conclude 
tcp basics briefly describe tcp congestion control algorithms referred 
congestion control algorithms play important role tcp performance number enhancements tcp algorithms suggested 
describe ones considered important 
point details considered problematic current tcp specifications ietf motivation linux tcp approach 
congestion control tcp protocol basics specified rfc pos 
order avoid network congestion serious problem number network hosts increased dramatically basic algorithms performing congestion control jacobson jac 
congestion control algorithms included standards track tcp specification ietf aps 
tcp sender uses congestion window cwnd regulating transmission rate feedback gets network 
congestion window tcp sender estimate data outstanding network packets lost 
initializing cwnd segments tcp sender allowed increase congestion window slow start algorithm segment incoming ack congestion avoidance rate segment round trip time 
slow start threshold ssthresh determine slow start congestion avoidance algorithm 
tcp sender starts slow start algorithm moves congestion avoidance cwnd reaches ssthresh 
tcp sender detects packet losses incoming duplicate generated receiver receives order segments 
successive duplicate acks sender retransmits segment sets ssthresh half amount currently outstanding data 
cwnd set value ssthresh plus segments accounting segments left network arrived duplicate acks 
effect sender halves transmission rate loss event 
done packet loss taken indication congestion sender needs reduce transmission rate alleviate network congestion 
retransmission due incoming duplicate acks called fast retransmit 
fast retransmit tcp sender follows fast recovery algorithm segments window acknowledged 
fast recovery tcp sender maintains number outstanding segments sending new segment incoming congestion window allows 
tcp congestion control specification temporarily increases congestion window incoming duplicate ack allow forward transmission segment back value fast recovery fast recovery 
variants fast recovery algorithm suggested ietf 
standard variant exits fast recovery advancing window arrives sender 
segment dropped window standard fast retransmit perform efficiently 
alternative called newreno suggested fh improve tcp performance 
newreno tcp exits fast recovery segments window successfully acknowledged 
retransmissions may triggered retransmission timer expires tcp sender new data acknowledged 
retransmission timeout rto taken loss indication triggers retransmission unacknowledged segments 
addition rto occurs sender resets congestion window segment rto may indicate network load changed dramatically 
tcp sender estimates packet round trip times rtt uses estimator determining rto value 
segment arrives tcp sender ietf specifications instruct adjust rto value follows pa rttvar rttvar rj srtt srtt rto max srtt rttvar measured round trip time rttvar variation round trip times srtt smoothed mean round trip time measurements 
enhancements recovery packet losses inefficient standard tcp cumulative allow retransmission round trip time 
selective sack mmfr suggested possible receiver acknowledge scattered blocks incoming data single cumulative allowing tcp sender retransmission round trip time 
sack ends tcp connection support 
availability sack information allows tcp sender perform congestion control accurately 
temporarily adjusting congestion window sender keep track amount outstanding data compare congestion window deciding transmit new segments baf 
unacknowledged segments treated different ways accounting outstanding data 
conservative approach promoted ietf consider unacknowledged data outstanding network 
forward fack algorithm mm takes aggressive approach considers unacknowledged holes sack blocks lost packets 
approach results better tcp performance conservative approach overly aggressive packets reordered network holes sack blocks indicate lost packets case 
sack blocks reporting spurious retransmissions 
duplicate sack sack enhancement fmmp allows tcp receiver report duplicate segments gets sack blocks 
having information tcp sender conclude certain circumstances unnecessarily reduced congestion control parameters revert parameters values preceding retransmission 
example packet reordering potential reason unnecessary retransmissions order segments trigger duplicate acks receiver 
tcp timestamp option suggested allow accurate round trip time measurements especially network paths high bandwidth delay product 
timestamp attached tcp segment echoed back segment 
echoed timestamp tcp sender measure exact round trip times segments measurement deriving retransmission timeout estimator 
addition exact round trip time measurement tcp timestamps allows algorithms protecting old segments previous incarnations tcp connection 
timestamp option allows detection unnecessary retransmissions 
eifel algorithm lk sug retransmitted segment echoes timestamp earlier timestamp retransmission stored sender original segment arrived receiver retransmission unnecessarily 
case tcp sender continue sending new data revert changes congestion control parameters 
inferring congestion lost packets explicit congestion notification ecn rfb suggested routers explicitly mark packets arrive congested point network 
tcp sender receives echoed ecn notification receiver reduce transmission rate mitigate congestion network 
ecn allows tcp senders congestion aware necessarily suffering packet losses 
criticism details ietf specifications problematic practice 
rfcs suggest general algorithm applied implementation combining algorithms rfcs may inconvenient 
example combining congestion control requirements sack tcp newreno tcp turns problematic due different variables algorithms specifications 
tcp congestion control specifications artificially increase congestion window fast recovery order allow forward transmissions keep number outstanding segments stable 
congestion window size reflect number segments allowed outstanding fast recovery 
fast recovery congestion window back proper size 
procedure needed congestion window traditionally evaluated difference highest data segment transmitted snd nxt unacknowledged segment snd una 
flexible method evaluating number outstanding segments congestion window size constantly maintained proper level corresponding network capacity 
adjusting congestion window consistently issue especially sack information tcp sender 
selective sender derive number packets better accuracy just cumulative 
order coherent implementation congestion control algorithms desirable common variables routines sack tcp tcp variant support sack 
details rto algorithm questioned 
networks round trip delays tens milliseconds rto algorithm details may significant effect tcp performance minimum rto value limited second 
high delay networks effectiveness rto calculation important 
pointed rto estimator results overly large values due weight variance round trip time round trip time suddenly drops reason 
hand congestion window size increases steady pace slow start possible rto estimator increased fast due small variance round trip times 
may result spurious retransmission timeouts 
alternative rto estimators eifel retransmission timer ls suggested overcome potential problems standard rto algorithm 
eifel retransmission timer efficient avoiding problems standard rto algorithm introduces complex set equations compared standard rto 
evaluating possible side effects different network scenarios eifel rtt dynamics difficult 
linux approach linux conforms tcp congestion control principles takes different approach carrying congestion control 
comparing congestion window difference snd nxt snd una linux tcp sender determines number packets currently outstanding network 
linux tcp sender compares number outstanding segments congestion window making decisions transmit 
linux tracks number outstanding segments units full sized packets tcp specifications implementations compare cwnd number transmitted octets 
results different behavior small segments implementation uses congestion window allows small segments injected network full sized segment congestion window 
linux hand allows packet transmitted segment congestion window regardless size 
linux conservative compared byte approach tcp payload consists small segments 
linux tcp sender uses set concepts functions determining number outstanding packets newreno recovery flavors sack recovery supported 
sack information sender follow forward fack mm approach considering holes sack blocks lost segments conservative approach similar ongoing ietf baf 
alternative unacknowledged segments considered outstanding network 
basis recovery methods linux tcp sender uses equations left flight left defining number segments outstanding network 
equation packets number originally transmitted segments snd una number segments acknowledged sack blocks lost estimation number segments lost network number retransmitted segments 
determining lost parameter depends selected recovery method 
example fack unacknowledged segments highest sack block cumulative counted lost 
selected approach easy add new heuristics evaluating segments lost 
absence sack information linux tcp sender increases incoming duplicate 
conformance tcp congestion control specification resulting behavior similar newreno algorithm forward transmissions 
design chosen linux require arbitrary adjusting congestion window cwnd holds valid number segments allowed outstanding network fast recovery 
counters tracking number outstanding acknowledged lost retransmitted packets require additional data structures supporting 
linux sender maintains state outstanding segment scoreboard marks known state segment 
segment marked outstanding acknowledged retransmitted lost 
combinations bits possible 
example segment declared lost retransmitted case sender expecting get retransmission 
information linux sender knows segments need retransmitted adjust counters determining flight new arrives 
scoreboard plays important role determining segment incorrectly assumed lost example due packet reordering 
scoreboard markings counters determining flight variable consistent state times 
markings outstanding acknowledged retransmitted segments straightforward maintain place lost mark depends recovery method 
newreno recovery marked lost sender enters fast recovery 
effect corresponds fast retransmit ietf congestion control specifications 
furthermore partial ack acknowledging data outstanding fast recovery arrives unacknowledged segment marked lost 
results retransmission unacknowledged segment newreno specification requires 
sack segment marked lost time 
conservative approach tcp sender count holes acknowledged blocks lost fack enabled sender marks holes sack blocks lost soon appear 
lost counter adjusted appropriately 
linux tcp sender governed state machine determines sender actions arrive 
states follows open 
normal state tcp sender follows fast path execution optimized common case processing incoming 
arrives sender increases congestion window slow start congestion avoidance depending congestion window smaller larger slow start threshold respectively 
disorder 
sender detects duplicate acks selective moves disorder state 
state congestion window adjusted incoming packet triggers transmission new segment 
tcp sender follows packet conservation principle jac states new packet sent old packet left network 
practice behavior state similar limited transmit proposal ietf abf suggested allow efficient recovery fast retransmit congestion window small large number segments lost window transmission 
cwr 
tcp sender may receive congestion notifications explicit congestion notification icmp source quench pos local device 
receiving congestion notification linux sender reduce congestion window segment second incoming ack window size halved 
sender process reducing congestion window size outstanding retransmissions cwr congestion window reduced state 
cwr state interrupted recovery loss states described 
recovery 
sufficient amount successive duplicate acks arrive sender retransmits unacknowledged segment enters recovery state 
default threshold entering recovery successive duplicate acks value recommended tcp congestion control specification 
recovery state congestion window size reduced segment second incoming similar cwr state 
window reduction ends congestion window size equal ssthresh half window size entering recovery state 
congestion window increased recovery state sender retransmits segments marked lost forward transmissions new data packet conservation principle 
sender stays recovery state segments outstanding recovery state entered successfully acknowledged 
sender goes back open state 
retransmission timeout interrupt recovery state 
loss 
rto expires sender enters loss state 
outstanding segments marked lost congestion window set segment sender starts increasing congestion window slow start algorithm 
major difference loss recovery states loss state congestion window increased sender reset segment recovery state congestion window size reduced 
loss state interrupted state sender exits open state data outstanding loss state began successfully acknowledged 
example fast retransmit triggered loss state conformance newreno specification 
linux tcp avoids explicit calls transmit packet mentioned states example regarding fast retransmit 
current congestion control state determines congestion window adjusted sender considers unacknowledged segments lost 
tcp sender processed incoming state presently transmits segments flight smaller cwnd 
sender retransmits earlier segments marked lost retransmitted new data segments lost segments waiting retransmission 
occasions number outstanding packets decreases suddenly segments 
example retransmitted segment forward transmissions acknowledged single cumulative ack 
situations cause bursts data transmitted network taken account tcp sender implementation 
linux tcp sender avoids bursts limiting congestion window allow segments transmitted incoming ack 
burst avoidance may reduce congestion window size slow start threshold possible sender enter slow start segments acknowledged single ack 
tcp connection established tcp variables need initialized fixed values 
order improve communication efficiency connection linux tcp sender stores destination cache slow start threshold variables rto estimator estimator measuring reordering tcp connection 
connection established destination ip address cache cached values get adequate initial values new tcp connection 
network conditions sender receiver change reason values destination cache get momentarily outdated 
consider minor disadvantage 
features list selected linux tcp features differ typical tcp implementation 
linux implements number tcp enhancements proposed ietf explicit congestion notification rfb sack fmmp 
knowledge features widely deployed tcp implementations promoted ietf 
retransmission timer calculation tcp implementations coarse grained retransmission timer having granularities ms round trip time samples measured round trip time 
addition retransmission timer specification requires rto timer second 
considering networks provide round trip times ms studying feasibility traditional retransmission timer algorithm standardized ietf excited interest 
linux tcp retransmission timer granularity ms sender takes round trip time sample segment 
capable achieving accurate estimations retransmission timer assumptions timer algorithm correct 
linux tcp deviates ietf specification allowing minimum limit ms rto 
finer timer granularity smaller minimum limit rto timer correctness algorithm determining rto important coarse grain timer 
traditional algorithm retransmission timeout computation problematic networking environments ls 
especially true fine grained timer round trip time samples taken segment 
section described problems regarding standard rto algorithm 
round trip time decreases suddenly rtt variance increases momentarily causes rto value overestimated 
second rtt variance decay small value rtt samples taken segment window large 
increases risk spurious rtos result unnecessary retransmissions 
linux rto estimator attacks problem giving weight measured mean deviance measured rtt decreases significantly smoothed average 
reduced weight sample multipliers standard rto algorithm 
sample weighed corresponding multiplier rtt measurement srtt equation section 
second multiplied corresponding weight rttvar standard rto algorithm 
choosing weight current effect sudden change measured rtt rto estimator assures rto holds steady value measured rtt drops suddenly 
avoids unwanted peak rto estimator value maintaining conservative behavior 
round trip times stay reduced level measurements rto estimator starts decrease slowly lower value 
summary equation calculating follows rj rj round trip time measurement srtt smoothed average round trip time 
linux directly modify rttvar variable adjustments variable adjusting rttvar determines rto 
srtt rto estimator variables set standard specification 
separate variable needed linux tcp sender allows decreasing rttvar variable round trip time 
rttvar increased immediately gives higher estimate rttvar maximum estimates round trip time 
purpose solution avoid problem underestimated rtos due low round trip time variance second problems described earlier 
linux tcp supports tcp timestamp option allows accurate round trip time measurement retransmitted segments possible timestamps 
having proper algorithm rto calculation important timestamp option 
experiments algorithm proposed gives reasonable rto estimates tcp timestamps avoids pitfalls standard algorithm 
rto timer reset time advancing window arrives sender 
rto timer reset sender enters recovery state retransmits segment 
rest recovery state rto timer reset packet marked lost rto worth time passed transmission segment 
allows efficient retransmission packets recovery state information sufficient declare packet lost 
method segments retransmitted 
undoing congestion window adjustments currently mechanisms internet provide explicit loss information tcp sender needs speculate keeping track packets lost network 
example reordering problem tcp sender distinguish missing acks caused packet loss delayed packet arrive 
linux tcp sender detect unnecessary congestion window adjustments necessary corrections congestion control parameters 
purpose entering recovery loss states linux tcp sender stores old ssthresh value prior adjusting 
delayed segment trigger unnecessary retransmission due spurious retransmission timeout due packet reordering 
linux tcp sender mainly methods detecting unnecessarily retransmitted segment 
firstly receiver inform duplicate sack sack incoming segment received 
segments retransmitted recovery period acknowledged sack sender knows recovery period unnecessarily triggered 
secondly linux tcp sender detect unnecessary retransmissions tcp timestamp option attached tcp header 
option tcp receiver echoes timestamp segment triggered back sender allowing tcp sender conclude ack triggered original retransmitted segment 
eifel algorithm uses similar method detecting spurious retransmissions 
unnecessary retransmission detected tcp timestamps logic undoing congestion window adjustments simple 
sender loss state retransmitting rto triggered unnecessarily lost mark removed segments scoreboard causing sender continue transmitting new data retransmissions 
addition cwnd set maximum value ssthresh ssthresh set prior value stored earlier 
ssthresh set half number outstanding segments packet loss detected effect continue congestion avoidance similar rate loss state entered 
unnecessary retransmission detected tcp timestamps sender recovery state 
case recovery state finished normally exception congestion window increased maximum value ssthresh ssthresh set prior value 
addition partial ack unnecessary retransmission arrives sender mark unacknowledged segment lost continues scoreboard markings possibly transmitting new data 
order sack undoing congestion control parameters tcp sender tracks number retransmissions declared unnecessary reverting congestion control parameters 
sender detects sack block reduces number outstanding retransmissions 
sack blocks eventually acknowledge retransmission window unnecessarily retransmission counter falls zero due sender increases congestion window reverts modification ssthresh similarly described 
handling unnecessary retransmissions linux tcp sender maintains metric measuring observed reordering network variable reordering 
variable stored destination cache connection finished 
reordering updated linux sender detects unnecessary retransmission recovery state tcp timestamps sack incoming unacknowledged hole sequence number space selectively acknowledged sequence numbers 
cases reordering set number segments highest segment acknowledged currently acknowledged segment words corresponds maximum distance reordering segments detected network 
additionally fack reordering detected sender switches conservative variant sack aggressive network involving reordering 
delayed tcp specifications state tcp receiver delay maximum time ms order avoid silly window syndrome cla 
specifications mandate specific delay time implementations static delay ms purpose 
fixed delay time may adequate networking environments different properties 
linux tcp receiver adjusts timer delaying dynamically estimate doubled packet interarrival time sending second incoming segment 
similar approach suggested early rfc clark cla 
maximum delay sending limited ms delayed acks slows tcp sender increases congestion window size rate incoming 
order speed transmission slow start linux tcp receiver refrains delaying incoming segments connection 
called quick 
number quick sent linux tcp receiver half number segments required reach receiver advertised window limit 
quick open opportunity silly window syndrome occur 
addition linux receiver monitors traffic appears bidirectional case disables quick mechanism 
done avoid transmitting pure unnecessarily piggybacked data segments 
congestion window validation linux sender reduces congestion window size fully rto estimate worth time 
scheme similar congestion window validation suggested ietf hpf 
motivation congestion window validation congestion window fully tcp sender may invalid estimate network conditions 
network friendly sender reduce congestion window precaution 
congestion window validation triggered tcp sender decreases congestion window half way window congestion window 
doing ssthresh set maximum current value congestion window suggested rfc 
explicit congestion notification linux implements explicit congestion notification ecn allow ecn capable congested routers report congestion dropping packets 
congested router mark bit ip header echoed tcp sender ecn capable receiver 
tcp sender gets congestion signal enters cwr state gradually decreases congestion window half current size rate segment incoming 
making possible tcp sender avoid congestion losses ecn expected improve network performance widely deployed internet routers 
conformance ietf specifications linux combines features specified different ietf specifications certain design principles described earlier ietf specifications fully implemented algorithms rfcs 
table shows view rfc specifications related tcp congestion control implemented linux 
features shown table linux fully follow specification details 
features marked asterisk table explain differences linux corresponding rfc detail 
linux fast recovery fully follow behavior rfc 
sender adjusts threshold triggering fast retransmit dynamically observed reordering network 
possible third duplicate ack trigger fast retransmit situations 
second linux sender artificially adjust congestion win table tcp congestion control related ietf specifications implemented linux 
implemented implemented details differ specification 
specification status rfc perf 
extensions rfc sack rfc ctrl block sharing rfc congestion control rfc newreno rfc cwnd validation rfc sack rfc rto rfc lim 
xmit rfc ecn dow fast recovery maintains size adjusting flight estimator incoming 
different approach cause significant effect tcp performance entering fast recovery linux sender reduce congestion window size rfc suggests 
sender decreases congestion window size gradually segment incoming congestion window meets half original value 
approach originally suggested hoe hoe named rate halving expired internet draft mathis rate halving avoids pauses transmission slightly aggressive congestion notification congestion window reached proper size 
described section round trip time estimator rto calculation linux differs proposed standard specification ietf 
linux follows basic patterns rfc implementation differs specification adjusting rttvar 
significant difference rfc linux implementation linux uses minimum rto limit ms ms rfc 
rfc defines format basic usage sack blocks give detailed specification congestion control algorithm sack 
applying fack congestion control algorithm linux default violate current ietf specifications 
fack results overly aggressive behavior packets reordered network linux sender changes fack conservative congestion control algorithm detects reordering 
ietf currently progress draft defining congestion control algorithm sack baf similar conservative sack alternative linux 
furthermore linux follows sack basics rfc 
linux implements rfc defines tcp timestamp window scaling options limited transmit enhancement defined rfc taken care disorder state linux tcp state machine 
reordering estimator increased default segments linux tcp sender transmits new segment incoming acks 
linux destination cache provides functionality similar rfc proposes control block interdependence tcp connections 
performance issues concluding illustrate performance implications quick rate halving congestion window reverting 
disabling features comparing diagrams pure linux tcp implementation implementation corresponding feature disabled 
linux hosts connection endpoints communicating kbps link mtu bytes 
sender kbps link tail drop router buffer space packets connected sender high bandwidth link small latency 
test setup illustrated 
addition low bandwidth link router tcp receiver fairly high propagation delay ms slow link router emulated real time network emulator 
network emulator control link network parameters collect statistics log network behavior help analysis 
tcp sink tcp sender router mbps kbps ms ms test setup 
illustrate effect quick tcp throughput 
shows slow start performance unmodified linux implementing quick time sequence number bytes data sent ack rcvd quick enabled 
time sequence number bytes data sent ack rcvd quick disabled 
effect quick slow start performance 
shows performance implementation quick mechanism disabled 
implementation applies static delay ms transmits immediately full sized segment worth unacknowledged data arrived 
see link high bandwidth delay product link benefit quick noticeable 
unmodified linux sender transmitted kb seconds quick acknowledgments disabled takes seconds sender transmit kb 
example unmodified linux receiver quick enabled sent ack packets implementation quick sent ack packets 
quick cause acks generated network conventional delayed acks sender congestion window increases slightly faster 
improves tcp performance network slightly prone congestion 
rate halving expected result similar average transmission rate conventional tcp fast recovery transmission segments smoothly making tcp sender reduce congestion window steadily making sudden adjustment 
illustrates performance unmodified linux tcp implementing rate halving illustrates performance implementation conventional fast recovery behavior 
figures illustrate receiver advertised window uppermost line limits fast recovery example 
scenario figures router buffer filled packets dropped due congestion feedback packet loss arrives sender 
packet losses bottleneck link due initial slow start called slow start overshooting 
figures show seconds tcp variants transmitted kb 
behavior unmodified linux tcp different tcp rate halving disabled 
conventional fast recovery tcp sender stops sending new data number outstanding segments dropped half original amount sender algorithm lets number outstanding segments reduce steadily rate segment incoming 
variants suffer advertised window limitation allow sender transmit new data congestion window 
show timestamp undoing affects tcp performance 
generated second delay long trigger retransmission timeout tcp sender 
shows tcp implementation tcp timestamp option enabled shows scenario timestamps disabled 
arrive sender burst delay packets queue emulated link receive buffers re time data sent ack rcvd win rate halving enabled 
time sequence number bytes data sent ack rcvd win rate halving disabled 
effect rate halving tcp performance 
leased delay timestamps improve tcp performance considerably tcp sender detects retransmission original transmission segment 
sender revert ssthresh previous value increase congestion window 
linux tcp sender avoids unnecessary retransmissions segments window 
ack burst injected receiver delay causes new segments transmitted sender short time interval 
sender follows slow start correctly clocked incoming segments transmitted unnecessarily 
conventional tcp sender implementing congestion window reverting retransmits window delayed segment unnecessarily 
waste available bandwidth retransmitted segments appearing order data receiver trigger duplicate acknowledgments 
tcp sender loss state duplicate acks cause retransmissions 
see conventional tcp sender timestamps received kb data seconds transmission begun linux sender implementing tcp timestamps delay stands emulated events link layer example representing persistent retransmissions erroneous link layer frames 
link receive buffer holds successfully received packets period retransmissions able deliver order receiver 
congestion window reverting received kb data 
linux tcp sender having tcp timestamps enabled retransmitted kb packets linux tcp sender timestamps retransmitted kb packets test case transmitting kb 
link scenario test runs having second delay middle transmission 
tcp timestamps tcp sender retransmitted packets unnecessarily 
basic ideas linux tcp implementation gave description details differ typical tcp implementation 
linux implements tcp enhancements suggested ietf draft state 
linux provides platform testing interoperability enhancements actual network 
current design easy implement study alternative congestion control policies 
linux tcp behavior strongly governed packet conservation principle sender estimate packets network acknowledged declared lost 
retransmit transmit new data depends markings tcp scoreboard 
cases requirements ietf violated time data sent ack rcvd tcp timestamps enabled 
time sequence number bytes data sent ack rcvd tcp timestamps disabled 
effect congestion window undoing tcp performance 
marginal scenarios detailed behavior may different ietf specifications 
tcp essentials particular congestion control principles conservation packets maintained cases 
selected approach problematic implementing features 
linux combines features different ietf specifications congestion control engine implementation may break parts retransmission logic 
example balance congestion window flight variable broken fast recovery algorithm may correctly situations 
craig metz useful feedback preparation 
abf allman balakrishnan floyd 
enhancing tcp loss recovery limited transmit 
rfc january 
aps allman paxson stevens 
tcp congestion control 
rfc april 
baf allman fall 
conservative sack loss recovery algorithm tcp 
internet draft tcp sack txt november 
progress 
borman braden jacobson 
tcp extensions high performance 
rfc may 
cla clark 
window strategy tcp 
rfc july 
ff fall floyd 
simulation comparisons tahoe reno sack tcp 
acm computer communication review july 
fh floyd henderson 
newreno modification tcp fast recovery algorithm 
rfc april 
fmmp floyd mahdavi mathis podolsky 
extension selective acknowledgment sack option tcp 
rfc july 
hoe hoe 
start dynamics tcp congestion control avoidance schemes 
master thesis massachusetts institute technology june 
hpf handley padhye floyd 
tcp congestion 
rfc june 
jac jacobson 
congestion avoidance control 
proceedings acm sigcomm pages august 
manner 
wireless network emulator 
proceedings th gi itg conference measuring modelling evaluation computer communication systems pages aachen germany september 
vde verlag 
lk ludwig katz 
eifel algorithm making tcp robust spurious retransmissions 
acm computer communication review january 
ls ludwig 
eifel retransmission timer 
acm computer communication review july 
mm mathis mahdavi 
forward refining tcp congestion control 
proceedings acm sigcomm october 
mmfr mathis mahdavi floyd romanow 
tcp selective options 
rfc october 
pa paxson allman 
computing tcp retransmission timer 
rfc november 
pos postel 
internet control message protocol 
rfc september 
pos postel 
transmission control protocol 
rfc september 
rfb ramakrishnan floyd black 
addition explicit congestion notification ecn ip 
rfc september 
ste stevens 
tcp ip illustrated volume protocols 
addison wesley 
