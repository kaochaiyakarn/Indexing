issn de recherche institut national de recherche en informatique en automatique enforcing high level security properties applets gilles barthe lilian burdy marieke huisman jean louis december unit de recherche inria sophia antipolis route des lucioles bp sophia antipolis cedex france enforcing high level security properties applets gilles barthe lilian burdy marieke huisman jean louis calcul projet everest rapport de recherche december pages smart card applications handle privacy sensitive information obey certain security policies 
policies usually described high level security properties stating example authentication take place transaction 
behavioural interface speci cation languages jml java modeling language successfully validate functional properties smart card applications 
high level security properties expressed directly languages 
proposes method translate high level security properties jml annotations 
method proceeds synthesising appropriate annotations weaving application 
way security policies validated various existing tools jml 
method general applies large class security properties 
illustrate applicability applied method realistic examples smart card applications 
allowed nd violations documented security policies applications 
key words security applets java card speci cation generation cation de de pour des applications carte les applications aux sont pour des du point de vue de la 
en se des de par des de niveau 
de par exemple qu cation ne doit lieu au cours une transaction ou qu exception qu une exception dans la iso ne peut 
des langages de cations tel que jml java modeling language ont employ avec succs pour des applications sur des 
les de de niveau ne peuvent pas le plus etre dans ces languages 
cet article propose donc une pour les de niveau en cations jml 
la travers une application des annotations une 
ainsi dans une tape la de peut etre en les de validation pour jml 
la est peut etre une grande des de 
elle sur plusieurs applications pour carte de des violations de de 
mots cls applets java card des cations enforcing high level security properties applets program veri cation techniques increasingly advocated industry way provide high quality software 
particular context smart cards successfully verify functional properties interoperability applications discover subtle programming errors remain undetected intensive testing 
current techniques appropriate verify typical security policies applets smart card applications expressed high level rules authentication take place transaction applet personalised 
cost employing program veri cation techniques remains important obstacle 
experiences con rmed roadmaps smart card research show di culty learning speci cation language internals may obscure programmers large amount required formally specify verify applications constitute major obstacles program veri cation techniques industry 
formal methods java java card tries tackle problems 
reduce di culty learning speci cation language java modeling language jml designed easily accessible speci cation language 
uses java syntax speci cation speci keywords added 
jml allows developers specify properties program generalisation hoare logic tailored java 
generally accepted behavioural interface speci cation language java card 
veri cation java card programs tools available hoare logic weakest preconditions calculus variations jml speci cation language 
mention jack java applet correctness kit jive krakatoa loop esc java :10.1.1.1.3304
tools vary amount user interaction required level correctness provide 
jive krakatoa loop sound require user interaction esc java automatic unsound 
smart card industry soundness automation major concerns 
needs able give rm correctness guarantees automation provides scalability usability 
jack tool addresses issues best combining soundness high degree automation 
contrast problem writing speci cations remains largely unaddressed 
specifying smart card application labour intensive error prone easy forget annotations 
exist tools assist writing annotations daikon houdini heuristic methods require user input :10.1.1.137.4260
typically produce annotations simple safety functional invariants synthesise realistic security policies 
propose method security policy automatically annotates java card application way application respects annotations java card dialect java tailored explicitly smart card applications 
rr barthe burdy huisman respects security policy 
generation annotations proceeds phases synthesising weaving 

security policy synthesise core annotations specifying behaviour methods directly involved 

propagate appropriate annotations methods directly indirectly invoking methods form core security policy weaving security policy application 
example suppose security policy prescribes synthesised contain precondition postcondition method weaving annotations method calls method get precondition postcondition nd implementation establishes calling breaks returning approach methods calling application annotated jack verify automatically application respects security policy 
process trivial doing manually labour intensive error prone 
method provides sound automatic cost ective way checking security policies 
annotations generate jml static ghost variables special speci cation variables 
jml de nes special ghost assignment annotation variables 
static ghost variables properties express independent particular class instances available 
de ned special weakest precondition strongest postcondition calculi considering static ghost variables proven algorithms weaving annotations correspond exactly calculi 
show usefulness approach applied algorithm realistic examples smart card applications 
doing violations security policies documented applications 
organised follows 
section introduces typical high level security properties 
section presents process weave properties applications 
subsequently section discusses application method realistic examples 
sections related draw 
high level security properties applets years smart cards evolved proprietary open systems making possible applications di erent providers single card 
ensure applications damage applications card strict security policies expressed high level security properties obeyed 
examples security properties 
properties high level sense impact application restricted single classes 
important notice restrict attention source code level security applications 
inria enforcing high level security properties applets properties consider divided groups dealing di erent aspects smart cards 
properties dealing called applet life cycle describing di erent phases applet 
actions performed applet certain phase 
second properties dealing transaction mechanism java card solution having atomic updates 
properties restricting kind exceptions occur nally consider properties dealing access control limiting possible interactions di erent applications 
group example properties 
emphasise exist relevant security properties smart cards example specifying memory management information ow management sensitive data 
identifying relevant security properties smart cards expressing formally important ongoing research issue 
applet life cycle typical applet life cycle de nes phases loading installation personalisation selectable blocked dead see 
phase corresponds di erent moment applet life 
applet loaded card properly installed registered java card runtime environment 
card personalised information card owner permissions keys stored 
applet selectable means repeatedly selected executed 
serious error occurs example attempts verify pin code card get blocked dead 
state recovery possible 
phases restrictions apply perform actions actions performed 
restrictions give rise di erent security properties obeyed applet 
authenticated initialisation loading installing applet done authenticated authority 
authenticated unblocking card blocked authenticated authority execute commands possibly unblock 
single personalisation applet personalised 
atomicity smart card include power supply retrieval terminal interrupt computation bring system incoherent state 
avoid java card speci cation prescribes transaction mechanism control synchronised updates sensitive data 
statement block surrounded methods begintransaction committransaction considered atomic 
happens executing transaction executed card roll back internal state state transaction begun 
ensure proper functioning prevent abuse mechanism security properties speci ed 
rr barthe burdy huisman nested transactions level transactions allowed 
exception transaction exceptions may thrown inside transaction caught inside transaction 
bounded retries authentication may happen transaction 
second property ensures committransaction executed 
exception caught committransaction ignored transaction nished 
property excludes authentication transaction 
allowed abort transaction time wrong authentication attempt 
rolls back internal state state transaction started reset retry counter allowing unbounded number retries 
exceptions raising exception top level reveal information behaviour application principle forbidden 
necessary pass information problem occurred 
java card standard de nes called iso exceptions pre de ned status word explains problem encountered 
exceptions exceptions may visible top level exceptions caught application 
iso exceptions top level exception visible top level iso exceptions 
access control feature java card isolation mechanism applications rewall 
rewall ensures applications securely exist card managing limited collaboration classes interfaces de ned package freely access external classes accessed explicitly shared interfaces 
inter application communication shareable interfaces take place applet selectable phases applet life cycle authenticated authorities allowed access applet 
selectable applications shareable application accessible shareable interface selectable 
automatic veri cation security properties explained interested veri cation high level security properties directly related single method class application guarantee functioning 
writing appropriate jml annotations properties tedious error prone spread application 
propose way construct annotations automatically 
synthesise core annotations methods directly involved property 
example specifying nested inria enforcing high level security properties applets transactions allowed annotate methods begintransaction committransaction 
subsequently propagate necessary annotations methods directly indirectly invoking core methods 
generated annotations su cient respect security properties applet violate annotations respects corresponding high level security property 
applet respects annotations established existing tools jml 
jack generates proof obligations accepted prover simplify automatic veri ers rst order logical formulae :10.1.1.1.3304
security properties annotations relatively simple important veri cations done automatically user interaction 
results section show generated annotations correct proof obligations automatically discharged 
presenting architecture tool set outlining algorithm propagation annotations brie jml keywords relevant examples 
jml nutshell jml uses java syntax write predicates extended speci constructs forall exists method speci cations keywords requires preconditions ensures postconditions signals exceptional postconditions condition hold abnormal termination method 
methods specify variables may modi ed socalled assignable clause 
class invariants describing properties preserved method denoted keyword invariant 
speci cations implementation independent jml provides means abstraction 
called ghost variables visible speci cations 
declaration preceded keyword ghost 
special assignment annotation set allows update value 
invariants related concrete variables 
large class security properties expressed static ghost variables primitive type including ones section 
restrict attention properties study annotations containing static ghost variables 
static ghost variables typically keep track control state application 
give example jml speci cation show fragment core annotation nested transactions property 
static ghost variable transact declared keeps track transaction progress 
initialised denoting transaction progress 
static ghost int transact see www com 
see research compaq com src esc simplify html 
rr barthe burdy huisman security properties annotated applet annotation generation jack ok jml tools applet tool set verifying high level security properties method begintransaction annotated follows 
requires transact assignable transact ensures transact public static native void begintransaction throws method native describe body 
nonnative method body contain special assignment set transact ensure method satis es annotations 
architecture shows general architecture tool set provide verifying high level security properties 
principle annotation generator front tool accepting jml annotated java card applications 
input security property java card applet 
output jml syntax tree ast format de ned standard jml parser 
pretty printed ast corresponds jml annotated java le 
annotated le jack generates appropriate proof obligations check applet respects security property 
automatic generation annotations section presents example core annotations security properties section focus weaving phase core annotations propagated applet 
de ne functions pre post propagating preconditions postconditions exceptional postconditions respectively 
functions inria enforcing high level security properties applets de ned implemented full java card language ideas give de nitions representative subset java card statements statement composition method calls conditional try catch statements 
assume existence domains method names stmt java card statements expr java card expressions respectively 
assume existence functions call body denoting method call body respectively 
propagation preconditions de nition function pre propagate preconditions 
function analyses method body sequential way computing preconditions methods called body propagated 
understand reasoning de nition rst look example 
suppose checking nested transactions property application contains method method calls shown 
void 
internal computations begintransaction 
computations transaction committransaction check property core annotations synthesised committransaction 
annotations begintransaction section committransaction requires transact ensures transact 
assume methods called way precondition begintransaction hold requiring holds moment called 
precondition begintransaction propagated 
contrast precondition committransaction transact established postcondition begintransaction variable transact modi ed method 
propagating precondition committransaction preconditions help guarantee precondition committransaction holds 
preconditions expressing properties unmodi ed variables propagated 
propagating pre postconditions considered passing method contract 
methods pass contracts variables modify modify variable duty ensure necessary conditions satis ed 
de nition function pre propagating preconditions assume existence function mod returning set static ghost variables modi ed statement 
interested static ghost variables primitive types de nition straightforward consider aliasing 
assume existence domains var static ghost variables pred predicates containing static ghost variables function fv returning set free variables predicate 
de ne pre method names statements expressions 
de nitions mutually recursive 
java card applets typically contain mutually recursive method rr barthe burdy huisman calls cause problems 
generating appropriate annotations recursive methods require care general possible user interaction 
de nition pre de ne pre pred pre stmt var pred pre expr var pred rules stmt expr var pre pre body pre pre pre mod pre call pre fv pre pre pre mod pre mod pre try catch pre pre mod rules de ning pre stmt expr second argument denotes set variables modi ed far 
calculating precondition method calculate precondition body assuming variables modi ed far 
statement composition rst propagate preconditions rst second sub statement account variables modi ed rst sub statement 
propagating preconditions method call propagate preconditions called method contain modi ed variables 
restricting annotations expressions containing static ghost variables rule conditional statement take outcome conditional expression account 
consequence generate strong annotations practice cause problems 
emphasised reject correct applets accept incorrect ones 
similarly try catch statement propagate precondition catch clause checking get executed 
reject correct applets accept incorrect ones 
notice de nition property function pre stmt expr set static ghost variables 
pre pre fv propagation postconditions similar way de ne functions post computing set postconditions exceptional postconditions propagated method names statements expressions 
main di erence de nition pre run method 
take account di erent paths method 
possible paths calculate appropriate exceptional postcondition 
exceptional postcondition de ned disjunction postconditions related di erent paths method 
inria enforcing high level security properties applets example example discussed algorithms generate annotations including information computed function mod 
requires transact assignable transact ensures transact void 
internal computations begintransaction 
computations transaction committransaction trivial important realise similar annotations generated methods calling transitively methods calling methods calling having algorithm generate annotations enables check automatically large class high level security properties 
annotation generation predicate transformer calculi natural question arises relation computations done functions pre post known program transformation methods weakest precondition strongest postcondition calculi 
explained consider annotations containing static ghost variables particular take outcome conditional expressions branching statement account 
show relationship function pre standard wp calculus 
de ned version wp calculus denoted wp transforms predicates containing static ghost variables prove correspondence wp calculus function pre de ned 
rules wp similar rules standard wp calculus main di erence take conditions account 
example rule conditional statement de ned follows wp wp wp wp wp interesting rule rule method calls similar traditional weakest precondition calculus 
assume existence functions requires ensures returning annotated preconditions postconditions respectively 
wp call requires mod ensures fact adapted wp calculus order take exceptional postconditions account 
clarity ignore 
rr barthe burdy huisman notice postcondition contains predicates containing variables mentioned modi es clause taken quanti cation prove property weakest precondition calculus 
stmt pred mod fv post false wp wp property crucial correspondence pre weakest precondition 
notice standard wp calculus prove similar property provided appropriate de nition mod 
annotating program static ghost variables primitive types wp calculus su cient 
program proven correct wp calculus proven correct standard wp calculus 
lemma statement predicates containing static ghost variables pred stmt wp wp converse implication hold 
consider example method 
void boolean atomic atomic begintransaction computations atomic committransaction suppose wish compute weakest precondition method ensure true throw exceptions 
weakest precondition transact transact obviously simpli es false established 
standard weakest precondition calculus return atomic transact expected 
show relationship weakest precondition function pre 
function pre computes unbounded part weakest precondition 
formally express follows 
theorem correspondence statement weakest precondition equivalent calculated precondition conjunction universally quanti ed expression pred wp true pre mod proof uses structural induction properties pre wp 
believe similar equivalences proven function post strongest postcondition calculus 
aware adaptation sp calculus java studied 
postcondition equal false 
inria enforcing high level security properties applets results checked di erent realistic examples java card applications respect security properties section violations 
section presents results focusing atomicity properties 
core annotations atomicity properties core annotations related atomicity properties specify methods related transaction mechanism declared javacard framework java card api 
explained static ghost variable transact keep track transaction progress 
section annotations method begintransaction committransaction similar annotations synthesised 
propagation annotations su cient check absence nested transactions 
check absence uncaught exceptions inside transactions special feature jack pre postcondition annotations statement blocks :10.1.1.1.3304
block annotations similar method speci cations 
propagation algorithm adapted generates annotations methods designated blocks 
core annotation add annotation committransaction 
exception transact public static native void committransaction throws speci es exceptions occur transaction progress 
propagating annotations statement blocks commit guarantees raise exceptions start transaction 
order check bounded number retries pin veri cation possible annotate method check declared interface javacard framework pin standard java card api precondition requiring transaction progress 
requires transact public boolean check byte pin short offset byte length checking atomicity properties mentioned tested method realistic examples industrial smart card applications including called case study developed research prototype trusted logic case study developed smart card producer 
examples explicitly developed test cases di erent formal techniques www trusted logic fr www com smart publications case study rr barthe burdy huisman illustrating di erent issues involved writing smart card applications 
core annotations propagated applications 
applications contained nested transactions contain attempts verify pin codes transactions 
proof obligations generated properties trivial discharged immediately 
emphasise usefulness having tool generating annotations case study encountered cases single transaction gave rise annotations di erent classes 
writing annotations manually easy forget annotations 
application transactions containing uncaught exceptions 
consider example code fragment 
void 
exception transact 
begintransaction try balance setvalue decimal 
catch decimal overflow committransaction 
method setvalue called throw decimal exception lead throwing iso exception transaction committed 
clearly violates security policy described section 
propagating computing appropriate proof obligations violation automatically problems 
related approach enforce security policies relies combination annotation assistant generates jml annotations high level security properties ii lemma generator produces proof obligations annotated applets weakest precondition calculus iii automated interactive theorem prover discharge proof obligations generated lemma generator 
experience suggests approach provides accurate automated analyses may handle wide range security properties 
inria enforcing high level security properties applets contrasted approaches enforce security policies statically particular program analyses fully automatic results hard exploit due high rate spurious warnings type systems implemented automatic type inference engines usually tailored single property con dentiality availability restrictive practice 
proof carrying code provides appealing solution enforce security policies statically directly address problem obtaining appropriate speci cations code downloaded :10.1.1.40.2507
fact mechanism may context proof carrying code generator veri cation conditions high level security properties 
run time monitoring provides dynamic measure enforce safety security properties instrumented java variety tools see :10.1.1.16.800
security automata provide means monitor program execution enforce security policies 
extensively studied schneider morrisett walker propose di erent forms automata edit automata truncation automata insertion automata prevent react violations security polices 
inspired aspectoriented programming fradet propose technique compose programs simple imperative language optimised security automata 
run time monitoring option smart card applications particular smart card limited resources 
leaving application domain security policies focusing program speci cation veri cation techniques encounters annotation assistants daikon houdini 
tools synthesise simple safety annotations functional invariants guided user input case security properties user input 
apart encounters testing remains technique commonly smart card industry guarantee quality applications 
testing guarantee application complies security policy program tested sample values fact program veri cation techniques shown discover subtle programming errors remain undetected intensive testing 
developed mechanism synthesise jml annotations high level security properties 
mechanism implemented front tools accepting java programs combination jack 
resulting tool set successfully applied area smart cards verify secure applications discover programming errors insecure ones 
broad tool set contributes ectively carrying formal security analyses reasonably accessible security experts intensive training formal techniques 
rr barthe burdy huisman currently developing solutions hide complexity generating core annotations user 
plan develop appropriate formalisms expressing high level security properties compilers translate properties expressed formalisms appropriate jml core annotations 
possible formalisms include security automata appealing visual representations traditional logics temporal logic allow specify behaviour application 
case believe necessary rely form security patterns reminiscent speci cation patterns developed dwyer consider extensions jml jml temporal logic 
intend apply methods tools contexts particular mobile phone applications 
particular require extending tools java technologies java card feature multi threading 
roadmap european research smartcard technologies 
see www ercim org reset fischer mller 
jass java assertions 
havelund rou editors entcs volume 
elsevier publishing 
van den berg jacobs 
loop compiler java jml 
margaria yi editors tools algorithms construction analysis systems tacas number lncs pages 
springer 
bieber girard 

checking secure interactions smart card applets extended version 
journal computer security 
brat havelund park visser 
java pathfinder second generation java model checker 
workshop advances veri cation 
huisman jacobs 
formal methods smart cards experience report 
technical report university nijmegen 
burdy :10.1.1.1.3304

java applet correctness developer oriented approach 
formal methods fme number lncs pages :10.1.1.40.2507
springer 
fradet 
enforcing trace properties program transformation 
proceedings popl pages 
acm press 
dwyer avrunin corbett 
property speci cation patterns finite state veri cation 
nd workshop formal methods software practice pages march 
inria enforcing high level security properties applets ernst cockrell griswold notkin :10.1.1.137.4260
dynamically discovering program invariants support program evolution 
ieee transactions software engineering 
flanagan leino 
houdini annotation assistant esc java 
oliveira zave editors formal methods europe fme formal methods increasing software productivity number lncs pages 
springer 
european commission information society directorate general 
research smart card 
available ftp ftp lu pub ist docs ka 
morrisett schneider 
computability classes enforcement mechanisms 
technical report department computer science cornell university 
jacobs 
weakest precondition reasoning java programs jml annotations 
journal logic algebraic programming 
appear 
jacobs poll 
logic java modeling language jml 
hussmann editor fundamental approaches software engineering fase number lecture notes computer science pages 
springer verlag 
jml speci cation language 
www org 
leino 
reliable modular programs 
phd thesis california institute technology 
leino nelson saxe 
esc java user manual 
technical report src compaq system research center 
march paulin mohring 
krakatoa tool jml java program certi cation 
journal logic algebraic programming 
appear 
marlet le 
security properties java card speci cities studied project 
number tl 
meyer poetzsch ter 
architecture interactive program provers 
graf schwartzbach editors tools algorithms construction analysis systems tacas number lncs pages 
springer 
necula :10.1.1.40.2507
proof carrying code 
proceedings popl pages 
acm press 
schneider 
enforceable security policies 
technical report tr cornell university october 
rr barthe burdy huisman tan kim lee 
testing monitoring model generated program 
proceeding volume entcs 
elsevier 
huisman 
extending jml speci cations temporal logic 
kirchner ringeissen editors algebraic methodology software technology amast number lncs pages :10.1.1.40.2507
springer 
walker 
type system expressive security policies 
proceedings popl pages 
acm press 
inria unit de recherche inria sophia antipolis route des lucioles bp sophia antipolis cedex france unit de recherche inria parc club orsay universit zac des rue jacques orsay cedex france unit de recherche inria lorraine loria de nancy campus scientifique rue du jardin bp ls nancy cedex france unit de recherche inria rennes irisa campus universitaire de beaulieu rennes cedex france unit de recherche inria alpes avenue de europe montbonnot saint france unit de recherche inria rocquencourt domaine de voluceau rocquencourt bp le chesnay cedex france inria domaine de voluceau rocquencourt bp le chesnay cedex france www inria fr issn 
