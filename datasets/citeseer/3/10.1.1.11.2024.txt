faster algorithm betweenness centrality ulrik brandes university konstanz department computer information science box konstanz germany ulrik brandes uni konstanz de betweenness centrality index essential analysis social networks costly compute 
currently fastest known algorithms require time space number actors network 
motivated fast growing need compute centrality indices large sparse networks new algorithms betweenness introduced 
require space run nm nm log time unweighted weighted networks respectively number links 
experimental evidence provided substantially increases range networks centrality analysis feasible 
keywords social networks betweenness centrality algorithms 
social network analysis graph theoretic concepts understand explain social phenomena 
social network consists set actors may arbitrary entities persons organizations types relations 
comprehensive overview methods applications see wasserman faust scott 
part research done department computer science brown university 
gratefully acknowledge financial support german academic exchange service daad iii 
published journal mathematical sociology 
essential tool analysis social networks centrality indices defined vertices graph freeman 
designed rank actors position network interpreted prominence actors embedded social structure 
centrality indices shortest paths linking pairs actors measuring average distance actors ratio shortest paths actor lies 
network analytic studies rely part evaluation indices 
increasing practicality electronic data collection course advent web likewise increasing demand computation centrality indices networks thousands actors 
notions centrality originating social network analysis determine structural prominence web pages kleinberg brin bharat henzinger 
bottleneck existing implementations due particularly important betweenness centrality index freeman comparative centrality analyses networks actors prohibitive 
remedy network analysts suggesting simpler indices instance linkages neighbors actors everett obtain rough approximations betweenness centrality 
show betweenness computed exactly fairly large networks 
introduce efficient algorithms new accumulation technique integrates traversal algorithms solving single source shortest paths problem exploiting sparsity typical instances 
range networks betweenness centrality computed extended significantly 
turns standard centrality indices shortest paths evaluated simultaneously reducing time space requirements comparative analyses 
centrality indices relevant defined section 
section review methods computing shortest paths pairs actors network 
recursion formula accumulating betweenness centrality derived section practical implications validated experiments real randomly generated data discussed section 
centrality indices shortest paths social networks conveniently described graph set vertices represents actors set edges represents links actors 
denote number vertices edges respectively 
simplicity assume graphs undirected connected may loops multiple edges 
note results generalize directed graphs minor modification 
weight function edges 
assume weighted graphs define unweighted graphs 
weights measure strength link 
define path alternating sequence vertices edges edge connects preceding succeeding vertex 
length path sum weights edges 
dg denote distance vertices minimum length path connecting definition dg dg dg assume familiarity standard algorithms shortest paths problems see cormen 
measures capture variations notion vertex importance graph 
st ts denote number shortest paths ss convention 
st denote number shortest paths lies 
standard measures centrality cc dg closeness centrality cg maxt dg cs graph centrality hage harary st stress centrality cb st st betweenness centrality freeman high centrality scores indicate vertex reach relatively short paths vertex lies considerable fractions shortest paths connecting 
interpretability control size network indices usually normalized lie zero 
definitions extend naturally directed disconnected graphs normalization problem measures 
inhomogeneity centrality index define centralization graph respect index freeman 
theoretical foundation centrality measures shortest paths 
see wasserman faust details note tacitly generalized definitions centrality weighted graphs 
computationally involved betweenness centrality index frequently employed social network analysis 
sheer size instances occurring practice evaluation betweenness centrality prohibitive 
focus computing betweenness 
turns resulting algorithm trivially augmented compute measures virtually extra cost 
recall crucial observation 
lemma bellman criterion vertex lies shortest path vertices dg dg dg 
pairwise distances shortest paths counts pair dependency st st pair intermediary ratio st shortest paths lies dg dg dg st sv vt obtain betweenness centrality index vertex simply sum pair dependencies pairs vertex cb st 
betweenness centrality traditionally determined steps 
compute length number shortest paths pairs 
sum pair dependencies note definition differs freeman defined dependency single vertex 
simply called dependency defined section 
counting number shortest paths section observe complexity determining betweenness centrality fact dominated second step time summation storage pair dependencies 
situation remedied section 
implementations widely compute betweenness analytic technologies version snaps 
probably harary 
freeman appears lemma 
recall adjacency matrix graph matrix 
lemma algebraic path counting uv th power adjacency matrix unweighted graph 
uv equals number paths length exactly pair dependencies need summed vertex running time implementation dominated time spend matrix multiplications 
clearly algebraic path counting computes information needed 
number paths length shorter diameter network maximum distance pair vertices interested number shortest paths pair vertices 
superfluous avoided suitably defined instance called geodetic semiring closed semiring generalization shortest paths problems aho 
yields algorithm betweenness augmenting floyd warshall algorithm pairs shortest paths problem path counting 
exploit sparsity typical instances count shortest paths traversal algorithms 
breadth search bfs unweighted dijkstra algorithm weighted graphs start specified source step add closest vertex set discovered vertices order find shortest paths source vertices 
process naturally discover shortest paths source 
define set predecessors vertex shortest paths ps dg dg collection routines gauss systems noah university california santa barbara 
lemma combinatorial shortest path counting sv ps su 
proof edge weights positive edge shortest path edge dg dg 
clearly number shortest paths edge equals number shortest paths equality follows lemma 
dijkstra algorithm bfs easily augmented count number shortest paths lemma 
bfs takes time dijkstra algorithm runs time log priority queue implemented fibonacci heap fredman tarjan 
corollary source length number shortest paths vertices determined time log weighted time unweighted graphs 
consequently st computed time nm unweighted time nm log weighted graphs 
corollary implies running time dominated time takes sum pair dependencies 
apparently approach implemented 
clearly space bound stems need store distance matrix quantities st section show reduce complexities substantially accumulating partial sums pair dependencies 
accumulation pair dependencies eliminate need explicit summation pair dependencies introduce notion dependency vertex single vertex defined st 
crucial observation partial sums obey recursive relation 
special case relation particularly easy recognize 
psfrag replacements assumption lemma vertex lies shortest paths successors tree shortest paths source lemma exactly shortest path dependency obeys ps proof assumption implies vertices edges shortest paths form form tree 
lies paths st equals 
lies shortest paths vertices predecessor shortest paths lie see 
general case similar relation holds 
theorem dependency obeys sv sw ps proof recall st lies shortest path notice path exactly edge ps 
slightly complicated situation illustrated 
extend pair dependency include edge defining st st number shortest paths con st st psfrag replacements general case theorem fractions dependencies successors propagated edges directed acyclic graph shortest paths source tain st ps st ps st 
vertex ps 
sw shortest paths sv go 
consequently sv sw st shortest paths contain 
follows pair dependency st inserting yields ps sv sw sv sw st ps st st sw ps sv sw sv sw sv st st corollary directed acyclic graph shortest paths dependencies vertices computed time space 
proof traverse vertices non increasing order distance accumulate dependencies applying theorem 
need store dependency vertex lists predecessors 
element edge lists 
result determine betweenness centrality index solving single source shortest paths problem vertex 
iteration dependencies source vertex added centrality score vertex 
unweighted graphs algorithm implemented described algorithm 
note centrality scores need divided graph undirected shortest paths considered twice 
modifications necessary weighted graphs straightforward 
theorem betweenness centrality computed nm log time space weighted graphs 
unweighted graphs running time reduces nm 
shortest path centrality measures defined section easily computed execution single source shortest paths traversals 
holds introduced index called valente foreman cr dg maxs dg potential measures 
significant practical advantage reducing combined time space spent computing different measures compared 
note centrality computations shortest path indices sped heuristically decomposing undirected graph biconnected components 
practical implications section evaluate practical relevance asymptotic complexity improvement achieved accumulating dependencies 
implemented weighted unweighted versions algorithm directed algorithm betweenness centrality unweighted graphs cb empty stack empty list empty queue enqueue empty dequeue push foreach neighbor time 
enqueue shortest path 
append returns vertices order non increasing distance empty pop cb cb undirected graphs library efficient data structures algorithms leda see mehlhorn 
performance compared implementation uses code determine length number shortest paths pairs vertices sums explicitly 
note faster implementations currently 
experiment performed sun ultra sparcstation mhz clock speed mbytes main memory 
seconds standard algorithm algorithm number vertices seconds needed compute betweenness centrality index random undirected unweighted graphs vertices densities ranging shows running times betweenness centrality random undirected unweighted graphs vertices 
number vertices graphs density defined number edges divided 
notice running times standard algorithm vary slightly indicating time spent summing pair dependencies counting paths 
additional experiments confirmed overhead determine number shortest paths weighted graphs negligible 
expected accumulation theorem yields significant speedup 
true dense graphs bound corollary general overly pessimistic number edges shortest paths source 
large instances arising social network analysis typically sparse density experiment clearly indicates betweenness centrality computed graphs significantly larger size accumulating dependencies summing 
speed validated practice analysis instance drug users directed weighted links originating unique contacts 
running time memory required store distance shortest paths count matrices betweenness centrality evaluated network date 
largest subnetwork previously analyzed actors links minutes mhz pentium pro pc 
implementation determined betweenness centrality index network seconds mbytes memory 
seconds standard algorithm algorithm shortest paths number vertices seconds needed compute betweenness centrality index random undirected unweighted graphs constant average degree 
funny jumps attributed leda internals algorithm implemented publically available courtesy robert foreman thomas valente epidemiology data house johns hopkins university 
see valente 
background data 
network analysis tool pajek researchers performing centrality analyses networks words extracted electronic text 
typical instances obtained improvements hours cpu time sgi medusa workstation minutes pentium iii pc mhz 
note average sum outdegrees network corresponding density 
clearly density tends zero average degree fixed 
experiments estimate lower average outdegree web pages kleinberg 
gives running times betweenness index calculations random graphs fixed average vertex degree 
results imply implementation compute betweenness centrality index extract web pages hour standard equipment 
aho hopcroft ullman 

data structures algorithms 
addison wesley 


rush directed graph 
technical report bn stichting mathematisch centrum amsterdam 


semirings social network analysis 
journal mathematical sociology 


pajek program large network analysis 
connections 
project home page 
uni lj si pub networks pajek 


mathematical model group structure 
human organizations 
bharat henzinger 

improved algorithms topic distillation hyperlinked environment 
proceedings st annual international acm sigir conference research development information retrieval pages 
reported steven department communication arizona state uni versity april 
brin motwani page winograd 

web pocket 
ieee bulletin technical committee data engineering 
cormen leiserson rivest 

algorithms 
mit press 
everett 

ego network betweenness 
th international conference social network analysis xix charleston south carolina 
fredman tarjan 

fibonacci heaps uses improved network optimization algorithms 
journal association computing machinery 
freeman 

set measures centrality betweenness 

freeman 

centrality social networks conceptual clarification 
social networks 
freeman 

gatekeeper pair dependency structural centrality 
quality quantity 


theoretical foundations centrality measures 
american journal sociology 
hage harary 

eccentricity centrality networks 
social networks 
harary norman cartwright 

structural models theory directed graphs 
john wiley sons 
kleinberg 

authoritative sources hyperlinked environment 
journal association computing machinery 
kleinberg kumar raghavan rajagopalan tomkins 

web graph measurements models methods 
asano imai lee nakano editors proceedings th international conference computing combinatorics cocoon volume lecture notes computer science pages 
springer 
mehlhorn 

leda platform combinatorial geometric computing 
cambridge university press 
project home page www mpi sb mpg de leda 


centrality index graph 
psychometrika 
scott 

social network analysis handbook 
sage publications 


structural parameters communication networks 
bulletin mathematical biophysics 
valente foreman 

integration measuring extent individual connectedness reachability network 
social networks 
valente foreman 

satellite exchange baltimore needle exchange program 
public health reports 
wasserman faust 

social network analysis methods applications 
cambridge university press 

