dpll fast decision procedures harald ganzinger george hagen robert nieuwenhuis albert 
logic equality uninterpreted functions euf extensions widely applied processor verification means large variety progressively sophisticated lazy eager translations propositional sat 
propose new approach general dpll engine parameter instantiated specialized solver solver theory producing system dpll 
describe dpll scheme interface dpll solver architecture dpll solver euf includes incremental backtrackable congruence closure algorithms dealing built equality integer successor predecessor symbols 
experiments implementation indicate technique outperforms previous methods benchmarks scales 
logic equality uninterpreted functions euf bd extensions widely processor verification see bd bls vb 
deciding validity dually unsatisfiability formulas kind logics years successively sophisticated techniques developed classified eager lazy 
eager approaches input formula translated single step propositional cnf checked sat solver satisfiability 
lazy approaches acg dmr abc bds atom input formula distinct propositional variable sat solver find propositional model formula check model theory 
models incompatible theory discarded consideration adding proper lemma original formula 
process repeated model compatible theory possible propositional models explored 
lazy variants exist cvc bds partial propositional mpi informatik saarbr cken germany www mpi sb mpg de hg 
dept computer science university iowa www cs uiowa edu 
partially supported nsf 
tech 
univ catalonia barcelona www lsi upc es roberto 
partially supported spanish cicyt project ref 
tic fpu ref 
ap spanish de estado de 
models checked incrementally theory built sat solver partial models consistent theory information derived contrary proposed 
main advantage lazy approaches flexibility relatively easily combine new decision procedures different logics existing sat solvers 
logic euf eager approaches general faster lazy ones probably theory information prune search validate posteriori 
eager approaches euf different encodings propositional logic predominant 
known eij constraint encoding abstracts equality atom ti tj propositional variable eij takes care equality imposing additional transitivity constraints bv ssb 
drawback technique number transitivity constraints large exponential blowup formula may hard sat solver 
second known small domain sd encoding bls essentially log size encoding gets transitivity free expense certain loss structure translating equalities formulas single propositional variables 
order get best encodings different hybrid approaches bls analysis input problem estimates properties number transitivity constraints 
introduce knowledge technique lazy eager translations sat 
building independent previous authors tin propose new approach general engine propositional solving dpll parametrized solver theory interest 
system dpll deciding satisfiability cnf formulas theory produced instantiating parameter module solver handle conjunctions literals instance case pure euf logic just theory equality 
basic idea similar clp scheme constraint logic programming provide clean modular time efficient integration specialized theory solvers general purpose engine case davis putnam logemann loveland procedure dp dll 
tin dpll scheme high level form sequent style calculus 
detailed interface defined dpll engine theory solver optimization strategies discussed 
framework seen concrete realization calculus tin contrary tin expect solver give complete answers 
relaxing requirement affect completeness turns crucial efficiency euf case 
dpll scheme introduced informally described 
emphasis placed development new congruence closure algorithms theory solver euf logic 
concrete dpll scheme architecture implementation combine advantages eager lazy approaches 
hand experiments reveal soon theory predicates start playing significant role formula initial implementation dpll outperforms approaches 
hand approach similar flexibility lazy approaches general logics dealt simply plugging solvers general dpll engine provided solvers conform minimal interface described 
structured follows 
section describe detail dpll scheme kind logics applied discussing advantages disadvantages small interface 
architecture current dpll implementation section 
section describes solver euf includes incremental congruence closure algorithms deal built equality integer successor predecessor symbols backtracking 
section gives experimental results preliminary implementation dpll euf section concludes outlines number promising research directions particular instantiating dpll engine solvers theories 
dpll dpll section describe main characteristics dpll scheme 
dpll system consists parts global dpll module solver solver theory dpll part general dpll engine independent particular theory examples possible instances theory part ones propositional logic pure euf euf successors predecessors 
logics consideration consider satisfiability problem formulas cnf set conjunction clauses 
clause mean disjunction literals literal form atom drawn set depends theory consideration 
interpretation function 
write literal true positive atom negated atom 
theory consider interpretations interpretations agree axioms sense precise theories considered 
interpretation resp 
interpretation model resp 
model clause set clause literal true aim design algorithms deciding clause set model exhibiting model exists 
logics consideration problem easily shown np complete 
propositional logic 
atoms just propositional symbols set interpretations consideration unrestricted truth assignment admitted theory empty case 
pure euf 
atom form 
tn ary symbol set fixed arity predicate symbols equation form 
tn terms built set fixed arity function symbols 
constants ary symbols terms 
sn term non constant ary symbol 
sn terms lowercase possibly indexed denote terms literals usually written pure euf theory expresses congruence reflexive symmetric transitive monotonic admissible interpretations ones satisfying conditions terms si ti term 
sn 
tn si ti 
sn 
tn si ti euf successors predecessors 
subset clu logic bls extension euf distinguished unary function symbols succ pred 
congruence axioms interpretations satisfy terms succ pred pred succ succ succ denotes term succ 
succ 
headed succ symbols applied axiom scheme denotes infinite set axioms 
note pred consequence 
dpll general dpll part dpll dpll part dpll system depend concrete theory dpll procedure basically usual features heuristics selecting decision literal unit propagation procedures conflict analysis clause learning policy doing restarts 
propositional case considers atoms purely syntactic objects 
substantial difference standard propositional dpll procedure dpll engine relies theory solver denoted solver managing information current interpretation difference certain optimization sat solvers pure literal rule pointed bds tin general sound presence theory consider constructs increase expressive power logics eliminated linear time preprocessing phase preserves conjunctive normal forms 
occurrence sub term replaced new constant symbol added formula 
boolean constructs simply considered 
solver part dpll solver knows real atoms knows theory consideration 
maintains partial interpretation defined literals set literals occurring problem input dpll prover 
literals called literals 
inside solver seen stack literals possible equivalently considered set literals true stack called stack 
say literal consequence denoted true total interpretations extending assumed literal solver able decide 
essentially solver data type simple operations needed interface dpll solver initialize literal set 
procedure initializes solver initializes stack empty stack 
literal literal set 
function raises inconsistency exception current stack 
pushes stack returns set literals consequence extending example euf case literals returned literal 
efficiency reasons returned set incomplete example euf may expensive detect return consequences see section 
istrue literal boolean 
function returns true false 
note backtrack natural 
procedure pops literals stack 
note expected bigger size stack 
explanation literal literal set 
function returns subset literal returned consequence operation backtracking popping taken place 
intuitively conditions ensure proof asserted valid 
note may exist example euf may correct explanations literal operation dpll conflict analysis clause learning 
implementation specifically build implication graph similar built modern sat solvers 
application required literals stack heights lower equal height literal proof returned see section example 
point solver independent characteristics dpll procedure 
example know decision levels unit propagation related features 
fact solver interface context non dpll systems lazy lemmas demand approaches resolution systems 
note explanation operation needed produce lemmas lazy approaches general deduction system produce proof objects 
operations constitute sense minimal set operations exchange information main components dpll system 
having operations provides high degree modularity independence global dpll engine theory solver solver current dpll implementation dpll engine built house operations 
simplicity modularity solver interface believe developers state art sat solvers need relatively little turn solvers dpll engines 
implementation performs euf tighter interconnection means operations enhance performance 
achieved example having fine tuned theory specific heuristics choosing decision literal see section 
possible efficiency gains come expense modularity require implementation especially developing solvers new theories 
architecture dpll current modular design result developments experiments dpll implementation 
current system clear flavor mirroring chaff features described watched literal implementation efficient unit propagation heuristic selecting decision literal combination restarts uip learning scheme 
chaff features lift dpll dpll major modifications point differences 
difference arises unit clause detection 
propositional case literal true literal false unit propagation applied clause set new unit clauses come clauses containing dpll hand additional literals set false consequence assertions theory solver 
possibility considerably increases extent unit propagations dpll correspondingly reduces size search space dpll engine 
example euf case clause set setting literal true false produce new unit consequence 
point fact discovered dpll engine set returned call fact contain depending theory solver implementation case 
case failing return correct explanation creates cycles wrong explanation may create cycles fig 

creation undesirable cycles implication graph 
affect completeness dpll system extent unit propagation 
source incomplete unit clause detection different literals may fact equivalent current state interpretation euf case solver literal clause unit consequence equivalently detected 
concerning conflict analysis construction implication graph complex dpll chaff 
node labeled literal antecedents nodes 
ln due clause 
ln unit propagation taken place 
build implication graph suffices pointer associated clause 
dpll implication graph contain addition nodes nodes consequence antecedents 
ln 
nodes returned calls solver recognized pointer associated clause 
antecedents obtained solver calling explanation 
example run dpll algorithm clauses follows 

decision 
returns consequence 


unit propagation 

unit propagation 

unit propagation 

unit propagation conflict 
implication graph built backwards reached explanation called possible explanation 
process results graph depicted 
note consequence set lead graph cycles 
avoid cycles explanation return explanations older definition explanation 
solver euf key ingredient solver euf algorithm congruence closure 
log dst congruence closure algorithm dst see needs relatively expensive initial transformation directed acyclic graphs outdegree 
proposed replace transformation formula representation level implementation functional languages result binary apply function symbol denoted dot constants 
example gives 
furthermore congruence closure approaches cf 
kap bt introduce new constant symbols giving names non constant subterms replaced equation added 
combination obtain efficiency sophisticated dag implementations appropriately indexing new constants play role pointers shared subterms dag approaches 
example flatten equation replacing equations structure preserving transformations done linear time input formula dpll procedure 
consequence compound terms atoms occuring euf formula gotten name equal constant equality atoms euf formula fact equations constants 
furthermore congruence closure algorithm solver needs infer consequences fixed static set equations form constants note symbol occur outside 
dst algorithm surprisingly simple clean easier extend 
implementation runs log time course faster algorithms arbitrary terms closure computed deciding constants belong class positive istrue operations done constant time 
data structures congruence closure 
pending unions list pairs constants merged 

representative table array indexed constants containing constant current representative seen union find data structure eager path compression 

class lists representative list constants class 

lookup table input term call lookup representative representative returns constant time constant equivalent returns 
lists representative list input equations representative 
fact times faster earlier implementations tv benchmarks tv 
iteration algorithm roughly amounts picking pending union lookup table lists efficiently detecting new pairs constants merged 
refer detailed description analysis algorithm extension successor predecessor symbols log 
briefly describe data structures algorithms solver operations notation unprimed constants representatives primed ones symbols representatives 
literal lists 
initialization solver builds constant positive literal list containing positive dpll literals form positive literals containing communicated solver initialize operation 
analogously negative literal list positive subsequent congruence closure produces union class representative represented different class list positive literal list traversed list returned consequences 
negative literal list traversed returning stored hash table containing currently true disequalities representatives analogously negative literal list traversed 
operation negative equation representative form negative literal list traversed equivalently expected returning backtracking 
dealt means mixed policy unions constants stacked order undone 
hash table lookup data structure hash table restored backtracking time stamps stack height combined global counter 
explanations 
newly derived positive equality consequence set positive operations equations inside congruence closure module 
negative equations consequences positive equalities addition caused single negative 
retrieving explanations dpll literals need able proceed backwards data structures set initial operations reached 
congruence propagation deriving consequence pointers equations kept allowing continue backwards explanations addition method efficiently extracting slightly extended union find data structure list unions explaining certain equality 
explaining negative equality additional table retrieving single negative operation caused remaining part explanation backwards union explanations 
experimental results experiments done available benchmarks generated verification problems handled euf successors predecessors 
provided group cmu benchmarks svc format see bls details 
table contains second column translation times eager approaches described section sd eij vb hybrid methods hybrid bls hybrid 
translations done state art translator provided tool 
furthermore major sat solvers zchaff version gn version running times translated formulas 
fair comparison system times zchaff runs include translation times translations mere formats conversions result sophisticated algorithms reducing size search space propositional formula produced 
choice zchaff motivated fact current dpll engine modeled zchaff presently considered best sat solvers 
table extra column running times svc version 
results seconds aggregated family benchmarks times greater rounded numbers experiments run ghz mb pentium iv linux settings benchmark queues benchmarks system learning turned 
benchmark run seconds 
annotation form column indicates respectively system timed ran memory benchmarks 
timeout memory counted 
point current dpll implementation far tightly coded zchaff order magnitude slower zchaff propositional problems overhead due calls solver eliminated 
considering consistently dominates zchaff benchmark families remarkable system performs better combination great majority families 
fact unique translation approach outperforms dpll benchmark families 
furthermore dpll faster svc benchmarks faster lazy approach systems cvc bds shown outperformed svc 
see strong initial evidence dpll qualitatively superior existing approaches deciding satisfiability modulo theories 
grateful lahiri kind assistance 
individual results benchmark www lsi upc es benchmarks executable system 
evidence confirmed experiments reported detail www lsi upc es showing dpll perfomance dominates ics benchmarks listed 
benchmark family sd chaff dpll svc buggy cache code validation suite dlx processor elf processor order proc rf order proc tag load store processor cache coherence prot 
queues benchmark family eij chaff dpll buggy cache code validation suite dlx processor elf processor order proc rf order proc tag load store processor cache coherence prot 
queues benchmark family hybrid chaff dpll buggy cache code validation suite dlx processor elf processor order proc rf order proc tag load store processor cache coherence prot 
queues benchmark family hybrid chaff dpll buggy cache code validation suite dlx processor elf processor order proc rf order proc tag load store processor cache coherence prot 
queues expected translation methods normally outperform dpll problems theory plays small role 
longer case theory predicates start playing significant role families code validation elf ooo processors rf queues 
phenomenon dramatic instance benchmarks group theory 
see www lsi upc es details 
new approach checking satisfiability euf logic 
approach general framework architecture generic dpll style propositional solver dpll coupled specialized solver solver theory interest 
architecture highly modular allowing theory solver conforming simple minimal interface plugged dpll engine 
fundamental advantage respect previous approaches theory solver validate choices sat engine done instance cvc propagate entailed literals returned information consistent partial models considerably reducing search space sat engine 
initial results indicate euf case leads significant speed ups performance 
needs done implementation 
aspects lemma management decision heuristics restarting policies immature accurate theory dependent heuristics need explored 
minimal optimizations worked instance notion counterpart framework 
course concerns development new theory solvers conversion existing ones cvc theory solvers conforming interface solvers euf associativity transitivity ac properties certain symbols euf memories bd separation logic full clu logic bls 
abc bertoli cimatti sebastiani 
sat approach solving formulas boolean linear mathematical propositions 
cade lncs pages 
acg armando giunchiglia 
sat procedures temporal reasoning 
procs 
th european conference planning lncs pages 
springer 
bd burch dill 
automatic verification pipelined microprocessor control 
procs 
th int 
conf 
computer aided verification cav lncs pages 
barrett dill levitt 
validity checking combinations theories equality 
procs 
st intl 
conference formal methods computer aided design lncs pages 
bds barrett dill stump 
checking satisfiability order formulas incremental translation sat 
procs 
th intl 
conf 
computer aided verification cav lncs 
bryant german 
processor verification efficient reductions logic uninterpreted functions propositional logic 
acm trans 
computational logic 
bls bryant lahiri 
deciding clu logic formulas boolean pseudo boolean en codings 
procs 
st int 
workshop constraints formal verification 
bls bryant lahiri 
modeling verifying systems logic counter arithmetic lambda expressions uninterpreted functions 
procs 
cav lncs 
bt bachmair tiwari 
congruence closure specializations 
conf 
autom 
deduction cade lnai pages 
bv bryant 
boolean satisfiability transitivity constraints 
acm trans 
computational logic 
dll davis logemann loveland 
machine program 
cacm 
dmr de moura rue 
lemmas demand satisfiability solvers 
procs 
th int 
symp 
theory applications satisfiability testing sat pages 
dp davis putnam 
computing procedure quantification theory 
journal acm 
dst downey sethi tarjan 
variations common subexpressions problem 
jacm 
flanagan joshi ou saxe 
theorem proving lazy proof explanation 
procs 
th int 
conf 
computer aided verification cav lncs 
gn goldberg 
fast robust sat solver 
design automation test europe date pages 
kap kapur 
shostak congruence closure completion 
procs 
th int 
conf 
rewriting techniques applications lncs 
moskewicz madigan zhao zhang malik 
chaff engineering efficient sat solver 
proc 
th design automation conference dac 
nelson oppen 
fast decision procedures bases congruence closure 
jacm 
nieuwenhuis 
congruence closure integer offsets 
th int 
conf 
logic programming artif 
intell 
reasoning lpar lnai pages 
pnueli rodeh siegel 
deciding equality formulas small domains instantiations 
procs 
th int 
conf 
computer aided verification cav lncs pages 
lahiri bryant 
hybrid sat decision procedure separation logic uninterpreted functions 
procs 
th design automation conference dac pages 
ssb bryant 
deciding separation formulas sat 
procs 
th intl 
conference computer aided verification cav lncs pages 
tin 
dpll calculus ground satisfiability modulo theories 
procs 
th european conf 
logics artificial intelligence lnai pages 
tv tiwari 
implementation congruence closure 
www csl sri com users tiwari 
vb bryant 
effective boolean satisfiability procedures formal verification superscalar vliw microprocessors 
journal symbolic computation 
zhang madigan moskewicz malik 
efficient conflict driven learning boolean satisfiability solver 
int 
conf 
computer aided design iccad pages 

