freenet distributed anonymous information storage retrieval system ian clarke oskar sandberg brandon wiley theodore hong montana avenue santa monica ca usa ian com department numerical analysis computer science royal institute technology se stockholm sweden md osa nada kth se college communication university texas austin austin tx usa uts cc utexas edu department computing imperial college science technology medicine queen gate london sw bz united kingdom hong doc ic ac uk 
describe freenet adaptive peer peer network application permits publication replication retrieval data protecting anonymity authors readers 
freenet operates network identical nodes collectively pool storage space store data files cooperate route requests physical location data 
broadcast search centralized location index employed 
files referred location independent manner dynamically replicated locations near requestors deleted locations interest 
infeasible discover true origin destination file passing network difficult node operator determine held responsible actual physical contents node 
networked computer systems rapidly growing importance medium choice storage exchange information 
current systems afford little privacy users typically store data item fixed places creating central point failure 
continued desire individuals protect privacy authorship readership various types sensitive information central points failure attacked opponents wishing remove data system simply overloaded interest systems offering greater security reliability needed 
developing freenet distributed information storage retrieval system designed address concerns privacy availability 
system theodore hong supported marshall aid commission national science foundation 
ian clarke oskar sandberg brandon wiley theodore hong operates location independent distributed file system individual computers allows files inserted stored requested anonymously 
main design goals anonymity producers consumers information deniability information resistance attempts third parties deny access information efficient dynamic storage routing information decentralization network functions system designed respond adaptively usage patterns transparently moving replicating deleting files necessary provide efficient service resorting broadcast searches centralized location indexes 
intended guarantee permanent file storage hoped sufficient number nodes join storage capacity files able remain indefinitely 
addition system operates application layer assumes existence secure transport layer transport independent 
seek provide anonymity general network usage freenet file transactions 
freenet currently developed free software project sourceforge preliminary implementation downloaded www org 
grew originally done author university edinburgh 
related strands related area distinguished 
anonymous point point channels chaum mix net scheme implemented email mixmaster remailer general tcp ip traffic onion routing freedom :10.1.1.34.2032
channels easily suited publication best viewed complement freenet provide file access storage 
anonymity consumers information web context provided browser proxy services anonymizer provide protection producers information protect consumers logs kept services 
private information retrieval schemes provide stronger guarantees information consumers extent hiding piece information retrieved particular server 
cases fact contacting particular server reveal information retrieved having server hold information naturally scales poorly 
closest reiter rubin crowds system uses similar method requests consumers crowds store information protect information producers 
berthold propose web mixes stronger system uses message padding reordering freenet dummy messages increase security protect information producers 
rewebber provides measure anonymity producers web information means encrypted url service essentially inverse anonymizing browser proxy difficulty providing protection operator service 
taz extends idea chains nested encrypted urls successively point different rewebber servers contacted vulnerable traffic analysis replay 
rely single server ultimate source information 
publius enhances availability distributing files redundant shares needed reconstruct file identity servers anonymized attacker remove information forcing closure servers :10.1.1.125.3017
eternity proposal seeks archive information permanently anonymously lacks specifics efficiently locate stored files making akin anonymous backup service :10.1.1.16.1952
free haven interesting anonymous publication system uses trust network file trading mechanism provide greater server accountability maintaining anonymity 
distributed net demonstrated concept pooling computer resources multiple users large scale cpu cycles systems disk space napster gnutella relies central server locate files employs inefficient broadcast search 
replicates files 
intermemory india cooperative distributed fileserver systems intended long term archival storage lines eternity files split redundant shares distributed participants 
akamai provides service replicates files locations near information consumers suitable producers individuals opposed corporations 
systems attempt provide anonymity 
architecture freenet implemented adaptive peer peer network nodes query store retrieve data files named keys 
node maintains local datastore available network reading writing dynamic routing table containing addresses nodes keys thought hold 
intended users system run nodes provide security guarantees inadvertently hostile foreign node increase storage capacity available network 
system regarded cooperative distributed filesystem incorporating location independence transparent lazy replication 
just systems distributed net enable ordinary users share unused cpu cycles machines freenet enables users share unused disk space 
distributed net uses cpu cycles purposes freenet ian clarke oskar sandberg brandon wiley theodore hong directly useful users acting extension hard drives 
basic model requests keys passed node node chain proxy requests node local decision send request style ip internet protocol routing 
depending key requested routes vary 
routing algorithms storing retrieving data described sections designed adaptively adjust routes time provide efficient performance local global knowledge 
necessary nodes knowledge immediate upstream downstream neighbors proxy chain maintain privacy 
request hops live limit analogous ip time live decremented node prevent infinite chains 
request assigned pseudo unique random identifier nodes prevent loops rejecting requests seen 
happens node simply chooses different node forward 
process continues request satisfied exceeds hops live limit 
success failure result passed back chain sending node 
node privileged node hierarchy central point failure exists 
joining network simply matter discovering address existing nodes band means starting send messages 
keys searching files freenet identified binary file keys obtained applying hash function 
currently bit sha function hash 
different types file keys vary purpose specifics constructed 
simplest type file key keyword signed key ksk derived short descriptive text string chosen user storing file network 
example user inserting treatise warfare assign description text philosophy sun art war 
string input deterministically generate public private key pair 
public half hashed yield file key 
private half asymmetric key pair sign file providing minimal integrity check retrieved file matches file key 
note attacker dictionary attack signature compiling list descriptive strings 
file encrypted descriptive string key reasons explained section 
allow retrieve file user need publish descriptive string 
keyword signed keys easy remember communicate 
form flat global namespace problematic 
prevents users independently choosing descriptive string different files example engaging key inserting junk files popular descriptions 
freenet problems addressed signed subspace key ssk enables personal namespaces 
user creates namespace randomly generating public private key pair serve identify namespace 
insert file chooses short descriptive text string 
public namespace key descriptive string hashed independently xor ed hashed yield file key 
keyword signed key private half asymmetric key pair sign file 
signature generated random key pair secure signatures keyword signed keys 
file encrypted descriptive string 
allow retrieve file user publishes descriptive string subspace public key 
storing data requires private key owner subspace add files 
owner ability manage namespace 
example simulate hierarchical structure creating directory files containing hypertext pointers files 
directory key text philosophy contain list keys text philosophy sun art war text philosophy text philosophy anarchy state utopia appropriate syntax interpretable client 
directories recursively point directories 
third type key content hash key chk useful implementing updating splitting 
content hash key simply derived directly hashing contents corresponding file 
gives file pseudo unique file key 
files encrypted randomly generated encryption key 
allow retrieve file user publishes key decryption key 
note decryption key stored file published file key reasons explained section 
content hash keys useful conjunction signed subspace keys indirection mechanism 
store updatable file user inserts content hash key 
inserts indirect file key contents content hash key 
enables retrieve file steps signed subspace key 
update file owner inserts new version content hash key different old version content hash 
inserts new indirect file original signed subspace key pointing updated version 
insert reaches node possesses old version key collision occur 
node check signature new version verify valid replace old version 
signed subspace key lead version file old versions continue accessed directly content hash key desired 
requested old versions eventually removed network see section mechanism manage directories regular files 
ian clarke oskar sandberg brandon wiley theodore hong content hash keys splitting files multiple parts 
large files splitting desirable storage bandwidth limitations 
splitting medium sized files standard sized parts kilobytes advantages combating traffic analysis 
easily accomplished inserting part separately content hash key creating indirect file multiple levels indirect files point individual parts 
leaves problem finding keys place 
straightforward way add search capability freenet run hypertext spider search web 
attractive solution ways conflicts design goal avoiding centralization 
possible alternative create special class lightweight indirect files 
real file inserted author insert number indirect files containing pointer real file named search keywords chosen 
indirect files differ normal files multiple files key search keyword permitted exist requests keys keep going specified number results accumulated stopping file 
managing large volume indirect files open problem 
alternative mechanism encourage individuals create compilations favorite keys keys compilations 
approach common world wide web 
retrieving data retrieve file user obtain calculate binary file key 
sends request message node specifying key hops live value 
node receives request checks store data returns note saying source data 
looks nearest key routing table key requested forwards request corresponding node 
request ultimately successful returns data node pass data back upstream requestor cache file datastore create new entry routing table associating actual data source requested key 
subsequent request key immediately satisfied local cache request similar key determined lexicographic distance forwarded previously successful data source 
maintaining table data sources potential security concern node way unilaterally decide change reply message claim arbitrarily chosen node data source 
node forward request preferred downstream node target loop created node having key tried third nearest 
node runs candidates try reports failure back upstream neighbor try second choice way request operates steepest ascent hill climbing search backtracking 
hops live limit exceeded start request failed node refuse data request seen data fig 

typical request sequence 
freenet data request data reply request failed failure result propagated back original requestor nodes tried 
nodes may unilaterally curtail excessive hops live values reduce network load 
may forget pending requests period time keep message memory free 
depicts typical sequence request messages 
user initiates request node node forwards request node forwards node node unable contact nodes returns backtracking request failed message node tries second choice forwards request node forwards request detects loop returns backtracking failure message 
node unable contact nodes backtracks step back node forwards request second choice data 
data returned back sends back user 
data cached mechanism number effects 
importantly hypothesize quality routing improve time reasons 
nodes come specialize locating sets similar keys 
node listed routing tables particular key tend receive requests keys similar key 
gain experience answering queries better informed routing tables nodes carry keys 
second nodes similarly specialized storing clusters files having similar keys 
forwarding request successfully result node gaining copy requested file requests similar keys node acquire files similar keys 
taken effects improve efficiency requests self reinforcing cycle nodes build routing tables focusing particular sets keys precisely keys asked 
ian clarke oskar sandberg brandon wiley theodore hong addition request mechanism cause popular data transparently replicated system mirrored closer requestors 
example file originally located london requested berkeley cached locally provide faster response subsequent berkeley requests 
copied computer way providing redundancy london node fails shut 
note way determined key closeness necessarily geographic relevance 
nodes process requests create new routing table entries previously unknown nodes supply files increasing connectivity 
helps new nodes discover network help rest network discover announcement mechanism described section necessary 
note direct links data sources created bypassing intermediate nodes 
nodes successfully supply data gain routing table entries contacted nodes 
keys derived hashes lexicographic closeness keys imply closeness original descriptive strings presumably closeness subject matter corresponding files 
lack semantic closeness important routing algorithm knowing keys located subjects located 
supposing string text philosophy sun art war yields file key ah jk requests file routed effectively creating clusters containing ah jk ah jk ah jk creating clusters works philosophy 
hashes desirable precisely philosophical works scattered network lessening chances failure single node philosophy unavailable 
true personal subspaces files belonging subspace scattered different nodes 
storing data inserts follow parallel strategy requests 
insert file user calculates binary file key procedures described section 
sends insert message node specifying proposed key hops live value determine number nodes store 
node receives insert proposal checks store see key taken 
key node returns pre existing file request 
user know collision encountered try different key 
key node looks nearest key routing table key proposed forwards insert corresponding node 
insert causes collision returns data node pass data back upstream inserter behave request cache file locally create routing table entry data source 
hops live limit reached key collision detected clear result propagated back original inserter 
note inserts successful result contrast situation requests 
freenet user sends data insert propagated path established initial query stored node way 
node create entry routing table associating inserter data source new key 
avoid obvious security problem node way unilaterally decide change insert message claim arbitrarily chosen node data source 
node forward insert preferred downstream node target loop created insert backtracks key third nearest way requests 
backtracking returns way back original inserter indicates fewer nodes asked contacted 
requests nodes may curtail excessive hops live values forget pending inserts period time 
mechanism effects 
newly inserted files selectively placed nodes possessing files similar keys 
reinforces clustering keys set request mechanism 
second new nodes inserts supplementary means announcing existence rest network 
third attempts attackers supplant existing files inserting junk files existing keys simply spread real files originals propagated collision 
note relevant keyword signed keys types keys strongly verifiable 
managing data information storage systems deal problem finite storage capacity 
individual freenet node operators configure amount storage dedicate 
node storage managed lru cache data items kept sorted decreasing order time request time insert item requested 
new file arrives new insert successful request cause datastore exceed designated size files evicted order room 
resulting impact availability mitigated fact routing table entries created evicted files arrived remain time potentially allowing node get new copies original data sources 
routing table entries eventually deleted similar fashion table fills retained longer smaller 
strictly speaking datastore cache set storage permanent copy replicated cache 
nodes decided collectively speaking drop particular file longer available network 
respect freenet differs systems eternity free haven seek provide guarantees file lifetimes 
expiration mechanism advantageous aspect allows outdated documents fade away naturally superseded ian clarke oskar sandberg brandon wiley theodore hong newer documents 
outdated document considered valuable historical reasons stay alive precisely long continues requested 
political legal reasons may desirable node operators explicitly know contents 
stored files encrypted 
encryption procedures intended secure file impossible requestor potentially capable decrypting file retrieved 
objective node operator plausibly deny knowledge contents datastore knows priori file key encryption key 
encryption keys keyword signed signed subspace data obtained reversing hash encryption keys content hash data completely unrelated 
effort course dictionary attack reveal keys order requests burden effort require intended provide measure cover node operators 
adding nodes new node join network discovering address existing nodes band means starting send messages 
mentioned previously request mechanism naturally enables new nodes learn network time 
order existing nodes discover new nodes announce presence 
process complicated somewhat conflicting requirements 
hand promote efficient routing existing nodes consistent deciding keys send new node key assign routing tables 
hand cause security problem node choose routing key rules straightforward way achieving consistency 
cryptographic protocol satisfy requirements 
new node joining network chooses random seed sends announcement message containing address hash seed existing node 
node receives new node announcement generates random seed xor hash received hashes result create commitment 
forwards new hash node chosen randomly routing table 
process continues hops live announcement runs 
node receive announcement just generates seed 
nodes chain reveal seeds key new node assigned xor seeds 
checking commitments enables node confirm revealed seeds truthfully 
yields consistent random key influenced malicious participant 
node adds entry new node routing table key 
protocol details freenet freenet protocol packet oriented uses self contained messages 
message includes transaction id nodes track state inserts requests 
design intended permit flexibility choice transport mechanisms messages tcp udp technologies packet radio 
efficiency nodes persistent channel tcp connection may send multiple messages connection 
node addresses consist transport method plus transport specific identifier ip address port number tcp 
nodes change addresses frequently may virtual addresses stored keys ark signed subspace keys updated contain current real address 
freenet transaction begins request handshake message node specifying desired return address sending node 
sender return address may impossible determine automatically transport layer sender may wish receive replies different address send message 
remote node active responding requests reply reply handshake specifying protocol version number understands 
handshakes remembered hours subsequent transactions nodes time may omit step 
messages contain randomly generated bit transaction id live limit depth counter 
id guaranteed unique likelihood collision occurring transaction lifetime limited set nodes sees extremely low 
hops live set originator message decremented hop prevent messages forwarded indefinitely 
reduce information attacker obtain hops live value messages automatically terminate hops live reaches forwarded finite probability hops live 
depth incremented hop replying node set hops live high reach requestor 
requestors initialize small random value obscure location 
hops depth automatically incremented passed unchanged finite probability 
request data sending node sends request data message specifying transaction id initial hops live depth search key 
remote node check datastore key forward request node described section 
chosen hops live limit sending node starts timer expected amount time take contact nodes assume failure 
request processed remote node may periodically send back reply restart messages indicating messages stalled waiting network timeouts sending node knows extend timer 
remember sending node may may original requestor 
ian clarke oskar sandberg brandon wiley theodore hong request ultimately successful remote node reply send data message containing data requested address node supplied possibly faked 
request ultimately unsuccessful hops live completely trying satisfy remote node reply reply notfound 
sending node decrement hops live send data reply notfound pass upstream actual originator request 
messages terminate transaction release resources held 
live remaining usually request ran dead viable non looping paths remote node reply request continue giving number hops live left 
sending node try contact node routing table 
send reply restart upstream 
insert data sending node sends request insert message specifying randomly generated transaction id initial hops live depth proposed key 
remote node check datastore key forward insert node described section 
timers reply restart messages way requests 
insert ultimately results key collision remote node reply send data message containing existing data reply notfound existing data routing table 
insert encounter collision runs nodes nonzero hops live remaining remote node reply request continue 
case request continue failure result meaning nodes contacted asked 
messages passed upstream request case 
messages terminate transaction release resources held 
insert expires encountering collision remote node reply reply insert indicating insert go ahead 
sending node pass reply insert upstream wait predecessor send send insert containing data 
receives data store locally forward send insert downstream concluding transaction 
performance analysis performed simulations model system give indications performance 
summarize important results full details see 
network convergence test adaptivity network routing created test network nodes 
node datastore size items routing table size addresses 
initialized empty routing tables initialized connect network regular ring lattice topology request pathlength hops freenet time fig 

time evolution request pathlength 
quartile median third quartile node routing entries nearest neighbors side 
keys associated routing entries set hashes destination nodes addresses 
hashes useful property resulting keys random consistent node key 
inserts random keys sent random nodes network interspersed randomly requests randomly chosen keys known previously inserted hops live 
timesteps snapshot network taken performance measured set probe requests 
probe consisted random requests keys hops live 
recorded resulting distribution request number hops taken finding data 
request find data pathlength taken 
shows evolution second third quartiles request pathlength time averaged trials 
see initially high decrease rapidly time 
requests succeed network converges median request pathlength drops just 
ian clarke oskar sandberg brandon wiley theodore hong request pathlength hops scalability quartile median third quartile network size nodes fig 

request pathlength versus network size 
examined scalability growing network 
starting small network nodes initialized manner previous section added new nodes time measured change request pathlength 
inserts requests simulated randomly 
timesteps new node created added network simulating node announcement message hops live sent randomly chosen existing node 
key assigned announcement taken hash new node address 
note procedure necessarily imply linear rate network growth linear relationship request rate growth rate 
rates proportional network size yielding exponential growth rate real opposed simulated time believe model justifiable 
shows evolution second third quartiles request pathlength versus network size averaged trials 
see pathlength scales approximately logarithmically change slope near nodes 
posit slope change result routing tables filled improved adding small number nodes larger routing tables 
section discusses issue depth 
routing tables limited entries memory requirements simulation real freenet nodes easily able hold thousands entries 
request pathlength hops freenet node failure rate quartile median third quartile fig 

change request pathlength network failure 
limited network appears capable scaling nodes median pathlength just 
note network grown continuously steady state convergence period 
fault tolerance considered fault tolerance network 
starting network grown nodes previous method progressively removed randomly chosen nodes network simulate node failures 
shows resulting evolution request pathlength averaged trials 
network surprisingly robust quite large failures 
median pathlength remains nodes fail 
small world model scalability fault tolerance characteristics freenet explained terms small world network model 
small world network majority nodes relatively local connections nodes small number nodes large wide ranging sets connections 
small world networks permit efficient short paths arbitrary points shortcuts provided connected nodes evidenced ian clarke oskar sandberg brandon wiley theodore hong proportion nodes number links fig 

distribution link number freenet nodes 
examination milgram letter passing experiment erd number game cited watts strogatz 
freenet small world 
key factor identification small world network existence scale free power law distribution links network tail distributions provides highly connected nodes needed create short paths 
shows average distribution links routing table entries node freenet networks previous section 
see distribution closely approximates power law anomalous point representing nodes filled entry routing tables 
differently sized routing tables cutoff point moved power law character distribution remained 
addition providing short paths power law distribution gives small world networks high degree fault tolerance 
random failures knock nodes majority possess small number connections 
loss poorly connected nodes greatly affect routing network 
number random failures high knock significant number connected nodes routing performance noticeably affected 
system attacker sender anonymity key anonymity basic freenet local eavesdropper exposed exposed collaborating nodes suspicion exposed freenet freenet pre routing local eavesdropper exposed suspicion collaborating nodes suspicion exposed table 
anonymity properties freenet 
security primary goal freenet security protecting anonymity requestors files 
important protect identity files 
trivially turn node storer requesting file identifying storer important remain unidentified holders file adversary remove file attacking nodes hold 
files protected malicious modification system resistant denial ofservice attacks 
reiter rubin useful taxonomy anonymous communication properties axes 
axis type anonymity sender anonymity receiver anonymity mean respectively adversary determine originated message sent 
second axis adversary question local eavesdropper malicious node collaboration malicious nodes web server applicable freenet 
third axis degree anonymity ranges absolute privacy presence communication perceived suspicion sender appears originated message potential sender probable innocence sender originator possible innocence exposed provably exposed adversary prove sender 
freenet communication directed specific receivers receiver anonymity accurately viewed key anonymity hiding key requested inserted 
unfortunately routing depends knowledge key key anonymity possible basic freenet scheme see discussion pre routing 
hashes keys provides measure obscurity casual eavesdropping course vulnerable dictionary attack versions widely known order useful 
freenet anonymity properties taxonomy shown table 
collaboration malicious nodes sender anonymity preserved suspicion node request path tell predecessor path initiated request merely forwarding 
describes probabilistic attack compromise sender anonymity statistical analysis probability request arriving node forwarded handled directly probability chooses particular node ian clarke oskar sandberg brandon wiley theodore hong forward 
analysis immediately applicable freenet request paths constructed probabilistically 
forwarding depends requested data datastore chance 
request forwarded routing tables determine sent forwards request forwards requests 
depth value may provide indication hops away originator obscured random selection initial depth probabilistic means incrementing see section 
similar considerations apply hops live 
investigation required clarify issues 
local eavesdropper protection messages user node contacted 
node contacted act local eavesdropper recommended user node machine point entry freenet network 
messages nodes encrypted local eavesdropping traffic analysis may performed eavesdropper may observe message going previous message coming conclude target originated 
key anonymity stronger sender anonymity achieved adding mix style pre routing messages 
scheme basic freenet messages encrypted succession public keys determine route encrypted message follow overriding normal routing mechanism 
nodes portion route unable determine originator message contents including request key mix net anonymity properties 
message reaches endpoint pre routing phase injected normal freenet network behave endpoint originator message 
protection data sources provided occasional resetting data source field replies 
fact node listed data source particular key necessarily imply supplied data contacted course request 
possible tell downstream node provided file merely forwarding reply sent 
fact act successfully requesting file places downstream node subsequent examination node suspicion reveals prior state affairs provides plausible legal ground data act investigation placed 
requesting particular file hops live directly reveal node previously storing file question nodes continue forward messages having hops live finite probability 
success large number requests related files may provide grounds suspicion files stored previously 
modification requested files malicious node request chain important threat corruption files 
routing tables replies requests node attempt steer traffic pretending files simply freenet returning fictitious data 
data stored content hash keys keys feasible inauthentic data detected node finds hash collision successfully cryptographic signature 
data stored keyword signed keys vulnerable dictionary attack signatures knowing original descriptive string 
number denial service attacks envisioned 
significant threat attacker attempt fill network storage capacity inserting large number junk files 
interesting possibility countering attack scheme hash cash 
essentially scheme requires inserter perform lengthy computation payment insert accepted slowing attack 
alternative divide datastore sections new inserts established files defined files having received certain number requests 
new inserts displace new inserts established files 
way flood junk inserts temporarily insert operations displace existing files 
difficult attacker artificially junk files requesting times requests satisfied node hold data proceed 
send requests directly downstream nodes holding files identities hidden 
adopting scheme may difficult genuine new inserts survive long requested established 
attackers may attempt displace existing files inserting alternate versions keys 
attack possible content hash key signed subspace key requires finding hash collision successfully forging cryptographic signature 
attack keyword signed key hand may result versions coexisting network 
way nodes react insert collisions detailed section intended attacks difficult 
success replacement attack measured ratio corrupt versus genuine versions resulting system 
corrupt copies attacker attempts circulate setting higher hops live insert greater chance insert collision encountered cause increase number genuine copies 
freenet network provides effective means anonymous information storage retrieval 
cooperating nodes spread computers conjunction efficient adaptive routing algorithm keeps information anonymous available remaining highly scalable 
initial deployment test version underway far proving successful tens thousands copies downloaded interesting files circulation 
anonymous nature system impossible tell exactly ian clarke oskar sandberg brandon wiley theodore hong users insert request mechanisms working anecdotal evidence far positive 
working implementing simulation visualization suite enable rigorous tests protocol routing algorithm 
realistic simulation necessary models effects nodes joining leaving simultaneously variation node capacity bandwidth larger network sizes 
implement public key infrastructure authenticate nodes create searching mechanism 
material partly supported national science foundation graduate research fellowship 

adler slashdot effect analysis internet publications linux issue march 

akamai www akamai com 

albert jeong barab si error attack tolerance complex networks nature 

american national standards institute american national standard public key cryptography financial services industry part secure hash algorithm sha 

anderson eternity service proceedings st international conference theory applications cryptology prague czech republic 

anonymizer www anonymizer com 

berthold federrath web mixes system anonymous unobservable internet access proceedings workshop design issues anonymity unobservability berkeley ca usa 
springer new york 

chaum untraceable electronic mail return addresses digital pseudonyms communications acm 

chen goldberg gottlieb yianilos prototype implementation archival intermemory proceedings fourth acm conference digital libraries dl berkeley ca usa 
acm press new york 

chor goldreich kushilevitz sudan private information retrieval journal acm 

church technology cause district court hague netherlands 

clarke distributed decentralised information storage retrieval system unpublished report division informatics university edinburgh 
available www org 

cottrell frequently asked questions mixmaster remailers www com loki remailer mixmaster faq html 
freenet 
dingledine freedman molnar free haven project distributed anonymous storage service proceedings workshop design issues anonymity unobservability berkeley ca usa 
springer new york 

distributed net www distributed net 

ellard park india protocol www eecs harvard edu ellard india www 

gnutella gnutella wego com 

goldberg wagner taz servers rewebber network enabling anonymous publishing world wide web monday 

goldschlag reed syverson onion routing anonymous private internet connections communications acm 

hash cash www org adam 

hong performance peer peer harnessing power disruptive technologies ed 
oram 
reilly sebastopol ca usa 

huberman adamic growth dynamics world wide web nature 

milgram small world problem psychology today 

napster www napster com 

reiter rubin anonymous web transactions crowds communications acm 

rewebber www rewebber de 

robinson web sites attacked day assault shut yahoo new york times february 

rosen eroded self new york times april 

tanenbaum modern operating systems 
prentice hall upper saddle river nj usa 

waldman rubin cranor publius robust tamper evident censorship resistant web publishing system proceedings ninth usenix security symposium denver usa 

watts strogatz collective dynamics small world networks nature 

zero knowledge systems www net 
