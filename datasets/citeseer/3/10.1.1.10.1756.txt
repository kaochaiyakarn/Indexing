resource usage analysis atsushi igarashi department graphics computer science graduate school arts sciences university tokyo igarashi tokyo ac jp naoki kobayashi department computer science graduate school information science engineering tokyo institute technology cs titech ac jp important criterion program correctness program accesses resources valid manner 
example memory region allocated eventually deallocated deallocation region longer accessed 
file opened eventually closed 
far methods analyze kind property proposed specific contexts studies memory management verification usage lock primitives clear essence methods methods proposed individual problems related 
remedy situation formalize general problem analyzing resource usage resource usage analysis problem propose type method solution problem 

important criterion program correctness program accesses resources valid manner 
example memory cell allocated eventually deallocated deallocation cell read updated 
file opened eventually closed 
lock acquired shared resource accessed 
lock acquired eventually released 
number program analyses proposed ensure properly 
type systems region memory management ensure deallocated regions longer read written :10.1.1.24.9456:10.1.1.23.9636
linear type systems ensure linear value accessed accessed :10.1.1.31.469:10.1.1.31.5002
abadi flanagan type systems race detection ensure appropriate locks acquired cell concurrent object accessed :10.1.1.111.9953
freund mitchell type system jvm ensures object initialized accessed :10.1.1.52.8631
laneve type system jvm ensures object locked eventually unlocked 
deline fahndrich type digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl portland oregon usa version slightly different original version proceedings errors corrected 
copyright acm isbn 
tem keeps track state resource order control access resource :10.1.1.14.7406
problems attacked mentioned pieces similar di erent types primitives access resources initialization read write deallocation want ensure primitives applied valid order 
spite similarity solutions deline fahndrich proposed specific problems :10.1.1.14.7406
result solutions ad hoc clear applied similar problems solutions di erent problems related 
contrast standard program analysis problems flow analysis flow analysis problem standard definition standard methods properties computational cost precision studied 
observation aims 
formalize general problem analyzing resource accessed resource usage analysis problem usage analysis problem short easy relate existing methods stimulate studies problem 

propose type method usage analysis 
deline fahndrich type system type analysis need programmers type annotation guide analysis :10.1.1.14.7406
analysis automatically gathers information resources accessed checks matches programmer intention 
give overview point 
resource usage analysis problem formalize resource usage analysis problem manner similar formalization flow analysis problem 
suppose expression program annotated label set labels 
standard flow analysis problem calculus obtain function flow denotes powerset flow 
means expression labeled evaluates value generated expression labeled 

equivalently problem obtain function flow term usage analysis refer linearity analysis 
resource usage analysis problem considered generalization problem linearity analysis 
flow 
means expressions labeled 
evaluate value generated expression labeled 
flow function know access may occur resource 
example consider fragment ml program fopen 
fread 
fclose 
assume fopen opens file name returns file pointer access file fread fclose resp 
takes file pointer input reads closes resp 
file 
flow lr know file opened may read closed expression evaluate file definition flow 
flow function provide information order resource accesses 
suppose low lc program 
flow information tell file created closed read file read closed 
write set finite sequences labels 
formalize usage analysis problem computing function means value generated expression labeled may accessed primitives labeled 
order ii checking contains valid access sequences 
reconsider example fopen 
fread 
fclose 
labels moved primitives creating accessing resources 
lr know file opened may closed read twice file read closed 
hand lr file may read closed 
problems considered instances usage analysis problem 
region memory management regard regions resources :10.1.1.24.9456:10.1.1.23.9636
suppose primitive reading value region writing value region deallocating region resp 
annotated resp 
region annotated program correct regular expression 
linear type systems regard values resources :10.1.1.31.469:10.1.1.31.5002
linear type system correct label primitive creating linear values contains sequences length 
object initialization correct label occurrence object creation primitive sequence begins label primitive object initialization :10.1.1.52.8631
usage lock primitives correct occurrence label lock primitive followed occurrence label unlock primitive 
control flow analysis problem considered instance usage analysis problem 
regard functions resources function abstraction primitive creating function function application primitive accessing function 
function created may called contains type usage analysis type resource usage analysis callby value simply typed calculus extended primitives creating accessing resources 
main idea augment types information resource access order 
example type file written file called usage expresses file accessed 
syntax usage means resource accessed primitive labeled means resource accessed accessed means resource accessed example file accessed primitive labeled primitive labeled type file 
extension types usages extend ordinary typing rules simply typed calculus 
example ordinary rule expressions replaced rule type environment indicates resources referred free variables accessed reflecting evaluation rule evaluated evaluated 
example file bool implies file accessed file bool bool get file bool 
resulting type environment indicates file accessed type system little complicated 
consider expression fread fwrite 
naively apply rule get file file file file fread fwrite bool file file file bool implies written read wrong 
wrong reasoning comes fact access represented type environment file occurs evaluated body expression fread fwrite evaluated 
solve problem introduce usage constructor means resource accessed expression evaluated value expression 
operator replace inference file lw file file file fread fwrite bool file lw premise file lw file reflects fact resource accessed value fwrite evaluated 
implies may accessed immediately access occurs access occurs 
order obtain accurate usage need keep dependencies di erent variables see section 
order get accurate information access order need rule remove 
suppose file derived know value evaluation result contain know accessed evaluated 
allow reasoning introduce rule escape operator cancel operator 
idea formalize type system usage analysis prove correctness 
develop type inference algorithm infer resource usage information automatically programmers declare access sequences valid type inference algorithm automatically computes function checks contains valid access sequences resource creation point rest section introduces target language 
section defines problem resource usage analysis 
sections type method resource usage analysis 
section discusses extensions type method 
section discusses related section concludes 
proof correctness type analysis detailed type inference algorithm longer version available www kb cs titech ac jp publications html 

target language section introduces call value calculus extended primitives create access resources 
assume countably infinite set labels ranged meta variable write set finite sequences labels write set 
special symbol denote termination program 
call element trace 
write empty sequence concatenation traces trace set denoted meta variable subset prefix closed ss implies 
denotes set prefixes elements ss 
definition terms 
syntax terms true false fix new acc extended standard calculus constructs new creating new resource acc accessing resource simplicity consider single kind resource functions single primitive resource creation 
assume access primitives acc 
return true false 
restrictive viewpoint usage analysis example behavior primitive accesses resource returns updated resource simulated acc 
fix denotes recursive function satisfies computationally equivalent include type analysis section precise see section 
formal operational semantics language defined section 
label denoted attached occurrence primitive access resources functions 
label may attached multiple occurrences primitive 
trace set attached occurrence abstraction recursive function resource creation primitive 
represents programmer intention function resource accessed evaluation 
trace form possible sequence accesses performed resource time evaluation terminates trace form possible sequence accesses performed time evaluation 
example new creates resource accessed accessed evaluation term terminates 
important distinguish traces 
example file trace set may contain file closed program terminates 
fix particular way specify trace sets 
specified various ways example regular expressions shu expressions context free grammars modal logics usage expressions introduce section 
bound free variables defined standard manner 
write fv set free variables fv write example 
init read write free primitives initialize read update deallocate resource respectively 
examples readable names primitives acc program creates new resource initializes calls function inside function resource read updated times deallocated 
fix read free write new init regular expression 
specifies initialized deallocated 
kind access pattern initialized accessed deallocated occurs various types resources memory files java objects :10.1.1.52.8631
trace set means programmer care function called 

resource usage analysis problem purpose resource usage analysis infer resource program check inferred resource usage matches programmer intention specified trace sets 
give formal definition resource usage analysis problem operational semantics takes usage resources account 
operational semantics introduce notion heaps keep track resource evaluation formally heap mapping variables pairs heap value resource function trace set 
definition heap values heap 
set heap values ranged syntax denotes resource created new 
heap function finite set variables pairs heap value trace set 
write 
xn hn may heap dom 
xn 
dom dom write heap dom dom dom dom 
program execution represented reduction pairs heap term :10.1.1.31.469
resource program point attached traces consumed label head trace removed trace begins traces discarded 
define represents trace set ls 
formal reduction relation defined auxiliary definitions 
definition small values substitution 
small value just value variable true false 
write standard capture avoiding substitution definition evaluation contexts 
syntax evaluation contexts acc write expression obtained replacing definition 
reduction relation error pair defined relation closed th rules 
fresh new fresh fresh fix true false acc acc acc error app error true ift false iff write reflexive transitive closure 
rules straightforward 
rules acc app attached trace set include trace represented 
hand traces included usage error signaled 
care result resource access left unspecified boolean value returned acc 
ordinary type error application non functional value occurs reduction get stuck 
example 
program obtained removing init program example fix read free write new evaluation fails read initialized 
acc lw acc error resource usage analysis define problem resource usage analysis 
intuitively resource safe evaluation cause usage errors resources evaluation terminates 
definition 
resource safe error dom 
resource usage analysis problem program check resource safe 
problem undecidable resource usage analysis sound need complete answer program resource safe answer program may resource safe 
example 
program example 
example 
program obtained program example replacing free definition true fix read true write new init evaluated follows lw true true acc lw true final state execution trace set associated indicates resource needs accessed execution terminates 
term reduced program resource safe second condition definition violated 

alternatively formalize usage analysis problem giving answer trace set consisting possible access sequences resource explained section 
type analysis sections solve problem 

type system resource usage analysis section type system guarantees typed closed program resource safe 
mentioned section main idea augment type resource usage expresses resource may accessed 
note programmers need explicitly declare usage programs type inference algorithm described section automatically recover usage information untyped terms 
usages types definition usages 
set usages ranged defined assume unary usage constructors bind tighter binary constructors means usage resource accessed 
denotes usage variable bound 
usages explained section 
usage resource accessed interleaved manner 
equivalent 
denotes recursive usage example means resource accessed arbitrary number times 
mentioned section means resource may accessed resource usage may accessed means access represented occur 
example equivalent 
usage means access represented occurs single access represented example equivalent usage means single access represented access represented happens 
example equivalent precise meaning usage defined subsection 
probably need usage constructors express final result resource usage inference need define type system type inference algorithm 
definition types 
set types ranged defined bool type function accessed called example bool bool type boolean function called called 
kind information example useful determine function closures deallocated 
type resource accessed outermost usage written defined bool semantics usages define meaning usages labeled transition semantics 
usage denotes set traces obtained possible transition sequences 
define relation induces subtyping relation labeled transition system usual notion simulation 
define auxiliary relations 
write obtained unfolding recursive usages removing branches choices 
definition 
relation reflexive transitive relation usages satisfies rules 
example definition 
unary relations relations usages satisfies conditions intuitively means resource longer accessed evaluation term terminates 
means resource accessed 
words labels boxed write similarly write relation write set 
call element extended label meta variable 
extended label defined set extended labels 
write sets respectively 
define transition relation intuitively implies resource usage accessed accessed definition 
transition relation usages relation closed rules 
example 
transition sequences transition sequence 
note righthand premise rule ur 
set traces denoted usage written defined follows 
definition 
usage 
denotes set ln 
un un ln un ln 
un un ln un un 
trivial definition trace set example 
ll lll 
subtyping define subtype relations 
intuitively means represents general usage resource usage may usage similarly means value type may value type define relation closed usage contexts 
formally usage context written expression obtained usage replacing occurrence free usage variable 
suppose set free usage variables disjoint set bound usage variables write usage obtained replacing example 
definition 
relation largest binary relation conditions satisfied 
usage context 

write definition 
subtype relation binary relation types satisfies rules bool bool sub bool sub fun sub res 
relax subtype relations 
subtype relation example replace rule sub fun rule 
type environments type environment mapping finite set variables types 
meta variables type environments 
write type environment domain empty 
dom write type environment dom dom dom 
define operations relations types type environments 
ur zero ur parl ur parr ur ur ur box ur unbox ur mult ur mult ur ur ur usage reduction rules definition 
usage context 
suppose set free usage variables appearing disjoint set bound usage variables define bool bool dom dom op binary usage constructor extended operations types type environments bool bool op op dom op dom dom op op dom dom dom dom dom dom type environment defined dom bool note bool undefined 
example 
bool 
bool bool 
write dom dom dom dom dom 
typing type judgment form carries ordinary type information information resources 
example implies resource accessed evaluated resource accessed implies access occurs evaluation access occurs evaluation value boxed boxed 
example acc type judgment holds 
annotation escape information necessary see example 
mentioned section escape analysis useful refine accuracy type usage analysis 
type system simple clarify essence assume kind escape analysis performed program annotated result escape analysis 
extend syntax terms introducing term form means escape sense heap value referred contained unreachable value simplest escape analysis compare type variants linear type system example type bool type resource type type function type escape sense :10.1.1.31.5002
typing rules shown 
rule var operator applied type type environment evaluated 
rules new abs fix premise checks resources functions created accessed represents programmer intention 
rule abs lefthand premise means resources referred free variables accessed time function called 
function called multiply obtain type environment expressing total access 
resources accessed function called applied 
rule fix similar abs similar calculation performed linear type systems :10.1.1.31.469
true false bool const var new new abs fresh fix fix app acc bool acc bool sub typing rules age describing function called complex 
type fix implies function called outside 
call evaluated function internally called internal call function called usage function total represented 
usage resources referred free variables function call evaluated resources accessed 
evaluation internal calls occur internal call resources accessed 
usage total represented applied resources accessed term fix evaluated 
rule app premises imply resources accessed respectively 
evaluated usage resources total represented function called usage similarly rule acc usage accessed rule evaluated evaluated 
usage resources total represented 
rule asserts escape access represented happen evaluated 
operator applied reflect fact 
exclude case bool case escape information useless 
example 
derivation type judgment acc shown 
type soundness type system sound sense closed typed expression type resource safe provided escape analysis sound 
condition means resources contained result evaluation may longer accessed 
value acc contain resources safe apply 
order explicit assumption escape analysis extend operational semantics target language deal terms form extend syntax evaluation contexts add reduction rule reach reach set satisfies conditions reach reach dom fv reach intuitively reach set variables heap locations reachable rule sure escape analysis wrong evaluation get stuck 
soundness type system stated follows 
theorem type soundness 
resource safe 
proof sketch 
technique similar kobayashi quasi linear type system 
introduce operational semantics target language semantics takes account expression heap value evaluation 
alternative semantics shown equivalent standard semantics certain sense type system shown sound respect alternative semantics 
interested readers referred longer version available www kb cs titech ac jp publications html details 

type inference algorithm closed term 
type soundness theorem theorem order verify resources var acc bool acc acc bool acc bool sub var bool sub acc example type derivation correctly su ces verify holds type 
section describe algorithm check 
simplicity assume conditions 
escape analysis performed input term annotated result escape analysis 
standard type part type obtained removing usages term obtained usual type inference 
write standard type occurrence term usage set traces algorithm verifies 
algorithm sound may complete fact depending specified problem undecidable 
expect complete algorithm third assumption algorithm described sound incomplete 
algorithm proceeds follows manner similar ordinary type inference algorithm calculus 
step construct template derivation tree usage variables denote unknown usages 
step extract constraints usage variables template 
step solve constraints usage variables 
step constructing template type derivation tree obtain syntax directed typing rules equivalent typing rules section exactly rule matches term 
obtained combining rule sub removing sub 
example app replaced rule app subterm input term prepare type usages fresh usage variables usages identical 
ii type environment dom fv dom identical outermost usages 
outermost usage fresh usage variable 
construct template type derivation tree labeling node judgment example consider term standard type bool 
template bool bool bool bool step extracting constraints order template valid type derivation tree su ces instantiate usage variables side conditions syntax directed typing rule satisfied derivation step 
side conditions expressed constraints types usages 
example node rule app applied side conditions expressed dom defined cs set constraints obtained gathering side conditions node template plus constraint 
substitution usage variables satisfies cs derivation tree obtained applying template valid type derivation tree 
problem deciding bool holds reduced problem deciding cs satisfiable 
reduce constraints types obtain set constraints usages 
un 
assume loss generality 
distinct usage variables holds holds 
step solving constraints set constraints 
un 
eliminate set constraints repeatedly applying transformation cs cs check remaining set constraints satisfied algorithm stated third assumption 
properties algorithm algorithm relatively sound complete respect algorithm judge sound complete resp 
sound complete resp 
note step fact solution sense implies 
suppose size standard types subterms bound constant 
computational cost algorithm excluding cost checking validity constraints form quadratic size input term 
note size constraint set step 
size set cs constraints 
reduced constraints usages steps size resulting constraints step 
total cost algorithm 
expect remove assumption size standard types bound performing inference standard types usages simultaneously manner similar 
assumed program input 
di cult adapt algorithm perform modular analysis second steps extracting reducing constraints applied open terms 
third step partially performed constraints usage variable solved know constraint imposed outside program analyzed 
examples give examples analysis 
omit annotations escape information assume terms type bool appropriately annotated escape information acc 
example 
consider program example 
types write bool 
get constraints usage variables solving know usages program 
usage implies initialized read written times deallocated 
example 
consider program fix read true push push pop pop new usage inferred manner similar example lr push pop 
implies accessed stack manner access push followed access pop 
kind access pattern appears stacks jvm lock primitives memory management counting counter increment corresponds push decrement pop 
example 
consider program fix true new read creates new resource passes function access resource 
calls function repeatedly forever 
types read bool bool bool 
get constraints 
get lr know accessed infinitely times 
product know program terminates trace contains 

extensions polymorphism subtyping type analysis polymorphism types usages improves accuracy analysis 
consider program acc acc acc calls return value call second call best type assign type 
introduce polymorphism give type assign accurate type similarly analysis precise relax subtype relation see 
dependencies di erent variables analysis imprecise alias 
example consider program acc acc type inferred equivalent 
lose information problem type environment just binding variables types keep track order accesses di erent variables 
solve problem extend type environments generic type system calculus :10.1.1.10.9481
example type environment expression acc acc represented means accessed accessed obtain type environment expression 
combination region inference regions effects useful improve accuracy analysis :10.1.1.24.9456
consider term acc acc 
best type assign term computationally equivalent acc acc 
problem rule abs loses information free variables accessed function applied 
better handle problem region effect systems :10.1.1.24.9456
introduce region express set resources region resource 
express type acc bool bool latent ect means resource region accessed function invoked 
precise information obtain ect expression 
problem method ect tells resource region accessed resource region accessed don know accessed represents multiple resources 
multiple resources aliased region example passed function new new common solution problem region polymorphism existential types cost complication type systems :10.1.1.14.7406:10.1.1.23.9636
currently studying method combine analysis region ect systems take best worlds 
resulting analysis longer require separate escape analysis region ect information subsumes escape information 
recursive data structures di cult extend type analysis deal recursive data structures lists 
example write list type list resources 
note deline fahndrich type system existential types required express similar information :10.1.1.14.7406
rules constructing lists list list list list case nil interested cons cells accessed extend list type list means cons cell accessed 
related goal close deline fahndrich vault programming language :10.1.1.14.7406
vault type system keeps track state called key resource 
state resource determines operations performed resource state changes operations performed 
keys type system roughly correspond usages type usage analysis 
main di erence analysis automatically gather information resource usage type system requires programmers explicit type annotations including keys guide analysis 
fact vault type system complicated requires existential types unsuitable type inference 
hand annotation trace sets framework declare valid access sequences 
declaration necessary valid access sequences vary depending type resource 
typically declaration trace set needs done kind resource 
example program defines new ro new rw functions create read file read write file respectively new ro new new rw new lw assume primitives reading writing closing file annotated respectively 
di erence resources finite states vault express possibly infinite states recall example 
technical ideas type analysis similar quasi linear type system memory management type systems concurrent processes especially deadlock free processes 
quasi linear type system distinguishes candidates access labeled heap value accesses labeled guarantees heap values judged quasi linear accessed accessed operation labeled 
similar typing rules keep track access order details di erent 
idea usage expressions borrowed type systems concurrent processes 
type systems usage expressions express communication channel 
mentioned section pieces previous memory management safe locking related resource usage analysis problem 
detailed comparison type analysis previous left 
problem linearity analysis viewed instance resource usage analysis problem removing information label names access order usage information get linearity information 
type analysis subsumes linear type system 
previous region memory management closely related walker :10.1.1.23.9636
programs explicitly annotated region operations type system checks safety region operations type system 
hand region memory management inserts region operations automatically :10.1.1.24.9456
type usage analysis programs explicitly annotated type information guides program analysis type system 
freund mitchell proposed type system java bytecode guarantees object initialized :10.1.1.52.8631
problem checking property instance usage analysis problem type analysis section powerful guarantee property 
main di culty typical java bytecode pointer uninitialized object duplicated pointers initialize object access object 
deal analysis extended keep track dependencies di erent variables mentioned section 
formalized resource usage analysis problem generalization various program analysis problems concerning resource access order 
intention provide uniform view various problems attacked individually far stimulate development general methods solve problems 
starting point development general methods resource usage analysis type method 
lot left 
order deal various kinds resources programming styles probably necessary extend type method discussed section 
fact current type method subsume solutions proposed individual problems :10.1.1.52.8631
left choose language appropriate specify valid trace sets design practically algorithm check inferred usages conform specification 
specification language trace sets currently planning shu expressions context free grammars 
note regular expressions little weak express access patterns example 
call value simply typed calculus target language type analysis 
interesting develop method usage analysis languages imperative languages low level languages assembly languages bytecode languages lazy functional languages 
di erent method may necessary analyze languages 
acknowledgment haruo hosoya discussions comments 

aiken fahndrich levien 
improving region analysis higher order languages 
proc 
pldi pages 
laneve 
type system jvm threads 
proc 
rd acm sigplan workshop types compilation tic 
birkedal tofte 
region inference von neumann machines region representation inference 
proc 
popl pages 
blanchet 
escape analysis correctness proof implementation experimental results 
proc 
popl pages 
deline fahndrich :10.1.1.14.7406
enforcing high level protocols low level software 
proc 
pldi pages 
emerson 
temporal modal logic 
leeuwen editor handbook theoretical computer science volume chapter pages 
mit press elsevier 
flanagan abadi 
object types races 
concur lncs pages 
springer verlag 
flanagan abadi 
types safe locking 
proc 
esop lncs pages 
freund mitchell :10.1.1.52.8631
type system object initialization java bytecode language 
acm trans 
prog 
lang 
syst 

shu languages petri nets context sensitive grammars 
comm 
acm 
gustavsson 
usage analysis bounded usage polymorphism subtyping 
proceedings ifl implementation functional languages lncs pages 
hannan 
type analysis stack allocation functional languages 
proceedings sas lncs pages 
igarashi kobayashi 
garbage collection linear type system 
proc 
rd acm sigplan workshop types compilation tic 
igarashi kobayashi 
type reconstruction linear pi calculus subtyping 
info 
comput 
igarashi kobayashi :10.1.1.10.9481
generic type system pi calculus 
proc 
popl pages 

shu languages theor 
comput 
sci 
kanellakis mairson mitchell 
unification ml type reconstruction 

lassez plotkin editors computational logic essays honor alan robinson pages 
mit press 
kobayashi 
quasi linear types 
proc 
popl pages 
kobayashi 
type useless variable elimination 
proc 
pepm pages 
kobayashi 
type systems concurrent processes deadlock freedom livelock freedom time boundedness 
proc 
ifip international conference theoretical computer science tcs lncs pages 
kobayashi saito 
implicitly typed deadlock free process calculus 
proc 
concur lncs pages 
springer verlag 
morrisett felleisen harper 
models memory management 
proc 
functional programming languages computer architecture pages 
nielson nielson hankin 
principles program analysis 
springer verlag 
kobayashi 
generalized deadlock free process calculus 
proc 
workshop high level concurrent language entcs pages 
tofte 
talpin 
implementation call value lambda calculus stack regions 
proc 
popl pages 
turner wadler mossin 
type 
proceedings functional programming languages computer architecture pages 
wadler 
linear types change world 
programming concepts methods 
north holland 
walker crary morrisett 
typed memory management static capabilities 
acm trans 
prog 
lang 
syst 
walker watkins 
linear types regions 
proc 
icfp 
wansbrough jones 
polymorphic type 
proc 
popl pages 
