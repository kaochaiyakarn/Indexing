formal parametric polymorphism mart abadi luca cardelli pierre louis curien digital equipment digital equipment cnrs systems research center systems research center ecole normale sup rieure polymorphic function parametric behavior depend type instantiated 
starting reynolds study parametricity typically semantic 
develop syntactic approach parametricity formal system embodies approach called system girard system deals terms types extension deals relations types 
possible derive theorems functions types theorems free wadler calls 
easy theorem free asserts type bool contains constant functions provable harder substantial examples 
various metatheorems obtained syntactic version reynolds abstraction theorem 
page 
explicit relations polymorphic function parametric behavior depend type instantiated strachey 
function reverses lists example parametric look types elements lists inputs 
important non parametric polymorphic functions print function maps values type text representations 
caveat argued truly polymorphic functions parametric case parametric polymorphic functions form core languages ml milner tofte harper 
reynolds provides precise counterpart informal definition parametricity just reynolds ma reynolds 
reynolds abstraction theorem concerns language similar girard system girard lafont taylor implies instances polymorphic function different types behave related ways 
example expressible function type type identity function instantiations types respectively 
case theorem says relation bit calculation reveals identity function function property identity function 
wadler call theorem free wadler result function obtained examining type code 
reynolds results system suggest generally view function parametric instances related types behave related ways 
preceding discussion functions types relations semantic objects 
reynolds results concern models polymorphic languages indirectly syntax 
similarly wadler free theorems concern semantic objects models immediately refer world syntax serve proving properties programs 
develop syntactic approach parametricity 
approach embodied extension called relations types constructed treated formally 
free theorems stated proved logical framework particular classes models 
free theorems come wadler hope detailed formal treatment illuminates proofs new intriguing 
various metatheorems obtained example syntactic version abstraction theorem 
cases results limited closed terms 
study help clarifying notions parametricity properties parametric models 
semantic explorations steer difficult course heavyweight categorical constructions lightweight fuzzy explanations contrast precise elementary syntax 
syntax possible formulate results conjectures relate intuitive definition parametricity types needed run time reynolds mathematical 
remainder contains informal technical comparison related works 
sections introduce theory free theorems 
discuss briefly touching semantics 
appendix contains complete set rules system 
describes proof due hasegawa inconsistency earlier version 
parametricity parametricity give example prove parametric functions type bool constant 
bool type booleans encoded start informal discussion functions type reasoning little precise section introduce judgments rules enable formalize reasoning free theorems 
page focus total functions 
computations assumed terminate 
known interaction recursion parametricity entirely trivial clearly strictness conditions added relations consider presence recursion 
function bool maps values type booleans 
precisely type type maps boolean 
primary examples functions satisfy constant functions instances map input true false 
models additional functions satisfy may considered belonging bool function zero instances map true input false 
hard code additional functions way typechecker accept resulting code requires types run time 
functions considered parametric 
constant functions remain 
sort discussion parametric functions just went exclude example zero vague entirely satisfactory depends particular models implementation intuitions 
reynolds satisfactory approach relations types 
discuss relations general convenient introduce model longo moggi special relations 
semantics types interpreted pers partial equivalence relations symmetric transitive relations universe values 
intuitively related type equal elements particular related element example may type records field type nat may records field value differ fields case related write pers set functions represented iff functions equal map inputs equal results equal universal quantification interpreted intersection bound variables ranging pers 
example language pers condition type bool bool follows bool ii equal elements maps boolean 
model functions type bool obvious constant functions follow ii 
record type instance requirement ii implies depend fields shown definition reynolds assume semantics notion parametricity seen strengthening requirement ii example says iii relation types relating equal booleans 
requirement ii corresponds special case identity relation intuitively reynolds suggests may think different representations type different representations value requirement iii means function respects representation abstractions input returns results independently representation input 
order state general form iii extend operations 
defined arbitrary relations just pers variables bound written 
range relations just pers 
notation natural relation associated type expression relation denoted type expression quantified variables page interpreted ranging arbitrary relations pers 
example relation bool bool general form iii stated element type related associated relation 
essentially reynolds abstraction theorem says functions expressible satisfy property 
abstraction theorem expressible type bool related bool 
follows types relation related bool relates follows bool relates stated iii 
iii simple prove constant functions elements type considered function type type relation bool associates element true 
bool related bool element bool true related bool equal fixed boolean bool true independently extensionality constant functions 
bool true arbitrary replaced closed type closed term type 
reynolds notion parametricity limited binary relations 
consider binary relations simplicity powerful deriving familiar consequences parametricity 
formalizing parametricity reynolds relational approach parametricity lends syntactic treatment 
system provides treatment judgments rules style judgments generalize system described appendix page legal environment relation types relates type type equality relation values needed 
writing equal promote type relation intuitively identity relation write relates consequence write corresponding judgment environments contain sorts assumptions directly inspired corresponding ones environments relation variable type variables domain codomain variables types respectively related judgments review central rules 
start rules imitate 
elimination rules respectively rules follow pattern rules rule says assume relates type type relates type type 
relation relates functions type type 
extra hypothesis relates added simplify technical lemmas 
elimination rule works opposite direction applying related functions related arguments obtaining related results 
elimination rules rules follow pattern rules rule says assume relation types relates type type 
relation relates polymorphic terms type type 
elimination rule works opposite direction applies related polymorphic terms related types obtaining related instances 
system rules variables rel val xr rel val rel val rule straightforward 
formalize parametricity condition 
example section rules imply variable type bool related bool 
apply elimination rules obtain iii 
kind reasoning common examples section 
abadi cardelli curien adopted different formalization parametricity turned inconsistent see appendix 
preceding rules rules conversion form core fragment deals relations built variables quantifiers 
basic system called sufficient encode page page proves proves syntactic version reynolds identity extension property 
closed terms proved appeal parametricity rel val rel val 
obtain equalities proves proves powerful additional methods constructing relations 
fact encoding just suggested conservative extension relational constructions followed closely ordinary type constructions 
addition allow relations defined functions obtaining system called abbreviation similarly 
rules terms turned relations function seen relation intuitively graph function 
rules functional relations analogue formalism yields results typically associated parametricity include rules constructing functional relations 
functional relations useful obtaining free theorems example section relevant functional relation constant obtained function bool maps true 
easily imagine mechanisms defining relations graphs functions 
examples mechanisms needed 
related papers semantic aspects parametricity bainbridge hasegawa ma reynolds hasegawa mitchell scedrov 
hand syntactic study parametricity new 
related 
mairson advocated developed syntactic approach parametricity order provide careful formal versions wadler theorems mairson 
mairson approach consists translating polymorphic language second order logic 
second order logic fairly weak induction arguments necessary proofs proofs wadler rely induction 
mairson treated system implicit typing stands contrast approach types relations treated explicitly 
resulting formalisms different properties 
cardelli defined extension subtyping cardelli 
curiously rules capture aspects parametricity provide full account 
ma suggested syntactic approach parametricity ma 
encoding relations subtyping 
power ma system understood difficulty finding model desired subtyping rules 
longo investigated parametricity system just new rule special case rules longo 
system weaker leads different sorts results 
plotkin abadi explore alternative formalization parametricity closer spirit mairson plotkin abadi 
describes second order logic axiom parametricity logic extension system logic system terms 

formal parametricity section describe formalization parametricity 
aim hypothetical system sufficient prove desired parametricity properties polymorphic programs 
current approximations called treated sections respectively 
system weak system pure relations relational constructions induced type constructions number technical lemmas proved lead interesting metatheorems 
example suitable encoding yields typings equalities 
addition conservative extension typing equality derivations 
abstraction theorem identity extension property hold useful conservativity result indicates additional means constructing relations 
extend functional relations obtaining relation expressions dependent value expressions syntactic properties system slightly complex 
fortunately metatheorems extend easily simply derivations derivations 
typing system conservative new equations provable 
indicated proofs section structural inductions derivations 
proofs long difficult carried order presentation claims 
point crucial dependencies 
relational interpretation system system derivations simply section derivations formalization system listed appendix note explicit form equality judgments include type environment information 
complete rules system listed appendix 
section establish basic system section relate typing typing section state structural lemmas section show soundness completeness equality show prove equations 
main result section theorem partial relational interpretation split sections 
remarkably theorem yields corollaries abstraction theorem identity extension property 
basic structural lemmas notation write dom domain collection variables introduced environment identifications 
usual identify terms renaming bound variables 
identifications directly syntax knowing terms involved product formal derivations system 
environments identified renaming variables domain environment variables kept distinct construction 
formal approach de bruijn indices free bound variables de bruijn 
page metavariables range value variables range type variables range relation variables range value terms range type terms range relation terms ranges environments 
write apple empty environment omit symbol 
stand indicate substitution component similarly dom indicates substitution component environment note may formed contains value terms 
distinct indicate simultaneous substitutions formed similarly environment place dom 
type relation defined inductively follows page abbreviations order embed notation fresh fresh start study basic structural lemmas lemma renaming assume dom 
derivations size derivations assumptions 
lemma implied judgments dom dom distinct lemma weakening assume dom dom apple 
typing show conservativity typing 
need definition flattening environment environment relation part forgotten definition environment flattening apple apple theorem flattened derivations derivations conservativity typing conversely possible encodings type variable associate fresh type variable fresh relation variable proceed similarly value variables example type may associate fresh type related 
enables map environments environments 
type variable judgment uses corresponding judgment 
freedom choosing similar freedom choice value variables 
freedom provide different encodings technical definitions general encoding theorem partial relational interpretation 
obtain simpler encodings corollaries 
definition decorating variables set type value variable names 
translation page numerical subscript variable belonging occurring free expression 
example page assume variable decorations chosen introduce variable clashes 
definition types relations set type value variables 
translation defined follows translation transforms type quantifiers relation quantifiers free type variables belong ing free relation variables 
particular dom 
definition environment decoration set type value variables environment 
translation defined follows theorem partial relational interpretation dom dom dom dom dom dom dom dom note occurrences right implications abbreviations environments defined section 
proof proof theorem continuation section induction derivations division environments parts 
proof variable cases settled rel val xr variables dom rel val variables dom 
emphasize special cases empty respectively corollary relational interpretation part corollary syntactic version reynolds abstraction theorem 
proved directly proof require parametricity rules rel val rel val 
corollary soundness part corollary syntactic version reynolds identity extension property 
refer name sequel 
close section lemma flattening 
proof similar theorem partial relational interpretation 
lemma derivations flattened derivations proof prove statements instances general statements proved corresponding statements theorem partial relational interpretation dom dom dom dom dom dom dom dom extending results equality judgments section complete collection structural properties page structural lemmas continued lemma rel id page proof derive theorem flattened derivations derivations conclude lemma derivations flattened derivations 
lemma type substitution assume proof mention case rel requires lemma weakening case rel wx requires lemma rel id addition 
similar proofs obtain lemma rel val refl lemma value substitution lemma implied judgments conclude derived rules generalize rules equivalence 
lemma generalized beta eta gen beta gen beta gen eta dom gen eta dom continued section complete material section showing equalities derived extending theorem partial relational interpretation equalities 
lemma environment 
variables middle bottom occur free dom proof denote renaming variables dom fresh page dom weakening page dom xi xi rel xi dom aj rel val 
aj dom repeated applications type substitution value substitution elimi variables left right obtain dom xj xj xi bottom sets substitutions vacuous assumption 
top sets substitutions transform back theorem partial relational interpretation dom dom dom dom dom dom dom dom proof cases val beta val beta val eta val eta solved generalized beta eta lemma 
detail case val eq trans 
applying splitting splitting get dom dom dom dom dom dom dom written simply lemma environment dom dom dom dom dom dom dom follows rel val saturation lft 
judgment relating proved similarly 
obtain interesting special cases corollary relational interpretation corollary soundness final theorem conservativity result states terms related type provably equal modulo renamings free variables 
definitions needed express necessary renamings definition environment built top part environment note apple apple defined symmetrically bottom part definition substitution replaces replaces defined symmetrically 
theorem conservativity equality page page example instance third implication theorem functional relations system section simply derivations complete rules system listed appendix 
rules included lemma transfer derivation exists derivation size shape 
results section extend uniformly replacing derivations derivations statements renaming weakening flattened derivations derivations derivations flattened derivations rel id type substitution rel val refl implied judgments generalized beta eta partial relational interpretation relational interpretation soundness 
proofs straightforward extensions inductions transfer lemma 
value substitution lemma reads follows lemma value substitution assume conservativity results conservativity equality extend 
examples new equalities shown section 
close section negative result counterexample strengthening expect strengthening lemma hold lemma claim provable occur provable 
calculi empty types meyer lemma fails true bool example show bool consistency false bool disallows true bool bool see section 
result attributed fact provably initial false bool stated section 
bool start introducing functional relation proving bool true 
furthermore bool bool bool bool true rel val rel val appl eliminating functional bool bool true bool false bool relation obtain bool similarly derive bool bool bool bool bool true bool rel val symm rel val saturation lft obtain bool false bool 
theorems free syntactically section illustrate power carrying formal proofs 
results apply terms just closed terms 
cases results closed terms somewhat difficult wadler wadler includes interesting semantic results read results closed terms 
order deal open terms structural induction mairson rule rel val identity extension property part corollary soundness see section 
section rules heavily 
simple examples subsections 
develop general technical tools sections reader may prefer skim sections pass 
formalize commuting squares functions notion extensional equality relations 
furthermore show covariant functors commute functional relations 
section apply tools prove properties type map function 
obtain substantial theorem initial algebras section encoding initial algebras covariant functors initial 
parametricity assumptions encoding weakly initial 
similarly treat encoding products coproducts section 
section briefly discuss applications initiality mainly properties type nat 
section raise conjecture connects reynolds notion parametricity type erasures 
statements superscripts explicit especially statement judgments systems 
superscripts omitted proofs 
plain stands abbreviations introduced section summarized appendix 
simple example example generalize formalize reasoning section type bool 
page proposition constant type free isomorphic exist terms page fresh 
proof observe soundness implies define polymorphic constant function 
pick closed type closed term example 
soundness weakening define applications rule yield second result requires parametricity 
consider constant function relation 
rel frel rel val rel val appl 
functional relation precisely rel val frel intro rel val beta rel val saturation 
rel val appl follows partially expanded environment 
rules replace obtain second follows rel val fun rel val eta rel val fun rel val eta 
contains identity function show terms type equal polymorphic identity function id type terminal 
closed terms result follows easily strong normalization strong normalization argument extend open terms 
proposition terminal id proof theorem soundness lemma value substitution suffices prove id rel frel obtain derive 
rel val rel val appl rel val frel intro rel val beta rel val saturation rel val appl rel val frel elim 
furthermore rel val rel rel val appl rel val xr rel val appl rel val saturation lft derive rules equate id follows proposition constant addition application rel val symm 
page commuting squares assumptions subsections develop tools serve formulate prove theorems type map section initial algebras section 
formalize assumption square commutes page functional relations encode equational assumption 
commutation diagram expressed requirement relates 
formalized lemma denote encoding composition setting 
lemma commuting squares suppose 
proof claim fresh 
rel val saturation may decompose claim parts easy check claim derive rel val eta rel val saturation lft rel val saturation 
conversely suppose weakening rel val xr rel val appl rel val symm rel val saturation rel val frel elim get weakening renaming get notice substitute judgment replacing vacuously obtaining assumption equate derive get rel val fun 
extensional equality define notion extensional equality relations 
notion formally added left metalevel 
intuitively relations extensionally equal graph extensionally inverses graph inverse graph 
definition extensional equality say extensionally equal write say extensionally inverses write op page definitions assume fresh 
state properties extensional equality 
proofs lemmas omitted 
lemma transitivity extensional equality page lemma extensional congruence lemma identity relations proof direction rel val rel val frel intro 
follows saturation rel val xr rel val beta 
converse direction rel val xr rel val frel elim obtain rel val beta lemma identity substitution proof induction structure lemmas identity relations extensional congruence 
commutation property third technical tool concerns covariant types 
say type covariant occurs positively example covariant symmetrically contravariant occurs negatively type 
type depending free variables considered fixed parameters may viewed map types types 
covariant determines covariant functor associates term type 
contravariant determines contravariant functor associates term type 
notation stands type stands type definition types functors suppose covariant contravariant consider environment 
define ax follows induction lemmas state substitution just defined yields typed terms preserves identities 
omit proof lemmas statement preserves compositions 
lemma functor formedness covariant fresh contravariant fresh lemma functors preserve identity covariant contravariant typically proofs get relations form application rel val appl may needed 
lemma says covariant functors commute functional relations transformed 
lemma commutation assume covariant fresh page page assume contravariant fresh op proof prove claim idea due plotkin 
second proved similarly 
theorem partial relational interpretation derive claim lemma functor formedness different substitution instances judgment establish claim 
lemma commuting squares weakening value substitution get lemma functors preserve identity soundness equalities replace weakening rel val appl rel val beta functional relation second substitution instance similar reasoning rel val get second half claim follows rel val xr rel val frel elim rel val saturation properties map apply technical tools developed subsections proof theorems map 
statements theorems express interesting equations polymorphic terms interpreted program transformations 
theorems proved semantically closed terms wadler wadler 
mairson discussed second theorems argued need structural induction framework 
stressed proofs free induction 
encoding lists list abbreviated list encoding familiar map function type list list instantiated applied list map type wadler theorems says take term type list list reverse square commutes list reverse list list reverse list list list may apply map list reverse reverse apply map reversed list 
property reverse 
applies term type reverse 
proposition direct generalization example 
proposition commutation polymorphic functions types covariant diagram commutes formally proof lemma commuting squares claim restated page applications lemma commutation claim reformulated follows identity extension property rel val appl 
proceed derive second theorem map 
wadler proved term type list list map composition order map rearrangement function reverse 
rearrangement function retrieved instantiating type say applying identity resulting term type list list proposition map stand list list judgments provable page list list list list list list list list list list list list list list proof consider commuting square stands list list 
rel frel rel val rel val appl rel val appl list list list list list list list stands list lemma commutation list list list list list list diagrammatic form proved list list list list list list consider substitution instances corresponding squares list list list list list list list list list list list list yield judgments statement lemma functors preserve identity 
initial algebras type covariant algebra pair type morphism algebra morphism term 
initial algebra algebra algebra exists exactly algebra morphism 
goal subsection show covariant type page turned initial algebra 
see wadler 
initial algebras useful programming example natural numbers see section defined properly polymorphic types 
hm berarducci similar types encode primitive recursion possibly heterogeneous term algebras hm berarducci 
obtain completeness result guarantees encoding algebras correct closed terms 
define fold page fold lemma states fold takes algebra algebra morphism 
lemma morphism assume covariant fresh fold fold proof lemma commuting squares statement equivalent equality fold fold follows straightforwardly definitions fold rules 
initiality means morphism equal fold 
proving initiality theorem establish lemmas 
lemma algebra morphisms assume covariant fresh diagrammatically fold fold left square diagram expresses morphism 
proof rel val rel val appl rel val appl obtain rel val frel elim claim follows lemma commutation 
lemma assume covariant fresh proof lemma morphism obtain substitution instance lemma algebra morphisms fold obtained renaming substitutions fold definition fold rules claim follows rules manipulations similar proposition terminal 
theorem initial algebras algebra initial 
covariant fresh fold proof assumption obtain consequence lemma algebra morphisms obtained renaming substitutions lemma equate page page unfolding fold obtain fold fold fold conclude rel val saturation lft rel val fun rel val eta 
consequence initiality isomorphism ax initial solution fixpoint equation halves isomorphism defined follows fold polymorphic types suffice encode covariant recursive types 
particular occur isomorphic 
products coproducts system properties provable terminal proved product initial coproduct 
existence products coproducts assumed results seen instances isomorphism constant example isomorphism get 
system system pre existent finite products coproducts 
properties proved separately independently initial algebra theorem 
discuss binary products 
proposition product type product 
proof adapt semantic proof communicated wadler 
known laws provable fst pair snd pair fst snd pair remains checked surjective pairing sp pair fst snd follow proof pattern theorem initial algebras 
get counterpart lemma algebra morphisms lemma commuting squares assumption amounts asserting 
instantiating pair get pair counterpart lemma obtained pair instantiate pair pair fst snd pair pair fst snd pair combining get pair fst snd claim follows rel val frel elim 
simpler proof theorem system extended support ternary relations binary relations 
suggest extension defined 
judgments rules added rel frel rel val frel intro page system proof surjective pairing goes follows 
rel val ternary version rel val appl hand instance variant lemma commuting squares obtain ternary relation application ternary relation elimination page rel val beta rel val saturation lft allow replace pair fst snd claim follows proof propositions constant terminal 
section application 
properties products obtain theorem booleans 
closed normal forms type bool true false prove functions bool type coincide true false equal 
example terms bool bool provably equal 
proposition bool bool bool true false bool bool true false bool proof sketch argument 
exploit isomorphisms bool isomorphic isomorphic isomorphic bool isomorphic halves isomorphism bool true false bool observes equal argument occurs contexts true false equality entails equality equal equal 
applications initiality briefly mention consequences general theorems initiality products 
type nat church integers initial algebra nat nat provably isomorphic 
type list lists initial algebra covariant variable list list provably isomorphic 
concentrate type nat rest section 
type nat prove naturality condition similar statement lemma algebra morphisms implication interesting instantiations 
recall classical encodings arithmetical operations succ nat nat nat zero nat add nat nat nat nat nat nat succ mult nat nat nat nat nat nat add zero exp nat nat nat nat nat nat mult succ zero prove nat nat nat nat nat succ zero nat nat nat nat nat add nat nat nat nat nat mult page page nat nat nat nat nat exp paulin mohring pointed equalities justify optimizations various higher order type systems 
erasures section collection examples somewhat different flavor 
examples general erasure conjecture 
roughly conjecture states terms having type environment having erasure provably equal 
erasure term untyped term obtained erasing type information 
formally erase erase erase erase erase erase erase erase erase erase precise formulation conjecture conjecture erase erase conjecture holds gives precise evidence reynolds notion parametricity formal system captures syntax reflects intuition types matter computations polymorphic programs 
prove disprove conjecture simply verify instances 
instance analogue axiom considered longo 
instance proof show prove desired result follows rel val symm rel val saturation lft 
derive judgment derivation similar 
identity extension property rel frel yields conclude rel val appl 
instance proof start constructing functional relation applying rel val rel val appl get xx rel val frel elim leads xx result follows propositions constant terminal rel val eta 
simple variant proof yields instance assume fresh 
final instance different ways assigning type untyped term instance course yields far equations ones arising conjecture 
example equal bool bool contains constant functions see section 
terms types respectively 
particular terms need erasure 
page 
working time feel useful system reasonable syntactic properties 
particular able prove theorems metatheorems full generality open terms 
power syntactic semantic terms deserves exploration 
realm syntax particularly interested conjecture discussed section terms erasure type provably equal semantics intend develop model model bainbridge 
standard model universal quantification types interpreted intersection pers contrast model bainbridge universal quantification types interpreted intersection saturated relations 
modification model leads simple proof soundness rules rel val rel val rules hand hasegawa hasegawa hyland robinson rosolini hyland robinson rosolini suggest standard model closely related ones may validate rules 
mentioned system cardelli captures aspects parametricity 
extension subtyping may yield encoding provide basis studying parametricity languages subtyping 
analogous extension logic parametric polymorphism carried plotkin abadi cardelli 
acknowledgments roberto ryu hasegawa christine paulin mohring gordon plotkin phil wadler helpful discussions 
abadi cardelli curien abadi cardelli 
curien 
formal parametric polymorphism 
proc 
th annual acm symposium principles programming languages 
bainbridge bainbridge freyd scedrov scott functorial polymorphism 
theoretical computer science 
hm berarducci hm berarducci automatic synthesis typed programs term algebras 
theoretical computer science 
cardelli cardelli mitchell martini scedrov 
extension system subtyping 
proc 
theoretical aspects computer software 
lecture notes computer science 
springer verlag 
de bruijn de bruijn lambda calculus notation nameless dummies 

math 

girard lafont taylor 
girard lafont taylor proofs types 
cambridge university press 
hasegawa hasegawa 
parametricity extensionally collapsed term models polymorphism categorical properties 
proc 
theoretical aspects computer software 
lecture notes computer science 
springer verlag 
hasegawa hasegawa categorical data types parametric polymorphism 
manuscript 
page hyland robinson rosolini hyland robinson rosolini 
algebraic types models 
proc 
mathematical foundations programming semantics 
lecture notes computer science 
springer verlag 
longo longo genericity theorem notion parametricity polymorphic calculus 
hm festschrift 
cambridge university press 
longo moggi longo moggi constructive natural deduction set interpretation 
mathematical structures computer science 
ma 
ma 
parametricity subtyping 
proc 
th annual acm symposium principles programming languages 
ma reynolds 
ma reynolds 
types abstraction parametric polymorphism part 
proc 
mathematical foundations programming semantics 
springer verlag 
mairson mairson 
outline proof theory parametricity 
proc 
th international symposium functional programming languages computer architecture 
springer verlag 
meyer meyer mitchell moggi statman empty types polymorphic lambda calculus preliminary report 
logical foundations functional programming huet ed 
addison wesley 

milner tofte harper milner tofte harper definition standard ml 
mit press 
mitchell scedrov mitchell scedrov notes relators 
manuscript 
plotkin abadi plotkin abadi 
logic parametric polymorphism 
proc 
international conference typed lambda calculi applications 
springer verlag 
plotkin abadi cardelli plotkin abadi cardelli subtyping parametricity 
manuscript 
reynolds reynolds types abstraction parametric polymorphism 
information processing mason ed 
north holland 

strachey strachey fundamental concepts programming languages 
lecture notes international summer school computer programming copenhagen august 
wadler wadler 
theorems free 
proc 
th international symposium functional programming languages computer architecture 
springer verlag 
wadler wadler recursive types free 
manuscript 
page appendix system environments env apple apple types page env env dom dom type type arrow type forall values val val fun val fun val appl val appl value equality val eq symm val eq trans val eq val eq fun val eq appl val eq fun val eq appl val beta val beta val eta val eta dom dom system notation metavariables range value variables range type variables ranges relation variables range value terms range type terms range relation terms ranges environments 
abbreviations environments fresh fresh env apple env dom distinct apple xw env dom distinct related types rel rel rel rel arrow rel forall rel frel page related values rel val symm rel val saturation lft rel val saturation rel val xr rel val rel val rel val fun rel val appl page rel val fun rel val app rel val frel intro rel val frel elim rel val beta rel val beta rel val eta rel val eta dom dom system system obtained removing functional relations corresponding rules rel frel rel val frel intro rel val frel elim system page hasegawa paradox consider system obtained allowing quantification type variables relations adding notion relation equality rules rel eq forall dom rel val rel eq rules formation relations elimination quantifiers congruence rules 
system abadi cardelli curien 
hasegawa shown system inconsistent follows 
consider environment bot bot bool bool bot bot bool bot bool rel val rel val bool bot true bot initiality bot section true bool true bool bot bool obtain bool false bool abstracting obtain false bool bot bot true bot bot bool bool bool bool false bool bool bool rel eq forall xw rel val rel eq yield bot bot true bot bot bool bool bool bool false bool bool bool hand bot bot bot bot bool bool bool bool rel val appl rel val appl reach inconsistency page true bool bool false bool blame inconsistency rel eq forall xw equates type quantifiers relation quantifiers arbitrary relation expressions 
rules appendix keep quantifiers separate 
