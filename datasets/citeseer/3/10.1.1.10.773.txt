computer science department technical report nwu cs october virtual networks virtual machine grid computing peter dinda virtual machines greatly simplify wide area distributed computing lowering level abstraction benefit resource providers users 
networking challenge remote sites provide connectivity machine attached site network outsiders 
response developed simple efficient layer virtual network tool effect connects virtual machine home network user making connectivity problem identical faced user connecting new machine network 
describe tool evaluate performance lan wan environments 
describe plans enhance adaptive virtual network dynamically modify topology routing rules response offered traffic load virtual machines supports load underlying network 
formalize adaptation problem induced scheme take initial steps solving 
virtual network able underlying resource reservation mechanisms behalf virtual machines 
adaptation reservation existing unmodified applications operating systems 
effort sponsored national science foundation ani aci ani eia eia gift vmware 
opinions findings recommendations expressed material author necessarily reflect views national science foundation nsf 
keywords virtual machines grid computing overlay networks virtual networks virtual machine grid computing peter dinda ais cs northwestern edu department computer science northwestern university virtual machines greatly simplify wide area distributed computing lowering level abstraction benefit resource providers users 
networking challenge remote sites provide connectivity machine attached site network outsiders 
response developed simple efficient layer virtual network tool effect connects virtual machine home network user making connectivity problem identical faced user connecting new machine network 
describe tool evaluate performance lan wan environments 
describe plans enhance adaptive virtual network dynamically modify topology routing rules response offered traffic load virtual machines supports load underlying network 
formalize adaptation problem induced scheme take initial steps solving 
virtual network able underlying resource reservation mechanisms behalf virtual machines 
adaptation reservation existing unmodified applications operating systems 
interest os level virtual machines abstraction grid computing distributed computing general growing 
virtual machine monitors vmware ibm vm microsoft virtual server virtual server technology uml potential greatly simplify management perspective resource owners effort sponsored national science foundation ani aci ani eia eia gift vmware 
opinions findings recommendations expressed material author necessarily reflect views national science foundation nsf 
provide great flexibility resource users 
grid middleware application software quite complex 
able package working virtual machine image contains correct operating system libraries middleware application easier deploy new relatively simple middleware knows virtual machines 
detailed case grid computing virtual machines previous 
traditional units distributed systems jobs processes rpc calls virtual machine direct presence network layer 
able communicate 
vmm software recognizes need typically creates virtual ethernet card guest operating system 
virtual card emulated physical network card host machine ways 
flexible bridges virtual card directly network physical card making virtual machine class citizen network indistinguishable physical machine 
single site works existing mechanisms provide new machines access 
grid computing intrinsically multiple sites different network management security philosophies spread wide area 
running virtual machine remote site equivalent visiting site connecting new machine 
nature network presence active ethernet port traffic blocked routable ip address forwarding packets firewalls machine gets gets presence depends completely policy site 
impact variation exacerbated number sites increased permit virtual machines migrate site site 
deal problem project developed vnet simple layer virtual network tool 
vnet virtual machines network presence remote site 
vnet provides mechanism project virtual network cards network moves network management problem network 
example user virtual machines appear connected user network user existing mechanisms assure appropriate network presence 
virtual network layer machine migrated site site changing presence keeps ip address routes part describes vnet works presents performance results local area widearea 
vnet publicly available 
developed vnet come believe virtual networks designed specifically virtual machine grid computing simplifying management problem 
particular see traffic virtual machines ideal position measure traffic load application topology virtual machines monitor underlying network adapt application measured network measured relocating virtual machines modifying virtual network topology routing rules take advantage resource reservation mechanisms underlying network 
best services done behalf existing unmodified applications operating systems running virtual machines 
second part lays argument formalizes adaptation problem takes initial steps solving 
related builds operating system level virtual machines essentially kinds 
virtual machine monitors vmware ibm vm microsoft virtual server abstraction identical physical machine 
example vmware provides abstraction intel ia pc including processors memory ide scsi disk controllers disks network interface cards video card bios top abstraction existing pc operating system applications installed run 
overhead emulation quite low 
applicable virtual server technology uml denali 
existing operating systems extended provide notion server id protection domain process id os call evaluated context server id calling process giving illusion processes associated particular server id processes os providing root privileges effective protection domain 
cases virtual machine illusion having network adaptors sees fit essential requirement 
stanford collective seeking create compute utility virtual appliances virtual machines task specialized operating systems applications intended easy maintain run trusted environment 
part collective middleware able create virtual appliance networks vans essentially tie group virtual appliances ethernet 
similar effect tie group virtual machines lan 
differ collective middleware attempts solve ip address routing remain completely layer push administration problem back user site 
difference expect running wide area environment remote sites administrative control 
administrative requirements remote site extremely simple focused entirely machine host virtual machine 
nature applications networking hardware grid computing tend different parallel scientific applications running clusters high speed wide area networks virtual appliances nature adaptation problems exploitation resource reservations possible vnet different 
contribution describe problems 
point adaptation mechanism plan migration extensively studied collective group 
closest purdue soda project aims build service demand grid infrastructure virtual server technology virtual networking 
similar vans collective soda virtual network violin allows dynamic setup arbitrary private layer layer virtual network virtual servers 
contrast vnet works entirely layer general virtual machine monitor model 
furthermore model strongly motivated need deal unfriendly administrative policies remote sites perform adaptation exploit resource reservations describe 
includes detailed performance results vnet currently available best knowledge van violin 
vnet virtual private network vpn implements virtual local area network spread wide area layer tunneling 
extending vnet act adaptive overlay network virtual machines opposed specific applications 
adaptation problems introduced ways generalizations control machine location overlay topology routing problems encountered design routing overlays 
strong connection parallel task graph mapping problems 
model developing middleware virtual machine grid computing user closely emulates existing process buying configuring intel computer process users certainly system administrators familiar 
model user visits web site web site dell ibm sells intel computers 
site allows specify hardware software configuration computer performance requirements order 
user receives virtual machine start reset clone machine 
system presents illusion virtual machine right user 
console display sent back user machine cd rom user machine cd rom virtual machine appears plugged network side side user machine 
user install additional software including operating systems 
system permitted move virtual machine site site optimize performance cost preserve illusion 
vmware gsx server running linux virtual machine monitor 
gsx provides fast remote console vnc order remain independent underlying virtual machine monitor 
proxy cd rom devices linux extended network block device cd image files 
network done vnet described section 
vnet simple layer virtual network vnet part system creates maintains networking illusion user virtual machines user local area network 
simple scheme works entirely user level 
primary dependence virtual machine monitor mechanism extract raw ethernet packets sent virtual network card mechanism inject raw ethernet packets virtual card 
specific mechanisms packet filters packet sockets vmware host networking interface 
describe vmware model networking build interface vnet performance results local wide area 
terminology 
user owner virtual machines vms accesses client machine 
user proxy machine networking proxy client machine 
vm runs host multiple vms may run host 
local environment vm lan host connected remote environment lan client proxy connected 
vmware networking vmware workstation gsx server variants connect virtual network interface network different ways 
operating system running virtual machine vm look 
connection types suited wide area multi site environment describe 
simplest connection bridged meaning vmware uses physical interface host directly emulate virtual interface vm 
emulation visible programs running host 
bridged connection vm shows machine local environment lan host 
creates network management problem local environment new machine suddenly appeared 
user machine network connectivity 

address 
route 
furthermore vm moved host different network problems recur new ones rear ugly head address vm changed 
open connections related state 
form connection host connection 
virtual interface created host connected virtual interface vm 
brought appropriate private ip addresses routes enables programs host talk programs vm 
need able talk vm client machines host networking insufficient 
minimum possible interaction network administration local environment 
final form connection network address translation nat commonly technique border routers firewalls 
similar host connection virtual interface host connected virtual interface vm appropriate private ip addresses routes assigned 
addition daemon running host receives ip packets interface 
outgoing tcp connection establishment syn rewrites packet appear come ip address host regular interface unused port 
records mapping ip address port vm address port assigned 
mappings explicitly added incoming tcp connections udp traffic 
packet arrives regular interface ip port rewrites recorded mapping passes vm 
client client eth client lan vnet proxy ethernet packet captured promiscuous packet filter eth client lan vnet proxy ethernet packet injected directly client lan ip network ethernet packet tunneled tcp ssl connection outbound traffic ip network ethernet packet tunneled tcp ssl connection inbound traffic vm host ethz eth network vnet ethernet host packet injected directly vm interface vm host ethz eth network vnet ethernet host packet captured promiscuous packet filter 
vnet configuration single remote virtual machine 
multiple virtual machines host possible multiple hosts 
single proxy needed client 
outbound traffic inbound traffic 
outside world simply appears host generating ordinary packets 
vm appears direct connection local environment 
purposes nat networking insufficient painful incoming traffic correctly mappings established manually 
furthermore cases necessary ip address virtual machine change migrated making impossible maintain connections 
bridge long wires essence vnet provides bridged networking vm bridged remote network network client 
vnet consists client server 
client simply instruct servers behalf 
physical machine instantiate virtual machines host runs single vnet server 
machine user network runs vnet server 
refer machine proxy 
user machine referred client 
client proxy machine 
vnet consists approximately lines 
helps illustrate operation vnet 
vnet servers run host proxy connected tcp connection optionally encrypted ssl 
vnet server running host opens host virtual interface promiscuous mode installs packet filter matches ethernet packets source address vm virtual interface 
vnet server proxy opens proxy physical interface promiscuous mode installs packet filter matches ethernet packets destination address vm virtual interface ethernet broadcast optionally multicast addresses 
avoid loops packet source address matching vm address 
case vnet server berkeley packet filter interface implemented libpcap functionality available unix platforms microsoft windows 
proxy vnet server sees matching packet serializes tcp connection host vnet server 
receiving packet proxy vnet server directly injects packet virtual network interface host built packet sockets available unix windows causes delivered vm virtual network interface 
illustrates path outbound traffic 
host vnet server sees matching packet serializes proxy vnet server 
proxy vnet server turn directly injects physical network interface card causes sent lan client 
illustrates path inbound traffic 
effect vnet handler vm appears connected remote ethernet network exactly proxy connected 
handler identified information ip addresses host proxy tcp ports host proxy vnet servers ethernet devices host proxy ethernet addresses 
typically address vm broadcast address single handler support addresses needed 
roles assigned machines host proxy single vnet server support arbitrary number handlers act host proxy role 
handler support multiple addresses 
example single physical interface proxy provide connectivity vms spread sites 
multiple proxies multiple interfaces single proxy increase bandwidth limit user site bandwidth broader network 
vnet operates data link layer agnostic network layer meaning protocols ip 
furthermore keep mac address vm virtual ethernet adaptor lan appears connected fixed lifetime vm migrating vm require participation vm os connections remain open migration 
vnet client wishing establish handler command description hello passwd version establish session done finish session devices 
return available network interfaces handlers 
return currently running handlers close handler tear existing handler handle establish handler local config described text local device remote config remote address remote port remote device local config establish handler local device described text remote config remote device 
vnet interface 
vnet servers contact 
convenient vnet servers nat firewall initiate handler outgoing connection firewall 
client network firewall vnet requires single port open site firewall 
sites need allow single port 
desired port permitted options 
vnet servers configured common port 
second ssh connections possible vnet tcp connection tunneled ssh 
interface vnet servers run host proxy 
vnet client contact server query status instruct perform action behalf 
basic protocol text making readily bootstraps binary mode handler established 
optionally encrypted security 
illustrates interface vnet server presents 
session establishment teardown establishment session vnet server initiated vnet client server hello command 
client authenticates presenting password ssl certificate 
session teardown initiated vnet client done command 
handler establishment teardown vnet client established session vnet server ask server establish handler server 
accomplished handle command 
shown arguments command parameters define handler described earlier 
local config config refer handler roles 
response handle command server establish session server handler pair authenticating 
issue command inform vnet server intentions 
server agrees servers bootstrap binary protocol communicating ethernet packets 
handler remain place servers closes tcp connection 
initiated client close command directed server 
status enquiry client discover server available network interfaces devices 
handlers currently participating handlers 
performance goal vnet easy convey network management problem induced vms home network user dealt familiar techniques 
important vnet overhead prohibitively high certainly wide area 
strongest weakest goal vnet performance line physical network capable comparable networking solutions don address network management problem sufficient applications scenarios 
implementation meets goals cases meets strongest goal 
metrics latency throughput fundamental measures evaluate performance networks 
time small transfer dominated latency large transfer dominated throughput 
interactivity dominated small transfers suffers latencies high highly variable 
bulk transfers suffer throughput low 
measurements conducted working days monday thursday early morning eliminate time day effects 
latency measure latency round trip delay icmp echo request response pair ping samples hour long intervals 
computed average minimum maximum standard deviation measurements 
report average standard deviation 
notice measure latency symmetric 
throughput measure average throughput ttcp program 
ttcp commonly test tcp client proxy client proxy mbit switches mbit switches mbit firewall switch router mbit switch firewall local area configuration mbit firewall switch router ip network hops abilene wide area configuration mbit switches router mbit switch vm host local vm host local 
vnet test configurations local area wide area 
local area labs northwestern cs department 
wide area labs lab carnegie mellon 
udp performance ip networks 
ttcp times transmission reception data systems 
socket buffer size kbytes transfer total gb data test 
vnet tcp connection uses socket buffer size kbytes 
tcp socket buffer size limit performance bandwidth delay product network path larger default buffers 
throughput measurements performed directions 
testbeds vnet targeted primarily wide area distributed computing evaluated performance lan wan 
lan testbed provides lower latency higher throughput wan testbed allows see overheads due vnet clearly 
client proxy host machines ghz pentium iii machines intel pro adaptors 
testbeds illustrated 
lan wan testbeds identical including router client 
portion lab northwestern cs department 
lan testbed connects router university control lab department separate private ip network 
wan testbed connects router northwestern backbone network pittsburgh supercomputing center administrative levels campus network carnegie mellon lab machine 
notice lan environment exhibit network management problem 
important stress requirement vnet places complex environments ability create tcp connection host proxy way 
measured latency throughput underlying physical ip network vmware virtual networking options vnet ssh connections physical vnet transfers ethernet packets multiple hops underlying network 
measure equivalent hops transfers excepting vm 
local host machine host lan host 
client analogous hop outgoing packet vnet hop incoming packet 
host analogous tcp connection handler tunnel vnet servers 
host client vm 
host host internal transfer host 
vmware consider performance vmware options described earlier 
host host networking vnet builds 
client bridged bridged networking 
leaves network administration problem remote site 
client nat nat networking 
partially solves network administration problem remote site layer creates asymmetry incoming outgoing connections support vm migration 
close vnet network traffic routed user level server 
vnet vnet project vm client network 
client vnet vnet ssl client vnet ssl vnet ssl ssh look throughput ssh connection client host compare vnet ssl 
discussion host client ssh results performance tests figures 
average latency shows average latency lan wan 
see average latency lan vnet ssl ms important understand exactly happening 
client sending icmp echo request vm 
request intercepted proxy sent host host sends vm see 
reverse path echo reply similar 
distinct pieces average latencies ms ms ms respectively physical network physical physical vmware vnet physical local area wide area 
average latency vmware vnet physical local area wide area 
standard deviation latency physical vmware vnet ssh local area wide area 
bandwidth vmware vnet vmware vnet physical vmware vnet ssh totals ms lan vnet ssl increases latency ms 
claim prohibitive especially absolute terms 
note operation vnet lan add prohibitively physical latencies 
vmware nat option closest analog vnet moving network management problem latency 
ssl encryption turned vnet latency grows ms ms factor higher possible unencrypted physical network 
note average latency wan vnet ssl ms ssl encryption ms add constituent latencies done see total ms words vnet ssl average latency comparable possible physical network wan 
average latencies seen vmware networking options roughly 
wide area average latency dominated distance get benefits vnet negligible additional cost 
result encouraging deployment vnet context grid computing primary purpose 
standard deviation latency presents standard deviation latency lan wan 
see standard deviation latency vnet ssl lan ms ssl increases ms adding constituent parts totals ms vnet clearly dramatically increased variability latency unfortunate interactive applications 
believe large variability tcp connection vnet servers inherently trades packet loss increased delay 
physical network noticed packet loss approximately 
vnet packet losses nil 
vnet resends tcp segment contains ethernet packet turn contains icmp request response 
means icmp packet eventually gets counted high delay packet lost packet increasing standard deviation latency measure 
histogram ping times shows delays multiple round trip time 
note standard deviation latency wan vnet ssl ms ssl ms adding constituent latencies totals ms showing unexpected overhead factor 
suspect high packet loss rates underlying network lead retransmissions vnet lower packet loss rates higher standard deviation latency 
measured packet loss rate physical network compared vnet 
noticed latencies deviated average multiples average latency supporting explanation 
average throughput presents measurements average throughput lan wan 
see average throughput lan vnet ssl mb sec ssl drops mb sec average throughput physical network equivalent mb sec 
somewhat surprised vnet numbers 
expected close throughput obtained physical network similar achieved vmware host bridged networking options 
performance lower considerably higher vmware nat option 
throughput tests essentially tcp connection running vm client riding second tcp connection vnet servers host proxy 
packet loss underlying vnet tcp connection lead retransmission delay ttcp tcp connection turn time retransmit 
physical network ttcp tcp 
packet losses detected receipt triple duplicate followed fast retransmit 
vnet loss underlying tcp connection lead packet loss detection ttcp tcp connection expiration retransmission timer 
difference packet loss detected timer expiration tcp connection enter slow start dramatically slowing rate 
contrast triple duplicate effect triggering slow start 
essence vnet ttcp tcp connection thinking round trip time highly variable really occurring hidden packet losses 
general suspect tcp congestion control algorithms responsible slowing rate reducing average throughput 
situation somewhat similar split tcp connection 
detailed analysis throughput case 
encryption ssl reduces throughput 
note average throughput wan vnet ssl encryption mb sec ssl mb sec 
average throughput physical network mb sec 
note throughput vmware bridged networking option slightly higher case vnet mb sec vs mb sec vmware nat considerably slower 
described difference throughput probably due overlaying tcp connections 
notice difference lan packet losses cases detected ttcp tcp connection expiration retransmission timer 
encryption ssl reduces throughput 
initially thought highly variable latencies corresponding lower ideal tcp throughput vnet due priority vnet server processes 
conceivably vnet server respond slowly higher similar priority processes host proxy 
test hypothesis tried giving vnet server processes maximum priority change delays throughput 
hypothesis incorrect 
compared implementation encryption ssl vnet server ssh implementation ssl encryption 
scp copy gb data host client lan wan 
scp uses ssh data transfer uses authentication provides security ssh 
lan case scp transfer rate mb sec compared mb sec vnet ssl encryption 
indication ssl encryption implementation overhead unreasonable 
wan scp transfer rate mb sec compared mb sec vnet ssl 
strengthens claim implementation encryption vnet server reasonably efficient 
comparing vmware nat throughput obtained vmware nat option mb sec lan mb sec wan 
significantly lower throughput vnet attains lan wan mb sec mb sec respectively 
described previously section vmware nat user level process similar principle vnet server process 
vnet performance exceeds vmware nat closest analog vmware vnet functionality encouraging 
summary main points take away performance evaluation physical network vmware networking options vnet gives ability shift network management problem home network client 
extra average latency vnet deployed lan quite low overhead wan negligible 
vnet considerably higher variability latency physical network 
automatically retransmits lost packets 
underlying network high loss rate reflected higher latency variability vnet 
vnet current implementation produces trade higher variability latency zero visible packet loss 
vnet average throughput lower achievable underlying network dramatically 
appears due interaction levels tcp connections 
working fix 
vnet average throughput significantly better closest analog terms functionality implementation vmware nat 
vnet encryption increases average latency standard deviation latency factor compared physical network 
encryption decreases throughput 
vnet encryption results comparable faster ssh 
find overheads vnet especially wan acceptable working better 
vnet transport network management problem induced vms back home network user readily solved acceptable performance 
adaptive overlay designed implemented vnet response network management problems encountered running vms potentially multiple sites user administrative connection 
come believe strongly overlays specifically designed support virtual machine computing great potential mechanisms adaptation exploiting special features networks 
overlay network ideal vantage point monitor underlying physical network applications running vms 
information adapt communication computation behavior vms changing topology routing rules moving vms 
requiring code modifications extensions particular application frameworks resulted limited adoption adaptive application technologies 
adaptation retrofitted modifications operating system applications running virtual machine completely transparent running vms 
similarly overlay running network provide extended services reservations light path setup teardown optical network features behalf unmodified operating system applications 
designing second generation vnet implementation support vision 
second generation vnet include support arbitrary topologies routing network vm monitoring interfaces adaptative control overlay including vm migration underlying resource reservation mechanisms 
describe extensions elaborate adaptation problem 
vm layer vmd layer terminology physical layer serves point terminology describing design problems induces 
left hand side see layers virtual machines vm layer virtual machine daemons host vmd layer physical network resources vmds run physical layer 
graph vm daemons overlay 
vm daemon vmd generalization vnet server able manage vms measure traffic characteristics underlying network 
nodes edges vm layer mapped nodes routes vmd layer 
physical layer underlying ip network 
nodes vmd layer mapped systems network 
right hand side shows symbols layer mapping layers 
boldfaced symbols represent adaptation underlying resource mechanisms take place 
vm layer consists individual vms vmi communication edges vei represented graph gvm 
vmi sends edge vei vm layer essentially representation demands user vms placing system 
bw vei lat vei bandwidth latency requirements vm vm virtual machine graph directed vm vm virtual machine vm node exists vm sends data vm edge fixed vm vd true vm may assigned vd comp vm compute rate demand vm size vm size vm bytes bw bandwidth demand lat latency demand vmap vm assignment vm appropriate vd dynamic vmd vd vde vm daemon graph directed vm daemons host zero vms vd vd vm daemon vmd node vde vde exists vd sends data directly vd edge dynamic route vd vd path vd taken data sent vd vd route dynamic vd measured compute rate vd vde measured available bandwidth vde vde measured latency vde vd assignment vd appropriate host static route vde route vde takes network topology graph net network topology graph directed vm daemons run hosts router host host true node host exists sends data edge route path taken data sent vd vd backplane bandwidth router network measured available bandwidth edge may exist measured latency edge may exist 
terminology 
communication vmi 
comp vmi computational demand vmi size vmi total size machine image 
vmd layer consists vm daemons vdi communication edges de represented graph de 
vdi sends route route vdi 
virtual machine vmi assigned single vmd vmap vmi 
edge vei vm layer corresponds route route vei route vmap vmi vmap vmd layer 
multiple vms may assigned single vmd 
vmd layer maintain measured bandwidth latency edges computational rate node vdi 
physical layer consists underlying topology nodes vi routers hosts ip layer ei links 
route vi vj routes chosen network host vi true vi host 
addition may able measure bandwidth latency elements link ei ei backplane bandwidth router vi raw computational power host vi 
vmd assigned single host physical layer host single vmd 
mapping vdi 
edge turns route route physical layer 
supporting arbitrary topologies routing currently vmd vnet server tunnels ethernet traffic particular address vmd tcp connection relationship refer handler described section 
principle multiple handlers multiplexed single tcp connection 
edges vmd graph simply tcp connections 
configuration vmds supporting user form overlay network star topology centered proxy machine user network 
messages routed proxy machine 
straightforward see possible support arbitrary topologies 
vmd effectively behave switch router sending packet arrives tcp connection connection injecting local network 
ethernet topologies simply emulate ethernet switch protocols vio lin 
ethernet packet contains source destination address 
modern ethernet switch learns location ethernet addresses ports source addresses traffic sees 
switches run distributed algorithm assures form spanning tree topology 
vnet understands supporting vms go simply emulating ip ethernet network 
example hierarchical routing ethernet packets possible ethernet addresses user vms chosen ethernet card vendors assigned vnet 
monitoring vms network vmd layer ideally placed monitor resource demands placed vms resource supplies offered underlying physical network minimal active participation 
vmd sees incoming outgoing packet vms hosting 
matrix representation gvm vmd hosting vmi knows ith row ith column 
collectively vmds know gvm reduction give full copy gvm 
modifying os operating systems vmds recover application topology 
vmd position infer bandwidth latency demands edge bw vei lat vei computational demand vm comp vmi total size vm image size vmi corresponding vms hosting 
reduction give vmd global picture resource demands 
inference information provided directly developer administrator modifications applications operating system 
vmds transfer packets behalf vms host 
outgoing packet vm routed hosting vmd zero transit vmds host vmd destination vm destination vm 
message transfered vdi transfer time free measurement corresponding path route underlying network 
collections measurements vmds derive known techniques 
vmd periodically measure available compute rate host vdi known techniques 
network monitoring tools remos nws cases determine physical layer topology measure links paths hosts 
vm assignment problems define additional terminology 
vm computes actual rate vmi pair vms actual bandwidth latency vmi vei min vde route vmap vmi vmap vde vmi vei vde vde route vmap vmi vmap vmd allocated compute rate sum rates vms mapped vdi comp vm vm vmap vm vdi similarly edge vmds allocated bandwidth bw route vm assignment problem find vmap function meets requirements complete vm vmap vm exists 
compliant fixed vmi vmap vmi computationally feasible vm vm comp vm vd vd vd communication feasible lat bw vde de vde vde routable route exists 
define variants vm assignment problem 
offline versions second online problems 
simple offline vm assignment problem gvm associated functions fixed comp size bw lat associated functions route choose vmap meets vmap requirements 
vmds fixed overlay topology routing rules 
envision situations problem arises 
user private vmd network runs multi vm application 
problem needs solved program startup communication patterns changed dramatically 
second case multiple users map virtual machines shared vmd infrastructure 
situation vms users treated fixed 
problem occurs vmd infrastructure determines mapping 
situation problem solved vms fixed new set vms enters leaves system periodically 
complex offline vm assignment problem gvm associated functions determine vmap de route vmap meets vmap requirements 
vmds fixed overlay topology routing rules chosen help find suitable vmap 
see problem occurring contexts 
user private vmd network supports topology routing changes 
second shared vmd overlay vmds solve problem collectively running vms 
simple online vm assignment problem existing gvm associated functions existing vmap new vm determine vmap vmap gvm vm meets vmap require ments 
complex online vm assignment problem existing gvm associated functions existing vmap route new vm determine new vmap de route vmap gvm vm vmap meets requirements 
connected components simple online vm assignment problem formulated terms connected components 
connected components graph partitioning graph subgraphs 
connected component directed graph maximal set vertices pair vertices path connecting 
vertices connected component exists path vertices 
graph contains connected component said connected graph 
directed graph gvm connected graph directed graph may may connected 
connected vdi vmi vmap vmi vdi 
note gvm connected graph vd vd vmap vd vmap vmi vmi connected 
existing gvm associated functions calculate cost cost de cost measure network cost value associated edge vm daemon graph 
cost value integrated metric function measured available bandwidth latency lat edges vm daemon graph 
vm assignment problem may described input gvm associated functions existing vmap connected component dc vdi dc vmi vmap vmi vdi cost value cost de output connected component dc vdi dc vmi vmap vmi vdi vd vd dc cost minimum set possible connected components algorithm connected component dc dc dc represents particular assignment vmi vdi particular vmap meeting vmap requirements possible connected components assignments choose cost associated vd vd dc cost minimum set possible connected components equivalent enumerating possible connected components size vm choosing cost associated 
engineering vmd overlay vmd infrastructure supports single user sensible think solving vm assignment problems exploiting simultaneously freedom change vmd topology routes move vms 
vmd infrastructure shared multiple users stage approach engineering sensible general purpose vmd topology doing dynamic assignment vms topology sensible 
approach require topology vmds mesh hypercube 
induces network engineering problem finding chosen topology behaves close expectations type terms bandwidth latency edges 
meshes hypercubes means edge equal terms bandwidth latency 
underlying overlay simple regular topology assign groups vms exhibit particular topology partitions vmd graph 
example known trees neighbor patterns embedded hypercubes 
parallel application running set vms exhibits patterns vms readily quickly assigned vmds 
exploiting resource reservations networks support reservations bandwidth paths 
example various optical networks support set essentially allowing arbitrary topology configured 
software provides application api exploit networks 
onerous task programmer determine appropriate topology api configure 
vmds behalf unmodified application collectively know gvm 
light path services traditionally isp level reservations diffserv implement engineered overlay shared multiple users described previously 
strong case grid computing virtual machine monitors virtual servers 
case combination virtual machine need network presence multi site multi security domain nature inherent grid computing creates challenging distributed network management problem 
described evaluated tool vnet addresses problem converting familiar single site network management problem 
combination vnet similar virtual network tools virtual machines opportunity adaptation exploitation resource reservations existing unmodified operating systems applications 
described opportunity depth pointing specific adaptation problems interactions specific resource reservation system 
currently extending vnet take advantage opportunity 
david hallaron julio lopez renato figueiredo giving access machines wide area performance evaluation ashish gupta sonia fahmy xu helpful discussions overlay aspects vnet 
andersen balakrishnan kaashoek morris resilient overlay networks 
proceedings th acm symposium operating systems principles sosp 
midkiff heuristic techniques processor link assignment multicomputers 
ieee transactions computers march 
campbell vicente meer spawning networks 
ieee network july august 
dike user mode port linux kernel 
proceedings usenix annual linux showcase conference atlanta ga october 
dinda gross lowekamp miller steenkiste miller architecture remos system 
proceedings th ieee international symposium high performance distributed computing hpdc august pp 

dinda online prediction running time tasks 
cluster computing 
earlier version appears hpdc 
summary sigmetrics 
francis ip network address translator nat 
tech 
rep rfc internet engineering task force may 
embley nagy behavioral aspects text editors 
acm computing surveys january 

www com 
ferguson vpn 
tech 
rep cisco systems march 
figueiredo dinda fortes case grid computing virtual machines 
proceedings rd ieee conference distributed computing icdcs may pp 

foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal supercomputer applications 
garfinkel pfaff chow rosenblum boneh terra virtual machine platform trusted computing 
proceedings th acm symposium operating systems principles sosp october 
lin framework ip virtual private networks 
tech 
rep rfc internet engineering february 
hand harris pratt controlling open platform 
proceedings april 
hua chu rao zhang enabling conferencing applications internet overlay multicast architecture 
proceedings acm sig comm 
ibm 
white virtual image facility linux guide 
gc feb 
ieee working group 
virtual lans 
tech 
rep ieee 
italiano rastogi restoration algorithms virtual private networks hose model 
procedings ieee infocom june 
jannotti gifford johnson kaashoek jr overcast reliable multicasting overlay network 
proceedings osdi october 
jiang xu soda service demand architecture application service hosting platforms 
proceedings th ieee international symposium high performance distributed computing hpdc june pp 

jiang xu violin virtual internetworking overlay infrastructure 
tech 
rep csd tr department computer sciences purdue university july 
kwong benchmarking comparison task graph scheduling algorithms 
journal parallel distributed computing 
leighton parallel algorithms architectures arrays trees hypercubes 
morgan kaufmann 
weinberger chen bacon yeh grossman gu enabling generation applications intelligent optical networking 
generation computer systems august 
mccanne jacobson bsd packet filter new architecture user level packet capture 
usenix pp 

microsoft 
virtual server beta release 
nichols blake baker black definition differentiated services field ds field ipv ipv headers 
tech 
rep internet engineering task force 
richardson stafford fraser wood hopper virtual network computing 
ieee internet computing january february 
chandra chow lam rosenblum virtual appliances deploying maintaining software 
proceedings th large installation systems administration conference lisa october 
chandra pfaff chow lam rosenblum optimizing migration virtual computers 
proceedings th symposium operating systems design implementation osdi december 
shi turner routing overlay multicast networks 
proceedings ieee infocom june 
lim 
virtualizing devices vmware workstation hosted virtual machine monitor 
proceedings usenix annual technical conference june 
duchamp analytical characterization throughput split tcp connection 
tech 
rep department computer science stevens institute technology 
valencia zorn layer tunneling protocol tp 
tech 
rep rfc internet engineering task force august 

www com 
vmware 
www vmware com 
whitaker shaw gribble scale performance denali isolation kernel 
proceedings fifth symposium operating system design implementation osdi december 
wolski spring hayes predicting cpu availability time shared unix systems 
proceedings eighth ieee symposium high performance distributed computing hpdc august ieee pp 

earlier version available ucsd technical report number cs 
wolski spring hayes network weather service distributed resource performance forecasting system 
journal generation computing systems 
appear 
version available uc san diego technical report number tr cs 
