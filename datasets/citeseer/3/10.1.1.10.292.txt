call value mixin modules reduction semantics side effects types tom hirschowitz xavier leroy wells cole normale sup rieure de lyon inria rocquencourt heriot watt university 
mixin modules framework modular programming supports code parameterization incremental programming late binding redefinitions cross module recursion 
develop language mixin modules supports call value evaluation formalize reduction semantics sound type system language 
programming large desirable programming language offers linguistic support decomposition structuring programs modules 
example linguistic support ml module system powerful support parameterized modules 
system weak important points 
mutual recursion mutually recursive definitions split separate modules 
cases hinders modularization 
modifiability language propose mechanism incremental modification defined module similar inheritance overriding object oriented languages 
class object oriented languages provide excellent support features 
classes naturally mutually recursive inheritance method overriding answer need modifiability 
viewed module system classes weaknesses offer general parameterization mechanism higher order functions classes mechanisms offer describe pre computations initialization static instance variables lack generality module system allow naturally alternate function definitions computational definitions functions 
mixin modules simply called mixins provide alternative approach modularity combines best aspects classes modules 
mixins modules holes defined components holes plugged composition mixins late binding semantics 
handling pre computations partially supported epsrc gr hirschowitz leroy wells call value mixin modules esop initializations mixins problematic 
previous mixins notably ancona zucca wells better suited call name evaluation strategy 
strategy impossible trigger computations initialization time 
goal define call value semantics mixins supports cleanly evaluation mixin components values programmer controlled evaluation order 
earlier hirschowitz leroy define typed language mixins call value setting semantics type directed translation enriched calculus 
improves attempt ways reduction semantics give source source small step reduction semantics mixin language 
semantics simpler translation semantics untyped 
simplifies proof type soundness standard argument subject reduction progress 
side effects semantics easy programmer know side effects occur control order occur 
anonymous definitions system features anonymous definitions definitions evaluated exported components final module 
translation semantics handle anonymous definitions type directed anonymous definitions appear mixin types 
practicality mixin types type mixin carry dependency information contents 
requiring dependency information match exactly declared type mixin actual type hirschowitz leroy practical 
address issue introduce new notion subtyping dependencies allowing mixin viewed dependencies 
furthermore appropriate syntactic sugar allows specify dependencies large class mixins low syntactic overhead 
section informally presents mm 
section defines language dynamic semantics 
section presents type system soundness result 
section emphasizes importance subtyping dependency graphs 
section examines related 
section concludes 
overview operational semantics mixins central idea bringing mutual recursion modifiability modules adapt distinction classes objects context mixins 
idea designs kernel language mixins called anonymous exactly private private definitions generally mentioned types private anonymous ones mentioned 
hirschowitz leroy wells call value mixin modules esop mm distinguishes mixins actual modules 
mixins dedicated modularity operations feature parameterization modifiability mutual recursion 
contents mixins reduced computation takes place mixin level 
modules dedicated computation contain fully evaluated values obtained mixin instantiation written close 
sake simplicity mm explicitly include module construct 
modules encoded combination records value binding 
roughly module struct 
xn en implemented rec 
xn en 
xn en 
previous value binding call value setting mm features single value binding construct expresses recursive non recursive definitions 
basically construct evaluates definitions left right considering variables values 
mixin pair set input variables 
xn list output definitions 
ym em written 
xn 
ym em operators mixins adapted previous works 
main composition mixins composition returns new mixin outputs concatenation inputs inputs filled output 
closing mixin 
ym em inputs called concrete order evaluate definitions obvious 
syntactic order arises previous compositions necessarily reflect intention programmer 
instance expression evaluates instantiated struct definitions evaluated left right 
close operator reorders definitions evaluating turning mixin module 
approximates order evaluation definition needs previous definitions 
unfortunately instantiation quite unintuitive presence side effects 
example programming ticket vending machine buying train tickets reasonable expect machine asks destination asking customer smoker 
second question useless trains requested destination full 
asking second question require information answer 
program built assembly mixins dependencies impose order questions source error 
handle issue language mixins provides programmer control order evaluation definition annotated name indicate evaluated 
example define destination smoker destination intuitively annotation tells system smoker depended destination 
call annotations fake dependencies 
additionally system provides operation adding dependencies posteriori 
instance assume mixin initially provided dependency annotation destination smoker important able add modifying source code 
written smoker destination hirschowitz leroy wells call value mixin modules esop evaluates previous mixin fake dependencies mm ready imperative features formalization include imperative features keep simpler 
typing mm natural way type check mixins sets type declarations input output components 
instance denote arbitrary expressions 
appears natural give types denote types respectively semi colon separates inputs outputs 
type composition adequate call name mixins type system sound callby value evaluation guarantee bindings generated close time contain founded recursive definitions safely evaluated call value 
example bound bound founded 
type signals problem 
sect 
enrich naive mixin types dependency graphs describing dependencies definitions formalize simple monomorphic type system mm 
graphs distinguish strong dependencies forbidden dependency cycles weak dependencies allowed 
instance strongly depends weakly depends 
graphs updated mixin operation allow detect ill founded recursions retaining expressive power mm 
mixin types carry dependency graphs types assigned inputs may contain graphs constrain mixins filling inputs exactly graph 
policy inflexible 
recover flexibility introduce notion subtyping dependency graphs mixin dependency graph viewed having constraining graph 
type system mm handle subtyping dependency graphs anonymous definitions mixins 
syntax dynamic semantics mm syntax formally define kernel language call value mixin modules called mm 
harper lillibridge distinguish names variables variables convertible names 
mm expressions defined fig 

expressions include variables records labeled names 
xn en record selection standard 
basic mixins called mixin structures abbreviate simply structures 
structure pair input shape 
xn xn output shape 
dm 
input maps external names hirschowitz leroy wells call value mixin modules esop expression variable 
xn en record record selection 
xn xn 
dm structure composition close closure xn deletion ex fake dependency rec 
xn en rec definition 
xn named definition 
xn anonymous definition fig 

syntax mm imported structure internal variables 
output ordered list definitions definition shape body definition label name anonymous label symbol stands possibly empty finite list variables 
xn list fake dependencies definition definitions structure 
provide representative operators mixins compose close close delete xn fake dependency 
additional operators formalized hirschowitz phd thesis 
mm features single value binding construct rec list recursive definitions 
xn en called binding 
previous construct encompasses ml recursive non recursive binding constructs 
restrict recursion syntactically follows 
backward dependencies binding 
xn en say backward dependency xi xj xj fv ei fv ei denotes set free variables ei 
backward dependency xi xj syntactically incorrect ej predictable shape 
predictable shape expressions predictable shape defined predictable sv rec sv ranges evaluated record sequences see definition values 
sequel consider syntactically correct bindings 
consider expressions equivalent conversion variables bound structures rec expressions 
consider inputs equivalent reordering fake dependency lists equivalent reordering repetition 
assume bindings inputs outputs structures resp 
records inputs outputs structures define variable resp 
name twice 
hirschowitz leroy wells call value mixin modules esop dynamic semantics values answers 
mm values defined sv 
xn xn 
dn sv 

evaluation answers values possibly surrounded evaluated binding rec bv bv 
xn vn 
contraction relation 
preparation reduction relation define local contraction relation rules fig 

reduction contain closure contraction evaluation contexts 
rule compose defines composition 
outputs viewed finite maps pairs pairs 
bind dom 
restriction dom pairs name component finite map names variables denote input 
composition structures structure defined follows union names defined removed 
result output defined concatenation 
side condition checking obtained mixin formed variable capture occurs 
binary relation rng denotes range set right hand sides pairs 
example suitable conversion composition reduces rule close defines instantiation structure input empty 
instantiation steps 
reordered dependencies fake dependencies syntactic ordering yielding new output reorder 
done considering syntactic definition order written unlabeled dependency graph written defined rules fv 
xn xi xi means depends unlabeled graph variables define binary relation respectively transitive reflexive transitive closure complementary relation defines partial order variables defined respects dependencies sense depend output reorder reordered left right lexicographical order 
dependencies impose order choose syntactic definition order default 
construction reorder hirschowitz leroy wells call value mixin modules esop contraction rules input formed rng bind fv rng bind fv close rec reorder reorder close compose xn input xn dom xn vars delete input yz sv sv select reduction rules context dom fv fake rec rec subst lift dom dom bv fv bv fv rec bv rec rec bv im evaluation contexts evaluation context rec bv rec bv nested lift context dom dom bv fv bv rec bv rec rec bv em access evaluation contexts lift context sv close xn dereferencing context close xn variable 
rec bv bv ea rec bv bv ia fig 

dynamic semantics mm hirschowitz leroy wells call value mixin modules esop backward dependencies part cycles 
example consider mixin instantiation evaluate second binding reorder generated defining definition reorder definition order reorder 
write syntactically correct expressions rule implicit side condition reorder syntactically correct 
instance reduction expression close stuck predictable shape 
third values named definitions reorder grouped record reorder named definition field record result instantiation 
rule delete describes mm deletes finite set names 
xn structure vars denote set variables 
restricted definitions 
second removed definitions remain bound inputs adding corresponding inputs 
rule fake describes fake dependency operation allows adding fake dependency mixin posteriori 
input denote input assume input output 
assume input 
expression adds fake dependency definition yielding record selection rule select standard 
mm rule eliminating rec 
evaluated bindings remain top level expression kind run time environment 
bindings top level expression lifted evaluation defined rule lift lift contexts reduction relation 
define dynamic semantics mm global reduction relation defined rules fig 

rule context extends contraction evaluation contexts 
mentioned top level binding evaluated 
soon definitions gets evaluated evaluation proceed enclosed expression definition left 
enforced definition evaluation contexts evaluation happens evaluated inside optional top level binding nested lift context simply series lift contexts 
evaluation meets binding inside considered expression binding lifted top level expression just top level binding 
case merged internally externally described rules im em respectively 
external internal substitutions rules subst ea ia allow copy evaluated definitions top level binding needed evaluation appear dereferencing context 
condition variable grammar ensures determinism reduction cases left argument copied 
hirschowitz leroy wells call value mixin modules esop static semantics mm types defined types signatures finite maps names types graph names labeled degrees 
degree respectively representing strong weak dependencies 
kinds types record types mixin types environments finite maps variables types 
type signature environment formedness require mixin type safe sense cycles contain weak dependencies labeled dom sense signature subtyping defined 
type system defined fig 

standard typing rule variable variables rule struct defines typing structures rule introduces formed input signature corresponding formed type environment corresponding rule checks definitions types mentioned types named definitions obtained composing input retained inputs outputs 
condition checks dependencies structure safe 
relies labeled dependency graph defined rules bind node degree node li xi bind 
xn node li xi node node denotes name 
edges graph labeled degrees computed degree function defined fv degree predictable degree 
variables appear types lift graph labeled graph names written 
extend edges anonymous components path add edge minimum 
denotes restriction obtained graph names 
subsumption rule sub materializes presence subtyping mm 
subtyping defined rules subtyping signatures defined component wise 
subtyping allows dependency graph replaced constraining graph 
section illustrates practical importance subtyping dependency graphs 
rule compose types composition expressions 
guesses lower bound input signatures arguments dom dom dom 
lower bound input signature result 
checking lower bound implies common names hirschowitz leroy wells call value mixin modules esop expressions dom variable dom dom input sub dom dom dom dom dom dom dom dom close xn xn xn struct close delete dom dom gx ex gx dom sequences rec record compose letrec fig 

static semantics mm fake select hirschowitz leroy wells call value mixin modules esop compatible types 
rule checks union dependency graphs safe name defined twice appears outputs 
result type shares inputs takes disjoint union written outputs union dependency graphs 
rule close transforms mixin type inputs matched outputs record type 
rule delete exactly corresponding contraction rule removes selected names output types reporting ones input signature 
graph modified accordingly operation xn removes edges leading deleted components 
rule fake types expression shape 
type dom dom adding fake dependency modifies graph denotes augmented strong edge rule checks graph unsafe 
rule letrec typing bindings rec standard side condition means contain backward dependencies definitions unpredictable shape ordered respect dependencies sense 
labeled dependency graph 
xn en defined labeled dependency graph equivalent output 
xn en 
require paths edge labeled forward 
sufficient ensure contains dependency problem 
select record rules typing record construction selection standard 
rule select implicitly requires dom 
fig 
presents typing outputs bindings straightforward consists successively typing definitions 
theorem soundness 
closed typed expression terminate reach answer 
proof theorem standard subject reduction progress properties hirschowitz phd thesis 
practical syntactic signatures subtyping dependencies mentioned enriching mixin types dependency graphs graph subtyping type system rigid 
assuming system consider mixin imports mixin type input declaration named associates graph want twice program composing different mixins exactly dependency graph attribute graph allows compositions 
furthermore standpoint separate development dependency graph part specification mixin 
informs clients dependencies 
definitions depend exactly components hirschowitz leroy wells call value mixin modules esop graph claims depend 
implementation mixin changes reason optimization bug fix probably specification change 
undesirable separate development encourages independent development mixins stable specifications 
previous type systems mixins suffer drawback require dependency graph output exactly match input fills 
improve type systems incorporating simple notion subtyping type system mm allows see mixin dependency graph mixin constraining dependency graph super graph idea giving type input programmer possibly type inference algorithm algorithm propose chooses reasonably constraining dependency graph remains compatible uses input 
subtyping allows input filled constrained definitions 
related problem dependency graphs fortiori constraining graphs mentioned cumbersome write hand programmer 
alleviate issue propose appropriate syntactic sugar define new form mixin type 
qn 
un new form list enriched specifications enriched specification single declaration block single declarations 
un 
single declaration assigns type name flag indicate input output respectively 
blocks considered equivalent modulo order represent groups potentially recursive definitions predictable shape 
single declarations represent arbitrary definitions 
construct elaborated core mm types basically declarations inputs declarations inputs outputs 
single declaration strongly depends preceding declarations 
declaration block strongly depends preceding declarations weakly depends declarations block 
form mixin types concise intuitive 
related mixin inheritance 
notion mixin originates object oriented language flavors investigated linguistic device addressing shortcomings inheritance semantic foundation inheritance :10.1.1.127.1416:10.1.1.23.8118
call kind mixins mixin classes 
issue mixin classes generally addressed treatment instance fields initialization 
mixin classes instance fields initialized arbitrary expressions raise exactly problems finding correct evaluation order detecting cyclic dependencies addressed context call value mixins 
initialization performed initialization method standard name say init hirschowitz leroy wells call value mixin modules esop breaks data encapsulation 
mm naturally allows interleaving function definitions arbitrary computations 
recursive modules 
harper russo extend ml module system recursive definitions modules 
addresses mutual recursion issue mentioned modifiability open recursion issue 
russo relies lazy evaluation recursive definitions attempt statically detect ill founded recursions 
harper standard call value fixed point operator statically constrain components recursively defined modules valuable 
flexible proposal module components weakly depend recursive variable 
dreyer lifts restriction effect system track strong dependencies recursively defined variables 
language designs mixins 
bracha formulated concept mixin inheritance composition independently object oriented setting 
mixins address initialization issue 
duggan extended proposal adapted ml 
system mixin comprises body containing function data type definitions surrounded prelude initialization section containing arbitrary computations 
composition bodies mixins connected initialization sections 
ensures mixin composition creates recursive definitions forbids alternate standard definitions composable definitions 
flatt felleisen introduce closely related concept units 
difference proposal units feature late binding 
initialization problem handled differently 
formalization units sect 
restricts definitions syntactic values includes unit initialization expression perform arbitrary computations 
duggan approach approach prevents creation ill founded recursive definitions flexible approach 
implementation units scheme allows arbitrary computations definitions unit components 
defined variables implicitly initialized nil evaluating right hand sides definitions updating defined variables results computation 
ill founded recursions prevented statically result run time type error value fixed point recursive definition 
linking calculi mixin calculi 
cardelli initiated study linking calculi 
system order linking model modules compilation units nested 
type system restrict recursion operational semantics sequential nature appear handle cross unit recursion 
result system lack progress property 
turbak explore expressive linking calculus confluent 
argued computationally sound hirschowitz leroy wells call value mixin modules esop sense strategies lead outcome 
system untyped feature nested modules 
ancona zucca propose call name module system called cms mm cms extends jigsaw allowing kind expressions mixin definitions just values 
mm cms distinction modules mixin modules sense call name languages contents modules evaluated selection 
call value contents module eagerly evaluated cms suitable model 
standpoint typing cms mm consistently call name languages control recursive definitions 
calculus ancona distinguish mixins modules 
propose handle side effects monadic operators 
attempt statically reject faulty recursive definitions 
system composition monadic definitions necessarily evaluated flexible proposal 
cms wells calculus targeted call name evaluation 
rich equational theory allows see mm strongly typed version calculus specialized call value plus built late binding behavior encoded calculus explicit distinction mixins modules programmer control order evaluation sound flexible type system 
language call value mixin modules equipped reduction semantics sound type system 
open issues remain dealt related different practical uses mixin modules 
mixin modules class core language constructs simple type system expressive 
form polymorphism mixin module types necessary lines type systems record concatenation proposed harper pierce pottier 
wants build module system mixin modules type abstraction user defined type components considered 
working extending type systems ml modules mixin modules type components 
plan build previous recursive modules 
issue appears finding inputs composition involves kind greatest lower bound operation types 
similar context odersky resort explicit annotations entirely satisfactory 
ancona moggi zucca 
mixin modules computational effects 
int col automata lang 
progr 
ancona zucca 
calculus module systems 
func 
progr 
hirschowitz leroy wells call value mixin modules esop bono patel shmatikov 
core calculus classes mixins 
guerraoui ed europ 
conf 
object oriented progr vol 
lncs 
springer verlag 
bracha 
programming language jigsaw mixins modularity multiple inheritance 
phd thesis university utah 
cardelli 
program fragments linking modularization 
th symp 
principles progr 
lang 
acm press 
cook 
denotational semantics inheritance 
phd thesis department computer science brown university 
crary harper puri 
recursive module 
prog 
lang 
design impl 
acm press 
dreyer 
type system founded recursion 
st symp 
principles progr 
lang 
acm press 
appear 
dreyer harper crary 
practical type theory recursive modules 
technical report cmu cs carnegie mellon university pittsburgh pa 
duggan 
mixin modules 
int 
conf 
functional progr 
acm press 
findler flatt 
modular object oriented programming units mixins 
int 
conf 
functional progr 
acm press 
flatt felleisen 
units cool modules hot languages 
prog 
lang 
design impl 
acm press 
flatt krishnamurthi felleisen 
classes mixins 
th symp 
principles progr 
lang 
acm press 
harper lillibridge 
type theoretic approach higher order modules sharing 
st symp 
principles progr 
lang 
acm press 
harper pierce 
record calculus symmetric concatenation 
th symp 
principles progr 
lang orlando florida 
hirschowitz 
modules mixins modules en appel par 
phd thesis university paris vii 
hirschowitz leroy 
mixin modules call value setting 
le tayer ed europ 
symp 
progr vol 
lncs 
hirschowitz leroy wells 
compilation extended recursion call value functional languages 
princ 
practice decl 
prog 
acm press 
hirschowitz leroy wells 
reduction semantics call value mixin modules 
research report rr inria 
leroy 
manifest types modules separate compilation 
st symp 
principles progr 
lang 
acm press 
turbak 
calculus link time compilation 
europ 
symp 
progr vol 
lncs 
springer verlag 
moon 
object oriented programming flavors 
oopsla 
odersky ckl zenger 
nominal theory objects dependent types 
fool 
pottier 
versatile constraint type inference system 
nordic journal computing 
russo 
recursive structures standard ml 
int 
conf 
functional progr 
acm press 
wells 
equational reasoning linking class primitive modules 
europ 
symp 
progr vol 
lncs 
springer verlag 
