flexible models dynamic linking sophia drossopoulou giovanni susan eisenbach department computing imperial college disi university genova dynamic linking supports flexible code deployment partially linked code links code fly needed users receive updates automatically 
side program run may link different versions code possibly causing subtle errors users 
dynamic linking java similar linking phases involved soundness similar ideas executions throw linking errors give result 
identical linking phases combined differently take place different order 
develop non deterministic model includes behaviour java 
non determinism allows describe design space distill similarities languages proof soundness 
prove execution strategies equivalent sense terminating executions involve link error give result 
dynamic linking supports flexible code deployment update fully linking code execution code linked fly needed 
newest version imported code linked updates automatically available users 
dynamic linking incorporated operating systems multics unix windows enabling applications share code saving disk memory usage 
java incorporated dynamic linking language 
question connected dynamic linking choice components linked name 
dlls net offer sophisticated systems versioning side side components registries difficulties managing dlls led term dll hell 
net architecture assemblies carrying versioning information claims solved problem 
java hand links class name classpath sophisticated scheme implemented custom class loaders 
question connected dynamic linking type safety guarantees choosing components 
breaking type safety integrity memory ultimately security 
dlls attempt guarantee type safety type errors may occur go undetected throw exceptions unrelated nature unrelated parts code 
conversely java components linked turn incompatible link related exceptions thrown describing nature problem 
partly supported dart eu project ist java guarantee choice compatible components guarantee type safety give error messages signal source problem 
study concerned java guarantee type safety 
java dynamic linking similar linking phases involved loading verification offset calculation layout determination 
soundness similar ideas consistency layout virtual tables verifying intermediate code checking calculating offsets 
executions throw linking errors give result 
java dynamic linking identical linking phases different granularity combined differently take place different order 
linking errors may detected different times java executions 
develop non deterministic model describe behaviour java 
prove soundness executions throw link errors give results 
model concerned interplay phases particular phases 
higher level java bytecode net il 
abstracts java multiple loaders net assemblies describes verifier type checker disregarding type inference data flow analysis issues 
models intermediate code interpreted disregarding difference jvm bytecode interpretation net il code jit compilation 
represents dynamic linking necessarily perceived source language programmer 
section introduces java dynamic linking example 
section describes model 
section states properties soundness equivalence 
section concludes 
www disi unige person dart papers dle long ps longer version containing examples lemmas detail 
dynamic linking phases presence dynamic linking execution understood terms evaluation affected dynamic linking loading reads classes environment verification checks type safety code laying determines object layout method tables offset calculation replaces fields methods corresponding offsets 
phases apply different units granularity loading laying apply classes whilst verification applies method bodies offset calculation applies individual member access expressions 
phases depend class laid loaded 
offset member class may calculated class laid 
verification requires class extend class load classes suggest approach posting constraints 
phases organized slightly differently java java offset calculation takes place instruction particular member accessed offset calculation takes place method combined verification give jit compilation 
java methods class verified java calc 
offset main output jit main check meal meal load meal lay meal verify main check penne penne check meal meal load penne pasta check penne penne calc 
offset main cls lay penne lay pasta calc 
offset eat penne execute main execute main lay meal verify meal verify eat penne check penne pasta load penne pasta cls sub verify chew pasta create new meal object create new meal object verify penne 
verify pasta 
create new penne object create new penne object calc 
offset eat penne jit eat penne check penne pasta sub calc 
offset chew pasta execute eat penne execute eat penne jit chew pasta calc 
offset chew pasta calc 
offset int cal pasta fld execute chew pasta execute chew pasta execute eat penne execute eat penne execute chew pasta calc 
offset int cal pasta fld execute chew pasta table 
execution program example verification class meal void eat penne chew void chew pasta null print print cal class food public static void main string args print meal new meal print penne new penne print eat null print eat table 
example program methods jit compiled execution 
example table illustrates points java details www dse doc ic ac uk sue html consists classes meal food compiled environment containing compiled versions pasta penne class pasta int cal class penne extends pasta classes satisfy requirements cls classes pasta penne sub penne subclass pasta fld pasta contains field cal type int required main food sub guarantees successful verification eat method body fld guarantees successful field access 
cls sub fld hold execution successful java give output 
versions pasta penne available runtime differ pasta penne may available cls 
penne may subtype pasta 
sub 
pasta may contain field int cal fld 
situations lead linking errors detected corresponding linking phases 
take place different times java errors reported different times 
shown table 
third column contains output 
second column contain linking phases occur java dependencies indicated symbol java verification class meal requires verification method eat turn checks pasta pasta penne penne 
table shows execution cls sub fld hold 
cls sub fld hold executions print output 
verification sub cause linking error java 
java verification checks methods class verifies method jit compiling call 
offset calculation java fld cause linking error java 
fields methods resolved java field accessed execution resolved method containing jit compiled 
subtypes optimistic java 
cls cause linking error java 
checking class subclass causes loading class java 
model appendix lists judgments terms model place definition 
mappings partial dom rng denote domain range function respectively denotes undefined value 
outline model programs see fig 
describe code forms raw classes loaded method bodies verification class layout 
ps map identifiers classes addresses method bodies 
classes contain superclass names raw containing signatures fields methods method bodies laid containing layout tables map field method signatures offsets virtual method tables map offsets addresses 
global contexts represent context raw classes may loaded 
heaps map addresses objects 
expressions allow method call field access assignment 
execution reads classes global context modifies heaps expressions programs 
form loading verification laying classes understood enriching information program represented judgement loading represented extension contents layout tables required extend superclass 
verification jit compilation represented modification method bodies indicating verified possible substitutions symbolic offsets 
offset calculation format meaning symbolic replaced offsets layout tables verification jit compilation represented means verified jit compiled expression type program may need extended information typing needs typing environment verification may need check subtypes means established subtype process extended model highly non deterministic supporting description languages verification 
model requires methods verified called fourth rule fig 
allowing lazy approach 
verification part program extension fifth rule fig 
program extension may take place time execution rule fig 
allowing java approach 
course allows behaviour methods verified jit compiled classes verified loading 
offset calculation java 
model combines verification judgment requires offset calculation subexpressions third fifth rules fig 

describes jit compilation 
offset calculation may leave expression unmodified rule fig 
describes java verification 
offset calculation may take place execution rule fig 
operational semantics member access requires offset calculated fourth fifth rules fig 

describes java offset cal programs prg classid body programs classid typ field descriptions typ typ exp method descriptions classid typ field layout tables typ typ method layout tables code tables body typ typ exp meth 
body jit 
exp meth 
body jit 
global contexts classid expressions exp new instance creation address parameter ma method invocation fa field assignment fa field access null pointer exception linking related exception typ type class name ma ann unresolved method annotation resolved method annotation fa ann unresolved field annotation resolved field annotation ann fa field annotation ma method annotation classid id class identifiers id field identifiers id method identifiers addresses offsets subtypes 
expressions programs subtypes cs cs cs cs cs injective dom rng cs wrt dom wrt dom tr tp dom rng tp tr 
program extension 
model allows executions offsets may calculated required symbolic replaced 
subtypes optimistic java 
model considers class identifier subtype rule fig 
reflecting java 
subtype checking may extend program verification penultimate rule fig 
reflecting 
timing link related actions model allows loading jit compilation verification offset calculation take place time rule fig 
needed 
allows linking exceptions null pointer exceptions time second rule fig 
necessary distinguish reason 
reflect practical implementations simplifies model considerably 
programs reflect internal representation code 
described 
map identifiers raw laid classes addresses method bodies 
raw classes correspond class dll files 
consist superclass name field descriptions consisting field identifiers types method descriptions consisting method identifier argument type return type method body 
laid classes consist field layout table determines offset field identifier type method layout table maps method signatures offsets virtual table maps offsets addresses method bodies 

free new 

execution 
exe exe exe method bodies checked consist signature expression typ typ exp bodies checked consist expression exp expressions syntax 
describes classes subclasses methods fields imperative language 
augmented high level language near source code 
augmentations memory offsets type annotations disambiguate fields methods name 
example expression cal pasta int denotes field called cal type int declared class pasta 
symbolic replaced offset calculation int cal offset class pasta expression rewritten 
values addresses natural numbers denoted null pointer 
field accessed method called exception raised 
stands distinguish link related exception verification errors class class circularities absence fields methods 
execution modifies current program expression heap form expressing global context may program extension 
defined small step semantics 
heaps map addresses objects memory blocks consisting class identifier values fields 
values object addresses 
heaps form classid 
classid points object class fields object stored offset 
address fresh iff 
heap contains penne object food object penne start penne object field int cal pasta food start food object heaps modelled lower level verifier studies objects indivisible entities address calculations 
lower level model enables description potential damage executing code 
program extension define mapping extensions wrt wrt program equality class address definition injective mappings set wrt iff dom dom dom 
wrt iff dom dom dom 
iff dom 
iff dom 
program extends program contains information loading classes refined information verification jit compilation layout calculation relationship format defined global context expresses environment possibly file system classes loaded 
detail reflexive transitive closure relation 
identical raw class read superclass cs identical class field layout extends cs fields introduced get fresh offsets method layout extends cs methods override signature methods cs mapped new addresses 
identical address contains verified jit compiled version method 
rule says programs may extended time 
second rule allows linking exceptions thrown time 
course highly nondeterministic prohibit linking phases errors unnecessary 
evaluation directly affected dynamic linking 
described third eighth rule 
creation new object new allocates fresh addresses fields corresponding offsets initializing 
auxiliary function collects field offsets superclasses tr tp tr tp 
offset calculation 
rng method call looks method body dynamic class receiver offset executes body replacing actual receiver parameter argument evaluation applies expressions contain format call tr tp means offset calculated 
requirement means class laid 
requirement means particular method verified jit compiled 
field lookup retrieves contents heap offset field assignment updates heap offset fifth rule 
method call field access throw described sixth rule 
execution propagated context described seventh rule 
link related unrelated exceptions propagated contexts described eighth rule 
execution contexts allow succinct description propagation exe exe ma ma exe exe fa fa exe exe fa offset calculation replaces symbolic offset format represents field method annotation 
says fields look name field type class whilst methods look name argument type result type class 
rule allows left unmodified 
rule allows offset calculation happen execution java 
defined appropriate notion offset calculation contexts offset calculation happens jit compilation modelling 
combining rule leaves offsets unmodified model java verification calculate offsets 
verification jit compilation describe similarities java verification jit compilation verification jit compilation fig 
tf tf fa tf fa tf tp tr tp ma tr tp ma tr new new te te tf fa tf fa tf 
verification jit compilation 
transforms expression type checks type possibly extends program process takes place environment maps parameter types typ global context parameter receiver type environment verification jit compilation object creation expression requires class gives type value class type method call requires receiver argument typed subtypes tp receiver argument types stored symbolic method annotation tr tp 
method call type tr result type annotation 
symbolic annotation may replaced offset modeling jit compilation 
offset calculation allows identity modeling java verification 
similar explanations apply rules access fields 
verification may require classes loaded offset calculation may require layout information classes 
described sixth rule allows extension program time 
verification jit compilation may need check type subtype type doing may need load classes judgment 
notice judgment allows identifier subtype loaded follows optimistic java approach 
object object dom rng rng object injective rng dom rng dom cs cs cs rng rng wrt set rng rng tr tp tp tr tr tp 
formed programs max classid classid 
conformance soundness equivalence strategies judgment defined fig 
guarantees program formed class object defined superclass superclasses subclass relationship acyclic object laid class superclass cs fields methods distinct offsets methods defined cs offsets methods defined offsets method bodies considered verified verified jit compiled albeit program extension empty global context 
defines conformance 
judgment expresses object stored conforms class stored 
fields object contain appropriate values corresponding offsets object may stored fields 
judgment requires objects conform class implicitly class objects stored defined new fa fa tp tr tp tr 
types runtime expressions 
tp tr tp tr notice conforms class allowing fields initialized belong class loaded 
types runtime expressions judgment fig 
rules similar verification jit compilation difference heaps taken account give types addresses environments taken account runtime expressions contain program extended 
runtime expressions containing field access offsets typed inverse layout function runtime types method calls welldefined formed programs layout functions injective 
longer version prove verification jit compilation execution extend programs 
subtyping conformance heap runtime types verification expressions formedness program established program preserved extending program execution expression preserves formedness programs 
verified expression preserves runtime type receiver argument replaced addresses appropriate class 
theorem prove subject reduction guarantees heap preserves conformance uninitialized parts store dereferenced expression preserves type 
theorem prove nondeterminism affect result evaluations throw link related exceptions provided operate global context theorem contain exception theorem renaming addresses 
theorem apply intermediate results link related exception counterexamples section 
related dynamic linking relatively new powerful language feature complex semantics needs understood 
model simple especially considering complexity feature compared earlier model java 
achieved simplicity iterations choice appropriate abstractions distinguish causes link related exceptions allow link related exceptions thrown time execution exist legal evaluations prescribe point execution program extended allow unnecessary loading verification combine concept program loaded verified laid code represent programs mapping texts data structures 
abstractions introduced primarily allow model serve java agreeable effect significant simplification 
non determinism java designers minds specification sect 
requires resolution errors thrown linking actions related error required 
non determinism distilled main ingredients dynamic linking languages dependencies 
prove type soundness obtaining type soundness java strategies showed different strategies model differ widely 
extensive literature devoted java verifier :10.1.1.52.8631
dynamic loading java formalized problems security presence multiple loaders reported solution flawed improved 
type safety substantial subset net il proven :10.1.1.12.7398
semantics linking studied 
module interconnection languages mixins give explicit control program composition source code level 
dynamic linking gave rise concept binary compatible changes sect 
changes introduce linking errors original code concept explored 
tools load binary compatible versions code developed java 
current jvms go support replacing class class signature fix continue feature 
dynamic software updates support type safe dynamic reloading code type may changed system running :10.1.1.135.2437
includes better understanding binary compatible library developments extension model allow verification posting constraints suggested allow field lookup superclass tables jvms incorporation assemblies modules extensions model avoid unnecessary linking steps concretization model obtain java behaviour 
indebted vladimir davide ancona elena zucca christopher anderson mark suggestions feedback 

davide ancona elena zucca 
calculus module systems 
journal functional programming 

luca cardelli 
program fragments linking modularization 
popl proceedings january 

mikhail 
hotspot technology application advanced profiling 
ecoop june 

sophia drossopoulou 
model java dynamic linking loading 
robert harper editor types compilation third international workshop revised selected papers 
springer 

sophia drossopoulou susan eisenbach david 
fragment calculus model separate compilation linking binary compatibility 
lics proceedings 

dominic duggan 
sharing typed module assembly language 
preliminary proceedings third workshop types compilation tic 
carnegie mellon cmu cs 

fenton 
securing java getting business mobile code 
john wiley sons 

kathleen fisher john reppy jon riecke 
calculus compiling linking classes 
esop proceedings march 

ira forman michael conner scott larry 
release release binary compatibility som 
oopsla proceedings october 

stephen freund mitchell 
formal framework java bytecode language verifier 
oopsla proceeedings november 

stephen freund mitchell 
type system object initialization java bytecode language 
oopsla proceeedings october 

andrew gordon don syme 
typing multi language intermediate code 
principles programming languages pages 
acm press 

michael hicks jonathan moore scott nettles 
dynamic software updating 
programming language design implementation 
acm 

thomas jensen daniel le tommy thorn 
formalization visibility dynamic loading java 
ieee iccl 


vu net framework evolution component systems 
www doc ic ac uk teaching projects html june 

sheng liang gilad bracha 
dynamic class loading java virtual machine 
oopsla proceedings october 

tim lindholm frank yellin 
java virtual machine 
addison wesley 

type safety security 
msdn magazine 


avoiding dll hell introducing application metadata microsoft net framework 
msdn magazine msdn microsoft com october 


simplifying deployment solving dll hell net framework 
msdn microsoft com november 

qian allen goldberg alessandro coglio 
formal specification java class loading 
oopsla november 

sadler eisenbach shaikh 
evolution distributed java programs 
ieee working conf component deployment june 

vijay saraswat 
java type safe 
technical report 
www research 
att comp vj bug html 

raymie stata martin abadi 
type system java bytecode subroutines 
popl proceedings january 
appendix overview terms judgments expressions fig 
types fig 
addresses fig 
offsets fig 
null pointer exception fig 
link related exception verification load err 
fig 
fa ma field method annotation fig 
field descriptions fig 
method descriptions fig 
field layout tables fig 
method layout tables fig 
code tables fig 
heaps sec 
environment giving types receiver argument sec 
exe execution context sect 
offset calculation context sect 
execution global context fig offset calculation fig 
verification jit compilation fig 
subtype extending program fig 
program extends program global context fig 
program type subtype fig 
formed program fig 
formed heap program fig 
runtime expression type context fig 
conforms class subclass fig 
wrt mapping extends set preserving dom def 
wrt mapping extends set preserving dom def 
agree address def 
agree class def 
set offsets allocated fields page type field contained offset page 
