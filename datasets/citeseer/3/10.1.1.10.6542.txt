softw syst model digital object identifier doi reconciling software requirements architectures intermediate models paul gr alexander medvidovic systems engineering automation johannes kepler university linz austria mail acm org admiralty way marina del rey ca usa mail acm org computer science dept univ southern california los angeles ca usa mail usc edu published online december springer verlag 
little guidance methods available refinement software requirements architecture satisfying requirements 
part challenge stems fact requirements architectures different terms concepts capture model elements relevant 
cbsp lightweight approach intended provide systematic way reconciling requirements architectures intermediate models 
cbsp leverages simple set architectural concepts components connectors systems properties recast refine requirements intermediate model facilitating mapping architectures 
furthermore intermediate cbsp model eases capturing maintaining arbitrarily complex relationships requirements architectural model elements cbsp model elements 
applied cbsp context different requirements architecture definition techniques 
leverage experience demonstrate cbsp method tool support large scale example 
keywords requirements elicitation negotiation architecture modeling intermediate models traceability software systems today characterized increasing size complexity distribution heterogeneity lifespan 
demand careful capture modeling requirements architectural designs early represents major revision extension published proceedings requirements engineering conference 
low level system details dominate engineers attention significant resources expended system construction 
understanding supporting interaction software requirements architectures remains challenging problems software engineering research 
evolving elaborating system requirements viable software architecture satisfying requirements difficult task mainly intuition experience 
similarly little guidance available modeling understanding impact architectural choices requirements 
software engineers face critical challenges trying reconcile requirements architectures requirements frequently captured informally natural language 
hand entities software architecture specification usually specified formal manner causing semantic gap 
system properties described non functional requirements commonly hard specify architectural model 
iterative concurrent evolution requirements architectures demands development architecture incomplete requirements 
certain requirements understood modeling partially implementing system architecture 
mapping requirements architectures maintaining consistency traceability complicated single requirement may address multiple architectural concerns single architectural element typically numerous non trivial relations various requirements 
increasing importance component software development cbd emphasizes need agile techniques allow cap gr reconciling software requirements architectures intermediate models ture understanding complex relationship requirements architectural elements 
real world large scale systems satisfy hundreds possibly thousands requirements 
difficult identify refine architecturally relevant information contained requirements due scale 
requirements software architecture emerge process involving heterogeneous stakeholders conflicting goals expectations terminology 
supporting different stakeholders interests demands finding right balance divergent interests 
aiming address challenges developed lightweight method identifying key architectural elements dependencies elements stated system requirements 
cbsp component bus system property approach helps refine set requirements applying taxonomy architectural dimensions 
intent provide generic approach primarily works arbitrary informal semi formal requirements representations different architecture modeling approaches 
requirements may captured formal language kaos informal semi formal approaches frequently 
order validate research date applied cbsp extensively context win groupware supported requirements negotiation approach 
selected supports multi stakeholder elicitation requirements captures requirements informally structured fashion 
cbsp provides intermediate model requirements architecture helps itera fig 

cbsp model context tively evolve models 
example set incomplete quite general requirements captured statements natural language available 
intermediate cbsp model captures architectural decisions incomplete proto architecture prescribes architectural development 
intermediate model looks requirements sounds architecture 
cbsp approach guides selection suitable architectural style basis converting proto architectures actual implementation software system architecture 
shows cbsp model context twin peaks model 
twin peaks model suggests requirements architectures evolved iteratively concurrently 
context intermediate cbsp model different levels detail modeling process 
example help refine high level informal requirements early project elaborated requirements iterations help understand issues arising architecture modeling simulation relate requirements 
cbsp provides lightweight way refining requirements small extensible set key architectural concepts mechanisms pruning number relevant requirements rendering technique scalable focusing architecturally relevant set artifacts involvement key system stakeholders allowing personnel customers managers users see impact requirements architectural decisions desired adjustable voting mechanisms resolve conflicts different perceptions architects tools supporting selected steps approach stress full automation gr reconciling software requirements architectures intermediate models approach possible desirable human decision making important aspect approach 
benefits afford high degree control refining large scale system requirements architectures 
organized follows sect 
discusses details cbsp approach 
section describes application cbsp large scale example 
section describes current tool support 
related discussed sect 

round sect 

cbsp approach ieee requirement condition capability needed user solve problem achieve objective requirements largely describe aspects problem solved constraints solution desired system features properties functional non functional 
requirements derived concepts relationships problem domain medical informatics commerce avionics mobile robotics 
requirements may simple complex precise ambiguous stated concisely elaborated carefully 
particular interest large class requirements predominantly stated natural language opposed precise formalisms 
surface requirements easier understand humans frequently lead ambiguity incompleteness inconsistencies architecture eventually software system 
advisable capture outcome requirements elicitation requirements evolution goals system stakeholders customers users managers developers preserve history rationale requirements production process 
relationship set requirements effective architecture desired system readily obvious 
architectures model solution problem described requirements provide high level abstractions representing structure behavior key properties software system 
terminology concepts describe architectures differ requirements 
architecture deals components computational data elements software system 
interactions components captured explicit software connectors buses 
components connectors composed specific software system topologies 
architectures capture reflect key desired properties system construction reliability performance cost 
elements software architectures specified formally architecture description languages adls 
described differences requirements architectures difficult build bridge spans 
example unclear general statement stakeholder goals affect desired system architecture similarly deciding effectively address functional requirement boils relying architects intuition applying understood methodology 
reasons formulated cbsp technique easing development architecture addressing set requirements straightforward consistent manner attempting transfer directly requirements architectures 
section introduce cbsp taxonomy architectural dimensions describe process guides development intermediate cbsp model 
cbsp taxonomy fundamental idea cbsp software requirement may explicitly implicitly contain information relevant software system architecture 
frequently hard surface information different stakeholders perceive requirement different ways 
time architectural information essential order properly understand satisfy requirements 
cbsp supports task identifying architectural information contained requirements explicating intermediate model 
cbsp dimensions include set general architectural concerns derived existing software architecture research 
dimensions applied systematically classify refine requirements capture architectural trade issues options impact connector throughput scalability topology 
requirement assessed relevance system architecture components connectors buses topology system particular subsystem properties 
derived cbsp artifact explicates architectural concern represents early architectural decision system 
example requirement system provide interface web browser 
recast cbsp processing component element cp cbsp bus element cp web browser component system 
connector provided ensure interoperability third party components 
important emphasize cbsp supports recasting requirements architecturally friendly model elements defined dimen gr reconciling software requirements architectures intermediate models sions prescribe particular transformation requirement 
intent give software architect sufficient leeway selecting appropriate refinement times generalization requirements 
examples refinement generalization 
architecting software systems inherently human intensive activity 
goal cbsp eliminate role human architects process 
goals aid architects making decisions effective timely preserving decisions 
possible cbsp dimensions discussed illustrated simple example spreadsheet manipulation application 
dimensions involve basic architectural constructs time reflect simplicity cbsp approach 

model elements describe involve individual component architecture 
example requirement allow user directly manipulate spreadsheet data 
may refined cbsp model elements describing processing components cp data components cd cp spreadsheet manipulation ui component 
cd data spreadsheet 

model elements describe imply bus connector 
example manipulated spreadsheet data stored file system 
may refined connector enabling interaction ui persistency components 

model elements describe system wide features features pertinent large subset system components connectors 
example user able select appropriate data filters visualizations 
may refined system employ strict separation data storage processing visualization components 

cp model elements describe imply data processing component properties 
discussed properties cbsp software system reliability portability incrementality scalability adaptability evolvability 
example user able visualize data remotely minimal perceived latency 
may refined cp data visualization component efficient supporting incremental updates 

bp model elements describe imply bus properties 
example updates system functionality enabled minimal downtime 
may refined bp robust connectors provided facilitate runtime component addition removal 

sp model elements describe imply system subsystem properties 
example spreadsheet data encrypted dispatched network 
may transformed sp system secure 
note bp example involved refining general requirement specific cbsp element 
hand sp example involved generalization specific requirement cbsp artifact 
refinements generalizations shown function needs specific system construction characteristics application domain software architect background experience 
additionally refining generalizing requirement may require consulting system customers additional context information 
undoubtedly useful unrealistic expect formal rules provided transforming requirement specific general cbsp elements 
meta model showing different model elements relevant cbsp fig 

requirements related architectural elements components connectors intermediate cbsp model acts bridge 
different subtypes cbsp elements represent different architectural dimensions listed cbsp taxonomy 
cbsp process provide step step process techniques supporting synthesis intermediate cbsp model architecture collaborative manner 
depicts process activities deliverables idef notation 
envisioned iterative life cycle depicted cbsp process represents cycle evolving refining architecture set requirements 
cbsp step discussed detail 
entry task verification exit document steps 
cells consist components entry lists items required execution task people tools artifacts task describes done includes appropriate standards procedures responsibilities verification validation describes checks controls help indicate task executed properly exit lists criteria gr reconciling software requirements architectures intermediate models fig 

cbsp meta model fig 

cbsp process gr reconciling software requirements architectures intermediate models need satisfied task considered complete output task 
step selection requirements iteration reduce complexity addressing large numbers requirements team architects applies cbsp taxonomy essential set requirements iteration 
architects eliminate requirements considered unimportant infeasible stakeholder prioritization arriving set core requirements considered level refinement see table 
stakeholders rate requirement criteria importance shows relevance value project success feasibility addresses perceived technical economic political constraints implementing requirement 
step architectural classification requirements team architects classifies selected requirements cbsp taxonomy see table 
requirements assessed experts requirement relevance cbsp dimensions ordinal scale partially largely fully 
instance requirement rated partially relevant selection requirements iteration table 
cell step initial set requirements informal semi formal notation prioritization method voting tool success critical stakeholders eliminate unimportant infeasible requirements check selection stakeholders check level consensus stakeholders initiate discussions case diverging opinions set requirements level cbsp refinement table 
cell step architectural classification requirements set requirements level cbsp refinement cbsp taxonomy voting tool architects classify selected requirements cbsp taxonomy check selection architects check completeness classification voting ballots architectural relevance profiles requirements component dimension implies partial impact architectural components 
profile showing aggregated architectural relevance cp bp sp created requirement 
shows examples relevance profiles 
step identification resolution classification mismatches multiple architects independently perform architectural classification requirements cbsp findings may diverge may perceive statement differently 
revealing reasons diverging opinions important means identifying misunderstandings ambiguous requirements tacit knowledge conflicting perceptions 
voting process mechanism reveal architects reduce risks requirements refinement see table 
measured consensus architects serves proxy mutual understanding requirement meaning agreement architectural relevance requirement 
determine level consensus kendall coefficient concordance measure association stakeholders ratings 
rules table indicate proceed different situations case consensus architects requirements accepted rejected gr reconciling software requirements architectures intermediate models fig 

relevance profiles table 
cell step identification resolution classification mismatches voting ballots architectural relevance profiles requirements architects discuss reasons diverging opinions low consensus items architects update requirements address issues ambiguities architects exclude architecturally irrelevant requirements check dependencies requirements sure critical requirements dropped issues ambiguities architecturally relevant requirements table 
concordance relevance matrix relevance concordance largely largely consensus accept reject conflict discuss voted degree architectural relevance 
accept requirement architecturally relevant mean stakeholder largely requirement rejected 
stakeholders agree relevance requirement architecture discuss reveal reasons different opinions 
discussion architectural refinement requirements issues ambiguities architecturally relevant requirements table 
cell step architects splits requirements exhibit overlapping cbsp properties architects eliminate redundancies check sure redundancies minimized cbsp elements dependencies cbsp elements process may involve customers stakeholders clarify requirement eases subsequent step refining architectural dimensions 
step architectural refinement requirements activity team architects splits requirements exhibit overlapping cbsp properties concerns see table 
requirement passing consensus threshold concordance largely relevant may need refined rephrased may relevant architectural concerns 
instance requirement largely component relevant fully bus relevant largely bus property relevant splitting gr reconciling software requirements architectures intermediate models architectural decisions cbsp increase clarity precision 
process cbsp artifact may appear multiple times product different requirements 
example requirements result identification cargo data component 
support different types cargo 
support cargo arrival vehicle estimation 
redundancies identified eliminated intermediate cbsp model 
possible merge multiple related cbsp model elements converge single artifact cd vehicle fig 

step process may undertaken slight variations 
variation involves identifying structural aspects system elements 
elements properties identified separate sub step 
advantage separating concerns structure functionality vs non functional system aspects allowing architect focus clearly big picture 
second variation identify single step system structural elements nonfunctional properties 
advantage streamlining process allowing architect focus single system concern small set concerns time 
variations combined project 
example team architects may perform single iteration variation followed iterations second variation 
step trade choices architectural elements styles cbsp point requirements refined rephrased cbsp model elements manner stakeholder conflicts exist model elements largely relevant cbsp dimensions 
simple cbsp model elements derived 
architectural styles provide rules exploit recurring structural interaction patterns referred architectural patterns class applications domains 
style guides architectural design system promise desirable system qualities 
time rules guiding selection application style specific architectural patterns suitable style typically semiformal best requiring significant human involvement 
furthermore multiple architectural styles may appear reasonably suited problem hand requiring additional select appropriate style 
issue discussed 
dependencies elements cbsp rules selected style allow compose architecture 
words select fig 

relationships requirements cbsp model cargo router example gr reconciling software requirements architectures intermediate models table 
cell step trade choices architectural elements styles cbsp cbsp elements dependencies cbsp elements property style mapping table architects identify candidate styles architects identify candidate architectural elements analyze properties cbs elements reconcile cbsp elements architectural elements avoid incompatible solutions candidate styles candidate components candidate connectors style characteristics application domain desired properties system identified requirements negotiation elaborated cbsp model see table 
course result multiple candidate styles obvious candidates 
selection style choice architects 
considering rules heuristics selected style architects start converting cbsp model elements components connectors configurations data desired properties 
specific procedure selecting suitable architectural style derived influenced previous architect automated assistant aaa approach researchers characterizing ad classifying architectural styles 
aaa supports rapid evaluation architectural options respect recurring stylistic concerns architectural properties suchas concurrency distribution loci control layering latency data transfer types forth 
addition recurring properties map cbsp dimension augment support provided aaa decomposing architectural styles concerns account cbsp ands dimensions data behavior interaction structure composition rules 
expanding classification styles grew classification software connectors captures known styles terms concerns 
aaa style classification provide significant aid architect refining cbsp model elements architectures adhere specific styles 
observation guides selection styles individual architectural elements composition architectural topology important properties elements topology guide selection style 
example set properties data components processing components buses sub systems specified rows table 
example may interested data component cached may know connector asynchronous 
note table clearly complete properties cbsp element possible 
goal produce complete table reasons complete table may infeasible constitute complete characterization software system 
second goal table help identify appropriate architectural style 
needs comprehensive necessary narrow choice appropriate style properties question table proves insufficient helping architect determine suitable style project simply expanded include additional properties 
table shows characterization architectural styles client server event layered filter set example properties 
styles characterized detail fielding 
briefly summarize client server architectures involve synchronous interactions service requesting clients service providing servers 
clients aware server identity location way 
clients may communicate server clients 
architectures involve asynchronous event interactions components may service providers servers requesters clients simultaneously 
connectivity components controlled set layering rules explicit connectors 
event architectures involve event interactions components 
interactions may synchronous asynchronous 
component may provide request services 
events dispatched special purpose meta level facilities system 
layered architectures involve synchronous call interactions components divided layers 
component layer may invoke components layer invoked components layer 
gr reconciling software requirements architectures intermediate models table 
cbsp style mapping cbsp dimensions properties client server event layered pipe filter data component aggregated persistent streamed cached processing service provide consume component interfaces stateful loose coupling migrated connector bus synchronous asynchronous local distributed secure sub system efficient scalable evolvable portable reliable dynamically reconfigurable legend extensive support support neutral support pipe filter architectures involve asynchronous interactions involving exchange untyped streams data components filters connectors pipes 
satisfy properties identified table 
partial characterizations styles example section drive selection appropriate style subsequently architecture example application 
additional styles additional properties added table need arises 
resulting architectural elements dependencies properties styles give building blocks developing architecture 
point nature software systems demands involvement software architects order reconcile cbsp artifacts package effective architecture see sect 

cargo router case study section illustrates development intermediate cbsp model context case study applied cbsp approach 
example application developed collaboration major software development organization 
addresses scenario natural disaster results extensive casualties material destruction 
response situation international relief effort initiated causing challenges software engineering perspective 
challenges include efficient routing delivery large amounts material aid wide distribution participating personnel equipment infrastructure rapid response changing circumstances field existing software tasks intended enabling interoperation numerous heterogeneous systems employed participating countries 
particular system called cargo router handle delivery cargo delivery ports shipping airports warehouses close distribution centers 
cargo moved vehicles trucks trains selected terrain weather accessibility factors 
system report estimate cargo arrival times vehicle status idle repair 
primarily responsibility system user initiate monitor routing cargo simple user interface 
performed thorough requirements architecture design modeling exercise evaluate cbsp context application 
easy identify negotiate requirements cargo router system 
methodology approach enhances directness extent frequency stakeholder interactions 
adopts set cots groupware components electronic gr reconciling software requirements architectures intermediate models brainstorming categorizing voting developed university arizona commercialized com 
stakeholders jointly elaborated requirements 
step team converged requirements requirements reviewing reconciling similar redundant ones 
instance stakeholder asked track location vehicles asked system enable real time status reports updates ports warehouses vehicles cargo obviously stakeholders pursued similar requirements merged verifying stakeholder consensus general requirement support real time communication awareness selection requirements iteration requirements initial baseline cargo router project covered functional nonfunctional aspects system interfaces software process aspects time budget constraints 
identify set requirements needed cbsp model iteration performed joint prioritization requirements selected requirements highest importance feasibility 
architectural classification requirements surface extract architecturally relevant information pool core requirements voting process initiated 
architects classified requirement respect architectural relevance cbsp dimensions cp bp sp 
stakeholders involved total votes cast 
classification process carried hour 
instance requirement support cargo arrival vehicle availability estimation voted strongly component relevant architects requirement system operational months voted architecturally relevant 
mean process business aspects general unrelated system architecture 
example schedule constraint may cause architecturally relevant requirements dropped relaxed 
requirements received contradictory votes requirement automatic routing vehicles voted component relevant cp cd system property sp relevant architect 
time high degree consensus requirements 
example architects voted requirement support cargo arrival vehicle availability estimation component relevant largely fully ratings requirement accepted architecturally relevant discussions 
identification resolution classification mismatches ambiguities requirements meanings led conflicts architects contradicted rating architectural relevance requirements 
instance architects disagreed system property sp relevance requirement automatic routing vehicles cast ballots partial architectural relevance 
concordance matrix table suggests situation stakeholders need discuss mismatch 
particular case discussion revealed different perceptions requirement implied 
stakeholder thought requirement implied system needs suggest paths vehicles travel navigation points sources targets 
stakeholder perceived requirement system need suggest sources destinations vehicles 
discussion clarified conflict instant re vote identified requirement system property relevant 
total decisions requirements dimensions decisions decisions affecting requirements requirements turned controversial needed attention 
conflicts resolved original requirements remained pool architecturally relevant requirements 
architectural refinement requirements architecturally relevant requirements explicate cbsp dimension 
requirements address multiple dimensions 
instance requirement match cargo needs vehicle capabilities voted processing component cp relevant requirement support cargo arrival vehicle availability estimation voted fully component relevant fully system relevant largely bus relevant 
requirement comprehensive 
fact requirement depended 
instance need special types vehicles ship liquid substances impact delivery time 
order better relate requirements necessary refine atomic entities 
instance fact cargo arrival estimation depends vehicle capabilities imply requirement fully depends 
cbsp dimensions play important role requirements refinement process 
example requirement match cargo needs vehicle capabilities determined component relevant 
requirement analyzed refined processing component cargo vehicle matcher 
processing component requires input cargo vehicle information resulting dependency relevant data gr reconciling software requirements architectures intermediate models components cargo weight 
data components exist created 
result refinement requirement produced types information cbsp model elements processing components describing architectural decisions links describing dependencies model elements 
cbsp model elements provide potential building blocks architecture cbsp dependencies help clarify potential control data dependencies architecture 
refinement process complex requirement similar elaborate 
instance discussed requirement support cargo arrival vehicle availability estimation determined relevant 
high level requirement supports processing components cargo arrival estimator vehicle availability estimator 
cargo arrival estimator depends data components representing cargo carrying cargo location vehicle 
vehicle availability estimator depends knowledge vehicle location cargo 
requirement rated bus relevant 
case location vehicle cargo variable moves 
connector bus needed allow system track vehicles recall requirement real time communication awareness 
shows excerpt cbsp model cargo router example 
depicts refinement requirements cbsp model elements 
example depicts requirement support different types cargo left shows refined simple data component called cargo right 
requirement support cargo arrival vehicle availability estimation complex broken model elements including processing components bus component 
shows model elements additionally refined sub elements vehicle dependencies 
additional refinement necessary result useful insights system interdependencies 
instance learn cargo component needed requirements making cargo system 
want remove cargo descriptions system existing dependencies allow reason impact removal parts architecture requirements 
context cbsp refined model elements merged case similarity resulting duplication cbsp artifact dependencies create multiple cargo data components 
stakeholders case study refined requirements cbsp model elements identified cbsp model elements architecturally relevant requirements 
refining requirements structural cbs elements dependencies obvious architecturally relevant information expressed fig 

identifying properties architecture relevant requirements way 
example requirement support cargo arrival vehicle availability estimation elements resulted connector comm link vehicle requirement implied central need access potentially distributed resources 
connector accommodate distributed vehicles ergo property connector distributed requirements infer additional properties 
example automatic routing vehicles requires access predefined set routes navigation points 
need persistent persistent property data component route 
multiple requirements may infer properties single structural cbs elements 
example requirement case network downtime system maintain latest known facts 
vehicles implies vehicles cache data 
furthermore requirement vehicles equipped location emitters generally receive commands driving implies vehicles accept streamed data see fig 

trade choices architectural elements styles cbsp cbsp model elements dependencies properties valuable architecture requirements trade analyses 
useful creating modifying architectural representations 
components buses typically relate architectural elements directly may encapsulate sets architectural elements 
example architecture cargo router gr reconciling software requirements architectures intermediate models vehicle component cargo arrival estimator component 
dependencies derived cbsp refinement infer architectural data control dependencies 
example cargo arrival estimator component depend vehicle information 
dependency indicates data dependency architecture 
cbsp properties translate architectural elements directly 
imply constraints architectural elements 
obvious constraints architectural elements imposed architectural styles 
properties infer restrict types architectural styles applicable cargo router case study 
table lists properties identified ability satisfy architectural style 
handful properties allow architect derive architectural style complex software system 
architectural styles differ ability satisfy certain properties 
follows favor architectural styles styles favor desired properties 
current treatment architectural styles largely informal 
reason believe styles selected composed automatically requirements 
responsibility architect 
cbsp recommend styles satisfy properties system 
architectural style consistently unsuitable set cbs properties clearly style bad fit 
table lists properties cargo router system context example styles introduced sect 
depicted table 
architect may infer table layered style clearly suitable client server style architecting system 
surprisingly styles perfect fit 
table 
architectural styles cargo router example client server style suitable streaming property vehicle data component 
necessarily imply style unsuitable system style needs adapted accommodate property 
client server style clearly better suited layered style pipe filter styles reasonable alternatives client server depending properties deemed important 
cbsp gives architect necessary input deciding best design implement system manner easier understand original requirements 
architect responsibility build system 
client server considered cargo router system case study system eventually implemented style 
depicts resulting architectures styles shows potential solutions alleviate style shortcomings 
solution left fig 
implements cargo router system architectural style primarily 
find estimator component placed underneath vehicle component architecture rules 
requires service providing components put service requiring components 
cbsp model elements discussed previously directly represented grouped elements vehicle data components estimator processing components 
cbsp artifact represented cargo defined adl depicted 
architectural style dictates strict request response behavior components 
suitable model streaming behavior required vehicles 
problem solved implementing vehicle component pipe filter style 
internally vehicle able receive streaming data cbsp dimensions properties client server event layered pipe filter route persistent data component warehouse cached data component vehicle streamed data component cached user interface vehicle loose coupling warehouse route processing component comm link vehicle distributed connector system dynamic reconfigure reliable gr reconciling software requirements architectures intermediate models vehicles externally appears normal component 
combined system implements cbs elements dependencies properties despite imperfect fit individual styles 
solution right fig 
implements cargo router system primarily client server style 
hiding signal receiving element solution solution models receivers clients 
clients standalone applications interact servers 
solution server primarily database store persistent cached data 
actual application operators cargo router system implemented separate client communicates data server 
vehicle warehouse data readily requiring operator client handle streaming data 
interesting note client server architecture addresses properties required cargo router clients distributed loosely coupled reconfigured dynamically support persistent data 
internals operator client implemented simple efficient layered architectural style previously unsuitable 
solution previous demonstrates carefully architecting system accommodate variety properties may appear contradictory times 
tool support ultimate goal provide tool support cbsp approach 
section discusses tools devised fig 

cargo router architectures consistent cbsp results support cbsp approach 
adopted theshelf components com groupware suite developed bridge cots modeling tool rational rose ease transition requirements architecture allow integration existing requirements architecture design tools 
selection requirements iteration 
activity supported part approach 
stakeholders distributed voting tool assess requirements importance feasibility 
voting determine priorities requirements reveal conflicts mismatching perceptions hidden assumptions 
stakeholders rate requirement criteria importance shows relevance requirement project success feasibility indicates perceived technical economic constraints implementing requirement 
voting process developers typically focus technical issues clients users concentrate relevance 
requirements automatically grouped categories low hanging fruit high importance low expected difficulties important hurdles high priority difficult realize low priority considered easy realize forget unimportant difficult achieve 
architectural classification requirements 
step fully tool supported cots voting tool 
cbsp dimensions assessed voting process involving multiple experts 
depicts voting results architectural relevance profiles showing requirements relevant pa largely la fu relevant 
gr reconciling software requirements architectures intermediate models identify resolve classification conflicts 
provide tool support identifying resolving classification mismatches 
achieved highlighting conflicting opinions perceptions 
different cell colors indicate level consensus experts 
consensus indicated green light gray fig 
disagreement indicated red dark gray fig 

vote spread displayed small window fig 
trigger discussions differences opinion 
fig 

cbsp classification conflict detection fig 

cbsp model ibm rational uml modeling tool architectural refinement requirements 
interface uml modeling tool provided support repository integration refinement requirements 
bridge platform allows translating requirements negotiation results cbsp model uml representation see fig 

uml stereotypes extend modeling capabilities enable artifact types bus property component tool support supports traceability gr reconciling software requirements architectures intermediate models requirements cbsp artifacts easing trace analyses software evolution 
trade choices architectures elements styles cbsp 
currently provide specific tool support recommending architectural styles 
cbsp model elements dependencies constrain architectural space manner potentially supports kind reasoning 
intend address area 
related described related areas research covering requirements architecture model transformation 
date applied cbsp context requirements negotiation approach 
related techniques focus capturing evolving stakeholder goals requirements note goals reflect objectives individual stakeholders may contradictory 
believe cbsp approaches 
refining requirements complements processes structured transformation technique tool support 
approach consistent preview approach sommerville sawyer emphasizes multi perspective requirements engineering conflict detection resolution 
approaches enable automated refinement requirements predicated formal treatment requirements 
key issue transforming requirements architecture software model elements traceability 
researchers recognized difficulties capturing development decisions modeling model elements 
finkelstein suggest formal approach ensuring traceability requirements development 
approach captures extensive traces satisfying needs identified 
cbsp eases capturing trace links narrowing gap informal semi formal requirements architecture models 
traceability created naturally cbsp monitoring refinement process 
easy tool supported 
developed techniques dealing traceability architecture requirements code software evolution 
area software architectures concepts provide guidance architects converting system requirements effective architectures 
architectural styles capture recurring structural behavioral interaction patterns applications way related similar 
discussed extensive architectural styles formulating architecture collection cbsp model elements 
drawback approach inherits styles typically collections design heuristics requiring extensive human involvement adding degree unpredictability task transforming cbsp model elements architectures 
second related concept domain specific software architecture 
captures model understood application domain set recurring requirements called requirements generic architecture called architecture common applications domain 
model elements task arriving architecture cbsp model elements simpler leveraging styles cbsp require existence restricted extensively studied application domains 
approaches proposed ease bridging requirements architectures technique supports evaluation architectures architectural decision alternatives light quality attribute requirements 
nuseibeh describes twin peaks model aims overcoming artificial separation requirements specification design intertwining activities software development process 
line twin peaks model cbsp approach argues iterative concurrent development requirements architectures intermediate cbsp model 
cbsp process describes iteration development context 
intermediate cbsp model helps relate architectural issues requirements 
hall describe extension jackson problem frames approach adopts idea twin peaks model supporting iteration problem solution structures 
authors propose allow architectural structures services artifacts considered part problem domain solution domain 
extend current model machine domain problem frames view architectural engine 
perry coin term architecture prescription language extension kaos goal specification language architectural dimensions 
bruin approach called fs graphs relate desired system features quality attributes solution fragments development activities effect features 
example desired feature may system secure corresponding solution fragment may employ encryption scheme fs graphs weighted relations provide set operators xor relate multiple features multiple solution fragments 
objective fs graphs allow reuse composition solution fragments systems similar desired features 
may seen simple example cbsp fs graphs specifically geared relating system quality requirements architecture gr reconciling software requirements architectures intermediate models deal solution space higher abstraction level 
bruin begun moving direction software architectures part quality driven software architecture project 
chung discuss architectural properties modifiability performance modeled softgoals different architectural designs support goals 
architectural decisions traced back stakeholders 
maiden apply actor modeling approach modeling software architectures terms connectors pipes terms actor dependencies achieve goals satisfy soft goals consume resources undertake tasks 
cbsp relates field transformational programming 
main differences transformational programming cbsp degrees automation scale 
transformational programming strives full automation applicability demonstrated primarily small defined problems 
cbsp hand characterized semi automated applied larger problems heterogeneous set models representative real development situations 
introduced cbsp component bus system property approach aims reconciling software requirements architectures intermediate models 
cbsp intermediate model looks requirements sounds architecture 
cbsp refining requirements allows developers systematically explore identify architectural elements components connectors architectural properties cp bp sp architectural dependencies suitable architectural styles 
cbsp result architecture directly 
demonstrated case study cbsp merely elicits architectural building blocks required architect system 
responsibility architect blocks build effective architecture satisfies cbsp architecturally relevant information consequently requirements 
quality results derived cbsp varies depending capabilities participating developers 
experienced architect elicit correct cbsp information novice architect 
human error eliminated software development activity cbsp able deal conflict identification resolution 
number artifacts produced cbsp related size complexity system 
number cbsp elements exceed num ber architectural elements required build system cbsp identifies architecturally relevant information 
believe cbsp scalable extent architecture scalable 
clearly cbsp human intensive 
requires multiple architects investigate requirements refine cbsp artifacts 
analogous activity performed cbsp cbsp assists process providing guidance support 
believe deliberately simple lightweight approach cbsp assists coping challenges discussed 
bridging different levels formality cbsp provides intermediate model reduces semantic gap high level requirements architectural descriptions 
modeling non functional requirements cbsp allows architects identify isolate requirements system level sp level cp bp improving modeling non functional properties 
maintaining evolutionary consistency intermediate model requirements architecture produced cbsp allows specifying meaningful dependency links improve evolutionary consistency 
incomplete models iterative development cbsp mandate requirements complete 
cbsp allows architects maintain arbitrarily complex dependencies system requirements architecture easing iterations 
handling scale complexity cbsp focuses essential subset requirements iteration subset requirements describing architecturally relevant properties 
fact activity cbsp process results filtering requirements merging multiple requirements 
voting important mechanism reducing complexity increasing focus allowing better understand different stakeholder perceptions 
directions successfully demonstrated context believe cbsp potential wider applicability provides generic framework bridging requirements architecture design 
validation needed exploring cbsp wider set requirements architecture languages methods uml 
aiming improving method better support capturing feedback architecture modeling requirements negotiations 
specifically looking findings architectural modeling simulation captured cbsp model elements bus property issue system property issue component option 
gr reconciling software requirements architectures intermediate models interested extending adls better support modeling properties captured granular cbsp model elements 
date adls noticeably deficient regard 
thread research integrate cbsp approaches recover architectural models existing systems comparing discovered recovered architectural models 
applying approach different projects find cbsp taxonomies tailored optimized different domains 
case studies currently carried 
tools supporting cbsp loosely integrated 
improve integration level support current tool set 

research supported austrian science fund erwin schr dinger collaborative requirements negotiation aids 
material supported national science foundation 
ccr 
effort sponsored defense advanced research projects agency darpa rome laboratory air force materiel command usaf agreement numbers 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied darpa rome laboratory government 

batory malley design implementation hierarchical software systems reusable components 
acm transactions software engineering methodology 
bauer fl moller pepper formal program construction transformations computer aided intuition guided programming 
ieee transactions software engineering 
boehm bw kwan port shah spiral model case study 
ieee computer 
boehm bw gr briggs ro developing groupware requirements negotiation lessons learned 
ieee software 
perry de transforming goal oriented requirement specifications architecture prescriptions 
workshop software requirements architectures straw icse 
briggs ro gr managing complexity requirements negotiation gss 
th annual hawaii international conference system sciences hicss volume 
big island hawaii 
de bruin van vliet documenting analyzing context sensitive design space 
working ifip ieee conference software architecture 
montreal 
chung gross yu architectural design meet stakeholder requirements 
ed software architecture kluwer academic publishers pp 

chung nixon ba yu mylopoulos non functional requirements software engineering 
kluwer 
dardenne fickas van lamsweerde goal directed concept acquisition requirement elicitation 
th int 
workshop software specification design 
gr automating requirements traceability record replay paradigm 
th int conf 
automated software engineering 
ieee cs edinburgh 
medvidovic component perspective software mismatch detection resolution 
iee software engineering 
af boehm bw comparing software system requirements negotiation patterns 
systems engineering journal 
fielding rt architectural styles design network software architectures 
university california irvine 
maiden nam modeling component dependencies inform selection 
nd international conference cots software systems springer 
detecting architectural mismatches systems composition 
center software engineering university southern california los angeles ca 
lr traceability integration 
nd international conference systems integration icsi 
finkelstein contribution structures 
second ieee international symposium requirements engineering york england 
finkelstein acw analysis requirements traceability problem 
st international conference requirements engineering 
gr briggs ro surfacing tacit knowledge requirements negotiation experiences win 
th hawaii international conference system sciences 
gr medvidovic reconciling software requirements architectures cbsp approach 
th ieee international symposium requirements engineering ieee cs 
hall jg jackson rc nuseibeh relating software requirements architectures problem frames 
ieee international requirements engineering conference re essen germany 
ieee ieee standard glossary software engineering terminology 
institute electrical electronics engineers 
ieee ieee standards software engineering ieee standard functional modeling language syntax semantics idef 
institute electrical electronics engineers 
kazman barbacci klein re sj woods sg experience performing architecture tradeoff analysis 
international conference software engineering 
los angeles ca 
kunz rittel issues elements information systems 
center planning development research univ california berkeley 
lamsweerde av darimont letier managing conflicts goal driven requirements engineering 
ieee transactions software engineering 
liu krieg bruckner knowledge transformational programming 
th international conference software engineering knowledge engineering 
medvidovic af gr stemming architectural erosion coupling architectural discovery recovery 
straw second international software requirements architectures workshop icse portland oregon 
se uwaterloo ca straw 
medvidovic rosenblum ds taylor rn language environment architecture software development evolution 
international conference software engineering 
los angeles ca 
medvidovic taylor rn classification comparison framework software architecture description languages 
ieee transactions software engineering 
mehta medvidovic composing architectural styles architectural primitives proceedings 
esec fse helsinki gr reconciling software requirements architectures intermediate models 
mehta nr medvidovic taxonomy software connectors 
nd international conference software engineering limerick ireland 
mehta nr medvidovic architectural style requirements self healing systems 
proceedings workshop self healing systems charleston south carolina 
core method controlled requirements specification 
th international conference software engineering munich germany 
nuseibeh weaving requirements architectures 
ieee computer 
nuseibeh easterbrook requirements engineering roadmap 
software engineering special issue nd international conference software engineering acm ieee 
nuseibeh kramer finkelstein framework expressing relationships multiple views requirements specification 
ieee transactions software engineering 
program transformation systems 
acm computing surveys 
perry de wolf foundations study software architectures 
software engineering notes 
potts burns recording reasons design decisions 
th international conference software engineering ieee comp 
soc 
press 
roth hara jr programming process architecture 
ibm systems journal 
ramesh jarke models requirements traceability 
ieee transactions software engineering 
robertson robertson mastering requirements process addison wesley 
shaw clements field guide preliminary classification architectural styles software systems 
compsac st int computer software applications conference 
shaw garlan software architecture perspectives emerging discipline prentice hall 
siegel castellan nj nonparametric statistics behavioral sciences mcgraw hill new york 
sommerville sawyer viewpoints requirements elicitation practical approach 
third ieee internation conference requirements engineering colorado springs ieee cs press 
tracz domain specific software architecture pedagogical example 
acm sigsoft software engineering notes paul gr associate professor johannes kepler university linz research associate center software engineering university southern california los angeles 
studied business informatics holds ph university linz 
paul research focuses applying collaborative methods tools support automate complex software system engineering activities requirements elicitation negotiation software inspections 
member acm acm sigsoft ieee 
medvidovic assistant professor computer science department university southern california faculty member usc center software engineering cse 
received ph department information computer science university california irvine 
medvidovic recipient national science foundation career award 
medvidovic research interests area architecture software development 
focuses software architecture modeling analysis middleware facilities architectural implementation product line architectures architectural styles architecture level support software development highly distributed mobile resource constrained possibly embedded computing environments 
member acm acm sigsoft ieee 
alexander received ms degrees university southern california los angeles johannes kepler university linz austria respectively received phd degree university southern california los angeles computer science 
currently research scientist marina del rey california 
research interests software modeling transformation analysis simulation 
member ieee ieee computer society acm acm sigsoft 
