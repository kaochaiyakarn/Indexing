logic programs iterated function systems recurrent radial basis function networks sebastian bader pascal hitzler artificial intelligence institute department computer science dresden university technology bader net inf tu dresden de www wv inf tu dresden de pascal graphs single step operator order logic programs displayed real plane exhibit self similar structures known topological dynamics appear fractals precisely attractors iterated function systems 
show observation mathematically precise 
particular give conditions ensure graphs coincide attractors suitably chosen iterated function systems conditions allow approximation graphs iterated function systems fractal interpolation 
iterated function systems easily encoded recurrent radial basis function networks eventually obtain connectionist systems approximate logic programs presence function symbols 
corresponding author contents preliminaries logic programs 
iterated function systems 
logic programs iterated function systems representation logic programs iterated function systems 
worked examples 
logic programs fractal interpolation logic programs recurrent rbf networks related intelligent systems logic programming hand artificial neural networks called connectionist sytems di er substantially 
logic programs highly recursive understood perspective knowledge representation underlying language order logic symbolic nature easy encode problem specifications directly programs 
success artificial neural networks lies fact trained raw data problem domains generalization raw data learning process turns highly adequate problem hand training data contains noise 
successful architectures recursive recurrent structures 
furthermore knowledge encoded trained neural network implicitly represented satisfactory methods extracting knowledge symbolic form currently known 
desirable combine robust neural networking machinery symbolic knowledge representation reasoning paradigms logic programming way paradigm retained 
current state art research fails far achieve ultimate goal 
main obstacles overcome perceive question symbolic knowledge encoded artificial neural networks satisfactory answers naturally lead way knowledge extraction algorithms hybrid neural symbolic systems 
earlier attempts integrate logic connectionist systems mainly restricted propositional logic order logic function symbols 
go back pioneering mcculloch pitts led number systems developed including towell shavlik kbann shastri pinkas holldobler avila garcez mention refer comprehensive literature overviews 
restriction finite case including propositional logic order logic function symbols task harder due fact underlying language infinite shall encoded networks finite number nodes 
sole approach known overcoming problem apart recursive autoassociative memory raam initiated pollack concerns learning recursive terms order language proposal holldobler spelled propositional case reported 
idea logic programs represented subsumption equivalence associated single step immediate consequence operators 
operator mapped function real numbers certain conditions turn encoded approximated feedforward networks sigmoidal activation functions approximation theorem due 
contemplating approach plotted graphs resulting real valued functions cases plots showed self similar structures known topological dynamics 
precise looked fractals sense attractors iterated function systems see page examples 
general observation logic programming linked topological dynamics chaos theory new see blair strikingly self similar representation euclidean plane ers setting developing real valued iterated function systems representing logic programs concrete goal turn con recurrent neural networks obtaining connectionist representations logic programs 
substantiate formally fact plots obtained attractors iterated function systems give concrete representations systems 
generally give necessary su cient conditions graphs single step operators euclidean plane arise attractors certain iterated function systems 
give algorithms constructing iterated function systems fractal interpolation systems approximating graphs single step operators 
results constructing recurrent radial basis function networks approximate graphs single step operators 
structured follows 
section introduce basic notions concerning logic programs iterated function systems need 
section show graphs logic programs obtained attractors iterated function systems 
particular theorem give necessary su cient conditions possible 
building theorem show conditions satisfied embedded single step operator lipschitz continuous respect natural metric real numbers 
section closes concrete construction iterated function system detailed examples 
section shift attention task approximating logic programs single step operators means fractal interpolation 
precisely theorem show programs lipschitz continuous single step operator approximated uniformly method 
section insights order show logic programs represented approximated recurrent radial basis function networks 
closes discussion related 
new results discussed detail 

benefitted substantially discussions ste en holldobler support project 
comments anonymous referees highly appreciated led improvements presentation results 
grateful howard blair spotted mistake earlier version able remove 


graph real valued single step operator 
preliminaries shortly review introduce terminology notation logic programming iterated function systems 
helpful reader familiar areas attempt keep selfcontained respect terminology essentially respectively 
places assume basic knowledge set theoretic topology general 
section familiarity radial basis function networks chapter helpful 
logic programs normal logic program finite set universally quantified clauses form may di er clause atom order language 
literals atoms negated atoms customary logic programming write clause form 
universal quantifier understood 
prolog notation 
called head clause called body literal clause conjunction 
called body clause 
allow abuse notation indicates body empty case clause called unit clause fact 
herbrand base underlying program defined set ground instances atoms denoted shows example logic program corresponding herbrand base 
subsets herbrand base called herbrand interpretations think set containing atoms true interpretation 
set interpretations program identified power set procedural aspects concerning logic programs 
logic programs di erent purposes computer science language underlying prolog languages non monotonic reasoning machine learning respective computational mechanisms di er substantially 
common paradigms logic programs accepted convenient tool knowledge representation logical form 
knowledge represented logic program essentially captured immediate consequence single step operator defined mapping set exists ground instance 
am 
clause level mapping program mapping slight abuse notation set shows simple logic program corresponding herbrand base possible level mapping 
level mappings describing dependencies atoms program studied logic programming di erent purposes termination analysis prolog giving uniform descriptions di erent non monotonic semantics 
investigations restrict attention injective level mappings simply understood enumerations herbrand base 
perspective employed 
essential di erence choose stick general notion level mapping explicitly require injectivity needed 
fitting level mappings order define metrics spaces interpretations approach extended 
recall metric set mapping satisfying ii iii pair called metric space 
metric called ultrametric satisfies stronger requirement iii max real numbers function metric called natural metric sequence metric space converges limit written lim cauchy sequence metric space sequence exists 
converging sequences cauchy sequences 
metric space cauchy sequence converges called complete 
definition slight generalization 
definition logic program level mapping define db di er atom agree atoms level smaller easily verified db complete metric space ultrametric space 
injective generally set atoms level finite metric db induces topology known query atomic topology furthermore language underlying contains function symbol arity homeomorphic topologically equivalent cantor space unit interval real line discuss example 
logic program acyclic exists level mapping ground instance 
clause 
case operator contraction db contractivity factor satisfies db db 
iterated function systems iterated function systems originate study chaos theory self similar structures applications image compression 
excellent field follow notation mentioned 



logic program corresponding herbrand base level mapping fact real valued iterated function systems easily encoded recurrent neural networks point return section 
recall function metric space continuous exists 
lipschitz continuous function mapping exists real number called lipschitz constant contraction mappings exactly lipschitz continuous functions lipschitz constant called contractivity factor 
contraction lipschitz continuous lipschitz continuous function continuous 
importance contractions lies fact contraction complete metric space unique fixed point obtained lim denotes th iteration function point fact known banach contraction mapping theorem 
definition hyperbolic iterated function system ifs pair consisting complete metric space finite set 
contraction mappings idea iterated function systems lift set contraction mapping space certain subsets precisely consider compact subsets characterized follows compact possibly infinite collection sets exists finite selection 

define set non empty compact subsets define hausdor distance follows 
definition complete metric space 
min called distance point set distance defined max 
hausdor distance defined max 
resulting hausdor space complete metric space 
continuous mapping extended function usual way setting recalling continuous image compact set compact 
ifs consisting metric space set contractions identify function defined 
function defined contractive mapping banach contraction mapping theorem conclude unique fixed point obeys obtained lim limit taken respect fixed point called attractor ifs iterations production sierpinski triangle 
iterations production cantor set 
example depicts part iterative process leading attractor starting square case called sierpinski triangle 
produced ifs consisting mappings space denotes euclidean metric example second example give representations cantor space compact subsets real numbers 
underlying space consists real numbers natural metric 
contractions choose positive integer chosen images unit interval single point common contained unit interval 
corresponding iterates unit interval depicted values subsets unit interval occur attractors di erent parameters homeomorphic topologically equivalent homeomorphic cantor space herbrand base program countably infinite 
examples attractors iterated function systems depicted defined real plane 
projections attractors coordinate homeomorphic cantor space 
logic programs iterated function systems section show logic programs represented iterated function systems 
review embedding introduced holldobler embed graph single step operator real plane 
plots graphs exhibit self similar structures look attractors iterated function systems 
provide way transform logic programs iterated function systems graph program coincides attractor ifs approximated 
attractors iterated function systems 
tp relation definition logic program injective level mapping 
mapping assigns unique real number interpretation range mapping denoted maximal value exists rm lim loss generality treat bijective function probably obvious base create valid embedding defined 

follows rm resulting function injective 
due fact numbers 

coincide number system base 
mapping injective level mapping injective 
furthermore shown homeomorphism bijective mapping preserves topological structure directions compact 
means mapping embed shown logic program function defined graph 
shows embedded graphs logic programs 
note similarity plots shown 
noticed plots graphs obtained method described showed self similar structures appearing attractors iterated function systems real plane 








graphs logic programs 
representation logic programs iterated function systems just discussed logic programs iterated function systems create similar graphs 
section link giving necessary su cient conditions graph logic program attractor hyperbolic iterated function system 
iterated function systems shall approximate graphs defined space 
focus space denotes usual dimensional euclidean metric complete 
function denote coordinate functions furthermore denote projection axis 
natural metric denoted theorem gives necessary su cient conditions exact representability iterated function system 
theorem representation theorem logic program embedded operator graph range mapping introduced earlier 
hyperbolic iterated function system uniquely determined attractor 
graph coincides attractor hold proof proof divided parts 
show converse 
show equivalence need show 
know 
definition know 
conclude 
follows 
conclude knowing equation holds obtain ii immediately obtain furthermore know holds conclude holds 
definition know 
follows holds proof theorem fact function graph represented ifs comes single step operator logic program 
holds functions defined easily generalized functions compact subsets reals 
particular note restrict class programs covered 
theorem establishing stronger result logic programs embedded single step operator lipschitz continuous 
need closer look set assume base fixed mapping determined turn range desire characterize attractor ifs 
define define recursively note mapping form depends application second mapping construction written 
particular exists interpretation precisely consists atoms injectivity interpretation uniquely determined equation 
proof lemma straightforward 
lemma attractor ifs 
ready establish promised second representation result 
define convenient way construct ifs explains plotted graphs programs self similar 
theorem second representation theorem logic program 
embedded operator base graph 
furthermore assume lipschitz continuous 
exists ifs attractor proof prove theorem applying theorem show stated hypotheses hyperbolic ifs hold lemma know set consisting contractive mappings contractivity factor attractor ifs 
define mapping 
remains show hyperbolic ifs suitably chosen su ces show contraction 
lipschitz continuous constant ld contractivity account obtain continuous lipschitz constant obtain 
see possible choose contraction theorem applicable 
move dwell bit implications theorem questions raises 
require lipschitz continuous implies continuous cantor set subspace continuous respect cantor topology notion understood see 
example turns programs local variables called covered programs continuous single step operators local variable variable occurs body literal program clause corresponding head 
exact relationships covered programs continuity single step operator lipschitz continuity respect metric generating lipschitz continuity single step operator respect natural metric remain studied matters appear straightforward 
say stage continuous continuous cantor space homeomorphic cantor space compact obtain uniformly continuous stronger continuity strictly weaker lipschitz continuity 
interested reader able verify single step operator covered program lipschitz continuous respect metric injective level mapping definition 
owe example howard blair 
programs acyclic respect injective level mapping continuous single step operators easily seen observing programs contain local variables considering earlier programs single step operator contraction respect metric generates furthermore shown base larger bases embedding resulting embedded function contraction subset lipschitz continuous 
program ground finite finite finite subset trivially lipschitz continuous function subset state corollary 
corollary programs acyclic respect injective level mapping programs ground finite exists ifs form proof theorem attractor corollary gives formal albeit satisfactory explanation observation started investigations order obtain approximate plots graph restricted plotting graph corresponding finite large subprogram ground 
know general method obtaining lipschitz constants showing lipschitz continuous 
light theorem results discuss sequel considering remarks earlier unclear relations di erent notions continuity operators feel investigations matter order obtain satisfactory constructions iterated function systems connectionist systems representing logic programs approach 
worked examples theorem covers wide range programs unsatisfactory provide convenient way constructing iterated function system 
ifs obtained proof theorem involve single step operator calculation functions section provide simple reasonable form iterated function system avoids drawback show detail covers example programs 
form ifs parts 
definition natural numbers mapping fixed program 
associate ifs defined parameter case ranges exactly ifs lemma 
convenience call resulting ifs linear notation ifs referring 
note fixed corresponding ifs uniquely determined notation sound 
consider base fixed sequel 
parameter call periodicity usually depend program construct ifs fixed depicted 
algorithm construction ifs program logic program embedded operator 

choose natural number periodicity 
compute explained section 
construct corresponding 
return set mappings ifs 
constructing linear iterated function systems 
explain intuition definition need introduce new operator denoted takes arguments interpretation natural number returns interpretation 
operator defines kind shift operation interpretations 
definition logic program injective level mapping define exists 
call right shift operator 
proposition holds proof equation follows immediately definition observed section occuring definition exists proposition carry functions follows 
mappings resulting function bit involved represented tp 

graph natural numbers program embedded operator 
iterations mappings 
explain intuition definitions mappings choice obvious reasons section proof theorem appears natural way obtain projection resulting attractor axis required theorem 
corresponding mapping right shift addition base point approximate candidate note case understood image occurrence necessary correction case overlap non empty intersection 
necessary strictly speaking overlap ect ignored set union operation 
carried reals correction necessary order avoid situation resulting number correspond interpretation 
linear iterated function systems constructed conditions imposed theorem 
condition shown case base examples 
fix examples order concrete setting 
choice reason guarantee contraction acyclic programs injective level mappings mentioned 
consider program 
shows associated graph corresponding level mapping notation denote term 

symbol occurs times 
algorithm constructing ifs program 
choose periodicity obtain iterations ifs depicted 
tp tp table holds natural numbers program 



graph odd numbers program 
order show resulting attractor coincides need verify hypotheses theorem particular need show discussion proposition su ces show holds necessary calculations shown table details straightforward omitted 
example discuss program 
periodicity obtain ifs algorithm 
iterations resulting ifs depicted 
verification correctness performed similarly natural numbers program details table 
logic programs fractal interpolation section focused problem exact representation logic programs iterated function systems 
section provide result approximating logic programs iterated function systems 
approach motivated fractal interpolation iterations mappings 
tp tp tp tp table holds odd numbers program 
described chapter setting di ers reuse linear iterated function systems introduced definition 
assume parameter injective level mapping fixed 
parameter going reinterpreted accuracy 
logic program lipschitz continuous accuracy consider associated iterated function system definition 
shown attractor systems graph continuous function defined sequence attractors associated increasing sequence accuracies converges graph respect maximum metric space continuous functions 
describing detail fractal interpolation systems 
program need extract set interpolation data interpolation process 
procedure accuracy described 
note data pairs obtained way coincide values section 
definition sequence interpolation data algorithm interpolation data algorithm computes set interpolation data program 
choose natural number accuracy 
compute set powerset 

set compute respect program 
return sequence pairs construction interpolation data 



logic program corresponding 
constructed algorithm program accuracy embedded operator associated program mapping base called interpolating iterated function system defined shows logic program schematically corresponding interpolating iterated function systems 
constructed program accuracy corresponds linear iterated function system constructed periodicity algorithm 
obvious resulting mappings constitute hyperbolic iterated function systems satisfy attractors remainder section denote set continuous functions maximum metric max set 
complete metric space convergence respect uniform convergence 
lemma function defined chosen appropriately depending contraction contractivity factor proof function characterized cases depending input setting rm defined sequel simply write defined function show maps need show continuous function continuity obvious composition continuous functions 
rm observation su ces 
contractivity follows immediately definition max max conclude contraction contractivity factor lemma sequence interpolation data interpolating iterated function system attractor constructed definition program accuracy embedded operator associated program mapping unique continuous function furthermore interpolates data graph coincides attractor proof proof divided steps 
show function uniquely determined interpolates data 
show graph function coincides attractor 
lemma know contraction maps 
banach contraction mapping theorem conclude exactly function function continuous element show interpolates data need show know obtain equal get gives equality holds 
ii order show graph function coincides attractor su ces show fixed point follows su ces show ii ii 
order prove ii show 
follows immediately implies consequently follows 
conclude ii holds completes proof 
call function lemma fractal interpolation function program respect accuracy interpolation function set points belong graph embedded operator fractal interpolation function coincide data points number depends chosen accuracy remainder section study sequence fractal interpolation functions obtained increasing accuracy 
show sequence cauchy sequence limit converges programs lipschitz continuous need obtain upper lower bounds values fractal interpolation functions 
fixing accuracy recall corresponding fractal interpolation function unique fixed point function easily verified lower bound min rm rm analogously upper bound max obtained max rm rm lemma program lipschitz continuous accuracy corresponding fractal interpolation function 
sequence cauchy sequence 
proof proof divided steps 
compute distance show sequence cauchy 
fixed 
compute distance fractal interpolation functions convenience functions know tf hold denote operators introduced lemma constructed accuracies respectively 
notation interpolation values interpolation values tf conclude rm rm get distance max max max rm rm rm rm step uses fact continuous lipschitz constant results concerning minima maxima chosen respect know distance bounded rm rm rm rm rm rm rm rm rm rm rm rm rm rm 
ii part conclude rm rm fixed value bounded rm obtain cauchy sequence 
theorem approximation theorem program lipschitz continuous sequence fractal interpolation functions accuracies converges uniformly complete metric space 
proof note sequence interpolation data points belongs interpolation data accuracy set appropriately chosen mapping lim continuity uniform convergence lemma conclude sequence converges 
knowing interpolation functions obtain sequence converges 
continuous assumption lim lim theorem shows approximate graph logic program lipschitz continuous arbitrarily 
unfortunately necessary number mappings grows exponentially accuracy 
rm follows rm construct corresponding fractal interpolation function lies neighbourhood ifs needs constructed accuracy rm ln rm logic programs recurrent rbf networks proceed task motivated investigations approximation logic programs artificial neural networks 
networks consist number simple computational units connected sense propagate simple information usually form real numbers connections 
want construct network computes approximation employ results previous sections 
precisely show fractal interpolation systems section encoded 
basic idea underlying encoding exploit self similarity fractal interpolation functions recursive nature corresponding iterated function systems 
order obtain function value need find correct mapping compute initially 
zoom image rm rm repeat process 
implementation idea radial basis function networks consist simple units perform radial basis functions inputoutput mappings 
functions values distributed symmetrically center 
examples simple schematic rbf network shown 
rbf networks known universal approximators networks shown possible approximate continuous function accuracy provided su ciently units middle layer 
examples radial basis functions simple rbf network 
dynamics scheme rbf unit 
simplify exhibition construction network introduce new type unit call rbf unit 
computes distinct output values furthermore computes parametrised radial basis function additional scaling applied units understood abbreviations converted network consisting simple units rbf units possible encode entire resulting network standard 
shows dynamics schematic plot rbf unit 
static parameters rbf unit center width height rbf units construct network shown algorithm shown 
example program construction taken section corresponding ifs computed 
initial inputs need initialised network computes approximation input iteration network performs computations scaling factor multiplied rbf unit computes corresponding outputs exactly unit 
initialised output active rbf units iteration zooming interpretation mentioned earlier left shifted version current output active unit added previous output network converges value fractal interpolation function defined ifs construct network 
precisely denotes number iterations performed accuracy construction 
furthermore know rm algorithm construction recurrent rbfn logic program base embedding 
choose periodicity 
create empty layered rbf network 
add input units layer output units third 
input units compute identity function output units return weighted sum inputs 

hidden layer consists rbf units initialised follows compute ifs periodicity described algorithm 
rbf unit initialised 
connect units shown weights set connection set algorithm constructing rbf network 
yields rm conclude approximate operator logic program embedding lipschitz continuous desired degree accuracy 
related key ideas neural symbolic integration represent logic programs representing associated immediate consequence operators 
approach put forward holldobler reported order encode propositional logic programs feedforward neural networks threshold activation functions 
observe networks cast recurrent architecture order mimic iterative behaviour operator 
major lines investigation spawned 
avila garcez gabbay extend holldobler cover networks sigmoidal activation functions study machine learning knowledge extraction aspects resulting frameworks 
second line investigation initiated holldobler study order logic programs approximate single step operators feedforward neural networks 
general approximation theorem due central importance approach restricted study acyclic programs injective level mappings 
show programs approximated arbitrarily feedforward networks specify means constructing 
generalizations approach programs continuous single step operators semantic operators obtained hitzler seda reported 
stage topological metric studies declarative semantics originally 


logic program level mapping interpolating ifs corresponding recurrent rbf network 
example program ifs taken page 
developed entirely di erent purposes come play 
perspective spirit general programme research laid blair 
blair discrete systems relates closely particular tool chosen approach iterated function systems 
blair study covered programs show things single step operators obtained means attractors ne hyperbolic finite automata turn understood iterated function systems 
shows intimate relationship logic programming dynamical systems related self similarity chaos theory able put 
results exact approximate representation single step operators associated logic programs iterated function systems fractal interpolation systems recurrent radial basis function networks 
results cover order logic programs function symbols provision embedded associated operator lipschitz continuous 
algorithms constructing approximating iterated function systems recurrent radial basis function networks logic programs 
relation blair note exact relationship class programs covered results covered programs embedded single step operator lipschitz continuous remains determined require research mentioned 
general observation covered logic programs represented iterated function systems breaks ground deep investigations matters results provide explicit approximations euclidean plane converted standard neural network architecture straightforward way 
concrete results constructions provide come price stronger hypothesis lipschitz continuity required results 
believe requirement weakened di erent mathematical approaches employed may needed order obtain satisfactory results 
caveat construct approximating system network approximates logic program priori error bound guarantee lipschitz constant function embedding single step operator reals existent known 
seen calculations upper error bounds ends sections 
know general method obtaining lipschitz constants ways doing subject research 
certain wellbehaved programs lipschitz constants easily calculated 
acyclic programs injective level mappings covered example lipschitz constant base embedding cases results yield exact algorithms obtaining approximating networks priori error bound 
results surpass ways 
firstly programs covered acyclic ones injective level mappings able give algorithm constructing approximating networks 
secondly show larger class programs covered approximated principle lipschitz continuous embedded single step operator furthermore shown provide explicit parameters approximating recurrent neural networks provided suitable lipschitz constant determined 
point related results larger class programs continuous single step operator treated providing explicit constructions approximating networks 
stronger assumptions 
note di erent network architecture recurrent rbf networks layer feedforward networks sigmoidal activation functions 
believe rbf networks constitute natural choice representing logic programs general approach inspired 
due intuition points interpretations close topologically metrically speaking supposed represent similar meaning 
specific shape activation functions rbf networks understood way unit active cluster values interpretations similar meaning 
binary nature sigmoidal activation functions di cult explain intuitive perspective 
certainly recurrent network unfolded feedforward architecture layers desired mathematical level di erence architecture 
question obtain algorithms constructing approximating networks sigmoidal activation functions probably hard may solvable understanding lipschitz constants embedded single step operators 
investigating lipschitz constants mentioned provides natural step investigations 
said clear results designing useful hybrid systems 
certain questions natural asked stage 
extracting symbolic knowledge trained neural networks 
network learning understood symbolic perspective observing changes extracted symbolic knowledge learning process 
finite propositional case research led satisfactory answers questions case order logic address naturally di cult investigated 
entirely new methods may developed purpose argued holldobler 
krzysztof apt dino pedreschi 
reasoning termination pure prolog programs 
information computation 
sebastian bader 
logic programs iterated function systems 
master thesis department computer science dresden university technology 
michael barnsley 
fractals 
academic press san diego ca usa 
aida subrahmanian 
query topology logic programming 
proceedings symposium theoretical aspects computer science volume lecture notes computer science pages 
springer berlin 
aida subrahmanian 
topological model set deformations logic programming 
fundamenta informaticae 
marc bezem 
characterizing termination logic programs level mappings 
ewing lusk ross overbeek editors proceedings north american conference logic programming pages 
mit press cambridge ma 
christopher bishop 
neural networks pattern recognition 
oxford university press 
howard blair fred ferry polar 
continuum discrete systems 
annals mathematics artificial intelligence 
howard blair fred david angel rivera 
continuous models computation logic programs 
krzysztof apt marek miroslav truszczynski david warren editors logic programming paradigm year perspective pages 
springer berlin 
anthony browne ron sun 
connectionist inference models 
neural networks 
lawrence cavedon 
acyclic programs completeness sldnf resolution 
theoretical computer science 
avila garcez dov gabbay 
symbolic knowledge extraction trained neural networks sound approach 
artificial intelligence 
avila garcez dov gabbay 
neural symbolic learning systems foundations applications 
perspectives neural computing 
springer berlin 
avila garcez 
connectionist inductive logic programming system 
applied intelligence special issue neural networks structured knowledge 
melvin fitting 
metric methods examples theorem 
journal logic programming 
ken ichi 
approximate realization continuous mappings neural networks 
neural networks 
hans ste en holldobler 
connectionist inference systems 
bertram graham editors parallelization inference systems volume lecture notes artificial intelligence pages 
springer berlin 
roland pascal hitzler anthony seda 
convergence classes spaces partial functions 
proceedings nd international symposium domain theory semantic structures computation 
kluwer academic publishers 
appear 
pascal hitzler 
generalized metrics topology logic programming semantics 
phd thesis department mathematics national university ireland university college cork 
pascal hitzler 
systematic account di erent logic programming semantics 
andreas gunter rudolf kruse bernd neumann editors ki advances artificial intelligence 
proceedings th annual german conference artificial intelligence ki hamburg germany september volume lecture notes artificial intelligence pages 
springer berlin 
pascal hitzler ste en holldobler anthony seda 
logic programs connectionist networks 
journal applied logic 
volume 
pascal hitzler anthony seda 
note relationships logic programs neural networks 
paul gibson david sinclair editors proceedings fourth irish workshop formal methods electronic workshops computing 
british computer society 
pascal hitzler anthony seda 
continuity semantic operators logic programming approximation artificial neural networks 
andreas gunter rudolf kruse bernd neumann editors ki advances artificial intelligence 
proceedings th annual german conference artificial intelligence ki hamburg germany september volume lecture notes artificial intelligence pages 
springer berlin 
pascal hitzler anthony seda 
generalized metrics uniquely determined logic programs 
theoretical computer science 
pascal hitzler matthias wendt 
founded semantics stratified fitting semantics 
matthias jarke koehler gerhard lakemeyer editors proceedings th annual german conference artificial intelligence ki aachen germany september volume lecture notes artificial intelligence pages 
springer berlin 
pascal hitzler matthias wendt 
uniform approach logic programming semantics 
theory practice logic programming 
appear 
ste en holldobler 
automated inferencing connectionist models 
fakultat informatik technische hochschule darmstadt 

ste en holldobler 
challenge problems integration logic connectionist systems 
francois bry ulrich dietmar editors proceedings 
workshop logische programmierung volume gmd report pages 
gmd 
ste en holldobler 
massively parallel computational model logic programming 
proceedings ecai workshop combining symbolic connectionist processing pages 

ste en holldobler hans peter 
approximating semantics logic programs recurrent neural networks 
applied intelligence 
vladimir lifschitz 
answer set planning 
danny de schreye editor logic programming 
proceedings international conference logic programming pages cambridge massachusetts 
mit press 
john lloyd 
foundations logic programming 
springer berlin 
michael maher 
equivalences logic programs 
jack minker editor foundations deductive databases logic programming pages 
morgan kaufmann los altos ca 
marek miroslav truszczynski 
stable models alternative logic programming paradigm 
krzysztof apt marek miroslav truszczynski david warren editors logic programming paradigm year pages 
springer berlin 
warren mcculloch walter pitts 
logical calculus ideas nervous activity 
bulletin mathematical biophysics 
stephen muggleton luc de raedt 
inductive logic programming theory applications 
journal logic programming 
pinkas 
propositional non monotonic reasoning inconsistency symmetric neural networks 
john mylopoulos raymond reiter editors proceedings th international joint conference artificial intelligence pages 
morgan kaufmann 
jordan pollack 
recursive distributed representations 
artificial intelligence 
paolo 
logic programming ultrametric spaces 
di mathematica vii 
paolo 
ultrametric spaces logic programming 
journal logic programming 
anthony seda 
topology semantics logic programs 
fundamenta informaticae 
anthony seda lane 
continuous models computation computing distance logic programs 
proceedings sixth international workshop formal methods dublin city university dublin ireland july electronic workshops computing 
british computer science 
appear 
shastri 
advances neurally motivated model relational knowledge representation rapid inference temporal synchrony 
applied intelligence 
geo rey towell jude shavlik 
knowledge artificial neural networks 
artificial intelligence 
stephen willard 
general topology 
addison wesley reading ma 

