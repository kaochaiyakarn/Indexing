inheritance anomaly years giuseppe chi spaces technologies cambridge uk com term inheritance anomaly coined matsuoka yonezawa refer problems arising coexistence inheritance concurrency concurrent object oriented languages 
quirks arising combination observed early eighties experimental designed 
nineties turned research topic widely tools everyday programming practice see java experience 
expository extends survey account new widely notably java 
specifically illustrate innovative approaches cool design relying aspect oriented programming paradigm aim better powerful abstraction concurrent oop provide means fight inheritance anomaly 
categories subject descriptors programming languages language constructs features concurrent programming structures inheritance programming techniques concurrent programming keywords inheritance anomaly concurrent programming 
early eighties attempts mix object oriented programming concurrency showed concepts mix gracefully 
concurrent program set messages objects handle uniform time 
depends actual state object 
enforce synchronization constraints forced write specific synchronization code 
exemplify situation consider pseudocode implementing concurrent bounded buffer class buffer void put object el buffer full 
object get buffer empty 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sac march nicosia cyprus copyright acm 
sassone university sussex uk vs susx ac uk clearly sure object removed empty buffer object inserted full buffer 
sequential setting burden ensuring constraints resides buffer user 
buffer created thread responsible state object 
facilitate usage buffer methods return certain error codes case misuse 
approach feasible concurrent setting 
buffer concurrently multiple clients leaving idea buffer current state 
possible envisage ad hoc protocols clients keep track buffer state solution complex hardly feasible practice 
burden enforcing synchronization constraints ultimately lie buffer 
unfortunately mixing behavioural synchronization code class definitions represents obstacle code inheritance 
quirks arising coexistence inheritance concurrency considered severe suggest removal inheritance concurrent object oriented languages 
matsuoka yonezawa coined widely known term inheritance anomaly refer problem 
seen significant change way 
early nineties matter research programming practice 
concurrency specific requirement small niche programming community 
longer case 
trend changed java considered cool widely accepted mainstream programming community 
nowadays concurrency essential application development consequently treated fundamental part language design 
newly introduced languages meant everyday programming provide concurrency instance 
unclear inheritance anomaly affects concurrent programming modern 
extend survey include popular languages java eiffel 
move describing interesting approaches problem emerged years 
concentrate programming languages aspect oriented philosophy new promising programming paradigm 

inheritance anomaly briefly mentioned behavioural synchronization code class definitions obstacle inheritance 
refer problem inheritance anomaly 
section shall classic bounded buffer example show anomaly occurs 
consider pseudo code class buffer void put object el 
object get 
bounded buffer provides methods get put respectively remove insert element 
concurrent setting need refine code suitable synchronization code sure get executed empty buffer dually put executed full buffer 
generally agreed inheritance anomaly shows different guises depending synchronization mechanism provided language 
authors give taxonomy problem classify difference occurrences inheritance anomaly broad classes follows 
history acceptable states 
synchronization constraints enforced providing guard method 
guard boolean expression true method executable class buffer void put object el full 
object get empty 
semantics self explanatory 
executing method guard evaluated evaluates false calling thread wait condition true 
form synchronization popular survives day superficially different forms widely languages java 
wait primitive immune inheritance anomaly 
method enabling depending object state depends past history inheritance anomaly occurs 
suppose instance want refine buffer method works get executed immediately get class historybuffer extends buffer 
object empty get 
clearly achieved adding code get keep track invocations 
rewrite entire class 
revisit problem 
partitioning states 
inspired example may disentangle code synchronization conditions describing enabling methods partition object states 
describe behavior class buffer instance state partitioned sets empty partial full containing states buffer empty get inhibited full put disallowed 
specify put requires full get requires empty refine code get put specify state transitions 
instance get declare conditions buffer empty partial object get buffer empty empty partial inheritance anomaly surfaces derived classes may force refinement state partition 
example consider adding method get retrieves elements 
alongside empty full necessary distinguish states buffer contains exactly element 
clearly state transitions specified get put re described accordingly 
modification acceptable states 
third kind anomaly happens mix classes classes purpose mixed classes add behavior 
typical situation arises wishes enrich class method influences acceptance states original class methods 
instance object oriented perspective perfectly legitimate expect able design class lock void lock 
void unlock 
add lock capabilities clients classes purely means standard inheritance mechanism 
clearly multiple inheritance lock buffer creating buffer completely recode get put keep account state lock component object 

inheritance anomaly mo section shall analyze problem inheritance anomaly widely java languages naturally concurrent everyday programming practice 
java java considered object oriented language native support concurrency widely accepted programming community 
concurrency considered specialized need restricted audience java central feature new programming languages 
java imperative object oriented language 
syntax similar 
java programs multi threaded concurrent access shared objects threads regulated variation monitor primitive 
object possesses lock 
lock indirectly accessed accessing synchronized methods wait notify notifyall primitives 
classic bounded buffer example programmed java 
code self explanatory useful comment wait primitive 
loop ensures method wait till guard false 
methods having modified state object signal waiting threads primitive notifyall 
java monitors clearly variation method guard synchronization primitive suffer variety anomaly 
illustrates 
forced bookkeeping verify method executed get 
implement boolean flag forces redefine methods public class buffer protected object buf protected int max protected int current buffer int max max max buf new object max public synchronized object get throws exception current wait current object ret buf current notifyall return ret public synchronized void put object throws exception current max wait buf current current notifyall buffer java get put inherit 
clear cut example inheritance anomaly 
introduced cool 
borrows considerably java experience improves number ways 
concurrent programming point view relies notion monitor just java 
monitor interface slightly flexible 
contrast java monitors programmed monitor class provides methods enter exit delimit code executed mutual exclusion 
instruction lock purpose just syntactic sugar monitor mechanism 
method executed mutual exclusion attribute synchronized explicit monitor 
attributes allows programmers specify meta data program interpreted treated appropriately compiler 
synchronization mechanism monitor primitives wait pulse essentially equivalent java wait notify notifyall 
additional flexibility explicit monitors help history sensitive variety inheritance anomaly 
subject anomalies java 
show possible implementation buffer note synchronized attribute method get explicit monitor put 
techniques equivalent show completeness 
shows implementing historybuffer class gives rise instance inheritance anomaly just case java 
method redefinition abstraction provided languages provide means finely adjust method behavior 
polyphonic polyphonic dialect developed microsoft research cambridge 
polyphonic monitor synchro public class historybuffer extends buffer boolean false public historybuffer int max super max public synchronized object throws exception current wait false return super get public synchronized object get throws exception object super get true return public synchronized void put object throws exception super put false historybuffer java mechanism replaced pattern mechanism inspired join calculus 
precisely polyphonic main notions asynchronous methods chords 
asynchronous methods opposed synchronous ones return result caller thread wait blocked method completion proceed immediately 
standard method calls synchronous return value caller blocks method completion 
chords code blocks associated set synchronous asynchronous method identifiers 
chord contain synchronous method 
body chord executed method identifiers called 
chord executed time chosen randomly 
exemplify notion chord consider simplistic implementation buffer public class buffer public string get public async put string return method put asynchronous consequently block callers 
method get synchronous callers blocked chord executed element buffer 
existing literature polyphonic join calculus appears language subject state partitioning variety anomaly 
synchronization mechanism closely related behavior abstractions 
analysis polyphonic direction carried 
eiffel eiffel popular oo language designed meyer 
currently concurrency part eiffel language 
multithreading finds way inside language additional threading libraries just happens 
official language specification describes concurrency model simple concurrent object oriented programming 
public class buffer protected object buf protected int max protected int current public buffer int max max max buf new object max public virtual void put object monitor enter current max monitor wait buf current current monitor monitor exit synchronized public virtual object get current monitor wait current object ret buf current monitor return ret buffer currently available proof concept implementation concurrency eiffel 
syntactically impact minimal keyword needs introduced separate 
semantically changes profound interesting 
separate keyword applied classes separate class name object instances separate type 
intuitively keyword means operations entity refers executed concurrently process 
method call said separate refers separate object 
instance call separate separate object 
contrast java separate calls asynchronous synchronous 
case syntax simply second case write called wait necessity terminology 
method separate object executed mutual exclusion avoid difficulties arising race conditions 
eiffel design contract paradigm 
methods usually associated precondition introduced keyword require post condition denoted ensure 
additionally classes associated invariant respect time 
consider eiffel class implementing sequential bounded buffer 
method get precondition ensuring non empty buffer 
similarly post condition guarantees execution buffer full 
similar method guards assertions different semantics 
recall sequential world 
assertion violation result client waiting assertion true run time exception thrown 
assertion mechanism breaks concurrent setting known practical theoretical communities 
meyer calls resulting situation concurrent precondition paradox 
design contract methodology notion precondition satisfied client calling routine guaranteed result line routine post condition 
public class historybuffer buffer bool false public historybuffer int max base max synchronized public object current monitor wait false return base get synchronized public override object get object base get true return synchronized public override void put object base put false historybuffer class creation feature put require full ensure empty get require empty ensure full sequential eiffel consider concurrent execution bounded buffer add separate keyword class definition see clearly case 
matter hard client tries satisfy method preconditions client modify concurrently 
problem leads modified precondition semantics separate objects 
preconditions separate objects called wait conditions essentially equivalent method guards 
semantic wait condition executed separate call wait till gains exclusive ownership separate object refers till wait conditions satisfied wait conditions prey history dependent variety anomaly 
note bounded buffer concurrent simply changing line class definition class separate class modified definition derive class implementing historybuffer shown 
forced add boolean flag get check method executed get 
brings forth need redefine inherited methods get put 
despite significantly different concurrency model face scenario seen java core matter inheritance anomaly depends language synchronization mechanisms wait conditions intimately related method guards 
separate class history buffer inherit bounded buffer redefine put get feature put require full get false ensure empty get require empty get true ensure full require empty get false ensure full feature get boolean historybuffer historybuffer eiffel 
modern approaches anomaly survey new approaches problem inheritance anomaly pursued 
research led language features resilient known forms anomaly offer powerful abstractions deal concurrent programs 
approaches shall common basis decoupling synchronization code business code class definition 
separation concerns brought forth promising novel approach program development aspect oriented programming aop 
synchronization patterns application aspect oriented techniques decouple synchronization actual business code class definitions explored lopes lieberherr 
authors propose new language implementing methodology describe rich meta language mapped chosen target languages 
mapping may cause loss benefits meta language depending nature target language 
languages active objects ill suited target languages best support mapping target languages provide different abstractions objects processes 
methodology synchronization patterns helps decouple business synchronization code 
synchronization constraints expressed terms synchronization patterns syntax sync pattern name add structure 
additional data structures add func 
additional operations mutex 
locks sync 
synchronization scheme synchronization patterns contain blocks specify data structures add structure operations add func additionally needed synchronisation scheme locks mutex synchronization strategy sync 
synchronization scheme specified terms mutual exclusion pre post sync pattern add structure empty add func empty mutex object sync operation object get buffer exclusive requires empty false wait operation void put object buffer exclusive requires full false wait buffer synchronization patterns sync pattern inherit add structure get boolean sync operation object get historybuffer exclusive requires empty false wait exit get true operation void put object historybuffer exclusive requires full false wait exit get false operation object historybuffer exclusive requires empty get false wait exit get false historybuffer sync 
patterns conditions 
definition synchronization patterns normal class definition code target language generated 
synchronization scheme classic bounded buffer example specified synchronization patterns shown self explanatory 
guard provided requires keyword guard evaluates false calling thread wait 
code written target language java case 
observe synchronization constraints specified separately class behaviour ad hoc language 
see historybuffer 
history sensitive method results need redefine synchronization constraints inherited methods 
need redefine behaviour methods 
code rewriting limited synchronisation code belong 
shall see modularization code rewriting typical aspect oriented approach anomaly 
composition filters composition filters extend standard object oriented modeling techniques explicitly programmed filters apply method calls object 
depending method invoked filters take actions extend modify original semantics object 
path followed message shown 
messages sent object go set input filters filter looks message necessary modifies definition 
message passed filter till reaches object 
output filters behave similarly messages sent object 
filter consists parts condition filter applied holds pattern filter applied matching methods substitution describing message received messages input filters object output filters message path filters class limit integer interface conditions empty partial full methods put returns nil get returns wait empty partial put partial full get disp dispatch inner sent messages buffer interface comp 
filters processing performed filter 
feature composition filter model communication types acts introduced expressed composition filters 
act class coordinate behaviour different objects accomplishing computation depending messages receive 
synchronization constraints specified wait filter 
wait filter accept message forward filter reject store queue stay till accepted 
wait filters essentially equivalent method guards 
filters specified interfaces implementations oblivious 
synchronization constraints specified interface level cf 
interface bounded buffer 
interface provides signatures class methods methods section 
parts interest condition section relevant states object named definition input filters particularly definition wait filter 
filter specifies synchronization constraints object respect conditions 
method put executed object state empty partial similarly get method 
anomaly shows case history sensitive methods 
program historybuffer class composition filter model act administer history information 
possible implementation adapted seen 
unsurprisingly new condition admin introduced guarantee method executed get 
condition implemented historybuffer class 
register filter takes care passing message admin act record update accordingly 
acts treat messages class objects easy act see message received act accordingly 
note interface historybuffer class concerned class historybuffer interface internals buf buffer admin methods returns conditions admin sync wait true buf register meta admin register disp dispatch inner buf class interface conditions methods register message returns nil disp dispatch inner class implementation boolean conditions return methods register meta message returns nil meta selector get meta fire historybuffer composition filters tion issues 
anomaly modularized confined interfaces acts solved 
clearly significant improvement traditional method guards 
synchronization rings synchronization rings isolate main aspects synchronization problem 
exclusion mutual exclusion aspect multiple methods executed concurrently 
state aspect specifies methods executable object certain state 
coordination caller allowed execute method time 
aspects refined sub aspects response specifies happens message accepted 
options blocking return error code timed wait wait fixed time 
scheduling specifies order waiting messages served 
synchronization rings abstraction illustrated 
core object implements behaviour rings take care synchronization aspects 
incoming messages enter rings entry ports reach core object leave exit port successful execution rollback ports 
ring multiple entry ports 
similar composition filters synchronization rings provide low level hooks additional aspects instance scheduling message rollback entry rollback entry rollback entry synchronization rings model synchronisation constructor core buffer buf ring mutex ring count put item exclusion uses mutex mutex uses count increment get exclusion uses mutex mutex uses count decrement exit buffer exit message response behaviour 
synchronization rings model implemented programming language synchronization rings aspect language 
see synchronization definition bounded buffer 
need specify core object buffer case rings surrounding 
example mutual exclusion ring provided standard ring library 
guarantees get put executed mutual exclusion second keeps track number elements buffer 
part specification maps messages ports case messages pass mutual exclusion ring sliding scale ring increase port case put decrease get 
consider case history sensitive methods 
see implementation historybuffer class 
deal new history sensitive method forced introduce new event ring keep track history object 
note redefine synchronization constraints inherited methods force inherited messages pass event ring 
clearly instance inheritance anomaly 
aop approaches code rewriting affects synchronization specification 
details synchronization rings 
jeeg jeeg dialect java related aop paradigm 
synchronization constraints expressed declaratively guards totally decoupled body method enhance sepa synchronization constructor ring event put item uses get uses get uses historybuffer ration concerns 
typical jeeg program form public class myclass sync 
standard java class definition public 
intuitively means point time method invocation executed guard evaluated object yields true 
execution blocked true 
buffer class implemented jeeg shown 
novelty approach guards expressed version linear temporal logic ltl allow expressing properties history computation 
exploiting expressiveness ltl jeeg able single situations historybuffer class language corresponding anomalies 
syntax ltl variation jeeg ap previous meta variable event bound name method executed code historybuffer example follows 
public class historybuffer extends buffer sync previous event get empty public historybuffer int max super max public object throws exception 
general guards refer rich variety information methods fields values 
due nature anomaly generally possible claim formally language avoids problem solves 
matter depends synchronization primitives language choice new experience oop may time novel shortcomings new kinds anomalies 
expressive power ltl formally understood pleasant features jeeg come equipped precise characterization situations address 
precisely anomalies depending sensitivity object histories expressible star free regular languages principle avoided jeeg 
current implementation jeeg relies large body theoretical ltl provides powerful model checking algorithms techniques 
currently method invocation incurs overhead linear size guards appearing method class 
evaluation guards runtime public class buffer sync put 
full get 
empty buffer int max 
public object get throws exception 
public void put object throws exception 
buffer jeeg requires mutual exclusion guarantees marginal computational cost 
benchmarks support feasibility jeeg approach 
advantages aop methodology see proposals section decoupling behaviour synchronization clear advantages 
chief advantage common proposals modularization synchronization code rewritten 
due clear separation concerns brought forth aspect oriented paradigm 
modularization truly eliminate problem 
synchronization code rewritten certain cases chiefly due history dependent variety anomaly 
issue limited case jeeg past tense linear temporal logics effectively confines occurrences anomaly defined set cases constraints described star free regular languages objects traces 
compared traditional aop approach advantageous 
decoupling synchronization behaviour fully deliver promises aop paradigm 

years seminal matsuoka yonezawa situation changed significantly 
concurrent programming matter daily practice time new programming paradigms emerged 
survey illustrated inheritance anomaly problem context popular programming languages java aim clarifying putting perspective impact anomaly 
proceeded analyze new approaches specification synchronization devoting particular attention languages aspect oriented programming paradigm 
examples showed regarding inheritance anomaly approaches provide significant advantages traditional ones 
analysis clearly highlights consequences organized separation concerns 
believe marks strong point aspect oriented approach software development clearly goes inheritance anomaly problem 

aksit 
design object oriented language sina 
phd thesis university twente enschede 
aksit bosch bergmans yonezawa 
abstracting object interactions composition filters 
proceedings ecoop workshop object distributed programming 
lncs 
america 
pool design experience 
oops messenger apr 
benton cardelli fournet 
modern concurrency abstractions proceedings th european conference object oriented programming ecoop 
lncs 
bergmans 
composing concurrent objects 
phd thesis university twente 

briot yonezawa 
inheritance synchronization concurrent oop 
european conference object oriented programming ecoop 
lncs 
compton walker 
run time system 
journal object technology 
special issue tools usa proceedings 
fournet gonthier 
reflexive chemical machine join calculus 
proceedings rd acm symposium principles programming languages pages 
acm 
gosling joy steele bracha 
java language specification second edition 
sun microsystems june 
hoare 
monitors operating system structuring concept 
communications acm 
holmes 
synchronization rings composable synchronization object oriented systems 
phd thesis macquarie university 
kafura lee 
inheritance actor concurrent object oriented languages 
cook editor proceedings ecoop nottingham uk pages 
cambridge university press 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
ecoop object oriented programming lncs 
lopes lieberherr 
abstracting process function relations concurrent object oriented applications 
proceedings th european conference object oriented programming ecoop lncs 
matsuoka yonezawa 
analysis inheritance anomaly object oriented concurrent programming language 
research directions concurrent object oriented programming pages 

mens lopes kiczales 
aspect oriented programming 
lncs 
meyer 
eiffel language 
prentice hall 
meyer 
object oriented software construction 
prentice hall second edition 
language specification 
microsoft press 

applying formal methods programming language design implementation 
phd thesis brics university aarhus 
sassone 
jeeg programming language concurrent objects synchronization 
proceeding pages 
sassone 
jeeg temporal constraints synchronization concurrent objects 
technical report rs brics february 
pnueli 
temporal logic programs 
proceedings th ieee symposium foundations computer science focs pages 
stroustrup 
programming language nd edition 
addison wesley 
