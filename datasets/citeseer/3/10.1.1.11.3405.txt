write seemingly referentially opaque macros syntax rules oleg software engineering naval postgraduate school monterey ca oleg com oleg acm org details folklore notions hygiene referential transparency rs macros defeated systematic attack 
demonstrate syntax rules capture user identi ers allow identi ers captured closest lexical bindings 
words written rs macros accomplish commonly believed impossible 
build fundamental technique extracting variables arguments macro 
generalizes idea attack referential transparency 
shows overload lambda form 
overloaded lambda acts infected virus propagates lambda body infecting lambdas turn 
virus re de nes macro aged binding 
rede nition key insight achieving referential 
eventually subvert binding forms preserve semantics scheme rs 
novel result demonstration rs macros deliberately restricted expressiveness surprising power 
exposed faults lack precision commonly held informal assertions syntax rule macros pointed need proper formalization 
practical programmer ers encouragement powerful rs macros turn possible 
attractive features lisp scheme ability greatly extend syntax core language support domain speci notations :10.1.1.18.3867
syntactic extensions commonly called macros 
special part lisp scheme system macro expander systematically reduces extended language core 
naive macro system merely nds syntactic extensions replaces expansions corrupt current liation fleet numerical meteorology oceanography center monterey ca 
permission digital hard copies republish post servers redistribute lists part granted fee provided copies distributed pro commercial advantage copies bear notice full citation rst page 
copy redistribute requires prior speci permission 
third workshop scheme functional programming 
october pittsburgh pennsylvania usa 
oleg 
variable bindings break block structure program 
instance free identi ers user code may inadvertently captured macro generated bindings leads insidious bugs 
danger documented example :10.1.1.18.3867
lisp community developed techniques help macros safer rely orts care individual macro programmer :10.1.1.18.3867
safety built system 
furthermore techniques complicate macro code bug prone 
scheme community recognized danger naive macro expansion block structure scheme code 
community develop macro system safe lexical scope default 
limited circumstances exceptions block structure preserving policy macros useful allowed 
exceptions statically visible 
number experimental macro systems properties built :10.1.1.18.3867
powerful restrictive set common features macro systems standardized rs 
earlier version system mentioned previous scheme report rs expounded 
rs macro system permits exceptions safety policy socalled hygiene see 
furthermore rs macros speci ed restricted pattern language gives macros name syntax rules 
pattern language di erent core language removes need full scheme evaluator macro expand time 
rs macros severely limited ability 
strict safety policy exceptions lead claims scheme hygienic macro system general mechanism de ning syntactic transformations reliably obey rules lexical scope 
little formalizing assertion 
took task proving renaming introduced identi ers guarantees hygiene condition macro system 
implementation rs macros 
surprising discoveries rs macros latent power question commonly held beliefs syntax rule macros 
example claims primary limitation hygienic macro system thoroughly hygienic express macros bind identi ers implicitly 
loop exit macro example low level macro system revised report macro 
express loop exit macro rs system see discussion :10.1.1.18.3867
article introduced general technique extraction writing macros extract speci binding arguments :10.1.1.18.3867
shown macros nest 
generalizes ideas writing seemingly referentially opaque rs macros 
syntactic extension nature introduces new language may di er aspects core language 
write syntax rule extension looks rs scheme allows seemingly referentially opaque non hygienic macros 
extended language called rs scheme 
rst sight answer questions negative 
rs macros turing complete regarded thoroughly hygienic 
furthermore fact rs macros written restricted pattern language scheme clearly incapable certain computations concatenating strings symbols 
impossible write rs macro foo foo symbol symbol expands symbol concatenation characters constituting symbol symbol 
possible rs macro tell identi ers spelling 
ostensibly restrictions put place guarantee enforce rules lexical scope macros expansions sentiment discussed :10.1.1.18.3867
demonstrate power rs macros underestimated implement syntax rule extension scheme permits seemingly referentially opaque macros :10.1.1.18.3867
furthermore extended language literally complies rs 
section brie describes notions hygiene referential transparency macro expansions 
section recalls extraction application writing weakly non hygienic macros 
section introduces key idea re de ning macro binding leads referential 
carrying rede nitions requires overloading scheme binding forms particular lambda 
section accomplishes overloading help extraction 
demonstrate rs macro looks exactly careless referentially opaque lisp style macro 
result library syntax leaky syntax lets programmer de ne syntax rule macro designate free identi er macro capture local bindings 
nal section discusses means macro writers macro users programming language researchers 
hygiene referential transparency macro expansions section introduces terminology working examples 
closely follow terminology 
syntactic extension macro invocation phrase extended language distinguished leading token keyword 
macro expansion process extended language eventually reduced core scheme steps 
step transformation syntactic extension called macro expansion step transcription step 
syntactic transform function macro transformer function de ned macro writer expands class syntactic extensions introduced keyword 
transcription step application transformer syntactic extension yields phrase core language syntactic extension 
expanded turn 
result expansion step may contain identi ers original syntactic extension call generated identi ers 
macro system called hygienic general sense avoids inadvertent captures free variables systematic renaming 
free variables question generated variables variables macro invocations user variables 
narrowly de ned hygiene avoiding capture user variables generated bindings 
precise de nition hygiene condition macro expansions hc generated identi ers binding instances completely expanded program bind variables generated transcription step 
macro system hand speci cally avoids capturing generated identi ers refer bindings existed macro transformer de ned bindings may exist point macro invocations 
property called referential transparency 
rest section sample rs macros chosen illustrate hc referential transparency 
examples rest 
hc condition demands bindings introduced macros capture free identi ers macro arguments 
de ne sample macro mbi mbi body expand body :10.1.1.18.3867
pattern language rs macros de nition reads define syntax mbi syntax rules mbi body body naive non hygienic expansion mbi produced :10.1.1.18.3867
generated binding captured free variable occurring macro invocation 
hygienic expansion prevents capture systematic renaming identi ers 
mbi expands gives result :10.1.1.18.3867
identi er di erent call identi ers di erent colors 
referential transparency facet demands generated free identi ers captured local bindings surround expansion 
precise macro expansion generates free identi er identi er refers binding occurrence environment macro de nition 
example de nitions define foo define syntax mfoo syntax rules mfoo foo form foo mfoo expands foo foo yields evaluated :10.1.1.18.3867
local binds foo di erent color capture foo generated macro mfoo 
extraction posted article demonstrated circumvent weak form hygiene :10.1.1.18.3867
generalizes idea attack referential transparency 
completeness section systematically derives technique 
aim write macro mbi mbi body expands body binding captures free occurrences body :10.1.1.18.3867
assume bindings scope mbi body de ned early global scope re de ned :10.1.1.18.3867
assumption distinction weak hygiene true 
developing weakly non hygienic macros challenging 
just write define syntax mbi syntax rules val body val body mbi expand refers top level binding remains unde ned :10.1.1.18.3867
explicitly pass macro identi er capture define syntax mbi syntax rules val body val body case mbi expands capture occurs :10.1.1.18.3867
circumvent hygiene weak sense need nd way convert invocation mbi invocation mbi 
macro mbi requires explicit speci cation identi er capture get extracting identi er color argument mbi 
essence elegance idea 
rightly colored occurrence binding form ect capture 
extraction colored identi ers form done macro extract fig 
:10.1.1.18.3867
macro workhorse hygiene strategy 
need macro extracts identi ers extract fig 

de ne define syntax mbi dirty syntax rules val body syntax cont syntax rules symb val body symb val body extract body cont val body mbi dirty expands evaluates expected :10.1.1.18.3867
macro mbi dirty job aw :10.1.1.18.3867
nest mbi dirty mbi dirty expands evaluates hoped :10.1.1.18.3867
outer invocation mbi dirty creates binding violates weak hygiene assumption :10.1.1.18.3867
shown overcome problem need re de ne mbi dirty scope new binding need macro re de nes expansion :10.1.1.18.3867
face problem outer invocation mbi dirty re de nes redefinition capture inner invocation mbi dirty :10.1.1.18.3867
know extracting colored identi er mbi dirty outer macro body :10.1.1.18.3867
need extract identi ers mbi dirty :10.1.1.18.3867
arrive code macro re defines expansion mbi dirty val body expands val body re defines scope body 
symb symb colored ids extracted body define syntax mbi dirty syntax rules val body letrec syntax doit continuation extract syntax rules symb symb val body symb val bind syntax re define oneself symb syntax rules val body extract symb symb body doit val body body extract mbi dirty body doit val body mbi dirty mbi dirty expands extract symb body cont body form may contain occurrence identifier refers binding occurrence symb :10.1.1.18.3867
cont form shape head idl args idl args expressions representing lists empty list 
macro extract expands head extr id idl args extr id extracted colored identifier 
symbol symb occur body extr id identical symb 
define syntax extract syntax rules symb body cont letrec syntax tr syntax rules symb symb exit continuation symb tail cont head symb cont args cont head symb cont args tail cont body composite form tr tail cont look inside cont head symb cont args cont head symb symb cont args symb occur cont tr cont tr body body cont macro extract extract colored identi er form extract symb body cont symb list identifiers extract body cont meaning extract see :10.1.1.18.3867
macro extract expands head extr id idl args extr id list extracted colored identifiers 
extraction performed macro extract 
define syntax extract syntax rules symb body cont id extract job extract symb body cont body cont letrec syntax ex aux extract id id syntax rules body cont reverse cont symb symb body cont extract symb body ex aux symb body cont reverse reverse list extracted ids syntax rules match order symb res cont head cont args cont head res cont args res tail cont reverse res tail cont ex aux body cont macro extract extract colored identi ers form evaluates :10.1.1.18.3867
macro mbi dirty weakly 
evaluate mbi dirty obtain evaluates :10.1.1.18.3867
referential mylet form section attack referential transparency writing macro seemingly allows free identi ers expansion captured closest lexical binding 
precise want write macro mfoo expands identi er foo way form foo foo list foo mfoo evaluate list 
key insight shift focus macro mfoo binding form 
macro mfoo trivial define syntax mfoo syntax rules mfoo foo concentrate re de ning binding form permit referentially opaque capture 
rede nition easier introduce section custom binding form mylet 
section shall show regular act mylet 
goal section developing binding form mylet mylet foo mylet foo list foo mfoo evaluate list 
possible expression expand follows foo define syntax mfoo expand foo re define mylet account foo mfoo foo define syntax mfoo expand foo re define mylet account foo mfoo list foo mfoo di erent bindings variable typeset di erent fonts 
expansion form mylet binds foo re de nes macro mfoo scope new binding 
mfoo generate identi er foo refers local binding 
rede nition mfoo binding key insight 
possible expansion targeted macro contain identi ers bindings inserted macro 
process de ning rede ning macros expansion mylet looks similar process described previous section 
take macro mbi dirty prototype design mylet 
generator helps de ne re de ne macro mfoo macro mylet fig 

de nitions mylet foo mylet foo list foo mfoo expands lambda foo lambda foo list foo foo evaluates 
result demonstrates mfoo expanded foo captured local binding 
macro mfoo inserted opaque binding foo 
mylet constantly re generates nests 
test demonstrates nesting capturing expansion mfoo closest lexical binding mylet foo mylet thunk lambda mfoo mylet foo list foo mfoo thunk expression evaluates 
expansion mfoo closure thunk refers variable foo lexically visible time 
achieving referential rede ning binding forms previous section showed write seemingly referentially opaque rs macro resort custom binding forms 
rs prohibit re de ning standard binding forms letrec lambda suit needs 
need overload just form fundamental binding form lambda 
overloading done macro de les body appendix 
worth noting fragments macro long code 
rst letrec syntax 
lambda native capture native lambda syntax rules args lambda args looks captures native lambda needed ect bindings 
fragment letrec syntax 
symb rs definition syntax rules args symb symb letrec symb lambda symb args top level macro appendix extra rst argument 
argument environment list custom bound lambda identi ers macro expansion 
de nition taken rs verbatim pattern modi ed account extra rst argument 
define syntax syntax rules letrec lambda extra arg name val 
body body :10.1.1.18.3867
lambda name 
body body :10.1.1.18.3867
val letrec lambda tag name val 
body body :10.1.1.18.3867
letrec tag lambda name 
body body tag val macro mfoo name symb body scope body define macro name expands identifier symb define syntax mfoo syntax rules name symb body syntax name syntax rules symb body mylet var init body expands var init body body body wrapped re definitions mylet macro mfoo :10.1.1.18.3867
define syntax mylet syntax rules var init body letrec syntax doit continuation extract syntax rules mylet symb extracted body mylet symb mfoo symb foo symb var init body var init bind var mfoo mfoo symb foo symb re generate macro mfoo letrec syntax mylet symb re define syntax rules var init body extract mylet symb mfoo symb foo symb var body doit var init body body extract mylet mfoo foo var body doit var init body macros mfoo mylet macro relates form lambda precisely rs substitutes custom bound lambda 
overloaded lambda de ned follows letrec 
lambda symb re defined infected lambda syntax rules vars body letrec syntax doit syntax rules mylet symb mylet symb symb symb symb symb vars body lambda native vars mfoo symb symb proliferate mylet symb mylet symb symb symb symb symb body extract symb symb letrec symb lambda symb mfoo symb foo symb vars body doit vars body relying previously captured lambda native create bindings 
immediately rede ne macros updated environment 
corrupted lambda acts infected virus mentioning lambda virus causes spread binders body 
excerpts de le macro regression tests 
expression foo list mfoo foo expands lambda foo list foo foo predictably evaluates :10.1.1.18.3867
expansion mfoo captured locally bound identi er 
infected lambdas gone expansion result regular scheme code 
furthermore foo foo bar list mfoo foo list foo mfoo bar evaluates foo list letrec bar lambda list foo mfoo foo bar foo mfoo 
de led letrec act precisely standard ones 
foo foo capture binding foo ft lambda mfoo foo capture arg ft ft lambda foo mfoo foo list foo mfoo ft ft mfoo evaluates expected mfoo :10.1.1.18.3867
examples expansion mfoo captures closest local lexical binding variable foo 
examples run bigloo interpreter compiler scheme 
point de led examples behave mfoo quoted just identi er foo 
words mfoo de ned non hygienic referentially opaque macro define macro mfoo foo able capture generated identi er local binding need know name identi er name macro generates 
need ectively wrap macro victim code 
explicitly examples 
accomplish wrapping implicitly re de ning top level suitable form insert invocation right spot 
goes saying assume bindings identi ers foo mfoo letrec lambda point macro de ned point invoked 
possible remove dependence macro ad hoc identi ers foo mfoo 
pass targeted macro identi er captured closest lexical binding arguments 
arrive form leaky syntax appendix illustrated examples 
expression leaky syntax bar syntax rules val bar val bar bar evaluates leaky syntax syntax rules val val bar lambda lambda list evaluates list :10.1.1.18.3867
form leaky syntax similar syntax 
takes additional rst argument identi er body de ned syntax rules 
designated identi er captured closest lexical binding body leaky syntax 
examples show variable captured 
particular macro example expands expression adds value identi er twice value argument 
identi er designated capture closest local binding procedure lambda ectively triples argument 
demonstrated syntax form de nes macro speci variable hygienic rules 
form leaky syntax library syntax developed exclusively rs hygienic macros 
discussion section discuss implications de le macro 
assure reader legal fully complies rs rely unspeci ed behavior 
macro de le written entirely pattern language rs 
re binding syntax keywords lambda letrec prohibited rs 
contrary rs speci cally states reserved keywords syntactic bindings may shadow variable bindings syntactic bindings 
furthermore re de ned letrec forms relate lambda form precisely rs forms 
re de ned lambda form compliance rs description section :10.1.1.18.3867
argue re de ned lambda leads violation constraint rs places macro system macro transformer inserts free identi er refers binding visible transformer speci ed regardless local bindings may surround macro 
paragraph applies exactly de led macros 
code define foo foo list mfoo foo identi er foo inserted expansion macro mfoo refers binding foo visible macro mfoo de ned :10.1.1.18.3867
twist de nition macro mfoo happened right local binding foo 
despite mfoo rs referentially transparent macro result equivalent expansion referentially opaque macro 
macro de le surround victim code 
object merely create little language resembles scheme guarantee referential transparency macro expansions 
little language presumed impossible syntax rules 
macro de nition extends language 
extended language expected obey certain constraints 
impetus hygienic macros speci cally create macro system guaranteed hygienic constraints 
syntax rules turing complete certain computations example determining identi ers spelled outside scope 
common belief syntax rules thoroughly hygienic 
precise argument syntax rules principle implement macros leaky syntax informally advanced 
described macro expansion algorithm rs scheme systems including bigloo 
incidentally algorithm accounts possibility binding forms lambda syntax may rede ned user 
informally argues algorithm satis es hygiene conditions impossible write high level macro inserts binding capture inserted macro impossible write high level macro inserts captured bindings inserted macro :10.1.1.18.3867
unfortunately state conditions su cient precision precludes formal proof 
notion inserting binding particularly vague 
common folklore interpretation conditions generated bindings capture identi ers generated transcription step 
interpretation true leaky syntax impossible 
interpretation false loop macro counter example :10.1.1.18.3867
examples section demonstrated capture generated identi ers transcription steps 
interesting ask possible create macro system provable hygienic provably permit tricks 
showed allow macros expand de nitions macros design macro system provably hygienic 
claimed generative necessary condition macro extension maintain strong invariants static typing context 
generative macro build forms arguments inspect arguments 
conclude subject macro hygiene decided research needed precisely state hygiene formally means precisely assurances provides 
practical programmer er leaky syntax library form 
form lets programmer write new class powerful syntactic extensions standard rs syntax rules resorting lower level macro facilities 
general practical macro programmer hopefully view encouragement 
realize informal narrow nature assertions rs macros 
read rs says 
write expressive macros previously led believe :10.1.1.18.3867
acknowledgment am greatly indebted numerous discussions helped improve content presentation 
special due alan bawden extensive comments invaluable advice 
olin shivers anonymous reviewers helpful comments suggestions 
supported part national research council research program naval postgraduate school army research ce contracts ma ma sp 
alan bawden jonathan rees :10.1.1.18.3867
syntactic closures 
proc 
acm symposium lisp functional programming pp :10.1.1.18.3867

william clinger jonathan rees 
macros 
proc 
acm conference principles programming languages pp :10.1.1.18.3867
:10.1.1.18.3867
william clinger 
macros scheme 
lisp pointers iv december :10.1.1.18.3867
kent dybvig robert hieb carl bruggeman 
syntactic abstraction scheme 
lisp symbolic computation :10.1.1.18.3867
ganz sabry taha macros multi stage computations type safe generative binding macros 
proc 
intl 
conf 
functional programming icfp pp :10.1.1.18.3867

florence italy september :10.1.1.18.3867
erik hilsdale daniel friedman 
writing macros continuation passing style 
scheme functional programming 
september 
kelsey clinger rees eds revised report algorithmic language scheme higher order symbolic computation vol 
september :10.1.1.18.3867
eugene kohlbecker jr daniel friedman matthias felleisen bruce duba 
hygienic macro expansion 
proc 
acm conference lisp functional programming pp :10.1.1.18.3867
:10.1.1.18.3867
eugene kohlbecker wand 
macro deriving syntactic transformations speci cations 
proc 
th acm sigact sigplan symposium principles programming languages pp :10.1.1.18.3867
:10.1.1.18.3867
oleg :10.1.1.18.3867
re widespread bug arguably letrec initializer returns twice 
messages posted newsgroup comp lang scheme may pst :10.1.1.18.3867
groups google com groups eb ac posting google com groups google com groups ae fsf app dial idiom com :10.1.1.18.3867
write seemingly macros syntax rules 
message posted newsgroup comp lang scheme november pst :10.1.1.18.3867
groups google com groups fsf org :10.1.1.18.3867
re holey macros 
re choice embedding scheme implementation 
message posted newsgroup comp lang scheme may :10.1.1.18.3867
groups google com groups rh fsf org jonathan rees :10.1.1.18.3867
implementing lexically scoped macros 
lisp pointers 
scheme things column :10.1.1.18.3867
olin shivers :10.1.1.18.3867
universal scripting framework lambda ultimate little language 
concurrency parallelism programming networking security lecture notes computer science pp editors ja ar roland yap springer :10.1.1.18.3867
appendix de nitions letrec taken verbatim rs 
di erence letrec lambda identi ers explicitly pass macros rst argument 
define syntax syntax rules letrec lambda name val 
body body :10.1.1.18.3867
lambda name 
body body :10.1.1.18.3867
val letrec lambda tag name val 
body body :10.1.1.18.3867
letrec tag lambda name 
body body tag val define syntax syntax rules body body :10.1.1.18.3867
body body letrec lambda name val name val :10.1.1.18.3867
body body :10.1.1.18.3867
name val name val :10.1.1.18.3867
body body shorter implementations letrec define syntax syntax rules mlet letrec lambda var init :10.1.1.18.3867
body mlet var undefined 
native fine temp list init set 
var car temp set 
temp cdr temp 
body appendix macro body :10.1.1.18.3867
overloads forms lambda defines non hygienic macro mfoo 
binding introduced forms lambdas mfoo re defined 
overloaded lambda acts infected virus keeps spreading lambda body infect lambda 
define syntax syntax rules letrec syntax syntax rules overloaded identifiers symb symb letrec symb lambda symb mfoo symb foo symb body letrec syntax symb rs definition syntax rules args symb symb letrec symb lambda symb args symb redefinition syntax rules args symb symb letrec symb lambda symb args letrec symb redefinition letrec syntax rules args symb symb letrec symb lambda symb args lambda symb re defined infected lambda syntax rules vars body letrec syntax doit syntax rules mylet symb mylet symb symb symb symb symb vars body lambda native vars mfoo symb symb proliferate body mylet symb mylet symb symb symb symb symb body extract symb symb letrec symb lambda symb mfoo symb foo symb vars body doit vars body lambda native capture native lambda syntax rules args lambda args body extract letrec lambda mfoo foo current implementation macro corrupt bindings created internal define syntax letrec syntax forms :10.1.1.18.3867
technical obstacles corrupting bindings 
avoid clutter code detect possible shadowing macro mfoo local binding 
full code validation tests available com oleg ftp scheme dirty macros scm 
appendix implementation library syntax leaky syntax :10.1.1.18.3867
slightly modi ed version macro 
uses parameters leaky macro name leaky macro name gen captured symbol hard coded identi ers mfoo mfoo foo 
define syntax syntax rules leaky macro name leaky macro name gen captured symbol letrec syntax similar macro appendix 
extract letrec lambda leaky macro name captured symbol define syntax leaky syntax syntax rules var capture dm name dm body body syntax dm generator syntax rules name var capture outer body syntax name dm body outer body dm name dm generator var capture body :10.1.1.18.3867
