availability evaluation quorum mutual exclusion schemes general topology networks tsuchiya department informatics mathematical science osaka university osaka japan email ics es osaka ac jp quorums known approach achieving mutual exclusion distributed environments 
propose new availability evaluation method quorum mutual exclusion schemes presence failures 
previously proposed methods take topology systems link failures consideration exhaustive state enumeration approach deal far 
incorporating notion called minimal quorum spanning trees method efficiently evaluate availability quorum mutual exclusion schemes general topology networks unreliable nodes links 
experimental results show superiority proposed method exhaustive state enumeration 
received december revised september 
distributed mutual exclusion problem recognized fundamental important problems distributed computing frequently arises various kinds application 
problem guarantee computing node access shared resource simultaneously 
resource example device needs exclusive usage database data structure requires exclusive access order avoid interference operations different nodes 
computing node currently accessing resource said critical section 
number mutual exclusion mechanisms proposed solve problem 
quorum mechanisms known elegant especially robust approach 
applications include replicated database systems name servers emulation shared memory :10.1.1.12.6256
order achieve mutual exclusion quorum scheme uses special set node groups called coterie 
coterie node groups node common intersection property group superset node group minimality property 
quorum means node group coterie 
coterie determined mutual exclusion achieved follows 
entering critical section node acquire permission nodes quorum communication 
hand node allowed give permission node 
intersection property guaranteed node enter critical section time 
presence node link failures quorum mechanisms provide desirable fault tolerance capability system partitioned isolated node groups due failures critical section entered nodes quorum connected operational paths 
availability assessing robustness quorum mutual exclusion mechanisms 
measure defined probability critical section entered presence failures 
clear availability mutual exclusion mechanism depends completely coterie mechanism 
term availability coterie refer availability mutual exclusion mechanism adopts coterie 
number schemes developed constructing coteries :10.1.1.12.6256
coteries generated schemes different advantages disadvantages 
generally speaking coteries high fault tolerance low performance large message complexity vice versa 
attempts evaluate coteries capturing trade approaches previous availability evaluation methods assume networks consider topology computer journal vol 
tsuchiya networks link failures see survey 
exceptions include network topologies link failures taken account 
evaluation performed exhaustive state enumeration examining possible system states 
approach practical small systems number possible system states grows exponentially number components system 
overcome deficiencies previous approaches propose new method availability evaluation coteries unreliable networks 
proposed method enumerates minimal connected graphs contain quorum call minimal quorum spanning trees computes availability 
method accomplish exact evaluation state enumeration 
notions similar introduced order characterize coteries networks approach graphtheoretic notion computing availability coteries general topology networks 
concerning complexity calculation availability general np hard 
show feasibility proposed method results experiment moderate sized networks 
rest organized follows 
section give system description basic definitions 
section proposed evaluation method 
section results experiment conducted show feasibility 
section show results comparative analysis schemes constructing coteries 
conclude brief summary section 
preliminaries 
system model consider computer network modelled undirected graph set vertices set edges incident vertices vertex represents computing node node short 
letter denote number nodes network 
edge represents communication link link short node node indicate node link 
loss generality assume connected self loops parallel edges 
assume component may fail states operational failed 
failures components mutually independent fail failures 
assume component probability operational apriori denote probability operational probability operational respectively 
refer probabilities reliabilities components 
say subgraph operational nodes links subgraph operational 

coteries formally define coterie 
notion coterie introduced garcia molina barbara 
definition 
coterie quorum set nodes set non empty subsets conditions hold 
intersection property node common 
ii minimality property element element coterie called quorum 
refer non empty subset node group 
example 
set nodes 
consider sets node groups 
sets node groups coteries 
coterie satisfy intersection property 
coterie satisfy minimality property 
coterie achieve mutual exclusion follows 
entering critical section node asked obtain permission node quorum coterie 
node allowed give permission node 
node obtained permission node quorum enters critical section holds permission leaves critical section 
intersection property guaranteed nodes critical section simultaneously presence nodes link failures 
detailed descriptions quorum mutual exclusion algorithms see 

availability presence nodes link failures critical section entered nodes quorum operational connected operational paths 
example consider network shown suppose quorum 
node edge failed shown critical section entered nodes get permission nodes quorum operational paths 
availability coterie defined probability critical section entered presence understood drop discussion 
computer journal vol 
availability quorum mutual exclusion schemes 
example network state failed 
failures 
graph theoretical terms written follows definition 
availability availability coterie probability connected subgraph consisting operational nodes edges 
availability evaluation coteries networks 
minimal quorum spanning trees proposed evaluation method works notion called 
introduce proposed method 
sub denote set connected subgraphs contain nodes quorum itis clear availability coterie probability subgraph sub remains operational 
define follows 
definition 
element sub element sub proper subgraph 
notice necessarily trees 
example 
consider network coterie 
suppose failed 
shows operational components situation 
take operational subgraph instance 
connected subgraph spans nodes quorum critical section entered case 
proper connected subgraphs example contain nodes quorum 
hand proper connected subgraphs spans quorum connected subgraph 
intuitively speaking minimal subgraph enables critical section entered 
definition operational exists subgraph sub remains operational 
equation holds 
availability pr operational 
equation compute availability step initialization try step generation try checking step try spans nodes quorum tree subgraph add remove try remove try expanding step new try set edges incident newt add newt new try new 
algorithm enumeration 
coterie considering elements sub 
specifically availability calculated phases phase 
enumerate coterie phase 
calculate probability operational 

phase enumeration enumeration develop new algorithm breadth search 
algorithm shown generates non decreasing order sizes size tree number edges 
algorithm checks node constitutes quorum coterie 
node say constitutes quorum stored set deleted set try 
elements try checked node remaining try computer journal vol 
tsuchiya 
derived algorithm 
expanded adding adjacent links nodes 
trees size contain node try generated 
trees spans quorum checked 
nodes tree contain quorum tree stored removed try previously trees subgraph tree simply removed try minimal 
procedure repeated possible sizes 
algorithm consists checking step expanding step 
checking step tree stored set try tested determine spans nodes quorum 
contains quorum deleted try expanded tree contains proper subgraph tree 
determined checking previously stored set subgraph subgraph exists 
added 
checking process completed trees span quorums remain try 
expanding process performed order increase size tree try adding new adjacent vertex 
increasing size tree try checking process performed 
expansion possible algorithm terminates 
example 
consider network shown coterie 
case algorithm shown proceeds follows 
iteration step trees size stored try node constitutes quorum 
checking step size moved try 
result contains try contains trees size 
expanding step increases size trees try 
third iteration checking step trees try span quorum removed try 
trees trees added smaller size subgraph 
trees example contain size proper subgraph simply removed try 
algorithm generates total shown 

phase computation availability phase calculate probability operational 
boolean variables represent event node operational event link operational respectively 
event components operational represented boolean product event components operational represented boolean sum products 
obviously availability probability event represented boolean sum products occurs 
probability computed straightforward fashion products usually share common variables 
order compute probability transform boolean expression equivalent boolean sum mutually disjoint products 
obtain probability sum computer journal vol 
availability quorum mutual exclusion schemes complete graph nodes complete graph nodes complete graph nodes complete graph nodes complete graph nodes complete graph nodes 
sample networks 
probabilities events corresponding disjoint products 
fortunately techniques transformation studied algorithms carel proposed 
algorithms called terminal reliability algorithms originally developed computing probability exists operational path nodes unreliable network 
experiment implemented carel phase 
example event operational represented boolean sum products carel transforms expression equivalent boolean sum mutually disjoint products expression availability directly obtained follows different terminal reliability algorithms different time complexity 
example complexity carel details algorithm omitted 
interested readers referred 
denotes number 
example 
suppose shown 
carel assuming node link probability operational 
probability availability previous example 

experimental evaluation section show results experiments conducted 
implemented proposed method language 
experiments conducted sun ultra workstation running solaris 

feasibility demonstrate feasibility method experiment 
notice computing availability coteries unreliable networks shown np hard 
collection networks shown benchmark networks 
collection contains network topologies comparative analysis terminal reliability algorithms 
assumed respectively 
values modelling real network 
computer journal vol 
tsuchiya table 
running times seconds proposed method state enumeration method 
means program finish hours 
phase phase total time number state enumeration network note actual reliabilities components effect running time proposed method 
network evaluated availability coterie constructed majority voting recorded running time needed evaluation 
coterie composed node groups consisting exactly nodes 
example coterie constructed 
reasons choosing coterie 
studied literature 
second coterie defined uniquely regardless topology network 
addition number quorums coterie larger known coteries 
roughly speaking evaluation coterie relatively difficult 
table shows results experiment 
table time needed phase phase total running time number shown network 
availability obtained shown table 
table see running time increases rapidly size network grows 
evaluation completed networks 
network node complete graph node complete graph network evaluation completed seen proposed method applicable networks nodes 
sparse networks size networks method handle larger 
example evaluation finish network nodes takes min network nodes 
results show time needed second phase dominant total running time 
comparison implemented program evaluates availability exhaustive state enumeration 
system state program computes isolated node groups state breadth search 
determines quorum available state checking quorum exists contained isolated node groups 
available quorum probability state occurs computed 
computer journal vol 
availability quorum mutual exclusion schemes availability state empty select node ng adjacent empty ng ng adjacent node ng 
ng isolated node group ng contains quorum ng prob nodes prob prob prob links prob prob prob availability availability prob break loop 
evaluation algorithm state enumeration 
summing probability state availability obtained 
pseudo code program shown 
running time shown table 
results seen method state enumeration takes longer time proposed method 
example network program complete evaluation proposed method needed results clearly show advantage proposed method state enumeration 

comparison schemes constructing coteries second experiment evaluated availabilities coteries obtained different schemes proposed evaluation method 
addition majority voting chose schemes proposed barbara garcia molina tong 
schemes weighted voting designed especially constructing highly available coteries 
specifically explicitly take reliabilities nodes links consideration construction schemes 
weighted voting node assigned nonnegative integer number votes 
subset contains quorum 
majority voting special case weighted voting schemes assign votes nodes follows 
scheme 
incident link node multiply reliability reliability node 
sum products multiply sum reliability round number obtained number votes total number votes nodes votes receives extra 
scheme ii 
node compute reliability probability link incident operational 
round log log min min min total number votes find node largest value log log min wmax nodes wmax votes wmax max 
adjust log min wmax 
experiment assumed respectively 
show results evaluation table 
computer journal vol 
tsuchiya table 
availabilities coteries constructed schemes 
best value underlined network 
network majority voting scheme scheme ii network best value obtained underlined 
numbers networks majority voting scheme scheme ii achieved best value respectively 
table seen schemes ii outperform majority voting especially number nodes 
majority voting quorum consists nodes odd respectively 
number nodes size quorum relatively large results low availability 
schemes ii avoid keeping total number votes odd achieve high availability regardless number nodes 
results conclude schemes ii effective 
noted weakness majority voting exhibits sized networks discussed 
remedy problem simple technique suggested selects node gives extra vote 
network experiment technique produces coterie constructed scheme ii provided node largest number incident links selected 
phenomenon occur reliabilities components close setting 
study needed determine schemes appropriate networks highly reliable 

impact link reliabilities network topology stated previous evaluation methods assume links fail network topology complete graph 
assumption evaluation easier may result overestimating availability 
order illustrate show table availability coteries constructed majority voting assumption 
assumed node reliability table row contains positive integer availability number nodes networks exactly nodes 
comparing tables see ideal assumption previous methods results considerable overestimation availability 
example network nodes availability computed proposed method estimated link failures network topology ignored 
computer journal vol 
availability quorum mutual exclusion schemes table 
availabilities majority voting complete graph networks link failures 
number networks nodes availability nodes 
proposed new method evaluating availability coteries presence node link failures 
proposed method consists phases 
phase enumerates traversing network breadth manner second phase computes probability operational 
previous methods proposed method takes node link failures consideration applied systems arbitrary topology 
experimental results shown proposed method runs faster state enumeration 
directions needed 
conjecture room improvement running time 
example proposed evaluation method intersection property coteries 
exploiting property possible develop faster algorithm 
noted due fact proposed approach depend intersection property generalized variations coteries wr coteries coteries pair quorums intersects 
extending method currently developing method evaluating availability coteries general topology networks preliminary results see 
stated problem evaluating availability coteries general topology networks general computationally intractable 
approximation methods needed large sized networks 
addition different method necessary different availability measure 
design evaluation methods deserve study 
authors implementing algorithm carel aaron stokes helpful comments 
authors anonymous referees helpful suggestions improve 
author supported part foundation aid encouragement young scientists ministry education science sports culture japan 
singhal 
taxonomy distributed mutual exclusion 
parallel distributed computing 
agrawal el abbadi 
efficient faulttolerant solution distributed mutual exclusion 
acm trans 
comput 
syst 
garcia molina barbara 
assign votes distributed system 
acm 
gifford 
weighted voting replicated data 
proc 
th symp 
operating system principles pp 

acm press new york 
rangarajan setia tripathi 
faulttolerant algorithm replicated data management 
ieee trans 
parallel distrib 
syst 
mullender vitanyi 
distributed match making 
algorithmica 
lynch 
robust emulation shared memory dynamic broadcasts 
proc 
th int 
symp 
fault tolerant computing ftcs pp 

ieee computer society press los alamitos ca 

algorithm mutual exclusion decentralized systems 
acm trans 
comput 
syst 
thomas 
majority consensus approach concurrency control 
acm trans 
database syst 
kumar segev 
cost availability tradeoffs replicated data concurrency control 
acm trans 
database syst 
yesha kalpakis 
unified framework evaluation distributed quorum attainment protocols 
ieee trans 
software engng 
saha rangarajan tripathi 
analysis average message overhead replica control protocols 
ieee trans 
parallel distrib 
syst 
amir wool 
evaluating quorum systems internet 
proc 
th int 
symp 
fault tolerant computing ftcs pp 

ieee computer society press los alamitos ca 
barbara garcia molina 
reliability voting mechanisms 
ieee trans 
comput 
tong 
vote assignments weighted voting mechanisms 
ieee trans 
comput 
harada yamashita 
nondominated coteries graphs 
ieee trans 
parallel distrib 
syst 
ibaraki kameda 
optimal coteries rings related networks 
distrib 
comput 
cao singhal deng sun 
delay optimal quorum mutual exclusion scheme fault tolerance capability 
proc 
th int 
conf 
computer journal vol 
tsuchiya distributed computing systems icdcs pp 

ieee computer society press los alamitos ca 
tang natarajan 
obtaining coteries optimize availability replicated databases 
ieee trans 
knowledge data engng 
raghavendra 
symbolic reliability algorithm path cutset methods 
ieee trans 
comput 
rai 
carel computer aided reliability evaluator distributed computing networks 
ieee trans 
parallel distrib 
syst 
chen 
cut method terminal pair reliability 
ieee trans 
reliability 

hierarchical modeling availability distributed systems 
ieee trans 
software engng 
ibaraki kameda 
theory coteries mutual exclusion distributed systems 
ieee trans 
parallel distrib 
syst 
fujita yamashita ae 
availability coterie 
ieee trans 
comput 
choi tsuchiya 
availability coteries networks unreliable nodes links 
proc 
th int 
workshop objectoriented real time dependable systems pp 

ieee computer society press los alamitos ca 
papadimitriou 
optimal coteries 
proc 
th symp 
principles distributed computing pp 

acm press new york 
computer journal vol 

