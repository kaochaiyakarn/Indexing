exclusion signature matching intrusion detection evangelos markatos kostas institute computer science ics foundation research technology forth box crete gr greece csi forth gr markatos appears iasted international conference communications computer networks consider problem efficient string signature matching network intrusion detection systems nid ses 
string matching computations dominate cost running nids despite efficient generalpurpose string matching algorithms 
aiming increasing efficiency capacity designed exb string matching algorithm tailored specific characteristics nids string matching 
implemented exb snort experiments comparing exb current best alternative solution 
preliminary experiments suggest exb offers improvements system performance factor 
key words network security intrusion detection string matching network performance network intrusion detection systems receiving considerable attention mechanism resort shielding computer systems networks attackers 
typical function nids set signatures rules describing known intrusion threat 
nids examines network traffic determines signatures indicating intrusion attempts matched 
detect activity need inspect payload incoming packets signatures 
simplest common form inspection brute force string matching packet payload 
instance consider simplified signature shown taken snort widely open source nids 
signature matches tcp ip packets originating computers outside monitored domain external net destined web servers monitored domain servers port containing string usr bin perl payload 
nids determines packet matches rule infers malicious client may trying web server execute perl interpreter hop markatos university crete 
kostas cis department university pennsylvania 
email dsl cis upenn edu ing gain unauthorized access 
decide packet matches signature nids needs check tcp ip packet header specified values external net servers 
addition nids needs check payload contains string usr bin perl 
string matching generally expensive finding single pattern input string imposes computation linear size input string nids rule sets contain hundreds strings 
known nids implementations general purpose string matching algorithms known perform 
computational burden string matching algorithms significant measurements production network suggest snort spends roughly total processing time string matching web intensive traffic cost increased 
furthermore need highly efficient keep increasing link speeds 
instance gbit network link delivers roughly byte nanoseconds 
considering state art processor operating ghz allows roughly instructions incoming byte 
number potential threats associated signatures rules expected grow string matching workload increase 
exb multiple string matching algorithm designed specifically 
basic idea determine input packet received contains fixed size bit strings signature string considering bit strings appear sequence done existing algorithms 
bit string signature appear packet exb determines signature match 
small size input ensures exb matches correlate actual matches 
approach allows straightforward efficient implementation packet exb creates occurrence bitmap marking fixed size bit string exists packet 
bit strings signature matched occurrence bitmap 
packets rarely expected match signature exb performs better common case compared existing algorithms 
case false matches fixed size bit strings show arbitrary positions alert tcp external net servers content usr bin perl simple intrusion detection rule 
input exb falls back standard algorithms boyer moore algorithm 
validate approach implemented exb snort 
experiments full packet traces show rate false matches reasonably small exb offers significant performance benefits certain cases exb snort times faster 
rest organized follows 
section review previous place algorithm context section informally describe algorithm 
section presents experiments exb implemented snort compares performance current best alternative 
section outlines open issues investigation section summarizes results 
previous general problem designing algorithms string matching researched 
widely algorithm due boyer moore 
boyer moore algorithm compares string input starting rightmost character string 
allows heuristics may reduce number comparisons needed string matching compared naive algorithm 
heuristics triggered mismatch 
heuristic called bad character heuristic works follows mismatching character appears search string search string shifted mismatching character aligned rightmost position mismatching character appears search string 
mismatching character appear search string search string shifted character pattern position past mismatching character input 
second heuristic called suffixes heuristic triggered mismatch 
mismatch occurs middle search string non empty suffix matches 
heuristic shifts search string occurrence suffix string 
horspool improved boyer moore algorithm simpler efficient implementation uses bad character heuristic 
aho corasick provide algorithm concurrently matching multiple strings 
set strings construct automaton able search strings concurrently 
automaton consumes input character time keeps track patterns partially matched input 
algorithms aho corasick widely current compiler technology improvements 
fisk varghese consider design nids specific string matching algorithms 
proposed algorithm called set wise boyer moore horspool adapting boyer moore algorithm simultaneously match set rules 
algorithm shown faster aho corasick boyer moore medium size pattern sets 
experiments suggest triggering different algorithm depending number rules boyer moore horspool rule set wise boyer moore horspool rules aho corasick rules 
heuristic incorporated snort provides baseline comparison section 
independently fisk varghese implemented similar algorithm snort adapting boyer moore simultaneously matching multiple strings derived exact set matching algorithm gusfield 
able track increasing network speeds regardless efficient algorithms designed cost string matching appears orders magnitude higher cost ip forwarding 
straightforward approach scaling systems consider distributed architectures examined 
architecture splits incoming traffic intrusion detection sensors parallel identify intrusion attempts 
efforts orthogonal improving string matching better algorithms require sensors distributed nids architecture 
exb exclusion string matching informal description exb simplest intuitive form general form 
exb simple reasoning suppose want check small input contains string character determine string appear input string hand character belongs standard string searching algorithms boyer moore horspool confirm substring needed case false matches cases character sequence appear simplifies matching problem efficiently determine character belongs means occurrence bitmap 
specifically preprocess input character appears string mark corresponding element element bitmap 
pre processing know string contains character element bitmap marked 
pseudo code pre processing boolean exists pre process char input int len exists clear array int idx idx len idx exists input idx search char char input int len int len int idx idx len idx exists idx return exist return boyer moore len input len pseudo code exb pre processing search 
input matching string input 
algorithm generalized pairs characters intention reducing probability false matches 
recording occurrence single characters string possible record appearance pair consecutive characters string matching process determining character appears algorithm checks pair consecutive characters appears pair appear exb knows generalizing exb bit strings arbitrary length just bit characters 
exb records byte aligned bit strings length size bit string exposes trade larger bit strings result fewer false matches increase size occurrence bitmap turn increase capacity misses degrade performance 
experiments shall experimental analysis shown maximize performance particular experiment setup 
experimental evaluation evaluate performance exb fisk varghese heuristic denoted rest implemented snort trace driven execution 
environment experiments run pc pentium processor running ghz data cache kb cache kb mb main memory 
fraction false matches bit string length bits fraction false matches vs bit string length 
measured memory latency ns data cache ns cache ns main memory measured lmbench 
host operating system linux kernel version redhat 
snort version compiled gcc version optimization flags results similar 
packet checked default rule set snort distribution 
rule set composed rules requires examining packet payload 
snort organizes rules chain headers 
chain headers snort associate packet header rule suitable set string matching rules 
drive execution snort full packet traces capture flag data set capture flag contest held year largest underground internet security gathering planet 
traces contain significant number intrusion attempts experiments eth dump trace containing packets 
simplicity traces read file 
replaying traces remote host provided similar results 
experiments default rule set comparing algorithms determine optimal size fixed size bit string exb 
show fraction false matches different bit string lengths corresponding running time snort obtained time facility host operating system 
observe fraction false matches bit strings bits 
completion time decreases increasing bit string size fraction false matches searched boyer moore reduced 
strictly decreasing minimized bits exhibits slight increase bits apparently available www com appealing reason traces number intrusion attempts availability real payloads 
argue characteristics affects performance confirmed experimentally 
running time sec bit string length bits completion time vs bit string length 
exb completion time sec table completion time snort default ruleset effect data structure size kb bits kb bits cache performance 
specific configuration bits appear offer best performance 
examine exb offers improvement compared 
completion time exb table 
see exb snort completes execution faster compared 
exb completes execution faster common case quickly decide string contained packet 
invocations exb able terminate invoking boyer moore 
remaining cases exb boyer moore find considered string contained input packet 
better understand behavior exb obtain processor level statistics pentium performance counters 
measure total number instructions executed number data cache misses number cache misses 
statistics reported table 
see exb achieves improvement completion time uses fewer instructions induces fewer data cache misses fewer cache misses 
exb improv 
completion time sec instructions misses misses table performance snort default rule set completion time secs exb number rules performance snort vs number rules 
synthetic rules number rules better understand performance exb construct synthetic rule set rule checks packet random character string 
focus cost string matching rules applied packets 
shows completion time snort exb 
see small number rules slightly outperforms exb number rules increases exb clearly outperforms 
exb pays price pre processing packet 
packet checked rules initial pre processing overhead amortized larger number rules effect total completion time reduced 
string length examine effect string length performance exb 
set rules match tcp ip headers search payload random string length 
note length strings default rule set bytes average 
summarizes results exb outperforms cases effect string length completion time appear clear trend repeated experiments improve picture 
noticable difference relative benefits exb higher case byte strings 
traced surprisingly poor cache behavior considering large number data cache misses reported billions table string exb length misses misses completion time secs exb string length bytes completion time vs string length rules observe approaches comparable number cache misses byte strings number cache misses significantly reduced byte strings exb 
uses data structures fit kb data cache 
contrast exb uses kb data structure leaving space cache rules data structures 
packet size examine exb perform different packet sizes divide trace sets containing small packets bytes containing large packets bytes 
run snort sets report results 
observe marginally better small packets larger packets exb outperforms roughly 
understandable relative cost header processing higher small packets large packets 
improved string matching algorithm provide noticable improvements small packets 
traces results reported far single trace 
completeness repeated experiments traces data source default rule set 
results summarized table 
exb performs better traces relative improvement varies 
improvement high times faster cases improvement exb small 
coincides differences packet size distribution average packet size eth dump bytes contrast eth dump trace specifically data sets contain unusually large number tcp syn ack packets icmp shellcode processing time packet micro secs packet length bytes performance function packet size 
trace characteristics running time trace name number avg 
pkt exb improv 
size packets bytes sec sec eth dump eth dump eth dump eth dump eth dump eth dump eth dump eth dump eth dump eth dump table completion time snort various traces average packet size bytes 
processing large packets eth dump snort spends large fraction time string matching exb offers significant benefits 
contrary case small packets eth dump snort spends small fraction time string matching improvements string matching affect total completion time 
number questions remain unanswered experiments far 
set traces limited interesting examine performance exb diverse set traces including workloads production networks 
due privacy issues generally difficult obtain traces research purposes 
second crucial dimension explored sufficiently effect processor memory architecture 
results suggest parameter significant attacks tend small packets exb effect performance remains shown benefits exb pervasive 
third theoretical analysis comparison exb existing algorithms needed better understand relative benefits demonstrated 
similarly analyzing algorithm parameters rule set structure distribution rules chain header frequency different chain headers invoked different scenarios offer valuable insights 
detailed experimental analysis including cost breakdown various operations exb lead optimizations 
summary concluding remarks examined problem string matching network intrusion detection systems design efficient algorithm called exb 
evaluated exb set algorithms currently implemented trace driven execution real packet traces 
experiments short means exhaustive number questions remain unanswered discussed previous section 
results far observations 
exb string matching appears efficient set algorithms currently snort resulting significant performance improvement cases exb snort times faster 
second performance benefits approach improve packet size 
third exb scales increasing rule sets consistently outperforming approach 
note expect relative benefits improved string matching algorithms exb pronounced network link speeds continue increasing faster processor speeds 
supported part ist project ist funded european union 
author supported part dod university research initiative uri program administered office naval research usenix research exchange program rex 
bart herbert bos ioannidis stefan constructive comments 
aho corasick 
fast pattern matching aid bibliographic search 
commun 
acm june 
mell 
intrusion detection systems 
national institute standards technology nist special publication 
boyer moore 
fast string searching algorithm 
commun 
acm october 
staniford 
faster pattern matching intrusion detection exceeding speed snort 
proceedings nd darpa information survivability conference exposition discex ii june 
walter 
string matching algorithm fast average 
proceedings icalp pages july 
fisk varghese 
analysis fast string matching applied content forwarding intrusion detection 
technical report cs updated version university california san diego 
gusfield 
algorithms strings trees sequences computer science computational biology 
university california press 
horspool 
practical fast searching strings 
software practice experience 
kim kim 
fast multiple string pattern matching algorithm 
proceedings th conference computer science august 
vigna kemmerer 
stateful intrusion detection high speed networks 
proceedings ieee symposium security privacy pages may 
mcvoy staelin 
lmbench portable tools performance analysis 
proc 
usenix technical conference pages jan 
rivest 
worst case behavior string searching algorithms 
siam journal computing december 

snort lightweight intrusion detection networks 
proceedings usenix lisa systems administration conference november 
software available www snort org 

brink pentium performance counter tools linux february 
available www edu 
wu manber 
fast algorithm multi pattern searching 
technical report tr university arizona 
