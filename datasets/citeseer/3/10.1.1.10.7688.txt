selfish traffic allocation server farms piotr berthold mpi april cht research report ur saarbrucken germany authors addresses department computer science new jersey institute technology university heights newark nj usa cis njit edu partially supported nsf ccr sbr 
piotr max planck institut ur informatik saarbr germany mpi sb mpg de partially supported dfg vo ist program eu contract ist alcom ft 
berthold dept computer science universit dortmund str 
dortmund germany ls cs uni dortmund de partially supported dfg vo 
study price selfish routing non cooperative networks internet 
particular investigate price selfish routing coordination ratio bicriteria measures introduced game theoretic network model koutsoupias papadimitriou 
generalize model general monotone families cost functions cost functions queueing theory 
summary main results general monotone cost functions give exact characterization cost functions bounded unbounded coordination ratio 
example coordination ratio cost functions describing expected delay queueing systems unbounded 
addition show unbounded coordination ratio implies extremely high performance degradation bicriteria measures 
fact price selfish routing high bandwidth degradation factor linear network size 
separate game theoretic integral allocation model fractional flow model demonstrating small fact negligible amount integrality lead dramatic performance degradation 
unify results selfish routing different objectives showing unbounded coordination ratio min max objective implies unbounded coordination ratio average cost objective vice versa 
special focus lies cost functions describing behavior web servers open limited number tcp connections 
particular compare performance queueing systems serve incoming requests servers reject requests case overload 
come queueing systems rejection give reasonable guarantee expected delay requests selfish routing injected load far away capacity system 
contrast web server farms allowed reject requests guarantee high quality service individual request stream relatively high injection rates 
note preliminary version appeared proc 
th acm symposium theory computing stoc montreal canada may 
keywords trac allocation sel sh routing game theory coordination ratio game theoretic measure introduced koutsoupias papadimitriou reflect price selfish routing non cooperative network systems internet 
large scale communication networks typically impossible regulate network traffic achieve optimal performance system 
networks common strategy individual users follow rational approach behave minimize cost maximize profits 
motivates investigations game theoretical flavor relationship systems user aware situation facing users trying optimize strategy nash equilibrium optimal strategies systems 
known nash equilibria optimize performance 
order understand phenomenon non cooperative systems koutsoupias papadimitriou initiated investigations behavior worst case coordination ratio ratio worst possible nash equilibrium social optimum 
words analysis seeks price uncoordinated individual decisions price anarchy 
koutsoupias papadimitriou proposed model study routing problems set agents want send traffic sources destinations parallel links linear cost functions 
aim generalize kind routing problems realistic cost functions 
purpose focus particular example parallel links natural model 
particular investigate example web server farm 
suppose companies maintain servers world offer content providers store data 
servers store large pictures embedded files kind data load 
request streams normally go servers content provider redirected new web servers 
clearly defines load balancing problem streams mapped servers high quality service guaranteed stream 
important aspects taken account different streams different characteristics caused different file length 
practical studies investigate reasons impacts variable traffic see 
todays server farms mapping data streams servers typically done centralized distributed algorithm control provider server farm 
imagine service offered completely different way global control 
example stream requests managed selfish agent content provider decides server stream directed 
case agent aim minimize cost 
cost expected latency experienced individual requests stream fraction requests rejected servers overloaded 
attempt investigate coordination ratios realistic cost functions 
general approach investigate families cost functions defined general possible 
studies assume data streams described single weight depending rate requests expected length requested files 
case load server defined sum weights streams mapped server 
cost occurring server depend non trivial way load consider general continuous nondecreasing cost functions 
addition analyze selfish routing complex cost functions depend sum injected rates distributions session length different different streams 
want point approach perfect sense assumes poisson arrivals requests individual stream 
able derive rigorous analysis selfish routing account heterogeneous nature internet traffic form general session length distributions 
outline 
section contains description part model related game theory section introduces concepts related game theory 
previous related outlined section 
section presents results concerning general monotone cost functions section contains results queueing theoretical cost functions 
section concluding remarks 
keep policy order follow discussion new results consequences reader basically need go proofs results sections 
reading content section skipping proofs gives precise description results 
quite technical proof theorem shifted appendix description routing problem routing problem described formally defined scheduling problem servers data streams 
set servers streams denoted respectively 
data streams shall mapped servers cost function describing typically waiting times deny service minimized 
particular cost functions consider depend traffic server model defined section 
general compare solution mapping streams servers achieved selfish agents optimal solution min max optimization problem coordination ratios defined 
traffic model traffic streams assumed sequences requests service 
sequences assumed stochastic nature 
simplicity assume requests issued independent customers poisson 
denote injection rate data stream lengths sessions stream determined probability distribution service time session length distribution stream define weight stream 
session length respect 
server farm set servers policy serve requests 
different servers may different bandwidths 
denote bandwidth server loss generality assume 
stated assume streams unsplittable stream mapped exactly server 
server models distinguish general server farm models consisting parallel servers sequential servers 
parallel server multiple service channels 
service channel serve session independently channels 
number channels server bandwidth channel serves requests fixed service rate time channel needs serve session equal length session 
recall session lengths stream determined probability distribution example number channels may correspond number tcp connections opened simultaneously web server 
contrast sequential server service channel 
channel works service rate time channel needs serve session equal length session divided consider farms parallel servers farms sequential servers 
important aspect leads different cost functions blocked requests handled requests served immediately channels occupied 
distinguish extreme models queueing rejection models 
queueing model server holds fcfs queue inserts blocked requests 
service channel finishes session queue non empty immediately starts serving request queue 
channels server share queue 
model objective minimize maximum expected delay 
rejection model blocked requests rejected disappear system 
natural objective model minimize number rejected requests 
queueing theoretical notation server channels delays blocked requests corresponds called short queue corresponds service time session length distribution injected request stream 
blocked customers rejected corresponding queue denoted cost functions families cost functions cost occurring servers fixed allocation mapping streams servers defined families cost functions fb ff jb bg denotes domain possible bandwidth values describes cost function servers bandwidth typically assume additionally study finite domains bandwidth 
example collection identical servers specified bandwidth described family cost functions fb ff cost function called simple depends injected load cost server function sum weights mapped server depend characteristics session length distribution 
simple cost function called monotone positive continuous nondecreasing 
ordered set family simple cost functions fb called monotone monotone ii cost functions nonincreasing typical example monotone family cost functions consider derived formula expected system time delay server injection rate service rate koutsoupias papadimitriou seminal ask price selfish routing cost functions form 
want point particular example cost functions investigate 
preliminaries game theory give brief containing required definitions 
distinguish integral allocation model fractional flow model 
integral allocation model integral allocation model distinguish mixed pure strategies 
set pure strategies agent pure strategy maps stream exactly server 
mapping described matrix indicator variable stream chooses strategy 
mixed strategy defined probability distribution pure strategies 
denote probability agent maps stream server define load server allocation 
cost server observe random variables respect probabilities denote expected cost server 
stream expected cost stream server defined 
focus attention problem minimization maximum cost servers 
model define social cost max optimal cost social optimum opt minimum cost pure strategy opt min max minimum taken 
order formalize notion selfish behavior introduce nash equilibria server farms 
say probabilities define system nash equilibrium implies 
nash equilibrium characterized property incentive task change strategy 
model coordination ratio fixed set servers streams defined max opt maximum nash equilibria 
words coordination ratio specifies factor cost increase due selfish behavior 
fixed family cost functions fb worst case coordination ratio determines maximum coordination ratio possible server farms typically described asymptotic function study identify instances cost functions unbounded 
case investigate bicriteria coordination ratio opt denote value optimal solution assuming injection rates increased factor bicriteria coordination ratio defined smallest satisfying opt nash equilibria 
words ask factor injected load decreased worst case cost nash equilibrium exceed optimal cost original rates 
fractional flow model motivation model assume stream consists infinitely units carrying infinitesimal negligible amount flow 
unit behaves selfish way 
intuitively expect unit allocated server promising minimum cost account behavior units flow 
assuming infinitesimal small units flow come fractional variant integral allocation model model considered 
define model formally fractional model variables describe mapping streams servers take arbitrary real values subject constraint 
model distinguish mixed pure strategies particular load server simply defined equivalent ways define nash equilibrium model 
characterization wardrop see 
fractional allocation nash equilibrium implies 
coordination ratio defined analogously integral allocation model worst case coordination ratio denoted integral allocations negligible weights fractional flow model simplification aims model situation stream carries negligible fraction total load 
investigate details relationship fractional flow integral allocations streams tiny weights 
purpose define notion small streams 
assuming server farm identical servers homogeneous traffic come definition 
stream called small stream fraction weight 
case heterogenous servers heterogeneous traffic need slightly technical definition 
fix server farm set streams positive weights 
opt denote minimum maximum cost fractional flow allocations 
stream define scaled stream stream rate session length distribution 
observe implies weight scaled stream 
stream called small cost server opt assuming server gets assigned scaled stream define worst case coordination ratio restriction streams small 
min max versus average cost objective functions min max objective introduced shall briefly consider objective function investigated roughgarden tardos 
average cost objective function aims minimizing expected weighted average cost streams see related results 
technically cost objective function defined ave 
social optimum defined opt ave min 
total injected weight minimum taken vectors definition social optimum min max objective 
shall consider various coordination ratios average cost objective function similarly min max objective function 
particular average cost coordination ratios defined way min max model considered difference compares average social cost average social optimum 
worst case coordination ratios integral fractional small integral allocation objective function denoted respectively 
previous research model investigated introduced koutsoupias papadimitriou 
integral allocation model studied linear cost functions functions form 
motivation studying cost functions investigate price selfish routing simple cost functions 
koutsoupias papadimitriou give basic results worst case coordination ratio model tight bounds links 
results extended particular tight bounds model established 
results non linear cost functions known model 
roughgarden tardos see considered related general network model streams may required routed network source destination cost allocating stream edge routing path taken account 
focus mainly fractional flow model making assumption stream consists infinitely units behaves selfish way see fractional model described section 
network parameter minimized total latency experienced system 
showed latency functions edges linear average latency nash equilibrium times average latency optimal routing 
arbitrary nondecreasing continuous latency functions show existence nash equilibria total latency may arbitrarily bigger average latency optimal routing 
particular give bicriteria result total latency nash equilibrium twice total latency optimal routing double amount flow 
similar model investigated friedman studied amount flow system influence coordination ratios average cost objective 
friedman studies queueing model context 
furthermore roughgarden tardos consider integral allocations 
give example network bicriteria coordination ratio unbounded 
contrast fractional flow ratio bounded 
addition prove sufficient condition bicriteria coordination ratio bounded 
sufficient condition streams small adding stream server increases total latency factor fixed 
condition restricted pure allocations application requires families cost functions fixed 
results monotone cost functions fractional allocation theorem shows monotone cost functions behave nicely fractional allocation 
theorem server farm servers described monotone cost functions worst case coordination ratio fractional flow model 
theorem follows directly definition nash equilibria specifying servers positive flow nash equilibrium cost monotone cost functions implies nash equilibria social cost opt see lemma 
consequence theorem observe immediately separates fractional flow model different ratios investigated koutsoupias papadimitriou coordination ratio roughgarden tardos average cost coordination ratio 
ratios compare cost nash equilibria optimal cost different definitions cost 
sharp contrast theorem roughgarden tardos prove exist instances fractional flow monotone families cost functions average cost coordination ratio unbounded 
shows minimum total latency minimum maximum costs differ arbitrarily general cost functions 
context consider server farms maximum cost natural choice guarantees fairness efficiency customer agent simultaneously 
integral allocation turn integral allocation model 
say coordination ratio family cost functions fb bounded server farm servers cost functions fb exists set streams value worstcase nash equilibrium 
opt 
observe depend 
coordination ratio unbounded 
result complete characterization monotone families class functions cost functions bounded vs unbounded 
theorem coordination ratio monotone family fb cost functions bounded 
proof theorem shifted section 
notice characterization bounded vs unbounded coordination ratios applied server farms identical servers 
recall farms described families cost functions consisting single cost function 
observe family monotone cost functions identify minimum fulfills conditions specified theorem 
natural question coordination ratio depend fact analysis see proof theorem lemma shows coordination ratio log furthermore observe constant family cost functions assumed fixed 
conclude fixed family cost functions coordination ratio unbounded polynomially bounded number servers illustrate power theorem investigating examples 
consider families polynomial cost functions functions form 
fixed 
families pick 
conclude coordination ratio bounded 
contrast exponential cost functions cost functions additive increase load leads multiplicative increase cost 
true linear threshold functions form maxf 
corollary coordination ratio server farms polynomial cost functions bounded coordination ratio server farms identical servers exponential linear threshold cost functions unbounded 
sections shall discuss practically motivated examples families cost functions unbounded coordination ratios known formulas queueing theory describe example expected delay expected fraction rejections 
integral allocations negligible weights motivation considering fractional flow integral allocations models assumed essentially equivalent see 
want investigate relationship models closer 
recall coordination ratio nash equilibria small streams 
show result proof shifted section 
theorem monotone family cost functions fb coordination ratio small streams bounded coordination ratio bounded 
interestingly theorem separates fractional flow integral allocations negligible weights 
hand practical examples families cost functions waiting time erlang loss formulas results imply arbitrary small coordination ratios unbounded 
hand theorem implies worst case coordination ratio fractional model 
instances proving characterization unbounded coordination ratios pure strategies 
pure allocations negligible weights different fractional flow 
want point unbounded coordination ratios special phenomenon cost functions having pole unbounded derivative 
see practical example family cost functions erlang loss formula unbounded coordination ratio functions derivatives bounded 
proof theorems prove theorems single proof lemmas 
lemma proves sufficient conditions bounded coordination ratio second lemma proves necessary conditions 
lemma suppose server farm servers having cost functions fixed monotone family fb satisfying set streams worst case cost nash equilibria upper bounded opt 
proof 
fix arbitrary allocation nash equilibrium 
denote cost allocation 
show 
dlog 
opt 
opt 
observe dlog se 

denote total injected load 
denote load server biggest bandwidth optimal fractional allocation allocation minimum maximum cost servers assuming streams split arbitrarily 
loss generality assume server maximum load servers 
recall server server biggest bandwidth function fb nondecreasing nonincreasing exists optimal fractional allocation maximum load server 
way dlog 
dlog 
opt denote set servers 
pick server denote stream 
nash equilibrium property guarantees jx dlog 
opt furthermore opt dlog opt 
consequence max 
max 
dlog 
opt 
opt completes proof lemma 
ut prove sufficient condition unbounded coordination ratio 
observe negation property gives sufficient condition bounded coordination ratio specified theorem 
lemma chosen arbitrarily 
suppose server farm identical servers monotone cost function satisfying 
exists pure nash equilibrium small streams cost 
opt 
proof 
show property function implies 
consider negations statements observe implies set dlog consider server farm identical servers monotone cost function satisfying condition 
purpose contradiction assume exists 
opt nash equilibrium streams maximum weight 
exists 

assumption define nash equilibrium streams maximum weight cost 
opt 
consider streams identical weight assign servers cost server exactly 
number streams server allocation 
slightly change instance streams server break smaller streams weight weight easy see optimal allocation instance cost opt 
consider different allocations streams servers 
assign streams weight streams weight server remaining streams second server 
way server cost second server cost 
allocation defines nash equilibrium streams minimum weight incentive change strategy 
cost nash equilibrium 



opt clearly contradicts initial assumption 
opt nash equilibrium streams maximum weight 
completes proof lemma 
ut theorems follow immediately lemmas 
ut bicriteria coordination ratios surprising selfish routing lead dramatic cost increase cost function pole 
principle bicriteria measures informative filter extreme behavior cost functions look directly quality load balancing obtained selfish routing 
theorem shows unbounded coordination ratio implies poor worst case behavior bicriteria measures 
theorem shows monotone family cost functions bicriteria coordination ratios theorem consider server farm servers cost functions drawn monotone family fb coordination ratio unbounded bicriteria coordination ratio value small streams 
proof 
denote usual number streams assume 
ratio unbounded theorem implies exist fb 
assume identical servers bandwidth set identical data streams having weight specified 
define probabilities 
probabilities define nash equilibrium expected costs value 
fix server probability data streams assigned server case cost server 
streams weight total weight probability cost particular server max 

additionally events corresponding different servers pairwise disjoint 
observations estimate max max 


want show opt assume contradiction opt obtain 
opt inequality follows observing value opt value solution assign assume positive integer data streams server blowing data stream obtain 
assumption 
argument proof lemma implies 
plug obtain contradiction inequality 
servers identical data stream weight small case condition equivalent gives 
inequality true choice data streams small 
ut example proving bad ratio theorem server farm identical servers 
case easily show coordination ratio worst possible nash equilibrium worse mapping streams server course worse optimal allocation rates blown factor worse proof negative result gives construction nash equilibrium streams identical total injected load bandwidth single server 
coordination ratio poor extremely lightly loaded cases 
average cost objective functions discussed roughgarden tardos consider objective function different koutsoupias papadimitriou 
objective function aims minimize average cost 
investigate relationship different objective functions integral allocation 
recall coordination ratios average cost objective function denoted theorem monotone family cost functions 
bounded bounded 
furthermore bounded bounded 
proof 
fix monotone family fb ff jb bg cost functions 
show ratio family bounded coordination ratio bounded 
clearly bounded obtain theorem show bounded provided property 
fix nash equilibrium probabilities 
give upper bound ratio expected total latency probabilities hand optimal total latency hand 
wm denote vector random variables describing injected load server denote corresponding load vector optimal allocation minimizes total latency 
show exists define corresponds cost obtained assigning load fastest server 
arguments proof lemma obtain log log second inequality follows assumptions family cost functions 
third inequality needs explanation 
observe exists applying monotonicity cost function family obtain yields inequality 
consequence log bounded 
remains show unbounded coordination ratio implies unbounded ratio 
unbounded family cost functions satisfies lemma describe instance identical servers set small streams servers identical load optimal allocation nash equilibrium servers receives load server 
property show server load times average load cost server deviate arbitrary large factor optimal cost proves unbounded 
straightforward adaption argument shows unbounded condition fulfilled 
completes proof theorem 
ut want point property proven theorem non trivial 
general behavior objective functions quite different 
example fractional case roughgarden tardos give examples unbounded coordination ratio theorem shows 
results queueing theoretical cost functions koutsoupias papadimitriou asked investigate coordination ratio realistic cost functions form minf bg particular cost function describes expected waiting time delay queueing process injection rate service rate characterization bounded unbounded coordination ratios theorem immediately implies integral coordination ratios family functions unbounded 
resolves open problem 
want consider behavior cost functions motivated queueing theory details 
particular give section local exchange lemma simple greedy exact algorithm solving related fractional scheduling problem cost functions heterogeneous traffic 
queueing systems rejection studies concerned similar cost functions motivated queueing systems see order avoid discussions exactly right queueing model exactly right cost model expected waiting time expected system time introduce unifying concept monotone queueing functions 
family fb monotone cost function called monotone queueing function satisfies lim 
observe monotonicity implies 
assumption motivated fact expected waiting expected system time queueing process rejection goes infinity injection rate approaches service rate 
immediate consequence pole functions 
obtain corollary theorems 
corollary family monotone queueing functions recall instances proving unbounded coordination ratio constructed pure strategies 
bad instances bicriteria ratio seen mixed strategies 
motivates investigate randomness introduced due choice mixed strategies source bad bicriteria ratios 
theorem demonstrates bicriteria ratios poor case pure strategies 
theorem family monotone queueing functions 
suppose exists 
bicriteria worst case coordination ratio pure strategies lemma directly implies theorem 
lemma family monotone queueing functions 
assume servers bandwidths 
assume exists functions fulfill 
system opt maximum value nash equilibria assuming pure strategies 
gives lower bound bicriteria coordination ratio pure strategies proof 
define instance problem 
servers called slow 
fast server additional server bandwidth assume slow server holds small data stream weight fast server large data stream weight 
additional server hold data stream 
solution just defined slow server cost blowing streams fast server cost cost max observe definition monotone queueing functions value cost finite obviously opt cost 
define nash equilibrium instance 
put small data streams fast server possible fill server bandwidth precisely assign fast server total amount small streams 
observe small streams achieve total size note small achieve smaller value having assumption theorem guaranteed monotonicity function 
large stream assigned fast server exceeded bandwidth large stream put slow server 
large data stream assigned additional server 
argue just defined nash equilibrium 
small streams go fast server slow server small streams go fast server additional server remaining space additional server arbitrarily small particular smaller size small stream 
large stream go additional server slow server fast server exceed capacity fast server 
notice possible small remaining data stream go slow server fast server 
harm construction 
cost additional server nash equilibrium properties monotone queueing functions lim 
implies exists value nash equilibrium arbitrarily large particular larger cost 
monotonicity cost cost 
obtain opt cost cost ut theorem needs explanation 
example assume cost function waiting time worst case coordination ratio pure strategies 
hand system time coordination ratio 
cases total injected load needed construct example leads specified coordination ratios small 
appendix investigate closer show bound waiting time tight 
precisely prove result quite technical proof shifted appendix theorem consider integral allocation model cost function server waiting time 
bicriteria coordination ratio pure strategies model value log number servers 
summarizing pure strategies small total injection rate slowdown due lack coordination significant 
alternative bicriteria measure family monotone queueing functions interesting bicriteria measure 
natural question ask decrease bandwidths servers optimal assignment decreased bandwidths expensive nash equilibrium original system 
bw denote corresponding worst case bicriteria ratio 
turns functions queueing theory effect changing bandwidths larger effect changing injection rate 
fact functions show super linear scaling 

applying property determine bicriteria bandwidth ratio exactly 
theorem family fb monotone queueing functions super linear scaling bw number servers 
opt denote value optimum solution system bandwidths servers slowed factor prove lemma 
lemma fix arbitrary monotone queueing function consider server farm identical servers cost function exists nash equilibrium small streams opt proof 
assume identical servers bandwidth set identical data streams having weight specified 
define probabilities follows 
probabilities define nash equilibrium expected costs value 
fix server probability data streams assigned server case cost server streams weight total weight probability cost particular server max 
additionally events corresponding different servers pairwise disjoint 
observations estimate max max 

want show opt assume contradiction opt obtain opt inequality follows observing value opt value solution assign assume positive integer data streams server slowing server inequality continuity functions lim lim assumption rhs finite lhs infinity properties function exists small monotonicity 
contradiction 
ut proof 
theorem lemma implies show assume bandwidths servers 
observe assume server say solution load strictly greater mb done 
assumption see max assign data streams deterministically fastest server say max linearity expectation max 
max argue max 
assume contradiction server say 
obviously data stream say 
jx follows fact random variable jx assume smaller values random variable similarly jx value corresponds situation probabilities recall fastest server 
contradiction nash equilibrium property 

max 
super linear scaling obtain 
consider opt frac cost optimum solution fractional flow model system bandwidths servers reduced factor claim opt frac show argue optimal fractional solution fastest server largest load 
fix servers bandwidths loads servers optimal fractional solution 
easy observe super linear scaling obtain monotonicity property implies simple averaging argument server optimal fractional solution load fact just shown see fastest server bandwidth load shows opt frac finish proof observing opt frac inequality obvious 
ut want emphasize theorem gives tight results expected waiting time system time queueing systems 
follows fact show respective cost functions queueing systems obey super linear scaling 
queueing systems heterogeneous traffic implicitly assume homogeneous traffic streams general session length distribution 
practical studies show internet traffic far away homogenous 
assuming heterogeneous traffic take account different session lengths distributions 
investigate consequences heterogeneous traffic particular instance cost function 
pollaczek formula see describes expected waiting time queues 
observe general class queueing systems allows arbitrary service time distributions 
transform formula family cost functions describing expected time servers bandwidth parameters specify injected mix streams server expectation variance injected load 
suppose stream characterized weights corresponding expected load stream variance load respectively 
family cost functions defined follows remarkable fact parameters expected load variance aggregated independently simple linear fashion 
expected load injected server variance load details derivation family cost functions see appendix observe assume back homogeneous model identical session length distribution obtain monotone queueing function parameter 
consequently cost function family 
fractional flow model come different results 
recall homogeneous traffic 
theorem fractional coordination ratio cost function family unbounded 
ratio fastest slowest server bounded worst case ratio need technical tools proof theorem 
recall denotes ratio largest server bandwidth smallest 
local exchange lemma 
introduce tools 
consider problem 
servers non negative parameters 
data streams non negative parameters 
want solve fractionally linear program call lp 
min ij ij ij ij value variable ij represents fraction data stream assigned server show simple combinatorial algorithm solve lp 
simplicity assume 
note results extended case assume servers sorted pm qm sort data streams vn en 
perform greedy assignment setting ij violate constraint set ij set set ij greatest value constraint valid set 
lemma described algorithm solves lp optimally 
proof 
assume contradiction streams say fraction assigned server fraction assigned server assume fraction assigned server ij space fraction occupies server words contribution fraction objective function lp equal 
consequently fraction data stream reassigned server server fill space note just smaller positive fraction stream 
space left server space fraction stream occupy reassigned server reassign fraction stream server reassign fraction stream server server claim mean reassignment reduce value objective give contradiction 
equivalent rewrites obtain inequality written assumptions obviously true 
ut show tools just 
consider heterogeneous model cost function 
optimum solution fractional model characterized program 
min ij ij program equivalently rewritten program called min zb ij ij observe fixed linear program similar linear program lp 
similarity captured defining zb 
easily observe fixed value test feasibility program greedy assignment algorithm 
shown binary search solve program order servers decreasing values zb means increasing values bandwidths order data streams increasing values able run greedy assignment algorithm need know optimum value show knowledge order servers streams useful 
easily noticed fractional nash equilibrium costs server 
observation characterize worst case nash fractional equilibrium program 
max ij ij similar line arguments shows worst case nash equilibrium keep order servers increasing values bandwidths order data streams decreasing values fact proofs 
proof 
theorem upper bound 
assume bandwidths servers set data streams weights variances 
consider relaxation problem replacing data stream new data streams 
delete new problem instance data streams form 
value worst case nash equilibrium relaxed problem obviously smaller original problem 
value opt optimum solution relaxed problem greater original problem 
upper bound coordination ratio relaxed problem implies upper bound original coordination ratio 
relaxed problem 
define 
show opt bmg implies order data streams opt solution 
note extend local exchange lemma cases data streams 
order implies exists opt maps streams form subset servers fj mg 
assume server filled amount data streams weights server filled gap furthermore opt solution maps streams form servers denote amount variance received server mg 
observe assume false server fj mg 
just move fraction type stream server server cost server zero operation increases marginally 
reassign type streams evenly servers free space server decreases cost solution gives contradiction opt solution 
cost servers mg identical consequently waiting time server value opt analogously reverse order streams worst case nash equilibrium argue variances split servers nash property violated 
appropriate definition gap shows value nash mg completes proof upper bound 
lower bound 
show lower bound theorem assume servers data streams 
local exchange lemma show show analytical argument 
amount stream assigned server amount stream assigned server 

know opt nash solutions costs server 
write 
plugging values condition obtain consider function shown minimum equal opt de hospital rule prove fact 
easily show maximum gives 
obtain opt completes proof theorem 
ut light theorem conclude optimality fractional flow nash equilibrium special property homogeneous traffic parallel links 
servers parallel channels rejection assumed requests served regardless long wait service 
practice web servers reject requests overloaded 
simplicity assume server rejects requests service channels occupied requests disappear system 
case fraction rejected requests completely independent service time distribution 
words difference homogeneous heterogeneous traffic service model 
fraction rejected requests described erlang loss formula see giving family cost functions 
describing fraction rejected requests simplify notation simply consider function 
easy check family erlang loss functions monotone 
theorem immediately implies fractional coordination ratio 
corollary family erlang loss cost functions 
glance family erlang loss functions innocent impression 
functions continuous convex monotonically increasing 
corollary shows integral coordination ratio lim erlang loss family unbounded 
corollary family erlang loss cost functions 
intuitively phenomenon explained follows 
consider family functions erlang loss functions terms relative load 
observe lim max limit functions behaves extreme way cost increases unbounded factor 
behavior implies family erlang loss cost functions corollary immediate consequence theorem 
contrast monotone queueing functions section poor bounds coordination ratios erlang loss cost functions caused unbounded cost nash equilibrium consequence tiny close zero optimal cost 
result gives absolute cost nash equilibrium selfish routing 
theorem consider server farm servers bandwidths 
cost functions erlang loss families 
max bm log log 
nash equilibrium social cost 
bm proof 
suppose suppose maximum weight streams log log 
show nash equilibrium 
bm random variable describing injected load server simple averaging argument shows existence server server expected cost bq consider arbitrary server suppose exists 
nash equilibrium property gives jx jx bq bq 
furthermore observe definition cost function 
bound expected cost server pr 
bq pr 
bq pr estimate terms follows 
observe 
consequently bq bq bq bq bq bq bq bq bq bm furthermore upper bound maximum weight streams apply standard hoeffding bound see obtain pr bq log 
conclude max 
max bm completes proof theorem 
ut words theorem says total injected load constant fraction total bandwidth stream large weight streams log small fraction rejected requests bm denotes arbitrary constant 
conditions optimal allocation reject fraction packets 
account typical web servers open tcp connections simultaneously assumed quite large conclude cost selfish routing small absolute terms coordination ratio comparing cost optimal cost unbounded 
results important algorithmic consequences choice queueing discipline take account possible performance degradation due selfish uncoordinated behavior network users 
shown coordination ratio closed queueing systems unbounded 
true server farms reject requests case overload 
fundamental difference kinds queueing policies 
infinity pole delay selfish routing closed queueing systems general unbounded 
fact explicitely shown selfish routing closed queueing systems lead arbitrary large delay total injected load potentially served single server 
contrast fraction rejected requests selfish routing bounded function exponentially small number tcp connections opened simultaneously 
conclude server farms serve requests regardless long requests wait give reasonable guarantee quality service selfish agents manage traffic 
requests allowed rejected possible guarantee high quality service individual request stream 
typical practice rejecting requests case overload necessary condition ensure efficient service game theoretic measures 
beckmann mcguire winston 
studies transportation 
yale university press 
crovella bestavros 
self similarity world wide web traffic evidence possible causes 
proceedings acm sigmetrics pages 

tight bounds worst case equilibria 
proceedings th annual acm siam symposium discrete algorithms 
fred douglis anja feldmann balachander krishnamurthy jeffrey mogul 
rate change metrics live study world wide web 
proceedings symposium internetworking systems technologies 
usenix december 
anja feldmann anna gilbert polly huang walter willinger 
study role impact control 
proc 
acm sigcomm 
frank 
paradox 
mathematical programming study 
konig schmidt 
queues point processes 
berlin wiley chichester 
friedman 
generic analysis selfish routing 
manuscript 
gross harris 
queueing theory 
third edition john wiley sons new york ny 
kleinrock 
queueing systems 
volume theory 
john wiley sons new york ny 
lazar orda 
capacity allocation noncooperative routing 
ieee transactions automatic control 
lazar orda 
avoiding paradox noncooperative networks 
journal applied probability 
koutsoupias spirakis 
personal communication 
koutsoupias papadimitriou 
worst case equilibria 
proceedings th annual symposium theoretical aspects computer science pages 
lazar orda 
virtual path bandwidth allocation multiuser networks 
ieee acm transactions networking 
spirakis 
price selfish routing 
proceedings rd annual acm symposium theory computing pages 
motwani raghavan 
randomized algorithms 
cambridge university press new york ny 
orda rom 
competitive routing multi user communication networks 
ieee acm transactions networking 
papadimitriou 
algorithms games internet 
proceedings rd annual acm symposium theory computing pages 
papadimitriou 
game theory mathematical economics theoretical computer scientist tutorial 
proceedings th ieee symposium foundations computer science pages 
papadimitriou yannakakis 
complexity bounded rationality 
proceedings th annual acm symposium theory computing pages 
park kim crovella 
relationship file sizes transport protocols self similar network traffic 
proc 
ieee international conference network protocols pages 
paxson floyd 
wide area traffic failure poisson modeling 
ieee acm transactions networking 
roughgarden tardos 
bad selfish routing 
proceedings st ieee symposium foundations computer science pages 
roughgarden 
scheduling strategies 
proceedings rd annual acm symposium theory computing pages 
roughgarden 
designing networks selfish users hard 
proceedings nd ieee symposium foundations computer science pages 
roughgarden 
unfair optimal routing 
proceedings th annual acm siam symposium discrete algorithms 
steinberg 
prevalence paradox 
transportation science 
wardrop 
theoretical aspects road traffic research 
proceedings institution civil engineers part ii volume pages 
upper bounds pure strategies proof theorem recall formulation theorem 
proof quite technical 
theorem consider integral allocation model cost function server waiting time 
bicriteria coordination ratio pure strategies model value log number servers 
proof 
recall cost function server bandwidth called service rate waiting time formula assume number data streams 
observe maximum cost servers solution variables rescale service rates servers maximum service rate 
means replace original service rate observation server equivalent rescaling results changing objective value replacing rescaled instance problem particular denote new rescaled values data stream weights service rates 
ij denote follows 
fix value parameter log constant specified 
recall opt means optimum solution system blow weights fix opt solution value solution opt 
feasible solution problem blow done 
define parameter opt classify servers follows 
servers service rate belong group set servers service rate define group 
clearly log 
data streams assigned opt solution servers group define group data streams 
easily see data stream fix nash equilibrium say define fi ij set data streams assigned nash solution server fj set servers having data stream set 
denote cost server nash solution 
abbreviate 

direct application lagrange mean value theorem gives 
lemma exists number 

claim log 
proof 
simple expression manipulation see implies kb kb observe show equivalent showing derivative 
non decreasing prove kb kb suffices prove kb kb multiplying sides inequality kb get kb kb kb kb inequality equivalent kb kb applying log rewrites kb log kb log log bs log factor sides facts log upper bound left hand side inequality obtain log 
log log log log bs log able prove inequality claim holds 
log log recall upper bound left hand side inequality obtain log 
log log log bs log factor log sides upper bound left hand side applying gives applying upper bound lhs factoring implies equivalent 
true choose 
ut distinguish cases proof depending value case 
show main fact case 
lemma absolute fixed constant server proof 
proof induction induction base 
show statement 
assume contradiction server data stream say server definition group maximum service rate server group ideas rest proof show data streams group assigned servers 
gk occupying space assign rest streams 
way basically delete small servers group details follow 

define bin server 
gk just saying bin size capacity notice opt simple calculation shows claim fixed constant 

ii 
claim holds assumptions proof 
part 
consider set say streams placed opt server 
gk obviously show inequality equivalent notice right hand side maximized minimum 
recall log 
minimum value holds holds recall 
easy check inequality holds provided 
summing streams 
tk obtain claim 
part ii 
know server speed 
definition opt know sum sizes data streams assigned opt solution server jg recall number servers 
inequality claimed part ii definitely hold show bin size fastest server speed inequality equivalent log rewritten sm log log plugging proof part sm log log easy observe asymptotically 
fact suffices take 
proves second part 
ut assume claim claim 


simple counting argument server say 
gk nash solution load implies assign stream server new waiting time server lemma fact function 
increasing easily see server allows write inequality follows fact server group 
definition gives show 
inequality equivalent holds iff equivalently 
course true log 
having knowing obtain induction base proof assumed just proved moving stream server gives waiting time value strictly contradicts definition nash equilibrium 
induction step 
assume claim holds show holds assume contradiction server definition server data stream say definition sets opt solution total sum weights streams 
tk assigned nash solution servers 
gk 
averaging argument implies server say 
gk load streams formally fi ij set streams assigned server stream set assigned server induction assumption done 
streams set server load max upper bound second expression max formula estimates respectively facts 
gk log 
put stream server obviously 
waiting time server putting stream load server putting stream note 
increasing function 
lemma 
observe invoke claim fact 
gk claim putting pieces implies 
obtain inequality inequality follows observing putting stream server server waiting time server contradiction nash property 
finishes proof induction step 
ut lemma server 
server say streams assigned nash solution course 
observe set servers stream assigned 
see server means log log recall log 
log log opt get opt log proves theorem 
case 
proof case take account fact arbitrarily small may cause problems want upper bound opt similarly case show fact case 
proof fact similar main steps proof lemma details quite different 
lemma absolute fixed constant server proof 
proof induction induction base 
show statement 
assume contradiction server data stream say server definition group stream placed opt server group speed say 
opt gives equivalent obtain 
define bin server 
gk saying bin capacity simple calculation shows claim fixed constant 

ii 
claim holds assumptions proof 
part 
consider set say streams placed opt server 
gk implies show inequality equivalent inequality equivalent easy see prove inequality suffices show rewrites log inequality surely holds 
proves 
summing streams 
tk obtain part claim 
part ii 
assume sum sizes streams assigned opt solution server estimate jg recall number servers 
inequality claimed part ii definitely hold bin size fastest server speed inequality equivalent log rewritten sm log ss log log prove inequality comparing lhs rhs term wise 
comparing terms gives sm ss log rewrites cm log inequality holds 
compare second terms lhs rhs leads log log equivalent cm inequality obviously holds 
proves second part claim 
ut assume claim claim 


counting argument server say 
gk nash solution load gives assign stream server new waiting time server lemma function 
non decreasing see server allows write inequality follows server group 
definition gives show inequality equivalent hold equivalently inequality rewrites true log 
applying obtain induction base proof assumed just showed moving data stream server server gives waiting time server value strictly contradicts definition nash equilibrium proves induction base 
induction step 
assume claim holds show holds assume contradiction server definition server stream say fix server 
gk fk kg 
definition opt solution total sum say sizes streams assigned opt server fulfills implies simple averaging argument implies server say 
gk load streams 
tk 
sum sizes streams strictly greater argument false 
formally fi set streams assigned server stream set assigned server induction assumption waiting time server done 
streams set server load inequalities estimate follow observing 
put stream server obviously 
stream assigned opt server say 
similarly previous arguments load server putting stream considerations waiting time server putting stream note 
non decreasing function 
lemma 
observe prove 
derivative 
non decreasing recall 
convex function suffices prove 
prove 
factor divide sides get 
rewritten inequality equivalent 
observe increase third term lhs inequality value lhs increases 
prove factor sides obtain replacing term replacing recall second third terms increases lhs increase lhs replacing recall second third terms gives log replace get equivalent suffices show final inequality easily checked hold 
proves 
putting implies putting stream server server waiting time server contradiction nash property 
finishes proof induction step 
ut lemma server 
server say streams assigned nash solution 
observe set servers stream assigned 
see server means log fact slightly greater log increase opt log recall log 
log log opt get opt log proves theorem 
completes proof theorem 
ut derivation cost function family consider single queue 
denote injection rate expected number customers time unit expected number requests time unit 
denote service rate number processed data units time unit 
fix service time session length distribution 
denote random variable describing service time fixed customer requested data units request session length 
known pollaczek equation states var re expected waiting time queue server steady state 
rewrite formula different notation enable aggregate streams simple linear fashion 
denote random variable describing number injected units load fixed time interval length 
define re var var words denotes expectation injected load requested data units time unit variance load 
non standard notation obtain var describe streams aggregated cost function 
stream denote expected load injected time unit denote variance random variable 
furthermore denote fraction stream directed considered server 
example imagine single request directed considered server probability requests poisson stream obtained aggregating streams way expected load variance expected waiting time expected server simplicity notation drop factor define cost considered server allocation find list technical reports max planck institut fur informatik 
available anonymous ftp ftp mpi sb mpg de directory pub papers reports 
reports accessible www url www mpi sb mpg de 
questions concerning ftp www access please contact reports mpi sb mpg de 
copies necessarily free charge ordered regular mail mail address 
max planck institut fur informatik library attn 
anja becker saarbrucken germany mail library mpi sb mpg de mpi fast integer programming fixed dimension mpi subramanian girth treewidth mpi li seidel flexible versatile studio synchronized multi view video recording mpi seidel acquisition mirroring objects mpi jeong seidel neural meshes statistical learning methods surface reconstruction mpi jaeger representation theorem applications measure selection noninformative priors mpi maier compositional circular assume guarantee rules sound complete mpi selfish traffic allocation server farms mpi tamaki linear time heuristic branch decomposition planar graphs mpi bollobas eldridge conjecture bipartite graphs mpi sanders soon published mpi tamaki alternating cycles contribution strategy tour merging traveling salesman problem mpi tamaki dietzfelbinger probability rendezvous graph mpi dietzfelbinger random graphs simple hash functions mpi polzin improving linear programming approaches steiner tree problem mpi random knapsack expected polynomial time mpi sanders scheduling traffic allocation tasks bounded mpi sanders asynchronous parallel disk sorting mpi martens seidel perceptual evaluation tone mapping operators regard similarity preference mpi kautz lang seidel tutorial notes acm sm framework acquisition processing interactive display high quality models mpi talbot atomic set constraints projection mpi ganzinger symposium effectiveness logic computer science honour moshe vardi mpi sanders factor algorithm communication clusters smp nodes mpi performance heuristic approximation algorithms uncapacitated facility location problem mpi polzin kettner exp lab tool set computational experiments mpi sanders practical minimum scanning tree algorithm cycle property mpi incrementally maintaining number cliques mpi polzin sub graphs small width solving steiner problem mpi seidel framework acquisition processing interactive display high quality models mpi choi seidel linear sided stability mat weakly injective domain mpi kautz seidel efficient light transport precomputed visibility mpi kautz seidel framework acquisition processing transmission interactive display high quality models web mpi kautz seidel image reconstruction spatially varying materials mpi schulz proceeding second international workshop implementation logics mpi resolution decision procedures universal theory classes distributive lattices operators mpi de translation resolution proofs higher order natural deduction type theory mpi experiments iterative improvement algorithms completely hypercubes mpi maier set theoretic framework assume guarantee reasoning mpi superposition chaining totally ordered divisible abelian groups mpi polzin extending reduction techniques steiner tree problem combination alternative bound approaches mpi polzin partitioning techniques steiner problem mpi polzin steiner trees minimum spanning trees hypergraphs mpi hoffmann kettner adaptable extensible geometry kernel mpi implementation planar polyhedra mpi meyer directed single source shortest paths linear average case time mpi approximating minimum size connected networks mpi choi seidel hyperbolic hausdorff distance medial axis transform mpi kobbelt bischoff schneider geometric modeling polygonal meshes mpi kautz bump map shadows opengl rendering mpi short vectors planar lattices continued fractions mpi mehlhorn frames technique making lines look segments mpi mehlhorn schirra generalized improved constructive separation bound real algebraic expressions mpi low contention depth scheduling parallel computations synchronization variables mpi powerful heuristic telephone gossiping mpi mller branch cut algorithm optimal solution side chain placement problem 
