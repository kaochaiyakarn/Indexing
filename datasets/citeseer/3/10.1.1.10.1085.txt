position ram se reflective approach dynamic software evolution peter tom programming technology lab vrije universiteit brussel pleinlaan brussel belgium centrum voor wiskunde en informatica box nl gb amsterdam netherlands 
solution allows systems remain active evolving 
approach goes principle separated concerns steps 
step sure system evolvable concerns cleanly separated 
propose aspect mining static refactorings separating concerns 
second step allow concern evolve separately 
preliminary reflective framework allows dynamic evolution separate concerns 
problem statement intrinsic property successful software application need evolve 
order keep existing application date continuously need adapt 
usually evolving application requires shut updating runtime generally possible 
cases pale 
unavailability critical systems web services telecommunication switches banking systems unacceptable financial consequences companies position market 
redundant systems currently solution available solve problem 
main idea provide critical system duplicate able take functions original system available 
solution proved disadvantages 
redundant systems require extra management concerning software version installed duplicate 
second maintaining redundant systems switching hard underestimated 
happen instance switching mechanism fails 
redundant switching mechanism switching mechanism switching switching systems 
duplicate software hardware devices may involve severe financial issues 
principle separation concerns provide improved flexible solution problem 
applications developed principle mind implement concern separate entity 
entities adapted substituted affecting rest application 
depending programming paradigm entity function data type class component example aspect employ aspect oriented programming techniques 
application decomposed cleanly separated entities evolution boils addition removal modification entity 
activities performed application running call evolution dynamic software evolution 
practice principle separation concerns easy achieve 
turns matter application decomposed modular entities functionality cross cuts modularisation 
phenomenon known tyranny dominant decomposition 
consequence cross cutting functionality called concern evolved separately affects entities application 
techniques exist addressing problem dominant decomposition considered static supporting dynamic evolution 
effect provide model cross cutting concerns fixed application compile time 
solve issue dynamic techniques investigated 
prototypes techniques exist lack dynamic properties practical experience 
separated concerns currently existing applications match principle separation concerns 
serious problem want allow evolve dynamically 
order cope problem investigate techniques able discover cross cutting concerns existing code techniques able restructure code modularised 
aspect mining research domain aspect mining concerned identification cross cutting concerns existing applications 
research early stages prototype tools developed support developers identifying cross cutting code 
tools semi automatic means require form input developer 
advanced tools able identify aspects human intervention appearing 
aim study techniques purposes 
particular shortcoming techniques identified take account dynamic behaviour application consideration 
order evolve application dynamically important know parts weakly strongly connected communication patterns occur frequently impossible current day aspect mining techniques 
considering extending capabilities study observe running application infer recurring communication patterns 
object aspect oriented refactoring cross cutting concerns identified need restructure application order modularised concerns 
refactoring techniques proposed allow modify internal structure application preserving behaviour 
possible refactorings appropriate object oriented features separate concerns cleanly 
concerns may cross cutting aim investigate refactorings restructuring ordinary object oriented application aspect oriented 
may involve extending existing refactoring techniques defining completely new refactorings specifically targeted aspects 
preliminary steps direction taken 
dynamic software evolution dealing modularized applications applications cross cutting concerns want allow module evolve separately 
section reflection framework permit 
reflective systems reflective system able reason computations computations 
permitting system composed levels base level housing base computations metalevel housing 
levels said causally connected 
means base level point view application access representation metalevel metalevel point view change representation affect base computations 
depending part representation accessed part describing structure program part describing behavior reflection said structural behavioral 
illustrates causal connection base metalevel shows order change behavior structure base level application 
left part shows architecture certain application cleanly separated entities base level 
metalevel houses representation application 
application order reason introspection 
manipulations representation introspection application self evolve 
center picture shows new entity added metalevel representation application 
right picture shows propagation metalevel change base level changing application behavior structure 
approach update separated entities system having switch system allow dynamic evolution 
issues solved order 
fig 

dynamically updating entity metalevel manipulation 
evolution framework need platform provides structural behavioral reflection runtime allows dynamic composition meta entities 
step entities aspects 
need structural reflection runtime going experiment smalltalk 
behavioral reflection part added ideas partial behavioral reflection exposed materialized reflex platform java 
plan inspire event aspect oriented programming pdf regards dynamic aspect composition facilities 
targeted behavioral issues reflex underlying ideas adapted deal structural changes 
definitely retain idea global monitor controlling application selective hooks base applications 
long structural changes intra entity stay locally inside certain entity straightforward allow 
inter entity changes things obviously get complicated keep track inter entity dependencies 
issue investigate 
version framework plan apply layered architecture allow modify behavior running application running 
doing instrument running application calls monitor point communication entities occurs 
monitor keep track communication order possible substitute certain entity 
holds representation application 
execution monitor passes control concerned entities representation making presence unnoticeable 
illustrated 
changing entity monitor queue calls old entity order send new place 
approach implies evolvable entity referenced monitor monitor keeps track entities inter entity relations 
runtime api order evolve application user change application representation monitor 
extent runtime api included user interact line fig 

runtime evolvability means layered architecture inter entity communications left indirected monitor right 
monitor 
functionalities api include addition removal modification system entity aspect functionality 
adding new entity done writing code registering monitor 
removing entity complex sure entities dependent entity removing 
case programmer warned 
certain entity needs modified write new entities code tell monitor new entity old old referenced system entity 
case difficulties arise able transfer state entity 
formal definition behavior established order avoid conflicts 
validation opening perspective research allow application evolve dynamically allowing composing entities evolve dynamically 
deliberately restrict specific entity class sun jvm api consider entities kind 
mentioned entities functions data types classes aspects 
ambitious perspective try get close possible step step approach 
step consider applications aspect oriented technology 
applications typically modularized classes aspects 
evolve aspects applications 
easiest entities evolve base application entities 
focus evolution class entities 
harder challenge application direct knowledge entities 
widen field action programming paradigms objectoriented ultimate goal employ approach existing programming paradigms 
time spent representation application monitor 
done dynamic evolution capabilities program easily follow 
step solution allowing systems evolve dynamically 
step application cross cutting concerns removed modularized 
proposed aspect mining static refactoring techniques detect separate cross cutting concerns respectively 
second step modularized application controlled metalevel monitor full reflective capabilities 
monitor merged ideas partial behavioral reflection dynamic capabilities smalltalk language 
allows application evolve dynamically 
application programming style object oriented aspect oriented long modularized 

connor practical reliability engineering 
th edition edn 
wiley 
dijkstra structure multiprogramming system 
communications acm 
tarr ossher harrison stanley sutton degrees separation multi dimensional separation concerns 
proceedings st international conference software engineering ieee computer society press 
ossher tarr hyper multi dimensional separation concerns java 
proceedings nd international conference software engineering limerick ireland 
szyperski component software object oriented programming 
addison wesley 
kiczales hilsdale hugunin kersten palm griswold overview aspectj 
proceedings european conference object oriented programming lecture notes computer science 
volume springer verlag aspectj org 

ak sit gan aspect oriented programming composition filters 
demeyer bosch eds object oriented technology ecoop workshop reader springer verlag 
alonso gross just time aspects efficient dynamic weaving java 
proceedings nd international conference aspect oriented software development acm press 
douence fradet framework detection resolution aspect interactions 
proceedings acm sigplan sigsoft conference generative programming component engineering 

griswold kato yuan tool support managing dispersed aspects 
technical report cs university california department computer science engineering 
kiczales overcoming prevalent decomposition legacy code 
proceedings icse workshop advanced separation concerns toronto canada 
de moor slicing refactoring eclipse 
technical report oxford university computing laboratory 
breu krinke aspect mining dynamic analysis 
gi trends der gesellschaft informatik 
volume bad germany 
gibson pollock automated mining desirable aspects 
technical report department computer information sciences university delaware newark de 
mens mining aspectual views formal concept analysis 
submitted workshop source code analysis manipulation scam 

fowler refactoring improving design existing code 
addison wesley 
refactoring aspect oriented software 
net 
erfurt germany 

noy cointe partial behavioral reflection spatial temporal selection reification 
crocker steele jr eds proceedings th acm sigplan conference object oriented programing systems languages applications oopsla anaheim california usa acm press acm sigplan notices 
