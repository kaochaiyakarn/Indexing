modeling languages syntax semantics stu part basic stu david harel bernhard rumpe august motivation rst planned series parts multitude concepts surrounding proper de nition complex modeling languages systems software confusion causes 
particularly relevant case standardized uml refer quite extensively proceed 
intention discuss clarify notions involved de ning modeling languages 
main theme distinction syntax semantics nature purpose usage style various means de ning dealing 
underlying exposition dichotomies textual vs visual languages structural vs behavioral speci cation requirements vs system models 
hope useful language designers tool vendors educators 
standardization uni ed modeling language uml uml large complex collection diagrammatic notations object oriented modeling analysis currently ongoing vivid discussion semantics 
omg responsible standardization uml semantics language undergoing extensive investigation 
large amount theoretical available discusses subsets adaptations uml see bm goal giving uml precise semantics extracting results 
useful important needs carefully assessed 
start authors quite di erent things mind term semantics 
second implicit assumptions uence de nitions results 
di cult compare papers written semantics uml comparison take account subsets notation dealt assumptions kind systems intended relationships constructs treated levels detail de ning language notations representations papers 
situation major motivation decision write papers 
undoubtedly multitude concepts surrounding proper de nition complex modeling languages 
feel large extent confusion concepts really mean crucial marginal understood needs know needs 
occurs uml popular growing number followers true approaches modeling 
set try clarify notions involved de ning modeling languages 
notions come avors basic advanced really hard nuts crack 
main theme series papers distinction syntax language notation semantics meaning 
quite di erent nature de nitions di erent purposes styles usage 
discuss issues arising adoption di erent variants semantics bene ts drawbacks 
notions unfold repeatedly relate duality structure behavior di erences textual symbolic languages visual diagrammatic ones 
clarify di erence requirements system system implementation model example speci ed su cient detail enable model execution prior actual implementation 
series organized parts 
constitutes part basic stu 
deals basic components language syntax semantics 
included semantic domain semantic function 
discuss representation components possible levels formality intended audience 
illustration simple examples arithmetic expressions basic programming languages data ow diagrams 
interesting question arises exactly place constraints called semantic conditions 
part ii advanced stu address number issues arise complex circumstances dealing composite languages different separately de ned sublanguages di erent parts modeling having multiple semantic domains mappings 
part iii really hard stu discuss di cult complex cases uml illustrative example 
addition di erent notations sublanguages di erent things give put simply means di erent notations thing syntax allows di erent views model time 
papers special ort address feel central important issues clear direct fashion 
claim story control answers done best 
hope papers help clarify issues surrounding language de nition language designers authors educators tool vendors may nd useful virtue care taken attempt spell issues 
syntax said distinction notion information syntactic representation data medium transport store information 
general agreement literature data communicate needs interpretation extract information 
interpretation mapping assigning meaning legal piece data 
notions mixed major source confusion 
hand piece information may variety pieces data 
example june th day rst spring second millenium denote day di erent ways 
hand piece data mayhave meanings may denote di erent information di erent people di erent applications 
distinguish syntax semantics shall discussing detail 
data serves communicate store information 
people natural languages communicate machines machine readable languages 
great variety data forms spoken written words natural languages arti cial ones morse code ag signs great variety machine communication media programming languages hardware description languages 
partners communication rst agree communication language xes set data communicated 
language consists syntactic notation syntax possibly nite set elements communication meaning semantics 
denote language generically various terms syntactic elements di erent kinds languages words sentences statements diagrams terms models clauses modules general term expression 
languages complex expressions constructed basic ones special composition mechanisms 
example language arithmetic expressions additional function foo bnf grammar main composition rule hexpi hexpi hexpi hexpi hexpi foo hexpi hexpi basic expressions language arithmetic operations function symbol foo symbols de ning numbers variables 
lead graphical diagrammatic languages central concerns papers example data ow diagrams 
sample expression language sample diagram depicted 
mult add div sample data ow diagram data ow diagrams popular dem appeared di erent versions extended ways various approaches 
include object oriented proposals omt rbp room 
basic constituents data ow diagram nodes denote computational components add 
nodes equipped input channels output channels communication data node environment components takes place 
channels may typed connected directed data ow links style output channel fed input channel 
components inputs act constants output act sinks 
data ow diagrams composable special nodes describe input output channels diagram leading environment component described diagram 
textual languages symbolic spirit basic syntactic expressions put linear sequences 
iconic languages basic expressions small pictorial signs refer elements visually depict 
languages called diagrammatic graphical 
iconic language intuitive textual confusing icons abundance 
reason languages composition mechanisms taken textual languages linear horizontal vertical proximity decreases language visual appeal 
useful visual diagrammatic languages topological geometric notions basic expressions example lines arrows closed curves boxes composition mechanisms involve connectivity exclusivity 
see har 
despite arguments diagrams dij languages great help software development 
theoretical point view principal di erence textual diagrammatic languages 
unfortunately practice proves harder cope diagrammatic languages especially comes need rigorous formal going return 
term syntax refer notation language includes diagrams 
syntactic issues focus purely notational aspects language completely disregarding meaning 
meaning language described semantics 
interesting note general computerized tools allow manipulate semantics directly 
screen syntactic representation 
holds machine internal representation called syntax meta model 
example programming language rigid syntax processable compiler 
attempt stretch syntax turn disastrous 
example read written language input commands form input chances result kind syntax error 
course hope address computer please read value input getting value 
result long string obscure error messages 
true nice instructions ones nd recipes pleasant terse impersonal equivalents 
true strive computers possible 
far computers understand free owing natural language english formal concise rigid set syntactic rules essential 
algorithm written typical programming language 
intended meaning program obvious calculates prints sum natural numbers input course authors intend program mean 
computer people read print program ordinary programming language semantic interpretation told intended meaning programs 
done carefully devised semantics assigns unambiguous meaning syntactically allowed phrase programming language 
syntax worthless 
severe possible reading particular point equal program check 
says keywords print read meaning english 
program segment means erase computer entire memory change values variables zero output hell programming languages 
says stands assign denotes addition 

meant language designer probably chose keywords special symbols intending meaning similar accepted norm 
computer assumptions 
useful computer engineering discipline language textual diagrammatic come complete rigid rules prescribe allowed form syntactically formed program rules just rigid prescribe semantics 
semantics semantic domain expressions communicate information 
nice communicating participants interpreted expressions language exactly way 
agreement onthe meaning language important sociological process communicated data worthless 
semantic de nition language consists parts semantic domain denote generically sl simply confusion semantic mapping syntax semantic domain denoted ml simply language composed described explain 
semantics language tells meaning expressions 
meaning element de ned domain 
language syntax semantics notation semantic semantic domain mapping structure language example meaning arithmetic expression language hexpi number 
semantic domain hexpi 
semantic mapping associate number expression language formally hexpi semantic mappings de ned inductive fashion providing meaning complex expressions language terms meanings simpler understood expressions 
situation occurs semantics de ned formally explained informally 
language arithmetic expressions hexpi de ned earlier quite natural standard mathematics basis mapping 
example obvious mapping symbol mathematical operation addition 
sense giving meanings consistent accepted conventions principle give meaning 
strange may speci ed expression means exponential binomial 

case data ow diagrams clear appropriate semantic domain 
properties really described data ow diagram 
structure possible ow relationships computational components diagram important things trying capture behavior 
common misconception world system modeling languages take semantics synonym behavior 
behavior structure system important views thereof represented syntactic concepts need semantics 
behavioral aspects usually obvious harder de ne properly languages focusing structure er diagrams databases class diagrams uml need semantics know exactly de ned 
deciding semantic domain amounts deciding kinds things want language express 
example semantics data ow diagrams de ned ways 
describe structure case semantics prescribe white box view structure enclosing component data ow links show information ows 
allows hierarchical decomposition system functionality said meant data ow system behaves runs executes progresses 
case semantic domain refer behavior 
alternatively want describe actual behavior data ow diagrams new questions arise 
talking possible behavior happen happen 
computational component memory 
nondeterministic react di erent ways input 
component allowed react partial input emitting partial result 
results sent reaction single input 
interested tracking causality input output trace messages su cient 
need components greedy emit messages spontaneously 
bu er communication lines components storing unprocessed messages messages lost unprocessed 
di erent answers questions lead variety quite di erent kinds semantic domains behavior traces hoa trace trees maz input lt streams stream processing functions bdd 
simple case data ow network deterministic reacts complete sets inputs memory 
usually su cient adopt function inputs outputs semantic domain io func data ow example de ned relation input output pairs io func io rel og mean pairs input may exist insisting determinism 
extending pairs nite sequences denoted allows talk history io hist determine latest output input output pair require entire input history latest input 
semantic domain set traces inputs outputs observed interleaved manner io trace fx want components respond input exactly output determine output component history semantic domain io hist len len explained bdd traces relations semantic domain di cult properly de ne composition data ow diagrams 
alleviate stream processing function io stf bdd 
mapping input traces output traces allows specify components history 
example making subtle change semantic domain order improve convenience de ning semantic mapping notation 
worth emphasizing semantic domain target mathematical function contain possible meanings syntactic expressions 
want semantics data ow diagram function semantic domain set functions want relation semantic domain set relations 
formally cases need de ne semantic domain io func io hist denotes powerset construction 
write parentheses pio func 
semantic domain taken lightly speci es concepts exist universe discourse 
abstraction reality describing important aspects systems interested developing 
prerequisite comparing di erent semantic de nitions 
explicit de nition semantic domain crucial 
semantic domain de ned describing meaning notation de nition semantic domain normally independent notation 
allows reuse semantic domain notations 
describe semantic domain 
done varying degrees formality asthe brief examples world arithmetic expressions diagrams illustrate 
jumping moment complex example shall uml note de ning semantic domain far simple matter 
de nitely involve combinations numerous kinds elements messages states values variables boolean values conditions obvious way de ne complex semantic domain result precise clear readable 
uml descriptions literature detailed comes syntax de ning semantic domain di cult usually done informally 
best written documents uml scatter information semantic domain entire description 
unfortunately confusion exists syntax semantics worse fact need syntactic representation semantics 
properly de ne semantic domain need kind language 
discussed 
semantics semantic mapping syntax semantic domain nal step de ning semantics relate syntactic concepts semantic domain 
syntactic creature mapped semantic element 
explained earlier important say explicitly clearly syntactic operator arithmetic expression mapped addition operator arithmetic meaning expression number numbers 
reader underestimate importance de ning mapping particular example 
mapping explained informally examples plain english 
regardless degree formality representation semantic mapping function ways assigning semantics language arithmetic expressions hexpi data ow diagrams de ned 
chosen semantic domain de ne semantic mapping hexpi giving expressions hexpi standard interpretation arithmetic 
basic cases arithmetic constants variables 

variable assignment environment meaning told current value variable adopt simply setting variable having handled basic cases de ne inductive cases expressions contain simpler expressions 
expression form subexpressions hexpi de ne clarify de nition maps symbol operation plus 
reader notice di erent font syntactic language mathematical symbol 
obviously seeing kind de nition looks obvious 
extremely important especially functions don interpretation 
case function foo part syntax hexpi de nitely needs de ned 
choose foo identi es foo exponentiation 
de ned foo foo redundant identical function 
turning data ow example deterministic components may choose deterministic history function represent behavior data ow component 
describe nite nite sequences rst de ne basic components diagram add component 
want add depict pointwise addition sequences 
de ne function add stating pair input sequences 
min add extended nite histories obvious way 
note de nition means chosen allow inputs channels arrive di erent times implicitly modeling bu ers data ow links 
furthermore talk time explicitly allowing computation component take time process input 
modeled add greedy component semantics prescribes sooner process input stimulation 
de ne semantics component data ow diagram constant continuously emitting number 
having de ned basic semantics way de ne way meaning composite diagram derived meanings constituent parts 
example compose semantics structure depicted div mult add elementary algebra seen satisfy seen semantic de nition syntactic construct built semantic de nitions construct constituents 
done general way operation arithmetic expression call compositional semantics allows compose semantics meaning composite creature meanings parts see old 
compositionality highly desirable informal level actual code 
unfortunately subtle problems pure blackbox compositionality 
notion components focuses composition 
discuss graphical diagrammatic language widespread class diagrams shall call 
central language specifying structure object oriented methods particular main structure language uml 
class diagrams quite widely studied attempt provide precise semantics fbs 
despite attempts subtle issues general agreement example precise di erences aggregation composition 
getting unresolved issues illustrate structural description language receive semantics 
sample expression language depicted 
simple diagram contains classes boxes associations regard undirected name indicates direction 
city suburb runs mayor lives sample class diagram proper semantic domain class diagrams contain snapshots running system diagram interpreted set possibilities object structures 
structure frozen situation time system execution 
object store containing sets objects classes example 
class diagrams exible extensible xed triple obj city obj suburb obj mayor similar introduce set object stores os retrieval functions objects respective classes city os city suburb os suburb class diagrams talk explicitly behavior intended focus structural issues 
composition strong aggregation features impose behavioral restrictions 
dealing concentrate structural aspects discuss behavioral issues hcd part iii series really hard stu part 
mayor os mayor approach need say explicitly objects look true identity 
course object identity easily added obtaining detailed implementation oriented semantics class diagrams 
kind approach associations objects introduce functions runs os obj mayor os obj city lives os obj major obj city obj suburb obj suburb abstractness means example decide information connections derived objects stored identi ers elements store representing associations 
constraints associations impose number restrictions allowed object stores 
example os arbitrary object store require city exactly mayor running runs os mayor os denotes projection second argument 
formally language class diagrams gets meaning function cd os os cd cd satis es restrictions imposed class diagram cd 
note functions city runs play dual role context hand representations syntactic concepts context semantic domain 
hand auxiliary functions de ne actual semantic mapping cd 
representation elements language de nition syntax semantic domain semantic mapping need representation 
rigorous readable mechanisms necessary order de ne represent elements appropriately 
subsection discuss intended audience de nitions wish concentrate issue satisfactory rigorous representation 
conventional textual languages syntax described employed set characters sequences characters legal allowed 
typically rst group characters words arrange words sentences precise grammatical rules 
language consists set legal sentences 
stated earlier ways principal di erence textual visual diagrammatic languages 
case far easy words sentences 
languages textual visual layers de nition 
textual languages nd clearly de ned separated layers standard de ning techniques 
set characters forms alphabet 

characters grouped words denoting keywords numbers delimiters lexical layer typically de ned regular expressions 

third layer groups words sentences usually context free grammar 

fourth nal layer constrains sentences imposing context conditions 
example requiring variables de ned usage consistent types 
compiler theory context conditions called semantic conditions triggered semantic considerations 
really just constrain syntax contribute de nition semantics 
modern languages number conditions expressed context conditions convenience expressed context free grammar 
atypical example priority scheme operators 
language arithmetic expressions hexpi take usual character set alphabet 
words include variable names numbers delimiters 
complete sentence expression de nable context free grammars 
context conditions restrict set formed sentences disallowing special name foo variable parameters 
expressions foo syntactically incorrect 
important context conditions decidable tobe checkable parser 
diagrams di erent way viewing syntax 
need think drawing diagram starting lines line segments making boxes arcs 
layers topological notions specialized geometry put topologically andthen specialized geometry 
go 
rst layer consists kinds basic topological elements open line segments closed ones just closed jordan curves 

specialized geometrically kinds lines arrows straight lines splines various line styles colors closed shapes boxes circles various line styles colors 

geometric shapes arranged diagrams rst making topologically meaningful combinations connectivity intersection arranging geometrically actual dimensional diagram 

fourth layer yields set legal diagrams imposing context conditions 
textual attributes second layer class names expressions 
textual part de ned conventional textual grammar 
general discussion de ning syntax language need notation known shall call nl 
textual languages nl typically contain combination backus naur form bnf chomsky context free grammars ch see hexpi language example 
notation nl de ne syntax results just de nition syntax 
side bene provide version called syntax tree algorithm parsing concrete version 
identify language version discuss representation semantics 
de ne semantic domain need underlying notation ns 
variety notations purpose larger case syntax 
natural languages english general purpose formal languages spi algebraic speci cation languages wir pure mathematics see semantic domain class diagrams example 
discuss possibilities implications making choice 
gave mathematically de ned versions semantic domains data ow diagrams 
easily rewrite domains speci cation language algebraic speci cation language yielding quite di erent looking representations semantic domain 
semantic domain notation ns describe independent 
semantic mapping di erent kinds nl notations describe syntax ns notations semantic domain give rise great variety ways de ne semantic mapping 
attempts de ne semantics semantic mapping informally speci examples mapping explicitly giving mapping 
explicitly clearly preferred way things notation required call nm 
variety rigorous notations syntax semantic domain appropriate mapping 
hand pure mathematical notation wb rum rk df hand approach called graph transformations sw 
interestingly approach uses algebraic speci cation language explicitly de ne semantic mapping 
partly due fact notation mapping include notations syntax semantic domains 
works nicely graph transformations domains graph structures nl ns nm works standard mathematics relevant elements dealt generic mathematical framework 
similar language nm require major additional model syntax language essentially context free language graph furthermore semantic domain explicit de nition mapping 
de ning uml today increasing popularity graphical diagrammatic languages constitute uml unclear best notation describing 
textual languages grammars syntax widely accepted diagrammatic languages exist competing approaches 
hand graph grammars ehr extend grammatical ideas textual languages diagrams applied signi cant parts uml sw 
hand class diagrams uml model syntax diagrammatic language 
fact uml standardization documents uml technique called meta modeling applied bootstrapping fashion 
result meta model essentially class diagram 
class diagrams intuitive graph grammars expressive properties syntax language de ned outside class diagrams context conditions 
uml documents context conditions de ned object constraint language ocl wk part uml 
context conditions stated english 
textual languages constraints stated precisely appropriate attribution syntax tree results parsing process context free grammar 
important emphasize parts uml de ned meta model describe syntax remains problem de ning semantics 
mentioned earlier context conditions semantic conditions people refer merely constrain syntax 
context conditions formedness rules requires variable de ned telling avariable usages mean 
semantics synonym meaning 
just understood context free grammar context conditions deep knowledge similarly structured languages case uml 
constraining syntax way rules problematic syntactic constructs context conditions great aid preparing language sound semantics 
semantics semantic conditions misleading 
framework uml language de ned de ned full syntax semantics 
part uml containing class diagrams ocl viewed notation nl de ning syntax recursive bootstrapping nature meta model approach de nition syntax uml elegant 
pragmatic point view useful uml users probably basic knowledge uml get look detailed de nition don learn new meta language able see de nition syntax 
bootstrapping describe uml syntax practical newcomers identify core part uml adopted rst 
realms similar situations de nition important tohave solid basis 
particular class diagrams ocl de nitions techniques 
semantics uml de ned standardization documents 
documents uml contain part called semantics uml 
really focus semantics mainly describes syntax uml 
documents contain informal descriptions insights semantics uml su cient experienced users gain knowledge purpose constructs uml 
far satisfactory semantics remain 
illustrated numerous papers dealing packages sw class diagrams blm fel uml statecharts wb integration kinds diagrams pr 
degree formality misconception formality belief textual languages priori formal diagrammatic ones 
myth people come away believing exposed notion formal language formal language formal looking language language contains lots greek letters mathematical symbols formal 
equality false directions highly formal looking languages lack severely true formality languages don look formal fact formal 
degree formality ofa language independent appearance 
natural languages textual informal visual languages fully formal 
petri nets statecharts example precisely de ned syntax semantics don see strange looking symbols 
obviously due background kinds people deal textual algebraic languages fact accepted theory de nition diagrammatic languages correlation mathematical appearance language degree formality 
important realize diagrammatic informal means synonymous 
adjectives formal rigorous emphasize language precise unambiguous syntax semantics de nitions 
kind precision relevant degree expressions language precise statements 
precision language opposed depends degree formality course language de ned su ciently formal way precise 
language rigorous imprecise statements 
example term number fuzzy imprecise 
fact claim doesn really exclude numbers 
statement precise mathematical expression 
expression formal rigorous language mathematics statement fuzzy statement fuzzy equally precise statement see 
precision language high low low anumber possible precision statement precision language vs statements carrying example complex situation modeling systems nd degree formality notation describe system orthogonal degree precision model 
particular describe systems liberal uml models uml precisely de ned syntax semantics 
similarly develop detailed uml models possess non rigorous understanding uml actual meaning 
main arguments formal foundation diagrammatic languages arises confusion concepts equating abstraction models fuzziness language 
result confusion incorrect statement precisely de ned language forces developers ll details don want 
problem called cation arise high formality language failure part developers right abstractions 
consequence inability language tools implementing provide appropriate abstraction mechanisms incomplete models allowed system development 
de nition single number number precise leaves freedom implementation 
having right abstraction mechanisms hand example intervals prevents cation 
take closer look degree formality semantic de nitions 
explicit de nition semantic mapping allows reason 
current approaches de ne diagrammatic language ective algorithmic fashion 
idea cater software engineer 
enables software engineer translate expressions language expressions semantic domain order able proof analysis techniques illustrate assume exists automatic checker predicate consistent bool states element ofs consistent proper implementation 
software engineer apply checker expressions language applying mapping drawback approach need engineers willing able understand syntax semantic notation typically engineer really interested explicit de nition semantic domain reasons semantic domain needs explained unfamiliar notation ns 
engineer wants deal better de ner semantics prove expressions resulting semantics consistent implementable 
words inconsistent expressions eliminated careful de nition language 
example compiling higher level programming language consistency checker part compiler typically ensures result correct consistent 
consistency means result directly executable opcode translated opcode possible errors 
formedness conditions de ned way software engineer language sure consistent expressions explicitly exposed formally semantic domain 
order successfully deal provided techniques tools need informal understanding semantic domain 
careful de nition alluded necessary consistency proof feasible typically context conditions constraining language required 
language de ned way syntax restricted set consistent documents predicate bool condition syntactically formed expressions consistent deep insights gained carrying rigorous semantic de nition language improve language 
ideally insights obtained people provided semantic de nition users language 
questions relevant de ning semantics 
formalization capture intuition users 

context conditions su cient ensure consistency 

notation allow speci cation important properties semantic domain 

analysis techniques transformation rules language exist sound respect semantics 
tremendous amount necessary semantics properly address related questions surely done serious language de nition ort 
necessary prerequisite success respect forth question explicit de nition semantic mapping questions rst aim consensus users 
achieved broadly accepted standardization clear complete formalization syntax semantics 
phenomenon point worth making regarding visual diagrammatic languages 
unfortunately people take diagrams lightly lightly 
nd hard relate bunch graphics serious called language profound real thing 
result failure owcharts replace conventional high level programs get reasons failure 
case encounters may call phenomenon diagrams considered people engineer side kind visual aid 
real goes done textual symbolic languages 
sadly long time view held language designers 
years ago martin mcclure published book title diagramming techniques analysis programmers mm 
full scores diagrammatic notations little attempt convince reader diagrams needed rigorous de nitions 
best readers came away graphical notations making little side pictures things working real language 
helpful works aim exploiting virtues true visual formalisms 
people nd hard understand simply add graphical notations visual language 
example cases people proposing private communication kinds extensions additions language statecharts 
people understand just add arrow means synchronization new kind box means separate thread concurrency actual quotes proposals 
boxes lines mean things add just say words intended mean 
example di cult additions really idea having overlapping states statecharts 
proposed preliminary way possible area original statecharts har took lot hard gure consistent syntax semantics extension hk 
fact result turned complex justify implementation 
people ask don systems implementing statecharts statemate 
hard convince simple 
person kept asking don just tell system give error message draw overlapping boxes thing needs done remove error message business 
person de nitely mind 
serious di culties people relating issue designing visual languages 
non compositionality discussed somewhat severe temptation provide variety 
shall discuss views second part series 
intended audience intended audience semantic de nition language important consideration selecting right representation 
potential reader groups include notation developers language de tool vendors users 
de nition intended user forget formulas 
de nitely true user wish formal de nition intuitive appealing description language purposes 
stated earlier typical users willing ort understand semantic domain notation ns trained 
need understand notation ns formal language 
user skills formal methods mathematics certain resistance learning ns usually remains 
semantic formalism commonly understood broad range users probably best natural language explaining notation carefully describing semantics 
learn japanese people need translation english language know 
relationship english japanese helps understand japanese translation japanese german necessary learn german understanding japanese 
way audience semantic de nition needs understand semantics order bene 
contrast user language developer ideally features de ner semantics willing cope notation ns gather insights de ning modeling language goes possess perfect knowledge languages detailed recommendations users 
tool vendors exposed precise semantics probably better give detailed descriptions deal 
include rules adding removing adapting elements notation promoted re nement transformation calculi rum oj 
tool vendors interested notation means symbols modi ed generate code faithful original semantics 
tool vendors forget issues depend basic availability ofa rigorous formal commonly agreed semantics 
example complicated semantics described away conveys rigor full de nition appears hn 
contains operational style semantic de nition full statecharts language sa sd functional decomposition framework implemented statemate system 
comprehended tool vendors various kinds users 
extensibility implicitly assumed languages xed advance 
seldom case practice 
existing languages built extension mechanism allows extension vocabulary 
prominent examples natural languages mechanism explanation natural growth subject matter conveyed language constantly allow extensions 
example natural language extensibility introduce terms syntax semantics explaining mean 
examples programming languages main concern introduce new procedures methods types classes 
named new abstractions 
language extension explained terms language 
allows communication partner understand new concept 
extension gets semantics indirectly semantics explanation semantics 
common mechanism extension relies binding subexpression language name subexpression semantics 
new name subexpression de nes name result recursion 
recursion common de ning functions procedures types class structures part lists 
recursion nature circular looking classical theory xpoints kle tar solved de nition problem allowing give precise semantics recursive de nitions ts intuitive understanding 
back main example uml quite number mechanisms introducing new elements 
classes methods called rst class citizens uml allows specialize meaning certain elements stereotypes tagged values 
unfortunately uml er mechanism describe meaning newly introduced stereotype tagged value language 
informal english de nitions frequently de nitions appeal speci tools 
uml current version serious drawback regards extensions kind 
summary syntax front window language 
contains user notation deals 
context conditions syntactic constraints restrict syntax 
precisely de ned syntax language requires unambiguously de ned meaning semantics 
principal di erence textual visual diagrammatic languages 
kinds require precisely de ned syntax describing set possible expressions language similarly precise semantics determining meaning expressions 
semantics described variety ways depending purpose intended audience 
semantics language usually described parts semantic domain provides information talking semantic mapping maps context condition constrains syntax describes set formed expressions language 
expression meaningful formed element language synonyms word statement sentence document diagram model term piece data clause module 
interpretation extracts information piece data mapping data semantic domain 
language possibly nite set expressions communicate synonym notation language allows syntactically represent information 
modeling language specifying documenting properties system di erent abstractions di erent points view 
notation syntactic representation information synonym language user deals 
programming language programming software systems 
semantics de nes meaning notation information expressions notation describe 
semantic domain understood domain elements elements semantic domain describe important properties trying de ne language context means software hardware systems components systems 
semantic mapping mapping relates syntactic construct construct semantic domain usually explains new constructs terms known constructs 
sub language subset syntactic elements appropriate adaptation projection 
textual language language consisting linear strings characters symbols words sentences 
visual diagrammatic language language mainly graphic topological geometric elements employ textual elements 
visual formalism diagrammatic language formal syntax semantics 
glossary syntax semantic domain 
semantic domain de ned independently syntax fact completely di erent languages describing kinds systems languages semantic domain 
elements syntax semantic domain semantic mapping need denoted appropriate notations 
careful choice notations crucial gaining useful results semantic de nition 
formality semantic de nition depends way syntax semantic domain semantic mapping represented 
fully formal semantic de nition includes explicit formal de nition semantic mapping 
de ning semantic mapping examples satisfactory semantics 
example allow analysis mapping gain better understanding thereof better implementations tools 
contains short glossary 
manfred broy derek coleman tom maibaum bernhard rumpe editors 
proceedings workshop precise semantics modeling techniques 
technische universitaet muenchen tum april 
bdd broy fuchs weber 
design distributed systems focus revised version 
sfb bericht technische universitat munchen january 
broy grosu hu mann st len 
requirements design speci cation language spectrum informal version part 
technical report tum technische universitat munchen 
breu hofmann klein rumpe 
formalization uni ed modeling language 
aksit matsuoka editors ecoop proceedings 
springer verlag lncs 
blm lano maibaum 
objects associations subsystems approach encapsulation 
proceedings ecoop lncs 
springer verlag 
bm 
muller 
proceedings uni ed modeling language conference 
ii notation 
lecture notes computer science 
springer verlag 
france 
dem tom 
structured analysis system speci cation 
yourdon press englewood cli 
df diaconescu futatsugi 
logical semantics cafeobj 
workshop precise semantics software modeling techniques 
technical report tum technische universitat munchen 
dij dijkstra 
economy doing mathematics 
morgan bird editors mathematics program construction 
springer verlag 
ehr ehrig 
algebraic theory graph grammars 
claus ehrig rozenberg editors proc 
int 
workshop graph grammars application computer science biology lncs 
springer verlag 
fbs france 
petrie 
rigorous object oriented analysis design method 
ieee computer society press editor proceedings st international conference formal engineering methods 
fel france evans lano 
oopsla workshop oo behavioral semantics 
technical report tum technische munchen 
jr brooks 
silver bullet essence accidents software engineering 
computer 
har harel 
statecharts visual formalism complex systems 
sci 
comput 
programming 
har harel 
visual formalisms 
comm 
assoc 
comput 
mach 
hk harel 
kahana 
statecharts overlapping 
acm trans 
software engineering method 
hn harel naamad 
statemate semantics statecharts 
acm trans 
software engineering method 
hoa hoare 
communicating sequential processes 
prentice hall 
brian henderson sellers frank 
black white diamonds 
lncs 
springer verlag 
kle kleene 
metamathematics 
van nostrand 
lt lynch tuttle 
input output automata 
cwi quarterly 
maz mazurkiewicz 
trace theory 
brauer reisig rozenberg editors petri nets application relationship models pages 
springer 
lncs 
mm martin mcclure 
diagramming techniques analysis programmers 
prentice hall 
oj opdyke johnson 
creating superclasses refactoring 
technical report department computer science university illinois bell laboratories 
old 
olderog 
semantics concurrent processes search structure abstraction part ii 
bulletin eatcs 
pr rumpe 
re nement information ow architectures 
hinchey editor 
ieee cs press 
rbp rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall 
rk rumpe klein 
automata output description object behavior pages 
kluwer academic publishers norwell massachusetts 
rum rumpe 
formale des systeme 
herbert verlag wissenschaft 
phd thesis technische universitat munchen 
selic ward 
real time object oriented modeling 
john wiley sons 
spi spivey 
understanding cambridge university press 
sw schurr winter 
formal de nition re nement uml module package concept 
bosch mitchell editors object oriented technology ecoop workshop reader volume lecture notes computer science pages berlin 
springer verlag 
clemens 
component software object oriented programming 
addison wesley 
tar tarski 
lattice theoretical xpoint theorem application 
paci journal mathematics 
uml uml 
uni ed modeling language 
version omg 
wb wieringa 
minimal transition system semantics lightweight class behavior diagrams 
technical report tum technische universitat munchen 
wir wirsing 
algebraic speci cation 
van leeuwen editor handbook theoretical computer science pages 
elsevier science publishers 
wk warmer kleppe 
object constraint language 
addison wesley reading mass 

