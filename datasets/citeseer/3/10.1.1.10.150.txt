minimum spanning tree hop restrictions levin department statistics operations research tel aviv university tel aviv israel 
post tau ac il april corresponding author phone fax ij symmetric requirement matrix 
ij cost metric 
spanning tree ng feasible pair vertices path contains vw edges 
explore problem nding minimum cost feasible spanning tree ij 
polynomial algorithm problem graph induced edges ij vertex connected 
polynomial algorithm bounded performance guarantee general case 
keywords minimum spanning tree hop restriction approximation algorithm 
ij symmetric requirement matrix 
ij cost metric symmetric non negative satis es triangle inequality 
spanning tree ng feasible pair vertices path contains vw edges 
cost spanning tree vw metric minimum spanning tree hop restrictions problem nd minimum cost feasible spanning tree 
note consider edge set complete graph vertices candidate edges spanning tree 
metric minimum hop spanning tree problem special case vertex root root ij 
problem addressed earlier works peleg log approximation algorithm special case constant approximation algorithm unbounded xed 
gouveia showed empirically linear programming formulations multi commodity ow models give sharp lower bounds optimal solution 
gouveia lagrangean relaxation 
voss tabu search heuristic 
special case addressed earlier works see papers cited 
proved problem snp hard special case distances approximation algorithm 
considered case approximation algorithms including di erential ratio di erential ratio measures value approximate solution placed interval worst best solution values instance 
gouveia janssen considered generalization problem de ned follows primary secondary costs ij ij respectively edge natural numbers spanning tree feasible vertex unique path root contains weighted number primary secondary edges weights respectively primary edges constitute connected subset containing root 
goal nd minimum cost feasible spanning tree edge primary secondary 
lower bounds derived lagrangean relaxation sub gradient optimization tested lower bounds empirically 
metric uncapacitated facility location problem de ned follows bipartite graph edge cost metric ij assigning vertex facility cost opening facility vertex goal minimize cost selected facilities plus sum costs assigning vertex closest open facility 
problem np hard series constant factor approximation algorithms published 
currently best factor 
polynomial time algorithm metric uncapacitated facility location problem approximation ratio smaller np dt ime log log 
note special case metric uncapacitated facility location problem opening facility costs assignment costs satisfy triangle inequality ij 
approximation ratio applies 
note reduction produces instances metric uncapacitated facility location problem satisfy extra conditions 
lower bound applies 
related problem minimum cost bounded diameter spanning tree problem problem nd de ned follows graph cost function goal minimize cost spanning tree contains simple path edges 
problem np complete edge costs see 
problem special case metric minimum spanning tree hop restrictions problem ij graph spanning tree denote ng number edges shortest path respectively 
unweighted tree spanner 
shown unweighted tree spanner exists computed polynomial time 
problem interested forcing hop constraints subset feasible edge set interested minimum cost solution 
interested special case ij case quite general 
particular generalizes metric uncapacitated facility location problem 
polynomial time algorithm case graph induced edges ij hamiltonian cycle 
extend algorithm solve problem vertex connected graph results hold satisfy triangle inequality 
constant ratio approximation algorithm general graph metric 
preliminaries terminology connected vertex connected cycle simple cycle path simple path 
notation denote undirected edge connects path said path 
pair vertices paths said disjoint fu vg 
graph connected pair vertices disjoint paths 
connected component maximal subset vertices pair vertices disjoint paths 
connected component said non trivial contains vertices 
connected component maximal connected subgraph set vertices denote induced subgraph consists edges having vertices denote metric induced observations observation connected graph pair vertices edge path contains observation connected graph pair edges cycle contains edges 
case ij input problem consists cost metric graph ju ij ju ij 
observation feasible solution 
feasible solution 
lemma feasible solution suppose path vertex proof consider subtrees resulting deleting assumption belong distinct subtrees 
lemma hold exist adjacent vertices belong distinct subtrees path contains edges contradicts lemma denote non trivial connected components denote components induced cut edges 
feasible solution assume connected 
exists fvg star root proof jc result trivial 
assume jc 
connected path connected path lemma claim follows 
feasibility question feasible spanning tree problem interest 
sections develop polynomial time algorithm case connected 
algorithm nds minimum cost feasible spanning tree exists nds feasible spanning tree 
show feasibility algorithm connected graphs solves feasibility question graphs 
lemma feasible solution connected component feasible solution 
proof assume connected component feasible solution 
consider tree resulted union feasible solutions connected component addition cut edges tree feasible solution 
assume feasible solution assume connected component induced subgraph connected lemma vertex adjacent vertices pick vertex tc star rooted leaf set 
tc feasible solution induced subgraph cycle distinct vertices edges crossing edges respect appear order 
edges non crossing edges respect note de nition edges non crossing edges respect lemma feasible solution cycle contain crossing edges respect proof suppose exist crossing edges respect path contains means edges cross respect pick closest denote subtree contains resulted deleting path consists edge path denote lj path contain adjacent vertices lj de nition contradicts edges non overlapping respect cycle distinct appear order 
edges non overlapping cycle non overlapping respect lemma feasible solution 
set non overlapping edges 
proof assume lemma hold suppose cycle set appear order lowest index vertex number vertices clockwise manner edges share cycle structure edges share cycle corollary minimized sets edges satisfy conditions respect 
path edges 
lemma path exactly edges 
path lemma vertices connected contradicts avoid contradiction lemma path contain fv replace contradicting minimality 
replace contradicting minimality existence lemma 
set edges shares cycle cycle contains endpoints edges corollary set shares cycle appear order see 
proof lemmas 
hamiltonian cycle section polynomial time algorithm hamiltonian cycle algorithm subsequent algorithms 
section need assume satis es triangle inequality symmetric non negative 
lemma feasible solution 

proof may non crossing edges cycle edges 
je lemma contain cycle edges 
corollary proof fi operations done mod 
spanning tree edge edges crossing impossible lemma 
lemma polynomial time dynamic programming algorithm algorithm dp 
algorithm dp lemmas corollary 
denote minimum cost spanning tree fi jg contains edge satis es constraints de ned ij operations done mod 
feasible solution algorithm dp returns 
lemma looking min 
satis es conditions ij ik ij jk ij ij minff correctness algorithm dp fact edge lemma problem divided subproblems rst ij second ji corollary lemma ij lemma ij algorithm chooses better possibility adding adding connected section polynomial time algorithm connected 
section need assume satis es triangle inequality symmetric non negative 
lemma vertices connected component feasible solution 
path contains edges 
proof path neighbor assume lemma holds 
neighbor claim path contain inner vertices exists belong common connected component 
consider subtrees obtained deleting assumption belong distinct subtrees 
starting rst vertex belong subtree denote vertex vertex closer 
requirement belong distinct subtrees 
path exactly 
subtree edge cycle proof lemma consequence lemma connected minimum cost feasible star feasible star exists optimal solution 
feasible star problem infeasible 
lemma feasible solution 
fe assume disjoint paths connects pair vertices proof assumption disjoint paths lemma path edges 
path contains edges assume disjoint paths 
lemma vertices paths connected contradicts fact lemma feasible solution 
fe cycle contains vertices edges exist disjoint paths connects pair vertices proof connected cycle contains denote paths fe observation exists path contains minimal path property 
fv wg 
assumption share cycle 
claim follows lemma 
lemma feasible solution 
assume je 
suppose subset fe cycle contains vertices edges fe lemma 
proof consider cycle see 
contains vertices fe assumption separates fv cut set fv fv fv fv distinct components cut 
subgraph fe proof lemma vertex ex fu vertex ex fu ex fu lemma assume feasible solution 
fe set edges vertices lie common cycle edges separates 
proof cycle contains endpoints corollary deletion endpoints edges say results paths say fv wg fv wg show wg path connecting assume path see 
consider subgraph de ned fe subgraph contains cycle set non overlapping respect lemma impossible 
non trivial connected component vertex extension ex respect de ned connected component fwg contains fwg see 
lemma assume feasible solution non trivial connected component exists ex 
proof lemmas 
consider nontrivial connected component vertex connected components ex fwg 
unique vertex ex ex sets ex adjacent vertex note ex fwg partition 
de ne set sp subproblems associated set vertices subproblem fv wg see 
ne subproblem de ned problem induced graph metric induced set subproblems de ned nontrivial connected component vertex sp lemma shows set subproblems decomposes original problem 
lemma feasible solution 
non trivial connected component lemma 
induces connected subgraph sp 
proof assume lemma hold sp 
path ex see 
cycle contains order connected path traverses fw vg cut set path 
disjoint path traverses assumptions edges crossing respect impossible lemma 
edge crossing edge vertex ex vertex ex graph proof lemma algorithm see breaks input problem subproblems 
continues decompose subproblems subproblem de ned set contains edges subproblems solved recursively calling algorithm 
lemma subproblems solved recursive calls algorithm 
proof subproblem identi ed set vertices set edges edges 
denote set vertices edge originally corresponds cut set fu vg original graph lemma 
set vertices de ne subproblem satisfy connected component graph resulted deleting may connected components resulted deleting subproblems solved algorithm subproblems solved 
theorem algorithm returns optimal solution strongly polynomial time 
proof correctness decomposition lemma 
decomposition lemmas 
observation decide edge belongs add ecting feasibility prove induction number recursive calls algorithm uses returns optimal solution 
call optimality algorithm dp algorithm returns optimal solution 
consider optimal solution lemma vertex ex 
consider tree tw built algorithm 
lemmas union solutions subproblems gives optimal solution original problem 
correctness induction follows induction assumption 
lemma total number subproblems solved algorithm 
consider involved subproblem 
separation subproblem smaller subproblems takes time 
pair separations decreases sum sp jcj applying lemma decrease sum iteration loop chooses set lemma sum decreases 
total loop mn 
loop dominated loop repeated times 
involved subproblem mn 
total 
approximation algorithm contains single cut vertex section approximation algorithm case single cut vertex 
algorithm known approximation algorithm metric uncapacitated facility location penalties problem 
section approximation algorithm general graphs 
assume connected single cut vertex denote nontrivial connected components denote fv set neighbors belong non trivial connected component 
fv rg metric uncapacitated facility location penalties problem uflp see approximation algorithm problem see log time approximation algorithm de ned follows complete bipartite graph eb costs opening facility vertex metric costs servicing customer open facility costs penalties servicing customer goal minimize total cost selected facilities penalty costs non served customers servicing costs served customer closest open facility 
algorithm extended weighted case customer weight servicing cost penalty cost 
done method described weighted case metric uncapacitated facility location problem 
de ne instance uflp 
instance consists vertices consists components opening facility vertex means directly connected solution cost opening facility ru paying penalty component means induces connected component penalty cost tv tv solution value optimal tree problem de ned 
servicing component open facility means connected frg 
service cost uv solutions uflp instance correspond feasible solution input connected graph 
symmetric non negative cost function set returns spanning tree 
hamiltonian cycle return dp 
non trivial connected component jx ex 
sp sp 
sp je sp sp contains edges share cycle separates 
elseif contains edges conditions lemma holds 
fag 
break set connected components fv wg 
fv wg 
sp sp sp 
infeasible fag 
return infeasible return minimum cost spanning tree ft algorithm connected case 
solution uflp instance corresponds graph satis es hop requirements 
graph may contain cycles parallel edges facility placed vertex component pays penalty 
solution uflp construct approximate solution 
formulation uflp instance metric 
instance metric de ne weight component jc adjust appropriately 
give details construction 
de ne instance uflp uflp follows graph de ned fc customer vertex customer non trivial connected component facility opened vertex notion component vertex corresponding meaning clari ed context 
weight customer de ned jc opening facility costs ru service cost de ned follows jc uv jx 
penalty cost de ned follows tv tv infeasible 
observation metric 
proof show metric frg frg vw uw ux xv averaging frg results vw uw jc ux xv averaging frg results jc vw jc uw jc ux jc xv proves claim 
consider solution returned approximation algorithm uflp 
solution consists set open facilities set customers customers pay penalties mapping maps served customer open facility serves 
algorithm scv see approximates instance uflp changes solution feasible solution 
changes order provide property solution opens facility serves property hold replace facility belongs set vertices served resulting cost minimized 
feasible solution uflp denote set vertices belong components served formally scv input connected graph single cut vertex cost metric returns spanning tree 

non trivial connected components fv 
fv rg 
approximation solution uflp 

cost equals return infeasible 
tv 

argmin fd rx xv 
fxg fug 


return 
scv algorithm scv single cut vertex case lemma denote sol cost feasible solution sol uflp 
exists solution cost sol 
algorithm scv strongly polynomial time 
proof denote sol modi ed solution constructed sol follows consider open facility argmin fd rx xv rx xv ru uv verify inequality note satis ed particular vertex closest replacement doubles service costs solution 
changes produce modi ed solution sol de ned algorithm costs sol 
de ned follows tv sol opens facility serves feasible solution 
cost equals cost sol constructed sol strongly polynomial time cost sol 
lemma denote cost feasible solution 
exists solution sol uflp cost proof de ne solution sol follows fu fc exists sol clearly feasible solution uflp 
cost sol cost sol corresponds cost cost counted twice 
lemma assume exists feasible solution cost algorithm scv returns solution cost proof solution obtained approximation algorithm uflp costs times cost optimal solution uflp 
lemma cost lemma cost solution returned algorithm scv theorem algorithm scv strongly polynomial approximation 
proof prove feasibility consider edge service cost correctness algorithm includes subtree feasible tree served cases induces feasible solution correctness algorithm vertices connected star center star may outside 
algorithm scv returns feasible solution 
denote opt optimal cost 
lemma algorithm scv returns solution cost opt 
algorithm strongly polynomial theorem strongly polynomial approximation algorithm uflp non trivial connected components graph computed strongly polynomial time 
algorithm scv takes strongly polynomial time 
approximation algorithm general graphs algorithm apx see decomposes problem subproblems 
subproblem corresponds connected component case uses solve optimality subgraph contains single cut vertex case uses scv approximate 
algorithm considers union subtrees extends forest spanning tree edges minimum cost spanning tree 
phase needed connected 
theorem algorithm apx strongly polynomial approximation 
proof feasibility solution follows lemma correctness algorithms scv 
algorithms theorem scv theorem strongly polynomial 
minimum cost extension spanning tree step done computation minimum cost spanning tree graph constructed contracting connected component single vertex 
algorithm apx takes strongly polynomial time 
consider optimal solution opt opt problem 
cut vertex opt opt opt minimal respect inclusion subtree opt satis es requirements fug opt includes vertices 
lemma tree opt costs times cost opt note edge opt participates subtrees correspond set contains endpoints 
cut vertex belongs sets vertices belong set 
participates spanning trees set ft opt apx input graph 
cost metric returns spanning tree 

connected component connected tv 
infeasible return infeasible 
cut vertex cut vertex fv disjoint paths paths contain ug 
fv paths contain ug 
fug 
scv 
infeasible return infeasible 
return minimum cost extension spanning tree 
apx algorithm apx cost extension edges minimum spanning tree times cost opt minimum cost spanning tree costs cost opt output tree costs times cost opt approximating minimum spanning tree depth intl 
trans 
op 
res 
cai corneil tree spanners siam disc 
math 
charikar khuller mount narasimhan algorithms facility location problems outliers proceedings soda 
dahl hop spanning tree problem operations research letters 
garey johnson computers intractability guide theory np completeness freeman 
gouveia janssen designing reliable tree networks cable technologies european journal operational research 
gouveia multicommodity ow models spanning trees hop constraints european journal operational research 
guha khuller greedy strikes back improved facility location algorithms journal algorithms 
gouveia new lagrangean relaxation approach minimum spanning tree problem european journal operational research 
peleg approximating weight shallow steiner trees discrete applied mathematics 
vazirani greedy facility location algorithm analyzed dual tting proceedings th international workshop randomization approximation techniques computer science lncs 
ye zhang approximation algorithm uncapacitated facility location problem proceedings approx lncs 
maximum depth spanning tree problem information processing letters 
voss steiner tree problem hop constraints annals operations research 

