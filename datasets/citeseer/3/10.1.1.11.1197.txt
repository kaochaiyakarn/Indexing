stream stanford stream data manager stream group stanford university www db stanford edu stream stream project stanford developing general purpose system processing continuous queries multiple continuous data streams stored relations 
designed handle high volume bursty data streams large numbers complex continuous queries 
describe status system early outline ongoing research directions 
stanford stream data manager stream project stanford developing general purpose data stream management system dsms processing continuous queries multiple continuous data streams stored relations 
fundamental differences dsms traditional dbms motivated design build dsms scratch 
dsms handle multiple continuous high volume possibly time varying data streams additional managing traditional stored relations 

due continuous nature data streams dsms needs support long running continuous queries producing answers continuous timely fashion 
high level view stream shown 
left incoming input streams produce data indefinitely drive query processing 
processing continuous queries typically requires intermediate state denote scratch store 
state stored accessed memory disk 
concerned primarily online processing continuous queries applications stream data may copied archive preservation possible offline processing expensive analysis mining queries 
top see users applications register continuous queries remain active system explicitly 
results continuous queries generally transmitted output data streams relational results updated time similar materialized views 
copyright ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
bulletin ieee computer society technical committee data engineering active members march arasu babcock babu datar ito motwani srivastava thomas varma widom 
supported nsf iis iis stanford graduate fellowships com rambus sequoia capital scholarship support foundation microsoft stanford networking research center veritas 
visiting stanford hitachi overview stream currently stream offers web system interface direct planning expose system web service soap 
remote applications written language platform 
applications register queries receive results query streaming response xml 
allow interactive system developed web gui alternative way register queries view results provide interactive interface visualizing modifying system behavior see section 
sections query language processing operator scheduling user interface describe important components stream 
section outline current research directions 
due space limitations include section dedicated related 
refer reader survey bbd provides extensive coverage related 
query language processing describe query language semantics continuous queries supported stream 
half section describes stream query processing architecture 
query language semantics designed semantics concrete declarative query language continuous queries data streams relations 
model stream unbounded append bag tuple timestamp pairs relation time varying bag tuples supporting updates deletions insertions 
semantics continuous queries streams relations leverages understood relational semantics 
streams converted relations special windowing operators transformations relations performed standard relational operators transformed relational data optionally converted back streamed answer 
semantics relies building blocks 
relational query language view abstractly set relation relation operators 

window specification language extract tuples streams view set stream relation operators 
theory operators need windows window specification language streams relations relation stream operators relational query language mappings semantics practice windowing common way producing bounded sets tuples unbounded streams bbd 

set relation stream operators 
interaction building blocks depicted 
developed concrete declarative query language cql continuous query language instantiates semantics 
language uses sql relational query language window specification language derived sql includes relation stream operators 
cql language supports syntactic shortcuts defaults convenient intuitive query formulation 
complete specification query semantics cql provided earlier abw 
interested reader referred stream query repository sqr contains queries realistic stream applications including large number variety queries expressed cql 
significant fraction cql implemented date described section 
query processing continuous query specified cql registered stream compiled query plan 
query plan merged existing query plans possible order share computation memory 
alternatively structure query plans specified explicitly xml 
query plan system runs continuously composed different types components 
query operators correspond types operators semantics section 
operator reads tuples set input queues processes tuples semantics writes output tuples output queue 

inter operator queues buffer output operator passed input operators 
incoming stream tuples relation updates placed input queues feeding leaf operators 

synopses maintain run time state associated operators 
stream supports standard relational operators including aggregation duplicate elimination window operators compute time tuple partitioned windows streams abw operators convert relations streams sampling operators approximate query answering 
note queues synopses active query plans system comprise scratch store depicted 
synopsis stores intermediate state operator running query plan needed evaluation operator 
example sliding window join operator access tuples max join sw sw stream query plans part current window input streams maintain sliding window synopsis typically hash table streams 
hand simple filter operators selection projection require synopsis need maintain state 
common synopsis system materialize relation view sliding window 
synopses store summary tuples stream relation approximate query answering 
reason implemented reservoir samples vit streams soon add bloom filters mw 
illustrates plans queries input streams query query maintains maximum value attribute sliding window stream query sliding window join query streams plans contain operators sw sw max synopses queues sw sliding window operator reads stream tuples queue updates sliding window synopsis outputs inserts deletes sliding window queue queue represents stream queue represents relation sliding window stream similarly sw processes stream tuples updating synopsis queue operator maintains maximum value incrementally window inserts deletes window maintained sw current maximum value expires window max potentially need access entire window compute new maximum value 
max materialize window synopsis simply time shifted version share data store indicated dotted arrow similarly sliding window synopsis maintained join operator join shared shared queue shared effectively sharing window computation subplan queries aurora system ccc supports shared queues share storage sliding windows streams 
system goes step synopsis sharing including ability share storage maintenance overhead indexes synopses 
example computed group max join predicate useful maintain hash index synopsis 
currently support shared windows streams window specifications need shared materialized views effectively common subexpressions query plans 
novel techniques eliminate synopses tuples accessed example reasoning constraints input streams bw 
execution query operators controlled global scheduler discussed section 
operators implemented way assumptions scheduling policy giving scheduler complete flexibility adapt scheduling strategy query workload input stream characteristics 
operator scheduling execution query plans controlled global scheduler running thread operators system 
operations handled separate thread 
time scheduler invoked selects operator execute calls specific procedure defined operator passing parameter maximum amount time operator run returning control scheduler 
operator may return earlier input queues empty 
goals scheduler continuous query system somewhat different traditional dbms 
traditional scheduling objectives minimizing run time resource consumption maximizing throughput applicable context continuous queries objectives minimizing query response time directly relevant continuous query setting may relevant counterparts minimizing average latency results 
objective takes unusual importance processing data streams careful management run time resources memory 
memory management particular challenge processing streams real data streams irregular rate arrival exhibiting burstiness variation data arrival rate time 
phenomenon observed networking fp web page access patterns mail messages kle 
processing bursty data streams temporary bursts data arrival usually buffered backlog tuples processed periods light load 
important stream system minimize memory required backlog buffering 
total memory usage exceed available physical memory periods heavy load causing system page disk limiting system throughput 
address problem developed operator scheduling strategy minimizes memory requirement backlog buffering 
strategy called chain scheduling near optimal minimizing run time memory usage single stream queries involving selections projections foreign key joins stored relations 
chain scheduling performs queries sliding window joins multiple streams multiple queries types 
basic idea chain scheduling break query plans disjoint chains consecutive operators effectiveness reducing run time memory usage favoring operators consume large number tuples time unit produce output tuples 
metric determines scheduling priority operator chain 
chain scheduling decisions picking operator chain highest priority operators ready execute scheduling ready operator chain 
complete details chain proofs near optimality experimental results demonstrating benefits chain respect scheduling strategies provided earlier 
chain achieves run time memory minimization may suffer starvation poor response times bursts 
ongoing considering adapt strategy take account additional objectives 
user interface developing comprehensive interactive interface stream users system administrators system developers visualize modify query plans query specific system wide resource allocation system operation 
query plan execution stream provide graphical interface visualize execution registered continuous query 
query plans implemented networks entities operator queue synopsis 
query plan execution visualizer provide features 

view structure plan component entities 

view specific attributes entity amount memory synopsis plan 

view data moving plan tuples entering leaving inter operator queues synopsis contents growing shrinking operators execute 
depending scope activity individual tuples tuple counts visualized 
global system behavior query execution visualizer described previous section useful visualizing execution resource utilization single query small number queries may share plan components 
system administrator developer want obtain global picture dsms behavior 
stream system provide interface visualize system wide query execution resource utilization information 
supported features include 
view entire set query plans system level detail dependent number size plans 

view fraction memory query system detail queue synopsis 

view fraction processor time consumed query system 
controlling system behavior visualizing query specific system wide execution resource allocation information important system administrators developers understand tune performance dsms running long lived continuous queries 
sophisticated dsms adapt automatically changing stream characteristics changing query load useful power users certainly useful system developers capability control certain aspects system behavior 
stream support features 
run time modification memory allocation increasing memory allocated synopsis decreasing memory 

run time modification plan structure changing order synopsis joins query multiple streams changing type synopsis join operator 

run time modification scheduling policy choosing alternative policies 
directions ongoing research section outlines problems addressing currently stream project addition implementing basic prototype described 
problems fall broadly areas efficient query processing algorithms cost optimization resource allocation operator scheduling graceful degradation overload distributed stream processing 
efficient query processing system needs efficient query processing algorithms handle high volume data streams large numbers complex continuous queries 
issues addressing area include techniques sharing computation memory aggressively query plans algorithms multi way sliding window joins streams tradeoffs incremental computation recomputation different types continuous queries strategies processing continuous queries efficiently ensuring correctness absence time synchronization stream sources dsms 
cost optimization resource allocation implemented support significant fraction cql stream date query plan generator fairly naive uses hard coded heuristics generate query plans 
moving time dynamic cost query optimization cql queries 
cql uses sql relational query language leverage time optimization techniques traditional relational dbmss 
unique optimization techniques include relocating window operators query plans exploiting stream constraints reduce window sizes affecting result correctness identifying opportunities sharing computation common subexpression computation index maintenance memory synopses queues 
apart choosing plans shapes operators query optimizer allocate resources memory queries 
problems addressing area allocate resources query plans maximize result precision resource limitations force approximate query results 
exploring dynamic adaptive approaches query processing resource allocation 
adaptive query processing fine grained eddies telegraph project cc 
approach relies interacting components monitor captures properties streams system behavior optimizer reconfigure query plans resource allocation properties change time 
scheduling described section chain scheduling strategy achieves run time memory minimization may suffer poor response times bursts 
ongoing adapting chain minimize total run time memory usage queries constraint latency query result tuple exceed threshold 
planned extension needed complete scheduling strategy dsms intelligent handling query workloads synopses queues fit physical memory available dsms 
graceful degradation overload large intervals time input stream arrival rates exceed maximum rate dsms process query workload streams 
shown aurora system ccc general approach handle overload situations load shedding 
system load reduced manageable levels dropping input tuples selectively quality ofservice system degrades little possible ccc 
ongoing project adopts similar approach sampling techniques drop input tuples goal minimizing weighted error query results incurred overload situations 
distributed stream processing final important aspect long term research agenda incorporate distributed data stream processing techniques stream system 
data stream sources frequently geographically dispersed experiments simulations show processing strategies take fact account result significant savings computation communication costs bo 
plan modify stream function distributed environment incorporating specialized distributed data processing strategies 
abw arasu babu widom 
semantics concrete language continuous queries streams relations 
technical report stanford university database group november 
available stanford edu pub 
bbd babcock babu datar motwani widom 
models issues data stream systems 
proc 
acm symp 
principles database systems pages june 
babcock babu datar motwani 
chain operator scheduling memory minimization data stream systems 
proc 
acm sigmod intl 
conf 
management data june 
appear 
bo babcock olston 
distributed top monitoring 
proc 
acm sigmod intl 
conf 
management data june 
appear 
bw babu widom 
exploiting constraints reduce memory overhead continuous queries data streams 
technical report stanford university database group november 
available stanford edu pub 
cc chandrasekaran cooper telegraphcq continuous dataflow processing uncertain world 
proc 
biennial conf 
innovative data systems research cidr january 
ccc carney cetintemel cherniack convey lee stonebraker tatbul zdonik 
monitoring streams new class data management applications 
proc 
th intl 
conf 
large data bases august 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
proc 
acm sigmod intl 
conf 
management data pages may 
fp floyd paxson 
wide area traffic failure poisson modeling 
ieee acm transactions networking june 
kle kleinberg 
bursty hierarchical structure streams 
proc 
acm sigkdd intl 
conf 
knowledge discovery data mining august 
kang naughton 
evaluating window joins unbounded streams 
proc 
intl 
conf 
data engineering march 
mw motwani widom query processing approximation resource management data stream management system 
proc 
biennial conf 
innovative data systems research cidr january 
olston jiang widom 
adaptive filters continuous queries distributed data streams 
proc 
acm sigmod intl 
conf 
management data june 
appear 
sqr sqr stream query repository 
www db stanford edu stream sqr 
vit vitter 
random sampling reservoir 
acm trans 
mathematical software 

