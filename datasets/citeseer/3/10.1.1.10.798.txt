automatic detection masking non atomic exception handling christof fetzer karin pascal felber labs research institut eurecom florham park nj usa sophia antipolis france christof karin research att com felber eurecom fr developing robust applications challenging task 
modern programming languages java provide sophisticated exception handling mechanisms detect correct runtime error conditions exception handling code programmed care preserve application consistency 
particular exception handling effective premature termination method due exception leave object inconsistent state 
address issue introducing notion failure atomicity context exceptions novel techniques automatically detect mask non atomic exception handling 
techniques applied applications written different programming languages application source code available 
perform experimental evaluation java applications demonstrate effectiveness techniques measure overhead introduce 
developing robust software challenging task 
robust program able detect recover variety faults temporary disconnection communication links resource exhaustion memory corruption 
programmers robust software connotation elegance robust software able recover faults substantially increasing code complexity 
increase code complexity increases probability design coding faults decrease robustness software 
language level exception handling mechanisms allow programmers handle errors test block code 
programming languages exception handling programmers check error return codes function call 
exception handling mechanisms simplify development robust programs 
exceptions simplifies detection failures elegance language level exception handling mechanisms lead neglect recovery issues example see 
premature exit method due exception leave object inconsistent state 
inconsistency solved error handling code prevent recovery decrease robustness program 
show automatically detect correct state inconsistencies 
problem description 
modern programming languages java provide explicit exception handling support 
semantic constraint violated exceptional error condition occurs exception thrown 
causes non local transfer control point exception occurred point specified programmer exception caught 
exception caught method implicitly propagated calling method 
exceptions powerful mechanism separates functional code error handling code allows clean path error propagation 
facilitates development applications robust dependable design 
exception handling code programmed carefully ensure application consistent state catching exception 
recovery retrying failed methods 
retrying program try correct runtime error condition increase probability success 
retry succeed failed method leave changed objects consistent state 
consistency ensured modification performed method prior exception occurrence reverted exception propagated calling method 
behavior hard implement catching exceptions programmer consider possible places exception thrown sure exceptions cause state inconsistency 
address challenging issue ensuring failed methods leave objects consistent state throwing exception 
classify methods failure atomic failure non atomic depending preserve state consistency respectively 
informally say exception handling atomic ensures failure atomicity 
say exception handling non atomic 
main objectives find mechanisms help identify failure nonatomic methods develop techniques automatically transform methods failure atomic methods 
approach 
address issue failure non atomic methods propose system systematically test validate exception handling code applications 
system automatically injects declared anticipated undeclared unexpected exceptions runtime evaluates exception handling code ensures failure atomicity 
notifies programmer failure nonatomic method situations minor code modifications changing order instructions introducing temporary variables sufficient transform failure non atomic method failure atomic method 
cases possible system automatically generate wrappers render method failure atomic checkpointing rollback mechanisms 
infrastructure detecting masking non atomic exception handling comes flavors support java programming languages 
version optimized performance requires access application source code 
java version efficient uses combination load time runtime reflection mechanisms works applications source code available 
contribution twofold 
formalize failure atomicity property context exceptions 
second introduce novel techniques automatically detecting masking non atomic exception handling 
techniques applied java applications require access application source code 
experimental results demonstrate effectiveness performance overhead techniques 
organization follows section discuss related 
section introduces failure atomicity problem section presents approach detecting masking failure non atomic methods 
section discuss implementation details system section elaborates performance java infrastructures 
section concludes 
related exception handling investigated decades 
goodenough proposed add explicit programming language constructs exception handling melliar smith randell introduced combination recovery blocks exceptions improve error handling programs 
exception handling actively investigated 
example complete issue acm ada letters dedicated exception handling springer lncs book addresses advances exception handling 
major issues addressed researchers better separation functional code exception handling code 
proposes combine exception handling reflection increase division 
studies aspect oriented programming reducing amount code related exception handling 
goal exception handling code increase robustness programs noted cristian exception handling code contain software bugs called exception errors part application 
explained intuitively factors 
exceptions introduce significant complexity application control flow depending type point thrown 
second exception handling code difficult test executed rarely may triggered wide range different error conditions 
furthermore security vulnerabilities attributed exception handling failures 
eliminating exception failures lead robust programs secure programs 
approaches proposed address issue exception errors code reviews dependability cases group collaboration design diversity testing 
testing typically results coverage exception handling code functional code 
effectiveness dependability cases design diversity collaboration reducing exception handling errors studied 
introduce novel approach exception injection address certain kinds exception errors 
consider approach replacement approaches believe complements techniques dependability cases collaboration 
advantages approach lie essentially highly automated operation fast detection functions contain certain exception errors 
robustness programs evaluated fault injection techniques 
exist software implemented hardware implemented simulation fault 
tool performs software implemented fault injections 
software implemented fault investigated various types failures memory corruption invalid arguments 
various techniques injecting faults 
tools fer xception inject faults modifying applications 
tools doctor modify application compile time runtime 
tool injects faults form exceptions modifying application compile time load time 
fig tests error handling applications returning error codes system calls tool injects application level exceptions 
tool evaluate robustness programs performing exception injections automatically corrects problems discovered fault injections 
automatic wrapping shared libraries injection results previously demonstrated :10.1.1.14.1387
address different types failures exception handling vs invalid arguments different fault injection wrapping techniques 
problem description motivation robust software able detect recover failures occur runtime 
way performing failure recovery advantage exception handling mechanism provided programming languages 
mechanism method signal caller encountered failure memory depletion unexpected result calculation throwing exception 
exception caught caller provides programmer opportunity recover failure consequently increase robustness application 
failure recovery fail extreme care taken programming exception handling code 
due incomplete execution method threw exception objects inconsistent states 
consistent states restored application crash terminate incorrect result 
system help programmers detect methods leave object inconsistent state exception thrown 
system automatically revert object back consistent state automating checkpoint execute roll back exception idiom programmer desires 
explained sections 
describing system detail formally introduce notions object graphs failure non atomic methods failure atomic methods 
definition 
object graph graph node object instance basic data type integer pointer 
values instance variables object represented children object node 
node represents value variable node labeled name variable 
node contains non null pointer node exactly child represents referenced object referenced instance basic data type 
non null pointers pointing object instance nodes object graph share child node 
node null pointer node children 
object graph object graph root node 
definition 
class 
method class failure non atomic exists execution object graph invoked different object graph right returned exception 
method failure atomic failure non atomic 
approach approach identify transform failure non atomic methods consists phases detection masking phase 
detection phase uses automated injection exceptions identify failure non atomic methods masking phase transforms failure non atomic methods failure atomic methods 
detection phase goal detection phase determine methods failure non atomic 
detection done help automated experiments 
automated experiments 
automated fault injection experiments determine methods non atomic 
experiments run test programs user applications call methods want investigate 
automatically transform code programs inject exceptions specific points execution 
step detection phase exception injector programs run generate list failure non atomic methods input masking phase 
process consists steps shown 
step create exception injector program pi program determine methods called exceptions may thrown includes exceptions declared part method signature generic runtime exceptions thrown method 
analyzer creates injection wrapper methods called execution analyzer step injection wrappers code weaver program exception run list failure masking injector non atomic analyzer program process wrappers methods step step step step detection phase masking phase code weaver corrected program automatically transform applications inject exceptions execution experimental results correct applications 
assume method declares exceptions types 
ek may throw runtime exceptions ek 
en 
analyzer creates injection wrapper throws exceptions calls method injection wrapper potential injection points shown listing 
determine throw exception injection points global counter point incremented time control flow reaches potential injection point exception injected counter reaches preset threshold value 
return type inj wrapper 
throw ek point throw point throw 
point throw en deep copy try return catch 
deep copy mark nonatomic atomic call mark atomic throw listing pseudo code injection wrapper detection phase 
code injects exceptions callers ofm 
return type atomic 
deep copy try return catch 
replace throw rethrow exception listing pseudo code atomicity wrapper masking phase 
step analyzer created injection wrappers methods called code weaver sure wrappers opposed original methods called 
modifications performed pro gram source files source code transformation directly instrumenting application code bytecode binary code transformation 
result transformation exception injector program pi approaches discussed detail sections respectively 
step exception injector program pi created execute repeatedly 
increment threshold execution inject exception different point run 
wrapper intercept exceptions checks wrapped method failure non atomic propagating exception caller 
determine method failure non atomic injection wrapper inj wrapper listing deep copy state invoked object calling method arguments passed non constant part copy 
copy represents snapshot object graph invoked object see section 
returns exception wrapper catches exception compares snapshot object previous state current state 
object graphs identical mark method failure atomic injection mark failure non atomic 
different injections may result different classifications method classify method failure atomic marked failure non atomic injection object graph identical 
output phase list failure non atomic methods called original program 
masking phase goal masking phase transform failure non atomic methods identified injection phase failure atomic methods 
doing resulting program robust incomplete execution method due exception result inconsistent program state 
masking phase consists steps step described 
step failure non atomic methods automatically transformed equivalent failure atomic methods 
analyzer performs task generating atomicity wrapper atomic method list failure nonatomic methods provided detection phase 
wrapper exhibits failure atomic behavior callers 
pseudocode listing 
step analyzer generated atomicity wrapper method transformed code weaver transforms original program equivalent corrected program pc replacing call method call atomicity process similar step 
implementation details detection masking phases discussed section 
wrap wrap situations failure non atomic method wrapped masking phase 
failure non atomic behavior method intended programmer 
transforming failure non atomic method failure atomic method changes semantics transformation cause incorrect result crash avoiding 
deal situation system provides easy web interface allows programmer indicate methods classified failure nonatomic transformed 
second failure non atomic method easily manually transformed failure atomic method swapping lines code temporary variables 
case programmer prefer rewrite method resulting code efficient 
programmer corrects methods re run detection phase test modifications 
third method classified failure nonatomic impossible exhibit failure non atomic behavior 
may happen situations programmer explicitly ruled specific method throw exceptions 
assumption known analyzer injection wrapper method contain injection point see section 
consequently callers method classified failure non atomic due exception thrown exceptions happen runtime 
conservative classification consequence limitations current analyzer implementation attempt determine possible runtime exception occur method 
plan address issue 
noted conservative classification result incorrect program behavior merely unnecessary loss performance due unnecessary checkpointing masking phase 
address limitation allow programmer indicate certain methods throw exceptions web interface 
methods classified failure non atomic solely exceptions injected exception free methods re classified failure atomic 
note hard programmer determine method exception free various runtime conditions lead exception thrown necessarily known 
fourth method exhibit failure non atomic behavior methods calls failure nonatomic 
call methods conditional failure non atomic methods definition 
conditional failure non atomic method failure non atomic method failure atomic methods calls directly indirectly failure atomic 
failure non atomic methods pure failure non atomic methods 
execution corrected program produced masking phase methods called conditional failure non atomic method exhibit failure atomic behavior 
definition method longer failure non atomic necessary wrap 
distinguishing pure conditional failure nonatomic methods help improve performance corrected program 
distinguish conditional pure failure non atomic methods examine order methods reported failure non atomic exception propagation run exception injector program step 
exists run method method marked failure non atomic pure failure non atomic 
failure non atomic method called detected reported way exceptions propagate callee caller see listing 
limitations approach detect mask failure nonatomic methods limitations 
handle methods external side effects writing file 
external side effects covered definition failure atomicity approach detect mask methods 
second system explicitly deal concurrent accesses multi threaded programs 
applications incorporate adequate conservative concurrency control support injection checkpointing mechanisms produce consistent results 
applications address limitation restricting amount parallelism system enforcing restrictive concurrency control policies 
implementations investigated approaches implementing system source code binary code program transformation techniques 
approach requires access source code program second 
binary code transformation necessarily possible programming languages resulting instrumented programs generally suffer higher performance overhead source code transformation 
kind transformations aided aspect oriented programming allow programmers easily capture integrate crosscutting concerns applications 
source code transformations plan aspectj version java bytecode transformation engine aspectj currently implement bytecode weaving 
source code transformation implemented prototype system performs source code transformations inject mask non atomic exception handling applications 
prototype uses aspect oriented language extension source code weaving 
describe implementation steps section 
step interpreter cint parse source code program 
type information provided cint generate checkpointing code wrappers method 
wrappers implemented aspects 
generate class copy checkpoint state instance class 
step transform source code program exception injector program 
weaves wrappers aspects source code program way call method calls wrapper step execute exception injector program iteratively inject exceptions possible injection points program input 
results online atomicity checks written log files injection wrappers 
log files processed offline classify method 
step step cint create wrappers implemented aspects failure non atomic methods 
addition deep copy function generate function replace restore state previously checkpointed object 
step step weave wrappers source program code 
limitations 
due restrictions tools implementation limitations 
cint support templates ignores exception specifications 
better parsing tool easily solve problem 
second checkpointing objects trivial 
particular allows pointer manipulations hard situations discover complete object graph object runtime 
exist techniques address problem checkpointing address space process underlying memory management interface techniques prohibitively expensive complex 
note worst case checkpointing incomplete object graphs may impact completeness detection system cause failure atomic methods reported failure nonatomic 
third java enforce thrown exceptions declared part method signature 
exception injector inject wide range different exception types application declare exceptions 
problem solved source code analysis automated fault injection experiments 
fourth needs clean memory implicitly discarded rolling back object checkpoint 
tool adds automatic counting mechanism objects 
mechanism works acyclic pointer structures 
cyclic pointer structures shelf garbage collector 
binary code transformation languages offer adequate reflection mechanisms possible add functionality application having access source code applying binary code transformations 
followed second approach java version infrastructure detecting masking non atomic exception handling 
inject mask failures java classes developed tool called java wrapper generator uses load time reflection transparently insert preand post filters method java class 
generic filters allow developers add crosscutting functionality aspect oriented programming compiled java code transparent manner 
filters attached specific methods time class loaded java virtual machine bytecode instrumentation techniques bytecode engineering library 
filters installed level application individual classes instances methods 
modify behavior method catching throwing exceptions bypassing execution active method modifying incoming outgoing parameters 
java implementation framework works lines counterpart just notable differences 
wrappers attached application load time instrumenting classes bytecode 
wrappers programmed generic class obtain type information classes methods parameters exceptions runtime java built reflection mechanisms 
methods checkpoint restore state object generic essentially perform deep copy object state java reflection serialization mechanisms 
limitations 
major limitation java binary code transformation implementation small set core java classes strings integers instrumented dynamically 
limitation applies systems perform java bytecode transformations specific implementation 
overcome instrumenting bytecode core classes offline replacing default implementations instrumented versions 
experimental results validate exception injection tool developed set synthetic benchmark applications java 
benchmarks functionally identical languages contain various combinations pure conditional failure non atomic methods may encountered real applications 
benchmarks sure system correctly detects failure non atomic methods detection phase effectively masks masking phase 
applications performance experiments section 
performed stress tests assessed robustness legacy applications 
purpose tested widely java libraries implementing regular expressions collections 
libraries basic building blocks numerous applications expected robust 
tested self component framework currently developing 
ran experiments applications self help detect failure non atomic methods improve robustness framework 
table lists number classes methods applications experimental evaluation total number exceptions injected detection phase note value corresponds number method constructor calls execution test programs 
ran separate experiments individual application inheritance relationships classes reuse application classes methods injections applications xml xml xml xml xml java applications linkedlist rbtree regexp table java application statistics 
methods classes tested experiments 
experiments conducted methodology described section generated exception injector program application ran method execution original program injecting exception run 
experiments run mhz pentium linux machine kernel mb memory java tests run java ghz pentium windows machine mb memory 
fault injection results computed proportion methods defined test applications failure atomic conditional failure non atomic pure failure non atomic 
results figures show proportion problematic methods pure failure non atomic remains pretty small 
may indicate self applications tested programmed carefully failure atomicity mind 
contrast java results exhibit different trend 
proportion pure failure non atomic pretty high averages considered applications 
proportion conditional failure non atomic methods smaller significant 
relatively high numbers tell system needed programmer eliminate potential problems manually automatically making methods failure atomic 
input fault injector managed reduce number pure failure non atomic methods java linkedlist application representing calls calls just trivial modification code identifying methods throw exceptions see section 
figures java represent data weighted number invocations method 
percent distribution methods xml xml xml xml xml atomic pure non atomic cond 
non atomic percent distribution method calls xml xml xml xml xml atomic pure non atomic cond 
non atomic method classification percentage number methods defined method calls application 
percent distribution methods linkedlist rbtree regexp atomic pure non atomic cond 
non atomic percent distribution method calls linkedlist rbtree regexp atomic pure non atomic cond 
non atomic method classification percentage number methods defined method calls java application 
results show failure non atomic methods called proportionally frequently failure atomic methods 
trend may explained fact bugs methods frequently called discovered fixed developer 
problems methods infrequently called harder detect normal operation tool quite valuable helping programmer find remaining bugs program 
example pure failure non atomic methods xml applications called rarely probably discovered automated exception injections system 
shows proportion classes test applications failure atomic contain methods pure failure non atomic contain pure failure non atomic method conditional failure non atomic classes 
results clearly demonstrate failure non atomic methods confined just classes spread significant proportion classes tests java tests 
fault masking results performance automated masking mechanism highly dependent frequency calls transformed methods see 
obviously pay higher performance penalty percentage calls transformed methods increases 
overhead grows size checkpoints 
upper bound size objects overhead bounded 
programs investigated observed checkpoint sizes percentage failure non atomic method calls remain small 
example largest percentage calls failure non atomic methods applications 
java programs pure non atomic methods easily render failure atomic performing trivial modifications accounted calls 
long object sizes percentage percent overhead xml xml xml distribution classes xml xml atomic pure non atomic cond 
non atomic percent distribution classes rbtree linkedlist regexp distribution classes percentage number classes defined java applications 
percentage atomic implementation object size bytes performance overhead masking function checkpointed object size percentage failure atomic method calls 
data point median runs processing time method original program 
failure non atomic method calls reasonably small obtain reasonable performance 
large object sizes copy write mechanisms speed checkpointing 
high ratios failure non atomic method calls preferable detection phase system manually correct failure non atomic methods possible 
introduced failure atomicity problem proposed system addresses 
system automatically detect methods failure nonatomic automatically turn failure atomic methods 
discover failure non atomic methods inject exceptions method executed application runtime compare state objects atomic pure non atomic cond 
non atomic method call exception 
methods cause object enter inconsistent state classified failure non atomic 
transform failure non atomic methods failure atomic methods take snapshot state object method called exception thrown reinstate state propagating exception caller 
exception injection system alerts programmer finding failure non atomic methods 
situations programmer correct problem applying simple modifications code reordering couple statements 
cases elaborate modifications required implement failure atomicity situations programmer automatic masking mechanisms provided system 
implemented infrastructure detecting masking non atomic exception handling java 
experimental results shown system effective great help developer robust applications 
exception handling st century programming language proceedings 
acm ada letters xxi 
karlsson 
generic object oriented fault injection tool 
proc 
international conference dependable systems networks dsn gothenburg sweden 
fabre laprie martin powell 
fault injection dependability validation methodology applications 
ieee trans 
software eng 
xu randell 
evolution recovery block concept 
lyu editor software fault tolerance pages 
wiley 
sastry 
fig prototype tool online verification recovery mechanisms 
acm ics workshop ney york nc june 

exception handling false sense security 
report november december 
joao carreira madeira joao gabriel silva 
xception technique experimental evaluation dependability modern computers 
software engineering 
cristian 
exception handling tolerance software faults 
lyu editor software fault tolerance pages 
wiley 

fabre rodriguez 

building dependable cots microkernel systems 
pacific rim international symposium dependable computing pages los angeles california december 
fetzer 
self component data flow oriented framework pervasive dependability 
eighth ieee international workshop object oriented real time dependable systems words jan 
fetzer xiao :10.1.1.14.1387
automated approach increasing robustness libraries 
international conference dependable systems networks washington dc june 
apache software foundation 
byte code engineering library 
jakarta apache org 
apache software foundation 
regexp 
jakarta apache org regexp 
john goodenough 
exception handling issues proposed notation 
communications acm 
goto 
cint interpreter available root cern ch root cint html 
han shin rosenberg 
doctor integrated software fault injection environment distributed real time systems 
definition robust jargon file 
kanawati kanawati abraham 
ferrari tool validation system dependability properties 
proc 
nd international symposium fault tolerant computing ftcs pages boston massachusetts 
ieee 
gregor kiczales john lamping anurag chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
mehmet aks satoshi matsuoka editors proceedings european conference object oriented programming volume pages 
springer verlag berlin heidelberg new york 
nathan philip koopman jr daniel siewiorek 
automated robustness testing shelf software components 
symposium fault tolerant computing ftcs pages 
doug lea 
collections 
gee cs edu dl classes collections 
martin cristina lopes 
study exception detection handling aspect oriented programming 
proceedings nd international conference software engineering pages 
acm press 
maxion 
eliminating exception handling errors dependability cases comparative empirical study 
ieee transactions software engineering 
melliar smith randell 
software reliability role programmed exception handling 
proceedings acm conference language design reliable software pages 
mitchell burns wellings 
exceptions 
acm ada letters xxi 
dony knudsen tripathi editors 
advances exception handling techniques 
springer verlag 
segall siewiorek barton robinson lin 
fiat fault injection automated testing environment 
proc 
th int 
symp 
fault tolerant computing ftcs pages tokyo japan june 
olaf andreas gal wolfgang 
aspect oriented extension 
proceedings th international conference technology object oriented languages systems tools pacific sydney australia february 
