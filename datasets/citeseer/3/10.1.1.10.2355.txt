quality oriented handling exceptions web service cooperative processes ulrike greiner rahm department computer science university leipzig greiner rahm informatik uni leipzig de web services increasingly integrate heterogeneous autonomous applications cross organizational cooperations 
key problem support high execution quality complex cooperative processes business health care 
important aspect received little attention far dynamic handling exceptions process execution 
address problem propose rule approach automatically control enforce quality constraints web service cooperative processes 
cooperation companies organizations leads rise cooperative business processes integrating autonomous heterogeneous applications different organizations 
web services increasingly facilitate application integration 
web services encapsulate applications provide machine readable xml interface application calls allowing service providers preserve autonomy 
currently web services typically realize simple functions database queries 
encapsulate complex legacy applications entire workflows 
implement real world cooperative processes large number web services different complexity independent providers may integrated 
instance collaborative fulfillment process different partners cooperate fulfill customer order assembling pc specified delivery time quality constraints 
examples include treatment patient different physicians hospitals travel booking process containing services booking flight hotel ensuring processes reliably serve purpose challenging due high degree autonomy heterogeneity cooperation partners 
implies achieving high quality web service execution affected various quality characteristics services response time cost location constraints service input output parameters price limits product configurations delivery deadlines 
supporting quality service web services considerable interest 
studies focus dynamic selection best provider particular web service dynamic resource management load balancing support sufficiently fast web service execution 
proposes semantic service descriptions improve dynamic service selection 
researchers studied cooperative business processes form workflows assuming tight coupling cooperation partners 
newer studies address web service cooperative processes offer autonomy partners 
approaches lack flexible exception handling mechanisms support execution quality cooperative processes 
bpel ws business process execution language web services proposed standard defining business processes integration web services 
supports basic exception handling checking predefined fault messages time outs occur web services particular process steps 
exceptions handled calling compensating alternative services 
exceptions covered fault messages violations quality constraints occur predefined process steps handled adequately 
flexible exception handling approach needed adequately support execution quality robustness cooperative processes 
new approach dynamic exception handling web service processes supports specification quality constraints services addition conditions service may offer 
rule approach handle exceptions violation constraints events service faults occurring process execution 
section give overview web flow architecture implementing new exception handling approach dedicated component different web service process engines 
section presents classification quality constraints supported 
dynamic exception handling discussed section section closes outlook 
web flow architecture web flow system aims offering quality support cooperative business processes integrating web services available locally provided external partners 
separates monitoring exception handling functionality dedicated component max monitoring exception handling 
allow generic solution combination different process execution engines definition execution cooperative processes see fig 

process execution engine uses web service environment call local external web services encapsulating simple application programs entire workflows 
alternatively external services may called process engine partner 
services assumed provide wsdl web service description language interface necessary wrapper workflows 
cooperative processes may specified major cooperation models 
simple cooperation model cooperative process corresponds workflow activities may refer external web services 
providers integrated services know process 
complex cooperation model involved partners agree cooperative process including services order called 
partners equivalent functionality interact peer peer fashion 
implies reduced autonomy changes cooperative process coordinated partners 
web flow support cooperation models model supported web service web flow max process database web flow metadata process execution engine editor runtime web service environment web services web service search constraint rule definition constraint event monitoring rule exception handling logging wrapper workflow system partner fig 

web flow architecture uddi directory partner web flow max process engine partner web service environment functionality second exploiting direct communication process engines fig 

initially focus simple cooperation model partner controlling cooperative process 
approach supports maximal autonomy service providers implies quality monitoring exception handling largely performed node controlling cooperative process 
web flow max component core parts constraint rule definition part specify quality constraints service calls exception handling rules events occurring process execution 
specification done manually process definition 
constraint event monitoring checks called services violate quality constraint event fault message specific database update occurs 
exception handling part uses specified rules determine event constitutes exception exception handled 
main goal exception handling successfully continue cooperative process quality constraints met largest extent possible 
may require actions execution additional services adapting process compensate effects exception 
logging component records events exceptions performed handling 
goal data process optimization particular provide recommendations manual exception handling eventually provide input defining new exception handling rules 
components architecture web service search service directories finding appropriate providers task executed web flow metadata repository maintaining metadata constraints rules quality monitoring exception handling 
information cooperative processes services derived process database 
web flow max component uses multilevel approach exception handling 
exception handling may take place site web service executed web service web flow max component partner 
instance web service searching offers particular price range may check offers returning perform new search suitable results 
mechanisms typically invisible service user require sophisticated web service assumed 
additional levels exception handling take place cooperative process web flow max component site invoking remote web service 
web flow max exception handling largely independent respective web service implementations legacy applications wrapped web services process specifications enables enforcement general exception handling policies 
rule approach advantage standard process definition clearly separated exception rules facilitating readability maintenance 
furthermore necessary actions derived exception really occurs changes business policies laws taken account changes process definition 
quality constraints analysis different cooperative business process scenarios previous constraint classifications identified types web quality constraints supported web flow metadata constraints refer conditions description web services services uddi universal description discovery integration wsdl metadata 
constraints restrict different aspects provider service specific companies specific geographic locations 
fee may paid service cost constraint 
execution constraints refer conditions physical execution web services particular response time limits maximal number re trials failed executions 
response time constraints specify maximal waiting time answer service fixed point time date time interval 
input constraints pose conditions input parameters web service call 
result constraints specify conditions result web service execution 
conditions typically refer xml documents returned service 
check delivery time price product acceptable range returned product configuration matches user requirements 
metadata constraints refer static information specified service registered 
constraints primarily useful service selection find suitable service process execution exception occurred 
types constraints dynamic sense refer information related actual execution web services specification 
primary rel service name operation name rc scope strictness high parameter name type input reservation price parameter name type output operation 
service fig 

sample result constraint dynamic exception handling 
additional properties characterize quality constraints monitoring dynamic quality constraints response time input result constraints may monitored consumer side provider side service 
alternative typical simple cooperation model preserving high autonomy service providers 
complex cooperation model may support approaches 
strictness constraints may mandatory desirable high vs low strictness 
service violating constraint type may useful 
scope quality constraints typically refer particular service service operation may relate particular process user 
addition may global constraints applying services enforce regulations eligible service providers cooperation partners specify default value maximal response times 
constraint may contextdependent apply service process certain conditions depending preceding service calls 
instance medical context allowed ranges blood value may depend drugs applied 
web flow declarative xml specification defined type quality constraint 
constraints specified logical comparison predicates combined complex condition boolean operators 
xml fragment fig 
shows operation specific result constraint specifies price reserved hotel room equal maximal price specified user 
check constraint output document operation compared input document previously call web service 
data input document stored service returns response constraint evaluated 
tag specifies part document specified parameter tag evaluation 
quality constraints defined constraint rule definition component web flow max maintained web flow metadata repository 
service operation specific quality constraints saved web flow extended service description 
process specific constraints part web flow extended process description cooperative process 
global constraints maintained separately 
dynamic exception handling dynamic exception handling web flow rule approach event condition action eca rules active database systems 
events may result exception include time outs web service calls reception web service output fault messages manual notifications mail phone call 
furthermore database updates database customer data appointments events 
events detected constraint event monitoring web flow max component 
observes messages sent received process engine process execution 
optional condition part rule check various quality constraints specify additional conditions web flow logging information metadata need hold event results exception 
useful express context dependent constraints 
query processor database engine check metadata input result constraints 
violation response time constraint detected monitoring component response received synchronous service call deadline expired 
execution constraint specifying maximal number re trials checked web flow logging information 
action part specifies exception handled 
possibilities include delegating exception handling respective process manual reaction search alternative web service invocation particular web service process abort dynamic adaptation calling process adding deleting activities 
web flow default rule created dynamic quality constraint specifying user notified constraint violated 
rules manually edited specify alternative automatic reactions 
fig 
shows example rule specifying alternative service operation operation service called result constraint named rc fig 
violated service called times 
rule priorities priority part determine order rule execution rules apply event highest priority 
event processing includes logging event checking relevant rules 
performed soon event detected constraint event monitoring component web flow max 
rule event specifying automatically executable action web flow execute action 
execution fails manual event reception output message condition violation constraint rc iteration action service priority fig 

sample exception handling rule reaction needed 
reduce dependence manual exception handling intend evaluate logged successful exception handling steps 
exception occurs asking manual reaction due default rule quality constraints logged information searched actions taken similar exception cases past user 
difficulty step find appropriate metrics similarity exceptions account service called parameter values support high execution quality web service cooperative processes dynamic handling exceptions needed 
web flow approach specification variety quality constraints heterogeneous autonomous web services 
rule monitoring exception handling component automatically deals exceptions violation quality constraints service faults 
currently implementing monitoring exception handling logging algorithms web flow max component 
intend evaluate approach cross organizational processes business domain distributed health care scenarios 
supported german research association ra 

chappell java web services 
reilly associates 

kemper reliable web service execution deployment dynamic environments 
benatallah shan 
eds tes 
springer verlag berlin heidelberg 
schuler weber schuldt schek peer peer process execution osiris 
proc 
international conference service oriented computing 
keller ludwig framework specifying monitoring service level agreements web services 
electr 
commerce research 
daml coalition daml web service description semantic web 
proc 
international semantic web conference iswc italy june 
van der aalst weske approach interorganizational workflows 
proc 
caise 
grefen aberer ludwig crossflow cross organizational workflow management service outsourcing dynamic virtual enterprises 
ieee bull 
tech 
comm 
data engineering 
reichert bauer dadam workflow anwendungen mit adept 

ed proc 

gesch grundlagen anwendungen 
klagenfurt 
luo sheth kochut arpinar exception handling conflict resolution cross organizational workflows 
distributed parallel databases 
casati shan dynamic adaptive composition services 
inf 
systems 
chiu cheung li till workflow view driven cross organizational interoperability web service environment 
proc 
web services business semantic web caise international workshop wes canada 
andrews business process execution language web services version may 
www ibm com developerworks library ws bpel 
christensen web services description language wsdl 
www org tr wsdl 
uddi version july 
www oasis open org committees uddi spec doc htm 
paton 
ed active rules database systems 
springer verlag new york 
