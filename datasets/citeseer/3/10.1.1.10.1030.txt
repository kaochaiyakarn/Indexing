parrot application environment data intensive computing preprint version douglas thain miron livny computer sciences department university wisconsin 
distributed computing continues alphabet soup services protocols managing computation storage 
live environment applications require middleware transparently adapt standard interfaces new distributed systems middleware known interposition agent 
lessons learned interposition agents progressive study design possibilities 
performance important concern pay special attention tangible issues portability reliability compatibility 
comparison methods interposition select method debugger trap slowest reliable 
method implement complete interposition agent parrot splices existing remote systems namespace standard applications 
primary design problem parrot mapping fixed application semantics semantics available systems 
offer detailed discussion errors unexpected conditions carefully managed order keep mapping intact 
conclude evaluation performance protocols employed parrot benchmark demonstrate semantic differences consequences performance 
key words 
adaptive middleware error diagnosis interposition agents virtual machines 


field distributed computing produced countless systems harnessing remote processors accessing remote data 
despite intentions designers single system achieved universal acceptance deployment 
carries strengths weakness performance manageability reliability 
renewed interest world wide computational systems increasing number protocols interfaces play 
complex ecology distributed systems stay 
result model distributed computing shown 
center lie ordinary applications built standard interfaces posix 
lie number batch systems manage processors interact users deal failures execution 
batch system interacts application simple interfaces main exit 
lie number services organize communicate remote memory disks tapes 
ordinary operating system os transforms application explicit reads writes low level block network operations compose local distributed file system 
attaching new service traditional os trivial task 
principle extensible os received attention research community production operating systems limited facilities extension usually requiring kernel modifications administrator privileges 
may acceptable personal computer requirement difficult impossible provide custom naming services applications visiting borrowed computing environment mainframe commodity computing cluster opportunistic workgroup 
remedy situation advocate interposition agents 
devices transform standard interfaces remote protocols normally research supported lawrence landweber ncr fellowship distributed systems 
thain livny operating system 
effect agent allows application bring filesystem namespace goes 
releases dependence details execution site preserving standard interfaces 
addition agent tap naming services transform private names fully qualified names relevant larger system 
distributed computing services condor pbs lsf local operating system common process interface main exit abort kill sleep load interaction cpu io practical lessons learned years building deploying interposition agents condor project 
notion agents unique condor seen relatively little production systems :10.1.1.35.5918
due variety technical semantic difficulties arise connecting real systems 
application process progressive design study explores problems explains solutions 
detailed study open close read write methods interposition common interface experience building deploying 
re parrot effective impractical privilege required 
compare chirp ftp nest rfio dcap performance functionality methods giving particular attention distributed services portability reliability 
particular fig 

model concentrate method explored detail debugger trap 
method employed idealized operating systems requires additional techniques order provide acceptable performance popular operating systems limited debugging capabilities linux 
debugger trap focus design parrot interposition agent splices remote systems filesystem space ordinary applications 
central problem design agent semantic problem mapping quite identical interfaces 
outgoing mapping usually quite simple read get write put forth 
real difficulty lies interpreting large space return values remote services 
new kinds failure introduced servers crash credentials expire disks fill 
trivial transformations application standard interface lead brittle frustrating experience user 
corollary observation access computation storage fully divorced 
notions design encourage partition distributed systems activities computation storage 
interposition agent serves connection concerns operating system kernel manages types devices mediate interaction bypassing application 
condensed version workshop 
due space limitations omitted number sections details indicated footnotes 
interested reader may find details original technical parrot application environment 
internal techniques external techniques poly 
static dyn 
binary debug remote kernel exten 
link link rewrite trap 
callout scope library static dynamic dynamic setuid burden rewrite relink identify identify run command superuser modify os layer fixed syscall fs ops syscall init fini hard hard hard hard easy impossible easy aff 
linker debug limited secure find holes easy hard hard hard easy easy easy porting easy hard hard hard medium easy medium report 
fig 

properties interposition techniques 
interposition techniques compared 
techniques services application underlying system 
particular strengths weaknesses 
summarizes interposition techniques 
may broken broad categories internal external 
internal techniques modify memory space application process fashion 
techniques flexible efficient applied arbitrary processes 
external techniques capture modify operations visible outside application address space 
techniques flexible higher overhead applied nearly process 
condor project experience building deploying internal techniques external technique debugger trap 
remaining external techniques describe relevant publications 
simplest technique polymorphic extension 
application structure amenable extension may simply add new implementation existing interface 
user small code changes invoke appropriate constructor factory order produce new object 
technique condor java universe connect ordinary inputstream outputstream secure remote proxy 
general purpose libraries sfio 
static library technique involves creating replacement existing library 
user obliged re link application new library 
example condor standard universe provides drop replacement standard library provides transparent checkpointing back submission site fully emulating user home environment 
dynamic library technique involves creating replacement existing library 
linker controls user may direct new library place old dynamically linked library 
technique dcache implementations socks bypass toolkit 
binary rewriting technique involves modifying machine code process runtime redirect flow control 
requires detailed knowledge cpu architecture hidden abstraction paradyn toolkit :10.1.1.41.2316
technique hijack process runtime 
traditional debuggers specialized operating system interface stopping examining resuming process 
debugger trap technique uses omitted example applications interposition agents 
thain livny interface merely examining process debugging agent traps system call provides implementation places result back target process intended system call 
example technique ufo allows access ftp resources file fetching 
difficulty debugger trap tools compete access single process debug interface 
tool daemon protocol tdp provides interface managing tools distributed system 
remote filesystem may interposition agent simply modifying file server 
nfs popular choice technique legion object space translator slice 
short modifying kernel may install time kernel callout permits filesystem serviced user level process 
facility ground microkernel added afterthought case implementations afs 
internal techniques may applied certain kinds programs 
polymorphic extension static linking apply programs rebuilt 
dynamic library technique requires replaced library dynamic binary rewriting paradyn toolkit requires presence dynamic loader particular library dynamic 
external techniques apply process exception debugging trap prevents traced process elevating privilege level setuid feature 
burden user techniques varies widely 
example polymorphic extension requires small code changes static linking requires rebuilding 
techniques may possible packaged commercial software 
dynamic linking binary rewriting require user understand programs dynamically linked 
standard system utilities dynamic commercial packages static 
experience users surprised quite frustrated unexpectedly static application ignores interposition agent 
remote filesystem kernel callout techniques impose smallest user burden require cooperative system administrator necessary changes 
debugger trap imposes small burden user simply invoke agent executable 
significant difference techniques ability trap different layers software 
internal techniques may applied layer code 
example bypass instrument application calls standard memory allocator window system library opengl library 
contrast external techniques fixed particular interfaces 
debugger trap operates physical system calls remote filesystem kernel callout limited certain filesystem operations 
differences techniques affect design code attach 
consider matter implementing directory listing remote device 
internal techniques capable intercepting library calls open 
easily mapped remote file access protocols generally separate procedures accessing files directories 
unix interface unifies files directories accessed system call open 
external techniques accept open file directory defer binding remote operation read invoked 
choice interposition layer affects design agent 
external techniques differ range operations able parrot application environment 
trap 
debugger trap modify system call remote filesystem kernel callout techniques limited filesystem operations 
particular remote filesystem may restrictions 
example stateless nfs protocol representation system calls open close 
access information interposed service provide semantics significantly different provided nfs 
file system interfaces express binding individual operations processes initiate 
remote filesystem agent sees read write process id issued 
information difficult impossible performing accounting purposes security performance 
number important activities take place initialization finalization process dynamic libraries loaded constructors destructors automatic routines run streams created flushed 
transitions libraries resources process state flux 
complicates implementation internal agents wish intercept activity 
example application may perform global constructor destructor 
internal agent rely global constructors destructors ordering enforced application agent 
likewise dynamically loaded agent interpose actions dynamic linker 
programmer agents exercise care constructing agent selecting libraries invoked agent 
code time consuming create debug 
activities easily manipulated external techniques 
example external techniques easily trap modify activities dynamic linker 
code complete fully debugged 
production deployment interposition agents requires users permitted debug applications agents 
techniques admit debugging user programs complication arising debugger trap 
obvious reasons single process debugged processes debugger attached instrumented process 
debugger trap agent manage entire process tree user may agent invoke debugger may invoke application 
debugger operations may trapped just system call passed application supervision agent 
interposition agents may security convenience 
agent may provide sandbox prevents untrusted application modifying external data permitted access 
internal techniques suitable security purpose may easily subverted program invokes system calls directly passing libraries 
external techniques fooled way suitable security 
related security matter hole detection 
interposition agent may fail trap operation attempted application 
may simply bug agent may interface evolved time application deprecated newly added interface agent aware 
internal agents especially sensitive bug 
standard libraries develop interfaces added deleted modified library routines may invoke system calls directly passing corresponding public interface function 
example fopen may invoke open system call passing open function 
event causes general chaos application agent resulting crashes worse silent output errors 
problem occurs external agents 
thain livny getpid stat open close read kb bandwidth mb rewrite mb static mb dynamic mb debug mb fig 

overhead interposition techniques interfaces change unexpected event detected unknown system call 
agent may terminate application indicate exact problem 
problem hole detection underestimated 
experience significant operating system upgrade includes changes standard libraries turn require modifications internal trapping techniques 
internal agents rarely forward compatible 
identifying fixing holes time consuming 
missed operation unknown spend long hours debugger see expected course application differs actual behavior 
discovered new entry point added agent 
treatment simple diagnosis difficult 
learned lesson hard way porting condor remote system call library bypass toolkit wide variety unix platforms 
reasons described porting follows 
polymorphic extension remote filesystem quite easy build new system 
debugger trap kernel callout significant system dependent components ported operating system nature stability interfaces tractable task 
remaining techniques static linking dynamic linking binary rewriting viewed significant porting challenge revisited minor operating system upgrade 
compares performance transparent interposition techniques 
constructed benchmark program timed iterations various system calls mhz athlon xp running linux 
available bandwidth measured reading mb file sequentially mb blocks 
mean standard deviation cycles benchmark shown 
file operations performed existing file temporary file system 
case gives performance benchmark agent attached remaining show benchmark modified interposition technique 
case constructed minimal agent trap system calls invoke modification 
seen binary rewriting static linking methods add significant cost application 
dynamic method overhead order microseconds manage structure potentially multiple agents invoke function pointer 
overheads quickly dominated cost moving data process 
debugger trap greatest overhead techniques ranging slowdown getpid slowdown writing kb 
importantly bandwidth measurement demonstrates debugger trap achieves half unmodified bandwidth 
fairly noted latency bandwidth dominated latency parrot application environment 
fig 

interactive browsing parrot bandwidth accessing remote services commodity networks 
security reliability come measurable cost 

parrot 
parrot interposition agent attaches standard applications variety distributed systems way debugger trap described 
protocol normal filesystem entry new top level directory bearing name protocol 
addition optional may redirects parts filesystem namespace external paths 
shows parrot standard tools manipulate files stored mass storage server mss national center supercomputing applications ncsa grid security infrastructure gsi variant file transfer protocol ftp 
parrot equipped variety drivers communicating external storage systems particular features limitations 
simplest local driver simply passes operations underlying operating system 
chirp protocol designed authors earlier provide remote semantics similar posix 
standalone chirp server distributed parrot 
file transfer protocol ftp heavy early days internet 
simplicity allows wide variety implementations purposes results unfortunate degree imprecision expand 
parrot supports secure gsi variant ftp 
nest protocol native language nest storage appliance provides array authentication allocation accounting mechanisms storage may shared multiple transient users 
rfio dcap protocols designed high energy physics community provide access hierarchical mass storage devices castor dcache 
parrot preserve posix semantics sake application foremost concern ability protocols provide necessary semantics 
performance secondary concern affected significantly semantic issues 
summary semantics protocols 

errors boundary conditions 
error handling pervasive problem design traditional operating systems 
new models file interaction developed attending error modes added existing systems expanding software interface level 
example addition distributed file systems unix kernel created new possibility stale file omitted detailed description debugger trap 
omitted details various protocols supported parrot 
thain livny name binding discipline metadata connections posix open close random direct chirp open close random direct client ftp get put sequential varies indirect file nest get put random indirect client rfio open close random direct file op dcap open close random direct client fig 

protocol compatibility posix handle represented error 
error mode discovered lowest layers kernel value added device driver interface file system interface standard library expected handled directly applications 
luxury interposition agent 
applications existing interface desire ability change 
lucky may re error analogous identical purpose 
underlying device drivers generate errors ranging vague file system error precise server certification authority trusted unlimited space errors lower layers transformed fixed space errors available application 
example device drivers necessary machinery carry user possible requests provide vague errors supported operation fails 
ftp driver allows application read file get command 
get command fails available information error code encompasses sort file system error including file access denied directory posix interface permit error value requires specific reason 
error code returned application 
technique dealing problem interview service order narrow cause error manner similar expert system 
suppose attempt retrieve file ftp get operation 
get fail may hypothesize named file directory 
hypothesis may tested change directory cwd command 
succeeds hypothesis true may return precise error file fails propose hypothesis test 
parrot performs number step interviews response variety ftp errors 
connection structure remote protocol implications semantics performance 
chirp nest dcap require tcp connection client server 
ftp rfio require new connection file opened 
addition rfio requires new connection operation performed non open file 
file system operations metadata queries result extraordinary number connections short amount time 
ignoring latency penalties activity large number tcp connections consume resources clients servers network devices address translators 
omitted examples error transformation 
omitted discussion interface parrot batch systems 
parrot application environment 

performance 
deferred discussion performance point may see performance effects semantic constraints 
possible write applications explicitly remote protocols efficient manner parrot provide conservative complete implementations posix operations 
example application may need know size file requests information stat parrot obliged fill structure possibly great cost 
bandwidth mb block size ftp rfio dcap nest chirp fig 

throughput mb file copy services discussed exception chirp designed primarily efficient high volume data movement 
demonstrated compares throughput protocols various block sizes 
throughput measured copying mb file remote storage device standard cp command equipped parrot varying default block size controlled stat emulation described 
course absolute values artifact system seen protocols tuned optimal performance 
exception chirp reaches half available bandwidth 
strict rpc nature required posix semantics chirp server extract underlying filesystem data necessary supply immediate read 
technically feasible server read ahead anticipation operation data pulled server address space invalidated actors file semantically incorrect 
throughput dcap block size kb unintended interaction default tcp buffer size kb 
developers dcap aware artifact recommend changing block size buffer size avoid 
reasonable advice protocols require tuning kind 
benchmarks latency posix equivalent operations protocol 
measurements obtained manner identical indicated servers residing system 
notice latencies measured milliseconds gave microseconds 
hasten note comparison certain sense fair data servers provide vastly different services performance differences demonstrate cost service cleverness implementation 
example chirp ftp achieve low latencies lightweight translation layers ordinary file system 
nest somewhat higher latency provides abstraction virtual file system user namespace access control lists storage allocation system built existing filesystem 
cost due necessary metadata log records activity stored directly underlying file system 
rfio dcap designed interact mass storage systems single operations may result gigabytes activity disk cache possibly moving files tape 
context low latency thain livny proto stat open close read kb write kb bandwidth chirp ms mb ftp ms random access mb nest ms mb rfio ms mb dcap ms mb fig 

performance protocols local area network concern 
said things may observed table 
ftp benefitted years optimizations cost stat greater chirp need multiple round trips fill necessary details 
additional latency open close due multiple round trips name establish new tcp connection 
rfio dcap higher latencies single byte reads writes kb reads writes 
due buffering delays small operations anticipation data 
importantly remote operations exceed latency debugger trap orders magnitude 
comfortable previous decision sacrifice performance favor reliability interposition technique 
conclude similar andrew benchmark 
andrew benchmark consists series operations parrot source tree consists directories files totaling kb 
prepare source tree moved remote device 
copy stage tree duplicated remote device 
list stage detailed list ls lr tree 
scan stage files tree searched grep text string 
stage software built 
perspective involves sequential read source file sequential write object file series random reads writes create executables 
delete stage tree deleted 
compares performance andrew benchmark variety configurations 
cases horizontal rule measure cost layer software added parrot chirp server host chirp server local area network 
surprisingly cost separating computation storage high 
copying data slower network slowdown stage quite acceptable intend increase throughput remote parallelization 
cases adjacent rule change enabling caching 
expected cost unnecessary duplication causes increase copying source tree difference easily stage cache eliminates multiple random necessary link executables 
list delete stages involve directory structure metadata access affected cache 
cases horizontal rule explore various protocols run benchmark 
cases caching enabled order eliminate cost random access discussed 
dcap protocol semantically unable run benchmark provide necessary access directories 
rfio protocol semantically able run benchmark high frequency filesystem operations results large number tcp connections quickly exhausts networking resources client server preventing benchmark running 
chirp ftp nest able complete parrot application environment 
dist proto copy list scan delete local local sec sec local chirp sec sec lan chirp sec sec lan chirp sec sec lan ftp sec sec lan nest sec sec lan rfio overwhelmed repeated connections lan dcap support directories nfs fig 

performance andrew benchmark benchmark 
nest results high variance due delays incurred metadata log periodically compressed 
difference performance chirp ftp nest primarily attributable cost metadata lookups 
stages heavy stat multiple round trips necessary implement completely ftp nest striking cumulative effect 


interposition agents provide stable platform bringing old applications new environments 
outlined difficulties encountered solutions constructed course building deploying types agents condor project 
shown linux debugger trap limitations put 
interest grows virtual machines distributed systems need powerful low overhead methods interposition grows 
appropriate interface task open research topic 
notion virtualizing multiplexing existing interface common technique plague errors boundary conditions suffered silently practitioners 
problems rarely publicized aware excellent exceptions 
metz describes berkeley sockets interface surprisingly hard multiplex 
garfinkel describes subtle semantic problems sandboxing untrusted applications 
information www cs wisc edu thain research parrot 
acknowledgments 
john bent sander help deploying debugging parrot 
victor wrote mechanism binary rewriting 
alain roy gave thoughtful comments early drafts 
accetta baron bolosky golub rashid tevanian young mach new kernel foundation unix development proceedings usenix summer technical conference atlanta ga 
alexandrov schauser ufo personal global file system user level extensions operating system acm transactions computer systems pp 

allcock chervenak foster kesselman tuecke protocols services distributed data intensive science proceedings advanced computing analysis techniques physics research pp 

anderson chase vahdat interposed request routing scalable network storage proceedings fourth symposium operating systems design implementation 
barring baud durand castor project status proceedings computing high energy physics padua italy 
thain livny bent leroy roy stanley arpaci dusseau arpaci dusseau livny flexibility manageability performance grid storage appliance proceedings eleventh ieee symposium high performance distributed computing edinburgh scotland july 
cheriton uio uniform system interface distributed systems acm transactions computer systems pp 

ernst fuhrmann waldman dcache distributed storage data caching system proceedings computing high energy physics beijing china 
foster kesselman tsudik tuecke security architecture computational grids proceedings th acm conference computer communications security conference pp 

garfinkel traps pitfalls practical problems system call interposition security tools proceedings network distributed systems security symposium february 
howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system acm transactions computer systems pp 

hunt detours binary interception win functions tech 
report msr tr microsoft research february 
jones interposition agents transparently interposing user code system interface proceedings th acm symposium operating systems principles 
kleiman vnodes architecture multiple file system types sun unix proceedings usenix technical conference pp 

leech lee jones socks protocol version 
internet engineering task force request comments march 
metz protocol independence sockets api procedings usenix technical conference june 
miller callaghan hollingsworth paradyn parallel performance measurement tools ieee computer pp 

miller cortes livny tool daemon protocol tdp proceedings supercomputing phoenix az november 
small seltzer comparison os extension technologies proceedings usenix technical conference pp 

solomon litzkow supporting checkpointing process migration outside unix kernel proceedings usenix winter technical conference 
thain livny multiple bypass interposition agents distributed computing journal cluster computing pp 

error scope computational grid proceedings eleventh ieee symposium high performance distributed computing july 
parrot transparent user level middleware data intensive computing proceedings workshop adaptive grid middleware september 
parrot transparent user level middleware data intensive computing tech 
report computer sciences department university wisconsin december 

vo discipline method architecture reusable libraries software practice experience pp 

whitaker shaw gribble scale performance denali isolation kernel proceedings fifth symposium operating system design implementation boston ma december 
white grimshaw nguyen grid file access legion model proceedings ninth ieee symposium high performance distributed computing august 
miller livny process hijacking proceedings eighth ieee international symposium high performance distributed computing 
